{"text": " Hi everybody, welcome to lesson 11. This is the third lesson in part 2, depending on how you count things. There's been a lesson A and a lesson B, it's kind of the fifth lesson in part 2, I don't know what it is. So we'll just stick to calling it lesson 11 and avoid getting too confused. I'm already confused. My goodness, I've got so much stuff to show you. I'm only going to show you a tiny fraction of the cool stuff that's been happening on the forum this week. But it's been amazing. I'm going to start by showing this beautiful video from John Robinson. I've never seen anything like this before. As you can see, it's very stable and it's really showing this beautiful movement between seasons. So what I did on the forum was I said to folks, hey you should try interpolating between prompts, which is what John did. And I also said you should try using the last image of the previous prompt interpolation as the initial image for the next prompt. And anyway, here it is. Came out beautifully. John was the first to get that working. So I was very excited about that. And the second one I wanted to show you is this really amazing work from Seb Derhi, Sebestien, who did something that I'd been thinking about as well. I'm really thrilled that he also thought about this. He noticed that this update we do, unconditional embeddings plus guidance times text embeddings minus unconditional embeddings, has a bit of a problem, which is that it gets big. To show you what I mean by it gets big, it's like, imagine that we've got a couple of vectors on this chart here. And so we've got, let's see, so we've got the original unconditional piece here. So we've got you. So let's say this is you. And then we add to that some amount of t minus you. So if we've got like t, let's say it's huge, right? And we've got you again. And the difference between those is the vector which goes here, right? Now you can see here that if there's a big difference between t and you, then the eventual update which actually happens is, oopsie daisy, I thought that was going to be an arrow. Let's try that again. The eventual update which happens is far bigger than the original update. And so it jumps too far. So this idea is basically to say, well, let's make it so that the update is no longer than the original unconditioned update would have been. And we're going to be talking more about norms later. But basically we scale it by the ratio of the norms. And what happens is we start with this astronaut and we move to this astronaut. And it's kind of, it's a subtle change, but you can see there's a lot more before, after, before, after, a lot more texture in the background. And on the earth, there's a lot more detail before, after. You see that? And even little things like before the bridal kind of reins, whatever, were pretty flimsy. Now they look quite proper. So it's made quite a big difference just to kind of get this scaling correct. So another example, there's a couple of other things that Sebastia tried, which I'll explain in a moment, but you can see how some of them actually resulted in changing the image. And this one's actually important because the poor horse used to be missing a leg and now it's not missing a leg, so that's good. And so here's the detailed one with its extra leg. So how did he do this? Well, so what he did was he started with this unconditioned prompt plus the guidance times the difference between the conditional and unconditioned. And then as we discussed, the next version, well actually the next version we then saw is to basically just take that prediction and scale it according to the difference in the lengths. So the norms is basically the length of the vectors. And so this is the second one I did in lesson nine. You'll see it's gone from here. So when we go from 1a to 1b, you can see here it's got, look at this, this boot's gone from nothing to having texture. This whatever the hell this thing is, suddenly it's got texture. And look, we've now got proper stars in the sky. It's made a really big difference. And then the second change is not just to rescale the whole prediction, but to rescale the update. When we rescale the update, it actually not surprisingly changes the image entirely because we're now changing the direction it goes. And so, I don't know, is this better than this? I mean, maybe, maybe not, but you know, I think so, you know, particularly because this was the difference that added the correct fourth leg to the horse before. And then we can do both. We can rescale the difference and then rescale the result. And then we get the best of both worlds. As you can see, big difference. We get a nice background. This weird thing on his back's actually become an arm. That's not what a foot looks like. That is what a foot looks like. So these little details make a big difference, as you can see. So this is a really cool, or two really cool new things. New things tend to have wrinkles though. Wrinkle number one is, after I shared on Twitter, Sebastian's approach, Ben Poole, who's Google Brain, I think, if I remember correctly, pointed out that this already exists. He thinks it's the same as what's shown in this paper, which is a diffusion model for text-to-speech. I haven't read the paper yet to check whether it's got all the different options or whether it's checked them all out like this. So maybe this is reinventing something that already existed and putting it into a new field, which would still be interesting. So hopefully folks on the forum, you can help figure out whether this paper is actually showing the same thing or not. And then the other interesting thing was John Robinson got back in touch on the forum and said, oh, actually that tree video doesn't actually do what we think it does at all. There's a bug in his code and despite the bug, it accidentally worked really well. So now we're in this interesting question of trying to figure out like, oh, why did we, how did he create such a beautiful video by mistake? And okay, so reverse engineering exactly what the bug did and then figuring out how to do that more intentionally. And this is great, right? It's really good to, you know, having a lot of people working on something and the bugs often, yeah, they tell us about new ideas. So that's very interesting. So what's this space? Well we find out what John actually did and how come it worked so well. And then something that I just saw like two hours ago on the forum, which I'd never thought of before, but I'd thought of something a little bit similar. Rakil Prashanth said like, well, what if we took this, so as you can see, all the students are really bouncing ideas of each other. It's like, oh, it's interesting. We're doing different things with a guidance scale. What if we take the guidance scale and rather than keeping it at 7.5 all the time, let's reduce it. And this is a little bit similar to something I suggested to John over a few weeks ago where I said he was doing some stuff with like modifying gradients based on additional loss functions. And I said to him, maybe you should just use them like occasionally at the start. Because I think the key thing is once the model kind of knows roughly what image it's trying to draw, even if it's noisy, you know, you can let it do its thing. And this is exactly what's happening here is Rakil's idea is to say, well, let's, let's decrease the guidance scale. So at the end it's basically zero. And so once it kind of is in going in the right direction, we let it do its thing. So this little doggie is with the normal 7.5 guidance scale. Now have a look, for example, at its eye here. It's pretty disin, uninteresting, pretty flat. And if I go to the next one, as you can see now, actually look at the eye. That's a proper eye. Before, totally glassy black. Now proper eye. Or like look at all this fur, very textured, previously very out of focus. So this is again a new technique. So I love this. You know, you, you folks are trying things out and some things are working and some things not working. And that's all, that's all good. I kind of feel like you're going to have to slow down because I'm having trouble keeping up with you all. But apart from that, this is great. Good work. I also wanted to mention on a different theme to check out Alex's notes on the, on the lesson, because I thought he's done a fantastic job of showing like how to, how to study, how to study a lesson. And so what Alex did, for example, was he made a list in his notes of all the different steps we did as we started the Frontenac Foundations. What is the library that it comes from, links to the documentation. And I know that Alex's background actually is history, you know, not, not computer science. And so, you know, for somebody moving into a different field like this, this is a great idea, you know, particularly to be able to like look at like, okay, what are all the things that I'm going to have to learn and read about? And then he did something which we always recommend, which is to try the lesson on a new dataset. And he very sensibly picked out the Fashion MNIST dataset, which is something we'll be using a lot in this course, because it's a lot like MNIST. And it's just different enough to be interesting. And so he described in his post or his notes how he went about doing that. And then something else I thought was interesting in his notes at the very end was he just jotted down my tips. It's very easy when I throw a tip out there to think, oh, that's interesting, that's good to know. And then it can disappear. So here's a good way to make sure you don't forget about all the little, the little tricks. And I think I've put those notes in the forum wiki, so you can, you can check them out if you've, if you'd like to learn from them as well. So I think this is a great role model. Good job, Alex. Okay, so. During the week, Jono taught us about a new paper that had just come out called DiffEdit. And he told us he thought this was an interesting paper. And it came out during the week, and I thought it might be good practice for us to try reading this paper together. So let's do that. So here's the paper, DiffEdit. And you'll find that probably the majority of papers that you come across in deep learning will take you to Archive. Archive is a preprint server. So these are models, these are papers that have not been peer reviewed. I would say in our field, we don't generally, or I certainly don't generally care about that at all, because we have code, we can try it, we can see things, whether it works or not. You know, we tend to be very, you know, most papers are very transparent about here's what we did and how we did it, and you can replicate it. And it gets a huge amount of peer review on Twitter. So if there's a problem, generally within 24 hours, somebody has pointed it out. So we use Archive a lot. And if you wait until it's been peer reviewed, you know, you'll be way out of date because this field is moving so quickly. So here it is on Archive, and we can read it by clicking on the PDF button. I don't do that. Instead I click on this little button up here, which is the Save to Zotero button. So I figured I'd show you like my preferred workflows. You don't have to do the same thing. There are different workflows, but here's one that I find works very well, which is Zotero is a piece of free software that you can download for Mac, Windows, Linux, and install a Chrome connector. Oh, Tanishka is saying the button's covered. All right. So in my taskbar, I have a button that I can click that says Save to Zotero. Sorry, not taskbar, Chrome menu bar. And when I click it, I'll show you what happens. So after I've downloaded this, the paper will automatically appear here in this software, which is Zotero. And so here it is, diffedit. And you can see it's told us, it's got here the abstract, the authors, where it came from. And so later on, I can go and like, if I want to check some detail, I can go back and see the URL. I can click on it, pops up. And so in this case, what I'm going to do is I'm going to double click on it. And that brings up the paper. Now the reason I like to read my papers in Zotero is that I can, you know, annotate them, edit them, tag them, put them in folders and so forth. And also add them to my kind of reading list directly from my web browser. So as you can see, you know, I've started this fast diffusion folder, which is actually a group library, which I share with the other folks working on this fast diffusion project that we're all doing together. And so we can all see the same paper library. So Maribu on YouTube chat is asking, is this better than Mendeley? Yeah, I used to use Mendeley and it's kind of gone downhill. I think Zotero is far, far better, but they're both very similar. Okay, so when you double click on it, it opens up and here is a paper. So reading a paper is always extremely intimidating. And so you just have to do it anyway. And you have to realize that your goal is not to understand every word. Your goal is to understand the basic idea well enough that, for example, when you look at the code, hopefully it comes with code, most things do, that you'll be able to kind of see how the code matches to it and that you could try writing your own code to implement parts of it yourself. So over on the left, you can open up the sidebar here. So I generally open up the table of contents and get a bit of a sense of, okay, so there's some experimental results, there's some theoretical results, introduction related work, okay, tells us about this new diffedit thing, some experiments. Okay, so that's a pretty standard approach that you would see in papers. So I would always start with the abstract. Okay, so what's it saying this does? So generally, it's going to be some background sentence or two about how interesting this field is. It's just saying, well, image generation is cool, which is fine. And then they're going to tell us what they're going to do, which is they're going to create something called diffedit. And so this is a, what is it for? It's going to use text condition diffusion models. So we know what those are now. That's what we've been using. That's where we type in some text and get back an image of that that matches the text. But this is going to be different. It's the task of semantic image editing. Okay, we don't know what that is yet. So let's put that aside and think, okay, let's make sure we understand that later. The goal is to edit an image based on a text query. Oh, okay. So we're going to edit an image based on text. How on earth would you do that? Ah, they're going to tell us right away what this is. Semantic image editing. It's an extension of image generation with an additional constraint, which is the generated image should be as similar as possible to the given input. And so generally, as they've done here, there's going to be a picture that shows us what's going on. And so in this picture, you can see here an example. Here's an input image. And originally it was attached to a caption, a bowl of fruits. Okay, we want to change this into a bowl of pears. So we type a bowl of pears and it generates, oh, a bowl of pears. Or we could change it from a bowl of fruit to a basket of fruits. And oh, it's become a basket of fruits. Okay, so I think I get the idea, right? What it's saying is that we can edit an image by typing what we want that image to represent. So this actually looks a lot like the paper that we looked at last week. So that's cool. So the abstract says that currently, so I guess there are current ways of doing this, but they require you to provide a mask. That means you have to basically draw the area you're replacing. Okay, so that sounds really annoying. But our main contribution, so what this paper does, is we automatically generate the mask. So they simply just type in the new query and get the new image. So that sounds actually really impressive. So if you read the abstract and you think, I don't care about doing that, then you can skip the paper, you know, or look at the results. And if the results don't look impressive, then just skip the paper. So that's kind of your first point where we can be like, okay, we're done. But in this case, this sounds great. The results look amazing. So I think we should keep going. Okay, it achieves data-theablating performance, of course, fine. We try some, right, whatever. So the introduction to a paper is going to try to give you a sense of, you know, what they're trying to do. And so this first paragraph here is just repeating what we've already read in the abstract and repeating what we see in figure one. So saying that we can take a text query like a basket of fruits, see the examples. All right, fine, we'll skip through there. So a key thing about academic papers is that they are full of citations. You should not expect to read all of them, because if you do, then to read each of those citations, that's full of citations, and then they're full of citations. And before you know it, you've read the entire academic literature, which has taken you 5,000 years. So for now, let's just recognize that it says text-conditional image generation is undergoing revolution. Here's some examples. Well, fine, we actually already know that. Okay, Dali's call, latent diffusion, that's what we've been using, that's call. Imogen, apparently that's call. So cool. All right, so we kind of know that. So generally, there's this like, okay, our area that we're working on is important. In this case, we already agree it's important, so we can skip through it pretty quickly. They've asked vast amounts of data are used, yes, we know. Okay, so diffusion models are interesting, yes, we know that. They denoise starting from Gaussian noise, we know that. So you can see like, there's a lot of stuff, once you're kind of in the field, you can skip over pretty quickly. You can guide it using clip guidance, yeah, that's what we've been doing, we know about that. Wait, this is new. Or by in-painting, by copy-pasting pixel values outside a mask. All right, so there's a new technique that we haven't done. But I think it makes a lot of intuitive sense, that is during that diffusion process, if there are some pixels you don't want to change, such as all the ones that aren't orange here, you can just paste them from the original after each stage of the diffusion. All right, that makes perfect sense. If I want to know more about that, I could always look at this paper, but I don't think I do for now. Okay, and again, it's just repeating something they've already told us, that they require us to provide a mask, so it's a bit of a problem. And then, you know, this is interesting, it also says that when you mask out an area, that's a problem, because if you're trying to, for example, change a dog into a cat, you want to keep the animal's color and pose. So this is a new technique, which is not deleting a section and replacing it with something else, but it's actually going to take advantage of knowledge about what that thing looked like. So this is two cool new things. So hopefully at this point we know what they're trying to achieve. If you don't know what they're trying to achieve when you're reading a paper, the paper won't make any sense. So again, that's a point where you should stop. Maybe this is not the right time to be reading this paper, maybe you need to read some of the references, maybe you need to look more at the examples, so you can always skip straight to the experiments. So I often skip straight to the experiments. In this case, I don't need to, because they've put enough experiments on the very first page for me to see what it's doing. So yeah, don't always read it from top to bottom. Okay, so, all right, so they've got some examples of conditioning a diffusion model on an input without a mask. Okay, for example, you can use a noised version of the input as a starting point. Hey, we've done that too. So as you can see, we've already covered a lot of the techniques that they're referring to here. Something we haven't done, but makes a lot of sense, is that we can look at the distance to the input image as a loss function. Okay, that makes sense to me, and there's some references here. All right, so we're going to create this new thing called diffedit, it's going to be amazing. Wait till you check it out. Okay, fine. Okay, so that's the introduction. Hopefully you found that useful to understand what we're trying to do. The next section is generally called related work, as it is here, and that's going to tell us about other approaches. So if you're doing a deep dive, this is a good thing to study carefully. I don't think we're going to do a deep dive right now. So I think we can happily skip over it. We could kind of do a quick glance of like, oh, image editing, colorization, retouching, style transfer. Okay, cool. Lots of interesting topics. Getting more excited about this idea of image editing. And there's some different techniques. You can use clip guidance. Okay, they can be computationally expensive. We can use diffusion for image editing. Okay, fine. We can use clip to help us. So there's a lot of repetition in these papers as well, which is nice, because we can skip over it pretty quickly. More about the high computational costs. Okay, so they're saying this is going to be not so computationally expensive. That sounds hopeful. And often the very end of the related work is most interesting, as it is here, where they've talked about how somebody else has done concurrent to ours, somebody else is working at exactly the same time. And they've looked at some different approach. Okay, so not sure we learned too much from the related work, but if you are trying to really do the very, very best possible thing, you could study the related work and get the best ideas from each. Okay, now, background. So this is where it starts to look scary. I think we could all agree. And this is often the scariest bit, the background. This is basically saying, like, mathematically, here's how the problem that we're trying to solve is set up. And so we're going to start by looking at denoising diffusion probabilistic models, DDPM. Now, if you've watched lesson 9b with Waseem and Tanishq, then you've already seen some of the math of DDPM. And the important thing to recognize is that basically no one in the world, pretty much, is going to look at these paragraphs of text and these equations and go, oh, I get it. That's what DDPM is. That's not how it works, right? To understand DDPM, you would have to read and study the original paper. And then you would have to read and study the papers it's based on, and talk to lots of people, and watch videos, and go to classes, just like this one. And after a while, you'll understand DDPM. And then you'll be able to look at this section and say, oh, okay, I see. They're just talking about this thing I'm already familiar with. So this is meant to be a reminder of something that you already know. It's not something you should expect to learn from scratch. So let me take you through these equations somewhat briefly, because Waseem and Tanishq have kind of done them already, because every diffusion paper pretty much is going to have these equations. Okay, so, oh, and I'm just going to read something that Jono's put out in the chat. He says, it's worth remembering the background is often written last and tries to look smart for the reviewers. Which is correct. So feel free to read it last too. Yeah, absolutely. I think the main reason to read it is to find out what the different letters mean, what the different symbols mean, because they'll probably refer to them later. But in this case, I want to actually take this as a way to learn how to read math. So let's start with this very first equation, which, how on earth do you even read this? So the first thing I'll say is that this is not an E. Right? It's a weird looking E, and the reason it's a weird looking E is because it's a Greek letter. And so something I always recommend to students is that you learn the Greek alphabet, because it's much easier to be able to actually read this to yourself. So here's another one. Right? If you don't know that's called theta, I guess you have to read it as like circle with line through it. It's just going to get confusing trying to read an equation where you just can't actually say it out loud. So what I suggest is that you learn that, learn the Greek alphabet, and let me find the right place. So it's very easy to look it up just on Wikipedia. Here's the Greek alphabet, and if we go down here, you'll see they've all got names, and we can go and try and find our one. Curvy E. Okay, here it is. Epsilon and, oh, circle with a line through it. Theta. All right. So practice, and you will get used to recognizing these. So you've got epsilon, theta. This is just a weird curly L. So that's, this is used for the loss function. Okay. So how do we find out what this symbol means, and what this symbol means? Well what we can do is, there's a few ways to do it. One way, which is kind of cool, is we can use a program called MathPix, which, MathPix. Here we are, MathPix. And what it does is, you basically select anything on your screen, and it will turn it into LaTeX. So that's one way you can do this, is you can select on the screen, it turns it into LaTeX. And the reason to turn it into LaTeX is because LaTeX is written as actual stuff that you can search for on Google. So that's technique number one. Technique number two is, you can download the other formats of the paper, and that'll have a download source. And if we say download source, then what we'll be able to do is, we'll be able to actually open up that LaTeX, and have a look at it. So we'll wait for that to download while that's happening. Let's keep moving along here. So in this case, we've got these two bars. So can we find out what that means? So we could try a few things. We could try looking for two bars, maybe math notation. Oh, here we are, looks hopeful. What does this mean in mathematics? Oh, and here, there's a glossary of mathematical symbols. Here there's a meaning of this in math. So that looks hopeful. Okay, so it definitely doesn't look like this. It's not between two sets of letters. Ah, but it is around something. That looks hopeful. So it looks like we found it. It's a vector norm. Okay, so then you can start looking for these things up. So we can say norm, or maybe vector norm. And so once you can actually find the term, then we kind of know what to look for. Okay, so in our case, we've got this surrounding all this stuff, and then there's twos here and here. What's going on here? All right, if we scroll through. Oh, this is pretty close actually. So okay, so two bars can mean a matrix norm, otherwise a single for a vector norm. That's just here in particular. So it looks like we don't have to worry too much about whether it's one or two bars. Oh, and here's the definition. Oh, that's handy. So we've got the two one. All right, so it's equal to, ah, root sum of squares. So that's good to know. So this norm thing means a root sum of squares. But then we've got a two up here. Well, that just means squared. Ah, so this is a root sum of squares squared. Well, the square of a square root is just the thing itself. Ah, so actually this whole thing is just the sum of squares. It's a bit of a weird way to write it, in a sense. We could perfectly well have just written it as, you know, like sum of, you know, whatever it is, squared. Fine. But there we go. Okay, and then what about this thing here? Weird e thing. So how would you find out what the weird e thing is? Okay, so our, um, our, um, LaTeX has finally finished downloading. And if we open it up, we can find there's a .txt file in here. Here we are, main.txt. So we'll open it. And it's not the most, you know, amazingly smooth process. But you know, what we could just do is we could say, okay, it's just after it says minimizing the denoising objective. Okay, so let's search for minimizing the denoising objective. So the LaTeX here, let's get it both on the screen at the same time. Okay, so here it is. L, MathCal L equals MathBBE X0t epsilon. Okay, and here's that vertical bar thing, epsilon minus epsilon theta Xt, and then the bar thing 2, 2. All right, so the thing that we've got new is MathBBE. Okay, so finally, we've got something we can search for. MathBBE. Ah, fantastic. What does MathBBE mean? That's the expected value operator. Aha, fantastic. All right. So it takes a bit of fussing around. But once you've got either MathPix working, or actually another thing you could try, because MathPix is ridiculously expensive, in my opinion, is there is a free version called Pix2Tech that actually is a Python thing. And you could actually even have fun playing with this, because the whole thing is just a PyTorch Python script. And it even describes, you know, how if you used a Transformers model, and you can train it yourself in Colab, and so forth. But basically, as you can see, yeah, you can snip and convert to LaTeX, which is pretty awesome. So you could use this instead of paying the MathPix guys. Anyway, so we are on the right track now, I think. So expected value, and then we can start reading about what expected value is. And you might actually remember that, because we did a bit of it in high school, at least in Australia we did. It's basically like... Let's maybe jump over here. So expected value of something is saying, what's the likely value of that thing? So for example, let's say you toss a coin, which could be heads or it could be tails. And you want to know how often it's heads. And so maybe we'll call heads 1, tails 0. So you toss it, and you get a 1, 0, 0, 1, 1, 0, 1, 0, 1, okay, and so forth. And then you can calculate the mean of that. So if that's x, you can calculate x-bar, the mean, which would be the sum of all that divided by the count of all that. So it'd be 1, 2, 3, 4, 5, 5 divided by 1, 2, 3, 4, 5, 6, 7, 8, 9. So that would be the mean. But the expected value is like, well, what do you expect to happen? And we can calculate that by adding up for all of the possibilities for each, I don't know, I'll just call them x, for each possibility x. How likely is x? And what score do you get if you get x? So in this example of heads and tails, our two possibilities is that we either get heads or we get tails. So if for the version where x is heads, we get probability is 0.5. And the score, if it's an x, is going to be 1. And then what about tails? For tails, the probability is 0.5. And the score, if you get tails, is 0. And so overall, the expected is 0.5 times 1 plus 0 is 0.5. So our expected score, if we're tossing a coin, is 0.5, if getting heads is a win. Let me give you another example. Another example is, let's say that we're rolling a die. And we want to know what the expected score is if we roll a die. So again, we could roll it a bunch of times and see what happens. And so we could sum all that up, just like before, and divide it by the count. And that'll tell us the mean for this particular example. But what's the expected value more generally? Well, again, it's the sum of all the possibilities of the probability of each possibility times that score. So the possibilities for rolling a die is that you can get a 1, a 2, a 3, a 4, a 5, or a 6. The probability of each one is a sixth. And the score that you get is, well, it's this. This is the score. And so then you can multiply all these together and sum them up, which would be 1 sixth plus 2 sixths plus 3 sixths plus 4 sixths, oops, plus 5 sixths plus 6 sixths. And that would give you the expected value of that particular thing, which is rolling a die. So that's what expected value means. All right, so that's a really important concept that's going to come up a lot as we read papers. And so in particular, this is telling us what are all the things that we're averaging it over, that we're the expectations over. And so there's a whole lot of letters here. You're not expected to just know what they are. In fact, in every paper, they could mean totally different things. So you have to look immediately underneath where they'll be defined. So X0 is an image. It's an input image. Epsilon is the noise. And the noise has a mean of 0 and a standard deviation of i, which if you watch the lesson 9b, you'll know it's like a standard deviation of 1 when you're doing multiple normal variables. And then this is kind of confusing. Eta, just on its own, is a normally distributed random variable. So it's just grabbing random numbers. But Epsilon Theta is a noise estimator. That means it's a function. You can tell it's a function, kind of, because it's got these parentheses and stuff right next to it. So that's a function. So presumably most functions like this in these papers are neural networks. Okay, so we're finally at a point where this actually is going to make perfect sense. We've got the noise. We've got the prediction of that noise. We subtract one from the other. We square it. And we take the expected value. So in other words, this is mean squared error. So wow, that's a lot of fiddling around to find out that this whole thing here means mean squared error. So the loss function is the mean squared error. And unfortunately I don't think the paper ever says that. It says minimizing the denoising objective L blahdy blahdy blahdy. But anyway, we got there eventually. Fine. We also, as well as learning about X0, we also learn here about Xt. And so Xt is the original unnoised image times some number plus some noise times 1 minus that number. Okay, and so hopefully you'll recognize this from lesson 9b. This is the thing where we reduce the value of each pixel and we add noise to each pixel. So that's that. All right. So I'm not going to keep going through it, but you can kind of basically get the idea here is that once you know what you're looking for, the equations do actually make sense. But all this is doing is, remember, this is background. This is telling you what already exists. This is telling you this is what a DDPM is. And then it tells you what a DDIM is. DDIM is, look, just think of it as a more recent version of DDPM. It's some very minor changes to the way it's set up, which allows us to go faster. Okay, so the thing is, though, once we keep reading, what you'll find is none of this background actually matters. But I thought we'd kind of go through it just to get a sense of what's in a paper. So for the purpose of our background, it's enough to know that DDPM and DDIM are kind of the foundational papers on which diffusion models today are based. Okay. So the encoding process, which encodes an image onto a latent variable. Okay, and then this is basically adding noise. This is called DDIM encoding. And the thing that goes from the input image to the noised image, they're going to call capital ER. And R is the encoding ratio. That's going to be some, like, how much noise are we adding. If you use small steps, then decoding that, so going backwards, gives you back the original image. Okay, so that's all the stuff that we've learned about. That's what diffusion models are. All right. So this looks like a very useful picture. So maybe let's take a look and see what this says. So what is DiffEdit? DiffEdit has three steps. Step one, we add noise to the input image. That sounds pretty normal. Here's our input image, X0. Okay, and we add noise to it. Fine. And then we denoise it. Okay, fine. Ah, but we denoise it twice. One time, we denoise it using the reference text R, horse. Or this special symbol here means nothing at all. So either unconditional or horse. All right, so we do it once using the word horse. So we take this, and we decode it, estimate the noise, and then we can remove that noise on the assumption that it's a horse. Then we do it again. But the second time, we do that noise, when we calculate the noise, we pass in our query Q, which is zebra. Wow, those are going to be very different noises. The noise for horse is just going to be literally these Gaussian pixels. These are all dots, right? Because it is a horse. If the claim is, no, no, this is actually a zebra, then all of these pixels here are all wrong. They're all the wrong color. So the noise that's calculated if we say, this is our query, is going to be totally different to the noise if we say, this is our query. And so then we just take one minus the other. And here it is here. So we derive a mask based on the difference in the denoising results. And then you take that and binarize it. So basically turn that into ones and zeros. So that's actually the key idea. That's a really cool idea, which is that once you have a diffusion model that's trained, you can do inference on it, where you tell it the truth about what the thing is. And then you can do it again, but lie about what the thing is. And in your lying version, it's going to say, okay, all the stuff that doesn't match zebra must be noise. And so the difference between the noise prediction when you say, hey, it's a zebra versus the noise prediction when you say, hey, it's a horse, will be all the pixels that it says, no, these pixels are not zebra. The rest of it, it's fine. There's nothing particularly about the background that wouldn't work with a zebra. Okay, so that's step one. So then step two is we take the horse and we add noise to it. Okay, that's this XR thing that we learned about before. And then step three, we do decoding conditioned on the text query, using the mask to replace the background with pixel values. So this is like the idea that we heard about before, which is that during the inference time, as you do diffusion from this fuzzy horse, what happens is that we do a step of diffusion inference, and then all these black pixels, we replace with the noised version of the original. And so we do that multiple times. And so that means that the original pixels in this black area won't get changed. And that's why you can see in this picture here, and this picture here, the background's all the same. And the only thing that's changed is that the horse has been turned into a zebra. So this paragraph describes it. And then you can see here, it gives you a lot more detail. And the detail often has all kinds of like little tips about things they tried and things they found, which is pretty cool. So I won't read through all that, because it says the same as what I've already just said. One of the interesting little things they note here actually is that this binarized mask, so this difference between the R decoding and the Q decoding, tends to be a bit bigger than the actual area where the horse is, which you can kind of see with these legs, for example. And their point is that they actually say that's a good thing. Because actually often you want to slightly change some of the details around the object. So this is actually fine. All right. So we have a description of what the thing is, lots of details there. And then here's the bit that I totally skip, the bit called theoretical analysis, where this is the stuff that people really generally just add to try to get their papers passed review. You have to have fancy math. And so they're basically proving, you can see what it says here, insight into why this component yields better editing results than other approaches. I'm not sure we particularly care, because it makes perfect sense what they're doing, it's intuitive, and we can see it works. I don't feel like I need it proven to me, so I skip over that. So then they'll show us their experiments to tell us what data sets they did the experiments on. And so then, you know, they have metrics with names like LP IPS and CSFID. You'll come across FID a lot, this is just a version of that. Basically, they're trying to score how good their generated image is. We don't normally care about that either. They care because they need to be able to say, you should publish our paper because it has a higher number than the other people that have worked on this area. In our case, we can just say, you know, it looks good, I like it. So excellent question in the chat from Micolaj, which is, so would this only work on things that are relatively similar? And I think this is a great point, right? This is where understanding this helps to know what its limitations are going to be. And that's exactly right. If you can't come up with a mask for the change you want, this isn't going to work very well on the whole. Yeah, because the masked areas, the pixel is going to be copied. So for example, if you wanted to change it from, you know, a bowl of fruits to a bowl of fruits with a bokeh background, or like a bowl of fruits with, you know, a purple tinged photo of a bowl of fruit. If you want the whole color to change, that's not going to work, right? Because you're not masking off an area. Yeah, so by understanding the detail here, Micolaj has correctly recognized a limitation or like, what's this for? This is for things where you can just say, just change this bit and leave everything else the same. All right, so there's lots of experiments. So yeah, for some things you care about the experiments a lot. If it's something like classification for generation, the main thing you probably want to look at is the actual results. And so, and often for whatever reason, I guess, because this is, most people read these electronically, the results often you have to zoom into a lot to be able to see whether they're really good. So here's the input image. They want to turn this into an English foxhound. So here's the thing they're comparing themselves to, SDEdit, and it changed the composition quite a lot. And their version, it hasn't changed it at all. It's only changed the dog. And Ditto here, semi-trailer truck, SDEdit's totally changed it, DiffEdit hasn't. So you can kind of get a sense of like, you know, the authors showing off what they're good at here. This is what this technique is effective at doing, changing animals and vehicles and so forth. It does a very good job of it. All right. So then there's going to be a conclusion at the end, which I find almost never adds anything on top of what we've already read. And as you can see, it's very short anyway. Now quite often the appendices are really interesting. So don't skip over them. Often you'll find like more examples of pictures. They might show you some examples of pictures that didn't work very well, stuff like that. So it's often well worth looking at the appendices. Often some of the most interesting examples are there. And that's it. So that is, I guess, our first full-on paper walkthrough. And it's important to remember, this is not like a carefully chosen paper that we've picked specifically because you can handle it. This is the most interesting paper that came out this week. And so it gives you a sense of what it's really like. And for those of you who are ready to try something that's going to stretch you, see if you can implement any of this paper. So there are three steps. The first step is kind of the most interesting one, which is to automatically generate a mask. And the information that you have and the code that's in the lesson 9 notebook actually contains everything you need to do it. So maybe give it a go. See if you can mask out the area of a horse that does not look like a zebra. And that's actually useful in itself. That allows you to create segmentation masks automatically. So that's pretty cool. And then if you get that working, then you can go and try and do step 2. If you get that working, you can try and do step 3. And this only came out this week. So I haven't really seen examples of easy-to-use interfaces to this. So here's an example of a paper that you could be the first person to create a call interface to it. So there's a fun little project. And even if you're watching this a long time after this was released, and everybody's been doing this for years, still good homework, I think, to practice if you can. All right, I think now's a good time to have a 10-minute break. So I'll see you all back here in 10 minutes. Okay, welcome back. One thing during the break that Diego reminded us about, which I normally describe and I totally forgot about this time, is dtechify, which is another really great way to find symbols you don't know about. So let's try it for that expectation. So if you go to dtechify, and you draw the thing. It doesn't always work fantastically well, but sometimes it works very nicely. Yeah, in this case, not quite. What about the double line thing? It's good to know all the techniques, I guess. I think it could do this one. I guess part of the problem is there's so many options that actually, you know, okay, in this case, it wasn't particularly helpful. Normally it's more helpful than that. I mean, if we use a simple one like epsilon, I think it should be fine. There's a lot of room to improve this app, actually. If anybody's interested in a project, I think you could make it, you know, more successful. Okay, that's there you go. Sigma sum, that's cool. Anyway, so there's, it's another useful thing to know about. Just Google for dtechify. Okay, so let's move on with our from the foundations now. And so we were working on trying to at least get the start of a forward pass of a linear model or a simple multi-layer perceptron for MNIST going. And we had successfully created a basic tensor. We've got some random numbers going. So what we now need to do is we now need to be able to multiply these things together, matrix multiplication. So matrix multiplication, to remind you, in this case, so we're doing MNIST, right? So we've got, I think we're going to use a subset. Let's see. Yeah, okay. So we're going to create a matrix called M1, which is just the first five digits. So M1 will be the first five digits. So five rows. And dot dot dot dot dot dot. And then 780, what was it again? 784 columns. 784 columns. Because it's 28 by 28 pixels. And we flattened it out. So this is our first matrix in our matrix multiplication. And then we're going to multiply that by some weights. So the weights are going to be 784 by 10 random numbers. So for every one of these 784 pixels, each one is going to have a weight. So 784 down here. 784 by 10. So this first column, for example, is going to tell us all the weights in order to figure out if something's a zero. And the second column will have all the weights in deciding the probability of something's a one, and so forth. Assuming we're just doing a linear model. And so then we're going to multiply these two matrices together. So when we multiply matrices together, we take row one of matrix one, and we take column one of matrix two, and we take each one in turn. So we take this one, and we take this one, and we multiply them together. And then we take this one, and this one, and we multiply them together. And we do that for every element-wise pair, and then we add them all up. And that would give us the value for the very first cell. So that would go in here. That's what matrix multiplication is. OK, so let's go ahead then and create our random numbers for the weights, since we're allowed to use random number generators now. And for the bias, we'll just use a bunch of zeros to start with. So the bias is just what we're going to add to each one. And so for our matrix multiplication, we're going to be doing a little mini-batch here. We're going to be doing five rows of, as we discussed, five images flattened out. And then multiply by this weights matrix. So here are the shapes. M1 is 5 by 784, as we saw. M2 is 784 by 10. OK, so keep those in mind. So here's a handy thing. M1.shape contains two numbers, and I want to pull them out. I want to call the... I'm going to think of that as... I'm going to actually think of this as like A and B, rather than M1 and M2. So this is like A and B. So the number of rows in A, and the number of columns in A, if I say equals M1.shape, that will put 5 in AR, and 784 in AC. So you'll probably notice this. I do this a lot, this destructuring. We talked about it last week too. So we can do the same for M2.shape, put that into B rows and B columns. And so now if I write out ARAC and BRBC, you can again see the same things from the sizes. So that's a good way to kind of give us the stuff we have to loop through. So here's our result. So our resultant tensor, well we're multiplying together all of these 784 things and adding them up. So the resultant tensor is going to be 5 by 10. And then each thing in here is the result of multiplying and adding 784 pairs. So the result here is going to start with zeros, and this is the result. And it's going to contain AR rows, 5 rows, and BC columns, 10 columns. 5 comma 10. OK. So now we have to fill that in. And so to do a matrix multiplication, we have to first, we have to go through each row one at a time. And here we have that. Go through each row one at a time. And then go through each column one at a time. And then we have to go through each pair in that row column one at a time. So there's going to be a loop, and a loop, and a loop. So here's we're going to loop over each row. And here we're going to loop over each column. And then here we're going to loop, so each column of C. And then here we're going to loop over each column of A, which is going to be the same as the number of rows of B. Which we can see here, AC, 784, BR, 784, they're the same. So it wouldn't matter whether we said AC or BR. So then our result for that row and that column, we have to add onto it the product of IK in the first matrix, by KJ in the second matrix. So K is going up through those 784. And so we're going to go across the columns, and down, sorry, across the rows and down the columns. It's going to go across the row, whilst it goes down this column. So here is the world's most naive, slow, uninteresting matrix multiplication. And if we run it, OK, it's done something. We have successfully, hopefully, successfully, multiplied the matrices M1 and M2. It's a little hard to read this, I find, because punch cards used to be 80 columns wide. We still assume screens are 80 columns wide. Everything defaults to 80 wide, which is ridiculous. But you can easily change it. So if you say set print options, you can choose your own line width. You can see, well, that's 5 by 10, we did it before. So if we change the line width, OK, that's much easier to read now. We can see here are the five rows, and here are the ten columns for that matrix multiplication. I tend to always put this at the top of my notebooks, and you can do the same thing for NumPy as well. So what I like to do, this is really important, is when I'm working on code, particularly numeric code, I like to do it all step by step in Jupyter. And then what I do is, once I've got it working, is I copy all the cells that have implemented I paste them, and then I select them all and I hit shift-m to merge, get rid of anything that prints out stuff I don't need, and then I put a header on the top, give it a function name, and then I select the whole lot, and I hit ctrl or apple right square bracket, and I've turned it into a function. But I still keep the stuff above it, so I can see all the step-by-step stuff for learning about it later. And so that's what I've done here to create this function. And so this function does exactly the same things we just did, and we can see how long it takes to run by using percent time, and it took about half a second. Which gosh, that's a long time to generate such a small matrix. This is just to do five MNIST digits. So that's not going to be great. We're going to have to speed that up. I'm actually quite surprised at how slow that is, because there's only 39,200. So if you look at how we've got a loop within a loop within a loop, it's doing 39,200 of these. So Python, yeah, Python, when you're just doing Python, it is slow. So we can't do that. That's why we can't just write Python. But there is something that kind of lets us write Python. We could instead use Number. Number is a system that takes Python and turns it into, basically, into machine code. And it's amazingly easy to do. You can basically take a function and write ngit, at ngit on top. And what it's going to do is it's going to look, the first time you call this function, it's going to compile it down to machine code. And it will run much more quickly. So what I've done here is I've taken the innermost loop, so just looping through and adding up all these. So start at zero, go through and add up all those, just for two vectors, and return it. This is called a dot product in linear algebra. So we'll call it dot. And so Number only works with NumPy, doesn't work with PyTorch. So we're just going to use arrays instead of tensors for a moment. Now have a look at this. If I try to do a dot product of 1, 2, 3, and 2, 3, 4, it's pretty easy to do. It took a fifth of a second, which sounds terrible. But the reason it took a fifth of a second is because that's actually how long it took to compile this and run it. Now that it's compiled, the second time it just has to call it, it's now 21 microseconds. And so that's actually very fast. With Number, we can basically make Python run at C speed. So now, the important thing to recognize is if I replace this loop in Python with a call to dot, which is running in machine code, then we now have one, two loops running in Python, not three. So our 448 milliseconds, well, first of all, let's make sure if I run it, run that matmul, it should be close to my T1. T1 is what we got before, remember? So when I'm refactoring or performance improving or whatever, I always like to put every step in the notebook and then test. So this test close comes from fastcore.test, and it just checks that two things are very similar. They might not be exactly the same because of little floating point differences, which is fine. OK, so our matmul is working correctly, or at least it's doing the same thing it did before. So if we now run it, it's taking 268 microseconds, OK, versus 448 milliseconds. So it's taking, you know, about 2000 times faster just by changing the one innermost loop. So really all we've done is we've added at engine to make it 2000 times faster. So number is well worth knowing about. It can make your Python code very, very fast. OK, let's keep making it faster. So we're going to use stuff again, which kind of goes back to APL. And a lot of people say that learning APL is a thing that's taught them more about programming than anything else. So it's probably worth considering learning APL. And let's just look at these various things. We've got a is 10, 6, minus 4. So remember, in APL, we don't say equals. Equals actually means equals, funnily enough. To say set to, we use this arrow. And this is a list of 10, 6, 4. And then b is 287. And we're going to add them up, a plus b. So what's going on here? So it's really important that you can think of a symbol like a as representing a tensor or an array. APL calls them arrays. PyTorch calls them tensors. NumPy calls them arrays. They're the same thing. So this is a single thing that contains a bunch of numbers. This is a single thing that contains a bunch of numbers. This is an operation that applies to arrays or tensors. And what it does is it works what's called element-wise. It takes each pair, 10 and 2, and adds them together. Each pair, 6 and 8, adds them together. This is element-wise addition. And Fred's asking in the chat, how do you put in these symbols? If you just mouse over any of them, it will show you how to write it. And the one you want is the one at the very bottom, which is the one where it says prefix. Now the prefix is the backtick character. So here it's saying prefix hyphen gives us times. So if I type prefix hyphen, there we go. So I type a backtick dash b is a times b, for example. So yeah, they all have shortcut keys, which you learn pretty quickly, I find. And there's a fairly consistent kind of system for those shortcut keys too. All right, so we can do the same thing in PyTorch. It's a little bit more verbose in PyTorch, which is one reason I often like to do my mathematical fiddling around in APL. I can often do it with less boilerplate, which means I can spend more time thinking. You know, I can see everything on the screen at once. I don't have to spend as much time trying to ignore the tensor, round bracket, square bracket, dot, comma, blah, blah, blah. It's all cognitive load, which I'd rather ignore. But anyway, it does the same thing. So I can say a plus b, and it works exactly like APL. So here's an interesting example. I can go a less than b dot float dot mean. So let's try that one over here. A less than b. So this is a really important idea, which I think was invented by Ken Iverson, the APL guy, which is that true and false are represented by 0 and 1. And because they're represented by 0 and 1, we can do things to them. We can add them up and subtract them and so forth. It's a really important idea. So in this case, I want to take the mean of them. And I'm going to tell you something amazing, which is that in APL, there is no function called mean. Why not? That's because we can write the mean function, which, so that's four letters, mean, m-e-a-n, we can write the mean function from scratch with four characters. I'll show you. Here is the whole mean function. We're going to create a function called mean, and the mean is equal to the sum of a list divided by the count of a list. So this here is sum divided by count. And so I have now defined a new function called mean, which calculates the mean. Mean of a is less than b. There we go. And so, you know, in practice, I'm not sure people would even bother defining a function called mean, because it's just as easy to actually write as implementation in APL. In NumPy or whatever, Python, it's going to take a lot more than four letters to implement mean. So anyway, you know, it's a math notation. And so being a math notation, we can do a lot with little, which I find helpful because I can see everything going on at once. Anywho, okay, so that's how we do the same thing in PyTorch. And again, you can see that the less than in both cases are operating element-wise. Okay, so a is less than b is saying 10 is less than 2, 6 is less than 8, 4 is less than 7, and gives us back each of those trues and falses as zeros and ones. And according to the emoji on our YouTube chat, Siva's head just exploded, as it should. This is why APL is, yeah, life-changing. Okay, let's now go up to higher ranks. So this here is a rank 1 tensor. So a rank 1 tensor means it's a list of things. It's a vector. It's where else a rank 2 tensor is like a list of lists. They all have to be the same length, lists. Or it's like a rectangular bunch of numbers. And we call it, in math, we call it a matrix. So this is how we can create a tensor containing 1, 2, 3, 4, 5, 6, 7, 8, 9. And you can see often what I like to do is I want to print out the thing I just created after I created it. So two ways to do it. You can say, put an enter, and then write m, and that's going to do that. Or if you want to put it all in the same line, that works too. You just use a semicolon. Neither one's better than the other. They're just different. So we could do the same thing in APL. Of course, in APL, it's going to be much easier. So we're going to define a matrix called m, which is going to be a 3 by 3 tensor containing the numbers from 1 to 9. Okay, and there we go. That's done it in APL. A 3 by 3 tensor containing the numbers from 1 to 9. A lot of these ideas from APL, you'll find, have made their way into other programming languages. For example, if you use Go, you might recognize this. This is the iota character. Go uses the word iota, they spell it out, in a somewhat similar way. A lot of these ideas from APL have found themselves into math notation and other languages. It's been around since the late 50s. So here's a bit of fun. We're going to learn about a new thing that looks kind of crazy, called Frobenius norm. And we'll use that from time to time as we're doing generative modeling. And here's the definition of a Frobenius norm. It's the sum over all of the rows and columns of a matrix. And we're going to take each one and square it. We're going to add them up, and they're going to take the square root. And so to implement that in PyTorch, it's as simple as going m times m dot sum dot square root. So this looks like a pretty complicated thing, when you kind of look at it at first. It looks like a lot of squiggly business. Or if you said this thing here, you might be like, what on earth is that? Well, now you know it's just square, sum, square root. So again, we could do the same thing in APL. So let's do... So in APL, we want the... Okay, so we're going to create something called sf. Now it's interesting, APL does this a little bit differently. So dot sum, by default, in PyTorch, sums over everything. And if you want to sum over just one dimension, you have to pass in a dimension keyword. For very good reasons, APL is the opposite. It just sums across rows or just down columns. So actually, we have to say sum up the flattened out version of the matrix. And to say flattened out, you use comma. So here's sum up the flattened out version of the matrix. Okay, so that's our sf. Oh, sorry. And the matrix is meant to be m times m. There we go. So there's the same thing. Sum up the flattened out m by m matrix. And another interesting thing about APL is it always is read right to left. There's no such thing as operator precedence, which makes life a lot easier. Okay, and then we take the square root of that. There isn't a square root function. So we have to do to the power of 0.5. And there we go. Same thing. All right, you get the idea. Yes, a very interesting question here from Marabu. Are the bars for norm or absolute value? And I like Siva's answer, which is the norm is the same as the absolute value for a scalar. So in this case, you can think of it as absolute value. And it's kind of not needed because it's being squared anyway. But yes, in this case, the norm, well, in every case for a scalar, the norm is the absolute value, which is kind of a cute discovery when you realize it. So thank you for pointing that out, Siva. All right. So this is just fiddling around a little bit to kind of get a sense of how these things work. So really importantly, you can index into a matrix. And you'll say rows first and then columns. And if you say colon, it means all the columns. So if I say row two, here it is, row two, all the columns. Sorry, this is row two, starts at zero. APL starts at one. All the columns, that's going to be seven, eight, nine. And you can see I often use comma to print out multiple things. And I don't have to say print in Jupyter, it's kind of assumed. And so this is just a quick way of printing out the second row. And then here, every row, column two. So here is every row of column two. And here you can see, three, six, nine. So one thing very useful to recognize is that for tensors of higher rank than one, such as a matrix, any trailing colons are optional. So you see this here, M2, that's the same as M2 comma colon. It's really important to remember. Okay, so M2, you can see the result is the same. So that means row two, every column. Okay, so now with all that in place, we've got quite an easy way. We don't need a number anymore. We can multiply, so we can get rid of that innermost loop. So we're gonna get rid of this loop. Because this is just multiplying together all of the corresponding rows of A, with all, sorry, all the corresponding colons of a row of A, with all the corresponding rows of a column of B. And so we can just use an element wise operation for that. So here is the i-th row of A, and here is the j-th column of B. And so those are both, as we've seen, just vectors. And therefore, we can do an element wise multiplication of them. And then sum them up. And that's the same as a dot product. So that's handy. And so again, we'll do test close. Okay, it's the same, great. And again, you'll see we kind of did all of our experimenting first, right? To make sure we understood how it all worked, and then put it together. And then if we time it, 661 microseconds. Okay, so it's interesting. It's actually slower than, which really shows you how good number is. But it's certainly a hell of a lot better than our 450 milliseconds. But we're using something that's kind of a lot more general now. This is exactly the same as dot, as we've discussed. So we could just use torch dot, torch dot dot, I suppose I should say. And if we run that, okay, a little faster. It's still, interestingly, it's still slower than the number, which is quite amazing, actually. All right, so that one was not exactly a speed up, but it's kind of a bit more general, which is nice. Now we're gonna get something into something really fun, which is broadcasting. And broadcasting is about what if you have arrays with different shapes? So what's a shape? The shape is the number of rows, or the number of rows and columns, or the number of, what would you say, faces, rows and columns, and so forth. So for example, the shape of M is 3 by 3. So what happens if you multiply or add or do operations to tensors of different shapes? Well, there's one very simple one, which is if you've got a rank one tensor, a vector, then you can use any operation with a scalar, and it broadcasts that scalar across the tensor. So a is greater than 0 is exactly the same as saying a is greater than tensor 0, 0, 0. So it's basically copying that across three times. Now it's not literally making a copy in memory, but it's acting as if we had said that. And this is the most simple version of broadcasting. Okay, it's broadcasting the 0 across the 10, and the 6, and the negative 4. And APL does exactly the same thing. a is less than 5, so 0, 0, 1, so same idea. Okay. So we can do plus with a scalar, and we can do exactly the same thing with higher than rank 1. So 2 times a matrix is just gonna be broadcast across all the rows and all the columns. Okay, now it gets interesting. So broadcasting dates back to APL. But a really interesting idea is that we can broadcast not just scalars, but we can broadcast vectors across matrices, or broadcast any kind of lower ranked tensor across higher ranked tensors, or even broadcast together two tensors of the same rank but different shapes in a really powerful way. And as I was exploring this, I was trying to, I love doing this kind of computer archaeology. I was trying to find out where the hell this comes from. And it actually turns out from this email message in 1995 that the idea actually comes from a language that I'd never heard of called Yorick, which still apparently exists. Here's Yorick. And so Yorick talks about broadcasting and conformability. So what happened is this very obscure language has this very powerful idea. And NumPy has happily stolen the idea from Yorick that allows us to broadcast together tensors that don't appear to match. So let me give an example. Here's a tensor called C that's a vector. It's a rank one tensor, 10, 20, 30. And here's a tensor called M, which is a matrix. We've seen this one before. And one of them is shape 3, 3. The other is shape 3. And yet we can add them together. Now, what's happened when we added it together? Well, what's happened is 10, 20, 30 got added to 1, 2, 3. And then 10, 20, 30 got added to 4, 5, 6. And then 10, 20, 30 got added to 7, 8, 9. And then 10, 20, 30 got added to 7, 8, 9. And hopefully you can see this looks quite familiar. Instead of broadcasting a scalar over a higher rank tensor, this is broadcasting a vector across every row of a matrix. And it works both ways. So we can say C plus M gives us exactly the same thing. And so let me explain what's actually happening here. The trick is to know about this somewhat obscure method called expandAs. And what expandAs does is this creates a new thing called T, which contains exactly the same thing as C, but expanded or kind of copied over. So it has the same shape as M. So here's what T looks like. Now, T contains exactly the same thing as C does, but it's got three copies of it now. And you can see we can definitely add T to M because they match shapes. Right? So we can say M plus T. We know we can play M plus T because we've already learned that you can do element-wise operations on two things that have matching shapes. Now, by the way, this thing T didn't actually create three copies. Check this out. If we call T.storage, it tells us what's actually in memory. It actually just contains the numbers 10, 20, 30. But it does a really clever trick. It has a stride of zero across the rows and a size of 3, 3. And so what that means is that it acts as if it's a 3 by 3 matrix. And each time it goes to the next row, it actually stays exactly where it is. And this idea of strides is the trick which NumPy and PyTorch and so forth use for all kinds of things where you basically can create, you know, very efficient ways to do things like expanding or to kind of jump over things and stuff like that. You know, switch between columns and rows, stuff like that. Anyway, the important thing here for us to recognize is that we didn't actually make a copy. This is totally efficient. And it's all going to be run in C code very fast. So remember, this expandAs is critical. This is the thing that will teach you to understand how broadcasting works, which is really important for implementing deep learning algorithms or any kind of linear algebra on any Python system. Because the NumPy rules are used exactly the same in Jax, in TensorFlow, in PyTorch, and so forth. Now I'll show you a little trick, which is going to be very important in a moment. If we take C, which remember is a vector containing 10, 20, 30, and we say dot unsqueeze zero, then it changes the shape from 3 to 1, 3. So it changes it from a vector of length 3 to a matrix of one row by three columns. This will turn out to be very important in a moment. And you can see how it's printed. It's printed out with two square brackets. Now I never use unsqueeze, because I much prefer doing something more flexible, which is if you index into an axis with a special value none, also known as np.newAxis, it does exactly the same thing. It inserts a new axis here. So here we'll get exactly the same thing. One row by all the columns, three columns. So this is exactly the same as saying unsqueeze. So this inserts a new unit axis. This is a unit axis, a single row in this dimension. And this does the same thing. So these are the same. So we could do the same thing and say unsqueeze one, which means now we're going to unsqueeze into the first dimension. So that means we now have three rows and one column. See the shape here? The shape is inserting a unit axis in position one. Three rows and one column. And so we can do exactly the same thing here. Give us every row and a new unit axis in position one. Same thing. Okay, so those two are exactly the same. So this is how we create a matrix with one row. This is how we create a matrix with one column. None comma colon versus colon comma none. Or unsqueeze. We don't have to say, as we've learned before, none comma colon, because do you remember? Trailing colons are optional. Trailing colons are optional. So therefore just say none is also going to give you a row matrix, one row matrix. This is a little trick here. If you say dot dot dot, that means all of the dimensions. And so dot dot dot comma none will always insert a unit axis at the end, regardless of what rank a tensor is. So yeah, so none and np new axis mean exactly the same thing. np new axis is actually a synonym for none. If you've ever used that. I always use none, because why not? It's short and simple. So here's something interesting. If we go c colon comma none. So let's go and check out what c colon comma none looks like. C colon comma none is a column. And if we say expand as m, which is three by three, then it's going to take that 10, 20, 30 column and replicate it. 10, 20, 30, 10, 20, 30, 10, 20, 30. So we could add. So remember, like, well, remember, I will explain that. When you say matrix plus c colon comma none, it's basically going to do this dot expand as for you. So if I want to add this matrix here to m, I don't need to say dot expand as. I just write this. I just write m plus c colon comma none. And so this is exactly the same as doing m plus c. But now rather than adding the vector to each row, it's adding the vector to each column. C plus 10, 20, 30, 10, 20, 30, 10, 20, 30. So that's a really simple way that we now get kind of for free, thanks to this really nifty notation, this nifty approach that came from Yorick. So here you can see m plus c none comma colon is adding 10, 20, 30 to each row. And m plus c colon comma none is adding 10, 20, 30 to each column. All right, so that's the basic, like, hand wavy version. So let's look at, like, what are the rules and how does it work? Okay, so c none comma colon is one by three. C colon comma none is three by one. What happens if we multiply c none comma colon by c colon comma none? Well, it's going to do, if you think about it, which you definitely should because thinking is very helpful, what is going on here? Oh, took forever. Okay, so what happens if we go c none comma colon times c colon comma none? So what it's going to have to do is it's going to have to take this 10, 20, 30 column vector or three by one matrix, and it's going to have to make it work across each of these rows. So what it does is expands it to be 10, 20, 30, 10, 20, 30, 10, 20, 30. So it's going to do it just like this. And then it's going to do the same thing for c none comma colon. So that's going to become three rows of 10, 20, 30. So we're going to end up with three rows of 10, 20, 30 times three columns of 10, 20, 30, which gives us our answer. And so this is going to do an outer product. So it's very nifty that you can actually do an outer product without any special, you know, functions or anything, just using broadcasting. And it's not just outer products. You can do outer Boolean operations. And this kind of stuff comes up all the time, right? Now, remember, you don't need the comma colon. So get rid of it. So this is showing us all the places where it's greater than, it's kind of an outer Boolean, if you want to call it that. So this is super nifty. And you can do all kinds of tricks with this because it runs very, very fast. So this is going to be accelerated in C. So here are the rules. Okay. When you operate on two arrays or tensors, numpy and pytorch will compare their shapes. Okay. So remember the shape, this is a shape. You can tell it's a shape because we said shape. And it goes from right to left. So that's the trailing dimensions. And it checks whether the dimensions are compatible. Now they're compatible if they're equal, right? So for example, if we say m times m, then those two shapes are compatible because the because in each case, it's just going to be three, right? So they're going to be equal. So if the shape in that dimension is equal, they're compatible. Or if one of them's one, and if one of them's one, then that dimension is broadcast to make it the same size as the other. So that's why the outer product worked. We had a one by three times a three by one. And so this one got copied three times to make it this long. And this one got copied three times to make it this long. Okay. So those are the rules. So the arrays don't have to have the same number of dimensions. So this is an example that comes up all the time. Let's say you've got a 256 by 256 by 3 array of, or tensor of RGB values. So you've got an image, in other words, a three, a color image, and you want to normalize it. So you want to scale each color in the image by a different value. So this is how we normalize colors. So one way is you could multiply or divide or whatever, multiply the image by a one dimensional array with three values. So you've got a 1D array. So that's just three. Okay. And then the image is 256 by 256 by 3. And we go right to left and we check, are they the same? And we say, yes, they are. And then we keep going left and we say, are they the same? And if it's missing, we act as if it's one. And if we go keep going, if it's missing, we act as if it's one. So this is going to be the same as doing one by one by three. And so this is going to be broadcast. The three, three elements will be broadcast over all 256 by 256 pixels. So this is a super fast and convenient and nice way of normalizing image data with a single expression. And this is exactly how we do it in the fast.ai library. In fact. So we can use this to dramatically speed up our matrix multiplication. Let's just grab a single digit just for simplicity. And I really like doing this in Jupyter notebooks. And if you, if you build Jupyter notebooks to explain stuff that you've learned in this course or ways that you can apply it, consider doing this for your readers, but add a lot more pros. I haven't added pros here because I want to use my voice. If I was, for example, in our book that we published, it's all written in notebooks and there's a lot more pros, obviously, but like, really, I like to show every example all along the way using simple as possible. So let's just grab a single digit. So here's the first digit. So its shape is, it's a 784 long vector. Okay. And remember that our weight matrix is 784 by 10. Okay. So if we say digit colon common none dot shape, then that is a 784 by one row matrix. Okay. So there's our matrix. And so if we then take that 784 by one and expand as M2, it's going to be the same shape as our weight matrix. So it's copied our image data for that digit across all of the 10 vectors representing the 10 kind of linear projections we're doing for our linear model. And so that means that we can take the digit colon common none, so 784 by one and multiply it by the weights. And so that's going to get us back 784 by 10. And so what it's doing, remember, is it's basically looping through each of these 10 784 long vectors. And for each one of them, it's multiplying it by this digit. So that's exactly what we want to do in our matrix multiplication. So originally we had, well not originally, most recently, I should say, we had this dot product where we were actually looping over J, which was the columns of B. So we don't have to do that anymore because we can do it all at once by doing exactly what we just did. So we can take the ith row and all the columns and add a axis to the end. And then just like we did here, multiply it by B. And then dot sum. And so that is again exactly the same thing. That is another matrix multiplication, doing it using broadcasting. Now this is like, tricky to get your head around. And so if you haven't done this kind of broadcasting before, it's a really good time to pause the video and look carefully at each of these four cells before and understand what did I do there? Why did I do it? What am I showing you? And then experiment with trying to, and to remember that we started with M1 0, right? So just like we have here, AI. Okay, so that's why we've got i comma colon comma none, because this digit is actually M1 0. So this is like M1 0 colon none. So this line is doing exactly the same thing as this here, plus a sum. So let's check if this matmul is the same as it used to be. Yep, it's still working. And the speed of it. Okay, not bad. So 137 microseconds. So we've now gone from a time from 500 milliseconds to about 0.1 milliseconds. Funnily enough on my, oh actually now I think about it, my MacBook Air is an M2, whereas this Mac Mini is an M1. So that's a little bit slower. So my Air was a bit faster than 0.1 milliseconds. So overall we've got about a 5000 times speed improvement. So that is pretty exciting. And since it's so fast now, there's no need to use a mini batch anymore. If you remember, we used a mini batch of, where is it, of five images. But now we can actually use the whole data set because it's so fast. So now we can do the whole data set. There it is. We've now got 50,000 by 10, which is what we want. And so it's taking us only 656 milliseconds now to do the whole data set. So this is actually getting to a point now where we could start to create and train some simple models in a reasonable amount of time. So that's good news. All right. Um, I think that's probably a good time to take a break. We don't have too much more of this to go, but I don't want to keep you guys up too late. So hopefully you learned something interesting about broadcasting today. I cannot overemphasize how widely useful this is in all deep learning and machine learning code. It comes up all the time. It's basically our number one most critical kind of foundational operation. So yeah, take your time practicing it and also good luck with your diffusion homework from the first half of the lesson. Thanks for joining us and I'll see you next time.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 4.72, "text": " Hi everybody, welcome to lesson 11.", "tokens": [50364, 2421, 2201, 11, 2928, 281, 6898, 2975, 13, 50600], "temperature": 0.0, "avg_logprob": -0.2886415250373609, "compression_ratio": 1.7195571955719557, "no_speech_prob": 0.0009397122194059193}, {"id": 1, "seek": 0, "start": 4.72, "end": 9.040000000000001, "text": " This is the third lesson in part 2, depending on how you count things.", "tokens": [50600, 639, 307, 264, 2636, 6898, 294, 644, 568, 11, 5413, 322, 577, 291, 1207, 721, 13, 50816], "temperature": 0.0, "avg_logprob": -0.2886415250373609, "compression_ratio": 1.7195571955719557, "no_speech_prob": 0.0009397122194059193}, {"id": 2, "seek": 0, "start": 9.040000000000001, "end": 12.68, "text": " There's been a lesson A and a lesson B, it's kind of the fifth lesson in part 2, I don't", "tokens": [50816, 821, 311, 668, 257, 6898, 316, 293, 257, 6898, 363, 11, 309, 311, 733, 295, 264, 9266, 6898, 294, 644, 568, 11, 286, 500, 380, 50998], "temperature": 0.0, "avg_logprob": -0.2886415250373609, "compression_ratio": 1.7195571955719557, "no_speech_prob": 0.0009397122194059193}, {"id": 3, "seek": 0, "start": 12.68, "end": 13.68, "text": " know what it is.", "tokens": [50998, 458, 437, 309, 307, 13, 51048], "temperature": 0.0, "avg_logprob": -0.2886415250373609, "compression_ratio": 1.7195571955719557, "no_speech_prob": 0.0009397122194059193}, {"id": 4, "seek": 0, "start": 13.68, "end": 17.12, "text": " So we'll just stick to calling it lesson 11 and avoid getting too confused.", "tokens": [51048, 407, 321, 603, 445, 2897, 281, 5141, 309, 6898, 2975, 293, 5042, 1242, 886, 9019, 13, 51220], "temperature": 0.0, "avg_logprob": -0.2886415250373609, "compression_ratio": 1.7195571955719557, "no_speech_prob": 0.0009397122194059193}, {"id": 5, "seek": 0, "start": 17.12, "end": 20.16, "text": " I'm already confused.", "tokens": [51220, 286, 478, 1217, 9019, 13, 51372], "temperature": 0.0, "avg_logprob": -0.2886415250373609, "compression_ratio": 1.7195571955719557, "no_speech_prob": 0.0009397122194059193}, {"id": 6, "seek": 0, "start": 20.16, "end": 21.96, "text": " My goodness, I've got so much stuff to show you.", "tokens": [51372, 1222, 8387, 11, 286, 600, 658, 370, 709, 1507, 281, 855, 291, 13, 51462], "temperature": 0.0, "avg_logprob": -0.2886415250373609, "compression_ratio": 1.7195571955719557, "no_speech_prob": 0.0009397122194059193}, {"id": 7, "seek": 0, "start": 21.96, "end": 25.080000000000002, "text": " I'm only going to show you a tiny fraction of the cool stuff that's been happening on", "tokens": [51462, 286, 478, 787, 516, 281, 855, 291, 257, 5870, 14135, 295, 264, 1627, 1507, 300, 311, 668, 2737, 322, 51618], "temperature": 0.0, "avg_logprob": -0.2886415250373609, "compression_ratio": 1.7195571955719557, "no_speech_prob": 0.0009397122194059193}, {"id": 8, "seek": 0, "start": 25.080000000000002, "end": 26.28, "text": " the forum this week.", "tokens": [51618, 264, 17542, 341, 1243, 13, 51678], "temperature": 0.0, "avg_logprob": -0.2886415250373609, "compression_ratio": 1.7195571955719557, "no_speech_prob": 0.0009397122194059193}, {"id": 9, "seek": 2628, "start": 26.28, "end": 31.0, "text": " But it's been amazing.", "tokens": [50364, 583, 309, 311, 668, 2243, 13, 50600], "temperature": 0.0, "avg_logprob": -0.2985943028184234, "compression_ratio": 1.5194805194805194, "no_speech_prob": 0.007459412328898907}, {"id": 10, "seek": 2628, "start": 31.0, "end": 40.08, "text": " I'm going to start by showing this beautiful video from John Robinson.", "tokens": [50600, 286, 478, 516, 281, 722, 538, 4099, 341, 2238, 960, 490, 2619, 25105, 13, 51054], "temperature": 0.0, "avg_logprob": -0.2985943028184234, "compression_ratio": 1.5194805194805194, "no_speech_prob": 0.007459412328898907}, {"id": 11, "seek": 2628, "start": 40.08, "end": 42.56, "text": " I've never seen anything like this before.", "tokens": [51054, 286, 600, 1128, 1612, 1340, 411, 341, 949, 13, 51178], "temperature": 0.0, "avg_logprob": -0.2985943028184234, "compression_ratio": 1.5194805194805194, "no_speech_prob": 0.007459412328898907}, {"id": 12, "seek": 2628, "start": 42.56, "end": 49.24, "text": " As you can see, it's very stable and it's really showing this beautiful movement between", "tokens": [51178, 1018, 291, 393, 536, 11, 309, 311, 588, 8351, 293, 309, 311, 534, 4099, 341, 2238, 3963, 1296, 51512], "temperature": 0.0, "avg_logprob": -0.2985943028184234, "compression_ratio": 1.5194805194805194, "no_speech_prob": 0.007459412328898907}, {"id": 13, "seek": 2628, "start": 49.24, "end": 52.36, "text": " seasons.", "tokens": [51512, 15050, 13, 51668], "temperature": 0.0, "avg_logprob": -0.2985943028184234, "compression_ratio": 1.5194805194805194, "no_speech_prob": 0.007459412328898907}, {"id": 14, "seek": 5236, "start": 52.36, "end": 58.56, "text": " So what I did on the forum was I said to folks, hey you should try interpolating between prompts,", "tokens": [50364, 407, 437, 286, 630, 322, 264, 17542, 390, 286, 848, 281, 4024, 11, 4177, 291, 820, 853, 44902, 990, 1296, 41095, 11, 50674], "temperature": 0.0, "avg_logprob": -0.2692134009467231, "compression_ratio": 1.6328502415458936, "no_speech_prob": 7.031158747849986e-05}, {"id": 15, "seek": 5236, "start": 58.56, "end": 59.88, "text": " which is what John did.", "tokens": [50674, 597, 307, 437, 2619, 630, 13, 50740], "temperature": 0.0, "avg_logprob": -0.2692134009467231, "compression_ratio": 1.6328502415458936, "no_speech_prob": 7.031158747849986e-05}, {"id": 16, "seek": 5236, "start": 59.88, "end": 69.6, "text": " And I also said you should try using the last image of the previous prompt interpolation", "tokens": [50740, 400, 286, 611, 848, 291, 820, 853, 1228, 264, 1036, 3256, 295, 264, 3894, 12391, 44902, 399, 51226], "temperature": 0.0, "avg_logprob": -0.2692134009467231, "compression_ratio": 1.6328502415458936, "no_speech_prob": 7.031158747849986e-05}, {"id": 17, "seek": 5236, "start": 69.6, "end": 72.8, "text": " as the initial image for the next prompt.", "tokens": [51226, 382, 264, 5883, 3256, 337, 264, 958, 12391, 13, 51386], "temperature": 0.0, "avg_logprob": -0.2692134009467231, "compression_ratio": 1.6328502415458936, "no_speech_prob": 7.031158747849986e-05}, {"id": 18, "seek": 5236, "start": 72.8, "end": 75.44, "text": " And anyway, here it is.", "tokens": [51386, 400, 4033, 11, 510, 309, 307, 13, 51518], "temperature": 0.0, "avg_logprob": -0.2692134009467231, "compression_ratio": 1.6328502415458936, "no_speech_prob": 7.031158747849986e-05}, {"id": 19, "seek": 5236, "start": 75.44, "end": 76.44, "text": " Came out beautifully.", "tokens": [51518, 36042, 484, 16525, 13, 51568], "temperature": 0.0, "avg_logprob": -0.2692134009467231, "compression_ratio": 1.6328502415458936, "no_speech_prob": 7.031158747849986e-05}, {"id": 20, "seek": 5236, "start": 76.44, "end": 77.64, "text": " John was the first to get that working.", "tokens": [51568, 2619, 390, 264, 700, 281, 483, 300, 1364, 13, 51628], "temperature": 0.0, "avg_logprob": -0.2692134009467231, "compression_ratio": 1.6328502415458936, "no_speech_prob": 7.031158747849986e-05}, {"id": 21, "seek": 7764, "start": 77.64, "end": 84.56, "text": " So I was very excited about that.", "tokens": [50364, 407, 286, 390, 588, 2919, 466, 300, 13, 50710], "temperature": 0.0, "avg_logprob": -0.3935715918447457, "compression_ratio": 1.3142857142857143, "no_speech_prob": 0.02331610955297947}, {"id": 22, "seek": 7764, "start": 84.56, "end": 97.56, "text": " And the second one I wanted to show you is this really amazing work from Seb Derhi, Sebestien,", "tokens": [50710, 400, 264, 1150, 472, 286, 1415, 281, 855, 291, 307, 341, 534, 2243, 589, 490, 22374, 5618, 4954, 11, 22374, 377, 1053, 11, 51360], "temperature": 0.0, "avg_logprob": -0.3935715918447457, "compression_ratio": 1.3142857142857143, "no_speech_prob": 0.02331610955297947}, {"id": 23, "seek": 7764, "start": 97.56, "end": 102.48, "text": " who did something that I'd been thinking about as well.", "tokens": [51360, 567, 630, 746, 300, 286, 1116, 668, 1953, 466, 382, 731, 13, 51606], "temperature": 0.0, "avg_logprob": -0.3935715918447457, "compression_ratio": 1.3142857142857143, "no_speech_prob": 0.02331610955297947}, {"id": 24, "seek": 10248, "start": 102.48, "end": 105.96000000000001, "text": " I'm really thrilled that he also thought about this.", "tokens": [50364, 286, 478, 534, 18744, 300, 415, 611, 1194, 466, 341, 13, 50538], "temperature": 0.0, "avg_logprob": -0.26999896656383165, "compression_ratio": 1.5503355704697988, "no_speech_prob": 0.0008167109335772693}, {"id": 25, "seek": 10248, "start": 105.96000000000001, "end": 116.36, "text": " He noticed that this update we do, unconditional embeddings plus guidance times text embeddings", "tokens": [50538, 634, 5694, 300, 341, 5623, 321, 360, 11, 47916, 12240, 29432, 1804, 10056, 1413, 2487, 12240, 29432, 51058], "temperature": 0.0, "avg_logprob": -0.26999896656383165, "compression_ratio": 1.5503355704697988, "no_speech_prob": 0.0008167109335772693}, {"id": 26, "seek": 10248, "start": 116.36, "end": 126.72, "text": " minus unconditional embeddings, has a bit of a problem, which is that it gets big.", "tokens": [51058, 3175, 47916, 12240, 29432, 11, 575, 257, 857, 295, 257, 1154, 11, 597, 307, 300, 309, 2170, 955, 13, 51576], "temperature": 0.0, "avg_logprob": -0.26999896656383165, "compression_ratio": 1.5503355704697988, "no_speech_prob": 0.0008167109335772693}, {"id": 27, "seek": 12672, "start": 126.72, "end": 142.0, "text": " To show you what I mean by it gets big, it's like, imagine that we've got a couple of vectors", "tokens": [50364, 1407, 855, 291, 437, 286, 914, 538, 309, 2170, 955, 11, 309, 311, 411, 11, 3811, 300, 321, 600, 658, 257, 1916, 295, 18875, 51128], "temperature": 0.0, "avg_logprob": -0.29265447763296276, "compression_ratio": 1.4722222222222223, "no_speech_prob": 9.610188863007352e-05}, {"id": 28, "seek": 12672, "start": 142.0, "end": 146.68, "text": " on this chart here.", "tokens": [51128, 322, 341, 6927, 510, 13, 51362], "temperature": 0.0, "avg_logprob": -0.29265447763296276, "compression_ratio": 1.4722222222222223, "no_speech_prob": 9.610188863007352e-05}, {"id": 29, "seek": 12672, "start": 146.68, "end": 153.16, "text": " And so we've got, let's see, so we've got the original unconditional piece here.", "tokens": [51362, 400, 370, 321, 600, 658, 11, 718, 311, 536, 11, 370, 321, 600, 658, 264, 3380, 47916, 2522, 510, 13, 51686], "temperature": 0.0, "avg_logprob": -0.29265447763296276, "compression_ratio": 1.4722222222222223, "no_speech_prob": 9.610188863007352e-05}, {"id": 30, "seek": 12672, "start": 153.16, "end": 154.16, "text": " So we've got you.", "tokens": [51686, 407, 321, 600, 658, 291, 13, 51736], "temperature": 0.0, "avg_logprob": -0.29265447763296276, "compression_ratio": 1.4722222222222223, "no_speech_prob": 9.610188863007352e-05}, {"id": 31, "seek": 15416, "start": 154.6, "end": 158.4, "text": " So let's say this is you.", "tokens": [50386, 407, 718, 311, 584, 341, 307, 291, 13, 50576], "temperature": 0.0, "avg_logprob": -0.33109325062144884, "compression_ratio": 1.3391304347826087, "no_speech_prob": 3.535619907779619e-05}, {"id": 32, "seek": 15416, "start": 158.4, "end": 163.2, "text": " And then we add to that some amount of t minus you.", "tokens": [50576, 400, 550, 321, 909, 281, 300, 512, 2372, 295, 256, 3175, 291, 13, 50816], "temperature": 0.0, "avg_logprob": -0.33109325062144884, "compression_ratio": 1.3391304347826087, "no_speech_prob": 3.535619907779619e-05}, {"id": 33, "seek": 15416, "start": 163.2, "end": 172.44, "text": " So if we've got like t, let's say it's huge, right?", "tokens": [50816, 407, 498, 321, 600, 658, 411, 256, 11, 718, 311, 584, 309, 311, 2603, 11, 558, 30, 51278], "temperature": 0.0, "avg_logprob": -0.33109325062144884, "compression_ratio": 1.3391304347826087, "no_speech_prob": 3.535619907779619e-05}, {"id": 34, "seek": 15416, "start": 172.44, "end": 176.16, "text": " And we've got you again.", "tokens": [51278, 400, 321, 600, 658, 291, 797, 13, 51464], "temperature": 0.0, "avg_logprob": -0.33109325062144884, "compression_ratio": 1.3391304347826087, "no_speech_prob": 3.535619907779619e-05}, {"id": 35, "seek": 17616, "start": 176.24, "end": 185.07999999999998, "text": " And the difference between those is the vector which goes here, right?", "tokens": [50368, 400, 264, 2649, 1296, 729, 307, 264, 8062, 597, 1709, 510, 11, 558, 30, 50810], "temperature": 0.0, "avg_logprob": -0.3476365317761059, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.000616622855886817}, {"id": 36, "seek": 17616, "start": 185.07999999999998, "end": 191.48, "text": " Now you can see here that if there's a big difference between t and you, then the eventual", "tokens": [50810, 823, 291, 393, 536, 510, 300, 498, 456, 311, 257, 955, 2649, 1296, 256, 293, 291, 11, 550, 264, 33160, 51130], "temperature": 0.0, "avg_logprob": -0.3476365317761059, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.000616622855886817}, {"id": 37, "seek": 17616, "start": 191.48, "end": 199.51999999999998, "text": " update which actually happens is, oopsie daisy, I thought that was going to be an arrow.", "tokens": [51130, 5623, 597, 767, 2314, 307, 11, 34166, 414, 1120, 14169, 11, 286, 1194, 300, 390, 516, 281, 312, 364, 11610, 13, 51532], "temperature": 0.0, "avg_logprob": -0.3476365317761059, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.000616622855886817}, {"id": 38, "seek": 17616, "start": 199.51999999999998, "end": 203.2, "text": " Let's try that again.", "tokens": [51532, 961, 311, 853, 300, 797, 13, 51716], "temperature": 0.0, "avg_logprob": -0.3476365317761059, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.000616622855886817}, {"id": 39, "seek": 20320, "start": 203.23999999999998, "end": 209.76, "text": " The eventual update which happens is far bigger than the original update.", "tokens": [50366, 440, 33160, 5623, 597, 2314, 307, 1400, 3801, 813, 264, 3380, 5623, 13, 50692], "temperature": 0.0, "avg_logprob": -0.21877123180188632, "compression_ratio": 1.5806451612903225, "no_speech_prob": 9.027980559039861e-05}, {"id": 40, "seek": 20320, "start": 209.76, "end": 215.83999999999997, "text": " And so it jumps too far.", "tokens": [50692, 400, 370, 309, 16704, 886, 1400, 13, 50996], "temperature": 0.0, "avg_logprob": -0.21877123180188632, "compression_ratio": 1.5806451612903225, "no_speech_prob": 9.027980559039861e-05}, {"id": 41, "seek": 20320, "start": 215.83999999999997, "end": 223.2, "text": " So this idea is basically to say, well, let's make it so that the update is no longer than", "tokens": [50996, 407, 341, 1558, 307, 1936, 281, 584, 11, 731, 11, 718, 311, 652, 309, 370, 300, 264, 5623, 307, 572, 2854, 813, 51364], "temperature": 0.0, "avg_logprob": -0.21877123180188632, "compression_ratio": 1.5806451612903225, "no_speech_prob": 9.027980559039861e-05}, {"id": 42, "seek": 20320, "start": 223.2, "end": 228.2, "text": " the original unconditioned update would have been.", "tokens": [51364, 264, 3380, 34959, 849, 292, 5623, 576, 362, 668, 13, 51614], "temperature": 0.0, "avg_logprob": -0.21877123180188632, "compression_ratio": 1.5806451612903225, "no_speech_prob": 9.027980559039861e-05}, {"id": 43, "seek": 20320, "start": 228.2, "end": 230.79999999999998, "text": " And we're going to be talking more about norms later.", "tokens": [51614, 400, 321, 434, 516, 281, 312, 1417, 544, 466, 24357, 1780, 13, 51744], "temperature": 0.0, "avg_logprob": -0.21877123180188632, "compression_ratio": 1.5806451612903225, "no_speech_prob": 9.027980559039861e-05}, {"id": 44, "seek": 23080, "start": 230.8, "end": 236.08, "text": " But basically we scale it by the ratio of the norms.", "tokens": [50364, 583, 1936, 321, 4373, 309, 538, 264, 8509, 295, 264, 24357, 13, 50628], "temperature": 0.0, "avg_logprob": -0.27445091247558595, "compression_ratio": 1.6566265060240963, "no_speech_prob": 0.001810186542570591}, {"id": 45, "seek": 23080, "start": 236.08, "end": 247.60000000000002, "text": " And what happens is we start with this astronaut and we move to this astronaut.", "tokens": [50628, 400, 437, 2314, 307, 321, 722, 365, 341, 18516, 293, 321, 1286, 281, 341, 18516, 13, 51204], "temperature": 0.0, "avg_logprob": -0.27445091247558595, "compression_ratio": 1.6566265060240963, "no_speech_prob": 0.001810186542570591}, {"id": 46, "seek": 23080, "start": 247.60000000000002, "end": 253.04000000000002, "text": " And it's kind of, it's a subtle change, but you can see there's a lot more before, after,", "tokens": [51204, 400, 309, 311, 733, 295, 11, 309, 311, 257, 13743, 1319, 11, 457, 291, 393, 536, 456, 311, 257, 688, 544, 949, 11, 934, 11, 51476], "temperature": 0.0, "avg_logprob": -0.27445091247558595, "compression_ratio": 1.6566265060240963, "no_speech_prob": 0.001810186542570591}, {"id": 47, "seek": 23080, "start": 253.04000000000002, "end": 258.44, "text": " before, after, a lot more texture in the background.", "tokens": [51476, 949, 11, 934, 11, 257, 688, 544, 8091, 294, 264, 3678, 13, 51746], "temperature": 0.0, "avg_logprob": -0.27445091247558595, "compression_ratio": 1.6566265060240963, "no_speech_prob": 0.001810186542570591}, {"id": 48, "seek": 25844, "start": 258.6, "end": 263.56, "text": " And on the earth, there's a lot more detail before, after.", "tokens": [50372, 400, 322, 264, 4120, 11, 456, 311, 257, 688, 544, 2607, 949, 11, 934, 13, 50620], "temperature": 0.0, "avg_logprob": -0.31259966869743505, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.00263162306509912}, {"id": 49, "seek": 25844, "start": 263.56, "end": 264.84, "text": " You see that?", "tokens": [50620, 509, 536, 300, 30, 50684], "temperature": 0.0, "avg_logprob": -0.31259966869743505, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.00263162306509912}, {"id": 50, "seek": 25844, "start": 264.84, "end": 269.88, "text": " And even little things like before the bridal kind of reins, whatever, were pretty flimsy.", "tokens": [50684, 400, 754, 707, 721, 411, 949, 264, 16362, 304, 733, 295, 47200, 11, 2035, 11, 645, 1238, 932, 332, 3187, 13, 50936], "temperature": 0.0, "avg_logprob": -0.31259966869743505, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.00263162306509912}, {"id": 51, "seek": 25844, "start": 269.88, "end": 272.16, "text": " Now they look quite proper.", "tokens": [50936, 823, 436, 574, 1596, 2296, 13, 51050], "temperature": 0.0, "avg_logprob": -0.31259966869743505, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.00263162306509912}, {"id": 52, "seek": 25844, "start": 272.16, "end": 279.72, "text": " So it's made quite a big difference just to kind of get this scaling correct.", "tokens": [51050, 407, 309, 311, 1027, 1596, 257, 955, 2649, 445, 281, 733, 295, 483, 341, 21589, 3006, 13, 51428], "temperature": 0.0, "avg_logprob": -0.31259966869743505, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.00263162306509912}, {"id": 53, "seek": 25844, "start": 279.72, "end": 285.2, "text": " So another example, there's a couple of other things that Sebastia tried, which I'll explain", "tokens": [51428, 407, 1071, 1365, 11, 456, 311, 257, 1916, 295, 661, 721, 300, 22374, 525, 654, 3031, 11, 597, 286, 603, 2903, 51702], "temperature": 0.0, "avg_logprob": -0.31259966869743505, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.00263162306509912}, {"id": 54, "seek": 28520, "start": 285.2, "end": 292.47999999999996, "text": " in a moment, but you can see how some of them actually resulted in changing the image.", "tokens": [50364, 294, 257, 1623, 11, 457, 291, 393, 536, 577, 512, 295, 552, 767, 18753, 294, 4473, 264, 3256, 13, 50728], "temperature": 0.0, "avg_logprob": -0.226568599738697, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.0005193018005229533}, {"id": 55, "seek": 28520, "start": 292.47999999999996, "end": 296.8, "text": " And this one's actually important because the poor horse used to be missing a leg and", "tokens": [50728, 400, 341, 472, 311, 767, 1021, 570, 264, 4716, 6832, 1143, 281, 312, 5361, 257, 1676, 293, 50944], "temperature": 0.0, "avg_logprob": -0.226568599738697, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.0005193018005229533}, {"id": 56, "seek": 28520, "start": 296.8, "end": 300.32, "text": " now it's not missing a leg, so that's good.", "tokens": [50944, 586, 309, 311, 406, 5361, 257, 1676, 11, 370, 300, 311, 665, 13, 51120], "temperature": 0.0, "avg_logprob": -0.226568599738697, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.0005193018005229533}, {"id": 57, "seek": 28520, "start": 300.32, "end": 303.2, "text": " And so here's the detailed one with its extra leg.", "tokens": [51120, 400, 370, 510, 311, 264, 9942, 472, 365, 1080, 2857, 1676, 13, 51264], "temperature": 0.0, "avg_logprob": -0.226568599738697, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.0005193018005229533}, {"id": 58, "seek": 28520, "start": 303.2, "end": 304.91999999999996, "text": " So how did he do this?", "tokens": [51264, 407, 577, 630, 415, 360, 341, 30, 51350], "temperature": 0.0, "avg_logprob": -0.226568599738697, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.0005193018005229533}, {"id": 59, "seek": 28520, "start": 304.91999999999996, "end": 311.32, "text": " Well, so what he did was he started with this unconditioned prompt plus the guidance times", "tokens": [51350, 1042, 11, 370, 437, 415, 630, 390, 415, 1409, 365, 341, 34959, 849, 292, 12391, 1804, 264, 10056, 1413, 51670], "temperature": 0.0, "avg_logprob": -0.226568599738697, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.0005193018005229533}, {"id": 60, "seek": 31132, "start": 311.32, "end": 316.64, "text": " the difference between the conditional and unconditioned.", "tokens": [50364, 264, 2649, 1296, 264, 27708, 293, 34959, 849, 292, 13, 50630], "temperature": 0.0, "avg_logprob": -0.2812404231021279, "compression_ratio": 1.7431192660550459, "no_speech_prob": 1.5936575437081046e-05}, {"id": 61, "seek": 31132, "start": 316.64, "end": 323.92, "text": " And then as we discussed, the next version, well actually the next version we then saw", "tokens": [50630, 400, 550, 382, 321, 7152, 11, 264, 958, 3037, 11, 731, 767, 264, 958, 3037, 321, 550, 1866, 50994], "temperature": 0.0, "avg_logprob": -0.2812404231021279, "compression_ratio": 1.7431192660550459, "no_speech_prob": 1.5936575437081046e-05}, {"id": 62, "seek": 31132, "start": 323.92, "end": 331.44, "text": " is to basically just take that prediction and scale it according to the difference in", "tokens": [50994, 307, 281, 1936, 445, 747, 300, 17630, 293, 4373, 309, 4650, 281, 264, 2649, 294, 51370], "temperature": 0.0, "avg_logprob": -0.2812404231021279, "compression_ratio": 1.7431192660550459, "no_speech_prob": 1.5936575437081046e-05}, {"id": 63, "seek": 31132, "start": 331.44, "end": 332.44, "text": " the lengths.", "tokens": [51370, 264, 26329, 13, 51420], "temperature": 0.0, "avg_logprob": -0.2812404231021279, "compression_ratio": 1.7431192660550459, "no_speech_prob": 1.5936575437081046e-05}, {"id": 64, "seek": 31132, "start": 332.44, "end": 335.68, "text": " So the norms is basically the length of the vectors.", "tokens": [51420, 407, 264, 24357, 307, 1936, 264, 4641, 295, 264, 18875, 13, 51582], "temperature": 0.0, "avg_logprob": -0.2812404231021279, "compression_ratio": 1.7431192660550459, "no_speech_prob": 1.5936575437081046e-05}, {"id": 65, "seek": 31132, "start": 335.68, "end": 338.4, "text": " And so this is the second one I did in lesson nine.", "tokens": [51582, 400, 370, 341, 307, 264, 1150, 472, 286, 630, 294, 6898, 4949, 13, 51718], "temperature": 0.0, "avg_logprob": -0.2812404231021279, "compression_ratio": 1.7431192660550459, "no_speech_prob": 1.5936575437081046e-05}, {"id": 66, "seek": 31132, "start": 338.4, "end": 339.6, "text": " You'll see it's gone from here.", "tokens": [51718, 509, 603, 536, 309, 311, 2780, 490, 510, 13, 51778], "temperature": 0.0, "avg_logprob": -0.2812404231021279, "compression_ratio": 1.7431192660550459, "no_speech_prob": 1.5936575437081046e-05}, {"id": 67, "seek": 33960, "start": 339.6, "end": 346.56, "text": " So when we go from 1a to 1b, you can see here it's got, look at this, this boot's gone from", "tokens": [50364, 407, 562, 321, 352, 490, 502, 64, 281, 502, 65, 11, 291, 393, 536, 510, 309, 311, 658, 11, 574, 412, 341, 11, 341, 11450, 311, 2780, 490, 50712], "temperature": 0.0, "avg_logprob": -0.2823182411913602, "compression_ratio": 1.641255605381166, "no_speech_prob": 0.00016092929581645876}, {"id": 68, "seek": 33960, "start": 346.56, "end": 348.92, "text": " nothing to having texture.", "tokens": [50712, 1825, 281, 1419, 8091, 13, 50830], "temperature": 0.0, "avg_logprob": -0.2823182411913602, "compression_ratio": 1.641255605381166, "no_speech_prob": 0.00016092929581645876}, {"id": 69, "seek": 33960, "start": 348.92, "end": 352.36, "text": " This whatever the hell this thing is, suddenly it's got texture.", "tokens": [50830, 639, 2035, 264, 4921, 341, 551, 307, 11, 5800, 309, 311, 658, 8091, 13, 51002], "temperature": 0.0, "avg_logprob": -0.2823182411913602, "compression_ratio": 1.641255605381166, "no_speech_prob": 0.00016092929581645876}, {"id": 70, "seek": 33960, "start": 352.36, "end": 355.76000000000005, "text": " And look, we've now got proper stars in the sky.", "tokens": [51002, 400, 574, 11, 321, 600, 586, 658, 2296, 6105, 294, 264, 5443, 13, 51172], "temperature": 0.0, "avg_logprob": -0.2823182411913602, "compression_ratio": 1.641255605381166, "no_speech_prob": 0.00016092929581645876}, {"id": 71, "seek": 33960, "start": 355.76000000000005, "end": 357.6, "text": " It's made a really big difference.", "tokens": [51172, 467, 311, 1027, 257, 534, 955, 2649, 13, 51264], "temperature": 0.0, "avg_logprob": -0.2823182411913602, "compression_ratio": 1.641255605381166, "no_speech_prob": 0.00016092929581645876}, {"id": 72, "seek": 33960, "start": 357.6, "end": 363.88, "text": " And then the second change is not just to rescale the whole prediction, but to rescale", "tokens": [51264, 400, 550, 264, 1150, 1319, 307, 406, 445, 281, 9610, 1220, 264, 1379, 17630, 11, 457, 281, 9610, 1220, 51578], "temperature": 0.0, "avg_logprob": -0.2823182411913602, "compression_ratio": 1.641255605381166, "no_speech_prob": 0.00016092929581645876}, {"id": 73, "seek": 33960, "start": 363.88, "end": 366.96000000000004, "text": " the update.", "tokens": [51578, 264, 5623, 13, 51732], "temperature": 0.0, "avg_logprob": -0.2823182411913602, "compression_ratio": 1.641255605381166, "no_speech_prob": 0.00016092929581645876}, {"id": 74, "seek": 36696, "start": 367.03999999999996, "end": 371.79999999999995, "text": " When we rescale the update, it actually not surprisingly changes the image entirely because", "tokens": [50368, 1133, 321, 9610, 1220, 264, 5623, 11, 309, 767, 406, 17600, 2962, 264, 3256, 7696, 570, 50606], "temperature": 0.0, "avg_logprob": -0.27065323620307735, "compression_ratio": 1.8425196850393701, "no_speech_prob": 0.0005193016258999705}, {"id": 75, "seek": 36696, "start": 371.79999999999995, "end": 375.12, "text": " we're now changing the direction it goes.", "tokens": [50606, 321, 434, 586, 4473, 264, 3513, 309, 1709, 13, 50772], "temperature": 0.0, "avg_logprob": -0.27065323620307735, "compression_ratio": 1.8425196850393701, "no_speech_prob": 0.0005193016258999705}, {"id": 76, "seek": 36696, "start": 375.12, "end": 377.68, "text": " And so, I don't know, is this better than this?", "tokens": [50772, 400, 370, 11, 286, 500, 380, 458, 11, 307, 341, 1101, 813, 341, 30, 50900], "temperature": 0.0, "avg_logprob": -0.27065323620307735, "compression_ratio": 1.8425196850393701, "no_speech_prob": 0.0005193016258999705}, {"id": 77, "seek": 36696, "start": 377.68, "end": 382.64, "text": " I mean, maybe, maybe not, but you know, I think so, you know, particularly because this", "tokens": [50900, 286, 914, 11, 1310, 11, 1310, 406, 11, 457, 291, 458, 11, 286, 519, 370, 11, 291, 458, 11, 4098, 570, 341, 51148], "temperature": 0.0, "avg_logprob": -0.27065323620307735, "compression_ratio": 1.8425196850393701, "no_speech_prob": 0.0005193016258999705}, {"id": 78, "seek": 36696, "start": 382.64, "end": 387.32, "text": " was the difference that added the correct fourth leg to the horse before.", "tokens": [51148, 390, 264, 2649, 300, 3869, 264, 3006, 6409, 1676, 281, 264, 6832, 949, 13, 51382], "temperature": 0.0, "avg_logprob": -0.27065323620307735, "compression_ratio": 1.8425196850393701, "no_speech_prob": 0.0005193016258999705}, {"id": 79, "seek": 36696, "start": 387.32, "end": 388.5, "text": " And then we can do both.", "tokens": [51382, 400, 550, 321, 393, 360, 1293, 13, 51441], "temperature": 0.0, "avg_logprob": -0.27065323620307735, "compression_ratio": 1.8425196850393701, "no_speech_prob": 0.0005193016258999705}, {"id": 80, "seek": 36696, "start": 388.5, "end": 391.84, "text": " We can rescale the difference and then rescale the result.", "tokens": [51441, 492, 393, 9610, 1220, 264, 2649, 293, 550, 9610, 1220, 264, 1874, 13, 51608], "temperature": 0.0, "avg_logprob": -0.27065323620307735, "compression_ratio": 1.8425196850393701, "no_speech_prob": 0.0005193016258999705}, {"id": 81, "seek": 36696, "start": 391.84, "end": 393.56, "text": " And then we get the best of both worlds.", "tokens": [51608, 400, 550, 321, 483, 264, 1151, 295, 1293, 13401, 13, 51694], "temperature": 0.0, "avg_logprob": -0.27065323620307735, "compression_ratio": 1.8425196850393701, "no_speech_prob": 0.0005193016258999705}, {"id": 82, "seek": 39356, "start": 393.56, "end": 395.72, "text": " As you can see, big difference.", "tokens": [50364, 1018, 291, 393, 536, 11, 955, 2649, 13, 50472], "temperature": 0.0, "avg_logprob": -0.25080913236771507, "compression_ratio": 1.6988636363636365, "no_speech_prob": 0.0002824030234478414}, {"id": 83, "seek": 39356, "start": 395.72, "end": 397.56, "text": " We get a nice background.", "tokens": [50472, 492, 483, 257, 1481, 3678, 13, 50564], "temperature": 0.0, "avg_logprob": -0.25080913236771507, "compression_ratio": 1.6988636363636365, "no_speech_prob": 0.0002824030234478414}, {"id": 84, "seek": 39356, "start": 397.56, "end": 402.6, "text": " This weird thing on his back's actually become an arm.", "tokens": [50564, 639, 3657, 551, 322, 702, 646, 311, 767, 1813, 364, 3726, 13, 50816], "temperature": 0.0, "avg_logprob": -0.25080913236771507, "compression_ratio": 1.6988636363636365, "no_speech_prob": 0.0002824030234478414}, {"id": 85, "seek": 39356, "start": 402.6, "end": 404.64, "text": " That's not what a foot looks like.", "tokens": [50816, 663, 311, 406, 437, 257, 2671, 1542, 411, 13, 50918], "temperature": 0.0, "avg_logprob": -0.25080913236771507, "compression_ratio": 1.6988636363636365, "no_speech_prob": 0.0002824030234478414}, {"id": 86, "seek": 39356, "start": 404.64, "end": 406.84000000000003, "text": " That is what a foot looks like.", "tokens": [50918, 663, 307, 437, 257, 2671, 1542, 411, 13, 51028], "temperature": 0.0, "avg_logprob": -0.25080913236771507, "compression_ratio": 1.6988636363636365, "no_speech_prob": 0.0002824030234478414}, {"id": 87, "seek": 39356, "start": 406.84000000000003, "end": 413.64, "text": " So these little details make a big difference, as you can see.", "tokens": [51028, 407, 613, 707, 4365, 652, 257, 955, 2649, 11, 382, 291, 393, 536, 13, 51368], "temperature": 0.0, "avg_logprob": -0.25080913236771507, "compression_ratio": 1.6988636363636365, "no_speech_prob": 0.0002824030234478414}, {"id": 88, "seek": 39356, "start": 413.64, "end": 421.36, "text": " So this is a really cool, or two really cool new things.", "tokens": [51368, 407, 341, 307, 257, 534, 1627, 11, 420, 732, 534, 1627, 777, 721, 13, 51754], "temperature": 0.0, "avg_logprob": -0.25080913236771507, "compression_ratio": 1.6988636363636365, "no_speech_prob": 0.0002824030234478414}, {"id": 89, "seek": 42136, "start": 421.36, "end": 424.32, "text": " New things tend to have wrinkles though.", "tokens": [50364, 1873, 721, 3928, 281, 362, 34822, 1673, 13, 50512], "temperature": 0.0, "avg_logprob": -0.2658173243204753, "compression_ratio": 1.5985663082437276, "no_speech_prob": 0.00024156103609129786}, {"id": 90, "seek": 42136, "start": 424.32, "end": 433.28000000000003, "text": " Wrinkle number one is, after I shared on Twitter, Sebastian's approach, Ben Poole, who's Google", "tokens": [50512, 10159, 14095, 1230, 472, 307, 11, 934, 286, 5507, 322, 5794, 11, 31102, 311, 3109, 11, 3964, 430, 1986, 306, 11, 567, 311, 3329, 50960], "temperature": 0.0, "avg_logprob": -0.2658173243204753, "compression_ratio": 1.5985663082437276, "no_speech_prob": 0.00024156103609129786}, {"id": 91, "seek": 42136, "start": 433.28000000000003, "end": 437.48, "text": " Brain, I think, if I remember correctly, pointed out that this already exists.", "tokens": [50960, 29783, 11, 286, 519, 11, 498, 286, 1604, 8944, 11, 10932, 484, 300, 341, 1217, 8198, 13, 51170], "temperature": 0.0, "avg_logprob": -0.2658173243204753, "compression_ratio": 1.5985663082437276, "no_speech_prob": 0.00024156103609129786}, {"id": 92, "seek": 42136, "start": 437.48, "end": 442.2, "text": " He thinks it's the same as what's shown in this paper, which is a diffusion model for", "tokens": [51170, 634, 7309, 309, 311, 264, 912, 382, 437, 311, 4898, 294, 341, 3035, 11, 597, 307, 257, 25242, 2316, 337, 51406], "temperature": 0.0, "avg_logprob": -0.2658173243204753, "compression_ratio": 1.5985663082437276, "no_speech_prob": 0.00024156103609129786}, {"id": 93, "seek": 42136, "start": 442.2, "end": 443.44, "text": " text-to-speech.", "tokens": [51406, 2487, 12, 1353, 12, 7053, 5023, 13, 51468], "temperature": 0.0, "avg_logprob": -0.2658173243204753, "compression_ratio": 1.5985663082437276, "no_speech_prob": 0.00024156103609129786}, {"id": 94, "seek": 42136, "start": 443.44, "end": 447.08000000000004, "text": " I haven't read the paper yet to check whether it's got all the different options or whether", "tokens": [51468, 286, 2378, 380, 1401, 264, 3035, 1939, 281, 1520, 1968, 309, 311, 658, 439, 264, 819, 3956, 420, 1968, 51650], "temperature": 0.0, "avg_logprob": -0.2658173243204753, "compression_ratio": 1.5985663082437276, "no_speech_prob": 0.00024156103609129786}, {"id": 95, "seek": 42136, "start": 447.08000000000004, "end": 449.52000000000004, "text": " it's checked them all out like this.", "tokens": [51650, 309, 311, 10033, 552, 439, 484, 411, 341, 13, 51772], "temperature": 0.0, "avg_logprob": -0.2658173243204753, "compression_ratio": 1.5985663082437276, "no_speech_prob": 0.00024156103609129786}, {"id": 96, "seek": 44952, "start": 449.68, "end": 454.24, "text": " So maybe this is reinventing something that already existed and putting it into a new", "tokens": [50372, 407, 1310, 341, 307, 33477, 278, 746, 300, 1217, 13135, 293, 3372, 309, 666, 257, 777, 50600], "temperature": 0.0, "avg_logprob": -0.3202595951581242, "compression_ratio": 1.68, "no_speech_prob": 0.00045120841241441667}, {"id": 97, "seek": 44952, "start": 454.24, "end": 457.47999999999996, "text": " field, which would still be interesting.", "tokens": [50600, 2519, 11, 597, 576, 920, 312, 1880, 13, 50762], "temperature": 0.0, "avg_logprob": -0.3202595951581242, "compression_ratio": 1.68, "no_speech_prob": 0.00045120841241441667}, {"id": 98, "seek": 44952, "start": 457.47999999999996, "end": 463.56, "text": " So hopefully folks on the forum, you can help figure out whether this paper is actually", "tokens": [50762, 407, 4696, 4024, 322, 264, 17542, 11, 291, 393, 854, 2573, 484, 1968, 341, 3035, 307, 767, 51066], "temperature": 0.0, "avg_logprob": -0.3202595951581242, "compression_ratio": 1.68, "no_speech_prob": 0.00045120841241441667}, {"id": 99, "seek": 44952, "start": 463.56, "end": 465.84, "text": " showing the same thing or not.", "tokens": [51066, 4099, 264, 912, 551, 420, 406, 13, 51180], "temperature": 0.0, "avg_logprob": -0.3202595951581242, "compression_ratio": 1.68, "no_speech_prob": 0.00045120841241441667}, {"id": 100, "seek": 44952, "start": 465.84, "end": 470.52, "text": " And then the other interesting thing was John Robinson got back in touch on the forum and", "tokens": [51180, 400, 550, 264, 661, 1880, 551, 390, 2619, 25105, 658, 646, 294, 2557, 322, 264, 17542, 293, 51414], "temperature": 0.0, "avg_logprob": -0.3202595951581242, "compression_ratio": 1.68, "no_speech_prob": 0.00045120841241441667}, {"id": 101, "seek": 44952, "start": 470.52, "end": 477.91999999999996, "text": " said, oh, actually that tree video doesn't actually do what we think it does at all.", "tokens": [51414, 848, 11, 1954, 11, 767, 300, 4230, 960, 1177, 380, 767, 360, 437, 321, 519, 309, 775, 412, 439, 13, 51784], "temperature": 0.0, "avg_logprob": -0.3202595951581242, "compression_ratio": 1.68, "no_speech_prob": 0.00045120841241441667}, {"id": 102, "seek": 47792, "start": 477.92, "end": 482.72, "text": " There's a bug in his code and despite the bug, it accidentally worked really well.", "tokens": [50364, 821, 311, 257, 7426, 294, 702, 3089, 293, 7228, 264, 7426, 11, 309, 15715, 2732, 534, 731, 13, 50604], "temperature": 0.0, "avg_logprob": -0.24934355694314708, "compression_ratio": 1.6496350364963503, "no_speech_prob": 0.0007321786833927035}, {"id": 103, "seek": 47792, "start": 482.72, "end": 485.64000000000004, "text": " So now we're in this interesting question of trying to figure out like, oh, why did", "tokens": [50604, 407, 586, 321, 434, 294, 341, 1880, 1168, 295, 1382, 281, 2573, 484, 411, 11, 1954, 11, 983, 630, 50750], "temperature": 0.0, "avg_logprob": -0.24934355694314708, "compression_ratio": 1.6496350364963503, "no_speech_prob": 0.0007321786833927035}, {"id": 104, "seek": 47792, "start": 485.64000000000004, "end": 490.12, "text": " we, how did he create such a beautiful video by mistake?", "tokens": [50750, 321, 11, 577, 630, 415, 1884, 1270, 257, 2238, 960, 538, 6146, 30, 50974], "temperature": 0.0, "avg_logprob": -0.24934355694314708, "compression_ratio": 1.6496350364963503, "no_speech_prob": 0.0007321786833927035}, {"id": 105, "seek": 47792, "start": 490.12, "end": 494.88, "text": " And okay, so reverse engineering exactly what the bug did and then figuring out how to do", "tokens": [50974, 400, 1392, 11, 370, 9943, 7043, 2293, 437, 264, 7426, 630, 293, 550, 15213, 484, 577, 281, 360, 51212], "temperature": 0.0, "avg_logprob": -0.24934355694314708, "compression_ratio": 1.6496350364963503, "no_speech_prob": 0.0007321786833927035}, {"id": 106, "seek": 47792, "start": 494.88, "end": 496.6, "text": " that more intentionally.", "tokens": [51212, 300, 544, 22062, 13, 51298], "temperature": 0.0, "avg_logprob": -0.24934355694314708, "compression_ratio": 1.6496350364963503, "no_speech_prob": 0.0007321786833927035}, {"id": 107, "seek": 47792, "start": 496.6, "end": 497.8, "text": " And this is great, right?", "tokens": [51298, 400, 341, 307, 869, 11, 558, 30, 51358], "temperature": 0.0, "avg_logprob": -0.24934355694314708, "compression_ratio": 1.6496350364963503, "no_speech_prob": 0.0007321786833927035}, {"id": 108, "seek": 47792, "start": 497.8, "end": 503.72, "text": " It's really good to, you know, having a lot of people working on something and the bugs", "tokens": [51358, 467, 311, 534, 665, 281, 11, 291, 458, 11, 1419, 257, 688, 295, 561, 1364, 322, 746, 293, 264, 15120, 51654], "temperature": 0.0, "avg_logprob": -0.24934355694314708, "compression_ratio": 1.6496350364963503, "no_speech_prob": 0.0007321786833927035}, {"id": 109, "seek": 50372, "start": 503.72, "end": 508.28000000000003, "text": " often, yeah, they tell us about new ideas.", "tokens": [50364, 2049, 11, 1338, 11, 436, 980, 505, 466, 777, 3487, 13, 50592], "temperature": 0.0, "avg_logprob": -0.31792313948921536, "compression_ratio": 1.5914396887159532, "no_speech_prob": 0.006903526373207569}, {"id": 110, "seek": 50372, "start": 508.28000000000003, "end": 510.40000000000003, "text": " So that's very interesting.", "tokens": [50592, 407, 300, 311, 588, 1880, 13, 50698], "temperature": 0.0, "avg_logprob": -0.31792313948921536, "compression_ratio": 1.5914396887159532, "no_speech_prob": 0.006903526373207569}, {"id": 111, "seek": 50372, "start": 510.40000000000003, "end": 512.32, "text": " So what's this space?", "tokens": [50698, 407, 437, 311, 341, 1901, 30, 50794], "temperature": 0.0, "avg_logprob": -0.31792313948921536, "compression_ratio": 1.5914396887159532, "no_speech_prob": 0.006903526373207569}, {"id": 112, "seek": 50372, "start": 512.32, "end": 518.6, "text": " Well we find out what John actually did and how come it worked so well.", "tokens": [50794, 1042, 321, 915, 484, 437, 2619, 767, 630, 293, 577, 808, 309, 2732, 370, 731, 13, 51108], "temperature": 0.0, "avg_logprob": -0.31792313948921536, "compression_ratio": 1.5914396887159532, "no_speech_prob": 0.006903526373207569}, {"id": 113, "seek": 50372, "start": 518.6, "end": 523.28, "text": " And then something that I just saw like two hours ago on the forum, which I'd never thought", "tokens": [51108, 400, 550, 746, 300, 286, 445, 1866, 411, 732, 2496, 2057, 322, 264, 17542, 11, 597, 286, 1116, 1128, 1194, 51342], "temperature": 0.0, "avg_logprob": -0.31792313948921536, "compression_ratio": 1.5914396887159532, "no_speech_prob": 0.006903526373207569}, {"id": 114, "seek": 50372, "start": 523.28, "end": 526.6800000000001, "text": " of before, but I'd thought of something a little bit similar.", "tokens": [51342, 295, 949, 11, 457, 286, 1116, 1194, 295, 746, 257, 707, 857, 2531, 13, 51512], "temperature": 0.0, "avg_logprob": -0.31792313948921536, "compression_ratio": 1.5914396887159532, "no_speech_prob": 0.006903526373207569}, {"id": 115, "seek": 50372, "start": 526.6800000000001, "end": 532.0400000000001, "text": " Rakil Prashanth said like, well, what if we took this, so as you can see, all the students", "tokens": [51512, 43000, 388, 2114, 1299, 282, 392, 848, 411, 11, 731, 11, 437, 498, 321, 1890, 341, 11, 370, 382, 291, 393, 536, 11, 439, 264, 1731, 51780], "temperature": 0.0, "avg_logprob": -0.31792313948921536, "compression_ratio": 1.5914396887159532, "no_speech_prob": 0.006903526373207569}, {"id": 116, "seek": 53204, "start": 532.04, "end": 533.48, "text": " are really bouncing ideas of each other.", "tokens": [50364, 366, 534, 27380, 3487, 295, 1184, 661, 13, 50436], "temperature": 0.0, "avg_logprob": -0.24702315860324436, "compression_ratio": 1.6566666666666667, "no_speech_prob": 0.0004955342737957835}, {"id": 117, "seek": 53204, "start": 533.48, "end": 534.76, "text": " It's like, oh, it's interesting.", "tokens": [50436, 467, 311, 411, 11, 1954, 11, 309, 311, 1880, 13, 50500], "temperature": 0.0, "avg_logprob": -0.24702315860324436, "compression_ratio": 1.6566666666666667, "no_speech_prob": 0.0004955342737957835}, {"id": 118, "seek": 53204, "start": 534.76, "end": 537.88, "text": " We're doing different things with a guidance scale.", "tokens": [50500, 492, 434, 884, 819, 721, 365, 257, 10056, 4373, 13, 50656], "temperature": 0.0, "avg_logprob": -0.24702315860324436, "compression_ratio": 1.6566666666666667, "no_speech_prob": 0.0004955342737957835}, {"id": 119, "seek": 53204, "start": 537.88, "end": 543.12, "text": " What if we take the guidance scale and rather than keeping it at 7.5 all the time, let's", "tokens": [50656, 708, 498, 321, 747, 264, 10056, 4373, 293, 2831, 813, 5145, 309, 412, 1614, 13, 20, 439, 264, 565, 11, 718, 311, 50918], "temperature": 0.0, "avg_logprob": -0.24702315860324436, "compression_ratio": 1.6566666666666667, "no_speech_prob": 0.0004955342737957835}, {"id": 120, "seek": 53204, "start": 543.12, "end": 544.12, "text": " reduce it.", "tokens": [50918, 5407, 309, 13, 50968], "temperature": 0.0, "avg_logprob": -0.24702315860324436, "compression_ratio": 1.6566666666666667, "no_speech_prob": 0.0004955342737957835}, {"id": 121, "seek": 53204, "start": 544.12, "end": 548.68, "text": " And this is a little bit similar to something I suggested to John over a few weeks ago where", "tokens": [50968, 400, 341, 307, 257, 707, 857, 2531, 281, 746, 286, 10945, 281, 2619, 670, 257, 1326, 3259, 2057, 689, 51196], "temperature": 0.0, "avg_logprob": -0.24702315860324436, "compression_ratio": 1.6566666666666667, "no_speech_prob": 0.0004955342737957835}, {"id": 122, "seek": 53204, "start": 548.68, "end": 555.1999999999999, "text": " I said he was doing some stuff with like modifying gradients based on additional loss functions.", "tokens": [51196, 286, 848, 415, 390, 884, 512, 1507, 365, 411, 42626, 2771, 2448, 2361, 322, 4497, 4470, 6828, 13, 51522], "temperature": 0.0, "avg_logprob": -0.24702315860324436, "compression_ratio": 1.6566666666666667, "no_speech_prob": 0.0004955342737957835}, {"id": 123, "seek": 53204, "start": 555.1999999999999, "end": 558.98, "text": " And I said to him, maybe you should just use them like occasionally at the start.", "tokens": [51522, 400, 286, 848, 281, 796, 11, 1310, 291, 820, 445, 764, 552, 411, 16895, 412, 264, 722, 13, 51711], "temperature": 0.0, "avg_logprob": -0.24702315860324436, "compression_ratio": 1.6566666666666667, "no_speech_prob": 0.0004955342737957835}, {"id": 124, "seek": 55898, "start": 558.98, "end": 562.9, "text": " Because I think the key thing is once the model kind of knows roughly what image it's", "tokens": [50364, 1436, 286, 519, 264, 2141, 551, 307, 1564, 264, 2316, 733, 295, 3255, 9810, 437, 3256, 309, 311, 50560], "temperature": 0.0, "avg_logprob": -0.21808957319993238, "compression_ratio": 1.7538461538461538, "no_speech_prob": 0.008984430693089962}, {"id": 125, "seek": 55898, "start": 562.9, "end": 568.34, "text": " trying to draw, even if it's noisy, you know, you can let it do its thing.", "tokens": [50560, 1382, 281, 2642, 11, 754, 498, 309, 311, 24518, 11, 291, 458, 11, 291, 393, 718, 309, 360, 1080, 551, 13, 50832], "temperature": 0.0, "avg_logprob": -0.21808957319993238, "compression_ratio": 1.7538461538461538, "no_speech_prob": 0.008984430693089962}, {"id": 126, "seek": 55898, "start": 568.34, "end": 573.74, "text": " And this is exactly what's happening here is Rakil's idea is to say, well, let's, let's", "tokens": [50832, 400, 341, 307, 2293, 437, 311, 2737, 510, 307, 43000, 388, 311, 1558, 307, 281, 584, 11, 731, 11, 718, 311, 11, 718, 311, 51102], "temperature": 0.0, "avg_logprob": -0.21808957319993238, "compression_ratio": 1.7538461538461538, "no_speech_prob": 0.008984430693089962}, {"id": 127, "seek": 55898, "start": 573.74, "end": 575.0600000000001, "text": " decrease the guidance scale.", "tokens": [51102, 11514, 264, 10056, 4373, 13, 51168], "temperature": 0.0, "avg_logprob": -0.21808957319993238, "compression_ratio": 1.7538461538461538, "no_speech_prob": 0.008984430693089962}, {"id": 128, "seek": 55898, "start": 575.0600000000001, "end": 577.1, "text": " So at the end it's basically zero.", "tokens": [51168, 407, 412, 264, 917, 309, 311, 1936, 4018, 13, 51270], "temperature": 0.0, "avg_logprob": -0.21808957319993238, "compression_ratio": 1.7538461538461538, "no_speech_prob": 0.008984430693089962}, {"id": 129, "seek": 55898, "start": 577.1, "end": 581.58, "text": " And so once it kind of is in going in the right direction, we let it do its thing.", "tokens": [51270, 400, 370, 1564, 309, 733, 295, 307, 294, 516, 294, 264, 558, 3513, 11, 321, 718, 309, 360, 1080, 551, 13, 51494], "temperature": 0.0, "avg_logprob": -0.21808957319993238, "compression_ratio": 1.7538461538461538, "no_speech_prob": 0.008984430693089962}, {"id": 130, "seek": 55898, "start": 581.58, "end": 588.1, "text": " So this little doggie is with the normal 7.5 guidance scale.", "tokens": [51494, 407, 341, 707, 360, 1615, 414, 307, 365, 264, 2710, 1614, 13, 20, 10056, 4373, 13, 51820], "temperature": 0.0, "avg_logprob": -0.21808957319993238, "compression_ratio": 1.7538461538461538, "no_speech_prob": 0.008984430693089962}, {"id": 131, "seek": 58810, "start": 588.22, "end": 589.78, "text": " Now have a look, for example, at its eye here.", "tokens": [50370, 823, 362, 257, 574, 11, 337, 1365, 11, 412, 1080, 3313, 510, 13, 50448], "temperature": 0.0, "avg_logprob": -0.3392677307128906, "compression_ratio": 1.5357142857142858, "no_speech_prob": 8.614626131020486e-05}, {"id": 132, "seek": 58810, "start": 589.78, "end": 592.9, "text": " It's pretty disin, uninteresting, pretty flat.", "tokens": [50448, 467, 311, 1238, 717, 259, 11, 49234, 8714, 11, 1238, 4962, 13, 50604], "temperature": 0.0, "avg_logprob": -0.3392677307128906, "compression_ratio": 1.5357142857142858, "no_speech_prob": 8.614626131020486e-05}, {"id": 133, "seek": 58810, "start": 592.9, "end": 597.62, "text": " And if I go to the next one, as you can see now, actually look at the eye.", "tokens": [50604, 400, 498, 286, 352, 281, 264, 958, 472, 11, 382, 291, 393, 536, 586, 11, 767, 574, 412, 264, 3313, 13, 50840], "temperature": 0.0, "avg_logprob": -0.3392677307128906, "compression_ratio": 1.5357142857142858, "no_speech_prob": 8.614626131020486e-05}, {"id": 134, "seek": 58810, "start": 597.62, "end": 598.82, "text": " That's a proper eye.", "tokens": [50840, 663, 311, 257, 2296, 3313, 13, 50900], "temperature": 0.0, "avg_logprob": -0.3392677307128906, "compression_ratio": 1.5357142857142858, "no_speech_prob": 8.614626131020486e-05}, {"id": 135, "seek": 58810, "start": 598.82, "end": 601.94, "text": " Before, totally glassy black.", "tokens": [50900, 4546, 11, 3879, 4276, 88, 2211, 13, 51056], "temperature": 0.0, "avg_logprob": -0.3392677307128906, "compression_ratio": 1.5357142857142858, "no_speech_prob": 8.614626131020486e-05}, {"id": 136, "seek": 58810, "start": 601.94, "end": 603.38, "text": " Now proper eye.", "tokens": [51056, 823, 2296, 3313, 13, 51128], "temperature": 0.0, "avg_logprob": -0.3392677307128906, "compression_ratio": 1.5357142857142858, "no_speech_prob": 8.614626131020486e-05}, {"id": 137, "seek": 58810, "start": 603.38, "end": 611.62, "text": " Or like look at all this fur, very textured, previously very out of focus.", "tokens": [51128, 1610, 411, 574, 412, 439, 341, 2687, 11, 588, 48656, 11, 8046, 588, 484, 295, 1879, 13, 51540], "temperature": 0.0, "avg_logprob": -0.3392677307128906, "compression_ratio": 1.5357142857142858, "no_speech_prob": 8.614626131020486e-05}, {"id": 138, "seek": 58810, "start": 611.62, "end": 618.02, "text": " So this is again a new technique.", "tokens": [51540, 407, 341, 307, 797, 257, 777, 6532, 13, 51860], "temperature": 0.0, "avg_logprob": -0.3392677307128906, "compression_ratio": 1.5357142857142858, "no_speech_prob": 8.614626131020486e-05}, {"id": 139, "seek": 61802, "start": 618.9399999999999, "end": 621.18, "text": " So I love this.", "tokens": [50410, 407, 286, 959, 341, 13, 50522], "temperature": 0.0, "avg_logprob": -0.26415336525047217, "compression_ratio": 1.5885416666666667, "no_speech_prob": 0.0004441975033842027}, {"id": 140, "seek": 61802, "start": 621.18, "end": 627.38, "text": " You know, you, you folks are trying things out and some things are working and some things", "tokens": [50522, 509, 458, 11, 291, 11, 291, 4024, 366, 1382, 721, 484, 293, 512, 721, 366, 1364, 293, 512, 721, 50832], "temperature": 0.0, "avg_logprob": -0.26415336525047217, "compression_ratio": 1.5885416666666667, "no_speech_prob": 0.0004441975033842027}, {"id": 141, "seek": 61802, "start": 627.38, "end": 628.54, "text": " not working.", "tokens": [50832, 406, 1364, 13, 50890], "temperature": 0.0, "avg_logprob": -0.26415336525047217, "compression_ratio": 1.5885416666666667, "no_speech_prob": 0.0004441975033842027}, {"id": 142, "seek": 61802, "start": 628.54, "end": 630.8199999999999, "text": " And that's all, that's all good.", "tokens": [50890, 400, 300, 311, 439, 11, 300, 311, 439, 665, 13, 51004], "temperature": 0.0, "avg_logprob": -0.26415336525047217, "compression_ratio": 1.5885416666666667, "no_speech_prob": 0.0004441975033842027}, {"id": 143, "seek": 61802, "start": 630.8199999999999, "end": 633.54, "text": " I kind of feel like you're going to have to slow down because I'm having trouble keeping", "tokens": [51004, 286, 733, 295, 841, 411, 291, 434, 516, 281, 362, 281, 2964, 760, 570, 286, 478, 1419, 5253, 5145, 51140], "temperature": 0.0, "avg_logprob": -0.26415336525047217, "compression_ratio": 1.5885416666666667, "no_speech_prob": 0.0004441975033842027}, {"id": 144, "seek": 61802, "start": 633.54, "end": 634.54, "text": " up with you all.", "tokens": [51140, 493, 365, 291, 439, 13, 51190], "temperature": 0.0, "avg_logprob": -0.26415336525047217, "compression_ratio": 1.5885416666666667, "no_speech_prob": 0.0004441975033842027}, {"id": 145, "seek": 61802, "start": 634.54, "end": 638.5, "text": " But apart from that, this is great.", "tokens": [51190, 583, 4936, 490, 300, 11, 341, 307, 869, 13, 51388], "temperature": 0.0, "avg_logprob": -0.26415336525047217, "compression_ratio": 1.5885416666666667, "no_speech_prob": 0.0004441975033842027}, {"id": 146, "seek": 61802, "start": 638.5, "end": 640.26, "text": " Good work.", "tokens": [51388, 2205, 589, 13, 51476], "temperature": 0.0, "avg_logprob": -0.26415336525047217, "compression_ratio": 1.5885416666666667, "no_speech_prob": 0.0004441975033842027}, {"id": 147, "seek": 64026, "start": 640.34, "end": 651.7, "text": " I also wanted to mention on a different theme to check out Alex's notes on the, on the lesson,", "tokens": [50368, 286, 611, 1415, 281, 2152, 322, 257, 819, 6314, 281, 1520, 484, 5202, 311, 5570, 322, 264, 11, 322, 264, 6898, 11, 50936], "temperature": 0.0, "avg_logprob": -0.2570124800487231, "compression_ratio": 1.6238095238095238, "no_speech_prob": 0.00037406341289170086}, {"id": 148, "seek": 64026, "start": 651.7, "end": 656.38, "text": " because I thought he's done a fantastic job of showing like how to, how to study, how", "tokens": [50936, 570, 286, 1194, 415, 311, 1096, 257, 5456, 1691, 295, 4099, 411, 577, 281, 11, 577, 281, 2979, 11, 577, 51170], "temperature": 0.0, "avg_logprob": -0.2570124800487231, "compression_ratio": 1.6238095238095238, "no_speech_prob": 0.00037406341289170086}, {"id": 149, "seek": 64026, "start": 656.38, "end": 658.1, "text": " to study a lesson.", "tokens": [51170, 281, 2979, 257, 6898, 13, 51256], "temperature": 0.0, "avg_logprob": -0.2570124800487231, "compression_ratio": 1.6238095238095238, "no_speech_prob": 0.00037406341289170086}, {"id": 150, "seek": 64026, "start": 658.1, "end": 663.14, "text": " And so what Alex did, for example, was he made a list in his notes of all the different", "tokens": [51256, 400, 370, 437, 5202, 630, 11, 337, 1365, 11, 390, 415, 1027, 257, 1329, 294, 702, 5570, 295, 439, 264, 819, 51508], "temperature": 0.0, "avg_logprob": -0.2570124800487231, "compression_ratio": 1.6238095238095238, "no_speech_prob": 0.00037406341289170086}, {"id": 151, "seek": 64026, "start": 663.14, "end": 667.78, "text": " steps we did as we started the Frontenac Foundations.", "tokens": [51508, 4439, 321, 630, 382, 321, 1409, 264, 17348, 268, 326, 8207, 763, 13, 51740], "temperature": 0.0, "avg_logprob": -0.2570124800487231, "compression_ratio": 1.6238095238095238, "no_speech_prob": 0.00037406341289170086}, {"id": 152, "seek": 66778, "start": 667.78, "end": 672.9, "text": " What is the library that it comes from, links to the documentation.", "tokens": [50364, 708, 307, 264, 6405, 300, 309, 1487, 490, 11, 6123, 281, 264, 14333, 13, 50620], "temperature": 0.0, "avg_logprob": -0.20088915824890136, "compression_ratio": 1.6917562724014337, "no_speech_prob": 5.2251973102102056e-05}, {"id": 153, "seek": 66778, "start": 672.9, "end": 680.54, "text": " And I know that Alex's background actually is history, you know, not, not computer science.", "tokens": [50620, 400, 286, 458, 300, 5202, 311, 3678, 767, 307, 2503, 11, 291, 458, 11, 406, 11, 406, 3820, 3497, 13, 51002], "temperature": 0.0, "avg_logprob": -0.20088915824890136, "compression_ratio": 1.6917562724014337, "no_speech_prob": 5.2251973102102056e-05}, {"id": 154, "seek": 66778, "start": 680.54, "end": 683.8199999999999, "text": " And so, you know, for somebody moving into a different field like this, this is a great", "tokens": [51002, 400, 370, 11, 291, 458, 11, 337, 2618, 2684, 666, 257, 819, 2519, 411, 341, 11, 341, 307, 257, 869, 51166], "temperature": 0.0, "avg_logprob": -0.20088915824890136, "compression_ratio": 1.6917562724014337, "no_speech_prob": 5.2251973102102056e-05}, {"id": 155, "seek": 66778, "start": 683.8199999999999, "end": 686.8199999999999, "text": " idea, you know, particularly to be able to like look at like, okay, what are all the", "tokens": [51166, 1558, 11, 291, 458, 11, 4098, 281, 312, 1075, 281, 411, 574, 412, 411, 11, 1392, 11, 437, 366, 439, 264, 51316], "temperature": 0.0, "avg_logprob": -0.20088915824890136, "compression_ratio": 1.6917562724014337, "no_speech_prob": 5.2251973102102056e-05}, {"id": 156, "seek": 66778, "start": 686.8199999999999, "end": 692.42, "text": " things that I'm going to have to learn and read about?", "tokens": [51316, 721, 300, 286, 478, 516, 281, 362, 281, 1466, 293, 1401, 466, 30, 51596], "temperature": 0.0, "avg_logprob": -0.20088915824890136, "compression_ratio": 1.6917562724014337, "no_speech_prob": 5.2251973102102056e-05}, {"id": 157, "seek": 66778, "start": 692.42, "end": 697.22, "text": " And then he did something which we always recommend, which is to try the lesson on a", "tokens": [51596, 400, 550, 415, 630, 746, 597, 321, 1009, 2748, 11, 597, 307, 281, 853, 264, 6898, 322, 257, 51836], "temperature": 0.0, "avg_logprob": -0.20088915824890136, "compression_ratio": 1.6917562724014337, "no_speech_prob": 5.2251973102102056e-05}, {"id": 158, "seek": 69722, "start": 697.22, "end": 698.74, "text": " new dataset.", "tokens": [50364, 777, 28872, 13, 50440], "temperature": 0.0, "avg_logprob": -0.2368674233695057, "compression_ratio": 1.673728813559322, "no_speech_prob": 0.0019877583254128695}, {"id": 159, "seek": 69722, "start": 698.74, "end": 702.34, "text": " And he very sensibly picked out the Fashion MNIST dataset, which is something we'll be", "tokens": [50440, 400, 415, 588, 2923, 3545, 6183, 484, 264, 32782, 376, 45, 19756, 28872, 11, 597, 307, 746, 321, 603, 312, 50620], "temperature": 0.0, "avg_logprob": -0.2368674233695057, "compression_ratio": 1.673728813559322, "no_speech_prob": 0.0019877583254128695}, {"id": 160, "seek": 69722, "start": 702.34, "end": 706.94, "text": " using a lot in this course, because it's a lot like MNIST.", "tokens": [50620, 1228, 257, 688, 294, 341, 1164, 11, 570, 309, 311, 257, 688, 411, 376, 45, 19756, 13, 50850], "temperature": 0.0, "avg_logprob": -0.2368674233695057, "compression_ratio": 1.673728813559322, "no_speech_prob": 0.0019877583254128695}, {"id": 161, "seek": 69722, "start": 706.94, "end": 709.98, "text": " And it's just different enough to be interesting.", "tokens": [50850, 400, 309, 311, 445, 819, 1547, 281, 312, 1880, 13, 51002], "temperature": 0.0, "avg_logprob": -0.2368674233695057, "compression_ratio": 1.673728813559322, "no_speech_prob": 0.0019877583254128695}, {"id": 162, "seek": 69722, "start": 709.98, "end": 715.82, "text": " And so he described in his post or his notes how he went about doing that.", "tokens": [51002, 400, 370, 415, 7619, 294, 702, 2183, 420, 702, 5570, 577, 415, 1437, 466, 884, 300, 13, 51294], "temperature": 0.0, "avg_logprob": -0.2368674233695057, "compression_ratio": 1.673728813559322, "no_speech_prob": 0.0019877583254128695}, {"id": 163, "seek": 69722, "start": 715.82, "end": 719.9, "text": " And then something else I thought was interesting in his notes at the very end was he just jotted", "tokens": [51294, 400, 550, 746, 1646, 286, 1194, 390, 1880, 294, 702, 5570, 412, 264, 588, 917, 390, 415, 445, 361, 11252, 51498], "temperature": 0.0, "avg_logprob": -0.2368674233695057, "compression_ratio": 1.673728813559322, "no_speech_prob": 0.0019877583254128695}, {"id": 164, "seek": 69722, "start": 719.9, "end": 722.74, "text": " down my tips.", "tokens": [51498, 760, 452, 6082, 13, 51640], "temperature": 0.0, "avg_logprob": -0.2368674233695057, "compression_ratio": 1.673728813559322, "no_speech_prob": 0.0019877583254128695}, {"id": 165, "seek": 72274, "start": 722.74, "end": 727.5, "text": " It's very easy when I throw a tip out there to think, oh, that's interesting, that's good", "tokens": [50364, 467, 311, 588, 1858, 562, 286, 3507, 257, 4125, 484, 456, 281, 519, 11, 1954, 11, 300, 311, 1880, 11, 300, 311, 665, 50602], "temperature": 0.0, "avg_logprob": -0.277473876953125, "compression_ratio": 1.6885245901639345, "no_speech_prob": 0.020331427454948425}, {"id": 166, "seek": 72274, "start": 727.5, "end": 728.5, "text": " to know.", "tokens": [50602, 281, 458, 13, 50652], "temperature": 0.0, "avg_logprob": -0.277473876953125, "compression_ratio": 1.6885245901639345, "no_speech_prob": 0.020331427454948425}, {"id": 167, "seek": 72274, "start": 728.5, "end": 731.0600000000001, "text": " And then it can disappear.", "tokens": [50652, 400, 550, 309, 393, 11596, 13, 50780], "temperature": 0.0, "avg_logprob": -0.277473876953125, "compression_ratio": 1.6885245901639345, "no_speech_prob": 0.020331427454948425}, {"id": 168, "seek": 72274, "start": 731.0600000000001, "end": 737.26, "text": " So here's a good way to make sure you don't forget about all the little, the little tricks.", "tokens": [50780, 407, 510, 311, 257, 665, 636, 281, 652, 988, 291, 500, 380, 2870, 466, 439, 264, 707, 11, 264, 707, 11733, 13, 51090], "temperature": 0.0, "avg_logprob": -0.277473876953125, "compression_ratio": 1.6885245901639345, "no_speech_prob": 0.020331427454948425}, {"id": 169, "seek": 72274, "start": 737.26, "end": 742.98, "text": " And I think I've put those notes in the forum wiki, so you can, you can check them out if", "tokens": [51090, 400, 286, 519, 286, 600, 829, 729, 5570, 294, 264, 17542, 261, 9850, 11, 370, 291, 393, 11, 291, 393, 1520, 552, 484, 498, 51376], "temperature": 0.0, "avg_logprob": -0.277473876953125, "compression_ratio": 1.6885245901639345, "no_speech_prob": 0.020331427454948425}, {"id": 170, "seek": 72274, "start": 742.98, "end": 745.58, "text": " you've, if you'd like to learn from them as well.", "tokens": [51376, 291, 600, 11, 498, 291, 1116, 411, 281, 1466, 490, 552, 382, 731, 13, 51506], "temperature": 0.0, "avg_logprob": -0.277473876953125, "compression_ratio": 1.6885245901639345, "no_speech_prob": 0.020331427454948425}, {"id": 171, "seek": 72274, "start": 745.58, "end": 747.54, "text": " So I think this is a great role model.", "tokens": [51506, 407, 286, 519, 341, 307, 257, 869, 3090, 2316, 13, 51604], "temperature": 0.0, "avg_logprob": -0.277473876953125, "compression_ratio": 1.6885245901639345, "no_speech_prob": 0.020331427454948425}, {"id": 172, "seek": 72274, "start": 747.54, "end": 750.5, "text": " Good job, Alex.", "tokens": [51604, 2205, 1691, 11, 5202, 13, 51752], "temperature": 0.0, "avg_logprob": -0.277473876953125, "compression_ratio": 1.6885245901639345, "no_speech_prob": 0.020331427454948425}, {"id": 173, "seek": 75050, "start": 751.26, "end": 753.26, "text": " Okay, so.", "tokens": [50402, 1033, 11, 370, 13, 50502], "temperature": 0.0, "avg_logprob": -0.37108260563441686, "compression_ratio": 1.5120481927710843, "no_speech_prob": 0.00020026112906634808}, {"id": 174, "seek": 75050, "start": 756.7, "end": 767.14, "text": " During the week, Jono taught us about a new paper that had just come out called DiffEdit.", "tokens": [50674, 6842, 264, 1243, 11, 7745, 78, 5928, 505, 466, 257, 777, 3035, 300, 632, 445, 808, 484, 1219, 413, 3661, 36, 17975, 13, 51196], "temperature": 0.0, "avg_logprob": -0.37108260563441686, "compression_ratio": 1.5120481927710843, "no_speech_prob": 0.00020026112906634808}, {"id": 175, "seek": 75050, "start": 767.14, "end": 772.66, "text": " And he told us he thought this was an interesting paper.", "tokens": [51196, 400, 415, 1907, 505, 415, 1194, 341, 390, 364, 1880, 3035, 13, 51472], "temperature": 0.0, "avg_logprob": -0.37108260563441686, "compression_ratio": 1.5120481927710843, "no_speech_prob": 0.00020026112906634808}, {"id": 176, "seek": 75050, "start": 772.66, "end": 778.94, "text": " And it came out during the week, and I thought it might be good practice for us to try reading", "tokens": [51472, 400, 309, 1361, 484, 1830, 264, 1243, 11, 293, 286, 1194, 309, 1062, 312, 665, 3124, 337, 505, 281, 853, 3760, 51786], "temperature": 0.0, "avg_logprob": -0.37108260563441686, "compression_ratio": 1.5120481927710843, "no_speech_prob": 0.00020026112906634808}, {"id": 177, "seek": 77894, "start": 778.98, "end": 781.74, "text": " this paper together.", "tokens": [50366, 341, 3035, 1214, 13, 50504], "temperature": 0.0, "avg_logprob": -0.2520905449276879, "compression_ratio": 1.565217391304348, "no_speech_prob": 3.21898223774042e-05}, {"id": 178, "seek": 77894, "start": 781.74, "end": 783.58, "text": " So let's do that.", "tokens": [50504, 407, 718, 311, 360, 300, 13, 50596], "temperature": 0.0, "avg_logprob": -0.2520905449276879, "compression_ratio": 1.565217391304348, "no_speech_prob": 3.21898223774042e-05}, {"id": 179, "seek": 77894, "start": 783.58, "end": 786.62, "text": " So here's the paper, DiffEdit.", "tokens": [50596, 407, 510, 311, 264, 3035, 11, 413, 3661, 36, 17975, 13, 50748], "temperature": 0.0, "avg_logprob": -0.2520905449276879, "compression_ratio": 1.565217391304348, "no_speech_prob": 3.21898223774042e-05}, {"id": 180, "seek": 77894, "start": 786.62, "end": 794.34, "text": " And you'll find that probably the majority of papers that you come across in deep learning", "tokens": [50748, 400, 291, 603, 915, 300, 1391, 264, 6286, 295, 10577, 300, 291, 808, 2108, 294, 2452, 2539, 51134], "temperature": 0.0, "avg_logprob": -0.2520905449276879, "compression_ratio": 1.565217391304348, "no_speech_prob": 3.21898223774042e-05}, {"id": 181, "seek": 77894, "start": 794.34, "end": 797.1400000000001, "text": " will take you to Archive.", "tokens": [51134, 486, 747, 291, 281, 10984, 488, 13, 51274], "temperature": 0.0, "avg_logprob": -0.2520905449276879, "compression_ratio": 1.565217391304348, "no_speech_prob": 3.21898223774042e-05}, {"id": 182, "seek": 77894, "start": 797.1400000000001, "end": 799.7, "text": " Archive is a preprint server.", "tokens": [51274, 10984, 488, 307, 257, 659, 14030, 7154, 13, 51402], "temperature": 0.0, "avg_logprob": -0.2520905449276879, "compression_ratio": 1.565217391304348, "no_speech_prob": 3.21898223774042e-05}, {"id": 183, "seek": 77894, "start": 799.7, "end": 806.0600000000001, "text": " So these are models, these are papers that have not been peer reviewed.", "tokens": [51402, 407, 613, 366, 5245, 11, 613, 366, 10577, 300, 362, 406, 668, 15108, 18429, 13, 51720], "temperature": 0.0, "avg_logprob": -0.2520905449276879, "compression_ratio": 1.565217391304348, "no_speech_prob": 3.21898223774042e-05}, {"id": 184, "seek": 80606, "start": 806.0999999999999, "end": 812.4599999999999, "text": " I would say in our field, we don't generally, or I certainly don't generally care about", "tokens": [50366, 286, 576, 584, 294, 527, 2519, 11, 321, 500, 380, 5101, 11, 420, 286, 3297, 500, 380, 5101, 1127, 466, 50684], "temperature": 0.0, "avg_logprob": -0.20333279503716362, "compression_ratio": 1.6654545454545455, "no_speech_prob": 6.605192174902186e-05}, {"id": 185, "seek": 80606, "start": 812.4599999999999, "end": 817.14, "text": " that at all, because we have code, we can try it, we can see things, whether it works", "tokens": [50684, 300, 412, 439, 11, 570, 321, 362, 3089, 11, 321, 393, 853, 309, 11, 321, 393, 536, 721, 11, 1968, 309, 1985, 50918], "temperature": 0.0, "avg_logprob": -0.20333279503716362, "compression_ratio": 1.6654545454545455, "no_speech_prob": 6.605192174902186e-05}, {"id": 186, "seek": 80606, "start": 817.14, "end": 818.14, "text": " or not.", "tokens": [50918, 420, 406, 13, 50968], "temperature": 0.0, "avg_logprob": -0.20333279503716362, "compression_ratio": 1.6654545454545455, "no_speech_prob": 6.605192174902186e-05}, {"id": 187, "seek": 80606, "start": 818.14, "end": 822.66, "text": " You know, we tend to be very, you know, most papers are very transparent about here's what", "tokens": [50968, 509, 458, 11, 321, 3928, 281, 312, 588, 11, 291, 458, 11, 881, 10577, 366, 588, 12737, 466, 510, 311, 437, 51194], "temperature": 0.0, "avg_logprob": -0.20333279503716362, "compression_ratio": 1.6654545454545455, "no_speech_prob": 6.605192174902186e-05}, {"id": 188, "seek": 80606, "start": 822.66, "end": 825.9799999999999, "text": " we did and how we did it, and you can replicate it.", "tokens": [51194, 321, 630, 293, 577, 321, 630, 309, 11, 293, 291, 393, 25356, 309, 13, 51360], "temperature": 0.0, "avg_logprob": -0.20333279503716362, "compression_ratio": 1.6654545454545455, "no_speech_prob": 6.605192174902186e-05}, {"id": 189, "seek": 80606, "start": 825.9799999999999, "end": 830.02, "text": " And it gets a huge amount of peer review on Twitter.", "tokens": [51360, 400, 309, 2170, 257, 2603, 2372, 295, 15108, 3131, 322, 5794, 13, 51562], "temperature": 0.0, "avg_logprob": -0.20333279503716362, "compression_ratio": 1.6654545454545455, "no_speech_prob": 6.605192174902186e-05}, {"id": 190, "seek": 80606, "start": 830.02, "end": 835.06, "text": " So if there's a problem, generally within 24 hours, somebody has pointed it out.", "tokens": [51562, 407, 498, 456, 311, 257, 1154, 11, 5101, 1951, 4022, 2496, 11, 2618, 575, 10932, 309, 484, 13, 51814], "temperature": 0.0, "avg_logprob": -0.20333279503716362, "compression_ratio": 1.6654545454545455, "no_speech_prob": 6.605192174902186e-05}, {"id": 191, "seek": 83506, "start": 835.06, "end": 836.6999999999999, "text": " So we use Archive a lot.", "tokens": [50364, 407, 321, 764, 10984, 488, 257, 688, 13, 50446], "temperature": 0.0, "avg_logprob": -0.232060145664882, "compression_ratio": 1.6666666666666667, "no_speech_prob": 9.461226727580652e-05}, {"id": 192, "seek": 83506, "start": 836.6999999999999, "end": 840.26, "text": " And if you wait until it's been peer reviewed, you know, you'll be way out of date because", "tokens": [50446, 400, 498, 291, 1699, 1826, 309, 311, 668, 15108, 18429, 11, 291, 458, 11, 291, 603, 312, 636, 484, 295, 4002, 570, 50624], "temperature": 0.0, "avg_logprob": -0.232060145664882, "compression_ratio": 1.6666666666666667, "no_speech_prob": 9.461226727580652e-05}, {"id": 193, "seek": 83506, "start": 840.26, "end": 843.4599999999999, "text": " this field is moving so quickly.", "tokens": [50624, 341, 2519, 307, 2684, 370, 2661, 13, 50784], "temperature": 0.0, "avg_logprob": -0.232060145664882, "compression_ratio": 1.6666666666666667, "no_speech_prob": 9.461226727580652e-05}, {"id": 194, "seek": 83506, "start": 843.4599999999999, "end": 848.38, "text": " So here it is on Archive, and we can read it by clicking on the PDF button.", "tokens": [50784, 407, 510, 309, 307, 322, 10984, 488, 11, 293, 321, 393, 1401, 309, 538, 9697, 322, 264, 17752, 2960, 13, 51030], "temperature": 0.0, "avg_logprob": -0.232060145664882, "compression_ratio": 1.6666666666666667, "no_speech_prob": 9.461226727580652e-05}, {"id": 195, "seek": 83506, "start": 848.38, "end": 850.26, "text": " I don't do that.", "tokens": [51030, 286, 500, 380, 360, 300, 13, 51124], "temperature": 0.0, "avg_logprob": -0.232060145664882, "compression_ratio": 1.6666666666666667, "no_speech_prob": 9.461226727580652e-05}, {"id": 196, "seek": 83506, "start": 850.26, "end": 856.3, "text": " Instead I click on this little button up here, which is the Save to Zotero button.", "tokens": [51124, 7156, 286, 2052, 322, 341, 707, 2960, 493, 510, 11, 597, 307, 264, 15541, 281, 1176, 310, 2032, 2960, 13, 51426], "temperature": 0.0, "avg_logprob": -0.232060145664882, "compression_ratio": 1.6666666666666667, "no_speech_prob": 9.461226727580652e-05}, {"id": 197, "seek": 83506, "start": 856.3, "end": 859.3599999999999, "text": " So I figured I'd show you like my preferred workflows.", "tokens": [51426, 407, 286, 8932, 286, 1116, 855, 291, 411, 452, 16494, 43461, 13, 51579], "temperature": 0.0, "avg_logprob": -0.232060145664882, "compression_ratio": 1.6666666666666667, "no_speech_prob": 9.461226727580652e-05}, {"id": 198, "seek": 83506, "start": 859.3599999999999, "end": 860.66, "text": " You don't have to do the same thing.", "tokens": [51579, 509, 500, 380, 362, 281, 360, 264, 912, 551, 13, 51644], "temperature": 0.0, "avg_logprob": -0.232060145664882, "compression_ratio": 1.6666666666666667, "no_speech_prob": 9.461226727580652e-05}, {"id": 199, "seek": 83506, "start": 860.66, "end": 864.6199999999999, "text": " There are different workflows, but here's one that I find works very well, which is", "tokens": [51644, 821, 366, 819, 43461, 11, 457, 510, 311, 472, 300, 286, 915, 1985, 588, 731, 11, 597, 307, 51842], "temperature": 0.0, "avg_logprob": -0.232060145664882, "compression_ratio": 1.6666666666666667, "no_speech_prob": 9.461226727580652e-05}, {"id": 200, "seek": 86462, "start": 865.18, "end": 871.22, "text": " Zotero is a piece of free software that you can download for Mac, Windows, Linux, and", "tokens": [50392, 1176, 310, 2032, 307, 257, 2522, 295, 1737, 4722, 300, 291, 393, 5484, 337, 5707, 11, 8591, 11, 18734, 11, 293, 50694], "temperature": 0.0, "avg_logprob": -0.3070710126091452, "compression_ratio": 1.4821428571428572, "no_speech_prob": 0.00039203817141242325}, {"id": 201, "seek": 86462, "start": 871.22, "end": 872.62, "text": " install a Chrome connector.", "tokens": [50694, 3625, 257, 15327, 19127, 13, 50764], "temperature": 0.0, "avg_logprob": -0.3070710126091452, "compression_ratio": 1.4821428571428572, "no_speech_prob": 0.00039203817141242325}, {"id": 202, "seek": 86462, "start": 872.62, "end": 875.98, "text": " Oh, Tanishka is saying the button's covered.", "tokens": [50764, 876, 11, 314, 7524, 2330, 307, 1566, 264, 2960, 311, 5343, 13, 50932], "temperature": 0.0, "avg_logprob": -0.3070710126091452, "compression_ratio": 1.4821428571428572, "no_speech_prob": 0.00039203817141242325}, {"id": 203, "seek": 86462, "start": 875.98, "end": 876.98, "text": " All right.", "tokens": [50932, 1057, 558, 13, 50982], "temperature": 0.0, "avg_logprob": -0.3070710126091452, "compression_ratio": 1.4821428571428572, "no_speech_prob": 0.00039203817141242325}, {"id": 204, "seek": 86462, "start": 876.98, "end": 881.02, "text": " So in my taskbar, I have a button that I can click that says Save to Zotero.", "tokens": [50982, 407, 294, 452, 5633, 5356, 11, 286, 362, 257, 2960, 300, 286, 393, 2052, 300, 1619, 15541, 281, 1176, 310, 2032, 13, 51184], "temperature": 0.0, "avg_logprob": -0.3070710126091452, "compression_ratio": 1.4821428571428572, "no_speech_prob": 0.00039203817141242325}, {"id": 205, "seek": 86462, "start": 881.02, "end": 884.34, "text": " Sorry, not taskbar, Chrome menu bar.", "tokens": [51184, 4919, 11, 406, 5633, 5356, 11, 15327, 6510, 2159, 13, 51350], "temperature": 0.0, "avg_logprob": -0.3070710126091452, "compression_ratio": 1.4821428571428572, "no_speech_prob": 0.00039203817141242325}, {"id": 206, "seek": 86462, "start": 884.34, "end": 886.22, "text": " And when I click it, I'll show you what happens.", "tokens": [51350, 400, 562, 286, 2052, 309, 11, 286, 603, 855, 291, 437, 2314, 13, 51444], "temperature": 0.0, "avg_logprob": -0.3070710126091452, "compression_ratio": 1.4821428571428572, "no_speech_prob": 0.00039203817141242325}, {"id": 207, "seek": 88622, "start": 886.22, "end": 896.26, "text": " So after I've downloaded this, the paper will automatically appear here in this software,", "tokens": [50364, 407, 934, 286, 600, 21748, 341, 11, 264, 3035, 486, 6772, 4204, 510, 294, 341, 4722, 11, 50866], "temperature": 0.0, "avg_logprob": -0.23942947387695312, "compression_ratio": 1.4487179487179487, "no_speech_prob": 0.0010484230006113648}, {"id": 208, "seek": 88622, "start": 896.26, "end": 898.5400000000001, "text": " which is Zotero.", "tokens": [50866, 597, 307, 1176, 310, 2032, 13, 50980], "temperature": 0.0, "avg_logprob": -0.23942947387695312, "compression_ratio": 1.4487179487179487, "no_speech_prob": 0.0010484230006113648}, {"id": 209, "seek": 88622, "start": 898.5400000000001, "end": 904.62, "text": " And so here it is, diffedit.", "tokens": [50980, 400, 370, 510, 309, 307, 11, 7593, 292, 270, 13, 51284], "temperature": 0.0, "avg_logprob": -0.23942947387695312, "compression_ratio": 1.4487179487179487, "no_speech_prob": 0.0010484230006113648}, {"id": 210, "seek": 88622, "start": 904.62, "end": 912.74, "text": " And you can see it's told us, it's got here the abstract, the authors, where it came from.", "tokens": [51284, 400, 291, 393, 536, 309, 311, 1907, 505, 11, 309, 311, 658, 510, 264, 12649, 11, 264, 16552, 11, 689, 309, 1361, 490, 13, 51690], "temperature": 0.0, "avg_logprob": -0.23942947387695312, "compression_ratio": 1.4487179487179487, "no_speech_prob": 0.0010484230006113648}, {"id": 211, "seek": 91274, "start": 912.74, "end": 916.38, "text": " And so later on, I can go and like, if I want to check some detail, I can go back and", "tokens": [50364, 400, 370, 1780, 322, 11, 286, 393, 352, 293, 411, 11, 498, 286, 528, 281, 1520, 512, 2607, 11, 286, 393, 352, 646, 293, 50546], "temperature": 0.0, "avg_logprob": -0.21102101349633587, "compression_ratio": 1.7149321266968325, "no_speech_prob": 0.00047281733714044094}, {"id": 212, "seek": 91274, "start": 916.38, "end": 917.5, "text": " see the URL.", "tokens": [50546, 536, 264, 12905, 13, 50602], "temperature": 0.0, "avg_logprob": -0.21102101349633587, "compression_ratio": 1.7149321266968325, "no_speech_prob": 0.00047281733714044094}, {"id": 213, "seek": 91274, "start": 917.5, "end": 920.34, "text": " I can click on it, pops up.", "tokens": [50602, 286, 393, 2052, 322, 309, 11, 16795, 493, 13, 50744], "temperature": 0.0, "avg_logprob": -0.21102101349633587, "compression_ratio": 1.7149321266968325, "no_speech_prob": 0.00047281733714044094}, {"id": 214, "seek": 91274, "start": 920.34, "end": 924.7, "text": " And so in this case, what I'm going to do is I'm going to double click on it.", "tokens": [50744, 400, 370, 294, 341, 1389, 11, 437, 286, 478, 516, 281, 360, 307, 286, 478, 516, 281, 3834, 2052, 322, 309, 13, 50962], "temperature": 0.0, "avg_logprob": -0.21102101349633587, "compression_ratio": 1.7149321266968325, "no_speech_prob": 0.00047281733714044094}, {"id": 215, "seek": 91274, "start": 924.7, "end": 927.02, "text": " And that brings up the paper.", "tokens": [50962, 400, 300, 5607, 493, 264, 3035, 13, 51078], "temperature": 0.0, "avg_logprob": -0.21102101349633587, "compression_ratio": 1.7149321266968325, "no_speech_prob": 0.00047281733714044094}, {"id": 216, "seek": 91274, "start": 927.02, "end": 935.82, "text": " Now the reason I like to read my papers in Zotero is that I can, you know, annotate them,", "tokens": [51078, 823, 264, 1778, 286, 411, 281, 1401, 452, 10577, 294, 1176, 310, 2032, 307, 300, 286, 393, 11, 291, 458, 11, 25339, 473, 552, 11, 51518], "temperature": 0.0, "avg_logprob": -0.21102101349633587, "compression_ratio": 1.7149321266968325, "no_speech_prob": 0.00047281733714044094}, {"id": 217, "seek": 91274, "start": 935.82, "end": 940.58, "text": " edit them, tag them, put them in folders and so forth.", "tokens": [51518, 8129, 552, 11, 6162, 552, 11, 829, 552, 294, 31082, 293, 370, 5220, 13, 51756], "temperature": 0.0, "avg_logprob": -0.21102101349633587, "compression_ratio": 1.7149321266968325, "no_speech_prob": 0.00047281733714044094}, {"id": 218, "seek": 94058, "start": 940.58, "end": 945.22, "text": " And also add them to my kind of reading list directly from my web browser.", "tokens": [50364, 400, 611, 909, 552, 281, 452, 733, 295, 3760, 1329, 3838, 490, 452, 3670, 11185, 13, 50596], "temperature": 0.0, "avg_logprob": -0.24755164951954073, "compression_ratio": 1.5943775100401607, "no_speech_prob": 0.008315331302583218}, {"id": 219, "seek": 94058, "start": 945.22, "end": 950.82, "text": " So as you can see, you know, I've started this fast diffusion folder, which is actually", "tokens": [50596, 407, 382, 291, 393, 536, 11, 291, 458, 11, 286, 600, 1409, 341, 2370, 25242, 10820, 11, 597, 307, 767, 50876], "temperature": 0.0, "avg_logprob": -0.24755164951954073, "compression_ratio": 1.5943775100401607, "no_speech_prob": 0.008315331302583218}, {"id": 220, "seek": 94058, "start": 950.82, "end": 956.48, "text": " a group library, which I share with the other folks working on this fast diffusion project", "tokens": [50876, 257, 1594, 6405, 11, 597, 286, 2073, 365, 264, 661, 4024, 1364, 322, 341, 2370, 25242, 1716, 51159], "temperature": 0.0, "avg_logprob": -0.24755164951954073, "compression_ratio": 1.5943775100401607, "no_speech_prob": 0.008315331302583218}, {"id": 221, "seek": 94058, "start": 956.48, "end": 958.0600000000001, "text": " that we're all doing together.", "tokens": [51159, 300, 321, 434, 439, 884, 1214, 13, 51238], "temperature": 0.0, "avg_logprob": -0.24755164951954073, "compression_ratio": 1.5943775100401607, "no_speech_prob": 0.008315331302583218}, {"id": 222, "seek": 94058, "start": 958.0600000000001, "end": 963.1, "text": " And so we can all see the same paper library.", "tokens": [51238, 400, 370, 321, 393, 439, 536, 264, 912, 3035, 6405, 13, 51490], "temperature": 0.0, "avg_logprob": -0.24755164951954073, "compression_ratio": 1.5943775100401607, "no_speech_prob": 0.008315331302583218}, {"id": 223, "seek": 94058, "start": 963.1, "end": 967.7800000000001, "text": " So Maribu on YouTube chat is asking, is this better than Mendeley?", "tokens": [51490, 407, 2039, 897, 84, 322, 3088, 5081, 307, 3365, 11, 307, 341, 1101, 813, 376, 5445, 3420, 30, 51724], "temperature": 0.0, "avg_logprob": -0.24755164951954073, "compression_ratio": 1.5943775100401607, "no_speech_prob": 0.008315331302583218}, {"id": 224, "seek": 96778, "start": 967.98, "end": 971.14, "text": " Yeah, I used to use Mendeley and it's kind of gone downhill.", "tokens": [50374, 865, 11, 286, 1143, 281, 764, 376, 5445, 3420, 293, 309, 311, 733, 295, 2780, 29929, 13, 50532], "temperature": 0.0, "avg_logprob": -0.26056493871352254, "compression_ratio": 1.4187192118226601, "no_speech_prob": 2.8856631615781225e-05}, {"id": 225, "seek": 96778, "start": 971.14, "end": 975.26, "text": " I think Zotero is far, far better, but they're both very similar.", "tokens": [50532, 286, 519, 1176, 310, 2032, 307, 1400, 11, 1400, 1101, 11, 457, 436, 434, 1293, 588, 2531, 13, 50738], "temperature": 0.0, "avg_logprob": -0.26056493871352254, "compression_ratio": 1.4187192118226601, "no_speech_prob": 2.8856631615781225e-05}, {"id": 226, "seek": 96778, "start": 975.26, "end": 983.22, "text": " Okay, so when you double click on it, it opens up and here is a paper.", "tokens": [50738, 1033, 11, 370, 562, 291, 3834, 2052, 322, 309, 11, 309, 9870, 493, 293, 510, 307, 257, 3035, 13, 51136], "temperature": 0.0, "avg_logprob": -0.26056493871352254, "compression_ratio": 1.4187192118226601, "no_speech_prob": 2.8856631615781225e-05}, {"id": 227, "seek": 96778, "start": 983.22, "end": 992.98, "text": " So reading a paper is always extremely intimidating.", "tokens": [51136, 407, 3760, 257, 3035, 307, 1009, 4664, 29714, 13, 51624], "temperature": 0.0, "avg_logprob": -0.26056493871352254, "compression_ratio": 1.4187192118226601, "no_speech_prob": 2.8856631615781225e-05}, {"id": 228, "seek": 96778, "start": 992.98, "end": 996.02, "text": " And so you just have to do it anyway.", "tokens": [51624, 400, 370, 291, 445, 362, 281, 360, 309, 4033, 13, 51776], "temperature": 0.0, "avg_logprob": -0.26056493871352254, "compression_ratio": 1.4187192118226601, "no_speech_prob": 2.8856631615781225e-05}, {"id": 229, "seek": 99602, "start": 996.06, "end": 999.98, "text": " And you have to realize that your goal is not to understand every word.", "tokens": [50366, 400, 291, 362, 281, 4325, 300, 428, 3387, 307, 406, 281, 1223, 633, 1349, 13, 50562], "temperature": 0.0, "avg_logprob": -0.2231120171948014, "compression_ratio": 1.7322175732217573, "no_speech_prob": 0.0001881414355011657}, {"id": 230, "seek": 99602, "start": 999.98, "end": 1006.5, "text": " Your goal is to understand the basic idea well enough that, for example, when you look", "tokens": [50562, 2260, 3387, 307, 281, 1223, 264, 3875, 1558, 731, 1547, 300, 11, 337, 1365, 11, 562, 291, 574, 50888], "temperature": 0.0, "avg_logprob": -0.2231120171948014, "compression_ratio": 1.7322175732217573, "no_speech_prob": 0.0001881414355011657}, {"id": 231, "seek": 99602, "start": 1006.5, "end": 1011.1, "text": " at the code, hopefully it comes with code, most things do, that you'll be able to kind", "tokens": [50888, 412, 264, 3089, 11, 4696, 309, 1487, 365, 3089, 11, 881, 721, 360, 11, 300, 291, 603, 312, 1075, 281, 733, 51118], "temperature": 0.0, "avg_logprob": -0.2231120171948014, "compression_ratio": 1.7322175732217573, "no_speech_prob": 0.0001881414355011657}, {"id": 232, "seek": 99602, "start": 1011.1, "end": 1016.06, "text": " of see how the code matches to it and that you could try writing your own code to implement", "tokens": [51118, 295, 536, 577, 264, 3089, 10676, 281, 309, 293, 300, 291, 727, 853, 3579, 428, 1065, 3089, 281, 4445, 51366], "temperature": 0.0, "avg_logprob": -0.2231120171948014, "compression_ratio": 1.7322175732217573, "no_speech_prob": 0.0001881414355011657}, {"id": 233, "seek": 99602, "start": 1016.06, "end": 1018.34, "text": " parts of it yourself.", "tokens": [51366, 3166, 295, 309, 1803, 13, 51480], "temperature": 0.0, "avg_logprob": -0.2231120171948014, "compression_ratio": 1.7322175732217573, "no_speech_prob": 0.0001881414355011657}, {"id": 234, "seek": 99602, "start": 1018.34, "end": 1021.5, "text": " So over on the left, you can open up the sidebar here.", "tokens": [51480, 407, 670, 322, 264, 1411, 11, 291, 393, 1269, 493, 264, 1252, 5356, 510, 13, 51638], "temperature": 0.0, "avg_logprob": -0.2231120171948014, "compression_ratio": 1.7322175732217573, "no_speech_prob": 0.0001881414355011657}, {"id": 235, "seek": 102150, "start": 1021.5, "end": 1027.3, "text": " So I generally open up the table of contents and get a bit of a sense of, okay, so there's", "tokens": [50364, 407, 286, 5101, 1269, 493, 264, 3199, 295, 15768, 293, 483, 257, 857, 295, 257, 2020, 295, 11, 1392, 11, 370, 456, 311, 50654], "temperature": 0.0, "avg_logprob": -0.29785415563690526, "compression_ratio": 1.6574074074074074, "no_speech_prob": 0.00032503207330591977}, {"id": 236, "seek": 102150, "start": 1027.3, "end": 1036.1, "text": " some experimental results, there's some theoretical results, introduction related work, okay,", "tokens": [50654, 512, 17069, 3542, 11, 456, 311, 512, 20864, 3542, 11, 9339, 4077, 589, 11, 1392, 11, 51094], "temperature": 0.0, "avg_logprob": -0.29785415563690526, "compression_ratio": 1.6574074074074074, "no_speech_prob": 0.00032503207330591977}, {"id": 237, "seek": 102150, "start": 1036.1, "end": 1039.38, "text": " tells us about this new diffedit thing, some experiments.", "tokens": [51094, 5112, 505, 466, 341, 777, 7593, 292, 270, 551, 11, 512, 12050, 13, 51258], "temperature": 0.0, "avg_logprob": -0.29785415563690526, "compression_ratio": 1.6574074074074074, "no_speech_prob": 0.00032503207330591977}, {"id": 238, "seek": 102150, "start": 1039.38, "end": 1046.5, "text": " Okay, so that's a pretty standard approach that you would see in papers.", "tokens": [51258, 1033, 11, 370, 300, 311, 257, 1238, 3832, 3109, 300, 291, 576, 536, 294, 10577, 13, 51614], "temperature": 0.0, "avg_logprob": -0.29785415563690526, "compression_ratio": 1.6574074074074074, "no_speech_prob": 0.00032503207330591977}, {"id": 239, "seek": 102150, "start": 1046.5, "end": 1048.46, "text": " So I would always start with the abstract.", "tokens": [51614, 407, 286, 576, 1009, 722, 365, 264, 12649, 13, 51712], "temperature": 0.0, "avg_logprob": -0.29785415563690526, "compression_ratio": 1.6574074074074074, "no_speech_prob": 0.00032503207330591977}, {"id": 240, "seek": 104846, "start": 1048.46, "end": 1052.26, "text": " Okay, so what's it saying this does?", "tokens": [50364, 1033, 11, 370, 437, 311, 309, 1566, 341, 775, 30, 50554], "temperature": 0.0, "avg_logprob": -0.22095751941652225, "compression_ratio": 1.782442748091603, "no_speech_prob": 8.349615382030606e-05}, {"id": 241, "seek": 104846, "start": 1052.26, "end": 1055.8600000000001, "text": " So generally, it's going to be some background sentence or two about how interesting this", "tokens": [50554, 407, 5101, 11, 309, 311, 516, 281, 312, 512, 3678, 8174, 420, 732, 466, 577, 1880, 341, 50734], "temperature": 0.0, "avg_logprob": -0.22095751941652225, "compression_ratio": 1.782442748091603, "no_speech_prob": 8.349615382030606e-05}, {"id": 242, "seek": 104846, "start": 1055.8600000000001, "end": 1056.8600000000001, "text": " field is.", "tokens": [50734, 2519, 307, 13, 50784], "temperature": 0.0, "avg_logprob": -0.22095751941652225, "compression_ratio": 1.782442748091603, "no_speech_prob": 8.349615382030606e-05}, {"id": 243, "seek": 104846, "start": 1056.8600000000001, "end": 1059.32, "text": " It's just saying, well, image generation is cool, which is fine.", "tokens": [50784, 467, 311, 445, 1566, 11, 731, 11, 3256, 5125, 307, 1627, 11, 597, 307, 2489, 13, 50907], "temperature": 0.0, "avg_logprob": -0.22095751941652225, "compression_ratio": 1.782442748091603, "no_speech_prob": 8.349615382030606e-05}, {"id": 244, "seek": 104846, "start": 1059.32, "end": 1061.5, "text": " And then they're going to tell us what they're going to do, which is they're going to create", "tokens": [50907, 400, 550, 436, 434, 516, 281, 980, 505, 437, 436, 434, 516, 281, 360, 11, 597, 307, 436, 434, 516, 281, 1884, 51016], "temperature": 0.0, "avg_logprob": -0.22095751941652225, "compression_ratio": 1.782442748091603, "no_speech_prob": 8.349615382030606e-05}, {"id": 245, "seek": 104846, "start": 1061.5, "end": 1068.94, "text": " something called diffedit.", "tokens": [51016, 746, 1219, 7593, 292, 270, 13, 51388], "temperature": 0.0, "avg_logprob": -0.22095751941652225, "compression_ratio": 1.782442748091603, "no_speech_prob": 8.349615382030606e-05}, {"id": 246, "seek": 104846, "start": 1068.94, "end": 1070.8600000000001, "text": " And so this is a, what is it for?", "tokens": [51388, 400, 370, 341, 307, 257, 11, 437, 307, 309, 337, 30, 51484], "temperature": 0.0, "avg_logprob": -0.22095751941652225, "compression_ratio": 1.782442748091603, "no_speech_prob": 8.349615382030606e-05}, {"id": 247, "seek": 104846, "start": 1070.8600000000001, "end": 1073.64, "text": " It's going to use text condition diffusion models.", "tokens": [51484, 467, 311, 516, 281, 764, 2487, 4188, 25242, 5245, 13, 51623], "temperature": 0.0, "avg_logprob": -0.22095751941652225, "compression_ratio": 1.782442748091603, "no_speech_prob": 8.349615382030606e-05}, {"id": 248, "seek": 104846, "start": 1073.64, "end": 1074.82, "text": " So we know what those are now.", "tokens": [51623, 407, 321, 458, 437, 729, 366, 586, 13, 51682], "temperature": 0.0, "avg_logprob": -0.22095751941652225, "compression_ratio": 1.782442748091603, "no_speech_prob": 8.349615382030606e-05}, {"id": 249, "seek": 104846, "start": 1074.82, "end": 1076.0, "text": " That's what we've been using.", "tokens": [51682, 663, 311, 437, 321, 600, 668, 1228, 13, 51741], "temperature": 0.0, "avg_logprob": -0.22095751941652225, "compression_ratio": 1.782442748091603, "no_speech_prob": 8.349615382030606e-05}, {"id": 250, "seek": 107600, "start": 1076.08, "end": 1081.32, "text": " That's where we type in some text and get back an image of that that matches the text.", "tokens": [50368, 663, 311, 689, 321, 2010, 294, 512, 2487, 293, 483, 646, 364, 3256, 295, 300, 300, 10676, 264, 2487, 13, 50630], "temperature": 0.0, "avg_logprob": -0.2386508374600797, "compression_ratio": 1.8388278388278387, "no_speech_prob": 0.008445555344223976}, {"id": 251, "seek": 107600, "start": 1081.32, "end": 1082.4, "text": " But this is going to be different.", "tokens": [50630, 583, 341, 307, 516, 281, 312, 819, 13, 50684], "temperature": 0.0, "avg_logprob": -0.2386508374600797, "compression_ratio": 1.8388278388278387, "no_speech_prob": 0.008445555344223976}, {"id": 252, "seek": 107600, "start": 1082.4, "end": 1084.48, "text": " It's the task of semantic image editing.", "tokens": [50684, 467, 311, 264, 5633, 295, 47982, 3256, 10000, 13, 50788], "temperature": 0.0, "avg_logprob": -0.2386508374600797, "compression_ratio": 1.8388278388278387, "no_speech_prob": 0.008445555344223976}, {"id": 253, "seek": 107600, "start": 1084.48, "end": 1086.36, "text": " Okay, we don't know what that is yet.", "tokens": [50788, 1033, 11, 321, 500, 380, 458, 437, 300, 307, 1939, 13, 50882], "temperature": 0.0, "avg_logprob": -0.2386508374600797, "compression_ratio": 1.8388278388278387, "no_speech_prob": 0.008445555344223976}, {"id": 254, "seek": 107600, "start": 1086.36, "end": 1090.88, "text": " So let's put that aside and think, okay, let's make sure we understand that later.", "tokens": [50882, 407, 718, 311, 829, 300, 7359, 293, 519, 11, 1392, 11, 718, 311, 652, 988, 321, 1223, 300, 1780, 13, 51108], "temperature": 0.0, "avg_logprob": -0.2386508374600797, "compression_ratio": 1.8388278388278387, "no_speech_prob": 0.008445555344223976}, {"id": 255, "seek": 107600, "start": 1090.88, "end": 1093.64, "text": " The goal is to edit an image based on a text query.", "tokens": [51108, 440, 3387, 307, 281, 8129, 364, 3256, 2361, 322, 257, 2487, 14581, 13, 51246], "temperature": 0.0, "avg_logprob": -0.2386508374600797, "compression_ratio": 1.8388278388278387, "no_speech_prob": 0.008445555344223976}, {"id": 256, "seek": 107600, "start": 1093.64, "end": 1094.88, "text": " Oh, okay.", "tokens": [51246, 876, 11, 1392, 13, 51308], "temperature": 0.0, "avg_logprob": -0.2386508374600797, "compression_ratio": 1.8388278388278387, "no_speech_prob": 0.008445555344223976}, {"id": 257, "seek": 107600, "start": 1094.88, "end": 1096.76, "text": " So we're going to edit an image based on text.", "tokens": [51308, 407, 321, 434, 516, 281, 8129, 364, 3256, 2361, 322, 2487, 13, 51402], "temperature": 0.0, "avg_logprob": -0.2386508374600797, "compression_ratio": 1.8388278388278387, "no_speech_prob": 0.008445555344223976}, {"id": 258, "seek": 107600, "start": 1096.76, "end": 1097.76, "text": " How on earth would you do that?", "tokens": [51402, 1012, 322, 4120, 576, 291, 360, 300, 30, 51452], "temperature": 0.0, "avg_logprob": -0.2386508374600797, "compression_ratio": 1.8388278388278387, "no_speech_prob": 0.008445555344223976}, {"id": 259, "seek": 107600, "start": 1097.76, "end": 1101.08, "text": " Ah, they're going to tell us right away what this is.", "tokens": [51452, 2438, 11, 436, 434, 516, 281, 980, 505, 558, 1314, 437, 341, 307, 13, 51618], "temperature": 0.0, "avg_logprob": -0.2386508374600797, "compression_ratio": 1.8388278388278387, "no_speech_prob": 0.008445555344223976}, {"id": 260, "seek": 107600, "start": 1101.08, "end": 1102.16, "text": " Semantic image editing.", "tokens": [51618, 14421, 7128, 3256, 10000, 13, 51672], "temperature": 0.0, "avg_logprob": -0.2386508374600797, "compression_ratio": 1.8388278388278387, "no_speech_prob": 0.008445555344223976}, {"id": 261, "seek": 110216, "start": 1102.16, "end": 1107.5600000000002, "text": " It's an extension of image generation with an additional constraint, which is the generated", "tokens": [50364, 467, 311, 364, 10320, 295, 3256, 5125, 365, 364, 4497, 25534, 11, 597, 307, 264, 10833, 50634], "temperature": 0.0, "avg_logprob": -0.23918688499321372, "compression_ratio": 1.75, "no_speech_prob": 0.005060282535851002}, {"id": 262, "seek": 110216, "start": 1107.5600000000002, "end": 1110.5600000000002, "text": " image should be as similar as possible to the given input.", "tokens": [50634, 3256, 820, 312, 382, 2531, 382, 1944, 281, 264, 2212, 4846, 13, 50784], "temperature": 0.0, "avg_logprob": -0.23918688499321372, "compression_ratio": 1.75, "no_speech_prob": 0.005060282535851002}, {"id": 263, "seek": 110216, "start": 1110.5600000000002, "end": 1116.1200000000001, "text": " And so generally, as they've done here, there's going to be a picture that shows us what's", "tokens": [50784, 400, 370, 5101, 11, 382, 436, 600, 1096, 510, 11, 456, 311, 516, 281, 312, 257, 3036, 300, 3110, 505, 437, 311, 51062], "temperature": 0.0, "avg_logprob": -0.23918688499321372, "compression_ratio": 1.75, "no_speech_prob": 0.005060282535851002}, {"id": 264, "seek": 110216, "start": 1116.1200000000001, "end": 1117.3400000000001, "text": " going on.", "tokens": [51062, 516, 322, 13, 51123], "temperature": 0.0, "avg_logprob": -0.23918688499321372, "compression_ratio": 1.75, "no_speech_prob": 0.005060282535851002}, {"id": 265, "seek": 110216, "start": 1117.3400000000001, "end": 1119.8400000000001, "text": " And so in this picture, you can see here an example.", "tokens": [51123, 400, 370, 294, 341, 3036, 11, 291, 393, 536, 510, 364, 1365, 13, 51248], "temperature": 0.0, "avg_logprob": -0.23918688499321372, "compression_ratio": 1.75, "no_speech_prob": 0.005060282535851002}, {"id": 266, "seek": 110216, "start": 1119.8400000000001, "end": 1122.3600000000001, "text": " Here's an input image.", "tokens": [51248, 1692, 311, 364, 4846, 3256, 13, 51374], "temperature": 0.0, "avg_logprob": -0.23918688499321372, "compression_ratio": 1.75, "no_speech_prob": 0.005060282535851002}, {"id": 267, "seek": 110216, "start": 1122.3600000000001, "end": 1126.8000000000002, "text": " And originally it was attached to a caption, a bowl of fruits.", "tokens": [51374, 400, 7993, 309, 390, 8570, 281, 257, 31974, 11, 257, 6571, 295, 12148, 13, 51596], "temperature": 0.0, "avg_logprob": -0.23918688499321372, "compression_ratio": 1.75, "no_speech_prob": 0.005060282535851002}, {"id": 268, "seek": 110216, "start": 1126.8000000000002, "end": 1130.4, "text": " Okay, we want to change this into a bowl of pears.", "tokens": [51596, 1033, 11, 321, 528, 281, 1319, 341, 666, 257, 6571, 295, 520, 685, 13, 51776], "temperature": 0.0, "avg_logprob": -0.23918688499321372, "compression_ratio": 1.75, "no_speech_prob": 0.005060282535851002}, {"id": 269, "seek": 113040, "start": 1130.4, "end": 1138.92, "text": " So we type a bowl of pears and it generates, oh, a bowl of pears.", "tokens": [50364, 407, 321, 2010, 257, 6571, 295, 520, 685, 293, 309, 23815, 11, 1954, 11, 257, 6571, 295, 520, 685, 13, 50790], "temperature": 0.0, "avg_logprob": -0.23407625115436057, "compression_ratio": 1.6576086956521738, "no_speech_prob": 4.198609894956462e-05}, {"id": 270, "seek": 113040, "start": 1138.92, "end": 1142.68, "text": " Or we could change it from a bowl of fruit to a basket of fruits.", "tokens": [50790, 1610, 321, 727, 1319, 309, 490, 257, 6571, 295, 6773, 281, 257, 8390, 295, 12148, 13, 50978], "temperature": 0.0, "avg_logprob": -0.23407625115436057, "compression_ratio": 1.6576086956521738, "no_speech_prob": 4.198609894956462e-05}, {"id": 271, "seek": 113040, "start": 1142.68, "end": 1144.6000000000001, "text": " And oh, it's become a basket of fruits.", "tokens": [50978, 400, 1954, 11, 309, 311, 1813, 257, 8390, 295, 12148, 13, 51074], "temperature": 0.0, "avg_logprob": -0.23407625115436057, "compression_ratio": 1.6576086956521738, "no_speech_prob": 4.198609894956462e-05}, {"id": 272, "seek": 113040, "start": 1144.6000000000001, "end": 1149.16, "text": " Okay, so I think I get the idea, right?", "tokens": [51074, 1033, 11, 370, 286, 519, 286, 483, 264, 1558, 11, 558, 30, 51302], "temperature": 0.0, "avg_logprob": -0.23407625115436057, "compression_ratio": 1.6576086956521738, "no_speech_prob": 4.198609894956462e-05}, {"id": 273, "seek": 113040, "start": 1149.16, "end": 1155.92, "text": " What it's saying is that we can edit an image by typing what we want that image to represent.", "tokens": [51302, 708, 309, 311, 1566, 307, 300, 321, 393, 8129, 364, 3256, 538, 18444, 437, 321, 528, 300, 3256, 281, 2906, 13, 51640], "temperature": 0.0, "avg_logprob": -0.23407625115436057, "compression_ratio": 1.6576086956521738, "no_speech_prob": 4.198609894956462e-05}, {"id": 274, "seek": 115592, "start": 1155.92, "end": 1161.8000000000002, "text": " So this actually looks a lot like the paper that we looked at last week.", "tokens": [50364, 407, 341, 767, 1542, 257, 688, 411, 264, 3035, 300, 321, 2956, 412, 1036, 1243, 13, 50658], "temperature": 0.0, "avg_logprob": -0.2203400991495373, "compression_ratio": 1.6790123456790123, "no_speech_prob": 0.0015011565992608666}, {"id": 275, "seek": 115592, "start": 1161.8000000000002, "end": 1166.48, "text": " So that's cool.", "tokens": [50658, 407, 300, 311, 1627, 13, 50892], "temperature": 0.0, "avg_logprob": -0.2203400991495373, "compression_ratio": 1.6790123456790123, "no_speech_prob": 0.0015011565992608666}, {"id": 276, "seek": 115592, "start": 1166.48, "end": 1170.8400000000001, "text": " So the abstract says that currently, so I guess there are current ways of doing this,", "tokens": [50892, 407, 264, 12649, 1619, 300, 4362, 11, 370, 286, 2041, 456, 366, 2190, 2098, 295, 884, 341, 11, 51110], "temperature": 0.0, "avg_logprob": -0.2203400991495373, "compression_ratio": 1.6790123456790123, "no_speech_prob": 0.0015011565992608666}, {"id": 277, "seek": 115592, "start": 1170.8400000000001, "end": 1172.8400000000001, "text": " but they require you to provide a mask.", "tokens": [51110, 457, 436, 3651, 291, 281, 2893, 257, 6094, 13, 51210], "temperature": 0.0, "avg_logprob": -0.2203400991495373, "compression_ratio": 1.6790123456790123, "no_speech_prob": 0.0015011565992608666}, {"id": 278, "seek": 115592, "start": 1172.8400000000001, "end": 1175.52, "text": " That means you have to basically draw the area you're replacing.", "tokens": [51210, 663, 1355, 291, 362, 281, 1936, 2642, 264, 1859, 291, 434, 19139, 13, 51344], "temperature": 0.0, "avg_logprob": -0.2203400991495373, "compression_ratio": 1.6790123456790123, "no_speech_prob": 0.0015011565992608666}, {"id": 279, "seek": 115592, "start": 1175.52, "end": 1177.92, "text": " Okay, so that sounds really annoying.", "tokens": [51344, 1033, 11, 370, 300, 3263, 534, 11304, 13, 51464], "temperature": 0.0, "avg_logprob": -0.2203400991495373, "compression_ratio": 1.6790123456790123, "no_speech_prob": 0.0015011565992608666}, {"id": 280, "seek": 115592, "start": 1177.92, "end": 1183.0600000000002, "text": " But our main contribution, so what this paper does, is we automatically generate the mask.", "tokens": [51464, 583, 527, 2135, 13150, 11, 370, 437, 341, 3035, 775, 11, 307, 321, 6772, 8460, 264, 6094, 13, 51721], "temperature": 0.0, "avg_logprob": -0.2203400991495373, "compression_ratio": 1.6790123456790123, "no_speech_prob": 0.0015011565992608666}, {"id": 281, "seek": 118306, "start": 1183.06, "end": 1186.28, "text": " So they simply just type in the new query and get the new image.", "tokens": [50364, 407, 436, 2935, 445, 2010, 294, 264, 777, 14581, 293, 483, 264, 777, 3256, 13, 50525], "temperature": 0.0, "avg_logprob": -0.2257385874182228, "compression_ratio": 1.792828685258964, "no_speech_prob": 0.0006563693168573081}, {"id": 282, "seek": 118306, "start": 1186.28, "end": 1188.46, "text": " So that sounds actually really impressive.", "tokens": [50525, 407, 300, 3263, 767, 534, 8992, 13, 50634], "temperature": 0.0, "avg_logprob": -0.2257385874182228, "compression_ratio": 1.792828685258964, "no_speech_prob": 0.0006563693168573081}, {"id": 283, "seek": 118306, "start": 1188.46, "end": 1194.3, "text": " So if you read the abstract and you think, I don't care about doing that, then you can", "tokens": [50634, 407, 498, 291, 1401, 264, 12649, 293, 291, 519, 11, 286, 500, 380, 1127, 466, 884, 300, 11, 550, 291, 393, 50926], "temperature": 0.0, "avg_logprob": -0.2257385874182228, "compression_ratio": 1.792828685258964, "no_speech_prob": 0.0006563693168573081}, {"id": 284, "seek": 118306, "start": 1194.3, "end": 1199.8999999999999, "text": " skip the paper, you know, or look at the results.", "tokens": [50926, 10023, 264, 3035, 11, 291, 458, 11, 420, 574, 412, 264, 3542, 13, 51206], "temperature": 0.0, "avg_logprob": -0.2257385874182228, "compression_ratio": 1.792828685258964, "no_speech_prob": 0.0006563693168573081}, {"id": 285, "seek": 118306, "start": 1199.8999999999999, "end": 1203.54, "text": " And if the results don't look impressive, then just skip the paper.", "tokens": [51206, 400, 498, 264, 3542, 500, 380, 574, 8992, 11, 550, 445, 10023, 264, 3035, 13, 51388], "temperature": 0.0, "avg_logprob": -0.2257385874182228, "compression_ratio": 1.792828685258964, "no_speech_prob": 0.0006563693168573081}, {"id": 286, "seek": 118306, "start": 1203.54, "end": 1207.22, "text": " So that's kind of your first point where we can be like, okay, we're done.", "tokens": [51388, 407, 300, 311, 733, 295, 428, 700, 935, 689, 321, 393, 312, 411, 11, 1392, 11, 321, 434, 1096, 13, 51572], "temperature": 0.0, "avg_logprob": -0.2257385874182228, "compression_ratio": 1.792828685258964, "no_speech_prob": 0.0006563693168573081}, {"id": 287, "seek": 118306, "start": 1207.22, "end": 1209.3, "text": " But in this case, this sounds great.", "tokens": [51572, 583, 294, 341, 1389, 11, 341, 3263, 869, 13, 51676], "temperature": 0.0, "avg_logprob": -0.2257385874182228, "compression_ratio": 1.792828685258964, "no_speech_prob": 0.0006563693168573081}, {"id": 288, "seek": 118306, "start": 1209.3, "end": 1210.8799999999999, "text": " The results look amazing.", "tokens": [51676, 440, 3542, 574, 2243, 13, 51755], "temperature": 0.0, "avg_logprob": -0.2257385874182228, "compression_ratio": 1.792828685258964, "no_speech_prob": 0.0006563693168573081}, {"id": 289, "seek": 121088, "start": 1210.88, "end": 1212.3200000000002, "text": " So I think we should keep going.", "tokens": [50364, 407, 286, 519, 321, 820, 1066, 516, 13, 50436], "temperature": 0.0, "avg_logprob": -0.39416629828295663, "compression_ratio": 1.5751072961373391, "no_speech_prob": 0.004399275407195091}, {"id": 290, "seek": 121088, "start": 1212.3200000000002, "end": 1217.8400000000001, "text": " Okay, it achieves data-theablating performance, of course, fine.", "tokens": [50436, 1033, 11, 309, 3538, 977, 1412, 12, 3322, 455, 75, 990, 3389, 11, 295, 1164, 11, 2489, 13, 50712], "temperature": 0.0, "avg_logprob": -0.39416629828295663, "compression_ratio": 1.5751072961373391, "no_speech_prob": 0.004399275407195091}, {"id": 291, "seek": 121088, "start": 1217.8400000000001, "end": 1220.64, "text": " We try some, right, whatever.", "tokens": [50712, 492, 853, 512, 11, 558, 11, 2035, 13, 50852], "temperature": 0.0, "avg_logprob": -0.39416629828295663, "compression_ratio": 1.5751072961373391, "no_speech_prob": 0.004399275407195091}, {"id": 292, "seek": 121088, "start": 1220.64, "end": 1228.5200000000002, "text": " So the introduction to a paper is going to try to give you a sense of, you know, what", "tokens": [50852, 407, 264, 9339, 281, 257, 3035, 307, 516, 281, 853, 281, 976, 291, 257, 2020, 295, 11, 291, 458, 11, 437, 51246], "temperature": 0.0, "avg_logprob": -0.39416629828295663, "compression_ratio": 1.5751072961373391, "no_speech_prob": 0.004399275407195091}, {"id": 293, "seek": 121088, "start": 1228.5200000000002, "end": 1230.4, "text": " they're trying to do.", "tokens": [51246, 436, 434, 1382, 281, 360, 13, 51340], "temperature": 0.0, "avg_logprob": -0.39416629828295663, "compression_ratio": 1.5751072961373391, "no_speech_prob": 0.004399275407195091}, {"id": 294, "seek": 121088, "start": 1230.4, "end": 1235.74, "text": " And so this first paragraph here is just repeating what we've already read in the abstract and", "tokens": [51340, 400, 370, 341, 700, 18865, 510, 307, 445, 18617, 437, 321, 600, 1217, 1401, 294, 264, 12649, 293, 51607], "temperature": 0.0, "avg_logprob": -0.39416629828295663, "compression_ratio": 1.5751072961373391, "no_speech_prob": 0.004399275407195091}, {"id": 295, "seek": 121088, "start": 1235.74, "end": 1237.5600000000002, "text": " repeating what we see in figure one.", "tokens": [51607, 18617, 437, 321, 536, 294, 2573, 472, 13, 51698], "temperature": 0.0, "avg_logprob": -0.39416629828295663, "compression_ratio": 1.5751072961373391, "no_speech_prob": 0.004399275407195091}, {"id": 296, "seek": 123756, "start": 1237.56, "end": 1243.44, "text": " So saying that we can take a text query like a basket of fruits, see the examples.", "tokens": [50364, 407, 1566, 300, 321, 393, 747, 257, 2487, 14581, 411, 257, 8390, 295, 12148, 11, 536, 264, 5110, 13, 50658], "temperature": 0.0, "avg_logprob": -0.2863609158262915, "compression_ratio": 1.6981132075471699, "no_speech_prob": 0.0026713963598012924}, {"id": 297, "seek": 123756, "start": 1243.44, "end": 1246.32, "text": " All right, fine, we'll skip through there.", "tokens": [50658, 1057, 558, 11, 2489, 11, 321, 603, 10023, 807, 456, 13, 50802], "temperature": 0.0, "avg_logprob": -0.2863609158262915, "compression_ratio": 1.6981132075471699, "no_speech_prob": 0.0026713963598012924}, {"id": 298, "seek": 123756, "start": 1246.32, "end": 1257.12, "text": " So a key thing about academic papers is that they are full of citations.", "tokens": [50802, 407, 257, 2141, 551, 466, 7778, 10577, 307, 300, 436, 366, 1577, 295, 4814, 763, 13, 51342], "temperature": 0.0, "avg_logprob": -0.2863609158262915, "compression_ratio": 1.6981132075471699, "no_speech_prob": 0.0026713963598012924}, {"id": 299, "seek": 123756, "start": 1257.12, "end": 1261.56, "text": " You should not expect to read all of them, because if you do, then to read each of those", "tokens": [51342, 509, 820, 406, 2066, 281, 1401, 439, 295, 552, 11, 570, 498, 291, 360, 11, 550, 281, 1401, 1184, 295, 729, 51564], "temperature": 0.0, "avg_logprob": -0.2863609158262915, "compression_ratio": 1.6981132075471699, "no_speech_prob": 0.0026713963598012924}, {"id": 300, "seek": 123756, "start": 1261.56, "end": 1264.6, "text": " citations, that's full of citations, and then they're full of citations.", "tokens": [51564, 4814, 763, 11, 300, 311, 1577, 295, 4814, 763, 11, 293, 550, 436, 434, 1577, 295, 4814, 763, 13, 51716], "temperature": 0.0, "avg_logprob": -0.2863609158262915, "compression_ratio": 1.6981132075471699, "no_speech_prob": 0.0026713963598012924}, {"id": 301, "seek": 126460, "start": 1264.6399999999999, "end": 1269.48, "text": " And before you know it, you've read the entire academic literature, which has taken you 5,000", "tokens": [50366, 400, 949, 291, 458, 309, 11, 291, 600, 1401, 264, 2302, 7778, 10394, 11, 597, 575, 2726, 291, 1025, 11, 1360, 50608], "temperature": 0.0, "avg_logprob": -0.3384106518471078, "compression_ratio": 1.610062893081761, "no_speech_prob": 0.006797263864427805}, {"id": 302, "seek": 126460, "start": 1269.48, "end": 1270.48, "text": " years.", "tokens": [50608, 924, 13, 50658], "temperature": 0.0, "avg_logprob": -0.3384106518471078, "compression_ratio": 1.610062893081761, "no_speech_prob": 0.006797263864427805}, {"id": 303, "seek": 126460, "start": 1270.48, "end": 1276.1999999999998, "text": " So for now, let's just recognize that it says text-conditional image generation is undergoing", "tokens": [50658, 407, 337, 586, 11, 718, 311, 445, 5521, 300, 309, 1619, 2487, 12, 18882, 2628, 3256, 5125, 307, 40033, 50944], "temperature": 0.0, "avg_logprob": -0.3384106518471078, "compression_ratio": 1.610062893081761, "no_speech_prob": 0.006797263864427805}, {"id": 304, "seek": 126460, "start": 1276.1999999999998, "end": 1277.1999999999998, "text": " revolution.", "tokens": [50944, 8894, 13, 50994], "temperature": 0.0, "avg_logprob": -0.3384106518471078, "compression_ratio": 1.610062893081761, "no_speech_prob": 0.006797263864427805}, {"id": 305, "seek": 126460, "start": 1277.1999999999998, "end": 1278.1999999999998, "text": " Here's some examples.", "tokens": [50994, 1692, 311, 512, 5110, 13, 51044], "temperature": 0.0, "avg_logprob": -0.3384106518471078, "compression_ratio": 1.610062893081761, "no_speech_prob": 0.006797263864427805}, {"id": 306, "seek": 126460, "start": 1278.1999999999998, "end": 1279.1999999999998, "text": " Well, fine, we actually already know that.", "tokens": [51044, 1042, 11, 2489, 11, 321, 767, 1217, 458, 300, 13, 51094], "temperature": 0.0, "avg_logprob": -0.3384106518471078, "compression_ratio": 1.610062893081761, "no_speech_prob": 0.006797263864427805}, {"id": 307, "seek": 126460, "start": 1279.1999999999998, "end": 1283.8, "text": " Okay, Dali's call, latent diffusion, that's what we've been using, that's call.", "tokens": [51094, 1033, 11, 413, 5103, 311, 818, 11, 48994, 25242, 11, 300, 311, 437, 321, 600, 668, 1228, 11, 300, 311, 818, 13, 51324], "temperature": 0.0, "avg_logprob": -0.3384106518471078, "compression_ratio": 1.610062893081761, "no_speech_prob": 0.006797263864427805}, {"id": 308, "seek": 126460, "start": 1283.8, "end": 1286.76, "text": " Imogen, apparently that's call.", "tokens": [51324, 4331, 8799, 11, 7970, 300, 311, 818, 13, 51472], "temperature": 0.0, "avg_logprob": -0.3384106518471078, "compression_ratio": 1.610062893081761, "no_speech_prob": 0.006797263864427805}, {"id": 309, "seek": 126460, "start": 1286.76, "end": 1287.76, "text": " So cool.", "tokens": [51472, 407, 1627, 13, 51522], "temperature": 0.0, "avg_logprob": -0.3384106518471078, "compression_ratio": 1.610062893081761, "no_speech_prob": 0.006797263864427805}, {"id": 310, "seek": 126460, "start": 1287.76, "end": 1288.76, "text": " All right, so we kind of know that.", "tokens": [51522, 1057, 558, 11, 370, 321, 733, 295, 458, 300, 13, 51572], "temperature": 0.0, "avg_logprob": -0.3384106518471078, "compression_ratio": 1.610062893081761, "no_speech_prob": 0.006797263864427805}, {"id": 311, "seek": 126460, "start": 1288.76, "end": 1292.1599999999999, "text": " So generally, there's this like, okay, our area that we're working on is important.", "tokens": [51572, 407, 5101, 11, 456, 311, 341, 411, 11, 1392, 11, 527, 1859, 300, 321, 434, 1364, 322, 307, 1021, 13, 51742], "temperature": 0.0, "avg_logprob": -0.3384106518471078, "compression_ratio": 1.610062893081761, "no_speech_prob": 0.006797263864427805}, {"id": 312, "seek": 129216, "start": 1292.72, "end": 1297.3200000000002, "text": " In this case, we already agree it's important, so we can skip through it pretty quickly.", "tokens": [50392, 682, 341, 1389, 11, 321, 1217, 3986, 309, 311, 1021, 11, 370, 321, 393, 10023, 807, 309, 1238, 2661, 13, 50622], "temperature": 0.0, "avg_logprob": -0.30321971514752805, "compression_ratio": 1.72, "no_speech_prob": 0.00014653110702056438}, {"id": 313, "seek": 129216, "start": 1297.3200000000002, "end": 1302.16, "text": " They've asked vast amounts of data are used, yes, we know.", "tokens": [50622, 814, 600, 2351, 8369, 11663, 295, 1412, 366, 1143, 11, 2086, 11, 321, 458, 13, 50864], "temperature": 0.0, "avg_logprob": -0.30321971514752805, "compression_ratio": 1.72, "no_speech_prob": 0.00014653110702056438}, {"id": 314, "seek": 129216, "start": 1302.16, "end": 1307.96, "text": " Okay, so diffusion models are interesting, yes, we know that.", "tokens": [50864, 1033, 11, 370, 25242, 5245, 366, 1880, 11, 2086, 11, 321, 458, 300, 13, 51154], "temperature": 0.0, "avg_logprob": -0.30321971514752805, "compression_ratio": 1.72, "no_speech_prob": 0.00014653110702056438}, {"id": 315, "seek": 129216, "start": 1307.96, "end": 1310.68, "text": " They denoise starting from Gaussian noise, we know that.", "tokens": [51154, 814, 1441, 38800, 2891, 490, 39148, 5658, 11, 321, 458, 300, 13, 51290], "temperature": 0.0, "avg_logprob": -0.30321971514752805, "compression_ratio": 1.72, "no_speech_prob": 0.00014653110702056438}, {"id": 316, "seek": 129216, "start": 1310.68, "end": 1314.24, "text": " So you can see like, there's a lot of stuff, once you're kind of in the field, you can", "tokens": [51290, 407, 291, 393, 536, 411, 11, 456, 311, 257, 688, 295, 1507, 11, 1564, 291, 434, 733, 295, 294, 264, 2519, 11, 291, 393, 51468], "temperature": 0.0, "avg_logprob": -0.30321971514752805, "compression_ratio": 1.72, "no_speech_prob": 0.00014653110702056438}, {"id": 317, "seek": 129216, "start": 1314.24, "end": 1315.94, "text": " skip over pretty quickly.", "tokens": [51468, 10023, 670, 1238, 2661, 13, 51553], "temperature": 0.0, "avg_logprob": -0.30321971514752805, "compression_ratio": 1.72, "no_speech_prob": 0.00014653110702056438}, {"id": 318, "seek": 129216, "start": 1315.94, "end": 1319.0800000000002, "text": " You can guide it using clip guidance, yeah, that's what we've been doing, we know about", "tokens": [51553, 509, 393, 5934, 309, 1228, 7353, 10056, 11, 1338, 11, 300, 311, 437, 321, 600, 668, 884, 11, 321, 458, 466, 51710], "temperature": 0.0, "avg_logprob": -0.30321971514752805, "compression_ratio": 1.72, "no_speech_prob": 0.00014653110702056438}, {"id": 319, "seek": 129216, "start": 1319.0800000000002, "end": 1320.0800000000002, "text": " that.", "tokens": [51710, 300, 13, 51760], "temperature": 0.0, "avg_logprob": -0.30321971514752805, "compression_ratio": 1.72, "no_speech_prob": 0.00014653110702056438}, {"id": 320, "seek": 132008, "start": 1320.08, "end": 1321.08, "text": " Wait, this is new.", "tokens": [50364, 3802, 11, 341, 307, 777, 13, 50414], "temperature": 0.0, "avg_logprob": -0.2971053123474121, "compression_ratio": 1.6628787878787878, "no_speech_prob": 0.004331470001488924}, {"id": 321, "seek": 132008, "start": 1321.08, "end": 1326.8, "text": " Or by in-painting, by copy-pasting pixel values outside a mask.", "tokens": [50414, 1610, 538, 294, 12, 79, 491, 783, 11, 538, 5055, 12, 79, 30587, 19261, 4190, 2380, 257, 6094, 13, 50700], "temperature": 0.0, "avg_logprob": -0.2971053123474121, "compression_ratio": 1.6628787878787878, "no_speech_prob": 0.004331470001488924}, {"id": 322, "seek": 132008, "start": 1326.8, "end": 1330.48, "text": " All right, so there's a new technique that we haven't done.", "tokens": [50700, 1057, 558, 11, 370, 456, 311, 257, 777, 6532, 300, 321, 2378, 380, 1096, 13, 50884], "temperature": 0.0, "avg_logprob": -0.2971053123474121, "compression_ratio": 1.6628787878787878, "no_speech_prob": 0.004331470001488924}, {"id": 323, "seek": 132008, "start": 1330.48, "end": 1335.76, "text": " But I think it makes a lot of intuitive sense, that is during that diffusion process, if", "tokens": [50884, 583, 286, 519, 309, 1669, 257, 688, 295, 21769, 2020, 11, 300, 307, 1830, 300, 25242, 1399, 11, 498, 51148], "temperature": 0.0, "avg_logprob": -0.2971053123474121, "compression_ratio": 1.6628787878787878, "no_speech_prob": 0.004331470001488924}, {"id": 324, "seek": 132008, "start": 1335.76, "end": 1341.48, "text": " there are some pixels you don't want to change, such as all the ones that aren't orange here,", "tokens": [51148, 456, 366, 512, 18668, 291, 500, 380, 528, 281, 1319, 11, 1270, 382, 439, 264, 2306, 300, 3212, 380, 7671, 510, 11, 51434], "temperature": 0.0, "avg_logprob": -0.2971053123474121, "compression_ratio": 1.6628787878787878, "no_speech_prob": 0.004331470001488924}, {"id": 325, "seek": 132008, "start": 1341.48, "end": 1345.24, "text": " you can just paste them from the original after each stage of the diffusion.", "tokens": [51434, 291, 393, 445, 9163, 552, 490, 264, 3380, 934, 1184, 3233, 295, 264, 25242, 13, 51622], "temperature": 0.0, "avg_logprob": -0.2971053123474121, "compression_ratio": 1.6628787878787878, "no_speech_prob": 0.004331470001488924}, {"id": 326, "seek": 132008, "start": 1345.24, "end": 1347.32, "text": " All right, that makes perfect sense.", "tokens": [51622, 1057, 558, 11, 300, 1669, 2176, 2020, 13, 51726], "temperature": 0.0, "avg_logprob": -0.2971053123474121, "compression_ratio": 1.6628787878787878, "no_speech_prob": 0.004331470001488924}, {"id": 327, "seek": 134732, "start": 1347.32, "end": 1350.6799999999998, "text": " If I want to know more about that, I could always look at this paper, but I don't think", "tokens": [50364, 759, 286, 528, 281, 458, 544, 466, 300, 11, 286, 727, 1009, 574, 412, 341, 3035, 11, 457, 286, 500, 380, 519, 50532], "temperature": 0.0, "avg_logprob": -0.22199452933618577, "compression_ratio": 1.6220472440944882, "no_speech_prob": 0.006289636250585318}, {"id": 328, "seek": 134732, "start": 1350.6799999999998, "end": 1351.6799999999998, "text": " I do for now.", "tokens": [50532, 286, 360, 337, 586, 13, 50582], "temperature": 0.0, "avg_logprob": -0.22199452933618577, "compression_ratio": 1.6220472440944882, "no_speech_prob": 0.006289636250585318}, {"id": 329, "seek": 134732, "start": 1351.6799999999998, "end": 1358.6, "text": " Okay, and again, it's just repeating something they've already told us, that they require", "tokens": [50582, 1033, 11, 293, 797, 11, 309, 311, 445, 18617, 746, 436, 600, 1217, 1907, 505, 11, 300, 436, 3651, 50928], "temperature": 0.0, "avg_logprob": -0.22199452933618577, "compression_ratio": 1.6220472440944882, "no_speech_prob": 0.006289636250585318}, {"id": 330, "seek": 134732, "start": 1358.6, "end": 1364.84, "text": " us to provide a mask, so it's a bit of a problem.", "tokens": [50928, 505, 281, 2893, 257, 6094, 11, 370, 309, 311, 257, 857, 295, 257, 1154, 13, 51240], "temperature": 0.0, "avg_logprob": -0.22199452933618577, "compression_ratio": 1.6220472440944882, "no_speech_prob": 0.006289636250585318}, {"id": 331, "seek": 134732, "start": 1364.84, "end": 1371.36, "text": " And then, you know, this is interesting, it also says that when you mask out an area,", "tokens": [51240, 400, 550, 11, 291, 458, 11, 341, 307, 1880, 11, 309, 611, 1619, 300, 562, 291, 6094, 484, 364, 1859, 11, 51566], "temperature": 0.0, "avg_logprob": -0.22199452933618577, "compression_ratio": 1.6220472440944882, "no_speech_prob": 0.006289636250585318}, {"id": 332, "seek": 134732, "start": 1371.36, "end": 1375.8999999999999, "text": " that's a problem, because if you're trying to, for example, change a dog into a cat,", "tokens": [51566, 300, 311, 257, 1154, 11, 570, 498, 291, 434, 1382, 281, 11, 337, 1365, 11, 1319, 257, 3000, 666, 257, 3857, 11, 51793], "temperature": 0.0, "avg_logprob": -0.22199452933618577, "compression_ratio": 1.6220472440944882, "no_speech_prob": 0.006289636250585318}, {"id": 333, "seek": 137590, "start": 1375.9, "end": 1378.9, "text": " you want to keep the animal's color and pose.", "tokens": [50364, 291, 528, 281, 1066, 264, 5496, 311, 2017, 293, 10774, 13, 50514], "temperature": 0.0, "avg_logprob": -0.2464174973337274, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0007321778102777898}, {"id": 334, "seek": 137590, "start": 1378.9, "end": 1384.8200000000002, "text": " So this is a new technique, which is not deleting a section and replacing it with something", "tokens": [50514, 407, 341, 307, 257, 777, 6532, 11, 597, 307, 406, 48946, 257, 3541, 293, 19139, 309, 365, 746, 50810], "temperature": 0.0, "avg_logprob": -0.2464174973337274, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0007321778102777898}, {"id": 335, "seek": 137590, "start": 1384.8200000000002, "end": 1388.7800000000002, "text": " else, but it's actually going to take advantage of knowledge about what that thing looked", "tokens": [50810, 1646, 11, 457, 309, 311, 767, 516, 281, 747, 5002, 295, 3601, 466, 437, 300, 551, 2956, 51008], "temperature": 0.0, "avg_logprob": -0.2464174973337274, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0007321778102777898}, {"id": 336, "seek": 137590, "start": 1388.7800000000002, "end": 1389.7800000000002, "text": " like.", "tokens": [51008, 411, 13, 51058], "temperature": 0.0, "avg_logprob": -0.2464174973337274, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0007321778102777898}, {"id": 337, "seek": 137590, "start": 1389.7800000000002, "end": 1392.8400000000001, "text": " So this is two cool new things.", "tokens": [51058, 407, 341, 307, 732, 1627, 777, 721, 13, 51211], "temperature": 0.0, "avg_logprob": -0.2464174973337274, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0007321778102777898}, {"id": 338, "seek": 137590, "start": 1392.8400000000001, "end": 1397.1000000000001, "text": " So hopefully at this point we know what they're trying to achieve.", "tokens": [51211, 407, 4696, 412, 341, 935, 321, 458, 437, 436, 434, 1382, 281, 4584, 13, 51424], "temperature": 0.0, "avg_logprob": -0.2464174973337274, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0007321778102777898}, {"id": 339, "seek": 137590, "start": 1397.1000000000001, "end": 1400.9, "text": " If you don't know what they're trying to achieve when you're reading a paper, the paper won't", "tokens": [51424, 759, 291, 500, 380, 458, 437, 436, 434, 1382, 281, 4584, 562, 291, 434, 3760, 257, 3035, 11, 264, 3035, 1582, 380, 51614], "temperature": 0.0, "avg_logprob": -0.2464174973337274, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0007321778102777898}, {"id": 340, "seek": 137590, "start": 1400.9, "end": 1402.74, "text": " make any sense.", "tokens": [51614, 652, 604, 2020, 13, 51706], "temperature": 0.0, "avg_logprob": -0.2464174973337274, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0007321778102777898}, {"id": 341, "seek": 140274, "start": 1402.74, "end": 1405.06, "text": " So again, that's a point where you should stop.", "tokens": [50364, 407, 797, 11, 300, 311, 257, 935, 689, 291, 820, 1590, 13, 50480], "temperature": 0.0, "avg_logprob": -0.2688827819824219, "compression_ratio": 1.8249027237354085, "no_speech_prob": 0.005468761082738638}, {"id": 342, "seek": 140274, "start": 1405.06, "end": 1408.14, "text": " Maybe this is not the right time to be reading this paper, maybe you need to read some of", "tokens": [50480, 2704, 341, 307, 406, 264, 558, 565, 281, 312, 3760, 341, 3035, 11, 1310, 291, 643, 281, 1401, 512, 295, 50634], "temperature": 0.0, "avg_logprob": -0.2688827819824219, "compression_ratio": 1.8249027237354085, "no_speech_prob": 0.005468761082738638}, {"id": 343, "seek": 140274, "start": 1408.14, "end": 1412.8, "text": " the references, maybe you need to look more at the examples, so you can always skip straight", "tokens": [50634, 264, 15400, 11, 1310, 291, 643, 281, 574, 544, 412, 264, 5110, 11, 370, 291, 393, 1009, 10023, 2997, 50867], "temperature": 0.0, "avg_logprob": -0.2688827819824219, "compression_ratio": 1.8249027237354085, "no_speech_prob": 0.005468761082738638}, {"id": 344, "seek": 140274, "start": 1412.8, "end": 1414.66, "text": " to the experiments.", "tokens": [50867, 281, 264, 12050, 13, 50960], "temperature": 0.0, "avg_logprob": -0.2688827819824219, "compression_ratio": 1.8249027237354085, "no_speech_prob": 0.005468761082738638}, {"id": 345, "seek": 140274, "start": 1414.66, "end": 1416.3, "text": " So I often skip straight to the experiments.", "tokens": [50960, 407, 286, 2049, 10023, 2997, 281, 264, 12050, 13, 51042], "temperature": 0.0, "avg_logprob": -0.2688827819824219, "compression_ratio": 1.8249027237354085, "no_speech_prob": 0.005468761082738638}, {"id": 346, "seek": 140274, "start": 1416.3, "end": 1421.9, "text": " In this case, I don't need to, because they've put enough experiments on the very first page", "tokens": [51042, 682, 341, 1389, 11, 286, 500, 380, 643, 281, 11, 570, 436, 600, 829, 1547, 12050, 322, 264, 588, 700, 3028, 51322], "temperature": 0.0, "avg_logprob": -0.2688827819824219, "compression_ratio": 1.8249027237354085, "no_speech_prob": 0.005468761082738638}, {"id": 347, "seek": 140274, "start": 1421.9, "end": 1423.78, "text": " for me to see what it's doing.", "tokens": [51322, 337, 385, 281, 536, 437, 309, 311, 884, 13, 51416], "temperature": 0.0, "avg_logprob": -0.2688827819824219, "compression_ratio": 1.8249027237354085, "no_speech_prob": 0.005468761082738638}, {"id": 348, "seek": 140274, "start": 1423.78, "end": 1427.22, "text": " So yeah, don't always read it from top to bottom.", "tokens": [51416, 407, 1338, 11, 500, 380, 1009, 1401, 309, 490, 1192, 281, 2767, 13, 51588], "temperature": 0.0, "avg_logprob": -0.2688827819824219, "compression_ratio": 1.8249027237354085, "no_speech_prob": 0.005468761082738638}, {"id": 349, "seek": 142722, "start": 1427.22, "end": 1435.98, "text": " Okay, so, all right, so they've got some examples of conditioning a diffusion model", "tokens": [50364, 1033, 11, 370, 11, 439, 558, 11, 370, 436, 600, 658, 512, 5110, 295, 21901, 257, 25242, 2316, 50802], "temperature": 0.0, "avg_logprob": -0.28377251965659006, "compression_ratio": 1.6598360655737705, "no_speech_prob": 3.591293716453947e-05}, {"id": 350, "seek": 142722, "start": 1435.98, "end": 1438.94, "text": " on an input without a mask.", "tokens": [50802, 322, 364, 4846, 1553, 257, 6094, 13, 50950], "temperature": 0.0, "avg_logprob": -0.28377251965659006, "compression_ratio": 1.6598360655737705, "no_speech_prob": 3.591293716453947e-05}, {"id": 351, "seek": 142722, "start": 1438.94, "end": 1443.1000000000001, "text": " Okay, for example, you can use a noised version of the input as a starting point.", "tokens": [50950, 1033, 11, 337, 1365, 11, 291, 393, 764, 257, 572, 2640, 3037, 295, 264, 4846, 382, 257, 2891, 935, 13, 51158], "temperature": 0.0, "avg_logprob": -0.28377251965659006, "compression_ratio": 1.6598360655737705, "no_speech_prob": 3.591293716453947e-05}, {"id": 352, "seek": 142722, "start": 1443.1000000000001, "end": 1444.46, "text": " Hey, we've done that too.", "tokens": [51158, 1911, 11, 321, 600, 1096, 300, 886, 13, 51226], "temperature": 0.0, "avg_logprob": -0.28377251965659006, "compression_ratio": 1.6598360655737705, "no_speech_prob": 3.591293716453947e-05}, {"id": 353, "seek": 142722, "start": 1444.46, "end": 1449.42, "text": " So as you can see, we've already covered a lot of the techniques that they're referring", "tokens": [51226, 407, 382, 291, 393, 536, 11, 321, 600, 1217, 5343, 257, 688, 295, 264, 7512, 300, 436, 434, 13761, 51474], "temperature": 0.0, "avg_logprob": -0.28377251965659006, "compression_ratio": 1.6598360655737705, "no_speech_prob": 3.591293716453947e-05}, {"id": 354, "seek": 142722, "start": 1449.42, "end": 1451.64, "text": " to here.", "tokens": [51474, 281, 510, 13, 51585], "temperature": 0.0, "avg_logprob": -0.28377251965659006, "compression_ratio": 1.6598360655737705, "no_speech_prob": 3.591293716453947e-05}, {"id": 355, "seek": 142722, "start": 1451.64, "end": 1454.8600000000001, "text": " Something we haven't done, but makes a lot of sense, is that we can look at the distance", "tokens": [51585, 6595, 321, 2378, 380, 1096, 11, 457, 1669, 257, 688, 295, 2020, 11, 307, 300, 321, 393, 574, 412, 264, 4560, 51746], "temperature": 0.0, "avg_logprob": -0.28377251965659006, "compression_ratio": 1.6598360655737705, "no_speech_prob": 3.591293716453947e-05}, {"id": 356, "seek": 145486, "start": 1455.02, "end": 1457.3, "text": " to the input image as a loss function.", "tokens": [50372, 281, 264, 4846, 3256, 382, 257, 4470, 2445, 13, 50486], "temperature": 0.0, "avg_logprob": -0.33458049357438285, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.0016229624161496758}, {"id": 357, "seek": 145486, "start": 1457.3, "end": 1461.06, "text": " Okay, that makes sense to me, and there's some references here.", "tokens": [50486, 1033, 11, 300, 1669, 2020, 281, 385, 11, 293, 456, 311, 512, 15400, 510, 13, 50674], "temperature": 0.0, "avg_logprob": -0.33458049357438285, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.0016229624161496758}, {"id": 358, "seek": 145486, "start": 1461.06, "end": 1467.74, "text": " All right, so we're going to create this new thing called diffedit, it's going to be amazing.", "tokens": [50674, 1057, 558, 11, 370, 321, 434, 516, 281, 1884, 341, 777, 551, 1219, 7593, 292, 270, 11, 309, 311, 516, 281, 312, 2243, 13, 51008], "temperature": 0.0, "avg_logprob": -0.33458049357438285, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.0016229624161496758}, {"id": 359, "seek": 145486, "start": 1467.74, "end": 1469.1, "text": " Wait till you check it out.", "tokens": [51008, 3802, 4288, 291, 1520, 309, 484, 13, 51076], "temperature": 0.0, "avg_logprob": -0.33458049357438285, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.0016229624161496758}, {"id": 360, "seek": 145486, "start": 1469.1, "end": 1470.3, "text": " Okay, fine.", "tokens": [51076, 1033, 11, 2489, 13, 51136], "temperature": 0.0, "avg_logprob": -0.33458049357438285, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.0016229624161496758}, {"id": 361, "seek": 145486, "start": 1470.3, "end": 1472.86, "text": " Okay, so that's the introduction.", "tokens": [51136, 1033, 11, 370, 300, 311, 264, 9339, 13, 51264], "temperature": 0.0, "avg_logprob": -0.33458049357438285, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.0016229624161496758}, {"id": 362, "seek": 145486, "start": 1472.86, "end": 1478.2199999999998, "text": " Hopefully you found that useful to understand what we're trying to do.", "tokens": [51264, 10429, 291, 1352, 300, 4420, 281, 1223, 437, 321, 434, 1382, 281, 360, 13, 51532], "temperature": 0.0, "avg_logprob": -0.33458049357438285, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.0016229624161496758}, {"id": 363, "seek": 145486, "start": 1478.2199999999998, "end": 1482.54, "text": " The next section is generally called related work, as it is here, and that's going to tell", "tokens": [51532, 440, 958, 3541, 307, 5101, 1219, 4077, 589, 11, 382, 309, 307, 510, 11, 293, 300, 311, 516, 281, 980, 51748], "temperature": 0.0, "avg_logprob": -0.33458049357438285, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.0016229624161496758}, {"id": 364, "seek": 148254, "start": 1482.54, "end": 1487.3799999999999, "text": " us about other approaches.", "tokens": [50364, 505, 466, 661, 11587, 13, 50606], "temperature": 0.0, "avg_logprob": -0.26802612531303177, "compression_ratio": 1.527027027027027, "no_speech_prob": 0.002216937718912959}, {"id": 365, "seek": 148254, "start": 1487.3799999999999, "end": 1493.26, "text": " So if you're doing a deep dive, this is a good thing to study carefully.", "tokens": [50606, 407, 498, 291, 434, 884, 257, 2452, 9192, 11, 341, 307, 257, 665, 551, 281, 2979, 7500, 13, 50900], "temperature": 0.0, "avg_logprob": -0.26802612531303177, "compression_ratio": 1.527027027027027, "no_speech_prob": 0.002216937718912959}, {"id": 366, "seek": 148254, "start": 1493.26, "end": 1497.1, "text": " I don't think we're going to do a deep dive right now.", "tokens": [50900, 286, 500, 380, 519, 321, 434, 516, 281, 360, 257, 2452, 9192, 558, 586, 13, 51092], "temperature": 0.0, "avg_logprob": -0.26802612531303177, "compression_ratio": 1.527027027027027, "no_speech_prob": 0.002216937718912959}, {"id": 367, "seek": 148254, "start": 1497.1, "end": 1499.46, "text": " So I think we can happily skip over it.", "tokens": [51092, 407, 286, 519, 321, 393, 19909, 10023, 670, 309, 13, 51210], "temperature": 0.0, "avg_logprob": -0.26802612531303177, "compression_ratio": 1.527027027027027, "no_speech_prob": 0.002216937718912959}, {"id": 368, "seek": 148254, "start": 1499.46, "end": 1505.74, "text": " We could kind of do a quick glance of like, oh, image editing, colorization, retouching,", "tokens": [51210, 492, 727, 733, 295, 360, 257, 1702, 21094, 295, 411, 11, 1954, 11, 3256, 10000, 11, 2017, 2144, 11, 1533, 2220, 278, 11, 51524], "temperature": 0.0, "avg_logprob": -0.26802612531303177, "compression_ratio": 1.527027027027027, "no_speech_prob": 0.002216937718912959}, {"id": 369, "seek": 148254, "start": 1505.74, "end": 1506.74, "text": " style transfer.", "tokens": [51524, 3758, 5003, 13, 51574], "temperature": 0.0, "avg_logprob": -0.26802612531303177, "compression_ratio": 1.527027027027027, "no_speech_prob": 0.002216937718912959}, {"id": 370, "seek": 148254, "start": 1506.74, "end": 1507.74, "text": " Okay, cool.", "tokens": [51574, 1033, 11, 1627, 13, 51624], "temperature": 0.0, "avg_logprob": -0.26802612531303177, "compression_ratio": 1.527027027027027, "no_speech_prob": 0.002216937718912959}, {"id": 371, "seek": 148254, "start": 1507.74, "end": 1509.42, "text": " Lots of interesting topics.", "tokens": [51624, 15908, 295, 1880, 8378, 13, 51708], "temperature": 0.0, "avg_logprob": -0.26802612531303177, "compression_ratio": 1.527027027027027, "no_speech_prob": 0.002216937718912959}, {"id": 372, "seek": 150942, "start": 1509.42, "end": 1514.94, "text": " Getting more excited about this idea of image editing.", "tokens": [50364, 13674, 544, 2919, 466, 341, 1558, 295, 3256, 10000, 13, 50640], "temperature": 0.0, "avg_logprob": -0.3088660397372403, "compression_ratio": 1.5924170616113744, "no_speech_prob": 0.01205325499176979}, {"id": 373, "seek": 150942, "start": 1514.94, "end": 1519.46, "text": " And there's some different techniques.", "tokens": [50640, 400, 456, 311, 512, 819, 7512, 13, 50866], "temperature": 0.0, "avg_logprob": -0.3088660397372403, "compression_ratio": 1.5924170616113744, "no_speech_prob": 0.01205325499176979}, {"id": 374, "seek": 150942, "start": 1519.46, "end": 1520.66, "text": " You can use clip guidance.", "tokens": [50866, 509, 393, 764, 7353, 10056, 13, 50926], "temperature": 0.0, "avg_logprob": -0.3088660397372403, "compression_ratio": 1.5924170616113744, "no_speech_prob": 0.01205325499176979}, {"id": 375, "seek": 150942, "start": 1520.66, "end": 1526.5800000000002, "text": " Okay, they can be computationally expensive.", "tokens": [50926, 1033, 11, 436, 393, 312, 24903, 379, 5124, 13, 51222], "temperature": 0.0, "avg_logprob": -0.3088660397372403, "compression_ratio": 1.5924170616113744, "no_speech_prob": 0.01205325499176979}, {"id": 376, "seek": 150942, "start": 1526.5800000000002, "end": 1529.5, "text": " We can use diffusion for image editing.", "tokens": [51222, 492, 393, 764, 25242, 337, 3256, 10000, 13, 51368], "temperature": 0.0, "avg_logprob": -0.3088660397372403, "compression_ratio": 1.5924170616113744, "no_speech_prob": 0.01205325499176979}, {"id": 377, "seek": 150942, "start": 1529.5, "end": 1532.78, "text": " Okay, fine.", "tokens": [51368, 1033, 11, 2489, 13, 51532], "temperature": 0.0, "avg_logprob": -0.3088660397372403, "compression_ratio": 1.5924170616113744, "no_speech_prob": 0.01205325499176979}, {"id": 378, "seek": 150942, "start": 1532.78, "end": 1533.98, "text": " We can use clip to help us.", "tokens": [51532, 492, 393, 764, 7353, 281, 854, 505, 13, 51592], "temperature": 0.0, "avg_logprob": -0.3088660397372403, "compression_ratio": 1.5924170616113744, "no_speech_prob": 0.01205325499176979}, {"id": 379, "seek": 150942, "start": 1533.98, "end": 1537.74, "text": " So there's a lot of repetition in these papers as well, which is nice, because we can skip", "tokens": [51592, 407, 456, 311, 257, 688, 295, 30432, 294, 613, 10577, 382, 731, 11, 597, 307, 1481, 11, 570, 321, 393, 10023, 51780], "temperature": 0.0, "avg_logprob": -0.3088660397372403, "compression_ratio": 1.5924170616113744, "no_speech_prob": 0.01205325499176979}, {"id": 380, "seek": 153774, "start": 1537.74, "end": 1540.38, "text": " over it pretty quickly.", "tokens": [50364, 670, 309, 1238, 2661, 13, 50496], "temperature": 0.0, "avg_logprob": -0.2988294664320055, "compression_ratio": 1.6026200873362446, "no_speech_prob": 0.0002571415971033275}, {"id": 381, "seek": 153774, "start": 1540.38, "end": 1542.34, "text": " More about the high computational costs.", "tokens": [50496, 5048, 466, 264, 1090, 28270, 5497, 13, 50594], "temperature": 0.0, "avg_logprob": -0.2988294664320055, "compression_ratio": 1.6026200873362446, "no_speech_prob": 0.0002571415971033275}, {"id": 382, "seek": 153774, "start": 1542.34, "end": 1546.18, "text": " Okay, so they're saying this is going to be not so computationally expensive.", "tokens": [50594, 1033, 11, 370, 436, 434, 1566, 341, 307, 516, 281, 312, 406, 370, 24903, 379, 5124, 13, 50786], "temperature": 0.0, "avg_logprob": -0.2988294664320055, "compression_ratio": 1.6026200873362446, "no_speech_prob": 0.0002571415971033275}, {"id": 383, "seek": 153774, "start": 1546.18, "end": 1552.08, "text": " That sounds hopeful.", "tokens": [50786, 663, 3263, 20531, 13, 51081], "temperature": 0.0, "avg_logprob": -0.2988294664320055, "compression_ratio": 1.6026200873362446, "no_speech_prob": 0.0002571415971033275}, {"id": 384, "seek": 153774, "start": 1552.08, "end": 1555.74, "text": " And often the very end of the related work is most interesting, as it is here, where", "tokens": [51081, 400, 2049, 264, 588, 917, 295, 264, 4077, 589, 307, 881, 1880, 11, 382, 309, 307, 510, 11, 689, 51264], "temperature": 0.0, "avg_logprob": -0.2988294664320055, "compression_ratio": 1.6026200873362446, "no_speech_prob": 0.0002571415971033275}, {"id": 385, "seek": 153774, "start": 1555.74, "end": 1559.06, "text": " they've talked about how somebody else has done concurrent to ours, somebody else is", "tokens": [51264, 436, 600, 2825, 466, 577, 2618, 1646, 575, 1096, 37702, 281, 11896, 11, 2618, 1646, 307, 51430], "temperature": 0.0, "avg_logprob": -0.2988294664320055, "compression_ratio": 1.6026200873362446, "no_speech_prob": 0.0002571415971033275}, {"id": 386, "seek": 153774, "start": 1559.06, "end": 1562.42, "text": " working at exactly the same time.", "tokens": [51430, 1364, 412, 2293, 264, 912, 565, 13, 51598], "temperature": 0.0, "avg_logprob": -0.2988294664320055, "compression_ratio": 1.6026200873362446, "no_speech_prob": 0.0002571415971033275}, {"id": 387, "seek": 156242, "start": 1562.42, "end": 1566.5, "text": " And they've looked at some different approach.", "tokens": [50364, 400, 436, 600, 2956, 412, 512, 819, 3109, 13, 50568], "temperature": 0.0, "avg_logprob": -0.32783811864718587, "compression_ratio": 1.5314285714285714, "no_speech_prob": 0.005730173550546169}, {"id": 388, "seek": 156242, "start": 1566.5, "end": 1574.18, "text": " Okay, so not sure we learned too much from the related work, but if you are trying to", "tokens": [50568, 1033, 11, 370, 406, 988, 321, 3264, 886, 709, 490, 264, 4077, 589, 11, 457, 498, 291, 366, 1382, 281, 50952], "temperature": 0.0, "avg_logprob": -0.32783811864718587, "compression_ratio": 1.5314285714285714, "no_speech_prob": 0.005730173550546169}, {"id": 389, "seek": 156242, "start": 1574.18, "end": 1579.54, "text": " really do the very, very best possible thing, you could study the related work and get the", "tokens": [50952, 534, 360, 264, 588, 11, 588, 1151, 1944, 551, 11, 291, 727, 2979, 264, 4077, 589, 293, 483, 264, 51220], "temperature": 0.0, "avg_logprob": -0.32783811864718587, "compression_ratio": 1.5314285714285714, "no_speech_prob": 0.005730173550546169}, {"id": 390, "seek": 156242, "start": 1579.54, "end": 1582.42, "text": " best ideas from each.", "tokens": [51220, 1151, 3487, 490, 1184, 13, 51364], "temperature": 0.0, "avg_logprob": -0.32783811864718587, "compression_ratio": 1.5314285714285714, "no_speech_prob": 0.005730173550546169}, {"id": 391, "seek": 156242, "start": 1582.42, "end": 1588.98, "text": " Okay, now, background.", "tokens": [51364, 1033, 11, 586, 11, 3678, 13, 51692], "temperature": 0.0, "avg_logprob": -0.32783811864718587, "compression_ratio": 1.5314285714285714, "no_speech_prob": 0.005730173550546169}, {"id": 392, "seek": 158898, "start": 1588.98, "end": 1594.02, "text": " So this is where it starts to look scary.", "tokens": [50364, 407, 341, 307, 689, 309, 3719, 281, 574, 6958, 13, 50616], "temperature": 0.0, "avg_logprob": -0.23626685672336153, "compression_ratio": 1.5311004784688995, "no_speech_prob": 9.461161971557885e-05}, {"id": 393, "seek": 158898, "start": 1594.02, "end": 1601.78, "text": " I think we could all agree.", "tokens": [50616, 286, 519, 321, 727, 439, 3986, 13, 51004], "temperature": 0.0, "avg_logprob": -0.23626685672336153, "compression_ratio": 1.5311004784688995, "no_speech_prob": 9.461161971557885e-05}, {"id": 394, "seek": 158898, "start": 1601.78, "end": 1603.78, "text": " And this is often the scariest bit, the background.", "tokens": [51004, 400, 341, 307, 2049, 264, 47755, 857, 11, 264, 3678, 13, 51104], "temperature": 0.0, "avg_logprob": -0.23626685672336153, "compression_ratio": 1.5311004784688995, "no_speech_prob": 9.461161971557885e-05}, {"id": 395, "seek": 158898, "start": 1603.78, "end": 1610.06, "text": " This is basically saying, like, mathematically, here's how the problem that we're trying to", "tokens": [51104, 639, 307, 1936, 1566, 11, 411, 11, 44003, 11, 510, 311, 577, 264, 1154, 300, 321, 434, 1382, 281, 51418], "temperature": 0.0, "avg_logprob": -0.23626685672336153, "compression_ratio": 1.5311004784688995, "no_speech_prob": 9.461161971557885e-05}, {"id": 396, "seek": 158898, "start": 1610.06, "end": 1612.38, "text": " solve is set up.", "tokens": [51418, 5039, 307, 992, 493, 13, 51534], "temperature": 0.0, "avg_logprob": -0.23626685672336153, "compression_ratio": 1.5311004784688995, "no_speech_prob": 9.461161971557885e-05}, {"id": 397, "seek": 158898, "start": 1612.38, "end": 1616.58, "text": " And so we're going to start by looking at denoising diffusion probabilistic models,", "tokens": [51534, 400, 370, 321, 434, 516, 281, 722, 538, 1237, 412, 1441, 78, 3436, 25242, 31959, 3142, 5245, 11, 51744], "temperature": 0.0, "avg_logprob": -0.23626685672336153, "compression_ratio": 1.5311004784688995, "no_speech_prob": 9.461161971557885e-05}, {"id": 398, "seek": 158898, "start": 1616.58, "end": 1617.58, "text": " DDPM.", "tokens": [51744, 413, 11373, 44, 13, 51794], "temperature": 0.0, "avg_logprob": -0.23626685672336153, "compression_ratio": 1.5311004784688995, "no_speech_prob": 9.461161971557885e-05}, {"id": 399, "seek": 161758, "start": 1618.1799999999998, "end": 1627.06, "text": " Now, if you've watched lesson 9b with Waseem and Tanishq, then you've already seen some", "tokens": [50394, 823, 11, 498, 291, 600, 6337, 6898, 1722, 65, 365, 343, 651, 443, 293, 314, 7524, 80, 11, 550, 291, 600, 1217, 1612, 512, 50838], "temperature": 0.0, "avg_logprob": -0.24965198223407453, "compression_ratio": 1.4454976303317535, "no_speech_prob": 1.618729584151879e-05}, {"id": 400, "seek": 161758, "start": 1627.06, "end": 1630.04, "text": " of the math of DDPM.", "tokens": [50838, 295, 264, 5221, 295, 413, 11373, 44, 13, 50987], "temperature": 0.0, "avg_logprob": -0.24965198223407453, "compression_ratio": 1.4454976303317535, "no_speech_prob": 1.618729584151879e-05}, {"id": 401, "seek": 161758, "start": 1630.04, "end": 1636.82, "text": " And the important thing to recognize is that basically no one in the world, pretty much,", "tokens": [50987, 400, 264, 1021, 551, 281, 5521, 307, 300, 1936, 572, 472, 294, 264, 1002, 11, 1238, 709, 11, 51326], "temperature": 0.0, "avg_logprob": -0.24965198223407453, "compression_ratio": 1.4454976303317535, "no_speech_prob": 1.618729584151879e-05}, {"id": 402, "seek": 161758, "start": 1636.82, "end": 1642.96, "text": " is going to look at these paragraphs of text and these equations and go, oh, I get it.", "tokens": [51326, 307, 516, 281, 574, 412, 613, 48910, 295, 2487, 293, 613, 11787, 293, 352, 11, 1954, 11, 286, 483, 309, 13, 51633], "temperature": 0.0, "avg_logprob": -0.24965198223407453, "compression_ratio": 1.4454976303317535, "no_speech_prob": 1.618729584151879e-05}, {"id": 403, "seek": 161758, "start": 1642.96, "end": 1644.6599999999999, "text": " That's what DDPM is.", "tokens": [51633, 663, 311, 437, 413, 11373, 44, 307, 13, 51718], "temperature": 0.0, "avg_logprob": -0.24965198223407453, "compression_ratio": 1.4454976303317535, "no_speech_prob": 1.618729584151879e-05}, {"id": 404, "seek": 164466, "start": 1644.74, "end": 1648.0600000000002, "text": " That's not how it works, right?", "tokens": [50368, 663, 311, 406, 577, 309, 1985, 11, 558, 30, 50534], "temperature": 0.0, "avg_logprob": -0.22368453632701527, "compression_ratio": 1.7476635514018692, "no_speech_prob": 0.0033764303661882877}, {"id": 405, "seek": 164466, "start": 1648.0600000000002, "end": 1653.42, "text": " To understand DDPM, you would have to read and study the original paper.", "tokens": [50534, 1407, 1223, 413, 11373, 44, 11, 291, 576, 362, 281, 1401, 293, 2979, 264, 3380, 3035, 13, 50802], "temperature": 0.0, "avg_logprob": -0.22368453632701527, "compression_ratio": 1.7476635514018692, "no_speech_prob": 0.0033764303661882877}, {"id": 406, "seek": 164466, "start": 1653.42, "end": 1659.22, "text": " And then you would have to read and study the papers it's based on, and talk to lots", "tokens": [50802, 400, 550, 291, 576, 362, 281, 1401, 293, 2979, 264, 10577, 309, 311, 2361, 322, 11, 293, 751, 281, 3195, 51092], "temperature": 0.0, "avg_logprob": -0.22368453632701527, "compression_ratio": 1.7476635514018692, "no_speech_prob": 0.0033764303661882877}, {"id": 407, "seek": 164466, "start": 1659.22, "end": 1664.6200000000001, "text": " of people, and watch videos, and go to classes, just like this one.", "tokens": [51092, 295, 561, 11, 293, 1159, 2145, 11, 293, 352, 281, 5359, 11, 445, 411, 341, 472, 13, 51362], "temperature": 0.0, "avg_logprob": -0.22368453632701527, "compression_ratio": 1.7476635514018692, "no_speech_prob": 0.0033764303661882877}, {"id": 408, "seek": 164466, "start": 1664.6200000000001, "end": 1667.5, "text": " And after a while, you'll understand DDPM.", "tokens": [51362, 400, 934, 257, 1339, 11, 291, 603, 1223, 413, 11373, 44, 13, 51506], "temperature": 0.0, "avg_logprob": -0.22368453632701527, "compression_ratio": 1.7476635514018692, "no_speech_prob": 0.0033764303661882877}, {"id": 409, "seek": 164466, "start": 1667.5, "end": 1672.9, "text": " And then you'll be able to look at this section and say, oh, okay, I see.", "tokens": [51506, 400, 550, 291, 603, 312, 1075, 281, 574, 412, 341, 3541, 293, 584, 11, 1954, 11, 1392, 11, 286, 536, 13, 51776], "temperature": 0.0, "avg_logprob": -0.22368453632701527, "compression_ratio": 1.7476635514018692, "no_speech_prob": 0.0033764303661882877}, {"id": 410, "seek": 167290, "start": 1672.9, "end": 1674.98, "text": " They're just talking about this thing I'm already familiar with.", "tokens": [50364, 814, 434, 445, 1417, 466, 341, 551, 286, 478, 1217, 4963, 365, 13, 50468], "temperature": 0.0, "avg_logprob": -0.2551263788694976, "compression_ratio": 1.638655462184874, "no_speech_prob": 0.00214857398532331}, {"id": 411, "seek": 167290, "start": 1674.98, "end": 1678.74, "text": " So this is meant to be a reminder of something that you already know.", "tokens": [50468, 407, 341, 307, 4140, 281, 312, 257, 13548, 295, 746, 300, 291, 1217, 458, 13, 50656], "temperature": 0.0, "avg_logprob": -0.2551263788694976, "compression_ratio": 1.638655462184874, "no_speech_prob": 0.00214857398532331}, {"id": 412, "seek": 167290, "start": 1678.74, "end": 1682.0600000000002, "text": " It's not something you should expect to learn from scratch.", "tokens": [50656, 467, 311, 406, 746, 291, 820, 2066, 281, 1466, 490, 8459, 13, 50822], "temperature": 0.0, "avg_logprob": -0.2551263788694976, "compression_ratio": 1.638655462184874, "no_speech_prob": 0.00214857398532331}, {"id": 413, "seek": 167290, "start": 1682.0600000000002, "end": 1691.0600000000002, "text": " So let me take you through these equations somewhat briefly, because Waseem and Tanishq", "tokens": [50822, 407, 718, 385, 747, 291, 807, 613, 11787, 8344, 10515, 11, 570, 343, 651, 443, 293, 314, 7524, 80, 51272], "temperature": 0.0, "avg_logprob": -0.2551263788694976, "compression_ratio": 1.638655462184874, "no_speech_prob": 0.00214857398532331}, {"id": 414, "seek": 167290, "start": 1691.0600000000002, "end": 1695.38, "text": " have kind of done them already, because every diffusion paper pretty much is going to have", "tokens": [51272, 362, 733, 295, 1096, 552, 1217, 11, 570, 633, 25242, 3035, 1238, 709, 307, 516, 281, 362, 51488], "temperature": 0.0, "avg_logprob": -0.2551263788694976, "compression_ratio": 1.638655462184874, "no_speech_prob": 0.00214857398532331}, {"id": 415, "seek": 167290, "start": 1695.38, "end": 1696.38, "text": " these equations.", "tokens": [51488, 613, 11787, 13, 51538], "temperature": 0.0, "avg_logprob": -0.2551263788694976, "compression_ratio": 1.638655462184874, "no_speech_prob": 0.00214857398532331}, {"id": 416, "seek": 169638, "start": 1696.38, "end": 1703.0200000000002, "text": " Okay, so, oh, and I'm just going to read something that Jono's put out in the chat.", "tokens": [50364, 1033, 11, 370, 11, 1954, 11, 293, 286, 478, 445, 516, 281, 1401, 746, 300, 7745, 78, 311, 829, 484, 294, 264, 5081, 13, 50696], "temperature": 0.0, "avg_logprob": -0.3140252765856291, "compression_ratio": 1.6360153256704981, "no_speech_prob": 0.0017544350121170282}, {"id": 417, "seek": 169638, "start": 1703.0200000000002, "end": 1707.5, "text": " He says, it's worth remembering the background is often written last and tries to look smart", "tokens": [50696, 634, 1619, 11, 309, 311, 3163, 20719, 264, 3678, 307, 2049, 3720, 1036, 293, 9898, 281, 574, 4069, 50920], "temperature": 0.0, "avg_logprob": -0.3140252765856291, "compression_ratio": 1.6360153256704981, "no_speech_prob": 0.0017544350121170282}, {"id": 418, "seek": 169638, "start": 1707.5, "end": 1709.3400000000001, "text": " for the reviewers.", "tokens": [50920, 337, 264, 45837, 13, 51012], "temperature": 0.0, "avg_logprob": -0.3140252765856291, "compression_ratio": 1.6360153256704981, "no_speech_prob": 0.0017544350121170282}, {"id": 419, "seek": 169638, "start": 1709.3400000000001, "end": 1710.3400000000001, "text": " Which is correct.", "tokens": [51012, 3013, 307, 3006, 13, 51062], "temperature": 0.0, "avg_logprob": -0.3140252765856291, "compression_ratio": 1.6360153256704981, "no_speech_prob": 0.0017544350121170282}, {"id": 420, "seek": 169638, "start": 1710.3400000000001, "end": 1712.22, "text": " So feel free to read it last too.", "tokens": [51062, 407, 841, 1737, 281, 1401, 309, 1036, 886, 13, 51156], "temperature": 0.0, "avg_logprob": -0.3140252765856291, "compression_ratio": 1.6360153256704981, "no_speech_prob": 0.0017544350121170282}, {"id": 421, "seek": 169638, "start": 1712.22, "end": 1714.46, "text": " Yeah, absolutely.", "tokens": [51156, 865, 11, 3122, 13, 51268], "temperature": 0.0, "avg_logprob": -0.3140252765856291, "compression_ratio": 1.6360153256704981, "no_speech_prob": 0.0017544350121170282}, {"id": 422, "seek": 169638, "start": 1714.46, "end": 1720.7, "text": " I think the main reason to read it is to find out what the different letters mean, what", "tokens": [51268, 286, 519, 264, 2135, 1778, 281, 1401, 309, 307, 281, 915, 484, 437, 264, 819, 7825, 914, 11, 437, 51580], "temperature": 0.0, "avg_logprob": -0.3140252765856291, "compression_ratio": 1.6360153256704981, "no_speech_prob": 0.0017544350121170282}, {"id": 423, "seek": 169638, "start": 1720.7, "end": 1724.7, "text": " the different symbols mean, because they'll probably refer to them later.", "tokens": [51580, 264, 819, 16944, 914, 11, 570, 436, 603, 1391, 2864, 281, 552, 1780, 13, 51780], "temperature": 0.0, "avg_logprob": -0.3140252765856291, "compression_ratio": 1.6360153256704981, "no_speech_prob": 0.0017544350121170282}, {"id": 424, "seek": 172470, "start": 1724.7, "end": 1731.42, "text": " But in this case, I want to actually take this as a way to learn how to read math.", "tokens": [50364, 583, 294, 341, 1389, 11, 286, 528, 281, 767, 747, 341, 382, 257, 636, 281, 1466, 577, 281, 1401, 5221, 13, 50700], "temperature": 0.0, "avg_logprob": -0.22586348684210528, "compression_ratio": 1.5980392156862746, "no_speech_prob": 0.0007672827923670411}, {"id": 425, "seek": 172470, "start": 1731.42, "end": 1738.68, "text": " So let's start with this very first equation, which, how on earth do you even read this?", "tokens": [50700, 407, 718, 311, 722, 365, 341, 588, 700, 5367, 11, 597, 11, 577, 322, 4120, 360, 291, 754, 1401, 341, 30, 51063], "temperature": 0.0, "avg_logprob": -0.22586348684210528, "compression_ratio": 1.5980392156862746, "no_speech_prob": 0.0007672827923670411}, {"id": 426, "seek": 172470, "start": 1738.68, "end": 1745.22, "text": " So the first thing I'll say is that this is not an E. Right?", "tokens": [51063, 407, 264, 700, 551, 286, 603, 584, 307, 300, 341, 307, 406, 364, 462, 13, 1779, 30, 51390], "temperature": 0.0, "avg_logprob": -0.22586348684210528, "compression_ratio": 1.5980392156862746, "no_speech_prob": 0.0007672827923670411}, {"id": 427, "seek": 172470, "start": 1745.22, "end": 1748.6200000000001, "text": " It's a weird looking E, and the reason it's a weird looking E is because it's a Greek", "tokens": [51390, 467, 311, 257, 3657, 1237, 462, 11, 293, 264, 1778, 309, 311, 257, 3657, 1237, 462, 307, 570, 309, 311, 257, 10281, 51560], "temperature": 0.0, "avg_logprob": -0.22586348684210528, "compression_ratio": 1.5980392156862746, "no_speech_prob": 0.0007672827923670411}, {"id": 428, "seek": 172470, "start": 1748.6200000000001, "end": 1749.68, "text": " letter.", "tokens": [51560, 5063, 13, 51613], "temperature": 0.0, "avg_logprob": -0.22586348684210528, "compression_ratio": 1.5980392156862746, "no_speech_prob": 0.0007672827923670411}, {"id": 429, "seek": 174968, "start": 1749.68, "end": 1756.1200000000001, "text": " And so something I always recommend to students is that you learn the Greek alphabet, because", "tokens": [50364, 400, 370, 746, 286, 1009, 2748, 281, 1731, 307, 300, 291, 1466, 264, 10281, 23339, 11, 570, 50686], "temperature": 0.0, "avg_logprob": -0.2369083041236514, "compression_ratio": 1.5816733067729083, "no_speech_prob": 0.00029595434898510575}, {"id": 430, "seek": 174968, "start": 1756.1200000000001, "end": 1760.92, "text": " it's much easier to be able to actually read this to yourself.", "tokens": [50686, 309, 311, 709, 3571, 281, 312, 1075, 281, 767, 1401, 341, 281, 1803, 13, 50926], "temperature": 0.0, "avg_logprob": -0.2369083041236514, "compression_ratio": 1.5816733067729083, "no_speech_prob": 0.00029595434898510575}, {"id": 431, "seek": 174968, "start": 1760.92, "end": 1762.1200000000001, "text": " So here's another one.", "tokens": [50926, 407, 510, 311, 1071, 472, 13, 50986], "temperature": 0.0, "avg_logprob": -0.2369083041236514, "compression_ratio": 1.5816733067729083, "no_speech_prob": 0.00029595434898510575}, {"id": 432, "seek": 174968, "start": 1762.1200000000001, "end": 1763.1200000000001, "text": " Right?", "tokens": [50986, 1779, 30, 51036], "temperature": 0.0, "avg_logprob": -0.2369083041236514, "compression_ratio": 1.5816733067729083, "no_speech_prob": 0.00029595434898510575}, {"id": 433, "seek": 174968, "start": 1763.1200000000001, "end": 1767.8400000000001, "text": " If you don't know that's called theta, I guess you have to read it as like circle with line", "tokens": [51036, 759, 291, 500, 380, 458, 300, 311, 1219, 9725, 11, 286, 2041, 291, 362, 281, 1401, 309, 382, 411, 6329, 365, 1622, 51272], "temperature": 0.0, "avg_logprob": -0.2369083041236514, "compression_ratio": 1.5816733067729083, "no_speech_prob": 0.00029595434898510575}, {"id": 434, "seek": 174968, "start": 1767.8400000000001, "end": 1768.8400000000001, "text": " through it.", "tokens": [51272, 807, 309, 13, 51322], "temperature": 0.0, "avg_logprob": -0.2369083041236514, "compression_ratio": 1.5816733067729083, "no_speech_prob": 0.00029595434898510575}, {"id": 435, "seek": 174968, "start": 1768.8400000000001, "end": 1773.2, "text": " It's just going to get confusing trying to read an equation where you just can't actually", "tokens": [51322, 467, 311, 445, 516, 281, 483, 13181, 1382, 281, 1401, 364, 5367, 689, 291, 445, 393, 380, 767, 51540], "temperature": 0.0, "avg_logprob": -0.2369083041236514, "compression_ratio": 1.5816733067729083, "no_speech_prob": 0.00029595434898510575}, {"id": 436, "seek": 174968, "start": 1773.2, "end": 1775.24, "text": " say it out loud.", "tokens": [51540, 584, 309, 484, 6588, 13, 51642], "temperature": 0.0, "avg_logprob": -0.2369083041236514, "compression_ratio": 1.5816733067729083, "no_speech_prob": 0.00029595434898510575}, {"id": 437, "seek": 177524, "start": 1775.24, "end": 1790.0, "text": " So what I suggest is that you learn that, learn the Greek alphabet, and let me find", "tokens": [50364, 407, 437, 286, 3402, 307, 300, 291, 1466, 300, 11, 1466, 264, 10281, 23339, 11, 293, 718, 385, 915, 51102], "temperature": 0.0, "avg_logprob": -0.3007100423177083, "compression_ratio": 1.518987341772152, "no_speech_prob": 0.0004108401481062174}, {"id": 438, "seek": 177524, "start": 1790.0, "end": 1791.0, "text": " the right place.", "tokens": [51102, 264, 558, 1081, 13, 51152], "temperature": 0.0, "avg_logprob": -0.3007100423177083, "compression_ratio": 1.518987341772152, "no_speech_prob": 0.0004108401481062174}, {"id": 439, "seek": 177524, "start": 1791.0, "end": 1797.1200000000001, "text": " So it's very easy to look it up just on Wikipedia.", "tokens": [51152, 407, 309, 311, 588, 1858, 281, 574, 309, 493, 445, 322, 28999, 13, 51458], "temperature": 0.0, "avg_logprob": -0.3007100423177083, "compression_ratio": 1.518987341772152, "no_speech_prob": 0.0004108401481062174}, {"id": 440, "seek": 177524, "start": 1797.1200000000001, "end": 1804.44, "text": " Here's the Greek alphabet, and if we go down here, you'll see they've all got names, and", "tokens": [51458, 1692, 311, 264, 10281, 23339, 11, 293, 498, 321, 352, 760, 510, 11, 291, 603, 536, 436, 600, 439, 658, 5288, 11, 293, 51824], "temperature": 0.0, "avg_logprob": -0.3007100423177083, "compression_ratio": 1.518987341772152, "no_speech_prob": 0.0004108401481062174}, {"id": 441, "seek": 180444, "start": 1804.44, "end": 1808.44, "text": " we can go and try and find our one.", "tokens": [50364, 321, 393, 352, 293, 853, 293, 915, 527, 472, 13, 50564], "temperature": 0.0, "avg_logprob": -0.386096463345065, "compression_ratio": 1.4679802955665024, "no_speech_prob": 1.7778511391952634e-05}, {"id": 442, "seek": 180444, "start": 1808.44, "end": 1811.16, "text": " Curvy E. Okay, here it is.", "tokens": [50564, 7907, 11869, 462, 13, 1033, 11, 510, 309, 307, 13, 50700], "temperature": 0.0, "avg_logprob": -0.386096463345065, "compression_ratio": 1.4679802955665024, "no_speech_prob": 1.7778511391952634e-05}, {"id": 443, "seek": 180444, "start": 1811.16, "end": 1815.4, "text": " Epsilon and, oh, circle with a line through it.", "tokens": [50700, 462, 16592, 293, 11, 1954, 11, 6329, 365, 257, 1622, 807, 309, 13, 50912], "temperature": 0.0, "avg_logprob": -0.386096463345065, "compression_ratio": 1.4679802955665024, "no_speech_prob": 1.7778511391952634e-05}, {"id": 444, "seek": 180444, "start": 1815.4, "end": 1816.4, "text": " Theta.", "tokens": [50912, 334, 7664, 13, 50962], "temperature": 0.0, "avg_logprob": -0.386096463345065, "compression_ratio": 1.4679802955665024, "no_speech_prob": 1.7778511391952634e-05}, {"id": 445, "seek": 180444, "start": 1816.4, "end": 1817.4, "text": " All right.", "tokens": [50962, 1057, 558, 13, 51012], "temperature": 0.0, "avg_logprob": -0.386096463345065, "compression_ratio": 1.4679802955665024, "no_speech_prob": 1.7778511391952634e-05}, {"id": 446, "seek": 180444, "start": 1817.4, "end": 1821.68, "text": " So practice, and you will get used to recognizing these.", "tokens": [51012, 407, 3124, 11, 293, 291, 486, 483, 1143, 281, 18538, 613, 13, 51226], "temperature": 0.0, "avg_logprob": -0.386096463345065, "compression_ratio": 1.4679802955665024, "no_speech_prob": 1.7778511391952634e-05}, {"id": 447, "seek": 180444, "start": 1821.68, "end": 1826.1200000000001, "text": " So you've got epsilon, theta.", "tokens": [51226, 407, 291, 600, 658, 17889, 11, 9725, 13, 51448], "temperature": 0.0, "avg_logprob": -0.386096463345065, "compression_ratio": 1.4679802955665024, "no_speech_prob": 1.7778511391952634e-05}, {"id": 448, "seek": 180444, "start": 1826.1200000000001, "end": 1831.4, "text": " This is just a weird curly L. So that's, this is used for the loss function.", "tokens": [51448, 639, 307, 445, 257, 3657, 32066, 441, 13, 407, 300, 311, 11, 341, 307, 1143, 337, 264, 4470, 2445, 13, 51712], "temperature": 0.0, "avg_logprob": -0.386096463345065, "compression_ratio": 1.4679802955665024, "no_speech_prob": 1.7778511391952634e-05}, {"id": 449, "seek": 180444, "start": 1831.4, "end": 1832.72, "text": " Okay.", "tokens": [51712, 1033, 13, 51778], "temperature": 0.0, "avg_logprob": -0.386096463345065, "compression_ratio": 1.4679802955665024, "no_speech_prob": 1.7778511391952634e-05}, {"id": 450, "seek": 183272, "start": 1832.72, "end": 1839.32, "text": " So how do we find out what this symbol means, and what this symbol means?", "tokens": [50364, 407, 577, 360, 321, 915, 484, 437, 341, 5986, 1355, 11, 293, 437, 341, 5986, 1355, 30, 50694], "temperature": 0.0, "avg_logprob": -0.3258405087599114, "compression_ratio": 1.5070422535211268, "no_speech_prob": 6.144129656604491e-06}, {"id": 451, "seek": 183272, "start": 1839.32, "end": 1844.68, "text": " Well what we can do is, there's a few ways to do it.", "tokens": [50694, 1042, 437, 321, 393, 360, 307, 11, 456, 311, 257, 1326, 2098, 281, 360, 309, 13, 50962], "temperature": 0.0, "avg_logprob": -0.3258405087599114, "compression_ratio": 1.5070422535211268, "no_speech_prob": 6.144129656604491e-06}, {"id": 452, "seek": 183272, "start": 1844.68, "end": 1857.6000000000001, "text": " One way, which is kind of cool, is we can use a program called MathPix, which, MathPix.", "tokens": [50962, 1485, 636, 11, 597, 307, 733, 295, 1627, 11, 307, 321, 393, 764, 257, 1461, 1219, 15776, 47, 970, 11, 597, 11, 15776, 47, 970, 13, 51608], "temperature": 0.0, "avg_logprob": -0.3258405087599114, "compression_ratio": 1.5070422535211268, "no_speech_prob": 6.144129656604491e-06}, {"id": 453, "seek": 185760, "start": 1857.6, "end": 1865.1599999999999, "text": " Here we are, MathPix.", "tokens": [50364, 1692, 321, 366, 11, 15776, 47, 970, 13, 50742], "temperature": 0.0, "avg_logprob": -0.2379180908203125, "compression_ratio": 1.4722222222222223, "no_speech_prob": 0.001432503224350512}, {"id": 454, "seek": 185760, "start": 1865.1599999999999, "end": 1874.6, "text": " And what it does is, you basically select anything on your screen, and it will turn", "tokens": [50742, 400, 437, 309, 775, 307, 11, 291, 1936, 3048, 1340, 322, 428, 2568, 11, 293, 309, 486, 1261, 51214], "temperature": 0.0, "avg_logprob": -0.2379180908203125, "compression_ratio": 1.4722222222222223, "no_speech_prob": 0.001432503224350512}, {"id": 455, "seek": 185760, "start": 1874.6, "end": 1879.1599999999999, "text": " it into LaTeX.", "tokens": [51214, 309, 666, 2369, 14233, 55, 13, 51442], "temperature": 0.0, "avg_logprob": -0.2379180908203125, "compression_ratio": 1.4722222222222223, "no_speech_prob": 0.001432503224350512}, {"id": 456, "seek": 185760, "start": 1879.1599999999999, "end": 1882.6399999999999, "text": " So that's one way you can do this, is you can select on the screen, it turns it into", "tokens": [51442, 407, 300, 311, 472, 636, 291, 393, 360, 341, 11, 307, 291, 393, 3048, 322, 264, 2568, 11, 309, 4523, 309, 666, 51616], "temperature": 0.0, "avg_logprob": -0.2379180908203125, "compression_ratio": 1.4722222222222223, "no_speech_prob": 0.001432503224350512}, {"id": 457, "seek": 185760, "start": 1882.6399999999999, "end": 1883.6399999999999, "text": " LaTeX.", "tokens": [51616, 2369, 14233, 55, 13, 51666], "temperature": 0.0, "avg_logprob": -0.2379180908203125, "compression_ratio": 1.4722222222222223, "no_speech_prob": 0.001432503224350512}, {"id": 458, "seek": 188364, "start": 1883.64, "end": 1888.8000000000002, "text": " And the reason to turn it into LaTeX is because LaTeX is written as actual stuff that you", "tokens": [50364, 400, 264, 1778, 281, 1261, 309, 666, 2369, 14233, 55, 307, 570, 2369, 14233, 55, 307, 3720, 382, 3539, 1507, 300, 291, 50622], "temperature": 0.0, "avg_logprob": -0.2679556188449054, "compression_ratio": 1.5389221556886228, "no_speech_prob": 0.0010987190762534738}, {"id": 459, "seek": 188364, "start": 1888.8000000000002, "end": 1892.96, "text": " can search for on Google.", "tokens": [50622, 393, 3164, 337, 322, 3329, 13, 50830], "temperature": 0.0, "avg_logprob": -0.2679556188449054, "compression_ratio": 1.5389221556886228, "no_speech_prob": 0.0010987190762534738}, {"id": 460, "seek": 188364, "start": 1892.96, "end": 1895.3600000000001, "text": " So that's technique number one.", "tokens": [50830, 407, 300, 311, 6532, 1230, 472, 13, 50950], "temperature": 0.0, "avg_logprob": -0.2679556188449054, "compression_ratio": 1.5389221556886228, "no_speech_prob": 0.0010987190762534738}, {"id": 461, "seek": 188364, "start": 1895.3600000000001, "end": 1906.0, "text": " Technique number two is, you can download the other formats of the paper, and that'll", "tokens": [50950, 8337, 1925, 1230, 732, 307, 11, 291, 393, 5484, 264, 661, 25879, 295, 264, 3035, 11, 293, 300, 603, 51482], "temperature": 0.0, "avg_logprob": -0.2679556188449054, "compression_ratio": 1.5389221556886228, "no_speech_prob": 0.0010987190762534738}, {"id": 462, "seek": 188364, "start": 1906.0, "end": 1908.92, "text": " have a download source.", "tokens": [51482, 362, 257, 5484, 4009, 13, 51628], "temperature": 0.0, "avg_logprob": -0.2679556188449054, "compression_ratio": 1.5389221556886228, "no_speech_prob": 0.0010987190762534738}, {"id": 463, "seek": 190892, "start": 1908.92, "end": 1918.2, "text": " And if we say download source, then what we'll be able to do is, we'll be able to", "tokens": [50364, 400, 498, 321, 584, 5484, 4009, 11, 550, 437, 321, 603, 312, 1075, 281, 360, 307, 11, 321, 603, 312, 1075, 281, 50828], "temperature": 0.0, "avg_logprob": -0.2424570483925902, "compression_ratio": 1.5317919075144508, "no_speech_prob": 0.008577078580856323}, {"id": 464, "seek": 190892, "start": 1918.2, "end": 1923.0600000000002, "text": " actually open up that LaTeX, and have a look at it.", "tokens": [50828, 767, 1269, 493, 300, 2369, 14233, 55, 11, 293, 362, 257, 574, 412, 309, 13, 51071], "temperature": 0.0, "avg_logprob": -0.2424570483925902, "compression_ratio": 1.5317919075144508, "no_speech_prob": 0.008577078580856323}, {"id": 465, "seek": 190892, "start": 1923.0600000000002, "end": 1925.64, "text": " So we'll wait for that to download while that's happening.", "tokens": [51071, 407, 321, 603, 1699, 337, 300, 281, 5484, 1339, 300, 311, 2737, 13, 51200], "temperature": 0.0, "avg_logprob": -0.2424570483925902, "compression_ratio": 1.5317919075144508, "no_speech_prob": 0.008577078580856323}, {"id": 466, "seek": 190892, "start": 1925.64, "end": 1929.52, "text": " Let's keep moving along here.", "tokens": [51200, 961, 311, 1066, 2684, 2051, 510, 13, 51394], "temperature": 0.0, "avg_logprob": -0.2424570483925902, "compression_ratio": 1.5317919075144508, "no_speech_prob": 0.008577078580856323}, {"id": 467, "seek": 190892, "start": 1929.52, "end": 1935.64, "text": " So in this case, we've got these two bars.", "tokens": [51394, 407, 294, 341, 1389, 11, 321, 600, 658, 613, 732, 10228, 13, 51700], "temperature": 0.0, "avg_logprob": -0.2424570483925902, "compression_ratio": 1.5317919075144508, "no_speech_prob": 0.008577078580856323}, {"id": 468, "seek": 193564, "start": 1935.64, "end": 1939.8400000000001, "text": " So can we find out what that means?", "tokens": [50364, 407, 393, 321, 915, 484, 437, 300, 1355, 30, 50574], "temperature": 0.0, "avg_logprob": -0.310402567246381, "compression_ratio": 1.5944444444444446, "no_speech_prob": 0.0003406266332603991}, {"id": 469, "seek": 193564, "start": 1939.8400000000001, "end": 1941.64, "text": " So we could try a few things.", "tokens": [50574, 407, 321, 727, 853, 257, 1326, 721, 13, 50664], "temperature": 0.0, "avg_logprob": -0.310402567246381, "compression_ratio": 1.5944444444444446, "no_speech_prob": 0.0003406266332603991}, {"id": 470, "seek": 193564, "start": 1941.64, "end": 1948.2, "text": " We could try looking for two bars, maybe math notation.", "tokens": [50664, 492, 727, 853, 1237, 337, 732, 10228, 11, 1310, 5221, 24657, 13, 50992], "temperature": 0.0, "avg_logprob": -0.310402567246381, "compression_ratio": 1.5944444444444446, "no_speech_prob": 0.0003406266332603991}, {"id": 471, "seek": 193564, "start": 1948.2, "end": 1953.5800000000002, "text": " Oh, here we are, looks hopeful.", "tokens": [50992, 876, 11, 510, 321, 366, 11, 1542, 20531, 13, 51261], "temperature": 0.0, "avg_logprob": -0.310402567246381, "compression_ratio": 1.5944444444444446, "no_speech_prob": 0.0003406266332603991}, {"id": 472, "seek": 193564, "start": 1953.5800000000002, "end": 1955.24, "text": " What does this mean in mathematics?", "tokens": [51261, 708, 775, 341, 914, 294, 18666, 30, 51344], "temperature": 0.0, "avg_logprob": -0.310402567246381, "compression_ratio": 1.5944444444444446, "no_speech_prob": 0.0003406266332603991}, {"id": 473, "seek": 193564, "start": 1955.24, "end": 1959.5600000000002, "text": " Oh, and here, there's a glossary of mathematical symbols.", "tokens": [51344, 876, 11, 293, 510, 11, 456, 311, 257, 19574, 822, 295, 18894, 16944, 13, 51560], "temperature": 0.0, "avg_logprob": -0.310402567246381, "compression_ratio": 1.5944444444444446, "no_speech_prob": 0.0003406266332603991}, {"id": 474, "seek": 193564, "start": 1959.5600000000002, "end": 1965.22, "text": " Here there's a meaning of this in math.", "tokens": [51560, 1692, 456, 311, 257, 3620, 295, 341, 294, 5221, 13, 51843], "temperature": 0.0, "avg_logprob": -0.310402567246381, "compression_ratio": 1.5944444444444446, "no_speech_prob": 0.0003406266332603991}, {"id": 475, "seek": 196522, "start": 1965.22, "end": 1966.78, "text": " So that looks hopeful.", "tokens": [50364, 407, 300, 1542, 20531, 13, 50442], "temperature": 0.0, "avg_logprob": -0.29011587845651726, "compression_ratio": 1.664864864864865, "no_speech_prob": 2.7969292204943486e-05}, {"id": 476, "seek": 196522, "start": 1966.78, "end": 1969.7, "text": " Okay, so it definitely doesn't look like this.", "tokens": [50442, 1033, 11, 370, 309, 2138, 1177, 380, 574, 411, 341, 13, 50588], "temperature": 0.0, "avg_logprob": -0.29011587845651726, "compression_ratio": 1.664864864864865, "no_speech_prob": 2.7969292204943486e-05}, {"id": 477, "seek": 196522, "start": 1969.7, "end": 1972.3, "text": " It's not between two sets of letters.", "tokens": [50588, 467, 311, 406, 1296, 732, 6352, 295, 7825, 13, 50718], "temperature": 0.0, "avg_logprob": -0.29011587845651726, "compression_ratio": 1.664864864864865, "no_speech_prob": 2.7969292204943486e-05}, {"id": 478, "seek": 196522, "start": 1972.3, "end": 1976.58, "text": " Ah, but it is around something.", "tokens": [50718, 2438, 11, 457, 309, 307, 926, 746, 13, 50932], "temperature": 0.0, "avg_logprob": -0.29011587845651726, "compression_ratio": 1.664864864864865, "no_speech_prob": 2.7969292204943486e-05}, {"id": 479, "seek": 196522, "start": 1976.58, "end": 1978.42, "text": " That looks hopeful.", "tokens": [50932, 663, 1542, 20531, 13, 51024], "temperature": 0.0, "avg_logprob": -0.29011587845651726, "compression_ratio": 1.664864864864865, "no_speech_prob": 2.7969292204943486e-05}, {"id": 480, "seek": 196522, "start": 1978.42, "end": 1980.1200000000001, "text": " So it looks like we found it.", "tokens": [51024, 407, 309, 1542, 411, 321, 1352, 309, 13, 51109], "temperature": 0.0, "avg_logprob": -0.29011587845651726, "compression_ratio": 1.664864864864865, "no_speech_prob": 2.7969292204943486e-05}, {"id": 481, "seek": 196522, "start": 1980.1200000000001, "end": 1981.58, "text": " It's a vector norm.", "tokens": [51109, 467, 311, 257, 8062, 2026, 13, 51182], "temperature": 0.0, "avg_logprob": -0.29011587845651726, "compression_ratio": 1.664864864864865, "no_speech_prob": 2.7969292204943486e-05}, {"id": 482, "seek": 196522, "start": 1981.58, "end": 1984.7, "text": " Okay, so then you can start looking for these things up.", "tokens": [51182, 1033, 11, 370, 550, 291, 393, 722, 1237, 337, 613, 721, 493, 13, 51338], "temperature": 0.0, "avg_logprob": -0.29011587845651726, "compression_ratio": 1.664864864864865, "no_speech_prob": 2.7969292204943486e-05}, {"id": 483, "seek": 196522, "start": 1984.7, "end": 1989.34, "text": " So we can say norm, or maybe vector norm.", "tokens": [51338, 407, 321, 393, 584, 2026, 11, 420, 1310, 8062, 2026, 13, 51570], "temperature": 0.0, "avg_logprob": -0.29011587845651726, "compression_ratio": 1.664864864864865, "no_speech_prob": 2.7969292204943486e-05}, {"id": 484, "seek": 198934, "start": 1989.34, "end": 1996.58, "text": " And so once you can actually find the term, then we kind of know what to look for.", "tokens": [50364, 400, 370, 1564, 291, 393, 767, 915, 264, 1433, 11, 550, 321, 733, 295, 458, 437, 281, 574, 337, 13, 50726], "temperature": 0.0, "avg_logprob": -0.32983607716030544, "compression_ratio": 1.4662576687116564, "no_speech_prob": 0.000295956211630255}, {"id": 485, "seek": 198934, "start": 1996.58, "end": 2011.02, "text": " Okay, so in our case, we've got this surrounding all this stuff, and then there's twos here", "tokens": [50726, 1033, 11, 370, 294, 527, 1389, 11, 321, 600, 658, 341, 11498, 439, 341, 1507, 11, 293, 550, 456, 311, 683, 329, 510, 51448], "temperature": 0.0, "avg_logprob": -0.32983607716030544, "compression_ratio": 1.4662576687116564, "no_speech_prob": 0.000295956211630255}, {"id": 486, "seek": 198934, "start": 2011.02, "end": 2012.02, "text": " and here.", "tokens": [51448, 293, 510, 13, 51498], "temperature": 0.0, "avg_logprob": -0.32983607716030544, "compression_ratio": 1.4662576687116564, "no_speech_prob": 0.000295956211630255}, {"id": 487, "seek": 198934, "start": 2012.02, "end": 2013.02, "text": " What's going on here?", "tokens": [51498, 708, 311, 516, 322, 510, 30, 51548], "temperature": 0.0, "avg_logprob": -0.32983607716030544, "compression_ratio": 1.4662576687116564, "no_speech_prob": 0.000295956211630255}, {"id": 488, "seek": 198934, "start": 2013.02, "end": 2017.26, "text": " All right, if we scroll through.", "tokens": [51548, 1057, 558, 11, 498, 321, 11369, 807, 13, 51760], "temperature": 0.0, "avg_logprob": -0.32983607716030544, "compression_ratio": 1.4662576687116564, "no_speech_prob": 0.000295956211630255}, {"id": 489, "seek": 201726, "start": 2017.58, "end": 2021.82, "text": " Oh, this is pretty close actually.", "tokens": [50380, 876, 11, 341, 307, 1238, 1998, 767, 13, 50592], "temperature": 0.0, "avg_logprob": -0.31204170037892237, "compression_ratio": 1.579591836734694, "no_speech_prob": 0.0004655256343539804}, {"id": 490, "seek": 201726, "start": 2021.82, "end": 2031.14, "text": " So okay, so two bars can mean a matrix norm, otherwise a single for a vector norm.", "tokens": [50592, 407, 1392, 11, 370, 732, 10228, 393, 914, 257, 8141, 2026, 11, 5911, 257, 2167, 337, 257, 8062, 2026, 13, 51058], "temperature": 0.0, "avg_logprob": -0.31204170037892237, "compression_ratio": 1.579591836734694, "no_speech_prob": 0.0004655256343539804}, {"id": 491, "seek": 201726, "start": 2031.14, "end": 2032.14, "text": " That's just here in particular.", "tokens": [51058, 663, 311, 445, 510, 294, 1729, 13, 51108], "temperature": 0.0, "avg_logprob": -0.31204170037892237, "compression_ratio": 1.579591836734694, "no_speech_prob": 0.0004655256343539804}, {"id": 492, "seek": 201726, "start": 2032.14, "end": 2035.58, "text": " So it looks like we don't have to worry too much about whether it's one or two bars.", "tokens": [51108, 407, 309, 1542, 411, 321, 500, 380, 362, 281, 3292, 886, 709, 466, 1968, 309, 311, 472, 420, 732, 10228, 13, 51280], "temperature": 0.0, "avg_logprob": -0.31204170037892237, "compression_ratio": 1.579591836734694, "no_speech_prob": 0.0004655256343539804}, {"id": 493, "seek": 201726, "start": 2035.58, "end": 2037.78, "text": " Oh, and here's the definition.", "tokens": [51280, 876, 11, 293, 510, 311, 264, 7123, 13, 51390], "temperature": 0.0, "avg_logprob": -0.31204170037892237, "compression_ratio": 1.579591836734694, "no_speech_prob": 0.0004655256343539804}, {"id": 494, "seek": 201726, "start": 2037.78, "end": 2039.78, "text": " Oh, that's handy.", "tokens": [51390, 876, 11, 300, 311, 13239, 13, 51490], "temperature": 0.0, "avg_logprob": -0.31204170037892237, "compression_ratio": 1.579591836734694, "no_speech_prob": 0.0004655256343539804}, {"id": 495, "seek": 201726, "start": 2039.78, "end": 2041.26, "text": " So we've got the two one.", "tokens": [51490, 407, 321, 600, 658, 264, 732, 472, 13, 51564], "temperature": 0.0, "avg_logprob": -0.31204170037892237, "compression_ratio": 1.579591836734694, "no_speech_prob": 0.0004655256343539804}, {"id": 496, "seek": 201726, "start": 2041.26, "end": 2045.62, "text": " All right, so it's equal to, ah, root sum of squares.", "tokens": [51564, 1057, 558, 11, 370, 309, 311, 2681, 281, 11, 3716, 11, 5593, 2408, 295, 19368, 13, 51782], "temperature": 0.0, "avg_logprob": -0.31204170037892237, "compression_ratio": 1.579591836734694, "no_speech_prob": 0.0004655256343539804}, {"id": 497, "seek": 201726, "start": 2045.62, "end": 2046.84, "text": " So that's good to know.", "tokens": [51782, 407, 300, 311, 665, 281, 458, 13, 51843], "temperature": 0.0, "avg_logprob": -0.31204170037892237, "compression_ratio": 1.579591836734694, "no_speech_prob": 0.0004655256343539804}, {"id": 498, "seek": 204684, "start": 2047.4199999999998, "end": 2051.72, "text": " So this norm thing means a root sum of squares.", "tokens": [50393, 407, 341, 2026, 551, 1355, 257, 5593, 2408, 295, 19368, 13, 50608], "temperature": 0.0, "avg_logprob": -0.27634319305419924, "compression_ratio": 1.875, "no_speech_prob": 5.475962825585157e-05}, {"id": 499, "seek": 204684, "start": 2051.72, "end": 2052.72, "text": " But then we've got a two up here.", "tokens": [50608, 583, 550, 321, 600, 658, 257, 732, 493, 510, 13, 50658], "temperature": 0.0, "avg_logprob": -0.27634319305419924, "compression_ratio": 1.875, "no_speech_prob": 5.475962825585157e-05}, {"id": 500, "seek": 204684, "start": 2052.72, "end": 2054.3199999999997, "text": " Well, that just means squared.", "tokens": [50658, 1042, 11, 300, 445, 1355, 8889, 13, 50738], "temperature": 0.0, "avg_logprob": -0.27634319305419924, "compression_ratio": 1.875, "no_speech_prob": 5.475962825585157e-05}, {"id": 501, "seek": 204684, "start": 2054.3199999999997, "end": 2058.68, "text": " Ah, so this is a root sum of squares squared.", "tokens": [50738, 2438, 11, 370, 341, 307, 257, 5593, 2408, 295, 19368, 8889, 13, 50956], "temperature": 0.0, "avg_logprob": -0.27634319305419924, "compression_ratio": 1.875, "no_speech_prob": 5.475962825585157e-05}, {"id": 502, "seek": 204684, "start": 2058.68, "end": 2062.16, "text": " Well, the square of a square root is just the thing itself.", "tokens": [50956, 1042, 11, 264, 3732, 295, 257, 3732, 5593, 307, 445, 264, 551, 2564, 13, 51130], "temperature": 0.0, "avg_logprob": -0.27634319305419924, "compression_ratio": 1.875, "no_speech_prob": 5.475962825585157e-05}, {"id": 503, "seek": 204684, "start": 2062.16, "end": 2066.2599999999998, "text": " Ah, so actually this whole thing is just the sum of squares.", "tokens": [51130, 2438, 11, 370, 767, 341, 1379, 551, 307, 445, 264, 2408, 295, 19368, 13, 51335], "temperature": 0.0, "avg_logprob": -0.27634319305419924, "compression_ratio": 1.875, "no_speech_prob": 5.475962825585157e-05}, {"id": 504, "seek": 204684, "start": 2066.2599999999998, "end": 2070.2999999999997, "text": " It's a bit of a weird way to write it, in a sense.", "tokens": [51335, 467, 311, 257, 857, 295, 257, 3657, 636, 281, 2464, 309, 11, 294, 257, 2020, 13, 51537], "temperature": 0.0, "avg_logprob": -0.27634319305419924, "compression_ratio": 1.875, "no_speech_prob": 5.475962825585157e-05}, {"id": 505, "seek": 207030, "start": 2070.3, "end": 2081.0600000000004, "text": " We could perfectly well have just written it as, you know, like sum of, you know, whatever", "tokens": [50364, 492, 727, 6239, 731, 362, 445, 3720, 309, 382, 11, 291, 458, 11, 411, 2408, 295, 11, 291, 458, 11, 2035, 50902], "temperature": 0.0, "avg_logprob": -0.3667926788330078, "compression_ratio": 1.4814814814814814, "no_speech_prob": 0.00030534627148881555}, {"id": 506, "seek": 207030, "start": 2081.0600000000004, "end": 2083.42, "text": " it is, squared.", "tokens": [50902, 309, 307, 11, 8889, 13, 51020], "temperature": 0.0, "avg_logprob": -0.3667926788330078, "compression_ratio": 1.4814814814814814, "no_speech_prob": 0.00030534627148881555}, {"id": 507, "seek": 207030, "start": 2083.42, "end": 2085.0, "text": " Fine.", "tokens": [51020, 12024, 13, 51099], "temperature": 0.0, "avg_logprob": -0.3667926788330078, "compression_ratio": 1.4814814814814814, "no_speech_prob": 0.00030534627148881555}, {"id": 508, "seek": 207030, "start": 2085.0, "end": 2089.54, "text": " But there we go.", "tokens": [51099, 583, 456, 321, 352, 13, 51326], "temperature": 0.0, "avg_logprob": -0.3667926788330078, "compression_ratio": 1.4814814814814814, "no_speech_prob": 0.00030534627148881555}, {"id": 509, "seek": 207030, "start": 2089.54, "end": 2093.6200000000003, "text": " Okay, and then what about this thing here?", "tokens": [51326, 1033, 11, 293, 550, 437, 466, 341, 551, 510, 30, 51530], "temperature": 0.0, "avg_logprob": -0.3667926788330078, "compression_ratio": 1.4814814814814814, "no_speech_prob": 0.00030534627148881555}, {"id": 510, "seek": 207030, "start": 2093.6200000000003, "end": 2094.6200000000003, "text": " Weird e thing.", "tokens": [51530, 32033, 308, 551, 13, 51580], "temperature": 0.0, "avg_logprob": -0.3667926788330078, "compression_ratio": 1.4814814814814814, "no_speech_prob": 0.00030534627148881555}, {"id": 511, "seek": 207030, "start": 2094.6200000000003, "end": 2098.0600000000004, "text": " So how would you find out what the weird e thing is?", "tokens": [51580, 407, 577, 576, 291, 915, 484, 437, 264, 3657, 308, 551, 307, 30, 51752], "temperature": 0.0, "avg_logprob": -0.3667926788330078, "compression_ratio": 1.4814814814814814, "no_speech_prob": 0.00030534627148881555}, {"id": 512, "seek": 209806, "start": 2098.82, "end": 2114.86, "text": " Okay, so our, um, our, um, LaTeX has finally finished downloading.", "tokens": [50402, 1033, 11, 370, 527, 11, 1105, 11, 527, 11, 1105, 11, 2369, 14233, 55, 575, 2721, 4335, 32529, 13, 51204], "temperature": 0.0, "avg_logprob": -0.3288811445236206, "compression_ratio": 1.3076923076923077, "no_speech_prob": 0.0002305045782122761}, {"id": 513, "seek": 209806, "start": 2114.86, "end": 2118.38, "text": " And if we open it up, we can find there's a .txt file in here.", "tokens": [51204, 400, 498, 321, 1269, 309, 493, 11, 321, 393, 915, 456, 311, 257, 2411, 83, 734, 3991, 294, 510, 13, 51380], "temperature": 0.0, "avg_logprob": -0.3288811445236206, "compression_ratio": 1.3076923076923077, "no_speech_prob": 0.0002305045782122761}, {"id": 514, "seek": 209806, "start": 2118.38, "end": 2121.02, "text": " Here we are, main.txt.", "tokens": [51380, 1692, 321, 366, 11, 2135, 13, 83, 734, 13, 51512], "temperature": 0.0, "avg_logprob": -0.3288811445236206, "compression_ratio": 1.3076923076923077, "no_speech_prob": 0.0002305045782122761}, {"id": 515, "seek": 209806, "start": 2121.02, "end": 2126.5, "text": " So we'll open it.", "tokens": [51512, 407, 321, 603, 1269, 309, 13, 51786], "temperature": 0.0, "avg_logprob": -0.3288811445236206, "compression_ratio": 1.3076923076923077, "no_speech_prob": 0.0002305045782122761}, {"id": 516, "seek": 212650, "start": 2126.94, "end": 2131.78, "text": " And it's not the most, you know, amazingly smooth process.", "tokens": [50386, 400, 309, 311, 406, 264, 881, 11, 291, 458, 11, 31762, 5508, 1399, 13, 50628], "temperature": 0.0, "avg_logprob": -0.3381720125005486, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.0024343675468117}, {"id": 517, "seek": 212650, "start": 2131.78, "end": 2135.08, "text": " But you know, what we could just do is we could say, okay, it's just after it says minimizing", "tokens": [50628, 583, 291, 458, 11, 437, 321, 727, 445, 360, 307, 321, 727, 584, 11, 1392, 11, 309, 311, 445, 934, 309, 1619, 46608, 50793], "temperature": 0.0, "avg_logprob": -0.3381720125005486, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.0024343675468117}, {"id": 518, "seek": 212650, "start": 2135.08, "end": 2137.02, "text": " the denoising objective.", "tokens": [50793, 264, 1441, 78, 3436, 10024, 13, 50890], "temperature": 0.0, "avg_logprob": -0.3381720125005486, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.0024343675468117}, {"id": 519, "seek": 212650, "start": 2137.02, "end": 2144.66, "text": " Okay, so let's search for minimizing the denoising objective.", "tokens": [50890, 1033, 11, 370, 718, 311, 3164, 337, 46608, 264, 1441, 78, 3436, 10024, 13, 51272], "temperature": 0.0, "avg_logprob": -0.3381720125005486, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.0024343675468117}, {"id": 520, "seek": 212650, "start": 2144.66, "end": 2149.74, "text": " So the LaTeX here, let's get it both on the screen at the same time.", "tokens": [51272, 407, 264, 2369, 14233, 55, 510, 11, 718, 311, 483, 309, 1293, 322, 264, 2568, 412, 264, 912, 565, 13, 51526], "temperature": 0.0, "avg_logprob": -0.3381720125005486, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.0024343675468117}, {"id": 521, "seek": 214974, "start": 2149.74, "end": 2152.8599999999997, "text": " Okay, so here it is.", "tokens": [50364, 1033, 11, 370, 510, 309, 307, 13, 50520], "temperature": 0.0, "avg_logprob": -0.4654305845826537, "compression_ratio": 1.5953757225433527, "no_speech_prob": 0.00036258832551538944}, {"id": 522, "seek": 214974, "start": 2152.8599999999997, "end": 2160.62, "text": " L, MathCal L equals MathBBE X0t epsilon.", "tokens": [50520, 441, 11, 15776, 31279, 441, 6915, 15776, 33, 10207, 1783, 15, 83, 17889, 13, 50908], "temperature": 0.0, "avg_logprob": -0.4654305845826537, "compression_ratio": 1.5953757225433527, "no_speech_prob": 0.00036258832551538944}, {"id": 523, "seek": 214974, "start": 2160.62, "end": 2167.1, "text": " Okay, and here's that vertical bar thing, epsilon minus epsilon theta Xt, and then the", "tokens": [50908, 1033, 11, 293, 510, 311, 300, 9429, 2159, 551, 11, 17889, 3175, 17889, 9725, 1783, 83, 11, 293, 550, 264, 51232], "temperature": 0.0, "avg_logprob": -0.4654305845826537, "compression_ratio": 1.5953757225433527, "no_speech_prob": 0.00036258832551538944}, {"id": 524, "seek": 214974, "start": 2167.1, "end": 2168.4599999999996, "text": " bar thing 2, 2.", "tokens": [51232, 2159, 551, 568, 11, 568, 13, 51300], "temperature": 0.0, "avg_logprob": -0.4654305845826537, "compression_ratio": 1.5953757225433527, "no_speech_prob": 0.00036258832551538944}, {"id": 525, "seek": 214974, "start": 2168.4599999999996, "end": 2171.66, "text": " All right, so the thing that we've got new is MathBBE.", "tokens": [51300, 1057, 558, 11, 370, 264, 551, 300, 321, 600, 658, 777, 307, 15776, 33, 10207, 13, 51460], "temperature": 0.0, "avg_logprob": -0.4654305845826537, "compression_ratio": 1.5953757225433527, "no_speech_prob": 0.00036258832551538944}, {"id": 526, "seek": 214974, "start": 2171.66, "end": 2177.5, "text": " Okay, so finally, we've got something we can search for.", "tokens": [51460, 1033, 11, 370, 2721, 11, 321, 600, 658, 746, 321, 393, 3164, 337, 13, 51752], "temperature": 0.0, "avg_logprob": -0.4654305845826537, "compression_ratio": 1.5953757225433527, "no_speech_prob": 0.00036258832551538944}, {"id": 527, "seek": 217750, "start": 2177.82, "end": 2180.82, "text": " MathBBE.", "tokens": [50380, 15776, 33, 10207, 13, 50530], "temperature": 0.0, "avg_logprob": -0.4133574498164189, "compression_ratio": 1.3793103448275863, "no_speech_prob": 9.761560068000108e-05}, {"id": 528, "seek": 217750, "start": 2180.82, "end": 2183.06, "text": " Ah, fantastic.", "tokens": [50530, 2438, 11, 5456, 13, 50642], "temperature": 0.0, "avg_logprob": -0.4133574498164189, "compression_ratio": 1.3793103448275863, "no_speech_prob": 9.761560068000108e-05}, {"id": 529, "seek": 217750, "start": 2183.06, "end": 2188.42, "text": " What does MathBBE mean?", "tokens": [50642, 708, 775, 15776, 33, 10207, 914, 30, 50910], "temperature": 0.0, "avg_logprob": -0.4133574498164189, "compression_ratio": 1.3793103448275863, "no_speech_prob": 9.761560068000108e-05}, {"id": 530, "seek": 217750, "start": 2188.42, "end": 2190.94, "text": " That's the expected value operator.", "tokens": [50910, 663, 311, 264, 5176, 2158, 12973, 13, 51036], "temperature": 0.0, "avg_logprob": -0.4133574498164189, "compression_ratio": 1.3793103448275863, "no_speech_prob": 9.761560068000108e-05}, {"id": 531, "seek": 217750, "start": 2190.94, "end": 2193.1, "text": " Aha, fantastic.", "tokens": [51036, 27448, 11, 5456, 13, 51144], "temperature": 0.0, "avg_logprob": -0.4133574498164189, "compression_ratio": 1.3793103448275863, "no_speech_prob": 9.761560068000108e-05}, {"id": 532, "seek": 217750, "start": 2193.1, "end": 2194.1, "text": " All right.", "tokens": [51144, 1057, 558, 13, 51194], "temperature": 0.0, "avg_logprob": -0.4133574498164189, "compression_ratio": 1.3793103448275863, "no_speech_prob": 9.761560068000108e-05}, {"id": 533, "seek": 217750, "start": 2194.1, "end": 2197.02, "text": " So it takes a bit of fussing around.", "tokens": [51194, 407, 309, 2516, 257, 857, 295, 34792, 278, 926, 13, 51340], "temperature": 0.0, "avg_logprob": -0.4133574498164189, "compression_ratio": 1.3793103448275863, "no_speech_prob": 9.761560068000108e-05}, {"id": 534, "seek": 217750, "start": 2197.02, "end": 2201.62, "text": " But once you've got either MathPix working, or actually another thing you could try, because", "tokens": [51340, 583, 1564, 291, 600, 658, 2139, 15776, 47, 970, 1364, 11, 420, 767, 1071, 551, 291, 727, 853, 11, 570, 51570], "temperature": 0.0, "avg_logprob": -0.4133574498164189, "compression_ratio": 1.3793103448275863, "no_speech_prob": 9.761560068000108e-05}, {"id": 535, "seek": 220162, "start": 2201.62, "end": 2214.8599999999997, "text": " MathPix is ridiculously expensive, in my opinion, is there is a free version called", "tokens": [50364, 15776, 47, 970, 307, 41358, 5124, 11, 294, 452, 4800, 11, 307, 456, 307, 257, 1737, 3037, 1219, 51026], "temperature": 0.0, "avg_logprob": -0.2652952708895244, "compression_ratio": 1.4166666666666667, "no_speech_prob": 0.0015731098828837276}, {"id": 536, "seek": 220162, "start": 2214.8599999999997, "end": 2219.8599999999997, "text": " Pix2Tech that actually is a Python thing.", "tokens": [51026, 18652, 17, 36050, 300, 767, 307, 257, 15329, 551, 13, 51276], "temperature": 0.0, "avg_logprob": -0.2652952708895244, "compression_ratio": 1.4166666666666667, "no_speech_prob": 0.0015731098828837276}, {"id": 537, "seek": 220162, "start": 2219.8599999999997, "end": 2223.9, "text": " And you could actually even have fun playing with this, because the whole thing is just", "tokens": [51276, 400, 291, 727, 767, 754, 362, 1019, 2433, 365, 341, 11, 570, 264, 1379, 551, 307, 445, 51478], "temperature": 0.0, "avg_logprob": -0.2652952708895244, "compression_ratio": 1.4166666666666667, "no_speech_prob": 0.0015731098828837276}, {"id": 538, "seek": 220162, "start": 2223.9, "end": 2227.62, "text": " a PyTorch Python script.", "tokens": [51478, 257, 9953, 51, 284, 339, 15329, 5755, 13, 51664], "temperature": 0.0, "avg_logprob": -0.2652952708895244, "compression_ratio": 1.4166666666666667, "no_speech_prob": 0.0015731098828837276}, {"id": 539, "seek": 222762, "start": 2227.62, "end": 2233.02, "text": " And it even describes, you know, how if you used a Transformers model, and you can train", "tokens": [50364, 400, 309, 754, 15626, 11, 291, 458, 11, 577, 498, 291, 1143, 257, 27938, 433, 2316, 11, 293, 291, 393, 3847, 50634], "temperature": 0.0, "avg_logprob": -0.2516681904695472, "compression_ratio": 1.4864864864864864, "no_speech_prob": 0.009125372394919395}, {"id": 540, "seek": 222762, "start": 2233.02, "end": 2235.46, "text": " it yourself in Colab, and so forth.", "tokens": [50634, 309, 1803, 294, 4004, 455, 11, 293, 370, 5220, 13, 50756], "temperature": 0.0, "avg_logprob": -0.2516681904695472, "compression_ratio": 1.4864864864864864, "no_speech_prob": 0.009125372394919395}, {"id": 541, "seek": 222762, "start": 2235.46, "end": 2242.8599999999997, "text": " But basically, as you can see, yeah, you can snip and convert to LaTeX, which is pretty", "tokens": [50756, 583, 1936, 11, 382, 291, 393, 536, 11, 1338, 11, 291, 393, 37482, 293, 7620, 281, 2369, 14233, 55, 11, 597, 307, 1238, 51126], "temperature": 0.0, "avg_logprob": -0.2516681904695472, "compression_ratio": 1.4864864864864864, "no_speech_prob": 0.009125372394919395}, {"id": 542, "seek": 222762, "start": 2242.8599999999997, "end": 2243.8599999999997, "text": " awesome.", "tokens": [51126, 3476, 13, 51176], "temperature": 0.0, "avg_logprob": -0.2516681904695472, "compression_ratio": 1.4864864864864864, "no_speech_prob": 0.009125372394919395}, {"id": 543, "seek": 222762, "start": 2243.8599999999997, "end": 2249.2599999999998, "text": " So you could use this instead of paying the MathPix guys.", "tokens": [51176, 407, 291, 727, 764, 341, 2602, 295, 6229, 264, 15776, 47, 970, 1074, 13, 51446], "temperature": 0.0, "avg_logprob": -0.2516681904695472, "compression_ratio": 1.4864864864864864, "no_speech_prob": 0.009125372394919395}, {"id": 544, "seek": 222762, "start": 2249.2599999999998, "end": 2255.72, "text": " Anyway, so we are on the right track now, I think.", "tokens": [51446, 5684, 11, 370, 321, 366, 322, 264, 558, 2837, 586, 11, 286, 519, 13, 51769], "temperature": 0.0, "avg_logprob": -0.2516681904695472, "compression_ratio": 1.4864864864864864, "no_speech_prob": 0.009125372394919395}, {"id": 545, "seek": 225572, "start": 2255.72, "end": 2262.56, "text": " So expected value, and then we can start reading about what expected value is.", "tokens": [50364, 407, 5176, 2158, 11, 293, 550, 321, 393, 722, 3760, 466, 437, 5176, 2158, 307, 13, 50706], "temperature": 0.0, "avg_logprob": -0.29147727148873465, "compression_ratio": 1.5812807881773399, "no_speech_prob": 0.0005614744150079787}, {"id": 546, "seek": 225572, "start": 2262.56, "end": 2265.8799999999997, "text": " And you might actually remember that, because we did a bit of it in high school, at least", "tokens": [50706, 400, 291, 1062, 767, 1604, 300, 11, 570, 321, 630, 257, 857, 295, 309, 294, 1090, 1395, 11, 412, 1935, 50872], "temperature": 0.0, "avg_logprob": -0.29147727148873465, "compression_ratio": 1.5812807881773399, "no_speech_prob": 0.0005614744150079787}, {"id": 547, "seek": 225572, "start": 2265.8799999999997, "end": 2268.08, "text": " in Australia we did.", "tokens": [50872, 294, 7060, 321, 630, 13, 50982], "temperature": 0.0, "avg_logprob": -0.29147727148873465, "compression_ratio": 1.5812807881773399, "no_speech_prob": 0.0005614744150079787}, {"id": 548, "seek": 225572, "start": 2268.08, "end": 2270.48, "text": " It's basically like...", "tokens": [50982, 467, 311, 1936, 411, 485, 51102], "temperature": 0.0, "avg_logprob": -0.29147727148873465, "compression_ratio": 1.5812807881773399, "no_speech_prob": 0.0005614744150079787}, {"id": 549, "seek": 225572, "start": 2270.48, "end": 2277.68, "text": " Let's maybe jump over here.", "tokens": [51102, 961, 311, 1310, 3012, 670, 510, 13, 51462], "temperature": 0.0, "avg_logprob": -0.29147727148873465, "compression_ratio": 1.5812807881773399, "no_speech_prob": 0.0005614744150079787}, {"id": 550, "seek": 225572, "start": 2277.68, "end": 2285.3599999999997, "text": " So expected value of something is saying, what's the likely value of that thing?", "tokens": [51462, 407, 5176, 2158, 295, 746, 307, 1566, 11, 437, 311, 264, 3700, 2158, 295, 300, 551, 30, 51846], "temperature": 0.0, "avg_logprob": -0.29147727148873465, "compression_ratio": 1.5812807881773399, "no_speech_prob": 0.0005614744150079787}, {"id": 551, "seek": 228536, "start": 2286.0, "end": 2290.2000000000003, "text": " So for example, let's say you toss a coin, which could be heads or it could be tails.", "tokens": [50396, 407, 337, 1365, 11, 718, 311, 584, 291, 14432, 257, 11464, 11, 597, 727, 312, 8050, 420, 309, 727, 312, 28537, 13, 50606], "temperature": 0.0, "avg_logprob": -0.22816416222279465, "compression_ratio": 1.8037383177570094, "no_speech_prob": 0.0001881410862552002}, {"id": 552, "seek": 228536, "start": 2290.2000000000003, "end": 2293.6800000000003, "text": " And you want to know how often it's heads.", "tokens": [50606, 400, 291, 528, 281, 458, 577, 2049, 309, 311, 8050, 13, 50780], "temperature": 0.0, "avg_logprob": -0.22816416222279465, "compression_ratio": 1.8037383177570094, "no_speech_prob": 0.0001881410862552002}, {"id": 553, "seek": 228536, "start": 2293.6800000000003, "end": 2296.46, "text": " And so maybe we'll call heads 1, tails 0.", "tokens": [50780, 400, 370, 1310, 321, 603, 818, 8050, 502, 11, 28537, 1958, 13, 50919], "temperature": 0.0, "avg_logprob": -0.22816416222279465, "compression_ratio": 1.8037383177570094, "no_speech_prob": 0.0001881410862552002}, {"id": 554, "seek": 228536, "start": 2296.46, "end": 2302.96, "text": " So you toss it, and you get a 1, 0, 0, 1, 1, 0, 1, 0, 1, okay, and so forth.", "tokens": [50919, 407, 291, 14432, 309, 11, 293, 291, 483, 257, 502, 11, 1958, 11, 1958, 11, 502, 11, 502, 11, 1958, 11, 502, 11, 1958, 11, 502, 11, 1392, 11, 293, 370, 5220, 13, 51244], "temperature": 0.0, "avg_logprob": -0.22816416222279465, "compression_ratio": 1.8037383177570094, "no_speech_prob": 0.0001881410862552002}, {"id": 555, "seek": 228536, "start": 2302.96, "end": 2306.88, "text": " And then you can calculate the mean of that.", "tokens": [51244, 400, 550, 291, 393, 8873, 264, 914, 295, 300, 13, 51440], "temperature": 0.0, "avg_logprob": -0.22816416222279465, "compression_ratio": 1.8037383177570094, "no_speech_prob": 0.0001881410862552002}, {"id": 556, "seek": 228536, "start": 2306.88, "end": 2315.1600000000003, "text": " So if that's x, you can calculate x-bar, the mean, which would be the sum of all that divided", "tokens": [51440, 407, 498, 300, 311, 2031, 11, 291, 393, 8873, 2031, 12, 5356, 11, 264, 914, 11, 597, 576, 312, 264, 2408, 295, 439, 300, 6666, 51854], "temperature": 0.0, "avg_logprob": -0.22816416222279465, "compression_ratio": 1.8037383177570094, "no_speech_prob": 0.0001881410862552002}, {"id": 557, "seek": 231516, "start": 2315.16, "end": 2319.04, "text": " by the count of all that.", "tokens": [50364, 538, 264, 1207, 295, 439, 300, 13, 50558], "temperature": 0.0, "avg_logprob": -0.25273598943437847, "compression_ratio": 1.5258215962441315, "no_speech_prob": 0.0001941127993632108}, {"id": 558, "seek": 231516, "start": 2319.04, "end": 2327.8399999999997, "text": " So it'd be 1, 2, 3, 4, 5, 5 divided by 1, 2, 3, 4, 5, 6, 7, 8, 9.", "tokens": [50558, 407, 309, 1116, 312, 502, 11, 568, 11, 805, 11, 1017, 11, 1025, 11, 1025, 6666, 538, 502, 11, 568, 11, 805, 11, 1017, 11, 1025, 11, 1386, 11, 1614, 11, 1649, 11, 1722, 13, 50998], "temperature": 0.0, "avg_logprob": -0.25273598943437847, "compression_ratio": 1.5258215962441315, "no_speech_prob": 0.0001941127993632108}, {"id": 559, "seek": 231516, "start": 2327.8399999999997, "end": 2330.24, "text": " So that would be the mean.", "tokens": [50998, 407, 300, 576, 312, 264, 914, 13, 51118], "temperature": 0.0, "avg_logprob": -0.25273598943437847, "compression_ratio": 1.5258215962441315, "no_speech_prob": 0.0001941127993632108}, {"id": 560, "seek": 231516, "start": 2330.24, "end": 2333.8399999999997, "text": " But the expected value is like, well, what do you expect to happen?", "tokens": [51118, 583, 264, 5176, 2158, 307, 411, 11, 731, 11, 437, 360, 291, 2066, 281, 1051, 30, 51298], "temperature": 0.0, "avg_logprob": -0.25273598943437847, "compression_ratio": 1.5258215962441315, "no_speech_prob": 0.0001941127993632108}, {"id": 561, "seek": 231516, "start": 2333.8399999999997, "end": 2340.7999999999997, "text": " And we can calculate that by adding up for all of the possibilities for each, I don't", "tokens": [51298, 400, 321, 393, 8873, 300, 538, 5127, 493, 337, 439, 295, 264, 12178, 337, 1184, 11, 286, 500, 380, 51646], "temperature": 0.0, "avg_logprob": -0.25273598943437847, "compression_ratio": 1.5258215962441315, "no_speech_prob": 0.0001941127993632108}, {"id": 562, "seek": 231516, "start": 2340.7999999999997, "end": 2343.16, "text": " know, I'll just call them x, for each possibility x.", "tokens": [51646, 458, 11, 286, 603, 445, 818, 552, 2031, 11, 337, 1184, 7959, 2031, 13, 51764], "temperature": 0.0, "avg_logprob": -0.25273598943437847, "compression_ratio": 1.5258215962441315, "no_speech_prob": 0.0001941127993632108}, {"id": 563, "seek": 234316, "start": 2343.2799999999997, "end": 2345.7599999999998, "text": " How likely is x?", "tokens": [50370, 1012, 3700, 307, 2031, 30, 50494], "temperature": 0.0, "avg_logprob": -0.23717908357319079, "compression_ratio": 1.6203208556149733, "no_speech_prob": 0.0008295848965644836}, {"id": 564, "seek": 234316, "start": 2345.7599999999998, "end": 2348.46, "text": " And what score do you get if you get x?", "tokens": [50494, 400, 437, 6175, 360, 291, 483, 498, 291, 483, 2031, 30, 50629], "temperature": 0.0, "avg_logprob": -0.23717908357319079, "compression_ratio": 1.6203208556149733, "no_speech_prob": 0.0008295848965644836}, {"id": 565, "seek": 234316, "start": 2348.46, "end": 2353.0, "text": " So in this example of heads and tails, our two possibilities is that we either get heads", "tokens": [50629, 407, 294, 341, 1365, 295, 8050, 293, 28537, 11, 527, 732, 12178, 307, 300, 321, 2139, 483, 8050, 50856], "temperature": 0.0, "avg_logprob": -0.23717908357319079, "compression_ratio": 1.6203208556149733, "no_speech_prob": 0.0008295848965644836}, {"id": 566, "seek": 234316, "start": 2353.0, "end": 2354.7599999999998, "text": " or we get tails.", "tokens": [50856, 420, 321, 483, 28537, 13, 50944], "temperature": 0.0, "avg_logprob": -0.23717908357319079, "compression_ratio": 1.6203208556149733, "no_speech_prob": 0.0008295848965644836}, {"id": 567, "seek": 234316, "start": 2354.7599999999998, "end": 2361.66, "text": " So if for the version where x is heads, we get probability is 0.5.", "tokens": [50944, 407, 498, 337, 264, 3037, 689, 2031, 307, 8050, 11, 321, 483, 8482, 307, 1958, 13, 20, 13, 51289], "temperature": 0.0, "avg_logprob": -0.23717908357319079, "compression_ratio": 1.6203208556149733, "no_speech_prob": 0.0008295848965644836}, {"id": 568, "seek": 234316, "start": 2361.66, "end": 2371.16, "text": " And the score, if it's an x, is going to be 1.", "tokens": [51289, 400, 264, 6175, 11, 498, 309, 311, 364, 2031, 11, 307, 516, 281, 312, 502, 13, 51764], "temperature": 0.0, "avg_logprob": -0.23717908357319079, "compression_ratio": 1.6203208556149733, "no_speech_prob": 0.0008295848965644836}, {"id": 569, "seek": 234316, "start": 2371.16, "end": 2372.72, "text": " And then what about tails?", "tokens": [51764, 400, 550, 437, 466, 28537, 30, 51842], "temperature": 0.0, "avg_logprob": -0.23717908357319079, "compression_ratio": 1.6203208556149733, "no_speech_prob": 0.0008295848965644836}, {"id": 570, "seek": 237272, "start": 2372.72, "end": 2376.2, "text": " For tails, the probability is 0.5.", "tokens": [50364, 1171, 28537, 11, 264, 8482, 307, 1958, 13, 20, 13, 50538], "temperature": 0.0, "avg_logprob": -0.18613573584226098, "compression_ratio": 1.6432432432432433, "no_speech_prob": 1.0289512829331215e-05}, {"id": 571, "seek": 237272, "start": 2376.2, "end": 2379.3199999999997, "text": " And the score, if you get tails, is 0.", "tokens": [50538, 400, 264, 6175, 11, 498, 291, 483, 28537, 11, 307, 1958, 13, 50694], "temperature": 0.0, "avg_logprob": -0.18613573584226098, "compression_ratio": 1.6432432432432433, "no_speech_prob": 1.0289512829331215e-05}, {"id": 572, "seek": 237272, "start": 2379.3199999999997, "end": 2384.3199999999997, "text": " And so overall, the expected is 0.5 times 1 plus 0 is 0.5.", "tokens": [50694, 400, 370, 4787, 11, 264, 5176, 307, 1958, 13, 20, 1413, 502, 1804, 1958, 307, 1958, 13, 20, 13, 50944], "temperature": 0.0, "avg_logprob": -0.18613573584226098, "compression_ratio": 1.6432432432432433, "no_speech_prob": 1.0289512829331215e-05}, {"id": 573, "seek": 237272, "start": 2384.3199999999997, "end": 2393.0, "text": " So our expected score, if we're tossing a coin, is 0.5, if getting heads is a win.", "tokens": [50944, 407, 527, 5176, 6175, 11, 498, 321, 434, 14432, 278, 257, 11464, 11, 307, 1958, 13, 20, 11, 498, 1242, 8050, 307, 257, 1942, 13, 51378], "temperature": 0.0, "avg_logprob": -0.18613573584226098, "compression_ratio": 1.6432432432432433, "no_speech_prob": 1.0289512829331215e-05}, {"id": 574, "seek": 237272, "start": 2393.0, "end": 2395.24, "text": " Let me give you another example.", "tokens": [51378, 961, 385, 976, 291, 1071, 1365, 13, 51490], "temperature": 0.0, "avg_logprob": -0.18613573584226098, "compression_ratio": 1.6432432432432433, "no_speech_prob": 1.0289512829331215e-05}, {"id": 575, "seek": 237272, "start": 2395.24, "end": 2399.8799999999997, "text": " Another example is, let's say that we're rolling a die.", "tokens": [51490, 3996, 1365, 307, 11, 718, 311, 584, 300, 321, 434, 9439, 257, 978, 13, 51722], "temperature": 0.0, "avg_logprob": -0.18613573584226098, "compression_ratio": 1.6432432432432433, "no_speech_prob": 1.0289512829331215e-05}, {"id": 576, "seek": 239988, "start": 2400.04, "end": 2403.76, "text": " And we want to know what the expected score is if we roll a die.", "tokens": [50372, 400, 321, 528, 281, 458, 437, 264, 5176, 6175, 307, 498, 321, 3373, 257, 978, 13, 50558], "temperature": 0.0, "avg_logprob": -0.28007289662080653, "compression_ratio": 1.5572139303482586, "no_speech_prob": 0.0032224010210484266}, {"id": 577, "seek": 239988, "start": 2403.76, "end": 2413.52, "text": " So again, we could roll it a bunch of times and see what happens.", "tokens": [50558, 407, 797, 11, 321, 727, 3373, 309, 257, 3840, 295, 1413, 293, 536, 437, 2314, 13, 51046], "temperature": 0.0, "avg_logprob": -0.28007289662080653, "compression_ratio": 1.5572139303482586, "no_speech_prob": 0.0032224010210484266}, {"id": 578, "seek": 239988, "start": 2413.52, "end": 2419.76, "text": " And so we could sum all that up, just like before, and divide it by the count.", "tokens": [51046, 400, 370, 321, 727, 2408, 439, 300, 493, 11, 445, 411, 949, 11, 293, 9845, 309, 538, 264, 1207, 13, 51358], "temperature": 0.0, "avg_logprob": -0.28007289662080653, "compression_ratio": 1.5572139303482586, "no_speech_prob": 0.0032224010210484266}, {"id": 579, "seek": 239988, "start": 2419.76, "end": 2422.48, "text": " And that'll tell us the mean for this particular example.", "tokens": [51358, 400, 300, 603, 980, 505, 264, 914, 337, 341, 1729, 1365, 13, 51494], "temperature": 0.0, "avg_logprob": -0.28007289662080653, "compression_ratio": 1.5572139303482586, "no_speech_prob": 0.0032224010210484266}, {"id": 580, "seek": 239988, "start": 2422.48, "end": 2424.88, "text": " But what's the expected value more generally?", "tokens": [51494, 583, 437, 311, 264, 5176, 2158, 544, 5101, 30, 51614], "temperature": 0.0, "avg_logprob": -0.28007289662080653, "compression_ratio": 1.5572139303482586, "no_speech_prob": 0.0032224010210484266}, {"id": 581, "seek": 242488, "start": 2424.96, "end": 2430.2000000000003, "text": " Well, again, it's the sum of all the possibilities of the probability of each", "tokens": [50368, 1042, 11, 797, 11, 309, 311, 264, 2408, 295, 439, 264, 12178, 295, 264, 8482, 295, 1184, 50630], "temperature": 0.0, "avg_logprob": -0.295720206366645, "compression_ratio": 1.718562874251497, "no_speech_prob": 0.0008558903355151415}, {"id": 582, "seek": 242488, "start": 2430.2000000000003, "end": 2433.56, "text": " possibility times that score.", "tokens": [50630, 7959, 1413, 300, 6175, 13, 50798], "temperature": 0.0, "avg_logprob": -0.295720206366645, "compression_ratio": 1.718562874251497, "no_speech_prob": 0.0008558903355151415}, {"id": 583, "seek": 242488, "start": 2433.56, "end": 2440.08, "text": " So the possibilities for rolling a die is that you can get a 1, a 2, a 3, a 4, a 5,", "tokens": [50798, 407, 264, 12178, 337, 9439, 257, 978, 307, 300, 291, 393, 483, 257, 502, 11, 257, 568, 11, 257, 805, 11, 257, 1017, 11, 257, 1025, 11, 51124], "temperature": 0.0, "avg_logprob": -0.295720206366645, "compression_ratio": 1.718562874251497, "no_speech_prob": 0.0008558903355151415}, {"id": 584, "seek": 242488, "start": 2440.08, "end": 2441.1600000000003, "text": " or a 6.", "tokens": [51124, 420, 257, 1386, 13, 51178], "temperature": 0.0, "avg_logprob": -0.295720206366645, "compression_ratio": 1.718562874251497, "no_speech_prob": 0.0008558903355151415}, {"id": 585, "seek": 242488, "start": 2441.1600000000003, "end": 2445.52, "text": " The probability of each one is a sixth.", "tokens": [51178, 440, 8482, 295, 1184, 472, 307, 257, 15102, 13, 51396], "temperature": 0.0, "avg_logprob": -0.295720206366645, "compression_ratio": 1.718562874251497, "no_speech_prob": 0.0008558903355151415}, {"id": 586, "seek": 242488, "start": 2450.7200000000003, "end": 2454.44, "text": " And the score that you get is, well, it's this.", "tokens": [51656, 400, 264, 6175, 300, 291, 483, 307, 11, 731, 11, 309, 311, 341, 13, 51842], "temperature": 0.0, "avg_logprob": -0.295720206366645, "compression_ratio": 1.718562874251497, "no_speech_prob": 0.0008558903355151415}, {"id": 587, "seek": 245444, "start": 2454.52, "end": 2456.44, "text": " This is the score.", "tokens": [50368, 639, 307, 264, 6175, 13, 50464], "temperature": 0.0, "avg_logprob": -0.2854276863304344, "compression_ratio": 1.6363636363636365, "no_speech_prob": 5.093702384328935e-06}, {"id": 588, "seek": 245444, "start": 2456.44, "end": 2462.7200000000003, "text": " And so then you can multiply all these together and sum them up, which would be 1 sixth plus", "tokens": [50464, 400, 370, 550, 291, 393, 12972, 439, 613, 1214, 293, 2408, 552, 493, 11, 597, 576, 312, 502, 15102, 1804, 50778], "temperature": 0.0, "avg_logprob": -0.2854276863304344, "compression_ratio": 1.6363636363636365, "no_speech_prob": 5.093702384328935e-06}, {"id": 589, "seek": 245444, "start": 2462.7200000000003, "end": 2475.96, "text": " 2 sixths plus 3 sixths plus 4 sixths, oops, plus 5 sixths plus 6 sixths.", "tokens": [50778, 568, 15102, 82, 1804, 805, 15102, 82, 1804, 1017, 15102, 82, 11, 34166, 11, 1804, 1025, 15102, 82, 1804, 1386, 15102, 82, 13, 51440], "temperature": 0.0, "avg_logprob": -0.2854276863304344, "compression_ratio": 1.6363636363636365, "no_speech_prob": 5.093702384328935e-06}, {"id": 590, "seek": 245444, "start": 2475.96, "end": 2483.36, "text": " And that would give you the expected value of that particular thing, which is rolling", "tokens": [51440, 400, 300, 576, 976, 291, 264, 5176, 2158, 295, 300, 1729, 551, 11, 597, 307, 9439, 51810], "temperature": 0.0, "avg_logprob": -0.2854276863304344, "compression_ratio": 1.6363636363636365, "no_speech_prob": 5.093702384328935e-06}, {"id": 591, "seek": 248336, "start": 2483.4, "end": 2487.6800000000003, "text": " a die.", "tokens": [50366, 257, 978, 13, 50580], "temperature": 0.0, "avg_logprob": -0.2890348243713379, "compression_ratio": 1.6869158878504673, "no_speech_prob": 0.00031998910708352923}, {"id": 592, "seek": 248336, "start": 2487.6800000000003, "end": 2490.1200000000003, "text": " So that's what expected value means.", "tokens": [50580, 407, 300, 311, 437, 5176, 2158, 1355, 13, 50702], "temperature": 0.0, "avg_logprob": -0.2890348243713379, "compression_ratio": 1.6869158878504673, "no_speech_prob": 0.00031998910708352923}, {"id": 593, "seek": 248336, "start": 2490.1200000000003, "end": 2501.2400000000002, "text": " All right, so that's a really important concept that's going to come up a lot as we read papers.", "tokens": [50702, 1057, 558, 11, 370, 300, 311, 257, 534, 1021, 3410, 300, 311, 516, 281, 808, 493, 257, 688, 382, 321, 1401, 10577, 13, 51258], "temperature": 0.0, "avg_logprob": -0.2890348243713379, "compression_ratio": 1.6869158878504673, "no_speech_prob": 0.00031998910708352923}, {"id": 594, "seek": 248336, "start": 2501.2400000000002, "end": 2506.52, "text": " And so in particular, this is telling us what are all the things that we're averaging it", "tokens": [51258, 400, 370, 294, 1729, 11, 341, 307, 3585, 505, 437, 366, 439, 264, 721, 300, 321, 434, 47308, 309, 51522], "temperature": 0.0, "avg_logprob": -0.2890348243713379, "compression_ratio": 1.6869158878504673, "no_speech_prob": 0.00031998910708352923}, {"id": 595, "seek": 248336, "start": 2506.52, "end": 2508.6400000000003, "text": " over, that we're the expectations over.", "tokens": [51522, 670, 11, 300, 321, 434, 264, 9843, 670, 13, 51628], "temperature": 0.0, "avg_logprob": -0.2890348243713379, "compression_ratio": 1.6869158878504673, "no_speech_prob": 0.00031998910708352923}, {"id": 596, "seek": 248336, "start": 2508.6400000000003, "end": 2510.6800000000003, "text": " And so there's a whole lot of letters here.", "tokens": [51628, 400, 370, 456, 311, 257, 1379, 688, 295, 7825, 510, 13, 51730], "temperature": 0.0, "avg_logprob": -0.2890348243713379, "compression_ratio": 1.6869158878504673, "no_speech_prob": 0.00031998910708352923}, {"id": 597, "seek": 248336, "start": 2510.6800000000003, "end": 2512.44, "text": " You're not expected to just know what they are.", "tokens": [51730, 509, 434, 406, 5176, 281, 445, 458, 437, 436, 366, 13, 51818], "temperature": 0.0, "avg_logprob": -0.2890348243713379, "compression_ratio": 1.6869158878504673, "no_speech_prob": 0.00031998910708352923}, {"id": 598, "seek": 251244, "start": 2512.52, "end": 2515.12, "text": " In fact, in every paper, they could mean totally different things.", "tokens": [50368, 682, 1186, 11, 294, 633, 3035, 11, 436, 727, 914, 3879, 819, 721, 13, 50498], "temperature": 0.0, "avg_logprob": -0.2681353251139323, "compression_ratio": 1.6244725738396624, "no_speech_prob": 2.1112382455612533e-05}, {"id": 599, "seek": 251244, "start": 2515.12, "end": 2518.6, "text": " So you have to look immediately underneath where they'll be defined.", "tokens": [50498, 407, 291, 362, 281, 574, 4258, 7223, 689, 436, 603, 312, 7642, 13, 50672], "temperature": 0.0, "avg_logprob": -0.2681353251139323, "compression_ratio": 1.6244725738396624, "no_speech_prob": 2.1112382455612533e-05}, {"id": 600, "seek": 251244, "start": 2518.6, "end": 2520.94, "text": " So X0 is an image.", "tokens": [50672, 407, 1783, 15, 307, 364, 3256, 13, 50789], "temperature": 0.0, "avg_logprob": -0.2681353251139323, "compression_ratio": 1.6244725738396624, "no_speech_prob": 2.1112382455612533e-05}, {"id": 601, "seek": 251244, "start": 2520.94, "end": 2524.36, "text": " It's an input image.", "tokens": [50789, 467, 311, 364, 4846, 3256, 13, 50960], "temperature": 0.0, "avg_logprob": -0.2681353251139323, "compression_ratio": 1.6244725738396624, "no_speech_prob": 2.1112382455612533e-05}, {"id": 602, "seek": 251244, "start": 2524.36, "end": 2526.48, "text": " Epsilon is the noise.", "tokens": [50960, 462, 16592, 307, 264, 5658, 13, 51066], "temperature": 0.0, "avg_logprob": -0.2681353251139323, "compression_ratio": 1.6244725738396624, "no_speech_prob": 2.1112382455612533e-05}, {"id": 603, "seek": 251244, "start": 2526.48, "end": 2532.04, "text": " And the noise has a mean of 0 and a standard deviation of i, which if you watch the lesson", "tokens": [51066, 400, 264, 5658, 575, 257, 914, 295, 1958, 293, 257, 3832, 25163, 295, 741, 11, 597, 498, 291, 1159, 264, 6898, 51344], "temperature": 0.0, "avg_logprob": -0.2681353251139323, "compression_ratio": 1.6244725738396624, "no_speech_prob": 2.1112382455612533e-05}, {"id": 604, "seek": 251244, "start": 2532.04, "end": 2541.84, "text": " 9b, you'll know it's like a standard deviation of 1 when you're doing multiple normal variables.", "tokens": [51344, 1722, 65, 11, 291, 603, 458, 309, 311, 411, 257, 3832, 25163, 295, 502, 562, 291, 434, 884, 3866, 2710, 9102, 13, 51834], "temperature": 0.0, "avg_logprob": -0.2681353251139323, "compression_ratio": 1.6244725738396624, "no_speech_prob": 2.1112382455612533e-05}, {"id": 605, "seek": 254184, "start": 2542.2400000000002, "end": 2544.7200000000003, "text": " And then this is kind of confusing.", "tokens": [50384, 400, 550, 341, 307, 733, 295, 13181, 13, 50508], "temperature": 0.0, "avg_logprob": -0.28963619900732923, "compression_ratio": 1.5865384615384615, "no_speech_prob": 2.97730748570757e-05}, {"id": 606, "seek": 254184, "start": 2544.7200000000003, "end": 2549.1200000000003, "text": " Eta, just on its own, is a normally distributed random variable.", "tokens": [50508, 462, 1328, 11, 445, 322, 1080, 1065, 11, 307, 257, 5646, 12631, 4974, 7006, 13, 50728], "temperature": 0.0, "avg_logprob": -0.28963619900732923, "compression_ratio": 1.5865384615384615, "no_speech_prob": 2.97730748570757e-05}, {"id": 607, "seek": 254184, "start": 2549.1200000000003, "end": 2551.92, "text": " So it's just grabbing random numbers.", "tokens": [50728, 407, 309, 311, 445, 23771, 4974, 3547, 13, 50868], "temperature": 0.0, "avg_logprob": -0.28963619900732923, "compression_ratio": 1.5865384615384615, "no_speech_prob": 2.97730748570757e-05}, {"id": 608, "seek": 254184, "start": 2551.92, "end": 2558.44, "text": " But Epsilon Theta is a noise estimator.", "tokens": [50868, 583, 462, 16592, 334, 7664, 307, 257, 5658, 8017, 1639, 13, 51194], "temperature": 0.0, "avg_logprob": -0.28963619900732923, "compression_ratio": 1.5865384615384615, "no_speech_prob": 2.97730748570757e-05}, {"id": 609, "seek": 254184, "start": 2558.44, "end": 2559.6800000000003, "text": " That means it's a function.", "tokens": [51194, 663, 1355, 309, 311, 257, 2445, 13, 51256], "temperature": 0.0, "avg_logprob": -0.28963619900732923, "compression_ratio": 1.5865384615384615, "no_speech_prob": 2.97730748570757e-05}, {"id": 610, "seek": 254184, "start": 2559.6800000000003, "end": 2564.4, "text": " You can tell it's a function, kind of, because it's got these parentheses and stuff right", "tokens": [51256, 509, 393, 980, 309, 311, 257, 2445, 11, 733, 295, 11, 570, 309, 311, 658, 613, 34153, 293, 1507, 558, 51492], "temperature": 0.0, "avg_logprob": -0.28963619900732923, "compression_ratio": 1.5865384615384615, "no_speech_prob": 2.97730748570757e-05}, {"id": 611, "seek": 254184, "start": 2564.4, "end": 2565.4, "text": " next to it.", "tokens": [51492, 958, 281, 309, 13, 51542], "temperature": 0.0, "avg_logprob": -0.28963619900732923, "compression_ratio": 1.5865384615384615, "no_speech_prob": 2.97730748570757e-05}, {"id": 612, "seek": 254184, "start": 2565.4, "end": 2567.6800000000003, "text": " So that's a function.", "tokens": [51542, 407, 300, 311, 257, 2445, 13, 51656], "temperature": 0.0, "avg_logprob": -0.28963619900732923, "compression_ratio": 1.5865384615384615, "no_speech_prob": 2.97730748570757e-05}, {"id": 613, "seek": 256768, "start": 2567.68, "end": 2572.2799999999997, "text": " So presumably most functions like this in these papers are neural networks.", "tokens": [50364, 407, 26742, 881, 6828, 411, 341, 294, 613, 10577, 366, 18161, 9590, 13, 50594], "temperature": 0.0, "avg_logprob": -0.2419552273220486, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.0006263304967433214}, {"id": 614, "seek": 256768, "start": 2572.2799999999997, "end": 2576.2799999999997, "text": " Okay, so we're finally at a point where this actually is going to make perfect sense.", "tokens": [50594, 1033, 11, 370, 321, 434, 2721, 412, 257, 935, 689, 341, 767, 307, 516, 281, 652, 2176, 2020, 13, 50794], "temperature": 0.0, "avg_logprob": -0.2419552273220486, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.0006263304967433214}, {"id": 615, "seek": 256768, "start": 2576.2799999999997, "end": 2578.68, "text": " We've got the noise.", "tokens": [50794, 492, 600, 658, 264, 5658, 13, 50914], "temperature": 0.0, "avg_logprob": -0.2419552273220486, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.0006263304967433214}, {"id": 616, "seek": 256768, "start": 2578.68, "end": 2580.72, "text": " We've got the prediction of that noise.", "tokens": [50914, 492, 600, 658, 264, 17630, 295, 300, 5658, 13, 51016], "temperature": 0.0, "avg_logprob": -0.2419552273220486, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.0006263304967433214}, {"id": 617, "seek": 256768, "start": 2580.72, "end": 2584.04, "text": " We subtract one from the other.", "tokens": [51016, 492, 16390, 472, 490, 264, 661, 13, 51182], "temperature": 0.0, "avg_logprob": -0.2419552273220486, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.0006263304967433214}, {"id": 618, "seek": 256768, "start": 2584.04, "end": 2585.66, "text": " We square it.", "tokens": [51182, 492, 3732, 309, 13, 51263], "temperature": 0.0, "avg_logprob": -0.2419552273220486, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.0006263304967433214}, {"id": 619, "seek": 256768, "start": 2585.66, "end": 2587.48, "text": " And we take the expected value.", "tokens": [51263, 400, 321, 747, 264, 5176, 2158, 13, 51354], "temperature": 0.0, "avg_logprob": -0.2419552273220486, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.0006263304967433214}, {"id": 620, "seek": 256768, "start": 2587.48, "end": 2591.8799999999997, "text": " So in other words, this is mean squared error.", "tokens": [51354, 407, 294, 661, 2283, 11, 341, 307, 914, 8889, 6713, 13, 51574], "temperature": 0.0, "avg_logprob": -0.2419552273220486, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.0006263304967433214}, {"id": 621, "seek": 256768, "start": 2591.8799999999997, "end": 2597.2, "text": " So wow, that's a lot of fiddling around to find out that this whole thing here means", "tokens": [51574, 407, 6076, 11, 300, 311, 257, 688, 295, 283, 14273, 1688, 926, 281, 915, 484, 300, 341, 1379, 551, 510, 1355, 51840], "temperature": 0.0, "avg_logprob": -0.2419552273220486, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.0006263304967433214}, {"id": 622, "seek": 259720, "start": 2597.3999999999996, "end": 2598.52, "text": " mean squared error.", "tokens": [50374, 914, 8889, 6713, 13, 50430], "temperature": 0.0, "avg_logprob": -0.3594509431685524, "compression_ratio": 1.5699481865284974, "no_speech_prob": 2.8857088182121515e-05}, {"id": 623, "seek": 259720, "start": 2598.52, "end": 2602.3999999999996, "text": " So the loss function is the mean squared error.", "tokens": [50430, 407, 264, 4470, 2445, 307, 264, 914, 8889, 6713, 13, 50624], "temperature": 0.0, "avg_logprob": -0.3594509431685524, "compression_ratio": 1.5699481865284974, "no_speech_prob": 2.8857088182121515e-05}, {"id": 624, "seek": 259720, "start": 2602.3999999999996, "end": 2604.48, "text": " And unfortunately I don't think the paper ever says that.", "tokens": [50624, 400, 7015, 286, 500, 380, 519, 264, 3035, 1562, 1619, 300, 13, 50728], "temperature": 0.0, "avg_logprob": -0.3594509431685524, "compression_ratio": 1.5699481865284974, "no_speech_prob": 2.8857088182121515e-05}, {"id": 625, "seek": 259720, "start": 2604.48, "end": 2609.16, "text": " It says minimizing the denoising objective L blahdy blahdy blahdy.", "tokens": [50728, 467, 1619, 46608, 264, 1441, 78, 3436, 10024, 441, 12288, 3173, 12288, 3173, 12288, 3173, 13, 50962], "temperature": 0.0, "avg_logprob": -0.3594509431685524, "compression_ratio": 1.5699481865284974, "no_speech_prob": 2.8857088182121515e-05}, {"id": 626, "seek": 259720, "start": 2609.16, "end": 2612.16, "text": " But anyway, we got there eventually.", "tokens": [50962, 583, 4033, 11, 321, 658, 456, 4728, 13, 51112], "temperature": 0.0, "avg_logprob": -0.3594509431685524, "compression_ratio": 1.5699481865284974, "no_speech_prob": 2.8857088182121515e-05}, {"id": 627, "seek": 259720, "start": 2612.16, "end": 2615.3199999999997, "text": " Fine.", "tokens": [51112, 12024, 13, 51270], "temperature": 0.0, "avg_logprob": -0.3594509431685524, "compression_ratio": 1.5699481865284974, "no_speech_prob": 2.8857088182121515e-05}, {"id": 628, "seek": 259720, "start": 2615.3199999999997, "end": 2621.16, "text": " We also, as well as learning about X0, we also learn here about Xt.", "tokens": [51270, 492, 611, 11, 382, 731, 382, 2539, 466, 1783, 15, 11, 321, 611, 1466, 510, 466, 1783, 83, 13, 51562], "temperature": 0.0, "avg_logprob": -0.3594509431685524, "compression_ratio": 1.5699481865284974, "no_speech_prob": 2.8857088182121515e-05}, {"id": 629, "seek": 262116, "start": 2621.16, "end": 2633.48, "text": " And so Xt is the original unnoised image times some number plus some noise times 1", "tokens": [50364, 400, 370, 1783, 83, 307, 264, 3380, 517, 1771, 2640, 3256, 1413, 512, 1230, 1804, 512, 5658, 1413, 502, 50980], "temperature": 0.0, "avg_logprob": -0.27343083372210514, "compression_ratio": 1.6008771929824561, "no_speech_prob": 0.00018522480968385935}, {"id": 630, "seek": 262116, "start": 2633.48, "end": 2634.48, "text": " minus that number.", "tokens": [50980, 3175, 300, 1230, 13, 51030], "temperature": 0.0, "avg_logprob": -0.27343083372210514, "compression_ratio": 1.6008771929824561, "no_speech_prob": 0.00018522480968385935}, {"id": 631, "seek": 262116, "start": 2634.48, "end": 2637.6, "text": " Okay, and so hopefully you'll recognize this from lesson 9b.", "tokens": [51030, 1033, 11, 293, 370, 4696, 291, 603, 5521, 341, 490, 6898, 1722, 65, 13, 51186], "temperature": 0.0, "avg_logprob": -0.27343083372210514, "compression_ratio": 1.6008771929824561, "no_speech_prob": 0.00018522480968385935}, {"id": 632, "seek": 262116, "start": 2637.6, "end": 2643.92, "text": " This is the thing where we reduce the value of each pixel and we add noise to each pixel.", "tokens": [51186, 639, 307, 264, 551, 689, 321, 5407, 264, 2158, 295, 1184, 19261, 293, 321, 909, 5658, 281, 1184, 19261, 13, 51502], "temperature": 0.0, "avg_logprob": -0.27343083372210514, "compression_ratio": 1.6008771929824561, "no_speech_prob": 0.00018522480968385935}, {"id": 633, "seek": 262116, "start": 2643.92, "end": 2645.3199999999997, "text": " So that's that.", "tokens": [51502, 407, 300, 311, 300, 13, 51572], "temperature": 0.0, "avg_logprob": -0.27343083372210514, "compression_ratio": 1.6008771929824561, "no_speech_prob": 0.00018522480968385935}, {"id": 634, "seek": 262116, "start": 2645.3199999999997, "end": 2646.68, "text": " All right.", "tokens": [51572, 1057, 558, 13, 51640], "temperature": 0.0, "avg_logprob": -0.27343083372210514, "compression_ratio": 1.6008771929824561, "no_speech_prob": 0.00018522480968385935}, {"id": 635, "seek": 262116, "start": 2646.68, "end": 2650.48, "text": " So I'm not going to keep going through it, but you can kind of basically get the idea", "tokens": [51640, 407, 286, 478, 406, 516, 281, 1066, 516, 807, 309, 11, 457, 291, 393, 733, 295, 1936, 483, 264, 1558, 51830], "temperature": 0.0, "avg_logprob": -0.27343083372210514, "compression_ratio": 1.6008771929824561, "no_speech_prob": 0.00018522480968385935}, {"id": 636, "seek": 265048, "start": 2650.8, "end": 2660.04, "text": " here is that once you know what you're looking for, the equations do actually make sense.", "tokens": [50380, 510, 307, 300, 1564, 291, 458, 437, 291, 434, 1237, 337, 11, 264, 11787, 360, 767, 652, 2020, 13, 50842], "temperature": 0.0, "avg_logprob": -0.310517692565918, "compression_ratio": 1.6372549019607843, "no_speech_prob": 1.2029616300424095e-05}, {"id": 637, "seek": 265048, "start": 2660.04, "end": 2663.2, "text": " But all this is doing is, remember, this is background.", "tokens": [50842, 583, 439, 341, 307, 884, 307, 11, 1604, 11, 341, 307, 3678, 13, 51000], "temperature": 0.0, "avg_logprob": -0.310517692565918, "compression_ratio": 1.6372549019607843, "no_speech_prob": 1.2029616300424095e-05}, {"id": 638, "seek": 265048, "start": 2663.2, "end": 2665.6, "text": " This is telling you what already exists.", "tokens": [51000, 639, 307, 3585, 291, 437, 1217, 8198, 13, 51120], "temperature": 0.0, "avg_logprob": -0.310517692565918, "compression_ratio": 1.6372549019607843, "no_speech_prob": 1.2029616300424095e-05}, {"id": 639, "seek": 265048, "start": 2665.6, "end": 2669.44, "text": " This is telling you this is what a DDPM is.", "tokens": [51120, 639, 307, 3585, 291, 341, 307, 437, 257, 413, 11373, 44, 307, 13, 51312], "temperature": 0.0, "avg_logprob": -0.310517692565918, "compression_ratio": 1.6372549019607843, "no_speech_prob": 1.2029616300424095e-05}, {"id": 640, "seek": 265048, "start": 2669.44, "end": 2672.36, "text": " And then it tells you what a DDIM is.", "tokens": [51312, 400, 550, 309, 5112, 291, 437, 257, 413, 3085, 44, 307, 13, 51458], "temperature": 0.0, "avg_logprob": -0.310517692565918, "compression_ratio": 1.6372549019607843, "no_speech_prob": 1.2029616300424095e-05}, {"id": 641, "seek": 265048, "start": 2672.36, "end": 2678.76, "text": " DDIM is, look, just think of it as a more recent version of DDPM.", "tokens": [51458, 413, 3085, 44, 307, 11, 574, 11, 445, 519, 295, 309, 382, 257, 544, 5162, 3037, 295, 413, 11373, 44, 13, 51778], "temperature": 0.0, "avg_logprob": -0.310517692565918, "compression_ratio": 1.6372549019607843, "no_speech_prob": 1.2029616300424095e-05}, {"id": 642, "seek": 267876, "start": 2678.76, "end": 2687.2000000000003, "text": " It's some very minor changes to the way it's set up, which allows us to go faster.", "tokens": [50364, 467, 311, 512, 588, 6696, 2962, 281, 264, 636, 309, 311, 992, 493, 11, 597, 4045, 505, 281, 352, 4663, 13, 50786], "temperature": 0.0, "avg_logprob": -0.32365470596506624, "compression_ratio": 1.4814814814814814, "no_speech_prob": 0.0004305548791307956}, {"id": 643, "seek": 267876, "start": 2687.2000000000003, "end": 2695.5200000000004, "text": " Okay, so the thing is, though, once we keep reading, what you'll find is none of this", "tokens": [50786, 1033, 11, 370, 264, 551, 307, 11, 1673, 11, 1564, 321, 1066, 3760, 11, 437, 291, 603, 915, 307, 6022, 295, 341, 51202], "temperature": 0.0, "avg_logprob": -0.32365470596506624, "compression_ratio": 1.4814814814814814, "no_speech_prob": 0.0004305548791307956}, {"id": 644, "seek": 267876, "start": 2695.5200000000004, "end": 2697.7200000000003, "text": " background actually matters.", "tokens": [51202, 3678, 767, 7001, 13, 51312], "temperature": 0.0, "avg_logprob": -0.32365470596506624, "compression_ratio": 1.4814814814814814, "no_speech_prob": 0.0004305548791307956}, {"id": 645, "seek": 267876, "start": 2697.7200000000003, "end": 2705.4, "text": " But I thought we'd kind of go through it just to get a sense of what's in a paper.", "tokens": [51312, 583, 286, 1194, 321, 1116, 733, 295, 352, 807, 309, 445, 281, 483, 257, 2020, 295, 437, 311, 294, 257, 3035, 13, 51696], "temperature": 0.0, "avg_logprob": -0.32365470596506624, "compression_ratio": 1.4814814814814814, "no_speech_prob": 0.0004305548791307956}, {"id": 646, "seek": 270540, "start": 2705.4, "end": 2710.44, "text": " So for the purpose of our background, it's enough to know that DDPM and DDIM are kind", "tokens": [50364, 407, 337, 264, 4334, 295, 527, 3678, 11, 309, 311, 1547, 281, 458, 300, 413, 11373, 44, 293, 413, 3085, 44, 366, 733, 50616], "temperature": 0.0, "avg_logprob": -0.2947414822048611, "compression_ratio": 1.2384615384615385, "no_speech_prob": 0.0017544261645525694}, {"id": 647, "seek": 270540, "start": 2710.44, "end": 2721.2400000000002, "text": " of the foundational papers on which diffusion models today are based.", "tokens": [50616, 295, 264, 32195, 10577, 322, 597, 25242, 5245, 965, 366, 2361, 13, 51156], "temperature": 0.0, "avg_logprob": -0.2947414822048611, "compression_ratio": 1.2384615384615385, "no_speech_prob": 0.0017544261645525694}, {"id": 648, "seek": 270540, "start": 2721.2400000000002, "end": 2726.12, "text": " Okay.", "tokens": [51156, 1033, 13, 51400], "temperature": 0.0, "avg_logprob": -0.2947414822048611, "compression_ratio": 1.2384615384615385, "no_speech_prob": 0.0017544261645525694}, {"id": 649, "seek": 272612, "start": 2726.12, "end": 2737.08, "text": " So the encoding process, which encodes an image onto a latent variable.", "tokens": [50364, 407, 264, 43430, 1399, 11, 597, 2058, 4789, 364, 3256, 3911, 257, 48994, 7006, 13, 50912], "temperature": 0.0, "avg_logprob": -0.29627071727405896, "compression_ratio": 1.5649717514124293, "no_speech_prob": 0.0005976664833724499}, {"id": 650, "seek": 272612, "start": 2737.08, "end": 2741.2, "text": " Okay, and then this is basically adding noise.", "tokens": [50912, 1033, 11, 293, 550, 341, 307, 1936, 5127, 5658, 13, 51118], "temperature": 0.0, "avg_logprob": -0.29627071727405896, "compression_ratio": 1.5649717514124293, "no_speech_prob": 0.0005976664833724499}, {"id": 651, "seek": 272612, "start": 2741.2, "end": 2745.68, "text": " This is called DDIM encoding.", "tokens": [51118, 639, 307, 1219, 413, 3085, 44, 43430, 13, 51342], "temperature": 0.0, "avg_logprob": -0.29627071727405896, "compression_ratio": 1.5649717514124293, "no_speech_prob": 0.0005976664833724499}, {"id": 652, "seek": 272612, "start": 2745.68, "end": 2749.2799999999997, "text": " And the thing that goes from the input image to the noised image, they're going to call", "tokens": [51342, 400, 264, 551, 300, 1709, 490, 264, 4846, 3256, 281, 264, 572, 2640, 3256, 11, 436, 434, 516, 281, 818, 51522], "temperature": 0.0, "avg_logprob": -0.29627071727405896, "compression_ratio": 1.5649717514124293, "no_speech_prob": 0.0005976664833724499}, {"id": 653, "seek": 272612, "start": 2749.2799999999997, "end": 2752.24, "text": " capital ER.", "tokens": [51522, 4238, 14929, 13, 51670], "temperature": 0.0, "avg_logprob": -0.29627071727405896, "compression_ratio": 1.5649717514124293, "no_speech_prob": 0.0005976664833724499}, {"id": 654, "seek": 272612, "start": 2752.24, "end": 2754.0, "text": " And R is the encoding ratio.", "tokens": [51670, 400, 497, 307, 264, 43430, 8509, 13, 51758], "temperature": 0.0, "avg_logprob": -0.29627071727405896, "compression_ratio": 1.5649717514124293, "no_speech_prob": 0.0005976664833724499}, {"id": 655, "seek": 275400, "start": 2754.0, "end": 2757.24, "text": " That's going to be some, like, how much noise are we adding.", "tokens": [50364, 663, 311, 516, 281, 312, 512, 11, 411, 11, 577, 709, 5658, 366, 321, 5127, 13, 50526], "temperature": 0.0, "avg_logprob": -0.24766884475457865, "compression_ratio": 1.606425702811245, "no_speech_prob": 0.0001971692981896922}, {"id": 656, "seek": 275400, "start": 2757.24, "end": 2763.92, "text": " If you use small steps, then decoding that, so going backwards, gives you back the original", "tokens": [50526, 759, 291, 764, 1359, 4439, 11, 550, 979, 8616, 300, 11, 370, 516, 12204, 11, 2709, 291, 646, 264, 3380, 50860], "temperature": 0.0, "avg_logprob": -0.24766884475457865, "compression_ratio": 1.606425702811245, "no_speech_prob": 0.0001971692981896922}, {"id": 657, "seek": 275400, "start": 2763.92, "end": 2764.92, "text": " image.", "tokens": [50860, 3256, 13, 50910], "temperature": 0.0, "avg_logprob": -0.24766884475457865, "compression_ratio": 1.606425702811245, "no_speech_prob": 0.0001971692981896922}, {"id": 658, "seek": 275400, "start": 2764.92, "end": 2766.08, "text": " Okay, so that's all the stuff that we've learned about.", "tokens": [50910, 1033, 11, 370, 300, 311, 439, 264, 1507, 300, 321, 600, 3264, 466, 13, 50968], "temperature": 0.0, "avg_logprob": -0.24766884475457865, "compression_ratio": 1.606425702811245, "no_speech_prob": 0.0001971692981896922}, {"id": 659, "seek": 275400, "start": 2766.08, "end": 2768.76, "text": " That's what diffusion models are.", "tokens": [50968, 663, 311, 437, 25242, 5245, 366, 13, 51102], "temperature": 0.0, "avg_logprob": -0.24766884475457865, "compression_ratio": 1.606425702811245, "no_speech_prob": 0.0001971692981896922}, {"id": 660, "seek": 275400, "start": 2768.76, "end": 2771.0, "text": " All right.", "tokens": [51102, 1057, 558, 13, 51214], "temperature": 0.0, "avg_logprob": -0.24766884475457865, "compression_ratio": 1.606425702811245, "no_speech_prob": 0.0001971692981896922}, {"id": 661, "seek": 275400, "start": 2771.0, "end": 2776.12, "text": " So this looks like a very useful picture.", "tokens": [51214, 407, 341, 1542, 411, 257, 588, 4420, 3036, 13, 51470], "temperature": 0.0, "avg_logprob": -0.24766884475457865, "compression_ratio": 1.606425702811245, "no_speech_prob": 0.0001971692981896922}, {"id": 662, "seek": 275400, "start": 2776.12, "end": 2778.76, "text": " So maybe let's take a look and see what this says.", "tokens": [51470, 407, 1310, 718, 311, 747, 257, 574, 293, 536, 437, 341, 1619, 13, 51602], "temperature": 0.0, "avg_logprob": -0.24766884475457865, "compression_ratio": 1.606425702811245, "no_speech_prob": 0.0001971692981896922}, {"id": 663, "seek": 275400, "start": 2778.76, "end": 2779.76, "text": " So what is DiffEdit?", "tokens": [51602, 407, 437, 307, 413, 3661, 36, 17975, 30, 51652], "temperature": 0.0, "avg_logprob": -0.24766884475457865, "compression_ratio": 1.606425702811245, "no_speech_prob": 0.0001971692981896922}, {"id": 664, "seek": 275400, "start": 2779.76, "end": 2781.92, "text": " DiffEdit has three steps.", "tokens": [51652, 413, 3661, 36, 17975, 575, 1045, 4439, 13, 51760], "temperature": 0.0, "avg_logprob": -0.24766884475457865, "compression_ratio": 1.606425702811245, "no_speech_prob": 0.0001971692981896922}, {"id": 665, "seek": 278192, "start": 2781.92, "end": 2785.0, "text": " Step one, we add noise to the input image.", "tokens": [50364, 5470, 472, 11, 321, 909, 5658, 281, 264, 4846, 3256, 13, 50518], "temperature": 0.0, "avg_logprob": -0.366442989658665, "compression_ratio": 1.4887218045112782, "no_speech_prob": 0.0008426409913226962}, {"id": 666, "seek": 278192, "start": 2785.0, "end": 2786.08, "text": " That sounds pretty normal.", "tokens": [50518, 663, 3263, 1238, 2710, 13, 50572], "temperature": 0.0, "avg_logprob": -0.366442989658665, "compression_ratio": 1.4887218045112782, "no_speech_prob": 0.0008426409913226962}, {"id": 667, "seek": 278192, "start": 2786.08, "end": 2788.44, "text": " Here's our input image, X0.", "tokens": [50572, 1692, 311, 527, 4846, 3256, 11, 1783, 15, 13, 50690], "temperature": 0.0, "avg_logprob": -0.366442989658665, "compression_ratio": 1.4887218045112782, "no_speech_prob": 0.0008426409913226962}, {"id": 668, "seek": 278192, "start": 2788.44, "end": 2792.0, "text": " Okay, and we add noise to it.", "tokens": [50690, 1033, 11, 293, 321, 909, 5658, 281, 309, 13, 50868], "temperature": 0.0, "avg_logprob": -0.366442989658665, "compression_ratio": 1.4887218045112782, "no_speech_prob": 0.0008426409913226962}, {"id": 669, "seek": 278192, "start": 2792.0, "end": 2793.76, "text": " Fine.", "tokens": [50868, 12024, 13, 50956], "temperature": 0.0, "avg_logprob": -0.366442989658665, "compression_ratio": 1.4887218045112782, "no_speech_prob": 0.0008426409913226962}, {"id": 670, "seek": 278192, "start": 2793.76, "end": 2795.6800000000003, "text": " And then we denoise it.", "tokens": [50956, 400, 550, 321, 1441, 38800, 309, 13, 51052], "temperature": 0.0, "avg_logprob": -0.366442989658665, "compression_ratio": 1.4887218045112782, "no_speech_prob": 0.0008426409913226962}, {"id": 671, "seek": 278192, "start": 2795.6800000000003, "end": 2797.4, "text": " Okay, fine.", "tokens": [51052, 1033, 11, 2489, 13, 51138], "temperature": 0.0, "avg_logprob": -0.366442989658665, "compression_ratio": 1.4887218045112782, "no_speech_prob": 0.0008426409913226962}, {"id": 672, "seek": 278192, "start": 2797.4, "end": 2800.2400000000002, "text": " Ah, but we denoise it twice.", "tokens": [51138, 2438, 11, 457, 321, 1441, 38800, 309, 6091, 13, 51280], "temperature": 0.0, "avg_logprob": -0.366442989658665, "compression_ratio": 1.4887218045112782, "no_speech_prob": 0.0008426409913226962}, {"id": 673, "seek": 280024, "start": 2800.24, "end": 2811.16, "text": " One time, we denoise it using the reference text R, horse.", "tokens": [50364, 1485, 565, 11, 321, 1441, 38800, 309, 1228, 264, 6408, 2487, 497, 11, 6832, 13, 50910], "temperature": 0.0, "avg_logprob": -0.27296596918350613, "compression_ratio": 1.5965909090909092, "no_speech_prob": 0.001345849479548633}, {"id": 674, "seek": 280024, "start": 2811.16, "end": 2813.3999999999996, "text": " Or this special symbol here means nothing at all.", "tokens": [50910, 1610, 341, 2121, 5986, 510, 1355, 1825, 412, 439, 13, 51022], "temperature": 0.0, "avg_logprob": -0.27296596918350613, "compression_ratio": 1.5965909090909092, "no_speech_prob": 0.001345849479548633}, {"id": 675, "seek": 280024, "start": 2813.3999999999996, "end": 2815.8399999999997, "text": " So either unconditional or horse.", "tokens": [51022, 407, 2139, 47916, 420, 6832, 13, 51144], "temperature": 0.0, "avg_logprob": -0.27296596918350613, "compression_ratio": 1.5965909090909092, "no_speech_prob": 0.001345849479548633}, {"id": 676, "seek": 280024, "start": 2815.8399999999997, "end": 2820.24, "text": " All right, so we do it once using the word horse.", "tokens": [51144, 1057, 558, 11, 370, 321, 360, 309, 1564, 1228, 264, 1349, 6832, 13, 51364], "temperature": 0.0, "avg_logprob": -0.27296596918350613, "compression_ratio": 1.5965909090909092, "no_speech_prob": 0.001345849479548633}, {"id": 677, "seek": 280024, "start": 2820.24, "end": 2827.12, "text": " So we take this, and we decode it, estimate the noise, and then we can remove that noise", "tokens": [51364, 407, 321, 747, 341, 11, 293, 321, 979, 1429, 309, 11, 12539, 264, 5658, 11, 293, 550, 321, 393, 4159, 300, 5658, 51708], "temperature": 0.0, "avg_logprob": -0.27296596918350613, "compression_ratio": 1.5965909090909092, "no_speech_prob": 0.001345849479548633}, {"id": 678, "seek": 282712, "start": 2827.2, "end": 2831.24, "text": " on the assumption that it's a horse.", "tokens": [50368, 322, 264, 15302, 300, 309, 311, 257, 6832, 13, 50570], "temperature": 0.0, "avg_logprob": -0.2832657171755421, "compression_ratio": 1.625, "no_speech_prob": 8.092736970866099e-05}, {"id": 679, "seek": 282712, "start": 2831.24, "end": 2835.7599999999998, "text": " Then we do it again.", "tokens": [50570, 1396, 321, 360, 309, 797, 13, 50796], "temperature": 0.0, "avg_logprob": -0.2832657171755421, "compression_ratio": 1.625, "no_speech_prob": 8.092736970866099e-05}, {"id": 680, "seek": 282712, "start": 2835.7599999999998, "end": 2842.0, "text": " But the second time, we do that noise, when we calculate the noise, we pass in our query", "tokens": [50796, 583, 264, 1150, 565, 11, 321, 360, 300, 5658, 11, 562, 321, 8873, 264, 5658, 11, 321, 1320, 294, 527, 14581, 51108], "temperature": 0.0, "avg_logprob": -0.2832657171755421, "compression_ratio": 1.625, "no_speech_prob": 8.092736970866099e-05}, {"id": 681, "seek": 282712, "start": 2842.0, "end": 2843.7999999999997, "text": " Q, which is zebra.", "tokens": [51108, 1249, 11, 597, 307, 47060, 13, 51198], "temperature": 0.0, "avg_logprob": -0.2832657171755421, "compression_ratio": 1.625, "no_speech_prob": 8.092736970866099e-05}, {"id": 682, "seek": 282712, "start": 2843.7999999999997, "end": 2847.92, "text": " Wow, those are going to be very different noises.", "tokens": [51198, 3153, 11, 729, 366, 516, 281, 312, 588, 819, 14620, 13, 51404], "temperature": 0.0, "avg_logprob": -0.2832657171755421, "compression_ratio": 1.625, "no_speech_prob": 8.092736970866099e-05}, {"id": 683, "seek": 282712, "start": 2847.92, "end": 2852.2799999999997, "text": " The noise for horse is just going to be literally these Gaussian pixels.", "tokens": [51404, 440, 5658, 337, 6832, 307, 445, 516, 281, 312, 3736, 613, 39148, 18668, 13, 51622], "temperature": 0.0, "avg_logprob": -0.2832657171755421, "compression_ratio": 1.625, "no_speech_prob": 8.092736970866099e-05}, {"id": 684, "seek": 282712, "start": 2852.2799999999997, "end": 2854.2, "text": " These are all dots, right?", "tokens": [51622, 1981, 366, 439, 15026, 11, 558, 30, 51718], "temperature": 0.0, "avg_logprob": -0.2832657171755421, "compression_ratio": 1.625, "no_speech_prob": 8.092736970866099e-05}, {"id": 685, "seek": 282712, "start": 2854.2, "end": 2855.92, "text": " Because it is a horse.", "tokens": [51718, 1436, 309, 307, 257, 6832, 13, 51804], "temperature": 0.0, "avg_logprob": -0.2832657171755421, "compression_ratio": 1.625, "no_speech_prob": 8.092736970866099e-05}, {"id": 686, "seek": 285592, "start": 2856.08, "end": 2860.88, "text": " If the claim is, no, no, this is actually a zebra, then all of these pixels here are", "tokens": [50372, 759, 264, 3932, 307, 11, 572, 11, 572, 11, 341, 307, 767, 257, 47060, 11, 550, 439, 295, 613, 18668, 510, 366, 50612], "temperature": 0.0, "avg_logprob": -0.22436104149653993, "compression_ratio": 1.7847533632286996, "no_speech_prob": 4.157361672696425e-06}, {"id": 687, "seek": 285592, "start": 2860.88, "end": 2861.88, "text": " all wrong.", "tokens": [50612, 439, 2085, 13, 50662], "temperature": 0.0, "avg_logprob": -0.22436104149653993, "compression_ratio": 1.7847533632286996, "no_speech_prob": 4.157361672696425e-06}, {"id": 688, "seek": 285592, "start": 2861.88, "end": 2864.14, "text": " They're all the wrong color.", "tokens": [50662, 814, 434, 439, 264, 2085, 2017, 13, 50775], "temperature": 0.0, "avg_logprob": -0.22436104149653993, "compression_ratio": 1.7847533632286996, "no_speech_prob": 4.157361672696425e-06}, {"id": 689, "seek": 285592, "start": 2864.14, "end": 2870.48, "text": " So the noise that's calculated if we say, this is our query, is going to be totally", "tokens": [50775, 407, 264, 5658, 300, 311, 15598, 498, 321, 584, 11, 341, 307, 527, 14581, 11, 307, 516, 281, 312, 3879, 51092], "temperature": 0.0, "avg_logprob": -0.22436104149653993, "compression_ratio": 1.7847533632286996, "no_speech_prob": 4.157361672696425e-06}, {"id": 690, "seek": 285592, "start": 2870.48, "end": 2873.52, "text": " different to the noise if we say, this is our query.", "tokens": [51092, 819, 281, 264, 5658, 498, 321, 584, 11, 341, 307, 527, 14581, 13, 51244], "temperature": 0.0, "avg_logprob": -0.22436104149653993, "compression_ratio": 1.7847533632286996, "no_speech_prob": 4.157361672696425e-06}, {"id": 691, "seek": 285592, "start": 2873.52, "end": 2876.6, "text": " And so then we just take one minus the other.", "tokens": [51244, 400, 370, 550, 321, 445, 747, 472, 3175, 264, 661, 13, 51398], "temperature": 0.0, "avg_logprob": -0.22436104149653993, "compression_ratio": 1.7847533632286996, "no_speech_prob": 4.157361672696425e-06}, {"id": 692, "seek": 285592, "start": 2876.6, "end": 2878.96, "text": " And here it is here.", "tokens": [51398, 400, 510, 309, 307, 510, 13, 51516], "temperature": 0.0, "avg_logprob": -0.22436104149653993, "compression_ratio": 1.7847533632286996, "no_speech_prob": 4.157361672696425e-06}, {"id": 693, "seek": 285592, "start": 2878.96, "end": 2885.0, "text": " So we derive a mask based on the difference in the denoising results.", "tokens": [51516, 407, 321, 28446, 257, 6094, 2361, 322, 264, 2649, 294, 264, 1441, 78, 3436, 3542, 13, 51818], "temperature": 0.0, "avg_logprob": -0.22436104149653993, "compression_ratio": 1.7847533632286996, "no_speech_prob": 4.157361672696425e-06}, {"id": 694, "seek": 288500, "start": 2885.08, "end": 2886.56, "text": " And then you take that and binarize it.", "tokens": [50368, 400, 550, 291, 747, 300, 293, 5171, 289, 1125, 309, 13, 50442], "temperature": 0.0, "avg_logprob": -0.2102688766839936, "compression_ratio": 1.8055555555555556, "no_speech_prob": 3.647853009169921e-05}, {"id": 695, "seek": 288500, "start": 2886.56, "end": 2888.72, "text": " So basically turn that into ones and zeros.", "tokens": [50442, 407, 1936, 1261, 300, 666, 2306, 293, 35193, 13, 50550], "temperature": 0.0, "avg_logprob": -0.2102688766839936, "compression_ratio": 1.8055555555555556, "no_speech_prob": 3.647853009169921e-05}, {"id": 696, "seek": 288500, "start": 2888.72, "end": 2892.92, "text": " So that's actually the key idea.", "tokens": [50550, 407, 300, 311, 767, 264, 2141, 1558, 13, 50760], "temperature": 0.0, "avg_logprob": -0.2102688766839936, "compression_ratio": 1.8055555555555556, "no_speech_prob": 3.647853009169921e-05}, {"id": 697, "seek": 288500, "start": 2892.92, "end": 2898.3, "text": " That's a really cool idea, which is that once you have a diffusion model that's trained,", "tokens": [50760, 663, 311, 257, 534, 1627, 1558, 11, 597, 307, 300, 1564, 291, 362, 257, 25242, 2316, 300, 311, 8895, 11, 51029], "temperature": 0.0, "avg_logprob": -0.2102688766839936, "compression_ratio": 1.8055555555555556, "no_speech_prob": 3.647853009169921e-05}, {"id": 698, "seek": 288500, "start": 2898.3, "end": 2903.3, "text": " you can do inference on it, where you tell it the truth about what the thing is.", "tokens": [51029, 291, 393, 360, 38253, 322, 309, 11, 689, 291, 980, 309, 264, 3494, 466, 437, 264, 551, 307, 13, 51279], "temperature": 0.0, "avg_logprob": -0.2102688766839936, "compression_ratio": 1.8055555555555556, "no_speech_prob": 3.647853009169921e-05}, {"id": 699, "seek": 288500, "start": 2903.3, "end": 2906.92, "text": " And then you can do it again, but lie about what the thing is.", "tokens": [51279, 400, 550, 291, 393, 360, 309, 797, 11, 457, 4544, 466, 437, 264, 551, 307, 13, 51460], "temperature": 0.0, "avg_logprob": -0.2102688766839936, "compression_ratio": 1.8055555555555556, "no_speech_prob": 3.647853009169921e-05}, {"id": 700, "seek": 288500, "start": 2906.92, "end": 2911.44, "text": " And in your lying version, it's going to say, okay, all the stuff that doesn't match zebra", "tokens": [51460, 400, 294, 428, 8493, 3037, 11, 309, 311, 516, 281, 584, 11, 1392, 11, 439, 264, 1507, 300, 1177, 380, 2995, 47060, 51686], "temperature": 0.0, "avg_logprob": -0.2102688766839936, "compression_ratio": 1.8055555555555556, "no_speech_prob": 3.647853009169921e-05}, {"id": 701, "seek": 288500, "start": 2911.44, "end": 2914.0, "text": " must be noise.", "tokens": [51686, 1633, 312, 5658, 13, 51814], "temperature": 0.0, "avg_logprob": -0.2102688766839936, "compression_ratio": 1.8055555555555556, "no_speech_prob": 3.647853009169921e-05}, {"id": 702, "seek": 291400, "start": 2914.0, "end": 2918.16, "text": " And so the difference between the noise prediction when you say, hey, it's a zebra versus the", "tokens": [50364, 400, 370, 264, 2649, 1296, 264, 5658, 17630, 562, 291, 584, 11, 4177, 11, 309, 311, 257, 47060, 5717, 264, 50572], "temperature": 0.0, "avg_logprob": -0.23980613549550375, "compression_ratio": 1.74, "no_speech_prob": 4.8325608076993376e-05}, {"id": 703, "seek": 291400, "start": 2918.16, "end": 2923.32, "text": " noise prediction when you say, hey, it's a horse, will be all the pixels that it says,", "tokens": [50572, 5658, 17630, 562, 291, 584, 11, 4177, 11, 309, 311, 257, 6832, 11, 486, 312, 439, 264, 18668, 300, 309, 1619, 11, 50830], "temperature": 0.0, "avg_logprob": -0.23980613549550375, "compression_ratio": 1.74, "no_speech_prob": 4.8325608076993376e-05}, {"id": 704, "seek": 291400, "start": 2923.32, "end": 2926.72, "text": " no, these pixels are not zebra.", "tokens": [50830, 572, 11, 613, 18668, 366, 406, 47060, 13, 51000], "temperature": 0.0, "avg_logprob": -0.23980613549550375, "compression_ratio": 1.74, "no_speech_prob": 4.8325608076993376e-05}, {"id": 705, "seek": 291400, "start": 2926.72, "end": 2928.32, "text": " The rest of it, it's fine.", "tokens": [51000, 440, 1472, 295, 309, 11, 309, 311, 2489, 13, 51080], "temperature": 0.0, "avg_logprob": -0.23980613549550375, "compression_ratio": 1.74, "no_speech_prob": 4.8325608076993376e-05}, {"id": 706, "seek": 291400, "start": 2928.32, "end": 2933.68, "text": " There's nothing particularly about the background that wouldn't work with a zebra.", "tokens": [51080, 821, 311, 1825, 4098, 466, 264, 3678, 300, 2759, 380, 589, 365, 257, 47060, 13, 51348], "temperature": 0.0, "avg_logprob": -0.23980613549550375, "compression_ratio": 1.74, "no_speech_prob": 4.8325608076993376e-05}, {"id": 707, "seek": 291400, "start": 2933.68, "end": 2936.7, "text": " Okay, so that's step one.", "tokens": [51348, 1033, 11, 370, 300, 311, 1823, 472, 13, 51499], "temperature": 0.0, "avg_logprob": -0.23980613549550375, "compression_ratio": 1.74, "no_speech_prob": 4.8325608076993376e-05}, {"id": 708, "seek": 293670, "start": 2936.7, "end": 2949.02, "text": " So then step two is we take the horse and we add noise to it.", "tokens": [50364, 407, 550, 1823, 732, 307, 321, 747, 264, 6832, 293, 321, 909, 5658, 281, 309, 13, 50980], "temperature": 0.0, "avg_logprob": -0.3123063463153261, "compression_ratio": 1.467065868263473, "no_speech_prob": 0.0006166272796690464}, {"id": 709, "seek": 293670, "start": 2949.02, "end": 2954.74, "text": " Okay, that's this XR thing that we learned about before.", "tokens": [50980, 1033, 11, 300, 311, 341, 1783, 49, 551, 300, 321, 3264, 466, 949, 13, 51266], "temperature": 0.0, "avg_logprob": -0.3123063463153261, "compression_ratio": 1.467065868263473, "no_speech_prob": 0.0006166272796690464}, {"id": 710, "seek": 293670, "start": 2954.74, "end": 2963.68, "text": " And then step three, we do decoding conditioned on the text query, using the mask to replace", "tokens": [51266, 400, 550, 1823, 1045, 11, 321, 360, 979, 8616, 35833, 322, 264, 2487, 14581, 11, 1228, 264, 6094, 281, 7406, 51713], "temperature": 0.0, "avg_logprob": -0.3123063463153261, "compression_ratio": 1.467065868263473, "no_speech_prob": 0.0006166272796690464}, {"id": 711, "seek": 293670, "start": 2963.68, "end": 2966.2599999999998, "text": " the background with pixel values.", "tokens": [51713, 264, 3678, 365, 19261, 4190, 13, 51842], "temperature": 0.0, "avg_logprob": -0.3123063463153261, "compression_ratio": 1.467065868263473, "no_speech_prob": 0.0006166272796690464}, {"id": 712, "seek": 296626, "start": 2966.82, "end": 2971.5, "text": " So this is like the idea that we heard about before, which is that during the inference", "tokens": [50392, 407, 341, 307, 411, 264, 1558, 300, 321, 2198, 466, 949, 11, 597, 307, 300, 1830, 264, 38253, 50626], "temperature": 0.0, "avg_logprob": -0.2537152978438365, "compression_ratio": 1.6134020618556701, "no_speech_prob": 1.9525878087733872e-05}, {"id": 713, "seek": 296626, "start": 2971.5, "end": 2980.2200000000003, "text": " time, as you do diffusion from this fuzzy horse, what happens is that we do a step of", "tokens": [50626, 565, 11, 382, 291, 360, 25242, 490, 341, 34710, 6832, 11, 437, 2314, 307, 300, 321, 360, 257, 1823, 295, 51062], "temperature": 0.0, "avg_logprob": -0.2537152978438365, "compression_ratio": 1.6134020618556701, "no_speech_prob": 1.9525878087733872e-05}, {"id": 714, "seek": 296626, "start": 2980.2200000000003, "end": 2986.86, "text": " diffusion inference, and then all these black pixels, we replace with the noised version", "tokens": [51062, 25242, 38253, 11, 293, 550, 439, 613, 2211, 18668, 11, 321, 7406, 365, 264, 572, 2640, 3037, 51394], "temperature": 0.0, "avg_logprob": -0.2537152978438365, "compression_ratio": 1.6134020618556701, "no_speech_prob": 1.9525878087733872e-05}, {"id": 715, "seek": 296626, "start": 2986.86, "end": 2988.7000000000003, "text": " of the original.", "tokens": [51394, 295, 264, 3380, 13, 51486], "temperature": 0.0, "avg_logprob": -0.2537152978438365, "compression_ratio": 1.6134020618556701, "no_speech_prob": 1.9525878087733872e-05}, {"id": 716, "seek": 296626, "start": 2988.7000000000003, "end": 2990.1400000000003, "text": " And so we do that multiple times.", "tokens": [51486, 400, 370, 321, 360, 300, 3866, 1413, 13, 51558], "temperature": 0.0, "avg_logprob": -0.2537152978438365, "compression_ratio": 1.6134020618556701, "no_speech_prob": 1.9525878087733872e-05}, {"id": 717, "seek": 299014, "start": 2990.14, "end": 2997.7799999999997, "text": " And so that means that the original pixels in this black area won't get changed.", "tokens": [50364, 400, 370, 300, 1355, 300, 264, 3380, 18668, 294, 341, 2211, 1859, 1582, 380, 483, 3105, 13, 50746], "temperature": 0.0, "avg_logprob": -0.2103602226744307, "compression_ratio": 1.7198067632850242, "no_speech_prob": 0.000100713710708078}, {"id": 718, "seek": 299014, "start": 2997.7799999999997, "end": 3001.72, "text": " And that's why you can see in this picture here, and this picture here, the background's", "tokens": [50746, 400, 300, 311, 983, 291, 393, 536, 294, 341, 3036, 510, 11, 293, 341, 3036, 510, 11, 264, 3678, 311, 50943], "temperature": 0.0, "avg_logprob": -0.2103602226744307, "compression_ratio": 1.7198067632850242, "no_speech_prob": 0.000100713710708078}, {"id": 719, "seek": 299014, "start": 3001.72, "end": 3003.3399999999997, "text": " all the same.", "tokens": [50943, 439, 264, 912, 13, 51024], "temperature": 0.0, "avg_logprob": -0.2103602226744307, "compression_ratio": 1.7198067632850242, "no_speech_prob": 0.000100713710708078}, {"id": 720, "seek": 299014, "start": 3003.3399999999997, "end": 3009.54, "text": " And the only thing that's changed is that the horse has been turned into a zebra.", "tokens": [51024, 400, 264, 787, 551, 300, 311, 3105, 307, 300, 264, 6832, 575, 668, 3574, 666, 257, 47060, 13, 51334], "temperature": 0.0, "avg_logprob": -0.2103602226744307, "compression_ratio": 1.7198067632850242, "no_speech_prob": 0.000100713710708078}, {"id": 721, "seek": 299014, "start": 3009.54, "end": 3013.2599999999998, "text": " So this paragraph describes it.", "tokens": [51334, 407, 341, 18865, 15626, 309, 13, 51520], "temperature": 0.0, "avg_logprob": -0.2103602226744307, "compression_ratio": 1.7198067632850242, "no_speech_prob": 0.000100713710708078}, {"id": 722, "seek": 299014, "start": 3013.2599999999998, "end": 3017.3399999999997, "text": " And then you can see here, it gives you a lot more detail.", "tokens": [51520, 400, 550, 291, 393, 536, 510, 11, 309, 2709, 291, 257, 688, 544, 2607, 13, 51724], "temperature": 0.0, "avg_logprob": -0.2103602226744307, "compression_ratio": 1.7198067632850242, "no_speech_prob": 0.000100713710708078}, {"id": 723, "seek": 301734, "start": 3017.34, "end": 3022.2200000000003, "text": " And the detail often has all kinds of like little tips about things they tried and things", "tokens": [50364, 400, 264, 2607, 2049, 575, 439, 3685, 295, 411, 707, 6082, 466, 721, 436, 3031, 293, 721, 50608], "temperature": 0.0, "avg_logprob": -0.28031064351399737, "compression_ratio": 1.5360824742268042, "no_speech_prob": 0.0001686508912825957}, {"id": 724, "seek": 301734, "start": 3022.2200000000003, "end": 3029.7400000000002, "text": " they found, which is pretty cool.", "tokens": [50608, 436, 1352, 11, 597, 307, 1238, 1627, 13, 50984], "temperature": 0.0, "avg_logprob": -0.28031064351399737, "compression_ratio": 1.5360824742268042, "no_speech_prob": 0.0001686508912825957}, {"id": 725, "seek": 301734, "start": 3029.7400000000002, "end": 3032.9, "text": " So I won't read through all that, because it says the same as what I've already just", "tokens": [50984, 407, 286, 1582, 380, 1401, 807, 439, 300, 11, 570, 309, 1619, 264, 912, 382, 437, 286, 600, 1217, 445, 51142], "temperature": 0.0, "avg_logprob": -0.28031064351399737, "compression_ratio": 1.5360824742268042, "no_speech_prob": 0.0001686508912825957}, {"id": 726, "seek": 301734, "start": 3032.9, "end": 3034.98, "text": " said.", "tokens": [51142, 848, 13, 51246], "temperature": 0.0, "avg_logprob": -0.28031064351399737, "compression_ratio": 1.5360824742268042, "no_speech_prob": 0.0001686508912825957}, {"id": 727, "seek": 301734, "start": 3034.98, "end": 3039.86, "text": " One of the interesting little things they note here actually is that this binarized", "tokens": [51246, 1485, 295, 264, 1880, 707, 721, 436, 3637, 510, 767, 307, 300, 341, 5171, 289, 1602, 51490], "temperature": 0.0, "avg_logprob": -0.28031064351399737, "compression_ratio": 1.5360824742268042, "no_speech_prob": 0.0001686508912825957}, {"id": 728, "seek": 303986, "start": 3039.86, "end": 3047.46, "text": " mask, so this difference between the R decoding and the Q decoding, tends to be a bit bigger", "tokens": [50364, 6094, 11, 370, 341, 2649, 1296, 264, 497, 979, 8616, 293, 264, 1249, 979, 8616, 11, 12258, 281, 312, 257, 857, 3801, 50744], "temperature": 0.0, "avg_logprob": -0.2622042980390726, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.0028009028173983097}, {"id": 729, "seek": 303986, "start": 3047.46, "end": 3052.58, "text": " than the actual area where the horse is, which you can kind of see with these legs, for example.", "tokens": [50744, 813, 264, 3539, 1859, 689, 264, 6832, 307, 11, 597, 291, 393, 733, 295, 536, 365, 613, 5668, 11, 337, 1365, 13, 51000], "temperature": 0.0, "avg_logprob": -0.2622042980390726, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.0028009028173983097}, {"id": 730, "seek": 303986, "start": 3052.58, "end": 3056.06, "text": " And their point is that they actually say that's a good thing.", "tokens": [51000, 400, 641, 935, 307, 300, 436, 767, 584, 300, 311, 257, 665, 551, 13, 51174], "temperature": 0.0, "avg_logprob": -0.2622042980390726, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.0028009028173983097}, {"id": 731, "seek": 303986, "start": 3056.06, "end": 3061.86, "text": " Because actually often you want to slightly change some of the details around the object.", "tokens": [51174, 1436, 767, 2049, 291, 528, 281, 4748, 1319, 512, 295, 264, 4365, 926, 264, 2657, 13, 51464], "temperature": 0.0, "avg_logprob": -0.2622042980390726, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.0028009028173983097}, {"id": 732, "seek": 303986, "start": 3061.86, "end": 3064.1, "text": " So this is actually fine.", "tokens": [51464, 407, 341, 307, 767, 2489, 13, 51576], "temperature": 0.0, "avg_logprob": -0.2622042980390726, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.0028009028173983097}, {"id": 733, "seek": 303986, "start": 3064.1, "end": 3065.76, "text": " All right.", "tokens": [51576, 1057, 558, 13, 51659], "temperature": 0.0, "avg_logprob": -0.2622042980390726, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.0028009028173983097}, {"id": 734, "seek": 306576, "start": 3065.76, "end": 3070.4, "text": " So we have a description of what the thing is, lots of details there.", "tokens": [50364, 407, 321, 362, 257, 3855, 295, 437, 264, 551, 307, 11, 3195, 295, 4365, 456, 13, 50596], "temperature": 0.0, "avg_logprob": -0.22701083696805513, "compression_ratio": 1.6628352490421456, "no_speech_prob": 0.0018675572937354445}, {"id": 735, "seek": 306576, "start": 3070.4, "end": 3075.1200000000003, "text": " And then here's the bit that I totally skip, the bit called theoretical analysis, where", "tokens": [50596, 400, 550, 510, 311, 264, 857, 300, 286, 3879, 10023, 11, 264, 857, 1219, 20864, 5215, 11, 689, 50832], "temperature": 0.0, "avg_logprob": -0.22701083696805513, "compression_ratio": 1.6628352490421456, "no_speech_prob": 0.0018675572937354445}, {"id": 736, "seek": 306576, "start": 3075.1200000000003, "end": 3079.48, "text": " this is the stuff that people really generally just add to try to get their papers passed", "tokens": [50832, 341, 307, 264, 1507, 300, 561, 534, 5101, 445, 909, 281, 853, 281, 483, 641, 10577, 4678, 51050], "temperature": 0.0, "avg_logprob": -0.22701083696805513, "compression_ratio": 1.6628352490421456, "no_speech_prob": 0.0018675572937354445}, {"id": 737, "seek": 306576, "start": 3079.48, "end": 3080.48, "text": " review.", "tokens": [51050, 3131, 13, 51100], "temperature": 0.0, "avg_logprob": -0.22701083696805513, "compression_ratio": 1.6628352490421456, "no_speech_prob": 0.0018675572937354445}, {"id": 738, "seek": 306576, "start": 3080.48, "end": 3082.42, "text": " You have to have fancy math.", "tokens": [51100, 509, 362, 281, 362, 10247, 5221, 13, 51197], "temperature": 0.0, "avg_logprob": -0.22701083696805513, "compression_ratio": 1.6628352490421456, "no_speech_prob": 0.0018675572937354445}, {"id": 739, "seek": 306576, "start": 3082.42, "end": 3088.2000000000003, "text": " And so they're basically proving, you can see what it says here, insight into why this", "tokens": [51197, 400, 370, 436, 434, 1936, 27221, 11, 291, 393, 536, 437, 309, 1619, 510, 11, 11269, 666, 983, 341, 51486], "temperature": 0.0, "avg_logprob": -0.22701083696805513, "compression_ratio": 1.6628352490421456, "no_speech_prob": 0.0018675572937354445}, {"id": 740, "seek": 306576, "start": 3088.2000000000003, "end": 3092.84, "text": " component yields better editing results than other approaches.", "tokens": [51486, 6542, 32168, 1101, 10000, 3542, 813, 661, 11587, 13, 51718], "temperature": 0.0, "avg_logprob": -0.22701083696805513, "compression_ratio": 1.6628352490421456, "no_speech_prob": 0.0018675572937354445}, {"id": 741, "seek": 309284, "start": 3092.92, "end": 3096.52, "text": " I'm not sure we particularly care, because it makes perfect sense what they're doing,", "tokens": [50368, 286, 478, 406, 988, 321, 4098, 1127, 11, 570, 309, 1669, 2176, 2020, 437, 436, 434, 884, 11, 50548], "temperature": 0.0, "avg_logprob": -0.2793601036071777, "compression_ratio": 1.5724907063197027, "no_speech_prob": 0.0010322261368855834}, {"id": 742, "seek": 309284, "start": 3096.52, "end": 3099.1600000000003, "text": " it's intuitive, and we can see it works.", "tokens": [50548, 309, 311, 21769, 11, 293, 321, 393, 536, 309, 1985, 13, 50680], "temperature": 0.0, "avg_logprob": -0.2793601036071777, "compression_ratio": 1.5724907063197027, "no_speech_prob": 0.0010322261368855834}, {"id": 743, "seek": 309284, "start": 3099.1600000000003, "end": 3103.7200000000003, "text": " I don't feel like I need it proven to me, so I skip over that.", "tokens": [50680, 286, 500, 380, 841, 411, 286, 643, 309, 12785, 281, 385, 11, 370, 286, 10023, 670, 300, 13, 50908], "temperature": 0.0, "avg_logprob": -0.2793601036071777, "compression_ratio": 1.5724907063197027, "no_speech_prob": 0.0010322261368855834}, {"id": 744, "seek": 309284, "start": 3103.7200000000003, "end": 3108.2000000000003, "text": " So then they'll show us their experiments to tell us what data sets they did the experiments", "tokens": [50908, 407, 550, 436, 603, 855, 505, 641, 12050, 281, 980, 505, 437, 1412, 6352, 436, 630, 264, 12050, 51132], "temperature": 0.0, "avg_logprob": -0.2793601036071777, "compression_ratio": 1.5724907063197027, "no_speech_prob": 0.0010322261368855834}, {"id": 745, "seek": 309284, "start": 3108.2000000000003, "end": 3110.56, "text": " on.", "tokens": [51132, 322, 13, 51250], "temperature": 0.0, "avg_logprob": -0.2793601036071777, "compression_ratio": 1.5724907063197027, "no_speech_prob": 0.0010322261368855834}, {"id": 746, "seek": 309284, "start": 3110.56, "end": 3118.52, "text": " And so then, you know, they have metrics with names like LP IPS and CSFID.", "tokens": [51250, 400, 370, 550, 11, 291, 458, 11, 436, 362, 16367, 365, 5288, 411, 38095, 50021, 293, 9460, 37, 2777, 13, 51648], "temperature": 0.0, "avg_logprob": -0.2793601036071777, "compression_ratio": 1.5724907063197027, "no_speech_prob": 0.0010322261368855834}, {"id": 747, "seek": 309284, "start": 3118.52, "end": 3121.4, "text": " You'll come across FID a lot, this is just a version of that.", "tokens": [51648, 509, 603, 808, 2108, 479, 2777, 257, 688, 11, 341, 307, 445, 257, 3037, 295, 300, 13, 51792], "temperature": 0.0, "avg_logprob": -0.2793601036071777, "compression_ratio": 1.5724907063197027, "no_speech_prob": 0.0010322261368855834}, {"id": 748, "seek": 312140, "start": 3121.8, "end": 3127.64, "text": " Basically, they're trying to score how good their generated image is.", "tokens": [50384, 8537, 11, 436, 434, 1382, 281, 6175, 577, 665, 641, 10833, 3256, 307, 13, 50676], "temperature": 0.0, "avg_logprob": -0.29308937691353465, "compression_ratio": 1.612781954887218, "no_speech_prob": 0.0004442137142177671}, {"id": 749, "seek": 312140, "start": 3127.64, "end": 3129.84, "text": " We don't normally care about that either.", "tokens": [50676, 492, 500, 380, 5646, 1127, 466, 300, 2139, 13, 50786], "temperature": 0.0, "avg_logprob": -0.29308937691353465, "compression_ratio": 1.612781954887218, "no_speech_prob": 0.0004442137142177671}, {"id": 750, "seek": 312140, "start": 3129.84, "end": 3133.2400000000002, "text": " They care because they need to be able to say, you should publish our paper because", "tokens": [50786, 814, 1127, 570, 436, 643, 281, 312, 1075, 281, 584, 11, 291, 820, 11374, 527, 3035, 570, 50956], "temperature": 0.0, "avg_logprob": -0.29308937691353465, "compression_ratio": 1.612781954887218, "no_speech_prob": 0.0004442137142177671}, {"id": 751, "seek": 312140, "start": 3133.2400000000002, "end": 3136.52, "text": " it has a higher number than the other people that have worked on this area.", "tokens": [50956, 309, 575, 257, 2946, 1230, 813, 264, 661, 561, 300, 362, 2732, 322, 341, 1859, 13, 51120], "temperature": 0.0, "avg_logprob": -0.29308937691353465, "compression_ratio": 1.612781954887218, "no_speech_prob": 0.0004442137142177671}, {"id": 752, "seek": 312140, "start": 3136.52, "end": 3146.44, "text": " In our case, we can just say, you know, it looks good, I like it.", "tokens": [51120, 682, 527, 1389, 11, 321, 393, 445, 584, 11, 291, 458, 11, 309, 1542, 665, 11, 286, 411, 309, 13, 51616], "temperature": 0.0, "avg_logprob": -0.29308937691353465, "compression_ratio": 1.612781954887218, "no_speech_prob": 0.0004442137142177671}, {"id": 753, "seek": 312140, "start": 3146.44, "end": 3150.84, "text": " So excellent question in the chat from Micolaj, which is, so would this only work on things", "tokens": [51616, 407, 7103, 1168, 294, 264, 5081, 490, 5818, 401, 1805, 11, 597, 307, 11, 370, 576, 341, 787, 589, 322, 721, 51836], "temperature": 0.0, "avg_logprob": -0.29308937691353465, "compression_ratio": 1.612781954887218, "no_speech_prob": 0.0004442137142177671}, {"id": 754, "seek": 315084, "start": 3150.84, "end": 3153.36, "text": " that are relatively similar?", "tokens": [50364, 300, 366, 7226, 2531, 30, 50490], "temperature": 0.0, "avg_logprob": -0.21749462683995566, "compression_ratio": 1.5829596412556053, "no_speech_prob": 2.7968600988970138e-05}, {"id": 755, "seek": 315084, "start": 3153.36, "end": 3154.7200000000003, "text": " And I think this is a great point, right?", "tokens": [50490, 400, 286, 519, 341, 307, 257, 869, 935, 11, 558, 30, 50558], "temperature": 0.0, "avg_logprob": -0.21749462683995566, "compression_ratio": 1.5829596412556053, "no_speech_prob": 2.7968600988970138e-05}, {"id": 756, "seek": 315084, "start": 3154.7200000000003, "end": 3160.1200000000003, "text": " This is where understanding this helps to know what its limitations are going to be.", "tokens": [50558, 639, 307, 689, 3701, 341, 3665, 281, 458, 437, 1080, 15705, 366, 516, 281, 312, 13, 50828], "temperature": 0.0, "avg_logprob": -0.21749462683995566, "compression_ratio": 1.5829596412556053, "no_speech_prob": 2.7968600988970138e-05}, {"id": 757, "seek": 315084, "start": 3160.1200000000003, "end": 3161.84, "text": " And that's exactly right.", "tokens": [50828, 400, 300, 311, 2293, 558, 13, 50914], "temperature": 0.0, "avg_logprob": -0.21749462683995566, "compression_ratio": 1.5829596412556053, "no_speech_prob": 2.7968600988970138e-05}, {"id": 758, "seek": 315084, "start": 3161.84, "end": 3170.52, "text": " If you can't come up with a mask for the change you want, this isn't going to work very well", "tokens": [50914, 759, 291, 393, 380, 808, 493, 365, 257, 6094, 337, 264, 1319, 291, 528, 11, 341, 1943, 380, 516, 281, 589, 588, 731, 51348], "temperature": 0.0, "avg_logprob": -0.21749462683995566, "compression_ratio": 1.5829596412556053, "no_speech_prob": 2.7968600988970138e-05}, {"id": 759, "seek": 315084, "start": 3170.52, "end": 3171.52, "text": " on the whole.", "tokens": [51348, 322, 264, 1379, 13, 51398], "temperature": 0.0, "avg_logprob": -0.21749462683995566, "compression_ratio": 1.5829596412556053, "no_speech_prob": 2.7968600988970138e-05}, {"id": 760, "seek": 315084, "start": 3171.52, "end": 3175.32, "text": " Yeah, because the masked areas, the pixel is going to be copied.", "tokens": [51398, 865, 11, 570, 264, 45249, 3179, 11, 264, 19261, 307, 516, 281, 312, 25365, 13, 51588], "temperature": 0.0, "avg_logprob": -0.21749462683995566, "compression_ratio": 1.5829596412556053, "no_speech_prob": 2.7968600988970138e-05}, {"id": 761, "seek": 317532, "start": 3175.32, "end": 3183.1600000000003, "text": " So for example, if you wanted to change it from, you know, a bowl of fruits to a bowl", "tokens": [50364, 407, 337, 1365, 11, 498, 291, 1415, 281, 1319, 309, 490, 11, 291, 458, 11, 257, 6571, 295, 12148, 281, 257, 6571, 50756], "temperature": 0.0, "avg_logprob": -0.2794956860241589, "compression_ratio": 1.7118644067796611, "no_speech_prob": 0.00211558910086751}, {"id": 762, "seek": 317532, "start": 3183.1600000000003, "end": 3189.8, "text": " of fruits with a bokeh background, or like a bowl of fruits with, you know, a purple", "tokens": [50756, 295, 12148, 365, 257, 748, 330, 71, 3678, 11, 420, 411, 257, 6571, 295, 12148, 365, 11, 291, 458, 11, 257, 9656, 51088], "temperature": 0.0, "avg_logprob": -0.2794956860241589, "compression_ratio": 1.7118644067796611, "no_speech_prob": 0.00211558910086751}, {"id": 763, "seek": 317532, "start": 3189.8, "end": 3191.96, "text": " tinged photo of a bowl of fruit.", "tokens": [51088, 17922, 292, 5052, 295, 257, 6571, 295, 6773, 13, 51196], "temperature": 0.0, "avg_logprob": -0.2794956860241589, "compression_ratio": 1.7118644067796611, "no_speech_prob": 0.00211558910086751}, {"id": 764, "seek": 317532, "start": 3191.96, "end": 3195.0800000000004, "text": " If you want the whole color to change, that's not going to work, right?", "tokens": [51196, 759, 291, 528, 264, 1379, 2017, 281, 1319, 11, 300, 311, 406, 516, 281, 589, 11, 558, 30, 51352], "temperature": 0.0, "avg_logprob": -0.2794956860241589, "compression_ratio": 1.7118644067796611, "no_speech_prob": 0.00211558910086751}, {"id": 765, "seek": 317532, "start": 3195.0800000000004, "end": 3196.92, "text": " Because you're not masking off an area.", "tokens": [51352, 1436, 291, 434, 406, 31226, 766, 364, 1859, 13, 51444], "temperature": 0.0, "avg_logprob": -0.2794956860241589, "compression_ratio": 1.7118644067796611, "no_speech_prob": 0.00211558910086751}, {"id": 766, "seek": 317532, "start": 3196.92, "end": 3204.04, "text": " Yeah, so by understanding the detail here, Micolaj has correctly recognized a limitation", "tokens": [51444, 865, 11, 370, 538, 3701, 264, 2607, 510, 11, 5818, 401, 1805, 575, 8944, 9823, 257, 27432, 51800], "temperature": 0.0, "avg_logprob": -0.2794956860241589, "compression_ratio": 1.7118644067796611, "no_speech_prob": 0.00211558910086751}, {"id": 767, "seek": 320404, "start": 3204.7599999999998, "end": 3205.84, "text": " or like, what's this for?", "tokens": [50400, 420, 411, 11, 437, 311, 341, 337, 30, 50454], "temperature": 0.0, "avg_logprob": -0.2951859112443595, "compression_ratio": 1.695167286245353, "no_speech_prob": 0.00037409228389151394}, {"id": 768, "seek": 320404, "start": 3205.84, "end": 3209.7599999999998, "text": " This is for things where you can just say, just change this bit and leave everything", "tokens": [50454, 639, 307, 337, 721, 689, 291, 393, 445, 584, 11, 445, 1319, 341, 857, 293, 1856, 1203, 50650], "temperature": 0.0, "avg_logprob": -0.2951859112443595, "compression_ratio": 1.695167286245353, "no_speech_prob": 0.00037409228389151394}, {"id": 769, "seek": 320404, "start": 3209.7599999999998, "end": 3210.7599999999998, "text": " else the same.", "tokens": [50650, 1646, 264, 912, 13, 50700], "temperature": 0.0, "avg_logprob": -0.2951859112443595, "compression_ratio": 1.695167286245353, "no_speech_prob": 0.00037409228389151394}, {"id": 770, "seek": 320404, "start": 3210.7599999999998, "end": 3215.4, "text": " All right, so there's lots of experiments.", "tokens": [50700, 1057, 558, 11, 370, 456, 311, 3195, 295, 12050, 13, 50932], "temperature": 0.0, "avg_logprob": -0.2951859112443595, "compression_ratio": 1.695167286245353, "no_speech_prob": 0.00037409228389151394}, {"id": 771, "seek": 320404, "start": 3215.4, "end": 3219.72, "text": " So yeah, for some things you care about the experiments a lot.", "tokens": [50932, 407, 1338, 11, 337, 512, 721, 291, 1127, 466, 264, 12050, 257, 688, 13, 51148], "temperature": 0.0, "avg_logprob": -0.2951859112443595, "compression_ratio": 1.695167286245353, "no_speech_prob": 0.00037409228389151394}, {"id": 772, "seek": 320404, "start": 3219.72, "end": 3223.64, "text": " If it's something like classification for generation, the main thing you probably want", "tokens": [51148, 759, 309, 311, 746, 411, 21538, 337, 5125, 11, 264, 2135, 551, 291, 1391, 528, 51344], "temperature": 0.0, "avg_logprob": -0.2951859112443595, "compression_ratio": 1.695167286245353, "no_speech_prob": 0.00037409228389151394}, {"id": 773, "seek": 320404, "start": 3223.64, "end": 3226.96, "text": " to look at is the actual results.", "tokens": [51344, 281, 574, 412, 307, 264, 3539, 3542, 13, 51510], "temperature": 0.0, "avg_logprob": -0.2951859112443595, "compression_ratio": 1.695167286245353, "no_speech_prob": 0.00037409228389151394}, {"id": 774, "seek": 320404, "start": 3226.96, "end": 3233.04, "text": " And so, and often for whatever reason, I guess, because this is, most people read these electronically,", "tokens": [51510, 400, 370, 11, 293, 2049, 337, 2035, 1778, 11, 286, 2041, 11, 570, 341, 307, 11, 881, 561, 1401, 613, 49677, 11, 51814], "temperature": 0.0, "avg_logprob": -0.2951859112443595, "compression_ratio": 1.695167286245353, "no_speech_prob": 0.00037409228389151394}, {"id": 775, "seek": 323304, "start": 3233.04, "end": 3235.8, "text": " the results often you have to zoom into a lot to be able to see whether they're really", "tokens": [50364, 264, 3542, 2049, 291, 362, 281, 8863, 666, 257, 688, 281, 312, 1075, 281, 536, 1968, 436, 434, 534, 50502], "temperature": 0.0, "avg_logprob": -0.28082441028795746, "compression_ratio": 1.7348993288590604, "no_speech_prob": 0.00017400465731043369}, {"id": 776, "seek": 323304, "start": 3235.8, "end": 3236.8, "text": " good.", "tokens": [50502, 665, 13, 50552], "temperature": 0.0, "avg_logprob": -0.28082441028795746, "compression_ratio": 1.7348993288590604, "no_speech_prob": 0.00017400465731043369}, {"id": 777, "seek": 323304, "start": 3236.8, "end": 3239.72, "text": " So here's the input image.", "tokens": [50552, 407, 510, 311, 264, 4846, 3256, 13, 50698], "temperature": 0.0, "avg_logprob": -0.28082441028795746, "compression_ratio": 1.7348993288590604, "no_speech_prob": 0.00017400465731043369}, {"id": 778, "seek": 323304, "start": 3239.72, "end": 3242.2799999999997, "text": " They want to turn this into an English foxhound.", "tokens": [50698, 814, 528, 281, 1261, 341, 666, 364, 3669, 21026, 71, 554, 13, 50826], "temperature": 0.0, "avg_logprob": -0.28082441028795746, "compression_ratio": 1.7348993288590604, "no_speech_prob": 0.00017400465731043369}, {"id": 779, "seek": 323304, "start": 3242.2799999999997, "end": 3247.08, "text": " So here's the thing they're comparing themselves to, SDEdit, and it changed the composition", "tokens": [50826, 407, 510, 311, 264, 551, 436, 434, 15763, 2969, 281, 11, 14638, 36, 17975, 11, 293, 309, 3105, 264, 12686, 51066], "temperature": 0.0, "avg_logprob": -0.28082441028795746, "compression_ratio": 1.7348993288590604, "no_speech_prob": 0.00017400465731043369}, {"id": 780, "seek": 323304, "start": 3247.08, "end": 3248.92, "text": " quite a lot.", "tokens": [51066, 1596, 257, 688, 13, 51158], "temperature": 0.0, "avg_logprob": -0.28082441028795746, "compression_ratio": 1.7348993288590604, "no_speech_prob": 0.00017400465731043369}, {"id": 781, "seek": 323304, "start": 3248.92, "end": 3251.16, "text": " And their version, it hasn't changed it at all.", "tokens": [51158, 400, 641, 3037, 11, 309, 6132, 380, 3105, 309, 412, 439, 13, 51270], "temperature": 0.0, "avg_logprob": -0.28082441028795746, "compression_ratio": 1.7348993288590604, "no_speech_prob": 0.00017400465731043369}, {"id": 782, "seek": 323304, "start": 3251.16, "end": 3252.7599999999998, "text": " It's only changed the dog.", "tokens": [51270, 467, 311, 787, 3105, 264, 3000, 13, 51350], "temperature": 0.0, "avg_logprob": -0.28082441028795746, "compression_ratio": 1.7348993288590604, "no_speech_prob": 0.00017400465731043369}, {"id": 783, "seek": 323304, "start": 3252.7599999999998, "end": 3259.0, "text": " And Ditto here, semi-trailer truck, SDEdit's totally changed it, DiffEdit hasn't.", "tokens": [51350, 400, 413, 34924, 510, 11, 12909, 12, 17227, 5441, 5898, 11, 14638, 36, 17975, 311, 3879, 3105, 309, 11, 413, 3661, 36, 17975, 6132, 380, 13, 51662], "temperature": 0.0, "avg_logprob": -0.28082441028795746, "compression_ratio": 1.7348993288590604, "no_speech_prob": 0.00017400465731043369}, {"id": 784, "seek": 323304, "start": 3259.0, "end": 3262.52, "text": " So you can kind of get a sense of like, you know, the authors showing off what they're", "tokens": [51662, 407, 291, 393, 733, 295, 483, 257, 2020, 295, 411, 11, 291, 458, 11, 264, 16552, 4099, 766, 437, 436, 434, 51838], "temperature": 0.0, "avg_logprob": -0.28082441028795746, "compression_ratio": 1.7348993288590604, "no_speech_prob": 0.00017400465731043369}, {"id": 785, "seek": 326252, "start": 3262.52, "end": 3263.84, "text": " good at here.", "tokens": [50364, 665, 412, 510, 13, 50430], "temperature": 0.0, "avg_logprob": -0.27593590941610213, "compression_ratio": 1.4866310160427807, "no_speech_prob": 0.0006563707138411701}, {"id": 786, "seek": 326252, "start": 3263.84, "end": 3271.8, "text": " This is what this technique is effective at doing, changing animals and vehicles and so", "tokens": [50430, 639, 307, 437, 341, 6532, 307, 4942, 412, 884, 11, 4473, 4882, 293, 8948, 293, 370, 50828], "temperature": 0.0, "avg_logprob": -0.27593590941610213, "compression_ratio": 1.4866310160427807, "no_speech_prob": 0.0006563707138411701}, {"id": 787, "seek": 326252, "start": 3271.8, "end": 3272.8, "text": " forth.", "tokens": [50828, 5220, 13, 50878], "temperature": 0.0, "avg_logprob": -0.27593590941610213, "compression_ratio": 1.4866310160427807, "no_speech_prob": 0.0006563707138411701}, {"id": 788, "seek": 326252, "start": 3272.8, "end": 3275.96, "text": " It does a very good job of it.", "tokens": [50878, 467, 775, 257, 588, 665, 1691, 295, 309, 13, 51036], "temperature": 0.0, "avg_logprob": -0.27593590941610213, "compression_ratio": 1.4866310160427807, "no_speech_prob": 0.0006563707138411701}, {"id": 789, "seek": 326252, "start": 3275.96, "end": 3280.08, "text": " All right.", "tokens": [51036, 1057, 558, 13, 51242], "temperature": 0.0, "avg_logprob": -0.27593590941610213, "compression_ratio": 1.4866310160427807, "no_speech_prob": 0.0006563707138411701}, {"id": 790, "seek": 326252, "start": 3280.08, "end": 3286.0, "text": " So then there's going to be a conclusion at the end, which I find almost never adds anything", "tokens": [51242, 407, 550, 456, 311, 516, 281, 312, 257, 10063, 412, 264, 917, 11, 597, 286, 915, 1920, 1128, 10860, 1340, 51538], "temperature": 0.0, "avg_logprob": -0.27593590941610213, "compression_ratio": 1.4866310160427807, "no_speech_prob": 0.0006563707138411701}, {"id": 791, "seek": 326252, "start": 3286.0, "end": 3287.88, "text": " on top of what we've already read.", "tokens": [51538, 322, 1192, 295, 437, 321, 600, 1217, 1401, 13, 51632], "temperature": 0.0, "avg_logprob": -0.27593590941610213, "compression_ratio": 1.4866310160427807, "no_speech_prob": 0.0006563707138411701}, {"id": 792, "seek": 328788, "start": 3287.88, "end": 3295.0, "text": " And as you can see, it's very short anyway.", "tokens": [50364, 400, 382, 291, 393, 536, 11, 309, 311, 588, 2099, 4033, 13, 50720], "temperature": 0.0, "avg_logprob": -0.22827168807242681, "compression_ratio": 1.7155555555555555, "no_speech_prob": 0.007815714925527573}, {"id": 793, "seek": 328788, "start": 3295.0, "end": 3299.2000000000003, "text": " Now quite often the appendices are really interesting.", "tokens": [50720, 823, 1596, 2049, 264, 34116, 1473, 366, 534, 1880, 13, 50930], "temperature": 0.0, "avg_logprob": -0.22827168807242681, "compression_ratio": 1.7155555555555555, "no_speech_prob": 0.007815714925527573}, {"id": 794, "seek": 328788, "start": 3299.2000000000003, "end": 3302.2000000000003, "text": " So don't skip over them.", "tokens": [50930, 407, 500, 380, 10023, 670, 552, 13, 51080], "temperature": 0.0, "avg_logprob": -0.22827168807242681, "compression_ratio": 1.7155555555555555, "no_speech_prob": 0.007815714925527573}, {"id": 795, "seek": 328788, "start": 3302.2000000000003, "end": 3304.44, "text": " Often you'll find like more examples of pictures.", "tokens": [51080, 20043, 291, 603, 915, 411, 544, 5110, 295, 5242, 13, 51192], "temperature": 0.0, "avg_logprob": -0.22827168807242681, "compression_ratio": 1.7155555555555555, "no_speech_prob": 0.007815714925527573}, {"id": 796, "seek": 328788, "start": 3304.44, "end": 3309.1, "text": " They might show you some examples of pictures that didn't work very well, stuff like that.", "tokens": [51192, 814, 1062, 855, 291, 512, 5110, 295, 5242, 300, 994, 380, 589, 588, 731, 11, 1507, 411, 300, 13, 51425], "temperature": 0.0, "avg_logprob": -0.22827168807242681, "compression_ratio": 1.7155555555555555, "no_speech_prob": 0.007815714925527573}, {"id": 797, "seek": 328788, "start": 3309.1, "end": 3311.48, "text": " So it's often well worth looking at the appendices.", "tokens": [51425, 407, 309, 311, 2049, 731, 3163, 1237, 412, 264, 34116, 1473, 13, 51544], "temperature": 0.0, "avg_logprob": -0.22827168807242681, "compression_ratio": 1.7155555555555555, "no_speech_prob": 0.007815714925527573}, {"id": 798, "seek": 328788, "start": 3311.48, "end": 3316.7200000000003, "text": " Often some of the most interesting examples are there.", "tokens": [51544, 20043, 512, 295, 264, 881, 1880, 5110, 366, 456, 13, 51806], "temperature": 0.0, "avg_logprob": -0.22827168807242681, "compression_ratio": 1.7155555555555555, "no_speech_prob": 0.007815714925527573}, {"id": 799, "seek": 328788, "start": 3316.7200000000003, "end": 3317.7200000000003, "text": " And that's it.", "tokens": [51806, 400, 300, 311, 309, 13, 51856], "temperature": 0.0, "avg_logprob": -0.22827168807242681, "compression_ratio": 1.7155555555555555, "no_speech_prob": 0.007815714925527573}, {"id": 800, "seek": 331772, "start": 3318.56, "end": 3323.04, "text": " So that is, I guess, our first full-on paper walkthrough.", "tokens": [50406, 407, 300, 307, 11, 286, 2041, 11, 527, 700, 1577, 12, 266, 3035, 1792, 11529, 13, 50630], "temperature": 0.0, "avg_logprob": -0.25233261585235595, "compression_ratio": 1.515, "no_speech_prob": 1.8924871255876496e-05}, {"id": 801, "seek": 331772, "start": 3323.04, "end": 3330.0, "text": " And it's important to remember, this is not like a carefully chosen paper that we've picked", "tokens": [50630, 400, 309, 311, 1021, 281, 1604, 11, 341, 307, 406, 411, 257, 7500, 8614, 3035, 300, 321, 600, 6183, 50978], "temperature": 0.0, "avg_logprob": -0.25233261585235595, "compression_ratio": 1.515, "no_speech_prob": 1.8924871255876496e-05}, {"id": 802, "seek": 331772, "start": 3330.0, "end": 3332.12, "text": " specifically because you can handle it.", "tokens": [50978, 4682, 570, 291, 393, 4813, 309, 13, 51084], "temperature": 0.0, "avg_logprob": -0.25233261585235595, "compression_ratio": 1.515, "no_speech_prob": 1.8924871255876496e-05}, {"id": 803, "seek": 331772, "start": 3332.12, "end": 3336.24, "text": " This is the most interesting paper that came out this week.", "tokens": [51084, 639, 307, 264, 881, 1880, 3035, 300, 1361, 484, 341, 1243, 13, 51290], "temperature": 0.0, "avg_logprob": -0.25233261585235595, "compression_ratio": 1.515, "no_speech_prob": 1.8924871255876496e-05}, {"id": 804, "seek": 331772, "start": 3336.24, "end": 3340.56, "text": " And so it gives you a sense of what it's really like.", "tokens": [51290, 400, 370, 309, 2709, 291, 257, 2020, 295, 437, 309, 311, 534, 411, 13, 51506], "temperature": 0.0, "avg_logprob": -0.25233261585235595, "compression_ratio": 1.515, "no_speech_prob": 1.8924871255876496e-05}, {"id": 805, "seek": 334056, "start": 3340.56, "end": 3349.16, "text": " And for those of you who are ready to try something that's going to stretch you, see", "tokens": [50364, 400, 337, 729, 295, 291, 567, 366, 1919, 281, 853, 746, 300, 311, 516, 281, 5985, 291, 11, 536, 50794], "temperature": 0.0, "avg_logprob": -0.24869115144303702, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.009411046281456947}, {"id": 806, "seek": 334056, "start": 3349.16, "end": 3352.96, "text": " if you can implement any of this paper.", "tokens": [50794, 498, 291, 393, 4445, 604, 295, 341, 3035, 13, 50984], "temperature": 0.0, "avg_logprob": -0.24869115144303702, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.009411046281456947}, {"id": 807, "seek": 334056, "start": 3352.96, "end": 3355.4, "text": " So there are three steps.", "tokens": [50984, 407, 456, 366, 1045, 4439, 13, 51106], "temperature": 0.0, "avg_logprob": -0.24869115144303702, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.009411046281456947}, {"id": 808, "seek": 334056, "start": 3355.4, "end": 3359.7999999999997, "text": " The first step is kind of the most interesting one, which is to automatically generate a", "tokens": [51106, 440, 700, 1823, 307, 733, 295, 264, 881, 1880, 472, 11, 597, 307, 281, 6772, 8460, 257, 51326], "temperature": 0.0, "avg_logprob": -0.24869115144303702, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.009411046281456947}, {"id": 809, "seek": 334056, "start": 3359.7999999999997, "end": 3361.4, "text": " mask.", "tokens": [51326, 6094, 13, 51406], "temperature": 0.0, "avg_logprob": -0.24869115144303702, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.009411046281456947}, {"id": 810, "seek": 334056, "start": 3361.4, "end": 3366.68, "text": " And the information that you have and the code that's in the lesson 9 notebook actually", "tokens": [51406, 400, 264, 1589, 300, 291, 362, 293, 264, 3089, 300, 311, 294, 264, 6898, 1722, 21060, 767, 51670], "temperature": 0.0, "avg_logprob": -0.24869115144303702, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.009411046281456947}, {"id": 811, "seek": 334056, "start": 3366.68, "end": 3369.36, "text": " contains everything you need to do it.", "tokens": [51670, 8306, 1203, 291, 643, 281, 360, 309, 13, 51804], "temperature": 0.0, "avg_logprob": -0.24869115144303702, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.009411046281456947}, {"id": 812, "seek": 334056, "start": 3369.36, "end": 3370.36, "text": " So maybe give it a go.", "tokens": [51804, 407, 1310, 976, 309, 257, 352, 13, 51854], "temperature": 0.0, "avg_logprob": -0.24869115144303702, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.009411046281456947}, {"id": 813, "seek": 337036, "start": 3371.1600000000003, "end": 3377.1200000000003, "text": " See if you can mask out the area of a horse that does not look like a zebra.", "tokens": [50404, 3008, 498, 291, 393, 6094, 484, 264, 1859, 295, 257, 6832, 300, 775, 406, 574, 411, 257, 47060, 13, 50702], "temperature": 0.0, "avg_logprob": -0.2523647880554199, "compression_ratio": 1.7536945812807883, "no_speech_prob": 0.0001273102971026674}, {"id": 814, "seek": 337036, "start": 3377.1200000000003, "end": 3380.2000000000003, "text": " And that's actually useful in itself.", "tokens": [50702, 400, 300, 311, 767, 4420, 294, 2564, 13, 50856], "temperature": 0.0, "avg_logprob": -0.2523647880554199, "compression_ratio": 1.7536945812807883, "no_speech_prob": 0.0001273102971026674}, {"id": 815, "seek": 337036, "start": 3380.2000000000003, "end": 3384.36, "text": " That allows you to create segmentation masks automatically.", "tokens": [50856, 663, 4045, 291, 281, 1884, 9469, 399, 11830, 6772, 13, 51064], "temperature": 0.0, "avg_logprob": -0.2523647880554199, "compression_ratio": 1.7536945812807883, "no_speech_prob": 0.0001273102971026674}, {"id": 816, "seek": 337036, "start": 3384.36, "end": 3386.4, "text": " So that's pretty cool.", "tokens": [51064, 407, 300, 311, 1238, 1627, 13, 51166], "temperature": 0.0, "avg_logprob": -0.2523647880554199, "compression_ratio": 1.7536945812807883, "no_speech_prob": 0.0001273102971026674}, {"id": 817, "seek": 337036, "start": 3386.4, "end": 3390.82, "text": " And then if you get that working, then you can go and try and do step 2.", "tokens": [51166, 400, 550, 498, 291, 483, 300, 1364, 11, 550, 291, 393, 352, 293, 853, 293, 360, 1823, 568, 13, 51387], "temperature": 0.0, "avg_logprob": -0.2523647880554199, "compression_ratio": 1.7536945812807883, "no_speech_prob": 0.0001273102971026674}, {"id": 818, "seek": 337036, "start": 3390.82, "end": 3393.6400000000003, "text": " If you get that working, you can try and do step 3.", "tokens": [51387, 759, 291, 483, 300, 1364, 11, 291, 393, 853, 293, 360, 1823, 805, 13, 51528], "temperature": 0.0, "avg_logprob": -0.2523647880554199, "compression_ratio": 1.7536945812807883, "no_speech_prob": 0.0001273102971026674}, {"id": 819, "seek": 337036, "start": 3393.6400000000003, "end": 3395.36, "text": " And this only came out this week.", "tokens": [51528, 400, 341, 787, 1361, 484, 341, 1243, 13, 51614], "temperature": 0.0, "avg_logprob": -0.2523647880554199, "compression_ratio": 1.7536945812807883, "no_speech_prob": 0.0001273102971026674}, {"id": 820, "seek": 339536, "start": 3395.36, "end": 3403.04, "text": " So I haven't really seen examples of easy-to-use interfaces to this.", "tokens": [50364, 407, 286, 2378, 380, 534, 1612, 5110, 295, 1858, 12, 1353, 12, 438, 28416, 281, 341, 13, 50748], "temperature": 0.0, "avg_logprob": -0.255510657724708, "compression_ratio": 1.5974025974025974, "no_speech_prob": 0.014059302397072315}, {"id": 821, "seek": 339536, "start": 3403.04, "end": 3406.88, "text": " So here's an example of a paper that you could be the first person to create a call interface", "tokens": [50748, 407, 510, 311, 364, 1365, 295, 257, 3035, 300, 291, 727, 312, 264, 700, 954, 281, 1884, 257, 818, 9226, 50940], "temperature": 0.0, "avg_logprob": -0.255510657724708, "compression_ratio": 1.5974025974025974, "no_speech_prob": 0.014059302397072315}, {"id": 822, "seek": 339536, "start": 3406.88, "end": 3407.88, "text": " to it.", "tokens": [50940, 281, 309, 13, 50990], "temperature": 0.0, "avg_logprob": -0.255510657724708, "compression_ratio": 1.5974025974025974, "no_speech_prob": 0.014059302397072315}, {"id": 823, "seek": 339536, "start": 3407.88, "end": 3411.2000000000003, "text": " So there's a fun little project.", "tokens": [50990, 407, 456, 311, 257, 1019, 707, 1716, 13, 51156], "temperature": 0.0, "avg_logprob": -0.255510657724708, "compression_ratio": 1.5974025974025974, "no_speech_prob": 0.014059302397072315}, {"id": 824, "seek": 339536, "start": 3411.2000000000003, "end": 3415.0, "text": " And even if you're watching this a long time after this was released, and everybody's been", "tokens": [51156, 400, 754, 498, 291, 434, 1976, 341, 257, 938, 565, 934, 341, 390, 4736, 11, 293, 2201, 311, 668, 51346], "temperature": 0.0, "avg_logprob": -0.255510657724708, "compression_ratio": 1.5974025974025974, "no_speech_prob": 0.014059302397072315}, {"id": 825, "seek": 339536, "start": 3415.0, "end": 3421.6, "text": " doing this for years, still good homework, I think, to practice if you can.", "tokens": [51346, 884, 341, 337, 924, 11, 920, 665, 14578, 11, 286, 519, 11, 281, 3124, 498, 291, 393, 13, 51676], "temperature": 0.0, "avg_logprob": -0.255510657724708, "compression_ratio": 1.5974025974025974, "no_speech_prob": 0.014059302397072315}, {"id": 826, "seek": 342160, "start": 3421.6, "end": 3432.3199999999997, "text": " All right, I think now's a good time to have a 10-minute break.", "tokens": [50364, 1057, 558, 11, 286, 519, 586, 311, 257, 665, 565, 281, 362, 257, 1266, 12, 18256, 1821, 13, 50900], "temperature": 0.0, "avg_logprob": -0.2875640315394248, "compression_ratio": 1.3395061728395061, "no_speech_prob": 0.0008167188498191535}, {"id": 827, "seek": 342160, "start": 3432.3199999999997, "end": 3438.64, "text": " So I'll see you all back here in 10 minutes.", "tokens": [50900, 407, 286, 603, 536, 291, 439, 646, 510, 294, 1266, 2077, 13, 51216], "temperature": 0.0, "avg_logprob": -0.2875640315394248, "compression_ratio": 1.3395061728395061, "no_speech_prob": 0.0008167188498191535}, {"id": 828, "seek": 342160, "start": 3438.64, "end": 3441.92, "text": " Okay, welcome back.", "tokens": [51216, 1033, 11, 2928, 646, 13, 51380], "temperature": 0.0, "avg_logprob": -0.2875640315394248, "compression_ratio": 1.3395061728395061, "no_speech_prob": 0.0008167188498191535}, {"id": 829, "seek": 342160, "start": 3441.92, "end": 3448.6, "text": " One thing during the break that Diego reminded us about, which I normally describe and I", "tokens": [51380, 1485, 551, 1830, 264, 1821, 300, 16377, 15920, 505, 466, 11, 597, 286, 5646, 6786, 293, 286, 51714], "temperature": 0.0, "avg_logprob": -0.2875640315394248, "compression_ratio": 1.3395061728395061, "no_speech_prob": 0.0008167188498191535}, {"id": 830, "seek": 344860, "start": 3448.6, "end": 3453.6, "text": " totally forgot about this time, is dtechify, which is another really great way to find", "tokens": [50364, 3879, 5298, 466, 341, 565, 11, 307, 274, 25970, 2505, 11, 597, 307, 1071, 534, 869, 636, 281, 915, 50614], "temperature": 0.0, "avg_logprob": -0.34032469529371995, "compression_ratio": 1.5133689839572193, "no_speech_prob": 0.0008558970293961465}, {"id": 831, "seek": 344860, "start": 3453.6, "end": 3455.6, "text": " symbols you don't know about.", "tokens": [50614, 16944, 291, 500, 380, 458, 466, 13, 50714], "temperature": 0.0, "avg_logprob": -0.34032469529371995, "compression_ratio": 1.5133689839572193, "no_speech_prob": 0.0008558970293961465}, {"id": 832, "seek": 344860, "start": 3455.6, "end": 3459.2799999999997, "text": " So let's try it for that expectation.", "tokens": [50714, 407, 718, 311, 853, 309, 337, 300, 14334, 13, 50898], "temperature": 0.0, "avg_logprob": -0.34032469529371995, "compression_ratio": 1.5133689839572193, "no_speech_prob": 0.0008558970293961465}, {"id": 833, "seek": 344860, "start": 3459.2799999999997, "end": 3466.48, "text": " So if you go to dtechify, and you draw the thing.", "tokens": [50898, 407, 498, 291, 352, 281, 274, 25970, 2505, 11, 293, 291, 2642, 264, 551, 13, 51258], "temperature": 0.0, "avg_logprob": -0.34032469529371995, "compression_ratio": 1.5133689839572193, "no_speech_prob": 0.0008558970293961465}, {"id": 834, "seek": 344860, "start": 3466.48, "end": 3472.88, "text": " It doesn't always work fantastically well, but sometimes it works very nicely.", "tokens": [51258, 467, 1177, 380, 1009, 589, 4115, 22808, 731, 11, 457, 2171, 309, 1985, 588, 9594, 13, 51578], "temperature": 0.0, "avg_logprob": -0.34032469529371995, "compression_ratio": 1.5133689839572193, "no_speech_prob": 0.0008558970293961465}, {"id": 835, "seek": 347288, "start": 3472.88, "end": 3479.2000000000003, "text": " Yeah, in this case, not quite.", "tokens": [50364, 865, 11, 294, 341, 1389, 11, 406, 1596, 13, 50680], "temperature": 0.0, "avg_logprob": -0.3591104719373915, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.003075331449508667}, {"id": 836, "seek": 347288, "start": 3479.2000000000003, "end": 3482.92, "text": " What about the double line thing?", "tokens": [50680, 708, 466, 264, 3834, 1622, 551, 30, 50866], "temperature": 0.0, "avg_logprob": -0.3591104719373915, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.003075331449508667}, {"id": 837, "seek": 347288, "start": 3482.92, "end": 3489.92, "text": " It's good to know all the techniques, I guess.", "tokens": [50866, 467, 311, 665, 281, 458, 439, 264, 7512, 11, 286, 2041, 13, 51216], "temperature": 0.0, "avg_logprob": -0.3591104719373915, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.003075331449508667}, {"id": 838, "seek": 347288, "start": 3489.92, "end": 3494.32, "text": " I think it could do this one.", "tokens": [51216, 286, 519, 309, 727, 360, 341, 472, 13, 51436], "temperature": 0.0, "avg_logprob": -0.3591104719373915, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.003075331449508667}, {"id": 839, "seek": 347288, "start": 3494.32, "end": 3498.88, "text": " I guess part of the problem is there's so many options that actually, you know, okay,", "tokens": [51436, 286, 2041, 644, 295, 264, 1154, 307, 456, 311, 370, 867, 3956, 300, 767, 11, 291, 458, 11, 1392, 11, 51664], "temperature": 0.0, "avg_logprob": -0.3591104719373915, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.003075331449508667}, {"id": 840, "seek": 347288, "start": 3498.88, "end": 3501.32, "text": " in this case, it wasn't particularly helpful.", "tokens": [51664, 294, 341, 1389, 11, 309, 2067, 380, 4098, 4961, 13, 51786], "temperature": 0.0, "avg_logprob": -0.3591104719373915, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.003075331449508667}, {"id": 841, "seek": 347288, "start": 3501.32, "end": 3502.32, "text": " Normally it's more helpful than that.", "tokens": [51786, 17424, 309, 311, 544, 4961, 813, 300, 13, 51836], "temperature": 0.0, "avg_logprob": -0.3591104719373915, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.003075331449508667}, {"id": 842, "seek": 350232, "start": 3502.76, "end": 3508.88, "text": " I mean, if we use a simple one like epsilon, I think it should be fine.", "tokens": [50386, 286, 914, 11, 498, 321, 764, 257, 2199, 472, 411, 17889, 11, 286, 519, 309, 820, 312, 2489, 13, 50692], "temperature": 0.0, "avg_logprob": -0.3474282678568138, "compression_ratio": 1.5258620689655173, "no_speech_prob": 0.0003740922547876835}, {"id": 843, "seek": 350232, "start": 3508.88, "end": 3510.52, "text": " There's a lot of room to improve this app, actually.", "tokens": [50692, 821, 311, 257, 688, 295, 1808, 281, 3470, 341, 724, 11, 767, 13, 50774], "temperature": 0.0, "avg_logprob": -0.3474282678568138, "compression_ratio": 1.5258620689655173, "no_speech_prob": 0.0003740922547876835}, {"id": 844, "seek": 350232, "start": 3510.52, "end": 3517.1600000000003, "text": " If anybody's interested in a project, I think you could make it, you know, more successful.", "tokens": [50774, 759, 4472, 311, 3102, 294, 257, 1716, 11, 286, 519, 291, 727, 652, 309, 11, 291, 458, 11, 544, 4406, 13, 51106], "temperature": 0.0, "avg_logprob": -0.3474282678568138, "compression_ratio": 1.5258620689655173, "no_speech_prob": 0.0003740922547876835}, {"id": 845, "seek": 350232, "start": 3517.1600000000003, "end": 3518.1600000000003, "text": " Okay, that's there you go.", "tokens": [51106, 1033, 11, 300, 311, 456, 291, 352, 13, 51156], "temperature": 0.0, "avg_logprob": -0.3474282678568138, "compression_ratio": 1.5258620689655173, "no_speech_prob": 0.0003740922547876835}, {"id": 846, "seek": 350232, "start": 3518.1600000000003, "end": 3519.1600000000003, "text": " Sigma sum, that's cool.", "tokens": [51156, 36595, 2408, 11, 300, 311, 1627, 13, 51206], "temperature": 0.0, "avg_logprob": -0.3474282678568138, "compression_ratio": 1.5258620689655173, "no_speech_prob": 0.0003740922547876835}, {"id": 847, "seek": 350232, "start": 3519.1600000000003, "end": 3521.84, "text": " Anyway, so there's, it's another useful thing to know about.", "tokens": [51206, 5684, 11, 370, 456, 311, 11, 309, 311, 1071, 4420, 551, 281, 458, 466, 13, 51340], "temperature": 0.0, "avg_logprob": -0.3474282678568138, "compression_ratio": 1.5258620689655173, "no_speech_prob": 0.0003740922547876835}, {"id": 848, "seek": 350232, "start": 3521.84, "end": 3523.96, "text": " Just Google for dtechify.", "tokens": [51340, 1449, 3329, 337, 274, 25970, 2505, 13, 51446], "temperature": 0.0, "avg_logprob": -0.3474282678568138, "compression_ratio": 1.5258620689655173, "no_speech_prob": 0.0003740922547876835}, {"id": 849, "seek": 352396, "start": 3524.08, "end": 3532.52, "text": " Okay, so let's move on with our from the foundations now.", "tokens": [50370, 1033, 11, 370, 718, 311, 1286, 322, 365, 527, 490, 264, 22467, 586, 13, 50792], "temperature": 0.0, "avg_logprob": -0.2659168736688022, "compression_ratio": 1.3246753246753247, "no_speech_prob": 0.0018101413734257221}, {"id": 850, "seek": 352396, "start": 3532.52, "end": 3541.76, "text": " And so we were working on trying to at least get the start of a forward pass of a linear", "tokens": [50792, 400, 370, 321, 645, 1364, 322, 1382, 281, 412, 1935, 483, 264, 722, 295, 257, 2128, 1320, 295, 257, 8213, 51254], "temperature": 0.0, "avg_logprob": -0.2659168736688022, "compression_ratio": 1.3246753246753247, "no_speech_prob": 0.0018101413734257221}, {"id": 851, "seek": 352396, "start": 3541.76, "end": 3548.12, "text": " model or a simple multi-layer perceptron for MNIST going.", "tokens": [51254, 2316, 420, 257, 2199, 4825, 12, 8376, 260, 43276, 2044, 337, 376, 45, 19756, 516, 13, 51572], "temperature": 0.0, "avg_logprob": -0.2659168736688022, "compression_ratio": 1.3246753246753247, "no_speech_prob": 0.0018101413734257221}, {"id": 852, "seek": 354812, "start": 3548.2799999999997, "end": 3552.3199999999997, "text": " And we had successfully created a basic tensor.", "tokens": [50372, 400, 321, 632, 10727, 2942, 257, 3875, 40863, 13, 50574], "temperature": 0.0, "avg_logprob": -0.26740597389839793, "compression_ratio": 1.5108695652173914, "no_speech_prob": 0.0015978035517036915}, {"id": 853, "seek": 354812, "start": 3552.3199999999997, "end": 3556.2799999999997, "text": " We've got some random numbers going.", "tokens": [50574, 492, 600, 658, 512, 4974, 3547, 516, 13, 50772], "temperature": 0.0, "avg_logprob": -0.26740597389839793, "compression_ratio": 1.5108695652173914, "no_speech_prob": 0.0015978035517036915}, {"id": 854, "seek": 354812, "start": 3556.2799999999997, "end": 3562.88, "text": " So what we now need to do is we now need to be able to multiply these things together,", "tokens": [50772, 407, 437, 321, 586, 643, 281, 360, 307, 321, 586, 643, 281, 312, 1075, 281, 12972, 613, 721, 1214, 11, 51102], "temperature": 0.0, "avg_logprob": -0.26740597389839793, "compression_ratio": 1.5108695652173914, "no_speech_prob": 0.0015978035517036915}, {"id": 855, "seek": 354812, "start": 3562.88, "end": 3565.24, "text": " matrix multiplication.", "tokens": [51102, 8141, 27290, 13, 51220], "temperature": 0.0, "avg_logprob": -0.26740597389839793, "compression_ratio": 1.5108695652173914, "no_speech_prob": 0.0015978035517036915}, {"id": 856, "seek": 354812, "start": 3565.24, "end": 3577.94, "text": " So matrix multiplication, to remind you, in this case, so we're doing MNIST, right?", "tokens": [51220, 407, 8141, 27290, 11, 281, 4160, 291, 11, 294, 341, 1389, 11, 370, 321, 434, 884, 376, 45, 19756, 11, 558, 30, 51855], "temperature": 0.0, "avg_logprob": -0.26740597389839793, "compression_ratio": 1.5108695652173914, "no_speech_prob": 0.0015978035517036915}, {"id": 857, "seek": 357794, "start": 3578.76, "end": 3582.82, "text": " So we've got, I think we're going to use a subset.", "tokens": [50405, 407, 321, 600, 658, 11, 286, 519, 321, 434, 516, 281, 764, 257, 25993, 13, 50608], "temperature": 0.0, "avg_logprob": -0.3273922484598042, "compression_ratio": 1.5771812080536913, "no_speech_prob": 0.00039821199607104063}, {"id": 858, "seek": 357794, "start": 3582.82, "end": 3583.82, "text": " Let's see.", "tokens": [50608, 961, 311, 536, 13, 50658], "temperature": 0.0, "avg_logprob": -0.3273922484598042, "compression_ratio": 1.5771812080536913, "no_speech_prob": 0.00039821199607104063}, {"id": 859, "seek": 357794, "start": 3583.82, "end": 3585.42, "text": " Yeah, okay.", "tokens": [50658, 865, 11, 1392, 13, 50738], "temperature": 0.0, "avg_logprob": -0.3273922484598042, "compression_ratio": 1.5771812080536913, "no_speech_prob": 0.00039821199607104063}, {"id": 860, "seek": 357794, "start": 3585.42, "end": 3590.94, "text": " So we're going to create a matrix called M1, which is just the first five digits.", "tokens": [50738, 407, 321, 434, 516, 281, 1884, 257, 8141, 1219, 376, 16, 11, 597, 307, 445, 264, 700, 1732, 27011, 13, 51014], "temperature": 0.0, "avg_logprob": -0.3273922484598042, "compression_ratio": 1.5771812080536913, "no_speech_prob": 0.00039821199607104063}, {"id": 861, "seek": 357794, "start": 3590.94, "end": 3596.5, "text": " So M1 will be the first five digits.", "tokens": [51014, 407, 376, 16, 486, 312, 264, 700, 1732, 27011, 13, 51292], "temperature": 0.0, "avg_logprob": -0.3273922484598042, "compression_ratio": 1.5771812080536913, "no_speech_prob": 0.00039821199607104063}, {"id": 862, "seek": 357794, "start": 3596.5, "end": 3599.7400000000002, "text": " So five rows.", "tokens": [51292, 407, 1732, 13241, 13, 51454], "temperature": 0.0, "avg_logprob": -0.3273922484598042, "compression_ratio": 1.5771812080536913, "no_speech_prob": 0.00039821199607104063}, {"id": 863, "seek": 357794, "start": 3599.7400000000002, "end": 3605.46, "text": " And dot dot dot dot dot dot.", "tokens": [51454, 400, 5893, 5893, 5893, 5893, 5893, 5893, 13, 51740], "temperature": 0.0, "avg_logprob": -0.3273922484598042, "compression_ratio": 1.5771812080536913, "no_speech_prob": 0.00039821199607104063}, {"id": 864, "seek": 360546, "start": 3605.46, "end": 3608.18, "text": " And then 780, what was it again?", "tokens": [50364, 400, 550, 1614, 4702, 11, 437, 390, 309, 797, 30, 50500], "temperature": 0.0, "avg_logprob": -0.3578026294708252, "compression_ratio": 1.4125, "no_speech_prob": 0.00016092986334115267}, {"id": 865, "seek": 360546, "start": 3608.18, "end": 3609.18, "text": " 784 columns.", "tokens": [50500, 1614, 25494, 13766, 13, 50550], "temperature": 0.0, "avg_logprob": -0.3578026294708252, "compression_ratio": 1.4125, "no_speech_prob": 0.00016092986334115267}, {"id": 866, "seek": 360546, "start": 3609.18, "end": 3610.18, "text": " 784 columns.", "tokens": [50550, 1614, 25494, 13766, 13, 50600], "temperature": 0.0, "avg_logprob": -0.3578026294708252, "compression_ratio": 1.4125, "no_speech_prob": 0.00016092986334115267}, {"id": 867, "seek": 360546, "start": 3610.18, "end": 3614.78, "text": " Because it's 28 by 28 pixels.", "tokens": [50600, 1436, 309, 311, 7562, 538, 7562, 18668, 13, 50830], "temperature": 0.0, "avg_logprob": -0.3578026294708252, "compression_ratio": 1.4125, "no_speech_prob": 0.00016092986334115267}, {"id": 868, "seek": 360546, "start": 3614.78, "end": 3616.34, "text": " And we flattened it out.", "tokens": [50830, 400, 321, 24183, 292, 309, 484, 13, 50908], "temperature": 0.0, "avg_logprob": -0.3578026294708252, "compression_ratio": 1.4125, "no_speech_prob": 0.00016092986334115267}, {"id": 869, "seek": 360546, "start": 3616.34, "end": 3621.14, "text": " So this is our first matrix in our matrix multiplication.", "tokens": [50908, 407, 341, 307, 527, 700, 8141, 294, 527, 8141, 27290, 13, 51148], "temperature": 0.0, "avg_logprob": -0.3578026294708252, "compression_ratio": 1.4125, "no_speech_prob": 0.00016092986334115267}, {"id": 870, "seek": 360546, "start": 3621.14, "end": 3629.26, "text": " And then we're going to multiply that by some weights.", "tokens": [51148, 400, 550, 321, 434, 516, 281, 12972, 300, 538, 512, 17443, 13, 51554], "temperature": 0.0, "avg_logprob": -0.3578026294708252, "compression_ratio": 1.4125, "no_speech_prob": 0.00016092986334115267}, {"id": 871, "seek": 362926, "start": 3629.26, "end": 3635.98, "text": " So the weights are going to be 784 by 10 random numbers.", "tokens": [50364, 407, 264, 17443, 366, 516, 281, 312, 1614, 25494, 538, 1266, 4974, 3547, 13, 50700], "temperature": 0.0, "avg_logprob": -0.24027345055028013, "compression_ratio": 1.5759493670886076, "no_speech_prob": 0.001455053687095642}, {"id": 872, "seek": 362926, "start": 3635.98, "end": 3643.3, "text": " So for every one of these 784 pixels, each one is going to have a weight.", "tokens": [50700, 407, 337, 633, 472, 295, 613, 1614, 25494, 18668, 11, 1184, 472, 307, 516, 281, 362, 257, 3364, 13, 51066], "temperature": 0.0, "avg_logprob": -0.24027345055028013, "compression_ratio": 1.5759493670886076, "no_speech_prob": 0.001455053687095642}, {"id": 873, "seek": 362926, "start": 3643.3, "end": 3647.0200000000004, "text": " So 784 down here.", "tokens": [51066, 407, 1614, 25494, 760, 510, 13, 51252], "temperature": 0.0, "avg_logprob": -0.24027345055028013, "compression_ratio": 1.5759493670886076, "no_speech_prob": 0.001455053687095642}, {"id": 874, "seek": 362926, "start": 3647.0200000000004, "end": 3652.36, "text": " 784 by 10.", "tokens": [51252, 1614, 25494, 538, 1266, 13, 51519], "temperature": 0.0, "avg_logprob": -0.24027345055028013, "compression_ratio": 1.5759493670886076, "no_speech_prob": 0.001455053687095642}, {"id": 875, "seek": 362926, "start": 3652.36, "end": 3659.0600000000004, "text": " So this first column, for example, is going to tell us all the weights in order to figure", "tokens": [51519, 407, 341, 700, 7738, 11, 337, 1365, 11, 307, 516, 281, 980, 505, 439, 264, 17443, 294, 1668, 281, 2573, 51854], "temperature": 0.0, "avg_logprob": -0.24027345055028013, "compression_ratio": 1.5759493670886076, "no_speech_prob": 0.001455053687095642}, {"id": 876, "seek": 365906, "start": 3659.86, "end": 3660.86, "text": " out if something's a zero.", "tokens": [50404, 484, 498, 746, 311, 257, 4018, 13, 50454], "temperature": 0.0, "avg_logprob": -0.2768520695148128, "compression_ratio": 1.8238095238095238, "no_speech_prob": 3.120189649052918e-05}, {"id": 877, "seek": 365906, "start": 3660.86, "end": 3664.14, "text": " And the second column will have all the weights in deciding the probability of something's", "tokens": [50454, 400, 264, 1150, 7738, 486, 362, 439, 264, 17443, 294, 17990, 264, 8482, 295, 746, 311, 50618], "temperature": 0.0, "avg_logprob": -0.2768520695148128, "compression_ratio": 1.8238095238095238, "no_speech_prob": 3.120189649052918e-05}, {"id": 878, "seek": 365906, "start": 3664.14, "end": 3665.14, "text": " a one, and so forth.", "tokens": [50618, 257, 472, 11, 293, 370, 5220, 13, 50668], "temperature": 0.0, "avg_logprob": -0.2768520695148128, "compression_ratio": 1.8238095238095238, "no_speech_prob": 3.120189649052918e-05}, {"id": 879, "seek": 365906, "start": 3665.14, "end": 3667.46, "text": " Assuming we're just doing a linear model.", "tokens": [50668, 6281, 24919, 321, 434, 445, 884, 257, 8213, 2316, 13, 50784], "temperature": 0.0, "avg_logprob": -0.2768520695148128, "compression_ratio": 1.8238095238095238, "no_speech_prob": 3.120189649052918e-05}, {"id": 880, "seek": 365906, "start": 3667.46, "end": 3670.96, "text": " And so then we're going to multiply these two matrices together.", "tokens": [50784, 400, 370, 550, 321, 434, 516, 281, 12972, 613, 732, 32284, 1214, 13, 50959], "temperature": 0.0, "avg_logprob": -0.2768520695148128, "compression_ratio": 1.8238095238095238, "no_speech_prob": 3.120189649052918e-05}, {"id": 881, "seek": 365906, "start": 3670.96, "end": 3680.2599999999998, "text": " So when we multiply matrices together, we take row one of matrix one, and we take column", "tokens": [50959, 407, 562, 321, 12972, 32284, 1214, 11, 321, 747, 5386, 472, 295, 8141, 472, 11, 293, 321, 747, 7738, 51424], "temperature": 0.0, "avg_logprob": -0.2768520695148128, "compression_ratio": 1.8238095238095238, "no_speech_prob": 3.120189649052918e-05}, {"id": 882, "seek": 365906, "start": 3680.2599999999998, "end": 3686.02, "text": " one of matrix two, and we take each one in turn.", "tokens": [51424, 472, 295, 8141, 732, 11, 293, 321, 747, 1184, 472, 294, 1261, 13, 51712], "temperature": 0.0, "avg_logprob": -0.2768520695148128, "compression_ratio": 1.8238095238095238, "no_speech_prob": 3.120189649052918e-05}, {"id": 883, "seek": 368602, "start": 3686.02, "end": 3691.38, "text": " So we take this one, and we take this one, and we multiply them together.", "tokens": [50364, 407, 321, 747, 341, 472, 11, 293, 321, 747, 341, 472, 11, 293, 321, 12972, 552, 1214, 13, 50632], "temperature": 0.0, "avg_logprob": -0.22059628870580103, "compression_ratio": 2.0145985401459856, "no_speech_prob": 0.0005274759023450315}, {"id": 884, "seek": 368602, "start": 3691.38, "end": 3698.62, "text": " And then we take this one, and this one, and we multiply them together.", "tokens": [50632, 400, 550, 321, 747, 341, 472, 11, 293, 341, 472, 11, 293, 321, 12972, 552, 1214, 13, 50994], "temperature": 0.0, "avg_logprob": -0.22059628870580103, "compression_ratio": 2.0145985401459856, "no_speech_prob": 0.0005274759023450315}, {"id": 885, "seek": 368602, "start": 3698.62, "end": 3705.3, "text": " And we do that for every element-wise pair, and then we add them all up.", "tokens": [50994, 400, 321, 360, 300, 337, 633, 4478, 12, 3711, 6119, 11, 293, 550, 321, 909, 552, 439, 493, 13, 51328], "temperature": 0.0, "avg_logprob": -0.22059628870580103, "compression_ratio": 2.0145985401459856, "no_speech_prob": 0.0005274759023450315}, {"id": 886, "seek": 368602, "start": 3705.3, "end": 3715.22, "text": " And that would give us the value for the very first cell.", "tokens": [51328, 400, 300, 576, 976, 505, 264, 2158, 337, 264, 588, 700, 2815, 13, 51824], "temperature": 0.0, "avg_logprob": -0.22059628870580103, "compression_ratio": 2.0145985401459856, "no_speech_prob": 0.0005274759023450315}, {"id": 887, "seek": 371522, "start": 3715.4199999999996, "end": 3717.5, "text": " So that would go in here.", "tokens": [50374, 407, 300, 576, 352, 294, 510, 13, 50478], "temperature": 0.0, "avg_logprob": -0.3005634221163663, "compression_ratio": 1.572139303482587, "no_speech_prob": 0.00045120681170374155}, {"id": 888, "seek": 371522, "start": 3717.5, "end": 3721.1, "text": " That's what matrix multiplication is.", "tokens": [50478, 663, 311, 437, 8141, 27290, 307, 13, 50658], "temperature": 0.0, "avg_logprob": -0.3005634221163663, "compression_ratio": 1.572139303482587, "no_speech_prob": 0.00045120681170374155}, {"id": 889, "seek": 371522, "start": 3721.1, "end": 3731.2599999999998, "text": " OK, so let's go ahead then and create our random numbers for the weights, since we're", "tokens": [50658, 2264, 11, 370, 718, 311, 352, 2286, 550, 293, 1884, 527, 4974, 3547, 337, 264, 17443, 11, 1670, 321, 434, 51166], "temperature": 0.0, "avg_logprob": -0.3005634221163663, "compression_ratio": 1.572139303482587, "no_speech_prob": 0.00045120681170374155}, {"id": 890, "seek": 371522, "start": 3731.2599999999998, "end": 3733.8999999999996, "text": " allowed to use random number generators now.", "tokens": [51166, 4350, 281, 764, 4974, 1230, 38662, 586, 13, 51298], "temperature": 0.0, "avg_logprob": -0.3005634221163663, "compression_ratio": 1.572139303482587, "no_speech_prob": 0.00045120681170374155}, {"id": 891, "seek": 371522, "start": 3733.8999999999996, "end": 3738.1, "text": " And for the bias, we'll just use a bunch of zeros to start with.", "tokens": [51298, 400, 337, 264, 12577, 11, 321, 603, 445, 764, 257, 3840, 295, 35193, 281, 722, 365, 13, 51508], "temperature": 0.0, "avg_logprob": -0.3005634221163663, "compression_ratio": 1.572139303482587, "no_speech_prob": 0.00045120681170374155}, {"id": 892, "seek": 371522, "start": 3738.1, "end": 3742.5, "text": " So the bias is just what we're going to add to each one.", "tokens": [51508, 407, 264, 12577, 307, 445, 437, 321, 434, 516, 281, 909, 281, 1184, 472, 13, 51728], "temperature": 0.0, "avg_logprob": -0.3005634221163663, "compression_ratio": 1.572139303482587, "no_speech_prob": 0.00045120681170374155}, {"id": 893, "seek": 374250, "start": 3742.5, "end": 3746.14, "text": " And so for our matrix multiplication, we're going to be doing a little mini-batch here.", "tokens": [50364, 400, 370, 337, 527, 8141, 27290, 11, 321, 434, 516, 281, 312, 884, 257, 707, 8382, 12, 65, 852, 510, 13, 50546], "temperature": 0.0, "avg_logprob": -0.2838989429259568, "compression_ratio": 1.4919786096256684, "no_speech_prob": 0.0008693593554198742}, {"id": 894, "seek": 374250, "start": 3746.14, "end": 3759.38, "text": " We're going to be doing five rows of, as we discussed, five images flattened out.", "tokens": [50546, 492, 434, 516, 281, 312, 884, 1732, 13241, 295, 11, 382, 321, 7152, 11, 1732, 5267, 24183, 292, 484, 13, 51208], "temperature": 0.0, "avg_logprob": -0.2838989429259568, "compression_ratio": 1.4919786096256684, "no_speech_prob": 0.0008693593554198742}, {"id": 895, "seek": 374250, "start": 3759.38, "end": 3764.26, "text": " And then multiply by this weights matrix.", "tokens": [51208, 400, 550, 12972, 538, 341, 17443, 8141, 13, 51452], "temperature": 0.0, "avg_logprob": -0.2838989429259568, "compression_ratio": 1.4919786096256684, "no_speech_prob": 0.0008693593554198742}, {"id": 896, "seek": 374250, "start": 3764.26, "end": 3765.26, "text": " So here are the shapes.", "tokens": [51452, 407, 510, 366, 264, 10854, 13, 51502], "temperature": 0.0, "avg_logprob": -0.2838989429259568, "compression_ratio": 1.4919786096256684, "no_speech_prob": 0.0008693593554198742}, {"id": 897, "seek": 374250, "start": 3765.26, "end": 3768.18, "text": " M1 is 5 by 784, as we saw.", "tokens": [51502, 376, 16, 307, 1025, 538, 1614, 25494, 11, 382, 321, 1866, 13, 51648], "temperature": 0.0, "avg_logprob": -0.2838989429259568, "compression_ratio": 1.4919786096256684, "no_speech_prob": 0.0008693593554198742}, {"id": 898, "seek": 374250, "start": 3768.18, "end": 3770.02, "text": " M2 is 784 by 10.", "tokens": [51648, 376, 17, 307, 1614, 25494, 538, 1266, 13, 51740], "temperature": 0.0, "avg_logprob": -0.2838989429259568, "compression_ratio": 1.4919786096256684, "no_speech_prob": 0.0008693593554198742}, {"id": 899, "seek": 377002, "start": 3770.06, "end": 3773.7, "text": " OK, so keep those in mind.", "tokens": [50366, 2264, 11, 370, 1066, 729, 294, 1575, 13, 50548], "temperature": 0.0, "avg_logprob": -0.29094714960776086, "compression_ratio": 1.721951219512195, "no_speech_prob": 0.00020988269534427673}, {"id": 900, "seek": 377002, "start": 3773.7, "end": 3775.3, "text": " So here's a handy thing.", "tokens": [50548, 407, 510, 311, 257, 13239, 551, 13, 50628], "temperature": 0.0, "avg_logprob": -0.29094714960776086, "compression_ratio": 1.721951219512195, "no_speech_prob": 0.00020988269534427673}, {"id": 901, "seek": 377002, "start": 3775.3, "end": 3780.38, "text": " M1.shape contains two numbers, and I want to pull them out.", "tokens": [50628, 376, 16, 13, 82, 42406, 8306, 732, 3547, 11, 293, 286, 528, 281, 2235, 552, 484, 13, 50882], "temperature": 0.0, "avg_logprob": -0.29094714960776086, "compression_ratio": 1.721951219512195, "no_speech_prob": 0.00020988269534427673}, {"id": 902, "seek": 377002, "start": 3780.38, "end": 3783.58, "text": " I want to call the...", "tokens": [50882, 286, 528, 281, 818, 264, 485, 51042], "temperature": 0.0, "avg_logprob": -0.29094714960776086, "compression_ratio": 1.721951219512195, "no_speech_prob": 0.00020988269534427673}, {"id": 903, "seek": 377002, "start": 3783.58, "end": 3785.14, "text": " I'm going to think of that as...", "tokens": [51042, 286, 478, 516, 281, 519, 295, 300, 382, 485, 51120], "temperature": 0.0, "avg_logprob": -0.29094714960776086, "compression_ratio": 1.721951219512195, "no_speech_prob": 0.00020988269534427673}, {"id": 904, "seek": 377002, "start": 3785.14, "end": 3788.5, "text": " I'm going to actually think of this as like A and B, rather than M1 and M2.", "tokens": [51120, 286, 478, 516, 281, 767, 519, 295, 341, 382, 411, 316, 293, 363, 11, 2831, 813, 376, 16, 293, 376, 17, 13, 51288], "temperature": 0.0, "avg_logprob": -0.29094714960776086, "compression_ratio": 1.721951219512195, "no_speech_prob": 0.00020988269534427673}, {"id": 905, "seek": 377002, "start": 3788.5, "end": 3790.34, "text": " So this is like A and B.", "tokens": [51288, 407, 341, 307, 411, 316, 293, 363, 13, 51380], "temperature": 0.0, "avg_logprob": -0.29094714960776086, "compression_ratio": 1.721951219512195, "no_speech_prob": 0.00020988269534427673}, {"id": 906, "seek": 377002, "start": 3790.34, "end": 3797.86, "text": " So the number of rows in A, and the number of columns in A, if I say equals M1.shape,", "tokens": [51380, 407, 264, 1230, 295, 13241, 294, 316, 11, 293, 264, 1230, 295, 13766, 294, 316, 11, 498, 286, 584, 6915, 376, 16, 13, 82, 42406, 11, 51756], "temperature": 0.0, "avg_logprob": -0.29094714960776086, "compression_ratio": 1.721951219512195, "no_speech_prob": 0.00020988269534427673}, {"id": 907, "seek": 379786, "start": 3797.86, "end": 3802.38, "text": " that will put 5 in AR, and 784 in AC.", "tokens": [50364, 300, 486, 829, 1025, 294, 8943, 11, 293, 1614, 25494, 294, 8157, 13, 50590], "temperature": 0.0, "avg_logprob": -0.2145782709121704, "compression_ratio": 1.5444015444015444, "no_speech_prob": 0.0032224333845078945}, {"id": 908, "seek": 379786, "start": 3802.38, "end": 3803.54, "text": " So you'll probably notice this.", "tokens": [50590, 407, 291, 603, 1391, 3449, 341, 13, 50648], "temperature": 0.0, "avg_logprob": -0.2145782709121704, "compression_ratio": 1.5444015444015444, "no_speech_prob": 0.0032224333845078945}, {"id": 909, "seek": 379786, "start": 3803.54, "end": 3805.02, "text": " I do this a lot, this destructuring.", "tokens": [50648, 286, 360, 341, 257, 688, 11, 341, 2677, 1757, 1345, 13, 50722], "temperature": 0.0, "avg_logprob": -0.2145782709121704, "compression_ratio": 1.5444015444015444, "no_speech_prob": 0.0032224333845078945}, {"id": 910, "seek": 379786, "start": 3805.02, "end": 3806.82, "text": " We talked about it last week too.", "tokens": [50722, 492, 2825, 466, 309, 1036, 1243, 886, 13, 50812], "temperature": 0.0, "avg_logprob": -0.2145782709121704, "compression_ratio": 1.5444015444015444, "no_speech_prob": 0.0032224333845078945}, {"id": 911, "seek": 379786, "start": 3806.82, "end": 3811.38, "text": " So we can do the same for M2.shape, put that into B rows and B columns.", "tokens": [50812, 407, 321, 393, 360, 264, 912, 337, 376, 17, 13, 82, 42406, 11, 829, 300, 666, 363, 13241, 293, 363, 13766, 13, 51040], "temperature": 0.0, "avg_logprob": -0.2145782709121704, "compression_ratio": 1.5444015444015444, "no_speech_prob": 0.0032224333845078945}, {"id": 912, "seek": 379786, "start": 3811.38, "end": 3818.26, "text": " And so now if I write out ARAC and BRBC, you can again see the same things from the sizes.", "tokens": [51040, 400, 370, 586, 498, 286, 2464, 484, 8943, 4378, 293, 10262, 7869, 11, 291, 393, 797, 536, 264, 912, 721, 490, 264, 11602, 13, 51384], "temperature": 0.0, "avg_logprob": -0.2145782709121704, "compression_ratio": 1.5444015444015444, "no_speech_prob": 0.0032224333845078945}, {"id": 913, "seek": 379786, "start": 3818.26, "end": 3822.52, "text": " So that's a good way to kind of give us the stuff we have to loop through.", "tokens": [51384, 407, 300, 311, 257, 665, 636, 281, 733, 295, 976, 505, 264, 1507, 321, 362, 281, 6367, 807, 13, 51597], "temperature": 0.0, "avg_logprob": -0.2145782709121704, "compression_ratio": 1.5444015444015444, "no_speech_prob": 0.0032224333845078945}, {"id": 914, "seek": 379786, "start": 3822.52, "end": 3823.52, "text": " So here's our result.", "tokens": [51597, 407, 510, 311, 527, 1874, 13, 51647], "temperature": 0.0, "avg_logprob": -0.2145782709121704, "compression_ratio": 1.5444015444015444, "no_speech_prob": 0.0032224333845078945}, {"id": 915, "seek": 382352, "start": 3823.52, "end": 3831.36, "text": " So our resultant tensor, well we're multiplying together all of these 784 things and adding", "tokens": [50364, 407, 527, 1874, 394, 40863, 11, 731, 321, 434, 30955, 1214, 439, 295, 613, 1614, 25494, 721, 293, 5127, 50756], "temperature": 0.0, "avg_logprob": -0.25963090967248986, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.0004173147026449442}, {"id": 916, "seek": 382352, "start": 3831.36, "end": 3832.36, "text": " them up.", "tokens": [50756, 552, 493, 13, 50806], "temperature": 0.0, "avg_logprob": -0.25963090967248986, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.0004173147026449442}, {"id": 917, "seek": 382352, "start": 3832.36, "end": 3838.28, "text": " So the resultant tensor is going to be 5 by 10.", "tokens": [50806, 407, 264, 1874, 394, 40863, 307, 516, 281, 312, 1025, 538, 1266, 13, 51102], "temperature": 0.0, "avg_logprob": -0.25963090967248986, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.0004173147026449442}, {"id": 918, "seek": 382352, "start": 3838.28, "end": 3845.52, "text": " And then each thing in here is the result of multiplying and adding 784 pairs.", "tokens": [51102, 400, 550, 1184, 551, 294, 510, 307, 264, 1874, 295, 30955, 293, 5127, 1614, 25494, 15494, 13, 51464], "temperature": 0.0, "avg_logprob": -0.25963090967248986, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.0004173147026449442}, {"id": 919, "seek": 382352, "start": 3845.52, "end": 3852.84, "text": " So the result here is going to start with zeros, and this is the result.", "tokens": [51464, 407, 264, 1874, 510, 307, 516, 281, 722, 365, 35193, 11, 293, 341, 307, 264, 1874, 13, 51830], "temperature": 0.0, "avg_logprob": -0.25963090967248986, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.0004173147026449442}, {"id": 920, "seek": 385284, "start": 3853.1600000000003, "end": 3858.92, "text": " And it's going to contain AR rows, 5 rows, and BC columns, 10 columns.", "tokens": [50380, 400, 309, 311, 516, 281, 5304, 8943, 13241, 11, 1025, 13241, 11, 293, 14359, 13766, 11, 1266, 13766, 13, 50668], "temperature": 0.0, "avg_logprob": -0.32925286500350287, "compression_ratio": 1.6646706586826348, "no_speech_prob": 0.0001233945513376966}, {"id": 921, "seek": 385284, "start": 3858.92, "end": 3860.36, "text": " 5 comma 10.", "tokens": [50668, 1025, 22117, 1266, 13, 50740], "temperature": 0.0, "avg_logprob": -0.32925286500350287, "compression_ratio": 1.6646706586826348, "no_speech_prob": 0.0001233945513376966}, {"id": 922, "seek": 385284, "start": 3860.36, "end": 3861.36, "text": " OK.", "tokens": [50740, 2264, 13, 50790], "temperature": 0.0, "avg_logprob": -0.32925286500350287, "compression_ratio": 1.6646706586826348, "no_speech_prob": 0.0001233945513376966}, {"id": 923, "seek": 385284, "start": 3861.36, "end": 3862.56, "text": " So now we have to fill that in.", "tokens": [50790, 407, 586, 321, 362, 281, 2836, 300, 294, 13, 50850], "temperature": 0.0, "avg_logprob": -0.32925286500350287, "compression_ratio": 1.6646706586826348, "no_speech_prob": 0.0001233945513376966}, {"id": 924, "seek": 385284, "start": 3862.56, "end": 3868.7200000000003, "text": " And so to do a matrix multiplication, we have to first, we have to go through each row one", "tokens": [50850, 400, 370, 281, 360, 257, 8141, 27290, 11, 321, 362, 281, 700, 11, 321, 362, 281, 352, 807, 1184, 5386, 472, 51158], "temperature": 0.0, "avg_logprob": -0.32925286500350287, "compression_ratio": 1.6646706586826348, "no_speech_prob": 0.0001233945513376966}, {"id": 925, "seek": 385284, "start": 3868.7200000000003, "end": 3872.1600000000003, "text": " at a time.", "tokens": [51158, 412, 257, 565, 13, 51330], "temperature": 0.0, "avg_logprob": -0.32925286500350287, "compression_ratio": 1.6646706586826348, "no_speech_prob": 0.0001233945513376966}, {"id": 926, "seek": 385284, "start": 3872.1600000000003, "end": 3875.56, "text": " And here we have that.", "tokens": [51330, 400, 510, 321, 362, 300, 13, 51500], "temperature": 0.0, "avg_logprob": -0.32925286500350287, "compression_ratio": 1.6646706586826348, "no_speech_prob": 0.0001233945513376966}, {"id": 927, "seek": 385284, "start": 3875.56, "end": 3879.98, "text": " Go through each row one at a time.", "tokens": [51500, 1037, 807, 1184, 5386, 472, 412, 257, 565, 13, 51721], "temperature": 0.0, "avg_logprob": -0.32925286500350287, "compression_ratio": 1.6646706586826348, "no_speech_prob": 0.0001233945513376966}, {"id": 928, "seek": 387998, "start": 3879.98, "end": 3884.78, "text": " And then go through each column one at a time.", "tokens": [50364, 400, 550, 352, 807, 1184, 7738, 472, 412, 257, 565, 13, 50604], "temperature": 0.0, "avg_logprob": -0.25743380955287387, "compression_ratio": 2.385135135135135, "no_speech_prob": 0.00235964497551322}, {"id": 929, "seek": 387998, "start": 3884.78, "end": 3889.3, "text": " And then we have to go through each pair in that row column one at a time.", "tokens": [50604, 400, 550, 321, 362, 281, 352, 807, 1184, 6119, 294, 300, 5386, 7738, 472, 412, 257, 565, 13, 50830], "temperature": 0.0, "avg_logprob": -0.25743380955287387, "compression_ratio": 2.385135135135135, "no_speech_prob": 0.00235964497551322}, {"id": 930, "seek": 387998, "start": 3889.3, "end": 3894.94, "text": " So there's going to be a loop, and a loop, and a loop.", "tokens": [50830, 407, 456, 311, 516, 281, 312, 257, 6367, 11, 293, 257, 6367, 11, 293, 257, 6367, 13, 51112], "temperature": 0.0, "avg_logprob": -0.25743380955287387, "compression_ratio": 2.385135135135135, "no_speech_prob": 0.00235964497551322}, {"id": 931, "seek": 387998, "start": 3894.94, "end": 3899.06, "text": " So here's we're going to loop over each row.", "tokens": [51112, 407, 510, 311, 321, 434, 516, 281, 6367, 670, 1184, 5386, 13, 51318], "temperature": 0.0, "avg_logprob": -0.25743380955287387, "compression_ratio": 2.385135135135135, "no_speech_prob": 0.00235964497551322}, {"id": 932, "seek": 387998, "start": 3899.06, "end": 3901.78, "text": " And here we're going to loop over each column.", "tokens": [51318, 400, 510, 321, 434, 516, 281, 6367, 670, 1184, 7738, 13, 51454], "temperature": 0.0, "avg_logprob": -0.25743380955287387, "compression_ratio": 2.385135135135135, "no_speech_prob": 0.00235964497551322}, {"id": 933, "seek": 387998, "start": 3901.78, "end": 3904.7, "text": " And then here we're going to loop, so each column of C. And then here we're going to", "tokens": [51454, 400, 550, 510, 321, 434, 516, 281, 6367, 11, 370, 1184, 7738, 295, 383, 13, 400, 550, 510, 321, 434, 516, 281, 51600], "temperature": 0.0, "avg_logprob": -0.25743380955287387, "compression_ratio": 2.385135135135135, "no_speech_prob": 0.00235964497551322}, {"id": 934, "seek": 390470, "start": 3904.7, "end": 3912.3399999999997, "text": " loop over each column of A, which is going to be the same as the number of rows of B.", "tokens": [50364, 6367, 670, 1184, 7738, 295, 316, 11, 597, 307, 516, 281, 312, 264, 912, 382, 264, 1230, 295, 13241, 295, 363, 13, 50746], "temperature": 0.0, "avg_logprob": -0.2436000867323442, "compression_ratio": 1.4690721649484537, "no_speech_prob": 0.0018969109514728189}, {"id": 935, "seek": 390470, "start": 3912.3399999999997, "end": 3918.18, "text": " Which we can see here, AC, 784, BR, 784, they're the same.", "tokens": [50746, 3013, 321, 393, 536, 510, 11, 8157, 11, 1614, 25494, 11, 10262, 11, 1614, 25494, 11, 436, 434, 264, 912, 13, 51038], "temperature": 0.0, "avg_logprob": -0.2436000867323442, "compression_ratio": 1.4690721649484537, "no_speech_prob": 0.0018969109514728189}, {"id": 936, "seek": 390470, "start": 3918.18, "end": 3921.18, "text": " So it wouldn't matter whether we said AC or BR.", "tokens": [51038, 407, 309, 2759, 380, 1871, 1968, 321, 848, 8157, 420, 10262, 13, 51188], "temperature": 0.0, "avg_logprob": -0.2436000867323442, "compression_ratio": 1.4690721649484537, "no_speech_prob": 0.0018969109514728189}, {"id": 937, "seek": 390470, "start": 3921.18, "end": 3934.58, "text": " So then our result for that row and that column, we have to add onto it the product of IK in", "tokens": [51188, 407, 550, 527, 1874, 337, 300, 5386, 293, 300, 7738, 11, 321, 362, 281, 909, 3911, 309, 264, 1674, 295, 286, 42, 294, 51858], "temperature": 0.0, "avg_logprob": -0.2436000867323442, "compression_ratio": 1.4690721649484537, "no_speech_prob": 0.0018969109514728189}, {"id": 938, "seek": 393458, "start": 3934.58, "end": 3937.98, "text": " the first matrix, by KJ in the second matrix.", "tokens": [50364, 264, 700, 8141, 11, 538, 591, 41, 294, 264, 1150, 8141, 13, 50534], "temperature": 0.0, "avg_logprob": -0.28182923275491467, "compression_ratio": 1.6666666666666667, "no_speech_prob": 2.7969292204943486e-05}, {"id": 939, "seek": 393458, "start": 3937.98, "end": 3942.34, "text": " So K is going up through those 784.", "tokens": [50534, 407, 591, 307, 516, 493, 807, 729, 1614, 25494, 13, 50752], "temperature": 0.0, "avg_logprob": -0.28182923275491467, "compression_ratio": 1.6666666666666667, "no_speech_prob": 2.7969292204943486e-05}, {"id": 940, "seek": 393458, "start": 3942.34, "end": 3946.46, "text": " And so we're going to go across the columns, and down, sorry, across the rows and down", "tokens": [50752, 400, 370, 321, 434, 516, 281, 352, 2108, 264, 13766, 11, 293, 760, 11, 2597, 11, 2108, 264, 13241, 293, 760, 50958], "temperature": 0.0, "avg_logprob": -0.28182923275491467, "compression_ratio": 1.6666666666666667, "no_speech_prob": 2.7969292204943486e-05}, {"id": 941, "seek": 393458, "start": 3946.46, "end": 3947.46, "text": " the columns.", "tokens": [50958, 264, 13766, 13, 51008], "temperature": 0.0, "avg_logprob": -0.28182923275491467, "compression_ratio": 1.6666666666666667, "no_speech_prob": 2.7969292204943486e-05}, {"id": 942, "seek": 393458, "start": 3947.46, "end": 3952.58, "text": " It's going to go across the row, whilst it goes down this column.", "tokens": [51008, 467, 311, 516, 281, 352, 2108, 264, 5386, 11, 18534, 309, 1709, 760, 341, 7738, 13, 51264], "temperature": 0.0, "avg_logprob": -0.28182923275491467, "compression_ratio": 1.6666666666666667, "no_speech_prob": 2.7969292204943486e-05}, {"id": 943, "seek": 393458, "start": 3952.58, "end": 3963.42, "text": " So here is the world's most naive, slow, uninteresting matrix multiplication.", "tokens": [51264, 407, 510, 307, 264, 1002, 311, 881, 29052, 11, 2964, 11, 49234, 8714, 8141, 27290, 13, 51806], "temperature": 0.0, "avg_logprob": -0.28182923275491467, "compression_ratio": 1.6666666666666667, "no_speech_prob": 2.7969292204943486e-05}, {"id": 944, "seek": 396342, "start": 3963.42, "end": 3966.78, "text": " And if we run it, OK, it's done something.", "tokens": [50364, 400, 498, 321, 1190, 309, 11, 2264, 11, 309, 311, 1096, 746, 13, 50532], "temperature": 0.0, "avg_logprob": -0.25300899628669987, "compression_ratio": 1.5223214285714286, "no_speech_prob": 0.0008426401764154434}, {"id": 945, "seek": 396342, "start": 3966.78, "end": 3972.38, "text": " We have successfully, hopefully, successfully, multiplied the matrices M1 and M2.", "tokens": [50532, 492, 362, 10727, 11, 4696, 11, 10727, 11, 17207, 264, 32284, 376, 16, 293, 376, 17, 13, 50812], "temperature": 0.0, "avg_logprob": -0.25300899628669987, "compression_ratio": 1.5223214285714286, "no_speech_prob": 0.0008426401764154434}, {"id": 946, "seek": 396342, "start": 3972.38, "end": 3980.54, "text": " It's a little hard to read this, I find, because punch cards used to be 80 columns wide.", "tokens": [50812, 467, 311, 257, 707, 1152, 281, 1401, 341, 11, 286, 915, 11, 570, 8135, 5632, 1143, 281, 312, 4688, 13766, 4874, 13, 51220], "temperature": 0.0, "avg_logprob": -0.25300899628669987, "compression_ratio": 1.5223214285714286, "no_speech_prob": 0.0008426401764154434}, {"id": 947, "seek": 396342, "start": 3980.54, "end": 3983.06, "text": " We still assume screens are 80 columns wide.", "tokens": [51220, 492, 920, 6552, 11171, 366, 4688, 13766, 4874, 13, 51346], "temperature": 0.0, "avg_logprob": -0.25300899628669987, "compression_ratio": 1.5223214285714286, "no_speech_prob": 0.0008426401764154434}, {"id": 948, "seek": 396342, "start": 3983.06, "end": 3985.84, "text": " Everything defaults to 80 wide, which is ridiculous.", "tokens": [51346, 5471, 7576, 82, 281, 4688, 4874, 11, 597, 307, 11083, 13, 51485], "temperature": 0.0, "avg_logprob": -0.25300899628669987, "compression_ratio": 1.5223214285714286, "no_speech_prob": 0.0008426401764154434}, {"id": 949, "seek": 396342, "start": 3985.84, "end": 3988.5, "text": " But you can easily change it.", "tokens": [51485, 583, 291, 393, 3612, 1319, 309, 13, 51618], "temperature": 0.0, "avg_logprob": -0.25300899628669987, "compression_ratio": 1.5223214285714286, "no_speech_prob": 0.0008426401764154434}, {"id": 950, "seek": 398850, "start": 3988.5, "end": 3995.06, "text": " So if you say set print options, you can choose your own line width.", "tokens": [50364, 407, 498, 291, 584, 992, 4482, 3956, 11, 291, 393, 2826, 428, 1065, 1622, 11402, 13, 50692], "temperature": 0.0, "avg_logprob": -0.27902665505042445, "compression_ratio": 1.6288209606986899, "no_speech_prob": 0.0023966894950717688}, {"id": 951, "seek": 398850, "start": 3995.06, "end": 3998.46, "text": " You can see, well, that's 5 by 10, we did it before.", "tokens": [50692, 509, 393, 536, 11, 731, 11, 300, 311, 1025, 538, 1266, 11, 321, 630, 309, 949, 13, 50862], "temperature": 0.0, "avg_logprob": -0.27902665505042445, "compression_ratio": 1.6288209606986899, "no_speech_prob": 0.0023966894950717688}, {"id": 952, "seek": 398850, "start": 3998.46, "end": 4001.5, "text": " So if we change the line width, OK, that's much easier to read now.", "tokens": [50862, 407, 498, 321, 1319, 264, 1622, 11402, 11, 2264, 11, 300, 311, 709, 3571, 281, 1401, 586, 13, 51014], "temperature": 0.0, "avg_logprob": -0.27902665505042445, "compression_ratio": 1.6288209606986899, "no_speech_prob": 0.0023966894950717688}, {"id": 953, "seek": 398850, "start": 4001.5, "end": 4008.98, "text": " We can see here are the five rows, and here are the ten columns for that matrix multiplication.", "tokens": [51014, 492, 393, 536, 510, 366, 264, 1732, 13241, 11, 293, 510, 366, 264, 2064, 13766, 337, 300, 8141, 27290, 13, 51388], "temperature": 0.0, "avg_logprob": -0.27902665505042445, "compression_ratio": 1.6288209606986899, "no_speech_prob": 0.0023966894950717688}, {"id": 954, "seek": 398850, "start": 4008.98, "end": 4013.1, "text": " I tend to always put this at the top of my notebooks, and you can do the same thing for", "tokens": [51388, 286, 3928, 281, 1009, 829, 341, 412, 264, 1192, 295, 452, 43782, 11, 293, 291, 393, 360, 264, 912, 551, 337, 51594], "temperature": 0.0, "avg_logprob": -0.27902665505042445, "compression_ratio": 1.6288209606986899, "no_speech_prob": 0.0023966894950717688}, {"id": 955, "seek": 401310, "start": 4013.1, "end": 4019.9, "text": " NumPy as well.", "tokens": [50364, 22592, 47, 88, 382, 731, 13, 50704], "temperature": 0.0, "avg_logprob": -0.23460982396052435, "compression_ratio": 1.4742857142857142, "no_speech_prob": 0.007232665084302425}, {"id": 956, "seek": 401310, "start": 4019.9, "end": 4028.14, "text": " So what I like to do, this is really important, is when I'm working on code, particularly", "tokens": [50704, 407, 437, 286, 411, 281, 360, 11, 341, 307, 534, 1021, 11, 307, 562, 286, 478, 1364, 322, 3089, 11, 4098, 51116], "temperature": 0.0, "avg_logprob": -0.23460982396052435, "compression_ratio": 1.4742857142857142, "no_speech_prob": 0.007232665084302425}, {"id": 957, "seek": 401310, "start": 4028.14, "end": 4033.3399999999997, "text": " numeric code, I like to do it all step by step in Jupyter.", "tokens": [51116, 7866, 299, 3089, 11, 286, 411, 281, 360, 309, 439, 1823, 538, 1823, 294, 22125, 88, 391, 13, 51376], "temperature": 0.0, "avg_logprob": -0.23460982396052435, "compression_ratio": 1.4742857142857142, "no_speech_prob": 0.007232665084302425}, {"id": 958, "seek": 401310, "start": 4033.3399999999997, "end": 4039.9, "text": " And then what I do is, once I've got it working, is I copy all the cells that have implemented", "tokens": [51376, 400, 550, 437, 286, 360, 307, 11, 1564, 286, 600, 658, 309, 1364, 11, 307, 286, 5055, 439, 264, 5438, 300, 362, 12270, 51704], "temperature": 0.0, "avg_logprob": -0.23460982396052435, "compression_ratio": 1.4742857142857142, "no_speech_prob": 0.007232665084302425}, {"id": 959, "seek": 403990, "start": 4040.9, "end": 4046.82, "text": " I paste them, and then I select them all and I hit shift-m to merge, get rid of anything", "tokens": [50414, 286, 9163, 552, 11, 293, 550, 286, 3048, 552, 439, 293, 286, 2045, 5513, 12, 76, 281, 22183, 11, 483, 3973, 295, 1340, 50710], "temperature": 0.0, "avg_logprob": -0.2759299235300975, "compression_ratio": 1.7256637168141593, "no_speech_prob": 0.024422476068139076}, {"id": 960, "seek": 403990, "start": 4046.82, "end": 4053.46, "text": " that prints out stuff I don't need, and then I put a header on the top, give it a function", "tokens": [50710, 300, 22305, 484, 1507, 286, 500, 380, 643, 11, 293, 550, 286, 829, 257, 23117, 322, 264, 1192, 11, 976, 309, 257, 2445, 51042], "temperature": 0.0, "avg_logprob": -0.2759299235300975, "compression_ratio": 1.7256637168141593, "no_speech_prob": 0.024422476068139076}, {"id": 961, "seek": 403990, "start": 4053.46, "end": 4061.04, "text": " name, and then I select the whole lot, and I hit ctrl or apple right square bracket,", "tokens": [51042, 1315, 11, 293, 550, 286, 3048, 264, 1379, 688, 11, 293, 286, 2045, 269, 28269, 420, 10606, 558, 3732, 16904, 11, 51421], "temperature": 0.0, "avg_logprob": -0.2759299235300975, "compression_ratio": 1.7256637168141593, "no_speech_prob": 0.024422476068139076}, {"id": 962, "seek": 403990, "start": 4061.04, "end": 4062.34, "text": " and I've turned it into a function.", "tokens": [51421, 293, 286, 600, 3574, 309, 666, 257, 2445, 13, 51486], "temperature": 0.0, "avg_logprob": -0.2759299235300975, "compression_ratio": 1.7256637168141593, "no_speech_prob": 0.024422476068139076}, {"id": 963, "seek": 403990, "start": 4062.34, "end": 4067.6600000000003, "text": " But I still keep the stuff above it, so I can see all the step-by-step stuff for learning", "tokens": [51486, 583, 286, 920, 1066, 264, 1507, 3673, 309, 11, 370, 286, 393, 536, 439, 264, 1823, 12, 2322, 12, 16792, 1507, 337, 2539, 51752], "temperature": 0.0, "avg_logprob": -0.2759299235300975, "compression_ratio": 1.7256637168141593, "no_speech_prob": 0.024422476068139076}, {"id": 964, "seek": 406766, "start": 4067.66, "end": 4070.62, "text": " about it later.", "tokens": [50364, 466, 309, 1780, 13, 50512], "temperature": 0.0, "avg_logprob": -0.2374384453956117, "compression_ratio": 1.536697247706422, "no_speech_prob": 0.0013250199845060706}, {"id": 965, "seek": 406766, "start": 4070.62, "end": 4075.42, "text": " And so that's what I've done here to create this function.", "tokens": [50512, 400, 370, 300, 311, 437, 286, 600, 1096, 510, 281, 1884, 341, 2445, 13, 50752], "temperature": 0.0, "avg_logprob": -0.2374384453956117, "compression_ratio": 1.536697247706422, "no_speech_prob": 0.0013250199845060706}, {"id": 966, "seek": 406766, "start": 4075.42, "end": 4079.66, "text": " And so this function does exactly the same things we just did, and we can see how long", "tokens": [50752, 400, 370, 341, 2445, 775, 2293, 264, 912, 721, 321, 445, 630, 11, 293, 321, 393, 536, 577, 938, 50964], "temperature": 0.0, "avg_logprob": -0.2374384453956117, "compression_ratio": 1.536697247706422, "no_speech_prob": 0.0013250199845060706}, {"id": 967, "seek": 406766, "start": 4079.66, "end": 4087.3399999999997, "text": " it takes to run by using percent time, and it took about half a second.", "tokens": [50964, 309, 2516, 281, 1190, 538, 1228, 3043, 565, 11, 293, 309, 1890, 466, 1922, 257, 1150, 13, 51348], "temperature": 0.0, "avg_logprob": -0.2374384453956117, "compression_ratio": 1.536697247706422, "no_speech_prob": 0.0013250199845060706}, {"id": 968, "seek": 406766, "start": 4087.3399999999997, "end": 4091.5, "text": " Which gosh, that's a long time to generate such a small matrix.", "tokens": [51348, 3013, 6502, 11, 300, 311, 257, 938, 565, 281, 8460, 1270, 257, 1359, 8141, 13, 51556], "temperature": 0.0, "avg_logprob": -0.2374384453956117, "compression_ratio": 1.536697247706422, "no_speech_prob": 0.0013250199845060706}, {"id": 969, "seek": 406766, "start": 4091.5, "end": 4095.66, "text": " This is just to do five MNIST digits.", "tokens": [51556, 639, 307, 445, 281, 360, 1732, 376, 45, 19756, 27011, 13, 51764], "temperature": 0.0, "avg_logprob": -0.2374384453956117, "compression_ratio": 1.536697247706422, "no_speech_prob": 0.0013250199845060706}, {"id": 970, "seek": 409566, "start": 4095.66, "end": 4099.3, "text": " So that's not going to be great.", "tokens": [50364, 407, 300, 311, 406, 516, 281, 312, 869, 13, 50546], "temperature": 0.0, "avg_logprob": -0.2790800850346403, "compression_ratio": 1.645320197044335, "no_speech_prob": 0.0023966478183865547}, {"id": 971, "seek": 409566, "start": 4099.3, "end": 4102.22, "text": " We're going to have to speed that up.", "tokens": [50546, 492, 434, 516, 281, 362, 281, 3073, 300, 493, 13, 50692], "temperature": 0.0, "avg_logprob": -0.2790800850346403, "compression_ratio": 1.645320197044335, "no_speech_prob": 0.0023966478183865547}, {"id": 972, "seek": 409566, "start": 4102.22, "end": 4108.139999999999, "text": " I'm actually quite surprised at how slow that is, because there's only 39,200.", "tokens": [50692, 286, 478, 767, 1596, 6100, 412, 577, 2964, 300, 307, 11, 570, 456, 311, 787, 15238, 11, 7629, 13, 50988], "temperature": 0.0, "avg_logprob": -0.2790800850346403, "compression_ratio": 1.645320197044335, "no_speech_prob": 0.0023966478183865547}, {"id": 973, "seek": 409566, "start": 4108.139999999999, "end": 4116.34, "text": " So if you look at how we've got a loop within a loop within a loop, it's doing 39,200 of", "tokens": [50988, 407, 498, 291, 574, 412, 577, 321, 600, 658, 257, 6367, 1951, 257, 6367, 1951, 257, 6367, 11, 309, 311, 884, 15238, 11, 7629, 295, 51398], "temperature": 0.0, "avg_logprob": -0.2790800850346403, "compression_ratio": 1.645320197044335, "no_speech_prob": 0.0023966478183865547}, {"id": 974, "seek": 409566, "start": 4116.34, "end": 4117.7, "text": " these.", "tokens": [51398, 613, 13, 51466], "temperature": 0.0, "avg_logprob": -0.2790800850346403, "compression_ratio": 1.645320197044335, "no_speech_prob": 0.0023966478183865547}, {"id": 975, "seek": 409566, "start": 4117.7, "end": 4123.0599999999995, "text": " So Python, yeah, Python, when you're just doing Python, it is slow.", "tokens": [51466, 407, 15329, 11, 1338, 11, 15329, 11, 562, 291, 434, 445, 884, 15329, 11, 309, 307, 2964, 13, 51734], "temperature": 0.0, "avg_logprob": -0.2790800850346403, "compression_ratio": 1.645320197044335, "no_speech_prob": 0.0023966478183865547}, {"id": 976, "seek": 409566, "start": 4123.0599999999995, "end": 4125.3, "text": " So we can't do that.", "tokens": [51734, 407, 321, 393, 380, 360, 300, 13, 51846], "temperature": 0.0, "avg_logprob": -0.2790800850346403, "compression_ratio": 1.645320197044335, "no_speech_prob": 0.0023966478183865547}, {"id": 977, "seek": 412530, "start": 4125.9400000000005, "end": 4129.18, "text": " That's why we can't just write Python.", "tokens": [50396, 663, 311, 983, 321, 393, 380, 445, 2464, 15329, 13, 50558], "temperature": 0.0, "avg_logprob": -0.3075422600134095, "compression_ratio": 1.4491017964071857, "no_speech_prob": 6.50280126137659e-05}, {"id": 978, "seek": 412530, "start": 4129.18, "end": 4132.46, "text": " But there is something that kind of lets us write Python.", "tokens": [50558, 583, 456, 307, 746, 300, 733, 295, 6653, 505, 2464, 15329, 13, 50722], "temperature": 0.0, "avg_logprob": -0.3075422600134095, "compression_ratio": 1.4491017964071857, "no_speech_prob": 6.50280126137659e-05}, {"id": 979, "seek": 412530, "start": 4132.46, "end": 4135.9400000000005, "text": " We could instead use Number.", "tokens": [50722, 492, 727, 2602, 764, 22592, 607, 13, 50896], "temperature": 0.0, "avg_logprob": -0.3075422600134095, "compression_ratio": 1.4491017964071857, "no_speech_prob": 6.50280126137659e-05}, {"id": 980, "seek": 412530, "start": 4135.9400000000005, "end": 4149.46, "text": " Number is a system that takes Python and turns it into, basically, into machine code.", "tokens": [50896, 5118, 307, 257, 1185, 300, 2516, 15329, 293, 4523, 309, 666, 11, 1936, 11, 666, 3479, 3089, 13, 51572], "temperature": 0.0, "avg_logprob": -0.3075422600134095, "compression_ratio": 1.4491017964071857, "no_speech_prob": 6.50280126137659e-05}, {"id": 981, "seek": 412530, "start": 4149.46, "end": 4151.24, "text": " And it's amazingly easy to do.", "tokens": [51572, 400, 309, 311, 31762, 1858, 281, 360, 13, 51661], "temperature": 0.0, "avg_logprob": -0.3075422600134095, "compression_ratio": 1.4491017964071857, "no_speech_prob": 6.50280126137659e-05}, {"id": 982, "seek": 415124, "start": 4151.24, "end": 4158.5599999999995, "text": " You can basically take a function and write ngit, at ngit on top.", "tokens": [50364, 509, 393, 1936, 747, 257, 2445, 293, 2464, 297, 70, 270, 11, 412, 297, 70, 270, 322, 1192, 13, 50730], "temperature": 0.0, "avg_logprob": -0.226831316947937, "compression_ratio": 1.6336633663366336, "no_speech_prob": 1.8342872863286175e-05}, {"id": 983, "seek": 415124, "start": 4158.5599999999995, "end": 4164.16, "text": " And what it's going to do is it's going to look, the first time you call this function,", "tokens": [50730, 400, 437, 309, 311, 516, 281, 360, 307, 309, 311, 516, 281, 574, 11, 264, 700, 565, 291, 818, 341, 2445, 11, 51010], "temperature": 0.0, "avg_logprob": -0.226831316947937, "compression_ratio": 1.6336633663366336, "no_speech_prob": 1.8342872863286175e-05}, {"id": 984, "seek": 415124, "start": 4164.16, "end": 4167.04, "text": " it's going to compile it down to machine code.", "tokens": [51010, 309, 311, 516, 281, 31413, 309, 760, 281, 3479, 3089, 13, 51154], "temperature": 0.0, "avg_logprob": -0.226831316947937, "compression_ratio": 1.6336633663366336, "no_speech_prob": 1.8342872863286175e-05}, {"id": 985, "seek": 415124, "start": 4167.04, "end": 4169.4, "text": " And it will run much more quickly.", "tokens": [51154, 400, 309, 486, 1190, 709, 544, 2661, 13, 51272], "temperature": 0.0, "avg_logprob": -0.226831316947937, "compression_ratio": 1.6336633663366336, "no_speech_prob": 1.8342872863286175e-05}, {"id": 986, "seek": 415124, "start": 4169.4, "end": 4180.44, "text": " So what I've done here is I've taken the innermost loop, so just looping through and adding up", "tokens": [51272, 407, 437, 286, 600, 1096, 510, 307, 286, 600, 2726, 264, 7714, 966, 555, 6367, 11, 370, 445, 6367, 278, 807, 293, 5127, 493, 51824], "temperature": 0.0, "avg_logprob": -0.226831316947937, "compression_ratio": 1.6336633663366336, "no_speech_prob": 1.8342872863286175e-05}, {"id": 987, "seek": 418044, "start": 4180.44, "end": 4181.44, "text": " all these.", "tokens": [50364, 439, 613, 13, 50414], "temperature": 0.0, "avg_logprob": -0.2592236328125, "compression_ratio": 1.5, "no_speech_prob": 8.220176096074283e-05}, {"id": 988, "seek": 418044, "start": 4181.44, "end": 4190.04, "text": " So start at zero, go through and add up all those, just for two vectors, and return it.", "tokens": [50414, 407, 722, 412, 4018, 11, 352, 807, 293, 909, 493, 439, 729, 11, 445, 337, 732, 18875, 11, 293, 2736, 309, 13, 50844], "temperature": 0.0, "avg_logprob": -0.2592236328125, "compression_ratio": 1.5, "no_speech_prob": 8.220176096074283e-05}, {"id": 989, "seek": 418044, "start": 4190.04, "end": 4192.839999999999, "text": " This is called a dot product in linear algebra.", "tokens": [50844, 639, 307, 1219, 257, 5893, 1674, 294, 8213, 21989, 13, 50984], "temperature": 0.0, "avg_logprob": -0.2592236328125, "compression_ratio": 1.5, "no_speech_prob": 8.220176096074283e-05}, {"id": 990, "seek": 418044, "start": 4192.839999999999, "end": 4196.12, "text": " So we'll call it dot.", "tokens": [50984, 407, 321, 603, 818, 309, 5893, 13, 51148], "temperature": 0.0, "avg_logprob": -0.2592236328125, "compression_ratio": 1.5, "no_speech_prob": 8.220176096074283e-05}, {"id": 991, "seek": 418044, "start": 4196.12, "end": 4199.24, "text": " And so Number only works with NumPy, doesn't work with PyTorch.", "tokens": [51148, 400, 370, 5118, 787, 1985, 365, 22592, 47, 88, 11, 1177, 380, 589, 365, 9953, 51, 284, 339, 13, 51304], "temperature": 0.0, "avg_logprob": -0.2592236328125, "compression_ratio": 1.5, "no_speech_prob": 8.220176096074283e-05}, {"id": 992, "seek": 418044, "start": 4199.24, "end": 4202.36, "text": " So we're just going to use arrays instead of tensors for a moment.", "tokens": [51304, 407, 321, 434, 445, 516, 281, 764, 41011, 2602, 295, 10688, 830, 337, 257, 1623, 13, 51460], "temperature": 0.0, "avg_logprob": -0.2592236328125, "compression_ratio": 1.5, "no_speech_prob": 8.220176096074283e-05}, {"id": 993, "seek": 418044, "start": 4202.36, "end": 4203.36, "text": " Now have a look at this.", "tokens": [51460, 823, 362, 257, 574, 412, 341, 13, 51510], "temperature": 0.0, "avg_logprob": -0.2592236328125, "compression_ratio": 1.5, "no_speech_prob": 8.220176096074283e-05}, {"id": 994, "seek": 420336, "start": 4203.36, "end": 4211.48, "text": " If I try to do a dot product of 1, 2, 3, and 2, 3, 4, it's pretty easy to do.", "tokens": [50364, 759, 286, 853, 281, 360, 257, 5893, 1674, 295, 502, 11, 568, 11, 805, 11, 293, 568, 11, 805, 11, 1017, 11, 309, 311, 1238, 1858, 281, 360, 13, 50770], "temperature": 0.0, "avg_logprob": -0.2094458183356091, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.04208497703075409}, {"id": 995, "seek": 420336, "start": 4211.48, "end": 4215.759999999999, "text": " It took a fifth of a second, which sounds terrible.", "tokens": [50770, 467, 1890, 257, 9266, 295, 257, 1150, 11, 597, 3263, 6237, 13, 50984], "temperature": 0.0, "avg_logprob": -0.2094458183356091, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.04208497703075409}, {"id": 996, "seek": 420336, "start": 4215.759999999999, "end": 4218.719999999999, "text": " But the reason it took a fifth of a second is because that's actually how long it took", "tokens": [50984, 583, 264, 1778, 309, 1890, 257, 9266, 295, 257, 1150, 307, 570, 300, 311, 767, 577, 938, 309, 1890, 51132], "temperature": 0.0, "avg_logprob": -0.2094458183356091, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.04208497703075409}, {"id": 997, "seek": 420336, "start": 4218.719999999999, "end": 4221.24, "text": " to compile this and run it.", "tokens": [51132, 281, 31413, 341, 293, 1190, 309, 13, 51258], "temperature": 0.0, "avg_logprob": -0.2094458183356091, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.04208497703075409}, {"id": 998, "seek": 420336, "start": 4221.24, "end": 4229.219999999999, "text": " Now that it's compiled, the second time it just has to call it, it's now 21 microseconds.", "tokens": [51258, 823, 300, 309, 311, 36548, 11, 264, 1150, 565, 309, 445, 575, 281, 818, 309, 11, 309, 311, 586, 5080, 3123, 37841, 28750, 13, 51657], "temperature": 0.0, "avg_logprob": -0.2094458183356091, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.04208497703075409}, {"id": 999, "seek": 420336, "start": 4229.219999999999, "end": 4232.04, "text": " And so that's actually very fast.", "tokens": [51657, 400, 370, 300, 311, 767, 588, 2370, 13, 51798], "temperature": 0.0, "avg_logprob": -0.2094458183356091, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.04208497703075409}, {"id": 1000, "seek": 423204, "start": 4232.72, "end": 4239.84, "text": " With Number, we can basically make Python run at C speed.", "tokens": [50398, 2022, 5118, 11, 321, 393, 1936, 652, 15329, 1190, 412, 383, 3073, 13, 50754], "temperature": 0.0, "avg_logprob": -0.2864557522446362, "compression_ratio": 1.4880952380952381, "no_speech_prob": 5.920288822380826e-05}, {"id": 1001, "seek": 423204, "start": 4239.84, "end": 4248.92, "text": " So now, the important thing to recognize is if I replace this loop in Python with a call", "tokens": [50754, 407, 586, 11, 264, 1021, 551, 281, 5521, 307, 498, 286, 7406, 341, 6367, 294, 15329, 365, 257, 818, 51208], "temperature": 0.0, "avg_logprob": -0.2864557522446362, "compression_ratio": 1.4880952380952381, "no_speech_prob": 5.920288822380826e-05}, {"id": 1002, "seek": 423204, "start": 4248.92, "end": 4256.72, "text": " to dot, which is running in machine code, then we now have one, two loops running in", "tokens": [51208, 281, 5893, 11, 597, 307, 2614, 294, 3479, 3089, 11, 550, 321, 586, 362, 472, 11, 732, 16121, 2614, 294, 51598], "temperature": 0.0, "avg_logprob": -0.2864557522446362, "compression_ratio": 1.4880952380952381, "no_speech_prob": 5.920288822380826e-05}, {"id": 1003, "seek": 423204, "start": 4256.72, "end": 4260.28, "text": " Python, not three.", "tokens": [51598, 15329, 11, 406, 1045, 13, 51776], "temperature": 0.0, "avg_logprob": -0.2864557522446362, "compression_ratio": 1.4880952380952381, "no_speech_prob": 5.920288822380826e-05}, {"id": 1004, "seek": 426028, "start": 4260.28, "end": 4274.54, "text": " So our 448 milliseconds, well, first of all, let's make sure if I run it, run that matmul,", "tokens": [50364, 407, 527, 1017, 13318, 34184, 11, 731, 11, 700, 295, 439, 11, 718, 311, 652, 988, 498, 286, 1190, 309, 11, 1190, 300, 3803, 76, 425, 11, 51077], "temperature": 0.0, "avg_logprob": -0.23874457864200369, "compression_ratio": 1.4285714285714286, "no_speech_prob": 9.36871310841525e-06}, {"id": 1005, "seek": 426028, "start": 4274.54, "end": 4277.32, "text": " it should be close to my T1.", "tokens": [51077, 309, 820, 312, 1998, 281, 452, 314, 16, 13, 51216], "temperature": 0.0, "avg_logprob": -0.23874457864200369, "compression_ratio": 1.4285714285714286, "no_speech_prob": 9.36871310841525e-06}, {"id": 1006, "seek": 426028, "start": 4277.32, "end": 4282.219999999999, "text": " T1 is what we got before, remember?", "tokens": [51216, 314, 16, 307, 437, 321, 658, 949, 11, 1604, 30, 51461], "temperature": 0.0, "avg_logprob": -0.23874457864200369, "compression_ratio": 1.4285714285714286, "no_speech_prob": 9.36871310841525e-06}, {"id": 1007, "seek": 426028, "start": 4282.219999999999, "end": 4286.84, "text": " So when I'm refactoring or performance improving or whatever, I always like to put every step", "tokens": [51461, 407, 562, 286, 478, 1895, 578, 3662, 420, 3389, 11470, 420, 2035, 11, 286, 1009, 411, 281, 829, 633, 1823, 51692], "temperature": 0.0, "avg_logprob": -0.23874457864200369, "compression_ratio": 1.4285714285714286, "no_speech_prob": 9.36871310841525e-06}, {"id": 1008, "seek": 426028, "start": 4286.84, "end": 4289.719999999999, "text": " in the notebook and then test.", "tokens": [51692, 294, 264, 21060, 293, 550, 1500, 13, 51836], "temperature": 0.0, "avg_logprob": -0.23874457864200369, "compression_ratio": 1.4285714285714286, "no_speech_prob": 9.36871310841525e-06}, {"id": 1009, "seek": 428972, "start": 4290.16, "end": 4294.2, "text": " So this test close comes from fastcore.test, and it just checks that two things are very", "tokens": [50386, 407, 341, 1500, 1998, 1487, 490, 2370, 12352, 13, 31636, 11, 293, 309, 445, 13834, 300, 732, 721, 366, 588, 50588], "temperature": 0.0, "avg_logprob": -0.27134297194990137, "compression_ratio": 1.525, "no_speech_prob": 1.4285515135270543e-05}, {"id": 1010, "seek": 428972, "start": 4294.2, "end": 4295.2, "text": " similar.", "tokens": [50588, 2531, 13, 50638], "temperature": 0.0, "avg_logprob": -0.27134297194990137, "compression_ratio": 1.525, "no_speech_prob": 1.4285515135270543e-05}, {"id": 1011, "seek": 428972, "start": 4295.2, "end": 4298.4400000000005, "text": " They might not be exactly the same because of little floating point differences, which", "tokens": [50638, 814, 1062, 406, 312, 2293, 264, 912, 570, 295, 707, 12607, 935, 7300, 11, 597, 50800], "temperature": 0.0, "avg_logprob": -0.27134297194990137, "compression_ratio": 1.525, "no_speech_prob": 1.4285515135270543e-05}, {"id": 1012, "seek": 428972, "start": 4298.4400000000005, "end": 4299.4400000000005, "text": " is fine.", "tokens": [50800, 307, 2489, 13, 50850], "temperature": 0.0, "avg_logprob": -0.27134297194990137, "compression_ratio": 1.525, "no_speech_prob": 1.4285515135270543e-05}, {"id": 1013, "seek": 428972, "start": 4299.4400000000005, "end": 4302.88, "text": " OK, so our matmul is working correctly, or at least it's doing the same thing it did", "tokens": [50850, 2264, 11, 370, 527, 3803, 76, 425, 307, 1364, 8944, 11, 420, 412, 1935, 309, 311, 884, 264, 912, 551, 309, 630, 51022], "temperature": 0.0, "avg_logprob": -0.27134297194990137, "compression_ratio": 1.525, "no_speech_prob": 1.4285515135270543e-05}, {"id": 1014, "seek": 428972, "start": 4302.88, "end": 4303.88, "text": " before.", "tokens": [51022, 949, 13, 51072], "temperature": 0.0, "avg_logprob": -0.27134297194990137, "compression_ratio": 1.525, "no_speech_prob": 1.4285515135270543e-05}, {"id": 1015, "seek": 428972, "start": 4303.88, "end": 4314.08, "text": " So if we now run it, it's taking 268 microseconds, OK, versus 448 milliseconds.", "tokens": [51072, 407, 498, 321, 586, 1190, 309, 11, 309, 311, 1940, 7551, 23, 3123, 37841, 28750, 11, 2264, 11, 5717, 1017, 13318, 34184, 13, 51582], "temperature": 0.0, "avg_logprob": -0.27134297194990137, "compression_ratio": 1.525, "no_speech_prob": 1.4285515135270543e-05}, {"id": 1016, "seek": 431408, "start": 4314.08, "end": 4323.28, "text": " So it's taking, you know, about 2000 times faster just by changing the one innermost", "tokens": [50364, 407, 309, 311, 1940, 11, 291, 458, 11, 466, 8132, 1413, 4663, 445, 538, 4473, 264, 472, 7714, 966, 555, 50824], "temperature": 0.0, "avg_logprob": -0.3007040138704231, "compression_ratio": 1.5567567567567568, "no_speech_prob": 9.170133853331208e-05}, {"id": 1017, "seek": 431408, "start": 4323.28, "end": 4324.28, "text": " loop.", "tokens": [50824, 6367, 13, 50874], "temperature": 0.0, "avg_logprob": -0.3007040138704231, "compression_ratio": 1.5567567567567568, "no_speech_prob": 9.170133853331208e-05}, {"id": 1018, "seek": 431408, "start": 4324.28, "end": 4330.24, "text": " So really all we've done is we've added at engine to make it 2000 times faster.", "tokens": [50874, 407, 534, 439, 321, 600, 1096, 307, 321, 600, 3869, 412, 2848, 281, 652, 309, 8132, 1413, 4663, 13, 51172], "temperature": 0.0, "avg_logprob": -0.3007040138704231, "compression_ratio": 1.5567567567567568, "no_speech_prob": 9.170133853331208e-05}, {"id": 1019, "seek": 431408, "start": 4330.24, "end": 4332.28, "text": " So number is well worth knowing about.", "tokens": [51172, 407, 1230, 307, 731, 3163, 5276, 466, 13, 51274], "temperature": 0.0, "avg_logprob": -0.3007040138704231, "compression_ratio": 1.5567567567567568, "no_speech_prob": 9.170133853331208e-05}, {"id": 1020, "seek": 431408, "start": 4332.28, "end": 4336.64, "text": " It can make your Python code very, very fast.", "tokens": [51274, 467, 393, 652, 428, 15329, 3089, 588, 11, 588, 2370, 13, 51492], "temperature": 0.0, "avg_logprob": -0.3007040138704231, "compression_ratio": 1.5567567567567568, "no_speech_prob": 9.170133853331208e-05}, {"id": 1021, "seek": 431408, "start": 4336.64, "end": 4341.88, "text": " OK, let's keep making it faster.", "tokens": [51492, 2264, 11, 718, 311, 1066, 1455, 309, 4663, 13, 51754], "temperature": 0.0, "avg_logprob": -0.3007040138704231, "compression_ratio": 1.5567567567567568, "no_speech_prob": 9.170133853331208e-05}, {"id": 1022, "seek": 434188, "start": 4341.88, "end": 4349.12, "text": " So we're going to use stuff again, which kind of goes back to APL.", "tokens": [50364, 407, 321, 434, 516, 281, 764, 1507, 797, 11, 597, 733, 295, 1709, 646, 281, 5372, 43, 13, 50726], "temperature": 0.0, "avg_logprob": -0.25105260980540306, "compression_ratio": 1.5511811023622046, "no_speech_prob": 0.00016865137149579823}, {"id": 1023, "seek": 434188, "start": 4349.12, "end": 4353.52, "text": " And a lot of people say that learning APL is a thing that's taught them more about programming", "tokens": [50726, 400, 257, 688, 295, 561, 584, 300, 2539, 5372, 43, 307, 257, 551, 300, 311, 5928, 552, 544, 466, 9410, 50946], "temperature": 0.0, "avg_logprob": -0.25105260980540306, "compression_ratio": 1.5511811023622046, "no_speech_prob": 0.00016865137149579823}, {"id": 1024, "seek": 434188, "start": 4353.52, "end": 4355.74, "text": " than anything else.", "tokens": [50946, 813, 1340, 1646, 13, 51057], "temperature": 0.0, "avg_logprob": -0.25105260980540306, "compression_ratio": 1.5511811023622046, "no_speech_prob": 0.00016865137149579823}, {"id": 1025, "seek": 434188, "start": 4355.74, "end": 4361.52, "text": " So it's probably worth considering learning APL.", "tokens": [51057, 407, 309, 311, 1391, 3163, 8079, 2539, 5372, 43, 13, 51346], "temperature": 0.0, "avg_logprob": -0.25105260980540306, "compression_ratio": 1.5511811023622046, "no_speech_prob": 0.00016865137149579823}, {"id": 1026, "seek": 434188, "start": 4361.52, "end": 4363.32, "text": " And let's just look at these various things.", "tokens": [51346, 400, 718, 311, 445, 574, 412, 613, 3683, 721, 13, 51436], "temperature": 0.0, "avg_logprob": -0.25105260980540306, "compression_ratio": 1.5511811023622046, "no_speech_prob": 0.00016865137149579823}, {"id": 1027, "seek": 434188, "start": 4363.32, "end": 4366.96, "text": " We've got a is 10, 6, minus 4.", "tokens": [51436, 492, 600, 658, 257, 307, 1266, 11, 1386, 11, 3175, 1017, 13, 51618], "temperature": 0.0, "avg_logprob": -0.25105260980540306, "compression_ratio": 1.5511811023622046, "no_speech_prob": 0.00016865137149579823}, {"id": 1028, "seek": 434188, "start": 4366.96, "end": 4369.400000000001, "text": " So remember, in APL, we don't say equals.", "tokens": [51618, 407, 1604, 11, 294, 5372, 43, 11, 321, 500, 380, 584, 6915, 13, 51740], "temperature": 0.0, "avg_logprob": -0.25105260980540306, "compression_ratio": 1.5511811023622046, "no_speech_prob": 0.00016865137149579823}, {"id": 1029, "seek": 434188, "start": 4369.400000000001, "end": 4371.76, "text": " Equals actually means equals, funnily enough.", "tokens": [51740, 15624, 1124, 767, 1355, 6915, 11, 1019, 77, 953, 1547, 13, 51858], "temperature": 0.0, "avg_logprob": -0.25105260980540306, "compression_ratio": 1.5511811023622046, "no_speech_prob": 0.00016865137149579823}, {"id": 1030, "seek": 437176, "start": 4372.64, "end": 4374.92, "text": " To say set to, we use this arrow.", "tokens": [50408, 1407, 584, 992, 281, 11, 321, 764, 341, 11610, 13, 50522], "temperature": 0.0, "avg_logprob": -0.27373836079581837, "compression_ratio": 1.26890756302521, "no_speech_prob": 9.368715836899355e-06}, {"id": 1031, "seek": 437176, "start": 4374.92, "end": 4380.76, "text": " And this is a list of 10, 6, 4.", "tokens": [50522, 400, 341, 307, 257, 1329, 295, 1266, 11, 1386, 11, 1017, 13, 50814], "temperature": 0.0, "avg_logprob": -0.27373836079581837, "compression_ratio": 1.26890756302521, "no_speech_prob": 9.368715836899355e-06}, {"id": 1032, "seek": 437176, "start": 4380.76, "end": 4388.8, "text": " And then b is 287.", "tokens": [50814, 400, 550, 272, 307, 7562, 22, 13, 51216], "temperature": 0.0, "avg_logprob": -0.27373836079581837, "compression_ratio": 1.26890756302521, "no_speech_prob": 9.368715836899355e-06}, {"id": 1033, "seek": 437176, "start": 4388.8, "end": 4394.04, "text": " And we're going to add them up, a plus b.", "tokens": [51216, 400, 321, 434, 516, 281, 909, 552, 493, 11, 257, 1804, 272, 13, 51478], "temperature": 0.0, "avg_logprob": -0.27373836079581837, "compression_ratio": 1.26890756302521, "no_speech_prob": 9.368715836899355e-06}, {"id": 1034, "seek": 437176, "start": 4394.04, "end": 4396.16, "text": " So what's going on here?", "tokens": [51478, 407, 437, 311, 516, 322, 510, 30, 51584], "temperature": 0.0, "avg_logprob": -0.27373836079581837, "compression_ratio": 1.26890756302521, "no_speech_prob": 9.368715836899355e-06}, {"id": 1035, "seek": 439616, "start": 4396.16, "end": 4408.76, "text": " So it's really important that you can think of a symbol like a as representing a tensor", "tokens": [50364, 407, 309, 311, 534, 1021, 300, 291, 393, 519, 295, 257, 5986, 411, 257, 382, 13460, 257, 40863, 50994], "temperature": 0.0, "avg_logprob": -0.24390896235671, "compression_ratio": 1.9528795811518325, "no_speech_prob": 0.0001941123337019235}, {"id": 1036, "seek": 439616, "start": 4408.76, "end": 4409.76, "text": " or an array.", "tokens": [50994, 420, 364, 10225, 13, 51044], "temperature": 0.0, "avg_logprob": -0.24390896235671, "compression_ratio": 1.9528795811518325, "no_speech_prob": 0.0001941123337019235}, {"id": 1037, "seek": 439616, "start": 4409.76, "end": 4410.76, "text": " APL calls them arrays.", "tokens": [51044, 5372, 43, 5498, 552, 41011, 13, 51094], "temperature": 0.0, "avg_logprob": -0.24390896235671, "compression_ratio": 1.9528795811518325, "no_speech_prob": 0.0001941123337019235}, {"id": 1038, "seek": 439616, "start": 4410.76, "end": 4411.76, "text": " PyTorch calls them tensors.", "tokens": [51094, 9953, 51, 284, 339, 5498, 552, 10688, 830, 13, 51144], "temperature": 0.0, "avg_logprob": -0.24390896235671, "compression_ratio": 1.9528795811518325, "no_speech_prob": 0.0001941123337019235}, {"id": 1039, "seek": 439616, "start": 4411.76, "end": 4412.76, "text": " NumPy calls them arrays.", "tokens": [51144, 22592, 47, 88, 5498, 552, 41011, 13, 51194], "temperature": 0.0, "avg_logprob": -0.24390896235671, "compression_ratio": 1.9528795811518325, "no_speech_prob": 0.0001941123337019235}, {"id": 1040, "seek": 439616, "start": 4412.76, "end": 4415.88, "text": " They're the same thing.", "tokens": [51194, 814, 434, 264, 912, 551, 13, 51350], "temperature": 0.0, "avg_logprob": -0.24390896235671, "compression_ratio": 1.9528795811518325, "no_speech_prob": 0.0001941123337019235}, {"id": 1041, "seek": 439616, "start": 4415.88, "end": 4418.639999999999, "text": " So this is a single thing that contains a bunch of numbers.", "tokens": [51350, 407, 341, 307, 257, 2167, 551, 300, 8306, 257, 3840, 295, 3547, 13, 51488], "temperature": 0.0, "avg_logprob": -0.24390896235671, "compression_ratio": 1.9528795811518325, "no_speech_prob": 0.0001941123337019235}, {"id": 1042, "seek": 439616, "start": 4418.639999999999, "end": 4421.2, "text": " This is a single thing that contains a bunch of numbers.", "tokens": [51488, 639, 307, 257, 2167, 551, 300, 8306, 257, 3840, 295, 3547, 13, 51616], "temperature": 0.0, "avg_logprob": -0.24390896235671, "compression_ratio": 1.9528795811518325, "no_speech_prob": 0.0001941123337019235}, {"id": 1043, "seek": 439616, "start": 4421.2, "end": 4425.16, "text": " This is an operation that applies to arrays or tensors.", "tokens": [51616, 639, 307, 364, 6916, 300, 13165, 281, 41011, 420, 10688, 830, 13, 51814], "temperature": 0.0, "avg_logprob": -0.24390896235671, "compression_ratio": 1.9528795811518325, "no_speech_prob": 0.0001941123337019235}, {"id": 1044, "seek": 442516, "start": 4425.16, "end": 4427.44, "text": " And what it does is it works what's called element-wise.", "tokens": [50364, 400, 437, 309, 775, 307, 309, 1985, 437, 311, 1219, 4478, 12, 3711, 13, 50478], "temperature": 0.0, "avg_logprob": -0.2026102799635667, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.0011695041321218014}, {"id": 1045, "seek": 442516, "start": 4427.44, "end": 4431.599999999999, "text": " It takes each pair, 10 and 2, and adds them together.", "tokens": [50478, 467, 2516, 1184, 6119, 11, 1266, 293, 568, 11, 293, 10860, 552, 1214, 13, 50686], "temperature": 0.0, "avg_logprob": -0.2026102799635667, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.0011695041321218014}, {"id": 1046, "seek": 442516, "start": 4431.599999999999, "end": 4433.8, "text": " Each pair, 6 and 8, adds them together.", "tokens": [50686, 6947, 6119, 11, 1386, 293, 1649, 11, 10860, 552, 1214, 13, 50796], "temperature": 0.0, "avg_logprob": -0.2026102799635667, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.0011695041321218014}, {"id": 1047, "seek": 442516, "start": 4433.8, "end": 4436.2, "text": " This is element-wise addition.", "tokens": [50796, 639, 307, 4478, 12, 3711, 4500, 13, 50916], "temperature": 0.0, "avg_logprob": -0.2026102799635667, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.0011695041321218014}, {"id": 1048, "seek": 442516, "start": 4436.2, "end": 4439.92, "text": " And Fred's asking in the chat, how do you put in these symbols?", "tokens": [50916, 400, 10112, 311, 3365, 294, 264, 5081, 11, 577, 360, 291, 829, 294, 613, 16944, 30, 51102], "temperature": 0.0, "avg_logprob": -0.2026102799635667, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.0011695041321218014}, {"id": 1049, "seek": 442516, "start": 4439.92, "end": 4445.28, "text": " If you just mouse over any of them, it will show you how to write it.", "tokens": [51102, 759, 291, 445, 9719, 670, 604, 295, 552, 11, 309, 486, 855, 291, 577, 281, 2464, 309, 13, 51370], "temperature": 0.0, "avg_logprob": -0.2026102799635667, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.0011695041321218014}, {"id": 1050, "seek": 442516, "start": 4445.28, "end": 4451.2, "text": " And the one you want is the one at the very bottom, which is the one where it says prefix.", "tokens": [51370, 400, 264, 472, 291, 528, 307, 264, 472, 412, 264, 588, 2767, 11, 597, 307, 264, 472, 689, 309, 1619, 46969, 13, 51666], "temperature": 0.0, "avg_logprob": -0.2026102799635667, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.0011695041321218014}, {"id": 1051, "seek": 442516, "start": 4451.2, "end": 4454.36, "text": " Now the prefix is the backtick character.", "tokens": [51666, 823, 264, 46969, 307, 264, 646, 83, 618, 2517, 13, 51824], "temperature": 0.0, "avg_logprob": -0.2026102799635667, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.0011695041321218014}, {"id": 1052, "seek": 445436, "start": 4454.5599999999995, "end": 4457.759999999999, "text": " So here it's saying prefix hyphen gives us times.", "tokens": [50374, 407, 510, 309, 311, 1566, 46969, 2477, 47059, 2709, 505, 1413, 13, 50534], "temperature": 0.0, "avg_logprob": -0.3287459153395433, "compression_ratio": 1.5695067264573992, "no_speech_prob": 4.1986295400420204e-05}, {"id": 1053, "seek": 445436, "start": 4457.759999999999, "end": 4459.679999999999, "text": " So if I type prefix hyphen, there we go.", "tokens": [50534, 407, 498, 286, 2010, 46969, 2477, 47059, 11, 456, 321, 352, 13, 50630], "temperature": 0.0, "avg_logprob": -0.3287459153395433, "compression_ratio": 1.5695067264573992, "no_speech_prob": 4.1986295400420204e-05}, {"id": 1054, "seek": 445436, "start": 4459.679999999999, "end": 4466.44, "text": " So I type a backtick dash b is a times b, for example.", "tokens": [50630, 407, 286, 2010, 257, 646, 83, 618, 8240, 272, 307, 257, 1413, 272, 11, 337, 1365, 13, 50968], "temperature": 0.0, "avg_logprob": -0.3287459153395433, "compression_ratio": 1.5695067264573992, "no_speech_prob": 4.1986295400420204e-05}, {"id": 1055, "seek": 445436, "start": 4466.44, "end": 4473.719999999999, "text": " So yeah, they all have shortcut keys, which you learn pretty quickly, I find.", "tokens": [50968, 407, 1338, 11, 436, 439, 362, 24822, 9317, 11, 597, 291, 1466, 1238, 2661, 11, 286, 915, 13, 51332], "temperature": 0.0, "avg_logprob": -0.3287459153395433, "compression_ratio": 1.5695067264573992, "no_speech_prob": 4.1986295400420204e-05}, {"id": 1056, "seek": 445436, "start": 4473.719999999999, "end": 4477.759999999999, "text": " And there's a fairly consistent kind of system for those shortcut keys too.", "tokens": [51332, 400, 456, 311, 257, 6457, 8398, 733, 295, 1185, 337, 729, 24822, 9317, 886, 13, 51534], "temperature": 0.0, "avg_logprob": -0.3287459153395433, "compression_ratio": 1.5695067264573992, "no_speech_prob": 4.1986295400420204e-05}, {"id": 1057, "seek": 445436, "start": 4477.759999999999, "end": 4481.2, "text": " All right, so we can do the same thing in PyTorch.", "tokens": [51534, 1057, 558, 11, 370, 321, 393, 360, 264, 912, 551, 294, 9953, 51, 284, 339, 13, 51706], "temperature": 0.0, "avg_logprob": -0.3287459153395433, "compression_ratio": 1.5695067264573992, "no_speech_prob": 4.1986295400420204e-05}, {"id": 1058, "seek": 448120, "start": 4481.2, "end": 4486.36, "text": " It's a little bit more verbose in PyTorch, which is one reason I often like to do my", "tokens": [50364, 467, 311, 257, 707, 857, 544, 9595, 541, 294, 9953, 51, 284, 339, 11, 597, 307, 472, 1778, 286, 2049, 411, 281, 360, 452, 50622], "temperature": 0.0, "avg_logprob": -0.22602995413321036, "compression_ratio": 1.6821428571428572, "no_speech_prob": 0.025957025587558746}, {"id": 1059, "seek": 448120, "start": 4486.36, "end": 4488.44, "text": " mathematical fiddling around in APL.", "tokens": [50622, 18894, 283, 14273, 1688, 926, 294, 5372, 43, 13, 50726], "temperature": 0.0, "avg_logprob": -0.22602995413321036, "compression_ratio": 1.6821428571428572, "no_speech_prob": 0.025957025587558746}, {"id": 1060, "seek": 448120, "start": 4488.44, "end": 4494.639999999999, "text": " I can often do it with less boilerplate, which means I can spend more time thinking.", "tokens": [50726, 286, 393, 2049, 360, 309, 365, 1570, 39228, 37008, 11, 597, 1355, 286, 393, 3496, 544, 565, 1953, 13, 51036], "temperature": 0.0, "avg_logprob": -0.22602995413321036, "compression_ratio": 1.6821428571428572, "no_speech_prob": 0.025957025587558746}, {"id": 1061, "seek": 448120, "start": 4494.639999999999, "end": 4496.88, "text": " You know, I can see everything on the screen at once.", "tokens": [51036, 509, 458, 11, 286, 393, 536, 1203, 322, 264, 2568, 412, 1564, 13, 51148], "temperature": 0.0, "avg_logprob": -0.22602995413321036, "compression_ratio": 1.6821428571428572, "no_speech_prob": 0.025957025587558746}, {"id": 1062, "seek": 448120, "start": 4496.88, "end": 4501.44, "text": " I don't have to spend as much time trying to ignore the tensor, round bracket, square", "tokens": [51148, 286, 500, 380, 362, 281, 3496, 382, 709, 565, 1382, 281, 11200, 264, 40863, 11, 3098, 16904, 11, 3732, 51376], "temperature": 0.0, "avg_logprob": -0.22602995413321036, "compression_ratio": 1.6821428571428572, "no_speech_prob": 0.025957025587558746}, {"id": 1063, "seek": 448120, "start": 4501.44, "end": 4504.3, "text": " bracket, dot, comma, blah, blah, blah.", "tokens": [51376, 16904, 11, 5893, 11, 22117, 11, 12288, 11, 12288, 11, 12288, 13, 51519], "temperature": 0.0, "avg_logprob": -0.22602995413321036, "compression_ratio": 1.6821428571428572, "no_speech_prob": 0.025957025587558746}, {"id": 1064, "seek": 448120, "start": 4504.3, "end": 4506.639999999999, "text": " It's all cognitive load, which I'd rather ignore.", "tokens": [51519, 467, 311, 439, 15605, 3677, 11, 597, 286, 1116, 2831, 11200, 13, 51636], "temperature": 0.0, "avg_logprob": -0.22602995413321036, "compression_ratio": 1.6821428571428572, "no_speech_prob": 0.025957025587558746}, {"id": 1065, "seek": 448120, "start": 4506.639999999999, "end": 4508.5199999999995, "text": " But anyway, it does the same thing.", "tokens": [51636, 583, 4033, 11, 309, 775, 264, 912, 551, 13, 51730], "temperature": 0.0, "avg_logprob": -0.22602995413321036, "compression_ratio": 1.6821428571428572, "no_speech_prob": 0.025957025587558746}, {"id": 1066, "seek": 450852, "start": 4508.52, "end": 4513.320000000001, "text": " So I can say a plus b, and it works exactly like APL.", "tokens": [50364, 407, 286, 393, 584, 257, 1804, 272, 11, 293, 309, 1985, 2293, 411, 5372, 43, 13, 50604], "temperature": 0.0, "avg_logprob": -0.25031031814276006, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.00016603800759185106}, {"id": 1067, "seek": 450852, "start": 4513.320000000001, "end": 4514.84, "text": " So here's an interesting example.", "tokens": [50604, 407, 510, 311, 364, 1880, 1365, 13, 50680], "temperature": 0.0, "avg_logprob": -0.25031031814276006, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.00016603800759185106}, {"id": 1068, "seek": 450852, "start": 4514.84, "end": 4519.96, "text": " I can go a less than b dot float dot mean.", "tokens": [50680, 286, 393, 352, 257, 1570, 813, 272, 5893, 15706, 5893, 914, 13, 50936], "temperature": 0.0, "avg_logprob": -0.25031031814276006, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.00016603800759185106}, {"id": 1069, "seek": 450852, "start": 4519.96, "end": 4521.64, "text": " So let's try that one over here.", "tokens": [50936, 407, 718, 311, 853, 300, 472, 670, 510, 13, 51020], "temperature": 0.0, "avg_logprob": -0.25031031814276006, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.00016603800759185106}, {"id": 1070, "seek": 450852, "start": 4521.64, "end": 4523.200000000001, "text": " A less than b.", "tokens": [51020, 316, 1570, 813, 272, 13, 51098], "temperature": 0.0, "avg_logprob": -0.25031031814276006, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.00016603800759185106}, {"id": 1071, "seek": 450852, "start": 4523.200000000001, "end": 4528.280000000001, "text": " So this is a really important idea, which I think was invented by Ken Iverson, the APL", "tokens": [51098, 407, 341, 307, 257, 534, 1021, 1558, 11, 597, 286, 519, 390, 14479, 538, 8273, 286, 840, 266, 11, 264, 5372, 43, 51352], "temperature": 0.0, "avg_logprob": -0.25031031814276006, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.00016603800759185106}, {"id": 1072, "seek": 450852, "start": 4528.280000000001, "end": 4532.84, "text": " guy, which is that true and false are represented by 0 and 1.", "tokens": [51352, 2146, 11, 597, 307, 300, 2074, 293, 7908, 366, 10379, 538, 1958, 293, 502, 13, 51580], "temperature": 0.0, "avg_logprob": -0.25031031814276006, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.00016603800759185106}, {"id": 1073, "seek": 453284, "start": 4532.84, "end": 4539.08, "text": " And because they're represented by 0 and 1, we can do things to them.", "tokens": [50364, 400, 570, 436, 434, 10379, 538, 1958, 293, 502, 11, 321, 393, 360, 721, 281, 552, 13, 50676], "temperature": 0.0, "avg_logprob": -0.221949218421854, "compression_ratio": 1.4832535885167464, "no_speech_prob": 0.00031015468994155526}, {"id": 1074, "seek": 453284, "start": 4539.08, "end": 4541.8, "text": " We can add them up and subtract them and so forth.", "tokens": [50676, 492, 393, 909, 552, 493, 293, 16390, 552, 293, 370, 5220, 13, 50812], "temperature": 0.0, "avg_logprob": -0.221949218421854, "compression_ratio": 1.4832535885167464, "no_speech_prob": 0.00031015468994155526}, {"id": 1075, "seek": 453284, "start": 4541.8, "end": 4545.3, "text": " It's a really important idea.", "tokens": [50812, 467, 311, 257, 534, 1021, 1558, 13, 50987], "temperature": 0.0, "avg_logprob": -0.221949218421854, "compression_ratio": 1.4832535885167464, "no_speech_prob": 0.00031015468994155526}, {"id": 1076, "seek": 453284, "start": 4545.3, "end": 4548.28, "text": " So in this case, I want to take the mean of them.", "tokens": [50987, 407, 294, 341, 1389, 11, 286, 528, 281, 747, 264, 914, 295, 552, 13, 51136], "temperature": 0.0, "avg_logprob": -0.221949218421854, "compression_ratio": 1.4832535885167464, "no_speech_prob": 0.00031015468994155526}, {"id": 1077, "seek": 453284, "start": 4548.28, "end": 4555.16, "text": " And I'm going to tell you something amazing, which is that in APL, there is no function", "tokens": [51136, 400, 286, 478, 516, 281, 980, 291, 746, 2243, 11, 597, 307, 300, 294, 5372, 43, 11, 456, 307, 572, 2445, 51480], "temperature": 0.0, "avg_logprob": -0.221949218421854, "compression_ratio": 1.4832535885167464, "no_speech_prob": 0.00031015468994155526}, {"id": 1078, "seek": 453284, "start": 4555.16, "end": 4557.32, "text": " called mean.", "tokens": [51480, 1219, 914, 13, 51588], "temperature": 0.0, "avg_logprob": -0.221949218421854, "compression_ratio": 1.4832535885167464, "no_speech_prob": 0.00031015468994155526}, {"id": 1079, "seek": 453284, "start": 4557.32, "end": 4558.52, "text": " Why not?", "tokens": [51588, 1545, 406, 30, 51648], "temperature": 0.0, "avg_logprob": -0.221949218421854, "compression_ratio": 1.4832535885167464, "no_speech_prob": 0.00031015468994155526}, {"id": 1080, "seek": 455852, "start": 4558.52, "end": 4565.160000000001, "text": " That's because we can write the mean function, which, so that's four letters, mean, m-e-a-n,", "tokens": [50364, 663, 311, 570, 321, 393, 2464, 264, 914, 2445, 11, 597, 11, 370, 300, 311, 1451, 7825, 11, 914, 11, 275, 12, 68, 12, 64, 12, 77, 11, 50696], "temperature": 0.0, "avg_logprob": -0.25670547485351564, "compression_ratio": 1.7210526315789474, "no_speech_prob": 0.0003625873941928148}, {"id": 1081, "seek": 455852, "start": 4565.160000000001, "end": 4569.76, "text": " we can write the mean function from scratch with four characters.", "tokens": [50696, 321, 393, 2464, 264, 914, 2445, 490, 8459, 365, 1451, 4342, 13, 50926], "temperature": 0.0, "avg_logprob": -0.25670547485351564, "compression_ratio": 1.7210526315789474, "no_speech_prob": 0.0003625873941928148}, {"id": 1082, "seek": 455852, "start": 4569.76, "end": 4571.76, "text": " I'll show you.", "tokens": [50926, 286, 603, 855, 291, 13, 51026], "temperature": 0.0, "avg_logprob": -0.25670547485351564, "compression_ratio": 1.7210526315789474, "no_speech_prob": 0.0003625873941928148}, {"id": 1083, "seek": 455852, "start": 4571.76, "end": 4572.76, "text": " Here is the whole mean function.", "tokens": [51026, 1692, 307, 264, 1379, 914, 2445, 13, 51076], "temperature": 0.0, "avg_logprob": -0.25670547485351564, "compression_ratio": 1.7210526315789474, "no_speech_prob": 0.0003625873941928148}, {"id": 1084, "seek": 455852, "start": 4572.76, "end": 4581.400000000001, "text": " We're going to create a function called mean, and the mean is equal to the sum of a list", "tokens": [51076, 492, 434, 516, 281, 1884, 257, 2445, 1219, 914, 11, 293, 264, 914, 307, 2681, 281, 264, 2408, 295, 257, 1329, 51508], "temperature": 0.0, "avg_logprob": -0.25670547485351564, "compression_ratio": 1.7210526315789474, "no_speech_prob": 0.0003625873941928148}, {"id": 1085, "seek": 455852, "start": 4581.400000000001, "end": 4586.320000000001, "text": " divided by the count of a list.", "tokens": [51508, 6666, 538, 264, 1207, 295, 257, 1329, 13, 51754], "temperature": 0.0, "avg_logprob": -0.25670547485351564, "compression_ratio": 1.7210526315789474, "no_speech_prob": 0.0003625873941928148}, {"id": 1086, "seek": 458632, "start": 4586.32, "end": 4589.4, "text": " So this here is sum divided by count.", "tokens": [50364, 407, 341, 510, 307, 2408, 6666, 538, 1207, 13, 50518], "temperature": 0.0, "avg_logprob": -0.22227024430988215, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.00010889607801800594}, {"id": 1087, "seek": 458632, "start": 4589.4, "end": 4594.36, "text": " And so I have now defined a new function called mean, which calculates the mean.", "tokens": [50518, 400, 370, 286, 362, 586, 7642, 257, 777, 2445, 1219, 914, 11, 597, 4322, 1024, 264, 914, 13, 50766], "temperature": 0.0, "avg_logprob": -0.22227024430988215, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.00010889607801800594}, {"id": 1088, "seek": 458632, "start": 4594.36, "end": 4596.16, "text": " Mean of a is less than b.", "tokens": [50766, 12302, 295, 257, 307, 1570, 813, 272, 13, 50856], "temperature": 0.0, "avg_logprob": -0.22227024430988215, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.00010889607801800594}, {"id": 1089, "seek": 458632, "start": 4596.16, "end": 4598.92, "text": " There we go.", "tokens": [50856, 821, 321, 352, 13, 50994], "temperature": 0.0, "avg_logprob": -0.22227024430988215, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.00010889607801800594}, {"id": 1090, "seek": 458632, "start": 4598.92, "end": 4602.799999999999, "text": " And so, you know, in practice, I'm not sure people would even bother defining a function", "tokens": [50994, 400, 370, 11, 291, 458, 11, 294, 3124, 11, 286, 478, 406, 988, 561, 576, 754, 8677, 17827, 257, 2445, 51188], "temperature": 0.0, "avg_logprob": -0.22227024430988215, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.00010889607801800594}, {"id": 1091, "seek": 458632, "start": 4602.799999999999, "end": 4608.48, "text": " called mean, because it's just as easy to actually write as implementation in APL.", "tokens": [51188, 1219, 914, 11, 570, 309, 311, 445, 382, 1858, 281, 767, 2464, 382, 11420, 294, 5372, 43, 13, 51472], "temperature": 0.0, "avg_logprob": -0.22227024430988215, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.00010889607801800594}, {"id": 1092, "seek": 458632, "start": 4608.48, "end": 4613.639999999999, "text": " In NumPy or whatever, Python, it's going to take a lot more than four letters to implement", "tokens": [51472, 682, 22592, 47, 88, 420, 2035, 11, 15329, 11, 309, 311, 516, 281, 747, 257, 688, 544, 813, 1451, 7825, 281, 4445, 51730], "temperature": 0.0, "avg_logprob": -0.22227024430988215, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.00010889607801800594}, {"id": 1093, "seek": 458632, "start": 4613.639999999999, "end": 4614.639999999999, "text": " mean.", "tokens": [51730, 914, 13, 51780], "temperature": 0.0, "avg_logprob": -0.22227024430988215, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.00010889607801800594}, {"id": 1094, "seek": 461464, "start": 4614.96, "end": 4617.08, "text": " So anyway, you know, it's a math notation.", "tokens": [50380, 407, 4033, 11, 291, 458, 11, 309, 311, 257, 5221, 24657, 13, 50486], "temperature": 0.0, "avg_logprob": -0.2845231455268589, "compression_ratio": 1.7262773722627738, "no_speech_prob": 0.00506029324606061}, {"id": 1095, "seek": 461464, "start": 4617.08, "end": 4621.4800000000005, "text": " And so being a math notation, we can do a lot with little, which I find helpful because", "tokens": [50486, 400, 370, 885, 257, 5221, 24657, 11, 321, 393, 360, 257, 688, 365, 707, 11, 597, 286, 915, 4961, 570, 50706], "temperature": 0.0, "avg_logprob": -0.2845231455268589, "compression_ratio": 1.7262773722627738, "no_speech_prob": 0.00506029324606061}, {"id": 1096, "seek": 461464, "start": 4621.4800000000005, "end": 4624.4800000000005, "text": " I can see everything going on at once.", "tokens": [50706, 286, 393, 536, 1203, 516, 322, 412, 1564, 13, 50856], "temperature": 0.0, "avg_logprob": -0.2845231455268589, "compression_ratio": 1.7262773722627738, "no_speech_prob": 0.00506029324606061}, {"id": 1097, "seek": 461464, "start": 4624.4800000000005, "end": 4628.96, "text": " Anywho, okay, so that's how we do the same thing in PyTorch.", "tokens": [50856, 2639, 13506, 11, 1392, 11, 370, 300, 311, 577, 321, 360, 264, 912, 551, 294, 9953, 51, 284, 339, 13, 51080], "temperature": 0.0, "avg_logprob": -0.2845231455268589, "compression_ratio": 1.7262773722627738, "no_speech_prob": 0.00506029324606061}, {"id": 1098, "seek": 461464, "start": 4628.96, "end": 4632.52, "text": " And again, you can see that the less than in both cases are operating element-wise.", "tokens": [51080, 400, 797, 11, 291, 393, 536, 300, 264, 1570, 813, 294, 1293, 3331, 366, 7447, 4478, 12, 3711, 13, 51258], "temperature": 0.0, "avg_logprob": -0.2845231455268589, "compression_ratio": 1.7262773722627738, "no_speech_prob": 0.00506029324606061}, {"id": 1099, "seek": 461464, "start": 4632.52, "end": 4637.84, "text": " Okay, so a is less than b is saying 10 is less than 2, 6 is less than 8, 4 is less than", "tokens": [51258, 1033, 11, 370, 257, 307, 1570, 813, 272, 307, 1566, 1266, 307, 1570, 813, 568, 11, 1386, 307, 1570, 813, 1649, 11, 1017, 307, 1570, 813, 51524], "temperature": 0.0, "avg_logprob": -0.2845231455268589, "compression_ratio": 1.7262773722627738, "no_speech_prob": 0.00506029324606061}, {"id": 1100, "seek": 461464, "start": 4637.84, "end": 4642.6, "text": " 7, and gives us back each of those trues and falses as zeros and ones.", "tokens": [51524, 1614, 11, 293, 2709, 505, 646, 1184, 295, 729, 504, 1247, 293, 16720, 279, 382, 35193, 293, 2306, 13, 51762], "temperature": 0.0, "avg_logprob": -0.2845231455268589, "compression_ratio": 1.7262773722627738, "no_speech_prob": 0.00506029324606061}, {"id": 1101, "seek": 464260, "start": 4642.6, "end": 4647.96, "text": " And according to the emoji on our YouTube chat, Siva's head just exploded, as it should.", "tokens": [50364, 400, 4650, 281, 264, 31595, 322, 527, 3088, 5081, 11, 318, 5931, 311, 1378, 445, 27049, 11, 382, 309, 820, 13, 50632], "temperature": 0.0, "avg_logprob": -0.29483424807057795, "compression_ratio": 1.5285714285714285, "no_speech_prob": 0.0051395483314991}, {"id": 1102, "seek": 464260, "start": 4647.96, "end": 4653.0, "text": " This is why APL is, yeah, life-changing.", "tokens": [50632, 639, 307, 983, 5372, 43, 307, 11, 1338, 11, 993, 12, 27123, 13, 50884], "temperature": 0.0, "avg_logprob": -0.29483424807057795, "compression_ratio": 1.5285714285714285, "no_speech_prob": 0.0051395483314991}, {"id": 1103, "seek": 464260, "start": 4653.0, "end": 4657.04, "text": " Okay, let's now go up to higher ranks.", "tokens": [50884, 1033, 11, 718, 311, 586, 352, 493, 281, 2946, 21406, 13, 51086], "temperature": 0.0, "avg_logprob": -0.29483424807057795, "compression_ratio": 1.5285714285714285, "no_speech_prob": 0.0051395483314991}, {"id": 1104, "seek": 464260, "start": 4657.04, "end": 4661.400000000001, "text": " So this here is a rank 1 tensor.", "tokens": [51086, 407, 341, 510, 307, 257, 6181, 502, 40863, 13, 51304], "temperature": 0.0, "avg_logprob": -0.29483424807057795, "compression_ratio": 1.5285714285714285, "no_speech_prob": 0.0051395483314991}, {"id": 1105, "seek": 464260, "start": 4661.400000000001, "end": 4664.8, "text": " So a rank 1 tensor means it's a list of things.", "tokens": [51304, 407, 257, 6181, 502, 40863, 1355, 309, 311, 257, 1329, 295, 721, 13, 51474], "temperature": 0.0, "avg_logprob": -0.29483424807057795, "compression_ratio": 1.5285714285714285, "no_speech_prob": 0.0051395483314991}, {"id": 1106, "seek": 464260, "start": 4664.8, "end": 4667.320000000001, "text": " It's a vector.", "tokens": [51474, 467, 311, 257, 8062, 13, 51600], "temperature": 0.0, "avg_logprob": -0.29483424807057795, "compression_ratio": 1.5285714285714285, "no_speech_prob": 0.0051395483314991}, {"id": 1107, "seek": 464260, "start": 4667.320000000001, "end": 4671.120000000001, "text": " It's where else a rank 2 tensor is like a list of lists.", "tokens": [51600, 467, 311, 689, 1646, 257, 6181, 568, 40863, 307, 411, 257, 1329, 295, 14511, 13, 51790], "temperature": 0.0, "avg_logprob": -0.29483424807057795, "compression_ratio": 1.5285714285714285, "no_speech_prob": 0.0051395483314991}, {"id": 1108, "seek": 467112, "start": 4671.12, "end": 4673.28, "text": " They all have to be the same length, lists.", "tokens": [50364, 814, 439, 362, 281, 312, 264, 912, 4641, 11, 14511, 13, 50472], "temperature": 0.0, "avg_logprob": -0.2399549608106737, "compression_ratio": 1.6914893617021276, "no_speech_prob": 0.003538064658641815}, {"id": 1109, "seek": 467112, "start": 4673.28, "end": 4675.44, "text": " Or it's like a rectangular bunch of numbers.", "tokens": [50472, 1610, 309, 311, 411, 257, 31167, 3840, 295, 3547, 13, 50580], "temperature": 0.0, "avg_logprob": -0.2399549608106737, "compression_ratio": 1.6914893617021276, "no_speech_prob": 0.003538064658641815}, {"id": 1110, "seek": 467112, "start": 4675.44, "end": 4678.04, "text": " And we call it, in math, we call it a matrix.", "tokens": [50580, 400, 321, 818, 309, 11, 294, 5221, 11, 321, 818, 309, 257, 8141, 13, 50710], "temperature": 0.0, "avg_logprob": -0.2399549608106737, "compression_ratio": 1.6914893617021276, "no_speech_prob": 0.003538064658641815}, {"id": 1111, "seek": 467112, "start": 4678.04, "end": 4684.9, "text": " So this is how we can create a tensor containing 1, 2, 3, 4, 5, 6, 7, 8, 9.", "tokens": [50710, 407, 341, 307, 577, 321, 393, 1884, 257, 40863, 19273, 502, 11, 568, 11, 805, 11, 1017, 11, 1025, 11, 1386, 11, 1614, 11, 1649, 11, 1722, 13, 51053], "temperature": 0.0, "avg_logprob": -0.2399549608106737, "compression_ratio": 1.6914893617021276, "no_speech_prob": 0.003538064658641815}, {"id": 1112, "seek": 467112, "start": 4684.9, "end": 4689.76, "text": " And you can see often what I like to do is I want to print out the thing I just created", "tokens": [51053, 400, 291, 393, 536, 2049, 437, 286, 411, 281, 360, 307, 286, 528, 281, 4482, 484, 264, 551, 286, 445, 2942, 51296], "temperature": 0.0, "avg_logprob": -0.2399549608106737, "compression_ratio": 1.6914893617021276, "no_speech_prob": 0.003538064658641815}, {"id": 1113, "seek": 467112, "start": 4689.76, "end": 4690.88, "text": " after I created it.", "tokens": [51296, 934, 286, 2942, 309, 13, 51352], "temperature": 0.0, "avg_logprob": -0.2399549608106737, "compression_ratio": 1.6914893617021276, "no_speech_prob": 0.003538064658641815}, {"id": 1114, "seek": 467112, "start": 4690.88, "end": 4692.36, "text": " So two ways to do it.", "tokens": [51352, 407, 732, 2098, 281, 360, 309, 13, 51426], "temperature": 0.0, "avg_logprob": -0.2399549608106737, "compression_ratio": 1.6914893617021276, "no_speech_prob": 0.003538064658641815}, {"id": 1115, "seek": 467112, "start": 4692.36, "end": 4696.72, "text": " You can say, put an enter, and then write m, and that's going to do that.", "tokens": [51426, 509, 393, 584, 11, 829, 364, 3242, 11, 293, 550, 2464, 275, 11, 293, 300, 311, 516, 281, 360, 300, 13, 51644], "temperature": 0.0, "avg_logprob": -0.2399549608106737, "compression_ratio": 1.6914893617021276, "no_speech_prob": 0.003538064658641815}, {"id": 1116, "seek": 467112, "start": 4696.72, "end": 4698.96, "text": " Or if you want to put it all in the same line, that works too.", "tokens": [51644, 1610, 498, 291, 528, 281, 829, 309, 439, 294, 264, 912, 1622, 11, 300, 1985, 886, 13, 51756], "temperature": 0.0, "avg_logprob": -0.2399549608106737, "compression_ratio": 1.6914893617021276, "no_speech_prob": 0.003538064658641815}, {"id": 1117, "seek": 469896, "start": 4698.96, "end": 4701.24, "text": " You just use a semicolon.", "tokens": [50364, 509, 445, 764, 257, 27515, 38780, 13, 50478], "temperature": 0.0, "avg_logprob": -0.2872487277519412, "compression_ratio": 1.4804469273743017, "no_speech_prob": 0.00015843588334973902}, {"id": 1118, "seek": 469896, "start": 4701.24, "end": 4702.44, "text": " Neither one's better than the other.", "tokens": [50478, 23956, 472, 311, 1101, 813, 264, 661, 13, 50538], "temperature": 0.0, "avg_logprob": -0.2872487277519412, "compression_ratio": 1.4804469273743017, "no_speech_prob": 0.00015843588334973902}, {"id": 1119, "seek": 469896, "start": 4702.44, "end": 4705.4, "text": " They're just different.", "tokens": [50538, 814, 434, 445, 819, 13, 50686], "temperature": 0.0, "avg_logprob": -0.2872487277519412, "compression_ratio": 1.4804469273743017, "no_speech_prob": 0.00015843588334973902}, {"id": 1120, "seek": 469896, "start": 4705.4, "end": 4708.28, "text": " So we could do the same thing in APL.", "tokens": [50686, 407, 321, 727, 360, 264, 912, 551, 294, 5372, 43, 13, 50830], "temperature": 0.0, "avg_logprob": -0.2872487277519412, "compression_ratio": 1.4804469273743017, "no_speech_prob": 0.00015843588334973902}, {"id": 1121, "seek": 469896, "start": 4708.28, "end": 4711.52, "text": " Of course, in APL, it's going to be much easier.", "tokens": [50830, 2720, 1164, 11, 294, 5372, 43, 11, 309, 311, 516, 281, 312, 709, 3571, 13, 50992], "temperature": 0.0, "avg_logprob": -0.2872487277519412, "compression_ratio": 1.4804469273743017, "no_speech_prob": 0.00015843588334973902}, {"id": 1122, "seek": 469896, "start": 4711.52, "end": 4721.16, "text": " So we're going to define a matrix called m, which is going to be a 3 by 3 tensor containing", "tokens": [50992, 407, 321, 434, 516, 281, 6964, 257, 8141, 1219, 275, 11, 597, 307, 516, 281, 312, 257, 805, 538, 805, 40863, 19273, 51474], "temperature": 0.0, "avg_logprob": -0.2872487277519412, "compression_ratio": 1.4804469273743017, "no_speech_prob": 0.00015843588334973902}, {"id": 1123, "seek": 472116, "start": 4721.16, "end": 4725.28, "text": " the numbers from 1 to 9.", "tokens": [50364, 264, 3547, 490, 502, 281, 1722, 13, 50570], "temperature": 0.0, "avg_logprob": -0.2831582922684519, "compression_ratio": 1.473170731707317, "no_speech_prob": 0.0010005022631958127}, {"id": 1124, "seek": 472116, "start": 4725.28, "end": 4730.04, "text": " Okay, and there we go.", "tokens": [50570, 1033, 11, 293, 456, 321, 352, 13, 50808], "temperature": 0.0, "avg_logprob": -0.2831582922684519, "compression_ratio": 1.473170731707317, "no_speech_prob": 0.0010005022631958127}, {"id": 1125, "seek": 472116, "start": 4730.04, "end": 4731.84, "text": " That's done it in APL.", "tokens": [50808, 663, 311, 1096, 309, 294, 5372, 43, 13, 50898], "temperature": 0.0, "avg_logprob": -0.2831582922684519, "compression_ratio": 1.473170731707317, "no_speech_prob": 0.0010005022631958127}, {"id": 1126, "seek": 472116, "start": 4731.84, "end": 4736.68, "text": " A 3 by 3 tensor containing the numbers from 1 to 9.", "tokens": [50898, 316, 805, 538, 805, 40863, 19273, 264, 3547, 490, 502, 281, 1722, 13, 51140], "temperature": 0.0, "avg_logprob": -0.2831582922684519, "compression_ratio": 1.473170731707317, "no_speech_prob": 0.0010005022631958127}, {"id": 1127, "seek": 472116, "start": 4736.68, "end": 4740.36, "text": " A lot of these ideas from APL, you'll find, have made their way into other programming", "tokens": [51140, 316, 688, 295, 613, 3487, 490, 5372, 43, 11, 291, 603, 915, 11, 362, 1027, 641, 636, 666, 661, 9410, 51324], "temperature": 0.0, "avg_logprob": -0.2831582922684519, "compression_ratio": 1.473170731707317, "no_speech_prob": 0.0010005022631958127}, {"id": 1128, "seek": 472116, "start": 4740.36, "end": 4741.36, "text": " languages.", "tokens": [51324, 8650, 13, 51374], "temperature": 0.0, "avg_logprob": -0.2831582922684519, "compression_ratio": 1.473170731707317, "no_speech_prob": 0.0010005022631958127}, {"id": 1129, "seek": 472116, "start": 4741.36, "end": 4743.78, "text": " For example, if you use Go, you might recognize this.", "tokens": [51374, 1171, 1365, 11, 498, 291, 764, 1037, 11, 291, 1062, 5521, 341, 13, 51495], "temperature": 0.0, "avg_logprob": -0.2831582922684519, "compression_ratio": 1.473170731707317, "no_speech_prob": 0.0010005022631958127}, {"id": 1130, "seek": 472116, "start": 4743.78, "end": 4746.0, "text": " This is the iota character.", "tokens": [51495, 639, 307, 264, 741, 5377, 2517, 13, 51606], "temperature": 0.0, "avg_logprob": -0.2831582922684519, "compression_ratio": 1.473170731707317, "no_speech_prob": 0.0010005022631958127}, {"id": 1131, "seek": 474600, "start": 4746.0, "end": 4752.8, "text": " Go uses the word iota, they spell it out, in a somewhat similar way.", "tokens": [50364, 1037, 4960, 264, 1349, 741, 5377, 11, 436, 9827, 309, 484, 11, 294, 257, 8344, 2531, 636, 13, 50704], "temperature": 0.0, "avg_logprob": -0.30585746045382517, "compression_ratio": 1.5158730158730158, "no_speech_prob": 0.00857737846672535}, {"id": 1132, "seek": 474600, "start": 4752.8, "end": 4759.72, "text": " A lot of these ideas from APL have found themselves into math notation and other languages.", "tokens": [50704, 316, 688, 295, 613, 3487, 490, 5372, 43, 362, 1352, 2969, 666, 5221, 24657, 293, 661, 8650, 13, 51050], "temperature": 0.0, "avg_logprob": -0.30585746045382517, "compression_ratio": 1.5158730158730158, "no_speech_prob": 0.00857737846672535}, {"id": 1133, "seek": 474600, "start": 4759.72, "end": 4763.0, "text": " It's been around since the late 50s.", "tokens": [51050, 467, 311, 668, 926, 1670, 264, 3469, 2625, 82, 13, 51214], "temperature": 0.0, "avg_logprob": -0.30585746045382517, "compression_ratio": 1.5158730158730158, "no_speech_prob": 0.00857737846672535}, {"id": 1134, "seek": 474600, "start": 4763.0, "end": 4766.4, "text": " So here's a bit of fun.", "tokens": [51214, 407, 510, 311, 257, 857, 295, 1019, 13, 51384], "temperature": 0.0, "avg_logprob": -0.30585746045382517, "compression_ratio": 1.5158730158730158, "no_speech_prob": 0.00857737846672535}, {"id": 1135, "seek": 474600, "start": 4766.4, "end": 4772.36, "text": " We're going to learn about a new thing that looks kind of crazy, called Frobenius norm.", "tokens": [51384, 492, 434, 516, 281, 1466, 466, 257, 777, 551, 300, 1542, 733, 295, 3219, 11, 1219, 25028, 1799, 4872, 2026, 13, 51682], "temperature": 0.0, "avg_logprob": -0.30585746045382517, "compression_ratio": 1.5158730158730158, "no_speech_prob": 0.00857737846672535}, {"id": 1136, "seek": 474600, "start": 4772.36, "end": 4775.96, "text": " And we'll use that from time to time as we're doing generative modeling.", "tokens": [51682, 400, 321, 603, 764, 300, 490, 565, 281, 565, 382, 321, 434, 884, 1337, 1166, 15983, 13, 51862], "temperature": 0.0, "avg_logprob": -0.30585746045382517, "compression_ratio": 1.5158730158730158, "no_speech_prob": 0.00857737846672535}, {"id": 1137, "seek": 477596, "start": 4776.92, "end": 4779.04, "text": " And here's the definition of a Frobenius norm.", "tokens": [50412, 400, 510, 311, 264, 7123, 295, 257, 25028, 1799, 4872, 2026, 13, 50518], "temperature": 0.0, "avg_logprob": -0.2788935704017753, "compression_ratio": 1.5342465753424657, "no_speech_prob": 6.502814358100295e-05}, {"id": 1138, "seek": 477596, "start": 4779.04, "end": 4787.0, "text": " It's the sum over all of the rows and columns of a matrix.", "tokens": [50518, 467, 311, 264, 2408, 670, 439, 295, 264, 13241, 293, 13766, 295, 257, 8141, 13, 50916], "temperature": 0.0, "avg_logprob": -0.2788935704017753, "compression_ratio": 1.5342465753424657, "no_speech_prob": 6.502814358100295e-05}, {"id": 1139, "seek": 477596, "start": 4787.0, "end": 4789.96, "text": " And we're going to take each one and square it.", "tokens": [50916, 400, 321, 434, 516, 281, 747, 1184, 472, 293, 3732, 309, 13, 51064], "temperature": 0.0, "avg_logprob": -0.2788935704017753, "compression_ratio": 1.5342465753424657, "no_speech_prob": 6.502814358100295e-05}, {"id": 1140, "seek": 477596, "start": 4789.96, "end": 4794.28, "text": " We're going to add them up, and they're going to take the square root.", "tokens": [51064, 492, 434, 516, 281, 909, 552, 493, 11, 293, 436, 434, 516, 281, 747, 264, 3732, 5593, 13, 51280], "temperature": 0.0, "avg_logprob": -0.2788935704017753, "compression_ratio": 1.5342465753424657, "no_speech_prob": 6.502814358100295e-05}, {"id": 1141, "seek": 479428, "start": 4794.28, "end": 4803.88, "text": " And so to implement that in PyTorch, it's as simple as going m times m dot sum dot square", "tokens": [50364, 400, 370, 281, 4445, 300, 294, 9953, 51, 284, 339, 11, 309, 311, 382, 2199, 382, 516, 275, 1413, 275, 5893, 2408, 5893, 3732, 50844], "temperature": 0.0, "avg_logprob": -0.2963003880769304, "compression_ratio": 1.6175115207373272, "no_speech_prob": 0.007937551476061344}, {"id": 1142, "seek": 479428, "start": 4803.88, "end": 4806.38, "text": " root.", "tokens": [50844, 5593, 13, 50969], "temperature": 0.0, "avg_logprob": -0.2963003880769304, "compression_ratio": 1.6175115207373272, "no_speech_prob": 0.007937551476061344}, {"id": 1143, "seek": 479428, "start": 4806.38, "end": 4811.4, "text": " So this looks like a pretty complicated thing, when you kind of look at it at first.", "tokens": [50969, 407, 341, 1542, 411, 257, 1238, 6179, 551, 11, 562, 291, 733, 295, 574, 412, 309, 412, 700, 13, 51220], "temperature": 0.0, "avg_logprob": -0.2963003880769304, "compression_ratio": 1.6175115207373272, "no_speech_prob": 0.007937551476061344}, {"id": 1144, "seek": 479428, "start": 4811.4, "end": 4813.44, "text": " It looks like a lot of squiggly business.", "tokens": [51220, 467, 1542, 411, 257, 688, 295, 2339, 46737, 1606, 13, 51322], "temperature": 0.0, "avg_logprob": -0.2963003880769304, "compression_ratio": 1.6175115207373272, "no_speech_prob": 0.007937551476061344}, {"id": 1145, "seek": 479428, "start": 4813.44, "end": 4816.4, "text": " Or if you said this thing here, you might be like, what on earth is that?", "tokens": [51322, 1610, 498, 291, 848, 341, 551, 510, 11, 291, 1062, 312, 411, 11, 437, 322, 4120, 307, 300, 30, 51470], "temperature": 0.0, "avg_logprob": -0.2963003880769304, "compression_ratio": 1.6175115207373272, "no_speech_prob": 0.007937551476061344}, {"id": 1146, "seek": 479428, "start": 4816.4, "end": 4823.5199999999995, "text": " Well, now you know it's just square, sum, square root.", "tokens": [51470, 1042, 11, 586, 291, 458, 309, 311, 445, 3732, 11, 2408, 11, 3732, 5593, 13, 51826], "temperature": 0.0, "avg_logprob": -0.2963003880769304, "compression_ratio": 1.6175115207373272, "no_speech_prob": 0.007937551476061344}, {"id": 1147, "seek": 482352, "start": 4823.76, "end": 4829.72, "text": " So again, we could do the same thing in APL.", "tokens": [50376, 407, 797, 11, 321, 727, 360, 264, 912, 551, 294, 5372, 43, 13, 50674], "temperature": 0.0, "avg_logprob": -0.2904322327685957, "compression_ratio": 1.5853658536585367, "no_speech_prob": 2.1112464310135692e-05}, {"id": 1148, "seek": 482352, "start": 4829.72, "end": 4831.080000000001, "text": " So let's do...", "tokens": [50674, 407, 718, 311, 360, 485, 50742], "temperature": 0.0, "avg_logprob": -0.2904322327685957, "compression_ratio": 1.5853658536585367, "no_speech_prob": 2.1112464310135692e-05}, {"id": 1149, "seek": 482352, "start": 4831.080000000001, "end": 4832.64, "text": " So in APL, we want the...", "tokens": [50742, 407, 294, 5372, 43, 11, 321, 528, 264, 485, 50820], "temperature": 0.0, "avg_logprob": -0.2904322327685957, "compression_ratio": 1.5853658536585367, "no_speech_prob": 2.1112464310135692e-05}, {"id": 1150, "seek": 482352, "start": 4832.64, "end": 4837.280000000001, "text": " Okay, so we're going to create something called sf.", "tokens": [50820, 1033, 11, 370, 321, 434, 516, 281, 1884, 746, 1219, 47095, 13, 51052], "temperature": 0.0, "avg_logprob": -0.2904322327685957, "compression_ratio": 1.5853658536585367, "no_speech_prob": 2.1112464310135692e-05}, {"id": 1151, "seek": 482352, "start": 4837.280000000001, "end": 4840.360000000001, "text": " Now it's interesting, APL does this a little bit differently.", "tokens": [51052, 823, 309, 311, 1880, 11, 5372, 43, 775, 341, 257, 707, 857, 7614, 13, 51206], "temperature": 0.0, "avg_logprob": -0.2904322327685957, "compression_ratio": 1.5853658536585367, "no_speech_prob": 2.1112464310135692e-05}, {"id": 1152, "seek": 482352, "start": 4840.360000000001, "end": 4845.72, "text": " So dot sum, by default, in PyTorch, sums over everything.", "tokens": [51206, 407, 5893, 2408, 11, 538, 7576, 11, 294, 9953, 51, 284, 339, 11, 34499, 670, 1203, 13, 51474], "temperature": 0.0, "avg_logprob": -0.2904322327685957, "compression_ratio": 1.5853658536585367, "no_speech_prob": 2.1112464310135692e-05}, {"id": 1153, "seek": 482352, "start": 4845.72, "end": 4849.64, "text": " And if you want to sum over just one dimension, you have to pass in a dimension keyword.", "tokens": [51474, 400, 498, 291, 528, 281, 2408, 670, 445, 472, 10139, 11, 291, 362, 281, 1320, 294, 257, 10139, 20428, 13, 51670], "temperature": 0.0, "avg_logprob": -0.2904322327685957, "compression_ratio": 1.5853658536585367, "no_speech_prob": 2.1112464310135692e-05}, {"id": 1154, "seek": 482352, "start": 4849.64, "end": 4853.360000000001, "text": " For very good reasons, APL is the opposite.", "tokens": [51670, 1171, 588, 665, 4112, 11, 5372, 43, 307, 264, 6182, 13, 51856], "temperature": 0.0, "avg_logprob": -0.2904322327685957, "compression_ratio": 1.5853658536585367, "no_speech_prob": 2.1112464310135692e-05}, {"id": 1155, "seek": 485336, "start": 4854.2, "end": 4857.04, "text": " It just sums across rows or just down columns.", "tokens": [50406, 467, 445, 34499, 2108, 13241, 420, 445, 760, 13766, 13, 50548], "temperature": 0.0, "avg_logprob": -0.3205552782331194, "compression_ratio": 1.7816091954022988, "no_speech_prob": 5.9209098253631964e-05}, {"id": 1156, "seek": 485336, "start": 4857.04, "end": 4862.08, "text": " So actually, we have to say sum up the flattened out version of the matrix.", "tokens": [50548, 407, 767, 11, 321, 362, 281, 584, 2408, 493, 264, 24183, 292, 484, 3037, 295, 264, 8141, 13, 50800], "temperature": 0.0, "avg_logprob": -0.3205552782331194, "compression_ratio": 1.7816091954022988, "no_speech_prob": 5.9209098253631964e-05}, {"id": 1157, "seek": 485336, "start": 4862.08, "end": 4864.04, "text": " And to say flattened out, you use comma.", "tokens": [50800, 400, 281, 584, 24183, 292, 484, 11, 291, 764, 22117, 13, 50898], "temperature": 0.0, "avg_logprob": -0.3205552782331194, "compression_ratio": 1.7816091954022988, "no_speech_prob": 5.9209098253631964e-05}, {"id": 1158, "seek": 485336, "start": 4864.04, "end": 4867.88, "text": " So here's sum up the flattened out version of the matrix.", "tokens": [50898, 407, 510, 311, 2408, 493, 264, 24183, 292, 484, 3037, 295, 264, 8141, 13, 51090], "temperature": 0.0, "avg_logprob": -0.3205552782331194, "compression_ratio": 1.7816091954022988, "no_speech_prob": 5.9209098253631964e-05}, {"id": 1159, "seek": 485336, "start": 4867.88, "end": 4872.679999999999, "text": " Okay, so that's our sf.", "tokens": [51090, 1033, 11, 370, 300, 311, 527, 47095, 13, 51330], "temperature": 0.0, "avg_logprob": -0.3205552782331194, "compression_ratio": 1.7816091954022988, "no_speech_prob": 5.9209098253631964e-05}, {"id": 1160, "seek": 485336, "start": 4872.679999999999, "end": 4874.4, "text": " Oh, sorry.", "tokens": [51330, 876, 11, 2597, 13, 51416], "temperature": 0.0, "avg_logprob": -0.3205552782331194, "compression_ratio": 1.7816091954022988, "no_speech_prob": 5.9209098253631964e-05}, {"id": 1161, "seek": 485336, "start": 4874.4, "end": 4876.839999999999, "text": " And the matrix is meant to be m times m.", "tokens": [51416, 400, 264, 8141, 307, 4140, 281, 312, 275, 1413, 275, 13, 51538], "temperature": 0.0, "avg_logprob": -0.3205552782331194, "compression_ratio": 1.7816091954022988, "no_speech_prob": 5.9209098253631964e-05}, {"id": 1162, "seek": 485336, "start": 4876.839999999999, "end": 4882.679999999999, "text": " There we go.", "tokens": [51538, 821, 321, 352, 13, 51830], "temperature": 0.0, "avg_logprob": -0.3205552782331194, "compression_ratio": 1.7816091954022988, "no_speech_prob": 5.9209098253631964e-05}, {"id": 1163, "seek": 488268, "start": 4883.0, "end": 4884.12, "text": " So there's the same thing.", "tokens": [50380, 407, 456, 311, 264, 912, 551, 13, 50436], "temperature": 0.0, "avg_logprob": -0.2619131275864898, "compression_ratio": 1.6088709677419355, "no_speech_prob": 0.0002653019910212606}, {"id": 1164, "seek": 488268, "start": 4884.12, "end": 4887.200000000001, "text": " Sum up the flattened out m by m matrix.", "tokens": [50436, 8626, 493, 264, 24183, 292, 484, 275, 538, 275, 8141, 13, 50590], "temperature": 0.0, "avg_logprob": -0.2619131275864898, "compression_ratio": 1.6088709677419355, "no_speech_prob": 0.0002653019910212606}, {"id": 1165, "seek": 488268, "start": 4887.200000000001, "end": 4890.72, "text": " And another interesting thing about APL is it always is read right to left.", "tokens": [50590, 400, 1071, 1880, 551, 466, 5372, 43, 307, 309, 1009, 307, 1401, 558, 281, 1411, 13, 50766], "temperature": 0.0, "avg_logprob": -0.2619131275864898, "compression_ratio": 1.6088709677419355, "no_speech_prob": 0.0002653019910212606}, {"id": 1166, "seek": 488268, "start": 4890.72, "end": 4895.240000000001, "text": " There's no such thing as operator precedence, which makes life a lot easier.", "tokens": [50766, 821, 311, 572, 1270, 551, 382, 12973, 16969, 655, 11, 597, 1669, 993, 257, 688, 3571, 13, 50992], "temperature": 0.0, "avg_logprob": -0.2619131275864898, "compression_ratio": 1.6088709677419355, "no_speech_prob": 0.0002653019910212606}, {"id": 1167, "seek": 488268, "start": 4895.240000000001, "end": 4901.320000000001, "text": " Okay, and then we take the square root of that.", "tokens": [50992, 1033, 11, 293, 550, 321, 747, 264, 3732, 5593, 295, 300, 13, 51296], "temperature": 0.0, "avg_logprob": -0.2619131275864898, "compression_ratio": 1.6088709677419355, "no_speech_prob": 0.0002653019910212606}, {"id": 1168, "seek": 488268, "start": 4901.320000000001, "end": 4903.76, "text": " There isn't a square root function.", "tokens": [51296, 821, 1943, 380, 257, 3732, 5593, 2445, 13, 51418], "temperature": 0.0, "avg_logprob": -0.2619131275864898, "compression_ratio": 1.6088709677419355, "no_speech_prob": 0.0002653019910212606}, {"id": 1169, "seek": 488268, "start": 4903.76, "end": 4907.320000000001, "text": " So we have to do to the power of 0.5.", "tokens": [51418, 407, 321, 362, 281, 360, 281, 264, 1347, 295, 1958, 13, 20, 13, 51596], "temperature": 0.0, "avg_logprob": -0.2619131275864898, "compression_ratio": 1.6088709677419355, "no_speech_prob": 0.0002653019910212606}, {"id": 1170, "seek": 488268, "start": 4907.320000000001, "end": 4908.320000000001, "text": " And there we go.", "tokens": [51596, 400, 456, 321, 352, 13, 51646], "temperature": 0.0, "avg_logprob": -0.2619131275864898, "compression_ratio": 1.6088709677419355, "no_speech_prob": 0.0002653019910212606}, {"id": 1171, "seek": 488268, "start": 4908.320000000001, "end": 4909.320000000001, "text": " Same thing.", "tokens": [51646, 10635, 551, 13, 51696], "temperature": 0.0, "avg_logprob": -0.2619131275864898, "compression_ratio": 1.6088709677419355, "no_speech_prob": 0.0002653019910212606}, {"id": 1172, "seek": 488268, "start": 4909.320000000001, "end": 4911.400000000001, "text": " All right, you get the idea.", "tokens": [51696, 1057, 558, 11, 291, 483, 264, 1558, 13, 51800], "temperature": 0.0, "avg_logprob": -0.2619131275864898, "compression_ratio": 1.6088709677419355, "no_speech_prob": 0.0002653019910212606}, {"id": 1173, "seek": 491140, "start": 4911.799999999999, "end": 4916.0, "text": " Yes, a very interesting question here from Marabu.", "tokens": [50384, 1079, 11, 257, 588, 1880, 1168, 510, 490, 2039, 455, 84, 13, 50594], "temperature": 0.0, "avg_logprob": -0.3161664442582564, "compression_ratio": 1.790909090909091, "no_speech_prob": 2.8856728022219613e-05}, {"id": 1174, "seek": 491140, "start": 4916.0, "end": 4918.879999999999, "text": " Are the bars for norm or absolute value?", "tokens": [50594, 2014, 264, 10228, 337, 2026, 420, 8236, 2158, 30, 50738], "temperature": 0.0, "avg_logprob": -0.3161664442582564, "compression_ratio": 1.790909090909091, "no_speech_prob": 2.8856728022219613e-05}, {"id": 1175, "seek": 491140, "start": 4918.879999999999, "end": 4926.24, "text": " And I like Siva's answer, which is the norm is the same as the absolute value for a scalar.", "tokens": [50738, 400, 286, 411, 318, 5931, 311, 1867, 11, 597, 307, 264, 2026, 307, 264, 912, 382, 264, 8236, 2158, 337, 257, 39684, 13, 51106], "temperature": 0.0, "avg_logprob": -0.3161664442582564, "compression_ratio": 1.790909090909091, "no_speech_prob": 2.8856728022219613e-05}, {"id": 1176, "seek": 491140, "start": 4926.24, "end": 4928.28, "text": " So in this case, you can think of it as absolute value.", "tokens": [51106, 407, 294, 341, 1389, 11, 291, 393, 519, 295, 309, 382, 8236, 2158, 13, 51208], "temperature": 0.0, "avg_logprob": -0.3161664442582564, "compression_ratio": 1.790909090909091, "no_speech_prob": 2.8856728022219613e-05}, {"id": 1177, "seek": 491140, "start": 4928.28, "end": 4932.0, "text": " And it's kind of not needed because it's being squared anyway.", "tokens": [51208, 400, 309, 311, 733, 295, 406, 2978, 570, 309, 311, 885, 8889, 4033, 13, 51394], "temperature": 0.0, "avg_logprob": -0.3161664442582564, "compression_ratio": 1.790909090909091, "no_speech_prob": 2.8856728022219613e-05}, {"id": 1178, "seek": 491140, "start": 4932.0, "end": 4938.36, "text": " But yes, in this case, the norm, well, in every case for a scalar, the norm is the absolute", "tokens": [51394, 583, 2086, 11, 294, 341, 1389, 11, 264, 2026, 11, 731, 11, 294, 633, 1389, 337, 257, 39684, 11, 264, 2026, 307, 264, 8236, 51712], "temperature": 0.0, "avg_logprob": -0.3161664442582564, "compression_ratio": 1.790909090909091, "no_speech_prob": 2.8856728022219613e-05}, {"id": 1179, "seek": 493836, "start": 4938.36, "end": 4941.88, "text": " value, which is kind of a cute discovery when you realize it.", "tokens": [50364, 2158, 11, 597, 307, 733, 295, 257, 4052, 12114, 562, 291, 4325, 309, 13, 50540], "temperature": 0.0, "avg_logprob": -0.3032083885342467, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.00364994746632874}, {"id": 1180, "seek": 493836, "start": 4941.88, "end": 4945.799999999999, "text": " So thank you for pointing that out, Siva.", "tokens": [50540, 407, 1309, 291, 337, 12166, 300, 484, 11, 318, 5931, 13, 50736], "temperature": 0.0, "avg_logprob": -0.3032083885342467, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.00364994746632874}, {"id": 1181, "seek": 493836, "start": 4945.799999999999, "end": 4947.12, "text": " All right.", "tokens": [50736, 1057, 558, 13, 50802], "temperature": 0.0, "avg_logprob": -0.3032083885342467, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.00364994746632874}, {"id": 1182, "seek": 493836, "start": 4947.12, "end": 4950.24, "text": " So this is just fiddling around a little bit to kind of get a sense of how these things", "tokens": [50802, 407, 341, 307, 445, 283, 14273, 1688, 926, 257, 707, 857, 281, 733, 295, 483, 257, 2020, 295, 577, 613, 721, 50958], "temperature": 0.0, "avg_logprob": -0.3032083885342467, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.00364994746632874}, {"id": 1183, "seek": 493836, "start": 4950.24, "end": 4953.04, "text": " work.", "tokens": [50958, 589, 13, 51098], "temperature": 0.0, "avg_logprob": -0.3032083885342467, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.00364994746632874}, {"id": 1184, "seek": 493836, "start": 4953.04, "end": 4959.96, "text": " So really importantly, you can index into a matrix.", "tokens": [51098, 407, 534, 8906, 11, 291, 393, 8186, 666, 257, 8141, 13, 51444], "temperature": 0.0, "avg_logprob": -0.3032083885342467, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.00364994746632874}, {"id": 1185, "seek": 493836, "start": 4959.96, "end": 4962.28, "text": " And you'll say rows first and then columns.", "tokens": [51444, 400, 291, 603, 584, 13241, 700, 293, 550, 13766, 13, 51560], "temperature": 0.0, "avg_logprob": -0.3032083885342467, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.00364994746632874}, {"id": 1186, "seek": 493836, "start": 4962.28, "end": 4964.599999999999, "text": " And if you say colon, it means all the columns.", "tokens": [51560, 400, 498, 291, 584, 8255, 11, 309, 1355, 439, 264, 13766, 13, 51676], "temperature": 0.0, "avg_logprob": -0.3032083885342467, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.00364994746632874}, {"id": 1187, "seek": 496460, "start": 4964.6, "end": 4970.04, "text": " So if I say row two, here it is, row two, all the columns.", "tokens": [50364, 407, 498, 286, 584, 5386, 732, 11, 510, 309, 307, 11, 5386, 732, 11, 439, 264, 13766, 13, 50636], "temperature": 0.0, "avg_logprob": -0.2969780573769221, "compression_ratio": 1.6861924686192469, "no_speech_prob": 0.0005884059355594218}, {"id": 1188, "seek": 496460, "start": 4970.04, "end": 4972.56, "text": " Sorry, this is row two, starts at zero.", "tokens": [50636, 4919, 11, 341, 307, 5386, 732, 11, 3719, 412, 4018, 13, 50762], "temperature": 0.0, "avg_logprob": -0.2969780573769221, "compression_ratio": 1.6861924686192469, "no_speech_prob": 0.0005884059355594218}, {"id": 1189, "seek": 496460, "start": 4972.56, "end": 4974.120000000001, "text": " APL starts at one.", "tokens": [50762, 5372, 43, 3719, 412, 472, 13, 50840], "temperature": 0.0, "avg_logprob": -0.2969780573769221, "compression_ratio": 1.6861924686192469, "no_speech_prob": 0.0005884059355594218}, {"id": 1190, "seek": 496460, "start": 4974.120000000001, "end": 4977.72, "text": " All the columns, that's going to be seven, eight, nine.", "tokens": [50840, 1057, 264, 13766, 11, 300, 311, 516, 281, 312, 3407, 11, 3180, 11, 4949, 13, 51020], "temperature": 0.0, "avg_logprob": -0.2969780573769221, "compression_ratio": 1.6861924686192469, "no_speech_prob": 0.0005884059355594218}, {"id": 1191, "seek": 496460, "start": 4977.72, "end": 4980.56, "text": " And you can see I often use comma to print out multiple things.", "tokens": [51020, 400, 291, 393, 536, 286, 2049, 764, 22117, 281, 4482, 484, 3866, 721, 13, 51162], "temperature": 0.0, "avg_logprob": -0.2969780573769221, "compression_ratio": 1.6861924686192469, "no_speech_prob": 0.0005884059355594218}, {"id": 1192, "seek": 496460, "start": 4980.56, "end": 4984.96, "text": " And I don't have to say print in Jupyter, it's kind of assumed.", "tokens": [51162, 400, 286, 500, 380, 362, 281, 584, 4482, 294, 22125, 88, 391, 11, 309, 311, 733, 295, 15895, 13, 51382], "temperature": 0.0, "avg_logprob": -0.2969780573769221, "compression_ratio": 1.6861924686192469, "no_speech_prob": 0.0005884059355594218}, {"id": 1193, "seek": 496460, "start": 4984.96, "end": 4988.280000000001, "text": " And so this is just a quick way of printing out the second row.", "tokens": [51382, 400, 370, 341, 307, 445, 257, 1702, 636, 295, 14699, 484, 264, 1150, 5386, 13, 51548], "temperature": 0.0, "avg_logprob": -0.2969780573769221, "compression_ratio": 1.6861924686192469, "no_speech_prob": 0.0005884059355594218}, {"id": 1194, "seek": 496460, "start": 4988.280000000001, "end": 4992.64, "text": " And then here, every row, column two.", "tokens": [51548, 400, 550, 510, 11, 633, 5386, 11, 7738, 732, 13, 51766], "temperature": 0.0, "avg_logprob": -0.2969780573769221, "compression_ratio": 1.6861924686192469, "no_speech_prob": 0.0005884059355594218}, {"id": 1195, "seek": 499264, "start": 4992.68, "end": 4995.52, "text": " So here is every row of column two.", "tokens": [50366, 407, 510, 307, 633, 5386, 295, 7738, 732, 13, 50508], "temperature": 0.0, "avg_logprob": -0.25900888442993164, "compression_ratio": 1.53, "no_speech_prob": 3.3405367503291927e-06}, {"id": 1196, "seek": 499264, "start": 4995.52, "end": 5003.12, "text": " And here you can see, three, six, nine.", "tokens": [50508, 400, 510, 291, 393, 536, 11, 1045, 11, 2309, 11, 4949, 13, 50888], "temperature": 0.0, "avg_logprob": -0.25900888442993164, "compression_ratio": 1.53, "no_speech_prob": 3.3405367503291927e-06}, {"id": 1197, "seek": 499264, "start": 5003.12, "end": 5010.8, "text": " So one thing very useful to recognize is that for tensors of higher rank than one, such", "tokens": [50888, 407, 472, 551, 588, 4420, 281, 5521, 307, 300, 337, 10688, 830, 295, 2946, 6181, 813, 472, 11, 1270, 51272], "temperature": 0.0, "avg_logprob": -0.25900888442993164, "compression_ratio": 1.53, "no_speech_prob": 3.3405367503291927e-06}, {"id": 1198, "seek": 499264, "start": 5010.8, "end": 5015.240000000001, "text": " as a matrix, any trailing colons are optional.", "tokens": [51272, 382, 257, 8141, 11, 604, 944, 4883, 1173, 892, 366, 17312, 13, 51494], "temperature": 0.0, "avg_logprob": -0.25900888442993164, "compression_ratio": 1.53, "no_speech_prob": 3.3405367503291927e-06}, {"id": 1199, "seek": 499264, "start": 5015.240000000001, "end": 5020.68, "text": " So you see this here, M2, that's the same as M2 comma colon.", "tokens": [51494, 407, 291, 536, 341, 510, 11, 376, 17, 11, 300, 311, 264, 912, 382, 376, 17, 22117, 8255, 13, 51766], "temperature": 0.0, "avg_logprob": -0.25900888442993164, "compression_ratio": 1.53, "no_speech_prob": 3.3405367503291927e-06}, {"id": 1200, "seek": 499264, "start": 5020.68, "end": 5021.92, "text": " It's really important to remember.", "tokens": [51766, 467, 311, 534, 1021, 281, 1604, 13, 51828], "temperature": 0.0, "avg_logprob": -0.25900888442993164, "compression_ratio": 1.53, "no_speech_prob": 3.3405367503291927e-06}, {"id": 1201, "seek": 502192, "start": 5022.2, "end": 5025.88, "text": " Okay, so M2, you can see the result is the same.", "tokens": [50378, 1033, 11, 370, 376, 17, 11, 291, 393, 536, 264, 1874, 307, 264, 912, 13, 50562], "temperature": 0.0, "avg_logprob": -0.30876337687174477, "compression_ratio": 1.5414364640883977, "no_speech_prob": 2.190781742683612e-06}, {"id": 1202, "seek": 502192, "start": 5025.88, "end": 5027.72, "text": " So that means row two, every column.", "tokens": [50562, 407, 300, 1355, 5386, 732, 11, 633, 7738, 13, 50654], "temperature": 0.0, "avg_logprob": -0.30876337687174477, "compression_ratio": 1.5414364640883977, "no_speech_prob": 2.190781742683612e-06}, {"id": 1203, "seek": 502192, "start": 5029.96, "end": 5036.32, "text": " Okay, so now with all that in place, we've got quite an easy way.", "tokens": [50766, 1033, 11, 370, 586, 365, 439, 300, 294, 1081, 11, 321, 600, 658, 1596, 364, 1858, 636, 13, 51084], "temperature": 0.0, "avg_logprob": -0.30876337687174477, "compression_ratio": 1.5414364640883977, "no_speech_prob": 2.190781742683612e-06}, {"id": 1204, "seek": 502192, "start": 5036.32, "end": 5040.4, "text": " We don't need a number anymore.", "tokens": [51084, 492, 500, 380, 643, 257, 1230, 3602, 13, 51288], "temperature": 0.0, "avg_logprob": -0.30876337687174477, "compression_ratio": 1.5414364640883977, "no_speech_prob": 2.190781742683612e-06}, {"id": 1205, "seek": 502192, "start": 5040.4, "end": 5044.28, "text": " We can multiply, so we can get rid of that innermost loop.", "tokens": [51288, 492, 393, 12972, 11, 370, 321, 393, 483, 3973, 295, 300, 7714, 966, 555, 6367, 13, 51482], "temperature": 0.0, "avg_logprob": -0.30876337687174477, "compression_ratio": 1.5414364640883977, "no_speech_prob": 2.190781742683612e-06}, {"id": 1206, "seek": 502192, "start": 5045.4, "end": 5046.56, "text": " So we're gonna get rid of this loop.", "tokens": [51538, 407, 321, 434, 799, 483, 3973, 295, 341, 6367, 13, 51596], "temperature": 0.0, "avg_logprob": -0.30876337687174477, "compression_ratio": 1.5414364640883977, "no_speech_prob": 2.190781742683612e-06}, {"id": 1207, "seek": 504656, "start": 5047.56, "end": 5052.68, "text": " Because this is just multiplying together all of the corresponding rows of A,", "tokens": [50414, 1436, 341, 307, 445, 30955, 1214, 439, 295, 264, 11760, 13241, 295, 316, 11, 50670], "temperature": 0.0, "avg_logprob": -0.34606820886785333, "compression_ratio": 1.8511904761904763, "no_speech_prob": 0.0002653014089446515}, {"id": 1208, "seek": 504656, "start": 5052.68, "end": 5056.240000000001, "text": " with all, sorry, all the corresponding colons of a row of A,", "tokens": [50670, 365, 439, 11, 2597, 11, 439, 264, 11760, 1173, 892, 295, 257, 5386, 295, 316, 11, 50848], "temperature": 0.0, "avg_logprob": -0.34606820886785333, "compression_ratio": 1.8511904761904763, "no_speech_prob": 0.0002653014089446515}, {"id": 1209, "seek": 504656, "start": 5056.240000000001, "end": 5058.360000000001, "text": " with all the corresponding rows of a column of B.", "tokens": [50848, 365, 439, 264, 11760, 13241, 295, 257, 7738, 295, 363, 13, 50954], "temperature": 0.0, "avg_logprob": -0.34606820886785333, "compression_ratio": 1.8511904761904763, "no_speech_prob": 0.0002653014089446515}, {"id": 1210, "seek": 504656, "start": 5060.0, "end": 5062.280000000001, "text": " And so we can just use an element wise operation for that.", "tokens": [51036, 400, 370, 321, 393, 445, 764, 364, 4478, 10829, 6916, 337, 300, 13, 51150], "temperature": 0.0, "avg_logprob": -0.34606820886785333, "compression_ratio": 1.8511904761904763, "no_speech_prob": 0.0002653014089446515}, {"id": 1211, "seek": 504656, "start": 5064.400000000001, "end": 5073.240000000001, "text": " So here is the i-th row of A, and here is the j-th column of B.", "tokens": [51256, 407, 510, 307, 264, 741, 12, 392, 5386, 295, 316, 11, 293, 510, 307, 264, 361, 12, 392, 7738, 295, 363, 13, 51698], "temperature": 0.0, "avg_logprob": -0.34606820886785333, "compression_ratio": 1.8511904761904763, "no_speech_prob": 0.0002653014089446515}, {"id": 1212, "seek": 507324, "start": 5073.32, "end": 5077.92, "text": " And so those are both, as we've seen, just vectors.", "tokens": [50368, 400, 370, 729, 366, 1293, 11, 382, 321, 600, 1612, 11, 445, 18875, 13, 50598], "temperature": 0.0, "avg_logprob": -0.3021533114851014, "compression_ratio": 1.6290322580645162, "no_speech_prob": 8.059440688157338e-07}, {"id": 1213, "seek": 507324, "start": 5077.92, "end": 5080.4, "text": " And therefore, we can do an element wise multiplication of them.", "tokens": [50598, 400, 4412, 11, 321, 393, 360, 364, 4478, 10829, 27290, 295, 552, 13, 50722], "temperature": 0.0, "avg_logprob": -0.3021533114851014, "compression_ratio": 1.6290322580645162, "no_speech_prob": 8.059440688157338e-07}, {"id": 1214, "seek": 507324, "start": 5082.12, "end": 5083.5199999999995, "text": " And then sum them up.", "tokens": [50808, 400, 550, 2408, 552, 493, 13, 50878], "temperature": 0.0, "avg_logprob": -0.3021533114851014, "compression_ratio": 1.6290322580645162, "no_speech_prob": 8.059440688157338e-07}, {"id": 1215, "seek": 507324, "start": 5083.5199999999995, "end": 5084.719999999999, "text": " And that's the same as a dot product.", "tokens": [50878, 400, 300, 311, 264, 912, 382, 257, 5893, 1674, 13, 50938], "temperature": 0.0, "avg_logprob": -0.3021533114851014, "compression_ratio": 1.6290322580645162, "no_speech_prob": 8.059440688157338e-07}, {"id": 1216, "seek": 507324, "start": 5086.32, "end": 5087.04, "text": " So that's handy.", "tokens": [51018, 407, 300, 311, 13239, 13, 51054], "temperature": 0.0, "avg_logprob": -0.3021533114851014, "compression_ratio": 1.6290322580645162, "no_speech_prob": 8.059440688157338e-07}, {"id": 1217, "seek": 507324, "start": 5088.84, "end": 5090.48, "text": " And so again, we'll do test close.", "tokens": [51144, 400, 370, 797, 11, 321, 603, 360, 1500, 1998, 13, 51226], "temperature": 0.0, "avg_logprob": -0.3021533114851014, "compression_ratio": 1.6290322580645162, "no_speech_prob": 8.059440688157338e-07}, {"id": 1218, "seek": 507324, "start": 5090.48, "end": 5091.719999999999, "text": " Okay, it's the same, great.", "tokens": [51226, 1033, 11, 309, 311, 264, 912, 11, 869, 13, 51288], "temperature": 0.0, "avg_logprob": -0.3021533114851014, "compression_ratio": 1.6290322580645162, "no_speech_prob": 8.059440688157338e-07}, {"id": 1219, "seek": 507324, "start": 5093.8, "end": 5097.639999999999, "text": " And again, you'll see we kind of did all of our experimenting first, right?", "tokens": [51392, 400, 797, 11, 291, 603, 536, 321, 733, 295, 630, 439, 295, 527, 29070, 700, 11, 558, 30, 51584], "temperature": 0.0, "avg_logprob": -0.3021533114851014, "compression_ratio": 1.6290322580645162, "no_speech_prob": 8.059440688157338e-07}, {"id": 1220, "seek": 507324, "start": 5097.639999999999, "end": 5101.4, "text": " To make sure we understood how it all worked, and then put it together.", "tokens": [51584, 1407, 652, 988, 321, 7320, 577, 309, 439, 2732, 11, 293, 550, 829, 309, 1214, 13, 51772], "temperature": 0.0, "avg_logprob": -0.3021533114851014, "compression_ratio": 1.6290322580645162, "no_speech_prob": 8.059440688157338e-07}, {"id": 1221, "seek": 510140, "start": 5101.4, "end": 5106.16, "text": " And then if we time it, 661 microseconds.", "tokens": [50364, 400, 550, 498, 321, 565, 309, 11, 1386, 31537, 3123, 37841, 28750, 13, 50602], "temperature": 0.0, "avg_logprob": -0.26651997225625174, "compression_ratio": 1.5590551181102361, "no_speech_prob": 2.8409707738319412e-05}, {"id": 1222, "seek": 510140, "start": 5106.16, "end": 5107.0, "text": " Okay, so it's interesting.", "tokens": [50602, 1033, 11, 370, 309, 311, 1880, 13, 50644], "temperature": 0.0, "avg_logprob": -0.26651997225625174, "compression_ratio": 1.5590551181102361, "no_speech_prob": 2.8409707738319412e-05}, {"id": 1223, "seek": 510140, "start": 5107.0, "end": 5111.28, "text": " It's actually slower than, which really shows you how good number is.", "tokens": [50644, 467, 311, 767, 14009, 813, 11, 597, 534, 3110, 291, 577, 665, 1230, 307, 13, 50858], "temperature": 0.0, "avg_logprob": -0.26651997225625174, "compression_ratio": 1.5590551181102361, "no_speech_prob": 2.8409707738319412e-05}, {"id": 1224, "seek": 510140, "start": 5111.28, "end": 5115.839999999999, "text": " But it's certainly a hell of a lot better than our 450 milliseconds.", "tokens": [50858, 583, 309, 311, 3297, 257, 4921, 295, 257, 688, 1101, 813, 527, 26034, 34184, 13, 51086], "temperature": 0.0, "avg_logprob": -0.26651997225625174, "compression_ratio": 1.5590551181102361, "no_speech_prob": 2.8409707738319412e-05}, {"id": 1225, "seek": 510140, "start": 5115.839999999999, "end": 5118.799999999999, "text": " But we're using something that's kind of a lot more general now.", "tokens": [51086, 583, 321, 434, 1228, 746, 300, 311, 733, 295, 257, 688, 544, 2674, 586, 13, 51234], "temperature": 0.0, "avg_logprob": -0.26651997225625174, "compression_ratio": 1.5590551181102361, "no_speech_prob": 2.8409707738319412e-05}, {"id": 1226, "seek": 510140, "start": 5122.04, "end": 5124.879999999999, "text": " This is exactly the same as dot, as we've discussed.", "tokens": [51396, 639, 307, 2293, 264, 912, 382, 5893, 11, 382, 321, 600, 7152, 13, 51538], "temperature": 0.0, "avg_logprob": -0.26651997225625174, "compression_ratio": 1.5590551181102361, "no_speech_prob": 2.8409707738319412e-05}, {"id": 1227, "seek": 510140, "start": 5124.879999999999, "end": 5130.24, "text": " So we could just use torch dot, torch dot dot, I suppose I should say.", "tokens": [51538, 407, 321, 727, 445, 764, 27822, 5893, 11, 27822, 5893, 5893, 11, 286, 7297, 286, 820, 584, 13, 51806], "temperature": 0.0, "avg_logprob": -0.26651997225625174, "compression_ratio": 1.5590551181102361, "no_speech_prob": 2.8409707738319412e-05}, {"id": 1228, "seek": 513024, "start": 5130.24, "end": 5134.0, "text": " And if we run that, okay, a little faster.", "tokens": [50364, 400, 498, 321, 1190, 300, 11, 1392, 11, 257, 707, 4663, 13, 50552], "temperature": 0.0, "avg_logprob": -0.3296591512272867, "compression_ratio": 1.5658536585365854, "no_speech_prob": 1.3007119378016796e-05}, {"id": 1229, "seek": 513024, "start": 5134.0, "end": 5137.679999999999, "text": " It's still, interestingly, it's still slower than the number,", "tokens": [50552, 467, 311, 920, 11, 25873, 11, 309, 311, 920, 14009, 813, 264, 1230, 11, 50736], "temperature": 0.0, "avg_logprob": -0.3296591512272867, "compression_ratio": 1.5658536585365854, "no_speech_prob": 1.3007119378016796e-05}, {"id": 1230, "seek": 513024, "start": 5137.679999999999, "end": 5139.84, "text": " which is quite amazing, actually.", "tokens": [50736, 597, 307, 1596, 2243, 11, 767, 13, 50844], "temperature": 0.0, "avg_logprob": -0.3296591512272867, "compression_ratio": 1.5658536585365854, "no_speech_prob": 1.3007119378016796e-05}, {"id": 1231, "seek": 513024, "start": 5141.599999999999, "end": 5145.679999999999, "text": " All right, so that one was not exactly a speed up, but", "tokens": [50932, 1057, 558, 11, 370, 300, 472, 390, 406, 2293, 257, 3073, 493, 11, 457, 51136], "temperature": 0.0, "avg_logprob": -0.3296591512272867, "compression_ratio": 1.5658536585365854, "no_speech_prob": 1.3007119378016796e-05}, {"id": 1232, "seek": 513024, "start": 5145.679999999999, "end": 5148.0, "text": " it's kind of a bit more general, which is nice.", "tokens": [51136, 309, 311, 733, 295, 257, 857, 544, 2674, 11, 597, 307, 1481, 13, 51252], "temperature": 0.0, "avg_logprob": -0.3296591512272867, "compression_ratio": 1.5658536585365854, "no_speech_prob": 1.3007119378016796e-05}, {"id": 1233, "seek": 513024, "start": 5150.36, "end": 5156.8, "text": " Now we're gonna get something into something really fun, which is broadcasting.", "tokens": [51370, 823, 321, 434, 799, 483, 746, 666, 746, 534, 1019, 11, 597, 307, 30024, 13, 51692], "temperature": 0.0, "avg_logprob": -0.3296591512272867, "compression_ratio": 1.5658536585365854, "no_speech_prob": 1.3007119378016796e-05}, {"id": 1234, "seek": 515680, "start": 5156.8, "end": 5161.76, "text": " And broadcasting is about what if you have arrays with different shapes?", "tokens": [50364, 400, 30024, 307, 466, 437, 498, 291, 362, 41011, 365, 819, 10854, 30, 50612], "temperature": 0.0, "avg_logprob": -0.2619650223675896, "compression_ratio": 1.7681159420289856, "no_speech_prob": 4.4254902604734525e-06}, {"id": 1235, "seek": 515680, "start": 5161.76, "end": 5163.04, "text": " So what's a shape?", "tokens": [50612, 407, 437, 311, 257, 3909, 30, 50676], "temperature": 0.0, "avg_logprob": -0.2619650223675896, "compression_ratio": 1.7681159420289856, "no_speech_prob": 4.4254902604734525e-06}, {"id": 1236, "seek": 515680, "start": 5163.04, "end": 5167.04, "text": " The shape is the number of rows, or the number of rows and columns, or", "tokens": [50676, 440, 3909, 307, 264, 1230, 295, 13241, 11, 420, 264, 1230, 295, 13241, 293, 13766, 11, 420, 50876], "temperature": 0.0, "avg_logprob": -0.2619650223675896, "compression_ratio": 1.7681159420289856, "no_speech_prob": 4.4254902604734525e-06}, {"id": 1237, "seek": 515680, "start": 5167.04, "end": 5172.88, "text": " the number of, what would you say, faces, rows and columns, and so forth.", "tokens": [50876, 264, 1230, 295, 11, 437, 576, 291, 584, 11, 8475, 11, 13241, 293, 13766, 11, 293, 370, 5220, 13, 51168], "temperature": 0.0, "avg_logprob": -0.2619650223675896, "compression_ratio": 1.7681159420289856, "no_speech_prob": 4.4254902604734525e-06}, {"id": 1238, "seek": 515680, "start": 5172.88, "end": 5178.08, "text": " So for example, the shape of M is 3 by 3.", "tokens": [51168, 407, 337, 1365, 11, 264, 3909, 295, 376, 307, 805, 538, 805, 13, 51428], "temperature": 0.0, "avg_logprob": -0.2619650223675896, "compression_ratio": 1.7681159420289856, "no_speech_prob": 4.4254902604734525e-06}, {"id": 1239, "seek": 515680, "start": 5178.08, "end": 5180.76, "text": " So what happens if you multiply or add or", "tokens": [51428, 407, 437, 2314, 498, 291, 12972, 420, 909, 420, 51562], "temperature": 0.0, "avg_logprob": -0.2619650223675896, "compression_ratio": 1.7681159420289856, "no_speech_prob": 4.4254902604734525e-06}, {"id": 1240, "seek": 515680, "start": 5180.76, "end": 5183.8, "text": " do operations to tensors of different shapes?", "tokens": [51562, 360, 7705, 281, 10688, 830, 295, 819, 10854, 30, 51714], "temperature": 0.0, "avg_logprob": -0.2619650223675896, "compression_ratio": 1.7681159420289856, "no_speech_prob": 4.4254902604734525e-06}, {"id": 1241, "seek": 518380, "start": 5183.8, "end": 5190.04, "text": " Well, there's one very simple one, which is if you've got a rank one tensor,", "tokens": [50364, 1042, 11, 456, 311, 472, 588, 2199, 472, 11, 597, 307, 498, 291, 600, 658, 257, 6181, 472, 40863, 11, 50676], "temperature": 0.0, "avg_logprob": -0.4085155063205295, "compression_ratio": 1.5783132530120483, "no_speech_prob": 9.22346498555271e-06}, {"id": 1242, "seek": 518380, "start": 5190.04, "end": 5195.8, "text": " a vector, then you can use any operation with a scalar,", "tokens": [50676, 257, 8062, 11, 550, 291, 393, 764, 604, 6916, 365, 257, 39684, 11, 50964], "temperature": 0.0, "avg_logprob": -0.4085155063205295, "compression_ratio": 1.5783132530120483, "no_speech_prob": 9.22346498555271e-06}, {"id": 1243, "seek": 518380, "start": 5197.360000000001, "end": 5201.4400000000005, "text": " and it broadcasts that scalar across the tensor.", "tokens": [51042, 293, 309, 9975, 82, 300, 39684, 2108, 264, 40863, 13, 51246], "temperature": 0.0, "avg_logprob": -0.4085155063205295, "compression_ratio": 1.5783132530120483, "no_speech_prob": 9.22346498555271e-06}, {"id": 1244, "seek": 518380, "start": 5201.4400000000005, "end": 5208.16, "text": " So a is greater than 0 is exactly the same as saying a is greater than tensor 0,", "tokens": [51246, 407, 257, 307, 5044, 813, 1958, 307, 2293, 264, 912, 382, 1566, 257, 307, 5044, 813, 40863, 1958, 11, 51582], "temperature": 0.0, "avg_logprob": -0.4085155063205295, "compression_ratio": 1.5783132530120483, "no_speech_prob": 9.22346498555271e-06}, {"id": 1245, "seek": 520816, "start": 5208.16, "end": 5214.76, "text": " 0, 0.", "tokens": [50364, 1958, 11, 1958, 13, 50694], "temperature": 0.0, "avg_logprob": -0.35911853496844953, "compression_ratio": 1.5736040609137056, "no_speech_prob": 1.0289512829331215e-05}, {"id": 1246, "seek": 520816, "start": 5214.76, "end": 5218.599999999999, "text": " So it's basically copying that across three times.", "tokens": [50694, 407, 309, 311, 1936, 27976, 300, 2108, 1045, 1413, 13, 50886], "temperature": 0.0, "avg_logprob": -0.35911853496844953, "compression_ratio": 1.5736040609137056, "no_speech_prob": 1.0289512829331215e-05}, {"id": 1247, "seek": 520816, "start": 5218.599999999999, "end": 5221.28, "text": " Now it's not literally making a copy in memory, but", "tokens": [50886, 823, 309, 311, 406, 3736, 1455, 257, 5055, 294, 4675, 11, 457, 51020], "temperature": 0.0, "avg_logprob": -0.35911853496844953, "compression_ratio": 1.5736040609137056, "no_speech_prob": 1.0289512829331215e-05}, {"id": 1248, "seek": 520816, "start": 5221.28, "end": 5223.36, "text": " it's acting as if we had said that.", "tokens": [51020, 309, 311, 6577, 382, 498, 321, 632, 848, 300, 13, 51124], "temperature": 0.0, "avg_logprob": -0.35911853496844953, "compression_ratio": 1.5736040609137056, "no_speech_prob": 1.0289512829331215e-05}, {"id": 1249, "seek": 520816, "start": 5223.36, "end": 5226.0, "text": " And this is the most simple version of broadcasting.", "tokens": [51124, 400, 341, 307, 264, 881, 2199, 3037, 295, 30024, 13, 51256], "temperature": 0.0, "avg_logprob": -0.35911853496844953, "compression_ratio": 1.5736040609137056, "no_speech_prob": 1.0289512829331215e-05}, {"id": 1250, "seek": 520816, "start": 5226.0, "end": 5232.24, "text": " Okay, it's broadcasting the 0 across the 10, and the 6, and the negative 4.", "tokens": [51256, 1033, 11, 309, 311, 30024, 264, 1958, 2108, 264, 1266, 11, 293, 264, 1386, 11, 293, 264, 3671, 1017, 13, 51568], "temperature": 0.0, "avg_logprob": -0.35911853496844953, "compression_ratio": 1.5736040609137056, "no_speech_prob": 1.0289512829331215e-05}, {"id": 1251, "seek": 520816, "start": 5232.24, "end": 5234.5599999999995, "text": " And APL does exactly the same thing.", "tokens": [51568, 400, 5372, 43, 775, 2293, 264, 912, 551, 13, 51684], "temperature": 0.0, "avg_logprob": -0.35911853496844953, "compression_ratio": 1.5736040609137056, "no_speech_prob": 1.0289512829331215e-05}, {"id": 1252, "seek": 523456, "start": 5235.52, "end": 5244.56, "text": " a is less than 5, so 0, 0, 1, so same idea.", "tokens": [50412, 257, 307, 1570, 813, 1025, 11, 370, 1958, 11, 1958, 11, 502, 11, 370, 912, 1558, 13, 50864], "temperature": 0.0, "avg_logprob": -0.536651244530311, "compression_ratio": 1.2857142857142858, "no_speech_prob": 2.5867431759252213e-05}, {"id": 1253, "seek": 523456, "start": 5246.4400000000005, "end": 5246.9400000000005, "text": " Okay.", "tokens": [50958, 1033, 13, 50983], "temperature": 0.0, "avg_logprob": -0.536651244530311, "compression_ratio": 1.2857142857142858, "no_speech_prob": 2.5867431759252213e-05}, {"id": 1254, "seek": 523456, "start": 5256.160000000001, "end": 5258.68, "text": " So we can do plus with a scalar, and", "tokens": [51444, 407, 321, 393, 360, 1804, 365, 257, 39684, 11, 293, 51570], "temperature": 0.0, "avg_logprob": -0.536651244530311, "compression_ratio": 1.2857142857142858, "no_speech_prob": 2.5867431759252213e-05}, {"id": 1255, "seek": 523456, "start": 5258.68, "end": 5262.84, "text": " we can do exactly the same thing with higher than rank 1.", "tokens": [51570, 321, 393, 360, 2293, 264, 912, 551, 365, 2946, 813, 6181, 502, 13, 51778], "temperature": 0.0, "avg_logprob": -0.536651244530311, "compression_ratio": 1.2857142857142858, "no_speech_prob": 2.5867431759252213e-05}, {"id": 1256, "seek": 526284, "start": 5262.88, "end": 5267.88, "text": " So 2 times a matrix is just gonna be broadcast across all the rows and", "tokens": [50366, 407, 568, 1413, 257, 8141, 307, 445, 799, 312, 9975, 2108, 439, 264, 13241, 293, 50616], "temperature": 0.0, "avg_logprob": -0.4204458579038962, "compression_ratio": 1.648936170212766, "no_speech_prob": 6.854311777715338e-06}, {"id": 1257, "seek": 526284, "start": 5267.88, "end": 5269.16, "text": " all the columns.", "tokens": [50616, 439, 264, 13766, 13, 50680], "temperature": 0.0, "avg_logprob": -0.4204458579038962, "compression_ratio": 1.648936170212766, "no_speech_prob": 6.854311777715338e-06}, {"id": 1258, "seek": 526284, "start": 5274.88, "end": 5276.6, "text": " Okay, now it gets interesting.", "tokens": [50966, 1033, 11, 586, 309, 2170, 1880, 13, 51052], "temperature": 0.0, "avg_logprob": -0.4204458579038962, "compression_ratio": 1.648936170212766, "no_speech_prob": 6.854311777715338e-06}, {"id": 1259, "seek": 526284, "start": 5278.0, "end": 5280.4400000000005, "text": " So broadcasting dates back to APL.", "tokens": [51122, 407, 30024, 11691, 646, 281, 5372, 43, 13, 51244], "temperature": 0.0, "avg_logprob": -0.4204458579038962, "compression_ratio": 1.648936170212766, "no_speech_prob": 6.854311777715338e-06}, {"id": 1260, "seek": 526284, "start": 5280.4400000000005, "end": 5285.0, "text": " But a really interesting idea is that we can broadcast not just scalars, but", "tokens": [51244, 583, 257, 534, 1880, 1558, 307, 300, 321, 393, 9975, 406, 445, 15664, 685, 11, 457, 51472], "temperature": 0.0, "avg_logprob": -0.4204458579038962, "compression_ratio": 1.648936170212766, "no_speech_prob": 6.854311777715338e-06}, {"id": 1261, "seek": 526284, "start": 5285.0, "end": 5290.24, "text": " we can broadcast vectors across matrices, or broadcast any kind of lower ranked", "tokens": [51472, 321, 393, 9975, 18875, 2108, 32284, 11, 420, 9975, 604, 733, 295, 3126, 20197, 51734], "temperature": 0.0, "avg_logprob": -0.4204458579038962, "compression_ratio": 1.648936170212766, "no_speech_prob": 6.854311777715338e-06}, {"id": 1262, "seek": 529024, "start": 5290.84, "end": 5297.28, "text": " tensor across higher ranked tensors, or even broadcast together", "tokens": [50394, 40863, 2108, 2946, 20197, 10688, 830, 11, 420, 754, 9975, 1214, 50716], "temperature": 0.0, "avg_logprob": -0.3739861674692439, "compression_ratio": 1.6338028169014085, "no_speech_prob": 5.507602509169374e-06}, {"id": 1263, "seek": 529024, "start": 5297.28, "end": 5301.76, "text": " two tensors of the same rank but different shapes in a really powerful way.", "tokens": [50716, 732, 10688, 830, 295, 264, 912, 6181, 457, 819, 10854, 294, 257, 534, 4005, 636, 13, 50940], "temperature": 0.0, "avg_logprob": -0.3739861674692439, "compression_ratio": 1.6338028169014085, "no_speech_prob": 5.507602509169374e-06}, {"id": 1264, "seek": 529024, "start": 5301.76, "end": 5305.679999999999, "text": " And as I was exploring this, I was trying to,", "tokens": [50940, 400, 382, 286, 390, 12736, 341, 11, 286, 390, 1382, 281, 11, 51136], "temperature": 0.0, "avg_logprob": -0.3739861674692439, "compression_ratio": 1.6338028169014085, "no_speech_prob": 5.507602509169374e-06}, {"id": 1265, "seek": 529024, "start": 5305.679999999999, "end": 5308.0, "text": " I love doing this kind of computer archaeology.", "tokens": [51136, 286, 959, 884, 341, 733, 295, 3820, 21894, 1793, 13, 51252], "temperature": 0.0, "avg_logprob": -0.3739861674692439, "compression_ratio": 1.6338028169014085, "no_speech_prob": 5.507602509169374e-06}, {"id": 1266, "seek": 529024, "start": 5308.0, "end": 5310.4, "text": " I was trying to find out where the hell this comes from.", "tokens": [51252, 286, 390, 1382, 281, 915, 484, 689, 264, 4921, 341, 1487, 490, 13, 51372], "temperature": 0.0, "avg_logprob": -0.3739861674692439, "compression_ratio": 1.6338028169014085, "no_speech_prob": 5.507602509169374e-06}, {"id": 1267, "seek": 529024, "start": 5310.4, "end": 5317.2, "text": " And it actually turns out from this email message in 1995", "tokens": [51372, 400, 309, 767, 4523, 484, 490, 341, 3796, 3636, 294, 22601, 51712], "temperature": 0.0, "avg_logprob": -0.3739861674692439, "compression_ratio": 1.6338028169014085, "no_speech_prob": 5.507602509169374e-06}, {"id": 1268, "seek": 531720, "start": 5318.16, "end": 5322.24, "text": " that the idea actually comes from a language that I'd never heard of called Yorick,", "tokens": [50412, 300, 264, 1558, 767, 1487, 490, 257, 2856, 300, 286, 1116, 1128, 2198, 295, 1219, 398, 284, 618, 11, 50616], "temperature": 0.0, "avg_logprob": -0.3458175966816564, "compression_ratio": 1.407185628742515, "no_speech_prob": 0.0002824054390657693}, {"id": 1269, "seek": 531720, "start": 5323.599999999999, "end": 5328.24, "text": " which still apparently exists.", "tokens": [50684, 597, 920, 7970, 8198, 13, 50916], "temperature": 0.0, "avg_logprob": -0.3458175966816564, "compression_ratio": 1.407185628742515, "no_speech_prob": 0.0002824054390657693}, {"id": 1270, "seek": 531720, "start": 5328.24, "end": 5328.96, "text": " Here's Yorick.", "tokens": [50916, 1692, 311, 398, 284, 618, 13, 50952], "temperature": 0.0, "avg_logprob": -0.3458175966816564, "compression_ratio": 1.407185628742515, "no_speech_prob": 0.0002824054390657693}, {"id": 1271, "seek": 531720, "start": 5329.92, "end": 5334.72, "text": " And so Yorick talks about broadcasting and conformability.", "tokens": [51000, 400, 370, 398, 284, 618, 6686, 466, 30024, 293, 18975, 2310, 13, 51240], "temperature": 0.0, "avg_logprob": -0.3458175966816564, "compression_ratio": 1.407185628742515, "no_speech_prob": 0.0002824054390657693}, {"id": 1272, "seek": 531720, "start": 5334.72, "end": 5338.32, "text": " So what happened is this very obscure language", "tokens": [51240, 407, 437, 2011, 307, 341, 588, 34443, 2856, 51420], "temperature": 0.0, "avg_logprob": -0.3458175966816564, "compression_ratio": 1.407185628742515, "no_speech_prob": 0.0002824054390657693}, {"id": 1273, "seek": 533832, "start": 5339.04, "end": 5341.84, "text": " has this very powerful idea.", "tokens": [50400, 575, 341, 588, 4005, 1558, 13, 50540], "temperature": 0.0, "avg_logprob": -0.3848028090393659, "compression_ratio": 1.506787330316742, "no_speech_prob": 0.00030534822144545615}, {"id": 1274, "seek": 533832, "start": 5341.84, "end": 5347.84, "text": " And NumPy has happily stolen the idea from Yorick", "tokens": [50540, 400, 22592, 47, 88, 575, 19909, 15900, 264, 1558, 490, 398, 284, 618, 50840], "temperature": 0.0, "avg_logprob": -0.3848028090393659, "compression_ratio": 1.506787330316742, "no_speech_prob": 0.00030534822144545615}, {"id": 1275, "seek": 533832, "start": 5348.96, "end": 5355.759999999999, "text": " that allows us to broadcast together tensors that don't appear to match.", "tokens": [50896, 300, 4045, 505, 281, 9975, 1214, 10688, 830, 300, 500, 380, 4204, 281, 2995, 13, 51236], "temperature": 0.0, "avg_logprob": -0.3848028090393659, "compression_ratio": 1.506787330316742, "no_speech_prob": 0.00030534822144545615}, {"id": 1276, "seek": 533832, "start": 5355.759999999999, "end": 5356.799999999999, "text": " So let me give an example.", "tokens": [51236, 407, 718, 385, 976, 364, 1365, 13, 51288], "temperature": 0.0, "avg_logprob": -0.3848028090393659, "compression_ratio": 1.506787330316742, "no_speech_prob": 0.00030534822144545615}, {"id": 1277, "seek": 533832, "start": 5357.599999999999, "end": 5360.48, "text": " Here's a tensor called C that's a vector.", "tokens": [51328, 1692, 311, 257, 40863, 1219, 383, 300, 311, 257, 8062, 13, 51472], "temperature": 0.0, "avg_logprob": -0.3848028090393659, "compression_ratio": 1.506787330316742, "no_speech_prob": 0.00030534822144545615}, {"id": 1278, "seek": 533832, "start": 5360.48, "end": 5362.799999999999, "text": " It's a rank one tensor, 10, 20, 30.", "tokens": [51472, 467, 311, 257, 6181, 472, 40863, 11, 1266, 11, 945, 11, 2217, 13, 51588], "temperature": 0.0, "avg_logprob": -0.3848028090393659, "compression_ratio": 1.506787330316742, "no_speech_prob": 0.00030534822144545615}, {"id": 1279, "seek": 533832, "start": 5362.799999999999, "end": 5365.12, "text": " And here's a tensor called M, which is a matrix.", "tokens": [51588, 400, 510, 311, 257, 40863, 1219, 376, 11, 597, 307, 257, 8141, 13, 51704], "temperature": 0.0, "avg_logprob": -0.3848028090393659, "compression_ratio": 1.506787330316742, "no_speech_prob": 0.00030534822144545615}, {"id": 1280, "seek": 533832, "start": 5365.12, "end": 5366.08, "text": " We've seen this one before.", "tokens": [51704, 492, 600, 1612, 341, 472, 949, 13, 51752], "temperature": 0.0, "avg_logprob": -0.3848028090393659, "compression_ratio": 1.506787330316742, "no_speech_prob": 0.00030534822144545615}, {"id": 1281, "seek": 536608, "start": 5366.16, "end": 5369.12, "text": " And one of them is shape 3, 3.", "tokens": [50368, 400, 472, 295, 552, 307, 3909, 805, 11, 805, 13, 50516], "temperature": 0.0, "avg_logprob": -0.36367271941842383, "compression_ratio": 1.8157894736842106, "no_speech_prob": 2.7969277653028257e-05}, {"id": 1282, "seek": 536608, "start": 5369.12, "end": 5370.16, "text": " The other is shape 3.", "tokens": [50516, 440, 661, 307, 3909, 805, 13, 50568], "temperature": 0.0, "avg_logprob": -0.36367271941842383, "compression_ratio": 1.8157894736842106, "no_speech_prob": 2.7969277653028257e-05}, {"id": 1283, "seek": 536608, "start": 5371.2, "end": 5375.04, "text": " And yet we can add them together.", "tokens": [50620, 400, 1939, 321, 393, 909, 552, 1214, 13, 50812], "temperature": 0.0, "avg_logprob": -0.36367271941842383, "compression_ratio": 1.8157894736842106, "no_speech_prob": 2.7969277653028257e-05}, {"id": 1284, "seek": 536608, "start": 5376.48, "end": 5378.5599999999995, "text": " Now, what's happened when we added it together?", "tokens": [50884, 823, 11, 437, 311, 2011, 562, 321, 3869, 309, 1214, 30, 50988], "temperature": 0.0, "avg_logprob": -0.36367271941842383, "compression_ratio": 1.8157894736842106, "no_speech_prob": 2.7969277653028257e-05}, {"id": 1285, "seek": 536608, "start": 5379.12, "end": 5384.64, "text": " Well, what's happened is 10, 20, 30 got added to 1, 2, 3.", "tokens": [51016, 1042, 11, 437, 311, 2011, 307, 1266, 11, 945, 11, 2217, 658, 3869, 281, 502, 11, 568, 11, 805, 13, 51292], "temperature": 0.0, "avg_logprob": -0.36367271941842383, "compression_ratio": 1.8157894736842106, "no_speech_prob": 2.7969277653028257e-05}, {"id": 1286, "seek": 536608, "start": 5385.92, "end": 5388.24, "text": " And then 10, 20, 30 got added to 4, 5, 6.", "tokens": [51356, 400, 550, 1266, 11, 945, 11, 2217, 658, 3869, 281, 1017, 11, 1025, 11, 1386, 13, 51472], "temperature": 0.0, "avg_logprob": -0.36367271941842383, "compression_ratio": 1.8157894736842106, "no_speech_prob": 2.7969277653028257e-05}, {"id": 1287, "seek": 536608, "start": 5389.84, "end": 5392.08, "text": " And then 10, 20, 30 got added to 7, 8, 9.", "tokens": [51552, 400, 550, 1266, 11, 945, 11, 2217, 658, 3869, 281, 1614, 11, 1649, 11, 1722, 13, 51664], "temperature": 0.0, "avg_logprob": -0.36367271941842383, "compression_ratio": 1.8157894736842106, "no_speech_prob": 2.7969277653028257e-05}, {"id": 1288, "seek": 539208, "start": 5393.04, "end": 5395.44, "text": " And then 10, 20, 30 got added to 7, 8, 9.", "tokens": [50412, 400, 550, 1266, 11, 945, 11, 2217, 658, 3869, 281, 1614, 11, 1649, 11, 1722, 13, 50532], "temperature": 0.0, "avg_logprob": -0.1520904518035521, "compression_ratio": 1.4271844660194175, "no_speech_prob": 2.948016344817006e-06}, {"id": 1289, "seek": 539208, "start": 5397.44, "end": 5400.0, "text": " And hopefully you can see this looks quite familiar.", "tokens": [50632, 400, 4696, 291, 393, 536, 341, 1542, 1596, 4963, 13, 50760], "temperature": 0.0, "avg_logprob": -0.1520904518035521, "compression_ratio": 1.4271844660194175, "no_speech_prob": 2.948016344817006e-06}, {"id": 1290, "seek": 539208, "start": 5400.5599999999995, "end": 5405.36, "text": " Instead of broadcasting a scalar over a higher rank tensor,", "tokens": [50788, 7156, 295, 30024, 257, 39684, 670, 257, 2946, 6181, 40863, 11, 51028], "temperature": 0.0, "avg_logprob": -0.1520904518035521, "compression_ratio": 1.4271844660194175, "no_speech_prob": 2.948016344817006e-06}, {"id": 1291, "seek": 539208, "start": 5405.92, "end": 5410.8, "text": " this is broadcasting a vector across every row of a matrix.", "tokens": [51056, 341, 307, 30024, 257, 8062, 2108, 633, 5386, 295, 257, 8141, 13, 51300], "temperature": 0.0, "avg_logprob": -0.1520904518035521, "compression_ratio": 1.4271844660194175, "no_speech_prob": 2.948016344817006e-06}, {"id": 1292, "seek": 539208, "start": 5415.28, "end": 5417.2, "text": " And it works both ways.", "tokens": [51524, 400, 309, 1985, 1293, 2098, 13, 51620], "temperature": 0.0, "avg_logprob": -0.1520904518035521, "compression_ratio": 1.4271844660194175, "no_speech_prob": 2.948016344817006e-06}, {"id": 1293, "seek": 539208, "start": 5417.2, "end": 5420.0, "text": " So we can say C plus M gives us exactly the same thing.", "tokens": [51620, 407, 321, 393, 584, 383, 1804, 376, 2709, 505, 2293, 264, 912, 551, 13, 51760], "temperature": 0.0, "avg_logprob": -0.1520904518035521, "compression_ratio": 1.4271844660194175, "no_speech_prob": 2.948016344817006e-06}, {"id": 1294, "seek": 542000, "start": 5420.64, "end": 5422.64, "text": " And so let me explain what's actually happening here.", "tokens": [50396, 400, 370, 718, 385, 2903, 437, 311, 767, 2737, 510, 13, 50496], "temperature": 0.0, "avg_logprob": -0.17931294648543647, "compression_ratio": 1.7436974789915967, "no_speech_prob": 2.31874619203154e-05}, {"id": 1295, "seek": 542000, "start": 5423.68, "end": 5427.44, "text": " The trick is to know about this somewhat obscure method called expandAs.", "tokens": [50548, 440, 4282, 307, 281, 458, 466, 341, 8344, 34443, 3170, 1219, 5268, 10884, 13, 50736], "temperature": 0.0, "avg_logprob": -0.17931294648543647, "compression_ratio": 1.7436974789915967, "no_speech_prob": 2.31874619203154e-05}, {"id": 1296, "seek": 542000, "start": 5428.08, "end": 5431.36, "text": " And what expandAs does is this creates a new thing called T,", "tokens": [50768, 400, 437, 5268, 10884, 775, 307, 341, 7829, 257, 777, 551, 1219, 314, 11, 50932], "temperature": 0.0, "avg_logprob": -0.17931294648543647, "compression_ratio": 1.7436974789915967, "no_speech_prob": 2.31874619203154e-05}, {"id": 1297, "seek": 542000, "start": 5432.32, "end": 5434.24, "text": " which contains exactly the same thing as C,", "tokens": [50980, 597, 8306, 2293, 264, 912, 551, 382, 383, 11, 51076], "temperature": 0.0, "avg_logprob": -0.17931294648543647, "compression_ratio": 1.7436974789915967, "no_speech_prob": 2.31874619203154e-05}, {"id": 1298, "seek": 542000, "start": 5435.28, "end": 5437.92, "text": " but expanded or kind of copied over.", "tokens": [51128, 457, 14342, 420, 733, 295, 25365, 670, 13, 51260], "temperature": 0.0, "avg_logprob": -0.17931294648543647, "compression_ratio": 1.7436974789915967, "no_speech_prob": 2.31874619203154e-05}, {"id": 1299, "seek": 542000, "start": 5437.92, "end": 5439.36, "text": " So it has the same shape as M.", "tokens": [51260, 407, 309, 575, 264, 912, 3909, 382, 376, 13, 51332], "temperature": 0.0, "avg_logprob": -0.17931294648543647, "compression_ratio": 1.7436974789915967, "no_speech_prob": 2.31874619203154e-05}, {"id": 1300, "seek": 542000, "start": 5440.32, "end": 5441.6, "text": " So here's what T looks like.", "tokens": [51380, 407, 510, 311, 437, 314, 1542, 411, 13, 51444], "temperature": 0.0, "avg_logprob": -0.17931294648543647, "compression_ratio": 1.7436974789915967, "no_speech_prob": 2.31874619203154e-05}, {"id": 1301, "seek": 542000, "start": 5442.56, "end": 5446.16, "text": " Now, T contains exactly the same thing as C does,", "tokens": [51492, 823, 11, 314, 8306, 2293, 264, 912, 551, 382, 383, 775, 11, 51672], "temperature": 0.0, "avg_logprob": -0.17931294648543647, "compression_ratio": 1.7436974789915967, "no_speech_prob": 2.31874619203154e-05}, {"id": 1302, "seek": 542000, "start": 5446.16, "end": 5447.68, "text": " but it's got three copies of it now.", "tokens": [51672, 457, 309, 311, 658, 1045, 14341, 295, 309, 586, 13, 51748], "temperature": 0.0, "avg_logprob": -0.17931294648543647, "compression_ratio": 1.7436974789915967, "no_speech_prob": 2.31874619203154e-05}, {"id": 1303, "seek": 544768, "start": 5448.4800000000005, "end": 5452.88, "text": " And you can see we can definitely add T to M because they match shapes.", "tokens": [50404, 400, 291, 393, 536, 321, 393, 2138, 909, 314, 281, 376, 570, 436, 2995, 10854, 13, 50624], "temperature": 0.0, "avg_logprob": -0.19184301549738103, "compression_ratio": 1.6083333333333334, "no_speech_prob": 8.53031815495342e-06}, {"id": 1304, "seek": 544768, "start": 5454.56, "end": 5455.06, "text": " Right?", "tokens": [50708, 1779, 30, 50733], "temperature": 0.0, "avg_logprob": -0.19184301549738103, "compression_ratio": 1.6083333333333334, "no_speech_prob": 8.53031815495342e-06}, {"id": 1305, "seek": 544768, "start": 5455.6, "end": 5457.4400000000005, "text": " So we can say M plus T.", "tokens": [50760, 407, 321, 393, 584, 376, 1804, 314, 13, 50852], "temperature": 0.0, "avg_logprob": -0.19184301549738103, "compression_ratio": 1.6083333333333334, "no_speech_prob": 8.53031815495342e-06}, {"id": 1306, "seek": 544768, "start": 5457.4400000000005, "end": 5460.4800000000005, "text": " We know we can play M plus T because we've already learned", "tokens": [50852, 492, 458, 321, 393, 862, 376, 1804, 314, 570, 321, 600, 1217, 3264, 51004], "temperature": 0.0, "avg_logprob": -0.19184301549738103, "compression_ratio": 1.6083333333333334, "no_speech_prob": 8.53031815495342e-06}, {"id": 1307, "seek": 544768, "start": 5460.4800000000005, "end": 5464.240000000001, "text": " that you can do element-wise operations on two things that have matching shapes.", "tokens": [51004, 300, 291, 393, 360, 4478, 12, 3711, 7705, 322, 732, 721, 300, 362, 14324, 10854, 13, 51192], "temperature": 0.0, "avg_logprob": -0.19184301549738103, "compression_ratio": 1.6083333333333334, "no_speech_prob": 8.53031815495342e-06}, {"id": 1308, "seek": 544768, "start": 5466.72, "end": 5471.04, "text": " Now, by the way, this thing T didn't actually create three copies.", "tokens": [51316, 823, 11, 538, 264, 636, 11, 341, 551, 314, 994, 380, 767, 1884, 1045, 14341, 13, 51532], "temperature": 0.0, "avg_logprob": -0.19184301549738103, "compression_ratio": 1.6083333333333334, "no_speech_prob": 8.53031815495342e-06}, {"id": 1309, "seek": 544768, "start": 5471.04, "end": 5472.08, "text": " Check this out.", "tokens": [51532, 6881, 341, 484, 13, 51584], "temperature": 0.0, "avg_logprob": -0.19184301549738103, "compression_ratio": 1.6083333333333334, "no_speech_prob": 8.53031815495342e-06}, {"id": 1310, "seek": 544768, "start": 5472.08, "end": 5475.6, "text": " If we call T.storage, it tells us what's actually in memory.", "tokens": [51584, 759, 321, 818, 314, 13, 372, 29226, 11, 309, 5112, 505, 437, 311, 767, 294, 4675, 13, 51760], "temperature": 0.0, "avg_logprob": -0.19184301549738103, "compression_ratio": 1.6083333333333334, "no_speech_prob": 8.53031815495342e-06}, {"id": 1311, "seek": 547560, "start": 5475.6, "end": 5478.240000000001, "text": " It actually just contains the numbers 10, 20, 30.", "tokens": [50364, 467, 767, 445, 8306, 264, 3547, 1266, 11, 945, 11, 2217, 13, 50496], "temperature": 0.0, "avg_logprob": -0.18194942646198445, "compression_ratio": 1.6140350877192982, "no_speech_prob": 1.653688627811789e-06}, {"id": 1312, "seek": 547560, "start": 5479.120000000001, "end": 5480.72, "text": " But it does a really clever trick.", "tokens": [50540, 583, 309, 775, 257, 534, 13494, 4282, 13, 50620], "temperature": 0.0, "avg_logprob": -0.18194942646198445, "compression_ratio": 1.6140350877192982, "no_speech_prob": 1.653688627811789e-06}, {"id": 1313, "seek": 547560, "start": 5481.76, "end": 5488.56, "text": " It has a stride of zero across the rows and a size of 3, 3.", "tokens": [50672, 467, 575, 257, 1056, 482, 295, 4018, 2108, 264, 13241, 293, 257, 2744, 295, 805, 11, 805, 13, 51012], "temperature": 0.0, "avg_logprob": -0.18194942646198445, "compression_ratio": 1.6140350877192982, "no_speech_prob": 1.653688627811789e-06}, {"id": 1314, "seek": 547560, "start": 5488.56, "end": 5492.4800000000005, "text": " And so what that means is that it acts as if it's a 3 by 3 matrix.", "tokens": [51012, 400, 370, 437, 300, 1355, 307, 300, 309, 10672, 382, 498, 309, 311, 257, 805, 538, 805, 8141, 13, 51208], "temperature": 0.0, "avg_logprob": -0.18194942646198445, "compression_ratio": 1.6140350877192982, "no_speech_prob": 1.653688627811789e-06}, {"id": 1315, "seek": 547560, "start": 5493.04, "end": 5497.360000000001, "text": " And each time it goes to the next row, it actually stays exactly where it is.", "tokens": [51236, 400, 1184, 565, 309, 1709, 281, 264, 958, 5386, 11, 309, 767, 10834, 2293, 689, 309, 307, 13, 51452], "temperature": 0.0, "avg_logprob": -0.18194942646198445, "compression_ratio": 1.6140350877192982, "no_speech_prob": 1.653688627811789e-06}, {"id": 1316, "seek": 547560, "start": 5497.360000000001, "end": 5504.64, "text": " And this idea of strides is the trick which NumPy and PyTorch and so forth use", "tokens": [51452, 400, 341, 1558, 295, 1056, 1875, 307, 264, 4282, 597, 22592, 47, 88, 293, 9953, 51, 284, 339, 293, 370, 5220, 764, 51816], "temperature": 0.0, "avg_logprob": -0.18194942646198445, "compression_ratio": 1.6140350877192982, "no_speech_prob": 1.653688627811789e-06}, {"id": 1317, "seek": 550464, "start": 5505.200000000001, "end": 5510.56, "text": " for all kinds of things where you basically can create, you know, very efficient ways to", "tokens": [50392, 337, 439, 3685, 295, 721, 689, 291, 1936, 393, 1884, 11, 291, 458, 11, 588, 7148, 2098, 281, 50660], "temperature": 0.0, "avg_logprob": -0.2219870799296611, "compression_ratio": 1.6926070038910506, "no_speech_prob": 9.972916814149357e-06}, {"id": 1318, "seek": 550464, "start": 5512.240000000001, "end": 5516.96, "text": " do things like expanding or to kind of jump over things and stuff like that.", "tokens": [50744, 360, 721, 411, 14702, 420, 281, 733, 295, 3012, 670, 721, 293, 1507, 411, 300, 13, 50980], "temperature": 0.0, "avg_logprob": -0.2219870799296611, "compression_ratio": 1.6926070038910506, "no_speech_prob": 9.972916814149357e-06}, {"id": 1319, "seek": 550464, "start": 5516.96, "end": 5519.68, "text": " You know, switch between columns and rows, stuff like that.", "tokens": [50980, 509, 458, 11, 3679, 1296, 13766, 293, 13241, 11, 1507, 411, 300, 13, 51116], "temperature": 0.0, "avg_logprob": -0.2219870799296611, "compression_ratio": 1.6926070038910506, "no_speech_prob": 9.972916814149357e-06}, {"id": 1320, "seek": 550464, "start": 5520.4800000000005, "end": 5524.0, "text": " Anyway, the important thing here for us to recognize is that we didn't actually make a copy.", "tokens": [51156, 5684, 11, 264, 1021, 551, 510, 337, 505, 281, 5521, 307, 300, 321, 994, 380, 767, 652, 257, 5055, 13, 51332], "temperature": 0.0, "avg_logprob": -0.2219870799296611, "compression_ratio": 1.6926070038910506, "no_speech_prob": 9.972916814149357e-06}, {"id": 1321, "seek": 550464, "start": 5524.0, "end": 5525.360000000001, "text": " This is totally efficient.", "tokens": [51332, 639, 307, 3879, 7148, 13, 51400], "temperature": 0.0, "avg_logprob": -0.2219870799296611, "compression_ratio": 1.6926070038910506, "no_speech_prob": 9.972916814149357e-06}, {"id": 1322, "seek": 550464, "start": 5525.360000000001, "end": 5527.84, "text": " And it's all going to be run in C code very fast.", "tokens": [51400, 400, 309, 311, 439, 516, 281, 312, 1190, 294, 383, 3089, 588, 2370, 13, 51524], "temperature": 0.0, "avg_logprob": -0.2219870799296611, "compression_ratio": 1.6926070038910506, "no_speech_prob": 9.972916814149357e-06}, {"id": 1323, "seek": 550464, "start": 5529.04, "end": 5531.360000000001, "text": " So remember, this expandAs is critical.", "tokens": [51584, 407, 1604, 11, 341, 5268, 10884, 307, 4924, 13, 51700], "temperature": 0.0, "avg_logprob": -0.2219870799296611, "compression_ratio": 1.6926070038910506, "no_speech_prob": 9.972916814149357e-06}, {"id": 1324, "seek": 553136, "start": 5531.36, "end": 5535.44, "text": " This is the thing that will teach you to understand how broadcasting works,", "tokens": [50364, 639, 307, 264, 551, 300, 486, 2924, 291, 281, 1223, 577, 30024, 1985, 11, 50568], "temperature": 0.0, "avg_logprob": -0.20881344409699135, "compression_ratio": 1.551440329218107, "no_speech_prob": 3.647850462584756e-05}, {"id": 1325, "seek": 553136, "start": 5535.44, "end": 5541.04, "text": " which is really important for implementing deep learning algorithms or any kind of linear algebra", "tokens": [50568, 597, 307, 534, 1021, 337, 18114, 2452, 2539, 14642, 420, 604, 733, 295, 8213, 21989, 50848], "temperature": 0.0, "avg_logprob": -0.20881344409699135, "compression_ratio": 1.551440329218107, "no_speech_prob": 3.647850462584756e-05}, {"id": 1326, "seek": 553136, "start": 5542.08, "end": 5543.44, "text": " on any Python system.", "tokens": [50900, 322, 604, 15329, 1185, 13, 50968], "temperature": 0.0, "avg_logprob": -0.20881344409699135, "compression_ratio": 1.551440329218107, "no_speech_prob": 3.647850462584756e-05}, {"id": 1327, "seek": 553136, "start": 5544.48, "end": 5553.28, "text": " Because the NumPy rules are used exactly the same in Jax, in TensorFlow, in PyTorch, and so forth.", "tokens": [51020, 1436, 264, 22592, 47, 88, 4474, 366, 1143, 2293, 264, 912, 294, 508, 2797, 11, 294, 37624, 11, 294, 9953, 51, 284, 339, 11, 293, 370, 5220, 13, 51460], "temperature": 0.0, "avg_logprob": -0.20881344409699135, "compression_ratio": 1.551440329218107, "no_speech_prob": 3.647850462584756e-05}, {"id": 1328, "seek": 553136, "start": 5555.12, "end": 5558.16, "text": " Now I'll show you a little trick, which is going to be very important in a moment.", "tokens": [51552, 823, 286, 603, 855, 291, 257, 707, 4282, 11, 597, 307, 516, 281, 312, 588, 1021, 294, 257, 1623, 13, 51704], "temperature": 0.0, "avg_logprob": -0.20881344409699135, "compression_ratio": 1.551440329218107, "no_speech_prob": 3.647850462584756e-05}, {"id": 1329, "seek": 555816, "start": 5559.04, "end": 5564.96, "text": " If we take C, which remember is a vector containing 10, 20, 30,", "tokens": [50408, 759, 321, 747, 383, 11, 597, 1604, 307, 257, 8062, 19273, 1266, 11, 945, 11, 2217, 11, 50704], "temperature": 0.0, "avg_logprob": -0.21842225043328253, "compression_ratio": 1.4619047619047618, "no_speech_prob": 3.844934781227494e-06}, {"id": 1330, "seek": 555816, "start": 5567.5199999999995, "end": 5575.44, "text": " and we say dot unsqueeze zero, then it changes the shape from 3 to 1, 3.", "tokens": [50832, 293, 321, 584, 5893, 2693, 1077, 10670, 4018, 11, 550, 309, 2962, 264, 3909, 490, 805, 281, 502, 11, 805, 13, 51228], "temperature": 0.0, "avg_logprob": -0.21842225043328253, "compression_ratio": 1.4619047619047618, "no_speech_prob": 3.844934781227494e-06}, {"id": 1331, "seek": 555816, "start": 5576.08, "end": 5582.639999999999, "text": " So it changes it from a vector of length 3 to a matrix of one row by three columns.", "tokens": [51260, 407, 309, 2962, 309, 490, 257, 8062, 295, 4641, 805, 281, 257, 8141, 295, 472, 5386, 538, 1045, 13766, 13, 51588], "temperature": 0.0, "avg_logprob": -0.21842225043328253, "compression_ratio": 1.4619047619047618, "no_speech_prob": 3.844934781227494e-06}, {"id": 1332, "seek": 555816, "start": 5582.639999999999, "end": 5584.639999999999, "text": " This will turn out to be very important in a moment.", "tokens": [51588, 639, 486, 1261, 484, 281, 312, 588, 1021, 294, 257, 1623, 13, 51688], "temperature": 0.0, "avg_logprob": -0.21842225043328253, "compression_ratio": 1.4619047619047618, "no_speech_prob": 3.844934781227494e-06}, {"id": 1333, "seek": 555816, "start": 5584.639999999999, "end": 5585.84, "text": " And you can see how it's printed.", "tokens": [51688, 400, 291, 393, 536, 577, 309, 311, 13567, 13, 51748], "temperature": 0.0, "avg_logprob": -0.21842225043328253, "compression_ratio": 1.4619047619047618, "no_speech_prob": 3.844934781227494e-06}, {"id": 1334, "seek": 558584, "start": 5585.84, "end": 5587.6, "text": " It's printed out with two square brackets.", "tokens": [50364, 467, 311, 13567, 484, 365, 732, 3732, 26179, 13, 50452], "temperature": 0.0, "avg_logprob": -0.20518878975299873, "compression_ratio": 1.5777777777777777, "no_speech_prob": 2.5071594791370444e-05}, {"id": 1335, "seek": 558584, "start": 5588.4800000000005, "end": 5593.2, "text": " Now I never use unsqueeze, because I much prefer doing something more flexible,", "tokens": [50496, 823, 286, 1128, 764, 2693, 1077, 10670, 11, 570, 286, 709, 4382, 884, 746, 544, 11358, 11, 50732], "temperature": 0.0, "avg_logprob": -0.20518878975299873, "compression_ratio": 1.5777777777777777, "no_speech_prob": 2.5071594791370444e-05}, {"id": 1336, "seek": 558584, "start": 5593.2, "end": 5599.2, "text": " which is if you index into an axis with a special value none, also known as np.newAxis,", "tokens": [50732, 597, 307, 498, 291, 8186, 666, 364, 10298, 365, 257, 2121, 2158, 6022, 11, 611, 2570, 382, 33808, 13, 7686, 32, 39637, 11, 51032], "temperature": 0.0, "avg_logprob": -0.20518878975299873, "compression_ratio": 1.5777777777777777, "no_speech_prob": 2.5071594791370444e-05}, {"id": 1337, "seek": 558584, "start": 5600.400000000001, "end": 5601.68, "text": " it does exactly the same thing.", "tokens": [51092, 309, 775, 2293, 264, 912, 551, 13, 51156], "temperature": 0.0, "avg_logprob": -0.20518878975299873, "compression_ratio": 1.5777777777777777, "no_speech_prob": 2.5071594791370444e-05}, {"id": 1338, "seek": 558584, "start": 5601.68, "end": 5604.32, "text": " It inserts a new axis here.", "tokens": [51156, 467, 49163, 257, 777, 10298, 510, 13, 51288], "temperature": 0.0, "avg_logprob": -0.20518878975299873, "compression_ratio": 1.5777777777777777, "no_speech_prob": 2.5071594791370444e-05}, {"id": 1339, "seek": 558584, "start": 5604.32, "end": 5608.64, "text": " So here we'll get exactly the same thing.", "tokens": [51288, 407, 510, 321, 603, 483, 2293, 264, 912, 551, 13, 51504], "temperature": 0.0, "avg_logprob": -0.20518878975299873, "compression_ratio": 1.5777777777777777, "no_speech_prob": 2.5071594791370444e-05}, {"id": 1340, "seek": 558584, "start": 5609.4400000000005, "end": 5613.04, "text": " One row by all the columns, three columns.", "tokens": [51544, 1485, 5386, 538, 439, 264, 13766, 11, 1045, 13766, 13, 51724], "temperature": 0.0, "avg_logprob": -0.20518878975299873, "compression_ratio": 1.5777777777777777, "no_speech_prob": 2.5071594791370444e-05}, {"id": 1341, "seek": 561304, "start": 5613.6, "end": 5615.92, "text": " So this is exactly the same as saying unsqueeze.", "tokens": [50392, 407, 341, 307, 2293, 264, 912, 382, 1566, 2693, 1077, 10670, 13, 50508], "temperature": 0.0, "avg_logprob": -0.17155107561048571, "compression_ratio": 1.8058823529411765, "no_speech_prob": 1.696440995146986e-05}, {"id": 1342, "seek": 561304, "start": 5617.36, "end": 5620.96, "text": " So this inserts a new unit axis.", "tokens": [50580, 407, 341, 49163, 257, 777, 4985, 10298, 13, 50760], "temperature": 0.0, "avg_logprob": -0.17155107561048571, "compression_ratio": 1.8058823529411765, "no_speech_prob": 1.696440995146986e-05}, {"id": 1343, "seek": 561304, "start": 5620.96, "end": 5626.0, "text": " This is a unit axis, a single row in this dimension.", "tokens": [50760, 639, 307, 257, 4985, 10298, 11, 257, 2167, 5386, 294, 341, 10139, 13, 51012], "temperature": 0.0, "avg_logprob": -0.17155107561048571, "compression_ratio": 1.8058823529411765, "no_speech_prob": 1.696440995146986e-05}, {"id": 1344, "seek": 561304, "start": 5626.64, "end": 5627.76, "text": " And this does the same thing.", "tokens": [51044, 400, 341, 775, 264, 912, 551, 13, 51100], "temperature": 0.0, "avg_logprob": -0.17155107561048571, "compression_ratio": 1.8058823529411765, "no_speech_prob": 1.696440995146986e-05}, {"id": 1345, "seek": 561304, "start": 5629.5199999999995, "end": 5630.32, "text": " So these are the same.", "tokens": [51188, 407, 613, 366, 264, 912, 13, 51228], "temperature": 0.0, "avg_logprob": -0.17155107561048571, "compression_ratio": 1.8058823529411765, "no_speech_prob": 1.696440995146986e-05}, {"id": 1346, "seek": 561304, "start": 5631.36, "end": 5634.08, "text": " So we could do the same thing and say unsqueeze one,", "tokens": [51280, 407, 321, 727, 360, 264, 912, 551, 293, 584, 2693, 1077, 10670, 472, 11, 51416], "temperature": 0.0, "avg_logprob": -0.17155107561048571, "compression_ratio": 1.8058823529411765, "no_speech_prob": 1.696440995146986e-05}, {"id": 1347, "seek": 561304, "start": 5634.72, "end": 5639.84, "text": " which means now we're going to unsqueeze into the first dimension.", "tokens": [51448, 597, 1355, 586, 321, 434, 516, 281, 2693, 1077, 10670, 666, 264, 700, 10139, 13, 51704], "temperature": 0.0, "avg_logprob": -0.17155107561048571, "compression_ratio": 1.8058823529411765, "no_speech_prob": 1.696440995146986e-05}, {"id": 1348, "seek": 563984, "start": 5639.84, "end": 5644.0, "text": " So that means we now have three rows and one column.", "tokens": [50364, 407, 300, 1355, 321, 586, 362, 1045, 13241, 293, 472, 7738, 13, 50572], "temperature": 0.0, "avg_logprob": -0.19413026531090896, "compression_ratio": 1.8263473053892216, "no_speech_prob": 1.3497023019226617e-06}, {"id": 1349, "seek": 563984, "start": 5645.52, "end": 5646.400000000001, "text": " See the shape here?", "tokens": [50648, 3008, 264, 3909, 510, 30, 50692], "temperature": 0.0, "avg_logprob": -0.19413026531090896, "compression_ratio": 1.8263473053892216, "no_speech_prob": 1.3497023019226617e-06}, {"id": 1350, "seek": 563984, "start": 5647.2, "end": 5650.56, "text": " The shape is inserting a unit axis in position one.", "tokens": [50732, 440, 3909, 307, 46567, 257, 4985, 10298, 294, 2535, 472, 13, 50900], "temperature": 0.0, "avg_logprob": -0.19413026531090896, "compression_ratio": 1.8263473053892216, "no_speech_prob": 1.3497023019226617e-06}, {"id": 1351, "seek": 563984, "start": 5651.2, "end": 5652.88, "text": " Three rows and one column.", "tokens": [50932, 6244, 13241, 293, 472, 7738, 13, 51016], "temperature": 0.0, "avg_logprob": -0.19413026531090896, "compression_ratio": 1.8263473053892216, "no_speech_prob": 1.3497023019226617e-06}, {"id": 1352, "seek": 563984, "start": 5655.4400000000005, "end": 5657.28, "text": " And so we can do exactly the same thing here.", "tokens": [51144, 400, 370, 321, 393, 360, 2293, 264, 912, 551, 510, 13, 51236], "temperature": 0.0, "avg_logprob": -0.19413026531090896, "compression_ratio": 1.8263473053892216, "no_speech_prob": 1.3497023019226617e-06}, {"id": 1353, "seek": 563984, "start": 5658.72, "end": 5662.56, "text": " Give us every row and a new unit axis in position one.", "tokens": [51308, 5303, 505, 633, 5386, 293, 257, 777, 4985, 10298, 294, 2535, 472, 13, 51500], "temperature": 0.0, "avg_logprob": -0.19413026531090896, "compression_ratio": 1.8263473053892216, "no_speech_prob": 1.3497023019226617e-06}, {"id": 1354, "seek": 563984, "start": 5663.2, "end": 5663.92, "text": " Same thing.", "tokens": [51532, 10635, 551, 13, 51568], "temperature": 0.0, "avg_logprob": -0.19413026531090896, "compression_ratio": 1.8263473053892216, "no_speech_prob": 1.3497023019226617e-06}, {"id": 1355, "seek": 563984, "start": 5663.92, "end": 5665.76, "text": " Okay, so those two are exactly the same.", "tokens": [51568, 1033, 11, 370, 729, 732, 366, 2293, 264, 912, 13, 51660], "temperature": 0.0, "avg_logprob": -0.19413026531090896, "compression_ratio": 1.8263473053892216, "no_speech_prob": 1.3497023019226617e-06}, {"id": 1356, "seek": 566576, "start": 5666.0, "end": 5671.84, "text": " So this is how we create a matrix with one row.", "tokens": [50376, 407, 341, 307, 577, 321, 1884, 257, 8141, 365, 472, 5386, 13, 50668], "temperature": 0.0, "avg_logprob": -0.4614665655442226, "compression_ratio": 1.6524390243902438, "no_speech_prob": 1.4285491488408297e-05}, {"id": 1357, "seek": 566576, "start": 5672.400000000001, "end": 5674.64, "text": " This is how we create a matrix with one column.", "tokens": [50696, 639, 307, 577, 321, 1884, 257, 8141, 365, 472, 7738, 13, 50808], "temperature": 0.0, "avg_logprob": -0.4614665655442226, "compression_ratio": 1.6524390243902438, "no_speech_prob": 1.4285491488408297e-05}, {"id": 1358, "seek": 566576, "start": 5675.52, "end": 5677.6, "text": " None comma colon versus colon comma none.", "tokens": [50852, 14492, 22117, 8255, 5717, 8255, 22117, 6022, 13, 50956], "temperature": 0.0, "avg_logprob": -0.4614665655442226, "compression_ratio": 1.6524390243902438, "no_speech_prob": 1.4285491488408297e-05}, {"id": 1359, "seek": 566576, "start": 5679.2, "end": 5680.0, "text": " Or unsqueeze.", "tokens": [51036, 1610, 2693, 1077, 10670, 13, 51076], "temperature": 0.0, "avg_logprob": -0.4614665655442226, "compression_ratio": 1.6524390243902438, "no_speech_prob": 1.4285491488408297e-05}, {"id": 1360, "seek": 566576, "start": 5684.8, "end": 5687.2, "text": " We don't have to say, as we've learned before,", "tokens": [51316, 492, 500, 380, 362, 281, 584, 11, 382, 321, 600, 3264, 949, 11, 51436], "temperature": 0.0, "avg_logprob": -0.4614665655442226, "compression_ratio": 1.6524390243902438, "no_speech_prob": 1.4285491488408297e-05}, {"id": 1361, "seek": 566576, "start": 5688.08, "end": 5690.16, "text": " none comma colon, because do you remember?", "tokens": [51480, 6022, 22117, 8255, 11, 570, 360, 291, 1604, 30, 51584], "temperature": 0.0, "avg_logprob": -0.4614665655442226, "compression_ratio": 1.6524390243902438, "no_speech_prob": 1.4285491488408297e-05}, {"id": 1362, "seek": 566576, "start": 5690.96, "end": 5692.24, "text": " Trailing colons are optional.", "tokens": [51624, 5403, 4883, 1173, 892, 366, 17312, 13, 51688], "temperature": 0.0, "avg_logprob": -0.4614665655442226, "compression_ratio": 1.6524390243902438, "no_speech_prob": 1.4285491488408297e-05}, {"id": 1363, "seek": 569224, "start": 5692.5599999999995, "end": 5693.92, "text": " Trailing colons are optional.", "tokens": [50380, 5403, 4883, 1173, 892, 366, 17312, 13, 50448], "temperature": 0.0, "avg_logprob": -0.20498949810139183, "compression_ratio": 1.6271929824561404, "no_speech_prob": 2.7969277653028257e-05}, {"id": 1364, "seek": 569224, "start": 5694.719999999999, "end": 5700.5599999999995, "text": " So therefore just say none is also going to give you a row matrix, one row matrix.", "tokens": [50488, 407, 4412, 445, 584, 6022, 307, 611, 516, 281, 976, 291, 257, 5386, 8141, 11, 472, 5386, 8141, 13, 50780], "temperature": 0.0, "avg_logprob": -0.20498949810139183, "compression_ratio": 1.6271929824561404, "no_speech_prob": 2.7969277653028257e-05}, {"id": 1365, "seek": 569224, "start": 5703.12, "end": 5704.16, "text": " This is a little trick here.", "tokens": [50908, 639, 307, 257, 707, 4282, 510, 13, 50960], "temperature": 0.0, "avg_logprob": -0.20498949810139183, "compression_ratio": 1.6271929824561404, "no_speech_prob": 2.7969277653028257e-05}, {"id": 1366, "seek": 569224, "start": 5704.16, "end": 5707.599999999999, "text": " If you say dot dot dot, that means all of the dimensions.", "tokens": [50960, 759, 291, 584, 5893, 5893, 5893, 11, 300, 1355, 439, 295, 264, 12819, 13, 51132], "temperature": 0.0, "avg_logprob": -0.20498949810139183, "compression_ratio": 1.6271929824561404, "no_speech_prob": 2.7969277653028257e-05}, {"id": 1367, "seek": 569224, "start": 5708.24, "end": 5712.96, "text": " And so dot dot dot comma none will always insert a unit axis at the end,", "tokens": [51164, 400, 370, 5893, 5893, 5893, 22117, 6022, 486, 1009, 8969, 257, 4985, 10298, 412, 264, 917, 11, 51400], "temperature": 0.0, "avg_logprob": -0.20498949810139183, "compression_ratio": 1.6271929824561404, "no_speech_prob": 2.7969277653028257e-05}, {"id": 1368, "seek": 569224, "start": 5712.96, "end": 5715.679999999999, "text": " regardless of what rank a tensor is.", "tokens": [51400, 10060, 295, 437, 6181, 257, 40863, 307, 13, 51536], "temperature": 0.0, "avg_logprob": -0.20498949810139183, "compression_ratio": 1.6271929824561404, "no_speech_prob": 2.7969277653028257e-05}, {"id": 1369, "seek": 569224, "start": 5717.28, "end": 5721.12, "text": " So yeah, so none and np new axis mean exactly the same thing.", "tokens": [51616, 407, 1338, 11, 370, 6022, 293, 33808, 777, 10298, 914, 2293, 264, 912, 551, 13, 51808], "temperature": 0.0, "avg_logprob": -0.20498949810139183, "compression_ratio": 1.6271929824561404, "no_speech_prob": 2.7969277653028257e-05}, {"id": 1370, "seek": 572112, "start": 5721.12, "end": 5723.599999999999, "text": " np new axis is actually a synonym for none.", "tokens": [50364, 33808, 777, 10298, 307, 767, 257, 5451, 12732, 337, 6022, 13, 50488], "temperature": 0.0, "avg_logprob": -0.228793400984544, "compression_ratio": 1.6310679611650485, "no_speech_prob": 3.0894921110302676e-06}, {"id": 1371, "seek": 572112, "start": 5725.2, "end": 5726.16, "text": " If you've ever used that.", "tokens": [50568, 759, 291, 600, 1562, 1143, 300, 13, 50616], "temperature": 0.0, "avg_logprob": -0.228793400984544, "compression_ratio": 1.6310679611650485, "no_speech_prob": 3.0894921110302676e-06}, {"id": 1372, "seek": 572112, "start": 5726.16, "end": 5730.0, "text": " I always use none, because why not?", "tokens": [50616, 286, 1009, 764, 6022, 11, 570, 983, 406, 30, 50808], "temperature": 0.0, "avg_logprob": -0.228793400984544, "compression_ratio": 1.6310679611650485, "no_speech_prob": 3.0894921110302676e-06}, {"id": 1373, "seek": 572112, "start": 5730.0, "end": 5731.04, "text": " It's short and simple.", "tokens": [50808, 467, 311, 2099, 293, 2199, 13, 50860], "temperature": 0.0, "avg_logprob": -0.228793400984544, "compression_ratio": 1.6310679611650485, "no_speech_prob": 3.0894921110302676e-06}, {"id": 1374, "seek": 572112, "start": 5731.92, "end": 5733.44, "text": " So here's something interesting.", "tokens": [50904, 407, 510, 311, 746, 1880, 13, 50980], "temperature": 0.0, "avg_logprob": -0.228793400984544, "compression_ratio": 1.6310679611650485, "no_speech_prob": 3.0894921110302676e-06}, {"id": 1375, "seek": 572112, "start": 5733.44, "end": 5735.44, "text": " If we go c colon comma none.", "tokens": [50980, 759, 321, 352, 269, 8255, 22117, 6022, 13, 51080], "temperature": 0.0, "avg_logprob": -0.228793400984544, "compression_ratio": 1.6310679611650485, "no_speech_prob": 3.0894921110302676e-06}, {"id": 1376, "seek": 572112, "start": 5736.0, "end": 5739.44, "text": " So let's go and check out what c colon comma none looks like.", "tokens": [51108, 407, 718, 311, 352, 293, 1520, 484, 437, 269, 8255, 22117, 6022, 1542, 411, 13, 51280], "temperature": 0.0, "avg_logprob": -0.228793400984544, "compression_ratio": 1.6310679611650485, "no_speech_prob": 3.0894921110302676e-06}, {"id": 1377, "seek": 572112, "start": 5740.8, "end": 5745.84, "text": " C colon comma none is a column.", "tokens": [51348, 383, 8255, 22117, 6022, 307, 257, 7738, 13, 51600], "temperature": 0.0, "avg_logprob": -0.228793400984544, "compression_ratio": 1.6310679611650485, "no_speech_prob": 3.0894921110302676e-06}, {"id": 1378, "seek": 572112, "start": 5747.12, "end": 5749.76, "text": " And if we say expand as m, which is three by three,", "tokens": [51664, 400, 498, 321, 584, 5268, 382, 275, 11, 597, 307, 1045, 538, 1045, 11, 51796], "temperature": 0.0, "avg_logprob": -0.228793400984544, "compression_ratio": 1.6310679611650485, "no_speech_prob": 3.0894921110302676e-06}, {"id": 1379, "seek": 574976, "start": 5750.64, "end": 5754.24, "text": " then it's going to take that 10, 20, 30 column and replicate it.", "tokens": [50408, 550, 309, 311, 516, 281, 747, 300, 1266, 11, 945, 11, 2217, 7738, 293, 25356, 309, 13, 50588], "temperature": 0.0, "avg_logprob": -0.21902335869086967, "compression_ratio": 1.5780346820809248, "no_speech_prob": 1.5206820535240695e-05}, {"id": 1380, "seek": 574976, "start": 5754.24, "end": 5756.320000000001, "text": " 10, 20, 30, 10, 20, 30, 10, 20, 30.", "tokens": [50588, 1266, 11, 945, 11, 2217, 11, 1266, 11, 945, 11, 2217, 11, 1266, 11, 945, 11, 2217, 13, 50692], "temperature": 0.0, "avg_logprob": -0.21902335869086967, "compression_ratio": 1.5780346820809248, "no_speech_prob": 1.5206820535240695e-05}, {"id": 1381, "seek": 574976, "start": 5757.76, "end": 5758.96, "text": " So we could add.", "tokens": [50764, 407, 321, 727, 909, 13, 50824], "temperature": 0.0, "avg_logprob": -0.21902335869086967, "compression_ratio": 1.5780346820809248, "no_speech_prob": 1.5206820535240695e-05}, {"id": 1382, "seek": 574976, "start": 5760.0, "end": 5764.4800000000005, "text": " So remember, like, well, remember, I will explain that.", "tokens": [50876, 407, 1604, 11, 411, 11, 731, 11, 1604, 11, 286, 486, 2903, 300, 13, 51100], "temperature": 0.0, "avg_logprob": -0.21902335869086967, "compression_ratio": 1.5780346820809248, "no_speech_prob": 1.5206820535240695e-05}, {"id": 1383, "seek": 574976, "start": 5764.4800000000005, "end": 5770.64, "text": " When you say matrix plus c colon comma none,", "tokens": [51100, 1133, 291, 584, 8141, 1804, 269, 8255, 22117, 6022, 11, 51408], "temperature": 0.0, "avg_logprob": -0.21902335869086967, "compression_ratio": 1.5780346820809248, "no_speech_prob": 1.5206820535240695e-05}, {"id": 1384, "seek": 574976, "start": 5771.360000000001, "end": 5774.4800000000005, "text": " it's basically going to do this dot expand as for you.", "tokens": [51444, 309, 311, 1936, 516, 281, 360, 341, 5893, 5268, 382, 337, 291, 13, 51600], "temperature": 0.0, "avg_logprob": -0.21902335869086967, "compression_ratio": 1.5780346820809248, "no_speech_prob": 1.5206820535240695e-05}, {"id": 1385, "seek": 577448, "start": 5774.799999999999, "end": 5779.2, "text": " So if I want to add this matrix here to m,", "tokens": [50380, 407, 498, 286, 528, 281, 909, 341, 8141, 510, 281, 275, 11, 50600], "temperature": 0.0, "avg_logprob": -0.2562324488274405, "compression_ratio": 1.693121693121693, "no_speech_prob": 3.3405387966922717e-06}, {"id": 1386, "seek": 577448, "start": 5779.2, "end": 5782.4, "text": " I don't need to say dot expand as.", "tokens": [50600, 286, 500, 380, 643, 281, 584, 5893, 5268, 382, 13, 50760], "temperature": 0.0, "avg_logprob": -0.2562324488274405, "compression_ratio": 1.693121693121693, "no_speech_prob": 3.3405387966922717e-06}, {"id": 1387, "seek": 577448, "start": 5782.4, "end": 5783.12, "text": " I just write this.", "tokens": [50760, 286, 445, 2464, 341, 13, 50796], "temperature": 0.0, "avg_logprob": -0.2562324488274405, "compression_ratio": 1.693121693121693, "no_speech_prob": 3.3405387966922717e-06}, {"id": 1388, "seek": 577448, "start": 5783.12, "end": 5786.48, "text": " I just write m plus c colon comma none.", "tokens": [50796, 286, 445, 2464, 275, 1804, 269, 8255, 22117, 6022, 13, 50964], "temperature": 0.0, "avg_logprob": -0.2562324488274405, "compression_ratio": 1.693121693121693, "no_speech_prob": 3.3405387966922717e-06}, {"id": 1389, "seek": 577448, "start": 5787.04, "end": 5792.0, "text": " And so this is exactly the same as doing m plus c.", "tokens": [50992, 400, 370, 341, 307, 2293, 264, 912, 382, 884, 275, 1804, 269, 13, 51240], "temperature": 0.0, "avg_logprob": -0.2562324488274405, "compression_ratio": 1.693121693121693, "no_speech_prob": 3.3405387966922717e-06}, {"id": 1390, "seek": 577448, "start": 5792.879999999999, "end": 5796.08, "text": " But now rather than adding the vector to each row,", "tokens": [51284, 583, 586, 2831, 813, 5127, 264, 8062, 281, 1184, 5386, 11, 51444], "temperature": 0.0, "avg_logprob": -0.2562324488274405, "compression_ratio": 1.693121693121693, "no_speech_prob": 3.3405387966922717e-06}, {"id": 1391, "seek": 577448, "start": 5797.28, "end": 5799.839999999999, "text": " it's adding the vector to each column.", "tokens": [51504, 309, 311, 5127, 264, 8062, 281, 1184, 7738, 13, 51632], "temperature": 0.0, "avg_logprob": -0.2562324488274405, "compression_ratio": 1.693121693121693, "no_speech_prob": 3.3405387966922717e-06}, {"id": 1392, "seek": 577448, "start": 5799.839999999999, "end": 5803.2, "text": " C plus 10, 20, 30, 10, 20, 30, 10, 20, 30.", "tokens": [51632, 383, 1804, 1266, 11, 945, 11, 2217, 11, 1266, 11, 945, 11, 2217, 11, 1266, 11, 945, 11, 2217, 13, 51800], "temperature": 0.0, "avg_logprob": -0.2562324488274405, "compression_ratio": 1.693121693121693, "no_speech_prob": 3.3405387966922717e-06}, {"id": 1393, "seek": 580448, "start": 5805.44, "end": 5809.599999999999, "text": " So that's a really simple way that we now get kind of for free,", "tokens": [50412, 407, 300, 311, 257, 534, 2199, 636, 300, 321, 586, 483, 733, 295, 337, 1737, 11, 50620], "temperature": 0.0, "avg_logprob": -0.2341950611003394, "compression_ratio": 1.6492890995260663, "no_speech_prob": 1.8342781913815998e-05}, {"id": 1394, "seek": 580448, "start": 5809.599999999999, "end": 5813.839999999999, "text": " thanks to this really nifty notation, this nifty approach that came from Yorick.", "tokens": [50620, 3231, 281, 341, 534, 297, 37177, 24657, 11, 341, 297, 37177, 3109, 300, 1361, 490, 398, 284, 618, 13, 50832], "temperature": 0.0, "avg_logprob": -0.2341950611003394, "compression_ratio": 1.6492890995260663, "no_speech_prob": 1.8342781913815998e-05}, {"id": 1395, "seek": 580448, "start": 5816.4, "end": 5822.719999999999, "text": " So here you can see m plus c none comma colon is adding 10, 20, 30 to each row.", "tokens": [50960, 407, 510, 291, 393, 536, 275, 1804, 269, 6022, 22117, 8255, 307, 5127, 1266, 11, 945, 11, 2217, 281, 1184, 5386, 13, 51276], "temperature": 0.0, "avg_logprob": -0.2341950611003394, "compression_ratio": 1.6492890995260663, "no_speech_prob": 1.8342781913815998e-05}, {"id": 1396, "seek": 580448, "start": 5823.36, "end": 5827.12, "text": " And m plus c colon comma none is adding 10, 20, 30 to each column.", "tokens": [51308, 400, 275, 1804, 269, 8255, 22117, 6022, 307, 5127, 1266, 11, 945, 11, 2217, 281, 1184, 7738, 13, 51496], "temperature": 0.0, "avg_logprob": -0.2341950611003394, "compression_ratio": 1.6492890995260663, "no_speech_prob": 1.8342781913815998e-05}, {"id": 1397, "seek": 580448, "start": 5830.24, "end": 5833.12, "text": " All right, so that's the basic, like, hand wavy version.", "tokens": [51652, 1057, 558, 11, 370, 300, 311, 264, 3875, 11, 411, 11, 1011, 261, 15498, 3037, 13, 51796], "temperature": 0.0, "avg_logprob": -0.2341950611003394, "compression_ratio": 1.6492890995260663, "no_speech_prob": 1.8342781913815998e-05}, {"id": 1398, "seek": 583312, "start": 5833.12, "end": 5837.84, "text": " So let's look at, like, what are the rules and how does it work?", "tokens": [50364, 407, 718, 311, 574, 412, 11, 411, 11, 437, 366, 264, 4474, 293, 577, 775, 309, 589, 30, 50600], "temperature": 0.0, "avg_logprob": -0.22428636236505195, "compression_ratio": 1.603960396039604, "no_speech_prob": 4.6644481699331664e-07}, {"id": 1399, "seek": 583312, "start": 5839.599999999999, "end": 5843.5199999999995, "text": " Okay, so c none comma colon is one by three.", "tokens": [50688, 1033, 11, 370, 269, 6022, 22117, 8255, 307, 472, 538, 1045, 13, 50884], "temperature": 0.0, "avg_logprob": -0.22428636236505195, "compression_ratio": 1.603960396039604, "no_speech_prob": 4.6644481699331664e-07}, {"id": 1400, "seek": 583312, "start": 5844.48, "end": 5846.96, "text": " C colon comma none is three by one.", "tokens": [50932, 383, 8255, 22117, 6022, 307, 1045, 538, 472, 13, 51056], "temperature": 0.0, "avg_logprob": -0.22428636236505195, "compression_ratio": 1.603960396039604, "no_speech_prob": 4.6644481699331664e-07}, {"id": 1401, "seek": 583312, "start": 5848.08, "end": 5854.08, "text": " What happens if we multiply c none comma colon by c colon comma none?", "tokens": [51112, 708, 2314, 498, 321, 12972, 269, 6022, 22117, 8255, 538, 269, 8255, 22117, 6022, 30, 51412], "temperature": 0.0, "avg_logprob": -0.22428636236505195, "compression_ratio": 1.603960396039604, "no_speech_prob": 4.6644481699331664e-07}, {"id": 1402, "seek": 583312, "start": 5855.68, "end": 5857.84, "text": " Well, it's going to do, if you think about it,", "tokens": [51492, 1042, 11, 309, 311, 516, 281, 360, 11, 498, 291, 519, 466, 309, 11, 51600], "temperature": 0.0, "avg_logprob": -0.22428636236505195, "compression_ratio": 1.603960396039604, "no_speech_prob": 4.6644481699331664e-07}, {"id": 1403, "seek": 583312, "start": 5859.36, "end": 5861.599999999999, "text": " which you definitely should because thinking is very helpful,", "tokens": [51676, 597, 291, 2138, 820, 570, 1953, 307, 588, 4961, 11, 51788], "temperature": 0.0, "avg_logprob": -0.22428636236505195, "compression_ratio": 1.603960396039604, "no_speech_prob": 4.6644481699331664e-07}, {"id": 1404, "seek": 586312, "start": 5863.84, "end": 5866.0, "text": " what is going on here?", "tokens": [50400, 437, 307, 516, 322, 510, 30, 50508], "temperature": 0.0, "avg_logprob": -0.22787053849962022, "compression_ratio": 1.6519337016574585, "no_speech_prob": 6.577929525519721e-07}, {"id": 1405, "seek": 586312, "start": 5866.0, "end": 5866.96, "text": " Oh, took forever.", "tokens": [50508, 876, 11, 1890, 5680, 13, 50556], "temperature": 0.0, "avg_logprob": -0.22787053849962022, "compression_ratio": 1.6519337016574585, "no_speech_prob": 6.577929525519721e-07}, {"id": 1406, "seek": 586312, "start": 5870.24, "end": 5874.64, "text": " Okay, so what happens if we go c none comma colon times c colon comma none?", "tokens": [50720, 1033, 11, 370, 437, 2314, 498, 321, 352, 269, 6022, 22117, 8255, 1413, 269, 8255, 22117, 6022, 30, 50940], "temperature": 0.0, "avg_logprob": -0.22787053849962022, "compression_ratio": 1.6519337016574585, "no_speech_prob": 6.577929525519721e-07}, {"id": 1407, "seek": 586312, "start": 5874.64, "end": 5878.16, "text": " So what it's going to have to do is it's going to have to take this 10, 20, 30", "tokens": [50940, 407, 437, 309, 311, 516, 281, 362, 281, 360, 307, 309, 311, 516, 281, 362, 281, 747, 341, 1266, 11, 945, 11, 2217, 51116], "temperature": 0.0, "avg_logprob": -0.22787053849962022, "compression_ratio": 1.6519337016574585, "no_speech_prob": 6.577929525519721e-07}, {"id": 1408, "seek": 586312, "start": 5880.72, "end": 5886.96, "text": " column vector or three by one matrix, and it's going to have to make it", "tokens": [51244, 7738, 8062, 420, 1045, 538, 472, 8141, 11, 293, 309, 311, 516, 281, 362, 281, 652, 309, 51556], "temperature": 0.0, "avg_logprob": -0.22787053849962022, "compression_ratio": 1.6519337016574585, "no_speech_prob": 6.577929525519721e-07}, {"id": 1409, "seek": 586312, "start": 5888.64, "end": 5890.64, "text": " work across each of these rows.", "tokens": [51640, 589, 2108, 1184, 295, 613, 13241, 13, 51740], "temperature": 0.0, "avg_logprob": -0.22787053849962022, "compression_ratio": 1.6519337016574585, "no_speech_prob": 6.577929525519721e-07}, {"id": 1410, "seek": 589064, "start": 5890.64, "end": 5895.4400000000005, "text": " So what it does is expands it to be 10, 20, 30, 10, 20, 30, 10, 20, 30.", "tokens": [50364, 407, 437, 309, 775, 307, 33706, 309, 281, 312, 1266, 11, 945, 11, 2217, 11, 1266, 11, 945, 11, 2217, 11, 1266, 11, 945, 11, 2217, 13, 50604], "temperature": 0.0, "avg_logprob": -0.13657004314920176, "compression_ratio": 1.9005524861878453, "no_speech_prob": 7.571147762064356e-07}, {"id": 1411, "seek": 589064, "start": 5895.4400000000005, "end": 5896.88, "text": " So it's going to do it just like this.", "tokens": [50604, 407, 309, 311, 516, 281, 360, 309, 445, 411, 341, 13, 50676], "temperature": 0.0, "avg_logprob": -0.13657004314920176, "compression_ratio": 1.9005524861878453, "no_speech_prob": 7.571147762064356e-07}, {"id": 1412, "seek": 589064, "start": 5898.400000000001, "end": 5903.200000000001, "text": " And then it's going to do the same thing for c none comma colon.", "tokens": [50752, 400, 550, 309, 311, 516, 281, 360, 264, 912, 551, 337, 269, 6022, 22117, 8255, 13, 50992], "temperature": 0.0, "avg_logprob": -0.13657004314920176, "compression_ratio": 1.9005524861878453, "no_speech_prob": 7.571147762064356e-07}, {"id": 1413, "seek": 589064, "start": 5903.200000000001, "end": 5906.320000000001, "text": " So that's going to become three rows of 10, 20, 30.", "tokens": [50992, 407, 300, 311, 516, 281, 1813, 1045, 13241, 295, 1266, 11, 945, 11, 2217, 13, 51148], "temperature": 0.0, "avg_logprob": -0.13657004314920176, "compression_ratio": 1.9005524861878453, "no_speech_prob": 7.571147762064356e-07}, {"id": 1414, "seek": 589064, "start": 5906.320000000001, "end": 5908.88, "text": " So we're going to end up with three rows of 10, 20, 30", "tokens": [51148, 407, 321, 434, 516, 281, 917, 493, 365, 1045, 13241, 295, 1266, 11, 945, 11, 2217, 51276], "temperature": 0.0, "avg_logprob": -0.13657004314920176, "compression_ratio": 1.9005524861878453, "no_speech_prob": 7.571147762064356e-07}, {"id": 1415, "seek": 589064, "start": 5910.64, "end": 5914.96, "text": " times three columns of 10, 20, 30, which gives us our answer.", "tokens": [51364, 1413, 1045, 13766, 295, 1266, 11, 945, 11, 2217, 11, 597, 2709, 505, 527, 1867, 13, 51580], "temperature": 0.0, "avg_logprob": -0.13657004314920176, "compression_ratio": 1.9005524861878453, "no_speech_prob": 7.571147762064356e-07}, {"id": 1416, "seek": 591496, "start": 5915.84, "end": 5920.24, "text": " And so this is going to do an outer product.", "tokens": [50408, 400, 370, 341, 307, 516, 281, 360, 364, 10847, 1674, 13, 50628], "temperature": 0.0, "avg_logprob": -0.3070313589913504, "compression_ratio": 1.6288209606986899, "no_speech_prob": 4.222831194056198e-06}, {"id": 1417, "seek": 591496, "start": 5920.24, "end": 5924.56, "text": " So it's very nifty that you can actually do an outer product", "tokens": [50628, 407, 309, 311, 588, 297, 37177, 300, 291, 393, 767, 360, 364, 10847, 1674, 50844], "temperature": 0.0, "avg_logprob": -0.3070313589913504, "compression_ratio": 1.6288209606986899, "no_speech_prob": 4.222831194056198e-06}, {"id": 1418, "seek": 591496, "start": 5925.92, "end": 5930.88, "text": " without any special, you know, functions or anything, just using broadcasting.", "tokens": [50912, 1553, 604, 2121, 11, 291, 458, 11, 6828, 420, 1340, 11, 445, 1228, 30024, 13, 51160], "temperature": 0.0, "avg_logprob": -0.3070313589913504, "compression_ratio": 1.6288209606986899, "no_speech_prob": 4.222831194056198e-06}, {"id": 1419, "seek": 591496, "start": 5931.68, "end": 5932.88, "text": " And it's not just outer products.", "tokens": [51200, 400, 309, 311, 406, 445, 10847, 3383, 13, 51260], "temperature": 0.0, "avg_logprob": -0.3070313589913504, "compression_ratio": 1.6288209606986899, "no_speech_prob": 4.222831194056198e-06}, {"id": 1420, "seek": 591496, "start": 5932.88, "end": 5935.2, "text": " You can do outer Boolean operations.", "tokens": [51260, 509, 393, 360, 10847, 23351, 28499, 7705, 13, 51376], "temperature": 0.0, "avg_logprob": -0.3070313589913504, "compression_ratio": 1.6288209606986899, "no_speech_prob": 4.222831194056198e-06}, {"id": 1421, "seek": 591496, "start": 5936.24, "end": 5938.72, "text": " And this kind of stuff comes up all the time, right?", "tokens": [51428, 400, 341, 733, 295, 1507, 1487, 493, 439, 264, 565, 11, 558, 30, 51552], "temperature": 0.0, "avg_logprob": -0.3070313589913504, "compression_ratio": 1.6288209606986899, "no_speech_prob": 4.222831194056198e-06}, {"id": 1422, "seek": 591496, "start": 5938.72, "end": 5940.56, "text": " Now, remember, you don't need the comma colon.", "tokens": [51552, 823, 11, 1604, 11, 291, 500, 380, 643, 264, 22117, 8255, 13, 51644], "temperature": 0.0, "avg_logprob": -0.3070313589913504, "compression_ratio": 1.6288209606986899, "no_speech_prob": 4.222831194056198e-06}, {"id": 1423, "seek": 591496, "start": 5940.56, "end": 5941.2, "text": " So get rid of it.", "tokens": [51644, 407, 483, 3973, 295, 309, 13, 51676], "temperature": 0.0, "avg_logprob": -0.3070313589913504, "compression_ratio": 1.6288209606986899, "no_speech_prob": 4.222831194056198e-06}, {"id": 1424, "seek": 594120, "start": 5941.28, "end": 5943.76, "text": " So this is showing us all the places where", "tokens": [50368, 407, 341, 307, 4099, 505, 439, 264, 3190, 689, 50492], "temperature": 0.0, "avg_logprob": -0.3915034889155983, "compression_ratio": 1.6260504201680672, "no_speech_prob": 0.00033015088411048055}, {"id": 1425, "seek": 594120, "start": 5946.16, "end": 5951.12, "text": " it's greater than, it's kind of an outer Boolean, if you want to call it that.", "tokens": [50612, 309, 311, 5044, 813, 11, 309, 311, 733, 295, 364, 10847, 23351, 28499, 11, 498, 291, 528, 281, 818, 309, 300, 13, 50860], "temperature": 0.0, "avg_logprob": -0.3915034889155983, "compression_ratio": 1.6260504201680672, "no_speech_prob": 0.00033015088411048055}, {"id": 1426, "seek": 594120, "start": 5952.08, "end": 5953.12, "text": " So this is super nifty.", "tokens": [50908, 407, 341, 307, 1687, 297, 37177, 13, 50960], "temperature": 0.0, "avg_logprob": -0.3915034889155983, "compression_ratio": 1.6260504201680672, "no_speech_prob": 0.00033015088411048055}, {"id": 1427, "seek": 594120, "start": 5953.12, "end": 5957.28, "text": " And you can do all kinds of tricks with this because it runs very, very fast.", "tokens": [50960, 400, 291, 393, 360, 439, 3685, 295, 11733, 365, 341, 570, 309, 6676, 588, 11, 588, 2370, 13, 51168], "temperature": 0.0, "avg_logprob": -0.3915034889155983, "compression_ratio": 1.6260504201680672, "no_speech_prob": 0.00033015088411048055}, {"id": 1428, "seek": 594120, "start": 5957.84, "end": 5959.599999999999, "text": " So this is going to be accelerated in C.", "tokens": [51196, 407, 341, 307, 516, 281, 312, 29763, 294, 383, 13, 51284], "temperature": 0.0, "avg_logprob": -0.3915034889155983, "compression_ratio": 1.6260504201680672, "no_speech_prob": 0.00033015088411048055}, {"id": 1429, "seek": 594120, "start": 5961.679999999999, "end": 5962.639999999999, "text": " So here are the rules.", "tokens": [51388, 407, 510, 366, 264, 4474, 13, 51436], "temperature": 0.0, "avg_logprob": -0.3915034889155983, "compression_ratio": 1.6260504201680672, "no_speech_prob": 0.00033015088411048055}, {"id": 1430, "seek": 594120, "start": 5962.639999999999, "end": 5963.44, "text": " Okay.", "tokens": [51436, 1033, 13, 51476], "temperature": 0.0, "avg_logprob": -0.3915034889155983, "compression_ratio": 1.6260504201680672, "no_speech_prob": 0.00033015088411048055}, {"id": 1431, "seek": 594120, "start": 5963.44, "end": 5968.0, "text": " When you operate on two arrays or tensors, numpy and pytorch will compare their shapes.", "tokens": [51476, 1133, 291, 9651, 322, 732, 41011, 420, 10688, 830, 11, 1031, 8200, 293, 25878, 284, 339, 486, 6794, 641, 10854, 13, 51704], "temperature": 0.0, "avg_logprob": -0.3915034889155983, "compression_ratio": 1.6260504201680672, "no_speech_prob": 0.00033015088411048055}, {"id": 1432, "seek": 594120, "start": 5968.72, "end": 5969.2, "text": " Okay.", "tokens": [51740, 1033, 13, 51764], "temperature": 0.0, "avg_logprob": -0.3915034889155983, "compression_ratio": 1.6260504201680672, "no_speech_prob": 0.00033015088411048055}, {"id": 1433, "seek": 596920, "start": 5969.2, "end": 5970.96, "text": " So remember the shape, this is a shape.", "tokens": [50364, 407, 1604, 264, 3909, 11, 341, 307, 257, 3909, 13, 50452], "temperature": 0.0, "avg_logprob": -0.40678919741981906, "compression_ratio": 1.693069306930693, "no_speech_prob": 2.994439910253277e-06}, {"id": 1434, "seek": 596920, "start": 5971.84, "end": 5973.5199999999995, "text": " You can tell it's a shape because we said shape.", "tokens": [50496, 509, 393, 980, 309, 311, 257, 3909, 570, 321, 848, 3909, 13, 50580], "temperature": 0.0, "avg_logprob": -0.40678919741981906, "compression_ratio": 1.693069306930693, "no_speech_prob": 2.994439910253277e-06}, {"id": 1435, "seek": 596920, "start": 5974.96, "end": 5976.639999999999, "text": " And it goes from right to left.", "tokens": [50652, 400, 309, 1709, 490, 558, 281, 1411, 13, 50736], "temperature": 0.0, "avg_logprob": -0.40678919741981906, "compression_ratio": 1.693069306930693, "no_speech_prob": 2.994439910253277e-06}, {"id": 1436, "seek": 596920, "start": 5976.639999999999, "end": 5978.0, "text": " So that's the trailing dimensions.", "tokens": [50736, 407, 300, 311, 264, 944, 4883, 12819, 13, 50804], "temperature": 0.0, "avg_logprob": -0.40678919741981906, "compression_ratio": 1.693069306930693, "no_speech_prob": 2.994439910253277e-06}, {"id": 1437, "seek": 596920, "start": 5980.0, "end": 5982.0, "text": " And it checks whether the dimensions are compatible.", "tokens": [50904, 400, 309, 13834, 1968, 264, 12819, 366, 18218, 13, 51004], "temperature": 0.0, "avg_logprob": -0.40678919741981906, "compression_ratio": 1.693069306930693, "no_speech_prob": 2.994439910253277e-06}, {"id": 1438, "seek": 596920, "start": 5982.8, "end": 5986.0, "text": " Now they're compatible if they're equal, right?", "tokens": [51044, 823, 436, 434, 18218, 498, 436, 434, 2681, 11, 558, 30, 51204], "temperature": 0.0, "avg_logprob": -0.40678919741981906, "compression_ratio": 1.693069306930693, "no_speech_prob": 2.994439910253277e-06}, {"id": 1439, "seek": 596920, "start": 5986.0, "end": 5989.28, "text": " So for example, if we say m times m,", "tokens": [51204, 407, 337, 1365, 11, 498, 321, 584, 275, 1413, 275, 11, 51368], "temperature": 0.0, "avg_logprob": -0.40678919741981906, "compression_ratio": 1.693069306930693, "no_speech_prob": 2.994439910253277e-06}, {"id": 1440, "seek": 596920, "start": 5991.12, "end": 5995.2, "text": " then those two shapes are compatible because the", "tokens": [51460, 550, 729, 732, 10854, 366, 18218, 570, 264, 51664], "temperature": 0.0, "avg_logprob": -0.40678919741981906, "compression_ratio": 1.693069306930693, "no_speech_prob": 2.994439910253277e-06}, {"id": 1441, "seek": 599520, "start": 5996.0, "end": 6004.88, "text": " because in each case, it's just going to be three, right?", "tokens": [50404, 570, 294, 1184, 1389, 11, 309, 311, 445, 516, 281, 312, 1045, 11, 558, 30, 50848], "temperature": 0.0, "avg_logprob": -0.2228390693664551, "compression_ratio": 1.691358024691358, "no_speech_prob": 1.3925464372732677e-06}, {"id": 1442, "seek": 599520, "start": 6004.88, "end": 6005.76, "text": " So they're going to be equal.", "tokens": [50848, 407, 436, 434, 516, 281, 312, 2681, 13, 50892], "temperature": 0.0, "avg_logprob": -0.2228390693664551, "compression_ratio": 1.691358024691358, "no_speech_prob": 1.3925464372732677e-06}, {"id": 1443, "seek": 599520, "start": 6006.5599999999995, "end": 6012.4, "text": " So if the shape in that dimension is equal, they're compatible.", "tokens": [50932, 407, 498, 264, 3909, 294, 300, 10139, 307, 2681, 11, 436, 434, 18218, 13, 51224], "temperature": 0.0, "avg_logprob": -0.2228390693664551, "compression_ratio": 1.691358024691358, "no_speech_prob": 1.3925464372732677e-06}, {"id": 1444, "seek": 599520, "start": 6013.36, "end": 6017.5199999999995, "text": " Or if one of them's one, and if one of them's one,", "tokens": [51272, 1610, 498, 472, 295, 552, 311, 472, 11, 293, 498, 472, 295, 552, 311, 472, 11, 51480], "temperature": 0.0, "avg_logprob": -0.2228390693664551, "compression_ratio": 1.691358024691358, "no_speech_prob": 1.3925464372732677e-06}, {"id": 1445, "seek": 599520, "start": 6017.5199999999995, "end": 6021.04, "text": " then that dimension is broadcast to make it the same size as the other.", "tokens": [51480, 550, 300, 10139, 307, 9975, 281, 652, 309, 264, 912, 2744, 382, 264, 661, 13, 51656], "temperature": 0.0, "avg_logprob": -0.2228390693664551, "compression_ratio": 1.691358024691358, "no_speech_prob": 1.3925464372732677e-06}, {"id": 1446, "seek": 602104, "start": 6021.44, "end": 6025.6, "text": " So that's why the outer product worked.", "tokens": [50384, 407, 300, 311, 983, 264, 10847, 1674, 2732, 13, 50592], "temperature": 0.0, "avg_logprob": -0.28985161005064497, "compression_ratio": 1.8159509202453987, "no_speech_prob": 8.267869816336315e-06}, {"id": 1447, "seek": 602104, "start": 6027.2, "end": 6030.64, "text": " We had a one by three times a three by one.", "tokens": [50672, 492, 632, 257, 472, 538, 1045, 1413, 257, 1045, 538, 472, 13, 50844], "temperature": 0.0, "avg_logprob": -0.28985161005064497, "compression_ratio": 1.8159509202453987, "no_speech_prob": 8.267869816336315e-06}, {"id": 1448, "seek": 602104, "start": 6032.16, "end": 6036.72, "text": " And so this one got copied three times to make it this long.", "tokens": [50920, 400, 370, 341, 472, 658, 25365, 1045, 1413, 281, 652, 309, 341, 938, 13, 51148], "temperature": 0.0, "avg_logprob": -0.28985161005064497, "compression_ratio": 1.8159509202453987, "no_speech_prob": 8.267869816336315e-06}, {"id": 1449, "seek": 602104, "start": 6036.72, "end": 6039.12, "text": " And this one got copied three times to make it this long.", "tokens": [51148, 400, 341, 472, 658, 25365, 1045, 1413, 281, 652, 309, 341, 938, 13, 51268], "temperature": 0.0, "avg_logprob": -0.28985161005064497, "compression_ratio": 1.8159509202453987, "no_speech_prob": 8.267869816336315e-06}, {"id": 1450, "seek": 602104, "start": 6043.76, "end": 6044.08, "text": " Okay.", "tokens": [51500, 1033, 13, 51516], "temperature": 0.0, "avg_logprob": -0.28985161005064497, "compression_ratio": 1.8159509202453987, "no_speech_prob": 8.267869816336315e-06}, {"id": 1451, "seek": 602104, "start": 6044.08, "end": 6044.88, "text": " So those are the rules.", "tokens": [51516, 407, 729, 366, 264, 4474, 13, 51556], "temperature": 0.0, "avg_logprob": -0.28985161005064497, "compression_ratio": 1.8159509202453987, "no_speech_prob": 8.267869816336315e-06}, {"id": 1452, "seek": 602104, "start": 6045.6, "end": 6048.24, "text": " So the arrays don't have to have the same number of dimensions.", "tokens": [51592, 407, 264, 41011, 500, 380, 362, 281, 362, 264, 912, 1230, 295, 12819, 13, 51724], "temperature": 0.0, "avg_logprob": -0.28985161005064497, "compression_ratio": 1.8159509202453987, "no_speech_prob": 8.267869816336315e-06}, {"id": 1453, "seek": 604824, "start": 6048.4, "end": 6050.48, "text": " So this is an example that comes up all the time.", "tokens": [50372, 407, 341, 307, 364, 1365, 300, 1487, 493, 439, 264, 565, 13, 50476], "temperature": 0.0, "avg_logprob": -0.3017840342478709, "compression_ratio": 1.6277056277056277, "no_speech_prob": 1.2219069503771607e-05}, {"id": 1454, "seek": 604824, "start": 6050.48, "end": 6055.2, "text": " Let's say you've got a 256 by 256 by 3 array of, or tensor of RGB values.", "tokens": [50476, 961, 311, 584, 291, 600, 658, 257, 38882, 538, 38882, 538, 805, 10225, 295, 11, 420, 40863, 295, 31231, 4190, 13, 50712], "temperature": 0.0, "avg_logprob": -0.3017840342478709, "compression_ratio": 1.6277056277056277, "no_speech_prob": 1.2219069503771607e-05}, {"id": 1455, "seek": 604824, "start": 6055.2, "end": 6058.0, "text": " So you've got an image, in other words, a three, a color image,", "tokens": [50712, 407, 291, 600, 658, 364, 3256, 11, 294, 661, 2283, 11, 257, 1045, 11, 257, 2017, 3256, 11, 50852], "temperature": 0.0, "avg_logprob": -0.3017840342478709, "compression_ratio": 1.6277056277056277, "no_speech_prob": 1.2219069503771607e-05}, {"id": 1456, "seek": 604824, "start": 6058.8, "end": 6060.5599999999995, "text": " and you want to normalize it.", "tokens": [50892, 293, 291, 528, 281, 2710, 1125, 309, 13, 50980], "temperature": 0.0, "avg_logprob": -0.3017840342478709, "compression_ratio": 1.6277056277056277, "no_speech_prob": 1.2219069503771607e-05}, {"id": 1457, "seek": 604824, "start": 6060.5599999999995, "end": 6064.48, "text": " So you want to scale each color in the image by a different value.", "tokens": [50980, 407, 291, 528, 281, 4373, 1184, 2017, 294, 264, 3256, 538, 257, 819, 2158, 13, 51176], "temperature": 0.0, "avg_logprob": -0.3017840342478709, "compression_ratio": 1.6277056277056277, "no_speech_prob": 1.2219069503771607e-05}, {"id": 1458, "seek": 604824, "start": 6064.48, "end": 6067.599999999999, "text": " So this is how we normalize colors.", "tokens": [51176, 407, 341, 307, 577, 321, 2710, 1125, 4577, 13, 51332], "temperature": 0.0, "avg_logprob": -0.3017840342478709, "compression_ratio": 1.6277056277056277, "no_speech_prob": 1.2219069503771607e-05}, {"id": 1459, "seek": 604824, "start": 6070.8, "end": 6074.48, "text": " So one way is you could multiply or divide or whatever,", "tokens": [51492, 407, 472, 636, 307, 291, 727, 12972, 420, 9845, 420, 2035, 11, 51676], "temperature": 0.0, "avg_logprob": -0.3017840342478709, "compression_ratio": 1.6277056277056277, "no_speech_prob": 1.2219069503771607e-05}, {"id": 1460, "seek": 607448, "start": 6074.639999999999, "end": 6078.639999999999, "text": " multiply the image by a one dimensional array with three values.", "tokens": [50372, 12972, 264, 3256, 538, 257, 472, 18795, 10225, 365, 1045, 4190, 13, 50572], "temperature": 0.0, "avg_logprob": -0.33812224126495094, "compression_ratio": 1.72, "no_speech_prob": 3.4808097552740946e-05}, {"id": 1461, "seek": 607448, "start": 6079.599999999999, "end": 6081.04, "text": " So you've got a 1D array.", "tokens": [50620, 407, 291, 600, 658, 257, 502, 35, 10225, 13, 50692], "temperature": 0.0, "avg_logprob": -0.33812224126495094, "compression_ratio": 1.72, "no_speech_prob": 3.4808097552740946e-05}, {"id": 1462, "seek": 607448, "start": 6081.679999999999, "end": 6083.759999999999, "text": " So that's just three.", "tokens": [50724, 407, 300, 311, 445, 1045, 13, 50828], "temperature": 0.0, "avg_logprob": -0.33812224126495094, "compression_ratio": 1.72, "no_speech_prob": 3.4808097552740946e-05}, {"id": 1463, "seek": 607448, "start": 6084.4, "end": 6084.719999999999, "text": " Okay.", "tokens": [50860, 1033, 13, 50876], "temperature": 0.0, "avg_logprob": -0.33812224126495094, "compression_ratio": 1.72, "no_speech_prob": 3.4808097552740946e-05}, {"id": 1464, "seek": 607448, "start": 6084.719999999999, "end": 6088.5599999999995, "text": " And then the image is 256 by 256 by 3.", "tokens": [50876, 400, 550, 264, 3256, 307, 38882, 538, 38882, 538, 805, 13, 51068], "temperature": 0.0, "avg_logprob": -0.33812224126495094, "compression_ratio": 1.72, "no_speech_prob": 3.4808097552740946e-05}, {"id": 1465, "seek": 607448, "start": 6089.36, "end": 6092.24, "text": " And we go right to left and we check, are they the same?", "tokens": [51108, 400, 321, 352, 558, 281, 1411, 293, 321, 1520, 11, 366, 436, 264, 912, 30, 51252], "temperature": 0.0, "avg_logprob": -0.33812224126495094, "compression_ratio": 1.72, "no_speech_prob": 3.4808097552740946e-05}, {"id": 1466, "seek": 607448, "start": 6092.24, "end": 6093.5199999999995, "text": " And we say, yes, they are.", "tokens": [51252, 400, 321, 584, 11, 2086, 11, 436, 366, 13, 51316], "temperature": 0.0, "avg_logprob": -0.33812224126495094, "compression_ratio": 1.72, "no_speech_prob": 3.4808097552740946e-05}, {"id": 1467, "seek": 607448, "start": 6095.04, "end": 6097.599999999999, "text": " And then we keep going left and we say, are they the same?", "tokens": [51392, 400, 550, 321, 1066, 516, 1411, 293, 321, 584, 11, 366, 436, 264, 912, 30, 51520], "temperature": 0.0, "avg_logprob": -0.33812224126495094, "compression_ratio": 1.72, "no_speech_prob": 3.4808097552740946e-05}, {"id": 1468, "seek": 607448, "start": 6097.599999999999, "end": 6100.24, "text": " And if it's missing, we act as if it's one.", "tokens": [51520, 400, 498, 309, 311, 5361, 11, 321, 605, 382, 498, 309, 311, 472, 13, 51652], "temperature": 0.0, "avg_logprob": -0.33812224126495094, "compression_ratio": 1.72, "no_speech_prob": 3.4808097552740946e-05}, {"id": 1469, "seek": 610024, "start": 6100.96, "end": 6106.24, "text": " And if we go keep going, if it's missing, we act as if it's one.", "tokens": [50400, 400, 498, 321, 352, 1066, 516, 11, 498, 309, 311, 5361, 11, 321, 605, 382, 498, 309, 311, 472, 13, 50664], "temperature": 0.0, "avg_logprob": -0.22443360941750662, "compression_ratio": 1.7412280701754386, "no_speech_prob": 0.006388177629560232}, {"id": 1470, "seek": 610024, "start": 6106.24, "end": 6110.16, "text": " So this is going to be the same as doing one by one by three.", "tokens": [50664, 407, 341, 307, 516, 281, 312, 264, 912, 382, 884, 472, 538, 472, 538, 1045, 13, 50860], "temperature": 0.0, "avg_logprob": -0.22443360941750662, "compression_ratio": 1.7412280701754386, "no_speech_prob": 0.006388177629560232}, {"id": 1471, "seek": 610024, "start": 6110.16, "end": 6112.08, "text": " And so this is going to be broadcast.", "tokens": [50860, 400, 370, 341, 307, 516, 281, 312, 9975, 13, 50956], "temperature": 0.0, "avg_logprob": -0.22443360941750662, "compression_ratio": 1.7412280701754386, "no_speech_prob": 0.006388177629560232}, {"id": 1472, "seek": 610024, "start": 6112.08, "end": 6118.4, "text": " The three, three elements will be broadcast over all 256 by 256 pixels.", "tokens": [50956, 440, 1045, 11, 1045, 4959, 486, 312, 9975, 670, 439, 38882, 538, 38882, 18668, 13, 51272], "temperature": 0.0, "avg_logprob": -0.22443360941750662, "compression_ratio": 1.7412280701754386, "no_speech_prob": 0.006388177629560232}, {"id": 1473, "seek": 610024, "start": 6118.4, "end": 6124.719999999999, "text": " So this is a super fast and convenient and nice way of normalizing image data", "tokens": [51272, 407, 341, 307, 257, 1687, 2370, 293, 10851, 293, 1481, 636, 295, 2710, 3319, 3256, 1412, 51588], "temperature": 0.0, "avg_logprob": -0.22443360941750662, "compression_ratio": 1.7412280701754386, "no_speech_prob": 0.006388177629560232}, {"id": 1474, "seek": 610024, "start": 6124.719999999999, "end": 6125.92, "text": " with a single expression.", "tokens": [51588, 365, 257, 2167, 6114, 13, 51648], "temperature": 0.0, "avg_logprob": -0.22443360941750662, "compression_ratio": 1.7412280701754386, "no_speech_prob": 0.006388177629560232}, {"id": 1475, "seek": 610024, "start": 6125.92, "end": 6128.16, "text": " And this is exactly how we do it in the fast.ai library.", "tokens": [51648, 400, 341, 307, 2293, 577, 321, 360, 309, 294, 264, 2370, 13, 1301, 6405, 13, 51760], "temperature": 0.0, "avg_logprob": -0.22443360941750662, "compression_ratio": 1.7412280701754386, "no_speech_prob": 0.006388177629560232}, {"id": 1476, "seek": 612816, "start": 6129.04, "end": 6129.5199999999995, "text": " In fact.", "tokens": [50408, 682, 1186, 13, 50432], "temperature": 0.0, "avg_logprob": -0.1802333530626799, "compression_ratio": 1.6436781609195403, "no_speech_prob": 5.144198075868189e-05}, {"id": 1477, "seek": 612816, "start": 6131.76, "end": 6136.08, "text": " So we can use this to dramatically speed up our matrix multiplication.", "tokens": [50544, 407, 321, 393, 764, 341, 281, 17548, 3073, 493, 527, 8141, 27290, 13, 50760], "temperature": 0.0, "avg_logprob": -0.1802333530626799, "compression_ratio": 1.6436781609195403, "no_speech_prob": 5.144198075868189e-05}, {"id": 1478, "seek": 612816, "start": 6137.68, "end": 6140.4, "text": " Let's just grab a single digit just for simplicity.", "tokens": [50840, 961, 311, 445, 4444, 257, 2167, 14293, 445, 337, 25632, 13, 50976], "temperature": 0.0, "avg_logprob": -0.1802333530626799, "compression_ratio": 1.6436781609195403, "no_speech_prob": 5.144198075868189e-05}, {"id": 1479, "seek": 612816, "start": 6140.4, "end": 6142.8, "text": " And I really like doing this in Jupyter notebooks.", "tokens": [50976, 400, 286, 534, 411, 884, 341, 294, 22125, 88, 391, 43782, 13, 51096], "temperature": 0.0, "avg_logprob": -0.1802333530626799, "compression_ratio": 1.6436781609195403, "no_speech_prob": 5.144198075868189e-05}, {"id": 1480, "seek": 612816, "start": 6142.8, "end": 6147.5199999999995, "text": " And if you, if you build Jupyter notebooks to explain stuff that you've learned in this", "tokens": [51096, 400, 498, 291, 11, 498, 291, 1322, 22125, 88, 391, 43782, 281, 2903, 1507, 300, 291, 600, 3264, 294, 341, 51332], "temperature": 0.0, "avg_logprob": -0.1802333530626799, "compression_ratio": 1.6436781609195403, "no_speech_prob": 5.144198075868189e-05}, {"id": 1481, "seek": 612816, "start": 6147.5199999999995, "end": 6151.92, "text": " course or ways that you can apply it, consider doing this for your readers, but add a lot", "tokens": [51332, 1164, 420, 2098, 300, 291, 393, 3079, 309, 11, 1949, 884, 341, 337, 428, 17147, 11, 457, 909, 257, 688, 51552], "temperature": 0.0, "avg_logprob": -0.1802333530626799, "compression_ratio": 1.6436781609195403, "no_speech_prob": 5.144198075868189e-05}, {"id": 1482, "seek": 612816, "start": 6151.92, "end": 6152.639999999999, "text": " more pros.", "tokens": [51552, 544, 6267, 13, 51588], "temperature": 0.0, "avg_logprob": -0.1802333530626799, "compression_ratio": 1.6436781609195403, "no_speech_prob": 5.144198075868189e-05}, {"id": 1483, "seek": 612816, "start": 6152.639999999999, "end": 6156.48, "text": " I haven't added pros here because I want to use my voice.", "tokens": [51588, 286, 2378, 380, 3869, 6267, 510, 570, 286, 528, 281, 764, 452, 3177, 13, 51780], "temperature": 0.0, "avg_logprob": -0.1802333530626799, "compression_ratio": 1.6436781609195403, "no_speech_prob": 5.144198075868189e-05}, {"id": 1484, "seek": 615648, "start": 6156.48, "end": 6162.719999999999, "text": " If I was, for example, in our book that we published, it's all written in notebooks and", "tokens": [50364, 759, 286, 390, 11, 337, 1365, 11, 294, 527, 1446, 300, 321, 6572, 11, 309, 311, 439, 3720, 294, 43782, 293, 50676], "temperature": 0.0, "avg_logprob": -0.2012462114032946, "compression_ratio": 1.5791666666666666, "no_speech_prob": 7.766949238430243e-06}, {"id": 1485, "seek": 615648, "start": 6162.719999999999, "end": 6167.759999999999, "text": " there's a lot more pros, obviously, but like, really, I like to show every example all along", "tokens": [50676, 456, 311, 257, 688, 544, 6267, 11, 2745, 11, 457, 411, 11, 534, 11, 286, 411, 281, 855, 633, 1365, 439, 2051, 50928], "temperature": 0.0, "avg_logprob": -0.2012462114032946, "compression_ratio": 1.5791666666666666, "no_speech_prob": 7.766949238430243e-06}, {"id": 1486, "seek": 615648, "start": 6167.759999999999, "end": 6170.08, "text": " the way using simple as possible.", "tokens": [50928, 264, 636, 1228, 2199, 382, 1944, 13, 51044], "temperature": 0.0, "avg_logprob": -0.2012462114032946, "compression_ratio": 1.5791666666666666, "no_speech_prob": 7.766949238430243e-06}, {"id": 1487, "seek": 615648, "start": 6170.08, "end": 6172.0, "text": " So let's just grab a single digit.", "tokens": [51044, 407, 718, 311, 445, 4444, 257, 2167, 14293, 13, 51140], "temperature": 0.0, "avg_logprob": -0.2012462114032946, "compression_ratio": 1.5791666666666666, "no_speech_prob": 7.766949238430243e-06}, {"id": 1488, "seek": 615648, "start": 6172.0, "end": 6173.2, "text": " So here's the first digit.", "tokens": [51140, 407, 510, 311, 264, 700, 14293, 13, 51200], "temperature": 0.0, "avg_logprob": -0.2012462114032946, "compression_ratio": 1.5791666666666666, "no_speech_prob": 7.766949238430243e-06}, {"id": 1489, "seek": 615648, "start": 6174.08, "end": 6177.36, "text": " So its shape is, it's a 784 long vector.", "tokens": [51244, 407, 1080, 3909, 307, 11, 309, 311, 257, 1614, 25494, 938, 8062, 13, 51408], "temperature": 0.0, "avg_logprob": -0.2012462114032946, "compression_ratio": 1.5791666666666666, "no_speech_prob": 7.766949238430243e-06}, {"id": 1490, "seek": 615648, "start": 6177.36, "end": 6177.919999999999, "text": " Okay.", "tokens": [51408, 1033, 13, 51436], "temperature": 0.0, "avg_logprob": -0.2012462114032946, "compression_ratio": 1.5791666666666666, "no_speech_prob": 7.766949238430243e-06}, {"id": 1491, "seek": 615648, "start": 6177.919999999999, "end": 6182.08, "text": " And remember that our weight matrix is 784 by 10.", "tokens": [51436, 400, 1604, 300, 527, 3364, 8141, 307, 1614, 25494, 538, 1266, 13, 51644], "temperature": 0.0, "avg_logprob": -0.2012462114032946, "compression_ratio": 1.5791666666666666, "no_speech_prob": 7.766949238430243e-06}, {"id": 1492, "seek": 615648, "start": 6183.679999999999, "end": 6184.179999999999, "text": " Okay.", "tokens": [51724, 1033, 13, 51749], "temperature": 0.0, "avg_logprob": -0.2012462114032946, "compression_ratio": 1.5791666666666666, "no_speech_prob": 7.766949238430243e-06}, {"id": 1493, "seek": 618648, "start": 6186.5599999999995, "end": 6196.799999999999, "text": " So if we say digit colon common none dot shape, then that is a 784 by one row matrix.", "tokens": [50368, 407, 498, 321, 584, 14293, 8255, 2689, 6022, 5893, 3909, 11, 550, 300, 307, 257, 1614, 25494, 538, 472, 5386, 8141, 13, 50880], "temperature": 0.0, "avg_logprob": -0.2112244897418552, "compression_ratio": 1.4705882352941178, "no_speech_prob": 1.7704255128592195e-07}, {"id": 1494, "seek": 618648, "start": 6197.36, "end": 6198.08, "text": " Okay.", "tokens": [50908, 1033, 13, 50944], "temperature": 0.0, "avg_logprob": -0.2112244897418552, "compression_ratio": 1.4705882352941178, "no_speech_prob": 1.7704255128592195e-07}, {"id": 1495, "seek": 618648, "start": 6198.08, "end": 6199.12, "text": " So there's our matrix.", "tokens": [50944, 407, 456, 311, 527, 8141, 13, 50996], "temperature": 0.0, "avg_logprob": -0.2112244897418552, "compression_ratio": 1.4705882352941178, "no_speech_prob": 1.7704255128592195e-07}, {"id": 1496, "seek": 618648, "start": 6201.5199999999995, "end": 6210.4, "text": " And so if we then take that 784 by one and expand as M2, it's going to be the same shape", "tokens": [51116, 400, 370, 498, 321, 550, 747, 300, 1614, 25494, 538, 472, 293, 5268, 382, 376, 17, 11, 309, 311, 516, 281, 312, 264, 912, 3909, 51560], "temperature": 0.0, "avg_logprob": -0.2112244897418552, "compression_ratio": 1.4705882352941178, "no_speech_prob": 1.7704255128592195e-07}, {"id": 1497, "seek": 618648, "start": 6210.4, "end": 6211.28, "text": " as our weight matrix.", "tokens": [51560, 382, 527, 3364, 8141, 13, 51604], "temperature": 0.0, "avg_logprob": -0.2112244897418552, "compression_ratio": 1.4705882352941178, "no_speech_prob": 1.7704255128592195e-07}, {"id": 1498, "seek": 621128, "start": 6211.679999999999, "end": 6222.16, "text": " So it's copied our image data for that digit across all of the 10 vectors representing", "tokens": [50384, 407, 309, 311, 25365, 527, 3256, 1412, 337, 300, 14293, 2108, 439, 295, 264, 1266, 18875, 13460, 50908], "temperature": 0.0, "avg_logprob": -0.33338964990822667, "compression_ratio": 1.5346534653465347, "no_speech_prob": 3.5008547456527594e-06}, {"id": 1499, "seek": 621128, "start": 6222.16, "end": 6226.639999999999, "text": " the 10 kind of linear projections we're doing for our linear model.", "tokens": [50908, 264, 1266, 733, 295, 8213, 32371, 321, 434, 884, 337, 527, 8213, 2316, 13, 51132], "temperature": 0.0, "avg_logprob": -0.33338964990822667, "compression_ratio": 1.5346534653465347, "no_speech_prob": 3.5008547456527594e-06}, {"id": 1500, "seek": 621128, "start": 6228.639999999999, "end": 6234.96, "text": " And so that means that we can take the digit colon common none, so 784 by one and multiply", "tokens": [51232, 400, 370, 300, 1355, 300, 321, 393, 747, 264, 14293, 8255, 2689, 6022, 11, 370, 1614, 25494, 538, 472, 293, 12972, 51548], "temperature": 0.0, "avg_logprob": -0.33338964990822667, "compression_ratio": 1.5346534653465347, "no_speech_prob": 3.5008547456527594e-06}, {"id": 1501, "seek": 621128, "start": 6234.96, "end": 6235.92, "text": " it by the weights.", "tokens": [51548, 309, 538, 264, 17443, 13, 51596], "temperature": 0.0, "avg_logprob": -0.33338964990822667, "compression_ratio": 1.5346534653465347, "no_speech_prob": 3.5008547456527594e-06}, {"id": 1502, "seek": 621128, "start": 6237.12, "end": 6239.599999999999, "text": " And so that's going to get us back 784 by 10.", "tokens": [51656, 400, 370, 300, 311, 516, 281, 483, 505, 646, 1614, 25494, 538, 1266, 13, 51780], "temperature": 0.0, "avg_logprob": -0.33338964990822667, "compression_ratio": 1.5346534653465347, "no_speech_prob": 3.5008547456527594e-06}, {"id": 1503, "seek": 623960, "start": 6239.6, "end": 6247.280000000001, "text": " And so what it's doing, remember, is it's basically looping through each of these 10", "tokens": [50364, 400, 370, 437, 309, 311, 884, 11, 1604, 11, 307, 309, 311, 1936, 6367, 278, 807, 1184, 295, 613, 1266, 50748], "temperature": 0.0, "avg_logprob": -0.35688025452369865, "compression_ratio": 1.536231884057971, "no_speech_prob": 2.3923503249534406e-05}, {"id": 1504, "seek": 623960, "start": 6247.280000000001, "end": 6249.360000000001, "text": " 784 long vectors.", "tokens": [50748, 1614, 25494, 938, 18875, 13, 50852], "temperature": 0.0, "avg_logprob": -0.35688025452369865, "compression_ratio": 1.536231884057971, "no_speech_prob": 2.3923503249534406e-05}, {"id": 1505, "seek": 623960, "start": 6250.0, "end": 6254.320000000001, "text": " And for each one of them, it's multiplying it by this digit.", "tokens": [50884, 400, 337, 1184, 472, 295, 552, 11, 309, 311, 30955, 309, 538, 341, 14293, 13, 51100], "temperature": 0.0, "avg_logprob": -0.35688025452369865, "compression_ratio": 1.536231884057971, "no_speech_prob": 2.3923503249534406e-05}, {"id": 1506, "seek": 623960, "start": 6255.68, "end": 6259.84, "text": " So that's exactly what we want to do in our matrix multiplication.", "tokens": [51168, 407, 300, 311, 2293, 437, 321, 528, 281, 360, 294, 527, 8141, 27290, 13, 51376], "temperature": 0.0, "avg_logprob": -0.35688025452369865, "compression_ratio": 1.536231884057971, "no_speech_prob": 2.3923503249534406e-05}, {"id": 1507, "seek": 623960, "start": 6261.04, "end": 6267.360000000001, "text": " So originally we had, well not originally, most recently, I should say, we had this dot", "tokens": [51436, 407, 7993, 321, 632, 11, 731, 406, 7993, 11, 881, 3938, 11, 286, 820, 584, 11, 321, 632, 341, 5893, 51752], "temperature": 0.0, "avg_logprob": -0.35688025452369865, "compression_ratio": 1.536231884057971, "no_speech_prob": 2.3923503249534406e-05}, {"id": 1508, "seek": 626736, "start": 6267.44, "end": 6277.599999999999, "text": " product where we were actually looping over J, which was the columns of B.", "tokens": [50368, 1674, 689, 321, 645, 767, 6367, 278, 670, 508, 11, 597, 390, 264, 13766, 295, 363, 13, 50876], "temperature": 0.0, "avg_logprob": -0.2643400192260742, "compression_ratio": 1.3088235294117647, "no_speech_prob": 2.7535683329915628e-05}, {"id": 1509, "seek": 626736, "start": 6278.5599999999995, "end": 6283.2, "text": " So we don't have to do that anymore because we can do it all at once by doing exactly", "tokens": [50924, 407, 321, 500, 380, 362, 281, 360, 300, 3602, 570, 321, 393, 360, 309, 439, 412, 1564, 538, 884, 2293, 51156], "temperature": 0.0, "avg_logprob": -0.2643400192260742, "compression_ratio": 1.3088235294117647, "no_speech_prob": 2.7535683329915628e-05}, {"id": 1510, "seek": 626736, "start": 6283.2, "end": 6284.0, "text": " what we just did.", "tokens": [51156, 437, 321, 445, 630, 13, 51196], "temperature": 0.0, "avg_logprob": -0.2643400192260742, "compression_ratio": 1.3088235294117647, "no_speech_prob": 2.7535683329915628e-05}, {"id": 1511, "seek": 628400, "start": 6284.64, "end": 6296.48, "text": " So we can take the ith row and all the columns and add a axis to the end.", "tokens": [50396, 407, 321, 393, 747, 264, 741, 392, 5386, 293, 439, 264, 13766, 293, 909, 257, 10298, 281, 264, 917, 13, 50988], "temperature": 0.0, "avg_logprob": -0.2502080983129041, "compression_ratio": 1.4090909090909092, "no_speech_prob": 0.0015978419687598944}, {"id": 1512, "seek": 628400, "start": 6297.68, "end": 6302.08, "text": " And then just like we did here, multiply it by B.", "tokens": [51048, 400, 550, 445, 411, 321, 630, 510, 11, 12972, 309, 538, 363, 13, 51268], "temperature": 0.0, "avg_logprob": -0.2502080983129041, "compression_ratio": 1.4090909090909092, "no_speech_prob": 0.0015978419687598944}, {"id": 1513, "seek": 628400, "start": 6304.64, "end": 6305.44, "text": " And then dot sum.", "tokens": [51396, 400, 550, 5893, 2408, 13, 51436], "temperature": 0.0, "avg_logprob": -0.2502080983129041, "compression_ratio": 1.4090909090909092, "no_speech_prob": 0.0015978419687598944}, {"id": 1514, "seek": 628400, "start": 6307.68, "end": 6310.08, "text": " And so that is again exactly the same thing.", "tokens": [51548, 400, 370, 300, 307, 797, 2293, 264, 912, 551, 13, 51668], "temperature": 0.0, "avg_logprob": -0.2502080983129041, "compression_ratio": 1.4090909090909092, "no_speech_prob": 0.0015978419687598944}, {"id": 1515, "seek": 631008, "start": 6310.08, "end": 6314.8, "text": " That is another matrix multiplication, doing it using broadcasting.", "tokens": [50364, 663, 307, 1071, 8141, 27290, 11, 884, 309, 1228, 30024, 13, 50600], "temperature": 0.0, "avg_logprob": -0.19924889440121857, "compression_ratio": 1.5530973451327434, "no_speech_prob": 4.832557897316292e-05}, {"id": 1516, "seek": 631008, "start": 6314.8, "end": 6319.68, "text": " Now this is like, tricky to get your head around.", "tokens": [50600, 823, 341, 307, 411, 11, 12414, 281, 483, 428, 1378, 926, 13, 50844], "temperature": 0.0, "avg_logprob": -0.19924889440121857, "compression_ratio": 1.5530973451327434, "no_speech_prob": 4.832557897316292e-05}, {"id": 1517, "seek": 631008, "start": 6320.8, "end": 6325.5199999999995, "text": " And so if you haven't done this kind of broadcasting before, it's a really good time to", "tokens": [50900, 400, 370, 498, 291, 2378, 380, 1096, 341, 733, 295, 30024, 949, 11, 309, 311, 257, 534, 665, 565, 281, 51136], "temperature": 0.0, "avg_logprob": -0.19924889440121857, "compression_ratio": 1.5530973451327434, "no_speech_prob": 4.832557897316292e-05}, {"id": 1518, "seek": 631008, "start": 6325.5199999999995, "end": 6332.48, "text": " pause the video and look carefully at each of these four cells before and understand", "tokens": [51136, 10465, 264, 960, 293, 574, 7500, 412, 1184, 295, 613, 1451, 5438, 949, 293, 1223, 51484], "temperature": 0.0, "avg_logprob": -0.19924889440121857, "compression_ratio": 1.5530973451327434, "no_speech_prob": 4.832557897316292e-05}, {"id": 1519, "seek": 631008, "start": 6333.44, "end": 6334.48, "text": " what did I do there?", "tokens": [51532, 437, 630, 286, 360, 456, 30, 51584], "temperature": 0.0, "avg_logprob": -0.19924889440121857, "compression_ratio": 1.5530973451327434, "no_speech_prob": 4.832557897316292e-05}, {"id": 1520, "seek": 631008, "start": 6335.36, "end": 6336.08, "text": " Why did I do it?", "tokens": [51628, 1545, 630, 286, 360, 309, 30, 51664], "temperature": 0.0, "avg_logprob": -0.19924889440121857, "compression_ratio": 1.5530973451327434, "no_speech_prob": 4.832557897316292e-05}, {"id": 1521, "seek": 631008, "start": 6336.08, "end": 6337.6, "text": " What am I showing you?", "tokens": [51664, 708, 669, 286, 4099, 291, 30, 51740], "temperature": 0.0, "avg_logprob": -0.19924889440121857, "compression_ratio": 1.5530973451327434, "no_speech_prob": 4.832557897316292e-05}, {"id": 1522, "seek": 633760, "start": 6337.6, "end": 6345.120000000001, "text": " And then experiment with trying to, and to remember that we started with M1 0, right?", "tokens": [50364, 400, 550, 5120, 365, 1382, 281, 11, 293, 281, 1604, 300, 321, 1409, 365, 376, 16, 1958, 11, 558, 30, 50740], "temperature": 0.0, "avg_logprob": -0.29858888605589506, "compression_ratio": 1.526829268292683, "no_speech_prob": 1.3631313777295873e-05}, {"id": 1523, "seek": 633760, "start": 6345.120000000001, "end": 6347.4400000000005, "text": " So just like we have here, AI.", "tokens": [50740, 407, 445, 411, 321, 362, 510, 11, 7318, 13, 50856], "temperature": 0.0, "avg_logprob": -0.29858888605589506, "compression_ratio": 1.526829268292683, "no_speech_prob": 1.3631313777295873e-05}, {"id": 1524, "seek": 633760, "start": 6348.240000000001, "end": 6354.88, "text": " Okay, so that's why we've got i comma colon comma none, because this digit is actually", "tokens": [50896, 1033, 11, 370, 300, 311, 983, 321, 600, 658, 741, 22117, 8255, 22117, 6022, 11, 570, 341, 14293, 307, 767, 51228], "temperature": 0.0, "avg_logprob": -0.29858888605589506, "compression_ratio": 1.526829268292683, "no_speech_prob": 1.3631313777295873e-05}, {"id": 1525, "seek": 633760, "start": 6354.88, "end": 6355.68, "text": " M1 0.", "tokens": [51228, 376, 16, 1958, 13, 51268], "temperature": 0.0, "avg_logprob": -0.29858888605589506, "compression_ratio": 1.526829268292683, "no_speech_prob": 1.3631313777295873e-05}, {"id": 1526, "seek": 633760, "start": 6355.68, "end": 6358.8, "text": " So this is like M1 0 colon none.", "tokens": [51268, 407, 341, 307, 411, 376, 16, 1958, 8255, 6022, 13, 51424], "temperature": 0.0, "avg_logprob": -0.29858888605589506, "compression_ratio": 1.526829268292683, "no_speech_prob": 1.3631313777295873e-05}, {"id": 1527, "seek": 633760, "start": 6360.160000000001, "end": 6366.400000000001, "text": " So this line is doing exactly the same thing as this here, plus a sum.", "tokens": [51492, 407, 341, 1622, 307, 884, 2293, 264, 912, 551, 382, 341, 510, 11, 1804, 257, 2408, 13, 51804], "temperature": 0.0, "avg_logprob": -0.29858888605589506, "compression_ratio": 1.526829268292683, "no_speech_prob": 1.3631313777295873e-05}, {"id": 1528, "seek": 636760, "start": 6368.08, "end": 6371.200000000001, "text": " So let's check if this matmul is the same as it used to be.", "tokens": [50388, 407, 718, 311, 1520, 498, 341, 3803, 76, 425, 307, 264, 912, 382, 309, 1143, 281, 312, 13, 50544], "temperature": 0.0, "avg_logprob": -0.21292004055447047, "compression_ratio": 1.5984555984555984, "no_speech_prob": 7.254302909132093e-05}, {"id": 1529, "seek": 636760, "start": 6371.200000000001, "end": 6372.160000000001, "text": " Yep, it's still working.", "tokens": [50544, 7010, 11, 309, 311, 920, 1364, 13, 50592], "temperature": 0.0, "avg_logprob": -0.21292004055447047, "compression_ratio": 1.5984555984555984, "no_speech_prob": 7.254302909132093e-05}, {"id": 1530, "seek": 636760, "start": 6372.88, "end": 6374.160000000001, "text": " And the speed of it.", "tokens": [50628, 400, 264, 3073, 295, 309, 13, 50692], "temperature": 0.0, "avg_logprob": -0.21292004055447047, "compression_ratio": 1.5984555984555984, "no_speech_prob": 7.254302909132093e-05}, {"id": 1531, "seek": 636760, "start": 6375.6, "end": 6376.64, "text": " Okay, not bad.", "tokens": [50764, 1033, 11, 406, 1578, 13, 50816], "temperature": 0.0, "avg_logprob": -0.21292004055447047, "compression_ratio": 1.5984555984555984, "no_speech_prob": 7.254302909132093e-05}, {"id": 1532, "seek": 636760, "start": 6376.64, "end": 6379.200000000001, "text": " So 137 microseconds.", "tokens": [50816, 407, 3705, 22, 3123, 37841, 28750, 13, 50944], "temperature": 0.0, "avg_logprob": -0.21292004055447047, "compression_ratio": 1.5984555984555984, "no_speech_prob": 7.254302909132093e-05}, {"id": 1533, "seek": 636760, "start": 6380.160000000001, "end": 6386.8, "text": " So we've now gone from a time from 500 milliseconds to about 0.1 milliseconds.", "tokens": [50992, 407, 321, 600, 586, 2780, 490, 257, 565, 490, 5923, 34184, 281, 466, 1958, 13, 16, 34184, 13, 51324], "temperature": 0.0, "avg_logprob": -0.21292004055447047, "compression_ratio": 1.5984555984555984, "no_speech_prob": 7.254302909132093e-05}, {"id": 1534, "seek": 636760, "start": 6386.8, "end": 6390.88, "text": " Funnily enough on my, oh actually now I think about it, my MacBook Air is an M2, whereas", "tokens": [51324, 11166, 77, 953, 1547, 322, 452, 11, 1954, 767, 586, 286, 519, 466, 309, 11, 452, 31737, 5774, 307, 364, 376, 17, 11, 9735, 51528], "temperature": 0.0, "avg_logprob": -0.21292004055447047, "compression_ratio": 1.5984555984555984, "no_speech_prob": 7.254302909132093e-05}, {"id": 1535, "seek": 636760, "start": 6390.88, "end": 6392.56, "text": " this Mac Mini is an M1.", "tokens": [51528, 341, 5707, 18239, 307, 364, 376, 16, 13, 51612], "temperature": 0.0, "avg_logprob": -0.21292004055447047, "compression_ratio": 1.5984555984555984, "no_speech_prob": 7.254302909132093e-05}, {"id": 1536, "seek": 636760, "start": 6392.56, "end": 6393.6, "text": " So that's a little bit slower.", "tokens": [51612, 407, 300, 311, 257, 707, 857, 14009, 13, 51664], "temperature": 0.0, "avg_logprob": -0.21292004055447047, "compression_ratio": 1.5984555984555984, "no_speech_prob": 7.254302909132093e-05}, {"id": 1537, "seek": 636760, "start": 6394.320000000001, "end": 6397.280000000001, "text": " So my Air was a bit faster than 0.1 milliseconds.", "tokens": [51700, 407, 452, 5774, 390, 257, 857, 4663, 813, 1958, 13, 16, 34184, 13, 51848], "temperature": 0.0, "avg_logprob": -0.21292004055447047, "compression_ratio": 1.5984555984555984, "no_speech_prob": 7.254302909132093e-05}, {"id": 1538, "seek": 639760, "start": 6397.6, "end": 6401.76, "text": " So overall we've got about a 5000 times speed improvement.", "tokens": [50364, 407, 4787, 321, 600, 658, 466, 257, 23777, 1413, 3073, 10444, 13, 50572], "temperature": 0.0, "avg_logprob": -0.2284964606875465, "compression_ratio": 1.5255102040816326, "no_speech_prob": 5.338147275324445e-06}, {"id": 1539, "seek": 639760, "start": 6404.4800000000005, "end": 6406.400000000001, "text": " So that is pretty exciting.", "tokens": [50708, 407, 300, 307, 1238, 4670, 13, 50804], "temperature": 0.0, "avg_logprob": -0.2284964606875465, "compression_ratio": 1.5255102040816326, "no_speech_prob": 5.338147275324445e-06}, {"id": 1540, "seek": 639760, "start": 6406.400000000001, "end": 6409.92, "text": " And since it's so fast now, there's no need to use a mini batch anymore.", "tokens": [50804, 400, 1670, 309, 311, 370, 2370, 586, 11, 456, 311, 572, 643, 281, 764, 257, 8382, 15245, 3602, 13, 50980], "temperature": 0.0, "avg_logprob": -0.2284964606875465, "compression_ratio": 1.5255102040816326, "no_speech_prob": 5.338147275324445e-06}, {"id": 1541, "seek": 639760, "start": 6409.92, "end": 6420.64, "text": " If you remember, we used a mini batch of, where is it, of five images.", "tokens": [50980, 759, 291, 1604, 11, 321, 1143, 257, 8382, 15245, 295, 11, 689, 307, 309, 11, 295, 1732, 5267, 13, 51516], "temperature": 0.0, "avg_logprob": -0.2284964606875465, "compression_ratio": 1.5255102040816326, "no_speech_prob": 5.338147275324445e-06}, {"id": 1542, "seek": 639760, "start": 6421.280000000001, "end": 6424.08, "text": " But now we can actually use the whole data set because it's so fast.", "tokens": [51548, 583, 586, 321, 393, 767, 764, 264, 1379, 1412, 992, 570, 309, 311, 370, 2370, 13, 51688], "temperature": 0.0, "avg_logprob": -0.2284964606875465, "compression_ratio": 1.5255102040816326, "no_speech_prob": 5.338147275324445e-06}, {"id": 1543, "seek": 642408, "start": 6424.08, "end": 6425.68, "text": " So now we can do the whole data set.", "tokens": [50364, 407, 586, 321, 393, 360, 264, 1379, 1412, 992, 13, 50444], "temperature": 0.0, "avg_logprob": -0.1782858605478324, "compression_ratio": 1.55, "no_speech_prob": 6.048896921129199e-06}, {"id": 1544, "seek": 642408, "start": 6428.24, "end": 6428.8, "text": " There it is.", "tokens": [50572, 821, 309, 307, 13, 50600], "temperature": 0.0, "avg_logprob": -0.1782858605478324, "compression_ratio": 1.55, "no_speech_prob": 6.048896921129199e-06}, {"id": 1545, "seek": 642408, "start": 6428.8, "end": 6432.72, "text": " We've now got 50,000 by 10, which is what we want.", "tokens": [50600, 492, 600, 586, 658, 2625, 11, 1360, 538, 1266, 11, 597, 307, 437, 321, 528, 13, 50796], "temperature": 0.0, "avg_logprob": -0.1782858605478324, "compression_ratio": 1.55, "no_speech_prob": 6.048896921129199e-06}, {"id": 1546, "seek": 642408, "start": 6434.4, "end": 6438.88, "text": " And so it's taking us only 656 milliseconds now to do the whole data set.", "tokens": [50880, 400, 370, 309, 311, 1940, 505, 787, 11624, 21, 34184, 586, 281, 360, 264, 1379, 1412, 992, 13, 51104], "temperature": 0.0, "avg_logprob": -0.1782858605478324, "compression_ratio": 1.55, "no_speech_prob": 6.048896921129199e-06}, {"id": 1547, "seek": 642408, "start": 6438.88, "end": 6442.64, "text": " So this is actually getting to a point now where we could start to create and train some", "tokens": [51104, 407, 341, 307, 767, 1242, 281, 257, 935, 586, 689, 321, 727, 722, 281, 1884, 293, 3847, 512, 51292], "temperature": 0.0, "avg_logprob": -0.1782858605478324, "compression_ratio": 1.55, "no_speech_prob": 6.048896921129199e-06}, {"id": 1548, "seek": 642408, "start": 6442.64, "end": 6445.2, "text": " simple models in a reasonable amount of time.", "tokens": [51292, 2199, 5245, 294, 257, 10585, 2372, 295, 565, 13, 51420], "temperature": 0.0, "avg_logprob": -0.1782858605478324, "compression_ratio": 1.55, "no_speech_prob": 6.048896921129199e-06}, {"id": 1549, "seek": 642408, "start": 6445.76, "end": 6446.5599999999995, "text": " So that's good news.", "tokens": [51448, 407, 300, 311, 665, 2583, 13, 51488], "temperature": 0.0, "avg_logprob": -0.1782858605478324, "compression_ratio": 1.55, "no_speech_prob": 6.048896921129199e-06}, {"id": 1550, "seek": 642408, "start": 6447.76, "end": 6448.24, "text": " All right.", "tokens": [51548, 1057, 558, 13, 51572], "temperature": 0.0, "avg_logprob": -0.1782858605478324, "compression_ratio": 1.55, "no_speech_prob": 6.048896921129199e-06}, {"id": 1551, "seek": 644824, "start": 6448.96, "end": 6454.24, "text": " Um, I think that's probably a good time to take a break.", "tokens": [50400, 3301, 11, 286, 519, 300, 311, 1391, 257, 665, 565, 281, 747, 257, 1821, 13, 50664], "temperature": 0.0, "avg_logprob": -0.17931778876336066, "compression_ratio": 1.5616438356164384, "no_speech_prob": 0.0018101404421031475}, {"id": 1552, "seek": 644824, "start": 6454.24, "end": 6458.08, "text": " We don't have too much more of this to go, but I don't want to keep you guys up too late.", "tokens": [50664, 492, 500, 380, 362, 886, 709, 544, 295, 341, 281, 352, 11, 457, 286, 500, 380, 528, 281, 1066, 291, 1074, 493, 886, 3469, 13, 50856], "temperature": 0.0, "avg_logprob": -0.17931778876336066, "compression_ratio": 1.5616438356164384, "no_speech_prob": 0.0018101404421031475}, {"id": 1553, "seek": 644824, "start": 6459.92, "end": 6464.4, "text": " So hopefully you learned something interesting about broadcasting today.", "tokens": [50948, 407, 4696, 291, 3264, 746, 1880, 466, 30024, 965, 13, 51172], "temperature": 0.0, "avg_logprob": -0.17931778876336066, "compression_ratio": 1.5616438356164384, "no_speech_prob": 0.0018101404421031475}, {"id": 1554, "seek": 644824, "start": 6464.4, "end": 6473.76, "text": " I cannot overemphasize how widely useful this is in all deep learning and machine learning", "tokens": [51172, 286, 2644, 38657, 76, 7485, 1125, 577, 13371, 4420, 341, 307, 294, 439, 2452, 2539, 293, 3479, 2539, 51640], "temperature": 0.0, "avg_logprob": -0.17931778876336066, "compression_ratio": 1.5616438356164384, "no_speech_prob": 0.0018101404421031475}, {"id": 1555, "seek": 644824, "start": 6473.76, "end": 6474.08, "text": " code.", "tokens": [51640, 3089, 13, 51656], "temperature": 0.0, "avg_logprob": -0.17931778876336066, "compression_ratio": 1.5616438356164384, "no_speech_prob": 0.0018101404421031475}, {"id": 1556, "seek": 644824, "start": 6474.08, "end": 6475.04, "text": " It comes up all the time.", "tokens": [51656, 467, 1487, 493, 439, 264, 565, 13, 51704], "temperature": 0.0, "avg_logprob": -0.17931778876336066, "compression_ratio": 1.5616438356164384, "no_speech_prob": 0.0018101404421031475}, {"id": 1557, "seek": 647504, "start": 6476.0, "end": 6482.16, "text": " It's basically our number one most critical kind of foundational operation.", "tokens": [50412, 467, 311, 1936, 527, 1230, 472, 881, 4924, 733, 295, 32195, 6916, 13, 50720], "temperature": 0.0, "avg_logprob": -0.23160909784251246, "compression_ratio": 1.4385964912280702, "no_speech_prob": 7.251873466884717e-05}, {"id": 1558, "seek": 647504, "start": 6483.28, "end": 6489.92, "text": " So yeah, take your time practicing it and also good luck with your diffusion homework", "tokens": [50776, 407, 1338, 11, 747, 428, 565, 11350, 309, 293, 611, 665, 3668, 365, 428, 25242, 14578, 51108], "temperature": 0.0, "avg_logprob": -0.23160909784251246, "compression_ratio": 1.4385964912280702, "no_speech_prob": 7.251873466884717e-05}, {"id": 1559, "seek": 647504, "start": 6489.92, "end": 6491.2, "text": " from the first half of the lesson.", "tokens": [51108, 490, 264, 700, 1922, 295, 264, 6898, 13, 51172], "temperature": 0.0, "avg_logprob": -0.23160909784251246, "compression_ratio": 1.4385964912280702, "no_speech_prob": 7.251873466884717e-05}, {"id": 1560, "seek": 647504, "start": 6492.0, "end": 6495.28, "text": " Thanks for joining us and I'll see you next time.", "tokens": [51212, 2561, 337, 5549, 505, 293, 286, 603, 536, 291, 958, 565, 13, 51376], "temperature": 0.0, "avg_logprob": -0.23160909784251246, "compression_ratio": 1.4385964912280702, "no_speech_prob": 7.251873466884717e-05}], "language": "en"}