{"text": " Hi there, I'm Jeremy Howard from fast.ai and I'd like to tell you a bit about why I like Jupyter notebooks and help you maybe find some new ways that might help you really like them as well. I feel like this is kind of a dangerous thing to say, I like notebooks because every time I do to a serious software engineer type, they tell me all the reasons that I should not like Jupyter notebooks. And they kind of act like I must just be ignorant and don't understand the better ways to code. But actually I've built a lot of good stuff in Jupyter notebooks and I've been coding for Gosh about 30 years over that pretty much every day. I've used a lot of different IDEs, a lot of different editors and Jupyter notebooks seriously makes me at least twice as productive and I have a lot more fun. I've built a number of popular software libraries like these ones in Jupyter notebooks. In particular fast.ai, which is perhaps the most popular PyTorch deep learning API other than PyTorch itself, I guess, and is very widely used at many companies, many researchers, many universities and so forth. One of the cool things you'll see in the fast.ai library is that actually the documentation which you see here, it's got all these examples scattered throughout it and most things like links to source code and links to papers and links to other parts of documentation. And actually you can click on any part of that documentation at the top and the opening colab button. And if you do that, then suddenly you'll see that entire documentation appear as an interactive experimental playground you can play with yourself. Because you see all the documentation is written in Jupyter notebooks. Actually not just the documentation, but all of the code itself for the library and all of the tests and they're actually all in the same notebook. So if you start looking at one piece, you can see everything. You can see as you see here the implementation of this combined cosine scheduler. You can see the examples. You can see the tests. You can see the documentation and you can start playing with it straight away to experiment with some different values and see how it works. Look at the inputs and outputs and so forth. I think that's really cool. The way that I do this is by using something called nbdev for notebook development. nbdev is a really amazing project which I'm going to tell you a lot about at the end of this talk, second half of this talk. But basically what nbdev does is it lets you create Python modules directly from your notebooks. You can export changes from your editor back to your notebook if you want to change things in an editor or IDE directly. It automatically creates searchable documentation. It automatically creates PyPy and condor installers. It will run your tests in parallel and the tests are in notebooks. It will handle continuous integration. It will handle version control stuff and so forth. It's really, really nice. I write all kinds of stuff in notebooks and here's an example of a little server I made. I made this little server and it's a GitHub or a Git webhook server. The nice thing is that I haven't really done much stuff directly using Python's built-in HTTP handler classes before. So I started experimenting with them and I did so in a notebook. As I experimented I took down notes myself and I started creating examples and little tests. This now becomes part of the documentation and the source code and the tests of the library I ended up building which is called Fast Webhook. You can see that you can write any kind of code in notebooks and you can end up exporting it into a real library. Now anybody can download Fast Webhook and then they can see not only the final result but the process I took to get there and understand my thinking, understand the APIs I'm using, understanding the parts of the Python standard library I'm using because it's all documented in this library. So a lot of other people are now using NBdev and one of the best comments I've seen is from Hemal Hussain from GitHub who said, tests, docs and code are part of the same context and are co-located. So this is what happens when you write with NBdev. He says there is no other programming environment that exists like this that I'm aware of. You can even make notes to yourself about why something works the way it does very easily while you're writing the code and it isn't an afterthought. This is fundamentally why I have a problem working in anything besides NBdev because not only does it make the code more approachable to others but forcing you to write docs actually forces you to think about the code more. In my personal projects that use NBdev, I often refactor my code to be simpler and better after forcing myself to explain it and I have the exact same experience. It really makes a difference to my workflow and a lot of this is really thanks to the underlying Jupyter notebook system which NBdev sits on top of. Silvay Guttur and I, Silvay is my co-author on Fast.ai, he is also my co-author on the Deep Learning for Coders book which has been incredibly popular including some big names you probably know about who really like it. This whole book was written entirely in Jupyter notebooks and then we exported it directly with a single little script we wrote into ASCII doc, sent it off to O'Reilly and they published it into this beautiful book and a lot of people have commented on how nice this book looks, how good it feels, it's got colour and nice little icons and all the stuff you'd expect, a really nice index and so forth. So we've created a book that we're really proud of and a lot of people really like. And if you want to write a book yourself as well, you can. You can pip or conda install Fastdoc which Silvay and I have made available, this is the exact same thing that we use to make our book and you can run a single command, fastdoc convert all and it will convert all of your notebooks into a publication quality book or at least the ASCII doc source for it which you can then send to a publisher. All you have to do is write the book. Here's another example of something that we created with Jupyter notebooks which is a very popular course and of course people really, really like. Nearly everybody seems to like this course which we're so proud of because we spend a lot of time trying to get it right. And the whole thing is actually, or nearly the whole thing is actually taught in Jupyter notebooks. And the students then take these notebooks and what we do is we clear out all of the pros and all of the outputs and we ask the students to try to go through the notebook and figure out what's going to happen next and why are we doing this. It's a great way to kind of force people to think about like, oh, did I really understand this? Do I really know what's going to happen? And then they can run it and check and if the answer is different to what they expected, then they can experiment. It's a really terrific way to learn and pretty much all of our students have said that once they get into it, they really adore it, they really find it terrific. Overall, the key thing I guess that I like about Jupyter notebooks is that they support literate programming. Literate programming is something that I have been fascinated in ever since I read about it in the early 90s. Developed by Donald Knuth, the famous computer scientist, who describes it as a methodology that combines a programming language with a documentation language. Thereby making programs more robust, more portable, more easily maintained and arguably, certainly I find, more fun to write. The main idea is to treat a program as a piece of literature addressed to human beings rather than to a computer. This is certainly the way that we now write code with notebooks and NVDev. I think we actually go beyond literate programming to what I call exploratory programming. We're using our notebook as a kind of a journal, like a scientist's journal. And then when we're done, we'll go back and we'll try to clean it up as best as we can and we'll make that part of what we publish. So for example, here's the actual source code from NVDev itself. And at the very start, Sylvia and I didn't know much about what is a Jupyter notebook really behind the scenes. And as we started exploring and realizing it's just JSON and printing it out, that became part of our documentation and source code. And you can see we start to create and export functions as we go along and that becomes part of the library. So then when somebody else comes along and wants to contribute to NVDev or to any project written with NVDev, they don't really need a huge amount of hand holding and helping them get involved because they can see not just the final result, but the process to get there and the thinking and the choices that were made along the way because they're all part of the notebook. And they can even see the tests and see how the tests are related and it's all there in one place. So overall, notebooks give us a live coding environment. It's live in the sense that you're working directly programming against those live objects. The actual system that you're building them in has the state, has the actual current state of all of the variables and all of the systems in memory and you can directly interact with it. This idea goes back a really long way. One of the most famous examples of a live coding environment is Smalltalk, this one here from Smalltalk80. And as you can see here, as the code is running, things are actually happening on the screen. And anybody involved in Smalltalk in those early days will tell you that this was a critical part of why this was such a productive system and why it was such a loved system. And a lot of people say there's never really been anything like Smalltalk again. We're kind of almost rediscovering things from decades ago. There are other interesting examples of live coding. Here's a great one from somebody called Sam Aron who actually does live coding as performance. Here is him writing music with code in real time. So I think that's pretty cool. Here's something which is even cooler. This is Brett Victor, a brilliant designer and brilliant thinker, showing a real live coding environment he created which allows him to create games in a whole new way. I mean, not just games, you could use this for so many things. But here's an amazing example using it to build a computer game. So I bounce off my turtle, pause the game, and now hit this button here which shows my guy's trail. So now I can see where he's been. And when I rewind, this trail in front of him is where he's going to be. This is his future. And when I change the code, I change his future. So I can find exactly the value I need. So when I hit play, he slips right in there. So I've got to say I've never managed to build code in a way where the people watching it went, whoa, and then started clapping. It's certainly something to aspire to. And you can see how much people really love this idea of actually interacting with a live coding environment. Brett Victor has been very inspirational. One of the things he inspired was Chris Latner. He's the guy who created LLVM, he created Swift, and he built the amazing Playground system which, as you can see here, as the code is running, you can actually see what it's doing and you can even plot it and so forth. Another great example of a popular and important and powerful live coding system. So I was so proud when actually Chris himself said he thinks that NB Dev is a huge step forward for programming environments. And so for that to come through Chris was a huge validation for us that somebody we really admire thinks that we're absolutely going in the right direction. Most people, however, are not using this kind of live coding environment despite the decades of work that's kind of got into these kinds of systems and the productivity that we've found comes from it. Here's how a lot of people code, and I'm going to give an example here, you'll see why in a moment, of a very successful coder named Joel Groos. This is Joel here, and he's good enough to actually do coding which he puts out on the internet for people to watch, and I watched it to see exactly what this looks like. And what he does, like a lot of people do, is he has what's called a line-oriented REPL down here. This is something where you can type in a line and it returns a line, and then the rest of it is a kind of a standard editor IDE. This is VS Code, which is one of the best, or maybe the best editor around. So watch what happens as he codes. You can see here that he has to kind of go back up to find something he's done before, and it's the wrong thing, and then he has to edit it, and then he's got an assertion error, and now he has to go somewhere else, and then comes down here again. Now he's getting this kind of weird situation of some state that's come from the code, and some state that's come from the things he's typing, and now he's going back up here and trying to edit this, and now bringing it back down here again, and he's took it in the error. You know, as I watch this, I find this painful. I don't want to write code like this. I kind of feel like this picture is just saying, oh, this is too much. But I feel like a lot of real programmers tell me this is how you should code, and it kind of feels like they're saying, hey, we should go back and use line-oriented REPLs for everything, like editing. We're used to edit with Ed, the Unix editor, which was a line-oriented editor, and as you can see, the basic approach is exactly the same as what Joel was using for manipulating Python. Now these line-oriented REPLs, you know, it's not a great way to edit text. Very few of us use Ed nowadays, and I would argue that it's not a good way to work with any kind of code objects. It is linear. There's a reason that we have line-oriented REPLs, and that's because we're used to code like this. If we enter maximum slash y, we get the maximum element in the vector y. So you can see here, he is typing one line at a time, and it's printing one line at a time. By the way, this is APL, which is decades ahead of his time. It's still one of the best, brilliant programming languages in the world. But I would argue that we should be moving beyond the type align and have a line printed approach that was developed for this kind of coding. So these kind of editing environments, like VS Code, VS Code is a brilliant piece of software, but I refer to it as a dead coding environment because you're not interacting with live code, and that leads to errors. You get this kind of gap between the system you're working on and the final result you're creating. So Joel actually wrote a fantastic book, which despite being fantastic, it has some errors in it, and the kind of errors are very interesting. This is from his errata page. They're errors that say the code, you can't actually run it. So this line of code doesn't work, and this line of code doesn't work. One of the really interesting ones was not only this line of code doesn't work, but hey, you've got a code repo where it does work. And so there's this kind of like gap between the actual code you're doing and the book that you're writing, and then they become out of sync, and your readers end up confused because the code doesn't run. All the code in our book runs, not because we're particularly brilliant, but just because we ran it all in a notebook. And so all the outputs you see are the actual outputs that came out of the notebook. Now, of course, one of the libraries might change, or there might be a breaking change to Python or something. There could be something which could cause it at some point in the future to break. But at the point that we wrote it, and as far as I know right now still, the code is correct and it works because, as I said, it's the code that we actually ran. It's not a dead coding environment. It was a live coding environment we used to create the book, and the book directly comes from and is that code. So why am I talking about Joel's book and Joel's coding approach? That's because actually he, a couple of years ago, did a brilliant presentation called I Don't Like Notebooks. And in this presentation, he explained why he thought we shouldn't be using notebooks. And actually notebooks are not the right approach to building effective software or doing effective teaching. And the reason I feel like I need to talk about it today is because he is such a brilliant communicator and such a funny guy that this presentation has been incredibly influential. And pretty much any time I say I like notebooks, somebody will say that's not a good idea. Haven't you seen that presentation where that guy explained why they're terrible? So, I really feel like in order to tell you why I like notebooks, I also have to tell you why Joel is wrong. Which he is. I really feel like he's wrong. I've got a lot of good stuff in notebooks and as you'll see, I think the points he made are based on misunderstandings or at least are sometimes now out of date. Because his slides are brilliant, I'm going to use a lot of them and also so you can see exactly what I'm responding to. Whenever I use his slides, I'm going to show this little icon in the bottom right hand corner. You'll see it. The next 12 slides are actually all from his presentation. I haven't edited them because I want to make sure you see exactly what he showed. And one of the things he did say in his presentation is I am not a notebook expert. Which is great. It's nice to be self-deprecating and to kind of have that caveat. But he still expressed very strong opinions and people still, as I said, really think he must be right. They tell me that I am making a mistake to think that I like notebooks. So I was actually worried when he first told me that he's planning to write the talk that he did. Because I know he's a brilliant communicator and I know he's really funny and I thought uh oh, a lot of people are going to listen to this and say, oh, I guess we shouldn't use notebooks because Joel has made a compelling case that we shouldn't. And this slide is actually from his presentation. He actually said in his presentation, hey, look at this, look at what Jeremy said. I guess he thought it was kind of funny that I told him don't write this presentation and he wrote the presentation. And so now I feel like I have to come back and say, okay, let's set the record straight here. So here's what he said. He said he had a lot of strong opinions. I don't agree with any of them, but here they are. He said notebooks discourage good habits. He said notebooks encourage bad habits. He said notebooks encourage bad processes. He said that notebooks hinder reproducible and extensible science. He said that notebooks are a recipe for poorly factored code. He said that notebooks make it easy to teach poorly. I don't think it's the notebooks fault that that guy's going to get over the head. I don't do that when I teach with notebooks, by the way. He said notebooks make it hard for me to teach well. So he didn't just state these, he gave reasons. And here are some of the key reasons, I think the key reasons that he expressed. The first one he expressed was that notebooks have tons and tons of hidden state. That's easy to screw up and difficult to reason about. Which is strange. I don't find this myself. And he made the point that notebooks, or he says are dangerous, I don't know if I agree they are dangerous, but he thinks notebooks are dangerous unless you run each cell exactly once in order. I was like, oh my goodness, how am I going to do that? Wait, Jupiter has a single button you can press to do that. It's actually not that hard. If you really think it's so important to run each cell in order, you have a way to do so. Personally, I think it's actually really, really important to have this ability to go back and fiddle with things, to change things, to see what happens. I like having the ability to go back and run in order, but I also like having the ability to actually, as we discussed, manipulate the live coding environment in real time to experiment and to say what if. That's a critical part of this. But you do need a way to ensure that in the end the whole thing works. And not only does Jupiter have a couple of ways to do that, there's restart and clear output. Sorry, should we restart and clear output? Should we restart and run all? I made a mistake there. And in CEL, there's also a few options such as run cells to here or run all cells. And NBDEV actually has something which runs all of your notebooks, all of your cells in order for you for a whole directory. That's the main thing I use. Another concern he stated was that you can't copy and paste code and outputs from a notebook into Slack, where he also gave the example of pull requests and issues in GitHub. Now, this is an example of trying to do things the same way you've always done them without thinking about what's the actual problem you're trying to solve. Now, the actual problem you're trying to solve is to say, here's what I'm trying to do. Please explain why this doesn't work. Or here, have a look at this example I'm showing, or whatever. And here's how it actually looks. It's actually way better than cutting and pasting into Slack. When we get a pull request or an issue, here's a bug report. Colab Notebook, reproducing the behavior. Now, I click on that, and I get a whole notebook, fully self-contained, where I'm not just seeing this person's claim, oh, I typed this and this happened, but I can actually try it. And that means I can then actually try to fix it right there and then. And this is particularly helpful because all of the Fast AI documentation, all of the Fast AI book, and all of the Fast AI courses are also available as notebooks. So people can use that as a starting point, or I can say, oh, did you try the code in the book? If you have a non-working example, could you modify the notebook to show us how yours doesn't work? And so forth. So rather than saying, how do I copy and paste into Slack or GitHub, the question should be, how do I understand the problem that a user is having or understand the idea that a user is telling me about? And the answer to me is by providing an actual live coding environment, I can see that in. And it's so easy to do with Jupyter. Something else I really like about Jupyter is you can use something like what I really like at ReviewMB to look at pull requests. And pull requests don't just show me the code that's changed, which is fine. They do. It's very nice. But they also show me the outputs that have changed. And the documentation is right next to it. So here's somebody changed a test, right? And rather than thinking, oh, I wonder if those scales are any good, and then having to go back and load in their PR and run it, and then have a second version of the code and run that and compare the two, in ReviewMB, I can see them right next to each other. And I can say, oh yeah, this actually does look like a more clear example to me. And I can see the documentation is right next to it, and I can see exactly what's going on. There's lots of ways of sharing notebooks. Another is to press this button. This is the gistit button. Here's a notebook that I created. And you can copy and paste images directly into a notebook. So here's one I just copied and pasted in. And if I click that button, then it automatically gives me a shareable gist URL. So I can paste that into Slack. That's at least as easy as copying and pasting from IPython. And of course, I get the benefit that I'm copying and pasting not just text, but pictures. And a lot of us are working with things other than just text nowadays. We want to be able to show plots, you know, histograms of things and analytics. We want to be able to show pictures. We want to be able to show videos. We're not just working with text all the time. And so with something like this, you can really show a much more complete example a lot of the time. It's really nice and easy to do. Another concern, as you can see, we've still got our little pictures down here. This is still Joel's code. Sorry, Joel's slides. Another concern he had was that he thinks that notebooks are harder to reproduce. And this one he didn't really explain why he thought that way. And I don't fully understand the thought process here. All of the same ways that you can use for dependencies in regular Python libraries, like requirements.text or environment.yaml or whatever, or setup.py, you can use exactly the same thing for notebooks. But in practice, though, you know, notebooks I really love because when you provide a notebook, you can just provide a cell at the top, which creates the environment you need. So, for example, you can open any chapter of the Fast.ai Practical Declaring for Coders book directly on Colab by clicking on a link without any installation. And the first line, the first cell, installs everything you need. And away you go. So really, to me, I feel like notebooks make it much easier to ensure that you have something that's reproducible. And you can also see what the programmer did step by step to really make sure that what you're seeing is what they were seeing. Look, you can certainly make bad notebooks. You can certainly provide bad reproducibility environments. But I don't think it's anything to do with notebooks themselves. You know, it's, to me, this is an environment that actually makes that easier to do well. So the other thing that Joel talked about quite a lot was this idea of good software engineering. And he made some pretty bold claims that good software engineering can't be done or is extremely hard to do in notebooks. And he used these characters quite a lot, these smurfs. And basically, you know, he's saying, like, you should all follow the rules of good software engineering. But, you know, it's kind of like this idea that you should copy and paste code and outputs into Slack. You know, that's how people might have done things before. But, you know, maybe the rules of software engineering in a dead coding environment or in a line-oriented rebel or whatever are not the same, particularly, you know, compared to a dynamic language in a live coding environment. And also the rules for a data scientist who's doing research and their focus is on speed of iteration and on rapidly eyeballing visualizations to see whether their microscopy images are actually getting easier to see or harder to see. To take an example of a project I've been involved in a lot recently. These are kind of going to be different to the rules, the so-called rules, of somebody who's creating a CRUD app or an e-commerce app to send a payment to a Stripe API. So I think we've got to be careful about the idea of rules and think about domains and domain expertise and environments. So here's another slide from Joel. And his concern was that notebooks are not good for modularity. And he's giving an example here of some of his code, which he's saying is very nicely modular. I mean, sure, but why can't you do the exact same thing in notebooks? And in fact, Fast.ai, the library I told you about that we wrote entirely in notebooks, actually the modularity is so good that we have a peer-reviewed paper about the approach to modularity that we took and about how the kind of decoupled API that we created. I'm sure it's not perfect, but a lot of people have used it and have liked it and people are studying it as an example of modularity. It's definitely not the case that notebooks somehow make it impossible or even difficult to create modular code. I'd say the same thing about testability. I don't know if this is from Joel's tests. I guess it probably is. Again, this is one of his slides. He's showing here examples of tests. Tests are great. But in this kind of regular approach to coding and these dead coding environments, the tests live separately to the code that's being tested. And it's very easy for somebody to look at the code and not even notice the tests, or they'll have to kind of flick back and forward between the two. And it's not easy to connect which test is really working on which part of the code. Whereas in notebooks and also with NBDEV in particular, the tests live right next to the thing they're testing. And they'll include pros explaining what it is they're testing. So here we've created a thing called unbuffered server. I think it was in the cell above the one I took a screenshot of here. And so here I've created a test handler to test it that sends a response and writes OK. And here's something that checks whether, you know, that starts a server and then checks whether it actually receives that OK or not. So it's really nice having the tests in the notebook. And then NBDEV provides a way to run all the tests across lots of notebooks and report on the overall result. And that can be run in continuous integration and NBDEV gives you that actually out of the box. If you use the NBDEV template, you get this kind of continuous integration testing for free. You don't have anything to do. It just works, which I think is super cool. Another of Joel's concerns from his slides is that notebooks somehow encourage a less sophisticated approach to learning. So hit shift enter to execute a cell and go to the next one. Maybe people just do that without thinking. I mean, it's possible people could do that. I would say even that is better than people just reading the text and having nothing to do. But as I described, actually what we do is we have a little script that just removes all of the pros except for headings and all of the outputs. And then we give this to the student and then they can run through each one. And before they run it, we say have a think about what this is going to output and think about why and think about why we're doing it. And then if you guessed wrong, you know, or figured wrong, you can actually experiment because you're in a live coding environment here. So you can actually see, well, where did I go wrong and what actually happens? So I actually think this is a great way of learning. And a lot of our students have told us they think it's a great way of learning. I don't think I've ever heard anybody say that this ability to work interactively in this environment is decreasing their ability to learn. So another thing that Joel said and gave a few examples is that notebooks are way less helpful than my text editor, which in his case is Visora's VS code. So he said some things are easier demonstrated. I'm going to show the opposite of his demonstrations, which is actually that Jupiter is more correct and more helpful than his IDE. So here's an example. Let's get a URL contents of a URL. And if it returns something valid, it's like something truthy, then we'll return a otherwise will return one. So this is obviously going to return something truthy. So this should be a string. And as you can see, it's giving me IDE concation for a string. VS code, same code, gist b, completion four, a number, not for a string, got bit length, case fold, conjugate. OK, so VS code doesn't know because VS code, it's doing the best it can. And it's kind of pretty brilliant, you know, given that limitation. But it doesn't know. Jupiter knows because you ran the code. So it actually knows what you're working with. And it can actually because Python is a dynamic language, it supports this kind of dynamic introspection of what is actually inside b and what can b do. And so that's what Jupiter can use. So Jupiter is just really, really, really helpful because it can be really helpful. VS code does the best it can, but it can never be totally correct. It would literally be impossible without it actually trying to match the same stateful approach as Jupiter because Python is dynamic, because it's not fully typed. And even if you do use types for something like b above, you'd have to use a union type. You still wouldn't actually know what the type is. So then Joel said, OK, here's what you could do to win me over and convert me to a notebook user. He said, give me IDE style autocomplete. Well, as we discussed, IDE style autocomplete is not the be all and end all. It's actually not fully correct. Having said that, Jupiter also provides IDE style autocomplete. If you give it types, then it will figure out what you mean. And if you give it functions like open, that return a file, again, it will figure out what you need. So we have IDE style autocomplete. He said, give me real time type checking and linting. OK, here is part of a fast core library. As you can see, it's like a dozen lines of code. And it actually gives you real time, actually correct type checking. So here you can see I'm calling foo, which is taking an int and a string. And if you pass an int and an int, it's checking, oh, it does in fact fail. And again, it can do this correctly only because it's in Jupiter, only because it's actually running the code. The approaches that most people are taking to this kind of type checking is MyPy. And MyPy is not about 12 lines of code. MyPy is about 100,000 lines of code. And it's complex code involving multiple different languages. And it's never going to be correct. It can't be fully correct because it's impossible for it to know exactly the types of all of your pieces of data because it's not actually running the code. And Python is dynamic. With Python, the only way to know what something actually contains is to run the code. Also, MyPy means that you have to tell Python what every type is. And honestly, every other language is moving towards auto detection of types, of figuring out what types are automatically, particularly early movers like F sharp. But nowadays, even stuff like Java, C sharp, C++, you can have like an auto type and it fixes it out for you. Python is kind of moving in the opposite direction. And if you want to go the MyPy static analysis IDE approach, you're going to have to spend a lot of time doing manual typing. Another thing Joel said he wanted to see to win him over is a better story around dependency management. Sure, why not? As I said, Notebooks can already support all the same approaches that normal Python projects can handle. Nbdev makes it even easier. You can just add a line to your settings.me with a list of requirements. If there is some special one for pip and conda, you can add those. Special ones for development time only, you can add those. And away you go. That will automatically make all of those things be installed for you when you run the Notebooks. So we certainly have that. He also said he's looking for first class support for refactoring code out of Notebooks into modules. And I agree, this is absolutely critical. And this is really the key number one versing that Nbdev does. You start with some code like this. And again, this is some source code of Nbdev. Nbdev, of course, is written in Nbdev. It's a Notebook. And then it automatically creates an actual Python project. So those all exist. Joel did not expect that to happen. He said the reality is you're not going to provide me with all these things. And I'm not going to switch to Notebooks. So so be it. So hopefully I've convinced you that there's no reason for you not to like Notebooks. And that it's not the case that real software developers have to use other tools. But actually, Notebooks really can be really great. Let me explain more about how and why this happens. And to do that, I'm going to focus on, in particular, Nbdev. And I've already mentioned the basic things that Nbdev does for you. Let's look more at how that works and exactly what you need to do. So here is an example of code in a Notebook. And you can see here that I've got an export comment. So Nbdev uses a small number, like two or three different special comments, to tell it what to do. And this export says, make this part of my Python project. This doesn't have an export. So it's not part of the Python project. Now one of the things I like to do, this is another thing that Joel talked about as being a problem for him with Notebooks, is that it's hard to do, is splitting a class into separate cells. And actually, with the Fast.AI libraries using Nbdev and Fast4, it's not at all difficult to do. Here's a class, and I've just got the init in it here. And I can create it. And then later on, I just use this patch decorator to add this method to this class. And so this is actually going to impact the documentation as well. The documentation of process comment will end up down here, and the documentation of class init, Notebook processor init, is going to end up up here. And so it really helps the code reader understand things step by step. Each one has tests and examples, kind of as it happens. And as you read through the documentation, you can see each piece one at a time. So this is a really nice, to me, way to build up more complex classes. All of the pieces of Nbdev all get built out of a single, simple little settings file, settings.ini. And it's really nice because you can provide all of the information just in one place. So rather than having a version number over here, an init.py, and over there, and setup.py, and over here in your documentation, you have it once, and it's used everywhere. Ditto for your description, ditto for your source of your documentation, and ditto for your repo information. It's just there in one place, and then everything will use that for you. You don't have to put it in multiple places and think about how to maintain it and synchronize it. Talking of synchronization, not only can you start with a notebook and turn it into this code, which you can then open in, in this case, I hope in Vim, or you can open it in VS Code or whatever, you can edit it in your editor, like Vim or VS Code, and it will sync it in the opposite direction too, and update your notebook. And so some things are easier to do in editors, like quickly kind of search and replace across multiple files and stuff like that. Or if it's an unfamiliar code base, it's nice to be able to use the tags to kind of jump across between files. You can edit as you go, and then synchronize back to the notebook. So then, how does the synchronization work? Well, there's two ways you can do it. You can either put this as the last cell in each notebook, and that will take the notebook you're working in and all the other notebooks and convert them into modules, or at the command line, you can run nvdev building. And so I have this in every notebook that I use, because it's kind of nice to stay in the notebook environment. This is more something I tend to do as part of my release process. There's a lot of little niceties that nvdev tries hard to make nice for you, to kind of make your code as correct and as close to best practices as possible, at least in our view of best practices. One of the best practices that we think are important is DUNDA ALL. DUNDA ALL is the thing that Python provides for you, where you get to list what are the exported symbols in your module. If you don't provide DUNDA ALL, and nearly nobody that's not an nvdev user provides it, then it exports all the symbols, not just the symbols which, or anything without a leading underscore, not just the ones that you've actually directly typed in as your code, but everything you import also gets exported, and that very quickly can lead to namespace pollution. But with an nvdev module, because we automatically create a DUNDA ALL for you, which includes only the things that you requested be exported, that means that you can see the imports, for example, from FastCore.Transform, which is part of an nvdev library, there's just stuff from FastCore.Transform. Or else if you look at something from alannlp.nn.util, you get copy, JSON, logging, default, etc. This is not stuff created by alannlp.nn.util. And so because this is built using the traditional VS code approach, it really is too much work to manually create DUNDA ALL, so alannlp folks don't do it, just like pretty much every other Python library. Not all of them. TK, for example, which comes with Python, does define DUNDA ALL, which is nice, but I don't know of very many non-nvdev projects. So here's another nice thing with the documentation. In the docs, you can just put your symbols in Bactics. And then when you create the docs, which again, it's automatic, and it can be part of your CI system, in fact that is by default, you can see it actually creates hyperlinks. So nvdev knows how to actually look up each of these symbols and hyperlink to them. Even things like this, which are part of different libraries. So this is a really nice feature which allows you to help out your users so that they can see exactly what you're talking about by jumping to other parts of the docs. And of course, some things shouldn't be hyperlinked, like this is a parameter name, and so those will not end up hyperlinked. So the documentation, which gets built for you, supports all the kinds of features you might imagine. A hierarchical menu to take you to any part of the documentation pages, a table of contents for each page, you can have badges, opening colab, headings, links, all that kind of stuff. So the documentation comes out pretty nice, I think. So here's what happens, you just run nvdev build docs, and it takes a second or so. It's all done in parallel. Or you can have something like a GitHub Action, or whatever continuous integration system you use, and call the FastAI Workflows Build Docs GitHub Action. So then you can open those docs directly as a notebook. And one of them is special, which is the one called index.ipinv. The index.ipinv will automatically be turned into a readme.md for you as well. So no more worrying about trying to keep your files synchronized to make sure that your homepage and your readme are saying the same thing. Now we actually do that for you automatically. We also, of course, make sure that it's not only the notebook, but the homepage on your documentation website. And even your PyPy and Condor descriptions will all end up showing you the same information from your index notebook. So in this way, because we're just saying build stuff in one place, do it once, and then we'll make sure that everything syncs up for you, that makes it trivially easy to create really nice user experiences for your users. So for me, even when I create tiny, simple little projects, I always do them in nvdev. And that way I know that I can, in a minute or two, provide installable libraries and documentation just in case anybody else is interested in using my work. And often I find, even for stuff that I think is pretty niche, there's always a few people who are interested in using it too. Here's an example actually. FastWebhook, which I mentioned before, it's really just written for myself. FastAI, I wanted a webhook that would send out a tweet anytime there was a release. But I did it. I wrote it in like two hours, I guess, and then I just hit make release. And because I made it from nvdev template, it automatically created the Condor package and the PyPy package for me, and everything was all set up, which is really nice. One of the challenges with working with notebooks on version control is you can get some really ugly diffs that won't even load in notebooks. Nvdev will actually ensure that those diffs are turned into what I would call a notebook-level diff, which is to say it always ensures that your notebooks can be opened. If there's a difference only in cell outputs, it just ignores them and just picks one, because you can just rerun it. If there's actually a difference in a cell, two people have changed the same cell, then it will actually show you the diff tags in a notebook. You can open it up in Jupyter and fix it up. All of your tests run in parallel with nvdev test nvs, using as many cores as you have. So this is a great way to ensure that every notebook runs from the top to the bottom and has the actual outputs that you're expecting. Lots of nice little pieces like math equations support, all the LeTeX equations work nicely. You use it in your markdown and it pops up both in your notebooks and in your documentation. We're using Catech, which is a really nice fast library for that. And there are other things that we power as well, not just publishing libraries, but nvdev also powers fast pages, which is an increasingly popular blogging system where you can write Jupyter notebooks and it turns it into a blog. This is really nice for anybody who is often trying to communicate technical content involving equations and or code, visualizations. No more copying and pasting gist into medium or copying and pasting plot outputs into files. When you can do the whole thing in a notebook, there's nothing to think about. It just works, which makes life very easy. And as we discussed earlier, FastDoc takes notebooks and turns them into publication quality books. So I hope that you might give it a go and see why I like Jupyter notebooks. You can just go to nvdev.fast.ai, which is of course a nbdev-powered documentation site. And you can just click a button and it will create your nbdev repo for you and you can get started. Thanks so much for watching and I hope that you try this out and find that you like Jupyter notebooks too. Thanks.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 8.4, "text": " Hi there, I'm Jeremy Howard from fast.ai and I'd like to tell you a bit about why I like Jupyter notebooks and", "tokens": [2421, 456, 11, 286, 478, 17809, 17626, 490, 2370, 13, 1301, 293, 286, 1116, 411, 281, 980, 291, 257, 857, 466, 983, 286, 411, 22125, 88, 391, 43782, 293], "temperature": 0.0, "avg_logprob": -0.2196708106994629, "compression_ratio": 1.6939655172413792, "no_speech_prob": 0.016882048919796944}, {"id": 1, "seek": 0, "start": 9.4, "end": 13.52, "text": " help you maybe find some new ways that might help you really like them as well.", "tokens": [854, 291, 1310, 915, 512, 777, 2098, 300, 1062, 854, 291, 534, 411, 552, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.2196708106994629, "compression_ratio": 1.6939655172413792, "no_speech_prob": 0.016882048919796944}, {"id": 2, "seek": 0, "start": 14.24, "end": 18.96, "text": " I feel like this is kind of a dangerous thing to say, I like notebooks because every time I do", "tokens": [286, 841, 411, 341, 307, 733, 295, 257, 5795, 551, 281, 584, 11, 286, 411, 43782, 570, 633, 565, 286, 360], "temperature": 0.0, "avg_logprob": -0.2196708106994629, "compression_ratio": 1.6939655172413792, "no_speech_prob": 0.016882048919796944}, {"id": 3, "seek": 0, "start": 19.52, "end": 26.0, "text": " to a serious software engineer type, they tell me all the reasons that I should not like Jupyter notebooks.", "tokens": [281, 257, 3156, 4722, 11403, 2010, 11, 436, 980, 385, 439, 264, 4112, 300, 286, 820, 406, 411, 22125, 88, 391, 43782, 13], "temperature": 0.0, "avg_logprob": -0.2196708106994629, "compression_ratio": 1.6939655172413792, "no_speech_prob": 0.016882048919796944}, {"id": 4, "seek": 2600, "start": 26.0, "end": 31.44, "text": " And they kind of act like I must just be ignorant and don't understand the better ways to code.", "tokens": [400, 436, 733, 295, 605, 411, 286, 1633, 445, 312, 29374, 293, 500, 380, 1223, 264, 1101, 2098, 281, 3089, 13], "temperature": 0.0, "avg_logprob": -0.22392421109335764, "compression_ratio": 1.6804511278195489, "no_speech_prob": 5.919693285250105e-05}, {"id": 5, "seek": 2600, "start": 31.92, "end": 37.16, "text": " But actually I've built a lot of good stuff in Jupyter notebooks and I've been coding for", "tokens": [583, 767, 286, 600, 3094, 257, 688, 295, 665, 1507, 294, 22125, 88, 391, 43782, 293, 286, 600, 668, 17720, 337], "temperature": 0.0, "avg_logprob": -0.22392421109335764, "compression_ratio": 1.6804511278195489, "no_speech_prob": 5.919693285250105e-05}, {"id": 6, "seek": 2600, "start": 37.56, "end": 41.44, "text": " Gosh about 30 years over that pretty much every day.", "tokens": [19185, 466, 2217, 924, 670, 300, 1238, 709, 633, 786, 13], "temperature": 0.0, "avg_logprob": -0.22392421109335764, "compression_ratio": 1.6804511278195489, "no_speech_prob": 5.919693285250105e-05}, {"id": 7, "seek": 2600, "start": 41.84, "end": 45.2, "text": " I've used a lot of different IDEs, a lot of different editors and", "tokens": [286, 600, 1143, 257, 688, 295, 819, 7348, 20442, 11, 257, 688, 295, 819, 31446, 293], "temperature": 0.0, "avg_logprob": -0.22392421109335764, "compression_ratio": 1.6804511278195489, "no_speech_prob": 5.919693285250105e-05}, {"id": 8, "seek": 2600, "start": 45.68, "end": 50.96, "text": " Jupyter notebooks seriously makes me at least twice as productive and I have a lot more fun.", "tokens": [22125, 88, 391, 43782, 6638, 1669, 385, 412, 1935, 6091, 382, 13304, 293, 286, 362, 257, 688, 544, 1019, 13], "temperature": 0.0, "avg_logprob": -0.22392421109335764, "compression_ratio": 1.6804511278195489, "no_speech_prob": 5.919693285250105e-05}, {"id": 9, "seek": 2600, "start": 51.879999999999995, "end": 55.2, "text": " I've built a number of popular software libraries", "tokens": [286, 600, 3094, 257, 1230, 295, 3743, 4722, 15148], "temperature": 0.0, "avg_logprob": -0.22392421109335764, "compression_ratio": 1.6804511278195489, "no_speech_prob": 5.919693285250105e-05}, {"id": 10, "seek": 5520, "start": 55.2, "end": 57.2, "text": " like these ones in Jupyter notebooks.", "tokens": [411, 613, 2306, 294, 22125, 88, 391, 43782, 13], "temperature": 0.0, "avg_logprob": -0.35597076844633296, "compression_ratio": 1.5138888888888888, "no_speech_prob": 8.611487282905728e-05}, {"id": 11, "seek": 5520, "start": 58.28, "end": 62.160000000000004, "text": " In particular fast.ai, which is perhaps the most popular", "tokens": [682, 1729, 2370, 13, 1301, 11, 597, 307, 4317, 264, 881, 3743], "temperature": 0.0, "avg_logprob": -0.35597076844633296, "compression_ratio": 1.5138888888888888, "no_speech_prob": 8.611487282905728e-05}, {"id": 12, "seek": 5520, "start": 63.0, "end": 65.0, "text": " PyTorch deep learning API", "tokens": [9953, 51, 284, 339, 2452, 2539, 9362], "temperature": 0.0, "avg_logprob": -0.35597076844633296, "compression_ratio": 1.5138888888888888, "no_speech_prob": 8.611487282905728e-05}, {"id": 13, "seek": 5520, "start": 66.04, "end": 68.04, "text": " other than PyTorch itself, I guess,", "tokens": [661, 813, 9953, 51, 284, 339, 2564, 11, 286, 2041, 11], "temperature": 0.0, "avg_logprob": -0.35597076844633296, "compression_ratio": 1.5138888888888888, "no_speech_prob": 8.611487282905728e-05}, {"id": 14, "seek": 5520, "start": 68.72, "end": 74.16, "text": " and is very widely used at many companies, many researchers, many universities and so forth.", "tokens": [293, 307, 588, 13371, 1143, 412, 867, 3431, 11, 867, 10309, 11, 867, 11779, 293, 370, 5220, 13], "temperature": 0.0, "avg_logprob": -0.35597076844633296, "compression_ratio": 1.5138888888888888, "no_speech_prob": 8.611487282905728e-05}, {"id": 15, "seek": 5520, "start": 75.96000000000001, "end": 81.2, "text": " One of the cool things you'll see in the fast.ai library is that actually the", "tokens": [1485, 295, 264, 1627, 721, 291, 603, 536, 294, 264, 2370, 13, 1301, 6405, 307, 300, 767, 264], "temperature": 0.0, "avg_logprob": -0.35597076844633296, "compression_ratio": 1.5138888888888888, "no_speech_prob": 8.611487282905728e-05}, {"id": 16, "seek": 8120, "start": 81.2, "end": 86.16, "text": " documentation which you see here, it's got all these examples", "tokens": [14333, 597, 291, 536, 510, 11, 309, 311, 658, 439, 613, 5110], "temperature": 0.0, "avg_logprob": -0.3660106253116689, "compression_ratio": 1.8032786885245902, "no_speech_prob": 3.426514376769774e-05}, {"id": 17, "seek": 8120, "start": 86.48, "end": 92.72, "text": " scattered throughout it and most things like links to source code and links to papers and links to other parts of documentation.", "tokens": [21986, 3710, 309, 293, 881, 721, 411, 6123, 281, 4009, 3089, 293, 6123, 281, 10577, 293, 6123, 281, 661, 3166, 295, 14333, 13], "temperature": 0.0, "avg_logprob": -0.3660106253116689, "compression_ratio": 1.8032786885245902, "no_speech_prob": 3.426514376769774e-05}, {"id": 18, "seek": 8120, "start": 93.36, "end": 99.76, "text": " And actually you can click on any part of that documentation at the top and the opening colab button.", "tokens": [400, 767, 291, 393, 2052, 322, 604, 644, 295, 300, 14333, 412, 264, 1192, 293, 264, 5193, 1173, 455, 2960, 13], "temperature": 0.0, "avg_logprob": -0.3660106253116689, "compression_ratio": 1.8032786885245902, "no_speech_prob": 3.426514376769774e-05}, {"id": 19, "seek": 8120, "start": 100.24000000000001, "end": 106.16, "text": " And if you do that, then suddenly you'll see that entire documentation appear as an interactive", "tokens": [400, 498, 291, 360, 300, 11, 550, 5800, 291, 603, 536, 300, 2302, 14333, 4204, 382, 364, 15141], "temperature": 0.0, "avg_logprob": -0.3660106253116689, "compression_ratio": 1.8032786885245902, "no_speech_prob": 3.426514376769774e-05}, {"id": 20, "seek": 8120, "start": 106.72, "end": 108.72, "text": " experimental playground you can play with yourself.", "tokens": [17069, 24646, 291, 393, 862, 365, 1803, 13], "temperature": 0.0, "avg_logprob": -0.3660106253116689, "compression_ratio": 1.8032786885245902, "no_speech_prob": 3.426514376769774e-05}, {"id": 21, "seek": 10872, "start": 108.72, "end": 112.52, "text": " Because you see all the documentation is written in Jupyter notebooks.", "tokens": [1436, 291, 536, 439, 264, 14333, 307, 3720, 294, 22125, 88, 391, 43782, 13], "temperature": 0.0, "avg_logprob": -0.3471300826113448, "compression_ratio": 1.9588014981273407, "no_speech_prob": 3.169066985719837e-05}, {"id": 22, "seek": 10872, "start": 113.08, "end": 120.08, "text": " Actually not just the documentation, but all of the code itself for the library and all of the tests and they're actually all in the same", "tokens": [5135, 406, 445, 264, 14333, 11, 457, 439, 295, 264, 3089, 2564, 337, 264, 6405, 293, 439, 295, 264, 6921, 293, 436, 434, 767, 439, 294, 264, 912], "temperature": 0.0, "avg_logprob": -0.3471300826113448, "compression_ratio": 1.9588014981273407, "no_speech_prob": 3.169066985719837e-05}, {"id": 23, "seek": 10872, "start": 120.08, "end": 125.12, "text": " notebook. So if you start looking at one piece, you can see everything. You can see as you see here the", "tokens": [21060, 13, 407, 498, 291, 722, 1237, 412, 472, 2522, 11, 291, 393, 536, 1203, 13, 509, 393, 536, 382, 291, 536, 510, 264], "temperature": 0.0, "avg_logprob": -0.3471300826113448, "compression_ratio": 1.9588014981273407, "no_speech_prob": 3.169066985719837e-05}, {"id": 24, "seek": 10872, "start": 125.68, "end": 130.36, "text": " implementation of this combined cosine scheduler. You can see the examples.", "tokens": [11420, 295, 341, 9354, 23565, 12000, 260, 13, 509, 393, 536, 264, 5110, 13], "temperature": 0.0, "avg_logprob": -0.3471300826113448, "compression_ratio": 1.9588014981273407, "no_speech_prob": 3.169066985719837e-05}, {"id": 25, "seek": 10872, "start": 130.36, "end": 136.72, "text": " You can see the tests. You can see the documentation and you can start playing with it straight away to experiment with some different", "tokens": [509, 393, 536, 264, 6921, 13, 509, 393, 536, 264, 14333, 293, 291, 393, 722, 2433, 365, 309, 2997, 1314, 281, 5120, 365, 512, 819], "temperature": 0.0, "avg_logprob": -0.3471300826113448, "compression_ratio": 1.9588014981273407, "no_speech_prob": 3.169066985719837e-05}, {"id": 26, "seek": 13672, "start": 136.72, "end": 142.24, "text": " values and see how it works. Look at the inputs and outputs and so forth. I think that's really cool.", "tokens": [4190, 293, 536, 577, 309, 1985, 13, 2053, 412, 264, 15743, 293, 23930, 293, 370, 5220, 13, 286, 519, 300, 311, 534, 1627, 13], "temperature": 0.0, "avg_logprob": -0.23521895157663444, "compression_ratio": 1.6088888888888888, "no_speech_prob": 8.749197877477854e-05}, {"id": 27, "seek": 13672, "start": 144.4, "end": 148.16, "text": " The way that I do this is by using something called nbdev", "tokens": [440, 636, 300, 286, 360, 341, 307, 538, 1228, 746, 1219, 297, 65, 40343], "temperature": 0.0, "avg_logprob": -0.23521895157663444, "compression_ratio": 1.6088888888888888, "no_speech_prob": 8.749197877477854e-05}, {"id": 28, "seek": 13672, "start": 148.96, "end": 155.68, "text": " for notebook development. nbdev is a really amazing project which I'm going to tell you a lot about at the end of this talk,", "tokens": [337, 21060, 3250, 13, 297, 65, 40343, 307, 257, 534, 2243, 1716, 597, 286, 478, 516, 281, 980, 291, 257, 688, 466, 412, 264, 917, 295, 341, 751, 11], "temperature": 0.0, "avg_logprob": -0.23521895157663444, "compression_ratio": 1.6088888888888888, "no_speech_prob": 8.749197877477854e-05}, {"id": 29, "seek": 13672, "start": 155.68, "end": 160.88, "text": " second half of this talk. But basically what nbdev does is it lets you create", "tokens": [1150, 1922, 295, 341, 751, 13, 583, 1936, 437, 297, 65, 40343, 775, 307, 309, 6653, 291, 1884], "temperature": 0.0, "avg_logprob": -0.23521895157663444, "compression_ratio": 1.6088888888888888, "no_speech_prob": 8.749197877477854e-05}, {"id": 30, "seek": 16088, "start": 160.88, "end": 168.0, "text": " Python modules directly from your notebooks. You can export changes from your editor back to your notebook if you want to change things in", "tokens": [15329, 16679, 3838, 490, 428, 43782, 13, 509, 393, 10725, 2962, 490, 428, 9839, 646, 281, 428, 21060, 498, 291, 528, 281, 1319, 721, 294], "temperature": 0.0, "avg_logprob": -0.26124907031501693, "compression_ratio": 1.8373983739837398, "no_speech_prob": 7.719833229202777e-05}, {"id": 31, "seek": 16088, "start": 168.0, "end": 176.0, "text": " an editor or IDE directly. It automatically creates searchable documentation. It automatically creates PyPy and condor installers.", "tokens": [364, 9839, 420, 40930, 3838, 13, 467, 6772, 7829, 3164, 712, 14333, 13, 467, 6772, 7829, 9953, 47, 88, 293, 2224, 284, 3625, 433, 13], "temperature": 0.0, "avg_logprob": -0.26124907031501693, "compression_ratio": 1.8373983739837398, "no_speech_prob": 7.719833229202777e-05}, {"id": 32, "seek": 16088, "start": 176.0, "end": 182.32, "text": " It will run your tests in parallel and the tests are in notebooks. It will handle continuous integration.", "tokens": [467, 486, 1190, 428, 6921, 294, 8952, 293, 264, 6921, 366, 294, 43782, 13, 467, 486, 4813, 10957, 10980, 13], "temperature": 0.0, "avg_logprob": -0.26124907031501693, "compression_ratio": 1.8373983739837398, "no_speech_prob": 7.719833229202777e-05}, {"id": 33, "seek": 16088, "start": 182.32, "end": 187.84, "text": " It will handle version control stuff and so forth. It's really, really nice.", "tokens": [467, 486, 4813, 3037, 1969, 1507, 293, 370, 5220, 13, 467, 311, 534, 11, 534, 1481, 13], "temperature": 0.0, "avg_logprob": -0.26124907031501693, "compression_ratio": 1.8373983739837398, "no_speech_prob": 7.719833229202777e-05}, {"id": 34, "seek": 18784, "start": 187.84, "end": 194.08, "text": " I write all kinds of stuff in notebooks and here's an example of a little server I made.", "tokens": [286, 2464, 439, 3685, 295, 1507, 294, 43782, 293, 510, 311, 364, 1365, 295, 257, 707, 7154, 286, 1027, 13], "temperature": 0.0, "avg_logprob": -0.22290774754115514, "compression_ratio": 1.5027322404371584, "no_speech_prob": 3.0239303669077344e-05}, {"id": 35, "seek": 18784, "start": 194.08, "end": 201.68, "text": " I made this little server and it's a GitHub or a Git webhook server.", "tokens": [286, 1027, 341, 707, 7154, 293, 309, 311, 257, 23331, 420, 257, 16939, 3670, 71, 1212, 7154, 13], "temperature": 0.0, "avg_logprob": -0.22290774754115514, "compression_ratio": 1.5027322404371584, "no_speech_prob": 3.0239303669077344e-05}, {"id": 36, "seek": 18784, "start": 201.68, "end": 210.08, "text": " The nice thing is that I haven't really done much stuff directly using Python's built-in HTTP handler classes before.", "tokens": [440, 1481, 551, 307, 300, 286, 2378, 380, 534, 1096, 709, 1507, 3838, 1228, 15329, 311, 3094, 12, 259, 33283, 41967, 5359, 949, 13], "temperature": 0.0, "avg_logprob": -0.22290774754115514, "compression_ratio": 1.5027322404371584, "no_speech_prob": 3.0239303669077344e-05}, {"id": 37, "seek": 21008, "start": 210.08, "end": 220.56, "text": " So I started experimenting with them and I did so in a notebook. As I experimented I took down notes myself and I started creating examples and little tests.", "tokens": [407, 286, 1409, 29070, 365, 552, 293, 286, 630, 370, 294, 257, 21060, 13, 1018, 286, 5120, 292, 286, 1890, 760, 5570, 2059, 293, 286, 1409, 4084, 5110, 293, 707, 6921, 13], "temperature": 0.0, "avg_logprob": -0.27044660653640973, "compression_ratio": 1.5904255319148937, "no_speech_prob": 2.6273468392901123e-05}, {"id": 38, "seek": 21008, "start": 220.56, "end": 230.56, "text": " This now becomes part of the documentation and the source code and the tests of the library I ended up building which is called Fast Webhook.", "tokens": [639, 586, 3643, 644, 295, 264, 14333, 293, 264, 4009, 3089, 293, 264, 6921, 295, 264, 6405, 286, 4590, 493, 2390, 597, 307, 1219, 15968, 9573, 71, 1212, 13], "temperature": 0.0, "avg_logprob": -0.27044660653640973, "compression_ratio": 1.5904255319148937, "no_speech_prob": 2.6273468392901123e-05}, {"id": 39, "seek": 23056, "start": 230.56, "end": 241.04, "text": " You can see that you can write any kind of code in notebooks and you can end up exporting it into a real library.", "tokens": [509, 393, 536, 300, 291, 393, 2464, 604, 733, 295, 3089, 294, 43782, 293, 291, 393, 917, 493, 44686, 309, 666, 257, 957, 6405, 13], "temperature": 0.0, "avg_logprob": -0.22546581645588298, "compression_ratio": 1.7046413502109705, "no_speech_prob": 2.429835330985952e-05}, {"id": 40, "seek": 23056, "start": 241.04, "end": 250.08, "text": " Now anybody can download Fast Webhook and then they can see not only the final result but the process I took to get there and understand my thinking,", "tokens": [823, 4472, 393, 5484, 15968, 9573, 71, 1212, 293, 550, 436, 393, 536, 406, 787, 264, 2572, 1874, 457, 264, 1399, 286, 1890, 281, 483, 456, 293, 1223, 452, 1953, 11], "temperature": 0.0, "avg_logprob": -0.22546581645588298, "compression_ratio": 1.7046413502109705, "no_speech_prob": 2.429835330985952e-05}, {"id": 41, "seek": 23056, "start": 250.08, "end": 258.08, "text": " understand the APIs I'm using, understanding the parts of the Python standard library I'm using because it's all documented in this library.", "tokens": [1223, 264, 21445, 286, 478, 1228, 11, 3701, 264, 3166, 295, 264, 15329, 3832, 6405, 286, 478, 1228, 570, 309, 311, 439, 23007, 294, 341, 6405, 13], "temperature": 0.0, "avg_logprob": -0.22546581645588298, "compression_ratio": 1.7046413502109705, "no_speech_prob": 2.429835330985952e-05}, {"id": 42, "seek": 25808, "start": 258.08, "end": 271.59999999999997, "text": " So a lot of other people are now using NBdev and one of the best comments I've seen is from Hemal Hussain from GitHub who said,", "tokens": [407, 257, 688, 295, 661, 561, 366, 586, 1228, 426, 33, 40343, 293, 472, 295, 264, 1151, 3053, 286, 600, 1612, 307, 490, 18568, 304, 389, 2023, 491, 490, 23331, 567, 848, 11], "temperature": 0.0, "avg_logprob": -0.2135252634684245, "compression_ratio": 1.5339366515837105, "no_speech_prob": 0.0001464867382310331}, {"id": 43, "seek": 25808, "start": 271.59999999999997, "end": 280.08, "text": " tests, docs and code are part of the same context and are co-located. So this is what happens when you write with NBdev.", "tokens": [6921, 11, 45623, 293, 3089, 366, 644, 295, 264, 912, 4319, 293, 366, 598, 12, 5842, 770, 13, 407, 341, 307, 437, 2314, 562, 291, 2464, 365, 426, 33, 40343, 13], "temperature": 0.0, "avg_logprob": -0.2135252634684245, "compression_ratio": 1.5339366515837105, "no_speech_prob": 0.0001464867382310331}, {"id": 44, "seek": 25808, "start": 280.08, "end": 284.56, "text": " He says there is no other programming environment that exists like this that I'm aware of.", "tokens": [634, 1619, 456, 307, 572, 661, 9410, 2823, 300, 8198, 411, 341, 300, 286, 478, 3650, 295, 13], "temperature": 0.0, "avg_logprob": -0.2135252634684245, "compression_ratio": 1.5339366515837105, "no_speech_prob": 0.0001464867382310331}, {"id": 45, "seek": 28456, "start": 284.56, "end": 293.52, "text": " You can even make notes to yourself about why something works the way it does very easily while you're writing the code and it isn't an afterthought.", "tokens": [509, 393, 754, 652, 5570, 281, 1803, 466, 983, 746, 1985, 264, 636, 309, 775, 588, 3612, 1339, 291, 434, 3579, 264, 3089, 293, 309, 1943, 380, 364, 934, 43135, 13], "temperature": 0.0, "avg_logprob": -0.10598822674119329, "compression_ratio": 1.6217391304347826, "no_speech_prob": 7.838737656129524e-05}, {"id": 46, "seek": 28456, "start": 293.52, "end": 301.52, "text": " This is fundamentally why I have a problem working in anything besides NBdev because not only does it make the code more approachable to others", "tokens": [639, 307, 17879, 983, 286, 362, 257, 1154, 1364, 294, 1340, 11868, 426, 33, 40343, 570, 406, 787, 775, 309, 652, 264, 3089, 544, 3109, 712, 281, 2357], "temperature": 0.0, "avg_logprob": -0.10598822674119329, "compression_ratio": 1.6217391304347826, "no_speech_prob": 7.838737656129524e-05}, {"id": 47, "seek": 28456, "start": 301.52, "end": 306.0, "text": " but forcing you to write docs actually forces you to think about the code more.", "tokens": [457, 19030, 291, 281, 2464, 45623, 767, 5874, 291, 281, 519, 466, 264, 3089, 544, 13], "temperature": 0.0, "avg_logprob": -0.10598822674119329, "compression_ratio": 1.6217391304347826, "no_speech_prob": 7.838737656129524e-05}, {"id": 48, "seek": 30600, "start": 306.0, "end": 316.32, "text": " In my personal projects that use NBdev, I often refactor my code to be simpler and better after forcing myself to explain it and I have the exact same experience.", "tokens": [682, 452, 2973, 4455, 300, 764, 426, 33, 40343, 11, 286, 2049, 1895, 15104, 452, 3089, 281, 312, 18587, 293, 1101, 934, 19030, 2059, 281, 2903, 309, 293, 286, 362, 264, 1900, 912, 1752, 13], "temperature": 0.0, "avg_logprob": -0.10853246740392737, "compression_ratio": 1.4951923076923077, "no_speech_prob": 8.213682303903624e-05}, {"id": 49, "seek": 30600, "start": 316.32, "end": 325.84, "text": " It really makes a difference to my workflow and a lot of this is really thanks to the underlying Jupyter notebook system which NBdev sits on top of.", "tokens": [467, 534, 1669, 257, 2649, 281, 452, 20993, 293, 257, 688, 295, 341, 307, 534, 3231, 281, 264, 14217, 22125, 88, 391, 21060, 1185, 597, 426, 33, 40343, 12696, 322, 1192, 295, 13], "temperature": 0.0, "avg_logprob": -0.10853246740392737, "compression_ratio": 1.4951923076923077, "no_speech_prob": 8.213682303903624e-05}, {"id": 50, "seek": 32584, "start": 325.84, "end": 336.32, "text": " Silvay Guttur and I, Silvay is my co-author on Fast.ai, he is also my co-author on the Deep Learning for Coders book which has been incredibly popular", "tokens": [6943, 85, 320, 460, 13478, 374, 293, 286, 11, 6943, 85, 320, 307, 452, 598, 12, 34224, 322, 15968, 13, 1301, 11, 415, 307, 611, 452, 598, 12, 34224, 322, 264, 14895, 15205, 337, 383, 378, 433, 1446, 597, 575, 668, 6252, 3743], "temperature": 0.0, "avg_logprob": -0.20890875065580328, "compression_ratio": 1.5381355932203389, "no_speech_prob": 9.756967483554035e-05}, {"id": 51, "seek": 32584, "start": 336.32, "end": 341.59999999999997, "text": " including some big names you probably know about who really like it.", "tokens": [3009, 512, 955, 5288, 291, 1391, 458, 466, 567, 534, 411, 309, 13], "temperature": 0.0, "avg_logprob": -0.20890875065580328, "compression_ratio": 1.5381355932203389, "no_speech_prob": 9.756967483554035e-05}, {"id": 52, "seek": 32584, "start": 341.59999999999997, "end": 351.2, "text": " This whole book was written entirely in Jupyter notebooks and then we exported it directly with a single little script we wrote into ASCII doc,", "tokens": [639, 1379, 1446, 390, 3720, 7696, 294, 22125, 88, 391, 43782, 293, 550, 321, 42055, 309, 3838, 365, 257, 2167, 707, 5755, 321, 4114, 666, 7469, 34, 9503, 3211, 11], "temperature": 0.0, "avg_logprob": -0.20890875065580328, "compression_ratio": 1.5381355932203389, "no_speech_prob": 9.756967483554035e-05}, {"id": 53, "seek": 35120, "start": 351.2, "end": 359.84, "text": " sent it off to O'Reilly and they published it into this beautiful book and a lot of people have commented on how nice this book looks,", "tokens": [2279, 309, 766, 281, 422, 6, 8524, 6917, 293, 436, 6572, 309, 666, 341, 2238, 1446, 293, 257, 688, 295, 561, 362, 26940, 322, 577, 1481, 341, 1446, 1542, 11], "temperature": 0.0, "avg_logprob": -0.14099958573264637, "compression_ratio": 1.6798029556650247, "no_speech_prob": 0.00016083392256405205}, {"id": 54, "seek": 35120, "start": 359.84, "end": 368.24, "text": " how good it feels, it's got colour and nice little icons and all the stuff you'd expect, a really nice index and so forth.", "tokens": [577, 665, 309, 3417, 11, 309, 311, 658, 8267, 293, 1481, 707, 23308, 293, 439, 264, 1507, 291, 1116, 2066, 11, 257, 534, 1481, 8186, 293, 370, 5220, 13], "temperature": 0.0, "avg_logprob": -0.14099958573264637, "compression_ratio": 1.6798029556650247, "no_speech_prob": 0.00016083392256405205}, {"id": 55, "seek": 35120, "start": 368.24, "end": 372.64, "text": " So we've created a book that we're really proud of and a lot of people really like.", "tokens": [407, 321, 600, 2942, 257, 1446, 300, 321, 434, 534, 4570, 295, 293, 257, 688, 295, 561, 534, 411, 13], "temperature": 0.0, "avg_logprob": -0.14099958573264637, "compression_ratio": 1.6798029556650247, "no_speech_prob": 0.00016083392256405205}, {"id": 56, "seek": 37264, "start": 372.64, "end": 383.03999999999996, "text": " And if you want to write a book yourself as well, you can. You can pip or conda install Fastdoc which Silvay and I have made available,", "tokens": [400, 498, 291, 528, 281, 2464, 257, 1446, 1803, 382, 731, 11, 291, 393, 13, 509, 393, 8489, 420, 2224, 64, 3625, 15968, 39966, 597, 6943, 85, 320, 293, 286, 362, 1027, 2435, 11], "temperature": 0.0, "avg_logprob": -0.16065360818590438, "compression_ratio": 1.6755725190839694, "no_speech_prob": 9.910414519254118e-05}, {"id": 57, "seek": 37264, "start": 383.03999999999996, "end": 391.2, "text": " this is the exact same thing that we use to make our book and you can run a single command, fastdoc convert all and it will convert all of your notebooks", "tokens": [341, 307, 264, 1900, 912, 551, 300, 321, 764, 281, 652, 527, 1446, 293, 291, 393, 1190, 257, 2167, 5622, 11, 2370, 39966, 7620, 439, 293, 309, 486, 7620, 439, 295, 428, 43782], "temperature": 0.0, "avg_logprob": -0.16065360818590438, "compression_ratio": 1.6755725190839694, "no_speech_prob": 9.910414519254118e-05}, {"id": 58, "seek": 37264, "start": 391.2, "end": 397.44, "text": " into a publication quality book or at least the ASCII doc source for it which you can then send to a publisher.", "tokens": [666, 257, 19953, 3125, 1446, 420, 412, 1935, 264, 7469, 34, 9503, 3211, 4009, 337, 309, 597, 291, 393, 550, 2845, 281, 257, 25088, 13], "temperature": 0.0, "avg_logprob": -0.16065360818590438, "compression_ratio": 1.6755725190839694, "no_speech_prob": 9.910414519254118e-05}, {"id": 59, "seek": 37264, "start": 397.44, "end": 399.84, "text": " All you have to do is write the book.", "tokens": [1057, 291, 362, 281, 360, 307, 2464, 264, 1446, 13], "temperature": 0.0, "avg_logprob": -0.16065360818590438, "compression_ratio": 1.6755725190839694, "no_speech_prob": 9.910414519254118e-05}, {"id": 60, "seek": 39984, "start": 399.84, "end": 411.28, "text": " Here's another example of something that we created with Jupyter notebooks which is a very popular course and of course people really, really like.", "tokens": [1692, 311, 1071, 1365, 295, 746, 300, 321, 2942, 365, 22125, 88, 391, 43782, 597, 307, 257, 588, 3743, 1164, 293, 295, 1164, 561, 534, 11, 534, 411, 13], "temperature": 0.0, "avg_logprob": -0.1479163964589437, "compression_ratio": 1.732394366197183, "no_speech_prob": 0.0002414170594420284}, {"id": 61, "seek": 39984, "start": 411.28, "end": 416.64, "text": " Nearly everybody seems to like this course which we're so proud of because we spend a lot of time trying to get it right.", "tokens": [38000, 2201, 2544, 281, 411, 341, 1164, 597, 321, 434, 370, 4570, 295, 570, 321, 3496, 257, 688, 295, 565, 1382, 281, 483, 309, 558, 13], "temperature": 0.0, "avg_logprob": -0.1479163964589437, "compression_ratio": 1.732394366197183, "no_speech_prob": 0.0002414170594420284}, {"id": 62, "seek": 39984, "start": 416.64, "end": 423.76, "text": " And the whole thing is actually, or nearly the whole thing is actually taught in Jupyter notebooks.", "tokens": [400, 264, 1379, 551, 307, 767, 11, 420, 6217, 264, 1379, 551, 307, 767, 5928, 294, 22125, 88, 391, 43782, 13], "temperature": 0.0, "avg_logprob": -0.1479163964589437, "compression_ratio": 1.732394366197183, "no_speech_prob": 0.0002414170594420284}, {"id": 63, "seek": 42376, "start": 423.76, "end": 431.12, "text": " And the students then take these notebooks and what we do is we clear out all of the pros and all of the outputs", "tokens": [400, 264, 1731, 550, 747, 613, 43782, 293, 437, 321, 360, 307, 321, 1850, 484, 439, 295, 264, 6267, 293, 439, 295, 264, 23930], "temperature": 0.0, "avg_logprob": -0.10701600243063535, "compression_ratio": 1.8566037735849057, "no_speech_prob": 1.221578804688761e-05}, {"id": 64, "seek": 42376, "start": 431.12, "end": 438.56, "text": " and we ask the students to try to go through the notebook and figure out what's going to happen next and why are we doing this.", "tokens": [293, 321, 1029, 264, 1731, 281, 853, 281, 352, 807, 264, 21060, 293, 2573, 484, 437, 311, 516, 281, 1051, 958, 293, 983, 366, 321, 884, 341, 13], "temperature": 0.0, "avg_logprob": -0.10701600243063535, "compression_ratio": 1.8566037735849057, "no_speech_prob": 1.221578804688761e-05}, {"id": 65, "seek": 42376, "start": 438.56, "end": 443.12, "text": " It's a great way to kind of force people to think about like, oh, did I really understand this?", "tokens": [467, 311, 257, 869, 636, 281, 733, 295, 3464, 561, 281, 519, 466, 411, 11, 1954, 11, 630, 286, 534, 1223, 341, 30], "temperature": 0.0, "avg_logprob": -0.10701600243063535, "compression_ratio": 1.8566037735849057, "no_speech_prob": 1.221578804688761e-05}, {"id": 66, "seek": 42376, "start": 443.12, "end": 449.59999999999997, "text": " Do I really know what's going to happen? And then they can run it and check and if the answer is different to what they expected, then they can experiment.", "tokens": [1144, 286, 534, 458, 437, 311, 516, 281, 1051, 30, 400, 550, 436, 393, 1190, 309, 293, 1520, 293, 498, 264, 1867, 307, 819, 281, 437, 436, 5176, 11, 550, 436, 393, 5120, 13], "temperature": 0.0, "avg_logprob": -0.10701600243063535, "compression_ratio": 1.8566037735849057, "no_speech_prob": 1.221578804688761e-05}, {"id": 67, "seek": 44960, "start": 449.6, "end": 458.96000000000004, "text": " It's a really terrific way to learn and pretty much all of our students have said that once they get into it, they really adore it, they really find it terrific.", "tokens": [467, 311, 257, 534, 20899, 636, 281, 1466, 293, 1238, 709, 439, 295, 527, 1731, 362, 848, 300, 1564, 436, 483, 666, 309, 11, 436, 534, 32060, 309, 11, 436, 534, 915, 309, 20899, 13], "temperature": 0.0, "avg_logprob": -0.12351339318779077, "compression_ratio": 1.7085201793721974, "no_speech_prob": 2.585980291769374e-05}, {"id": 68, "seek": 44960, "start": 458.96000000000004, "end": 466.56, "text": " Overall, the key thing I guess that I like about Jupyter notebooks is that they support literate programming.", "tokens": [18420, 11, 264, 2141, 551, 286, 2041, 300, 286, 411, 466, 22125, 88, 391, 43782, 307, 300, 436, 1406, 2733, 473, 9410, 13], "temperature": 0.0, "avg_logprob": -0.12351339318779077, "compression_ratio": 1.7085201793721974, "no_speech_prob": 2.585980291769374e-05}, {"id": 69, "seek": 44960, "start": 466.56, "end": 472.64000000000004, "text": " Literate programming is something that I have been fascinated in ever since I read about it in the early 90s.", "tokens": [16090, 473, 9410, 307, 746, 300, 286, 362, 668, 24597, 294, 1562, 1670, 286, 1401, 466, 309, 294, 264, 2440, 4289, 82, 13], "temperature": 0.0, "avg_logprob": -0.12351339318779077, "compression_ratio": 1.7085201793721974, "no_speech_prob": 2.585980291769374e-05}, {"id": 70, "seek": 47264, "start": 472.64, "end": 482.88, "text": " Developed by Donald Knuth, the famous computer scientist, who describes it as a methodology that combines a programming language with a documentation language.", "tokens": [11442, 292, 538, 8632, 10519, 2910, 11, 264, 4618, 3820, 12662, 11, 567, 15626, 309, 382, 257, 24850, 300, 29520, 257, 9410, 2856, 365, 257, 14333, 2856, 13], "temperature": 0.0, "avg_logprob": -0.11783128692990258, "compression_ratio": 1.6419753086419753, "no_speech_prob": 0.00010377632133895531}, {"id": 71, "seek": 47264, "start": 482.88, "end": 491.84, "text": " Thereby making programs more robust, more portable, more easily maintained and arguably, certainly I find, more fun to write.", "tokens": [821, 2322, 1455, 4268, 544, 13956, 11, 544, 21800, 11, 544, 3612, 17578, 293, 26771, 11, 3297, 286, 915, 11, 544, 1019, 281, 2464, 13], "temperature": 0.0, "avg_logprob": -0.11783128692990258, "compression_ratio": 1.6419753086419753, "no_speech_prob": 0.00010377632133895531}, {"id": 72, "seek": 47264, "start": 491.84, "end": 497.59999999999997, "text": " The main idea is to treat a program as a piece of literature addressed to human beings rather than to a computer.", "tokens": [440, 2135, 1558, 307, 281, 2387, 257, 1461, 382, 257, 2522, 295, 10394, 13847, 281, 1952, 8958, 2831, 813, 281, 257, 3820, 13], "temperature": 0.0, "avg_logprob": -0.11783128692990258, "compression_ratio": 1.6419753086419753, "no_speech_prob": 0.00010377632133895531}, {"id": 73, "seek": 49760, "start": 497.6, "end": 504.0, "text": " This is certainly the way that we now write code with notebooks and NVDev.", "tokens": [639, 307, 3297, 264, 636, 300, 321, 586, 2464, 3089, 365, 43782, 293, 46512, 11089, 85, 13], "temperature": 0.0, "avg_logprob": -0.17860988119374152, "compression_ratio": 1.6380597014925373, "no_speech_prob": 7.483300578314811e-05}, {"id": 74, "seek": 49760, "start": 504.0, "end": 509.44, "text": " I think we actually go beyond literate programming to what I call exploratory programming.", "tokens": [286, 519, 321, 767, 352, 4399, 2733, 473, 9410, 281, 437, 286, 818, 24765, 4745, 9410, 13], "temperature": 0.0, "avg_logprob": -0.17860988119374152, "compression_ratio": 1.6380597014925373, "no_speech_prob": 7.483300578314811e-05}, {"id": 75, "seek": 49760, "start": 509.44, "end": 515.52, "text": " We're using our notebook as a kind of a journal, like a scientist's journal.", "tokens": [492, 434, 1228, 527, 21060, 382, 257, 733, 295, 257, 6708, 11, 411, 257, 12662, 311, 6708, 13], "temperature": 0.0, "avg_logprob": -0.17860988119374152, "compression_ratio": 1.6380597014925373, "no_speech_prob": 7.483300578314811e-05}, {"id": 76, "seek": 49760, "start": 515.52, "end": 521.9200000000001, "text": " And then when we're done, we'll go back and we'll try to clean it up as best as we can and we'll make that part of what we publish.", "tokens": [400, 550, 562, 321, 434, 1096, 11, 321, 603, 352, 646, 293, 321, 603, 853, 281, 2541, 309, 493, 382, 1151, 382, 321, 393, 293, 321, 603, 652, 300, 644, 295, 437, 321, 11374, 13], "temperature": 0.0, "avg_logprob": -0.17860988119374152, "compression_ratio": 1.6380597014925373, "no_speech_prob": 7.483300578314811e-05}, {"id": 77, "seek": 49760, "start": 521.9200000000001, "end": 525.76, "text": " So for example, here's the actual source code from NVDev itself.", "tokens": [407, 337, 1365, 11, 510, 311, 264, 3539, 4009, 3089, 490, 46512, 11089, 85, 2564, 13], "temperature": 0.0, "avg_logprob": -0.17860988119374152, "compression_ratio": 1.6380597014925373, "no_speech_prob": 7.483300578314811e-05}, {"id": 78, "seek": 52576, "start": 525.76, "end": 534.96, "text": " And at the very start, Sylvia and I didn't know much about what is a Jupyter notebook really behind the scenes.", "tokens": [400, 412, 264, 588, 722, 11, 33349, 11617, 293, 286, 994, 380, 458, 709, 466, 437, 307, 257, 22125, 88, 391, 21060, 534, 2261, 264, 8026, 13], "temperature": 0.0, "avg_logprob": -0.11527836890447707, "compression_ratio": 1.59009009009009, "no_speech_prob": 3.822445069090463e-05}, {"id": 79, "seek": 52576, "start": 534.96, "end": 544.3199999999999, "text": " And as we started exploring and realizing it's just JSON and printing it out, that became part of our documentation and source code.", "tokens": [400, 382, 321, 1409, 12736, 293, 16734, 309, 311, 445, 31828, 293, 14699, 309, 484, 11, 300, 3062, 644, 295, 527, 14333, 293, 4009, 3089, 13], "temperature": 0.0, "avg_logprob": -0.11527836890447707, "compression_ratio": 1.59009009009009, "no_speech_prob": 3.822445069090463e-05}, {"id": 80, "seek": 52576, "start": 544.3199999999999, "end": 551.04, "text": " And you can see we start to create and export functions as we go along and that becomes part of the library.", "tokens": [400, 291, 393, 536, 321, 722, 281, 1884, 293, 10725, 6828, 382, 321, 352, 2051, 293, 300, 3643, 644, 295, 264, 6405, 13], "temperature": 0.0, "avg_logprob": -0.11527836890447707, "compression_ratio": 1.59009009009009, "no_speech_prob": 3.822445069090463e-05}, {"id": 81, "seek": 55104, "start": 551.04, "end": 559.4399999999999, "text": " So then when somebody else comes along and wants to contribute to NVDev or to any project written with NVDev,", "tokens": [407, 550, 562, 2618, 1646, 1487, 2051, 293, 2738, 281, 10586, 281, 46512, 11089, 85, 420, 281, 604, 1716, 3720, 365, 46512, 11089, 85, 11], "temperature": 0.0, "avg_logprob": -0.10084817575853924, "compression_ratio": 1.6359649122807018, "no_speech_prob": 2.2470130716101266e-05}, {"id": 82, "seek": 55104, "start": 559.4399999999999, "end": 568.0, "text": " they don't really need a huge amount of hand holding and helping them get involved because they can see not just the final result,", "tokens": [436, 500, 380, 534, 643, 257, 2603, 2372, 295, 1011, 5061, 293, 4315, 552, 483, 3288, 570, 436, 393, 536, 406, 445, 264, 2572, 1874, 11], "temperature": 0.0, "avg_logprob": -0.10084817575853924, "compression_ratio": 1.6359649122807018, "no_speech_prob": 2.2470130716101266e-05}, {"id": 83, "seek": 55104, "start": 568.0, "end": 574.88, "text": " but the process to get there and the thinking and the choices that were made along the way because they're all part of the notebook.", "tokens": [457, 264, 1399, 281, 483, 456, 293, 264, 1953, 293, 264, 7994, 300, 645, 1027, 2051, 264, 636, 570, 436, 434, 439, 644, 295, 264, 21060, 13], "temperature": 0.0, "avg_logprob": -0.10084817575853924, "compression_ratio": 1.6359649122807018, "no_speech_prob": 2.2470130716101266e-05}, {"id": 84, "seek": 57488, "start": 574.88, "end": 582.72, "text": " And they can even see the tests and see how the tests are related and it's all there in one place.", "tokens": [400, 436, 393, 754, 536, 264, 6921, 293, 536, 577, 264, 6921, 366, 4077, 293, 309, 311, 439, 456, 294, 472, 1081, 13], "temperature": 0.0, "avg_logprob": -0.12974997316853384, "compression_ratio": 1.71875, "no_speech_prob": 9.222653716278728e-06}, {"id": 85, "seek": 57488, "start": 582.72, "end": 587.84, "text": " So overall, notebooks give us a live coding environment.", "tokens": [407, 4787, 11, 43782, 976, 505, 257, 1621, 17720, 2823, 13], "temperature": 0.0, "avg_logprob": -0.12974997316853384, "compression_ratio": 1.71875, "no_speech_prob": 9.222653716278728e-06}, {"id": 86, "seek": 57488, "start": 587.84, "end": 593.84, "text": " It's live in the sense that you're working directly programming against those live objects.", "tokens": [467, 311, 1621, 294, 264, 2020, 300, 291, 434, 1364, 3838, 9410, 1970, 729, 1621, 6565, 13], "temperature": 0.0, "avg_logprob": -0.12974997316853384, "compression_ratio": 1.71875, "no_speech_prob": 9.222653716278728e-06}, {"id": 87, "seek": 57488, "start": 593.84, "end": 604.64, "text": " The actual system that you're building them in has the state, has the actual current state of all of the variables and all of the systems", "tokens": [440, 3539, 1185, 300, 291, 434, 2390, 552, 294, 575, 264, 1785, 11, 575, 264, 3539, 2190, 1785, 295, 439, 295, 264, 9102, 293, 439, 295, 264, 3652], "temperature": 0.0, "avg_logprob": -0.12974997316853384, "compression_ratio": 1.71875, "no_speech_prob": 9.222653716278728e-06}, {"id": 88, "seek": 60464, "start": 604.64, "end": 608.0, "text": " in memory and you can directly interact with it.", "tokens": [294, 4675, 293, 291, 393, 3838, 4648, 365, 309, 13], "temperature": 0.0, "avg_logprob": -0.11597235012898403, "compression_ratio": 1.6897810218978102, "no_speech_prob": 7.842799095669761e-05}, {"id": 89, "seek": 60464, "start": 608.0, "end": 610.4, "text": " This idea goes back a really long way.", "tokens": [639, 1558, 1709, 646, 257, 534, 938, 636, 13], "temperature": 0.0, "avg_logprob": -0.11597235012898403, "compression_ratio": 1.6897810218978102, "no_speech_prob": 7.842799095669761e-05}, {"id": 90, "seek": 60464, "start": 610.4, "end": 616.8, "text": " One of the most famous examples of a live coding environment is Smalltalk, this one here from Smalltalk80.", "tokens": [1485, 295, 264, 881, 4618, 5110, 295, 257, 1621, 17720, 2823, 307, 15287, 29302, 11, 341, 472, 510, 490, 15287, 29302, 4702, 13], "temperature": 0.0, "avg_logprob": -0.11597235012898403, "compression_ratio": 1.6897810218978102, "no_speech_prob": 7.842799095669761e-05}, {"id": 91, "seek": 60464, "start": 616.8, "end": 622.56, "text": " And as you can see here, as the code is running, things are actually happening on the screen.", "tokens": [400, 382, 291, 393, 536, 510, 11, 382, 264, 3089, 307, 2614, 11, 721, 366, 767, 2737, 322, 264, 2568, 13], "temperature": 0.0, "avg_logprob": -0.11597235012898403, "compression_ratio": 1.6897810218978102, "no_speech_prob": 7.842799095669761e-05}, {"id": 92, "seek": 60464, "start": 622.56, "end": 630.0, "text": " And anybody involved in Smalltalk in those early days will tell you that this was a critical part of why this was such a productive system", "tokens": [400, 4472, 3288, 294, 15287, 29302, 294, 729, 2440, 1708, 486, 980, 291, 300, 341, 390, 257, 4924, 644, 295, 983, 341, 390, 1270, 257, 13304, 1185], "temperature": 0.0, "avg_logprob": -0.11597235012898403, "compression_ratio": 1.6897810218978102, "no_speech_prob": 7.842799095669761e-05}, {"id": 93, "seek": 60464, "start": 630.0, "end": 631.92, "text": " and why it was such a loved system.", "tokens": [293, 983, 309, 390, 1270, 257, 4333, 1185, 13], "temperature": 0.0, "avg_logprob": -0.11597235012898403, "compression_ratio": 1.6897810218978102, "no_speech_prob": 7.842799095669761e-05}, {"id": 94, "seek": 63192, "start": 631.92, "end": 636.16, "text": " And a lot of people say there's never really been anything like Smalltalk again.", "tokens": [400, 257, 688, 295, 561, 584, 456, 311, 1128, 534, 668, 1340, 411, 15287, 29302, 797, 13], "temperature": 0.0, "avg_logprob": -0.15957062244415282, "compression_ratio": 1.5576036866359446, "no_speech_prob": 2.6681518647819757e-05}, {"id": 95, "seek": 63192, "start": 636.16, "end": 641.92, "text": " We're kind of almost rediscovering things from decades ago.", "tokens": [492, 434, 733, 295, 1920, 2182, 40080, 278, 721, 490, 7878, 2057, 13], "temperature": 0.0, "avg_logprob": -0.15957062244415282, "compression_ratio": 1.5576036866359446, "no_speech_prob": 2.6681518647819757e-05}, {"id": 96, "seek": 63192, "start": 641.92, "end": 645.8399999999999, "text": " There are other interesting examples of live coding.", "tokens": [821, 366, 661, 1880, 5110, 295, 1621, 17720, 13], "temperature": 0.0, "avg_logprob": -0.15957062244415282, "compression_ratio": 1.5576036866359446, "no_speech_prob": 2.6681518647819757e-05}, {"id": 97, "seek": 63192, "start": 645.8399999999999, "end": 651.12, "text": " Here's a great one from somebody called Sam Aron who actually does live coding as performance.", "tokens": [1692, 311, 257, 869, 472, 490, 2618, 1219, 4832, 1587, 266, 567, 767, 775, 1621, 17720, 382, 3389, 13], "temperature": 0.0, "avg_logprob": -0.15957062244415282, "compression_ratio": 1.5576036866359446, "no_speech_prob": 2.6681518647819757e-05}, {"id": 98, "seek": 65112, "start": 651.12, "end": 673.12, "text": " Here is him writing music with code in real time.", "tokens": [1692, 307, 796, 3579, 1318, 365, 3089, 294, 957, 565, 13], "temperature": 0.0, "avg_logprob": -0.1562418120247977, "compression_ratio": 1.1666666666666667, "no_speech_prob": 3.7852471450605663e-06}, {"id": 99, "seek": 65112, "start": 673.12, "end": 674.48, "text": " So I think that's pretty cool.", "tokens": [407, 286, 519, 300, 311, 1238, 1627, 13], "temperature": 0.0, "avg_logprob": -0.1562418120247977, "compression_ratio": 1.1666666666666667, "no_speech_prob": 3.7852471450605663e-06}, {"id": 100, "seek": 65112, "start": 674.48, "end": 676.72, "text": " Here's something which is even cooler.", "tokens": [1692, 311, 746, 597, 307, 754, 15566, 13], "temperature": 0.0, "avg_logprob": -0.1562418120247977, "compression_ratio": 1.1666666666666667, "no_speech_prob": 3.7852471450605663e-06}, {"id": 101, "seek": 67672, "start": 676.72, "end": 686.0, "text": " This is Brett Victor, a brilliant designer and brilliant thinker, showing a real live coding environment he created", "tokens": [639, 307, 29447, 15777, 11, 257, 10248, 11795, 293, 10248, 519, 260, 11, 4099, 257, 957, 1621, 17720, 2823, 415, 2942], "temperature": 0.0, "avg_logprob": -0.18141906430022886, "compression_ratio": 1.584, "no_speech_prob": 0.00010068107803817838}, {"id": 102, "seek": 67672, "start": 686.0, "end": 690.08, "text": " which allows him to create games in a whole new way.", "tokens": [597, 4045, 796, 281, 1884, 2813, 294, 257, 1379, 777, 636, 13], "temperature": 0.0, "avg_logprob": -0.18141906430022886, "compression_ratio": 1.584, "no_speech_prob": 0.00010068107803817838}, {"id": 103, "seek": 67672, "start": 690.08, "end": 692.1600000000001, "text": " I mean, not just games, you could use this for so many things.", "tokens": [286, 914, 11, 406, 445, 2813, 11, 291, 727, 764, 341, 337, 370, 867, 721, 13], "temperature": 0.0, "avg_logprob": -0.18141906430022886, "compression_ratio": 1.584, "no_speech_prob": 0.00010068107803817838}, {"id": 104, "seek": 67672, "start": 692.1600000000001, "end": 696.24, "text": " But here's an amazing example using it to build a computer game.", "tokens": [583, 510, 311, 364, 2243, 1365, 1228, 309, 281, 1322, 257, 3820, 1216, 13], "temperature": 0.0, "avg_logprob": -0.18141906430022886, "compression_ratio": 1.584, "no_speech_prob": 0.00010068107803817838}, {"id": 105, "seek": 67672, "start": 696.24, "end": 704.8000000000001, "text": " So I bounce off my turtle, pause the game, and now hit this button here which shows my guy's trail.", "tokens": [407, 286, 15894, 766, 452, 22866, 11, 10465, 264, 1216, 11, 293, 586, 2045, 341, 2960, 510, 597, 3110, 452, 2146, 311, 9924, 13], "temperature": 0.0, "avg_logprob": -0.18141906430022886, "compression_ratio": 1.584, "no_speech_prob": 0.00010068107803817838}, {"id": 106, "seek": 70480, "start": 704.8, "end": 707.1999999999999, "text": " So now I can see where he's been.", "tokens": [407, 586, 286, 393, 536, 689, 415, 311, 668, 13], "temperature": 0.0, "avg_logprob": -0.1207511948376167, "compression_ratio": 1.5950920245398772, "no_speech_prob": 0.00012718878861051053}, {"id": 107, "seek": 70480, "start": 707.1999999999999, "end": 713.5999999999999, "text": " And when I rewind, this trail in front of him is where he's going to be.", "tokens": [400, 562, 286, 41458, 11, 341, 9924, 294, 1868, 295, 796, 307, 689, 415, 311, 516, 281, 312, 13], "temperature": 0.0, "avg_logprob": -0.1207511948376167, "compression_ratio": 1.5950920245398772, "no_speech_prob": 0.00012718878861051053}, {"id": 108, "seek": 70480, "start": 713.5999999999999, "end": 715.76, "text": " This is his future.", "tokens": [639, 307, 702, 2027, 13], "temperature": 0.0, "avg_logprob": -0.1207511948376167, "compression_ratio": 1.5950920245398772, "no_speech_prob": 0.00012718878861051053}, {"id": 109, "seek": 70480, "start": 715.76, "end": 721.68, "text": " And when I change the code, I change his future.", "tokens": [400, 562, 286, 1319, 264, 3089, 11, 286, 1319, 702, 2027, 13], "temperature": 0.0, "avg_logprob": -0.1207511948376167, "compression_ratio": 1.5950920245398772, "no_speech_prob": 0.00012718878861051053}, {"id": 110, "seek": 70480, "start": 721.68, "end": 724.0, "text": " So I can find exactly the value I need.", "tokens": [407, 286, 393, 915, 2293, 264, 2158, 286, 643, 13], "temperature": 0.0, "avg_logprob": -0.1207511948376167, "compression_ratio": 1.5950920245398772, "no_speech_prob": 0.00012718878861051053}, {"id": 111, "seek": 70480, "start": 724.0, "end": 731.1999999999999, "text": " So when I hit play, he slips right in there.", "tokens": [407, 562, 286, 2045, 862, 11, 415, 44690, 558, 294, 456, 13], "temperature": 0.0, "avg_logprob": -0.1207511948376167, "compression_ratio": 1.5950920245398772, "no_speech_prob": 0.00012718878861051053}, {"id": 112, "seek": 73120, "start": 731.2, "end": 736.4000000000001, "text": " So I've got to say I've never managed to build code in a way where the people watching it went,", "tokens": [407, 286, 600, 658, 281, 584, 286, 600, 1128, 6453, 281, 1322, 3089, 294, 257, 636, 689, 264, 561, 1976, 309, 1437, 11], "temperature": 0.0, "avg_logprob": -0.12324413631273352, "compression_ratio": 1.5993031358885017, "no_speech_prob": 0.00014192469825502485}, {"id": 113, "seek": 73120, "start": 736.4000000000001, "end": 738.96, "text": " whoa, and then started clapping.", "tokens": [13310, 11, 293, 550, 1409, 19978, 13], "temperature": 0.0, "avg_logprob": -0.12324413631273352, "compression_ratio": 1.5993031358885017, "no_speech_prob": 0.00014192469825502485}, {"id": 114, "seek": 73120, "start": 738.96, "end": 740.96, "text": " It's certainly something to aspire to.", "tokens": [467, 311, 3297, 746, 281, 41224, 281, 13], "temperature": 0.0, "avg_logprob": -0.12324413631273352, "compression_ratio": 1.5993031358885017, "no_speech_prob": 0.00014192469825502485}, {"id": 115, "seek": 73120, "start": 740.96, "end": 747.9200000000001, "text": " And you can see how much people really love this idea of actually interacting with a live coding environment.", "tokens": [400, 291, 393, 536, 577, 709, 561, 534, 959, 341, 1558, 295, 767, 18017, 365, 257, 1621, 17720, 2823, 13], "temperature": 0.0, "avg_logprob": -0.12324413631273352, "compression_ratio": 1.5993031358885017, "no_speech_prob": 0.00014192469825502485}, {"id": 116, "seek": 73120, "start": 747.9200000000001, "end": 749.6800000000001, "text": " Brett Victor has been very inspirational.", "tokens": [29447, 15777, 575, 668, 588, 33554, 13], "temperature": 0.0, "avg_logprob": -0.12324413631273352, "compression_ratio": 1.5993031358885017, "no_speech_prob": 0.00014192469825502485}, {"id": 117, "seek": 73120, "start": 749.6800000000001, "end": 753.6, "text": " One of the things he inspired was Chris Latner.", "tokens": [1485, 295, 264, 721, 415, 7547, 390, 6688, 7354, 1193, 13], "temperature": 0.0, "avg_logprob": -0.12324413631273352, "compression_ratio": 1.5993031358885017, "no_speech_prob": 0.00014192469825502485}, {"id": 118, "seek": 73120, "start": 753.6, "end": 760.5600000000001, "text": " He's the guy who created LLVM, he created Swift, and he built the amazing Playground system", "tokens": [634, 311, 264, 2146, 567, 2942, 441, 43, 53, 44, 11, 415, 2942, 25539, 11, 293, 415, 3094, 264, 2243, 5506, 2921, 1185], "temperature": 0.0, "avg_logprob": -0.12324413631273352, "compression_ratio": 1.5993031358885017, "no_speech_prob": 0.00014192469825502485}, {"id": 119, "seek": 76056, "start": 760.56, "end": 765.28, "text": " which, as you can see here, as the code is running, you can actually see what it's doing", "tokens": [597, 11, 382, 291, 393, 536, 510, 11, 382, 264, 3089, 307, 2614, 11, 291, 393, 767, 536, 437, 309, 311, 884], "temperature": 0.0, "avg_logprob": -0.10689484156095065, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.00012334839266259223}, {"id": 120, "seek": 76056, "start": 765.28, "end": 767.68, "text": " and you can even plot it and so forth.", "tokens": [293, 291, 393, 754, 7542, 309, 293, 370, 5220, 13], "temperature": 0.0, "avg_logprob": -0.10689484156095065, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.00012334839266259223}, {"id": 121, "seek": 76056, "start": 767.68, "end": 774.7199999999999, "text": " Another great example of a popular and important and powerful live coding system.", "tokens": [3996, 869, 1365, 295, 257, 3743, 293, 1021, 293, 4005, 1621, 17720, 1185, 13], "temperature": 0.0, "avg_logprob": -0.10689484156095065, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.00012334839266259223}, {"id": 122, "seek": 76056, "start": 774.7199999999999, "end": 781.68, "text": " So I was so proud when actually Chris himself said he thinks that NB Dev is a huge step forward", "tokens": [407, 286, 390, 370, 4570, 562, 767, 6688, 3647, 848, 415, 7309, 300, 426, 33, 9096, 307, 257, 2603, 1823, 2128], "temperature": 0.0, "avg_logprob": -0.10689484156095065, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.00012334839266259223}, {"id": 123, "seek": 76056, "start": 781.68, "end": 782.9599999999999, "text": " for programming environments.", "tokens": [337, 9410, 12388, 13], "temperature": 0.0, "avg_logprob": -0.10689484156095065, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.00012334839266259223}, {"id": 124, "seek": 76056, "start": 782.9599999999999, "end": 789.8399999999999, "text": " And so for that to come through Chris was a huge validation for us that somebody we really admire", "tokens": [400, 370, 337, 300, 281, 808, 807, 6688, 390, 257, 2603, 24071, 337, 505, 300, 2618, 321, 534, 21951], "temperature": 0.0, "avg_logprob": -0.10689484156095065, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.00012334839266259223}, {"id": 125, "seek": 78984, "start": 789.84, "end": 794.24, "text": " thinks that we're absolutely going in the right direction.", "tokens": [7309, 300, 321, 434, 3122, 516, 294, 264, 558, 3513, 13], "temperature": 0.0, "avg_logprob": -0.14945262493473468, "compression_ratio": 1.616, "no_speech_prob": 6.707991269649938e-05}, {"id": 126, "seek": 78984, "start": 794.24, "end": 800.88, "text": " Most people, however, are not using this kind of live coding environment despite the decades of work", "tokens": [4534, 561, 11, 4461, 11, 366, 406, 1228, 341, 733, 295, 1621, 17720, 2823, 7228, 264, 7878, 295, 589], "temperature": 0.0, "avg_logprob": -0.14945262493473468, "compression_ratio": 1.616, "no_speech_prob": 6.707991269649938e-05}, {"id": 127, "seek": 78984, "start": 800.88, "end": 808.96, "text": " that's kind of got into these kinds of systems and the productivity that we've found comes from it.", "tokens": [300, 311, 733, 295, 658, 666, 613, 3685, 295, 3652, 293, 264, 15604, 300, 321, 600, 1352, 1487, 490, 309, 13], "temperature": 0.0, "avg_logprob": -0.14945262493473468, "compression_ratio": 1.616, "no_speech_prob": 6.707991269649938e-05}, {"id": 128, "seek": 78984, "start": 808.96, "end": 813.52, "text": " Here's how a lot of people code, and I'm going to give an example here, you'll see why in a moment,", "tokens": [1692, 311, 577, 257, 688, 295, 561, 3089, 11, 293, 286, 478, 516, 281, 976, 364, 1365, 510, 11, 291, 603, 536, 983, 294, 257, 1623, 11], "temperature": 0.0, "avg_logprob": -0.14945262493473468, "compression_ratio": 1.616, "no_speech_prob": 6.707991269649938e-05}, {"id": 129, "seek": 78984, "start": 813.52, "end": 817.12, "text": " of a very successful coder named Joel Groos.", "tokens": [295, 257, 588, 4406, 17656, 260, 4926, 21522, 12981, 329, 13], "temperature": 0.0, "avg_logprob": -0.14945262493473468, "compression_ratio": 1.616, "no_speech_prob": 6.707991269649938e-05}, {"id": 130, "seek": 81712, "start": 817.12, "end": 823.28, "text": " This is Joel here, and he's good enough to actually do coding which he puts out on the internet", "tokens": [639, 307, 21522, 510, 11, 293, 415, 311, 665, 1547, 281, 767, 360, 17720, 597, 415, 8137, 484, 322, 264, 4705], "temperature": 0.0, "avg_logprob": -0.13807712527487775, "compression_ratio": 1.7171717171717171, "no_speech_prob": 2.4681132344994694e-05}, {"id": 131, "seek": 81712, "start": 823.28, "end": 826.88, "text": " for people to watch, and I watched it to see exactly what this looks like.", "tokens": [337, 561, 281, 1159, 11, 293, 286, 6337, 309, 281, 536, 2293, 437, 341, 1542, 411, 13], "temperature": 0.0, "avg_logprob": -0.13807712527487775, "compression_ratio": 1.7171717171717171, "no_speech_prob": 2.4681132344994694e-05}, {"id": 132, "seek": 81712, "start": 826.88, "end": 831.84, "text": " And what he does, like a lot of people do, is he has what's called a line-oriented REPL down here.", "tokens": [400, 437, 415, 775, 11, 411, 257, 688, 295, 561, 360, 11, 307, 415, 575, 437, 311, 1219, 257, 1622, 12, 27414, 31511, 43, 760, 510, 13], "temperature": 0.0, "avg_logprob": -0.13807712527487775, "compression_ratio": 1.7171717171717171, "no_speech_prob": 2.4681132344994694e-05}, {"id": 133, "seek": 81712, "start": 831.84, "end": 836.5600000000001, "text": " This is something where you can type in a line and it returns a line, and then the rest of it is a kind of", "tokens": [639, 307, 746, 689, 291, 393, 2010, 294, 257, 1622, 293, 309, 11247, 257, 1622, 11, 293, 550, 264, 1472, 295, 309, 307, 257, 733, 295], "temperature": 0.0, "avg_logprob": -0.13807712527487775, "compression_ratio": 1.7171717171717171, "no_speech_prob": 2.4681132344994694e-05}, {"id": 134, "seek": 81712, "start": 836.5600000000001, "end": 838.08, "text": " a standard editor IDE.", "tokens": [257, 3832, 9839, 40930, 13], "temperature": 0.0, "avg_logprob": -0.13807712527487775, "compression_ratio": 1.7171717171717171, "no_speech_prob": 2.4681132344994694e-05}, {"id": 135, "seek": 81712, "start": 838.08, "end": 842.32, "text": " This is VS Code, which is one of the best, or maybe the best editor around.", "tokens": [639, 307, 25091, 15549, 11, 597, 307, 472, 295, 264, 1151, 11, 420, 1310, 264, 1151, 9839, 926, 13], "temperature": 0.0, "avg_logprob": -0.13807712527487775, "compression_ratio": 1.7171717171717171, "no_speech_prob": 2.4681132344994694e-05}, {"id": 136, "seek": 81712, "start": 843.6800000000001, "end": 845.84, "text": " So watch what happens as he codes.", "tokens": [407, 1159, 437, 2314, 382, 415, 14211, 13], "temperature": 0.0, "avg_logprob": -0.13807712527487775, "compression_ratio": 1.7171717171717171, "no_speech_prob": 2.4681132344994694e-05}, {"id": 137, "seek": 84584, "start": 845.84, "end": 851.0400000000001, "text": " You can see here that he has to kind of go back up to find something he's done before,", "tokens": [509, 393, 536, 510, 300, 415, 575, 281, 733, 295, 352, 646, 493, 281, 915, 746, 415, 311, 1096, 949, 11], "temperature": 0.0, "avg_logprob": -0.08907362392970494, "compression_ratio": 2.1487603305785123, "no_speech_prob": 0.0001660014531807974}, {"id": 138, "seek": 84584, "start": 851.0400000000001, "end": 854.8000000000001, "text": " and it's the wrong thing, and then he has to edit it, and then he's got an assertion error,", "tokens": [293, 309, 311, 264, 2085, 551, 11, 293, 550, 415, 575, 281, 8129, 309, 11, 293, 550, 415, 311, 658, 364, 19810, 313, 6713, 11], "temperature": 0.0, "avg_logprob": -0.08907362392970494, "compression_ratio": 2.1487603305785123, "no_speech_prob": 0.0001660014531807974}, {"id": 139, "seek": 84584, "start": 854.8000000000001, "end": 858.08, "text": " and now he has to go somewhere else, and then comes down here again.", "tokens": [293, 586, 415, 575, 281, 352, 4079, 1646, 11, 293, 550, 1487, 760, 510, 797, 13], "temperature": 0.0, "avg_logprob": -0.08907362392970494, "compression_ratio": 2.1487603305785123, "no_speech_prob": 0.0001660014531807974}, {"id": 140, "seek": 84584, "start": 858.08, "end": 863.84, "text": " Now he's getting this kind of weird situation of some state that's come from the code,", "tokens": [823, 415, 311, 1242, 341, 733, 295, 3657, 2590, 295, 512, 1785, 300, 311, 808, 490, 264, 3089, 11], "temperature": 0.0, "avg_logprob": -0.08907362392970494, "compression_ratio": 2.1487603305785123, "no_speech_prob": 0.0001660014531807974}, {"id": 141, "seek": 84584, "start": 863.84, "end": 868.64, "text": " and some state that's come from the things he's typing, and now he's going back up here", "tokens": [293, 512, 1785, 300, 311, 808, 490, 264, 721, 415, 311, 18444, 11, 293, 586, 415, 311, 516, 646, 493, 510], "temperature": 0.0, "avg_logprob": -0.08907362392970494, "compression_ratio": 2.1487603305785123, "no_speech_prob": 0.0001660014531807974}, {"id": 142, "seek": 84584, "start": 868.64, "end": 872.88, "text": " and trying to edit this, and now bringing it back down here again, and he's took it in the error.", "tokens": [293, 1382, 281, 8129, 341, 11, 293, 586, 5062, 309, 646, 760, 510, 797, 11, 293, 415, 311, 1890, 309, 294, 264, 6713, 13], "temperature": 0.0, "avg_logprob": -0.08907362392970494, "compression_ratio": 2.1487603305785123, "no_speech_prob": 0.0001660014531807974}, {"id": 143, "seek": 87288, "start": 872.88, "end": 876.08, "text": " You know, as I watch this, I find this painful.", "tokens": [509, 458, 11, 382, 286, 1159, 341, 11, 286, 915, 341, 11697, 13], "temperature": 0.0, "avg_logprob": -0.13264620882793537, "compression_ratio": 1.6272727272727272, "no_speech_prob": 8.887719013728201e-05}, {"id": 144, "seek": 87288, "start": 876.08, "end": 878.48, "text": " I don't want to write code like this.", "tokens": [286, 500, 380, 528, 281, 2464, 3089, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.13264620882793537, "compression_ratio": 1.6272727272727272, "no_speech_prob": 8.887719013728201e-05}, {"id": 145, "seek": 87288, "start": 878.48, "end": 882.48, "text": " I kind of feel like this picture is just saying, oh, this is too much.", "tokens": [286, 733, 295, 841, 411, 341, 3036, 307, 445, 1566, 11, 1954, 11, 341, 307, 886, 709, 13], "temperature": 0.0, "avg_logprob": -0.13264620882793537, "compression_ratio": 1.6272727272727272, "no_speech_prob": 8.887719013728201e-05}, {"id": 146, "seek": 87288, "start": 884.72, "end": 890.88, "text": " But I feel like a lot of real programmers tell me this is how you should code,", "tokens": [583, 286, 841, 411, 257, 688, 295, 957, 41504, 980, 385, 341, 307, 577, 291, 820, 3089, 11], "temperature": 0.0, "avg_logprob": -0.13264620882793537, "compression_ratio": 1.6272727272727272, "no_speech_prob": 8.887719013728201e-05}, {"id": 147, "seek": 87288, "start": 890.88, "end": 894.32, "text": " and it kind of feels like they're saying, hey, we should go back and use", "tokens": [293, 309, 733, 295, 3417, 411, 436, 434, 1566, 11, 4177, 11, 321, 820, 352, 646, 293, 764], "temperature": 0.0, "avg_logprob": -0.13264620882793537, "compression_ratio": 1.6272727272727272, "no_speech_prob": 8.887719013728201e-05}, {"id": 148, "seek": 87288, "start": 894.96, "end": 897.6, "text": " line-oriented REPLs for everything, like editing.", "tokens": [1622, 12, 27414, 31511, 43, 82, 337, 1203, 11, 411, 10000, 13], "temperature": 0.0, "avg_logprob": -0.13264620882793537, "compression_ratio": 1.6272727272727272, "no_speech_prob": 8.887719013728201e-05}, {"id": 149, "seek": 89760, "start": 897.6, "end": 903.44, "text": " We're used to edit with Ed, the Unix editor, which was a line-oriented editor,", "tokens": [492, 434, 1143, 281, 8129, 365, 3977, 11, 264, 1156, 970, 9839, 11, 597, 390, 257, 1622, 12, 27414, 9839, 11], "temperature": 0.0, "avg_logprob": -0.08904581358938506, "compression_ratio": 1.5863636363636364, "no_speech_prob": 2.8856466087745503e-05}, {"id": 150, "seek": 89760, "start": 903.44, "end": 908.8000000000001, "text": " and as you can see, the basic approach is exactly the same as what Joel was using", "tokens": [293, 382, 291, 393, 536, 11, 264, 3875, 3109, 307, 2293, 264, 912, 382, 437, 21522, 390, 1228], "temperature": 0.0, "avg_logprob": -0.08904581358938506, "compression_ratio": 1.5863636363636364, "no_speech_prob": 2.8856466087745503e-05}, {"id": 151, "seek": 89760, "start": 909.84, "end": 913.12, "text": " for manipulating Python.", "tokens": [337, 40805, 15329, 13], "temperature": 0.0, "avg_logprob": -0.08904581358938506, "compression_ratio": 1.5863636363636364, "no_speech_prob": 2.8856466087745503e-05}, {"id": 152, "seek": 89760, "start": 913.12, "end": 920.0, "text": " Now these line-oriented REPLs, you know, it's not a great way to edit text.", "tokens": [823, 613, 1622, 12, 27414, 31511, 43, 82, 11, 291, 458, 11, 309, 311, 406, 257, 869, 636, 281, 8129, 2487, 13], "temperature": 0.0, "avg_logprob": -0.08904581358938506, "compression_ratio": 1.5863636363636364, "no_speech_prob": 2.8856466087745503e-05}, {"id": 153, "seek": 89760, "start": 920.0, "end": 926.24, "text": " Very few of us use Ed nowadays, and I would argue that it's not a good way to work with", "tokens": [4372, 1326, 295, 505, 764, 3977, 13434, 11, 293, 286, 576, 9695, 300, 309, 311, 406, 257, 665, 636, 281, 589, 365], "temperature": 0.0, "avg_logprob": -0.08904581358938506, "compression_ratio": 1.5863636363636364, "no_speech_prob": 2.8856466087745503e-05}, {"id": 154, "seek": 92624, "start": 926.24, "end": 928.32, "text": " any kind of code objects.", "tokens": [604, 733, 295, 3089, 6565, 13], "temperature": 0.0, "avg_logprob": -0.09115777804156927, "compression_ratio": 1.6319702602230484, "no_speech_prob": 3.4263670386280864e-05}, {"id": 155, "seek": 92624, "start": 928.32, "end": 929.6800000000001, "text": " It is linear.", "tokens": [467, 307, 8213, 13], "temperature": 0.0, "avg_logprob": -0.09115777804156927, "compression_ratio": 1.6319702602230484, "no_speech_prob": 3.4263670386280864e-05}, {"id": 156, "seek": 92624, "start": 929.6800000000001, "end": 935.6800000000001, "text": " There's a reason that we have line-oriented REPLs, and that's because we're used to code", "tokens": [821, 311, 257, 1778, 300, 321, 362, 1622, 12, 27414, 31511, 43, 82, 11, 293, 300, 311, 570, 321, 434, 1143, 281, 3089], "temperature": 0.0, "avg_logprob": -0.09115777804156927, "compression_ratio": 1.6319702602230484, "no_speech_prob": 3.4263670386280864e-05}, {"id": 157, "seek": 92624, "start": 935.6800000000001, "end": 936.5600000000001, "text": " like this.", "tokens": [411, 341, 13], "temperature": 0.0, "avg_logprob": -0.09115777804156927, "compression_ratio": 1.6319702602230484, "no_speech_prob": 3.4263670386280864e-05}, {"id": 158, "seek": 92624, "start": 936.5600000000001, "end": 944.48, "text": " If we enter maximum slash y, we get the maximum element in the vector y.", "tokens": [759, 321, 3242, 6674, 17330, 288, 11, 321, 483, 264, 6674, 4478, 294, 264, 8062, 288, 13], "temperature": 0.0, "avg_logprob": -0.09115777804156927, "compression_ratio": 1.6319702602230484, "no_speech_prob": 3.4263670386280864e-05}, {"id": 159, "seek": 92624, "start": 945.44, "end": 949.6800000000001, "text": " So you can see here, he is typing one line at a time, and it's printing one line at a time.", "tokens": [407, 291, 393, 536, 510, 11, 415, 307, 18444, 472, 1622, 412, 257, 565, 11, 293, 309, 311, 14699, 472, 1622, 412, 257, 565, 13], "temperature": 0.0, "avg_logprob": -0.09115777804156927, "compression_ratio": 1.6319702602230484, "no_speech_prob": 3.4263670386280864e-05}, {"id": 160, "seek": 92624, "start": 949.6800000000001, "end": 952.72, "text": " By the way, this is APL, which is decades ahead of his time.", "tokens": [3146, 264, 636, 11, 341, 307, 5372, 43, 11, 597, 307, 7878, 2286, 295, 702, 565, 13], "temperature": 0.0, "avg_logprob": -0.09115777804156927, "compression_ratio": 1.6319702602230484, "no_speech_prob": 3.4263670386280864e-05}, {"id": 161, "seek": 95272, "start": 952.72, "end": 956.24, "text": " It's still one of the best, brilliant programming languages in the world.", "tokens": [467, 311, 920, 472, 295, 264, 1151, 11, 10248, 9410, 8650, 294, 264, 1002, 13], "temperature": 0.0, "avg_logprob": -0.10063591003417968, "compression_ratio": 1.6371308016877637, "no_speech_prob": 1.8057913621305488e-05}, {"id": 162, "seek": 95272, "start": 956.24, "end": 963.2, "text": " But I would argue that we should be moving beyond the type align and have a line printed", "tokens": [583, 286, 576, 9695, 300, 321, 820, 312, 2684, 4399, 264, 2010, 7975, 293, 362, 257, 1622, 13567], "temperature": 0.0, "avg_logprob": -0.10063591003417968, "compression_ratio": 1.6371308016877637, "no_speech_prob": 1.8057913621305488e-05}, {"id": 163, "seek": 95272, "start": 963.2, "end": 968.32, "text": " approach that was developed for this kind of coding.", "tokens": [3109, 300, 390, 4743, 337, 341, 733, 295, 17720, 13], "temperature": 0.0, "avg_logprob": -0.10063591003417968, "compression_ratio": 1.6371308016877637, "no_speech_prob": 1.8057913621305488e-05}, {"id": 164, "seek": 95272, "start": 969.9200000000001, "end": 976.72, "text": " So these kind of editing environments, like VS Code, VS Code is a brilliant piece of", "tokens": [407, 613, 733, 295, 10000, 12388, 11, 411, 25091, 15549, 11, 25091, 15549, 307, 257, 10248, 2522, 295], "temperature": 0.0, "avg_logprob": -0.10063591003417968, "compression_ratio": 1.6371308016877637, "no_speech_prob": 1.8057913621305488e-05}, {"id": 165, "seek": 95272, "start": 976.72, "end": 981.84, "text": " software, but I refer to it as a dead coding environment because you're not interacting", "tokens": [4722, 11, 457, 286, 2864, 281, 309, 382, 257, 3116, 17720, 2823, 570, 291, 434, 406, 18017], "temperature": 0.0, "avg_logprob": -0.10063591003417968, "compression_ratio": 1.6371308016877637, "no_speech_prob": 1.8057913621305488e-05}, {"id": 166, "seek": 98184, "start": 981.84, "end": 984.4, "text": " with live code, and that leads to errors.", "tokens": [365, 1621, 3089, 11, 293, 300, 6689, 281, 13603, 13], "temperature": 0.0, "avg_logprob": -0.1328626401496656, "compression_ratio": 1.6816143497757847, "no_speech_prob": 4.399825047585182e-05}, {"id": 167, "seek": 98184, "start": 984.4, "end": 992.08, "text": " You get this kind of gap between the system you're working on and the final result you're", "tokens": [509, 483, 341, 733, 295, 7417, 1296, 264, 1185, 291, 434, 1364, 322, 293, 264, 2572, 1874, 291, 434], "temperature": 0.0, "avg_logprob": -0.1328626401496656, "compression_ratio": 1.6816143497757847, "no_speech_prob": 4.399825047585182e-05}, {"id": 168, "seek": 98184, "start": 992.08, "end": 992.5600000000001, "text": " creating.", "tokens": [4084, 13], "temperature": 0.0, "avg_logprob": -0.1328626401496656, "compression_ratio": 1.6816143497757847, "no_speech_prob": 4.399825047585182e-05}, {"id": 169, "seek": 98184, "start": 993.2800000000001, "end": 1001.9200000000001, "text": " So Joel actually wrote a fantastic book, which despite being fantastic, it has some errors", "tokens": [407, 21522, 767, 4114, 257, 5456, 1446, 11, 597, 7228, 885, 5456, 11, 309, 575, 512, 13603], "temperature": 0.0, "avg_logprob": -0.1328626401496656, "compression_ratio": 1.6816143497757847, "no_speech_prob": 4.399825047585182e-05}, {"id": 170, "seek": 98184, "start": 1001.9200000000001, "end": 1003.76, "text": " in it, and the kind of errors are very interesting.", "tokens": [294, 309, 11, 293, 264, 733, 295, 13603, 366, 588, 1880, 13], "temperature": 0.0, "avg_logprob": -0.1328626401496656, "compression_ratio": 1.6816143497757847, "no_speech_prob": 4.399825047585182e-05}, {"id": 171, "seek": 98184, "start": 1003.76, "end": 1005.0400000000001, "text": " This is from his errata page.", "tokens": [639, 307, 490, 702, 45267, 3274, 3028, 13], "temperature": 0.0, "avg_logprob": -0.1328626401496656, "compression_ratio": 1.6816143497757847, "no_speech_prob": 4.399825047585182e-05}, {"id": 172, "seek": 98184, "start": 1006.4000000000001, "end": 1010.0, "text": " They're errors that say the code, you can't actually run it.", "tokens": [814, 434, 13603, 300, 584, 264, 3089, 11, 291, 393, 380, 767, 1190, 309, 13], "temperature": 0.0, "avg_logprob": -0.1328626401496656, "compression_ratio": 1.6816143497757847, "no_speech_prob": 4.399825047585182e-05}, {"id": 173, "seek": 101000, "start": 1010.0, "end": 1014.16, "text": " So this line of code doesn't work, and this line of code doesn't work.", "tokens": [407, 341, 1622, 295, 3089, 1177, 380, 589, 11, 293, 341, 1622, 295, 3089, 1177, 380, 589, 13], "temperature": 0.0, "avg_logprob": -0.16887697577476501, "compression_ratio": 1.988, "no_speech_prob": 1.3211441910243593e-05}, {"id": 174, "seek": 101000, "start": 1014.16, "end": 1018.64, "text": " One of the really interesting ones was not only this line of code doesn't work, but hey,", "tokens": [1485, 295, 264, 534, 1880, 2306, 390, 406, 787, 341, 1622, 295, 3089, 1177, 380, 589, 11, 457, 4177, 11], "temperature": 0.0, "avg_logprob": -0.16887697577476501, "compression_ratio": 1.988, "no_speech_prob": 1.3211441910243593e-05}, {"id": 175, "seek": 101000, "start": 1018.64, "end": 1021.52, "text": " you've got a code repo where it does work.", "tokens": [291, 600, 658, 257, 3089, 49040, 689, 309, 775, 589, 13], "temperature": 0.0, "avg_logprob": -0.16887697577476501, "compression_ratio": 1.988, "no_speech_prob": 1.3211441910243593e-05}, {"id": 176, "seek": 101000, "start": 1021.52, "end": 1026.8, "text": " And so there's this kind of like gap between the actual code you're doing and the book", "tokens": [400, 370, 456, 311, 341, 733, 295, 411, 7417, 1296, 264, 3539, 3089, 291, 434, 884, 293, 264, 1446], "temperature": 0.0, "avg_logprob": -0.16887697577476501, "compression_ratio": 1.988, "no_speech_prob": 1.3211441910243593e-05}, {"id": 177, "seek": 101000, "start": 1026.8, "end": 1030.24, "text": " that you're writing, and then they become out of sync, and your readers end up confused", "tokens": [300, 291, 434, 3579, 11, 293, 550, 436, 1813, 484, 295, 20271, 11, 293, 428, 17147, 917, 493, 9019], "temperature": 0.0, "avg_logprob": -0.16887697577476501, "compression_ratio": 1.988, "no_speech_prob": 1.3211441910243593e-05}, {"id": 178, "seek": 101000, "start": 1030.24, "end": 1031.44, "text": " because the code doesn't run.", "tokens": [570, 264, 3089, 1177, 380, 1190, 13], "temperature": 0.0, "avg_logprob": -0.16887697577476501, "compression_ratio": 1.988, "no_speech_prob": 1.3211441910243593e-05}, {"id": 179, "seek": 101000, "start": 1032.16, "end": 1039.12, "text": " All the code in our book runs, not because we're particularly brilliant, but just because", "tokens": [1057, 264, 3089, 294, 527, 1446, 6676, 11, 406, 570, 321, 434, 4098, 10248, 11, 457, 445, 570], "temperature": 0.0, "avg_logprob": -0.16887697577476501, "compression_ratio": 1.988, "no_speech_prob": 1.3211441910243593e-05}, {"id": 180, "seek": 103912, "start": 1039.12, "end": 1041.52, "text": " we ran it all in a notebook.", "tokens": [321, 5872, 309, 439, 294, 257, 21060, 13], "temperature": 0.0, "avg_logprob": -0.20782244383399165, "compression_ratio": 1.8071428571428572, "no_speech_prob": 3.705105700646527e-05}, {"id": 181, "seek": 103912, "start": 1041.52, "end": 1045.52, "text": " And so all the outputs you see are the actual outputs that came out of the notebook.", "tokens": [400, 370, 439, 264, 23930, 291, 536, 366, 264, 3539, 23930, 300, 1361, 484, 295, 264, 21060, 13], "temperature": 0.0, "avg_logprob": -0.20782244383399165, "compression_ratio": 1.8071428571428572, "no_speech_prob": 3.705105700646527e-05}, {"id": 182, "seek": 103912, "start": 1045.52, "end": 1049.52, "text": " Now, of course, one of the libraries might change, or there might be a breaking change", "tokens": [823, 11, 295, 1164, 11, 472, 295, 264, 15148, 1062, 1319, 11, 420, 456, 1062, 312, 257, 7697, 1319], "temperature": 0.0, "avg_logprob": -0.20782244383399165, "compression_ratio": 1.8071428571428572, "no_speech_prob": 3.705105700646527e-05}, {"id": 183, "seek": 103912, "start": 1049.52, "end": 1050.6399999999999, "text": " to Python or something.", "tokens": [281, 15329, 420, 746, 13], "temperature": 0.0, "avg_logprob": -0.20782244383399165, "compression_ratio": 1.8071428571428572, "no_speech_prob": 3.705105700646527e-05}, {"id": 184, "seek": 103912, "start": 1050.6399999999999, "end": 1053.6799999999998, "text": " There could be something which could cause it at some point in the future to break.", "tokens": [821, 727, 312, 746, 597, 727, 3082, 309, 412, 512, 935, 294, 264, 2027, 281, 1821, 13], "temperature": 0.0, "avg_logprob": -0.20782244383399165, "compression_ratio": 1.8071428571428572, "no_speech_prob": 3.705105700646527e-05}, {"id": 185, "seek": 103912, "start": 1053.6799999999998, "end": 1059.12, "text": " But at the point that we wrote it, and as far as I know right now still, the code is", "tokens": [583, 412, 264, 935, 300, 321, 4114, 309, 11, 293, 382, 1400, 382, 286, 458, 558, 586, 920, 11, 264, 3089, 307], "temperature": 0.0, "avg_logprob": -0.20782244383399165, "compression_ratio": 1.8071428571428572, "no_speech_prob": 3.705105700646527e-05}, {"id": 186, "seek": 103912, "start": 1059.12, "end": 1063.9199999999998, "text": " correct and it works because, as I said, it's the code that we actually ran.", "tokens": [3006, 293, 309, 1985, 570, 11, 382, 286, 848, 11, 309, 311, 264, 3089, 300, 321, 767, 5872, 13], "temperature": 0.0, "avg_logprob": -0.20782244383399165, "compression_ratio": 1.8071428571428572, "no_speech_prob": 3.705105700646527e-05}, {"id": 187, "seek": 103912, "start": 1063.9199999999998, "end": 1065.9199999999998, "text": " It's not a dead coding environment.", "tokens": [467, 311, 406, 257, 3116, 17720, 2823, 13], "temperature": 0.0, "avg_logprob": -0.20782244383399165, "compression_ratio": 1.8071428571428572, "no_speech_prob": 3.705105700646527e-05}, {"id": 188, "seek": 106592, "start": 1065.92, "end": 1070.64, "text": " It was a live coding environment we used to create the book, and the book directly comes", "tokens": [467, 390, 257, 1621, 17720, 2823, 321, 1143, 281, 1884, 264, 1446, 11, 293, 264, 1446, 3838, 1487], "temperature": 0.0, "avg_logprob": -0.2118170515019843, "compression_ratio": 1.5690376569037656, "no_speech_prob": 1.012974917102838e-05}, {"id": 189, "seek": 106592, "start": 1070.64, "end": 1072.64, "text": " from and is that code.", "tokens": [490, 293, 307, 300, 3089, 13], "temperature": 0.0, "avg_logprob": -0.2118170515019843, "compression_ratio": 1.5690376569037656, "no_speech_prob": 1.012974917102838e-05}, {"id": 190, "seek": 106592, "start": 1072.64, "end": 1077.8400000000001, "text": " So why am I talking about Joel's book and Joel's coding approach?", "tokens": [407, 983, 669, 286, 1417, 466, 21522, 311, 1446, 293, 21522, 311, 17720, 3109, 30], "temperature": 0.0, "avg_logprob": -0.2118170515019843, "compression_ratio": 1.5690376569037656, "no_speech_prob": 1.012974917102838e-05}, {"id": 191, "seek": 106592, "start": 1077.8400000000001, "end": 1083.68, "text": " That's because actually he, a couple of years ago, did a brilliant presentation called I", "tokens": [663, 311, 570, 767, 415, 11, 257, 1916, 295, 924, 2057, 11, 630, 257, 10248, 5860, 1219, 286], "temperature": 0.0, "avg_logprob": -0.2118170515019843, "compression_ratio": 1.5690376569037656, "no_speech_prob": 1.012974917102838e-05}, {"id": 192, "seek": 106592, "start": 1083.68, "end": 1085.68, "text": " Don't Like Notebooks.", "tokens": [1468, 380, 1743, 11633, 15170, 13], "temperature": 0.0, "avg_logprob": -0.2118170515019843, "compression_ratio": 1.5690376569037656, "no_speech_prob": 1.012974917102838e-05}, {"id": 193, "seek": 106592, "start": 1085.68, "end": 1092.16, "text": " And in this presentation, he explained why he thought we shouldn't be using notebooks.", "tokens": [400, 294, 341, 5860, 11, 415, 8825, 983, 415, 1194, 321, 4659, 380, 312, 1228, 43782, 13], "temperature": 0.0, "avg_logprob": -0.2118170515019843, "compression_ratio": 1.5690376569037656, "no_speech_prob": 1.012974917102838e-05}, {"id": 194, "seek": 109216, "start": 1092.16, "end": 1097.68, "text": " And actually notebooks are not the right approach to building effective software or doing effective", "tokens": [400, 767, 43782, 366, 406, 264, 558, 3109, 281, 2390, 4942, 4722, 420, 884, 4942], "temperature": 0.0, "avg_logprob": -0.17888758042279412, "compression_ratio": 1.6212765957446809, "no_speech_prob": 5.0636972446227446e-05}, {"id": 195, "seek": 109216, "start": 1097.68, "end": 1099.68, "text": " teaching.", "tokens": [4571, 13], "temperature": 0.0, "avg_logprob": -0.17888758042279412, "compression_ratio": 1.6212765957446809, "no_speech_prob": 5.0636972446227446e-05}, {"id": 196, "seek": 109216, "start": 1099.68, "end": 1105.68, "text": " And the reason I feel like I need to talk about it today is because he is such a brilliant", "tokens": [400, 264, 1778, 286, 841, 411, 286, 643, 281, 751, 466, 309, 965, 307, 570, 415, 307, 1270, 257, 10248], "temperature": 0.0, "avg_logprob": -0.17888758042279412, "compression_ratio": 1.6212765957446809, "no_speech_prob": 5.0636972446227446e-05}, {"id": 197, "seek": 109216, "start": 1105.68, "end": 1113.68, "text": " communicator and such a funny guy that this presentation has been incredibly influential.", "tokens": [3363, 1639, 293, 1270, 257, 4074, 2146, 300, 341, 5860, 575, 668, 6252, 22215, 13], "temperature": 0.0, "avg_logprob": -0.17888758042279412, "compression_ratio": 1.6212765957446809, "no_speech_prob": 5.0636972446227446e-05}, {"id": 198, "seek": 109216, "start": 1113.68, "end": 1121.68, "text": " And pretty much any time I say I like notebooks, somebody will say that's not a good idea.", "tokens": [400, 1238, 709, 604, 565, 286, 584, 286, 411, 43782, 11, 2618, 486, 584, 300, 311, 406, 257, 665, 1558, 13], "temperature": 0.0, "avg_logprob": -0.17888758042279412, "compression_ratio": 1.6212765957446809, "no_speech_prob": 5.0636972446227446e-05}, {"id": 199, "seek": 112168, "start": 1121.68, "end": 1125.68, "text": " Haven't you seen that presentation where that guy explained why they're terrible?", "tokens": [23770, 380, 291, 1612, 300, 5860, 689, 300, 2146, 8825, 983, 436, 434, 6237, 30], "temperature": 0.0, "avg_logprob": -0.12488274608584617, "compression_ratio": 1.717607973421927, "no_speech_prob": 6.012748781358823e-05}, {"id": 200, "seek": 112168, "start": 1125.68, "end": 1130.64, "text": " So, I really feel like in order to tell you why I like notebooks, I also have to tell", "tokens": [407, 11, 286, 534, 841, 411, 294, 1668, 281, 980, 291, 983, 286, 411, 43782, 11, 286, 611, 362, 281, 980], "temperature": 0.0, "avg_logprob": -0.12488274608584617, "compression_ratio": 1.717607973421927, "no_speech_prob": 6.012748781358823e-05}, {"id": 201, "seek": 112168, "start": 1130.64, "end": 1132.64, "text": " you why Joel is wrong.", "tokens": [291, 983, 21522, 307, 2085, 13], "temperature": 0.0, "avg_logprob": -0.12488274608584617, "compression_ratio": 1.717607973421927, "no_speech_prob": 6.012748781358823e-05}, {"id": 202, "seek": 112168, "start": 1132.64, "end": 1134.64, "text": " Which he is.", "tokens": [3013, 415, 307, 13], "temperature": 0.0, "avg_logprob": -0.12488274608584617, "compression_ratio": 1.717607973421927, "no_speech_prob": 6.012748781358823e-05}, {"id": 203, "seek": 112168, "start": 1134.64, "end": 1136.64, "text": " I really feel like he's wrong.", "tokens": [286, 534, 841, 411, 415, 311, 2085, 13], "temperature": 0.0, "avg_logprob": -0.12488274608584617, "compression_ratio": 1.717607973421927, "no_speech_prob": 6.012748781358823e-05}, {"id": 204, "seek": 112168, "start": 1136.64, "end": 1140.64, "text": " I've got a lot of good stuff in notebooks and as you'll see, I think the points he made", "tokens": [286, 600, 658, 257, 688, 295, 665, 1507, 294, 43782, 293, 382, 291, 603, 536, 11, 286, 519, 264, 2793, 415, 1027], "temperature": 0.0, "avg_logprob": -0.12488274608584617, "compression_ratio": 1.717607973421927, "no_speech_prob": 6.012748781358823e-05}, {"id": 205, "seek": 112168, "start": 1140.64, "end": 1144.64, "text": " are based on misunderstandings or at least are sometimes now out of date.", "tokens": [366, 2361, 322, 35736, 1109, 420, 412, 1935, 366, 2171, 586, 484, 295, 4002, 13], "temperature": 0.0, "avg_logprob": -0.12488274608584617, "compression_ratio": 1.717607973421927, "no_speech_prob": 6.012748781358823e-05}, {"id": 206, "seek": 112168, "start": 1144.64, "end": 1148.64, "text": " Because his slides are brilliant, I'm going to use a lot of them and also so you can see", "tokens": [1436, 702, 9788, 366, 10248, 11, 286, 478, 516, 281, 764, 257, 688, 295, 552, 293, 611, 370, 291, 393, 536], "temperature": 0.0, "avg_logprob": -0.12488274608584617, "compression_ratio": 1.717607973421927, "no_speech_prob": 6.012748781358823e-05}, {"id": 207, "seek": 112168, "start": 1148.64, "end": 1150.64, "text": " exactly what I'm responding to.", "tokens": [2293, 437, 286, 478, 16670, 281, 13], "temperature": 0.0, "avg_logprob": -0.12488274608584617, "compression_ratio": 1.717607973421927, "no_speech_prob": 6.012748781358823e-05}, {"id": 208, "seek": 115064, "start": 1150.64, "end": 1156.64, "text": " Whenever I use his slides, I'm going to show this little icon in the bottom right hand", "tokens": [14159, 286, 764, 702, 9788, 11, 286, 478, 516, 281, 855, 341, 707, 6528, 294, 264, 2767, 558, 1011], "temperature": 0.0, "avg_logprob": -0.0827583681073105, "compression_ratio": 1.569811320754717, "no_speech_prob": 7.720642315689474e-05}, {"id": 209, "seek": 115064, "start": 1156.64, "end": 1157.64, "text": " corner.", "tokens": [4538, 13], "temperature": 0.0, "avg_logprob": -0.0827583681073105, "compression_ratio": 1.569811320754717, "no_speech_prob": 7.720642315689474e-05}, {"id": 210, "seek": 115064, "start": 1157.64, "end": 1158.64, "text": " You'll see it.", "tokens": [509, 603, 536, 309, 13], "temperature": 0.0, "avg_logprob": -0.0827583681073105, "compression_ratio": 1.569811320754717, "no_speech_prob": 7.720642315689474e-05}, {"id": 211, "seek": 115064, "start": 1158.64, "end": 1162.64, "text": " The next 12 slides are actually all from his presentation.", "tokens": [440, 958, 2272, 9788, 366, 767, 439, 490, 702, 5860, 13], "temperature": 0.0, "avg_logprob": -0.0827583681073105, "compression_ratio": 1.569811320754717, "no_speech_prob": 7.720642315689474e-05}, {"id": 212, "seek": 115064, "start": 1162.64, "end": 1168.64, "text": " I haven't edited them because I want to make sure you see exactly what he showed.", "tokens": [286, 2378, 380, 23016, 552, 570, 286, 528, 281, 652, 988, 291, 536, 2293, 437, 415, 4712, 13], "temperature": 0.0, "avg_logprob": -0.0827583681073105, "compression_ratio": 1.569811320754717, "no_speech_prob": 7.720642315689474e-05}, {"id": 213, "seek": 115064, "start": 1168.64, "end": 1172.64, "text": " And one of the things he did say in his presentation is I am not a notebook expert.", "tokens": [400, 472, 295, 264, 721, 415, 630, 584, 294, 702, 5860, 307, 286, 669, 406, 257, 21060, 5844, 13], "temperature": 0.0, "avg_logprob": -0.0827583681073105, "compression_ratio": 1.569811320754717, "no_speech_prob": 7.720642315689474e-05}, {"id": 214, "seek": 115064, "start": 1172.64, "end": 1174.64, "text": " Which is great.", "tokens": [3013, 307, 869, 13], "temperature": 0.0, "avg_logprob": -0.0827583681073105, "compression_ratio": 1.569811320754717, "no_speech_prob": 7.720642315689474e-05}, {"id": 215, "seek": 115064, "start": 1174.64, "end": 1178.64, "text": " It's nice to be self-deprecating and to kind of have that caveat.", "tokens": [467, 311, 1481, 281, 312, 2698, 12, 19929, 13867, 990, 293, 281, 733, 295, 362, 300, 43012, 13], "temperature": 0.0, "avg_logprob": -0.0827583681073105, "compression_ratio": 1.569811320754717, "no_speech_prob": 7.720642315689474e-05}, {"id": 216, "seek": 117864, "start": 1178.64, "end": 1184.64, "text": " But he still expressed very strong opinions and people still, as I said, really think", "tokens": [583, 415, 920, 12675, 588, 2068, 11819, 293, 561, 920, 11, 382, 286, 848, 11, 534, 519], "temperature": 0.0, "avg_logprob": -0.08150467630160058, "compression_ratio": 1.6830188679245284, "no_speech_prob": 0.00010717843542806804}, {"id": 217, "seek": 117864, "start": 1184.64, "end": 1185.64, "text": " he must be right.", "tokens": [415, 1633, 312, 558, 13], "temperature": 0.0, "avg_logprob": -0.08150467630160058, "compression_ratio": 1.6830188679245284, "no_speech_prob": 0.00010717843542806804}, {"id": 218, "seek": 117864, "start": 1185.64, "end": 1191.64, "text": " They tell me that I am making a mistake to think that I like notebooks.", "tokens": [814, 980, 385, 300, 286, 669, 1455, 257, 6146, 281, 519, 300, 286, 411, 43782, 13], "temperature": 0.0, "avg_logprob": -0.08150467630160058, "compression_ratio": 1.6830188679245284, "no_speech_prob": 0.00010717843542806804}, {"id": 219, "seek": 117864, "start": 1191.64, "end": 1197.64, "text": " So I was actually worried when he first told me that he's planning to write the talk that", "tokens": [407, 286, 390, 767, 5804, 562, 415, 700, 1907, 385, 300, 415, 311, 5038, 281, 2464, 264, 751, 300], "temperature": 0.0, "avg_logprob": -0.08150467630160058, "compression_ratio": 1.6830188679245284, "no_speech_prob": 0.00010717843542806804}, {"id": 220, "seek": 117864, "start": 1197.64, "end": 1199.64, "text": " he did.", "tokens": [415, 630, 13], "temperature": 0.0, "avg_logprob": -0.08150467630160058, "compression_ratio": 1.6830188679245284, "no_speech_prob": 0.00010717843542806804}, {"id": 221, "seek": 117864, "start": 1199.64, "end": 1202.64, "text": " Because I know he's a brilliant communicator and I know he's really funny and I thought", "tokens": [1436, 286, 458, 415, 311, 257, 10248, 3363, 1639, 293, 286, 458, 415, 311, 534, 4074, 293, 286, 1194], "temperature": 0.0, "avg_logprob": -0.08150467630160058, "compression_ratio": 1.6830188679245284, "no_speech_prob": 0.00010717843542806804}, {"id": 222, "seek": 117864, "start": 1202.64, "end": 1207.64, "text": " uh oh, a lot of people are going to listen to this and say, oh, I guess we shouldn't", "tokens": [2232, 1954, 11, 257, 688, 295, 561, 366, 516, 281, 2140, 281, 341, 293, 584, 11, 1954, 11, 286, 2041, 321, 4659, 380], "temperature": 0.0, "avg_logprob": -0.08150467630160058, "compression_ratio": 1.6830188679245284, "no_speech_prob": 0.00010717843542806804}, {"id": 223, "seek": 120764, "start": 1207.64, "end": 1212.64, "text": " use notebooks because Joel has made a compelling case that we shouldn't.", "tokens": [764, 43782, 570, 21522, 575, 1027, 257, 20050, 1389, 300, 321, 4659, 380, 13], "temperature": 0.0, "avg_logprob": -0.09908524460679903, "compression_ratio": 1.7427536231884058, "no_speech_prob": 0.00015113250992726535}, {"id": 224, "seek": 120764, "start": 1212.64, "end": 1215.64, "text": " And this slide is actually from his presentation.", "tokens": [400, 341, 4137, 307, 767, 490, 702, 5860, 13], "temperature": 0.0, "avg_logprob": -0.09908524460679903, "compression_ratio": 1.7427536231884058, "no_speech_prob": 0.00015113250992726535}, {"id": 225, "seek": 120764, "start": 1215.64, "end": 1219.64, "text": " He actually said in his presentation, hey, look at this, look at what Jeremy said.", "tokens": [634, 767, 848, 294, 702, 5860, 11, 4177, 11, 574, 412, 341, 11, 574, 412, 437, 17809, 848, 13], "temperature": 0.0, "avg_logprob": -0.09908524460679903, "compression_ratio": 1.7427536231884058, "no_speech_prob": 0.00015113250992726535}, {"id": 226, "seek": 120764, "start": 1219.64, "end": 1223.64, "text": " I guess he thought it was kind of funny that I told him don't write this presentation and", "tokens": [286, 2041, 415, 1194, 309, 390, 733, 295, 4074, 300, 286, 1907, 796, 500, 380, 2464, 341, 5860, 293], "temperature": 0.0, "avg_logprob": -0.09908524460679903, "compression_ratio": 1.7427536231884058, "no_speech_prob": 0.00015113250992726535}, {"id": 227, "seek": 120764, "start": 1223.64, "end": 1225.64, "text": " he wrote the presentation.", "tokens": [415, 4114, 264, 5860, 13], "temperature": 0.0, "avg_logprob": -0.09908524460679903, "compression_ratio": 1.7427536231884058, "no_speech_prob": 0.00015113250992726535}, {"id": 228, "seek": 120764, "start": 1225.64, "end": 1229.64, "text": " And so now I feel like I have to come back and say, okay, let's set the record straight", "tokens": [400, 370, 586, 286, 841, 411, 286, 362, 281, 808, 646, 293, 584, 11, 1392, 11, 718, 311, 992, 264, 2136, 2997], "temperature": 0.0, "avg_logprob": -0.09908524460679903, "compression_ratio": 1.7427536231884058, "no_speech_prob": 0.00015113250992726535}, {"id": 229, "seek": 120764, "start": 1229.64, "end": 1230.64, "text": " here.", "tokens": [510, 13], "temperature": 0.0, "avg_logprob": -0.09908524460679903, "compression_ratio": 1.7427536231884058, "no_speech_prob": 0.00015113250992726535}, {"id": 230, "seek": 120764, "start": 1230.64, "end": 1232.64, "text": " So here's what he said.", "tokens": [407, 510, 311, 437, 415, 848, 13], "temperature": 0.0, "avg_logprob": -0.09908524460679903, "compression_ratio": 1.7427536231884058, "no_speech_prob": 0.00015113250992726535}, {"id": 231, "seek": 120764, "start": 1232.64, "end": 1235.64, "text": " He said he had a lot of strong opinions.", "tokens": [634, 848, 415, 632, 257, 688, 295, 2068, 11819, 13], "temperature": 0.0, "avg_logprob": -0.09908524460679903, "compression_ratio": 1.7427536231884058, "no_speech_prob": 0.00015113250992726535}, {"id": 232, "seek": 123564, "start": 1235.64, "end": 1238.64, "text": " I don't agree with any of them, but here they are.", "tokens": [286, 500, 380, 3986, 365, 604, 295, 552, 11, 457, 510, 436, 366, 13], "temperature": 0.0, "avg_logprob": -0.0853941870517418, "compression_ratio": 1.8333333333333333, "no_speech_prob": 7.721333531662822e-05}, {"id": 233, "seek": 123564, "start": 1238.64, "end": 1242.64, "text": " He said notebooks discourage good habits.", "tokens": [634, 848, 43782, 21497, 609, 665, 14100, 13], "temperature": 0.0, "avg_logprob": -0.0853941870517418, "compression_ratio": 1.8333333333333333, "no_speech_prob": 7.721333531662822e-05}, {"id": 234, "seek": 123564, "start": 1242.64, "end": 1246.64, "text": " He said notebooks encourage bad habits.", "tokens": [634, 848, 43782, 5373, 1578, 14100, 13], "temperature": 0.0, "avg_logprob": -0.0853941870517418, "compression_ratio": 1.8333333333333333, "no_speech_prob": 7.721333531662822e-05}, {"id": 235, "seek": 123564, "start": 1246.64, "end": 1251.64, "text": " He said notebooks encourage bad processes.", "tokens": [634, 848, 43782, 5373, 1578, 7555, 13], "temperature": 0.0, "avg_logprob": -0.0853941870517418, "compression_ratio": 1.8333333333333333, "no_speech_prob": 7.721333531662822e-05}, {"id": 236, "seek": 123564, "start": 1251.64, "end": 1259.64, "text": " He said that notebooks hinder reproducible and extensible science.", "tokens": [634, 848, 300, 43782, 276, 5669, 11408, 32128, 293, 1279, 30633, 3497, 13], "temperature": 0.0, "avg_logprob": -0.0853941870517418, "compression_ratio": 1.8333333333333333, "no_speech_prob": 7.721333531662822e-05}, {"id": 237, "seek": 125964, "start": 1259.64, "end": 1265.64, "text": " He said that notebooks are a recipe for poorly factored code.", "tokens": [634, 848, 300, 43782, 366, 257, 6782, 337, 22271, 1186, 2769, 3089, 13], "temperature": 0.0, "avg_logprob": -0.06155239007411859, "compression_ratio": 1.871244635193133, "no_speech_prob": 2.8408272555680014e-05}, {"id": 238, "seek": 125964, "start": 1265.64, "end": 1269.64, "text": " He said that notebooks make it easy to teach poorly.", "tokens": [634, 848, 300, 43782, 652, 309, 1858, 281, 2924, 22271, 13], "temperature": 0.0, "avg_logprob": -0.06155239007411859, "compression_ratio": 1.871244635193133, "no_speech_prob": 2.8408272555680014e-05}, {"id": 239, "seek": 125964, "start": 1269.64, "end": 1272.64, "text": " I don't think it's the notebooks fault that that guy's going to get over the head.", "tokens": [286, 500, 380, 519, 309, 311, 264, 43782, 7441, 300, 300, 2146, 311, 516, 281, 483, 670, 264, 1378, 13], "temperature": 0.0, "avg_logprob": -0.06155239007411859, "compression_ratio": 1.871244635193133, "no_speech_prob": 2.8408272555680014e-05}, {"id": 240, "seek": 125964, "start": 1272.64, "end": 1275.64, "text": " I don't do that when I teach with notebooks, by the way.", "tokens": [286, 500, 380, 360, 300, 562, 286, 2924, 365, 43782, 11, 538, 264, 636, 13], "temperature": 0.0, "avg_logprob": -0.06155239007411859, "compression_ratio": 1.871244635193133, "no_speech_prob": 2.8408272555680014e-05}, {"id": 241, "seek": 125964, "start": 1275.64, "end": 1279.64, "text": " He said notebooks make it hard for me to teach well.", "tokens": [634, 848, 43782, 652, 309, 1152, 337, 385, 281, 2924, 731, 13], "temperature": 0.0, "avg_logprob": -0.06155239007411859, "compression_ratio": 1.871244635193133, "no_speech_prob": 2.8408272555680014e-05}, {"id": 242, "seek": 125964, "start": 1279.64, "end": 1283.64, "text": " So he didn't just state these, he gave reasons.", "tokens": [407, 415, 994, 380, 445, 1785, 613, 11, 415, 2729, 4112, 13], "temperature": 0.0, "avg_logprob": -0.06155239007411859, "compression_ratio": 1.871244635193133, "no_speech_prob": 2.8408272555680014e-05}, {"id": 243, "seek": 125964, "start": 1283.64, "end": 1287.64, "text": " And here are some of the key reasons, I think the key reasons that he expressed.", "tokens": [400, 510, 366, 512, 295, 264, 2141, 4112, 11, 286, 519, 264, 2141, 4112, 300, 415, 12675, 13], "temperature": 0.0, "avg_logprob": -0.06155239007411859, "compression_ratio": 1.871244635193133, "no_speech_prob": 2.8408272555680014e-05}, {"id": 244, "seek": 128764, "start": 1287.64, "end": 1293.64, "text": " The first one he expressed was that notebooks have tons and tons of hidden state.", "tokens": [440, 700, 472, 415, 12675, 390, 300, 43782, 362, 9131, 293, 9131, 295, 7633, 1785, 13], "temperature": 0.0, "avg_logprob": -0.1207689642906189, "compression_ratio": 1.6622222222222223, "no_speech_prob": 8.091920608421788e-05}, {"id": 245, "seek": 128764, "start": 1293.64, "end": 1296.64, "text": " That's easy to screw up and difficult to reason about.", "tokens": [663, 311, 1858, 281, 5630, 493, 293, 2252, 281, 1778, 466, 13], "temperature": 0.0, "avg_logprob": -0.1207689642906189, "compression_ratio": 1.6622222222222223, "no_speech_prob": 8.091920608421788e-05}, {"id": 246, "seek": 128764, "start": 1296.64, "end": 1300.64, "text": " Which is strange.", "tokens": [3013, 307, 5861, 13], "temperature": 0.0, "avg_logprob": -0.1207689642906189, "compression_ratio": 1.6622222222222223, "no_speech_prob": 8.091920608421788e-05}, {"id": 247, "seek": 128764, "start": 1300.64, "end": 1301.64, "text": " I don't find this myself.", "tokens": [286, 500, 380, 915, 341, 2059, 13], "temperature": 0.0, "avg_logprob": -0.1207689642906189, "compression_ratio": 1.6622222222222223, "no_speech_prob": 8.091920608421788e-05}, {"id": 248, "seek": 128764, "start": 1301.64, "end": 1308.64, "text": " And he made the point that notebooks, or he says are dangerous, I don't know if I agree", "tokens": [400, 415, 1027, 264, 935, 300, 43782, 11, 420, 415, 1619, 366, 5795, 11, 286, 500, 380, 458, 498, 286, 3986], "temperature": 0.0, "avg_logprob": -0.1207689642906189, "compression_ratio": 1.6622222222222223, "no_speech_prob": 8.091920608421788e-05}, {"id": 249, "seek": 128764, "start": 1308.64, "end": 1312.64, "text": " they are dangerous, but he thinks notebooks are dangerous unless you run each cell exactly", "tokens": [436, 366, 5795, 11, 457, 415, 7309, 43782, 366, 5795, 5969, 291, 1190, 1184, 2815, 2293], "temperature": 0.0, "avg_logprob": -0.1207689642906189, "compression_ratio": 1.6622222222222223, "no_speech_prob": 8.091920608421788e-05}, {"id": 250, "seek": 128764, "start": 1312.64, "end": 1313.64, "text": " once in order.", "tokens": [1564, 294, 1668, 13], "temperature": 0.0, "avg_logprob": -0.1207689642906189, "compression_ratio": 1.6622222222222223, "no_speech_prob": 8.091920608421788e-05}, {"id": 251, "seek": 131364, "start": 1313.64, "end": 1317.64, "text": " I was like, oh my goodness, how am I going to do that?", "tokens": [286, 390, 411, 11, 1954, 452, 8387, 11, 577, 669, 286, 516, 281, 360, 300, 30], "temperature": 0.0, "avg_logprob": -0.0726711460363085, "compression_ratio": 1.7123893805309736, "no_speech_prob": 0.00011410335719119757}, {"id": 252, "seek": 131364, "start": 1317.64, "end": 1322.64, "text": " Wait, Jupiter has a single button you can press to do that.", "tokens": [3802, 11, 24567, 575, 257, 2167, 2960, 291, 393, 1886, 281, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.0726711460363085, "compression_ratio": 1.7123893805309736, "no_speech_prob": 0.00011410335719119757}, {"id": 253, "seek": 131364, "start": 1322.64, "end": 1323.64, "text": " It's actually not that hard.", "tokens": [467, 311, 767, 406, 300, 1152, 13], "temperature": 0.0, "avg_logprob": -0.0726711460363085, "compression_ratio": 1.7123893805309736, "no_speech_prob": 0.00011410335719119757}, {"id": 254, "seek": 131364, "start": 1323.64, "end": 1330.64, "text": " If you really think it's so important to run each cell in order, you have a way to do so.", "tokens": [759, 291, 534, 519, 309, 311, 370, 1021, 281, 1190, 1184, 2815, 294, 1668, 11, 291, 362, 257, 636, 281, 360, 370, 13], "temperature": 0.0, "avg_logprob": -0.0726711460363085, "compression_ratio": 1.7123893805309736, "no_speech_prob": 0.00011410335719119757}, {"id": 255, "seek": 131364, "start": 1330.64, "end": 1335.64, "text": " Personally, I think it's actually really, really important to have this ability to go", "tokens": [21079, 11, 286, 519, 309, 311, 767, 534, 11, 534, 1021, 281, 362, 341, 3485, 281, 352], "temperature": 0.0, "avg_logprob": -0.0726711460363085, "compression_ratio": 1.7123893805309736, "no_speech_prob": 0.00011410335719119757}, {"id": 256, "seek": 131364, "start": 1335.64, "end": 1340.64, "text": " back and fiddle with things, to change things, to see what happens.", "tokens": [646, 293, 24553, 2285, 365, 721, 11, 281, 1319, 721, 11, 281, 536, 437, 2314, 13], "temperature": 0.0, "avg_logprob": -0.0726711460363085, "compression_ratio": 1.7123893805309736, "no_speech_prob": 0.00011410335719119757}, {"id": 257, "seek": 134064, "start": 1340.64, "end": 1345.64, "text": " I like having the ability to go back and run in order, but I also like having the ability", "tokens": [286, 411, 1419, 264, 3485, 281, 352, 646, 293, 1190, 294, 1668, 11, 457, 286, 611, 411, 1419, 264, 3485], "temperature": 0.0, "avg_logprob": -0.10514507293701172, "compression_ratio": 1.762962962962963, "no_speech_prob": 1.750218143570237e-05}, {"id": 258, "seek": 134064, "start": 1345.64, "end": 1351.64, "text": " to actually, as we discussed, manipulate the live coding environment in real time to experiment", "tokens": [281, 767, 11, 382, 321, 7152, 11, 20459, 264, 1621, 17720, 2823, 294, 957, 565, 281, 5120], "temperature": 0.0, "avg_logprob": -0.10514507293701172, "compression_ratio": 1.762962962962963, "no_speech_prob": 1.750218143570237e-05}, {"id": 259, "seek": 134064, "start": 1351.64, "end": 1353.64, "text": " and to say what if.", "tokens": [293, 281, 584, 437, 498, 13], "temperature": 0.0, "avg_logprob": -0.10514507293701172, "compression_ratio": 1.762962962962963, "no_speech_prob": 1.750218143570237e-05}, {"id": 260, "seek": 134064, "start": 1353.64, "end": 1355.64, "text": " That's a critical part of this.", "tokens": [663, 311, 257, 4924, 644, 295, 341, 13], "temperature": 0.0, "avg_logprob": -0.10514507293701172, "compression_ratio": 1.762962962962963, "no_speech_prob": 1.750218143570237e-05}, {"id": 261, "seek": 134064, "start": 1355.64, "end": 1359.64, "text": " But you do need a way to ensure that in the end the whole thing works.", "tokens": [583, 291, 360, 643, 257, 636, 281, 5586, 300, 294, 264, 917, 264, 1379, 551, 1985, 13], "temperature": 0.0, "avg_logprob": -0.10514507293701172, "compression_ratio": 1.762962962962963, "no_speech_prob": 1.750218143570237e-05}, {"id": 262, "seek": 134064, "start": 1359.64, "end": 1364.64, "text": " And not only does Jupiter have a couple of ways to do that, there's restart and clear", "tokens": [400, 406, 787, 775, 24567, 362, 257, 1916, 295, 2098, 281, 360, 300, 11, 456, 311, 21022, 293, 1850], "temperature": 0.0, "avg_logprob": -0.10514507293701172, "compression_ratio": 1.762962962962963, "no_speech_prob": 1.750218143570237e-05}, {"id": 263, "seek": 134064, "start": 1364.64, "end": 1365.64, "text": " output.", "tokens": [5598, 13], "temperature": 0.0, "avg_logprob": -0.10514507293701172, "compression_ratio": 1.762962962962963, "no_speech_prob": 1.750218143570237e-05}, {"id": 264, "seek": 134064, "start": 1365.64, "end": 1367.64, "text": " Sorry, should we restart and clear output?", "tokens": [4919, 11, 820, 321, 21022, 293, 1850, 5598, 30], "temperature": 0.0, "avg_logprob": -0.10514507293701172, "compression_ratio": 1.762962962962963, "no_speech_prob": 1.750218143570237e-05}, {"id": 265, "seek": 134064, "start": 1367.64, "end": 1368.64, "text": " Should we restart and run all?", "tokens": [6454, 321, 21022, 293, 1190, 439, 30], "temperature": 0.0, "avg_logprob": -0.10514507293701172, "compression_ratio": 1.762962962962963, "no_speech_prob": 1.750218143570237e-05}, {"id": 266, "seek": 136864, "start": 1368.64, "end": 1370.64, "text": " I made a mistake there.", "tokens": [286, 1027, 257, 6146, 456, 13], "temperature": 0.0, "avg_logprob": -0.12322134772936504, "compression_ratio": 1.568888888888889, "no_speech_prob": 4.908292612526566e-05}, {"id": 267, "seek": 136864, "start": 1370.64, "end": 1377.64, "text": " And in CEL, there's also a few options such as run cells to here or run all cells.", "tokens": [400, 294, 383, 3158, 11, 456, 311, 611, 257, 1326, 3956, 1270, 382, 1190, 5438, 281, 510, 420, 1190, 439, 5438, 13], "temperature": 0.0, "avg_logprob": -0.12322134772936504, "compression_ratio": 1.568888888888889, "no_speech_prob": 4.908292612526566e-05}, {"id": 268, "seek": 136864, "start": 1377.64, "end": 1382.64, "text": " And NBDEV actually has something which runs all of your notebooks, all of your cells in", "tokens": [400, 426, 33, 22296, 53, 767, 575, 746, 597, 6676, 439, 295, 428, 43782, 11, 439, 295, 428, 5438, 294], "temperature": 0.0, "avg_logprob": -0.12322134772936504, "compression_ratio": 1.568888888888889, "no_speech_prob": 4.908292612526566e-05}, {"id": 269, "seek": 136864, "start": 1382.64, "end": 1384.64, "text": " order for you for a whole directory.", "tokens": [1668, 337, 291, 337, 257, 1379, 21120, 13], "temperature": 0.0, "avg_logprob": -0.12322134772936504, "compression_ratio": 1.568888888888889, "no_speech_prob": 4.908292612526566e-05}, {"id": 270, "seek": 136864, "start": 1384.64, "end": 1387.64, "text": " That's the main thing I use.", "tokens": [663, 311, 264, 2135, 551, 286, 764, 13], "temperature": 0.0, "avg_logprob": -0.12322134772936504, "compression_ratio": 1.568888888888889, "no_speech_prob": 4.908292612526566e-05}, {"id": 271, "seek": 136864, "start": 1387.64, "end": 1394.64, "text": " Another concern he stated was that you can't copy and paste code and outputs from a notebook", "tokens": [3996, 3136, 415, 11323, 390, 300, 291, 393, 380, 5055, 293, 9163, 3089, 293, 23930, 490, 257, 21060], "temperature": 0.0, "avg_logprob": -0.12322134772936504, "compression_ratio": 1.568888888888889, "no_speech_prob": 4.908292612526566e-05}, {"id": 272, "seek": 139464, "start": 1394.64, "end": 1399.64, "text": " into Slack, where he also gave the example of pull requests and issues in GitHub.", "tokens": [666, 37211, 11, 689, 415, 611, 2729, 264, 1365, 295, 2235, 12475, 293, 2663, 294, 23331, 13], "temperature": 0.0, "avg_logprob": -0.08956124959898389, "compression_ratio": 1.8366533864541832, "no_speech_prob": 1.6700949345249683e-05}, {"id": 273, "seek": 139464, "start": 1399.64, "end": 1405.64, "text": " Now, this is an example of trying to do things the same way you've always done them without", "tokens": [823, 11, 341, 307, 364, 1365, 295, 1382, 281, 360, 721, 264, 912, 636, 291, 600, 1009, 1096, 552, 1553], "temperature": 0.0, "avg_logprob": -0.08956124959898389, "compression_ratio": 1.8366533864541832, "no_speech_prob": 1.6700949345249683e-05}, {"id": 274, "seek": 139464, "start": 1405.64, "end": 1408.64, "text": " thinking about what's the actual problem you're trying to solve.", "tokens": [1953, 466, 437, 311, 264, 3539, 1154, 291, 434, 1382, 281, 5039, 13], "temperature": 0.0, "avg_logprob": -0.08956124959898389, "compression_ratio": 1.8366533864541832, "no_speech_prob": 1.6700949345249683e-05}, {"id": 275, "seek": 139464, "start": 1408.64, "end": 1413.64, "text": " Now, the actual problem you're trying to solve is to say, here's what I'm trying to do.", "tokens": [823, 11, 264, 3539, 1154, 291, 434, 1382, 281, 5039, 307, 281, 584, 11, 510, 311, 437, 286, 478, 1382, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.08956124959898389, "compression_ratio": 1.8366533864541832, "no_speech_prob": 1.6700949345249683e-05}, {"id": 276, "seek": 139464, "start": 1413.64, "end": 1415.64, "text": " Please explain why this doesn't work.", "tokens": [2555, 2903, 983, 341, 1177, 380, 589, 13], "temperature": 0.0, "avg_logprob": -0.08956124959898389, "compression_ratio": 1.8366533864541832, "no_speech_prob": 1.6700949345249683e-05}, {"id": 277, "seek": 139464, "start": 1415.64, "end": 1419.64, "text": " Or here, have a look at this example I'm showing, or whatever.", "tokens": [1610, 510, 11, 362, 257, 574, 412, 341, 1365, 286, 478, 4099, 11, 420, 2035, 13], "temperature": 0.0, "avg_logprob": -0.08956124959898389, "compression_ratio": 1.8366533864541832, "no_speech_prob": 1.6700949345249683e-05}, {"id": 278, "seek": 139464, "start": 1419.64, "end": 1423.64, "text": " And here's how it actually looks.", "tokens": [400, 510, 311, 577, 309, 767, 1542, 13], "temperature": 0.0, "avg_logprob": -0.08956124959898389, "compression_ratio": 1.8366533864541832, "no_speech_prob": 1.6700949345249683e-05}, {"id": 279, "seek": 142364, "start": 1423.64, "end": 1427.64, "text": " It's actually way better than cutting and pasting into Slack.", "tokens": [467, 311, 767, 636, 1101, 813, 6492, 293, 1791, 278, 666, 37211, 13], "temperature": 0.0, "avg_logprob": -0.09957468098607557, "compression_ratio": 1.622568093385214, "no_speech_prob": 6.708902947138995e-05}, {"id": 280, "seek": 142364, "start": 1427.64, "end": 1432.64, "text": " When we get a pull request or an issue, here's a bug report.", "tokens": [1133, 321, 483, 257, 2235, 5308, 420, 364, 2734, 11, 510, 311, 257, 7426, 2275, 13], "temperature": 0.0, "avg_logprob": -0.09957468098607557, "compression_ratio": 1.622568093385214, "no_speech_prob": 6.708902947138995e-05}, {"id": 281, "seek": 142364, "start": 1432.64, "end": 1434.64, "text": " Colab Notebook, reproducing the behavior.", "tokens": [4004, 455, 11633, 2939, 11, 11408, 2175, 264, 5223, 13], "temperature": 0.0, "avg_logprob": -0.09957468098607557, "compression_ratio": 1.622568093385214, "no_speech_prob": 6.708902947138995e-05}, {"id": 282, "seek": 142364, "start": 1434.64, "end": 1441.64, "text": " Now, I click on that, and I get a whole notebook, fully self-contained, where I'm not just seeing", "tokens": [823, 11, 286, 2052, 322, 300, 11, 293, 286, 483, 257, 1379, 21060, 11, 4498, 2698, 12, 9000, 3563, 11, 689, 286, 478, 406, 445, 2577], "temperature": 0.0, "avg_logprob": -0.09957468098607557, "compression_ratio": 1.622568093385214, "no_speech_prob": 6.708902947138995e-05}, {"id": 283, "seek": 142364, "start": 1441.64, "end": 1446.64, "text": " this person's claim, oh, I typed this and this happened, but I can actually try it.", "tokens": [341, 954, 311, 3932, 11, 1954, 11, 286, 33941, 341, 293, 341, 2011, 11, 457, 286, 393, 767, 853, 309, 13], "temperature": 0.0, "avg_logprob": -0.09957468098607557, "compression_ratio": 1.622568093385214, "no_speech_prob": 6.708902947138995e-05}, {"id": 284, "seek": 142364, "start": 1446.64, "end": 1452.64, "text": " And that means I can then actually try to fix it right there and then.", "tokens": [400, 300, 1355, 286, 393, 550, 767, 853, 281, 3191, 309, 558, 456, 293, 550, 13], "temperature": 0.0, "avg_logprob": -0.09957468098607557, "compression_ratio": 1.622568093385214, "no_speech_prob": 6.708902947138995e-05}, {"id": 285, "seek": 145264, "start": 1452.64, "end": 1459.64, "text": " And this is particularly helpful because all of the Fast AI documentation, all of the Fast", "tokens": [400, 341, 307, 4098, 4961, 570, 439, 295, 264, 15968, 7318, 14333, 11, 439, 295, 264, 15968], "temperature": 0.0, "avg_logprob": -0.0995780813927744, "compression_ratio": 1.6431718061674008, "no_speech_prob": 1.9525325114955194e-05}, {"id": 286, "seek": 145264, "start": 1459.64, "end": 1464.64, "text": " AI book, and all of the Fast AI courses are also available as notebooks.", "tokens": [7318, 1446, 11, 293, 439, 295, 264, 15968, 7318, 7712, 366, 611, 2435, 382, 43782, 13], "temperature": 0.0, "avg_logprob": -0.0995780813927744, "compression_ratio": 1.6431718061674008, "no_speech_prob": 1.9525325114955194e-05}, {"id": 287, "seek": 145264, "start": 1464.64, "end": 1469.64, "text": " So people can use that as a starting point, or I can say, oh, did you try the code in", "tokens": [407, 561, 393, 764, 300, 382, 257, 2891, 935, 11, 420, 286, 393, 584, 11, 1954, 11, 630, 291, 853, 264, 3089, 294], "temperature": 0.0, "avg_logprob": -0.0995780813927744, "compression_ratio": 1.6431718061674008, "no_speech_prob": 1.9525325114955194e-05}, {"id": 288, "seek": 145264, "start": 1469.64, "end": 1470.64, "text": " the book?", "tokens": [264, 1446, 30], "temperature": 0.0, "avg_logprob": -0.0995780813927744, "compression_ratio": 1.6431718061674008, "no_speech_prob": 1.9525325114955194e-05}, {"id": 289, "seek": 145264, "start": 1470.64, "end": 1475.64, "text": " If you have a non-working example, could you modify the notebook to show us how yours doesn't", "tokens": [759, 291, 362, 257, 2107, 12, 22475, 1365, 11, 727, 291, 16927, 264, 21060, 281, 855, 505, 577, 6342, 1177, 380], "temperature": 0.0, "avg_logprob": -0.0995780813927744, "compression_ratio": 1.6431718061674008, "no_speech_prob": 1.9525325114955194e-05}, {"id": 290, "seek": 145264, "start": 1475.64, "end": 1478.64, "text": " work?", "tokens": [589, 30], "temperature": 0.0, "avg_logprob": -0.0995780813927744, "compression_ratio": 1.6431718061674008, "no_speech_prob": 1.9525325114955194e-05}, {"id": 291, "seek": 145264, "start": 1478.64, "end": 1480.64, "text": " And so forth.", "tokens": [400, 370, 5220, 13], "temperature": 0.0, "avg_logprob": -0.0995780813927744, "compression_ratio": 1.6431718061674008, "no_speech_prob": 1.9525325114955194e-05}, {"id": 292, "seek": 148064, "start": 1480.64, "end": 1487.64, "text": " So rather than saying, how do I copy and paste into Slack or GitHub, the question should be,", "tokens": [407, 2831, 813, 1566, 11, 577, 360, 286, 5055, 293, 9163, 666, 37211, 420, 23331, 11, 264, 1168, 820, 312, 11], "temperature": 0.0, "avg_logprob": -0.07468515855294687, "compression_ratio": 1.7447698744769875, "no_speech_prob": 2.111157482431736e-05}, {"id": 293, "seek": 148064, "start": 1487.64, "end": 1493.64, "text": " how do I understand the problem that a user is having or understand the idea that a user", "tokens": [577, 360, 286, 1223, 264, 1154, 300, 257, 4195, 307, 1419, 420, 1223, 264, 1558, 300, 257, 4195], "temperature": 0.0, "avg_logprob": -0.07468515855294687, "compression_ratio": 1.7447698744769875, "no_speech_prob": 2.111157482431736e-05}, {"id": 294, "seek": 148064, "start": 1493.64, "end": 1494.64, "text": " is telling me about?", "tokens": [307, 3585, 385, 466, 30], "temperature": 0.0, "avg_logprob": -0.07468515855294687, "compression_ratio": 1.7447698744769875, "no_speech_prob": 2.111157482431736e-05}, {"id": 295, "seek": 148064, "start": 1494.64, "end": 1499.64, "text": " And the answer to me is by providing an actual live coding environment, I can see that in.", "tokens": [400, 264, 1867, 281, 385, 307, 538, 6530, 364, 3539, 1621, 17720, 2823, 11, 286, 393, 536, 300, 294, 13], "temperature": 0.0, "avg_logprob": -0.07468515855294687, "compression_ratio": 1.7447698744769875, "no_speech_prob": 2.111157482431736e-05}, {"id": 296, "seek": 148064, "start": 1499.64, "end": 1504.64, "text": " And it's so easy to do with Jupyter.", "tokens": [400, 309, 311, 370, 1858, 281, 360, 365, 22125, 88, 391, 13], "temperature": 0.0, "avg_logprob": -0.07468515855294687, "compression_ratio": 1.7447698744769875, "no_speech_prob": 2.111157482431736e-05}, {"id": 297, "seek": 148064, "start": 1504.64, "end": 1508.64, "text": " Something else I really like about Jupyter is you can use something like what I really", "tokens": [6595, 1646, 286, 534, 411, 466, 22125, 88, 391, 307, 291, 393, 764, 746, 411, 437, 286, 534], "temperature": 0.0, "avg_logprob": -0.07468515855294687, "compression_ratio": 1.7447698744769875, "no_speech_prob": 2.111157482431736e-05}, {"id": 298, "seek": 150864, "start": 1508.64, "end": 1511.64, "text": " like at ReviewMB to look at pull requests.", "tokens": [411, 412, 19954, 47554, 281, 574, 412, 2235, 12475, 13], "temperature": 0.0, "avg_logprob": -0.10167386796739367, "compression_ratio": 1.6752767527675276, "no_speech_prob": 4.39987015852239e-05}, {"id": 299, "seek": 150864, "start": 1511.64, "end": 1515.64, "text": " And pull requests don't just show me the code that's changed, which is fine.", "tokens": [400, 2235, 12475, 500, 380, 445, 855, 385, 264, 3089, 300, 311, 3105, 11, 597, 307, 2489, 13], "temperature": 0.0, "avg_logprob": -0.10167386796739367, "compression_ratio": 1.6752767527675276, "no_speech_prob": 4.39987015852239e-05}, {"id": 300, "seek": 150864, "start": 1515.64, "end": 1516.64, "text": " They do.", "tokens": [814, 360, 13], "temperature": 0.0, "avg_logprob": -0.10167386796739367, "compression_ratio": 1.6752767527675276, "no_speech_prob": 4.39987015852239e-05}, {"id": 301, "seek": 150864, "start": 1516.64, "end": 1517.64, "text": " It's very nice.", "tokens": [467, 311, 588, 1481, 13], "temperature": 0.0, "avg_logprob": -0.10167386796739367, "compression_ratio": 1.6752767527675276, "no_speech_prob": 4.39987015852239e-05}, {"id": 302, "seek": 150864, "start": 1517.64, "end": 1519.64, "text": " But they also show me the outputs that have changed.", "tokens": [583, 436, 611, 855, 385, 264, 23930, 300, 362, 3105, 13], "temperature": 0.0, "avg_logprob": -0.10167386796739367, "compression_ratio": 1.6752767527675276, "no_speech_prob": 4.39987015852239e-05}, {"id": 303, "seek": 150864, "start": 1519.64, "end": 1522.64, "text": " And the documentation is right next to it.", "tokens": [400, 264, 14333, 307, 558, 958, 281, 309, 13], "temperature": 0.0, "avg_logprob": -0.10167386796739367, "compression_ratio": 1.6752767527675276, "no_speech_prob": 4.39987015852239e-05}, {"id": 304, "seek": 150864, "start": 1522.64, "end": 1525.64, "text": " So here's somebody changed a test, right?", "tokens": [407, 510, 311, 2618, 3105, 257, 1500, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.10167386796739367, "compression_ratio": 1.6752767527675276, "no_speech_prob": 4.39987015852239e-05}, {"id": 305, "seek": 150864, "start": 1525.64, "end": 1529.64, "text": " And rather than thinking, oh, I wonder if those scales are any good, and then having", "tokens": [400, 2831, 813, 1953, 11, 1954, 11, 286, 2441, 498, 729, 17408, 366, 604, 665, 11, 293, 550, 1419], "temperature": 0.0, "avg_logprob": -0.10167386796739367, "compression_ratio": 1.6752767527675276, "no_speech_prob": 4.39987015852239e-05}, {"id": 306, "seek": 150864, "start": 1529.64, "end": 1533.64, "text": " to go back and load in their PR and run it, and then have a second version of the code", "tokens": [281, 352, 646, 293, 3677, 294, 641, 11568, 293, 1190, 309, 11, 293, 550, 362, 257, 1150, 3037, 295, 264, 3089], "temperature": 0.0, "avg_logprob": -0.10167386796739367, "compression_ratio": 1.6752767527675276, "no_speech_prob": 4.39987015852239e-05}, {"id": 307, "seek": 153364, "start": 1533.64, "end": 1540.64, "text": " and run that and compare the two, in ReviewMB, I can see them right next to each other.", "tokens": [293, 1190, 300, 293, 6794, 264, 732, 11, 294, 19954, 47554, 11, 286, 393, 536, 552, 558, 958, 281, 1184, 661, 13], "temperature": 0.0, "avg_logprob": -0.07673328263419014, "compression_ratio": 1.703862660944206, "no_speech_prob": 3.763355198316276e-05}, {"id": 308, "seek": 153364, "start": 1540.64, "end": 1545.64, "text": " And I can say, oh yeah, this actually does look like a more clear example to me.", "tokens": [400, 286, 393, 584, 11, 1954, 1338, 11, 341, 767, 775, 574, 411, 257, 544, 1850, 1365, 281, 385, 13], "temperature": 0.0, "avg_logprob": -0.07673328263419014, "compression_ratio": 1.703862660944206, "no_speech_prob": 3.763355198316276e-05}, {"id": 309, "seek": 153364, "start": 1545.64, "end": 1552.64, "text": " And I can see the documentation is right next to it, and I can see exactly what's going on.", "tokens": [400, 286, 393, 536, 264, 14333, 307, 558, 958, 281, 309, 11, 293, 286, 393, 536, 2293, 437, 311, 516, 322, 13], "temperature": 0.0, "avg_logprob": -0.07673328263419014, "compression_ratio": 1.703862660944206, "no_speech_prob": 3.763355198316276e-05}, {"id": 310, "seek": 153364, "start": 1552.64, "end": 1554.64, "text": " There's lots of ways of sharing notebooks.", "tokens": [821, 311, 3195, 295, 2098, 295, 5414, 43782, 13], "temperature": 0.0, "avg_logprob": -0.07673328263419014, "compression_ratio": 1.703862660944206, "no_speech_prob": 3.763355198316276e-05}, {"id": 311, "seek": 153364, "start": 1554.64, "end": 1556.64, "text": " Another is to press this button.", "tokens": [3996, 307, 281, 1886, 341, 2960, 13], "temperature": 0.0, "avg_logprob": -0.07673328263419014, "compression_ratio": 1.703862660944206, "no_speech_prob": 3.763355198316276e-05}, {"id": 312, "seek": 153364, "start": 1556.64, "end": 1558.64, "text": " This is the gistit button.", "tokens": [639, 307, 264, 290, 468, 270, 2960, 13], "temperature": 0.0, "avg_logprob": -0.07673328263419014, "compression_ratio": 1.703862660944206, "no_speech_prob": 3.763355198316276e-05}, {"id": 313, "seek": 153364, "start": 1558.64, "end": 1560.64, "text": " Here's a notebook that I created.", "tokens": [1692, 311, 257, 21060, 300, 286, 2942, 13], "temperature": 0.0, "avg_logprob": -0.07673328263419014, "compression_ratio": 1.703862660944206, "no_speech_prob": 3.763355198316276e-05}, {"id": 314, "seek": 156064, "start": 1560.64, "end": 1563.64, "text": " And you can copy and paste images directly into a notebook.", "tokens": [400, 291, 393, 5055, 293, 9163, 5267, 3838, 666, 257, 21060, 13], "temperature": 0.0, "avg_logprob": -0.05881435473759969, "compression_ratio": 1.6717557251908397, "no_speech_prob": 6.502409814856946e-05}, {"id": 315, "seek": 156064, "start": 1563.64, "end": 1565.64, "text": " So here's one I just copied and pasted in.", "tokens": [407, 510, 311, 472, 286, 445, 25365, 293, 1791, 292, 294, 13], "temperature": 0.0, "avg_logprob": -0.05881435473759969, "compression_ratio": 1.6717557251908397, "no_speech_prob": 6.502409814856946e-05}, {"id": 316, "seek": 156064, "start": 1565.64, "end": 1570.64, "text": " And if I click that button, then it automatically gives me a shareable gist URL.", "tokens": [400, 498, 286, 2052, 300, 2960, 11, 550, 309, 6772, 2709, 385, 257, 2073, 712, 290, 468, 12905, 13], "temperature": 0.0, "avg_logprob": -0.05881435473759969, "compression_ratio": 1.6717557251908397, "no_speech_prob": 6.502409814856946e-05}, {"id": 317, "seek": 156064, "start": 1570.64, "end": 1572.64, "text": " So I can paste that into Slack.", "tokens": [407, 286, 393, 9163, 300, 666, 37211, 13], "temperature": 0.0, "avg_logprob": -0.05881435473759969, "compression_ratio": 1.6717557251908397, "no_speech_prob": 6.502409814856946e-05}, {"id": 318, "seek": 156064, "start": 1572.64, "end": 1577.64, "text": " That's at least as easy as copying and pasting from IPython.", "tokens": [663, 311, 412, 1935, 382, 1858, 382, 27976, 293, 1791, 278, 490, 8671, 88, 11943, 13], "temperature": 0.0, "avg_logprob": -0.05881435473759969, "compression_ratio": 1.6717557251908397, "no_speech_prob": 6.502409814856946e-05}, {"id": 319, "seek": 156064, "start": 1577.64, "end": 1583.64, "text": " And of course, I get the benefit that I'm copying and pasting not just text, but pictures.", "tokens": [400, 295, 1164, 11, 286, 483, 264, 5121, 300, 286, 478, 27976, 293, 1791, 278, 406, 445, 2487, 11, 457, 5242, 13], "temperature": 0.0, "avg_logprob": -0.05881435473759969, "compression_ratio": 1.6717557251908397, "no_speech_prob": 6.502409814856946e-05}, {"id": 320, "seek": 156064, "start": 1583.64, "end": 1588.64, "text": " And a lot of us are working with things other than just text nowadays.", "tokens": [400, 257, 688, 295, 505, 366, 1364, 365, 721, 661, 813, 445, 2487, 13434, 13], "temperature": 0.0, "avg_logprob": -0.05881435473759969, "compression_ratio": 1.6717557251908397, "no_speech_prob": 6.502409814856946e-05}, {"id": 321, "seek": 158864, "start": 1588.64, "end": 1592.64, "text": " We want to be able to show plots, you know, histograms of things and analytics.", "tokens": [492, 528, 281, 312, 1075, 281, 855, 28609, 11, 291, 458, 11, 49816, 82, 295, 721, 293, 15370, 13], "temperature": 0.0, "avg_logprob": -0.08456588891836313, "compression_ratio": 1.81496062992126, "no_speech_prob": 4.908357732347213e-05}, {"id": 322, "seek": 158864, "start": 1592.64, "end": 1593.64, "text": " We want to be able to show pictures.", "tokens": [492, 528, 281, 312, 1075, 281, 855, 5242, 13], "temperature": 0.0, "avg_logprob": -0.08456588891836313, "compression_ratio": 1.81496062992126, "no_speech_prob": 4.908357732347213e-05}, {"id": 323, "seek": 158864, "start": 1593.64, "end": 1595.64, "text": " We want to be able to show videos.", "tokens": [492, 528, 281, 312, 1075, 281, 855, 2145, 13], "temperature": 0.0, "avg_logprob": -0.08456588891836313, "compression_ratio": 1.81496062992126, "no_speech_prob": 4.908357732347213e-05}, {"id": 324, "seek": 158864, "start": 1595.64, "end": 1598.64, "text": " We're not just working with text all the time.", "tokens": [492, 434, 406, 445, 1364, 365, 2487, 439, 264, 565, 13], "temperature": 0.0, "avg_logprob": -0.08456588891836313, "compression_ratio": 1.81496062992126, "no_speech_prob": 4.908357732347213e-05}, {"id": 325, "seek": 158864, "start": 1598.64, "end": 1603.64, "text": " And so with something like this, you can really show a much more complete example a lot of the time.", "tokens": [400, 370, 365, 746, 411, 341, 11, 291, 393, 534, 855, 257, 709, 544, 3566, 1365, 257, 688, 295, 264, 565, 13], "temperature": 0.0, "avg_logprob": -0.08456588891836313, "compression_ratio": 1.81496062992126, "no_speech_prob": 4.908357732347213e-05}, {"id": 326, "seek": 158864, "start": 1603.64, "end": 1609.64, "text": " It's really nice and easy to do.", "tokens": [467, 311, 534, 1481, 293, 1858, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.08456588891836313, "compression_ratio": 1.81496062992126, "no_speech_prob": 4.908357732347213e-05}, {"id": 327, "seek": 158864, "start": 1609.64, "end": 1613.64, "text": " Another concern, as you can see, we've still got our little pictures down here.", "tokens": [3996, 3136, 11, 382, 291, 393, 536, 11, 321, 600, 920, 658, 527, 707, 5242, 760, 510, 13], "temperature": 0.0, "avg_logprob": -0.08456588891836313, "compression_ratio": 1.81496062992126, "no_speech_prob": 4.908357732347213e-05}, {"id": 328, "seek": 158864, "start": 1613.64, "end": 1615.64, "text": " This is still Joel's code.", "tokens": [639, 307, 920, 21522, 311, 3089, 13], "temperature": 0.0, "avg_logprob": -0.08456588891836313, "compression_ratio": 1.81496062992126, "no_speech_prob": 4.908357732347213e-05}, {"id": 329, "seek": 158864, "start": 1615.64, "end": 1616.64, "text": " Sorry, Joel's slides.", "tokens": [4919, 11, 21522, 311, 9788, 13], "temperature": 0.0, "avg_logprob": -0.08456588891836313, "compression_ratio": 1.81496062992126, "no_speech_prob": 4.908357732347213e-05}, {"id": 330, "seek": 161664, "start": 1616.64, "end": 1625.64, "text": " Another concern he had was that he thinks that notebooks are harder to reproduce.", "tokens": [3996, 3136, 415, 632, 390, 300, 415, 7309, 300, 43782, 366, 6081, 281, 29501, 13], "temperature": 0.0, "avg_logprob": -0.08304584858029387, "compression_ratio": 1.6, "no_speech_prob": 3.763440327020362e-05}, {"id": 331, "seek": 161664, "start": 1625.64, "end": 1629.64, "text": " And this one he didn't really explain why he thought that way.", "tokens": [400, 341, 472, 415, 994, 380, 534, 2903, 983, 415, 1194, 300, 636, 13], "temperature": 0.0, "avg_logprob": -0.08304584858029387, "compression_ratio": 1.6, "no_speech_prob": 3.763440327020362e-05}, {"id": 332, "seek": 161664, "start": 1629.64, "end": 1633.64, "text": " And I don't fully understand the thought process here.", "tokens": [400, 286, 500, 380, 4498, 1223, 264, 1194, 1399, 510, 13], "temperature": 0.0, "avg_logprob": -0.08304584858029387, "compression_ratio": 1.6, "no_speech_prob": 3.763440327020362e-05}, {"id": 333, "seek": 161664, "start": 1633.64, "end": 1639.64, "text": " All of the same ways that you can use for dependencies in regular Python libraries,", "tokens": [1057, 295, 264, 912, 2098, 300, 291, 393, 764, 337, 36606, 294, 3890, 15329, 15148, 11], "temperature": 0.0, "avg_logprob": -0.08304584858029387, "compression_ratio": 1.6, "no_speech_prob": 3.763440327020362e-05}, {"id": 334, "seek": 161664, "start": 1639.64, "end": 1644.64, "text": " like requirements.text or environment.yaml or whatever, or setup.py,", "tokens": [411, 7728, 13, 25111, 420, 2823, 13, 88, 335, 75, 420, 2035, 11, 420, 8657, 13, 8200, 11], "temperature": 0.0, "avg_logprob": -0.08304584858029387, "compression_ratio": 1.6, "no_speech_prob": 3.763440327020362e-05}, {"id": 335, "seek": 164464, "start": 1644.64, "end": 1648.64, "text": " you can use exactly the same thing for notebooks.", "tokens": [291, 393, 764, 2293, 264, 912, 551, 337, 43782, 13], "temperature": 0.0, "avg_logprob": -0.12549616626857482, "compression_ratio": 1.6340425531914893, "no_speech_prob": 2.5865838324534707e-05}, {"id": 336, "seek": 164464, "start": 1648.64, "end": 1654.64, "text": " But in practice, though, you know, notebooks I really love because when you provide a notebook,", "tokens": [583, 294, 3124, 11, 1673, 11, 291, 458, 11, 43782, 286, 534, 959, 570, 562, 291, 2893, 257, 21060, 11], "temperature": 0.0, "avg_logprob": -0.12549616626857482, "compression_ratio": 1.6340425531914893, "no_speech_prob": 2.5865838324534707e-05}, {"id": 337, "seek": 164464, "start": 1654.64, "end": 1659.64, "text": " you can just provide a cell at the top, which creates the environment you need.", "tokens": [291, 393, 445, 2893, 257, 2815, 412, 264, 1192, 11, 597, 7829, 264, 2823, 291, 643, 13], "temperature": 0.0, "avg_logprob": -0.12549616626857482, "compression_ratio": 1.6340425531914893, "no_speech_prob": 2.5865838324534707e-05}, {"id": 338, "seek": 164464, "start": 1659.64, "end": 1667.64, "text": " So, for example, you can open any chapter of the Fast.ai Practical Declaring for Coders book", "tokens": [407, 11, 337, 1365, 11, 291, 393, 1269, 604, 7187, 295, 264, 15968, 13, 1301, 19170, 804, 1346, 3474, 1921, 337, 383, 378, 433, 1446], "temperature": 0.0, "avg_logprob": -0.12549616626857482, "compression_ratio": 1.6340425531914893, "no_speech_prob": 2.5865838324534707e-05}, {"id": 339, "seek": 164464, "start": 1667.64, "end": 1671.64, "text": " directly on Colab by clicking on a link without any installation.", "tokens": [3838, 322, 4004, 455, 538, 9697, 322, 257, 2113, 1553, 604, 13260, 13], "temperature": 0.0, "avg_logprob": -0.12549616626857482, "compression_ratio": 1.6340425531914893, "no_speech_prob": 2.5865838324534707e-05}, {"id": 340, "seek": 167164, "start": 1671.64, "end": 1676.64, "text": " And the first line, the first cell, installs everything you need.", "tokens": [400, 264, 700, 1622, 11, 264, 700, 2815, 11, 3625, 82, 1203, 291, 643, 13], "temperature": 0.0, "avg_logprob": -0.09396476045661016, "compression_ratio": 1.7875, "no_speech_prob": 2.7533558750292286e-05}, {"id": 341, "seek": 167164, "start": 1676.64, "end": 1678.64, "text": " And away you go.", "tokens": [400, 1314, 291, 352, 13], "temperature": 0.0, "avg_logprob": -0.09396476045661016, "compression_ratio": 1.7875, "no_speech_prob": 2.7533558750292286e-05}, {"id": 342, "seek": 167164, "start": 1678.64, "end": 1684.64, "text": " So really, to me, I feel like notebooks make it much easier to ensure that you have something", "tokens": [407, 534, 11, 281, 385, 11, 286, 841, 411, 43782, 652, 309, 709, 3571, 281, 5586, 300, 291, 362, 746], "temperature": 0.0, "avg_logprob": -0.09396476045661016, "compression_ratio": 1.7875, "no_speech_prob": 2.7533558750292286e-05}, {"id": 343, "seek": 167164, "start": 1684.64, "end": 1686.64, "text": " that's reproducible.", "tokens": [300, 311, 11408, 32128, 13], "temperature": 0.0, "avg_logprob": -0.09396476045661016, "compression_ratio": 1.7875, "no_speech_prob": 2.7533558750292286e-05}, {"id": 344, "seek": 167164, "start": 1686.64, "end": 1693.64, "text": " And you can also see what the programmer did step by step to really make sure that what you're seeing", "tokens": [400, 291, 393, 611, 536, 437, 264, 32116, 630, 1823, 538, 1823, 281, 534, 652, 988, 300, 437, 291, 434, 2577], "temperature": 0.0, "avg_logprob": -0.09396476045661016, "compression_ratio": 1.7875, "no_speech_prob": 2.7533558750292286e-05}, {"id": 345, "seek": 167164, "start": 1693.64, "end": 1695.64, "text": " is what they were seeing.", "tokens": [307, 437, 436, 645, 2577, 13], "temperature": 0.0, "avg_logprob": -0.09396476045661016, "compression_ratio": 1.7875, "no_speech_prob": 2.7533558750292286e-05}, {"id": 346, "seek": 167164, "start": 1695.64, "end": 1697.64, "text": " Look, you can certainly make bad notebooks.", "tokens": [2053, 11, 291, 393, 3297, 652, 1578, 43782, 13], "temperature": 0.0, "avg_logprob": -0.09396476045661016, "compression_ratio": 1.7875, "no_speech_prob": 2.7533558750292286e-05}, {"id": 347, "seek": 167164, "start": 1697.64, "end": 1700.64, "text": " You can certainly provide bad reproducibility environments.", "tokens": [509, 393, 3297, 2893, 1578, 11408, 537, 39802, 12388, 13], "temperature": 0.0, "avg_logprob": -0.09396476045661016, "compression_ratio": 1.7875, "no_speech_prob": 2.7533558750292286e-05}, {"id": 348, "seek": 170064, "start": 1700.64, "end": 1703.64, "text": " But I don't think it's anything to do with notebooks themselves.", "tokens": [583, 286, 500, 380, 519, 309, 311, 1340, 281, 360, 365, 43782, 2969, 13], "temperature": 0.0, "avg_logprob": -0.0765396107684125, "compression_ratio": 1.6696428571428572, "no_speech_prob": 3.7631933082593605e-05}, {"id": 349, "seek": 170064, "start": 1703.64, "end": 1712.64, "text": " You know, it's, to me, this is an environment that actually makes that easier to do well.", "tokens": [509, 458, 11, 309, 311, 11, 281, 385, 11, 341, 307, 364, 2823, 300, 767, 1669, 300, 3571, 281, 360, 731, 13], "temperature": 0.0, "avg_logprob": -0.0765396107684125, "compression_ratio": 1.6696428571428572, "no_speech_prob": 3.7631933082593605e-05}, {"id": 350, "seek": 170064, "start": 1712.64, "end": 1719.64, "text": " So the other thing that Joel talked about quite a lot was this idea of good software engineering.", "tokens": [407, 264, 661, 551, 300, 21522, 2825, 466, 1596, 257, 688, 390, 341, 1558, 295, 665, 4722, 7043, 13], "temperature": 0.0, "avg_logprob": -0.0765396107684125, "compression_ratio": 1.6696428571428572, "no_speech_prob": 3.7631933082593605e-05}, {"id": 351, "seek": 170064, "start": 1719.64, "end": 1726.64, "text": " And he made some pretty bold claims that good software engineering can't be done or is extremely", "tokens": [400, 415, 1027, 512, 1238, 11928, 9441, 300, 665, 4722, 7043, 393, 380, 312, 1096, 420, 307, 4664], "temperature": 0.0, "avg_logprob": -0.0765396107684125, "compression_ratio": 1.6696428571428572, "no_speech_prob": 3.7631933082593605e-05}, {"id": 352, "seek": 170064, "start": 1726.64, "end": 1729.64, "text": " hard to do in notebooks.", "tokens": [1152, 281, 360, 294, 43782, 13], "temperature": 0.0, "avg_logprob": -0.0765396107684125, "compression_ratio": 1.6696428571428572, "no_speech_prob": 3.7631933082593605e-05}, {"id": 353, "seek": 172964, "start": 1729.64, "end": 1733.64, "text": " And he used these characters quite a lot, these smurfs.", "tokens": [400, 415, 1143, 613, 4342, 1596, 257, 688, 11, 613, 899, 374, 16883, 13], "temperature": 0.0, "avg_logprob": -0.0876474380493164, "compression_ratio": 1.5603864734299517, "no_speech_prob": 0.00018230144632980227}, {"id": 354, "seek": 172964, "start": 1733.64, "end": 1741.64, "text": " And basically, you know, he's saying, like, you should all follow the rules of good software engineering.", "tokens": [400, 1936, 11, 291, 458, 11, 415, 311, 1566, 11, 411, 11, 291, 820, 439, 1524, 264, 4474, 295, 665, 4722, 7043, 13], "temperature": 0.0, "avg_logprob": -0.0876474380493164, "compression_ratio": 1.5603864734299517, "no_speech_prob": 0.00018230144632980227}, {"id": 355, "seek": 172964, "start": 1741.64, "end": 1747.64, "text": " But, you know, it's kind of like this idea that you should copy and paste code and outputs into Slack.", "tokens": [583, 11, 291, 458, 11, 309, 311, 733, 295, 411, 341, 1558, 300, 291, 820, 5055, 293, 9163, 3089, 293, 23930, 666, 37211, 13], "temperature": 0.0, "avg_logprob": -0.0876474380493164, "compression_ratio": 1.5603864734299517, "no_speech_prob": 0.00018230144632980227}, {"id": 356, "seek": 172964, "start": 1747.64, "end": 1751.64, "text": " You know, that's how people might have done things before.", "tokens": [509, 458, 11, 300, 311, 577, 561, 1062, 362, 1096, 721, 949, 13], "temperature": 0.0, "avg_logprob": -0.0876474380493164, "compression_ratio": 1.5603864734299517, "no_speech_prob": 0.00018230144632980227}, {"id": 357, "seek": 175164, "start": 1751.64, "end": 1759.64, "text": " But, you know, maybe the rules of software engineering in a dead coding environment or in a line-oriented", "tokens": [583, 11, 291, 458, 11, 1310, 264, 4474, 295, 4722, 7043, 294, 257, 3116, 17720, 2823, 420, 294, 257, 1622, 12, 27414], "temperature": 0.0, "avg_logprob": -0.11171048396342509, "compression_ratio": 1.6318407960199004, "no_speech_prob": 2.1442139768623747e-05}, {"id": 358, "seek": 175164, "start": 1759.64, "end": 1769.64, "text": " rebel or whatever are not the same, particularly, you know, compared to a dynamic language in a live coding environment.", "tokens": [28293, 420, 2035, 366, 406, 264, 912, 11, 4098, 11, 291, 458, 11, 5347, 281, 257, 8546, 2856, 294, 257, 1621, 17720, 2823, 13], "temperature": 0.0, "avg_logprob": -0.11171048396342509, "compression_ratio": 1.6318407960199004, "no_speech_prob": 2.1442139768623747e-05}, {"id": 359, "seek": 175164, "start": 1769.64, "end": 1778.64, "text": " And also the rules for a data scientist who's doing research and their focus is on speed of iteration", "tokens": [400, 611, 264, 4474, 337, 257, 1412, 12662, 567, 311, 884, 2132, 293, 641, 1879, 307, 322, 3073, 295, 24784], "temperature": 0.0, "avg_logprob": -0.11171048396342509, "compression_ratio": 1.6318407960199004, "no_speech_prob": 2.1442139768623747e-05}, {"id": 360, "seek": 177864, "start": 1778.64, "end": 1788.64, "text": " and on rapidly eyeballing visualizations to see whether their microscopy images are actually getting easier to see", "tokens": [293, 322, 12910, 38868, 278, 5056, 14455, 281, 536, 1968, 641, 30483, 88, 5267, 366, 767, 1242, 3571, 281, 536], "temperature": 0.0, "avg_logprob": -0.11551229770366962, "compression_ratio": 1.4858490566037736, "no_speech_prob": 4.538904977380298e-05}, {"id": 361, "seek": 177864, "start": 1788.64, "end": 1789.64, "text": " or harder to see.", "tokens": [420, 6081, 281, 536, 13], "temperature": 0.0, "avg_logprob": -0.11551229770366962, "compression_ratio": 1.4858490566037736, "no_speech_prob": 4.538904977380298e-05}, {"id": 362, "seek": 177864, "start": 1789.64, "end": 1793.64, "text": " To take an example of a project I've been involved in a lot recently.", "tokens": [1407, 747, 364, 1365, 295, 257, 1716, 286, 600, 668, 3288, 294, 257, 688, 3938, 13], "temperature": 0.0, "avg_logprob": -0.11551229770366962, "compression_ratio": 1.4858490566037736, "no_speech_prob": 4.538904977380298e-05}, {"id": 363, "seek": 177864, "start": 1793.64, "end": 1801.64, "text": " These are kind of going to be different to the rules, the so-called rules, of somebody who's creating a CRUD app", "tokens": [1981, 366, 733, 295, 516, 281, 312, 819, 281, 264, 4474, 11, 264, 370, 12, 11880, 4474, 11, 295, 2618, 567, 311, 4084, 257, 14123, 9438, 724], "temperature": 0.0, "avg_logprob": -0.11551229770366962, "compression_ratio": 1.4858490566037736, "no_speech_prob": 4.538904977380298e-05}, {"id": 364, "seek": 180164, "start": 1801.64, "end": 1808.64, "text": " or an e-commerce app to send a payment to a Stripe API.", "tokens": [420, 364, 308, 12, 26926, 724, 281, 2845, 257, 10224, 281, 257, 20390, 494, 9362, 13], "temperature": 0.0, "avg_logprob": -0.08856241467972877, "compression_ratio": 1.4838709677419355, "no_speech_prob": 2.1781055693281814e-05}, {"id": 365, "seek": 180164, "start": 1808.64, "end": 1818.64, "text": " So I think we've got to be careful about the idea of rules and think about domains and domain expertise and environments.", "tokens": [407, 286, 519, 321, 600, 658, 281, 312, 5026, 466, 264, 1558, 295, 4474, 293, 519, 466, 25514, 293, 9274, 11769, 293, 12388, 13], "temperature": 0.0, "avg_logprob": -0.08856241467972877, "compression_ratio": 1.4838709677419355, "no_speech_prob": 2.1781055693281814e-05}, {"id": 366, "seek": 180164, "start": 1818.64, "end": 1821.64, "text": " So here's another slide from Joel.", "tokens": [407, 510, 311, 1071, 4137, 490, 21522, 13], "temperature": 0.0, "avg_logprob": -0.08856241467972877, "compression_ratio": 1.4838709677419355, "no_speech_prob": 2.1781055693281814e-05}, {"id": 367, "seek": 180164, "start": 1821.64, "end": 1825.64, "text": " And his concern was that notebooks are not good for modularity.", "tokens": [400, 702, 3136, 390, 300, 43782, 366, 406, 665, 337, 31111, 507, 13], "temperature": 0.0, "avg_logprob": -0.08856241467972877, "compression_ratio": 1.4838709677419355, "no_speech_prob": 2.1781055693281814e-05}, {"id": 368, "seek": 182564, "start": 1825.64, "end": 1831.64, "text": " And he's giving an example here of some of his code, which he's saying is very nicely modular.", "tokens": [400, 415, 311, 2902, 364, 1365, 510, 295, 512, 295, 702, 3089, 11, 597, 415, 311, 1566, 307, 588, 9594, 31111, 13], "temperature": 0.0, "avg_logprob": -0.08397363879016995, "compression_ratio": 1.6355555555555557, "no_speech_prob": 4.683296356233768e-05}, {"id": 369, "seek": 182564, "start": 1831.64, "end": 1839.64, "text": " I mean, sure, but why can't you do the exact same thing in notebooks?", "tokens": [286, 914, 11, 988, 11, 457, 983, 393, 380, 291, 360, 264, 1900, 912, 551, 294, 43782, 30], "temperature": 0.0, "avg_logprob": -0.08397363879016995, "compression_ratio": 1.6355555555555557, "no_speech_prob": 4.683296356233768e-05}, {"id": 370, "seek": 182564, "start": 1839.64, "end": 1845.64, "text": " And in fact, Fast.ai, the library I told you about that we wrote entirely in notebooks,", "tokens": [400, 294, 1186, 11, 15968, 13, 1301, 11, 264, 6405, 286, 1907, 291, 466, 300, 321, 4114, 7696, 294, 43782, 11], "temperature": 0.0, "avg_logprob": -0.08397363879016995, "compression_ratio": 1.6355555555555557, "no_speech_prob": 4.683296356233768e-05}, {"id": 371, "seek": 182564, "start": 1845.64, "end": 1854.64, "text": " actually the modularity is so good that we have a peer-reviewed paper about the approach to modularity that we took", "tokens": [767, 264, 31111, 507, 307, 370, 665, 300, 321, 362, 257, 15108, 12, 265, 1759, 292, 3035, 466, 264, 3109, 281, 31111, 507, 300, 321, 1890], "temperature": 0.0, "avg_logprob": -0.08397363879016995, "compression_ratio": 1.6355555555555557, "no_speech_prob": 4.683296356233768e-05}, {"id": 372, "seek": 185464, "start": 1854.64, "end": 1858.64, "text": " and about how the kind of decoupled API that we created.", "tokens": [293, 466, 577, 264, 733, 295, 979, 263, 15551, 9362, 300, 321, 2942, 13], "temperature": 0.0, "avg_logprob": -0.06445402019428757, "compression_ratio": 1.6414342629482073, "no_speech_prob": 2.0461577150854282e-05}, {"id": 373, "seek": 185464, "start": 1858.64, "end": 1866.64, "text": " I'm sure it's not perfect, but a lot of people have used it and have liked it and people are studying it as an example of modularity.", "tokens": [286, 478, 988, 309, 311, 406, 2176, 11, 457, 257, 688, 295, 561, 362, 1143, 309, 293, 362, 4501, 309, 293, 561, 366, 7601, 309, 382, 364, 1365, 295, 31111, 507, 13], "temperature": 0.0, "avg_logprob": -0.06445402019428757, "compression_ratio": 1.6414342629482073, "no_speech_prob": 2.0461577150854282e-05}, {"id": 374, "seek": 185464, "start": 1866.64, "end": 1874.64, "text": " It's definitely not the case that notebooks somehow make it impossible or even difficult to create modular code.", "tokens": [467, 311, 2138, 406, 264, 1389, 300, 43782, 6063, 652, 309, 6243, 420, 754, 2252, 281, 1884, 31111, 3089, 13], "temperature": 0.0, "avg_logprob": -0.06445402019428757, "compression_ratio": 1.6414342629482073, "no_speech_prob": 2.0461577150854282e-05}, {"id": 375, "seek": 185464, "start": 1874.64, "end": 1876.64, "text": " I'd say the same thing about testability.", "tokens": [286, 1116, 584, 264, 912, 551, 466, 1500, 2310, 13], "temperature": 0.0, "avg_logprob": -0.06445402019428757, "compression_ratio": 1.6414342629482073, "no_speech_prob": 2.0461577150854282e-05}, {"id": 376, "seek": 185464, "start": 1876.64, "end": 1880.64, "text": " I don't know if this is from Joel's tests. I guess it probably is.", "tokens": [286, 500, 380, 458, 498, 341, 307, 490, 21522, 311, 6921, 13, 286, 2041, 309, 1391, 307, 13], "temperature": 0.0, "avg_logprob": -0.06445402019428757, "compression_ratio": 1.6414342629482073, "no_speech_prob": 2.0461577150854282e-05}, {"id": 377, "seek": 188064, "start": 1880.64, "end": 1884.64, "text": " Again, this is one of his slides. He's showing here examples of tests.", "tokens": [3764, 11, 341, 307, 472, 295, 702, 9788, 13, 634, 311, 4099, 510, 5110, 295, 6921, 13], "temperature": 0.0, "avg_logprob": -0.07657755527299703, "compression_ratio": 1.6406926406926408, "no_speech_prob": 1.2218432857480366e-05}, {"id": 378, "seek": 188064, "start": 1884.64, "end": 1886.64, "text": " Tests are great.", "tokens": [314, 4409, 366, 869, 13], "temperature": 0.0, "avg_logprob": -0.07657755527299703, "compression_ratio": 1.6406926406926408, "no_speech_prob": 1.2218432857480366e-05}, {"id": 379, "seek": 188064, "start": 1886.64, "end": 1892.64, "text": " But in this kind of regular approach to coding and these dead coding environments,", "tokens": [583, 294, 341, 733, 295, 3890, 3109, 281, 17720, 293, 613, 3116, 17720, 12388, 11], "temperature": 0.0, "avg_logprob": -0.07657755527299703, "compression_ratio": 1.6406926406926408, "no_speech_prob": 1.2218432857480366e-05}, {"id": 380, "seek": 188064, "start": 1892.64, "end": 1897.64, "text": " the tests live separately to the code that's being tested.", "tokens": [264, 6921, 1621, 14759, 281, 264, 3089, 300, 311, 885, 8246, 13], "temperature": 0.0, "avg_logprob": -0.07657755527299703, "compression_ratio": 1.6406926406926408, "no_speech_prob": 1.2218432857480366e-05}, {"id": 381, "seek": 188064, "start": 1897.64, "end": 1903.64, "text": " And it's very easy for somebody to look at the code and not even notice the tests,", "tokens": [400, 309, 311, 588, 1858, 337, 2618, 281, 574, 412, 264, 3089, 293, 406, 754, 3449, 264, 6921, 11], "temperature": 0.0, "avg_logprob": -0.07657755527299703, "compression_ratio": 1.6406926406926408, "no_speech_prob": 1.2218432857480366e-05}, {"id": 382, "seek": 188064, "start": 1903.64, "end": 1906.64, "text": " or they'll have to kind of flick back and forward between the two.", "tokens": [420, 436, 603, 362, 281, 733, 295, 22774, 646, 293, 2128, 1296, 264, 732, 13], "temperature": 0.0, "avg_logprob": -0.07657755527299703, "compression_ratio": 1.6406926406926408, "no_speech_prob": 1.2218432857480366e-05}, {"id": 383, "seek": 190664, "start": 1906.64, "end": 1913.64, "text": " And it's not easy to connect which test is really working on which part of the code.", "tokens": [400, 309, 311, 406, 1858, 281, 1745, 597, 1500, 307, 534, 1364, 322, 597, 644, 295, 264, 3089, 13], "temperature": 0.0, "avg_logprob": -0.14567463214580828, "compression_ratio": 1.5294117647058822, "no_speech_prob": 3.763436689041555e-05}, {"id": 384, "seek": 190664, "start": 1913.64, "end": 1923.64, "text": " Whereas in notebooks and also with NBDEV in particular, the tests live right next to the thing they're testing.", "tokens": [13813, 294, 43782, 293, 611, 365, 426, 33, 22296, 53, 294, 1729, 11, 264, 6921, 1621, 558, 958, 281, 264, 551, 436, 434, 4997, 13], "temperature": 0.0, "avg_logprob": -0.14567463214580828, "compression_ratio": 1.5294117647058822, "no_speech_prob": 3.763436689041555e-05}, {"id": 385, "seek": 190664, "start": 1923.64, "end": 1928.64, "text": " And they'll include pros explaining what it is they're testing.", "tokens": [400, 436, 603, 4090, 6267, 13468, 437, 309, 307, 436, 434, 4997, 13], "temperature": 0.0, "avg_logprob": -0.14567463214580828, "compression_ratio": 1.5294117647058822, "no_speech_prob": 3.763436689041555e-05}, {"id": 386, "seek": 192864, "start": 1928.64, "end": 1936.64, "text": " So here we've created a thing called unbuffered server. I think it was in the cell above the one I took a screenshot of here.", "tokens": [407, 510, 321, 600, 2942, 257, 551, 1219, 517, 65, 1245, 4073, 7154, 13, 286, 519, 309, 390, 294, 264, 2815, 3673, 264, 472, 286, 1890, 257, 27712, 295, 510, 13], "temperature": 0.0, "avg_logprob": -0.12419533729553223, "compression_ratio": 1.7210300429184548, "no_speech_prob": 2.7965254048467614e-05}, {"id": 387, "seek": 192864, "start": 1936.64, "end": 1941.64, "text": " And so here I've created a test handler to test it that sends a response and writes OK.", "tokens": [400, 370, 510, 286, 600, 2942, 257, 1500, 41967, 281, 1500, 309, 300, 14790, 257, 4134, 293, 13657, 2264, 13], "temperature": 0.0, "avg_logprob": -0.12419533729553223, "compression_ratio": 1.7210300429184548, "no_speech_prob": 2.7965254048467614e-05}, {"id": 388, "seek": 192864, "start": 1941.64, "end": 1950.64, "text": " And here's something that checks whether, you know, that starts a server and then checks whether it actually receives that OK or not.", "tokens": [400, 510, 311, 746, 300, 13834, 1968, 11, 291, 458, 11, 300, 3719, 257, 7154, 293, 550, 13834, 1968, 309, 767, 20717, 300, 2264, 420, 406, 13], "temperature": 0.0, "avg_logprob": -0.12419533729553223, "compression_ratio": 1.7210300429184548, "no_speech_prob": 2.7965254048467614e-05}, {"id": 389, "seek": 192864, "start": 1950.64, "end": 1953.64, "text": " So it's really nice having the tests in the notebook.", "tokens": [407, 309, 311, 534, 1481, 1419, 264, 6921, 294, 264, 21060, 13], "temperature": 0.0, "avg_logprob": -0.12419533729553223, "compression_ratio": 1.7210300429184548, "no_speech_prob": 2.7965254048467614e-05}, {"id": 390, "seek": 195364, "start": 1953.64, "end": 1961.64, "text": " And then NBDEV provides a way to run all the tests across lots of notebooks and report on the overall result.", "tokens": [400, 550, 426, 33, 22296, 53, 6417, 257, 636, 281, 1190, 439, 264, 6921, 2108, 3195, 295, 43782, 293, 2275, 322, 264, 4787, 1874, 13], "temperature": 0.0, "avg_logprob": -0.047602427374456344, "compression_ratio": 1.6008583690987124, "no_speech_prob": 3.2695865229470655e-05}, {"id": 391, "seek": 195364, "start": 1961.64, "end": 1966.64, "text": " And that can be run in continuous integration and NBDEV gives you that actually out of the box.", "tokens": [400, 300, 393, 312, 1190, 294, 10957, 10980, 293, 426, 33, 22296, 53, 2709, 291, 300, 767, 484, 295, 264, 2424, 13], "temperature": 0.0, "avg_logprob": -0.047602427374456344, "compression_ratio": 1.6008583690987124, "no_speech_prob": 3.2695865229470655e-05}, {"id": 392, "seek": 195364, "start": 1966.64, "end": 1973.64, "text": " If you use the NBDEV template, you get this kind of continuous integration testing for free.", "tokens": [759, 291, 764, 264, 426, 33, 22296, 53, 12379, 11, 291, 483, 341, 733, 295, 10957, 10980, 4997, 337, 1737, 13], "temperature": 0.0, "avg_logprob": -0.047602427374456344, "compression_ratio": 1.6008583690987124, "no_speech_prob": 3.2695865229470655e-05}, {"id": 393, "seek": 195364, "start": 1973.64, "end": 1979.64, "text": " You don't have anything to do. It just works, which I think is super cool.", "tokens": [509, 500, 380, 362, 1340, 281, 360, 13, 467, 445, 1985, 11, 597, 286, 519, 307, 1687, 1627, 13], "temperature": 0.0, "avg_logprob": -0.047602427374456344, "compression_ratio": 1.6008583690987124, "no_speech_prob": 3.2695865229470655e-05}, {"id": 394, "seek": 197964, "start": 1979.64, "end": 1993.64, "text": " Another of Joel's concerns from his slides is that notebooks somehow encourage a less sophisticated approach to learning.", "tokens": [3996, 295, 21522, 311, 7389, 490, 702, 9788, 307, 300, 43782, 6063, 5373, 257, 1570, 16950, 3109, 281, 2539, 13], "temperature": 0.0, "avg_logprob": -0.08074909640896705, "compression_ratio": 1.4594594594594594, "no_speech_prob": 1.4970614756748546e-05}, {"id": 395, "seek": 197964, "start": 1993.64, "end": 1996.64, "text": " So hit shift enter to execute a cell and go to the next one.", "tokens": [407, 2045, 5513, 3242, 281, 14483, 257, 2815, 293, 352, 281, 264, 958, 472, 13], "temperature": 0.0, "avg_logprob": -0.08074909640896705, "compression_ratio": 1.4594594594594594, "no_speech_prob": 1.4970614756748546e-05}, {"id": 396, "seek": 197964, "start": 1996.64, "end": 2003.64, "text": " Maybe people just do that without thinking. I mean, it's possible people could do that.", "tokens": [2704, 561, 445, 360, 300, 1553, 1953, 13, 286, 914, 11, 309, 311, 1944, 561, 727, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.08074909640896705, "compression_ratio": 1.4594594594594594, "no_speech_prob": 1.4970614756748546e-05}, {"id": 397, "seek": 200364, "start": 2003.64, "end": 2009.64, "text": " I would say even that is better than people just reading the text and having nothing to do.", "tokens": [286, 576, 584, 754, 300, 307, 1101, 813, 561, 445, 3760, 264, 2487, 293, 1419, 1825, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.06480556015574604, "compression_ratio": 1.8211382113821137, "no_speech_prob": 1.9832308680634014e-05}, {"id": 398, "seek": 200364, "start": 2009.64, "end": 2019.64, "text": " But as I described, actually what we do is we have a little script that just removes all of the pros except for headings and all of the outputs.", "tokens": [583, 382, 286, 7619, 11, 767, 437, 321, 360, 307, 321, 362, 257, 707, 5755, 300, 445, 30445, 439, 295, 264, 6267, 3993, 337, 1378, 1109, 293, 439, 295, 264, 23930, 13], "temperature": 0.0, "avg_logprob": -0.06480556015574604, "compression_ratio": 1.8211382113821137, "no_speech_prob": 1.9832308680634014e-05}, {"id": 399, "seek": 200364, "start": 2019.64, "end": 2023.64, "text": " And then we give this to the student and then they can run through each one.", "tokens": [400, 550, 321, 976, 341, 281, 264, 3107, 293, 550, 436, 393, 1190, 807, 1184, 472, 13], "temperature": 0.0, "avg_logprob": -0.06480556015574604, "compression_ratio": 1.8211382113821137, "no_speech_prob": 1.9832308680634014e-05}, {"id": 400, "seek": 200364, "start": 2023.64, "end": 2030.64, "text": " And before they run it, we say have a think about what this is going to output and think about why and think about why we're doing it.", "tokens": [400, 949, 436, 1190, 309, 11, 321, 584, 362, 257, 519, 466, 437, 341, 307, 516, 281, 5598, 293, 519, 466, 983, 293, 519, 466, 983, 321, 434, 884, 309, 13], "temperature": 0.0, "avg_logprob": -0.06480556015574604, "compression_ratio": 1.8211382113821137, "no_speech_prob": 1.9832308680634014e-05}, {"id": 401, "seek": 203064, "start": 2030.64, "end": 2038.64, "text": " And then if you guessed wrong, you know, or figured wrong, you can actually experiment because you're in a live coding environment here.", "tokens": [400, 550, 498, 291, 21852, 2085, 11, 291, 458, 11, 420, 8932, 2085, 11, 291, 393, 767, 5120, 570, 291, 434, 294, 257, 1621, 17720, 2823, 510, 13], "temperature": 0.0, "avg_logprob": -0.09428792712332189, "compression_ratio": 1.7313432835820894, "no_speech_prob": 3.590793130570091e-05}, {"id": 402, "seek": 203064, "start": 2038.64, "end": 2042.64, "text": " So you can actually see, well, where did I go wrong and what actually happens?", "tokens": [407, 291, 393, 767, 536, 11, 731, 11, 689, 630, 286, 352, 2085, 293, 437, 767, 2314, 30], "temperature": 0.0, "avg_logprob": -0.09428792712332189, "compression_ratio": 1.7313432835820894, "no_speech_prob": 3.590793130570091e-05}, {"id": 403, "seek": 203064, "start": 2042.64, "end": 2045.64, "text": " So I actually think this is a great way of learning.", "tokens": [407, 286, 767, 519, 341, 307, 257, 869, 636, 295, 2539, 13], "temperature": 0.0, "avg_logprob": -0.09428792712332189, "compression_ratio": 1.7313432835820894, "no_speech_prob": 3.590793130570091e-05}, {"id": 404, "seek": 203064, "start": 2045.64, "end": 2048.6400000000003, "text": " And a lot of our students have told us they think it's a great way of learning.", "tokens": [400, 257, 688, 295, 527, 1731, 362, 1907, 505, 436, 519, 309, 311, 257, 869, 636, 295, 2539, 13], "temperature": 0.0, "avg_logprob": -0.09428792712332189, "compression_ratio": 1.7313432835820894, "no_speech_prob": 3.590793130570091e-05}, {"id": 405, "seek": 204864, "start": 2048.64, "end": 2060.64, "text": " I don't think I've ever heard anybody say that this ability to work interactively in this environment is decreasing their ability to learn.", "tokens": [286, 500, 380, 519, 286, 600, 1562, 2198, 4472, 584, 300, 341, 3485, 281, 589, 4648, 3413, 294, 341, 2823, 307, 23223, 641, 3485, 281, 1466, 13], "temperature": 0.0, "avg_logprob": -0.10843382126245743, "compression_ratio": 1.5906976744186045, "no_speech_prob": 2.2825719497632235e-05}, {"id": 406, "seek": 204864, "start": 2060.64, "end": 2071.64, "text": " So another thing that Joel said and gave a few examples is that notebooks are way less helpful than my text editor, which in his case is Visora's VS code.", "tokens": [407, 1071, 551, 300, 21522, 848, 293, 2729, 257, 1326, 5110, 307, 300, 43782, 366, 636, 1570, 4961, 813, 452, 2487, 9839, 11, 597, 294, 702, 1389, 307, 10410, 3252, 311, 25091, 3089, 13], "temperature": 0.0, "avg_logprob": -0.10843382126245743, "compression_ratio": 1.5906976744186045, "no_speech_prob": 2.2825719497632235e-05}, {"id": 407, "seek": 204864, "start": 2071.64, "end": 2073.64, "text": " So he said some things are easier demonstrated.", "tokens": [407, 415, 848, 512, 721, 366, 3571, 18772, 13], "temperature": 0.0, "avg_logprob": -0.10843382126245743, "compression_ratio": 1.5906976744186045, "no_speech_prob": 2.2825719497632235e-05}, {"id": 408, "seek": 207364, "start": 2073.64, "end": 2081.64, "text": " I'm going to show the opposite of his demonstrations, which is actually that Jupiter is more correct and more helpful than his IDE.", "tokens": [286, 478, 516, 281, 855, 264, 6182, 295, 702, 34714, 11, 597, 307, 767, 300, 24567, 307, 544, 3006, 293, 544, 4961, 813, 702, 40930, 13], "temperature": 0.0, "avg_logprob": -0.11325371131468355, "compression_ratio": 1.59009009009009, "no_speech_prob": 9.818048056331463e-06}, {"id": 409, "seek": 207364, "start": 2081.64, "end": 2084.64, "text": " So here's an example.", "tokens": [407, 510, 311, 364, 1365, 13], "temperature": 0.0, "avg_logprob": -0.11325371131468355, "compression_ratio": 1.59009009009009, "no_speech_prob": 9.818048056331463e-06}, {"id": 410, "seek": 207364, "start": 2084.64, "end": 2088.64, "text": " Let's get a URL contents of a URL.", "tokens": [961, 311, 483, 257, 12905, 15768, 295, 257, 12905, 13], "temperature": 0.0, "avg_logprob": -0.11325371131468355, "compression_ratio": 1.59009009009009, "no_speech_prob": 9.818048056331463e-06}, {"id": 411, "seek": 207364, "start": 2088.64, "end": 2097.64, "text": " And if it returns something valid, it's like something truthy, then we'll return a otherwise will return one.", "tokens": [400, 498, 309, 11247, 746, 7363, 11, 309, 311, 411, 746, 3494, 88, 11, 550, 321, 603, 2736, 257, 5911, 486, 2736, 472, 13], "temperature": 0.0, "avg_logprob": -0.11325371131468355, "compression_ratio": 1.59009009009009, "no_speech_prob": 9.818048056331463e-06}, {"id": 412, "seek": 207364, "start": 2097.64, "end": 2100.64, "text": " So this is obviously going to return something truthy.", "tokens": [407, 341, 307, 2745, 516, 281, 2736, 746, 3494, 88, 13], "temperature": 0.0, "avg_logprob": -0.11325371131468355, "compression_ratio": 1.59009009009009, "no_speech_prob": 9.818048056331463e-06}, {"id": 413, "seek": 210064, "start": 2100.64, "end": 2107.64, "text": " So this should be a string. And as you can see, it's giving me IDE concation for a string.", "tokens": [407, 341, 820, 312, 257, 6798, 13, 400, 382, 291, 393, 536, 11, 309, 311, 2902, 385, 40930, 1588, 399, 337, 257, 6798, 13], "temperature": 0.0, "avg_logprob": -0.1965329535653658, "compression_ratio": 1.6133333333333333, "no_speech_prob": 2.4681065042386763e-05}, {"id": 414, "seek": 210064, "start": 2107.64, "end": 2116.64, "text": " VS code, same code, gist b, completion four, a number, not for a string, got bit length, case fold, conjugate.", "tokens": [25091, 3089, 11, 912, 3089, 11, 290, 468, 272, 11, 19372, 1451, 11, 257, 1230, 11, 406, 337, 257, 6798, 11, 658, 857, 4641, 11, 1389, 4860, 11, 45064, 13], "temperature": 0.0, "avg_logprob": -0.1965329535653658, "compression_ratio": 1.6133333333333333, "no_speech_prob": 2.4681065042386763e-05}, {"id": 415, "seek": 210064, "start": 2116.64, "end": 2122.64, "text": " OK, so VS code doesn't know because VS code, it's doing the best it can.", "tokens": [2264, 11, 370, 25091, 3089, 1177, 380, 458, 570, 25091, 3089, 11, 309, 311, 884, 264, 1151, 309, 393, 13], "temperature": 0.0, "avg_logprob": -0.1965329535653658, "compression_ratio": 1.6133333333333333, "no_speech_prob": 2.4681065042386763e-05}, {"id": 416, "seek": 210064, "start": 2122.64, "end": 2127.64, "text": " And it's kind of pretty brilliant, you know, given that limitation.", "tokens": [400, 309, 311, 733, 295, 1238, 10248, 11, 291, 458, 11, 2212, 300, 27432, 13], "temperature": 0.0, "avg_logprob": -0.1965329535653658, "compression_ratio": 1.6133333333333333, "no_speech_prob": 2.4681065042386763e-05}, {"id": 417, "seek": 210064, "start": 2127.64, "end": 2128.64, "text": " But it doesn't know.", "tokens": [583, 309, 1177, 380, 458, 13], "temperature": 0.0, "avg_logprob": -0.1965329535653658, "compression_ratio": 1.6133333333333333, "no_speech_prob": 2.4681065042386763e-05}, {"id": 418, "seek": 212864, "start": 2128.64, "end": 2132.64, "text": " Jupiter knows because you ran the code. So it actually knows what you're working with.", "tokens": [24567, 3255, 570, 291, 5872, 264, 3089, 13, 407, 309, 767, 3255, 437, 291, 434, 1364, 365, 13], "temperature": 0.0, "avg_logprob": -0.09653141865363488, "compression_ratio": 1.805084745762712, "no_speech_prob": 3.0240176783991046e-05}, {"id": 419, "seek": 212864, "start": 2132.64, "end": 2140.64, "text": " And it can actually because Python is a dynamic language, it supports this kind of dynamic introspection of what is actually inside b and what can b do.", "tokens": [400, 309, 393, 767, 570, 15329, 307, 257, 8546, 2856, 11, 309, 9346, 341, 733, 295, 8546, 560, 2635, 19997, 295, 437, 307, 767, 1854, 272, 293, 437, 393, 272, 360, 13], "temperature": 0.0, "avg_logprob": -0.09653141865363488, "compression_ratio": 1.805084745762712, "no_speech_prob": 3.0240176783991046e-05}, {"id": 420, "seek": 212864, "start": 2140.64, "end": 2143.64, "text": " And so that's what Jupiter can use.", "tokens": [400, 370, 300, 311, 437, 24567, 393, 764, 13], "temperature": 0.0, "avg_logprob": -0.09653141865363488, "compression_ratio": 1.805084745762712, "no_speech_prob": 3.0240176783991046e-05}, {"id": 421, "seek": 212864, "start": 2143.64, "end": 2148.64, "text": " So Jupiter is just really, really, really helpful because it can be really helpful.", "tokens": [407, 24567, 307, 445, 534, 11, 534, 11, 534, 4961, 570, 309, 393, 312, 534, 4961, 13], "temperature": 0.0, "avg_logprob": -0.09653141865363488, "compression_ratio": 1.805084745762712, "no_speech_prob": 3.0240176783991046e-05}, {"id": 422, "seek": 212864, "start": 2148.64, "end": 2152.64, "text": " VS code does the best it can, but it can never be totally correct.", "tokens": [25091, 3089, 775, 264, 1151, 309, 393, 11, 457, 309, 393, 1128, 312, 3879, 3006, 13], "temperature": 0.0, "avg_logprob": -0.09653141865363488, "compression_ratio": 1.805084745762712, "no_speech_prob": 3.0240176783991046e-05}, {"id": 423, "seek": 215264, "start": 2152.64, "end": 2165.64, "text": " It would literally be impossible without it actually trying to match the same stateful approach as Jupiter because Python is dynamic, because it's not fully typed.", "tokens": [467, 576, 3736, 312, 6243, 1553, 309, 767, 1382, 281, 2995, 264, 912, 1785, 906, 3109, 382, 24567, 570, 15329, 307, 8546, 11, 570, 309, 311, 406, 4498, 33941, 13], "temperature": 0.0, "avg_logprob": -0.07680264784365284, "compression_ratio": 1.56640625, "no_speech_prob": 1.2218626579851843e-05}, {"id": 424, "seek": 215264, "start": 2165.64, "end": 2170.64, "text": " And even if you do use types for something like b above, you'd have to use a union type.", "tokens": [400, 754, 498, 291, 360, 764, 3467, 337, 746, 411, 272, 3673, 11, 291, 1116, 362, 281, 764, 257, 11671, 2010, 13], "temperature": 0.0, "avg_logprob": -0.07680264784365284, "compression_ratio": 1.56640625, "no_speech_prob": 1.2218626579851843e-05}, {"id": 425, "seek": 215264, "start": 2170.64, "end": 2174.64, "text": " You still wouldn't actually know what the type is.", "tokens": [509, 920, 2759, 380, 767, 458, 437, 264, 2010, 307, 13], "temperature": 0.0, "avg_logprob": -0.07680264784365284, "compression_ratio": 1.56640625, "no_speech_prob": 1.2218626579851843e-05}, {"id": 426, "seek": 215264, "start": 2174.64, "end": 2180.64, "text": " So then Joel said, OK, here's what you could do to win me over and convert me to a notebook user.", "tokens": [407, 550, 21522, 848, 11, 2264, 11, 510, 311, 437, 291, 727, 360, 281, 1942, 385, 670, 293, 7620, 385, 281, 257, 21060, 4195, 13], "temperature": 0.0, "avg_logprob": -0.07680264784365284, "compression_ratio": 1.56640625, "no_speech_prob": 1.2218626579851843e-05}, {"id": 427, "seek": 218064, "start": 2180.64, "end": 2184.64, "text": " He said, give me IDE style autocomplete.", "tokens": [634, 848, 11, 976, 385, 40930, 3758, 45833, 298, 17220, 13], "temperature": 0.0, "avg_logprob": -0.08863217726997707, "compression_ratio": 1.84304932735426, "no_speech_prob": 4.006162998848595e-05}, {"id": 428, "seek": 218064, "start": 2184.64, "end": 2188.64, "text": " Well, as we discussed, IDE style autocomplete is not the be all and end all.", "tokens": [1042, 11, 382, 321, 7152, 11, 40930, 3758, 45833, 298, 17220, 307, 406, 264, 312, 439, 293, 917, 439, 13], "temperature": 0.0, "avg_logprob": -0.08863217726997707, "compression_ratio": 1.84304932735426, "no_speech_prob": 4.006162998848595e-05}, {"id": 429, "seek": 218064, "start": 2188.64, "end": 2191.64, "text": " It's actually not fully correct.", "tokens": [467, 311, 767, 406, 4498, 3006, 13], "temperature": 0.0, "avg_logprob": -0.08863217726997707, "compression_ratio": 1.84304932735426, "no_speech_prob": 4.006162998848595e-05}, {"id": 430, "seek": 218064, "start": 2191.64, "end": 2194.64, "text": " Having said that, Jupiter also provides IDE style autocomplete.", "tokens": [10222, 848, 300, 11, 24567, 611, 6417, 40930, 3758, 45833, 298, 17220, 13], "temperature": 0.0, "avg_logprob": -0.08863217726997707, "compression_ratio": 1.84304932735426, "no_speech_prob": 4.006162998848595e-05}, {"id": 431, "seek": 218064, "start": 2194.64, "end": 2201.64, "text": " If you give it types, then it will figure out what you mean.", "tokens": [759, 291, 976, 309, 3467, 11, 550, 309, 486, 2573, 484, 437, 291, 914, 13], "temperature": 0.0, "avg_logprob": -0.08863217726997707, "compression_ratio": 1.84304932735426, "no_speech_prob": 4.006162998848595e-05}, {"id": 432, "seek": 218064, "start": 2201.64, "end": 2206.64, "text": " And if you give it functions like open, that return a file, again, it will figure out what you need.", "tokens": [400, 498, 291, 976, 309, 6828, 411, 1269, 11, 300, 2736, 257, 3991, 11, 797, 11, 309, 486, 2573, 484, 437, 291, 643, 13], "temperature": 0.0, "avg_logprob": -0.08863217726997707, "compression_ratio": 1.84304932735426, "no_speech_prob": 4.006162998848595e-05}, {"id": 433, "seek": 218064, "start": 2206.64, "end": 2209.64, "text": " So we have IDE style autocomplete.", "tokens": [407, 321, 362, 40930, 3758, 45833, 298, 17220, 13], "temperature": 0.0, "avg_logprob": -0.08863217726997707, "compression_ratio": 1.84304932735426, "no_speech_prob": 4.006162998848595e-05}, {"id": 434, "seek": 220964, "start": 2209.64, "end": 2214.64, "text": " He said, give me real time type checking and linting.", "tokens": [634, 848, 11, 976, 385, 957, 565, 2010, 8568, 293, 287, 686, 278, 13], "temperature": 0.0, "avg_logprob": -0.12817935590390805, "compression_ratio": 1.7075471698113207, "no_speech_prob": 3.822581493295729e-05}, {"id": 435, "seek": 220964, "start": 2214.64, "end": 2218.64, "text": " OK, here is part of a fast core library.", "tokens": [2264, 11, 510, 307, 644, 295, 257, 2370, 4965, 6405, 13], "temperature": 0.0, "avg_logprob": -0.12817935590390805, "compression_ratio": 1.7075471698113207, "no_speech_prob": 3.822581493295729e-05}, {"id": 436, "seek": 220964, "start": 2218.64, "end": 2221.64, "text": " As you can see, it's like a dozen lines of code.", "tokens": [1018, 291, 393, 536, 11, 309, 311, 411, 257, 16654, 3876, 295, 3089, 13], "temperature": 0.0, "avg_logprob": -0.12817935590390805, "compression_ratio": 1.7075471698113207, "no_speech_prob": 3.822581493295729e-05}, {"id": 437, "seek": 220964, "start": 2221.64, "end": 2226.64, "text": " And it actually gives you real time, actually correct type checking.", "tokens": [400, 309, 767, 2709, 291, 957, 565, 11, 767, 3006, 2010, 8568, 13], "temperature": 0.0, "avg_logprob": -0.12817935590390805, "compression_ratio": 1.7075471698113207, "no_speech_prob": 3.822581493295729e-05}, {"id": 438, "seek": 220964, "start": 2226.64, "end": 2232.64, "text": " So here you can see I'm calling foo, which is taking an int and a string.", "tokens": [407, 510, 291, 393, 536, 286, 478, 5141, 726, 78, 11, 597, 307, 1940, 364, 560, 293, 257, 6798, 13], "temperature": 0.0, "avg_logprob": -0.12817935590390805, "compression_ratio": 1.7075471698113207, "no_speech_prob": 3.822581493295729e-05}, {"id": 439, "seek": 220964, "start": 2232.64, "end": 2237.64, "text": " And if you pass an int and an int, it's checking, oh, it does in fact fail.", "tokens": [400, 498, 291, 1320, 364, 560, 293, 364, 560, 11, 309, 311, 8568, 11, 1954, 11, 309, 775, 294, 1186, 3061, 13], "temperature": 0.0, "avg_logprob": -0.12817935590390805, "compression_ratio": 1.7075471698113207, "no_speech_prob": 3.822581493295729e-05}, {"id": 440, "seek": 223764, "start": 2237.64, "end": 2241.64, "text": " And again, it can do this correctly only because it's in Jupiter,", "tokens": [400, 797, 11, 309, 393, 360, 341, 8944, 787, 570, 309, 311, 294, 24567, 11], "temperature": 0.0, "avg_logprob": -0.0607604063474215, "compression_ratio": 1.5730994152046784, "no_speech_prob": 2.6272078684996814e-05}, {"id": 441, "seek": 223764, "start": 2241.64, "end": 2247.64, "text": " only because it's actually running the code.", "tokens": [787, 570, 309, 311, 767, 2614, 264, 3089, 13], "temperature": 0.0, "avg_logprob": -0.0607604063474215, "compression_ratio": 1.5730994152046784, "no_speech_prob": 2.6272078684996814e-05}, {"id": 442, "seek": 223764, "start": 2247.64, "end": 2254.64, "text": " The approaches that most people are taking to this kind of type checking is MyPy.", "tokens": [440, 11587, 300, 881, 561, 366, 1940, 281, 341, 733, 295, 2010, 8568, 307, 1222, 47, 88, 13], "temperature": 0.0, "avg_logprob": -0.0607604063474215, "compression_ratio": 1.5730994152046784, "no_speech_prob": 2.6272078684996814e-05}, {"id": 443, "seek": 223764, "start": 2254.64, "end": 2259.64, "text": " And MyPy is not about 12 lines of code.", "tokens": [400, 1222, 47, 88, 307, 406, 466, 2272, 3876, 295, 3089, 13], "temperature": 0.0, "avg_logprob": -0.0607604063474215, "compression_ratio": 1.5730994152046784, "no_speech_prob": 2.6272078684996814e-05}, {"id": 444, "seek": 223764, "start": 2259.64, "end": 2263.64, "text": " MyPy is about 100,000 lines of code.", "tokens": [1222, 47, 88, 307, 466, 2319, 11, 1360, 3876, 295, 3089, 13], "temperature": 0.0, "avg_logprob": -0.0607604063474215, "compression_ratio": 1.5730994152046784, "no_speech_prob": 2.6272078684996814e-05}, {"id": 445, "seek": 226364, "start": 2263.64, "end": 2267.64, "text": " And it's complex code involving multiple different languages.", "tokens": [400, 309, 311, 3997, 3089, 17030, 3866, 819, 8650, 13], "temperature": 0.0, "avg_logprob": -0.04573887365835684, "compression_ratio": 1.7063492063492063, "no_speech_prob": 6.107863009674475e-05}, {"id": 446, "seek": 226364, "start": 2267.64, "end": 2269.64, "text": " And it's never going to be correct.", "tokens": [400, 309, 311, 1128, 516, 281, 312, 3006, 13], "temperature": 0.0, "avg_logprob": -0.04573887365835684, "compression_ratio": 1.7063492063492063, "no_speech_prob": 6.107863009674475e-05}, {"id": 447, "seek": 226364, "start": 2269.64, "end": 2274.64, "text": " It can't be fully correct because it's impossible for it to know", "tokens": [467, 393, 380, 312, 4498, 3006, 570, 309, 311, 6243, 337, 309, 281, 458], "temperature": 0.0, "avg_logprob": -0.04573887365835684, "compression_ratio": 1.7063492063492063, "no_speech_prob": 6.107863009674475e-05}, {"id": 448, "seek": 226364, "start": 2274.64, "end": 2280.64, "text": " exactly the types of all of your pieces of data because it's not actually running the code.", "tokens": [2293, 264, 3467, 295, 439, 295, 428, 3755, 295, 1412, 570, 309, 311, 406, 767, 2614, 264, 3089, 13], "temperature": 0.0, "avg_logprob": -0.04573887365835684, "compression_ratio": 1.7063492063492063, "no_speech_prob": 6.107863009674475e-05}, {"id": 449, "seek": 226364, "start": 2280.64, "end": 2282.64, "text": " And Python is dynamic.", "tokens": [400, 15329, 307, 8546, 13], "temperature": 0.0, "avg_logprob": -0.04573887365835684, "compression_ratio": 1.7063492063492063, "no_speech_prob": 6.107863009674475e-05}, {"id": 450, "seek": 226364, "start": 2282.64, "end": 2287.64, "text": " With Python, the only way to know what something actually contains is to run the code.", "tokens": [2022, 15329, 11, 264, 787, 636, 281, 458, 437, 746, 767, 8306, 307, 281, 1190, 264, 3089, 13], "temperature": 0.0, "avg_logprob": -0.04573887365835684, "compression_ratio": 1.7063492063492063, "no_speech_prob": 6.107863009674475e-05}, {"id": 451, "seek": 226364, "start": 2287.64, "end": 2292.64, "text": " Also, MyPy means that you have to tell Python what every type is.", "tokens": [2743, 11, 1222, 47, 88, 1355, 300, 291, 362, 281, 980, 15329, 437, 633, 2010, 307, 13], "temperature": 0.0, "avg_logprob": -0.04573887365835684, "compression_ratio": 1.7063492063492063, "no_speech_prob": 6.107863009674475e-05}, {"id": 452, "seek": 229264, "start": 2292.64, "end": 2299.64, "text": " And honestly, every other language is moving towards auto detection of types,", "tokens": [400, 6095, 11, 633, 661, 2856, 307, 2684, 3030, 8399, 17784, 295, 3467, 11], "temperature": 0.0, "avg_logprob": -0.12396204471588135, "compression_ratio": 1.5755102040816327, "no_speech_prob": 5.507418336492265e-06}, {"id": 453, "seek": 229264, "start": 2299.64, "end": 2305.64, "text": " of figuring out what types are automatically, particularly early movers like F sharp.", "tokens": [295, 15213, 484, 437, 3467, 366, 6772, 11, 4098, 2440, 705, 840, 411, 479, 8199, 13], "temperature": 0.0, "avg_logprob": -0.12396204471588135, "compression_ratio": 1.5755102040816327, "no_speech_prob": 5.507418336492265e-06}, {"id": 454, "seek": 229264, "start": 2305.64, "end": 2314.64, "text": " But nowadays, even stuff like Java, C sharp, C++, you can have like an auto type and it fixes it out for you.", "tokens": [583, 13434, 11, 754, 1507, 411, 10745, 11, 383, 8199, 11, 383, 25472, 11, 291, 393, 362, 411, 364, 8399, 2010, 293, 309, 32539, 309, 484, 337, 291, 13], "temperature": 0.0, "avg_logprob": -0.12396204471588135, "compression_ratio": 1.5755102040816327, "no_speech_prob": 5.507418336492265e-06}, {"id": 455, "seek": 229264, "start": 2314.64, "end": 2316.64, "text": " Python is kind of moving in the opposite direction.", "tokens": [15329, 307, 733, 295, 2684, 294, 264, 6182, 3513, 13], "temperature": 0.0, "avg_logprob": -0.12396204471588135, "compression_ratio": 1.5755102040816327, "no_speech_prob": 5.507418336492265e-06}, {"id": 456, "seek": 229264, "start": 2316.64, "end": 2320.64, "text": " And if you want to go the MyPy static analysis IDE approach,", "tokens": [400, 498, 291, 528, 281, 352, 264, 1222, 47, 88, 13437, 5215, 40930, 3109, 11], "temperature": 0.0, "avg_logprob": -0.12396204471588135, "compression_ratio": 1.5755102040816327, "no_speech_prob": 5.507418336492265e-06}, {"id": 457, "seek": 232064, "start": 2320.64, "end": 2325.64, "text": " you're going to have to spend a lot of time doing manual typing.", "tokens": [291, 434, 516, 281, 362, 281, 3496, 257, 688, 295, 565, 884, 9688, 18444, 13], "temperature": 0.0, "avg_logprob": -0.08844850063323975, "compression_ratio": 1.4608294930875576, "no_speech_prob": 6.301105895545334e-05}, {"id": 458, "seek": 232064, "start": 2325.64, "end": 2333.64, "text": " Another thing Joel said he wanted to see to win him over is a better story around dependency management.", "tokens": [3996, 551, 21522, 848, 415, 1415, 281, 536, 281, 1942, 796, 670, 307, 257, 1101, 1657, 926, 33621, 4592, 13], "temperature": 0.0, "avg_logprob": -0.08844850063323975, "compression_ratio": 1.4608294930875576, "no_speech_prob": 6.301105895545334e-05}, {"id": 459, "seek": 232064, "start": 2333.64, "end": 2335.64, "text": " Sure, why not?", "tokens": [4894, 11, 983, 406, 30], "temperature": 0.0, "avg_logprob": -0.08844850063323975, "compression_ratio": 1.4608294930875576, "no_speech_prob": 6.301105895545334e-05}, {"id": 460, "seek": 232064, "start": 2335.64, "end": 2345.64, "text": " As I said, Notebooks can already support all the same approaches that normal Python projects can handle.", "tokens": [1018, 286, 848, 11, 11633, 15170, 393, 1217, 1406, 439, 264, 912, 11587, 300, 2710, 15329, 4455, 393, 4813, 13], "temperature": 0.0, "avg_logprob": -0.08844850063323975, "compression_ratio": 1.4608294930875576, "no_speech_prob": 6.301105895545334e-05}, {"id": 461, "seek": 232064, "start": 2345.64, "end": 2347.64, "text": " Nbdev makes it even easier.", "tokens": [426, 65, 40343, 1669, 309, 754, 3571, 13], "temperature": 0.0, "avg_logprob": -0.08844850063323975, "compression_ratio": 1.4608294930875576, "no_speech_prob": 6.301105895545334e-05}, {"id": 462, "seek": 234764, "start": 2347.64, "end": 2351.64, "text": " You can just add a line to your settings.me with a list of requirements.", "tokens": [509, 393, 445, 909, 257, 1622, 281, 428, 6257, 13, 1398, 365, 257, 1329, 295, 7728, 13], "temperature": 0.0, "avg_logprob": -0.10098935010140403, "compression_ratio": 1.6679245283018869, "no_speech_prob": 0.00010717024269979447}, {"id": 463, "seek": 234764, "start": 2351.64, "end": 2354.64, "text": " If there is some special one for pip and conda, you can add those.", "tokens": [759, 456, 307, 512, 2121, 472, 337, 8489, 293, 2224, 64, 11, 291, 393, 909, 729, 13], "temperature": 0.0, "avg_logprob": -0.10098935010140403, "compression_ratio": 1.6679245283018869, "no_speech_prob": 0.00010717024269979447}, {"id": 464, "seek": 234764, "start": 2354.64, "end": 2357.64, "text": " Special ones for development time only, you can add those.", "tokens": [11863, 2306, 337, 3250, 565, 787, 11, 291, 393, 909, 729, 13], "temperature": 0.0, "avg_logprob": -0.10098935010140403, "compression_ratio": 1.6679245283018869, "no_speech_prob": 0.00010717024269979447}, {"id": 465, "seek": 234764, "start": 2357.64, "end": 2359.64, "text": " And away you go.", "tokens": [400, 1314, 291, 352, 13], "temperature": 0.0, "avg_logprob": -0.10098935010140403, "compression_ratio": 1.6679245283018869, "no_speech_prob": 0.00010717024269979447}, {"id": 466, "seek": 234764, "start": 2359.64, "end": 2364.64, "text": " That will automatically make all of those things be installed for you when you run the Notebooks.", "tokens": [663, 486, 6772, 652, 439, 295, 729, 721, 312, 8899, 337, 291, 562, 291, 1190, 264, 11633, 15170, 13], "temperature": 0.0, "avg_logprob": -0.10098935010140403, "compression_ratio": 1.6679245283018869, "no_speech_prob": 0.00010717024269979447}, {"id": 467, "seek": 234764, "start": 2364.64, "end": 2366.64, "text": " So we certainly have that.", "tokens": [407, 321, 3297, 362, 300, 13], "temperature": 0.0, "avg_logprob": -0.10098935010140403, "compression_ratio": 1.6679245283018869, "no_speech_prob": 0.00010717024269979447}, {"id": 468, "seek": 234764, "start": 2366.64, "end": 2376.64, "text": " He also said he's looking for first class support for refactoring code out of Notebooks into modules.", "tokens": [634, 611, 848, 415, 311, 1237, 337, 700, 1508, 1406, 337, 1895, 578, 3662, 3089, 484, 295, 11633, 15170, 666, 16679, 13], "temperature": 0.0, "avg_logprob": -0.10098935010140403, "compression_ratio": 1.6679245283018869, "no_speech_prob": 0.00010717024269979447}, {"id": 469, "seek": 237664, "start": 2376.64, "end": 2379.64, "text": " And I agree, this is absolutely critical.", "tokens": [400, 286, 3986, 11, 341, 307, 3122, 4924, 13], "temperature": 0.0, "avg_logprob": -0.07407387820157138, "compression_ratio": 1.5631067961165048, "no_speech_prob": 6.107627996243536e-05}, {"id": 470, "seek": 237664, "start": 2379.64, "end": 2385.64, "text": " And this is really the key number one versing that Nbdev does.", "tokens": [400, 341, 307, 534, 264, 2141, 1230, 472, 1774, 278, 300, 426, 65, 40343, 775, 13], "temperature": 0.0, "avg_logprob": -0.07407387820157138, "compression_ratio": 1.5631067961165048, "no_speech_prob": 6.107627996243536e-05}, {"id": 471, "seek": 237664, "start": 2385.64, "end": 2387.64, "text": " You start with some code like this.", "tokens": [509, 722, 365, 512, 3089, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.07407387820157138, "compression_ratio": 1.5631067961165048, "no_speech_prob": 6.107627996243536e-05}, {"id": 472, "seek": 237664, "start": 2387.64, "end": 2389.64, "text": " And again, this is some source code of Nbdev.", "tokens": [400, 797, 11, 341, 307, 512, 4009, 3089, 295, 426, 65, 40343, 13], "temperature": 0.0, "avg_logprob": -0.07407387820157138, "compression_ratio": 1.5631067961165048, "no_speech_prob": 6.107627996243536e-05}, {"id": 473, "seek": 237664, "start": 2389.64, "end": 2392.64, "text": " Nbdev, of course, is written in Nbdev.", "tokens": [426, 65, 40343, 11, 295, 1164, 11, 307, 3720, 294, 426, 65, 40343, 13], "temperature": 0.0, "avg_logprob": -0.07407387820157138, "compression_ratio": 1.5631067961165048, "no_speech_prob": 6.107627996243536e-05}, {"id": 474, "seek": 237664, "start": 2392.64, "end": 2394.64, "text": " It's a Notebook.", "tokens": [467, 311, 257, 11633, 2939, 13], "temperature": 0.0, "avg_logprob": -0.07407387820157138, "compression_ratio": 1.5631067961165048, "no_speech_prob": 6.107627996243536e-05}, {"id": 475, "seek": 237664, "start": 2394.64, "end": 2402.64, "text": " And then it automatically creates an actual Python project.", "tokens": [400, 550, 309, 6772, 7829, 364, 3539, 15329, 1716, 13], "temperature": 0.0, "avg_logprob": -0.07407387820157138, "compression_ratio": 1.5631067961165048, "no_speech_prob": 6.107627996243536e-05}, {"id": 476, "seek": 237664, "start": 2402.64, "end": 2404.64, "text": " So those all exist.", "tokens": [407, 729, 439, 2514, 13], "temperature": 0.0, "avg_logprob": -0.07407387820157138, "compression_ratio": 1.5631067961165048, "no_speech_prob": 6.107627996243536e-05}, {"id": 477, "seek": 240464, "start": 2404.64, "end": 2406.64, "text": " Joel did not expect that to happen.", "tokens": [21522, 630, 406, 2066, 300, 281, 1051, 13], "temperature": 0.0, "avg_logprob": -0.06432700615662795, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.00018516831914894283}, {"id": 478, "seek": 240464, "start": 2406.64, "end": 2409.64, "text": " He said the reality is you're not going to provide me with all these things.", "tokens": [634, 848, 264, 4103, 307, 291, 434, 406, 516, 281, 2893, 385, 365, 439, 613, 721, 13], "temperature": 0.0, "avg_logprob": -0.06432700615662795, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.00018516831914894283}, {"id": 479, "seek": 240464, "start": 2409.64, "end": 2411.64, "text": " And I'm not going to switch to Notebooks.", "tokens": [400, 286, 478, 406, 516, 281, 3679, 281, 11633, 15170, 13], "temperature": 0.0, "avg_logprob": -0.06432700615662795, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.00018516831914894283}, {"id": 480, "seek": 240464, "start": 2411.64, "end": 2414.64, "text": " So so be it.", "tokens": [407, 370, 312, 309, 13], "temperature": 0.0, "avg_logprob": -0.06432700615662795, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.00018516831914894283}, {"id": 481, "seek": 240464, "start": 2414.64, "end": 2420.64, "text": " So hopefully I've convinced you that there's no reason for you not to like Notebooks.", "tokens": [407, 4696, 286, 600, 12561, 291, 300, 456, 311, 572, 1778, 337, 291, 406, 281, 411, 11633, 15170, 13], "temperature": 0.0, "avg_logprob": -0.06432700615662795, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.00018516831914894283}, {"id": 482, "seek": 240464, "start": 2420.64, "end": 2426.64, "text": " And that it's not the case that real software developers have to use other tools.", "tokens": [400, 300, 309, 311, 406, 264, 1389, 300, 957, 4722, 8849, 362, 281, 764, 661, 3873, 13], "temperature": 0.0, "avg_logprob": -0.06432700615662795, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.00018516831914894283}, {"id": 483, "seek": 240464, "start": 2426.64, "end": 2431.64, "text": " But actually, Notebooks really can be really great.", "tokens": [583, 767, 11, 11633, 15170, 534, 393, 312, 534, 869, 13], "temperature": 0.0, "avg_logprob": -0.06432700615662795, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.00018516831914894283}, {"id": 484, "seek": 243164, "start": 2431.64, "end": 2434.64, "text": " Let me explain more about how and why this happens.", "tokens": [961, 385, 2903, 544, 466, 577, 293, 983, 341, 2314, 13], "temperature": 0.0, "avg_logprob": -0.03581562136659528, "compression_ratio": 1.591743119266055, "no_speech_prob": 4.264442031853832e-05}, {"id": 485, "seek": 243164, "start": 2434.64, "end": 2438.64, "text": " And to do that, I'm going to focus on, in particular, Nbdev.", "tokens": [400, 281, 360, 300, 11, 286, 478, 516, 281, 1879, 322, 11, 294, 1729, 11, 426, 65, 40343, 13], "temperature": 0.0, "avg_logprob": -0.03581562136659528, "compression_ratio": 1.591743119266055, "no_speech_prob": 4.264442031853832e-05}, {"id": 486, "seek": 243164, "start": 2438.64, "end": 2443.64, "text": " And I've already mentioned the basic things that Nbdev does for you.", "tokens": [400, 286, 600, 1217, 2835, 264, 3875, 721, 300, 426, 65, 40343, 775, 337, 291, 13], "temperature": 0.0, "avg_logprob": -0.03581562136659528, "compression_ratio": 1.591743119266055, "no_speech_prob": 4.264442031853832e-05}, {"id": 487, "seek": 243164, "start": 2443.64, "end": 2448.64, "text": " Let's look more at how that works and exactly what you need to do.", "tokens": [961, 311, 574, 544, 412, 577, 300, 1985, 293, 2293, 437, 291, 643, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.03581562136659528, "compression_ratio": 1.591743119266055, "no_speech_prob": 4.264442031853832e-05}, {"id": 488, "seek": 243164, "start": 2448.64, "end": 2455.64, "text": " So here is an example of code in a Notebook.", "tokens": [407, 510, 307, 364, 1365, 295, 3089, 294, 257, 11633, 2939, 13], "temperature": 0.0, "avg_logprob": -0.03581562136659528, "compression_ratio": 1.591743119266055, "no_speech_prob": 4.264442031853832e-05}, {"id": 489, "seek": 243164, "start": 2455.64, "end": 2460.64, "text": " And you can see here that I've got an export comment.", "tokens": [400, 291, 393, 536, 510, 300, 286, 600, 658, 364, 10725, 2871, 13], "temperature": 0.0, "avg_logprob": -0.03581562136659528, "compression_ratio": 1.591743119266055, "no_speech_prob": 4.264442031853832e-05}, {"id": 490, "seek": 246064, "start": 2460.64, "end": 2464.64, "text": " So Nbdev uses a small number, like two or three different special comments,", "tokens": [407, 426, 65, 40343, 4960, 257, 1359, 1230, 11, 411, 732, 420, 1045, 819, 2121, 3053, 11], "temperature": 0.0, "avg_logprob": -0.06360241051377921, "compression_ratio": 1.641732283464567, "no_speech_prob": 2.429851701890584e-05}, {"id": 491, "seek": 246064, "start": 2464.64, "end": 2465.64, "text": " to tell it what to do.", "tokens": [281, 980, 309, 437, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.06360241051377921, "compression_ratio": 1.641732283464567, "no_speech_prob": 2.429851701890584e-05}, {"id": 492, "seek": 246064, "start": 2465.64, "end": 2469.64, "text": " And this export says, make this part of my Python project.", "tokens": [400, 341, 10725, 1619, 11, 652, 341, 644, 295, 452, 15329, 1716, 13], "temperature": 0.0, "avg_logprob": -0.06360241051377921, "compression_ratio": 1.641732283464567, "no_speech_prob": 2.429851701890584e-05}, {"id": 493, "seek": 246064, "start": 2469.64, "end": 2471.64, "text": " This doesn't have an export.", "tokens": [639, 1177, 380, 362, 364, 10725, 13], "temperature": 0.0, "avg_logprob": -0.06360241051377921, "compression_ratio": 1.641732283464567, "no_speech_prob": 2.429851701890584e-05}, {"id": 494, "seek": 246064, "start": 2471.64, "end": 2473.64, "text": " So it's not part of the Python project.", "tokens": [407, 309, 311, 406, 644, 295, 264, 15329, 1716, 13], "temperature": 0.0, "avg_logprob": -0.06360241051377921, "compression_ratio": 1.641732283464567, "no_speech_prob": 2.429851701890584e-05}, {"id": 495, "seek": 246064, "start": 2473.64, "end": 2475.64, "text": " Now one of the things I like to do,", "tokens": [823, 472, 295, 264, 721, 286, 411, 281, 360, 11], "temperature": 0.0, "avg_logprob": -0.06360241051377921, "compression_ratio": 1.641732283464567, "no_speech_prob": 2.429851701890584e-05}, {"id": 496, "seek": 246064, "start": 2475.64, "end": 2479.64, "text": " this is another thing that Joel talked about as being a problem for him with Notebooks,", "tokens": [341, 307, 1071, 551, 300, 21522, 2825, 466, 382, 885, 257, 1154, 337, 796, 365, 11633, 15170, 11], "temperature": 0.0, "avg_logprob": -0.06360241051377921, "compression_ratio": 1.641732283464567, "no_speech_prob": 2.429851701890584e-05}, {"id": 497, "seek": 246064, "start": 2479.64, "end": 2486.64, "text": " is that it's hard to do, is splitting a class into separate cells.", "tokens": [307, 300, 309, 311, 1152, 281, 360, 11, 307, 30348, 257, 1508, 666, 4994, 5438, 13], "temperature": 0.0, "avg_logprob": -0.06360241051377921, "compression_ratio": 1.641732283464567, "no_speech_prob": 2.429851701890584e-05}, {"id": 498, "seek": 248664, "start": 2486.64, "end": 2492.64, "text": " And actually, with the Fast.AI libraries using Nbdev and Fast4,", "tokens": [400, 767, 11, 365, 264, 15968, 13, 48698, 15148, 1228, 426, 65, 40343, 293, 15968, 19, 11], "temperature": 0.0, "avg_logprob": -0.10764306964296283, "compression_ratio": 1.7752808988764044, "no_speech_prob": 3.7050114769954234e-05}, {"id": 499, "seek": 248664, "start": 2492.64, "end": 2493.64, "text": " it's not at all difficult to do.", "tokens": [309, 311, 406, 412, 439, 2252, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.10764306964296283, "compression_ratio": 1.7752808988764044, "no_speech_prob": 3.7050114769954234e-05}, {"id": 500, "seek": 248664, "start": 2493.64, "end": 2496.64, "text": " Here's a class, and I've just got the init in it here.", "tokens": [1692, 311, 257, 1508, 11, 293, 286, 600, 445, 658, 264, 3157, 294, 309, 510, 13], "temperature": 0.0, "avg_logprob": -0.10764306964296283, "compression_ratio": 1.7752808988764044, "no_speech_prob": 3.7050114769954234e-05}, {"id": 501, "seek": 248664, "start": 2496.64, "end": 2498.64, "text": " And I can create it.", "tokens": [400, 286, 393, 1884, 309, 13], "temperature": 0.0, "avg_logprob": -0.10764306964296283, "compression_ratio": 1.7752808988764044, "no_speech_prob": 3.7050114769954234e-05}, {"id": 502, "seek": 248664, "start": 2498.64, "end": 2504.64, "text": " And then later on, I just use this patch decorator to add this method to this class.", "tokens": [400, 550, 1780, 322, 11, 286, 445, 764, 341, 9972, 7919, 1639, 281, 909, 341, 3170, 281, 341, 1508, 13], "temperature": 0.0, "avg_logprob": -0.10764306964296283, "compression_ratio": 1.7752808988764044, "no_speech_prob": 3.7050114769954234e-05}, {"id": 503, "seek": 248664, "start": 2504.64, "end": 2507.64, "text": " And so this is actually going to impact the documentation as well.", "tokens": [400, 370, 341, 307, 767, 516, 281, 2712, 264, 14333, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.10764306964296283, "compression_ratio": 1.7752808988764044, "no_speech_prob": 3.7050114769954234e-05}, {"id": 504, "seek": 248664, "start": 2507.64, "end": 2510.64, "text": " The documentation of process comment will end up down here,", "tokens": [440, 14333, 295, 1399, 2871, 486, 917, 493, 760, 510, 11], "temperature": 0.0, "avg_logprob": -0.10764306964296283, "compression_ratio": 1.7752808988764044, "no_speech_prob": 3.7050114769954234e-05}, {"id": 505, "seek": 248664, "start": 2510.64, "end": 2513.64, "text": " and the documentation of class init, Notebook processor init,", "tokens": [293, 264, 14333, 295, 1508, 3157, 11, 11633, 2939, 15321, 3157, 11], "temperature": 0.0, "avg_logprob": -0.10764306964296283, "compression_ratio": 1.7752808988764044, "no_speech_prob": 3.7050114769954234e-05}, {"id": 506, "seek": 248664, "start": 2513.64, "end": 2514.64, "text": " is going to end up up here.", "tokens": [307, 516, 281, 917, 493, 493, 510, 13], "temperature": 0.0, "avg_logprob": -0.10764306964296283, "compression_ratio": 1.7752808988764044, "no_speech_prob": 3.7050114769954234e-05}, {"id": 507, "seek": 251464, "start": 2514.64, "end": 2519.64, "text": " And so it really helps the code reader understand things step by step.", "tokens": [400, 370, 309, 534, 3665, 264, 3089, 15149, 1223, 721, 1823, 538, 1823, 13], "temperature": 0.0, "avg_logprob": -0.07481944064299266, "compression_ratio": 1.6079295154185023, "no_speech_prob": 7.411087608488742e-06}, {"id": 508, "seek": 251464, "start": 2519.64, "end": 2524.64, "text": " Each one has tests and examples, kind of as it happens.", "tokens": [6947, 472, 575, 6921, 293, 5110, 11, 733, 295, 382, 309, 2314, 13], "temperature": 0.0, "avg_logprob": -0.07481944064299266, "compression_ratio": 1.6079295154185023, "no_speech_prob": 7.411087608488742e-06}, {"id": 509, "seek": 251464, "start": 2524.64, "end": 2528.64, "text": " And as you read through the documentation, you can see each piece one at a time.", "tokens": [400, 382, 291, 1401, 807, 264, 14333, 11, 291, 393, 536, 1184, 2522, 472, 412, 257, 565, 13], "temperature": 0.0, "avg_logprob": -0.07481944064299266, "compression_ratio": 1.6079295154185023, "no_speech_prob": 7.411087608488742e-06}, {"id": 510, "seek": 251464, "start": 2528.64, "end": 2534.64, "text": " So this is a really nice, to me, way to build up more complex classes.", "tokens": [407, 341, 307, 257, 534, 1481, 11, 281, 385, 11, 636, 281, 1322, 493, 544, 3997, 5359, 13], "temperature": 0.0, "avg_logprob": -0.07481944064299266, "compression_ratio": 1.6079295154185023, "no_speech_prob": 7.411087608488742e-06}, {"id": 511, "seek": 251464, "start": 2534.64, "end": 2542.64, "text": " All of the pieces of Nbdev all get built out of a single, simple little settings file,", "tokens": [1057, 295, 264, 3755, 295, 426, 65, 40343, 439, 483, 3094, 484, 295, 257, 2167, 11, 2199, 707, 6257, 3991, 11], "temperature": 0.0, "avg_logprob": -0.07481944064299266, "compression_ratio": 1.6079295154185023, "no_speech_prob": 7.411087608488742e-06}, {"id": 512, "seek": 254264, "start": 2542.64, "end": 2544.64, "text": " settings.ini.", "tokens": [6257, 13, 3812, 13], "temperature": 0.0, "avg_logprob": -0.08311454962331352, "compression_ratio": 1.903914590747331, "no_speech_prob": 7.96653184806928e-05}, {"id": 513, "seek": 254264, "start": 2544.64, "end": 2548.64, "text": " And it's really nice because you can provide all of the information just in one place.", "tokens": [400, 309, 311, 534, 1481, 570, 291, 393, 2893, 439, 295, 264, 1589, 445, 294, 472, 1081, 13], "temperature": 0.0, "avg_logprob": -0.08311454962331352, "compression_ratio": 1.903914590747331, "no_speech_prob": 7.96653184806928e-05}, {"id": 514, "seek": 254264, "start": 2548.64, "end": 2551.64, "text": " So rather than having a version number over here, an init.py, and over there,", "tokens": [407, 2831, 813, 1419, 257, 3037, 1230, 670, 510, 11, 364, 3157, 13, 8200, 11, 293, 670, 456, 11], "temperature": 0.0, "avg_logprob": -0.08311454962331352, "compression_ratio": 1.903914590747331, "no_speech_prob": 7.96653184806928e-05}, {"id": 515, "seek": 254264, "start": 2551.64, "end": 2554.64, "text": " and setup.py, and over here in your documentation,", "tokens": [293, 8657, 13, 8200, 11, 293, 670, 510, 294, 428, 14333, 11], "temperature": 0.0, "avg_logprob": -0.08311454962331352, "compression_ratio": 1.903914590747331, "no_speech_prob": 7.96653184806928e-05}, {"id": 516, "seek": 254264, "start": 2554.64, "end": 2557.64, "text": " you have it once, and it's used everywhere.", "tokens": [291, 362, 309, 1564, 11, 293, 309, 311, 1143, 5315, 13], "temperature": 0.0, "avg_logprob": -0.08311454962331352, "compression_ratio": 1.903914590747331, "no_speech_prob": 7.96653184806928e-05}, {"id": 517, "seek": 254264, "start": 2557.64, "end": 2561.64, "text": " Ditto for your description, ditto for your source of your documentation,", "tokens": [413, 34924, 337, 428, 3855, 11, 274, 34924, 337, 428, 4009, 295, 428, 14333, 11], "temperature": 0.0, "avg_logprob": -0.08311454962331352, "compression_ratio": 1.903914590747331, "no_speech_prob": 7.96653184806928e-05}, {"id": 518, "seek": 254264, "start": 2561.64, "end": 2564.64, "text": " and ditto for your repo information.", "tokens": [293, 274, 34924, 337, 428, 49040, 1589, 13], "temperature": 0.0, "avg_logprob": -0.08311454962331352, "compression_ratio": 1.903914590747331, "no_speech_prob": 7.96653184806928e-05}, {"id": 519, "seek": 254264, "start": 2564.64, "end": 2568.64, "text": " It's just there in one place, and then everything will use that for you.", "tokens": [467, 311, 445, 456, 294, 472, 1081, 11, 293, 550, 1203, 486, 764, 300, 337, 291, 13], "temperature": 0.0, "avg_logprob": -0.08311454962331352, "compression_ratio": 1.903914590747331, "no_speech_prob": 7.96653184806928e-05}, {"id": 520, "seek": 254264, "start": 2568.64, "end": 2571.64, "text": " You don't have to put it in multiple places and think about how to maintain it", "tokens": [509, 500, 380, 362, 281, 829, 309, 294, 3866, 3190, 293, 519, 466, 577, 281, 6909, 309], "temperature": 0.0, "avg_logprob": -0.08311454962331352, "compression_ratio": 1.903914590747331, "no_speech_prob": 7.96653184806928e-05}, {"id": 521, "seek": 257164, "start": 2571.64, "end": 2573.64, "text": " and synchronize it.", "tokens": [293, 19331, 1125, 309, 13], "temperature": 0.0, "avg_logprob": -0.12357649932036528, "compression_ratio": 1.7268722466960353, "no_speech_prob": 0.00012729987793136388}, {"id": 522, "seek": 257164, "start": 2573.64, "end": 2578.64, "text": " Talking of synchronization, not only can you start with a notebook", "tokens": [22445, 295, 19331, 2144, 11, 406, 787, 393, 291, 722, 365, 257, 21060], "temperature": 0.0, "avg_logprob": -0.12357649932036528, "compression_ratio": 1.7268722466960353, "no_speech_prob": 0.00012729987793136388}, {"id": 523, "seek": 257164, "start": 2578.64, "end": 2582.64, "text": " and turn it into this code, which you can then open in, in this case,", "tokens": [293, 1261, 309, 666, 341, 3089, 11, 597, 291, 393, 550, 1269, 294, 11, 294, 341, 1389, 11], "temperature": 0.0, "avg_logprob": -0.12357649932036528, "compression_ratio": 1.7268722466960353, "no_speech_prob": 0.00012729987793136388}, {"id": 524, "seek": 257164, "start": 2582.64, "end": 2585.64, "text": " I hope in Vim, or you can open it in VS Code or whatever,", "tokens": [286, 1454, 294, 691, 332, 11, 420, 291, 393, 1269, 309, 294, 25091, 15549, 420, 2035, 11], "temperature": 0.0, "avg_logprob": -0.12357649932036528, "compression_ratio": 1.7268722466960353, "no_speech_prob": 0.00012729987793136388}, {"id": 525, "seek": 257164, "start": 2585.64, "end": 2589.64, "text": " you can edit it in your editor, like Vim or VS Code,", "tokens": [291, 393, 8129, 309, 294, 428, 9839, 11, 411, 691, 332, 420, 25091, 15549, 11], "temperature": 0.0, "avg_logprob": -0.12357649932036528, "compression_ratio": 1.7268722466960353, "no_speech_prob": 0.00012729987793136388}, {"id": 526, "seek": 257164, "start": 2589.64, "end": 2593.64, "text": " and it will sync it in the opposite direction too, and update your notebook.", "tokens": [293, 309, 486, 20271, 309, 294, 264, 6182, 3513, 886, 11, 293, 5623, 428, 21060, 13], "temperature": 0.0, "avg_logprob": -0.12357649932036528, "compression_ratio": 1.7268722466960353, "no_speech_prob": 0.00012729987793136388}, {"id": 527, "seek": 257164, "start": 2593.64, "end": 2596.64, "text": " And so some things are easier to do in editors,", "tokens": [400, 370, 512, 721, 366, 3571, 281, 360, 294, 31446, 11], "temperature": 0.0, "avg_logprob": -0.12357649932036528, "compression_ratio": 1.7268722466960353, "no_speech_prob": 0.00012729987793136388}, {"id": 528, "seek": 259664, "start": 2596.64, "end": 2602.64, "text": " like quickly kind of search and replace across multiple files and stuff like that.", "tokens": [411, 2661, 733, 295, 3164, 293, 7406, 2108, 3866, 7098, 293, 1507, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.11646747589111328, "compression_ratio": 1.636734693877551, "no_speech_prob": 4.832214108319022e-05}, {"id": 529, "seek": 259664, "start": 2602.64, "end": 2605.64, "text": " Or if it's an unfamiliar code base, it's nice to be able to use the tags", "tokens": [1610, 498, 309, 311, 364, 29415, 3089, 3096, 11, 309, 311, 1481, 281, 312, 1075, 281, 764, 264, 18632], "temperature": 0.0, "avg_logprob": -0.11646747589111328, "compression_ratio": 1.636734693877551, "no_speech_prob": 4.832214108319022e-05}, {"id": 530, "seek": 259664, "start": 2605.64, "end": 2608.64, "text": " to kind of jump across between files.", "tokens": [281, 733, 295, 3012, 2108, 1296, 7098, 13], "temperature": 0.0, "avg_logprob": -0.11646747589111328, "compression_ratio": 1.636734693877551, "no_speech_prob": 4.832214108319022e-05}, {"id": 531, "seek": 259664, "start": 2608.64, "end": 2613.64, "text": " You can edit as you go, and then synchronize back to the notebook.", "tokens": [509, 393, 8129, 382, 291, 352, 11, 293, 550, 19331, 1125, 646, 281, 264, 21060, 13], "temperature": 0.0, "avg_logprob": -0.11646747589111328, "compression_ratio": 1.636734693877551, "no_speech_prob": 4.832214108319022e-05}, {"id": 532, "seek": 259664, "start": 2613.64, "end": 2616.64, "text": " So then, how does the synchronization work?", "tokens": [407, 550, 11, 577, 775, 264, 19331, 2144, 589, 30], "temperature": 0.0, "avg_logprob": -0.11646747589111328, "compression_ratio": 1.636734693877551, "no_speech_prob": 4.832214108319022e-05}, {"id": 533, "seek": 259664, "start": 2616.64, "end": 2618.64, "text": " Well, there's two ways you can do it.", "tokens": [1042, 11, 456, 311, 732, 2098, 291, 393, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.11646747589111328, "compression_ratio": 1.636734693877551, "no_speech_prob": 4.832214108319022e-05}, {"id": 534, "seek": 259664, "start": 2618.64, "end": 2623.64, "text": " You can either put this as the last cell in each notebook,", "tokens": [509, 393, 2139, 829, 341, 382, 264, 1036, 2815, 294, 1184, 21060, 11], "temperature": 0.0, "avg_logprob": -0.11646747589111328, "compression_ratio": 1.636734693877551, "no_speech_prob": 4.832214108319022e-05}, {"id": 535, "seek": 262364, "start": 2623.64, "end": 2627.64, "text": " and that will take the notebook you're working in and all the other notebooks", "tokens": [293, 300, 486, 747, 264, 21060, 291, 434, 1364, 294, 293, 439, 264, 661, 43782], "temperature": 0.0, "avg_logprob": -0.12548262278238934, "compression_ratio": 1.6624472573839661, "no_speech_prob": 6.108295201556757e-05}, {"id": 536, "seek": 262364, "start": 2627.64, "end": 2630.64, "text": " and convert them into modules,", "tokens": [293, 7620, 552, 666, 16679, 11], "temperature": 0.0, "avg_logprob": -0.12548262278238934, "compression_ratio": 1.6624472573839661, "no_speech_prob": 6.108295201556757e-05}, {"id": 537, "seek": 262364, "start": 2630.64, "end": 2634.64, "text": " or at the command line, you can run nvdev building.", "tokens": [420, 412, 264, 5622, 1622, 11, 291, 393, 1190, 297, 85, 40343, 2390, 13], "temperature": 0.0, "avg_logprob": -0.12548262278238934, "compression_ratio": 1.6624472573839661, "no_speech_prob": 6.108295201556757e-05}, {"id": 538, "seek": 262364, "start": 2634.64, "end": 2639.64, "text": " And so I have this in every notebook that I use,", "tokens": [400, 370, 286, 362, 341, 294, 633, 21060, 300, 286, 764, 11], "temperature": 0.0, "avg_logprob": -0.12548262278238934, "compression_ratio": 1.6624472573839661, "no_speech_prob": 6.108295201556757e-05}, {"id": 539, "seek": 262364, "start": 2639.64, "end": 2642.64, "text": " because it's kind of nice to stay in the notebook environment.", "tokens": [570, 309, 311, 733, 295, 1481, 281, 1754, 294, 264, 21060, 2823, 13], "temperature": 0.0, "avg_logprob": -0.12548262278238934, "compression_ratio": 1.6624472573839661, "no_speech_prob": 6.108295201556757e-05}, {"id": 540, "seek": 262364, "start": 2642.64, "end": 2646.64, "text": " This is more something I tend to do as part of my release process.", "tokens": [639, 307, 544, 746, 286, 3928, 281, 360, 382, 644, 295, 452, 4374, 1399, 13], "temperature": 0.0, "avg_logprob": -0.12548262278238934, "compression_ratio": 1.6624472573839661, "no_speech_prob": 6.108295201556757e-05}, {"id": 541, "seek": 262364, "start": 2646.64, "end": 2651.64, "text": " There's a lot of little niceties that nvdev tries hard", "tokens": [821, 311, 257, 688, 295, 707, 6201, 43469, 300, 297, 85, 40343, 9898, 1152], "temperature": 0.0, "avg_logprob": -0.12548262278238934, "compression_ratio": 1.6624472573839661, "no_speech_prob": 6.108295201556757e-05}, {"id": 542, "seek": 265164, "start": 2651.64, "end": 2656.64, "text": " to make nice for you, to kind of make your code as correct", "tokens": [281, 652, 1481, 337, 291, 11, 281, 733, 295, 652, 428, 3089, 382, 3006], "temperature": 0.0, "avg_logprob": -0.0951231304961856, "compression_ratio": 1.672811059907834, "no_speech_prob": 3.269748776801862e-05}, {"id": 543, "seek": 265164, "start": 2656.64, "end": 2661.64, "text": " and as close to best practices as possible,", "tokens": [293, 382, 1998, 281, 1151, 7525, 382, 1944, 11], "temperature": 0.0, "avg_logprob": -0.0951231304961856, "compression_ratio": 1.672811059907834, "no_speech_prob": 3.269748776801862e-05}, {"id": 544, "seek": 265164, "start": 2661.64, "end": 2663.64, "text": " at least in our view of best practices.", "tokens": [412, 1935, 294, 527, 1910, 295, 1151, 7525, 13], "temperature": 0.0, "avg_logprob": -0.0951231304961856, "compression_ratio": 1.672811059907834, "no_speech_prob": 3.269748776801862e-05}, {"id": 545, "seek": 265164, "start": 2663.64, "end": 2666.64, "text": " One of the best practices that we think are important is DUNDA ALL.", "tokens": [1485, 295, 264, 1151, 7525, 300, 321, 519, 366, 1021, 307, 413, 3979, 7509, 14824, 13], "temperature": 0.0, "avg_logprob": -0.0951231304961856, "compression_ratio": 1.672811059907834, "no_speech_prob": 3.269748776801862e-05}, {"id": 546, "seek": 265164, "start": 2666.64, "end": 2670.64, "text": " DUNDA ALL is the thing that Python provides for you,", "tokens": [413, 3979, 7509, 14824, 307, 264, 551, 300, 15329, 6417, 337, 291, 11], "temperature": 0.0, "avg_logprob": -0.0951231304961856, "compression_ratio": 1.672811059907834, "no_speech_prob": 3.269748776801862e-05}, {"id": 547, "seek": 265164, "start": 2670.64, "end": 2675.64, "text": " where you get to list what are the exported symbols in your module.", "tokens": [689, 291, 483, 281, 1329, 437, 366, 264, 42055, 16944, 294, 428, 10088, 13], "temperature": 0.0, "avg_logprob": -0.0951231304961856, "compression_ratio": 1.672811059907834, "no_speech_prob": 3.269748776801862e-05}, {"id": 548, "seek": 265164, "start": 2675.64, "end": 2677.64, "text": " If you don't provide DUNDA ALL,", "tokens": [759, 291, 500, 380, 2893, 413, 3979, 7509, 14824, 11], "temperature": 0.0, "avg_logprob": -0.0951231304961856, "compression_ratio": 1.672811059907834, "no_speech_prob": 3.269748776801862e-05}, {"id": 549, "seek": 267764, "start": 2677.64, "end": 2681.64, "text": " and nearly nobody that's not an nvdev user provides it,", "tokens": [293, 6217, 5079, 300, 311, 406, 364, 297, 85, 40343, 4195, 6417, 309, 11], "temperature": 0.0, "avg_logprob": -0.07555984075252827, "compression_ratio": 1.603921568627451, "no_speech_prob": 2.468175625836011e-05}, {"id": 550, "seek": 267764, "start": 2681.64, "end": 2683.64, "text": " then it exports all the symbols,", "tokens": [550, 309, 31428, 439, 264, 16944, 11], "temperature": 0.0, "avg_logprob": -0.07555984075252827, "compression_ratio": 1.603921568627451, "no_speech_prob": 2.468175625836011e-05}, {"id": 551, "seek": 267764, "start": 2683.64, "end": 2687.64, "text": " not just the symbols which, or anything without a leading underscore,", "tokens": [406, 445, 264, 16944, 597, 11, 420, 1340, 1553, 257, 5775, 37556, 11], "temperature": 0.0, "avg_logprob": -0.07555984075252827, "compression_ratio": 1.603921568627451, "no_speech_prob": 2.468175625836011e-05}, {"id": 552, "seek": 267764, "start": 2687.64, "end": 2691.64, "text": " not just the ones that you've actually directly typed in as your code,", "tokens": [406, 445, 264, 2306, 300, 291, 600, 767, 3838, 33941, 294, 382, 428, 3089, 11], "temperature": 0.0, "avg_logprob": -0.07555984075252827, "compression_ratio": 1.603921568627451, "no_speech_prob": 2.468175625836011e-05}, {"id": 553, "seek": 267764, "start": 2691.64, "end": 2694.64, "text": " but everything you import also gets exported,", "tokens": [457, 1203, 291, 974, 611, 2170, 42055, 11], "temperature": 0.0, "avg_logprob": -0.07555984075252827, "compression_ratio": 1.603921568627451, "no_speech_prob": 2.468175625836011e-05}, {"id": 554, "seek": 267764, "start": 2694.64, "end": 2699.64, "text": " and that very quickly can lead to namespace pollution.", "tokens": [293, 300, 588, 2661, 393, 1477, 281, 5288, 17940, 16727, 13], "temperature": 0.0, "avg_logprob": -0.07555984075252827, "compression_ratio": 1.603921568627451, "no_speech_prob": 2.468175625836011e-05}, {"id": 555, "seek": 267764, "start": 2699.64, "end": 2704.64, "text": " But with an nvdev module, because we automatically create a DUNDA ALL for you,", "tokens": [583, 365, 364, 297, 85, 40343, 10088, 11, 570, 321, 6772, 1884, 257, 413, 3979, 7509, 14824, 337, 291, 11], "temperature": 0.0, "avg_logprob": -0.07555984075252827, "compression_ratio": 1.603921568627451, "no_speech_prob": 2.468175625836011e-05}, {"id": 556, "seek": 270464, "start": 2704.64, "end": 2708.64, "text": " which includes only the things that you requested be exported,", "tokens": [597, 5974, 787, 264, 721, 300, 291, 16436, 312, 42055, 11], "temperature": 0.0, "avg_logprob": -0.14969569180919007, "compression_ratio": 1.6106194690265487, "no_speech_prob": 3.7051489925943315e-05}, {"id": 557, "seek": 270464, "start": 2708.64, "end": 2712.64, "text": " that means that you can see the imports, for example, from FastCore.Transform,", "tokens": [300, 1355, 300, 291, 393, 536, 264, 41596, 11, 337, 1365, 11, 490, 15968, 34, 418, 13, 33339, 837, 11], "temperature": 0.0, "avg_logprob": -0.14969569180919007, "compression_ratio": 1.6106194690265487, "no_speech_prob": 3.7051489925943315e-05}, {"id": 558, "seek": 270464, "start": 2712.64, "end": 2714.64, "text": " which is part of an nvdev library,", "tokens": [597, 307, 644, 295, 364, 297, 85, 40343, 6405, 11], "temperature": 0.0, "avg_logprob": -0.14969569180919007, "compression_ratio": 1.6106194690265487, "no_speech_prob": 3.7051489925943315e-05}, {"id": 559, "seek": 270464, "start": 2714.64, "end": 2717.64, "text": " there's just stuff from FastCore.Transform.", "tokens": [456, 311, 445, 1507, 490, 15968, 34, 418, 13, 33339, 837, 13], "temperature": 0.0, "avg_logprob": -0.14969569180919007, "compression_ratio": 1.6106194690265487, "no_speech_prob": 3.7051489925943315e-05}, {"id": 560, "seek": 270464, "start": 2717.64, "end": 2722.64, "text": " Or else if you look at something from alannlp.nn.util,", "tokens": [1610, 1646, 498, 291, 574, 412, 746, 490, 48146, 77, 75, 79, 13, 26384, 13, 20835, 11], "temperature": 0.0, "avg_logprob": -0.14969569180919007, "compression_ratio": 1.6106194690265487, "no_speech_prob": 3.7051489925943315e-05}, {"id": 561, "seek": 270464, "start": 2722.64, "end": 2726.64, "text": " you get copy, JSON, logging, default, etc.", "tokens": [291, 483, 5055, 11, 31828, 11, 27991, 11, 7576, 11, 5183, 13], "temperature": 0.0, "avg_logprob": -0.14969569180919007, "compression_ratio": 1.6106194690265487, "no_speech_prob": 3.7051489925943315e-05}, {"id": 562, "seek": 270464, "start": 2726.64, "end": 2731.64, "text": " This is not stuff created by alannlp.nn.util.", "tokens": [639, 307, 406, 1507, 2942, 538, 48146, 77, 75, 79, 13, 26384, 13, 20835, 13], "temperature": 0.0, "avg_logprob": -0.14969569180919007, "compression_ratio": 1.6106194690265487, "no_speech_prob": 3.7051489925943315e-05}, {"id": 563, "seek": 273164, "start": 2731.64, "end": 2739.64, "text": " And so because this is built using the traditional VS code approach,", "tokens": [400, 370, 570, 341, 307, 3094, 1228, 264, 5164, 25091, 3089, 3109, 11], "temperature": 0.0, "avg_logprob": -0.10291300750360256, "compression_ratio": 1.4068627450980393, "no_speech_prob": 3.2190651836572215e-05}, {"id": 564, "seek": 273164, "start": 2739.64, "end": 2744.64, "text": " it really is too much work to manually create DUNDA ALL,", "tokens": [309, 534, 307, 886, 709, 589, 281, 16945, 1884, 413, 3979, 7509, 14824, 11], "temperature": 0.0, "avg_logprob": -0.10291300750360256, "compression_ratio": 1.4068627450980393, "no_speech_prob": 3.2190651836572215e-05}, {"id": 565, "seek": 273164, "start": 2744.64, "end": 2750.64, "text": " so alannlp folks don't do it, just like pretty much every other Python library.", "tokens": [370, 48146, 77, 75, 79, 4024, 500, 380, 360, 309, 11, 445, 411, 1238, 709, 633, 661, 15329, 6405, 13], "temperature": 0.0, "avg_logprob": -0.10291300750360256, "compression_ratio": 1.4068627450980393, "no_speech_prob": 3.2190651836572215e-05}, {"id": 566, "seek": 273164, "start": 2750.64, "end": 2751.64, "text": " Not all of them.", "tokens": [1726, 439, 295, 552, 13], "temperature": 0.0, "avg_logprob": -0.10291300750360256, "compression_ratio": 1.4068627450980393, "no_speech_prob": 3.2190651836572215e-05}, {"id": 567, "seek": 273164, "start": 2751.64, "end": 2757.64, "text": " TK, for example, which comes with Python, does define DUNDA ALL,", "tokens": [314, 42, 11, 337, 1365, 11, 597, 1487, 365, 15329, 11, 775, 6964, 413, 3979, 7509, 14824, 11], "temperature": 0.0, "avg_logprob": -0.10291300750360256, "compression_ratio": 1.4068627450980393, "no_speech_prob": 3.2190651836572215e-05}, {"id": 568, "seek": 275764, "start": 2757.64, "end": 2763.64, "text": " which is nice, but I don't know of very many non-nvdev projects.", "tokens": [597, 307, 1481, 11, 457, 286, 500, 380, 458, 295, 588, 867, 2107, 12, 77, 85, 40343, 4455, 13], "temperature": 0.0, "avg_logprob": -0.08246950149536132, "compression_ratio": 1.5446428571428572, "no_speech_prob": 7.842975901439786e-05}, {"id": 569, "seek": 275764, "start": 2763.64, "end": 2766.64, "text": " So here's another nice thing with the documentation.", "tokens": [407, 510, 311, 1071, 1481, 551, 365, 264, 14333, 13], "temperature": 0.0, "avg_logprob": -0.08246950149536132, "compression_ratio": 1.5446428571428572, "no_speech_prob": 7.842975901439786e-05}, {"id": 570, "seek": 275764, "start": 2766.64, "end": 2770.64, "text": " In the docs, you can just put your symbols in Bactics.", "tokens": [682, 264, 45623, 11, 291, 393, 445, 829, 428, 16944, 294, 363, 578, 1167, 13], "temperature": 0.0, "avg_logprob": -0.08246950149536132, "compression_ratio": 1.5446428571428572, "no_speech_prob": 7.842975901439786e-05}, {"id": 571, "seek": 275764, "start": 2770.64, "end": 2774.64, "text": " And then when you create the docs, which again, it's automatic,", "tokens": [400, 550, 562, 291, 1884, 264, 45623, 11, 597, 797, 11, 309, 311, 12509, 11], "temperature": 0.0, "avg_logprob": -0.08246950149536132, "compression_ratio": 1.5446428571428572, "no_speech_prob": 7.842975901439786e-05}, {"id": 572, "seek": 275764, "start": 2774.64, "end": 2778.64, "text": " and it can be part of your CI system, in fact that is by default,", "tokens": [293, 309, 393, 312, 644, 295, 428, 37777, 1185, 11, 294, 1186, 300, 307, 538, 7576, 11], "temperature": 0.0, "avg_logprob": -0.08246950149536132, "compression_ratio": 1.5446428571428572, "no_speech_prob": 7.842975901439786e-05}, {"id": 573, "seek": 275764, "start": 2778.64, "end": 2780.64, "text": " you can see it actually creates hyperlinks.", "tokens": [291, 393, 536, 309, 767, 7829, 9848, 75, 16431, 13], "temperature": 0.0, "avg_logprob": -0.08246950149536132, "compression_ratio": 1.5446428571428572, "no_speech_prob": 7.842975901439786e-05}, {"id": 574, "seek": 278064, "start": 2780.64, "end": 2787.64, "text": " So nvdev knows how to actually look up each of these symbols and hyperlink to them.", "tokens": [407, 297, 85, 40343, 3255, 577, 281, 767, 574, 493, 1184, 295, 613, 16944, 293, 9848, 22473, 281, 552, 13], "temperature": 0.0, "avg_logprob": -0.08705002370506826, "compression_ratio": 1.6097560975609757, "no_speech_prob": 3.1199037039186805e-05}, {"id": 575, "seek": 278064, "start": 2787.64, "end": 2791.64, "text": " Even things like this, which are part of different libraries.", "tokens": [2754, 721, 411, 341, 11, 597, 366, 644, 295, 819, 15148, 13], "temperature": 0.0, "avg_logprob": -0.08705002370506826, "compression_ratio": 1.6097560975609757, "no_speech_prob": 3.1199037039186805e-05}, {"id": 576, "seek": 278064, "start": 2791.64, "end": 2797.64, "text": " So this is a really nice feature which allows you to help out your users", "tokens": [407, 341, 307, 257, 534, 1481, 4111, 597, 4045, 291, 281, 854, 484, 428, 5022], "temperature": 0.0, "avg_logprob": -0.08705002370506826, "compression_ratio": 1.6097560975609757, "no_speech_prob": 3.1199037039186805e-05}, {"id": 577, "seek": 278064, "start": 2797.64, "end": 2803.64, "text": " so that they can see exactly what you're talking about by jumping to other parts of the docs.", "tokens": [370, 300, 436, 393, 536, 2293, 437, 291, 434, 1417, 466, 538, 11233, 281, 661, 3166, 295, 264, 45623, 13], "temperature": 0.0, "avg_logprob": -0.08705002370506826, "compression_ratio": 1.6097560975609757, "no_speech_prob": 3.1199037039186805e-05}, {"id": 578, "seek": 278064, "start": 2803.64, "end": 2808.64, "text": " And of course, some things shouldn't be hyperlinked, like this is a parameter name,", "tokens": [400, 295, 1164, 11, 512, 721, 4659, 380, 312, 9848, 22473, 292, 11, 411, 341, 307, 257, 13075, 1315, 11], "temperature": 0.0, "avg_logprob": -0.08705002370506826, "compression_ratio": 1.6097560975609757, "no_speech_prob": 3.1199037039186805e-05}, {"id": 579, "seek": 280864, "start": 2808.64, "end": 2812.64, "text": " and so those will not end up hyperlinked.", "tokens": [293, 370, 729, 486, 406, 917, 493, 9848, 22473, 292, 13], "temperature": 0.0, "avg_logprob": -0.09793300315982005, "compression_ratio": 1.724907063197026, "no_speech_prob": 6.401173595804721e-05}, {"id": 580, "seek": 280864, "start": 2812.64, "end": 2818.64, "text": " So the documentation, which gets built for you, supports all the kinds of features you might imagine.", "tokens": [407, 264, 14333, 11, 597, 2170, 3094, 337, 291, 11, 9346, 439, 264, 3685, 295, 4122, 291, 1062, 3811, 13], "temperature": 0.0, "avg_logprob": -0.09793300315982005, "compression_ratio": 1.724907063197026, "no_speech_prob": 6.401173595804721e-05}, {"id": 581, "seek": 280864, "start": 2818.64, "end": 2821.64, "text": " A hierarchical menu to take you to any part of the documentation pages,", "tokens": [316, 35250, 804, 6510, 281, 747, 291, 281, 604, 644, 295, 264, 14333, 7183, 11], "temperature": 0.0, "avg_logprob": -0.09793300315982005, "compression_ratio": 1.724907063197026, "no_speech_prob": 6.401173595804721e-05}, {"id": 582, "seek": 280864, "start": 2821.64, "end": 2828.64, "text": " a table of contents for each page, you can have badges, opening colab, headings, links, all that kind of stuff.", "tokens": [257, 3199, 295, 15768, 337, 1184, 3028, 11, 291, 393, 362, 43894, 11, 5193, 1173, 455, 11, 1378, 1109, 11, 6123, 11, 439, 300, 733, 295, 1507, 13], "temperature": 0.0, "avg_logprob": -0.09793300315982005, "compression_ratio": 1.724907063197026, "no_speech_prob": 6.401173595804721e-05}, {"id": 583, "seek": 280864, "start": 2828.64, "end": 2833.64, "text": " So the documentation comes out pretty nice, I think.", "tokens": [407, 264, 14333, 1487, 484, 1238, 1481, 11, 286, 519, 13], "temperature": 0.0, "avg_logprob": -0.09793300315982005, "compression_ratio": 1.724907063197026, "no_speech_prob": 6.401173595804721e-05}, {"id": 584, "seek": 280864, "start": 2833.64, "end": 2837.64, "text": " So here's what happens, you just run nvdev build docs, and it takes a second or so.", "tokens": [407, 510, 311, 437, 2314, 11, 291, 445, 1190, 297, 85, 40343, 1322, 45623, 11, 293, 309, 2516, 257, 1150, 420, 370, 13], "temperature": 0.0, "avg_logprob": -0.09793300315982005, "compression_ratio": 1.724907063197026, "no_speech_prob": 6.401173595804721e-05}, {"id": 585, "seek": 283764, "start": 2837.64, "end": 2839.64, "text": " It's all done in parallel.", "tokens": [467, 311, 439, 1096, 294, 8952, 13], "temperature": 0.0, "avg_logprob": -0.17554394006729127, "compression_ratio": 1.4519230769230769, "no_speech_prob": 3.1689429306425154e-05}, {"id": 586, "seek": 283764, "start": 2839.64, "end": 2844.64, "text": " Or you can have something like a GitHub Action, or whatever continuous integration system you use,", "tokens": [1610, 291, 393, 362, 746, 411, 257, 23331, 16261, 11, 420, 2035, 10957, 10980, 1185, 291, 764, 11], "temperature": 0.0, "avg_logprob": -0.17554394006729127, "compression_ratio": 1.4519230769230769, "no_speech_prob": 3.1689429306425154e-05}, {"id": 587, "seek": 283764, "start": 2844.64, "end": 2849.64, "text": " and call the FastAI Workflows Build Docs GitHub Action.", "tokens": [293, 818, 264, 15968, 48698, 6603, 33229, 11875, 16024, 82, 23331, 16261, 13], "temperature": 0.0, "avg_logprob": -0.17554394006729127, "compression_ratio": 1.4519230769230769, "no_speech_prob": 3.1689429306425154e-05}, {"id": 588, "seek": 283764, "start": 2852.64, "end": 2859.64, "text": " So then you can open those docs directly as a notebook.", "tokens": [407, 550, 291, 393, 1269, 729, 45623, 3838, 382, 257, 21060, 13], "temperature": 0.0, "avg_logprob": -0.17554394006729127, "compression_ratio": 1.4519230769230769, "no_speech_prob": 3.1689429306425154e-05}, {"id": 589, "seek": 283764, "start": 2859.64, "end": 2865.64, "text": " And one of them is special, which is the one called index.ipinv.", "tokens": [400, 472, 295, 552, 307, 2121, 11, 597, 307, 264, 472, 1219, 8186, 13, 647, 259, 85, 13], "temperature": 0.0, "avg_logprob": -0.17554394006729127, "compression_ratio": 1.4519230769230769, "no_speech_prob": 3.1689429306425154e-05}, {"id": 590, "seek": 286564, "start": 2865.64, "end": 2871.64, "text": " The index.ipinv will automatically be turned into a readme.md for you as well.", "tokens": [440, 8186, 13, 647, 259, 85, 486, 6772, 312, 3574, 666, 257, 1401, 1398, 13, 76, 67, 337, 291, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.10493022139354419, "compression_ratio": 1.6860986547085202, "no_speech_prob": 7.720946450717747e-05}, {"id": 591, "seek": 286564, "start": 2871.64, "end": 2879.64, "text": " So no more worrying about trying to keep your files synchronized to make sure that your homepage and your readme are saying the same thing.", "tokens": [407, 572, 544, 18788, 466, 1382, 281, 1066, 428, 7098, 19331, 1602, 281, 652, 988, 300, 428, 31301, 293, 428, 1401, 1398, 366, 1566, 264, 912, 551, 13], "temperature": 0.0, "avg_logprob": -0.10493022139354419, "compression_ratio": 1.6860986547085202, "no_speech_prob": 7.720946450717747e-05}, {"id": 592, "seek": 286564, "start": 2879.64, "end": 2883.64, "text": " Now we actually do that for you automatically.", "tokens": [823, 321, 767, 360, 300, 337, 291, 6772, 13], "temperature": 0.0, "avg_logprob": -0.10493022139354419, "compression_ratio": 1.6860986547085202, "no_speech_prob": 7.720946450717747e-05}, {"id": 593, "seek": 286564, "start": 2883.64, "end": 2888.64, "text": " We also, of course, make sure that it's not only the notebook, but the homepage on your documentation website.", "tokens": [492, 611, 11, 295, 1164, 11, 652, 988, 300, 309, 311, 406, 787, 264, 21060, 11, 457, 264, 31301, 322, 428, 14333, 3144, 13], "temperature": 0.0, "avg_logprob": -0.10493022139354419, "compression_ratio": 1.6860986547085202, "no_speech_prob": 7.720946450717747e-05}, {"id": 594, "seek": 288864, "start": 2888.64, "end": 2897.64, "text": " And even your PyPy and Condor descriptions will all end up showing you the same information from your index notebook.", "tokens": [400, 754, 428, 9953, 47, 88, 293, 21793, 284, 24406, 486, 439, 917, 493, 4099, 291, 264, 912, 1589, 490, 428, 8186, 21060, 13], "temperature": 0.0, "avg_logprob": -0.0687868418516936, "compression_ratio": 1.599250936329588, "no_speech_prob": 2.5069206458283588e-05}, {"id": 595, "seek": 288864, "start": 2897.64, "end": 2904.64, "text": " So in this way, because we're just saying build stuff in one place, do it once, and then we'll make sure that everything syncs up for you,", "tokens": [407, 294, 341, 636, 11, 570, 321, 434, 445, 1566, 1322, 1507, 294, 472, 1081, 11, 360, 309, 1564, 11, 293, 550, 321, 603, 652, 988, 300, 1203, 5451, 14368, 493, 337, 291, 11], "temperature": 0.0, "avg_logprob": -0.0687868418516936, "compression_ratio": 1.599250936329588, "no_speech_prob": 2.5069206458283588e-05}, {"id": 596, "seek": 288864, "start": 2904.64, "end": 2912.64, "text": " that makes it trivially easy to create really nice user experiences for your users.", "tokens": [300, 1669, 309, 1376, 85, 2270, 1858, 281, 1884, 534, 1481, 4195, 5235, 337, 428, 5022, 13], "temperature": 0.0, "avg_logprob": -0.0687868418516936, "compression_ratio": 1.599250936329588, "no_speech_prob": 2.5069206458283588e-05}, {"id": 597, "seek": 288864, "start": 2912.64, "end": 2917.64, "text": " So for me, even when I create tiny, simple little projects, I always do them in nvdev.", "tokens": [407, 337, 385, 11, 754, 562, 286, 1884, 5870, 11, 2199, 707, 4455, 11, 286, 1009, 360, 552, 294, 297, 85, 40343, 13], "temperature": 0.0, "avg_logprob": -0.0687868418516936, "compression_ratio": 1.599250936329588, "no_speech_prob": 2.5069206458283588e-05}, {"id": 598, "seek": 291764, "start": 2917.64, "end": 2929.64, "text": " And that way I know that I can, in a minute or two, provide installable libraries and documentation just in case anybody else is interested in using my work.", "tokens": [400, 300, 636, 286, 458, 300, 286, 393, 11, 294, 257, 3456, 420, 732, 11, 2893, 3625, 712, 15148, 293, 14333, 445, 294, 1389, 4472, 1646, 307, 3102, 294, 1228, 452, 589, 13], "temperature": 0.0, "avg_logprob": -0.10471130646381181, "compression_ratio": 1.5901639344262295, "no_speech_prob": 3.480400482658297e-05}, {"id": 599, "seek": 291764, "start": 2929.64, "end": 2936.64, "text": " And often I find, even for stuff that I think is pretty niche, there's always a few people who are interested in using it too.", "tokens": [400, 2049, 286, 915, 11, 754, 337, 1507, 300, 286, 519, 307, 1238, 19956, 11, 456, 311, 1009, 257, 1326, 561, 567, 366, 3102, 294, 1228, 309, 886, 13], "temperature": 0.0, "avg_logprob": -0.10471130646381181, "compression_ratio": 1.5901639344262295, "no_speech_prob": 3.480400482658297e-05}, {"id": 600, "seek": 291764, "start": 2936.64, "end": 2938.64, "text": " Here's an example actually.", "tokens": [1692, 311, 364, 1365, 767, 13], "temperature": 0.0, "avg_logprob": -0.10471130646381181, "compression_ratio": 1.5901639344262295, "no_speech_prob": 3.480400482658297e-05}, {"id": 601, "seek": 291764, "start": 2938.64, "end": 2942.64, "text": " FastWebhook, which I mentioned before, it's really just written for myself.", "tokens": [15968, 4360, 65, 71, 1212, 11, 597, 286, 2835, 949, 11, 309, 311, 534, 445, 3720, 337, 2059, 13], "temperature": 0.0, "avg_logprob": -0.10471130646381181, "compression_ratio": 1.5901639344262295, "no_speech_prob": 3.480400482658297e-05}, {"id": 602, "seek": 294264, "start": 2942.64, "end": 2949.64, "text": " FastAI, I wanted a webhook that would send out a tweet anytime there was a release.", "tokens": [15968, 48698, 11, 286, 1415, 257, 3670, 71, 1212, 300, 576, 2845, 484, 257, 15258, 13038, 456, 390, 257, 4374, 13], "temperature": 0.0, "avg_logprob": -0.12616524489029593, "compression_ratio": 1.527027027027027, "no_speech_prob": 4.068739872309379e-05}, {"id": 603, "seek": 294264, "start": 2949.64, "end": 2956.64, "text": " But I did it. I wrote it in like two hours, I guess, and then I just hit make release.", "tokens": [583, 286, 630, 309, 13, 286, 4114, 309, 294, 411, 732, 2496, 11, 286, 2041, 11, 293, 550, 286, 445, 2045, 652, 4374, 13], "temperature": 0.0, "avg_logprob": -0.12616524489029593, "compression_ratio": 1.527027027027027, "no_speech_prob": 4.068739872309379e-05}, {"id": 604, "seek": 294264, "start": 2956.64, "end": 2968.64, "text": " And because I made it from nvdev template, it automatically created the Condor package and the PyPy package for me, and everything was all set up, which is really nice.", "tokens": [400, 570, 286, 1027, 309, 490, 297, 85, 40343, 12379, 11, 309, 6772, 2942, 264, 21793, 284, 7372, 293, 264, 9953, 47, 88, 7372, 337, 385, 11, 293, 1203, 390, 439, 992, 493, 11, 597, 307, 534, 1481, 13], "temperature": 0.0, "avg_logprob": -0.12616524489029593, "compression_ratio": 1.527027027027027, "no_speech_prob": 4.068739872309379e-05}, {"id": 605, "seek": 296864, "start": 2968.64, "end": 2977.64, "text": " One of the challenges with working with notebooks on version control is you can get some really ugly diffs that won't even load in notebooks.", "tokens": [1485, 295, 264, 4759, 365, 1364, 365, 43782, 322, 3037, 1969, 307, 291, 393, 483, 512, 534, 12246, 7593, 82, 300, 1582, 380, 754, 3677, 294, 43782, 13], "temperature": 0.0, "avg_logprob": -0.07605612632071618, "compression_ratio": 1.7023809523809523, "no_speech_prob": 2.468034472258296e-05}, {"id": 606, "seek": 296864, "start": 2977.64, "end": 2987.64, "text": " Nvdev will actually ensure that those diffs are turned into what I would call a notebook-level diff, which is to say it always ensures that your notebooks can be opened.", "tokens": [426, 85, 40343, 486, 767, 5586, 300, 729, 7593, 82, 366, 3574, 666, 437, 286, 576, 818, 257, 21060, 12, 12418, 7593, 11, 597, 307, 281, 584, 309, 1009, 28111, 300, 428, 43782, 393, 312, 5625, 13], "temperature": 0.0, "avg_logprob": -0.07605612632071618, "compression_ratio": 1.7023809523809523, "no_speech_prob": 2.468034472258296e-05}, {"id": 607, "seek": 296864, "start": 2987.64, "end": 2994.64, "text": " If there's a difference only in cell outputs, it just ignores them and just picks one, because you can just rerun it.", "tokens": [759, 456, 311, 257, 2649, 787, 294, 2815, 23930, 11, 309, 445, 5335, 2706, 552, 293, 445, 16137, 472, 11, 570, 291, 393, 445, 43819, 409, 309, 13], "temperature": 0.0, "avg_logprob": -0.07605612632071618, "compression_ratio": 1.7023809523809523, "no_speech_prob": 2.468034472258296e-05}, {"id": 608, "seek": 299464, "start": 2994.64, "end": 3003.64, "text": " If there's actually a difference in a cell, two people have changed the same cell, then it will actually show you the diff tags in a notebook.", "tokens": [759, 456, 311, 767, 257, 2649, 294, 257, 2815, 11, 732, 561, 362, 3105, 264, 912, 2815, 11, 550, 309, 486, 767, 855, 291, 264, 7593, 18632, 294, 257, 21060, 13], "temperature": 0.0, "avg_logprob": -0.08725986982646741, "compression_ratio": 1.5193370165745856, "no_speech_prob": 2.5866709620459005e-05}, {"id": 609, "seek": 299464, "start": 3003.64, "end": 3007.64, "text": " You can open it up in Jupyter and fix it up.", "tokens": [509, 393, 1269, 309, 493, 294, 22125, 88, 391, 293, 3191, 309, 493, 13], "temperature": 0.0, "avg_logprob": -0.08725986982646741, "compression_ratio": 1.5193370165745856, "no_speech_prob": 2.5866709620459005e-05}, {"id": 610, "seek": 299464, "start": 3007.64, "end": 3017.64, "text": " All of your tests run in parallel with nvdev test nvs, using as many cores as you have.", "tokens": [1057, 295, 428, 6921, 1190, 294, 8952, 365, 297, 85, 40343, 1500, 297, 36959, 11, 1228, 382, 867, 24826, 382, 291, 362, 13], "temperature": 0.0, "avg_logprob": -0.08725986982646741, "compression_ratio": 1.5193370165745856, "no_speech_prob": 2.5866709620459005e-05}, {"id": 611, "seek": 301764, "start": 3017.64, "end": 3026.64, "text": " So this is a great way to ensure that every notebook runs from the top to the bottom and has the actual outputs that you're expecting.", "tokens": [407, 341, 307, 257, 869, 636, 281, 5586, 300, 633, 21060, 6676, 490, 264, 1192, 281, 264, 2767, 293, 575, 264, 3539, 23930, 300, 291, 434, 9650, 13], "temperature": 0.0, "avg_logprob": -0.13470696388406955, "compression_ratio": 1.6083333333333334, "no_speech_prob": 2.6272404284100048e-05}, {"id": 612, "seek": 301764, "start": 3026.64, "end": 3033.64, "text": " Lots of nice little pieces like math equations support, all the LeTeX equations work nicely.", "tokens": [15908, 295, 1481, 707, 3755, 411, 5221, 11787, 1406, 11, 439, 264, 1456, 14233, 55, 11787, 589, 9594, 13], "temperature": 0.0, "avg_logprob": -0.13470696388406955, "compression_ratio": 1.6083333333333334, "no_speech_prob": 2.6272404284100048e-05}, {"id": 613, "seek": 301764, "start": 3033.64, "end": 3040.64, "text": " You use it in your markdown and it pops up both in your notebooks and in your documentation.", "tokens": [509, 764, 309, 294, 428, 1491, 5093, 293, 309, 16795, 493, 1293, 294, 428, 43782, 293, 294, 428, 14333, 13], "temperature": 0.0, "avg_logprob": -0.13470696388406955, "compression_ratio": 1.6083333333333334, "no_speech_prob": 2.6272404284100048e-05}, {"id": 614, "seek": 301764, "start": 3040.64, "end": 3046.64, "text": " We're using Catech, which is a really nice fast library for that.", "tokens": [492, 434, 1228, 383, 473, 339, 11, 597, 307, 257, 534, 1481, 2370, 6405, 337, 300, 13], "temperature": 0.0, "avg_logprob": -0.13470696388406955, "compression_ratio": 1.6083333333333334, "no_speech_prob": 2.6272404284100048e-05}, {"id": 615, "seek": 304664, "start": 3046.64, "end": 3054.64, "text": " And there are other things that we power as well, not just publishing libraries, but nvdev also powers fast pages,", "tokens": [400, 456, 366, 661, 721, 300, 321, 1347, 382, 731, 11, 406, 445, 17832, 15148, 11, 457, 297, 85, 40343, 611, 8674, 2370, 7183, 11], "temperature": 0.0, "avg_logprob": -0.1090285301208496, "compression_ratio": 1.5826086956521739, "no_speech_prob": 1.9831109966617078e-05}, {"id": 616, "seek": 304664, "start": 3054.64, "end": 3062.64, "text": " which is an increasingly popular blogging system where you can write Jupyter notebooks and it turns it into a blog.", "tokens": [597, 307, 364, 12980, 3743, 6968, 3249, 1185, 689, 291, 393, 2464, 22125, 88, 391, 43782, 293, 309, 4523, 309, 666, 257, 6968, 13], "temperature": 0.0, "avg_logprob": -0.1090285301208496, "compression_ratio": 1.5826086956521739, "no_speech_prob": 1.9831109966617078e-05}, {"id": 617, "seek": 304664, "start": 3062.64, "end": 3072.64, "text": " This is really nice for anybody who is often trying to communicate technical content involving equations and or code, visualizations.", "tokens": [639, 307, 534, 1481, 337, 4472, 567, 307, 2049, 1382, 281, 7890, 6191, 2701, 17030, 11787, 293, 420, 3089, 11, 5056, 14455, 13], "temperature": 0.0, "avg_logprob": -0.1090285301208496, "compression_ratio": 1.5826086956521739, "no_speech_prob": 1.9831109966617078e-05}, {"id": 618, "seek": 307264, "start": 3072.64, "end": 3083.64, "text": " No more copying and pasting gist into medium or copying and pasting plot outputs into files.", "tokens": [883, 544, 27976, 293, 1791, 278, 290, 468, 666, 6399, 420, 27976, 293, 1791, 278, 7542, 23930, 666, 7098, 13], "temperature": 0.0, "avg_logprob": -0.11770435432335, "compression_ratio": 1.5467980295566504, "no_speech_prob": 4.8314475861843675e-05}, {"id": 619, "seek": 307264, "start": 3083.64, "end": 3087.64, "text": " When you can do the whole thing in a notebook, there's nothing to think about.", "tokens": [1133, 291, 393, 360, 264, 1379, 551, 294, 257, 21060, 11, 456, 311, 1825, 281, 519, 466, 13], "temperature": 0.0, "avg_logprob": -0.11770435432335, "compression_ratio": 1.5467980295566504, "no_speech_prob": 4.8314475861843675e-05}, {"id": 620, "seek": 307264, "start": 3087.64, "end": 3090.64, "text": " It just works, which makes life very easy.", "tokens": [467, 445, 1985, 11, 597, 1669, 993, 588, 1858, 13], "temperature": 0.0, "avg_logprob": -0.11770435432335, "compression_ratio": 1.5467980295566504, "no_speech_prob": 4.8314475861843675e-05}, {"id": 621, "seek": 307264, "start": 3090.64, "end": 3097.64, "text": " And as we discussed earlier, FastDoc takes notebooks and turns them into publication quality books.", "tokens": [400, 382, 321, 7152, 3071, 11, 15968, 35, 905, 2516, 43782, 293, 4523, 552, 666, 19953, 3125, 3642, 13], "temperature": 0.0, "avg_logprob": -0.11770435432335, "compression_ratio": 1.5467980295566504, "no_speech_prob": 4.8314475861843675e-05}, {"id": 622, "seek": 309764, "start": 3097.64, "end": 3104.64, "text": " So I hope that you might give it a go and see why I like Jupyter notebooks.", "tokens": [407, 286, 1454, 300, 291, 1062, 976, 309, 257, 352, 293, 536, 983, 286, 411, 22125, 88, 391, 43782, 13], "temperature": 0.0, "avg_logprob": -0.09380887104914738, "compression_ratio": 1.4915254237288136, "no_speech_prob": 4.263366281520575e-05}, {"id": 623, "seek": 309764, "start": 3104.64, "end": 3113.64, "text": " You can just go to nvdev.fast.ai, which is of course a nbdev-powered documentation site.", "tokens": [509, 393, 445, 352, 281, 297, 85, 40343, 13, 7011, 13, 1301, 11, 597, 307, 295, 1164, 257, 297, 65, 40343, 12, 27178, 14333, 3621, 13], "temperature": 0.0, "avg_logprob": -0.09380887104914738, "compression_ratio": 1.4915254237288136, "no_speech_prob": 4.263366281520575e-05}, {"id": 624, "seek": 309764, "start": 3113.64, "end": 3120.64, "text": " And you can just click a button and it will create your nbdev repo for you and you can get started.", "tokens": [400, 291, 393, 445, 2052, 257, 2960, 293, 309, 486, 1884, 428, 297, 65, 40343, 49040, 337, 291, 293, 291, 393, 483, 1409, 13], "temperature": 0.0, "avg_logprob": -0.09380887104914738, "compression_ratio": 1.4915254237288136, "no_speech_prob": 4.263366281520575e-05}, {"id": 625, "seek": 312064, "start": 3120.64, "end": 3128.64, "text": " Thanks so much for watching and I hope that you try this out and find that you like Jupyter notebooks too. Thanks.", "tokens": [50364, 2561, 370, 709, 337, 1976, 293, 286, 1454, 300, 291, 853, 341, 484, 293, 915, 300, 291, 411, 22125, 88, 391, 43782, 886, 13, 2561, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08274377625564049, "compression_ratio": 1.2, "no_speech_prob": 5.1316488679731265e-05}], "language": "en"}