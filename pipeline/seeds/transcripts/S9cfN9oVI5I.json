{"text": " Hello. Hi. Adam's here. Yeah. I'm up late. I figured I should. I was going to say it. Say hello. Hello. Hello. Hello. Hello. Hello. I was going to say it must be say hello. Must be middle of the night what time is it where you are. Oh 104. Oh my goodness. Well, it's nice to see you. Thanks for your help on the forum. Sure. We're, we're going slowly but we're making progress nonetheless. Yeah. Well I noticed you had some problems with the rank operator. And if you're interested in some help with that. Oh, absolutely. You were thing was in the in session nine, you were trying to apply the rank operator on plus slash and couldn't make it work. And then, as you expected and then in the previous lesson. You were trying to use it on equal to make it compare like match. Yeah. We, we did get it to work in the last lesson, which was nice although I realized afterwards actually there's a perfectly good out of product version which works. But yeah, would love help with those things. What's the easiest thing to do. You open screen or I can do that but I can also just explain something and you can try it out for yourself, because it's a screen or be good. I mean, yeah, why don't you share yours. I can share my screen share. Well, I think also it's just good to watch somebody who knows what they're doing is getting to change. Okay, I don't usually use Jupiter notebook, but that's fine. Everything is this is the same otherwise. Okay. Actually, let me. Well, we did wait until Adam I just mentioned we just for those who didn't notice we just released the course cost up fast today I so like literally 15 minutes ago. First time in two years. Do I need to give you permission or anything that works okay great. Nice rabbit images, Jeremy. Yeah, thanks. I like the rabbits. It's now that now that computers can draw for us, I have no excuse not to add at work. My wife's an art teacher, and I've been showing her a few of the capabilities. What does she think of darling. I'm impressed, but I guess, like, like it blows my mind, but I don't think she really gets it. Yeah, you know, it's, it's, it's like, you know, you see it in the movies all the time. Yes, something we didn't realize computers couldn't do this before. Yeah. So you can you can you can see an empty blue screen dark blue screen. Yes. Yes. Okay, just clean slate. Don't need any interface. What is this is this is that this is called. No, this is right, but it's right in full screen mode with with toolbars and and everything turned off so that you can only see the API nothing else. Nice. And when you do ride your, you're using the normal backtick approach to entering symbols. I personally don't. I use the right right side alt key as a shift key. How do you set that up because I've always wanted that. There, I have created a way actual like Microsoft type keyboard layout that you can just install and then you don't need any of that looks okay. Can you put that in the chat or something. Other that afterwards. No problem. And so the important thing to understand is that rank. It's like, I know you call it in Australia, but some of the countries called it blinkers or call it blinders that you put in the in the head of a horse. You know what I mean. Blinders is. Yeah, so you put you put something on the head of the horse so that it doesn't get distracted by things around so it can only it narrows down its vision. That's the only thing that rank can do. So it's important to understand and that's why it was not working for you not with plus slash not with with equal so so I'm creating an array here. This is a two, two layer three row, four column array. And, the definition of plus slash is that it sums the rows. Now when I, when I sum the rows we saw this result before. So the first result is one plus two plus three plus four. It's 10 and then five six seven eight. Yeah, again, so more generally it's it's it's it's something over the last access is something the last access, which is always the rose. Yep. In any array, the last access is the rose. Right. And in this array there are six rows and slash always sums over the first access, the leading access yes the first access. Now, what I can do with with the rank operator is to give put blinders on on this function. So right now it's receiving as its argument, the entire array a. When I say rank to the only thing that it will ever see is arrays of rank to even if they're ever the actual rank of the argument is higher. So what rank will do is saying oh this function is only allowed to see a race of rank to let me show it this array of rank to. And when it's done processing that let me show it this array. And then I'll collect together its results from those two applications into a larger result. Now remember, plus slash sums the rose. So when it sees this row and array, it sums this row, and it sounds this row, and it sounds this row. Next time around it sums this and this and this, which means the result is going to be entirely identical to what we had before. What's actually happening is that it's seeing less at a time, but that doesn't matter. The result is the same. And if we do rank one, it is only allowed to ever see one row. So we'll sum this and then rank will let us some of this and so on. And we get the same results. When you rank zero, then ranks it knows okay this function is only ever allowed to see arrays of rank zero that is single elements. So we do tell it okay someone, then some two, which is why that gives us our array unmodified. The difference with plus slash is plus slash does the, sorry, plus slash bar is that it looks at the whole array and treats it as a whole array so it takes the entire first layer and adds it to the entire second layer like that. Now if you restrict the rank to rank two, it cannot see the entire array. The only thing you can see is this matrix. Because rank is restricting its vision. So now it's going to instead, the leading axis now is down here along the row. So it's going to add this row to this row to this row. Giving a result with four elements like that, which is why we get two times four elements. If I tell it rank one, then it will only ever be able to see one row at a time. So it will sum each row, and that's equivalent to plus slash. So in general, when you have two symbols that are the same but one has a bar on it. Then, if you give the one with a bar, rank one, that's the same thing as removing the bar. And so, is that why like you often see more experienced APL programmers kind of using the bar version kind of by default, because it's like more flexible. So now, if we try to use a function that computes the average. Oops, sorry. Let's do that again. Here's the function that computes the average. Sorry, you just learned TELY. So like that. Now, if I try to apply this on a table instead on the matrix. So we can use this one. Then obviously the average in each row should be two and five. Well, what's actually happening is that we get something that makes no sense at all. Why is that? Because TELY counts how many major cells there are that is along the first axis. So it says there are two. But plus slash is summing along the rows. So we are summing three numbers and dividing by two, that is not an average. So experienced APLers, they will use slash bar instead. This sums along the leading axis and this counts along the leading axis. And this will give me one average per column. So the average of one and four is two and a half. Average of two and five is three and a half. Yep. That's why the experienced APLers will use first axis functions because then they can always say, okay, if I want the average over the rows, I'll restrict the view of this function to the rows of this array. And now I get two and five. And I couldn't have done that if I had defined my function. It wouldn't be as flexible if I had defined my function in terms of last axis, only by defining it in terms of first axis, I'm able to narrow down this vision to any lower level. Is a way to think of that mnemonic with the slash bar is that like the bar is horizontal. So it deals with rows. Is that like a generic? Yeah, that's how I think of it at least. It goes down my rows instead of going along the columns. And then you have the same thing with this is reverse, horizontal reverse, and this meaning last axis reverse. And this is reversing it over the horizontal axis or rotating over the horizontal axis. Or flipping? Yeah, either flipping or vertically. Yeah, exactly. So this shows the bar is transposed, isn't it? Yes, they're going to transpose because it's flipping over the diagonal. Wow, that's so awesome. So, the problem we had with you're trying to do this thing, or something like that. Or we can take some numbers that makes it a little bit easier to understand. So, plus, and all the arithmetic functions are so called scalar functions. They actually have an implied rank zero. Always. Meaning, they're always so narrow minded that they only look at individual elements and never consider the whole array. And there's nothing the rank operator can do to change that. So as opposed to axis, which is an ad hoc syntax that actually looks at what function did you give it and does something special for it, the rank operator is entirely general purpose. It has no idea about which function it's applying. I see. So equals bar could be used to behave like equals. Exactly. So, exactly. So if we do this. Now we're using match that only is allowed to look at scalars at a time, so it looks at three and three. It looks at four and looks at five in pairs. And so we can use that to match anything so matches the more general purpose function than equal but equal is a very common construct. So that we have that separate function for that. And a good way to to get a view of thing in general, if you don't know what's going on in an expression. I think you did see this phrase once it sprints things so here's a really useful debugging trick. If I have a function I don't know exactly what's going on. I'll wrap it in a decent. And I'll put in alpha and omega. And this is a new statement. I don't know if you've seen that. And then I'll apply the function. So let's say for example that I'm using equal. So I'll put so the function will return the same result as the primitive function, but it's wrapped in such a way that it prints the arguments first. Yep. So now if we say, three, four, and three, five. We can see that the two, we should probably turn boxing on. You actually need the max style. That didn't. Oh, of course. I have to specify that even when functions are printing I want it to be boxed. So, what equal is seeing is three, four, and also three, five, but it does its thing element by element. Now if I apply the rank operator twice, will it. It will print twice, it will be called three, three, and four, five. So this is a good way to see it and you have already gone so advanced that you created your own operators. So we can actually, we can actually create a trace operator. And will it will print the arguments. And then it will apply the function to the arguments. So now we can say three, four equal TC. Three, five. And we can do it, and we can do it with with rank zero. It prints it like this. We can even make it fancier and put labels inside and saying alpha is this and omega is this and so on. You do need a different version for a monadic, though, because there would be a value around the alpha. So, there's a trick that you haven't learned yet, which is to type this. There's a special syntax in the default. It means, yeah I've seen that it means apply it means make, make that if you haven't passed an alpha. Yeah, it's just default left arguments, the default left argument is a funny default left argument because the default left argument is an is a function, which otherwise you can't pass in. But it's a function which is a know up is an identity function. And so here, if, if alpha is an identity function, then we just print omega and over here, if alpha is an identity function we apply alpha alpha monadically. And then we apply the identity function to it which doesn't do anything. So this is a general purpose TC. So now I can take a we had before. Sorry, just to clarify it. Yeah. Is that setting alpha. It's not sitting alpha to the identity function right it's setting alpha to the result of the identity function. No, it's makes alpha be the identity function. Oh, okay because I thought there's no argument to it so it's just a function assignments attested functions. Yeah, yeah, yeah. Yeah, okay sorry that makes perfect sense would be the same thing as as writing this. Yeah, yeah, I get it. Okay, so we don't have to change that. So now if we look at what plus slash is seeing. And that was our problem for beginning. So here, we can see that it's seeing the entire array. It's a little bit hard to read but here's our result. And this is the printout of the arguments, we can improve TC a little bit and say, alpha. Yeah. Oh yes of course that's not going to work. And then, alpha omega. Okay. So, there's only an omega in this case. And then it's seeing the entire array and it's something it's rose, and when we try to apply this rank to then we see is twice but it's again being applied to this it's exactly like applying plus slash to this, this array, someone else rose. Yep. And so, this is a really useful operator. You can you can modify it to your heart's content, you can make it do whatever you want. And to do things you can write a timestamp when it happened and so on. I mean, I can take questions but things should be more clear now, what the rank operator does just blinders, that's all it does. This was really helpful. Thank you. And this is what happened then with. When we had we compare these. You did the outer product like this. Now, what are the products is comparing all the elements on one side to all the elements on the other side all the different combinations. Yep, we can write this just with equal and rank. Yeah, that's what we did yesterday. Yeah, so, so again this is every element zero on the left, rank zero on the left gets compared to every element on the right. So yeah I know you I know you did this but there's a point here. So it gives us the same result. But what is equal actually seeing out of product applies between all combinations of left and right elements. That's not what's happening here. It's what you thought was happening here. So if you put TCN, you'll see that it's only being called with a scalar on the left and a vector on the right, because that's exactly what we asked for, scale on the left, vector on the right. If we instead do, dot, equal trace like this. You can see that it's being called individually on every pair. So the full way of behaving like the, like the outer product is to say I want equal to only ever see arguments of rank zero on one side and zero on the other side. And there's a, you're allowed to omit one if they're the same. And that function, which only looks at rank zero things should be applied between scalars on the left and vectors on the right. So I'm using rank twice. Oh, wow. Hang on. Okay. To understand. So, so everything. Left to right when we do operators operators. Yeah, or you could say the operators have a long left scope. So this operator takes the entire thing here, operator phrase on the left function phrase on the left. So this is saying this function can only ever see scalars and with that applied between scalars on the left and vectors on the right. Now, I don't get it. So if you're saying to apply it to vectors on the right, but you previously said it only you can ever apply to scalars. Yeah. So it's not remember rank is not modifying the function rank is calling the function one or more times as necessary, such that the function will have a restricted view. Yes. So this function over here will be called with left arguments are scalars and read against the vectors, we can see that by putting in CC. However, this function itself is the derives function. It is not a normal equal is an equal. It's a function that uses equal, but only ever let's equal experience a scalar on the left and the scale on the right. And how do we know that well we can look at with TC. So now we can see that this equal is being called like that one element at a time on the left and on the right, we could also put in a double TC, but it will be very proposed. And also when. Yeah, so, so we can see first to go up all the way here. So we say that the outer TC reported, I'm calling my operand with a scalar and a vector and the inner TC, the left one, saying, I'm seeing, I'm calling my operand with a scalar and a scalar. So actually, in some ways it makes sense to think about that composition train, right to left, in the sense that the right hand. Jot diuresis is taking the whole left hand. Function. So the kind of the implied loop is that left hand side is kind of the inner of the applied loop in a sense. Yes. And this is the governor. Or, or do you read it right to left until you hit the operator, and then you jump to the far left and read that. I mean that the parsing goes left to right. But the point is that the right hand dot diuresis has the entire left hand derived function as the thing that it's applying that right to. I find it a little bit dangerous to speak about a PL in terms of right to left left or right, it's a. It's kind of like a scaffold for letting people know how simple function application works in a PL, but it doesn't really apply when you have a full the full API syntax including operators and stranding and so on. Really, the, the way you should think of it is in terms of binding strength. What binds stronger. What bind stronger than to their neighboring tokens, then functions do. And then, when you have equal binding strength, then operators go from the left, stronger, so they have long left scope and operators left operand will be as far to the left as it can possibly reach without switching type. It can only take either function or an array. So, when parsing this, we can look at this as okay this operator. What does it take us is left operand well here we have an operator, a magnetic operator that can, it can't be just that because it can't take a magnetic operators operand so we have to keep going left, maybe this is the operand of TC. Oh, further left note there's a diabetic operator, it's going to grab the zero from TC. It takes us is left operand Oh, no, another left. So it has to have an operand keep going here. And there's a parenthesis stop we can't go any further. So we stop here. Or you could look the other way around this equal. Is it being applied now. No, it's being grabbed by an operator on the right. Is this being applied. No, it's being applied is being grabbed by an operator on the right. So here's the right operand are we ready to apply. Nope, there's an operator on the right grabbing me. Is this ready. No, there's another operator. And then finally, the right operand and the supremacist we can go any further. So it doesn't matter which way you go. As long as you know the binding strength rules, you just go one token ahead and see are we done yet. And if the binding rules say no we're not done yet. And you keep going. And related to this, I, I found it very insightful listening to you. A raycast episode talking about why, why you tend to avoid parentheses, which is not because you're trying to type less characters, but because it's a similar idea that you're saying there's less to keep in your head at once. And if you can just work, you know, in the natural direction and only have to keep one thing in your head at a time. Right. And it doesn't really matter you can read a PL right to left to left to right, it's just a matter of reading it. So, so the way I would read this from left to right. And actually I would avoid this parenthesis, I do need to separate this array from this array. But I can do that with an identity function. Because this operand here has to stop here. We're switching to a new token here it can't grab farther further. So that identity function. So, what's the code again right something right. It's called, I mean the fish and then the same right right right tech is the symbol. Yeah. Yeah. And, and so that function in a dyadic context returns its right hand side and in a monadic context returns well it's returns its right hand side. That's it. I like to call it right, because it's returns whatever's on the right. Right. And so that functions, not doing anything except as I pass that now. I basically can see that I've got a function being applied to an array. And therefore I'm. Yeah, that's that's a unit of stuff that API can then. So you can read this from from. So, normally I would read a pill, if these expressions are short enough from left to right. Interesting. Because it's executed from right to left. We can read it from left to right, and I will make a crazy claim here that English is written and read from left to right. And it executes from right to left. Come back to that. And so this is ABCD equal on scalars on scalars and vectors. To a BDC BCA. It's naturally from left to right. Yeah, I know it's like when you say like, you know, three divide tilde dioresis, something you can start reading it as like three divided into, and then you can start divides that expression divides. Make it three three divides five. English is is executed from right to left. Go drive the big red. You still have no idea what I'm saying. Bus. Okay, so first you have to evaluate bus. Right, then you have to make it red, then you have to make it big, then you have to talk about the concept of driving it then you have to go do that. Go drive the big red bus. It's insightful. Yeah. Normal function syntax in other programming languages is also from right to left, even though everybody thinks it's from left to right. Because if I write F, G of H of X, you have to evaluate X first and before you evaluate H before you evaluate G before you write it and read it left to right. Nowadays I'm moving towards the syntax where you kind of, well, or maybe functional kind of a right arrow kind of clear for some yeah pipe pipe type thing. Yeah. That's true. Yeah. But anyway, enough about that. So, I hope this clarifies matters a bit. Yeah, it's great. I'm sorry, half of your time. I'm thrilled. No, I have any questions about anything. I might want to go to sleep. Watch the watch previous ones and then join in. This is great. I guess I have a more general question, which is, do you have any thoughts about. I mean, I want us to finish all the glyphs right which hopefully won't take too much longer. But when we do I think the next step will be to learn to write a PL properly and also understand why, like what, why is what proper is proper. So things like this use bar version of glyphs because they're more flexible thing is like a pretty key insight is there like good videos or books or anything like that for getting these kinds of insights. The art of a PL. I don't. There are some tips and tricks. I, in general, a pill isn't very opinionated about how you should write things. In fact, I think dialogue is kind of proud of the language being a multi paradigm language. You can write in a functional style you don't have to. You can write in the object or in the style if you want to, but you don't have to, you can write test it or you can write non tested. So where you want. However, if you want a good performance, for example, then there's some things you should should stick to. If you want more flexibility to your, your functions are generally more applicable, then there's some things you can stick to. I would say for what we're doing, I would say for what we're doing more flexibility is probably what we're aiming for, because I think like this study group. I kind of positioned it as like learning about a flexible and expressive notation which might help us to think about probably you know problems that we're solving. And so there's not enough, I think, to write in order to make a paper of it's like a couple of lines of tips. Like this, make your functions leading access oriented. So that then they're more flexible you can apply them, you can always make them later access oriented by using the rank operator and and keep your codes flat. And you can do a raise of a raise. No, and when the algorithms should use arrays that are not nested. We can have these arrays of race you haven't used a whole lot of them. No, but, and, but the opposite is called simple arrays or flat arrays. And they are. I've heard some people call it they're more sympathetic to the hardware. So, the computer is really really good at the race because it's actually if I remember correctly. Okay, yeah no. So Jay doesn't exactly let you have a raise a raise you have to explicitly box them, and then the difference is very little it's almost. Okay, it doesn't. It's more focused on a raise of a raise if I remember. Yeah, okay doesn't allow you multi dimensional erased only allows lists of lists of lists, and there's no other way. And then it has to. There are some choices that we made in design, you know, to avoid that, because it doesn't allow multi dimensional arrays. Yeah, in in pytorch, and such things we. We've talked about these issues a lot, because you really like it really kills you on the GPU. If you're, you know, doing something across anything other than the trailing access. It's not going to work, but it'll be, you know, doing a non stride. So yeah, exactly. But it's not just stride that's you have a stride, if you're a raise actually represented flat in memory, yes, which is my torch. Yeah, but if you have nested arrays, it's not contiguous at all, not even a stride is that you know exactly, and that is going to kill performance. Yeah, and not only performance but actually in today's computers are so fast that the bottleneck is often memory throughput, the RAM cannot feed problems to the, to the processor fast enough the processors just sitting there waiting for the RAM to deliver more work. And this is actually a very current issue in the deep learning world, because as of a year or two ago a lot of papers were written that would write about the flops that their algorithm would require. And nobody, nobody but a lot of people writing these papers hadn't quite noticed that there was very little correlation between flops and time, because of the memory issues now. My torch doesn't let you have tensors of tensors. So it's less of a problem, but yeah it does turn out that memory, memory is probably the more important issue in deep learning algorithms. So, so here's, here's one more trick to use in a PL at least use Boolean masks. Hmm. As much as you can. And that is because, again, the RAM is the issue of the bottleneck. And so, in other words, of conditionals. Not just in serve conditionals but instead of integers if you can, instead of using indices and things, then you should use a mask for the whole thing. The reason for that is, and store data as Boolean. I just want to make sure I'm on the same wavelength so as you're saying instead of like having an array that says like get indices two, three and five, you would have a mask array of zeros in which items two, three and five have a one in that location. So for example, you need to combine two conditions, and you know that elements, one, two, and five abide by these conditions, and you, and then by one condition you have another condition for which elements, two, four and five hold the condition. So you could do the intersection of the two sets. I'm out of time to get the indices. Well, not much, but they're just numbers right there. So you do the intersection of them as sets. And then those are the ones that where the condition holds for both and then you could index things. However, if you had them as Boolean masks instead so it would be whatever 0101 something like that, and one of them and so on. So you can just do an and the Boolean and, and that gives you a new mask. Doing a Boolean and operation on binary data in the processor is enormously much faster than doing a set intersection. That's what I meant about multiply. So you could do okay yes that kind of much right. Yes, exactly. And there's another benefit of this is the API will aggressively squeeze arrays and Boolean arrays are stored as one bit Boolean. That means that you can store eight elements in a single byte. Wait, how does that work because it's not like typed per se so if it would just notice that the highest is one and the lowest is zero. And if I then try to store a two and it will have to reallocate the whole thing or something. Yes, yes. And then but that means since the process is waiting for the data, and we're able to switch to a to an eighth of the data size. That means that the transfer time which is important time is going to be an eighth. And that gives you enormous speed ups. And so we have all these very clever algorithms built into the interpreter and algorithms that are difficult to develop. It can take decades to write the C codes for that a secret for that. And they can give you a speed up like that. So basically by using a PL that is optimized like this. You are, you are employing see clever see programmers that have been working for you for years to fine tune your program way before you even started writing your program. So these are, I can't don't even think I can think of more of more things that have good principles, then, then that. Okay, that's very useful and masks keep keep your race and flat. And was the first thing I said before. The first and first access, leading access and things. And so, with. So for. I mean the general programming principles you don't do global state changes and so it was a really bad idea. And one thing we. Yes, I think I think we're pretty familiar as a community with more general software engineering principles one thing that surprised me when we were learning about each was that it didn't operate over kind of major cells but instead it operated over sub arrays. And I guess that that what now that we know about rank. We, we can just use rank for anything that we want to go over major cells which means maybe each is not so useful anymore. Each is actually really really simple. I can I can show you if you want. I can explain what is happening with each. So, okay. And like I said, just in general, but like each each is a thing that you would use and, you know, is it not occasionally, but it depends what it is I'm doing. I'll try to avoid it as much as possible and among API programmers, because it's an explicit loop. And that means the interpreter has no choice but to loop. And we don't want loops we want to do a real operations because then the processors now have array instructions. In fact, not expand rank operator doesn't create explicit loops rank operator conceptually loops, but internally if it can avoid it, they will not loop so it knows about a lot of stuff if it can exactly, exactly. So that would be good to have a little section in the notebook there, Jeremy where we might like say, this is an explicit loop and this is the less explicit way to do it. Well yeah, I mean, it's a different notebook I think then like, you know, we've got to think about how to present all this but I think you know there's a note that the theory of this first notebook or set of notebooks is literally, you know, a dictionary of APL glyphs in an order where you never get a definition in terms of something you haven't learned yet, you know, and then there's something later about like okay what what do you do with it. Cool yeah. So, so, right so if you use the rank operator to loop then you might keep the performance because it doesn't actually loop, it uses fancy instructions. And for that instead each doesn't have much of a choice, although occasionally the interpreter is clever enough, you judge you use plus each, you will not actually loop because it knows how to circuit that and then just do it directly. But what's happening with with each is, it's just think of the matrix and want to loop over each row. But really what each is, is very very simple so if you have F each. That's the same thing as another year now that you've learned enough of these compositional operators, you learn the top. It's the in close, which I don't know we haven't done in close but you can do it quickly what it is. It's basically just wrapping an array up as a single element as a scalar. It's adding a leading act. Oh, it's not adding a leading act not adding an axis creating a scale. It's creating a pointer to it, you can think of it like that. What type is that is that some new type we haven't learned yet like it's literally an enclosed, an enclosed item. Like there aren't really types in a well it's not numeric scalar it's not a, and it's not a pointer type. It doesn't. It's not a reference. No. Okay, because a PL is passed by value. And so it will do, it will not keep connections between things that you assign across, but internally it's actually a pointer and that's pretty much how you can think of it, but you need an enclosure it's a scalar. And so what it is, is in close at top F over this close and disclose exactly the opposite, which means follow the pointer, go, go get one element and open it up. So, I'm just trying to remember so the chart dioresis pre process both arguments. Yes, but if there's only one argument remember then it's the same thing as on the top. I do remember. Yeah. So that's that's why it's useful to have it to that so this means actually pre process all arguments, whether there's one or two, we just pre process them with this close so we open up a box. I'm going to check it out. You've got. Oh, no, you don't have a fork these operators not functions. Okay, so this is. So here you've got function operator function operator function operator array. Okay, so this whole thing is monadic because there's a thing only on the right. And then, wait, wait, what, what are you saying. This is not. This is not this whole thing is one giant function. This function is a bit of a let me call it it's both monadic and the attic. Oh, how is this a function I thought the zero on the right hands. Oh no the side of the operator. Yeah, yeah so this says, so what it's saying is on every scalar element and loop as much as necessary to address scalar elements. Okay, this is fine. Both. Both sides, not mine. This is rank. Oh, yes, of course that's right. So this says on scalars. So we already we already dug. The first thing we do is dig all the way down to the scalars. That means there's nothing you can do to each to make it apply to rose. It's already impossible it's like, it's like equal or plus it's already down at the scale of the scale is. Yeah, sorry. So it never says the right. Yeah, it never sees a road never sees any F will never see anything that comes from more than a single element. So on the single elements. Yeah. And remember this zero actually means 000 because it means is zero, it's rank zero monadically, it's rank zero and left and this rank zero right, so it's always rank zero. Then, on those elements, open them up, if they are nested. If they're not nested like just a simple array then nothing happens. Apply F, and package the results back into the box. Oh yeah because the. When you've got multiple composition. Because, right to left, this is what you're saying. Yeah, you could you get the binding goes like that so we saying, so this, this is F post processed by enclosing the result. And pre processed by disclosing the result. Okay, so we can show you have actually used nested arrays that have been implied in close already. So, and what we can say is an example, ABC. This is exactly the same thing as the enclose of ABC concatenated with the enclose of the F the stranding syntax is just a nicety it's in tactic sugar, it means this. It just includes all the elements that are being stranded together. So, so conceptually, these are well not so they really are their scalars, because every vector consists of scalars, and every matrix consists of rows that have scalars in them elements in them. And so this is an, and maybe we should turn boxing up to why is now. Why is that not just an array of arrays, where the first array is ABC and the second array is to you. Well, it is. Okay, so why do you need that enclosed idea. Because if I didn't have enclosed here. Then we would just be concatenating together. Yes, yeah, so we need to say, each, each three element vector lives in its own little scalar. And so these are individual scalars if we look at the, at the shape of this, it's the empty vector it's a scalar. Yeah. If you look at the depth of it. It's depth to. There's an outer array, which is a scalar, and there's an inner array, which is a vector. So the two levels. Yeah. And so, this is what we have. This is exactly the same thing as ABC, D, F. And now it's easier to understand when I do reverse each on these. What was actually happening here is I started off by applying on so you can make our little. We can make this TC each. So we can see that TC is first seeing ABC then seeing D F. Well done. So if TC is seeing ABC, then firstly, Well, if the reverse is seeing ABC, that means not it was only applied to the first element. That's the rank zero, but it wasn't it didn't see the enclosure. So we have disclosed it. We've opened it up. And what did that. Well, because remember the definition of of each. So in this case, it's the enclosing enclosing a top. The disclosing. Like zero. This is what each means. That's the definition of each. If we didn't do the disclosing, if you just do this right. Reverse running zero, then we are reversing each scalar, but reversing a scalar doesn't do anything. If we only pre process it by opening them up, then we would get the matrix because we're having the results from this is a vector. So two vectors in an array makes a matrix. So to stick them back into their boxes where they came from, we post process. The result of reverse, and this is a definition of each. And that's why you cannot use a function that has an each after it to access to access entire rows of a matrix. It's just not possible. Right. However, if we take three four reshape by your top. And I also 12. And we want to reverse each row. Well, you can use rank. You can firstly this function anyway is rank rank one. Remember, if this function is the leading access one, then the corresponding function is the same thing rank one. So this reverses the first taxes and this reverses the last taxes. It makes it flips it horizontally. And if we use the first taxes one with rank one, then we're flipping the rows because there's only one access in them. We only ever seeing one of these. So how could we use reverse each to reverse the rose. Well, for that sake, reverse first each. Well, if we know that each will open up these boxes and close them down again. So if we give it boxes that they can apply on, then it will work. So if I in close rank one. So in close remember puts a box around things. If I just in close the array, we get a multiple enclosed. We can keep making beautiful patterns. If I close rank one, then I took each row and made it into a scalar. That means we have a collection of three scalars. That's called the vector and nested vector. Now I can reverse each. Isn't there a arrow that does the same thing? Yes, for matrices, there is a down arrow, but it's not really necessary. It does exactly the same thing on matrices, but it doesn't do the same thing on higher rank array. So it's more general. In a sense, this is itself is a last access function. And whereas in close is a leading access function that works on everything. So it's not even restricted to be on the lower rank. Oh, I see. So you can think of down arrow and enclosed as the leading and trailing access versions of the same thing. Yeah, you could. They don't look similar. They don't look similar, but that's because. Enclosed with a bar would look like a epsilon or something. It would look like this. That means something else. Oh, OK. Yeah, you haven't learned it yet. You'll see. I don't give it a spot at all. But there's never any reason really to use a down arrow. It's just confusing when higher rank arrays. It's much easier conceptually to understand that this puts things into boxes and it gets restricted to only see rows. So it puts the rows into boxes. And then we can we can disclose. The problem is we need to disclose each of these. So we need to disclose rank zero. The elements are of the vector. This vector has three elements and I want to open up each one of them because it's confined to a box. We get our metrics back. So this is exactly the process. But notice here, I'm enclosing only to applying each. So that I can again disclose. Well, that's the inverse operations of what each actually implies. Because this each is actually. Over. Disclose rank zero. And then enclosed on top of that. So these negate each other. This makes scalars that are enclosed and this opens scalars that are enclosed. And this encloses the results and this discloses the results. So these two cancel each other out and these two cancel each other out. And the only thing we have left is this rank one, which it already is. And we're right back so we can do it. You come full circle. That's great. This is why you cannot use each on rows, but you can use rank on rows. So. And the interpreter is clever enough that if you if you write. Reverse rank one. Oops. It won't loop. It will understand that it needs to reverse the rows and it will do that. And in as fast as it can do that with Victor instructions memory. I don't know if it can actually speed anything up here but it will try. Wow, it's nice to. Learn APL from somebody who understands it. Thanks for that. We should let you get some sleep. I'd not get back to get to sleep and and that's actually, that's our hour so that's actually fantastic. That's awesome. I feel a little bit bad about the hijacking your whole thing but we're happy to have you hijack all the whole things. It's great. Thank you. No, it was it's great that you're, you know, spending the time to watch them all it was great that you joined this was very much for me so. Well, you know, I mean I enjoy also seeing senior explorations and it gives me some some feedback on where we can improve our documentation must be a bit cringy though to his CSP like, what are we doing. Just press that button Jeremy for God's sake. It's been a couple of times where I kind of wish I was there so if you could hear it. I think the thing that's a little bit here is you seem to be going down a wrong conceptual path regards to to rank. Yes, where you think it seemed like you were thinking that rank actually modifies their, the function, just like the bracket axis modifies the function. That isn't the case. Got it. It's nice to know that if we go too far off the deep end. I'll have sleepless nights if you go too far off the right path. Join the call at the beginning we're like, all right. Thanks all otherwise, feel free to ask me questions I mean I'll respond on the farms and so you will. Bye.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 3.0, "text": " Hello.", "tokens": [2425, 13], "temperature": 0.0, "avg_logprob": -0.5347307990579044, "compression_ratio": 1.4086021505376345, "no_speech_prob": 0.15918277204036713}, {"id": 1, "seek": 0, "start": 3.0, "end": 5.0, "text": " Hi.", "tokens": [2421, 13], "temperature": 0.0, "avg_logprob": -0.5347307990579044, "compression_ratio": 1.4086021505376345, "no_speech_prob": 0.15918277204036713}, {"id": 2, "seek": 0, "start": 5.0, "end": 7.0, "text": " Adam's here.", "tokens": [7938, 311, 510, 13], "temperature": 0.0, "avg_logprob": -0.5347307990579044, "compression_ratio": 1.4086021505376345, "no_speech_prob": 0.15918277204036713}, {"id": 3, "seek": 0, "start": 7.0, "end": 9.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.5347307990579044, "compression_ratio": 1.4086021505376345, "no_speech_prob": 0.15918277204036713}, {"id": 4, "seek": 0, "start": 9.0, "end": 11.0, "text": " I'm up late.", "tokens": [286, 478, 493, 3469, 13], "temperature": 0.0, "avg_logprob": -0.5347307990579044, "compression_ratio": 1.4086021505376345, "no_speech_prob": 0.15918277204036713}, {"id": 5, "seek": 0, "start": 11.0, "end": 13.0, "text": " I figured I should.", "tokens": [286, 8932, 286, 820, 13], "temperature": 0.0, "avg_logprob": -0.5347307990579044, "compression_ratio": 1.4086021505376345, "no_speech_prob": 0.15918277204036713}, {"id": 6, "seek": 0, "start": 13.0, "end": 15.0, "text": " I was going to say it.", "tokens": [286, 390, 516, 281, 584, 309, 13], "temperature": 0.0, "avg_logprob": -0.5347307990579044, "compression_ratio": 1.4086021505376345, "no_speech_prob": 0.15918277204036713}, {"id": 7, "seek": 0, "start": 15.0, "end": 17.0, "text": " Say hello.", "tokens": [6463, 7751, 13], "temperature": 0.0, "avg_logprob": -0.5347307990579044, "compression_ratio": 1.4086021505376345, "no_speech_prob": 0.15918277204036713}, {"id": 8, "seek": 0, "start": 17.0, "end": 19.0, "text": " Hello.", "tokens": [2425, 13], "temperature": 0.0, "avg_logprob": -0.5347307990579044, "compression_ratio": 1.4086021505376345, "no_speech_prob": 0.15918277204036713}, {"id": 9, "seek": 0, "start": 19.0, "end": 21.0, "text": " Hello.", "tokens": [2425, 13], "temperature": 0.0, "avg_logprob": -0.5347307990579044, "compression_ratio": 1.4086021505376345, "no_speech_prob": 0.15918277204036713}, {"id": 10, "seek": 0, "start": 21.0, "end": 23.0, "text": " Hello.", "tokens": [2425, 13], "temperature": 0.0, "avg_logprob": -0.5347307990579044, "compression_ratio": 1.4086021505376345, "no_speech_prob": 0.15918277204036713}, {"id": 11, "seek": 0, "start": 23.0, "end": 25.0, "text": " Hello.", "tokens": [2425, 13], "temperature": 0.0, "avg_logprob": -0.5347307990579044, "compression_ratio": 1.4086021505376345, "no_speech_prob": 0.15918277204036713}, {"id": 12, "seek": 0, "start": 25.0, "end": 27.0, "text": " Hello.", "tokens": [2425, 13], "temperature": 0.0, "avg_logprob": -0.5347307990579044, "compression_ratio": 1.4086021505376345, "no_speech_prob": 0.15918277204036713}, {"id": 13, "seek": 2700, "start": 27.0, "end": 30.0, "text": " I was going to say it must be say hello.", "tokens": [286, 390, 516, 281, 584, 309, 1633, 312, 584, 7751, 13], "temperature": 0.0, "avg_logprob": -0.1723144829991352, "compression_ratio": 1.4692737430167597, "no_speech_prob": 9.442832379136235e-05}, {"id": 14, "seek": 2700, "start": 30.0, "end": 34.0, "text": " Must be middle of the night what time is it where you are.", "tokens": [13252, 312, 2808, 295, 264, 1818, 437, 565, 307, 309, 689, 291, 366, 13], "temperature": 0.0, "avg_logprob": -0.1723144829991352, "compression_ratio": 1.4692737430167597, "no_speech_prob": 9.442832379136235e-05}, {"id": 15, "seek": 2700, "start": 34.0, "end": 36.0, "text": " Oh 104.", "tokens": [876, 47757, 13], "temperature": 0.0, "avg_logprob": -0.1723144829991352, "compression_ratio": 1.4692737430167597, "no_speech_prob": 9.442832379136235e-05}, {"id": 16, "seek": 2700, "start": 36.0, "end": 42.0, "text": " Oh my goodness. Well, it's nice to see you. Thanks for your help on the forum.", "tokens": [876, 452, 8387, 13, 1042, 11, 309, 311, 1481, 281, 536, 291, 13, 2561, 337, 428, 854, 322, 264, 17542, 13], "temperature": 0.0, "avg_logprob": -0.1723144829991352, "compression_ratio": 1.4692737430167597, "no_speech_prob": 9.442832379136235e-05}, {"id": 17, "seek": 2700, "start": 42.0, "end": 45.0, "text": " Sure.", "tokens": [4894, 13], "temperature": 0.0, "avg_logprob": -0.1723144829991352, "compression_ratio": 1.4692737430167597, "no_speech_prob": 9.442832379136235e-05}, {"id": 18, "seek": 2700, "start": 45.0, "end": 52.0, "text": " We're, we're going slowly but we're making progress nonetheless.", "tokens": [492, 434, 11, 321, 434, 516, 5692, 457, 321, 434, 1455, 4205, 26756, 13], "temperature": 0.0, "avg_logprob": -0.1723144829991352, "compression_ratio": 1.4692737430167597, "no_speech_prob": 9.442832379136235e-05}, {"id": 19, "seek": 2700, "start": 52.0, "end": 54.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.1723144829991352, "compression_ratio": 1.4692737430167597, "no_speech_prob": 9.442832379136235e-05}, {"id": 20, "seek": 5400, "start": 54.0, "end": 60.0, "text": " Well I noticed you had some problems with the rank operator. And if you're interested in some help with that.", "tokens": [1042, 286, 5694, 291, 632, 512, 2740, 365, 264, 6181, 12973, 13, 400, 498, 291, 434, 3102, 294, 512, 854, 365, 300, 13], "temperature": 0.0, "avg_logprob": -0.14346035577917612, "compression_ratio": 1.6905829596412556, "no_speech_prob": 3.477269638096914e-05}, {"id": 21, "seek": 5400, "start": 60.0, "end": 71.0, "text": " Oh, absolutely. You were thing was in the in session nine, you were trying to apply the rank operator on plus slash and couldn't make it work.", "tokens": [876, 11, 3122, 13, 509, 645, 551, 390, 294, 264, 294, 5481, 4949, 11, 291, 645, 1382, 281, 3079, 264, 6181, 12973, 322, 1804, 17330, 293, 2809, 380, 652, 309, 589, 13], "temperature": 0.0, "avg_logprob": -0.14346035577917612, "compression_ratio": 1.6905829596412556, "no_speech_prob": 3.477269638096914e-05}, {"id": 22, "seek": 5400, "start": 71.0, "end": 76.0, "text": " And then, as you expected and then in the previous lesson.", "tokens": [400, 550, 11, 382, 291, 5176, 293, 550, 294, 264, 3894, 6898, 13], "temperature": 0.0, "avg_logprob": -0.14346035577917612, "compression_ratio": 1.6905829596412556, "no_speech_prob": 3.477269638096914e-05}, {"id": 23, "seek": 5400, "start": 76.0, "end": 83.0, "text": " You were trying to use it on equal to make it compare like match.", "tokens": [509, 645, 1382, 281, 764, 309, 322, 2681, 281, 652, 309, 6794, 411, 2995, 13], "temperature": 0.0, "avg_logprob": -0.14346035577917612, "compression_ratio": 1.6905829596412556, "no_speech_prob": 3.477269638096914e-05}, {"id": 24, "seek": 8300, "start": 83.0, "end": 84.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.13802936428883036, "compression_ratio": 1.3942857142857144, "no_speech_prob": 1.3838489394402131e-05}, {"id": 25, "seek": 8300, "start": 84.0, "end": 99.0, "text": " We, we did get it to work in the last lesson, which was nice although I realized afterwards actually there's a perfectly good out of product version which works.", "tokens": [492, 11, 321, 630, 483, 309, 281, 589, 294, 264, 1036, 6898, 11, 597, 390, 1481, 4878, 286, 5334, 10543, 767, 456, 311, 257, 6239, 665, 484, 295, 1674, 3037, 597, 1985, 13], "temperature": 0.0, "avg_logprob": -0.13802936428883036, "compression_ratio": 1.3942857142857144, "no_speech_prob": 1.3838489394402131e-05}, {"id": 26, "seek": 8300, "start": 99.0, "end": 104.0, "text": " But yeah, would love help with those things. What's the easiest thing to do.", "tokens": [583, 1338, 11, 576, 959, 854, 365, 729, 721, 13, 708, 311, 264, 12889, 551, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.13802936428883036, "compression_ratio": 1.3942857142857144, "no_speech_prob": 1.3838489394402131e-05}, {"id": 27, "seek": 10400, "start": 104.0, "end": 114.0, "text": " You open screen or I can do that but I can also just explain something and you can try it out for yourself, because it's a screen or be good.", "tokens": [509, 1269, 2568, 420, 286, 393, 360, 300, 457, 286, 393, 611, 445, 2903, 746, 293, 291, 393, 853, 309, 484, 337, 1803, 11, 570, 309, 311, 257, 2568, 420, 312, 665, 13], "temperature": 0.0, "avg_logprob": -0.25676793227961037, "compression_ratio": 1.6020408163265305, "no_speech_prob": 4.32974957220722e-05}, {"id": 28, "seek": 10400, "start": 114.0, "end": 124.0, "text": " I mean, yeah, why don't you share yours. I can share my screen share. Well, I think also it's just good to watch somebody who knows what they're doing is getting to change.", "tokens": [286, 914, 11, 1338, 11, 983, 500, 380, 291, 2073, 6342, 13, 286, 393, 2073, 452, 2568, 2073, 13, 1042, 11, 286, 519, 611, 309, 311, 445, 665, 281, 1159, 2618, 567, 3255, 437, 436, 434, 884, 307, 1242, 281, 1319, 13], "temperature": 0.0, "avg_logprob": -0.25676793227961037, "compression_ratio": 1.6020408163265305, "no_speech_prob": 4.32974957220722e-05}, {"id": 29, "seek": 12400, "start": 124.0, "end": 134.0, "text": " Okay, I don't usually use Jupiter notebook, but that's fine. Everything is this is the same otherwise.", "tokens": [1033, 11, 286, 500, 380, 2673, 764, 24567, 21060, 11, 457, 300, 311, 2489, 13, 5471, 307, 341, 307, 264, 912, 5911, 13], "temperature": 0.0, "avg_logprob": -0.24828549435264186, "compression_ratio": 1.135135135135135, "no_speech_prob": 9.220920219377149e-06}, {"id": 30, "seek": 12400, "start": 134.0, "end": 137.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.24828549435264186, "compression_ratio": 1.135135135135135, "no_speech_prob": 9.220920219377149e-06}, {"id": 31, "seek": 12400, "start": 137.0, "end": 140.0, "text": " Actually, let me.", "tokens": [5135, 11, 718, 385, 13], "temperature": 0.0, "avg_logprob": -0.24828549435264186, "compression_ratio": 1.135135135135135, "no_speech_prob": 9.220920219377149e-06}, {"id": 32, "seek": 14000, "start": 140.0, "end": 154.0, "text": " Well, we did wait until Adam I just mentioned we just for those who didn't notice we just released the course cost up fast today I so like literally 15 minutes ago.", "tokens": [1042, 11, 321, 630, 1699, 1826, 7938, 286, 445, 2835, 321, 445, 337, 729, 567, 994, 380, 3449, 321, 445, 4736, 264, 1164, 2063, 493, 2370, 965, 286, 370, 411, 3736, 2119, 2077, 2057, 13], "temperature": 0.0, "avg_logprob": -0.3287680402715155, "compression_ratio": 1.3309859154929577, "no_speech_prob": 2.142220728273969e-05}, {"id": 33, "seek": 14000, "start": 154.0, "end": 164.0, "text": " First time in two years.", "tokens": [2386, 565, 294, 732, 924, 13], "temperature": 0.0, "avg_logprob": -0.3287680402715155, "compression_ratio": 1.3309859154929577, "no_speech_prob": 2.142220728273969e-05}, {"id": 34, "seek": 16400, "start": 164.0, "end": 189.0, "text": " Do I need to give you permission or anything that works okay great. Nice rabbit images, Jeremy. Yeah, thanks. I like the rabbits. It's now that now that computers can draw for us, I have no excuse not to add at work.", "tokens": [1144, 286, 643, 281, 976, 291, 11226, 420, 1340, 300, 1985, 1392, 869, 13, 5490, 19509, 5267, 11, 17809, 13, 865, 11, 3231, 13, 286, 411, 264, 38752, 13, 467, 311, 586, 300, 586, 300, 10807, 393, 2642, 337, 505, 11, 286, 362, 572, 8960, 406, 281, 909, 412, 589, 13], "temperature": 0.0, "avg_logprob": -0.15086494792591443, "compression_ratio": 1.3935483870967742, "no_speech_prob": 1.861903365352191e-05}, {"id": 35, "seek": 18900, "start": 189.0, "end": 201.0, "text": " My wife's an art teacher, and I've been showing her a few of the capabilities. What does she think of darling.", "tokens": [1222, 3836, 311, 364, 1523, 5027, 11, 293, 286, 600, 668, 4099, 720, 257, 1326, 295, 264, 10862, 13, 708, 775, 750, 519, 295, 22405, 13], "temperature": 0.0, "avg_logprob": -0.3049205144246419, "compression_ratio": 1.1578947368421053, "no_speech_prob": 4.860409171669744e-05}, {"id": 36, "seek": 20100, "start": 201.0, "end": 222.0, "text": " I'm impressed, but I guess, like, like it blows my mind, but I don't think she really gets it. Yeah, you know, it's, it's, it's like, you know, you see it in the movies all the time.", "tokens": [286, 478, 11679, 11, 457, 286, 2041, 11, 411, 11, 411, 309, 18458, 452, 1575, 11, 457, 286, 500, 380, 519, 750, 534, 2170, 309, 13, 865, 11, 291, 458, 11, 309, 311, 11, 309, 311, 11, 309, 311, 411, 11, 291, 458, 11, 291, 536, 309, 294, 264, 6233, 439, 264, 565, 13], "temperature": 0.0, "avg_logprob": -0.1839458620226061, "compression_ratio": 1.5723270440251573, "no_speech_prob": 5.7089782785624266e-05}, {"id": 37, "seek": 20100, "start": 222.0, "end": 225.0, "text": " Yes, something we didn't realize computers couldn't do this before.", "tokens": [1079, 11, 746, 321, 994, 380, 4325, 10807, 2809, 380, 360, 341, 949, 13], "temperature": 0.0, "avg_logprob": -0.1839458620226061, "compression_ratio": 1.5723270440251573, "no_speech_prob": 5.7089782785624266e-05}, {"id": 38, "seek": 22500, "start": 225.0, "end": 235.0, "text": " Yeah. So you can you can you can see an empty blue screen dark blue screen. Yes. Yes. Okay, just clean slate. Don't need any interface.", "tokens": [865, 13, 407, 291, 393, 291, 393, 291, 393, 536, 364, 6707, 3344, 2568, 2877, 3344, 2568, 13, 1079, 13, 1079, 13, 1033, 11, 445, 2541, 39118, 13, 1468, 380, 643, 604, 9226, 13], "temperature": 0.0, "avg_logprob": -0.230480983339507, "compression_ratio": 1.6666666666666667, "no_speech_prob": 8.66191567183705e-06}, {"id": 39, "seek": 22500, "start": 235.0, "end": 241.0, "text": " What is this is this is that this is called.", "tokens": [708, 307, 341, 307, 341, 307, 300, 341, 307, 1219, 13], "temperature": 0.0, "avg_logprob": -0.230480983339507, "compression_ratio": 1.6666666666666667, "no_speech_prob": 8.66191567183705e-06}, {"id": 40, "seek": 22500, "start": 241.0, "end": 251.0, "text": " No, this is right, but it's right in full screen mode with with toolbars and and everything turned off so that you can only see the API nothing else.", "tokens": [883, 11, 341, 307, 558, 11, 457, 309, 311, 558, 294, 1577, 2568, 4391, 365, 365, 2290, 42162, 293, 293, 1203, 3574, 766, 370, 300, 291, 393, 787, 536, 264, 9362, 1825, 1646, 13], "temperature": 0.0, "avg_logprob": -0.230480983339507, "compression_ratio": 1.6666666666666667, "no_speech_prob": 8.66191567183705e-06}, {"id": 41, "seek": 25100, "start": 251.0, "end": 256.0, "text": " Nice.", "tokens": [5490, 13], "temperature": 0.0, "avg_logprob": -0.20550301035896676, "compression_ratio": 1.4050632911392404, "no_speech_prob": 9.971000508812722e-06}, {"id": 42, "seek": 25100, "start": 256.0, "end": 264.0, "text": " And when you do ride your, you're using the normal backtick approach to entering symbols. I personally don't.", "tokens": [400, 562, 291, 360, 5077, 428, 11, 291, 434, 1228, 264, 2710, 646, 83, 618, 3109, 281, 11104, 16944, 13, 286, 5665, 500, 380, 13], "temperature": 0.0, "avg_logprob": -0.20550301035896676, "compression_ratio": 1.4050632911392404, "no_speech_prob": 9.971000508812722e-06}, {"id": 43, "seek": 25100, "start": 264.0, "end": 271.0, "text": " I use the right right side alt key as a shift key. How do you set that up because I've always wanted that.", "tokens": [286, 764, 264, 558, 558, 1252, 4955, 2141, 382, 257, 5513, 2141, 13, 1012, 360, 291, 992, 300, 493, 570, 286, 600, 1009, 1415, 300, 13], "temperature": 0.0, "avg_logprob": -0.20550301035896676, "compression_ratio": 1.4050632911392404, "no_speech_prob": 9.971000508812722e-06}, {"id": 44, "seek": 27100, "start": 271.0, "end": 284.0, "text": " There, I have created a way actual like Microsoft type keyboard layout that you can just install and then you don't need any of that looks okay. Can you put that in the chat or something.", "tokens": [821, 11, 286, 362, 2942, 257, 636, 3539, 411, 8116, 2010, 10186, 13333, 300, 291, 393, 445, 3625, 293, 550, 291, 500, 380, 643, 604, 295, 300, 1542, 1392, 13, 1664, 291, 829, 300, 294, 264, 5081, 420, 746, 13], "temperature": 0.0, "avg_logprob": -0.2177898815699986, "compression_ratio": 1.4972972972972973, "no_speech_prob": 8.528673788532615e-06}, {"id": 45, "seek": 27100, "start": 284.0, "end": 287.0, "text": " Other that afterwards.", "tokens": [5358, 300, 10543, 13], "temperature": 0.0, "avg_logprob": -0.2177898815699986, "compression_ratio": 1.4972972972972973, "no_speech_prob": 8.528673788532615e-06}, {"id": 46, "seek": 27100, "start": 287.0, "end": 288.0, "text": " No problem.", "tokens": [883, 1154, 13], "temperature": 0.0, "avg_logprob": -0.2177898815699986, "compression_ratio": 1.4972972972972973, "no_speech_prob": 8.528673788532615e-06}, {"id": 47, "seek": 27100, "start": 288.0, "end": 294.0, "text": " And so the important thing to understand is that", "tokens": [400, 370, 264, 1021, 551, 281, 1223, 307, 300], "temperature": 0.0, "avg_logprob": -0.2177898815699986, "compression_ratio": 1.4972972972972973, "no_speech_prob": 8.528673788532615e-06}, {"id": 48, "seek": 27100, "start": 294.0, "end": 296.0, "text": " rank.", "tokens": [6181, 13], "temperature": 0.0, "avg_logprob": -0.2177898815699986, "compression_ratio": 1.4972972972972973, "no_speech_prob": 8.528673788532615e-06}, {"id": 49, "seek": 29600, "start": 296.0, "end": 307.0, "text": " It's like, I know you call it in Australia, but some of the countries called it blinkers or call it blinders that you put in the in the head of a horse.", "tokens": [467, 311, 411, 11, 286, 458, 291, 818, 309, 294, 7060, 11, 457, 512, 295, 264, 3517, 1219, 309, 24667, 433, 420, 818, 309, 6865, 433, 300, 291, 829, 294, 264, 294, 264, 1378, 295, 257, 6832, 13], "temperature": 0.0, "avg_logprob": -0.19945086524600075, "compression_ratio": 1.731818181818182, "no_speech_prob": 4.463295408640988e-05}, {"id": 50, "seek": 29600, "start": 307.0, "end": 308.0, "text": " You know what I mean.", "tokens": [509, 458, 437, 286, 914, 13], "temperature": 0.0, "avg_logprob": -0.19945086524600075, "compression_ratio": 1.731818181818182, "no_speech_prob": 4.463295408640988e-05}, {"id": 51, "seek": 29600, "start": 308.0, "end": 310.0, "text": " Blinders is.", "tokens": [34126, 433, 307, 13], "temperature": 0.0, "avg_logprob": -0.19945086524600075, "compression_ratio": 1.731818181818182, "no_speech_prob": 4.463295408640988e-05}, {"id": 52, "seek": 29600, "start": 310.0, "end": 318.0, "text": " Yeah, so you put you put something on the head of the horse so that it doesn't get distracted by things around so it can only it narrows down its vision.", "tokens": [865, 11, 370, 291, 829, 291, 829, 746, 322, 264, 1378, 295, 264, 6832, 370, 300, 309, 1177, 380, 483, 21658, 538, 721, 926, 370, 309, 393, 787, 309, 6397, 1509, 760, 1080, 5201, 13], "temperature": 0.0, "avg_logprob": -0.19945086524600075, "compression_ratio": 1.731818181818182, "no_speech_prob": 4.463295408640988e-05}, {"id": 53, "seek": 29600, "start": 318.0, "end": 323.0, "text": " That's the only thing that rank can do.", "tokens": [663, 311, 264, 787, 551, 300, 6181, 393, 360, 13], "temperature": 0.0, "avg_logprob": -0.19945086524600075, "compression_ratio": 1.731818181818182, "no_speech_prob": 4.463295408640988e-05}, {"id": 54, "seek": 32300, "start": 323.0, "end": 338.0, "text": " So it's important to understand and that's why it was not working for you not with plus slash not with with equal so so I'm creating an array here. This is a two, two layer three row, four column array.", "tokens": [407, 309, 311, 1021, 281, 1223, 293, 300, 311, 983, 309, 390, 406, 1364, 337, 291, 406, 365, 1804, 17330, 406, 365, 365, 2681, 370, 370, 286, 478, 4084, 364, 10225, 510, 13, 639, 307, 257, 732, 11, 732, 4583, 1045, 5386, 11, 1451, 7738, 10225, 13], "temperature": 0.0, "avg_logprob": -0.2197810601497042, "compression_ratio": 1.5321637426900585, "no_speech_prob": 7.409964837279404e-06}, {"id": 55, "seek": 32300, "start": 338.0, "end": 341.0, "text": " And,", "tokens": [400, 11], "temperature": 0.0, "avg_logprob": -0.2197810601497042, "compression_ratio": 1.5321637426900585, "no_speech_prob": 7.409964837279404e-06}, {"id": 56, "seek": 32300, "start": 341.0, "end": 348.0, "text": " the definition of plus slash is that it sums the rows.", "tokens": [264, 7123, 295, 1804, 17330, 307, 300, 309, 34499, 264, 13241, 13], "temperature": 0.0, "avg_logprob": -0.2197810601497042, "compression_ratio": 1.5321637426900585, "no_speech_prob": 7.409964837279404e-06}, {"id": 57, "seek": 34800, "start": 348.0, "end": 355.0, "text": " Now when I, when I sum the rows we saw this result before. So the first result is one plus two plus three plus four.", "tokens": [823, 562, 286, 11, 562, 286, 2408, 264, 13241, 321, 1866, 341, 1874, 949, 13, 407, 264, 700, 1874, 307, 472, 1804, 732, 1804, 1045, 1804, 1451, 13], "temperature": 0.0, "avg_logprob": -0.26093845982705394, "compression_ratio": 1.74, "no_speech_prob": 1.5443705706275068e-05}, {"id": 58, "seek": 34800, "start": 355.0, "end": 367.0, "text": " It's 10 and then five six seven eight. Yeah, again, so more generally it's it's it's it's something over the last access is something the last access, which is always the rose.", "tokens": [467, 311, 1266, 293, 550, 1732, 2309, 3407, 3180, 13, 865, 11, 797, 11, 370, 544, 5101, 309, 311, 309, 311, 309, 311, 309, 311, 746, 670, 264, 1036, 2105, 307, 746, 264, 1036, 2105, 11, 597, 307, 1009, 264, 10895, 13], "temperature": 0.0, "avg_logprob": -0.26093845982705394, "compression_ratio": 1.74, "no_speech_prob": 1.5443705706275068e-05}, {"id": 59, "seek": 34800, "start": 367.0, "end": 372.0, "text": " Yep. In any array, the last access is the rose. Right.", "tokens": [7010, 13, 682, 604, 10225, 11, 264, 1036, 2105, 307, 264, 10895, 13, 1779, 13], "temperature": 0.0, "avg_logprob": -0.26093845982705394, "compression_ratio": 1.74, "no_speech_prob": 1.5443705706275068e-05}, {"id": 60, "seek": 37200, "start": 372.0, "end": 391.0, "text": " And in this array there are six rows and slash always sums over the first access, the leading access yes the first access. Now, what I can do with with the rank operator is to give put blinders on on this function.", "tokens": [400, 294, 341, 10225, 456, 366, 2309, 13241, 293, 17330, 1009, 34499, 670, 264, 700, 2105, 11, 264, 5775, 2105, 2086, 264, 700, 2105, 13, 823, 11, 437, 286, 393, 360, 365, 365, 264, 6181, 12973, 307, 281, 976, 829, 6865, 433, 322, 322, 341, 2445, 13], "temperature": 0.0, "avg_logprob": -0.1530452756320729, "compression_ratio": 1.5245901639344261, "no_speech_prob": 5.954665084573207e-06}, {"id": 61, "seek": 37200, "start": 391.0, "end": 397.0, "text": " So right now it's receiving as its argument, the entire array a.", "tokens": [407, 558, 586, 309, 311, 10040, 382, 1080, 6770, 11, 264, 2302, 10225, 257, 13], "temperature": 0.0, "avg_logprob": -0.1530452756320729, "compression_ratio": 1.5245901639344261, "no_speech_prob": 5.954665084573207e-06}, {"id": 62, "seek": 39700, "start": 397.0, "end": 408.0, "text": " When I say rank to the only thing that it will ever see is arrays of rank to even if they're ever the actual rank of the argument is higher.", "tokens": [1133, 286, 584, 6181, 281, 264, 787, 551, 300, 309, 486, 1562, 536, 307, 41011, 295, 6181, 281, 754, 498, 436, 434, 1562, 264, 3539, 6181, 295, 264, 6770, 307, 2946, 13], "temperature": 0.0, "avg_logprob": -0.16157984152072813, "compression_ratio": 1.7688172043010753, "no_speech_prob": 1.3205973118601833e-05}, {"id": 63, "seek": 39700, "start": 408.0, "end": 420.0, "text": " So what rank will do is saying oh this function is only allowed to see a race of rank to let me show it this array of rank to. And when it's done processing that let me show it this array.", "tokens": [407, 437, 6181, 486, 360, 307, 1566, 1954, 341, 2445, 307, 787, 4350, 281, 536, 257, 4569, 295, 6181, 281, 718, 385, 855, 309, 341, 10225, 295, 6181, 281, 13, 400, 562, 309, 311, 1096, 9007, 300, 718, 385, 855, 309, 341, 10225, 13], "temperature": 0.0, "avg_logprob": -0.16157984152072813, "compression_ratio": 1.7688172043010753, "no_speech_prob": 1.3205973118601833e-05}, {"id": 64, "seek": 42000, "start": 420.0, "end": 437.0, "text": " And then I'll collect together its results from those two applications into a larger result. Now remember, plus slash sums the rose. So when it sees this row and array, it sums this row, and it sounds this row, and it sounds this row.", "tokens": [400, 550, 286, 603, 2500, 1214, 1080, 3542, 490, 729, 732, 5821, 666, 257, 4833, 1874, 13, 823, 1604, 11, 1804, 17330, 34499, 264, 10895, 13, 407, 562, 309, 8194, 341, 5386, 293, 10225, 11, 309, 34499, 341, 5386, 11, 293, 309, 3263, 341, 5386, 11, 293, 309, 3263, 341, 5386, 13], "temperature": 0.0, "avg_logprob": -0.11020162245806525, "compression_ratio": 1.7536231884057971, "no_speech_prob": 1.617681118659675e-05}, {"id": 65, "seek": 42000, "start": 437.0, "end": 446.0, "text": " Next time around it sums this and this and this, which means the result is going to be entirely identical to what we had before.", "tokens": [3087, 565, 926, 309, 34499, 341, 293, 341, 293, 341, 11, 597, 1355, 264, 1874, 307, 516, 281, 312, 7696, 14800, 281, 437, 321, 632, 949, 13], "temperature": 0.0, "avg_logprob": -0.11020162245806525, "compression_ratio": 1.7536231884057971, "no_speech_prob": 1.617681118659675e-05}, {"id": 66, "seek": 44600, "start": 446.0, "end": 453.0, "text": " What's actually happening is that it's seeing less at a time, but that doesn't matter.", "tokens": [708, 311, 767, 2737, 307, 300, 309, 311, 2577, 1570, 412, 257, 565, 11, 457, 300, 1177, 380, 1871, 13], "temperature": 0.0, "avg_logprob": -0.14181595756894066, "compression_ratio": 1.755458515283843, "no_speech_prob": 2.0134290025453083e-05}, {"id": 67, "seek": 44600, "start": 453.0, "end": 455.0, "text": " The result is the same.", "tokens": [440, 1874, 307, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.14181595756894066, "compression_ratio": 1.755458515283843, "no_speech_prob": 2.0134290025453083e-05}, {"id": 68, "seek": 44600, "start": 455.0, "end": 465.0, "text": " And if we do rank one, it is only allowed to ever see one row. So we'll sum this and then rank will let us some of this and so on. And we get the same results.", "tokens": [400, 498, 321, 360, 6181, 472, 11, 309, 307, 787, 4350, 281, 1562, 536, 472, 5386, 13, 407, 321, 603, 2408, 341, 293, 550, 6181, 486, 718, 505, 512, 295, 341, 293, 370, 322, 13, 400, 321, 483, 264, 912, 3542, 13], "temperature": 0.0, "avg_logprob": -0.14181595756894066, "compression_ratio": 1.755458515283843, "no_speech_prob": 2.0134290025453083e-05}, {"id": 69, "seek": 44600, "start": 465.0, "end": 475.0, "text": " When you rank zero, then ranks it knows okay this function is only ever allowed to see arrays of rank zero that is single elements.", "tokens": [1133, 291, 6181, 4018, 11, 550, 21406, 309, 3255, 1392, 341, 2445, 307, 787, 1562, 4350, 281, 536, 41011, 295, 6181, 4018, 300, 307, 2167, 4959, 13], "temperature": 0.0, "avg_logprob": -0.14181595756894066, "compression_ratio": 1.755458515283843, "no_speech_prob": 2.0134290025453083e-05}, {"id": 70, "seek": 47500, "start": 475.0, "end": 486.0, "text": " So we do tell it okay someone, then some two, which is why that gives us our array unmodified.", "tokens": [407, 321, 360, 980, 309, 1392, 1580, 11, 550, 512, 732, 11, 597, 307, 983, 300, 2709, 505, 527, 10225, 517, 8014, 2587, 13], "temperature": 0.0, "avg_logprob": -0.25082906654902865, "compression_ratio": 1.119047619047619, "no_speech_prob": 2.1106170606799424e-05}, {"id": 71, "seek": 48600, "start": 486.0, "end": 507.0, "text": " The difference with plus slash is plus slash does the, sorry, plus slash bar is that it looks at the whole array and treats it as a whole array so it takes the entire first layer and adds it to the entire second layer like that.", "tokens": [440, 2649, 365, 1804, 17330, 307, 1804, 17330, 775, 264, 11, 2597, 11, 1804, 17330, 2159, 307, 300, 309, 1542, 412, 264, 1379, 10225, 293, 19566, 309, 382, 257, 1379, 10225, 370, 309, 2516, 264, 2302, 700, 4583, 293, 10860, 309, 281, 264, 2302, 1150, 4583, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.13878489440342165, "compression_ratio": 1.7014925373134329, "no_speech_prob": 1.5778206261529704e-06}, {"id": 72, "seek": 50700, "start": 507.0, "end": 517.0, "text": " Now if you restrict the rank to rank two, it cannot see the entire array. The only thing you can see is this matrix.", "tokens": [823, 498, 291, 7694, 264, 6181, 281, 6181, 732, 11, 309, 2644, 536, 264, 2302, 10225, 13, 440, 787, 551, 291, 393, 536, 307, 341, 8141, 13], "temperature": 0.0, "avg_logprob": -0.12503785451253255, "compression_ratio": 1.7159763313609468, "no_speech_prob": 6.642364496656228e-06}, {"id": 73, "seek": 50700, "start": 517.0, "end": 530.0, "text": " Because rank is restricting its vision. So now it's going to instead, the leading axis now is down here along the row. So it's going to add this row to this row to this row.", "tokens": [1436, 6181, 307, 1472, 37714, 1080, 5201, 13, 407, 586, 309, 311, 516, 281, 2602, 11, 264, 5775, 10298, 586, 307, 760, 510, 2051, 264, 5386, 13, 407, 309, 311, 516, 281, 909, 341, 5386, 281, 341, 5386, 281, 341, 5386, 13], "temperature": 0.0, "avg_logprob": -0.12503785451253255, "compression_ratio": 1.7159763313609468, "no_speech_prob": 6.642364496656228e-06}, {"id": 74, "seek": 53000, "start": 530.0, "end": 537.0, "text": " Giving a result with four elements like that, which is why we get two times four elements.", "tokens": [28983, 257, 1874, 365, 1451, 4959, 411, 300, 11, 597, 307, 983, 321, 483, 732, 1413, 1451, 4959, 13], "temperature": 0.0, "avg_logprob": -0.07643030535790228, "compression_ratio": 1.4683544303797469, "no_speech_prob": 1.5684188838349655e-05}, {"id": 75, "seek": 53000, "start": 537.0, "end": 550.0, "text": " If I tell it rank one, then it will only ever be able to see one row at a time. So it will sum each row, and that's equivalent to plus slash.", "tokens": [759, 286, 980, 309, 6181, 472, 11, 550, 309, 486, 787, 1562, 312, 1075, 281, 536, 472, 5386, 412, 257, 565, 13, 407, 309, 486, 2408, 1184, 5386, 11, 293, 300, 311, 10344, 281, 1804, 17330, 13], "temperature": 0.0, "avg_logprob": -0.07643030535790228, "compression_ratio": 1.4683544303797469, "no_speech_prob": 1.5684188838349655e-05}, {"id": 76, "seek": 55000, "start": 550.0, "end": 564.0, "text": " So in general, when you have two symbols that are the same but one has a bar on it. Then, if you give the one with a bar, rank one, that's the same thing as removing the bar.", "tokens": [407, 294, 2674, 11, 562, 291, 362, 732, 16944, 300, 366, 264, 912, 457, 472, 575, 257, 2159, 322, 309, 13, 1396, 11, 498, 291, 976, 264, 472, 365, 257, 2159, 11, 6181, 472, 11, 300, 311, 264, 912, 551, 382, 12720, 264, 2159, 13], "temperature": 0.0, "avg_logprob": -0.10636931373959496, "compression_ratio": 1.5592417061611374, "no_speech_prob": 5.5935852287802845e-06}, {"id": 77, "seek": 55000, "start": 564.0, "end": 575.0, "text": " And so, is that why like you often see more experienced APL programmers kind of using the bar version kind of by default, because it's like more flexible.", "tokens": [400, 370, 11, 307, 300, 983, 411, 291, 2049, 536, 544, 6751, 5372, 43, 41504, 733, 295, 1228, 264, 2159, 3037, 733, 295, 538, 7576, 11, 570, 309, 311, 411, 544, 11358, 13], "temperature": 0.0, "avg_logprob": -0.10636931373959496, "compression_ratio": 1.5592417061611374, "no_speech_prob": 5.5935852287802845e-06}, {"id": 78, "seek": 57500, "start": 575.0, "end": 585.0, "text": " So now, if we try to use a function that computes the average.", "tokens": [407, 586, 11, 498, 321, 853, 281, 764, 257, 2445, 300, 715, 1819, 264, 4274, 13], "temperature": 0.0, "avg_logprob": -0.2125305695967241, "compression_ratio": 1.4444444444444444, "no_speech_prob": 6.142126494523836e-06}, {"id": 79, "seek": 57500, "start": 585.0, "end": 589.0, "text": " Oops, sorry. Let's do that again.", "tokens": [21726, 11, 2597, 13, 961, 311, 360, 300, 797, 13], "temperature": 0.0, "avg_logprob": -0.2125305695967241, "compression_ratio": 1.4444444444444444, "no_speech_prob": 6.142126494523836e-06}, {"id": 80, "seek": 57500, "start": 589.0, "end": 592.0, "text": " Here's the function that computes the average.", "tokens": [1692, 311, 264, 2445, 300, 715, 1819, 264, 4274, 13], "temperature": 0.0, "avg_logprob": -0.2125305695967241, "compression_ratio": 1.4444444444444444, "no_speech_prob": 6.142126494523836e-06}, {"id": 81, "seek": 59200, "start": 592.0, "end": 611.0, "text": " Sorry, you just learned TELY. So like that. Now, if I try to apply this on a table instead on the matrix. So we can use this one.", "tokens": [4919, 11, 291, 445, 3264, 314, 3158, 56, 13, 407, 411, 300, 13, 823, 11, 498, 286, 853, 281, 3079, 341, 322, 257, 3199, 2602, 322, 264, 8141, 13, 407, 321, 393, 764, 341, 472, 13], "temperature": 0.0, "avg_logprob": -0.3132712602615356, "compression_ratio": 1.162162162162162, "no_speech_prob": 1.644044641579967e-05}, {"id": 82, "seek": 61100, "start": 611.0, "end": 622.0, "text": " Then obviously the average in each row should be two and five. Well, what's actually happening is that we get something that makes no sense at all. Why is that?", "tokens": [1396, 2745, 264, 4274, 294, 1184, 5386, 820, 312, 732, 293, 1732, 13, 1042, 11, 437, 311, 767, 2737, 307, 300, 321, 483, 746, 300, 1669, 572, 2020, 412, 439, 13, 1545, 307, 300, 30], "temperature": 0.0, "avg_logprob": -0.10475903749465942, "compression_ratio": 1.6083333333333334, "no_speech_prob": 2.176995803893078e-05}, {"id": 83, "seek": 61100, "start": 622.0, "end": 634.0, "text": " Because TELY counts how many major cells there are that is along the first axis. So it says there are two. But plus slash is summing along the rows.", "tokens": [1436, 314, 3158, 56, 14893, 577, 867, 2563, 5438, 456, 366, 300, 307, 2051, 264, 700, 10298, 13, 407, 309, 1619, 456, 366, 732, 13, 583, 1804, 17330, 307, 2408, 2810, 2051, 264, 13241, 13], "temperature": 0.0, "avg_logprob": -0.10475903749465942, "compression_ratio": 1.6083333333333334, "no_speech_prob": 2.176995803893078e-05}, {"id": 84, "seek": 61100, "start": 634.0, "end": 639.0, "text": " So we are summing three numbers and dividing by two, that is not an average.", "tokens": [407, 321, 366, 2408, 2810, 1045, 3547, 293, 26764, 538, 732, 11, 300, 307, 406, 364, 4274, 13], "temperature": 0.0, "avg_logprob": -0.10475903749465942, "compression_ratio": 1.6083333333333334, "no_speech_prob": 2.176995803893078e-05}, {"id": 85, "seek": 63900, "start": 639.0, "end": 651.0, "text": " So experienced APLers, they will use slash bar instead. This sums along the leading axis and this counts along the leading axis. And this will give me one average per column.", "tokens": [407, 6751, 5372, 43, 433, 11, 436, 486, 764, 17330, 2159, 2602, 13, 639, 34499, 2051, 264, 5775, 10298, 293, 341, 14893, 2051, 264, 5775, 10298, 13, 400, 341, 486, 976, 385, 472, 4274, 680, 7738, 13], "temperature": 0.0, "avg_logprob": -0.1366324954562717, "compression_ratio": 1.6606060606060606, "no_speech_prob": 6.012332596583292e-05}, {"id": 86, "seek": 63900, "start": 651.0, "end": 657.0, "text": " So the average of one and four is two and a half. Average of two and five is three and a half.", "tokens": [407, 264, 4274, 295, 472, 293, 1451, 307, 732, 293, 257, 1922, 13, 316, 3623, 295, 732, 293, 1732, 307, 1045, 293, 257, 1922, 13], "temperature": 0.0, "avg_logprob": -0.1366324954562717, "compression_ratio": 1.6606060606060606, "no_speech_prob": 6.012332596583292e-05}, {"id": 87, "seek": 63900, "start": 657.0, "end": 659.0, "text": " Yep.", "tokens": [7010, 13], "temperature": 0.0, "avg_logprob": -0.1366324954562717, "compression_ratio": 1.6606060606060606, "no_speech_prob": 6.012332596583292e-05}, {"id": 88, "seek": 65900, "start": 659.0, "end": 676.0, "text": " That's why the experienced APLers will use first axis functions because then they can always say, okay, if I want the average over the rows, I'll restrict the view of this function to the rows of this array.", "tokens": [663, 311, 983, 264, 6751, 5372, 43, 433, 486, 764, 700, 10298, 6828, 570, 550, 436, 393, 1009, 584, 11, 1392, 11, 498, 286, 528, 264, 4274, 670, 264, 13241, 11, 286, 603, 7694, 264, 1910, 295, 341, 2445, 281, 264, 13241, 295, 341, 10225, 13], "temperature": 0.0, "avg_logprob": -0.11486784187523094, "compression_ratio": 1.544502617801047, "no_speech_prob": 8.7992684711935e-06}, {"id": 89, "seek": 65900, "start": 676.0, "end": 682.0, "text": " And now I get two and five. And I couldn't have done that if I had defined my function.", "tokens": [400, 586, 286, 483, 732, 293, 1732, 13, 400, 286, 2809, 380, 362, 1096, 300, 498, 286, 632, 7642, 452, 2445, 13], "temperature": 0.0, "avg_logprob": -0.11486784187523094, "compression_ratio": 1.544502617801047, "no_speech_prob": 8.7992684711935e-06}, {"id": 90, "seek": 68200, "start": 682.0, "end": 694.0, "text": " It wouldn't be as flexible if I had defined my function in terms of last axis, only by defining it in terms of first axis, I'm able to narrow down this vision to any lower level.", "tokens": [467, 2759, 380, 312, 382, 11358, 498, 286, 632, 7642, 452, 2445, 294, 2115, 295, 1036, 10298, 11, 787, 538, 17827, 309, 294, 2115, 295, 700, 10298, 11, 286, 478, 1075, 281, 9432, 760, 341, 5201, 281, 604, 3126, 1496, 13], "temperature": 0.0, "avg_logprob": -0.15937987669014636, "compression_ratio": 1.598984771573604, "no_speech_prob": 5.1423288823571056e-05}, {"id": 91, "seek": 68200, "start": 694.0, "end": 704.0, "text": " Is a way to think of that mnemonic with the slash bar is that like the bar is horizontal. So it deals with rows. Is that like a generic?", "tokens": [1119, 257, 636, 281, 519, 295, 300, 275, 25989, 11630, 365, 264, 17330, 2159, 307, 300, 411, 264, 2159, 307, 12750, 13, 407, 309, 11215, 365, 13241, 13, 1119, 300, 411, 257, 19577, 30], "temperature": 0.0, "avg_logprob": -0.15937987669014636, "compression_ratio": 1.598984771573604, "no_speech_prob": 5.1423288823571056e-05}, {"id": 92, "seek": 70400, "start": 704.0, "end": 719.0, "text": " Yeah, that's how I think of it at least. It goes down my rows instead of going along the columns. And then you have the same thing with this is reverse, horizontal reverse, and this meaning last axis reverse.", "tokens": [865, 11, 300, 311, 577, 286, 519, 295, 309, 412, 1935, 13, 467, 1709, 760, 452, 13241, 2602, 295, 516, 2051, 264, 13766, 13, 400, 550, 291, 362, 264, 912, 551, 365, 341, 307, 9943, 11, 12750, 9943, 11, 293, 341, 3620, 1036, 10298, 9943, 13], "temperature": 0.0, "avg_logprob": -0.17067194559487953, "compression_ratio": 1.7563451776649746, "no_speech_prob": 6.747311090293806e-06}, {"id": 93, "seek": 70400, "start": 719.0, "end": 726.0, "text": " And this is reversing it over the horizontal axis or rotating over the horizontal axis.", "tokens": [400, 341, 307, 14582, 278, 309, 670, 264, 12750, 10298, 420, 19627, 670, 264, 12750, 10298, 13], "temperature": 0.0, "avg_logprob": -0.17067194559487953, "compression_ratio": 1.7563451776649746, "no_speech_prob": 6.747311090293806e-06}, {"id": 94, "seek": 70400, "start": 726.0, "end": 728.0, "text": " Or flipping?", "tokens": [1610, 26886, 30], "temperature": 0.0, "avg_logprob": -0.17067194559487953, "compression_ratio": 1.7563451776649746, "no_speech_prob": 6.747311090293806e-06}, {"id": 95, "seek": 70400, "start": 728.0, "end": 732.0, "text": " Yeah, either flipping or vertically.", "tokens": [865, 11, 2139, 26886, 420, 28450, 13], "temperature": 0.0, "avg_logprob": -0.17067194559487953, "compression_ratio": 1.7563451776649746, "no_speech_prob": 6.747311090293806e-06}, {"id": 96, "seek": 73200, "start": 732.0, "end": 737.0, "text": " Yeah, exactly. So this shows the bar is transposed, isn't it?", "tokens": [865, 11, 2293, 13, 407, 341, 3110, 264, 2159, 307, 7132, 1744, 11, 1943, 380, 309, 30], "temperature": 0.0, "avg_logprob": -0.17349576401984554, "compression_ratio": 1.541062801932367, "no_speech_prob": 1.473497013648739e-05}, {"id": 97, "seek": 73200, "start": 737.0, "end": 740.0, "text": " Yes, they're going to transpose because it's flipping over the diagonal.", "tokens": [1079, 11, 436, 434, 516, 281, 25167, 570, 309, 311, 26886, 670, 264, 21539, 13], "temperature": 0.0, "avg_logprob": -0.17349576401984554, "compression_ratio": 1.541062801932367, "no_speech_prob": 1.473497013648739e-05}, {"id": 98, "seek": 73200, "start": 740.0, "end": 744.0, "text": " Wow, that's so awesome.", "tokens": [3153, 11, 300, 311, 370, 3476, 13], "temperature": 0.0, "avg_logprob": -0.17349576401984554, "compression_ratio": 1.541062801932367, "no_speech_prob": 1.473497013648739e-05}, {"id": 99, "seek": 73200, "start": 744.0, "end": 753.0, "text": " So, the problem we had with you're trying to do this thing, or something like that.", "tokens": [407, 11, 264, 1154, 321, 632, 365, 291, 434, 1382, 281, 360, 341, 551, 11, 420, 746, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.17349576401984554, "compression_ratio": 1.541062801932367, "no_speech_prob": 1.473497013648739e-05}, {"id": 100, "seek": 73200, "start": 753.0, "end": 758.0, "text": " Or we can take some numbers that makes it a little bit easier to understand.", "tokens": [1610, 321, 393, 747, 512, 3547, 300, 1669, 309, 257, 707, 857, 3571, 281, 1223, 13], "temperature": 0.0, "avg_logprob": -0.17349576401984554, "compression_ratio": 1.541062801932367, "no_speech_prob": 1.473497013648739e-05}, {"id": 101, "seek": 75800, "start": 758.0, "end": 765.0, "text": " So, plus, and all the arithmetic functions are so called scalar functions.", "tokens": [407, 11, 1804, 11, 293, 439, 264, 42973, 6828, 366, 370, 1219, 39684, 6828, 13], "temperature": 0.0, "avg_logprob": -0.14823833264802633, "compression_ratio": 1.4378698224852071, "no_speech_prob": 1.3412795851763804e-05}, {"id": 102, "seek": 75800, "start": 765.0, "end": 769.0, "text": " They actually have an implied rank zero.", "tokens": [814, 767, 362, 364, 32614, 6181, 4018, 13], "temperature": 0.0, "avg_logprob": -0.14823833264802633, "compression_ratio": 1.4378698224852071, "no_speech_prob": 1.3412795851763804e-05}, {"id": 103, "seek": 75800, "start": 769.0, "end": 771.0, "text": " Always.", "tokens": [11270, 13], "temperature": 0.0, "avg_logprob": -0.14823833264802633, "compression_ratio": 1.4378698224852071, "no_speech_prob": 1.3412795851763804e-05}, {"id": 104, "seek": 75800, "start": 771.0, "end": 778.0, "text": " Meaning, they're always so narrow minded that they only look at individual elements and never consider the whole array.", "tokens": [19948, 11, 436, 434, 1009, 370, 9432, 36707, 300, 436, 787, 574, 412, 2609, 4959, 293, 1128, 1949, 264, 1379, 10225, 13], "temperature": 0.0, "avg_logprob": -0.14823833264802633, "compression_ratio": 1.4378698224852071, "no_speech_prob": 1.3412795851763804e-05}, {"id": 105, "seek": 77800, "start": 778.0, "end": 795.0, "text": " And there's nothing the rank operator can do to change that. So as opposed to axis, which is an ad hoc syntax that actually looks at what function did you give it and does something special for it, the rank operator is entirely general purpose.", "tokens": [400, 456, 311, 1825, 264, 6181, 12973, 393, 360, 281, 1319, 300, 13, 407, 382, 8851, 281, 10298, 11, 597, 307, 364, 614, 16708, 28431, 300, 767, 1542, 412, 437, 2445, 630, 291, 976, 309, 293, 775, 746, 2121, 337, 309, 11, 264, 6181, 12973, 307, 7696, 2674, 4334, 13], "temperature": 0.0, "avg_logprob": -0.10679631060864551, "compression_ratio": 1.6118721461187215, "no_speech_prob": 3.0414191769523313e-06}, {"id": 106, "seek": 77800, "start": 795.0, "end": 798.0, "text": " It has no idea about which function it's applying.", "tokens": [467, 575, 572, 1558, 466, 597, 2445, 309, 311, 9275, 13], "temperature": 0.0, "avg_logprob": -0.10679631060864551, "compression_ratio": 1.6118721461187215, "no_speech_prob": 3.0414191769523313e-06}, {"id": 107, "seek": 77800, "start": 798.0, "end": 802.0, "text": " I see. So equals bar could be used to behave like equals.", "tokens": [286, 536, 13, 407, 6915, 2159, 727, 312, 1143, 281, 15158, 411, 6915, 13], "temperature": 0.0, "avg_logprob": -0.10679631060864551, "compression_ratio": 1.6118721461187215, "no_speech_prob": 3.0414191769523313e-06}, {"id": 108, "seek": 80200, "start": 802.0, "end": 812.0, "text": " Exactly. So, exactly. So if we do this. Now we're using match that only is allowed to look at scalars at a time, so it looks at three and three.", "tokens": [7587, 13, 407, 11, 2293, 13, 407, 498, 321, 360, 341, 13, 823, 321, 434, 1228, 2995, 300, 787, 307, 4350, 281, 574, 412, 15664, 685, 412, 257, 565, 11, 370, 309, 1542, 412, 1045, 293, 1045, 13], "temperature": 0.0, "avg_logprob": -0.12111243197792455, "compression_ratio": 1.6877828054298643, "no_speech_prob": 1.0127895620826166e-05}, {"id": 109, "seek": 80200, "start": 812.0, "end": 817.0, "text": " It looks at four and looks at five in pairs.", "tokens": [467, 1542, 412, 1451, 293, 1542, 412, 1732, 294, 15494, 13], "temperature": 0.0, "avg_logprob": -0.12111243197792455, "compression_ratio": 1.6877828054298643, "no_speech_prob": 1.0127895620826166e-05}, {"id": 110, "seek": 80200, "start": 817.0, "end": 826.0, "text": " And so we can use that to match anything so matches the more general purpose function than equal but equal is a very common construct.", "tokens": [400, 370, 321, 393, 764, 300, 281, 2995, 1340, 370, 10676, 264, 544, 2674, 4334, 2445, 813, 2681, 457, 2681, 307, 257, 588, 2689, 7690, 13], "temperature": 0.0, "avg_logprob": -0.12111243197792455, "compression_ratio": 1.6877828054298643, "no_speech_prob": 1.0127895620826166e-05}, {"id": 111, "seek": 80200, "start": 826.0, "end": 830.0, "text": " So that we have that separate function for that.", "tokens": [407, 300, 321, 362, 300, 4994, 2445, 337, 300, 13], "temperature": 0.0, "avg_logprob": -0.12111243197792455, "compression_ratio": 1.6877828054298643, "no_speech_prob": 1.0127895620826166e-05}, {"id": 112, "seek": 83000, "start": 830.0, "end": 837.0, "text": " And a good way to to get a view of thing in general, if you don't know what's going on in an expression.", "tokens": [400, 257, 665, 636, 281, 281, 483, 257, 1910, 295, 551, 294, 2674, 11, 498, 291, 500, 380, 458, 437, 311, 516, 322, 294, 364, 6114, 13], "temperature": 0.0, "avg_logprob": -0.11620475980970595, "compression_ratio": 1.5841584158415842, "no_speech_prob": 4.004471702501178e-05}, {"id": 113, "seek": 83000, "start": 837.0, "end": 846.0, "text": " I think you did see this phrase once it sprints things so here's a really useful debugging trick.", "tokens": [286, 519, 291, 630, 536, 341, 9535, 1564, 309, 6103, 8654, 721, 370, 510, 311, 257, 534, 4420, 45592, 4282, 13], "temperature": 0.0, "avg_logprob": -0.11620475980970595, "compression_ratio": 1.5841584158415842, "no_speech_prob": 4.004471702501178e-05}, {"id": 114, "seek": 83000, "start": 846.0, "end": 852.0, "text": " If I have a function I don't know exactly what's going on. I'll wrap it in a decent.", "tokens": [759, 286, 362, 257, 2445, 286, 500, 380, 458, 2293, 437, 311, 516, 322, 13, 286, 603, 7019, 309, 294, 257, 8681, 13], "temperature": 0.0, "avg_logprob": -0.11620475980970595, "compression_ratio": 1.5841584158415842, "no_speech_prob": 4.004471702501178e-05}, {"id": 115, "seek": 83000, "start": 852.0, "end": 855.0, "text": " And I'll put in alpha and omega.", "tokens": [400, 286, 603, 829, 294, 8961, 293, 10498, 13], "temperature": 0.0, "avg_logprob": -0.11620475980970595, "compression_ratio": 1.5841584158415842, "no_speech_prob": 4.004471702501178e-05}, {"id": 116, "seek": 85500, "start": 855.0, "end": 860.0, "text": " And this is a new statement. I don't know if you've seen that.", "tokens": [400, 341, 307, 257, 777, 5629, 13, 286, 500, 380, 458, 498, 291, 600, 1612, 300, 13], "temperature": 0.0, "avg_logprob": -0.13499354343025052, "compression_ratio": 1.6093023255813954, "no_speech_prob": 4.905965397483669e-05}, {"id": 117, "seek": 85500, "start": 860.0, "end": 865.0, "text": " And then I'll apply the function. So let's say for example that I'm using equal.", "tokens": [400, 550, 286, 603, 3079, 264, 2445, 13, 407, 718, 311, 584, 337, 1365, 300, 286, 478, 1228, 2681, 13], "temperature": 0.0, "avg_logprob": -0.13499354343025052, "compression_ratio": 1.6093023255813954, "no_speech_prob": 4.905965397483669e-05}, {"id": 118, "seek": 85500, "start": 865.0, "end": 875.0, "text": " So I'll put so the function will return the same result as the primitive function, but it's wrapped in such a way that it prints the arguments first.", "tokens": [407, 286, 603, 829, 370, 264, 2445, 486, 2736, 264, 912, 1874, 382, 264, 28540, 2445, 11, 457, 309, 311, 14226, 294, 1270, 257, 636, 300, 309, 22305, 264, 12869, 700, 13], "temperature": 0.0, "avg_logprob": -0.13499354343025052, "compression_ratio": 1.6093023255813954, "no_speech_prob": 4.905965397483669e-05}, {"id": 119, "seek": 85500, "start": 875.0, "end": 876.0, "text": " Yep.", "tokens": [7010, 13], "temperature": 0.0, "avg_logprob": -0.13499354343025052, "compression_ratio": 1.6093023255813954, "no_speech_prob": 4.905965397483669e-05}, {"id": 120, "seek": 85500, "start": 876.0, "end": 882.0, "text": " So now if we say, three, four, and three, five.", "tokens": [407, 586, 498, 321, 584, 11, 1045, 11, 1451, 11, 293, 1045, 11, 1732, 13], "temperature": 0.0, "avg_logprob": -0.13499354343025052, "compression_ratio": 1.6093023255813954, "no_speech_prob": 4.905965397483669e-05}, {"id": 121, "seek": 88200, "start": 882.0, "end": 888.0, "text": " We can see that the two, we should probably turn boxing on.", "tokens": [492, 393, 536, 300, 264, 732, 11, 321, 820, 1391, 1261, 24424, 322, 13], "temperature": 0.0, "avg_logprob": -0.21701701851778252, "compression_ratio": 1.5124378109452736, "no_speech_prob": 1.4736156117578503e-05}, {"id": 122, "seek": 88200, "start": 888.0, "end": 893.0, "text": " You actually need the max style.", "tokens": [509, 767, 643, 264, 11469, 3758, 13], "temperature": 0.0, "avg_logprob": -0.21701701851778252, "compression_ratio": 1.5124378109452736, "no_speech_prob": 1.4736156117578503e-05}, {"id": 123, "seek": 88200, "start": 893.0, "end": 896.0, "text": " That didn't. Oh, of course.", "tokens": [663, 994, 380, 13, 876, 11, 295, 1164, 13], "temperature": 0.0, "avg_logprob": -0.21701701851778252, "compression_ratio": 1.5124378109452736, "no_speech_prob": 1.4736156117578503e-05}, {"id": 124, "seek": 88200, "start": 896.0, "end": 901.0, "text": " I have to specify that even when functions are printing I want it to be boxed.", "tokens": [286, 362, 281, 16500, 300, 754, 562, 6828, 366, 14699, 286, 528, 309, 281, 312, 2424, 292, 13], "temperature": 0.0, "avg_logprob": -0.21701701851778252, "compression_ratio": 1.5124378109452736, "no_speech_prob": 1.4736156117578503e-05}, {"id": 125, "seek": 88200, "start": 901.0, "end": 909.0, "text": " So, what equal is seeing is three, four, and also three, five, but it does its thing element by element.", "tokens": [407, 11, 437, 2681, 307, 2577, 307, 1045, 11, 1451, 11, 293, 611, 1045, 11, 1732, 11, 457, 309, 775, 1080, 551, 4478, 538, 4478, 13], "temperature": 0.0, "avg_logprob": -0.21701701851778252, "compression_ratio": 1.5124378109452736, "no_speech_prob": 1.4736156117578503e-05}, {"id": 126, "seek": 90900, "start": 909.0, "end": 918.0, "text": " Now if I apply the rank operator twice, will it. It will print twice, it will be called three, three, and four, five.", "tokens": [823, 498, 286, 3079, 264, 6181, 12973, 6091, 11, 486, 309, 13, 467, 486, 4482, 6091, 11, 309, 486, 312, 1219, 1045, 11, 1045, 11, 293, 1451, 11, 1732, 13], "temperature": 0.0, "avg_logprob": -0.1811650934673491, "compression_ratio": 1.708994708994709, "no_speech_prob": 2.5462817575316876e-05}, {"id": 127, "seek": 90900, "start": 918.0, "end": 925.0, "text": " So this is a good way to see it and you have already gone so advanced that you created your own operators.", "tokens": [407, 341, 307, 257, 665, 636, 281, 536, 309, 293, 291, 362, 1217, 2780, 370, 7339, 300, 291, 2942, 428, 1065, 19077, 13], "temperature": 0.0, "avg_logprob": -0.1811650934673491, "compression_ratio": 1.708994708994709, "no_speech_prob": 2.5462817575316876e-05}, {"id": 128, "seek": 90900, "start": 925.0, "end": 932.0, "text": " So we can actually, we can actually create a trace operator.", "tokens": [407, 321, 393, 767, 11, 321, 393, 767, 1884, 257, 13508, 12973, 13], "temperature": 0.0, "avg_logprob": -0.1811650934673491, "compression_ratio": 1.708994708994709, "no_speech_prob": 2.5462817575316876e-05}, {"id": 129, "seek": 90900, "start": 932.0, "end": 936.0, "text": " And will it will print the arguments.", "tokens": [400, 486, 309, 486, 4482, 264, 12869, 13], "temperature": 0.0, "avg_logprob": -0.1811650934673491, "compression_ratio": 1.708994708994709, "no_speech_prob": 2.5462817575316876e-05}, {"id": 130, "seek": 93600, "start": 936.0, "end": 940.0, "text": " And then it will apply the function to the arguments.", "tokens": [400, 550, 309, 486, 3079, 264, 2445, 281, 264, 12869, 13], "temperature": 0.0, "avg_logprob": -0.17458658440168515, "compression_ratio": 1.5846994535519126, "no_speech_prob": 3.0709259590366855e-05}, {"id": 131, "seek": 93600, "start": 940.0, "end": 945.0, "text": " So now we can say three, four equal TC.", "tokens": [407, 586, 321, 393, 584, 1045, 11, 1451, 2681, 34150, 13], "temperature": 0.0, "avg_logprob": -0.17458658440168515, "compression_ratio": 1.5846994535519126, "no_speech_prob": 3.0709259590366855e-05}, {"id": 132, "seek": 93600, "start": 945.0, "end": 947.0, "text": " Three, five.", "tokens": [6244, 11, 1732, 13], "temperature": 0.0, "avg_logprob": -0.17458658440168515, "compression_ratio": 1.5846994535519126, "no_speech_prob": 3.0709259590366855e-05}, {"id": 133, "seek": 93600, "start": 947.0, "end": 955.0, "text": " And we can do it, and we can do it with with rank zero.", "tokens": [400, 321, 393, 360, 309, 11, 293, 321, 393, 360, 309, 365, 365, 6181, 4018, 13], "temperature": 0.0, "avg_logprob": -0.17458658440168515, "compression_ratio": 1.5846994535519126, "no_speech_prob": 3.0709259590366855e-05}, {"id": 134, "seek": 93600, "start": 955.0, "end": 957.0, "text": " It prints it like this.", "tokens": [467, 22305, 309, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.17458658440168515, "compression_ratio": 1.5846994535519126, "no_speech_prob": 3.0709259590366855e-05}, {"id": 135, "seek": 93600, "start": 957.0, "end": 964.0, "text": " We can even make it fancier and put labels inside and saying alpha is this and omega is this and so on.", "tokens": [492, 393, 754, 652, 309, 3429, 27674, 293, 829, 16949, 1854, 293, 1566, 8961, 307, 341, 293, 10498, 307, 341, 293, 370, 322, 13], "temperature": 0.0, "avg_logprob": -0.17458658440168515, "compression_ratio": 1.5846994535519126, "no_speech_prob": 3.0709259590366855e-05}, {"id": 136, "seek": 96400, "start": 964.0, "end": 970.0, "text": " You do need a different version for a monadic, though, because there would be a value around the alpha.", "tokens": [509, 360, 643, 257, 819, 3037, 337, 257, 1108, 43341, 11, 1673, 11, 570, 456, 576, 312, 257, 2158, 926, 264, 8961, 13], "temperature": 0.0, "avg_logprob": -0.25133438768057986, "compression_ratio": 1.907258064516129, "no_speech_prob": 8.478682866552845e-05}, {"id": 137, "seek": 96400, "start": 970.0, "end": 977.0, "text": " So, there's a trick that you haven't learned yet, which is to type this.", "tokens": [407, 11, 456, 311, 257, 4282, 300, 291, 2378, 380, 3264, 1939, 11, 597, 307, 281, 2010, 341, 13], "temperature": 0.0, "avg_logprob": -0.25133438768057986, "compression_ratio": 1.907258064516129, "no_speech_prob": 8.478682866552845e-05}, {"id": 138, "seek": 96400, "start": 977.0, "end": 984.0, "text": " There's a special syntax in the default. It means, yeah I've seen that it means apply it means make, make that if you haven't passed an alpha.", "tokens": [821, 311, 257, 2121, 28431, 294, 264, 7576, 13, 467, 1355, 11, 1338, 286, 600, 1612, 300, 309, 1355, 3079, 309, 1355, 652, 11, 652, 300, 498, 291, 2378, 380, 4678, 364, 8961, 13], "temperature": 0.0, "avg_logprob": -0.25133438768057986, "compression_ratio": 1.907258064516129, "no_speech_prob": 8.478682866552845e-05}, {"id": 139, "seek": 96400, "start": 984.0, "end": 992.0, "text": " Yeah, it's just default left arguments, the default left argument is a funny default left argument because the default left argument is an is a function,", "tokens": [865, 11, 309, 311, 445, 7576, 1411, 12869, 11, 264, 7576, 1411, 6770, 307, 257, 4074, 7576, 1411, 6770, 570, 264, 7576, 1411, 6770, 307, 364, 307, 257, 2445, 11], "temperature": 0.0, "avg_logprob": -0.25133438768057986, "compression_ratio": 1.907258064516129, "no_speech_prob": 8.478682866552845e-05}, {"id": 140, "seek": 99200, "start": 992.0, "end": 998.0, "text": " which otherwise you can't pass in. But it's a function which is a know up is an identity function.", "tokens": [597, 5911, 291, 393, 380, 1320, 294, 13, 583, 309, 311, 257, 2445, 597, 307, 257, 458, 493, 307, 364, 6575, 2445, 13], "temperature": 0.0, "avg_logprob": -0.22424908865869572, "compression_ratio": 1.8376068376068375, "no_speech_prob": 1.3844109162164386e-05}, {"id": 141, "seek": 99200, "start": 998.0, "end": 1009.0, "text": " And so here, if, if alpha is an identity function, then we just print omega and over here, if alpha is an identity function we apply alpha alpha monadically.", "tokens": [400, 370, 510, 11, 498, 11, 498, 8961, 307, 364, 6575, 2445, 11, 550, 321, 445, 4482, 10498, 293, 670, 510, 11, 498, 8961, 307, 364, 6575, 2445, 321, 3079, 8961, 8961, 1108, 345, 984, 13], "temperature": 0.0, "avg_logprob": -0.22424908865869572, "compression_ratio": 1.8376068376068375, "no_speech_prob": 1.3844109162164386e-05}, {"id": 142, "seek": 99200, "start": 1009.0, "end": 1016.0, "text": " And then we apply the identity function to it which doesn't do anything. So this is a general purpose TC. So now I can take a we had before.", "tokens": [400, 550, 321, 3079, 264, 6575, 2445, 281, 309, 597, 1177, 380, 360, 1340, 13, 407, 341, 307, 257, 2674, 4334, 34150, 13, 407, 586, 286, 393, 747, 257, 321, 632, 949, 13], "temperature": 0.0, "avg_logprob": -0.22424908865869572, "compression_ratio": 1.8376068376068375, "no_speech_prob": 1.3844109162164386e-05}, {"id": 143, "seek": 99200, "start": 1016.0, "end": 1018.0, "text": " Sorry, just to clarify it.", "tokens": [4919, 11, 445, 281, 17594, 309, 13], "temperature": 0.0, "avg_logprob": -0.22424908865869572, "compression_ratio": 1.8376068376068375, "no_speech_prob": 1.3844109162164386e-05}, {"id": 144, "seek": 99200, "start": 1018.0, "end": 1019.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.22424908865869572, "compression_ratio": 1.8376068376068375, "no_speech_prob": 1.3844109162164386e-05}, {"id": 145, "seek": 101900, "start": 1019.0, "end": 1024.0, "text": " Is that setting alpha.", "tokens": [1119, 300, 3287, 8961, 13], "temperature": 0.0, "avg_logprob": -0.21860444892957373, "compression_ratio": 1.9669811320754718, "no_speech_prob": 3.763149288715795e-05}, {"id": 146, "seek": 101900, "start": 1024.0, "end": 1030.0, "text": " It's not sitting alpha to the identity function right it's setting alpha to the result of the identity function.", "tokens": [467, 311, 406, 3798, 8961, 281, 264, 6575, 2445, 558, 309, 311, 3287, 8961, 281, 264, 1874, 295, 264, 6575, 2445, 13], "temperature": 0.0, "avg_logprob": -0.21860444892957373, "compression_ratio": 1.9669811320754718, "no_speech_prob": 3.763149288715795e-05}, {"id": 147, "seek": 101900, "start": 1030.0, "end": 1039.0, "text": " No, it's makes alpha be the identity function. Oh, okay because I thought there's no argument to it so it's just a function assignments attested functions.", "tokens": [883, 11, 309, 311, 1669, 8961, 312, 264, 6575, 2445, 13, 876, 11, 1392, 570, 286, 1194, 456, 311, 572, 6770, 281, 309, 370, 309, 311, 445, 257, 2445, 22546, 951, 21885, 6828, 13], "temperature": 0.0, "avg_logprob": -0.21860444892957373, "compression_ratio": 1.9669811320754718, "no_speech_prob": 3.763149288715795e-05}, {"id": 148, "seek": 101900, "start": 1039.0, "end": 1047.0, "text": " Yeah, yeah, yeah. Yeah, okay sorry that makes perfect sense would be the same thing as as writing this. Yeah, yeah, I get it.", "tokens": [865, 11, 1338, 11, 1338, 13, 865, 11, 1392, 2597, 300, 1669, 2176, 2020, 576, 312, 264, 912, 551, 382, 382, 3579, 341, 13, 865, 11, 1338, 11, 286, 483, 309, 13], "temperature": 0.0, "avg_logprob": -0.21860444892957373, "compression_ratio": 1.9669811320754718, "no_speech_prob": 3.763149288715795e-05}, {"id": 149, "seek": 104700, "start": 1047.0, "end": 1053.0, "text": " Okay, so we don't have to change that. So now if we look at what plus slash is seeing.", "tokens": [1033, 11, 370, 321, 500, 380, 362, 281, 1319, 300, 13, 407, 586, 498, 321, 574, 412, 437, 1804, 17330, 307, 2577, 13], "temperature": 0.0, "avg_logprob": -0.1411694117954799, "compression_ratio": 1.5625, "no_speech_prob": 1.3415113244263921e-05}, {"id": 150, "seek": 104700, "start": 1053.0, "end": 1055.0, "text": " And that was our problem for beginning.", "tokens": [400, 300, 390, 527, 1154, 337, 2863, 13], "temperature": 0.0, "avg_logprob": -0.1411694117954799, "compression_ratio": 1.5625, "no_speech_prob": 1.3415113244263921e-05}, {"id": 151, "seek": 104700, "start": 1055.0, "end": 1059.0, "text": " So here, we can see that it's seeing the entire array.", "tokens": [407, 510, 11, 321, 393, 536, 300, 309, 311, 2577, 264, 2302, 10225, 13], "temperature": 0.0, "avg_logprob": -0.1411694117954799, "compression_ratio": 1.5625, "no_speech_prob": 1.3415113244263921e-05}, {"id": 152, "seek": 104700, "start": 1059.0, "end": 1070.0, "text": " It's a little bit hard to read but here's our result. And this is the printout of the arguments, we can improve TC a little bit and say, alpha.", "tokens": [467, 311, 257, 707, 857, 1152, 281, 1401, 457, 510, 311, 527, 1874, 13, 400, 341, 307, 264, 4482, 346, 295, 264, 12869, 11, 321, 393, 3470, 34150, 257, 707, 857, 293, 584, 11, 8961, 13], "temperature": 0.0, "avg_logprob": -0.1411694117954799, "compression_ratio": 1.5625, "no_speech_prob": 1.3415113244263921e-05}, {"id": 153, "seek": 107000, "start": 1070.0, "end": 1084.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.2696830347964638, "compression_ratio": 0.8571428571428571, "no_speech_prob": 0.00018189051479566842}, {"id": 154, "seek": 107000, "start": 1084.0, "end": 1087.0, "text": " Oh yes of course that's not going to work.", "tokens": [876, 2086, 295, 1164, 300, 311, 406, 516, 281, 589, 13], "temperature": 0.0, "avg_logprob": -0.2696830347964638, "compression_ratio": 0.8571428571428571, "no_speech_prob": 0.00018189051479566842}, {"id": 155, "seek": 108700, "start": 1087.0, "end": 1101.0, "text": " And then, alpha omega.", "tokens": [400, 550, 11, 8961, 10498, 13], "temperature": 0.0, "avg_logprob": -0.3799102571275499, "compression_ratio": 1.0, "no_speech_prob": 1.963611794053577e-06}, {"id": 156, "seek": 108700, "start": 1101.0, "end": 1103.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.3799102571275499, "compression_ratio": 1.0, "no_speech_prob": 1.963611794053577e-06}, {"id": 157, "seek": 108700, "start": 1103.0, "end": 1108.0, "text": " So, there's only an omega in this case.", "tokens": [407, 11, 456, 311, 787, 364, 10498, 294, 341, 1389, 13], "temperature": 0.0, "avg_logprob": -0.3799102571275499, "compression_ratio": 1.0, "no_speech_prob": 1.963611794053577e-06}, {"id": 158, "seek": 110800, "start": 1108.0, "end": 1123.0, "text": " And then it's seeing the entire array and it's something it's rose, and when we try to apply this rank to then we see is twice but it's again being applied to this it's exactly like applying plus slash to this, this array, someone else rose.", "tokens": [400, 550, 309, 311, 2577, 264, 2302, 10225, 293, 309, 311, 746, 309, 311, 10895, 11, 293, 562, 321, 853, 281, 3079, 341, 6181, 281, 550, 321, 536, 307, 6091, 457, 309, 311, 797, 885, 6456, 281, 341, 309, 311, 2293, 411, 9275, 1804, 17330, 281, 341, 11, 341, 10225, 11, 1580, 1646, 10895, 13], "temperature": 0.0, "avg_logprob": -0.2163975470888931, "compression_ratio": 1.792, "no_speech_prob": 1.2021689144603442e-05}, {"id": 159, "seek": 110800, "start": 1123.0, "end": 1129.0, "text": " Yep. And so, this is a really useful operator.", "tokens": [7010, 13, 400, 370, 11, 341, 307, 257, 534, 4420, 12973, 13], "temperature": 0.0, "avg_logprob": -0.2163975470888931, "compression_ratio": 1.792, "no_speech_prob": 1.2021689144603442e-05}, {"id": 160, "seek": 110800, "start": 1129.0, "end": 1137.0, "text": " You can you can modify it to your heart's content, you can make it do whatever you want. And to do things you can write a timestamp when it happened and so on.", "tokens": [509, 393, 291, 393, 16927, 309, 281, 428, 1917, 311, 2701, 11, 291, 393, 652, 309, 360, 2035, 291, 528, 13, 400, 281, 360, 721, 291, 393, 2464, 257, 49108, 1215, 562, 309, 2011, 293, 370, 322, 13], "temperature": 0.0, "avg_logprob": -0.2163975470888931, "compression_ratio": 1.792, "no_speech_prob": 1.2021689144603442e-05}, {"id": 161, "seek": 113700, "start": 1137.0, "end": 1146.0, "text": " I mean, I can take questions but things should be more clear now, what the rank operator does just blinders, that's all it does.", "tokens": [286, 914, 11, 286, 393, 747, 1651, 457, 721, 820, 312, 544, 1850, 586, 11, 437, 264, 6181, 12973, 775, 445, 6865, 433, 11, 300, 311, 439, 309, 775, 13], "temperature": 0.0, "avg_logprob": -0.19149865370530347, "compression_ratio": 1.4085365853658536, "no_speech_prob": 3.3716627513058484e-05}, {"id": 162, "seek": 113700, "start": 1146.0, "end": 1149.0, "text": " This was really helpful. Thank you.", "tokens": [639, 390, 534, 4961, 13, 1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.19149865370530347, "compression_ratio": 1.4085365853658536, "no_speech_prob": 3.3716627513058484e-05}, {"id": 163, "seek": 113700, "start": 1149.0, "end": 1152.0, "text": " And this is what happened then with.", "tokens": [400, 341, 307, 437, 2011, 550, 365, 13], "temperature": 0.0, "avg_logprob": -0.19149865370530347, "compression_ratio": 1.4085365853658536, "no_speech_prob": 3.3716627513058484e-05}, {"id": 164, "seek": 113700, "start": 1152.0, "end": 1159.0, "text": " When we had", "tokens": [1133, 321, 632], "temperature": 0.0, "avg_logprob": -0.19149865370530347, "compression_ratio": 1.4085365853658536, "no_speech_prob": 3.3716627513058484e-05}, {"id": 165, "seek": 113700, "start": 1159.0, "end": 1166.0, "text": " we compare these.", "tokens": [321, 6794, 613, 13], "temperature": 0.0, "avg_logprob": -0.19149865370530347, "compression_ratio": 1.4085365853658536, "no_speech_prob": 3.3716627513058484e-05}, {"id": 166, "seek": 116600, "start": 1166.0, "end": 1170.0, "text": " You did the outer product like this.", "tokens": [509, 630, 264, 10847, 1674, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.2299244854901288, "compression_ratio": 1.6494252873563218, "no_speech_prob": 3.070231105084531e-05}, {"id": 167, "seek": 116600, "start": 1170.0, "end": 1180.0, "text": " Now, what are the products is comparing all the elements on one side to all the elements on the other side all the different combinations. Yep, we can write this just with equal and rank.", "tokens": [823, 11, 437, 366, 264, 3383, 307, 15763, 439, 264, 4959, 322, 472, 1252, 281, 439, 264, 4959, 322, 264, 661, 1252, 439, 264, 819, 21267, 13, 7010, 11, 321, 393, 2464, 341, 445, 365, 2681, 293, 6181, 13], "temperature": 0.0, "avg_logprob": -0.2299244854901288, "compression_ratio": 1.6494252873563218, "no_speech_prob": 3.070231105084531e-05}, {"id": 168, "seek": 116600, "start": 1180.0, "end": 1182.0, "text": " Yeah, that's what we did yesterday.", "tokens": [865, 11, 300, 311, 437, 321, 630, 5186, 13], "temperature": 0.0, "avg_logprob": -0.2299244854901288, "compression_ratio": 1.6494252873563218, "no_speech_prob": 3.070231105084531e-05}, {"id": 169, "seek": 116600, "start": 1182.0, "end": 1187.0, "text": " Yeah, so, so again this is", "tokens": [865, 11, 370, 11, 370, 797, 341, 307], "temperature": 0.0, "avg_logprob": -0.2299244854901288, "compression_ratio": 1.6494252873563218, "no_speech_prob": 3.070231105084531e-05}, {"id": 170, "seek": 118700, "start": 1187.0, "end": 1196.0, "text": " every element zero on the left, rank zero on the left gets compared to every element on the right.", "tokens": [633, 4478, 4018, 322, 264, 1411, 11, 6181, 4018, 322, 264, 1411, 2170, 5347, 281, 633, 4478, 322, 264, 558, 13], "temperature": 0.0, "avg_logprob": -0.1503439778866975, "compression_ratio": 1.7477064220183487, "no_speech_prob": 1.2407058420649264e-05}, {"id": 171, "seek": 118700, "start": 1196.0, "end": 1209.0, "text": " So yeah I know you I know you did this but there's a point here. So it gives us the same result. But what is equal actually seeing out of product applies between all combinations of left and right elements.", "tokens": [407, 1338, 286, 458, 291, 286, 458, 291, 630, 341, 457, 456, 311, 257, 935, 510, 13, 407, 309, 2709, 505, 264, 912, 1874, 13, 583, 437, 307, 2681, 767, 2577, 484, 295, 1674, 13165, 1296, 439, 21267, 295, 1411, 293, 558, 4959, 13], "temperature": 0.0, "avg_logprob": -0.1503439778866975, "compression_ratio": 1.7477064220183487, "no_speech_prob": 1.2407058420649264e-05}, {"id": 172, "seek": 118700, "start": 1209.0, "end": 1211.0, "text": " That's not what's happening here.", "tokens": [663, 311, 406, 437, 311, 2737, 510, 13], "temperature": 0.0, "avg_logprob": -0.1503439778866975, "compression_ratio": 1.7477064220183487, "no_speech_prob": 1.2407058420649264e-05}, {"id": 173, "seek": 118700, "start": 1211.0, "end": 1213.0, "text": " It's what you thought was happening here.", "tokens": [467, 311, 437, 291, 1194, 390, 2737, 510, 13], "temperature": 0.0, "avg_logprob": -0.1503439778866975, "compression_ratio": 1.7477064220183487, "no_speech_prob": 1.2407058420649264e-05}, {"id": 174, "seek": 121300, "start": 1213.0, "end": 1228.0, "text": " So if you put TCN, you'll see that it's only being called with a scalar on the left and a vector on the right, because that's exactly what we asked for, scale on the left, vector on the right.", "tokens": [407, 498, 291, 829, 34150, 45, 11, 291, 603, 536, 300, 309, 311, 787, 885, 1219, 365, 257, 39684, 322, 264, 1411, 293, 257, 8062, 322, 264, 558, 11, 570, 300, 311, 2293, 437, 321, 2351, 337, 11, 4373, 322, 264, 1411, 11, 8062, 322, 264, 558, 13], "temperature": 0.0, "avg_logprob": -0.20327410285855518, "compression_ratio": 1.644808743169399, "no_speech_prob": 2.466291334712878e-05}, {"id": 175, "seek": 121300, "start": 1228.0, "end": 1237.0, "text": " If we instead do, dot, equal trace like this.", "tokens": [759, 321, 2602, 360, 11, 5893, 11, 2681, 13508, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.20327410285855518, "compression_ratio": 1.644808743169399, "no_speech_prob": 2.466291334712878e-05}, {"id": 176, "seek": 121300, "start": 1237.0, "end": 1242.0, "text": " You can see that it's being called individually on every pair.", "tokens": [509, 393, 536, 300, 309, 311, 885, 1219, 16652, 322, 633, 6119, 13], "temperature": 0.0, "avg_logprob": -0.20327410285855518, "compression_ratio": 1.644808743169399, "no_speech_prob": 2.466291334712878e-05}, {"id": 177, "seek": 124200, "start": 1242.0, "end": 1250.0, "text": " So the full way of behaving like the,", "tokens": [407, 264, 1577, 636, 295, 35263, 411, 264, 11], "temperature": 0.0, "avg_logprob": -0.09589072023884634, "compression_ratio": 1.6542056074766356, "no_speech_prob": 1.891957435873337e-05}, {"id": 178, "seek": 124200, "start": 1250.0, "end": 1262.0, "text": " like the outer product is to say I want equal to only ever see arguments of rank zero on one side and zero on the other side. And there's a, you're allowed to omit one if they're the same.", "tokens": [411, 264, 10847, 1674, 307, 281, 584, 286, 528, 2681, 281, 787, 1562, 536, 12869, 295, 6181, 4018, 322, 472, 1252, 293, 4018, 322, 264, 661, 1252, 13, 400, 456, 311, 257, 11, 291, 434, 4350, 281, 3406, 270, 472, 498, 436, 434, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.09589072023884634, "compression_ratio": 1.6542056074766356, "no_speech_prob": 1.891957435873337e-05}, {"id": 179, "seek": 124200, "start": 1262.0, "end": 1271.0, "text": " And that function, which only looks at rank zero things should be applied between scalars on the left and vectors on the right.", "tokens": [400, 300, 2445, 11, 597, 787, 1542, 412, 6181, 4018, 721, 820, 312, 6456, 1296, 15664, 685, 322, 264, 1411, 293, 18875, 322, 264, 558, 13], "temperature": 0.0, "avg_logprob": -0.09589072023884634, "compression_ratio": 1.6542056074766356, "no_speech_prob": 1.891957435873337e-05}, {"id": 180, "seek": 127100, "start": 1271.0, "end": 1274.0, "text": " So I'm using rank twice. Oh, wow. Hang on. Okay.", "tokens": [407, 286, 478, 1228, 6181, 6091, 13, 876, 11, 6076, 13, 14070, 322, 13, 1033, 13], "temperature": 0.0, "avg_logprob": -0.2735595703125, "compression_ratio": 1.6043956043956045, "no_speech_prob": 4.00389835704118e-05}, {"id": 181, "seek": 127100, "start": 1274.0, "end": 1281.0, "text": " To understand. So, so everything. Left to right when we do operators operators.", "tokens": [1407, 1223, 13, 407, 11, 370, 1203, 13, 16405, 281, 558, 562, 321, 360, 19077, 19077, 13], "temperature": 0.0, "avg_logprob": -0.2735595703125, "compression_ratio": 1.6043956043956045, "no_speech_prob": 4.00389835704118e-05}, {"id": 182, "seek": 127100, "start": 1281.0, "end": 1291.0, "text": " Yeah, or you could say the operators have a long left scope. So this operator takes the entire thing here, operator phrase on the left function phrase on the left.", "tokens": [865, 11, 420, 291, 727, 584, 264, 19077, 362, 257, 938, 1411, 11923, 13, 407, 341, 12973, 2516, 264, 2302, 551, 510, 11, 12973, 9535, 322, 264, 1411, 2445, 9535, 322, 264, 1411, 13], "temperature": 0.0, "avg_logprob": -0.2735595703125, "compression_ratio": 1.6043956043956045, "no_speech_prob": 4.00389835704118e-05}, {"id": 183, "seek": 129100, "start": 1291.0, "end": 1301.0, "text": " So this is saying this function can only ever see scalars and with that applied between scalars on the left and vectors on the right.", "tokens": [407, 341, 307, 1566, 341, 2445, 393, 787, 1562, 536, 15664, 685, 293, 365, 300, 6456, 1296, 15664, 685, 322, 264, 1411, 293, 18875, 322, 264, 558, 13], "temperature": 0.0, "avg_logprob": -0.11504083360944475, "compression_ratio": 1.6407185628742516, "no_speech_prob": 1.1476694453449454e-05}, {"id": 184, "seek": 129100, "start": 1301.0, "end": 1308.0, "text": " Now, I don't get it. So if you're saying to apply it to vectors on the right, but you previously said it only you can ever apply to scalars.", "tokens": [823, 11, 286, 500, 380, 483, 309, 13, 407, 498, 291, 434, 1566, 281, 3079, 309, 281, 18875, 322, 264, 558, 11, 457, 291, 8046, 848, 309, 787, 291, 393, 1562, 3079, 281, 15664, 685, 13], "temperature": 0.0, "avg_logprob": -0.11504083360944475, "compression_ratio": 1.6407185628742516, "no_speech_prob": 1.1476694453449454e-05}, {"id": 185, "seek": 130800, "start": 1308.0, "end": 1322.0, "text": " Yeah. So it's not remember rank is not modifying the function rank is calling the function one or more times as necessary, such that the function will have a restricted view.", "tokens": [865, 13, 407, 309, 311, 406, 1604, 6181, 307, 406, 42626, 264, 2445, 6181, 307, 5141, 264, 2445, 472, 420, 544, 1413, 382, 4818, 11, 1270, 300, 264, 2445, 486, 362, 257, 20608, 1910, 13], "temperature": 0.0, "avg_logprob": -0.15907202826605904, "compression_ratio": 1.634020618556701, "no_speech_prob": 6.6430388869775925e-06}, {"id": 186, "seek": 130800, "start": 1322.0, "end": 1334.0, "text": " Yes. So this function over here will be called with left arguments are scalars and read against the vectors, we can see that by putting in CC.", "tokens": [1079, 13, 407, 341, 2445, 670, 510, 486, 312, 1219, 365, 1411, 12869, 366, 15664, 685, 293, 1401, 1970, 264, 18875, 11, 321, 393, 536, 300, 538, 3372, 294, 12630, 13], "temperature": 0.0, "avg_logprob": -0.15907202826605904, "compression_ratio": 1.634020618556701, "no_speech_prob": 6.6430388869775925e-06}, {"id": 187, "seek": 133400, "start": 1334.0, "end": 1349.0, "text": " However, this function itself is the derives function. It is not a normal equal is an equal. It's a function that uses equal, but only ever let's equal experience a scalar on the left and the scale on the right.", "tokens": [2908, 11, 341, 2445, 2564, 307, 264, 1163, 1539, 2445, 13, 467, 307, 406, 257, 2710, 2681, 307, 364, 2681, 13, 467, 311, 257, 2445, 300, 4960, 2681, 11, 457, 787, 1562, 718, 311, 2681, 1752, 257, 39684, 322, 264, 1411, 293, 264, 4373, 322, 264, 558, 13], "temperature": 0.0, "avg_logprob": -0.19072865037357106, "compression_ratio": 1.5714285714285714, "no_speech_prob": 1.4061555702937767e-05}, {"id": 188, "seek": 133400, "start": 1349.0, "end": 1353.0, "text": " And how do we know that well we can look at with TC.", "tokens": [400, 577, 360, 321, 458, 300, 731, 321, 393, 574, 412, 365, 34150, 13], "temperature": 0.0, "avg_logprob": -0.19072865037357106, "compression_ratio": 1.5714285714285714, "no_speech_prob": 1.4061555702937767e-05}, {"id": 189, "seek": 135300, "start": 1353.0, "end": 1364.0, "text": " So now we can see that this equal is being called like that one element at a time on the left and on the right, we could also put in a double TC, but it will be very proposed. And also when.", "tokens": [407, 586, 321, 393, 536, 300, 341, 2681, 307, 885, 1219, 411, 300, 472, 4478, 412, 257, 565, 322, 264, 1411, 293, 322, 264, 558, 11, 321, 727, 611, 829, 294, 257, 3834, 34150, 11, 457, 309, 486, 312, 588, 10348, 13, 400, 611, 562, 13], "temperature": 0.0, "avg_logprob": -0.17628265380859376, "compression_ratio": 1.4074074074074074, "no_speech_prob": 1.9826156858471222e-05}, {"id": 190, "seek": 136400, "start": 1364.0, "end": 1384.0, "text": " Yeah, so, so we can see first to go up all the way here. So we say that the outer TC reported, I'm calling my operand with a scalar and a vector and the inner TC, the left one, saying, I'm seeing, I'm calling my operand with a scalar and a scalar.", "tokens": [865, 11, 370, 11, 370, 321, 393, 536, 700, 281, 352, 493, 439, 264, 636, 510, 13, 407, 321, 584, 300, 264, 10847, 34150, 7055, 11, 286, 478, 5141, 452, 2208, 474, 365, 257, 39684, 293, 257, 8062, 293, 264, 7284, 34150, 11, 264, 1411, 472, 11, 1566, 11, 286, 478, 2577, 11, 286, 478, 5141, 452, 2208, 474, 365, 257, 39684, 293, 257, 39684, 13], "temperature": 0.0, "avg_logprob": -0.1838362421308245, "compression_ratio": 1.6917808219178083, "no_speech_prob": 2.5067178285098635e-05}, {"id": 191, "seek": 138400, "start": 1384.0, "end": 1401.0, "text": " So actually, in some ways it makes sense to think about that composition train, right to left, in the sense that the right hand.", "tokens": [407, 767, 11, 294, 512, 2098, 309, 1669, 2020, 281, 519, 466, 300, 12686, 3847, 11, 558, 281, 1411, 11, 294, 264, 2020, 300, 264, 558, 1011, 13], "temperature": 0.0, "avg_logprob": -0.15050281262865253, "compression_ratio": 1.4, "no_speech_prob": 4.935868673783261e-06}, {"id": 192, "seek": 138400, "start": 1401.0, "end": 1406.0, "text": " Jot diuresis is taking the whole left hand.", "tokens": [508, 310, 1026, 1303, 271, 307, 1940, 264, 1379, 1411, 1011, 13], "temperature": 0.0, "avg_logprob": -0.15050281262865253, "compression_ratio": 1.4, "no_speech_prob": 4.935868673783261e-06}, {"id": 193, "seek": 138400, "start": 1406.0, "end": 1409.0, "text": " Function.", "tokens": [11166, 882, 13], "temperature": 0.0, "avg_logprob": -0.15050281262865253, "compression_ratio": 1.4, "no_speech_prob": 4.935868673783261e-06}, {"id": 194, "seek": 140900, "start": 1409.0, "end": 1418.0, "text": " So the kind of the implied loop is that left hand side is kind of the inner of the applied loop in a sense. Yes. And this is the governor.", "tokens": [407, 264, 733, 295, 264, 32614, 6367, 307, 300, 1411, 1011, 1252, 307, 733, 295, 264, 7284, 295, 264, 6456, 6367, 294, 257, 2020, 13, 1079, 13, 400, 341, 307, 264, 12965, 13], "temperature": 0.0, "avg_logprob": -0.16135743948129508, "compression_ratio": 1.6666666666666667, "no_speech_prob": 6.399697304004803e-05}, {"id": 195, "seek": 140900, "start": 1418.0, "end": 1429.0, "text": " Or, or do you read it right to left until you hit the operator, and then you jump to the far left and read that. I mean that the parsing goes left to right.", "tokens": [1610, 11, 420, 360, 291, 1401, 309, 558, 281, 1411, 1826, 291, 2045, 264, 12973, 11, 293, 550, 291, 3012, 281, 264, 1400, 1411, 293, 1401, 300, 13, 286, 914, 300, 264, 21156, 278, 1709, 1411, 281, 558, 13], "temperature": 0.0, "avg_logprob": -0.16135743948129508, "compression_ratio": 1.6666666666666667, "no_speech_prob": 6.399697304004803e-05}, {"id": 196, "seek": 142900, "start": 1429.0, "end": 1439.0, "text": " But the point is that the right hand dot diuresis has the entire left hand derived function as the thing that it's applying that right to.", "tokens": [583, 264, 935, 307, 300, 264, 558, 1011, 5893, 1026, 1303, 271, 575, 264, 2302, 1411, 1011, 18949, 2445, 382, 264, 551, 300, 309, 311, 9275, 300, 558, 281, 13], "temperature": 0.0, "avg_logprob": -0.17061910321635584, "compression_ratio": 1.5789473684210527, "no_speech_prob": 3.1174557079793885e-05}, {"id": 197, "seek": 142900, "start": 1439.0, "end": 1445.0, "text": " I find it a little bit dangerous to speak about a PL in terms of right to left left or right, it's a.", "tokens": [286, 915, 309, 257, 707, 857, 5795, 281, 1710, 466, 257, 6999, 294, 2115, 295, 558, 281, 1411, 1411, 420, 558, 11, 309, 311, 257, 13], "temperature": 0.0, "avg_logprob": -0.17061910321635584, "compression_ratio": 1.5789473684210527, "no_speech_prob": 3.1174557079793885e-05}, {"id": 198, "seek": 144500, "start": 1445.0, "end": 1459.0, "text": " It's kind of like a scaffold for letting people know how simple function application works in a PL, but it doesn't really apply when you have a full the full API syntax including operators and stranding and so on.", "tokens": [467, 311, 733, 295, 411, 257, 44094, 337, 8295, 561, 458, 577, 2199, 2445, 3861, 1985, 294, 257, 6999, 11, 457, 309, 1177, 380, 534, 3079, 562, 291, 362, 257, 1577, 264, 1577, 9362, 28431, 3009, 19077, 293, 14955, 278, 293, 370, 322, 13], "temperature": 0.0, "avg_logprob": -0.12373040173504804, "compression_ratio": 1.502415458937198, "no_speech_prob": 2.466590922267642e-05}, {"id": 199, "seek": 144500, "start": 1459.0, "end": 1464.0, "text": " Really, the, the way you should think of it is in terms of binding strength.", "tokens": [4083, 11, 264, 11, 264, 636, 291, 820, 519, 295, 309, 307, 294, 2115, 295, 17359, 3800, 13], "temperature": 0.0, "avg_logprob": -0.12373040173504804, "compression_ratio": 1.502415458937198, "no_speech_prob": 2.466590922267642e-05}, {"id": 200, "seek": 144500, "start": 1464.0, "end": 1467.0, "text": " What binds stronger.", "tokens": [708, 41515, 7249, 13], "temperature": 0.0, "avg_logprob": -0.12373040173504804, "compression_ratio": 1.502415458937198, "no_speech_prob": 2.466590922267642e-05}, {"id": 201, "seek": 146700, "start": 1467.0, "end": 1487.0, "text": " What bind stronger than to their neighboring tokens, then functions do. And then, when you have equal binding strength, then operators go from the left, stronger, so they have long left scope and operators left operand will be as far to the left as it can", "tokens": [708, 14786, 7249, 813, 281, 641, 31521, 22667, 11, 550, 6828, 360, 13, 400, 550, 11, 562, 291, 362, 2681, 17359, 3800, 11, 550, 19077, 352, 490, 264, 1411, 11, 7249, 11, 370, 436, 362, 938, 1411, 11923, 293, 19077, 1411, 2208, 474, 486, 312, 382, 1400, 281, 264, 1411, 382, 309, 393], "temperature": 0.0, "avg_logprob": -0.16680682789195667, "compression_ratio": 1.6585365853658536, "no_speech_prob": 2.36835489886289e-06}, {"id": 202, "seek": 146700, "start": 1487.0, "end": 1490.0, "text": " possibly reach without switching type.", "tokens": [6264, 2524, 1553, 16493, 2010, 13], "temperature": 0.0, "avg_logprob": -0.16680682789195667, "compression_ratio": 1.6585365853658536, "no_speech_prob": 2.36835489886289e-06}, {"id": 203, "seek": 146700, "start": 1490.0, "end": 1493.0, "text": " It can only take either function or an array.", "tokens": [467, 393, 787, 747, 2139, 2445, 420, 364, 10225, 13], "temperature": 0.0, "avg_logprob": -0.16680682789195667, "compression_ratio": 1.6585365853658536, "no_speech_prob": 2.36835489886289e-06}, {"id": 204, "seek": 149300, "start": 1493.0, "end": 1499.0, "text": " So, when parsing this, we can look at this as okay this operator.", "tokens": [407, 11, 562, 21156, 278, 341, 11, 321, 393, 574, 412, 341, 382, 1392, 341, 12973, 13], "temperature": 0.0, "avg_logprob": -0.14935699311813505, "compression_ratio": 1.7636363636363637, "no_speech_prob": 2.5064717192435637e-05}, {"id": 205, "seek": 149300, "start": 1499.0, "end": 1511.0, "text": " What does it take us is left operand well here we have an operator, a magnetic operator that can, it can't be just that because it can't take a magnetic operators operand so we have to keep going left, maybe this is the operand of TC.", "tokens": [708, 775, 309, 747, 505, 307, 1411, 2208, 474, 731, 510, 321, 362, 364, 12973, 11, 257, 12688, 12973, 300, 393, 11, 309, 393, 380, 312, 445, 300, 570, 309, 393, 380, 747, 257, 12688, 19077, 2208, 474, 370, 321, 362, 281, 1066, 516, 1411, 11, 1310, 341, 307, 264, 2208, 474, 295, 34150, 13], "temperature": 0.0, "avg_logprob": -0.14935699311813505, "compression_ratio": 1.7636363636363637, "no_speech_prob": 2.5064717192435637e-05}, {"id": 206, "seek": 149300, "start": 1511.0, "end": 1517.0, "text": " Oh, further left note there's a diabetic operator, it's going to grab the zero from TC.", "tokens": [876, 11, 3052, 1411, 3637, 456, 311, 257, 50238, 12973, 11, 309, 311, 516, 281, 4444, 264, 4018, 490, 34150, 13], "temperature": 0.0, "avg_logprob": -0.14935699311813505, "compression_ratio": 1.7636363636363637, "no_speech_prob": 2.5064717192435637e-05}, {"id": 207, "seek": 151700, "start": 1517.0, "end": 1524.0, "text": " It takes us is left operand Oh, no, another left.", "tokens": [467, 2516, 505, 307, 1411, 2208, 474, 876, 11, 572, 11, 1071, 1411, 13], "temperature": 0.0, "avg_logprob": -0.1928523028338397, "compression_ratio": 1.8653846153846154, "no_speech_prob": 4.3978565372526646e-05}, {"id": 208, "seek": 151700, "start": 1524.0, "end": 1531.0, "text": " So it has to have an operand keep going here. And there's a parenthesis stop we can't go any further. So we stop here.", "tokens": [407, 309, 575, 281, 362, 364, 2208, 474, 1066, 516, 510, 13, 400, 456, 311, 257, 23350, 9374, 1590, 321, 393, 380, 352, 604, 3052, 13, 407, 321, 1590, 510, 13], "temperature": 0.0, "avg_logprob": -0.1928523028338397, "compression_ratio": 1.8653846153846154, "no_speech_prob": 4.3978565372526646e-05}, {"id": 209, "seek": 151700, "start": 1531.0, "end": 1535.0, "text": " Or you could look the other way around this equal.", "tokens": [1610, 291, 727, 574, 264, 661, 636, 926, 341, 2681, 13], "temperature": 0.0, "avg_logprob": -0.1928523028338397, "compression_ratio": 1.8653846153846154, "no_speech_prob": 4.3978565372526646e-05}, {"id": 210, "seek": 151700, "start": 1535.0, "end": 1537.0, "text": " Is it being applied now.", "tokens": [1119, 309, 885, 6456, 586, 13], "temperature": 0.0, "avg_logprob": -0.1928523028338397, "compression_ratio": 1.8653846153846154, "no_speech_prob": 4.3978565372526646e-05}, {"id": 211, "seek": 151700, "start": 1537.0, "end": 1546.0, "text": " No, it's being grabbed by an operator on the right. Is this being applied. No, it's being applied is being grabbed by an operator on the right.", "tokens": [883, 11, 309, 311, 885, 18607, 538, 364, 12973, 322, 264, 558, 13, 1119, 341, 885, 6456, 13, 883, 11, 309, 311, 885, 6456, 307, 885, 18607, 538, 364, 12973, 322, 264, 558, 13], "temperature": 0.0, "avg_logprob": -0.1928523028338397, "compression_ratio": 1.8653846153846154, "no_speech_prob": 4.3978565372526646e-05}, {"id": 212, "seek": 154600, "start": 1546.0, "end": 1552.0, "text": " So here's the right operand are we ready to apply. Nope, there's an operator on the right grabbing me.", "tokens": [407, 510, 311, 264, 558, 2208, 474, 366, 321, 1919, 281, 3079, 13, 12172, 11, 456, 311, 364, 12973, 322, 264, 558, 23771, 385, 13], "temperature": 0.0, "avg_logprob": -0.1947219654665155, "compression_ratio": 1.8024691358024691, "no_speech_prob": 3.762977212318219e-05}, {"id": 213, "seek": 154600, "start": 1552.0, "end": 1555.0, "text": " Is this ready. No, there's another operator.", "tokens": [1119, 341, 1919, 13, 883, 11, 456, 311, 1071, 12973, 13], "temperature": 0.0, "avg_logprob": -0.1947219654665155, "compression_ratio": 1.8024691358024691, "no_speech_prob": 3.762977212318219e-05}, {"id": 214, "seek": 154600, "start": 1555.0, "end": 1567.0, "text": " And then finally, the right operand and the supremacist we can go any further. So it doesn't matter which way you go. As long as you know the binding strength rules, you just go one token ahead and see are we done yet.", "tokens": [400, 550, 2721, 11, 264, 558, 2208, 474, 293, 264, 23710, 326, 468, 321, 393, 352, 604, 3052, 13, 407, 309, 1177, 380, 1871, 597, 636, 291, 352, 13, 1018, 938, 382, 291, 458, 264, 17359, 3800, 4474, 11, 291, 445, 352, 472, 14862, 2286, 293, 536, 366, 321, 1096, 1939, 13], "temperature": 0.0, "avg_logprob": -0.1947219654665155, "compression_ratio": 1.8024691358024691, "no_speech_prob": 3.762977212318219e-05}, {"id": 215, "seek": 154600, "start": 1567.0, "end": 1570.0, "text": " And if the binding rules say no we're not done yet.", "tokens": [400, 498, 264, 17359, 4474, 584, 572, 321, 434, 406, 1096, 1939, 13], "temperature": 0.0, "avg_logprob": -0.1947219654665155, "compression_ratio": 1.8024691358024691, "no_speech_prob": 3.762977212318219e-05}, {"id": 216, "seek": 154600, "start": 1570.0, "end": 1572.0, "text": " And you keep going.", "tokens": [400, 291, 1066, 516, 13], "temperature": 0.0, "avg_logprob": -0.1947219654665155, "compression_ratio": 1.8024691358024691, "no_speech_prob": 3.762977212318219e-05}, {"id": 217, "seek": 157200, "start": 1572.0, "end": 1580.0, "text": " And related to this, I, I found it very insightful listening to you.", "tokens": [400, 4077, 281, 341, 11, 286, 11, 286, 1352, 309, 588, 46401, 4764, 281, 291, 13], "temperature": 0.0, "avg_logprob": -0.1610460147051744, "compression_ratio": 1.5638297872340425, "no_speech_prob": 3.320629912195727e-05}, {"id": 218, "seek": 157200, "start": 1580.0, "end": 1596.0, "text": " A raycast episode talking about why, why you tend to avoid parentheses, which is not because you're trying to type less characters, but because it's a similar idea that you're saying there's less to keep in your head at once.", "tokens": [316, 18592, 3734, 3500, 1417, 466, 983, 11, 983, 291, 3928, 281, 5042, 34153, 11, 597, 307, 406, 570, 291, 434, 1382, 281, 2010, 1570, 4342, 11, 457, 570, 309, 311, 257, 2531, 1558, 300, 291, 434, 1566, 456, 311, 1570, 281, 1066, 294, 428, 1378, 412, 1564, 13], "temperature": 0.0, "avg_logprob": -0.1610460147051744, "compression_ratio": 1.5638297872340425, "no_speech_prob": 3.320629912195727e-05}, {"id": 219, "seek": 159600, "start": 1596.0, "end": 1604.0, "text": " And if you can just work, you know, in the natural direction and only have to keep one thing in your head at a time.", "tokens": [400, 498, 291, 393, 445, 589, 11, 291, 458, 11, 294, 264, 3303, 3513, 293, 787, 362, 281, 1066, 472, 551, 294, 428, 1378, 412, 257, 565, 13], "temperature": 0.0, "avg_logprob": -0.12299706643087822, "compression_ratio": 1.736842105263158, "no_speech_prob": 2.0133484213147312e-05}, {"id": 220, "seek": 159600, "start": 1604.0, "end": 1610.0, "text": " Right. And it doesn't really matter you can read a PL right to left to left to right, it's just a matter of reading it.", "tokens": [1779, 13, 400, 309, 1177, 380, 534, 1871, 291, 393, 1401, 257, 6999, 558, 281, 1411, 281, 1411, 281, 558, 11, 309, 311, 445, 257, 1871, 295, 3760, 309, 13], "temperature": 0.0, "avg_logprob": -0.12299706643087822, "compression_ratio": 1.736842105263158, "no_speech_prob": 2.0133484213147312e-05}, {"id": 221, "seek": 159600, "start": 1610.0, "end": 1615.0, "text": " So, so the way I would read this from left to right.", "tokens": [407, 11, 370, 264, 636, 286, 576, 1401, 341, 490, 1411, 281, 558, 13], "temperature": 0.0, "avg_logprob": -0.12299706643087822, "compression_ratio": 1.736842105263158, "no_speech_prob": 2.0133484213147312e-05}, {"id": 222, "seek": 159600, "start": 1615.0, "end": 1621.0, "text": " And actually I would avoid this parenthesis, I do need to separate this array from this array.", "tokens": [400, 767, 286, 576, 5042, 341, 23350, 9374, 11, 286, 360, 643, 281, 4994, 341, 10225, 490, 341, 10225, 13], "temperature": 0.0, "avg_logprob": -0.12299706643087822, "compression_ratio": 1.736842105263158, "no_speech_prob": 2.0133484213147312e-05}, {"id": 223, "seek": 159600, "start": 1621.0, "end": 1624.0, "text": " But I can do that with an identity function.", "tokens": [583, 286, 393, 360, 300, 365, 364, 6575, 2445, 13], "temperature": 0.0, "avg_logprob": -0.12299706643087822, "compression_ratio": 1.736842105263158, "no_speech_prob": 2.0133484213147312e-05}, {"id": 224, "seek": 162400, "start": 1624.0, "end": 1631.0, "text": " Because this operand here has to stop here. We're switching to a new token here it can't grab farther further.", "tokens": [1436, 341, 2208, 474, 510, 575, 281, 1590, 510, 13, 492, 434, 16493, 281, 257, 777, 14862, 510, 309, 393, 380, 4444, 20344, 3052, 13], "temperature": 0.0, "avg_logprob": -0.2869891859080693, "compression_ratio": 1.5810055865921788, "no_speech_prob": 5.143198723089881e-05}, {"id": 225, "seek": 162400, "start": 1631.0, "end": 1640.0, "text": " So that identity function. So, what's the code again right something right. It's called, I mean the fish and then the same right right right tech is the symbol.", "tokens": [407, 300, 6575, 2445, 13, 407, 11, 437, 311, 264, 3089, 797, 558, 746, 558, 13, 467, 311, 1219, 11, 286, 914, 264, 3506, 293, 550, 264, 912, 558, 558, 558, 7553, 307, 264, 5986, 13], "temperature": 0.0, "avg_logprob": -0.2869891859080693, "compression_ratio": 1.5810055865921788, "no_speech_prob": 5.143198723089881e-05}, {"id": 226, "seek": 162400, "start": 1640.0, "end": 1641.0, "text": " Yeah. Yeah.", "tokens": [865, 13, 865, 13], "temperature": 0.0, "avg_logprob": -0.2869891859080693, "compression_ratio": 1.5810055865921788, "no_speech_prob": 5.143198723089881e-05}, {"id": 227, "seek": 164100, "start": 1641.0, "end": 1654.0, "text": " And, and so that function in a dyadic context returns its right hand side and in a monadic context returns well it's returns its right hand side.", "tokens": [400, 11, 293, 370, 300, 2445, 294, 257, 14584, 43341, 4319, 11247, 1080, 558, 1011, 1252, 293, 294, 257, 1108, 43341, 4319, 11247, 731, 309, 311, 11247, 1080, 558, 1011, 1252, 13], "temperature": 0.0, "avg_logprob": -0.21753015016254626, "compression_ratio": 1.81437125748503, "no_speech_prob": 1.9219362002331764e-05}, {"id": 228, "seek": 164100, "start": 1654.0, "end": 1665.0, "text": " That's it. I like to call it right, because it's returns whatever's on the right. Right. And so that functions, not doing anything except as I pass that now.", "tokens": [663, 311, 309, 13, 286, 411, 281, 818, 309, 558, 11, 570, 309, 311, 11247, 2035, 311, 322, 264, 558, 13, 1779, 13, 400, 370, 300, 6828, 11, 406, 884, 1340, 3993, 382, 286, 1320, 300, 586, 13], "temperature": 0.0, "avg_logprob": -0.21753015016254626, "compression_ratio": 1.81437125748503, "no_speech_prob": 1.9219362002331764e-05}, {"id": 229, "seek": 166500, "start": 1665.0, "end": 1671.0, "text": " I basically can see that I've got a function being applied to an array.", "tokens": [286, 1936, 393, 536, 300, 286, 600, 658, 257, 2445, 885, 6456, 281, 364, 10225, 13], "temperature": 0.0, "avg_logprob": -0.18048448820371885, "compression_ratio": 1.4842105263157894, "no_speech_prob": 1.6696183593012393e-05}, {"id": 230, "seek": 166500, "start": 1671.0, "end": 1677.0, "text": " And therefore I'm. Yeah, that's that's a unit of stuff that API can then.", "tokens": [400, 4412, 286, 478, 13, 865, 11, 300, 311, 300, 311, 257, 4985, 295, 1507, 300, 9362, 393, 550, 13], "temperature": 0.0, "avg_logprob": -0.18048448820371885, "compression_ratio": 1.4842105263157894, "no_speech_prob": 1.6696183593012393e-05}, {"id": 231, "seek": 166500, "start": 1677.0, "end": 1685.0, "text": " So you can read this from from. So, normally I would read a pill, if these expressions are short enough from left to right. Interesting.", "tokens": [407, 291, 393, 1401, 341, 490, 490, 13, 407, 11, 5646, 286, 576, 1401, 257, 8100, 11, 498, 613, 15277, 366, 2099, 1547, 490, 1411, 281, 558, 13, 14711, 13], "temperature": 0.0, "avg_logprob": -0.18048448820371885, "compression_ratio": 1.4842105263157894, "no_speech_prob": 1.6696183593012393e-05}, {"id": 232, "seek": 168500, "start": 1685.0, "end": 1697.0, "text": " Because it's executed from right to left. We can read it from left to right, and I will make a crazy claim here that English is written and read from left to right.", "tokens": [1436, 309, 311, 17577, 490, 558, 281, 1411, 13, 492, 393, 1401, 309, 490, 1411, 281, 558, 11, 293, 286, 486, 652, 257, 3219, 3932, 510, 300, 3669, 307, 3720, 293, 1401, 490, 1411, 281, 558, 13], "temperature": 0.0, "avg_logprob": -0.13898680369059244, "compression_ratio": 1.6470588235294117, "no_speech_prob": 5.336421963875182e-06}, {"id": 233, "seek": 168500, "start": 1697.0, "end": 1701.0, "text": " And it executes from right to left. Come back to that.", "tokens": [400, 309, 4454, 1819, 490, 558, 281, 1411, 13, 2492, 646, 281, 300, 13], "temperature": 0.0, "avg_logprob": -0.13898680369059244, "compression_ratio": 1.6470588235294117, "no_speech_prob": 5.336421963875182e-06}, {"id": 234, "seek": 168500, "start": 1701.0, "end": 1711.0, "text": " And so this is ABCD equal on scalars on scalars and vectors.", "tokens": [400, 370, 341, 307, 22342, 35, 2681, 322, 15664, 685, 322, 15664, 685, 293, 18875, 13], "temperature": 0.0, "avg_logprob": -0.13898680369059244, "compression_ratio": 1.6470588235294117, "no_speech_prob": 5.336421963875182e-06}, {"id": 235, "seek": 171100, "start": 1711.0, "end": 1718.0, "text": " To a BDC BCA.", "tokens": [1407, 257, 363, 25619, 14359, 32, 13], "temperature": 0.0, "avg_logprob": -0.4051431474231538, "compression_ratio": 0.8571428571428571, "no_speech_prob": 1.4507780178973917e-05}, {"id": 236, "seek": 171100, "start": 1718.0, "end": 1723.0, "text": " It's naturally from left to right.", "tokens": [467, 311, 8195, 490, 1411, 281, 558, 13], "temperature": 0.0, "avg_logprob": -0.4051431474231538, "compression_ratio": 0.8571428571428571, "no_speech_prob": 1.4507780178973917e-05}, {"id": 237, "seek": 172300, "start": 1723.0, "end": 1743.0, "text": " Yeah, I know it's like when you say like, you know, three divide tilde dioresis, something you can start reading it as like three divided into, and then you can start divides that expression divides.", "tokens": [865, 11, 286, 458, 309, 311, 411, 562, 291, 584, 411, 11, 291, 458, 11, 1045, 9845, 45046, 1026, 2706, 271, 11, 746, 291, 393, 722, 3760, 309, 382, 411, 1045, 6666, 666, 11, 293, 550, 291, 393, 722, 41347, 300, 6114, 41347, 13], "temperature": 0.0, "avg_logprob": -0.2269153875463149, "compression_ratio": 1.6331360946745561, "no_speech_prob": 1.3206313269620296e-05}, {"id": 238, "seek": 172300, "start": 1743.0, "end": 1747.0, "text": " Make it three three divides five.", "tokens": [4387, 309, 1045, 1045, 41347, 1732, 13], "temperature": 0.0, "avg_logprob": -0.2269153875463149, "compression_ratio": 1.6331360946745561, "no_speech_prob": 1.3206313269620296e-05}, {"id": 239, "seek": 172300, "start": 1747.0, "end": 1751.0, "text": " English is is executed from right to left.", "tokens": [3669, 307, 307, 17577, 490, 558, 281, 1411, 13], "temperature": 0.0, "avg_logprob": -0.2269153875463149, "compression_ratio": 1.6331360946745561, "no_speech_prob": 1.3206313269620296e-05}, {"id": 240, "seek": 175100, "start": 1751.0, "end": 1755.0, "text": " Go drive the big red.", "tokens": [1037, 3332, 264, 955, 2182, 13], "temperature": 0.0, "avg_logprob": -0.12206408318052901, "compression_ratio": 1.7894736842105263, "no_speech_prob": 3.2124753488460556e-05}, {"id": 241, "seek": 175100, "start": 1755.0, "end": 1758.0, "text": " You still have no idea what I'm saying.", "tokens": [509, 920, 362, 572, 1558, 437, 286, 478, 1566, 13], "temperature": 0.0, "avg_logprob": -0.12206408318052901, "compression_ratio": 1.7894736842105263, "no_speech_prob": 3.2124753488460556e-05}, {"id": 242, "seek": 175100, "start": 1758.0, "end": 1760.0, "text": " Bus.", "tokens": [8006, 13], "temperature": 0.0, "avg_logprob": -0.12206408318052901, "compression_ratio": 1.7894736842105263, "no_speech_prob": 3.2124753488460556e-05}, {"id": 243, "seek": 175100, "start": 1760.0, "end": 1763.0, "text": " Okay, so first you have to evaluate bus.", "tokens": [1033, 11, 370, 700, 291, 362, 281, 13059, 1255, 13], "temperature": 0.0, "avg_logprob": -0.12206408318052901, "compression_ratio": 1.7894736842105263, "no_speech_prob": 3.2124753488460556e-05}, {"id": 244, "seek": 175100, "start": 1763.0, "end": 1770.0, "text": " Right, then you have to make it red, then you have to make it big, then you have to talk about the concept of driving it then you have to go do that.", "tokens": [1779, 11, 550, 291, 362, 281, 652, 309, 2182, 11, 550, 291, 362, 281, 652, 309, 955, 11, 550, 291, 362, 281, 751, 466, 264, 3410, 295, 4840, 309, 550, 291, 362, 281, 352, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.12206408318052901, "compression_ratio": 1.7894736842105263, "no_speech_prob": 3.2124753488460556e-05}, {"id": 245, "seek": 175100, "start": 1770.0, "end": 1775.0, "text": " Go drive the big red bus.", "tokens": [1037, 3332, 264, 955, 2182, 1255, 13], "temperature": 0.0, "avg_logprob": -0.12206408318052901, "compression_ratio": 1.7894736842105263, "no_speech_prob": 3.2124753488460556e-05}, {"id": 246, "seek": 175100, "start": 1775.0, "end": 1778.0, "text": " It's insightful. Yeah.", "tokens": [467, 311, 46401, 13, 865, 13], "temperature": 0.0, "avg_logprob": -0.12206408318052901, "compression_ratio": 1.7894736842105263, "no_speech_prob": 3.2124753488460556e-05}, {"id": 247, "seek": 177800, "start": 1778.0, "end": 1786.0, "text": " Normal function syntax in other programming languages is also from right to left, even though everybody thinks it's from left to right.", "tokens": [21277, 2445, 28431, 294, 661, 9410, 8650, 307, 611, 490, 558, 281, 1411, 11, 754, 1673, 2201, 7309, 309, 311, 490, 1411, 281, 558, 13], "temperature": 0.0, "avg_logprob": -0.20841530786044354, "compression_ratio": 1.6243093922651934, "no_speech_prob": 4.197343878331594e-05}, {"id": 248, "seek": 177800, "start": 1786.0, "end": 1801.0, "text": " Because if I write F, G of H of X, you have to evaluate X first and before you evaluate H before you evaluate G before you write it and read it left to right.", "tokens": [1436, 498, 286, 2464, 479, 11, 460, 295, 389, 295, 1783, 11, 291, 362, 281, 13059, 1783, 700, 293, 949, 291, 13059, 389, 949, 291, 13059, 460, 949, 291, 2464, 309, 293, 1401, 309, 1411, 281, 558, 13], "temperature": 0.0, "avg_logprob": -0.20841530786044354, "compression_ratio": 1.6243093922651934, "no_speech_prob": 4.197343878331594e-05}, {"id": 249, "seek": 180100, "start": 1801.0, "end": 1814.0, "text": " Nowadays I'm moving towards the syntax where you kind of, well, or maybe functional kind of a right arrow kind of clear for some yeah pipe pipe type thing.", "tokens": [28908, 286, 478, 2684, 3030, 264, 28431, 689, 291, 733, 295, 11, 731, 11, 420, 1310, 11745, 733, 295, 257, 558, 11610, 733, 295, 1850, 337, 512, 1338, 11240, 11240, 2010, 551, 13], "temperature": 0.0, "avg_logprob": -0.24046470642089843, "compression_ratio": 1.4673913043478262, "no_speech_prob": 4.322592940297909e-05}, {"id": 250, "seek": 180100, "start": 1814.0, "end": 1816.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.24046470642089843, "compression_ratio": 1.4673913043478262, "no_speech_prob": 4.322592940297909e-05}, {"id": 251, "seek": 180100, "start": 1816.0, "end": 1823.0, "text": " That's true. Yeah. But anyway, enough about that. So, I hope this clarifies matters a bit.", "tokens": [663, 311, 2074, 13, 865, 13, 583, 4033, 11, 1547, 466, 300, 13, 407, 11, 286, 1454, 341, 6093, 11221, 7001, 257, 857, 13], "temperature": 0.0, "avg_logprob": -0.24046470642089843, "compression_ratio": 1.4673913043478262, "no_speech_prob": 4.322592940297909e-05}, {"id": 252, "seek": 180100, "start": 1823.0, "end": 1829.0, "text": " Yeah, it's great.", "tokens": [865, 11, 309, 311, 869, 13], "temperature": 0.0, "avg_logprob": -0.24046470642089843, "compression_ratio": 1.4673913043478262, "no_speech_prob": 4.322592940297909e-05}, {"id": 253, "seek": 182900, "start": 1829.0, "end": 1831.0, "text": " I'm sorry, half of your time.", "tokens": [286, 478, 2597, 11, 1922, 295, 428, 565, 13], "temperature": 0.0, "avg_logprob": -0.3185659670362286, "compression_ratio": 1.5739910313901346, "no_speech_prob": 6.801426934543997e-05}, {"id": 254, "seek": 182900, "start": 1831.0, "end": 1832.0, "text": " I'm thrilled.", "tokens": [286, 478, 18744, 13], "temperature": 0.0, "avg_logprob": -0.3185659670362286, "compression_ratio": 1.5739910313901346, "no_speech_prob": 6.801426934543997e-05}, {"id": 255, "seek": 182900, "start": 1832.0, "end": 1837.0, "text": " No, I have any questions about anything.", "tokens": [883, 11, 286, 362, 604, 1651, 466, 1340, 13], "temperature": 0.0, "avg_logprob": -0.3185659670362286, "compression_ratio": 1.5739910313901346, "no_speech_prob": 6.801426934543997e-05}, {"id": 256, "seek": 182900, "start": 1837.0, "end": 1839.0, "text": " I might want to go to sleep.", "tokens": [286, 1062, 528, 281, 352, 281, 2817, 13], "temperature": 0.0, "avg_logprob": -0.3185659670362286, "compression_ratio": 1.5739910313901346, "no_speech_prob": 6.801426934543997e-05}, {"id": 257, "seek": 182900, "start": 1839.0, "end": 1843.0, "text": " Watch the watch previous ones and then join in. This is great.", "tokens": [7277, 264, 1159, 3894, 2306, 293, 550, 3917, 294, 13, 639, 307, 869, 13], "temperature": 0.0, "avg_logprob": -0.3185659670362286, "compression_ratio": 1.5739910313901346, "no_speech_prob": 6.801426934543997e-05}, {"id": 258, "seek": 182900, "start": 1843.0, "end": 1851.0, "text": " I guess I have a more general question, which is, do you have any thoughts about.", "tokens": [286, 2041, 286, 362, 257, 544, 2674, 1168, 11, 597, 307, 11, 360, 291, 362, 604, 4598, 466, 13], "temperature": 0.0, "avg_logprob": -0.3185659670362286, "compression_ratio": 1.5739910313901346, "no_speech_prob": 6.801426934543997e-05}, {"id": 259, "seek": 182900, "start": 1851.0, "end": 1857.0, "text": " I mean, I want us to finish all the glyphs right which hopefully won't take too much longer.", "tokens": [286, 914, 11, 286, 528, 505, 281, 2413, 439, 264, 22633, 950, 82, 558, 597, 4696, 1582, 380, 747, 886, 709, 2854, 13], "temperature": 0.0, "avg_logprob": -0.3185659670362286, "compression_ratio": 1.5739910313901346, "no_speech_prob": 6.801426934543997e-05}, {"id": 260, "seek": 185700, "start": 1857.0, "end": 1869.0, "text": " But when we do I think the next step will be to learn to write a PL properly and also understand why, like what, why is what proper is proper.", "tokens": [583, 562, 321, 360, 286, 519, 264, 958, 1823, 486, 312, 281, 1466, 281, 2464, 257, 6999, 6108, 293, 611, 1223, 983, 11, 411, 437, 11, 983, 307, 437, 2296, 307, 2296, 13], "temperature": 0.0, "avg_logprob": -0.12198858003358583, "compression_ratio": 1.3027522935779816, "no_speech_prob": 6.048102932254551e-06}, {"id": 261, "seek": 186900, "start": 1869.0, "end": 1890.0, "text": " So things like this use bar version of glyphs because they're more flexible thing is like a pretty key insight is there like good videos or books or anything like that for getting these kinds of insights.", "tokens": [407, 721, 411, 341, 764, 2159, 3037, 295, 22633, 950, 82, 570, 436, 434, 544, 11358, 551, 307, 411, 257, 1238, 2141, 11269, 307, 456, 411, 665, 2145, 420, 3642, 420, 1340, 411, 300, 337, 1242, 613, 3685, 295, 14310, 13], "temperature": 0.0, "avg_logprob": -0.15826757898870505, "compression_ratio": 1.483221476510067, "no_speech_prob": 2.122779960700427e-06}, {"id": 262, "seek": 186900, "start": 1890.0, "end": 1895.0, "text": " The art of a PL.", "tokens": [440, 1523, 295, 257, 6999, 13], "temperature": 0.0, "avg_logprob": -0.15826757898870505, "compression_ratio": 1.483221476510067, "no_speech_prob": 2.122779960700427e-06}, {"id": 263, "seek": 189500, "start": 1895.0, "end": 1909.0, "text": " I don't. There are some tips and tricks. I, in general, a pill isn't very opinionated about how you should write things.", "tokens": [286, 500, 380, 13, 821, 366, 512, 6082, 293, 11733, 13, 286, 11, 294, 2674, 11, 257, 8100, 1943, 380, 588, 4800, 770, 466, 577, 291, 820, 2464, 721, 13], "temperature": 0.0, "avg_logprob": -0.22130957516756924, "compression_ratio": 1.3766233766233766, "no_speech_prob": 3.01667951134732e-05}, {"id": 264, "seek": 189500, "start": 1909.0, "end": 1918.0, "text": " In fact, I think dialogue is kind of proud of the language being a multi paradigm language.", "tokens": [682, 1186, 11, 286, 519, 10221, 307, 733, 295, 4570, 295, 264, 2856, 885, 257, 4825, 24709, 2856, 13], "temperature": 0.0, "avg_logprob": -0.22130957516756924, "compression_ratio": 1.3766233766233766, "no_speech_prob": 3.01667951134732e-05}, {"id": 265, "seek": 191800, "start": 1918.0, "end": 1928.0, "text": " You can write in a functional style you don't have to. You can write in the object or in the style if you want to, but you don't have to, you can write test it or you can write non tested.", "tokens": [509, 393, 2464, 294, 257, 11745, 3758, 291, 500, 380, 362, 281, 13, 509, 393, 2464, 294, 264, 2657, 420, 294, 264, 3758, 498, 291, 528, 281, 11, 457, 291, 500, 380, 362, 281, 11, 291, 393, 2464, 1500, 309, 420, 291, 393, 2464, 2107, 8246, 13], "temperature": 0.0, "avg_logprob": -0.18886469028614186, "compression_ratio": 2.0045454545454544, "no_speech_prob": 7.069544153637253e-06}, {"id": 266, "seek": 191800, "start": 1928.0, "end": 1930.0, "text": " So where you want.", "tokens": [407, 689, 291, 528, 13], "temperature": 0.0, "avg_logprob": -0.18886469028614186, "compression_ratio": 2.0045454545454544, "no_speech_prob": 7.069544153637253e-06}, {"id": 267, "seek": 191800, "start": 1930.0, "end": 1944.0, "text": " However, if you want a good performance, for example, then there's some things you should should stick to. If you want more flexibility to your, your functions are generally more applicable, then there's some things you can stick to.", "tokens": [2908, 11, 498, 291, 528, 257, 665, 3389, 11, 337, 1365, 11, 550, 456, 311, 512, 721, 291, 820, 820, 2897, 281, 13, 759, 291, 528, 544, 12635, 281, 428, 11, 428, 6828, 366, 5101, 544, 21142, 11, 550, 456, 311, 512, 721, 291, 393, 2897, 281, 13], "temperature": 0.0, "avg_logprob": -0.18886469028614186, "compression_ratio": 2.0045454545454544, "no_speech_prob": 7.069544153637253e-06}, {"id": 268, "seek": 194400, "start": 1944.0, "end": 1955.0, "text": " I would say for what we're doing, I would say for what we're doing more flexibility is probably what we're aiming for, because I think like this study group.", "tokens": [286, 576, 584, 337, 437, 321, 434, 884, 11, 286, 576, 584, 337, 437, 321, 434, 884, 544, 12635, 307, 1391, 437, 321, 434, 20253, 337, 11, 570, 286, 519, 411, 341, 2979, 1594, 13], "temperature": 0.0, "avg_logprob": -0.1579873393958723, "compression_ratio": 1.7165775401069518, "no_speech_prob": 7.9605910286773e-05}, {"id": 269, "seek": 194400, "start": 1955.0, "end": 1964.0, "text": " I kind of positioned it as like learning about a flexible and expressive notation which might help us to think about probably you know problems that we're solving.", "tokens": [286, 733, 295, 24889, 309, 382, 411, 2539, 466, 257, 11358, 293, 40189, 24657, 597, 1062, 854, 505, 281, 519, 466, 1391, 291, 458, 2740, 300, 321, 434, 12606, 13], "temperature": 0.0, "avg_logprob": -0.1579873393958723, "compression_ratio": 1.7165775401069518, "no_speech_prob": 7.9605910286773e-05}, {"id": 270, "seek": 196400, "start": 1964.0, "end": 1975.0, "text": " And so there's not enough, I think, to write in order to make a paper of it's like a couple of lines of tips.", "tokens": [400, 370, 456, 311, 406, 1547, 11, 286, 519, 11, 281, 2464, 294, 1668, 281, 652, 257, 3035, 295, 309, 311, 411, 257, 1916, 295, 3876, 295, 6082, 13], "temperature": 0.0, "avg_logprob": -0.2004730224609375, "compression_ratio": 1.32, "no_speech_prob": 8.52191533340374e-06}, {"id": 271, "seek": 196400, "start": 1975.0, "end": 1980.0, "text": " Like this, make your functions leading access oriented.", "tokens": [1743, 341, 11, 652, 428, 6828, 5775, 2105, 21841, 13], "temperature": 0.0, "avg_logprob": -0.2004730224609375, "compression_ratio": 1.32, "no_speech_prob": 8.52191533340374e-06}, {"id": 272, "seek": 198000, "start": 1980.0, "end": 1994.0, "text": " So that then they're more flexible you can apply them, you can always make them later access oriented by using the rank operator and and keep your codes flat.", "tokens": [407, 300, 550, 436, 434, 544, 11358, 291, 393, 3079, 552, 11, 291, 393, 1009, 652, 552, 1780, 2105, 21841, 538, 1228, 264, 6181, 12973, 293, 293, 1066, 428, 14211, 4962, 13], "temperature": 0.0, "avg_logprob": -0.23297883547269382, "compression_ratio": 1.5294117647058822, "no_speech_prob": 2.6422610517329304e-06}, {"id": 273, "seek": 198000, "start": 1994.0, "end": 1998.0, "text": " And you can do a raise of a raise.", "tokens": [400, 291, 393, 360, 257, 5300, 295, 257, 5300, 13], "temperature": 0.0, "avg_logprob": -0.23297883547269382, "compression_ratio": 1.5294117647058822, "no_speech_prob": 2.6422610517329304e-06}, {"id": 274, "seek": 198000, "start": 1998.0, "end": 2005.0, "text": " No, and when the algorithms should use arrays that are not nested.", "tokens": [883, 11, 293, 562, 264, 14642, 820, 764, 41011, 300, 366, 406, 15646, 292, 13], "temperature": 0.0, "avg_logprob": -0.23297883547269382, "compression_ratio": 1.5294117647058822, "no_speech_prob": 2.6422610517329304e-06}, {"id": 275, "seek": 200500, "start": 2005.0, "end": 2014.0, "text": " We can have these arrays of race you haven't used a whole lot of them. No, but, and, but the opposite is called simple arrays or flat arrays.", "tokens": [492, 393, 362, 613, 41011, 295, 4569, 291, 2378, 380, 1143, 257, 1379, 688, 295, 552, 13, 883, 11, 457, 11, 293, 11, 457, 264, 6182, 307, 1219, 2199, 41011, 420, 4962, 41011, 13], "temperature": 0.0, "avg_logprob": -0.1681607257888978, "compression_ratio": 1.5673076923076923, "no_speech_prob": 8.93875585461501e-06}, {"id": 276, "seek": 200500, "start": 2014.0, "end": 2017.0, "text": " And they are.", "tokens": [400, 436, 366, 13], "temperature": 0.0, "avg_logprob": -0.1681607257888978, "compression_ratio": 1.5673076923076923, "no_speech_prob": 8.93875585461501e-06}, {"id": 277, "seek": 200500, "start": 2017.0, "end": 2022.0, "text": " I've heard some people call it they're more sympathetic to the hardware.", "tokens": [286, 600, 2198, 512, 561, 818, 309, 436, 434, 544, 36032, 281, 264, 8837, 13], "temperature": 0.0, "avg_logprob": -0.1681607257888978, "compression_ratio": 1.5673076923076923, "no_speech_prob": 8.93875585461501e-06}, {"id": 278, "seek": 200500, "start": 2022.0, "end": 2030.0, "text": " So, the computer is really really good at the race because it's actually if I remember correctly.", "tokens": [407, 11, 264, 3820, 307, 534, 534, 665, 412, 264, 4569, 570, 309, 311, 767, 498, 286, 1604, 8944, 13], "temperature": 0.0, "avg_logprob": -0.1681607257888978, "compression_ratio": 1.5673076923076923, "no_speech_prob": 8.93875585461501e-06}, {"id": 279, "seek": 203000, "start": 2030.0, "end": 2041.0, "text": " Okay, yeah no. So Jay doesn't exactly let you have a raise a raise you have to explicitly box them, and then the difference is very little it's almost.", "tokens": [1033, 11, 1338, 572, 13, 407, 11146, 1177, 380, 2293, 718, 291, 362, 257, 5300, 257, 5300, 291, 362, 281, 20803, 2424, 552, 11, 293, 550, 264, 2649, 307, 588, 707, 309, 311, 1920, 13], "temperature": 0.0, "avg_logprob": -0.24127569863962572, "compression_ratio": 1.688118811881188, "no_speech_prob": 1.2408917427819688e-05}, {"id": 280, "seek": 203000, "start": 2041.0, "end": 2053.0, "text": " Okay, it doesn't. It's more focused on a raise of a raise if I remember. Yeah, okay doesn't allow you multi dimensional erased only allows lists of lists of lists, and there's no other way.", "tokens": [1033, 11, 309, 1177, 380, 13, 467, 311, 544, 5178, 322, 257, 5300, 295, 257, 5300, 498, 286, 1604, 13, 865, 11, 1392, 1177, 380, 2089, 291, 4825, 18795, 38359, 787, 4045, 14511, 295, 14511, 295, 14511, 11, 293, 456, 311, 572, 661, 636, 13], "temperature": 0.0, "avg_logprob": -0.24127569863962572, "compression_ratio": 1.688118811881188, "no_speech_prob": 1.2408917427819688e-05}, {"id": 281, "seek": 205300, "start": 2053.0, "end": 2068.0, "text": " And then it has to. There are some choices that we made in design, you know, to avoid that, because it doesn't allow multi dimensional arrays. Yeah, in in pytorch, and such things we.", "tokens": [400, 550, 309, 575, 281, 13, 821, 366, 512, 7994, 300, 321, 1027, 294, 1715, 11, 291, 458, 11, 281, 5042, 300, 11, 570, 309, 1177, 380, 2089, 4825, 18795, 41011, 13, 865, 11, 294, 294, 25878, 284, 339, 11, 293, 1270, 721, 321, 13], "temperature": 0.0, "avg_logprob": -0.23694489926707987, "compression_ratio": 1.297872340425532, "no_speech_prob": 2.482339823473012e-06}, {"id": 282, "seek": 206800, "start": 2068.0, "end": 2086.0, "text": " We've talked about these issues a lot, because you really like it really kills you on the GPU. If you're, you know, doing something across anything other than the trailing access.", "tokens": [492, 600, 2825, 466, 613, 2663, 257, 688, 11, 570, 291, 534, 411, 309, 534, 14563, 291, 322, 264, 18407, 13, 759, 291, 434, 11, 291, 458, 11, 884, 746, 2108, 1340, 661, 813, 264, 944, 4883, 2105, 13], "temperature": 0.0, "avg_logprob": -0.12599356229915176, "compression_ratio": 1.366412213740458, "no_speech_prob": 1.0782047866086941e-05}, {"id": 283, "seek": 208600, "start": 2086.0, "end": 2101.0, "text": " It's not going to work, but it'll be, you know, doing a non stride. So yeah, exactly. But it's not just stride that's you have a stride, if you're a raise actually represented flat in memory, yes, which is my torch.", "tokens": [467, 311, 406, 516, 281, 589, 11, 457, 309, 603, 312, 11, 291, 458, 11, 884, 257, 2107, 1056, 482, 13, 407, 1338, 11, 2293, 13, 583, 309, 311, 406, 445, 1056, 482, 300, 311, 291, 362, 257, 1056, 482, 11, 498, 291, 434, 257, 5300, 767, 10379, 4962, 294, 4675, 11, 2086, 11, 597, 307, 452, 27822, 13], "temperature": 0.0, "avg_logprob": -0.370937740991986, "compression_ratio": 1.396103896103896, "no_speech_prob": 1.5933937902445905e-05}, {"id": 284, "seek": 210100, "start": 2101.0, "end": 2117.0, "text": " Yeah, but if you have nested arrays, it's not contiguous at all, not even a stride is that you know exactly, and that is going to kill performance. Yeah, and not only performance but actually in today's computers are so fast that the bottleneck is often", "tokens": [865, 11, 457, 498, 291, 362, 15646, 292, 41011, 11, 309, 311, 406, 660, 30525, 412, 439, 11, 406, 754, 257, 1056, 482, 307, 300, 291, 458, 2293, 11, 293, 300, 307, 516, 281, 1961, 3389, 13, 865, 11, 293, 406, 787, 3389, 457, 767, 294, 965, 311, 10807, 366, 370, 2370, 300, 264, 44641, 547, 307, 2049], "temperature": 0.0, "avg_logprob": -0.19599774543275225, "compression_ratio": 1.649402390438247, "no_speech_prob": 3.703915353980847e-05}, {"id": 285, "seek": 210100, "start": 2117.0, "end": 2128.0, "text": " memory throughput, the RAM cannot feed problems to the, to the processor fast enough the processors just sitting there waiting for the RAM to deliver more work.", "tokens": [4675, 44629, 11, 264, 14561, 2644, 3154, 2740, 281, 264, 11, 281, 264, 15321, 2370, 1547, 264, 27751, 445, 3798, 456, 3806, 337, 264, 14561, 281, 4239, 544, 589, 13], "temperature": 0.0, "avg_logprob": -0.19599774543275225, "compression_ratio": 1.649402390438247, "no_speech_prob": 3.703915353980847e-05}, {"id": 286, "seek": 212800, "start": 2128.0, "end": 2141.0, "text": " And this is actually a very current issue in the deep learning world, because as of a year or two ago a lot of papers were written that would write about the flops that their algorithm would require.", "tokens": [400, 341, 307, 767, 257, 588, 2190, 2734, 294, 264, 2452, 2539, 1002, 11, 570, 382, 295, 257, 1064, 420, 732, 2057, 257, 688, 295, 10577, 645, 3720, 300, 576, 2464, 466, 264, 932, 3370, 300, 641, 9284, 576, 3651, 13], "temperature": 0.0, "avg_logprob": -0.14005305127399723, "compression_ratio": 1.6830357142857142, "no_speech_prob": 9.222437256539706e-06}, {"id": 287, "seek": 212800, "start": 2141.0, "end": 2153.0, "text": " And nobody, nobody but a lot of people writing these papers hadn't quite noticed that there was very little correlation between flops and time, because of the memory issues now.", "tokens": [400, 5079, 11, 5079, 457, 257, 688, 295, 561, 3579, 613, 10577, 8782, 380, 1596, 5694, 300, 456, 390, 588, 707, 20009, 1296, 932, 3370, 293, 565, 11, 570, 295, 264, 4675, 2663, 586, 13], "temperature": 0.0, "avg_logprob": -0.14005305127399723, "compression_ratio": 1.6830357142857142, "no_speech_prob": 9.222437256539706e-06}, {"id": 288, "seek": 215300, "start": 2153.0, "end": 2169.0, "text": " My torch doesn't let you have tensors of tensors. So it's less of a problem, but yeah it does turn out that memory, memory is probably the more important issue in deep learning algorithms.", "tokens": [1222, 27822, 1177, 380, 718, 291, 362, 10688, 830, 295, 10688, 830, 13, 407, 309, 311, 1570, 295, 257, 1154, 11, 457, 1338, 309, 775, 1261, 484, 300, 4675, 11, 4675, 307, 1391, 264, 544, 1021, 2734, 294, 2452, 2539, 14642, 13], "temperature": 0.0, "avg_logprob": -0.12593873687412427, "compression_ratio": 1.413533834586466, "no_speech_prob": 3.07126174448058e-05}, {"id": 289, "seek": 216900, "start": 2169.0, "end": 2184.0, "text": " So, so here's, here's one more trick to use in a PL at least use Boolean masks. Hmm. As much as you can. And that is because, again, the RAM is the issue of the bottleneck.", "tokens": [407, 11, 370, 510, 311, 11, 510, 311, 472, 544, 4282, 281, 764, 294, 257, 6999, 412, 1935, 764, 23351, 28499, 11830, 13, 8239, 13, 1018, 709, 382, 291, 393, 13, 400, 300, 307, 570, 11, 797, 11, 264, 14561, 307, 264, 2734, 295, 264, 44641, 547, 13], "temperature": 0.0, "avg_logprob": -0.258617665217473, "compression_ratio": 1.3741935483870968, "no_speech_prob": 1.669697667239234e-05}, {"id": 290, "seek": 216900, "start": 2184.0, "end": 2188.0, "text": " And so, in other words, of conditionals.", "tokens": [400, 370, 11, 294, 661, 2283, 11, 295, 4188, 1124, 13], "temperature": 0.0, "avg_logprob": -0.258617665217473, "compression_ratio": 1.3741935483870968, "no_speech_prob": 1.669697667239234e-05}, {"id": 291, "seek": 218800, "start": 2188.0, "end": 2201.0, "text": " Not just in serve conditionals but instead of integers if you can, instead of using indices and things, then you should use a mask for the whole thing. The reason for that is, and store data as Boolean.", "tokens": [1726, 445, 294, 4596, 4188, 1124, 457, 2602, 295, 41674, 498, 291, 393, 11, 2602, 295, 1228, 43840, 293, 721, 11, 550, 291, 820, 764, 257, 6094, 337, 264, 1379, 551, 13, 440, 1778, 337, 300, 307, 11, 293, 3531, 1412, 382, 23351, 28499, 13], "temperature": 0.0, "avg_logprob": -0.17103738200907803, "compression_ratio": 1.4428571428571428, "no_speech_prob": 1.4735254808329046e-05}, {"id": 292, "seek": 220100, "start": 2201.0, "end": 2218.0, "text": " I just want to make sure I'm on the same wavelength so as you're saying instead of like having an array that says like get indices two, three and five, you would have a mask array of zeros in which items two, three and five have a one in that location.", "tokens": [286, 445, 528, 281, 652, 988, 286, 478, 322, 264, 912, 22907, 370, 382, 291, 434, 1566, 2602, 295, 411, 1419, 364, 10225, 300, 1619, 411, 483, 43840, 732, 11, 1045, 293, 1732, 11, 291, 576, 362, 257, 6094, 10225, 295, 35193, 294, 597, 4754, 732, 11, 1045, 293, 1732, 362, 257, 472, 294, 300, 4914, 13], "temperature": 0.0, "avg_logprob": -0.1588938509831663, "compression_ratio": 1.575, "no_speech_prob": 3.725402166310232e-06}, {"id": 293, "seek": 221800, "start": 2218.0, "end": 2239.0, "text": " So for example, you need to combine two conditions, and you know that elements, one, two, and five abide by these conditions, and you, and then by one condition you have another condition for which elements, two, four and five hold the condition.", "tokens": [407, 337, 1365, 11, 291, 643, 281, 10432, 732, 4487, 11, 293, 291, 458, 300, 4959, 11, 472, 11, 732, 11, 293, 1732, 39663, 538, 613, 4487, 11, 293, 291, 11, 293, 550, 538, 472, 4188, 291, 362, 1071, 4188, 337, 597, 4959, 11, 732, 11, 1451, 293, 1732, 1797, 264, 4188, 13], "temperature": 0.0, "avg_logprob": -0.20754596643280565, "compression_ratio": 1.7956204379562044, "no_speech_prob": 4.68280995846726e-05}, {"id": 294, "seek": 223900, "start": 2239.0, "end": 2248.0, "text": " So you could do the intersection of the two sets. I'm out of time to get the indices. Well, not much, but they're just numbers right there.", "tokens": [407, 291, 727, 360, 264, 15236, 295, 264, 732, 6352, 13, 286, 478, 484, 295, 565, 281, 483, 264, 43840, 13, 1042, 11, 406, 709, 11, 457, 436, 434, 445, 3547, 558, 456, 13], "temperature": 0.0, "avg_logprob": -0.2747650146484375, "compression_ratio": 1.7415254237288136, "no_speech_prob": 1.5205051568045747e-05}, {"id": 295, "seek": 223900, "start": 2248.0, "end": 2264.0, "text": " So you do the intersection of them as sets. And then those are the ones that where the condition holds for both and then you could index things. However, if you had them as Boolean masks instead so it would be whatever 0101 something like that, and one of them and so on.", "tokens": [407, 291, 360, 264, 15236, 295, 552, 382, 6352, 13, 400, 550, 729, 366, 264, 2306, 300, 689, 264, 4188, 9190, 337, 1293, 293, 550, 291, 727, 8186, 721, 13, 2908, 11, 498, 291, 632, 552, 382, 23351, 28499, 11830, 2602, 370, 309, 576, 312, 2035, 1958, 47520, 746, 411, 300, 11, 293, 472, 295, 552, 293, 370, 322, 13], "temperature": 0.0, "avg_logprob": -0.2747650146484375, "compression_ratio": 1.7415254237288136, "no_speech_prob": 1.5205051568045747e-05}, {"id": 296, "seek": 226400, "start": 2264.0, "end": 2269.0, "text": " So you can just do an and the Boolean and, and that gives you a new mask.", "tokens": [407, 291, 393, 445, 360, 364, 293, 264, 23351, 28499, 293, 11, 293, 300, 2709, 291, 257, 777, 6094, 13], "temperature": 0.0, "avg_logprob": -0.27640597884719437, "compression_ratio": 1.4974358974358974, "no_speech_prob": 4.68332800664939e-05}, {"id": 297, "seek": 226400, "start": 2269.0, "end": 2278.0, "text": " Doing a Boolean and operation on binary data in the processor is enormously much faster than doing a set intersection. That's what I meant about multiply.", "tokens": [18496, 257, 23351, 28499, 293, 6916, 322, 17434, 1412, 294, 264, 15321, 307, 39669, 709, 4663, 813, 884, 257, 992, 15236, 13, 663, 311, 437, 286, 4140, 466, 12972, 13], "temperature": 0.0, "avg_logprob": -0.27640597884719437, "compression_ratio": 1.4974358974358974, "no_speech_prob": 4.68332800664939e-05}, {"id": 298, "seek": 226400, "start": 2278.0, "end": 2282.0, "text": " So you could do okay yes that kind of much right. Yes, exactly.", "tokens": [407, 291, 727, 360, 1392, 2086, 300, 733, 295, 709, 558, 13, 1079, 11, 2293, 13], "temperature": 0.0, "avg_logprob": -0.27640597884719437, "compression_ratio": 1.4974358974358974, "no_speech_prob": 4.68332800664939e-05}, {"id": 299, "seek": 228200, "start": 2282.0, "end": 2294.0, "text": " And there's another benefit of this is the API will aggressively squeeze arrays and Boolean arrays are stored as one bit Boolean.", "tokens": [400, 456, 311, 1071, 5121, 295, 341, 307, 264, 9362, 486, 32024, 13578, 41011, 293, 23351, 28499, 41011, 366, 12187, 382, 472, 857, 23351, 28499, 13], "temperature": 0.0, "avg_logprob": -0.1372459562201249, "compression_ratio": 1.5424528301886793, "no_speech_prob": 1.3629746717924718e-05}, {"id": 300, "seek": 228200, "start": 2294.0, "end": 2307.0, "text": " That means that you can store eight elements in a single byte. Wait, how does that work because it's not like typed per se so if it would just notice that the highest is one and the lowest is zero.", "tokens": [663, 1355, 300, 291, 393, 3531, 3180, 4959, 294, 257, 2167, 40846, 13, 3802, 11, 577, 775, 300, 589, 570, 309, 311, 406, 411, 33941, 680, 369, 370, 498, 309, 576, 445, 3449, 300, 264, 6343, 307, 472, 293, 264, 12437, 307, 4018, 13], "temperature": 0.0, "avg_logprob": -0.1372459562201249, "compression_ratio": 1.5424528301886793, "no_speech_prob": 1.3629746717924718e-05}, {"id": 301, "seek": 230700, "start": 2307.0, "end": 2314.0, "text": " And if I then try to store a two and it will have to reallocate the whole thing or something. Yes, yes.", "tokens": [400, 498, 286, 550, 853, 281, 3531, 257, 732, 293, 309, 486, 362, 281, 319, 336, 42869, 264, 1379, 551, 420, 746, 13, 1079, 11, 2086, 13], "temperature": 0.0, "avg_logprob": -0.14199009174253882, "compression_ratio": 1.6237113402061856, "no_speech_prob": 2.391091220488306e-05}, {"id": 302, "seek": 230700, "start": 2314.0, "end": 2323.0, "text": " And then but that means since the process is waiting for the data, and we're able to switch to a to an eighth of the data size.", "tokens": [400, 550, 457, 300, 1355, 1670, 264, 1399, 307, 3806, 337, 264, 1412, 11, 293, 321, 434, 1075, 281, 3679, 281, 257, 281, 364, 19495, 295, 264, 1412, 2744, 13], "temperature": 0.0, "avg_logprob": -0.14199009174253882, "compression_ratio": 1.6237113402061856, "no_speech_prob": 2.391091220488306e-05}, {"id": 303, "seek": 230700, "start": 2323.0, "end": 2329.0, "text": " That means that the transfer time which is important time is going to be an eighth.", "tokens": [663, 1355, 300, 264, 5003, 565, 597, 307, 1021, 565, 307, 516, 281, 312, 364, 19495, 13], "temperature": 0.0, "avg_logprob": -0.14199009174253882, "compression_ratio": 1.6237113402061856, "no_speech_prob": 2.391091220488306e-05}, {"id": 304, "seek": 232900, "start": 2329.0, "end": 2338.0, "text": " And that gives you enormous speed ups. And so we have all these very clever algorithms built into the interpreter and algorithms that are difficult to develop.", "tokens": [400, 300, 2709, 291, 11322, 3073, 15497, 13, 400, 370, 321, 362, 439, 613, 588, 13494, 14642, 3094, 666, 264, 34132, 293, 14642, 300, 366, 2252, 281, 1499, 13], "temperature": 0.0, "avg_logprob": -0.15949017393822765, "compression_ratio": 1.5, "no_speech_prob": 4.3271506001474336e-05}, {"id": 305, "seek": 232900, "start": 2338.0, "end": 2343.0, "text": " It can take decades to write the C codes for that a secret for that.", "tokens": [467, 393, 747, 7878, 281, 2464, 264, 383, 14211, 337, 300, 257, 4054, 337, 300, 13], "temperature": 0.0, "avg_logprob": -0.15949017393822765, "compression_ratio": 1.5, "no_speech_prob": 4.3271506001474336e-05}, {"id": 306, "seek": 234300, "start": 2343.0, "end": 2362.0, "text": " And they can give you a speed up like that. So basically by using a PL that is optimized like this. You are, you are employing see clever see programmers that have been working for you for years to fine tune your program way before you even started writing", "tokens": [400, 436, 393, 976, 291, 257, 3073, 493, 411, 300, 13, 407, 1936, 538, 1228, 257, 6999, 300, 307, 26941, 411, 341, 13, 509, 366, 11, 291, 366, 3188, 278, 536, 13494, 536, 41504, 300, 362, 668, 1364, 337, 291, 337, 924, 281, 2489, 10864, 428, 1461, 636, 949, 291, 754, 1409, 3579], "temperature": 0.0, "avg_logprob": -0.12200338609756962, "compression_ratio": 1.5340909090909092, "no_speech_prob": 9.967955520551186e-06}, {"id": 307, "seek": 234300, "start": 2362.0, "end": 2366.0, "text": " your program.", "tokens": [428, 1461, 13], "temperature": 0.0, "avg_logprob": -0.12200338609756962, "compression_ratio": 1.5340909090909092, "no_speech_prob": 9.967955520551186e-06}, {"id": 308, "seek": 236600, "start": 2366.0, "end": 2378.0, "text": " So these are, I can't don't even think I can think of more of more things that have good principles, then, then that.", "tokens": [407, 613, 366, 11, 286, 393, 380, 500, 380, 754, 519, 286, 393, 519, 295, 544, 295, 544, 721, 300, 362, 665, 9156, 11, 550, 11, 550, 300, 13], "temperature": 0.0, "avg_logprob": -0.2358380614734087, "compression_ratio": 1.5034013605442176, "no_speech_prob": 9.364830475533381e-06}, {"id": 309, "seek": 236600, "start": 2378.0, "end": 2385.0, "text": " Okay, that's very useful and masks keep keep your race and flat.", "tokens": [1033, 11, 300, 311, 588, 4420, 293, 11830, 1066, 1066, 428, 4569, 293, 4962, 13], "temperature": 0.0, "avg_logprob": -0.2358380614734087, "compression_ratio": 1.5034013605442176, "no_speech_prob": 9.364830475533381e-06}, {"id": 310, "seek": 236600, "start": 2385.0, "end": 2391.0, "text": " And was the first thing I said before.", "tokens": [400, 390, 264, 700, 551, 286, 848, 949, 13], "temperature": 0.0, "avg_logprob": -0.2358380614734087, "compression_ratio": 1.5034013605442176, "no_speech_prob": 9.364830475533381e-06}, {"id": 311, "seek": 239100, "start": 2391.0, "end": 2400.0, "text": " The first and first access, leading access and things. And so, with. So for.", "tokens": [440, 700, 293, 700, 2105, 11, 5775, 2105, 293, 721, 13, 400, 370, 11, 365, 13, 407, 337, 13], "temperature": 0.0, "avg_logprob": -0.322188194761885, "compression_ratio": 1.3503649635036497, "no_speech_prob": 4.9048692744690925e-05}, {"id": 312, "seek": 239100, "start": 2400.0, "end": 2411.0, "text": " I mean the general programming principles you don't do global state changes and so it was a really bad idea.", "tokens": [286, 914, 264, 2674, 9410, 9156, 291, 500, 380, 360, 4338, 1785, 2962, 293, 370, 309, 390, 257, 534, 1578, 1558, 13], "temperature": 0.0, "avg_logprob": -0.322188194761885, "compression_ratio": 1.3503649635036497, "no_speech_prob": 4.9048692744690925e-05}, {"id": 313, "seek": 241100, "start": 2411.0, "end": 2428.0, "text": " And one thing we. Yes, I think I think we're pretty familiar as a community with more general software engineering principles one thing that surprised me when we were learning about each was that it didn't operate over kind of major cells but instead it operated", "tokens": [400, 472, 551, 321, 13, 1079, 11, 286, 519, 286, 519, 321, 434, 1238, 4963, 382, 257, 1768, 365, 544, 2674, 4722, 7043, 9156, 472, 551, 300, 6100, 385, 562, 321, 645, 2539, 466, 1184, 390, 300, 309, 994, 380, 9651, 670, 733, 295, 2563, 5438, 457, 2602, 309, 20826], "temperature": 0.0, "avg_logprob": -0.18612199359469944, "compression_ratio": 1.4886363636363635, "no_speech_prob": 1.9217834051232785e-05}, {"id": 314, "seek": 242800, "start": 2428.0, "end": 2442.0, "text": " over sub arrays. And I guess that that what now that we know about rank. We, we can just use rank for anything that we want to go over major cells which means maybe each is not so useful anymore.", "tokens": [670, 1422, 41011, 13, 400, 286, 2041, 300, 300, 437, 586, 300, 321, 458, 466, 6181, 13, 492, 11, 321, 393, 445, 764, 6181, 337, 1340, 300, 321, 528, 281, 352, 670, 2563, 5438, 597, 1355, 1310, 1184, 307, 406, 370, 4420, 3602, 13], "temperature": 0.0, "avg_logprob": -0.13967443647838773, "compression_ratio": 1.5970149253731343, "no_speech_prob": 3.941022077924572e-05}, {"id": 315, "seek": 242800, "start": 2442.0, "end": 2445.0, "text": " Each is actually really really simple.", "tokens": [6947, 307, 767, 534, 534, 2199, 13], "temperature": 0.0, "avg_logprob": -0.13967443647838773, "compression_ratio": 1.5970149253731343, "no_speech_prob": 3.941022077924572e-05}, {"id": 316, "seek": 242800, "start": 2445.0, "end": 2452.0, "text": " I can I can show you if you want. I can explain what is happening with each.", "tokens": [286, 393, 286, 393, 855, 291, 498, 291, 528, 13, 286, 393, 2903, 437, 307, 2737, 365, 1184, 13], "temperature": 0.0, "avg_logprob": -0.13967443647838773, "compression_ratio": 1.5970149253731343, "no_speech_prob": 3.941022077924572e-05}, {"id": 317, "seek": 242800, "start": 2452.0, "end": 2455.0, "text": " So, okay.", "tokens": [407, 11, 1392, 13], "temperature": 0.0, "avg_logprob": -0.13967443647838773, "compression_ratio": 1.5970149253731343, "no_speech_prob": 3.941022077924572e-05}, {"id": 318, "seek": 245500, "start": 2455.0, "end": 2465.0, "text": " And like I said, just in general, but like each each is a thing that you would use and, you know, is it not occasionally, but it depends what it is I'm doing.", "tokens": [400, 411, 286, 848, 11, 445, 294, 2674, 11, 457, 411, 1184, 1184, 307, 257, 551, 300, 291, 576, 764, 293, 11, 291, 458, 11, 307, 309, 406, 16895, 11, 457, 309, 5946, 437, 309, 307, 286, 478, 884, 13], "temperature": 0.0, "avg_logprob": -0.21766197681427002, "compression_ratio": 1.5217391304347827, "no_speech_prob": 5.681727088813204e-06}, {"id": 319, "seek": 245500, "start": 2465.0, "end": 2476.0, "text": " I'll try to avoid it as much as possible and among API programmers, because it's an explicit loop. And that means the interpreter has no choice but to loop.", "tokens": [286, 603, 853, 281, 5042, 309, 382, 709, 382, 1944, 293, 3654, 9362, 41504, 11, 570, 309, 311, 364, 13691, 6367, 13, 400, 300, 1355, 264, 34132, 575, 572, 3922, 457, 281, 6367, 13], "temperature": 0.0, "avg_logprob": -0.21766197681427002, "compression_ratio": 1.5217391304347827, "no_speech_prob": 5.681727088813204e-06}, {"id": 320, "seek": 247600, "start": 2476.0, "end": 2485.0, "text": " And we don't want loops we want to do a real operations because then the processors now have array instructions.", "tokens": [400, 321, 500, 380, 528, 16121, 321, 528, 281, 360, 257, 957, 7705, 570, 550, 264, 27751, 586, 362, 10225, 9415, 13], "temperature": 0.0, "avg_logprob": -0.28923789769002833, "compression_ratio": 1.6414141414141414, "no_speech_prob": 2.5056471713469364e-05}, {"id": 321, "seek": 247600, "start": 2485.0, "end": 2499.0, "text": " In fact, not expand rank operator doesn't create explicit loops rank operator conceptually loops, but internally if it can avoid it, they will not loop so it knows about a lot of stuff if it can exactly, exactly.", "tokens": [682, 1186, 11, 406, 5268, 6181, 12973, 1177, 380, 1884, 13691, 16121, 6181, 12973, 3410, 671, 16121, 11, 457, 19501, 498, 309, 393, 5042, 309, 11, 436, 486, 406, 6367, 370, 309, 3255, 466, 257, 688, 295, 1507, 498, 309, 393, 2293, 11, 2293, 13], "temperature": 0.0, "avg_logprob": -0.28923789769002833, "compression_ratio": 1.6414141414141414, "no_speech_prob": 2.5056471713469364e-05}, {"id": 322, "seek": 249900, "start": 2499.0, "end": 2514.0, "text": " So that would be good to have a little section in the notebook there, Jeremy where we might like say, this is an explicit loop and this is the less explicit way to do it.", "tokens": [407, 300, 576, 312, 665, 281, 362, 257, 707, 3541, 294, 264, 21060, 456, 11, 17809, 689, 321, 1062, 411, 584, 11, 341, 307, 364, 13691, 6367, 293, 341, 307, 264, 1570, 13691, 636, 281, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.1438822973342169, "compression_ratio": 1.3821138211382114, "no_speech_prob": 4.905417881673202e-05}, {"id": 323, "seek": 251400, "start": 2514.0, "end": 2531.0, "text": " Well yeah, I mean, it's a different notebook I think then like, you know, we've got to think about how to present all this but I think you know there's a note that the theory of this first notebook or set of notebooks is literally, you know, a dictionary of APL glyphs in an order where you never get a definition", "tokens": [1042, 1338, 11, 286, 914, 11, 309, 311, 257, 819, 21060, 286, 519, 550, 411, 11, 291, 458, 11, 321, 600, 658, 281, 519, 466, 577, 281, 1974, 439, 341, 457, 286, 519, 291, 458, 456, 311, 257, 3637, 300, 264, 5261, 295, 341, 700, 21060, 420, 992, 295, 43782, 307, 3736, 11, 291, 458, 11, 257, 25890, 295, 5372, 43, 22633, 950, 82, 294, 364, 1668, 689, 291, 1128, 483, 257, 7123], "temperature": 0.0, "avg_logprob": -0.20584136561343544, "compression_ratio": 1.7859922178988328, "no_speech_prob": 3.643770469352603e-05}, {"id": 324, "seek": 251400, "start": 2531.0, "end": 2538.0, "text": " in terms of something you haven't learned yet, you know, and then there's something later about like okay what what do you do with it.", "tokens": [294, 2115, 295, 746, 291, 2378, 380, 3264, 1939, 11, 291, 458, 11, 293, 550, 456, 311, 746, 1780, 466, 411, 1392, 437, 437, 360, 291, 360, 365, 309, 13], "temperature": 0.0, "avg_logprob": -0.20584136561343544, "compression_ratio": 1.7859922178988328, "no_speech_prob": 3.643770469352603e-05}, {"id": 325, "seek": 251400, "start": 2538.0, "end": 2539.0, "text": " Cool yeah.", "tokens": [8561, 1338, 13], "temperature": 0.0, "avg_logprob": -0.20584136561343544, "compression_ratio": 1.7859922178988328, "no_speech_prob": 3.643770469352603e-05}, {"id": 326, "seek": 253900, "start": 2539.0, "end": 2550.0, "text": " So, so, right so if you use the rank operator to loop then you might keep the performance because it doesn't actually loop, it uses fancy instructions.", "tokens": [407, 11, 370, 11, 558, 370, 498, 291, 764, 264, 6181, 12973, 281, 6367, 550, 291, 1062, 1066, 264, 3389, 570, 309, 1177, 380, 767, 6367, 11, 309, 4960, 10247, 9415, 13], "temperature": 0.0, "avg_logprob": -0.12258780984317555, "compression_ratio": 1.7048458149779735, "no_speech_prob": 1.543821781524457e-05}, {"id": 327, "seek": 253900, "start": 2550.0, "end": 2565.0, "text": " And for that instead each doesn't have much of a choice, although occasionally the interpreter is clever enough, you judge you use plus each, you will not actually loop because it knows how to circuit that and then just do it directly.", "tokens": [400, 337, 300, 2602, 1184, 1177, 380, 362, 709, 295, 257, 3922, 11, 4878, 16895, 264, 34132, 307, 13494, 1547, 11, 291, 6995, 291, 764, 1804, 1184, 11, 291, 486, 406, 767, 6367, 570, 309, 3255, 577, 281, 9048, 300, 293, 550, 445, 360, 309, 3838, 13], "temperature": 0.0, "avg_logprob": -0.12258780984317555, "compression_ratio": 1.7048458149779735, "no_speech_prob": 1.543821781524457e-05}, {"id": 328, "seek": 256500, "start": 2565.0, "end": 2574.0, "text": " But what's happening with with each is, it's just think of the matrix and want to loop over each row.", "tokens": [583, 437, 311, 2737, 365, 365, 1184, 307, 11, 309, 311, 445, 519, 295, 264, 8141, 293, 528, 281, 6367, 670, 1184, 5386, 13], "temperature": 0.0, "avg_logprob": -0.2254907211454788, "compression_ratio": 1.6540084388185654, "no_speech_prob": 1.0613280210236553e-05}, {"id": 329, "seek": 256500, "start": 2574.0, "end": 2580.0, "text": " But really what each is, is very very simple so if you have F each.", "tokens": [583, 534, 437, 1184, 307, 11, 307, 588, 588, 2199, 370, 498, 291, 362, 479, 1184, 13], "temperature": 0.0, "avg_logprob": -0.2254907211454788, "compression_ratio": 1.6540084388185654, "no_speech_prob": 1.0613280210236553e-05}, {"id": 330, "seek": 256500, "start": 2580.0, "end": 2593.0, "text": " That's the same thing as another year now that you've learned enough of these compositional operators, you learn the top. It's the in close, which I don't know we haven't done in close but you can do it quickly what it is.", "tokens": [663, 311, 264, 912, 551, 382, 1071, 1064, 586, 300, 291, 600, 3264, 1547, 295, 613, 10199, 2628, 19077, 11, 291, 1466, 264, 1192, 13, 467, 311, 264, 294, 1998, 11, 597, 286, 500, 380, 458, 321, 2378, 380, 1096, 294, 1998, 457, 291, 393, 360, 309, 2661, 437, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.2254907211454788, "compression_ratio": 1.6540084388185654, "no_speech_prob": 1.0613280210236553e-05}, {"id": 331, "seek": 259300, "start": 2593.0, "end": 2602.0, "text": " It's basically just wrapping an array up as a single element as a scalar. It's adding a leading act. Oh, it's not adding a leading act not adding an axis creating a scale.", "tokens": [467, 311, 1936, 445, 21993, 364, 10225, 493, 382, 257, 2167, 4478, 382, 257, 39684, 13, 467, 311, 5127, 257, 5775, 605, 13, 876, 11, 309, 311, 406, 5127, 257, 5775, 605, 406, 5127, 364, 10298, 4084, 257, 4373, 13], "temperature": 0.0, "avg_logprob": -0.23476977731989718, "compression_ratio": 1.788659793814433, "no_speech_prob": 3.023847057193052e-05}, {"id": 332, "seek": 259300, "start": 2602.0, "end": 2613.0, "text": " It's creating a pointer to it, you can think of it like that. What type is that is that some new type we haven't learned yet like it's literally an enclosed, an enclosed item.", "tokens": [467, 311, 4084, 257, 23918, 281, 309, 11, 291, 393, 519, 295, 309, 411, 300, 13, 708, 2010, 307, 300, 307, 300, 512, 777, 2010, 321, 2378, 380, 3264, 1939, 411, 309, 311, 3736, 364, 42089, 11, 364, 42089, 3174, 13], "temperature": 0.0, "avg_logprob": -0.23476977731989718, "compression_ratio": 1.788659793814433, "no_speech_prob": 3.023847057193052e-05}, {"id": 333, "seek": 261300, "start": 2613.0, "end": 2623.0, "text": " Like there aren't really types in a well it's not numeric scalar it's not a, and it's not a pointer type.", "tokens": [1743, 456, 3212, 380, 534, 3467, 294, 257, 731, 309, 311, 406, 7866, 299, 39684, 309, 311, 406, 257, 11, 293, 309, 311, 406, 257, 23918, 2010, 13], "temperature": 0.0, "avg_logprob": -0.28807278587704616, "compression_ratio": 1.6751054852320675, "no_speech_prob": 8.799534043646418e-06}, {"id": 334, "seek": 261300, "start": 2623.0, "end": 2637.0, "text": " It doesn't. It's not a reference. No. Okay, because a PL is passed by value. And so it will do, it will not keep connections between things that you assign across, but internally it's actually a pointer and that's pretty much how you can think of it, but you need an", "tokens": [467, 1177, 380, 13, 467, 311, 406, 257, 6408, 13, 883, 13, 1033, 11, 570, 257, 6999, 307, 4678, 538, 2158, 13, 400, 370, 309, 486, 360, 11, 309, 486, 406, 1066, 9271, 1296, 721, 300, 291, 6269, 2108, 11, 457, 19501, 309, 311, 767, 257, 23918, 293, 300, 311, 1238, 709, 577, 291, 393, 519, 295, 309, 11, 457, 291, 643, 364], "temperature": 0.0, "avg_logprob": -0.28807278587704616, "compression_ratio": 1.6751054852320675, "no_speech_prob": 8.799534043646418e-06}, {"id": 335, "seek": 261300, "start": 2637.0, "end": 2640.0, "text": " enclosure it's a scalar.", "tokens": [34093, 309, 311, 257, 39684, 13], "temperature": 0.0, "avg_logprob": -0.28807278587704616, "compression_ratio": 1.6751054852320675, "no_speech_prob": 8.799534043646418e-06}, {"id": 336, "seek": 264000, "start": 2640.0, "end": 2659.0, "text": " And so what it is, is in close at top F over this close and disclose exactly the opposite, which means follow the pointer, go, go get one element and open it up.", "tokens": [400, 370, 437, 309, 307, 11, 307, 294, 1998, 412, 1192, 479, 670, 341, 1998, 293, 36146, 2293, 264, 6182, 11, 597, 1355, 1524, 264, 23918, 11, 352, 11, 352, 483, 472, 4478, 293, 1269, 309, 493, 13], "temperature": 0.0, "avg_logprob": -0.3207248960222517, "compression_ratio": 1.3529411764705883, "no_speech_prob": 0.0001532421010779217}, {"id": 337, "seek": 265900, "start": 2659.0, "end": 2674.0, "text": " So, I'm just trying to remember so the chart dioresis pre process both arguments. Yes, but if there's only one argument remember then it's the same thing as on the top.", "tokens": [407, 11, 286, 478, 445, 1382, 281, 1604, 370, 264, 6927, 1026, 2706, 271, 659, 1399, 1293, 12869, 13, 1079, 11, 457, 498, 456, 311, 787, 472, 6770, 1604, 550, 309, 311, 264, 912, 551, 382, 322, 264, 1192, 13], "temperature": 0.0, "avg_logprob": -0.17213862704247543, "compression_ratio": 1.7720930232558139, "no_speech_prob": 0.00011762220674427226}, {"id": 338, "seek": 265900, "start": 2674.0, "end": 2686.0, "text": " I do remember. Yeah. So that's that's why it's useful to have it to that so this means actually pre process all arguments, whether there's one or two, we just pre process them with this close so we open up a box.", "tokens": [286, 360, 1604, 13, 865, 13, 407, 300, 311, 300, 311, 983, 309, 311, 4420, 281, 362, 309, 281, 300, 370, 341, 1355, 767, 659, 1399, 439, 12869, 11, 1968, 456, 311, 472, 420, 732, 11, 321, 445, 659, 1399, 552, 365, 341, 1998, 370, 321, 1269, 493, 257, 2424, 13], "temperature": 0.0, "avg_logprob": -0.17213862704247543, "compression_ratio": 1.7720930232558139, "no_speech_prob": 0.00011762220674427226}, {"id": 339, "seek": 268600, "start": 2686.0, "end": 2689.0, "text": " I'm going to check it out. You've got.", "tokens": [286, 478, 516, 281, 1520, 309, 484, 13, 509, 600, 658, 13], "temperature": 0.0, "avg_logprob": -0.18168044973302772, "compression_ratio": 1.9261083743842364, "no_speech_prob": 6.813748768763617e-05}, {"id": 340, "seek": 268600, "start": 2689.0, "end": 2695.0, "text": " Oh, no, you don't have a fork these operators not functions. Okay, so this is.", "tokens": [876, 11, 572, 11, 291, 500, 380, 362, 257, 17716, 613, 19077, 406, 6828, 13, 1033, 11, 370, 341, 307, 13], "temperature": 0.0, "avg_logprob": -0.18168044973302772, "compression_ratio": 1.9261083743842364, "no_speech_prob": 6.813748768763617e-05}, {"id": 341, "seek": 268600, "start": 2695.0, "end": 2706.0, "text": " So here you've got function operator function operator function operator array. Okay, so this whole thing is monadic because there's a thing only on the right.", "tokens": [407, 510, 291, 600, 658, 2445, 12973, 2445, 12973, 2445, 12973, 10225, 13, 1033, 11, 370, 341, 1379, 551, 307, 1108, 43341, 570, 456, 311, 257, 551, 787, 322, 264, 558, 13], "temperature": 0.0, "avg_logprob": -0.18168044973302772, "compression_ratio": 1.9261083743842364, "no_speech_prob": 6.813748768763617e-05}, {"id": 342, "seek": 268600, "start": 2706.0, "end": 2709.0, "text": " And then, wait, wait, what, what are you saying.", "tokens": [400, 550, 11, 1699, 11, 1699, 11, 437, 11, 437, 366, 291, 1566, 13], "temperature": 0.0, "avg_logprob": -0.18168044973302772, "compression_ratio": 1.9261083743842364, "no_speech_prob": 6.813748768763617e-05}, {"id": 343, "seek": 268600, "start": 2709.0, "end": 2711.0, "text": " This is not.", "tokens": [639, 307, 406, 13], "temperature": 0.0, "avg_logprob": -0.18168044973302772, "compression_ratio": 1.9261083743842364, "no_speech_prob": 6.813748768763617e-05}, {"id": 344, "seek": 268600, "start": 2711.0, "end": 2714.0, "text": " This is not this whole thing is one giant function.", "tokens": [639, 307, 406, 341, 1379, 551, 307, 472, 7410, 2445, 13], "temperature": 0.0, "avg_logprob": -0.18168044973302772, "compression_ratio": 1.9261083743842364, "no_speech_prob": 6.813748768763617e-05}, {"id": 345, "seek": 271400, "start": 2714.0, "end": 2719.0, "text": " This function is a bit of a let me call it it's both monadic and the attic.", "tokens": [639, 2445, 307, 257, 857, 295, 257, 718, 385, 818, 309, 309, 311, 1293, 1108, 43341, 293, 264, 40766, 13], "temperature": 0.0, "avg_logprob": -0.3484475395896218, "compression_ratio": 1.604878048780488, "no_speech_prob": 1.520593013992766e-05}, {"id": 346, "seek": 271400, "start": 2719.0, "end": 2734.0, "text": " Oh, how is this a function I thought the zero on the right hands. Oh no the side of the operator. Yeah, yeah so this says, so what it's saying is on every scalar element and loop as much as necessary to address scalar elements.", "tokens": [876, 11, 577, 307, 341, 257, 2445, 286, 1194, 264, 4018, 322, 264, 558, 2377, 13, 876, 572, 264, 1252, 295, 264, 12973, 13, 865, 11, 1338, 370, 341, 1619, 11, 370, 437, 309, 311, 1566, 307, 322, 633, 39684, 4478, 293, 6367, 382, 709, 382, 4818, 281, 2985, 39684, 4959, 13], "temperature": 0.0, "avg_logprob": -0.3484475395896218, "compression_ratio": 1.604878048780488, "no_speech_prob": 1.520593013992766e-05}, {"id": 347, "seek": 271400, "start": 2734.0, "end": 2736.0, "text": " Okay, this is fine. Both.", "tokens": [1033, 11, 341, 307, 2489, 13, 6767, 13], "temperature": 0.0, "avg_logprob": -0.3484475395896218, "compression_ratio": 1.604878048780488, "no_speech_prob": 1.520593013992766e-05}, {"id": 348, "seek": 273600, "start": 2736.0, "end": 2749.0, "text": " Both sides, not mine. This is rank. Oh, yes, of course that's right. So this says on scalars. So we already we already dug. The first thing we do is dig all the way down to the scalars.", "tokens": [6767, 4881, 11, 406, 3892, 13, 639, 307, 6181, 13, 876, 11, 2086, 11, 295, 1164, 300, 311, 558, 13, 407, 341, 1619, 322, 15664, 685, 13, 407, 321, 1217, 321, 1217, 22954, 13, 440, 700, 551, 321, 360, 307, 2528, 439, 264, 636, 760, 281, 264, 15664, 685, 13], "temperature": 0.0, "avg_logprob": -0.20285357107030283, "compression_ratio": 1.6930232558139535, "no_speech_prob": 2.0142471839790232e-05}, {"id": 349, "seek": 273600, "start": 2749.0, "end": 2755.0, "text": " That means there's nothing you can do to each to make it apply to rose.", "tokens": [663, 1355, 456, 311, 1825, 291, 393, 360, 281, 1184, 281, 652, 309, 3079, 281, 10895, 13], "temperature": 0.0, "avg_logprob": -0.20285357107030283, "compression_ratio": 1.6930232558139535, "no_speech_prob": 2.0142471839790232e-05}, {"id": 350, "seek": 273600, "start": 2755.0, "end": 2763.0, "text": " It's already impossible it's like, it's like equal or plus it's already down at the scale of the scale is.", "tokens": [467, 311, 1217, 6243, 309, 311, 411, 11, 309, 311, 411, 2681, 420, 1804, 309, 311, 1217, 760, 412, 264, 4373, 295, 264, 4373, 307, 13], "temperature": 0.0, "avg_logprob": -0.20285357107030283, "compression_ratio": 1.6930232558139535, "no_speech_prob": 2.0142471839790232e-05}, {"id": 351, "seek": 276300, "start": 2763.0, "end": 2766.0, "text": " Yeah, sorry. So it never says the right.", "tokens": [865, 11, 2597, 13, 407, 309, 1128, 1619, 264, 558, 13], "temperature": 0.0, "avg_logprob": -0.22147009922907904, "compression_ratio": 1.7348066298342542, "no_speech_prob": 5.062252239440568e-05}, {"id": 352, "seek": 276300, "start": 2766.0, "end": 2782.0, "text": " Yeah, it never sees a road never sees any F will never see anything that comes from more than a single element. So on the single elements. Yeah. And remember this zero actually means 000 because it means is zero, it's rank zero monadically, it's rank zero and left and this", "tokens": [865, 11, 309, 1128, 8194, 257, 3060, 1128, 8194, 604, 479, 486, 1128, 536, 1340, 300, 1487, 490, 544, 813, 257, 2167, 4478, 13, 407, 322, 264, 2167, 4959, 13, 865, 13, 400, 1604, 341, 4018, 767, 1355, 13711, 570, 309, 1355, 307, 4018, 11, 309, 311, 6181, 4018, 1108, 345, 984, 11, 309, 311, 6181, 4018, 293, 1411, 293, 341], "temperature": 0.0, "avg_logprob": -0.22147009922907904, "compression_ratio": 1.7348066298342542, "no_speech_prob": 5.062252239440568e-05}, {"id": 353, "seek": 278200, "start": 2782.0, "end": 2795.0, "text": " rank zero right, so it's always rank zero. Then, on those elements, open them up, if they are nested. If they're not nested like just a simple array then nothing happens.", "tokens": [6181, 4018, 558, 11, 370, 309, 311, 1009, 6181, 4018, 13, 1396, 11, 322, 729, 4959, 11, 1269, 552, 493, 11, 498, 436, 366, 15646, 292, 13, 759, 436, 434, 406, 15646, 292, 411, 445, 257, 2199, 10225, 550, 1825, 2314, 13], "temperature": 0.0, "avg_logprob": -0.1532155500875937, "compression_ratio": 1.4712041884816753, "no_speech_prob": 6.238941750780214e-06}, {"id": 354, "seek": 278200, "start": 2795.0, "end": 2803.0, "text": " Apply F, and package the results back into the box. Oh yeah because the.", "tokens": [25264, 479, 11, 293, 7372, 264, 3542, 646, 666, 264, 2424, 13, 876, 1338, 570, 264, 13], "temperature": 0.0, "avg_logprob": -0.1532155500875937, "compression_ratio": 1.4712041884816753, "no_speech_prob": 6.238941750780214e-06}, {"id": 355, "seek": 278200, "start": 2803.0, "end": 2807.0, "text": " When you've got multiple composition.", "tokens": [1133, 291, 600, 658, 3866, 12686, 13], "temperature": 0.0, "avg_logprob": -0.1532155500875937, "compression_ratio": 1.4712041884816753, "no_speech_prob": 6.238941750780214e-06}, {"id": 356, "seek": 280700, "start": 2807.0, "end": 2820.0, "text": " Because, right to left, this is what you're saying. Yeah, you could you get the binding goes like that so we saying, so this, this is F post processed by enclosing the result.", "tokens": [1436, 11, 558, 281, 1411, 11, 341, 307, 437, 291, 434, 1566, 13, 865, 11, 291, 727, 291, 483, 264, 17359, 1709, 411, 300, 370, 321, 1566, 11, 370, 341, 11, 341, 307, 479, 2183, 18846, 538, 20987, 6110, 264, 1874, 13], "temperature": 0.0, "avg_logprob": -0.27189766733269943, "compression_ratio": 1.553191489361702, "no_speech_prob": 4.1321003664052114e-05}, {"id": 357, "seek": 280700, "start": 2820.0, "end": 2825.0, "text": " And pre processed by disclosing the result.", "tokens": [400, 659, 18846, 538, 17092, 6110, 264, 1874, 13], "temperature": 0.0, "avg_logprob": -0.27189766733269943, "compression_ratio": 1.553191489361702, "no_speech_prob": 4.1321003664052114e-05}, {"id": 358, "seek": 282500, "start": 2825.0, "end": 2838.0, "text": " Okay, so we can show you have actually used nested arrays that have been implied in close already. So, and what we can say is an example, ABC.", "tokens": [1033, 11, 370, 321, 393, 855, 291, 362, 767, 1143, 15646, 292, 41011, 300, 362, 668, 32614, 294, 1998, 1217, 13, 407, 11, 293, 437, 321, 393, 584, 307, 364, 1365, 11, 22342, 13], "temperature": 0.0, "avg_logprob": -0.18322716261211194, "compression_ratio": 1.2347826086956522, "no_speech_prob": 2.3540022084489465e-05}, {"id": 359, "seek": 283800, "start": 2838.0, "end": 2855.0, "text": " This is exactly the same thing as the enclose of ABC concatenated with the enclose of the F the stranding syntax is just a nicety it's in tactic sugar, it means this.", "tokens": [639, 307, 2293, 264, 912, 551, 382, 264, 20987, 541, 295, 22342, 1588, 7186, 770, 365, 264, 20987, 541, 295, 264, 479, 264, 14955, 278, 28431, 307, 445, 257, 6201, 2210, 309, 311, 294, 31012, 5076, 11, 309, 1355, 341, 13], "temperature": 0.0, "avg_logprob": -0.16433544482214976, "compression_ratio": 1.5, "no_speech_prob": 2.3543567294836976e-05}, {"id": 360, "seek": 283800, "start": 2855.0, "end": 2858.0, "text": " It just includes all the elements that are being stranded together.", "tokens": [467, 445, 5974, 439, 264, 4959, 300, 366, 885, 44394, 1214, 13], "temperature": 0.0, "avg_logprob": -0.16433544482214976, "compression_ratio": 1.5, "no_speech_prob": 2.3543567294836976e-05}, {"id": 361, "seek": 285800, "start": 2858.0, "end": 2871.0, "text": " So, so conceptually, these are well not so they really are their scalars, because every vector consists of scalars, and every matrix consists of rows that have scalars in them elements in them.", "tokens": [407, 11, 370, 3410, 671, 11, 613, 366, 731, 406, 370, 436, 534, 366, 641, 15664, 685, 11, 570, 633, 8062, 14689, 295, 15664, 685, 11, 293, 633, 8141, 14689, 295, 13241, 300, 362, 15664, 685, 294, 552, 4959, 294, 552, 13], "temperature": 0.0, "avg_logprob": -0.27320338355170354, "compression_ratio": 1.7251184834123223, "no_speech_prob": 1.4968019968364388e-05}, {"id": 362, "seek": 285800, "start": 2871.0, "end": 2884.0, "text": " And so this is an, and maybe we should turn boxing up to why is now. Why is that not just an array of arrays, where the first array is ABC and the second array is to you.", "tokens": [400, 370, 341, 307, 364, 11, 293, 1310, 321, 820, 1261, 24424, 493, 281, 983, 307, 586, 13, 1545, 307, 300, 406, 445, 364, 10225, 295, 41011, 11, 689, 264, 700, 10225, 307, 22342, 293, 264, 1150, 10225, 307, 281, 291, 13], "temperature": 0.0, "avg_logprob": -0.27320338355170354, "compression_ratio": 1.7251184834123223, "no_speech_prob": 1.4968019968364388e-05}, {"id": 363, "seek": 288400, "start": 2884.0, "end": 2889.0, "text": " Well, it is. Okay, so why do you need that enclosed idea.", "tokens": [1042, 11, 309, 307, 13, 1033, 11, 370, 983, 360, 291, 643, 300, 42089, 1558, 13], "temperature": 0.0, "avg_logprob": -0.20184557365648675, "compression_ratio": 1.5726872246696035, "no_speech_prob": 1.1299419384158682e-05}, {"id": 364, "seek": 288400, "start": 2889.0, "end": 2892.0, "text": " Because if I didn't have enclosed here.", "tokens": [1436, 498, 286, 994, 380, 362, 42089, 510, 13], "temperature": 0.0, "avg_logprob": -0.20184557365648675, "compression_ratio": 1.5726872246696035, "no_speech_prob": 1.1299419384158682e-05}, {"id": 365, "seek": 288400, "start": 2892.0, "end": 2904.0, "text": " Then we would just be concatenating together. Yes, yeah, so we need to say, each, each three element vector lives in its own little scalar.", "tokens": [1396, 321, 576, 445, 312, 1588, 7186, 990, 1214, 13, 1079, 11, 1338, 11, 370, 321, 643, 281, 584, 11, 1184, 11, 1184, 1045, 4478, 8062, 2909, 294, 1080, 1065, 707, 39684, 13], "temperature": 0.0, "avg_logprob": -0.20184557365648675, "compression_ratio": 1.5726872246696035, "no_speech_prob": 1.1299419384158682e-05}, {"id": 366, "seek": 288400, "start": 2904.0, "end": 2911.0, "text": " And so these are individual scalars if we look at the, at the shape of this, it's the empty vector it's a scalar. Yeah.", "tokens": [400, 370, 613, 366, 2609, 15664, 685, 498, 321, 574, 412, 264, 11, 412, 264, 3909, 295, 341, 11, 309, 311, 264, 6707, 8062, 309, 311, 257, 39684, 13, 865, 13], "temperature": 0.0, "avg_logprob": -0.20184557365648675, "compression_ratio": 1.5726872246696035, "no_speech_prob": 1.1299419384158682e-05}, {"id": 367, "seek": 291100, "start": 2911.0, "end": 2915.0, "text": " If you look at the depth of it. It's depth to.", "tokens": [759, 291, 574, 412, 264, 7161, 295, 309, 13, 467, 311, 7161, 281, 13], "temperature": 0.0, "avg_logprob": -0.20422802176526797, "compression_ratio": 1.5459183673469388, "no_speech_prob": 1.1299492143734824e-05}, {"id": 368, "seek": 291100, "start": 2915.0, "end": 2922.0, "text": " There's an outer array, which is a scalar, and there's an inner array, which is a vector. So the two levels. Yeah.", "tokens": [821, 311, 364, 10847, 10225, 11, 597, 307, 257, 39684, 11, 293, 456, 311, 364, 7284, 10225, 11, 597, 307, 257, 8062, 13, 407, 264, 732, 4358, 13, 865, 13], "temperature": 0.0, "avg_logprob": -0.20422802176526797, "compression_ratio": 1.5459183673469388, "no_speech_prob": 1.1299492143734824e-05}, {"id": 369, "seek": 291100, "start": 2922.0, "end": 2925.0, "text": " And so, this is what we have.", "tokens": [400, 370, 11, 341, 307, 437, 321, 362, 13], "temperature": 0.0, "avg_logprob": -0.20422802176526797, "compression_ratio": 1.5459183673469388, "no_speech_prob": 1.1299492143734824e-05}, {"id": 370, "seek": 291100, "start": 2925.0, "end": 2932.0, "text": " This is exactly the same thing as ABC, D, F.", "tokens": [639, 307, 2293, 264, 912, 551, 382, 22342, 11, 413, 11, 479, 13], "temperature": 0.0, "avg_logprob": -0.20422802176526797, "compression_ratio": 1.5459183673469388, "no_speech_prob": 1.1299492143734824e-05}, {"id": 371, "seek": 291100, "start": 2932.0, "end": 2939.0, "text": " And now it's easier to understand when I do reverse each on these.", "tokens": [400, 586, 309, 311, 3571, 281, 1223, 562, 286, 360, 9943, 1184, 322, 613, 13], "temperature": 0.0, "avg_logprob": -0.20422802176526797, "compression_ratio": 1.5459183673469388, "no_speech_prob": 1.1299492143734824e-05}, {"id": 372, "seek": 293900, "start": 2939.0, "end": 2947.0, "text": " What was actually happening here is I started off by applying on so you can make our little.", "tokens": [708, 390, 767, 2737, 510, 307, 286, 1409, 766, 538, 9275, 322, 370, 291, 393, 652, 527, 707, 13], "temperature": 0.0, "avg_logprob": -0.22447440028190613, "compression_ratio": 1.5066666666666666, "no_speech_prob": 3.0637394957011566e-05}, {"id": 373, "seek": 293900, "start": 2947.0, "end": 2951.0, "text": " We can make this TC each.", "tokens": [492, 393, 652, 341, 34150, 1184, 13], "temperature": 0.0, "avg_logprob": -0.22447440028190613, "compression_ratio": 1.5066666666666666, "no_speech_prob": 3.0637394957011566e-05}, {"id": 374, "seek": 293900, "start": 2951.0, "end": 2957.0, "text": " So we can see that TC is first seeing ABC then seeing D F.", "tokens": [407, 321, 393, 536, 300, 34150, 307, 700, 2577, 22342, 550, 2577, 413, 479, 13], "temperature": 0.0, "avg_logprob": -0.22447440028190613, "compression_ratio": 1.5066666666666666, "no_speech_prob": 3.0637394957011566e-05}, {"id": 375, "seek": 293900, "start": 2957.0, "end": 2963.0, "text": " Well done. So if TC is seeing ABC, then firstly,", "tokens": [1042, 1096, 13, 407, 498, 34150, 307, 2577, 22342, 11, 550, 27376, 11], "temperature": 0.0, "avg_logprob": -0.22447440028190613, "compression_ratio": 1.5066666666666666, "no_speech_prob": 3.0637394957011566e-05}, {"id": 376, "seek": 296300, "start": 2963.0, "end": 2969.0, "text": " Well, if the reverse is seeing ABC, that means not it was only applied to the first element.", "tokens": [1042, 11, 498, 264, 9943, 307, 2577, 22342, 11, 300, 1355, 406, 309, 390, 787, 6456, 281, 264, 700, 4478, 13], "temperature": 0.0, "avg_logprob": -0.17087811690110427, "compression_ratio": 1.4648648648648648, "no_speech_prob": 2.66838487732457e-05}, {"id": 377, "seek": 296300, "start": 2969.0, "end": 2974.0, "text": " That's the rank zero, but it wasn't it didn't see the enclosure.", "tokens": [663, 311, 264, 6181, 4018, 11, 457, 309, 2067, 380, 309, 994, 380, 536, 264, 34093, 13], "temperature": 0.0, "avg_logprob": -0.17087811690110427, "compression_ratio": 1.4648648648648648, "no_speech_prob": 2.66838487732457e-05}, {"id": 378, "seek": 296300, "start": 2974.0, "end": 2980.0, "text": " So we have disclosed it. We've opened it up.", "tokens": [407, 321, 362, 17092, 1744, 309, 13, 492, 600, 5625, 309, 493, 13], "temperature": 0.0, "avg_logprob": -0.17087811690110427, "compression_ratio": 1.4648648648648648, "no_speech_prob": 2.66838487732457e-05}, {"id": 379, "seek": 296300, "start": 2980.0, "end": 2982.0, "text": " And what did that.", "tokens": [400, 437, 630, 300, 13], "temperature": 0.0, "avg_logprob": -0.17087811690110427, "compression_ratio": 1.4648648648648648, "no_speech_prob": 2.66838487732457e-05}, {"id": 380, "seek": 296300, "start": 2982.0, "end": 2986.0, "text": " Well, because remember the definition of of each.", "tokens": [1042, 11, 570, 1604, 264, 7123, 295, 295, 1184, 13], "temperature": 0.0, "avg_logprob": -0.17087811690110427, "compression_ratio": 1.4648648648648648, "no_speech_prob": 2.66838487732457e-05}, {"id": 381, "seek": 298600, "start": 2986.0, "end": 2993.0, "text": " So in this case, it's the enclosing enclosing a top.", "tokens": [407, 294, 341, 1389, 11, 309, 311, 264, 20987, 6110, 20987, 6110, 257, 1192, 13], "temperature": 0.0, "avg_logprob": -0.16007953056922325, "compression_ratio": 1.4586466165413534, "no_speech_prob": 3.089307256232132e-06}, {"id": 382, "seek": 298600, "start": 2993.0, "end": 2996.0, "text": " The disclosing.", "tokens": [440, 17092, 6110, 13], "temperature": 0.0, "avg_logprob": -0.16007953056922325, "compression_ratio": 1.4586466165413534, "no_speech_prob": 3.089307256232132e-06}, {"id": 383, "seek": 298600, "start": 2996.0, "end": 3000.0, "text": " Like zero.", "tokens": [1743, 4018, 13], "temperature": 0.0, "avg_logprob": -0.16007953056922325, "compression_ratio": 1.4586466165413534, "no_speech_prob": 3.089307256232132e-06}, {"id": 384, "seek": 298600, "start": 3000.0, "end": 3002.0, "text": " This is what each means.", "tokens": [639, 307, 437, 1184, 1355, 13], "temperature": 0.0, "avg_logprob": -0.16007953056922325, "compression_ratio": 1.4586466165413534, "no_speech_prob": 3.089307256232132e-06}, {"id": 385, "seek": 298600, "start": 3002.0, "end": 3006.0, "text": " That's the definition of each.", "tokens": [663, 311, 264, 7123, 295, 1184, 13], "temperature": 0.0, "avg_logprob": -0.16007953056922325, "compression_ratio": 1.4586466165413534, "no_speech_prob": 3.089307256232132e-06}, {"id": 386, "seek": 298600, "start": 3006.0, "end": 3011.0, "text": " If we didn't do the disclosing, if you just do this right.", "tokens": [759, 321, 994, 380, 360, 264, 17092, 6110, 11, 498, 291, 445, 360, 341, 558, 13], "temperature": 0.0, "avg_logprob": -0.16007953056922325, "compression_ratio": 1.4586466165413534, "no_speech_prob": 3.089307256232132e-06}, {"id": 387, "seek": 301100, "start": 3011.0, "end": 3019.0, "text": " Reverse running zero, then we are reversing each scalar, but reversing a scalar doesn't do anything.", "tokens": [26314, 405, 2614, 4018, 11, 550, 321, 366, 14582, 278, 1184, 39684, 11, 457, 14582, 278, 257, 39684, 1177, 380, 360, 1340, 13], "temperature": 0.0, "avg_logprob": -0.1842193603515625, "compression_ratio": 1.5480225988700564, "no_speech_prob": 1.3417855370789766e-05}, {"id": 388, "seek": 301100, "start": 3019.0, "end": 3031.0, "text": " If we only pre process it by opening them up, then we would get the matrix because we're having the results from this is a vector.", "tokens": [759, 321, 787, 659, 1399, 309, 538, 5193, 552, 493, 11, 550, 321, 576, 483, 264, 8141, 570, 321, 434, 1419, 264, 3542, 490, 341, 307, 257, 8062, 13], "temperature": 0.0, "avg_logprob": -0.1842193603515625, "compression_ratio": 1.5480225988700564, "no_speech_prob": 1.3417855370789766e-05}, {"id": 389, "seek": 301100, "start": 3031.0, "end": 3035.0, "text": " So two vectors in an array makes a matrix.", "tokens": [407, 732, 18875, 294, 364, 10225, 1669, 257, 8141, 13], "temperature": 0.0, "avg_logprob": -0.1842193603515625, "compression_ratio": 1.5480225988700564, "no_speech_prob": 1.3417855370789766e-05}, {"id": 390, "seek": 303500, "start": 3035.0, "end": 3042.0, "text": " So to stick them back into their boxes where they came from, we post process.", "tokens": [407, 281, 2897, 552, 646, 666, 641, 9002, 689, 436, 1361, 490, 11, 321, 2183, 1399, 13], "temperature": 0.0, "avg_logprob": -0.19861641750540784, "compression_ratio": 1.528888888888889, "no_speech_prob": 1.0128038411494344e-05}, {"id": 391, "seek": 303500, "start": 3042.0, "end": 3054.0, "text": " The result of reverse, and this is a definition of each. And that's why you cannot use a function that has an each after it to access to access entire rows of a matrix.", "tokens": [440, 1874, 295, 9943, 11, 293, 341, 307, 257, 7123, 295, 1184, 13, 400, 300, 311, 983, 291, 2644, 764, 257, 2445, 300, 575, 364, 1184, 934, 309, 281, 2105, 281, 2105, 2302, 13241, 295, 257, 8141, 13], "temperature": 0.0, "avg_logprob": -0.19861641750540784, "compression_ratio": 1.528888888888889, "no_speech_prob": 1.0128038411494344e-05}, {"id": 392, "seek": 303500, "start": 3054.0, "end": 3055.0, "text": " It's just not possible.", "tokens": [467, 311, 445, 406, 1944, 13], "temperature": 0.0, "avg_logprob": -0.19861641750540784, "compression_ratio": 1.528888888888889, "no_speech_prob": 1.0128038411494344e-05}, {"id": 393, "seek": 303500, "start": 3055.0, "end": 3060.0, "text": " Right. However, if we take three four reshape by your top.", "tokens": [1779, 13, 2908, 11, 498, 321, 747, 1045, 1451, 725, 42406, 538, 428, 1192, 13], "temperature": 0.0, "avg_logprob": -0.19861641750540784, "compression_ratio": 1.528888888888889, "no_speech_prob": 1.0128038411494344e-05}, {"id": 394, "seek": 303500, "start": 3060.0, "end": 3063.0, "text": " And I also 12.", "tokens": [400, 286, 611, 2272, 13], "temperature": 0.0, "avg_logprob": -0.19861641750540784, "compression_ratio": 1.528888888888889, "no_speech_prob": 1.0128038411494344e-05}, {"id": 395, "seek": 306300, "start": 3063.0, "end": 3067.0, "text": " And we want to reverse each row.", "tokens": [400, 321, 528, 281, 9943, 1184, 5386, 13], "temperature": 0.0, "avg_logprob": -0.1767953346515524, "compression_ratio": 1.5625, "no_speech_prob": 7.070536867104238e-06}, {"id": 396, "seek": 306300, "start": 3067.0, "end": 3070.0, "text": " Well, you can use rank.", "tokens": [1042, 11, 291, 393, 764, 6181, 13], "temperature": 0.0, "avg_logprob": -0.1767953346515524, "compression_ratio": 1.5625, "no_speech_prob": 7.070536867104238e-06}, {"id": 397, "seek": 306300, "start": 3070.0, "end": 3076.0, "text": " You can firstly this function anyway is rank rank one.", "tokens": [509, 393, 27376, 341, 2445, 4033, 307, 6181, 6181, 472, 13], "temperature": 0.0, "avg_logprob": -0.1767953346515524, "compression_ratio": 1.5625, "no_speech_prob": 7.070536867104238e-06}, {"id": 398, "seek": 306300, "start": 3076.0, "end": 3086.0, "text": " Remember, if this function is the leading access one, then the corresponding function is the same thing rank one.", "tokens": [5459, 11, 498, 341, 2445, 307, 264, 5775, 2105, 472, 11, 550, 264, 11760, 2445, 307, 264, 912, 551, 6181, 472, 13], "temperature": 0.0, "avg_logprob": -0.1767953346515524, "compression_ratio": 1.5625, "no_speech_prob": 7.070536867104238e-06}, {"id": 399, "seek": 308600, "start": 3086.0, "end": 3095.0, "text": " So this reverses the first taxes and this reverses the last taxes.", "tokens": [407, 341, 14582, 279, 264, 700, 10041, 293, 341, 14582, 279, 264, 1036, 10041, 13], "temperature": 0.0, "avg_logprob": -0.1888923812330815, "compression_ratio": 1.5827338129496402, "no_speech_prob": 4.49391654910869e-06}, {"id": 400, "seek": 308600, "start": 3095.0, "end": 3098.0, "text": " It makes it flips it horizontally.", "tokens": [467, 1669, 309, 40249, 309, 33796, 13], "temperature": 0.0, "avg_logprob": -0.1888923812330815, "compression_ratio": 1.5827338129496402, "no_speech_prob": 4.49391654910869e-06}, {"id": 401, "seek": 308600, "start": 3098.0, "end": 3109.0, "text": " And if we use the first taxes one with rank one, then we're flipping the rows because there's only one access in them.", "tokens": [400, 498, 321, 764, 264, 700, 10041, 472, 365, 6181, 472, 11, 550, 321, 434, 26886, 264, 13241, 570, 456, 311, 787, 472, 2105, 294, 552, 13], "temperature": 0.0, "avg_logprob": -0.1888923812330815, "compression_ratio": 1.5827338129496402, "no_speech_prob": 4.49391654910869e-06}, {"id": 402, "seek": 310900, "start": 3109.0, "end": 3117.0, "text": " We only ever seeing one of these.", "tokens": [492, 787, 1562, 2577, 472, 295, 613, 13], "temperature": 0.0, "avg_logprob": -0.11558936478255631, "compression_ratio": 1.644578313253012, "no_speech_prob": 6.851051693956833e-06}, {"id": 403, "seek": 310900, "start": 3117.0, "end": 3123.0, "text": " So how could we use reverse each to reverse the rose.", "tokens": [407, 577, 727, 321, 764, 9943, 1184, 281, 9943, 264, 10895, 13], "temperature": 0.0, "avg_logprob": -0.11558936478255631, "compression_ratio": 1.644578313253012, "no_speech_prob": 6.851051693956833e-06}, {"id": 404, "seek": 310900, "start": 3123.0, "end": 3127.0, "text": " Well, for that sake, reverse first each.", "tokens": [1042, 11, 337, 300, 9717, 11, 9943, 700, 1184, 13], "temperature": 0.0, "avg_logprob": -0.11558936478255631, "compression_ratio": 1.644578313253012, "no_speech_prob": 6.851051693956833e-06}, {"id": 405, "seek": 310900, "start": 3127.0, "end": 3133.0, "text": " Well, if we know that each will open up these boxes and close them down again.", "tokens": [1042, 11, 498, 321, 458, 300, 1184, 486, 1269, 493, 613, 9002, 293, 1998, 552, 760, 797, 13], "temperature": 0.0, "avg_logprob": -0.11558936478255631, "compression_ratio": 1.644578313253012, "no_speech_prob": 6.851051693956833e-06}, {"id": 406, "seek": 310900, "start": 3133.0, "end": 3138.0, "text": " So if we give it boxes that they can apply on, then it will work.", "tokens": [407, 498, 321, 976, 309, 9002, 300, 436, 393, 3079, 322, 11, 550, 309, 486, 589, 13], "temperature": 0.0, "avg_logprob": -0.11558936478255631, "compression_ratio": 1.644578313253012, "no_speech_prob": 6.851051693956833e-06}, {"id": 407, "seek": 313800, "start": 3138.0, "end": 3143.0, "text": " So if I in close rank one.", "tokens": [407, 498, 286, 294, 1998, 6181, 472, 13], "temperature": 0.0, "avg_logprob": -0.20731697082519532, "compression_ratio": 1.6243902439024391, "no_speech_prob": 2.5456840376136824e-05}, {"id": 408, "seek": 313800, "start": 3143.0, "end": 3148.0, "text": " So in close remember puts a box around things. If I just in close the array, we get a multiple enclosed.", "tokens": [407, 294, 1998, 1604, 8137, 257, 2424, 926, 721, 13, 759, 286, 445, 294, 1998, 264, 10225, 11, 321, 483, 257, 3866, 42089, 13], "temperature": 0.0, "avg_logprob": -0.20731697082519532, "compression_ratio": 1.6243902439024391, "no_speech_prob": 2.5456840376136824e-05}, {"id": 409, "seek": 313800, "start": 3148.0, "end": 3152.0, "text": " We can keep making beautiful patterns.", "tokens": [492, 393, 1066, 1455, 2238, 8294, 13], "temperature": 0.0, "avg_logprob": -0.20731697082519532, "compression_ratio": 1.6243902439024391, "no_speech_prob": 2.5456840376136824e-05}, {"id": 410, "seek": 313800, "start": 3152.0, "end": 3159.0, "text": " If I close rank one, then I took each row and made it into a scalar.", "tokens": [759, 286, 1998, 6181, 472, 11, 550, 286, 1890, 1184, 5386, 293, 1027, 309, 666, 257, 39684, 13], "temperature": 0.0, "avg_logprob": -0.20731697082519532, "compression_ratio": 1.6243902439024391, "no_speech_prob": 2.5456840376136824e-05}, {"id": 411, "seek": 313800, "start": 3159.0, "end": 3164.0, "text": " That means we have a collection of three scalars. That's called the vector and nested vector.", "tokens": [663, 1355, 321, 362, 257, 5765, 295, 1045, 15664, 685, 13, 663, 311, 1219, 264, 8062, 293, 15646, 292, 8062, 13], "temperature": 0.0, "avg_logprob": -0.20731697082519532, "compression_ratio": 1.6243902439024391, "no_speech_prob": 2.5456840376136824e-05}, {"id": 412, "seek": 316400, "start": 3164.0, "end": 3168.0, "text": " Now I can reverse each.", "tokens": [823, 286, 393, 9943, 1184, 13], "temperature": 0.0, "avg_logprob": -0.16411048961135577, "compression_ratio": 1.7544642857142858, "no_speech_prob": 4.425140559760621e-06}, {"id": 413, "seek": 316400, "start": 3168.0, "end": 3171.0, "text": " Isn't there a arrow that does the same thing?", "tokens": [6998, 380, 456, 257, 11610, 300, 775, 264, 912, 551, 30], "temperature": 0.0, "avg_logprob": -0.16411048961135577, "compression_ratio": 1.7544642857142858, "no_speech_prob": 4.425140559760621e-06}, {"id": 414, "seek": 316400, "start": 3171.0, "end": 3177.0, "text": " Yes, for matrices, there is a down arrow, but it's not really necessary.", "tokens": [1079, 11, 337, 32284, 11, 456, 307, 257, 760, 11610, 11, 457, 309, 311, 406, 534, 4818, 13], "temperature": 0.0, "avg_logprob": -0.16411048961135577, "compression_ratio": 1.7544642857142858, "no_speech_prob": 4.425140559760621e-06}, {"id": 415, "seek": 316400, "start": 3177.0, "end": 3181.0, "text": " It does exactly the same thing on matrices, but it doesn't do the same thing on higher rank array.", "tokens": [467, 775, 2293, 264, 912, 551, 322, 32284, 11, 457, 309, 1177, 380, 360, 264, 912, 551, 322, 2946, 6181, 10225, 13], "temperature": 0.0, "avg_logprob": -0.16411048961135577, "compression_ratio": 1.7544642857142858, "no_speech_prob": 4.425140559760621e-06}, {"id": 416, "seek": 316400, "start": 3181.0, "end": 3183.0, "text": " So it's more general.", "tokens": [407, 309, 311, 544, 2674, 13], "temperature": 0.0, "avg_logprob": -0.16411048961135577, "compression_ratio": 1.7544642857142858, "no_speech_prob": 4.425140559760621e-06}, {"id": 417, "seek": 316400, "start": 3183.0, "end": 3186.0, "text": " In a sense, this is itself is a last access function.", "tokens": [682, 257, 2020, 11, 341, 307, 2564, 307, 257, 1036, 2105, 2445, 13], "temperature": 0.0, "avg_logprob": -0.16411048961135577, "compression_ratio": 1.7544642857142858, "no_speech_prob": 4.425140559760621e-06}, {"id": 418, "seek": 316400, "start": 3186.0, "end": 3192.0, "text": " And whereas in close is a leading access function that works on everything.", "tokens": [400, 9735, 294, 1998, 307, 257, 5775, 2105, 2445, 300, 1985, 322, 1203, 13], "temperature": 0.0, "avg_logprob": -0.16411048961135577, "compression_ratio": 1.7544642857142858, "no_speech_prob": 4.425140559760621e-06}, {"id": 419, "seek": 319200, "start": 3192.0, "end": 3195.0, "text": " So it's not even restricted to be on the lower rank.", "tokens": [407, 309, 311, 406, 754, 20608, 281, 312, 322, 264, 3126, 6181, 13], "temperature": 0.0, "avg_logprob": -0.24253982967800564, "compression_ratio": 1.585, "no_speech_prob": 0.0003245404805056751}, {"id": 420, "seek": 319200, "start": 3195.0, "end": 3202.0, "text": " Oh, I see. So you can think of down arrow and enclosed as the leading and trailing access versions of the same thing.", "tokens": [876, 11, 286, 536, 13, 407, 291, 393, 519, 295, 760, 11610, 293, 42089, 382, 264, 5775, 293, 944, 4883, 2105, 9606, 295, 264, 912, 551, 13], "temperature": 0.0, "avg_logprob": -0.24253982967800564, "compression_ratio": 1.585, "no_speech_prob": 0.0003245404805056751}, {"id": 421, "seek": 319200, "start": 3202.0, "end": 3206.0, "text": " Yeah, you could.", "tokens": [865, 11, 291, 727, 13], "temperature": 0.0, "avg_logprob": -0.24253982967800564, "compression_ratio": 1.585, "no_speech_prob": 0.0003245404805056751}, {"id": 422, "seek": 319200, "start": 3206.0, "end": 3208.0, "text": " They don't look similar.", "tokens": [814, 500, 380, 574, 2531, 13], "temperature": 0.0, "avg_logprob": -0.24253982967800564, "compression_ratio": 1.585, "no_speech_prob": 0.0003245404805056751}, {"id": 423, "seek": 319200, "start": 3208.0, "end": 3211.0, "text": " They don't look similar, but that's because.", "tokens": [814, 500, 380, 574, 2531, 11, 457, 300, 311, 570, 13], "temperature": 0.0, "avg_logprob": -0.24253982967800564, "compression_ratio": 1.585, "no_speech_prob": 0.0003245404805056751}, {"id": 424, "seek": 319200, "start": 3211.0, "end": 3216.0, "text": " Enclosed with a bar would look like a epsilon or something.", "tokens": [2193, 3474, 1744, 365, 257, 2159, 576, 574, 411, 257, 17889, 420, 746, 13], "temperature": 0.0, "avg_logprob": -0.24253982967800564, "compression_ratio": 1.585, "no_speech_prob": 0.0003245404805056751}, {"id": 425, "seek": 321600, "start": 3216.0, "end": 3224.0, "text": " It would look like this. That means something else. Oh, OK. Yeah, you haven't learned it yet. You'll see. I don't give it a spot at all.", "tokens": [467, 576, 574, 411, 341, 13, 663, 1355, 746, 1646, 13, 876, 11, 2264, 13, 865, 11, 291, 2378, 380, 3264, 309, 1939, 13, 509, 603, 536, 13, 286, 500, 380, 976, 309, 257, 4008, 412, 439, 13], "temperature": 0.0, "avg_logprob": -0.17346951218902087, "compression_ratio": 1.6468531468531469, "no_speech_prob": 3.3205269573954865e-05}, {"id": 426, "seek": 321600, "start": 3224.0, "end": 3228.0, "text": " But there's never any reason really to use a down arrow. It's just confusing when higher rank arrays.", "tokens": [583, 456, 311, 1128, 604, 1778, 534, 281, 764, 257, 760, 11610, 13, 467, 311, 445, 13181, 562, 2946, 6181, 41011, 13], "temperature": 0.0, "avg_logprob": -0.17346951218902087, "compression_ratio": 1.6468531468531469, "no_speech_prob": 3.3205269573954865e-05}, {"id": 427, "seek": 321600, "start": 3228.0, "end": 3234.0, "text": " It's much easier conceptually to understand that this puts things into boxes and it gets restricted to only see rows.", "tokens": [467, 311, 709, 3571, 3410, 671, 281, 1223, 300, 341, 8137, 721, 666, 9002, 293, 309, 2170, 20608, 281, 787, 536, 13241, 13], "temperature": 0.0, "avg_logprob": -0.17346951218902087, "compression_ratio": 1.6468531468531469, "no_speech_prob": 3.3205269573954865e-05}, {"id": 428, "seek": 321600, "start": 3234.0, "end": 3239.0, "text": " So it puts the rows into boxes. And then we can we can disclose.", "tokens": [407, 309, 8137, 264, 13241, 666, 9002, 13, 400, 550, 321, 393, 321, 393, 36146, 13], "temperature": 0.0, "avg_logprob": -0.17346951218902087, "compression_ratio": 1.6468531468531469, "no_speech_prob": 3.3205269573954865e-05}, {"id": 429, "seek": 321600, "start": 3239.0, "end": 3245.0, "text": " The problem is we need to disclose each of these.", "tokens": [440, 1154, 307, 321, 643, 281, 36146, 1184, 295, 613, 13], "temperature": 0.0, "avg_logprob": -0.17346951218902087, "compression_ratio": 1.6468531468531469, "no_speech_prob": 3.3205269573954865e-05}, {"id": 430, "seek": 324500, "start": 3245.0, "end": 3249.0, "text": " So we need to disclose rank zero.", "tokens": [407, 321, 643, 281, 36146, 6181, 4018, 13], "temperature": 0.0, "avg_logprob": -0.1654418393185264, "compression_ratio": 1.4787234042553192, "no_speech_prob": 5.254530151432846e-06}, {"id": 431, "seek": 324500, "start": 3249.0, "end": 3253.0, "text": " The elements are of the vector.", "tokens": [440, 4959, 366, 295, 264, 8062, 13], "temperature": 0.0, "avg_logprob": -0.1654418393185264, "compression_ratio": 1.4787234042553192, "no_speech_prob": 5.254530151432846e-06}, {"id": 432, "seek": 324500, "start": 3253.0, "end": 3259.0, "text": " This vector has three elements and I want to open up each one of them because it's confined to a box.", "tokens": [639, 8062, 575, 1045, 4959, 293, 286, 528, 281, 1269, 493, 1184, 472, 295, 552, 570, 309, 311, 31745, 281, 257, 2424, 13], "temperature": 0.0, "avg_logprob": -0.1654418393185264, "compression_ratio": 1.4787234042553192, "no_speech_prob": 5.254530151432846e-06}, {"id": 433, "seek": 324500, "start": 3259.0, "end": 3262.0, "text": " We get our metrics back.", "tokens": [492, 483, 527, 16367, 646, 13], "temperature": 0.0, "avg_logprob": -0.1654418393185264, "compression_ratio": 1.4787234042553192, "no_speech_prob": 5.254530151432846e-06}, {"id": 434, "seek": 324500, "start": 3262.0, "end": 3269.0, "text": " So this is exactly the process. But notice here, I'm enclosing only to applying each.", "tokens": [407, 341, 307, 2293, 264, 1399, 13, 583, 3449, 510, 11, 286, 478, 20987, 6110, 787, 281, 9275, 1184, 13], "temperature": 0.0, "avg_logprob": -0.1654418393185264, "compression_ratio": 1.4787234042553192, "no_speech_prob": 5.254530151432846e-06}, {"id": 435, "seek": 326900, "start": 3269.0, "end": 3278.0, "text": " So that I can again disclose. Well, that's the inverse operations of what each actually implies.", "tokens": [407, 300, 286, 393, 797, 36146, 13, 1042, 11, 300, 311, 264, 17340, 7705, 295, 437, 1184, 767, 18779, 13], "temperature": 0.0, "avg_logprob": -0.18100706736246744, "compression_ratio": 1.355072463768116, "no_speech_prob": 1.1295180229353718e-05}, {"id": 436, "seek": 326900, "start": 3278.0, "end": 3282.0, "text": " Because this each is actually.", "tokens": [1436, 341, 1184, 307, 767, 13], "temperature": 0.0, "avg_logprob": -0.18100706736246744, "compression_ratio": 1.355072463768116, "no_speech_prob": 1.1295180229353718e-05}, {"id": 437, "seek": 326900, "start": 3282.0, "end": 3285.0, "text": " Over.", "tokens": [4886, 13], "temperature": 0.0, "avg_logprob": -0.18100706736246744, "compression_ratio": 1.355072463768116, "no_speech_prob": 1.1295180229353718e-05}, {"id": 438, "seek": 326900, "start": 3285.0, "end": 3288.0, "text": " Disclose rank zero.", "tokens": [4208, 3474, 541, 6181, 4018, 13], "temperature": 0.0, "avg_logprob": -0.18100706736246744, "compression_ratio": 1.355072463768116, "no_speech_prob": 1.1295180229353718e-05}, {"id": 439, "seek": 326900, "start": 3288.0, "end": 3291.0, "text": " And then enclosed on top of that.", "tokens": [400, 550, 42089, 322, 1192, 295, 300, 13], "temperature": 0.0, "avg_logprob": -0.18100706736246744, "compression_ratio": 1.355072463768116, "no_speech_prob": 1.1295180229353718e-05}, {"id": 440, "seek": 329100, "start": 3291.0, "end": 3302.0, "text": " So these negate each other. This makes scalars that are enclosed and this opens scalars that are enclosed.", "tokens": [407, 613, 2485, 473, 1184, 661, 13, 639, 1669, 15664, 685, 300, 366, 42089, 293, 341, 9870, 15664, 685, 300, 366, 42089, 13], "temperature": 0.0, "avg_logprob": -0.08861160889650002, "compression_ratio": 2.0064516129032257, "no_speech_prob": 2.3164206140791066e-05}, {"id": 441, "seek": 329100, "start": 3302.0, "end": 3307.0, "text": " And this encloses the results and this discloses the results.", "tokens": [400, 341, 20987, 4201, 264, 3542, 293, 341, 17092, 4201, 264, 3542, 13], "temperature": 0.0, "avg_logprob": -0.08861160889650002, "compression_ratio": 2.0064516129032257, "no_speech_prob": 2.3164206140791066e-05}, {"id": 442, "seek": 329100, "start": 3307.0, "end": 3313.0, "text": " So these two cancel each other out and these two cancel each other out.", "tokens": [407, 613, 732, 10373, 1184, 661, 484, 293, 613, 732, 10373, 1184, 661, 484, 13], "temperature": 0.0, "avg_logprob": -0.08861160889650002, "compression_ratio": 2.0064516129032257, "no_speech_prob": 2.3164206140791066e-05}, {"id": 443, "seek": 329100, "start": 3313.0, "end": 3317.0, "text": " And the only thing we have left is this rank one, which it already is.", "tokens": [400, 264, 787, 551, 321, 362, 1411, 307, 341, 6181, 472, 11, 597, 309, 1217, 307, 13], "temperature": 0.0, "avg_logprob": -0.08861160889650002, "compression_ratio": 2.0064516129032257, "no_speech_prob": 2.3164206140791066e-05}, {"id": 444, "seek": 331700, "start": 3317.0, "end": 3321.0, "text": " And we're right back so we can do it.", "tokens": [400, 321, 434, 558, 646, 370, 321, 393, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.26288860722592, "compression_ratio": 1.4596273291925466, "no_speech_prob": 1.6961261280812323e-05}, {"id": 445, "seek": 331700, "start": 3321.0, "end": 3325.0, "text": " You come full circle.", "tokens": [509, 808, 1577, 6329, 13], "temperature": 0.0, "avg_logprob": -0.26288860722592, "compression_ratio": 1.4596273291925466, "no_speech_prob": 1.6961261280812323e-05}, {"id": 446, "seek": 331700, "start": 3325.0, "end": 3327.0, "text": " That's great.", "tokens": [663, 311, 869, 13], "temperature": 0.0, "avg_logprob": -0.26288860722592, "compression_ratio": 1.4596273291925466, "no_speech_prob": 1.6961261280812323e-05}, {"id": 447, "seek": 331700, "start": 3327.0, "end": 3332.0, "text": " This is why you cannot use each on rows, but you can use rank on rows.", "tokens": [639, 307, 983, 291, 2644, 764, 1184, 322, 13241, 11, 457, 291, 393, 764, 6181, 322, 13241, 13], "temperature": 0.0, "avg_logprob": -0.26288860722592, "compression_ratio": 1.4596273291925466, "no_speech_prob": 1.6961261280812323e-05}, {"id": 448, "seek": 331700, "start": 3332.0, "end": 3335.0, "text": " So.", "tokens": [407, 13], "temperature": 0.0, "avg_logprob": -0.26288860722592, "compression_ratio": 1.4596273291925466, "no_speech_prob": 1.6961261280812323e-05}, {"id": 449, "seek": 331700, "start": 3335.0, "end": 3340.0, "text": " And the interpreter is clever enough that if you if you write.", "tokens": [400, 264, 34132, 307, 13494, 1547, 300, 498, 291, 498, 291, 2464, 13], "temperature": 0.0, "avg_logprob": -0.26288860722592, "compression_ratio": 1.4596273291925466, "no_speech_prob": 1.6961261280812323e-05}, {"id": 450, "seek": 331700, "start": 3340.0, "end": 3343.0, "text": " Reverse rank one. Oops.", "tokens": [26314, 405, 6181, 472, 13, 21726, 13], "temperature": 0.0, "avg_logprob": -0.26288860722592, "compression_ratio": 1.4596273291925466, "no_speech_prob": 1.6961261280812323e-05}, {"id": 451, "seek": 334300, "start": 3343.0, "end": 3349.0, "text": " It won't loop. It will understand that it needs to reverse the rows and it will do that.", "tokens": [467, 1582, 380, 6367, 13, 467, 486, 1223, 300, 309, 2203, 281, 9943, 264, 13241, 293, 309, 486, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.1887946367263794, "compression_ratio": 1.513089005235602, "no_speech_prob": 2.668047818588093e-05}, {"id": 452, "seek": 334300, "start": 3349.0, "end": 3359.0, "text": " And in as fast as it can do that with Victor instructions memory.", "tokens": [400, 294, 382, 2370, 382, 309, 393, 360, 300, 365, 15777, 9415, 4675, 13], "temperature": 0.0, "avg_logprob": -0.1887946367263794, "compression_ratio": 1.513089005235602, "no_speech_prob": 2.668047818588093e-05}, {"id": 453, "seek": 334300, "start": 3359.0, "end": 3364.0, "text": " I don't know if it can actually speed anything up here but it will try.", "tokens": [286, 500, 380, 458, 498, 309, 393, 767, 3073, 1340, 493, 510, 457, 309, 486, 853, 13], "temperature": 0.0, "avg_logprob": -0.1887946367263794, "compression_ratio": 1.513089005235602, "no_speech_prob": 2.668047818588093e-05}, {"id": 454, "seek": 334300, "start": 3364.0, "end": 3368.0, "text": " Wow, it's nice to.", "tokens": [3153, 11, 309, 311, 1481, 281, 13], "temperature": 0.0, "avg_logprob": -0.1887946367263794, "compression_ratio": 1.513089005235602, "no_speech_prob": 2.668047818588093e-05}, {"id": 455, "seek": 334300, "start": 3368.0, "end": 3372.0, "text": " Learn APL from somebody who understands it.", "tokens": [17216, 5372, 43, 490, 2618, 567, 15146, 309, 13], "temperature": 0.0, "avg_logprob": -0.1887946367263794, "compression_ratio": 1.513089005235602, "no_speech_prob": 2.668047818588093e-05}, {"id": 456, "seek": 337200, "start": 3372.0, "end": 3374.0, "text": " Thanks for that.", "tokens": [2561, 337, 300, 13], "temperature": 0.0, "avg_logprob": -0.2533834139506022, "compression_ratio": 1.7755905511811023, "no_speech_prob": 0.00013326527550816536}, {"id": 457, "seek": 337200, "start": 3374.0, "end": 3382.0, "text": " We should let you get some sleep. I'd not get back to get to sleep and and that's actually, that's our hour so that's actually fantastic. That's awesome.", "tokens": [492, 820, 718, 291, 483, 512, 2817, 13, 286, 1116, 406, 483, 646, 281, 483, 281, 2817, 293, 293, 300, 311, 767, 11, 300, 311, 527, 1773, 370, 300, 311, 767, 5456, 13, 663, 311, 3476, 13], "temperature": 0.0, "avg_logprob": -0.2533834139506022, "compression_ratio": 1.7755905511811023, "no_speech_prob": 0.00013326527550816536}, {"id": 458, "seek": 337200, "start": 3382.0, "end": 3390.0, "text": " I feel a little bit bad about the hijacking your whole thing but we're happy to have you hijack all the whole things. It's great. Thank you.", "tokens": [286, 841, 257, 707, 857, 1578, 466, 264, 10625, 14134, 428, 1379, 551, 457, 321, 434, 2055, 281, 362, 291, 10625, 501, 439, 264, 1379, 721, 13, 467, 311, 869, 13, 1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.2533834139506022, "compression_ratio": 1.7755905511811023, "no_speech_prob": 0.00013326527550816536}, {"id": 459, "seek": 337200, "start": 3390.0, "end": 3399.0, "text": " No, it was it's great that you're, you know, spending the time to watch them all it was great that you joined this was very much for me so.", "tokens": [883, 11, 309, 390, 309, 311, 869, 300, 291, 434, 11, 291, 458, 11, 6434, 264, 565, 281, 1159, 552, 439, 309, 390, 869, 300, 291, 6869, 341, 390, 588, 709, 337, 385, 370, 13], "temperature": 0.0, "avg_logprob": -0.2533834139506022, "compression_ratio": 1.7755905511811023, "no_speech_prob": 0.00013326527550816536}, {"id": 460, "seek": 339900, "start": 3399.0, "end": 3413.0, "text": " Well, you know, I mean I enjoy also seeing senior explorations and it gives me some some feedback on where we can improve our documentation must be a bit cringy though to his CSP like, what are we doing.", "tokens": [1042, 11, 291, 458, 11, 286, 914, 286, 2103, 611, 2577, 7965, 24765, 763, 293, 309, 2709, 385, 512, 512, 5824, 322, 689, 321, 393, 3470, 527, 14333, 1633, 312, 257, 857, 941, 278, 88, 1673, 281, 702, 9460, 47, 411, 11, 437, 366, 321, 884, 13], "temperature": 0.0, "avg_logprob": -0.2624607691689143, "compression_ratio": 1.3756906077348066, "no_speech_prob": 0.0001269018539460376}, {"id": 461, "seek": 339900, "start": 3413.0, "end": 3417.0, "text": " Just press that button Jeremy for God's sake.", "tokens": [1449, 1886, 300, 2960, 17809, 337, 1265, 311, 9717, 13], "temperature": 0.0, "avg_logprob": -0.2624607691689143, "compression_ratio": 1.3756906077348066, "no_speech_prob": 0.0001269018539460376}, {"id": 462, "seek": 341700, "start": 3417.0, "end": 3433.0, "text": " It's been a couple of times where I kind of wish I was there so if you could hear it.", "tokens": [467, 311, 668, 257, 1916, 295, 1413, 689, 286, 733, 295, 3172, 286, 390, 456, 370, 498, 291, 727, 1568, 309, 13], "temperature": 0.0, "avg_logprob": -0.27431807151207555, "compression_ratio": 1.0897435897435896, "no_speech_prob": 8.927309863793198e-06}, {"id": 463, "seek": 343300, "start": 3433.0, "end": 3450.0, "text": " I think the thing that's a little bit here is you seem to be going down a wrong conceptual path regards to to rank. Yes, where you think it seemed like you were thinking that rank actually modifies their, the function, just like the bracket axis modifies the function.", "tokens": [286, 519, 264, 551, 300, 311, 257, 707, 857, 510, 307, 291, 1643, 281, 312, 516, 760, 257, 2085, 24106, 3100, 14258, 281, 281, 6181, 13, 1079, 11, 689, 291, 519, 309, 6576, 411, 291, 645, 1953, 300, 6181, 767, 1072, 11221, 641, 11, 264, 2445, 11, 445, 411, 264, 16904, 10298, 1072, 11221, 264, 2445, 13], "temperature": 0.0, "avg_logprob": -0.24799504487410837, "compression_ratio": 1.6435185185185186, "no_speech_prob": 5.729897748096846e-05}, {"id": 464, "seek": 343300, "start": 3450.0, "end": 3452.0, "text": " That isn't the case.", "tokens": [663, 1943, 380, 264, 1389, 13], "temperature": 0.0, "avg_logprob": -0.24799504487410837, "compression_ratio": 1.6435185185185186, "no_speech_prob": 5.729897748096846e-05}, {"id": 465, "seek": 343300, "start": 3452.0, "end": 3453.0, "text": " Got it.", "tokens": [5803, 309, 13], "temperature": 0.0, "avg_logprob": -0.24799504487410837, "compression_ratio": 1.6435185185185186, "no_speech_prob": 5.729897748096846e-05}, {"id": 466, "seek": 343300, "start": 3453.0, "end": 3458.0, "text": " It's nice to know that if we go too far off the deep end.", "tokens": [467, 311, 1481, 281, 458, 300, 498, 321, 352, 886, 1400, 766, 264, 2452, 917, 13], "temperature": 0.0, "avg_logprob": -0.24799504487410837, "compression_ratio": 1.6435185185185186, "no_speech_prob": 5.729897748096846e-05}, {"id": 467, "seek": 345800, "start": 3458.0, "end": 3466.0, "text": " I'll have sleepless nights if you go too far off the right path.", "tokens": [286, 603, 362, 12931, 20434, 13249, 498, 291, 352, 886, 1400, 766, 264, 558, 3100, 13], "temperature": 0.0, "avg_logprob": -0.3733807518368676, "compression_ratio": 1.4240506329113924, "no_speech_prob": 0.00013096483598928899}, {"id": 468, "seek": 345800, "start": 3466.0, "end": 3473.0, "text": " Join the call at the beginning we're like, all right.", "tokens": [19642, 264, 818, 412, 264, 2863, 321, 434, 411, 11, 439, 558, 13], "temperature": 0.0, "avg_logprob": -0.3733807518368676, "compression_ratio": 1.4240506329113924, "no_speech_prob": 0.00013096483598928899}, {"id": 469, "seek": 345800, "start": 3473.0, "end": 3479.0, "text": " Thanks all otherwise, feel free to ask me questions I mean I'll respond on the farms and so you will.", "tokens": [2561, 439, 5911, 11, 841, 1737, 281, 1029, 385, 1651, 286, 914, 286, 603, 4196, 322, 264, 20366, 293, 370, 291, 486, 13], "temperature": 0.0, "avg_logprob": -0.3733807518368676, "compression_ratio": 1.4240506329113924, "no_speech_prob": 0.00013096483598928899}, {"id": 470, "seek": 347900, "start": 3479.0, "end": 3491.0, "text": " Bye.", "tokens": [50364, 4621, 13, 50964], "temperature": 0.0, "avg_logprob": -0.6673489570617676, "compression_ratio": 0.3333333333333333, "no_speech_prob": 5.963958756183274e-05}], "language": "en"}