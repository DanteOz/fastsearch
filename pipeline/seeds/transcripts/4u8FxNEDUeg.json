{"text": " So, welcome back to part two of what previously was called practical deep learning for coders, but part two is not called that, as you will see. It's called deep learning from the foundations. It's lesson eight because it's lesson eight of the full journey, lesson one of part two, or lesson eight, mod seven, as we sometimes call it. So those of you, I know a lot of you kind of do every year's course and keep coming back. For those of you doing that, this will not look at all familiar to you. It's a very different kind of part two. We're really excited about it and hope you like it as well. The basic idea of deep learning from the foundations is that we are going to implement much of the fast AI library from foundations. Now talk about exactly what I mean by foundations in a moment, but it basically means from scratch. So we'll be looking at basic matrix calculus and creating a training loop from scratch and creating an optimizer from scratch and lots of different layers and architectures and so forth, and not just to create some kind of dumbed down library that's not useful for anything, but to actually build from scratch something you can train cutting edge world class models with. So that's the goal. We've never done it before. I don't think anybody's ever done this before, so I don't exactly know how far we'll get, but this is the journey that we're on. We'll see how we go. So in the process, we will be having to read and implement papers, right, because the fast AI library is full of implemented papers, right? So you're not going to be able to do this if you're not reading and implementing papers. Along the way, we'll be implementing much of PyTorch as well, as you'll see. We'll also be going deeper into solving some applications that are not kind of fully baked into the fast AI library yet, so going to require a lot of custom work. So things like object detection, sequence to sequence with attention, transformer and the transformer Excel, cycleGAN, audio, stuff like that. We'll also be doing a deeper dive into some performance considerations like doing distributed multi-GPU training using the new just-in-time compiler, which we'll just call JIT from now on, CUDA and C++, stuff like that. So that's the first five lessons, and then the last two lessons, implementing some subset of that in Swift. So this is otherwise known as impractical deep learning for coders, because really none of this is stuff that you're going to go and use right away. It's kind of the opposite of part one, right? Part one was like, oh, we've been spending 20 minutes on this. You can now create a world-class vision classification model. This is not that, right? Because you already know how to do that. And so back in the earlier years, part two used to be more of the same thing, but it was kind of like more advanced types of model, more advanced architectures. But there's a couple of reasons we've changed this year. The first is so many papers come out now, because this whole area has increased in scale so quickly that I can't pick out for you the 12 papers to do in the next seven weeks that you really need to know, because there's too many. And it's also kind of pointless, right? Because once you get into it, you realize that all the papers pretty much say minor variations on the same thing. So instead, what I want to be able to do is show you the foundations that let you read the 12 papers you care about and realize, oh, that's just that thing with this minor tweak, and I now have all the tools I need to implement that and test it and experiment with it. So that's kind of a really key issue in why we want to go in this direction. Also, it's increasingly clear that we used to call part two cutting edge deep learning for coders, but it's increasingly clear that the cutting edge of deep learning is really about engineering, not about papers. The difference between really effective people in deep learning and the rest is really about who can make things in code that work properly, and there's very few of those people. So really, the goal of this part two is to deepen your practice so you can understand the things that you care about and build the things you care about and have them work and perform at a reasonable speed. So that's where we're trying to head to. And so it's impractical in the sense that none of these are things that you're going to go probably straight away and say, here's this thing I built, particularly Swift, because Swift, we're actually going to be learning a language in a library that, as you'll see, is far from ready for use, and I'll describe why we're doing that in a moment. So part one of this course was top down, so that you got the context you needed to understand, you got the motivation you needed to keep going, and you got the results you needed to make it useful. But bottom up is useful too, and we started doing some bottom up at the end of part one, right? But really bottom up lets you, when you've built everything from the bottom yourself, then you can see the connections between all the different things. You can see they're all variations of the same thing, you know? And then you can customize, rather than picking algorithm A or algorithm B, you create your own algorithm to solve your own problem doing just the things you need it to do. And then you can make sure that it performs well, that you can debug it, profile it, maintain it, because you understand all of the pieces. So normally when people say bottom up in this world, in this field, they mean bottom up with math. I don't mean that. I mean bottom up with code, right? So today, step one will be to implement matrix multiplication from scratch in Python. Because bottom up with code means that you can experiment really deeply on every part of every bit of the system. You can see exactly what's going in, exactly what's coming out, and you can figure out why your model's not training well, or why it's slow, or why it's giving the wrong answer, or whatever. So why Swift? What are these two lessons about? And be clear, we are only talking the last two lessons, right? Our focus, as I'll describe, is still very much Python and PyTorch, right? But there's something very exciting going on. The first exciting thing is this guy's face you see here, Chris Latner. Chris is unique as far as I know as being somebody who has built, I think what is the world's most widely used compiler framework, LLVM. He's built the default C and C++ compiler for Mac, Bing Clang, and he's built what's probably like the world's fastest growing, fairly new computer language, Bing Swift. And he's now dedicating his life to deep learning, right? So we haven't had somebody from that world come into our world before. And so when you actually look at stuff like the internals of something like TensorFlow, it looks like something that was built by a bunch of deep learning people, not by a bunch of compiler people, right? And so I've been wanting for over 20 years for there to be a good numerical programming language that was built by somebody that really gets programming languages, and it's never happened. So we've had like in the early days it was eLispStat in Lisp, and then it was R, and then it was Python. None of these languages were built to be good at data analysis. They weren't built by people that really deeply understood compilers. They certainly weren't built for today's kind of modern, highly parallel processor situation we're in. But Swift was, Swift is, right? And so we've got this unique situation where for the first time a really widely used language, a really well designed language from the ground up is actually being targeted towards numeric programming and deep learning. So there's no way I'm missing out on that boat, and I don't want you to miss out on it either. I should mention there's another language which you could possibly put in there, which is a language called Julia, which has maybe as much potential. But it's about ten times less used than Swift. It doesn't have the same level of community, but I would still say it's super exciting. So I'd say maybe there's two languages which you might want to seriously consider picking one and spending some time with it. Julia is actually further along. Swift is very early days in this world. But that's one of the things I'm excited about for it. So I actually spent some time over the Christmas break kind of digging into numeric programming in Swift, and I was delighted to find that I could create code from scratch that was competitive with the fastest hand-tuned Vendor linear algebra libraries, even though I am, and remain pretty incompetent at Swift. I found it was a language that was really delightful. It was expressive. It was concise, but it was also very performant, and I could write everything in Swift rather than having to kind of get to some layer where it's like, oh, that's QDNN now, or that's MKL now, or whatever. So that got me pretty enthusiastic. And so the really exciting news, as I'm sure you've heard, is that Chris Latner himself is going to come and join us for the last two lessons, and we're going to teach Swift for deep learning together. So Swift for deep learning means Swift for TensorFlow. That's specifically the library that Chris and his team at Google are working on. We will call that S4TF when I write it down, because I couldn't be bothered typing Swift for TensorFlow every time. Swift for TensorFlow has some pros and cons. PyTorch has some pros and cons. And interestingly, they're the opposite of each other. PyTorch's and Python's pros are you can get stuff done right now with this amazing ecosystem, fantastic documentation and tutorials. It's just a really great practical system for solving problems. And to be clear, Swift for TensorFlow is not. It's not any of those things right now. It's really early. Almost nothing works. You have to learn a whole new language if you don't know Swift already. There's very little ecosystem. I'm not talking about Swift in particular, but the Swift for TensorFlow and Swift for deep learning and even Swift for numeric programming. I was kind of surprised when I got into it to find there was hardly any documentation about Swift for numeric programming, even though I was pretty delighted by the experience. People have had this view that Swift is kind of for iPhone programming. I guess that's kind of how it was marketed, right? But actually, it's an incredibly well-designed, incredibly powerful language. And then TensorFlow, I mean, to be honest, I'm not a huge fan of TensorFlow in general. I mean, if I was, we wouldn't have switched away from it. But it's getting a lot better. TensorFlow 2 is certainly improving. And the bits of it I particularly don't like are largely the bits that Swift for TensorFlow will avoid. But I think long-term, the kind of things I see happening, like there's this fantastic new kind of compiler project called MLIR, which Chris is also co-leading, which I think actually has the potential long-term to allow Swift to replace most of the yucky bits or maybe even all of the yucky bits of TensorFlow with stuff where Swift is actually talking directly to LLVM. You'll be hearing a lot more about LLVM in the coming, in the last two weeks, last two lessons. So it's the compiler infrastructure that kind of everybody uses, that Julia uses, that Clang uses. And Swift is this kind of almost this thin layer on top of it where when you write stuff in Swift, it's really easy for LLVM to compile it down to super-fast optimized code, which is like the opposite of Python. With Python, as you'll see today, we almost never actually write Python code. We write code in Python that gets turned into some other language or library, and that's what gets run. And this mismatch, this impedance mismatch between what I'm trying to write and what actually gets run makes it very hard to do the kind of deep dives that we're going to do in this course, as you'll see. It's kind of a frustrating experience. So I'm excited about getting involved in these very early days for impractical deep learning in Swift for TensorFlow, because it means that me and those of you that want to follow along can be the pioneers in something that I think is going to take over this field. We'll be the first in there. We'll be the ones that understand it really well. And in your portfolio, you can actually point at things and say, that library that everybody uses, I wrote that, or this piece of documentation that's on the Swift for TensorFlow website, I wrote that. That's the opportunity that you have. So let's put that aside for the next five weeks. And let's try to create a really high bar for the Swift for TensorFlow team to have to try to reimplement before six weeks' time. We're going to try to implement as much of fast AI and many parts of PyTorch as we can and then see if the Swift for TensorFlow team can help us build that in Swift in six weeks' time, five weeks' time. So the goal is to recreate fast AI from the foundations and much of PyTorch, like matrix multiplication, a lot of torch.nn, torch.optm, data set, data loader, from the foundations. And this is the game we're going to play. The game we're going to play is we're only allowed to use these bits. We're allowed to use pure Python, anything in the Python standard library, any non-data science modules, so like a requests library for HTTP or whatever. We can use PyTorch but only for creating arrays, random number generation, and indexing into arrays. We can use the fastai.datasets library because that's the thing that has access to MNIST and stuff, so we don't have to worry about writing our own HTTP stuff. And we can use matplotlib. We don't have to write our own plotting library. That's it. That's the game. So we're going to try and recreate all of this from that. And then the rules are that each time we have replicated some piece of fast AI or PyTorch from the foundations, we can then use the real version if we want to. So that's the game we're going to play. What I've discovered as I started doing that is that I started actually making things a lot better than fast AI. So I'm now realizing that fast AI version 1 is kind of a disappointment because there was a whole lot of things I could have done better. And so you'll find the same thing. As you go along this journey, you'll find decisions that I made or the PyTorch team made or whatever where you think, what if they'd made a different decision there? And you can maybe come up with more examples of things that we could do differently. So why would you do this? Well, the main reason is so that you can really experiment. So you can really understand what's going on in your models, what's really going on in your training. And you'll actually find that in the experiments that we're going to do in the next couple of classes, we're going to actually come up with some new insights. If you can create something from scratch yourself, you know that you understand it. And then once you've created something from scratch and you really understand it, then you can tweak everything. But you suddenly realize that there's not this object detection system and this ConvNet architecture and that optimizer. They're all like a kind of semi-arbitrary bunch of particular knobs and choices. And that it's pretty likely that your particular problem would want a different set of knobs and choices. So you can change all of these things. For those of you looking to contribute to open source, to fast AI or to PyTorch, you'll be able to. Because you'll understand how it's all built up. You'll understand what bits are working well, which bits need help. You know how to contribute tests or documentation or new features. Or create your own libraries. And for those of you interested in going deeper into research, you'll be implementing papers, which means you'll be able to correlate the code that you're writing with the paper that you're reading. And if you're a poor mathematician like I am, then you'll find that you'll be getting a much better understanding of papers that you might otherwise have thought were beyond you. And you realize that all those Greek symbols actually just map to pieces of code that you're already very familiar with. So there are a lot of opportunities in part one to blog and to do interesting things. But the opportunities are much greater now. In part two, you can be doing homework that's actually at the cutting edge. Actually doing experiments people haven't done before. Making observations people haven't made before. Because you're getting to the point where you're a more competent deep learning practitioner than the vast majority that are out there. And we're kind of looking at stuff that other people haven't looked at before. So please try doing lots of experiments, particularly in your domain area. And consider writing things down. Even if, especially if, it's not perfect. So write stuff down for the you of six months ago. That's your audience. So I am going to be assuming that you remember the contents of part one. Which was these things. Here is the contents of part one. In practice, it's very unlikely you remember all of these things because nobody's perfect. So what I'm actually expecting you to do is as I'm going on about something which you're thinking I don't know what he's talking about, that you'll go back and watch the video about that thing. Don't just keep blasting forwards because I'm assuming that you already know the content of part one. Particularly if you're less confident about the second half of part one where we went a little bit deeper into what's an activation really and what's a parameter really and exactly how does SGD work. Particularly in today's lesson, I'm going to assume that you really get that stuff. So if you don't, then go back and relook at those videos. Go back to that SGD from scratch and take your time. I've kind of designed this course to keep most people busy up until the next course. So feel free to take your time and dig deeply. So the most important thing though is we're going to try and make sure that you can train really good models. And there are three steps to training a really good model. Step one is to create something with way more capacity you need and basically no regularization and overfit. So overfit means what? It means that your training loss is lower than your validation loss? No. No, it doesn't mean that. Remember it doesn't mean that. A well-fit model will almost always have training loss lower than the validation loss. Remember that overfit means you have actually personally seen your validation error getting worse. Okay? Until you see that happening, you're not overfitting. So step one is overfit and then step two is reduce overfitting and then step three, okay, there is no step three. Well, I guess step three is to visualize the inputs and outputs and stuff like that, right? That is to experiment and see what's going on. So one is pretty easy normally, right? Two is the hard bit. It's not really that hard, but it's basically these are the five things that you can do in order of priority. If you can get more data, you should. If you can do more data augmentation, you should. If you can use a more generalizable architecture, you should. And then if all those things are done, then you can start adding regularization like dropout or weight decay. But remember, at that point, you're reducing the effective capacity of your model, so it's less good than the first three things. And then last of all, reduce the architecture complexity. And most people, most beginners especially, start with reducing the complexity of the architecture, but that should be the last thing that you try. Unless your architecture is so complex that it's too slow for your problem. So that's a kind of a summary of what we want to be able to do that we learned about in part one. Okay. So we're going to be reading papers, which we didn't really do in part one. And papers look something like this, which if you're anything like me, that's terrifying. And I'm not going to lie. It's still the case that when I start looking at a new paper, every single time I think I'm not smart enough to understand this. I just can't get past that immediate reaction because I just look at this stuff and I just go, that's not something that I understand. But then I remember this is the Adam paper, and you've all seen Adam implemented in one cell of Microsoft Excel. Right? Like when it actually comes down to it, every time I do get to the point where I understand if an implement a paper, I go, oh my God, that's all it is. Right? So a big part of reading papers, especially if you're less mathematically inclined than I am, is just getting past the fear of the Greek letters. I'll say something else about Greek letters. There are lots of them. Right? And it's very hard to read something that you can't actually pronounce. Right? Because you're just saying to yourself, oh, squiggle bracket one plus squiggle one, g squiggle one minus squiggle. And it's like all the squiggles, you just get lost. Right? So believe it or not, it actually really helps to go and learn the Greek alphabet so you can pronounce alpha times one plus beta one. Right? Suddenly you can start talking to other people about it. You can actually read it out loud. It makes a big difference. So learn to pronounce the Greek letters. Note that the people that write these papers are generally not selected for their outstanding clarity of communication. Right? So you will often find that there will be a blog post or a tutorial that does a better job of explaining the concept than the paper does. So don't be afraid to go and look for those as well. But do go back to the paper. Right? The paper is the one that's hopefully got it mainly right. Okay. One of the tricky things about reading papers is the equations have symbols and you don't know what they mean and you can't Google for them. So a couple of good resources if you see symbols you don't recognize. Wikipedia has an excellent list of mathematical symbols page that you can scroll through. And even better, DTechify is a website where you can draw a symbol you don't recognize and it uses the power of machine learning to find similar symbols. There are lots of symbols that look a bit the same so you will have to use some level of judgment. Right? But the thing that it shows here is the LaTeX name and you can then Google for the LaTeX name to find out what that thing means. Okay. So let's start. Here's what we're going to do over the next couple of lessons. We're going to try to create a pretty competent modern CNN model. And we actually already have this bit because we did that in the last course. Right? We already have our layers for creating a ResNet. We actually got a pretty good result. So we just have to do all these things. Okay? To get us from here to here. That's just the next couple of lessons. After that we're going to go a lot further. Right? So today we're going to try to get to at least the point where we've got the backward pass going. Right? So remember we're going to build a model that takes an input array and we're going to try and create a simple fully connected network. Right? So we're going to build one hidden layer. So we're going to start with some input, do a matrix multiply, do a value, do a matrix multiply, do a loss function. Okay? And so that's a forward pass and that will tell us our loss. And then we will calculate the gradients of the weights and biases with respect to the loss. Sorry, of the loss with respect to the weights and biases in order to basically multiply them by some learning rate which we will then subtract off the parameters to get our new set of parameters. And we'll repeat that lots of times. So to get to our fully connected backward pass we will need to first of all have the fully connected forward pass. And the fully connected forward pass means we will need to have some initialized parameters and we'll need a value and we will also need to be able to do matrix multiplication. So let's start there. So let's start at 00exports notebook. And what I'm showing you here is how I'm going to go about building up our library in Jupyter Notebooks. A lot of very smart people have assured me that it is impossible to do effective library development in Jupyter Notebooks which is a shame because I've built a library in Jupyter Notebooks. So anyway, people will often tell you things are impossible but I will tell you my point of view which is that I've been programming for over 30 years and at the time I've been using Jupyter Notebooks to do my development I would guess I'm about two to three times more productive. I've built a lot more useful stuff in the last two or three years than I did beforehand. I'm not saying you have to do things this way either but this is how I develop and hopefully you find some of this useful as well. So I'll show you how. We need to do a couple of things. We can't just create one giant notebook with our whole library. Somehow we have to be able to pull out those little gems, those bits of code where we think oh this is good, let's keep this. We have to be able to pull that out into a package that we reuse. So in order to tell our system that here is a cell that I want you to keep and reuse I use this special comment hash export at the top of the cell. And then I have a program called notebook to script which goes through the notebook and finds those cells and puts them into a Python module. So let me show you. So if I run this cell and then I head over and notice I don't have to type all of o-o-exports because I have tab completion even for file names in Jupyter Notebook so o-o-tab is enough and I could either run this here or I could go back to my console and run it. So let's run it here. So that says converted exports.ipnb to nb-00. And what I've done is I've made it so that these things go into a directory called exp for exported modules and here is that nb-00 and there it is. So you can see other than a standard header it's got the contents of that one cell. So now I can import that at the top of my next notebook from exp nb-00 import star and I can create a test that that variable equals that value. So let's see. It does. And notice there's a lot of test frameworks around but it's not always helpful to use them. Like here we've created a test framework or the start of one. I've created a function called test which checks whether a and b return true or false based on this comparison function by using assert. And then I've created something called test equals which calls test passing in a and b and operator.equals. So if they're wrong assertion error equals test, test one. So we've been able to write a test which so far has basically tested that our little module exporter thing works correctly. We probably want to be able to run these tests somewhere other than just inside a notebook. So we have a little program called run notebook.py. You pass it the name of a notebook and it runs it. So I should save this one with our failing test so you can see it fail. So first time it passed and then I make the failing test and you can see here it is assertion error and tells you exactly where it happened. So we now have an automatable unit testing framework in our Jupyter notebook. I'll point out that the contents of these two Python scripts, let's look at them. So the first one was run notebook.py which is our test runner. There is the entirety of it. So there's a thing called nb format. So if you conda install nb format then it basically lets you execute a notebook and it prints out any errors. So that's the entirety of that. You'll notice that I'm using a library called fire. Fire is a really neat library that lets you take any function like this one and automatically converts it into a command line interface. So here I've got a function called run notebook and then it says fire run notebook. So if I now go Python run notebook then it says oh this function received no value, path, usage run notebook, path. So you can see that what it did was it converted my function into a command line interface. It is really great and it handles things like optional arguments and classes and it's super useful particularly for this kind of Jupyter first development because you can grab stuff that's in Jupyter and turn it into a script often by just copying and pasting the function or exporting it and then just add this one line of code. The other one, notebook to script, is not much more complicated. It's one screen of code which again the main thing here is to call fire which calls this one function. And you'll see basically it uses JSON.load because notebooks are JSON. The reason I mention this to you is that Jupyter notebook comes with this whole kind of ecosystem of libraries and APIs and stuff like that and on the whole I hate them. I find it's just JSON. I find that just doing JSON.load is the easiest way and specifically I build my Jupyter notebook infrastructure inside Jupyter notebooks. So here's how it looks. Import JSON, JSON.load, this file and it gives you an array and there's the contents of source, my first row. So if you do want to play around with doing stuff in Jupyter notebook it's a really great environment for kind of automating stuff and running scripts on it and stuff like that. So there's that. So that's the entire contents of our development infrastructure. We now have a test. Let's make it pass again. One of the great things about having unit tests in notebooks is that when one does fail you open up a notebook which can have pros saying this is what this test does, it's implementing this part of this paper, you can see all the stuff above it that's setting up all the context for it, you can check in each input and output. So it's a really great way to fix those failing tests because you've got the whole truly literate programming experience all around it. So I think that works great. So before we start doing matrix multiply we need some matrices to multiply. So these are some of the things that are allowed by our rules. We've got some stuff that's part of the standard library. This is the fast AI datasets library to let us grab the datasets we need. The more standard library stuff, we're only allowed to use this for indexing and array creation, map plot lib. There we go. So let's grab MNIST. So to grab MNIST we can use fast AI datasets to download it and then we can use the standard library gzip to open it and then we can pickle.loaded. So in Python the kind of standard serialization format is called pickle and so this MNIST version on deeplearning.net is stored in that format and so it basically gives us a tuple of tuples of datasets like so, X train, Y train, X valid, Y valid. It actually contains NumPy arrays but NumPy arrays are not allowed in our foundations so we have to convert them into tensors. So we can just use the Python map to map the tensor function over each of these four arrays to get back four tensors. A lot of you will be more familiar with NumPy arrays than PyTorch tensors but everything you can do in NumPy arrays you can also do in PyTorch tensors but you can also do it on the GPU and have all this nice deep learning infrastructure. So it's a good idea to get used to using PyTorch tensors in my opinion. So we can now grab the number of rows and number of columns in the training set and we can take a look. So here's MNIST, hopefully pretty familiar to you already. It's 50,000 rows by 784 columns and the Y data looks something like this. The Y shape is just 50,000 rows and the minimum and maximum of the dependent variable is 0 to 9. So hopefully that all looks pretty familiar. So let's add some tests. So the N should be equal to the shape of the Y, should be equal to 50,000. The number of columns should be equal to 28 by 28 because that's how many pixels there are in MNIST and so forth. And we're just using that test equals function that we created just above. So now we can plot it. So we've got a float tensor and we pass that to imshow after casting it to a 28 by 28..view is really important. I think we saw it a few times in part one but get very familiar with it. This is how we reshape our 768 long vector into a 28 by 28 matrix that's suitable for plotting. Okay, so there's our data and let's start by creating a simple linear model. So for a linear model, we're going to need to basically have something where Y equals AX plus B and so our A will be a bunch of weights. So it's going to be to be 784 by 10 matrix because we've got 784 coming in and 10 going out. So that's going to allow us to take in our independent variable and map it to something which we compare to our dependent variable. And then for our bias, we'll just start with 10 zeros. So if we're going to do Y equals AX plus B, then we're going to need a matrix multiplication. So almost everything we do in deep learning is basically matrix multiplication or a variant thereof affine functions as we call them. So you want to be very comfortable with matrix multiplication. So this cool website matrixmultiplication.xyz shows us exactly what happens when we multiply these two matrices. So we take the first column of the first row and the first row and we multiply each of them element-wise and then we add them up and that gives us that one. And now you can see we've got two sets going on at the same time so that gives us two more and then two more and then the final one. And that's our matrix multiplication. So we have to do that. So we've got a few loops going on. We've got the loop of this thing scrolling down here. We've got the loop of these two rows, they're really columns so we flip them around, and then we've got the loop of the multiply and add. So we're going to need three loops. And so here's our three loops. And notice this is not going to work unless the number of rows here and the number of columns here, sorry, the number of columns here and the number of rows here are the same. So let's grab the number of rows and columns of A and the number of rows and columns of B and make sure that AC equals BR, just to double check. And then let's create something of size AR by BC because the size of this is going to be AR by BC with zeros in and then have our three loops. And then right in the middle let's do that. So right in the middle the result in I, J is going to be AIK by BKJ. And this is the vast majority of what we're going to be doing in deep learning. So get very, very comfortable with that equation because we're going to be seeing it in three or four different variants of notation and style in the next few minutes. And it's got kind of a few interesting things going on. This I here appears also over here. This J here appears also over here. And then the K in the loop appears twice. And look, it's got to be the same number in each place because this is the bit where we're multiplying together the element-wise things. So there it is. So let's create a nice small version. Grab the first five rows of the validation set. We'll call that M1. And grab our weight matrix. We'll call that M2. Grab our weight matrix. Call that M2. And then is this sizes five because we just grabbed the first five rows. Five by 784, okay, multiplied by 784 by 10. So these match as they should. And so now we can go ahead and do that matrix multiplication. And it's done. Okay. And it's given us 50,000, sorry, length of, sorry, it's given us T1.shape, as you would expect, a five rows by 10 column output. And it took about a second. So it took about a second for five rows. Our data set MNIST is 50,000 rows. So it's going to take about 50,000 seconds to do a single matrix multiplication in Python. So imagine doing MNIST where every layer for every pass took about 10 hours. Not going to work. Right? So that's why we don't really write things in Python. Like when we say Python is too slow, we don't mean 20% too slow. We mean thousands of times too slow. So let's see if we can speed this up by 50,000 times. Because if we could do that, it might just be fast enough. So the way we speed things up is we start in the innermost loop and we make each bit faster. So the way to make Python faster is to remove Python. And the way we remove Python is by passing our computation down to something that's written in something other than Python, like PyTorch. Because PyTorch behind the scenes is using a library called A10. And so we want to get this going down to the A10 library. So the way we do that is to take advantage of something called element-wise operations. So you've seen them before. For example, if I have two tensors, A and B, both of length 3, I can add them together. And when I add them together, it simply adds together the corresponding items. So that's called element-wise addition. Or I could do less than, in which case it's going to do element-wise less than. So what percentage of A is less than the corresponding item of B? A less than B dot float dot mean. We can do element-wise operations on things not just of rank 1, but we could do it on a rank 2 tensor, also known as a matrix. So here's our rank 2 tensor, M. Let's calculate the Frobenius norm. How many people know about the Frobenius norm? Right, almost nobody. And it looks kind of terrifying, but actually it's just this. It's a matrix times itself dot sum dot square root. So here's the first time we're going to start trying to translate some equations into code to help us understand these equations. So this says, when you see something like A with two sets of double lines around it and an F underneath, that means we are calculating the Frobenius norm. So anytime you see this, and you will, it actually pops up semi-regularly in deep learning literature. When you see this, what it actually means is this function. As you probably know, capital sigma means sum. And this says we're going to sum over two for loops. The first for loop will be called I and will go from 1 to N. And the second for loop will also be called J and will also go from 1 to N. And in these nested for loops, we're going to grab something out of a matrix A, that position IJ, we're going to square it, and then we're going to add all of those together, and then we'll take the square root. Which is that. Now I have something to admit to you. I can't write LaTeX. And yet I did create this Jupyter notebook, so it looks a lot like I created some LaTeX, which is certainly the impression I like to give people sometimes. But the way I actually write LaTeX is I find somebody else who wrote it, and then I copy it. And so the way you do this most of the time is you Google for Frobenius norm, you find the wiki page for Frobenius norm, you click edit next to the equation, and you copy and paste it. So that's a really good way to do it. And check dollar signs or even two dollar signs around it. Two dollar signs make it a bit bigger. So that's way one to get equations. Method two is if it's in a paper on archive, did you know on archive you can click on download other formats in the top right, and then download source, and that will actually give you the original TeX source, and then you can copy and paste their LaTeX. So I'll be showing you a bunch of equations during these lessons, and I can promise you one thing, I wrote none of them by hand. So this one was stolen from Wikipedia. All right. So you now know how to implement the Frobenius norm from scratch in TensorFlow. You could also have written it, of course, as m.pal2. Now that would be illegal under our rules, right? We're not allowed to use pal yet, so that's why we did it that way. Okay. So that's just doing the element-wise multiplication of a rank two tensor with itself. One times one, two times two, three times three, et cetera. Okay. So that is enough information to replace this loop, right? Because this loop is just going through the first row of a and the first column of b and doing an element-wise multiplication and sum. So our new version is going to have two loops, not three. Here it is. So this is all the same. But now we've replaced the inner loop, and you'll see that basically it looks exactly the same as before, but where it used to say k, it now says colon. So in PyTorch and NumPy, colon means the entirety of that axis, right? So Rachel helped me remember the order of rows and columns when we talk about matrices, which is the song. Row by column, row by column. Yeah. So that's the song. So i is the row number. Okay. So this is row number i, the whole row. And this is column number j, the whole column. So multiply all of column j by all of row i, and that gives us back a rank one tensor, which we add up. Okay. That's exactly the same as what we had before. And so now that takes 1.45 milliseconds. We've removed one line of code, and it's 178 times faster. Okay. So we successfully got rid of that inner loop. And so now this is running in C, right? We didn't really write Python here. We wrote kind of a Python-ish thing that said, please call this C code for us. And that made it 178 times faster. Let's check that it's right. We can't really check that it's equal because floats sometimes change slightly, depending on how you calculate them. So instead, let's create something called near, which calls torch.allClose to some tolerance. And then we'll create a testNear function that calls our test function using our near comparison. And let's see. Yep. Passes. Okay. So we've now got our matrix multiplication at 65 microseconds. Now we need to get rid of this loop, because now this is our innermost loop. And to do that, we're going to have to use something called broadcasting. Who here is familiar with broadcasting? About half. Okay. That's what I figured. So broadcasting is about the most powerful tool we have in our toolbox for writing code in Python that runs at C speed. Or in fact, with PyTorch, if you put it on the GPU, it's going to run at CUDA speed. It allows us to get rid of nearly all of our loops, as you'll see. The term broadcasting comes from NumPy, but the idea actually goes all the way back to APL from 1962. And it's a really, really powerful technique. A lot of people consider it a different way of programming, where we get rid of all of our for loops and replace them with these implicit broadcasted loops. In fact, you've seen broadcasting before. Remember our tensor A, which contains 10, 6, 4. If you say A greater than 0, then on the left-hand side you've got to rank one tensor. On the right-hand side you've got a scalar, and yet somehow it works. And the reason why is that this value 0 is broadcast three times. It becomes 0, 0, 0, and then it does an element-wise comparison. So every time, for example, you've normalized a data set by subtracting the mean and divided by the standard deviation in kind of one line like this, you've actually been broadcasting. You're broadcasting a scalar to a tensor. So A plus 1 also broadcasts a scalar to a tensor. And the tensor doesn't have to be rank one. Here we can multiply our rank two tensor by two. So there's the simplest kind of broadcasting. And any time you do that, you're not operating at Python speed. You're operating at C or CUDA speed. So that's good. We can also broadcast a vector to a matrix. So here's a rank one tensor C. And here's our previous rank two tensor M. So M's shape is 3, 3. C's shape is 3. And yet M plus C does something. What did it do? 10, 20, 30 plus 1, 2, 3. 10, 20, 30 plus 4, 5, 6. 10, 20, 30 plus 7, 8, 9. It's broadcast this row across each row of the matrix. And it's doing that at C speed. So this, there's no loop, but it sure looks as if there was a loop. C plus M does exactly the same thing. So we can write C.expandAsM. And it shows us what C would look like when broadcast to M. 10, 20, 30, 10, 20, 30, 10, 20, 30. So you can see M plus T is the same as C plus M. So basically it's creating or acting as if it's creating this bigger rank two tensor. So this is pretty cool because it now means that any time we need to do something between a vector and a matrix, we can do it at C speed with no loop. Now you might be worrying though that this looks pretty memory intensive if we're kind of turning all of our rows into big matrices. But fear not, because you can look inside the actual memory used by PyTorch. So here T is a 3x3 matrix, but T.storage tells us that actually it's only storing one copy of that data. T.shape tells us that T knows it's meant to be a 3x3 matrix. And T.stride tells us that it knows that when it's going from column to column, it should take one step through the storage. But when it goes from row to row, it should take zero steps. And so that's how calm it repeats 10, 20, 30, 10, 20, 30, 10, 20, 30. So this is a really powerful thing that appears in pretty much every linear algebra library you'll come across is this idea that you can actually create tensors that behave like higher rank things than they're actually stored as. So this is really neat. It basically means that this broadcasting functionality gives us C-like speed with no additional memory overhead. Okay. What if we wanted to take a column instead of a row? So in other words, a rank 2 tensor of shape 3,1. We can create a rank 2 tensor of shape 3,1 from a rank 1 tensor by using the unsqueeze method. Unsqueeze adds an additional dimension of size 1 to wherever we ask for it. So unsqueeze 0, let's check this out, unsqueeze 0 is of shape 1,3. It puts the new dimension in position 1. Unsqueeze 1 is shape 3,1. It creates the new axis in position 1. So unsqueeze 0 looks a lot like C, right? But now rather than being a rank 1 tensor, it's now a rank 2 tensor. See how it's got two square brackets around it? Right? See how its size is 1,3? Right? As more interestingly, C.unsqueeze1 now looks like a column. It's also a rank 2 tensor, but it's three rows by one column. Why is this interesting? Because we can say, well actually before we do, I'll just mention writing.unsqueeze is kind of clunky. So PyTorch and NumPy have a neat trick, which is that you can index into an array with a special value none, and none means squeeze a new axis in here please. So it adds, so you can see that C none colon is exactly the same shape 1,3 as C.unsqueeze0. And C colon, none is exactly the same shape as C.unsqueeze1. So I hardly ever use unsqueeze unless I'm like particularly trying to demonstrate something for teaching purposes. I pretty much always use none. Apart from anything else, I can add additional axes this way. Or else with unsqueeze, you have to go unsqueeze, unsqueeze, unsqueeze. So this is handy. So why did we do all that? The reason we did all that is because if we go C colon, common none, so in other words we turn it into a column, kind of a columnar shape, so it's now of shape 3,1, dot expand as, it doesn't now say 10, 20, 30, 10, 20, 30, 10, 20, 30, but it says 10, 10, 10, 20, 20, 20, 30, 30, 30. So in other words, it's getting broadcast along columns instead of rows. So as you might expect, if I take that and add it to M, then I get the result of broadcasting the column. So it's now not 11, 22, 33, but 11, 12, 13. So everything makes more sense in Excel. Let's look. So here's broadcasting in Excel. Here is a 1, 3 shape, rank 2 tensor. So we can use the rows and columns functions in Excel to get the rows and columns of this object. Here is a 3 by 1 rank 2 tensor. Again, rows and columns. And here is a 2 by 2 rank, sorry, 3 by 3 rank 2 tensor. As you can see, rows by columns. So here's what happens if we broadcast this to be the shape of M. And here is the result of that C plus M. And here's what happens if we broadcast this to that shape. And here is the result of that addition. There it is, 11, 12, 13, 24, 25, 26. So basically what's happening is when we broadcast, it's taking the thing which has a unit axis and is kind of effectively copying that unit axis so it is as long as the larger tensor on that axis. But it doesn't really copy it. It just pretends as if it's been copied. So we can use that to get rid of our loop. So this was the loop we were trying to get rid of, going through each of range BC. And so here it is. So now we are not anymore going through that loop. So now rather than setting CI, J, we can set the entire row of CI. This is the same as CI, colon. Anytime there's a trailing colon in NumPy or PyTorch, you can delete it, optionally. You don't have to. So before we had a few of those. Let's see if we can find one. Here's one, comma, colon. So I'm claiming we could have got rid of that. Let's see. Yep. Still torch size 1, 3. And similar thing, anytime you see any number of colon commas at the start, you can replace them with a single ellipsis. Which in this case doesn't save us anything because there's only one of these. But if you've got a really high-ranked tensor, that can be super convenient. Especially if you want to do something where the rank of the tensor could vary. You don't know how big it's going to be ahead of time. So we're going to set the whole of row i, and we don't need that colon, although it doesn't matter if it's there. And we're going to set it to the whole of row i of a. And then now that we've got row i of a, that is a rank 1 tensor. So let's turn it into a rank 2 tensor. So it's now got a new, and see how this is minus 1? So minus 1 always means the last dimension. So how else could we have written that? We could also have written it like that, with a special value none. So this is of now length, whatever the size of a is, which is ar. So it's of length, it's of shape ar, 1. So that is a rank 2 tensor. And b is also a rank 2 tensor. That's the entirety of our matrix. And so this is going to get broadcast over this. It is exactly what we want. We want it to get rid of that loop. And then, so that's going to return, because it broadcasts, it's actually going to return a rank 2 tensor. And then that rank 2 tensor, we want to sum it up over the rows. And so sum, you can give it a dimension argument to say which axis to sum over. So this one is kind of our most mind-bending broadcast of the lesson. So I'm going to leave this as a bit of homework for you to go back and convince yourself as to why this works. So maybe put it in Excel, or do it on paper, if it's not already clear to you why this works. But this is sure handy, because before we were broadcasting that, we were at 1.39 milliseconds. After using that broadcasting, we're down to 250 microseconds. So at this point, we're now 3,200 times faster than Python. And it's not just speed. Once you get used to this style of coding, getting rid of these loops, I find, really reduces a lot of errors in my code. It takes a while to get used to, but once you're used to it, it's a really comfortable way of programming. Once you get to kind of higher ranked tensors, this broadcasting can start getting a bit complicated. So what you need to do instead of trying to keep it all in your head is apply the simple broadcasting rules. Here are the rules. I've listed them here. You can find them in NumPy and PyTorch and TensorFlow. It's all the same rules. What we do is we compare the shapes element-wise. So let's look at a slightly interesting example. Here is our rank one tensor C, and let's insert a leading unit axis. So this is a shape 1, 3. See how there's two square brackets? And here's the version with a... Sorry, this one's a proceeding axis. This one's a trailing axis. So this is a shape 3, 1. And we should take a look at that. So just to remind you, that looks like a column. What if we went C, none, comma, colon, times C, colon, comma, none? What on earth is that? And so let's go back to Excel. Here's our row version. Here's our column version. What happens is it says, okay, you want to multiply this by this element-wise, right? This is not the at sign. This is asterisk, so element-wise multiplication. It broadcasts this to be the same number of rows as that, like so. And it broadcasts this to be the same number of columns as that, like so. And then it simply multiplies those together. That's it, right? So the rule that it's using... You can do the same thing with greater than, right? The rule that it's using is, let's look at the two shapes, 1, 3, and 3, 1, and see if they're compatible. They're compatible if element-wise they're either the same number or one of them is 1. So in this case, 1 is compatible with 3 because one of them is 1. And 3 is compatible with 1 because one of them is 1. And so what happens is, if it's 1, that dimension is broadcast to make it the same size as the bigger one. So 3, 1 became 3, 3. So this one was multiplied three times down the rows, and this one was multiplied three times down the columns. And then there's one more rule, which is that they don't even have to be the same rank. So something that we do a lot with image normalization is we normalize images by channel. So you might have an image which is 256 by 256 by 3, and then you've got the per channel mean, which is just a rank 1 tensor of size 3. They're actually compatible because what it does is anywhere that there's a missing dimension, it inserts a 1 there at the start. It inserts leading dimensions, inserts a 1. So that's why actually you can normalize by channel with no lines of code. Mind you, in PyTorch, it's actually channel by height by width, so it's slightly different. But this is the basic idea. So this is super cool. We're going to take a break, but we're getting pretty close. My goal was to make our Python code 50,000 times faster. We're up to 4,000 times faster. And the reason this is really important is because if we're going to be doing our own stuff, like building things that people haven't built before, we need to know how to write code that we can write quickly and concisely, but operates fast enough that it's actually useful. And so this broadcasting trick is perhaps the most important trick to know about. So let's have a six-minute break, and I'll see you back here at 8 o'clock. So broadcasting, you know, when I first started teaching deep learning here, and I asked how many people are familiar with broadcasting. This is back when we used to do it in Theano. Almost no hands went up, so I used to kind of say this is like my secret magic trick. I think it's really cool. It's kind of really cool that now half of you have already heard of it, and it's kind of sad because it's now not my secret magic trick. It's like, here's something half of you already knew. But the other half of you, there's a reason that people are learning this quickly, and it's because it's super cool. Here's another magic trick. How many people here know Einstein summation notation? Okay, good. Good. Almost nobody. So it's not as cool as broadcasting, but it is still very, very cool. Let me show you, right? And this is a technique which I don't think it was invented by Einstein. I think it was popularized by Einstein as a way of dealing with these high-rank tensor kind of reductions that he used in the general relativity, I think. Here's the trick. This is our, the innermost part of our original matrix multiplication for loop. Remember? Right? Here's the version when we removed the innermost loop and replaced it with an element-wise product. And you'll notice that what happened was that the repeated K got replaced with a colon. Okay. So watch this. What if I move, okay, so first of all, let's get rid of the names of everything. And let's move the, let's move this to the end and put it after an arrow. And let's keep getting rid of the names of everything. And get rid of the commas and replace bases with commas. Okay. And now I just created Einstein summation notation. So Einstein summation notation is like a mini-language. You put it inside a string, right? And what it says is, however many, so there's an arrow, right? And on the left of the arrow is the input and on the right of the arrow is the output. How many inputs do you have? Well they're delimited by comma. So in this case there's two inputs. The inputs, what's the rank of each input? It's however many letters there are. So this is a rank two input and this is another rank two input and this is a rank two output. How big are the inputs? This is one is the size i by k. This one is the size k by j. And the output is of size i by j. When you see the same letter appearing in different places, it's referring to the same size dimension. So this is of size i. The output is always has, also has i rows. This has j columns. The output also has j columns. All right. So we know how to go from the input shape to the output shape. What about the k? You look for any place that a letter is repeated and you do a dot product over that dimension. In other words it's just like the way we replaced k with colon. Okay. So this is going to create something of size i by j by doing dot products over these shared k's which is matrix multiplication. So that's how you write matrix multiplication with Einstein summation notation. And then all you just do is go torch dot einsum. If you go to the PyTorch einsum docs or docs of most of the major libraries, you can find all kinds of cool examples of einsum. You can use it for transpose, diagonalization, tracing, all kinds of things, batch-wise versions of just about everything. So for example, if PyTorch didn't have batch-wise matrix multiplication, I just created it. There's batch-wise matrix multiplication. So there's all kinds of things you can kind of invent. And often it's quite handy if you kind of need to put a transpose in somewhere or tweak things to be a little bit different, you can use this. So that's Einstein summation notation. Here's MatMul, and that's now taken us down to 57 microseconds. So we're now 16,000 times faster than Python. I will say something about einsum. It's a travesty that this exists because we've got a little mini-language inside Python in a string. I mean, that's horrendous. You shouldn't be writing programming languages inside a string. This is as bad as a regex. Like regular expressions are also mini-languages inside a string. You want your languages to be typed and have IntelliSense and be things that you can extend. This mini-language does. It's amazing, but there's so few things that it actually does. What I actually want to be able to do is create any kind of arbitrary combination of any axes and any operations and any reductions I like in any order in the actual language I'm writing in. So that's actually what APL does. That's actually what J and K do. These are the J and K are the languages that kind of came out of APL. This is a series of languages that have been around for about 60 years, and everybody's pretty much failed to notice. My hope is that things like Swift and Julia will give us this, like the ability to actually write stuff in actual Swift and actual Julia that we can run in an actual debugger and use an actual profiler and do arbitrary stuff that's really fast. Finally, Swift seems like it might go even quite a bit faster than Einsum in an even more flexible way thanks to this new compiler infrastructure called MLIR, which actually builds off this. There's some really exciting new research in the compiler world. It's kind of been coming over the last few years, particularly coming out of a system called Halide, which is H-A-L-I-D-E, which is this super cool language that basically showed it's possible to create a language that can create very, very, very totally optimized linear algebra computations in a really flexible, convenient way. Since that came along, there's been all kinds of cool research using these techniques, like something called polyhedral compilation, which kind of have the promise that we're going to be able to hopefully, within the next couple of years, write Swift code that runs as fast as the next thing I'm about to show you. Because the next thing I'm about to show you is the PyTorch operation called Matmul. And Matmul takes 18 microseconds, which is 50,000 times faster than Python. Why is it so fast? Well, if you think about what you're doing when you do a matrix multiply of something that's like 50,000 by 768 by 768 by 10, these are things that aren't going to fit in the cache in your CPU. So if you do the standard thing of going down all the rows and across all the columns, by the time you've got to the end and you go back to exactly the same column again, it forgot the contents and has to go back to RAM and pull it in again. So if you're smart, what you do is you break your matrix up into little smaller matrices and you do a little bit at a time. And that way everything is kind of in cache and it goes super fast. Now normally to do that, you have to write assembly language code, particularly if you want to get it all running in your vector processor. And that's how you get these 18 microseconds. So currently, to get a fast matrix multiply, things like PyTorch, they don't even write it themselves. They basically push that off to something called a BLAS, B-L-A-S. A BLAS is a basic linear algebra subprograms library where companies like Intel and AMD and Nvidia write these things for you. So you can look up Kublas, for example, and this is like Nvidia's version of BLAS. Or you could look up MKL and this is Intel's version of BLAS and so forth. And this is kind of awful because the program is limited to this subset of things that your BLAS can handle. And to use it, you don't really get to write it in Python. You kind of have to write the one thing that happens to be turned into that pre-existing BLAS call. So this is why we need to do better. And there are people working on this and there are people actually in Chris Latner's team working on this. You know, there's some really cool stuff. Like there's something called tensor comprehensions, which is like really originally came in PyTorch and I think they're now inside Chris's team at Google, where people are basically saying, hey, here are ways to compile these much more general things. And this is what we want as more advanced practitioners. Anyway, for now, in PyTorch world, we're stuck at this level, which is to recognize there are some things, this is three times faster than the best we can do in an even vaguely flexible way. And if we compare it to the actually flexible way, which is broadcasting, we had 254, yeah, so still over 10 times better. So, wherever possible today, we want to use operations that are predefined in our library, particularly for things that kind of operate over lots of rows and columns, the things we're kind of dealing with this memory caching stuff is going to be complicated. So keep an eye out for that. Matrix multiplication is so common and useful that it's actually got its own operator, which is at. These are actually calling the exact same code, so they're the exact same speed. At is not actually just matrix multiplication. At covers a much broader array of kind of tensor reductions across different levels of axes. So it's worth checking out what MatBowl can do, because often it'll be able to handle things like batch-wise or matrix versus vectors. Don't think of it as being only something that can do rank two by rank two, because it's a little bit more flexible. Okay. So, that's that. We have matrix multiplication, and so now we're allowed to use it. And so we're going to use it to try to create a forward pass, which means we first need ReLU and matrix initialization, because remember, a model contains parameters which start out randomly initialized, and then we use the gradients to gradually update them with SGD. So let's do that. So here is O2. So let's start by importing NB01, and I just copied and pasted the three lines we used to grab the data, and I'm just going to pop them into a function so we can use it to grab MNIST when we need it. And now that we know about broadcasting, let's create a normalization function that takes our tensor and subtracts the means and divides by the standard deviation. So now let's grab our data, okay, and pop it into XYXY. Let's grab the mean and standard deviation, and notice that they're not zero and one. Why would they be? Right? But we want them to be zero and one. We're going to be seeing a lot of why we want them to be zero and one over the next couple of lessons, but for now, let's just take my word for it. We want them to be zero and one. So that means that we need to subtract the mean, divide by the standard deviation, but not for the validation set. We don't subtract the validation set's mean and divide by the validation set's standard deviation, because if we did, those two data sets would be on totally different scales. So if the training set was mainly green frogs and the validation set was mainly red frogs, right, then if we normalize with the validation set's mean and variance, we would end up with them both having the same average coloration, and we wouldn't be able to tell the two apart, right? So that's an important thing to remember when normalizing is to always make sure your validation and training set normalized in the same way. So after doing that, our mean is pretty close to zero, and our standard deviation is very close to one, and it would be nice to have something to easily check that these are true. So let's create a test near zero function, and then test that the mean is near zero, and one minus the standard deviation is near zero, and that's all good. Let's define n and m and c the same as before, so the size of the training set and the number of activations we're going to eventually need in our model being c, and let's try to create our model. Okay. So the model is going to have one hidden layer, and normally we would want the final output to have 10 activations because we would use cross-entropy against those 10 activations, but to simplify things for now, we're going to not use cross-entropy, we're going to use mean squared error, which means we're going to have one activation, okay? Which makes no sense from a modeling point of view, we'll fix that later, but just to simplify things for now. So let's create a simple neural net with a single hidden layer and a single output activation which we're going to use mean squared error. So let's pick a hidden size, so the number of hidden will make 50, okay? So our two layers, we're going to need two weight matrices and two bias vectors. So here are our two weight matrices, w1 and w2, so they're random numbers, normal random numbers of size m, which is the number of columns, 768, by nh, number of hidden, and then this one is nh by 1. Now our inputs now are mean 0, standard deviation 1, the inputs to the first layer. We want the inputs to the second layer to also be mean 0, standard deviation 1. Well, how are we going to do that? Because if we just grab some normal random numbers and then we define a function called linear, this is our linear layer, which is x by w plus b, and then create t, which is the activation of that linear layer with our validation set and our weights and biases. We have a mean of minus 5 and a variance, a standard deviation of 27, which is terrible. So I'm going to let you work through this at home, but once you actually look at what happens when you multiply those things together and add them up, as you do in matrix multiplication, you'll see that you're not going to end up with 0, 1. But if instead you divide by square root m, so root 768, then it's actually damn good. So this is a simplified version of something which PyTorch calls a Keiming initialization, named after Keiming He, who wrote a paper or was the lead writer of a paper that we are looking at, look at in a moment. So the weights, rand n, gives you random numbers with a mean of 0 and a standard deviation of 1. So if you divide by root m, it will have a mean of 0 and a standard deviation of 1 on root m. So we can test those. So in general, normal random numbers of mean 0 and standard deviation of 1 over root of whatever this is, so here it's m and here it's nH, will give you an output of 0, 1. Now this may seem like a pretty minor issue, but as we're going to see in the next couple of lessons, it's like the thing that matters when it comes to training neural nets. It's actually, in the last few months, people have really been noticing how important this is. There are things like fix-up initialization, where these folks actually trained a 10,000-layer deep neural network with no normalization layers, just by basically doing careful initialization. So people are really spending a lot of time now thinking, like, okay, how we initialize things is really important. And we've had a lot of success with things like one-cycle training and superconvergence, which is all about what happens in those first few iterations, and it really turns out that it's all about initializations. So we're going to be spending a lot of time studying this in depth. So the first thing I'm going to point out is that this is actually not how our first layer is defined. Our first layer is actually defined like this. It's got a ReLU on it. So first let's define ReLU. So ReLU is just grab our data and replace any negatives with zeros. That's all ClampMin means. Now, there's lots of ways I could have written this, but if you can do it with something that's like a single function in PyTorch, it's almost always faster because that thing's generally written in C for you. So try to find the thing that's as close to what you want as possible. There's a lot of functions in PyTorch. So that's a good way of implementing ReLU. And unfortunately, that does not have the mean zero and standard deviation of one. Why not? Where's my stylus? Okay. So we had some data that had a mean of zero and a standard deviation of one. And then we took everything that was smaller than zero and removed it. So that obviously does not have a mean of zero and it obviously now has about half the standard deviation that it used to have. So this was one of the fantastic insights and one of the most extraordinary papers of the last few years. It was the paper from the 2015 ImageNet winners led by the person we've mentioned, Kai Ming He. Kai Ming at that time was at Microsoft Research. And this is full of great ideas. Getting papers from competition winners is a very, very good idea because they tend to be, you know, normal papers will have like one tiny tweak that they spend pages and pages trying to justify why they should be accepted into NeurIPS. Whereas competition winners have 20 good ideas and only time to mention them in passing. This paper introduced us to ResNets, PreLU layers, and Kai Ming initialization amongst others. So here is section 2.2. Section 2.2, initialization of filter weights or rectifiers. What's a rectifier? A rectifier is a rectified linear unit or rectifier network is any neural network with rectifier linear units in it. This is only 2015 but it already reads like something from another age in so many ways. Like even the word rectifier units and traditional sigmoid activation networks, no one uses sigmoid activations anymore. So a lot's changed since 2015. So when you read these papers, you kind of have to keep these things in mind. They describe how, what happens if you train very deep models with more than eight layers. So things have changed, right? But anyway, they said that in the old days, people used to initialize these with random Gaussian distributions. So this is a Gaussian distribution. It's just a fancy word for normal or bell-shaped. And when you do that, they tend to not train very well. And the reason why they point out, or actually, Loro and Benjio pointed out, let's look at that paper. So you'll see two initializations come up all the time. One is either Kai Ming or He initialization, which is this one, or the other you'll see a lot is Gloro or Xavier initialization, again, named after Xavier Gloro. This is a really interesting paper to read. It's a slightly older one. It's from 2010, been massively influential. And one of the things you'll notice if you read it is it's very readable. It's very practical. And the actual final result they come up with is it's incredibly simple. And we're actually going to be re-implementing much of the stuff in this paper over the next couple of lessons. But basically, they describe one suggestion for how to initialize neural nets. And they suggest this particular approach, which is root 6 over the number of input filters plus the number of output filters. And so what happened was Kai Ming, He, and that team pointed out that that does not account for the impact of a relu, the thing that we just noticed. So this is a big problem. If your variance halves each layer and you have a massive deep network with like eight layers, then you've got 1 over 2 to the 8 squishes. But by the end, it's all gone. And if you want to be fancy like the fix-up people with 10,000 layers, forget it. Your gradients have totally disappeared. So this is totally unacceptable. So they do something super genius smart. They replace the 1 on the top with a 2 on the top. So this, which is not to take anything away from this, it's a fantastic paper. But in the end, the thing they do is to stick a 2 on the top. So we can do that by taking that exact equation we just used and sticking a 2 on the top. And if we do, then the result is much closer. It's not perfect, but it actually varies quite a lot. It's really random. Sometimes it's quite close, sometimes it's further away, but it's certainly a lot better than it was. So that's good. And it's really worth reading. So more homework for this week is to read 2.2 of the ResNet paper. And what you'll see is that they describe what happens in the forward pass of a neural net, and they point out that for the conv layer, this is the response, y equals wx plus b. Now if you're concentrating, that might be confusing because a conv layer isn't quite y equals wx plus b. A conv layer has a convolution. But do you remember in part one, I pointed out this neat article from Matt Clinesmith where he showed that CNNs in convolutions actually are just matrix multiplications with a bunch of zeros and some tidewaits. So this is basically all they're saying here. So sometimes there are these kind of like throwaway lines in papers that are actually quite deep and worth thinking about. So they point out that you can just think of this as a linear layer, and then they basically take you through step by step what happens to the variance of your network depending on the initialization. And so just try to get to this point here, get as far as backward propagation case. So you've got about, I don't know, six paragraphs to read. None of the math notation is weird. Maybe this one is if you haven't seen this before. This is exactly the same as sigma, but instead of doing a sum, you do a product. So this is a great way to kind of warm up your paper reading muscles is to try and read this section. And then if that's going well, you can keep going with the backward propagation case because the forward pass does a matrix multiply. And as we'll see in a moment, the backward pass does a matrix multiply with a transpose of the matrix. So the backward pass is slightly different, but it's nearly the same. And so then at the end of that, they will eventually come up with their suggestion. Let's see if we can find it. Oh yeah, here it is. They suggest root two over nL, where nL is the number of input activations. Okay. So that's what we're using. That is called chiming initialization, and it gives us a pretty nice variance. It doesn't give us a very nice mean though. And the reason it doesn't give us a very nice mean is because as we saw, we deleted everything below the axis. So naturally our mean is now half, not zero. I haven't seen anybody talk about this in the literature, but something I was just trying over the last week is something kind of obvious, which is to replace value with not just x.clampmin, but x.clampmin minus 0.5. And in my brief experiments, that seems to help. So there's another thing that you could try out and see if it actually helps or if I'm just imagining things. It certainly returns you to the correct mean. Okay. So now that we have this formula, we can replace it with init.clampmin normal according to our rules because it's the same thing. And let's check that it does the same thing. And it does. Okay. So we've got this about half mean and a bit under one standard deviation. You'll notice here I had to add something extra, which is mode equals fan out. What does that mean? What it means is explained here. Fan in or fan out. Fan in preserves the magnitude of variance in the forward pass. Fan out preserves the magnitudes in the backward pass. Basically all it's saying is, are you dividing by root M or root NH? Because if you divide by root M, as you'll see in that part of the paper I was suggesting you read, that will keep the variance at one during the forward pass. But if you use NH, it will give you the right unit variance in the backward pass. So it's weird that I had to say fan out because according to the documentation, that's for the backward pass to keep the unit variance. So why did I need that? Well, it's because our weight shape is 784 by 50. But if you actually create a linear layer with PyTorch of the same dimensions, it creates it of 50 by 784. It's the opposite. So how can that possibly work? These are the kind of things that it's useful to know how to dig into. So how is this working? So to find out how it's working, you have to look in the source code. So you can either set up Visual Studio code or something like that and set it up so you can jump between things. That's a nice way to do it. Or you can just do it here with question mark, question mark. And you can see that this is the forward function and it calls something called f.linear. In PyTorch, capital F always refers to the torch.nn.functional module. Because it's used everywhere, so they decided that's worth a single letter. So torch.nn.functional.linear is what it calls. And let's look at how that's defined. Input.matmul weight.t. T means transpose. So now we know in PyTorch, a linear layer doesn't just do a matrix product. It does a matrix product with a transpose. So in other words, it's actually going to turn this into 7, 8, 4 by 50 and then do it. And so that's why we kind of had to give it the opposite information when we were trying to do it with our linear layer, which doesn't have transpose. So the main reason I show you that is to kind of show you how you can dig in to the PyTorch source code. See exactly what's going on. And when you come across these kind of questions, you want to be able to answer them yourself. Which also then leads to the question, if this is how linear layers can be initialized, what about convolutional layers? What does PyTorch do for convolutional layers? So we could look inside torch.nn.conf2d. And when I looked at it, I noticed that it basically doesn't have any code. It just has documentation. All of the code actually gets passed down to something called underscore conv-nd. And so you need to know how to find these things. And so if you go to the very bottom, you can find the file name it's in. And so you see this is actually torch.nn.modules.conf. So we can find torch.nn.modules.conf.underscoreconvnd. And so here it is. And here's how it initializes things. And it calls chiming uniform, which is basically the same as chiming normal, but it's uniform instead. But it has a special multiplier of math.square root 5. And that is not documented anywhere. I have no idea where it comes from. And in my experiments, this seems to work pretty badly, as you'll see. So it's kind of useful to look inside the code. And when you're writing your own code, presumably somebody put this here for a reason. Wouldn't it have been nice if they had a URL above it with a link to the paper that they're implementing so we could see what's going on? So it's always a good idea, you know, is to put some comments in your code to let the next person know, what the hell are you doing? So that particular thing, I have a strong feeling, isn't great, as you'll see. OK. So we're going to try this thing. It's attracting 0.5 from our relu. So this is pretty cool, right? We've already designed our own new activation function. Is it great? Is it terrible? I don't know. But it's this kind of level of tweak, which is kind of, you know, when people write papers, this is the normal level of like it's like a minor change to one line of code. It'll be interesting to see how much it helps. But if I use it, then you can see here, yep, now I have a mean of 0, thereabouts. And interestingly, I've also noticed it helps my variance a lot. Before my variance, remember, was generally around 0.7 to 0.8. But now it's generally above 0.8. So it helps both, which makes sense as to why I think I'm seeing these better results. So now we have relu, we have linear, we have init, so we can do a forward pass. Right? So we're now up to here. And so here it is. And remember, in PyTorch, a model can just be a function. And so here's our model. It's just a function that does one linear layer, one relu layer, and one more linear layer. And let's try running it. And okay, it takes eight milliseconds to run it, the model on the validation set. So it's plenty fast enough to train. It's looking good. Add an assert to make sure the shape seems sensible. So the next thing we need for our forward pass is a loss function. And as I said, we're going to simplify things for now by using mean squared error, even though that's obviously a dumb idea. Our model is returning something of size 10,000 by 1. But mean squared error, you would expect it just to be a single vector of size 10,000. So I want to get rid of this unit access. In PyTorch, the thing to add a unit access we've learned is called un-squeeze. The thing to get rid of a unit access, therefore, is called squeeze. So we just go output.squeeze to get rid of that unit access. But actually, now I think about it, this is lazy. Because output.squeeze gets rid of all unit axes. And we very commonly see on the Fast.io forums people saying that their code's broken. And it's when they've got squeeze. And it's that one case where maybe they had a batch size of size 1. And so that 1, 1 would get squeezed down to a scalar. And things would break. So rather than just calling squeeze, it's actually better to say which dimension you want to squeeze, which we could write either 1 or minus 1. It would be the same thing. This is going to be more resilient now to that weird edge case of a batch size of size 1. OK. So output minus target squared mean. That's mean squared error. So remember in PyTorch, loss functions can just be functions. For mean squared error, we're going to have to make sure these are floats. So let's convert them. So now we can calculate some predictions. That's the shape of our predictions. And we can calculate our mean squared error. So there we go. So we've done a forward pass. So we're up to here. A forward pass is useless. What we need is a backward pass. Because that's the thing that tells us how to update our parameters. So we need gradients. OK. How much do you want to know about matrix calculus? I don't know. It's up to you. But if you want to know everything about matrix calculus, I can point you to this excellent paper by Terrence Parr and Jeremy Howard, which tells you everything about matrix calculus from scratch. So this is a few weeks' work to get through. But it absolutely assumes nothing at all. So even like basically Terrence and I both felt like, oh, we don't know any of this stuff. Let's learn all of it and tell other people. And so we wrote it with that in mind. And so this will take you all the way up to knowing everything that you need for deep learning. You can actually get away with a lot less. But if you're here, maybe it's worth it. But I'll tell you what you do need to know. What you need to know is the chain rule. Because let me point something out. We start with some input. We start with some input. And we stick it through the first linear layer. And then we stick it through ReLU. And then we stick it through the second linear layer. And then we stick it through MSE. And that gives us our predictions. Or to put it another way, we start with x. And we put it through the function len1. And then we take the output of that and we put it through the function ReLU. And then we take the output of that and we put it through the function len2. And then we take the output of that and we put it through the function MSE. And strictly speaking, MSE has a second argument, which is the actual target value. And we want the gradient of the output with respect to the input. So it's a function of a function of a function of a function of a function. So if we simplify that down a bit, we could just say, what if it's just like, I don't know, y equals f of x. Sorry, y equals f of u. And u equals f of x. So that's like a function of a function. Simplify it a little bit. And the derivative is that. That's the chain rule. If that doesn't look familiar to you or you've forgotten it, go to Khan Academy. Khan Academy has some great tutorials on the chain rule. But this is actually the thing we need to know. Because once you know that, then all you need to know is the derivative of each bit on its own, and you just multiply them all together. And if you ever forget the chain rule, just cross-multiply. So that would be dy du over du dx cross out du's, you get dy dx. And if you went to a fancy school, they would have told you not to do that. They said you can't treat calculus like this because they're special magic small things. Actually you can. There's actually a different way of treating calculus called the calculus of infinitesimals, where all of this just makes sense. And you suddenly realize you actually can do this exact thing. So anytime you see a derivative, just remember that all it's actually doing is it's taking some function, right, and it's saying as you go across a little bit, how much do you go up? And then it's dividing that change in y divided by that change in x. That's literally what it is, where y and x, you must make them small numbers. So they behave very sensibly when you just think of them as a small change in y over a small change in x, as I just did showing you the chain rule. So to do the chain rule, we're going to have to start with the very last function. The very last function on the outside was the loss function, mean squared error. So we start by, so we just do each bit separately. So the gradient of the loss with respect to, what should I say, output of previous layer. So the output of the previous layer, the MSE is just input minus target squared, and so the derivative of that is just 2 times input minus target, because the derivative of blah squared is 2 times blah. So that's it. Now I need to store that gradient somewhere. Now the thing is that for the chain rule, I'm going to need to multiply all these things together. So if I store it inside the.g attribute of the previous layer, because remember this is the previous layer, then when the previous layer, so the input of MSE is the same as the output of the previous layer. So if I store it away in here, I can then quite comfortably refer to it. So here, look, ReLU, let's do ReLU. So ReLU is this. Okay, what's the gradient there? Zero. What's the gradient there? One. So therefore, that's the gradient of the ReLU. It's just greater than zero. But we need the chain rule, so we need to multiply this by the gradient of the next layer, which remember we stored away. So we can just grab it. So this is really cool. So same thing for the linear layer. The gradient is simply, and this is where the matrix calculus comes in, the gradient of a matrix product is simply the matrix product with the transpose. So you can either read all that stuff I showed you, or you can take my word for it. So here's the cool thing, right? Here's the function which does the forward pass that we've already seen, and then it goes backwards. It calls each of the gradients backwards, right, in reverse order, because we know we need that for the chain rule. And you can notice that every time we're passing in the result of the forward pass, and it also has access, as we discussed, to the gradient of the next layer. This is called backpropagation, right? So when people say, as they love to do, backpropagation is not just the chain rule, they're basically lying to you. Backpropagation is the chain rule, where we just save away all the intermediate calculations so we don't have to calculate them again. So this is a full forward and backward pass. One interesting thing here is this value here, loss, this value here, loss, we never actually use it, because the loss never actually appears in the gradients. I mean, just by the way, you still probably want it to be able to print it out or whatever, but it's actually not something that appears in the gradients. So that's it. So w1.g, w2.g, et cetera, they now contain all of our gradients, which we're going to use for the optimizer. And so let's cheat and use PyTorch autograd to check our results, because PyTorch can do this for us. So let's clone all of our weights and biases and input, and then turn on requires grad for all of them. So requires grad underscore is how you take a PyTorch tensor and turn it into a magical autogradified PyTorch tensor. So what it's now going to do is everything that gets calculated with test tensor, it's basically going to keep track of what happened. So it basically keeps track of these steps so that then it can do these things. It's not actually that magical. You could totally write it yourself. You just need to make sure that each time you do an operation, you remember what it is, and so then you can just go back through them in reverse order. Okay, so now that we've done requires grad, we can now just do the forward pass like so. That gives us loss in PyTorch. You say loss.backward. And now we can test that. And remember PyTorch doesn't store things in.g. It stores them in.grad. And we can test them. And all of our gradients were correct. Or at least they're the same as PyTorch's. So that's pretty interesting, right? I mean, that's an actual neural network that kind of contains all the main pieces that we're going to need. And we've written all these pieces from scratch. So there's nothing magical here. But let's do some cool refactoring. I really love this refactoring. And this is massively inspired by, in fact, very closely stolen from the PyTorch API. But it's kind of interesting. I didn't have the PyTorch API in mind as I did this. But as I kept refactoring, I kind of noticed like, oh, I just recreated the PyTorch API. That makes perfect sense. So let's take each of our layers, ReLU and Linear, and create classes. And for the forward, let's use dunder call. Now, do you remember that dunder call means that we can now treat this as if it was a function? So if you call this class just with parentheses, it calls this function. And let's save the input. Let's save the output. And let's return the output. And then backward, do you remember this was our backward pass? So it's exactly the same as we had before. But we're going to save it inside self.input.gradient. So this is exactly the same code as we had here. But I've just moved the forward and backward into the same class. So here's Linear, forward, exactly the same. But each time I'm saving the input, I'm saving the output, I'm returning the output. And then here's our backward. One thing to notice, the backward pass here. For Linear, we don't just want the gradient of the outputs with respect to the inputs. We also need the gradient of the outputs with respect to the weights and the output with respect to the biases. So that's why we've got three lots of.g's going on here. So there's our linear layers, forward and backward. And then we've got our mean squared error. So there's our forward. And we'll save away both the input and the target for using later. And there's our gradient. Again, same as before, 2 times input minus target. So with this refactoring, we can now create our model. We can just say, let's create a model class and create something called.layers with a list of all of our layers. Notice I'm not using any PyTorch machinery. This is all from scratch. Let's define loss, and then let's define call. And it's going to go through each layer and say x equals lx. So this is how I do that function composition. We're just calling the function on the result of the previous thing. And then at the very end, call self.loss on that. And then for backward, we do the exact opposite. We go self.loss.backward, and then we go through the reversed layers and call backward on each one. And remember, the backward passes are going to save the gradient away inside the.g. So with that, let's just set all of our gradients to none so that we know we're not cheating. We can then create our model, this class model, and call it. And we can call it as if it was a function because we have done to call. So this is going to call done to call. And then we can call backward. And then we can check that our gradients are correct. So that's nice. One thing that's not nice is, holy crap, that took a long time. Let's run it. There we go. 3.4 seconds. So that was really, really slow. So we'll come back to that. I don't like duplicate code. There's a lot of duplicate code here. Self.imp equals imp. Return self.out. That's messy. So let's get rid of it. So what we could do is we could create a new class called module, which basically does the self.imp equals imp and returns self.out for us. And so now we're not going to use done to call to implement our forward. We're going to have a call something called self.forward, which we will initially set to rows exception, not implemented. And backward is going to call self.bwd, passing in the thing that we just saved. And so now relu has something called forward, which just has that. So we're now basically back to where we were. And backward just has that. So now look how neat that is. And we also realized that this thing we were doing to... Not this thing. This thing we were doing to calculate the derivative of the output of the linear layer with respect to the weights, where we're doing an unsqueeze and an unsqueeze, which is basically a big outer product in a sum. We could actually re-express that with unsum. And when we do that, so our code is now neater, and our 3.4 seconds is down to 143 milliseconds. So thank you again to unsum. So you'll see this now, look, model equals model, loss equals blah, blah.backward, and now the gradients are all there. That looks almost exactly like PyTorch. And so we can see why it's done this way. Why do we have to inherit from nn.module? Why do we have to define forward? This is why, right? That's PyTorch factor out all this duplicate stuff. So all we have to do is do the implementation. So I think that's pretty fun. And then once we realized, we thought more about it, and we're like, what are we doing with this unsum? And we actually realized that it's exactly the same as just doing input.transpose times output. And so we replaced the unsum with a matrix product, and that's 140 milliseconds. And so now we've basically implemented nn.linear and nn.module. So let's now use nn.linear and nn.module, because we're allowed to. That's the rules. And the forward pass is almost exactly the same speed as our forward pass. And their backward pass is about twice as fast. I'm guessing that's because we're calculating all of the gradients, and they're not calculating all of them, only the ones they need. But it's basically the same thing. So at this point, we're ready in the next lesson to do a training loop. We have something. We have a multi-layer, fully connected neural network, what the HUR paper would call a rectifier network. We have matrix multiply organized. We have our forward and backward passes organized. It's all nicely refactored out into classes and a module class. So in the next lesson, we will see how far we can get. Hopefully we will build a high-quality, fast ResNet. And we're also going to take a very deep dive into optimizers and callbacks and training loops and normalization methods. Any questions before we go? No? That's great. Okay. Thanks, everybody. See you on the forums. See you in the next class.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 9.0, "text": " So, welcome back to part two of what previously was called practical deep learning for coders,", "tokens": [407, 11, 2928, 646, 281, 644, 732, 295, 437, 8046, 390, 1219, 8496, 2452, 2539, 337, 17656, 433, 11], "temperature": 0.0, "avg_logprob": -0.16519155058749888, "compression_ratio": 1.7486910994764397, "no_speech_prob": 0.019962670281529427}, {"id": 1, "seek": 0, "start": 9.0, "end": 11.72, "text": " but part two is not called that, as you will see.", "tokens": [457, 644, 732, 307, 406, 1219, 300, 11, 382, 291, 486, 536, 13], "temperature": 0.0, "avg_logprob": -0.16519155058749888, "compression_ratio": 1.7486910994764397, "no_speech_prob": 0.019962670281529427}, {"id": 2, "seek": 0, "start": 11.72, "end": 15.72, "text": " It's called deep learning from the foundations.", "tokens": [467, 311, 1219, 2452, 2539, 490, 264, 22467, 13], "temperature": 0.0, "avg_logprob": -0.16519155058749888, "compression_ratio": 1.7486910994764397, "no_speech_prob": 0.019962670281529427}, {"id": 3, "seek": 0, "start": 15.72, "end": 20.48, "text": " It's lesson eight because it's lesson eight of the full journey, lesson one of part two,", "tokens": [467, 311, 6898, 3180, 570, 309, 311, 6898, 3180, 295, 264, 1577, 4671, 11, 6898, 472, 295, 644, 732, 11], "temperature": 0.0, "avg_logprob": -0.16519155058749888, "compression_ratio": 1.7486910994764397, "no_speech_prob": 0.019962670281529427}, {"id": 4, "seek": 0, "start": 20.48, "end": 26.560000000000002, "text": " or lesson eight, mod seven, as we sometimes call it.", "tokens": [420, 6898, 3180, 11, 1072, 3407, 11, 382, 321, 2171, 818, 309, 13], "temperature": 0.0, "avg_logprob": -0.16519155058749888, "compression_ratio": 1.7486910994764397, "no_speech_prob": 0.019962670281529427}, {"id": 5, "seek": 2656, "start": 26.56, "end": 30.2, "text": " So those of you, I know a lot of you kind of do every year's course and keep coming", "tokens": [407, 729, 295, 291, 11, 286, 458, 257, 688, 295, 291, 733, 295, 360, 633, 1064, 311, 1164, 293, 1066, 1348], "temperature": 0.0, "avg_logprob": -0.1263988675094965, "compression_ratio": 1.7152777777777777, "no_speech_prob": 3.5902863601222634e-05}, {"id": 6, "seek": 2656, "start": 30.2, "end": 31.2, "text": " back.", "tokens": [646, 13], "temperature": 0.0, "avg_logprob": -0.1263988675094965, "compression_ratio": 1.7152777777777777, "no_speech_prob": 3.5902863601222634e-05}, {"id": 7, "seek": 2656, "start": 31.2, "end": 33.76, "text": " For those of you doing that, this will not look at all familiar to you.", "tokens": [1171, 729, 295, 291, 884, 300, 11, 341, 486, 406, 574, 412, 439, 4963, 281, 291, 13], "temperature": 0.0, "avg_logprob": -0.1263988675094965, "compression_ratio": 1.7152777777777777, "no_speech_prob": 3.5902863601222634e-05}, {"id": 8, "seek": 2656, "start": 33.76, "end": 36.28, "text": " It's a very different kind of part two.", "tokens": [467, 311, 257, 588, 819, 733, 295, 644, 732, 13], "temperature": 0.0, "avg_logprob": -0.1263988675094965, "compression_ratio": 1.7152777777777777, "no_speech_prob": 3.5902863601222634e-05}, {"id": 9, "seek": 2656, "start": 36.28, "end": 40.56, "text": " We're really excited about it and hope you like it as well.", "tokens": [492, 434, 534, 2919, 466, 309, 293, 1454, 291, 411, 309, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.1263988675094965, "compression_ratio": 1.7152777777777777, "no_speech_prob": 3.5902863601222634e-05}, {"id": 10, "seek": 2656, "start": 40.56, "end": 46.239999999999995, "text": " The basic idea of deep learning from the foundations is that we are going to implement much of", "tokens": [440, 3875, 1558, 295, 2452, 2539, 490, 264, 22467, 307, 300, 321, 366, 516, 281, 4445, 709, 295], "temperature": 0.0, "avg_logprob": -0.1263988675094965, "compression_ratio": 1.7152777777777777, "no_speech_prob": 3.5902863601222634e-05}, {"id": 11, "seek": 2656, "start": 46.239999999999995, "end": 50.519999999999996, "text": " the fast AI library from foundations.", "tokens": [264, 2370, 7318, 6405, 490, 22467, 13], "temperature": 0.0, "avg_logprob": -0.1263988675094965, "compression_ratio": 1.7152777777777777, "no_speech_prob": 3.5902863601222634e-05}, {"id": 12, "seek": 2656, "start": 50.519999999999996, "end": 55.92, "text": " Now talk about exactly what I mean by foundations in a moment, but it basically means from scratch.", "tokens": [823, 751, 466, 2293, 437, 286, 914, 538, 22467, 294, 257, 1623, 11, 457, 309, 1936, 1355, 490, 8459, 13], "temperature": 0.0, "avg_logprob": -0.1263988675094965, "compression_ratio": 1.7152777777777777, "no_speech_prob": 3.5902863601222634e-05}, {"id": 13, "seek": 5592, "start": 55.92, "end": 61.24, "text": " So we'll be looking at basic matrix calculus and creating a training loop from scratch", "tokens": [407, 321, 603, 312, 1237, 412, 3875, 8141, 33400, 293, 4084, 257, 3097, 6367, 490, 8459], "temperature": 0.0, "avg_logprob": -0.08991854667663574, "compression_ratio": 1.7242798353909465, "no_speech_prob": 1.1658243238343857e-05}, {"id": 14, "seek": 5592, "start": 61.24, "end": 65.4, "text": " and creating an optimizer from scratch and lots of different layers and architectures", "tokens": [293, 4084, 364, 5028, 6545, 490, 8459, 293, 3195, 295, 819, 7914, 293, 6331, 1303], "temperature": 0.0, "avg_logprob": -0.08991854667663574, "compression_ratio": 1.7242798353909465, "no_speech_prob": 1.1658243238343857e-05}, {"id": 15, "seek": 5592, "start": 65.4, "end": 71.8, "text": " and so forth, and not just to create some kind of dumbed down library that's not useful", "tokens": [293, 370, 5220, 11, 293, 406, 445, 281, 1884, 512, 733, 295, 10316, 292, 760, 6405, 300, 311, 406, 4420], "temperature": 0.0, "avg_logprob": -0.08991854667663574, "compression_ratio": 1.7242798353909465, "no_speech_prob": 1.1658243238343857e-05}, {"id": 16, "seek": 5592, "start": 71.8, "end": 77.46000000000001, "text": " for anything, but to actually build from scratch something you can train cutting edge world", "tokens": [337, 1340, 11, 457, 281, 767, 1322, 490, 8459, 746, 291, 393, 3847, 6492, 4691, 1002], "temperature": 0.0, "avg_logprob": -0.08991854667663574, "compression_ratio": 1.7242798353909465, "no_speech_prob": 1.1658243238343857e-05}, {"id": 17, "seek": 5592, "start": 77.46000000000001, "end": 79.48, "text": " class models with.", "tokens": [1508, 5245, 365, 13], "temperature": 0.0, "avg_logprob": -0.08991854667663574, "compression_ratio": 1.7242798353909465, "no_speech_prob": 1.1658243238343857e-05}, {"id": 18, "seek": 5592, "start": 79.48, "end": 81.12, "text": " So that's the goal.", "tokens": [407, 300, 311, 264, 3387, 13], "temperature": 0.0, "avg_logprob": -0.08991854667663574, "compression_ratio": 1.7242798353909465, "no_speech_prob": 1.1658243238343857e-05}, {"id": 19, "seek": 5592, "start": 81.12, "end": 82.12, "text": " We've never done it before.", "tokens": [492, 600, 1128, 1096, 309, 949, 13], "temperature": 0.0, "avg_logprob": -0.08991854667663574, "compression_ratio": 1.7242798353909465, "no_speech_prob": 1.1658243238343857e-05}, {"id": 20, "seek": 8212, "start": 82.12, "end": 86.76, "text": " I don't think anybody's ever done this before, so I don't exactly know how far we'll get,", "tokens": [286, 500, 380, 519, 4472, 311, 1562, 1096, 341, 949, 11, 370, 286, 500, 380, 2293, 458, 577, 1400, 321, 603, 483, 11], "temperature": 0.0, "avg_logprob": -0.126310972067026, "compression_ratio": 1.695067264573991, "no_speech_prob": 2.3917295038700104e-05}, {"id": 21, "seek": 8212, "start": 86.76, "end": 89.4, "text": " but this is the journey that we're on.", "tokens": [457, 341, 307, 264, 4671, 300, 321, 434, 322, 13], "temperature": 0.0, "avg_logprob": -0.126310972067026, "compression_ratio": 1.695067264573991, "no_speech_prob": 2.3917295038700104e-05}, {"id": 22, "seek": 8212, "start": 89.4, "end": 90.64, "text": " We'll see how we go.", "tokens": [492, 603, 536, 577, 321, 352, 13], "temperature": 0.0, "avg_logprob": -0.126310972067026, "compression_ratio": 1.695067264573991, "no_speech_prob": 2.3917295038700104e-05}, {"id": 23, "seek": 8212, "start": 90.64, "end": 96.48, "text": " So in the process, we will be having to read and implement papers, right, because the fast", "tokens": [407, 294, 264, 1399, 11, 321, 486, 312, 1419, 281, 1401, 293, 4445, 10577, 11, 558, 11, 570, 264, 2370], "temperature": 0.0, "avg_logprob": -0.126310972067026, "compression_ratio": 1.695067264573991, "no_speech_prob": 2.3917295038700104e-05}, {"id": 24, "seek": 8212, "start": 96.48, "end": 100.2, "text": " AI library is full of implemented papers, right?", "tokens": [7318, 6405, 307, 1577, 295, 12270, 10577, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.126310972067026, "compression_ratio": 1.695067264573991, "no_speech_prob": 2.3917295038700104e-05}, {"id": 25, "seek": 8212, "start": 100.2, "end": 104.2, "text": " So you're not going to be able to do this if you're not reading and implementing papers.", "tokens": [407, 291, 434, 406, 516, 281, 312, 1075, 281, 360, 341, 498, 291, 434, 406, 3760, 293, 18114, 10577, 13], "temperature": 0.0, "avg_logprob": -0.126310972067026, "compression_ratio": 1.695067264573991, "no_speech_prob": 2.3917295038700104e-05}, {"id": 26, "seek": 10420, "start": 104.2, "end": 112.56, "text": " Along the way, we'll be implementing much of PyTorch as well, as you'll see.", "tokens": [17457, 264, 636, 11, 321, 603, 312, 18114, 709, 295, 9953, 51, 284, 339, 382, 731, 11, 382, 291, 603, 536, 13], "temperature": 0.0, "avg_logprob": -0.07783609628677368, "compression_ratio": 1.4976958525345623, "no_speech_prob": 7.645740879524965e-06}, {"id": 27, "seek": 10420, "start": 112.56, "end": 120.96000000000001, "text": " We'll also be going deeper into solving some applications that are not kind of fully baked", "tokens": [492, 603, 611, 312, 516, 7731, 666, 12606, 512, 5821, 300, 366, 406, 733, 295, 4498, 19453], "temperature": 0.0, "avg_logprob": -0.07783609628677368, "compression_ratio": 1.4976958525345623, "no_speech_prob": 7.645740879524965e-06}, {"id": 28, "seek": 10420, "start": 120.96000000000001, "end": 125.72, "text": " into the fast AI library yet, so going to require a lot of custom work.", "tokens": [666, 264, 2370, 7318, 6405, 1939, 11, 370, 516, 281, 3651, 257, 688, 295, 2375, 589, 13], "temperature": 0.0, "avg_logprob": -0.07783609628677368, "compression_ratio": 1.4976958525345623, "no_speech_prob": 7.645740879524965e-06}, {"id": 29, "seek": 10420, "start": 125.72, "end": 130.68, "text": " So things like object detection, sequence to sequence with attention, transformer and", "tokens": [407, 721, 411, 2657, 17784, 11, 8310, 281, 8310, 365, 3202, 11, 31782, 293], "temperature": 0.0, "avg_logprob": -0.07783609628677368, "compression_ratio": 1.4976958525345623, "no_speech_prob": 7.645740879524965e-06}, {"id": 30, "seek": 13068, "start": 130.68, "end": 136.20000000000002, "text": " the transformer Excel, cycleGAN, audio, stuff like that.", "tokens": [264, 31782, 19060, 11, 6586, 27699, 11, 6278, 11, 1507, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.22619192650977601, "compression_ratio": 1.5186721991701244, "no_speech_prob": 3.555840294211521e-06}, {"id": 31, "seek": 13068, "start": 136.20000000000002, "end": 142.20000000000002, "text": " We'll also be doing a deeper dive into some performance considerations like doing distributed", "tokens": [492, 603, 611, 312, 884, 257, 7731, 9192, 666, 512, 3389, 24070, 411, 884, 12631], "temperature": 0.0, "avg_logprob": -0.22619192650977601, "compression_ratio": 1.5186721991701244, "no_speech_prob": 3.555840294211521e-06}, {"id": 32, "seek": 13068, "start": 142.20000000000002, "end": 148.4, "text": " multi-GPU training using the new just-in-time compiler, which we'll just call JIT from now", "tokens": [4825, 12, 38, 8115, 3097, 1228, 264, 777, 445, 12, 259, 12, 3766, 31958, 11, 597, 321, 603, 445, 818, 508, 3927, 490, 586], "temperature": 0.0, "avg_logprob": -0.22619192650977601, "compression_ratio": 1.5186721991701244, "no_speech_prob": 3.555840294211521e-06}, {"id": 33, "seek": 13068, "start": 148.4, "end": 151.64000000000001, "text": " on, CUDA and C++, stuff like that.", "tokens": [322, 11, 29777, 7509, 293, 383, 25472, 11, 1507, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.22619192650977601, "compression_ratio": 1.5186721991701244, "no_speech_prob": 3.555840294211521e-06}, {"id": 34, "seek": 13068, "start": 151.64000000000001, "end": 158.66, "text": " So that's the first five lessons, and then the last two lessons, implementing some subset", "tokens": [407, 300, 311, 264, 700, 1732, 8820, 11, 293, 550, 264, 1036, 732, 8820, 11, 18114, 512, 25993], "temperature": 0.0, "avg_logprob": -0.22619192650977601, "compression_ratio": 1.5186721991701244, "no_speech_prob": 3.555840294211521e-06}, {"id": 35, "seek": 15866, "start": 158.66, "end": 164.04, "text": " of that in Swift.", "tokens": [295, 300, 294, 25539, 13], "temperature": 0.0, "avg_logprob": -0.10966578551701137, "compression_ratio": 1.592885375494071, "no_speech_prob": 1.8738161315923207e-06}, {"id": 36, "seek": 15866, "start": 164.04, "end": 169.72, "text": " So this is otherwise known as impractical deep learning for coders, because really none", "tokens": [407, 341, 307, 5911, 2570, 382, 704, 1897, 804, 2452, 2539, 337, 17656, 433, 11, 570, 534, 6022], "temperature": 0.0, "avg_logprob": -0.10966578551701137, "compression_ratio": 1.592885375494071, "no_speech_prob": 1.8738161315923207e-06}, {"id": 37, "seek": 15866, "start": 169.72, "end": 173.0, "text": " of this is stuff that you're going to go and use right away.", "tokens": [295, 341, 307, 1507, 300, 291, 434, 516, 281, 352, 293, 764, 558, 1314, 13], "temperature": 0.0, "avg_logprob": -0.10966578551701137, "compression_ratio": 1.592885375494071, "no_speech_prob": 1.8738161315923207e-06}, {"id": 38, "seek": 15866, "start": 173.0, "end": 175.51999999999998, "text": " It's kind of the opposite of part one, right?", "tokens": [467, 311, 733, 295, 264, 6182, 295, 644, 472, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.10966578551701137, "compression_ratio": 1.592885375494071, "no_speech_prob": 1.8738161315923207e-06}, {"id": 39, "seek": 15866, "start": 175.51999999999998, "end": 178.2, "text": " Part one was like, oh, we've been spending 20 minutes on this.", "tokens": [4100, 472, 390, 411, 11, 1954, 11, 321, 600, 668, 6434, 945, 2077, 322, 341, 13], "temperature": 0.0, "avg_logprob": -0.10966578551701137, "compression_ratio": 1.592885375494071, "no_speech_prob": 1.8738161315923207e-06}, {"id": 40, "seek": 15866, "start": 178.2, "end": 183.98, "text": " You can now create a world-class vision classification model.", "tokens": [509, 393, 586, 1884, 257, 1002, 12, 11665, 5201, 21538, 2316, 13], "temperature": 0.0, "avg_logprob": -0.10966578551701137, "compression_ratio": 1.592885375494071, "no_speech_prob": 1.8738161315923207e-06}, {"id": 41, "seek": 15866, "start": 183.98, "end": 185.2, "text": " This is not that, right?", "tokens": [639, 307, 406, 300, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.10966578551701137, "compression_ratio": 1.592885375494071, "no_speech_prob": 1.8738161315923207e-06}, {"id": 42, "seek": 15866, "start": 185.2, "end": 188.24, "text": " Because you already know how to do that.", "tokens": [1436, 291, 1217, 458, 577, 281, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.10966578551701137, "compression_ratio": 1.592885375494071, "no_speech_prob": 1.8738161315923207e-06}, {"id": 43, "seek": 18824, "start": 188.24, "end": 193.56, "text": " And so back in the earlier years, part two used to be more of the same thing, but it", "tokens": [400, 370, 646, 294, 264, 3071, 924, 11, 644, 732, 1143, 281, 312, 544, 295, 264, 912, 551, 11, 457, 309], "temperature": 0.0, "avg_logprob": -0.0903437848676715, "compression_ratio": 1.6867924528301887, "no_speech_prob": 2.5213923890987644e-06}, {"id": 44, "seek": 18824, "start": 193.56, "end": 199.4, "text": " was kind of like more advanced types of model, more advanced architectures.", "tokens": [390, 733, 295, 411, 544, 7339, 3467, 295, 2316, 11, 544, 7339, 6331, 1303, 13], "temperature": 0.0, "avg_logprob": -0.0903437848676715, "compression_ratio": 1.6867924528301887, "no_speech_prob": 2.5213923890987644e-06}, {"id": 45, "seek": 18824, "start": 199.4, "end": 201.60000000000002, "text": " But there's a couple of reasons we've changed this year.", "tokens": [583, 456, 311, 257, 1916, 295, 4112, 321, 600, 3105, 341, 1064, 13], "temperature": 0.0, "avg_logprob": -0.0903437848676715, "compression_ratio": 1.6867924528301887, "no_speech_prob": 2.5213923890987644e-06}, {"id": 46, "seek": 18824, "start": 201.60000000000002, "end": 208.38, "text": " The first is so many papers come out now, because this whole area has increased in scale", "tokens": [440, 700, 307, 370, 867, 10577, 808, 484, 586, 11, 570, 341, 1379, 1859, 575, 6505, 294, 4373], "temperature": 0.0, "avg_logprob": -0.0903437848676715, "compression_ratio": 1.6867924528301887, "no_speech_prob": 2.5213923890987644e-06}, {"id": 47, "seek": 18824, "start": 208.38, "end": 214.72, "text": " so quickly that I can't pick out for you the 12 papers to do in the next seven weeks that", "tokens": [370, 2661, 300, 286, 393, 380, 1888, 484, 337, 291, 264, 2272, 10577, 281, 360, 294, 264, 958, 3407, 3259, 300], "temperature": 0.0, "avg_logprob": -0.0903437848676715, "compression_ratio": 1.6867924528301887, "no_speech_prob": 2.5213923890987644e-06}, {"id": 48, "seek": 18824, "start": 214.72, "end": 217.88, "text": " you really need to know, because there's too many.", "tokens": [291, 534, 643, 281, 458, 11, 570, 456, 311, 886, 867, 13], "temperature": 0.0, "avg_logprob": -0.0903437848676715, "compression_ratio": 1.6867924528301887, "no_speech_prob": 2.5213923890987644e-06}, {"id": 49, "seek": 21788, "start": 217.88, "end": 219.5, "text": " And it's also kind of pointless, right?", "tokens": [400, 309, 311, 611, 733, 295, 32824, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.09748255989768288, "compression_ratio": 1.6812749003984064, "no_speech_prob": 1.2605615665961523e-05}, {"id": 50, "seek": 21788, "start": 219.5, "end": 223.68, "text": " Because once you get into it, you realize that all the papers pretty much say minor", "tokens": [1436, 1564, 291, 483, 666, 309, 11, 291, 4325, 300, 439, 264, 10577, 1238, 709, 584, 6696], "temperature": 0.0, "avg_logprob": -0.09748255989768288, "compression_ratio": 1.6812749003984064, "no_speech_prob": 1.2605615665961523e-05}, {"id": 51, "seek": 21788, "start": 223.68, "end": 226.12, "text": " variations on the same thing.", "tokens": [17840, 322, 264, 912, 551, 13], "temperature": 0.0, "avg_logprob": -0.09748255989768288, "compression_ratio": 1.6812749003984064, "no_speech_prob": 1.2605615665961523e-05}, {"id": 52, "seek": 21788, "start": 226.12, "end": 230.88, "text": " So instead, what I want to be able to do is show you the foundations that let you read", "tokens": [407, 2602, 11, 437, 286, 528, 281, 312, 1075, 281, 360, 307, 855, 291, 264, 22467, 300, 718, 291, 1401], "temperature": 0.0, "avg_logprob": -0.09748255989768288, "compression_ratio": 1.6812749003984064, "no_speech_prob": 1.2605615665961523e-05}, {"id": 53, "seek": 21788, "start": 230.88, "end": 235.8, "text": " the 12 papers you care about and realize, oh, that's just that thing with this minor", "tokens": [264, 2272, 10577, 291, 1127, 466, 293, 4325, 11, 1954, 11, 300, 311, 445, 300, 551, 365, 341, 6696], "temperature": 0.0, "avg_logprob": -0.09748255989768288, "compression_ratio": 1.6812749003984064, "no_speech_prob": 1.2605615665961523e-05}, {"id": 54, "seek": 21788, "start": 235.8, "end": 240.14, "text": " tweak, and I now have all the tools I need to implement that and test it and experiment", "tokens": [29879, 11, 293, 286, 586, 362, 439, 264, 3873, 286, 643, 281, 4445, 300, 293, 1500, 309, 293, 5120], "temperature": 0.0, "avg_logprob": -0.09748255989768288, "compression_ratio": 1.6812749003984064, "no_speech_prob": 1.2605615665961523e-05}, {"id": 55, "seek": 21788, "start": 240.14, "end": 241.35999999999999, "text": " with it.", "tokens": [365, 309, 13], "temperature": 0.0, "avg_logprob": -0.09748255989768288, "compression_ratio": 1.6812749003984064, "no_speech_prob": 1.2605615665961523e-05}, {"id": 56, "seek": 24136, "start": 241.36, "end": 249.24, "text": " So that's kind of a really key issue in why we want to go in this direction.", "tokens": [407, 300, 311, 733, 295, 257, 534, 2141, 2734, 294, 983, 321, 528, 281, 352, 294, 341, 3513, 13], "temperature": 0.0, "avg_logprob": -0.10302151333202016, "compression_ratio": 1.854368932038835, "no_speech_prob": 2.9021382488281233e-06}, {"id": 57, "seek": 24136, "start": 249.24, "end": 254.96, "text": " Also, it's increasingly clear that we used to call part two cutting edge deep learning", "tokens": [2743, 11, 309, 311, 12980, 1850, 300, 321, 1143, 281, 818, 644, 732, 6492, 4691, 2452, 2539], "temperature": 0.0, "avg_logprob": -0.10302151333202016, "compression_ratio": 1.854368932038835, "no_speech_prob": 2.9021382488281233e-06}, {"id": 58, "seek": 24136, "start": 254.96, "end": 259.76, "text": " for coders, but it's increasingly clear that the cutting edge of deep learning is really", "tokens": [337, 17656, 433, 11, 457, 309, 311, 12980, 1850, 300, 264, 6492, 4691, 295, 2452, 2539, 307, 534], "temperature": 0.0, "avg_logprob": -0.10302151333202016, "compression_ratio": 1.854368932038835, "no_speech_prob": 2.9021382488281233e-06}, {"id": 59, "seek": 24136, "start": 259.76, "end": 264.88, "text": " about engineering, not about papers.", "tokens": [466, 7043, 11, 406, 466, 10577, 13], "temperature": 0.0, "avg_logprob": -0.10302151333202016, "compression_ratio": 1.854368932038835, "no_speech_prob": 2.9021382488281233e-06}, {"id": 60, "seek": 24136, "start": 264.88, "end": 269.16, "text": " The difference between really effective people in deep learning and the rest is really about", "tokens": [440, 2649, 1296, 534, 4942, 561, 294, 2452, 2539, 293, 264, 1472, 307, 534, 466], "temperature": 0.0, "avg_logprob": -0.10302151333202016, "compression_ratio": 1.854368932038835, "no_speech_prob": 2.9021382488281233e-06}, {"id": 61, "seek": 26916, "start": 269.16, "end": 276.16, "text": " who can make things in code that work properly, and there's very few of those people.", "tokens": [567, 393, 652, 721, 294, 3089, 300, 589, 6108, 11, 293, 456, 311, 588, 1326, 295, 729, 561, 13], "temperature": 0.0, "avg_logprob": -0.07875509489150274, "compression_ratio": 1.6903553299492386, "no_speech_prob": 2.5214869765477488e-06}, {"id": 62, "seek": 26916, "start": 276.16, "end": 285.12, "text": " So really, the goal of this part two is to deepen your practice so you can understand", "tokens": [407, 534, 11, 264, 3387, 295, 341, 644, 732, 307, 281, 45806, 428, 3124, 370, 291, 393, 1223], "temperature": 0.0, "avg_logprob": -0.07875509489150274, "compression_ratio": 1.6903553299492386, "no_speech_prob": 2.5214869765477488e-06}, {"id": 63, "seek": 26916, "start": 285.12, "end": 289.46000000000004, "text": " the things that you care about and build the things you care about and have them work and", "tokens": [264, 721, 300, 291, 1127, 466, 293, 1322, 264, 721, 291, 1127, 466, 293, 362, 552, 589, 293], "temperature": 0.0, "avg_logprob": -0.07875509489150274, "compression_ratio": 1.6903553299492386, "no_speech_prob": 2.5214869765477488e-06}, {"id": 64, "seek": 26916, "start": 289.46000000000004, "end": 293.16, "text": " perform at a reasonable speed.", "tokens": [2042, 412, 257, 10585, 3073, 13], "temperature": 0.0, "avg_logprob": -0.07875509489150274, "compression_ratio": 1.6903553299492386, "no_speech_prob": 2.5214869765477488e-06}, {"id": 65, "seek": 26916, "start": 293.16, "end": 296.22, "text": " So that's where we're trying to head to.", "tokens": [407, 300, 311, 689, 321, 434, 1382, 281, 1378, 281, 13], "temperature": 0.0, "avg_logprob": -0.07875509489150274, "compression_ratio": 1.6903553299492386, "no_speech_prob": 2.5214869765477488e-06}, {"id": 66, "seek": 29622, "start": 296.22, "end": 300.36, "text": " And so it's impractical in the sense that none of these are things that you're going", "tokens": [400, 370, 309, 311, 704, 1897, 804, 294, 264, 2020, 300, 6022, 295, 613, 366, 721, 300, 291, 434, 516], "temperature": 0.0, "avg_logprob": -0.12378371078356178, "compression_ratio": 1.6884615384615385, "no_speech_prob": 3.5559123716666363e-06}, {"id": 67, "seek": 29622, "start": 300.36, "end": 307.0, "text": " to go probably straight away and say, here's this thing I built, particularly Swift, because", "tokens": [281, 352, 1391, 2997, 1314, 293, 584, 11, 510, 311, 341, 551, 286, 3094, 11, 4098, 25539, 11, 570], "temperature": 0.0, "avg_logprob": -0.12378371078356178, "compression_ratio": 1.6884615384615385, "no_speech_prob": 3.5559123716666363e-06}, {"id": 68, "seek": 29622, "start": 307.0, "end": 311.48, "text": " Swift, we're actually going to be learning a language in a library that, as you'll see,", "tokens": [25539, 11, 321, 434, 767, 516, 281, 312, 2539, 257, 2856, 294, 257, 6405, 300, 11, 382, 291, 603, 536, 11], "temperature": 0.0, "avg_logprob": -0.12378371078356178, "compression_ratio": 1.6884615384615385, "no_speech_prob": 3.5559123716666363e-06}, {"id": 69, "seek": 29622, "start": 311.48, "end": 316.12, "text": " is far from ready for use, and I'll describe why we're doing that in a moment.", "tokens": [307, 1400, 490, 1919, 337, 764, 11, 293, 286, 603, 6786, 983, 321, 434, 884, 300, 294, 257, 1623, 13], "temperature": 0.0, "avg_logprob": -0.12378371078356178, "compression_ratio": 1.6884615384615385, "no_speech_prob": 3.5559123716666363e-06}, {"id": 70, "seek": 29622, "start": 316.12, "end": 323.44000000000005, "text": " So part one of this course was top down, so that you got the context you needed to understand,", "tokens": [407, 644, 472, 295, 341, 1164, 390, 1192, 760, 11, 370, 300, 291, 658, 264, 4319, 291, 2978, 281, 1223, 11], "temperature": 0.0, "avg_logprob": -0.12378371078356178, "compression_ratio": 1.6884615384615385, "no_speech_prob": 3.5559123716666363e-06}, {"id": 71, "seek": 32344, "start": 323.44, "end": 326.8, "text": " you got the motivation you needed to keep going, and you got the results you needed", "tokens": [291, 658, 264, 12335, 291, 2978, 281, 1066, 516, 11, 293, 291, 658, 264, 3542, 291, 2978], "temperature": 0.0, "avg_logprob": -0.1206663360595703, "compression_ratio": 1.8777777777777778, "no_speech_prob": 1.0952229786198586e-05}, {"id": 72, "seek": 32344, "start": 326.8, "end": 329.4, "text": " to make it useful.", "tokens": [281, 652, 309, 4420, 13], "temperature": 0.0, "avg_logprob": -0.1206663360595703, "compression_ratio": 1.8777777777777778, "no_speech_prob": 1.0952229786198586e-05}, {"id": 73, "seek": 32344, "start": 329.4, "end": 334.96, "text": " But bottom up is useful too, and we started doing some bottom up at the end of part one,", "tokens": [583, 2767, 493, 307, 4420, 886, 11, 293, 321, 1409, 884, 512, 2767, 493, 412, 264, 917, 295, 644, 472, 11], "temperature": 0.0, "avg_logprob": -0.1206663360595703, "compression_ratio": 1.8777777777777778, "no_speech_prob": 1.0952229786198586e-05}, {"id": 74, "seek": 32344, "start": 334.96, "end": 335.96, "text": " right?", "tokens": [558, 30], "temperature": 0.0, "avg_logprob": -0.1206663360595703, "compression_ratio": 1.8777777777777778, "no_speech_prob": 1.0952229786198586e-05}, {"id": 75, "seek": 32344, "start": 335.96, "end": 341.56, "text": " But really bottom up lets you, when you've built everything from the bottom yourself,", "tokens": [583, 534, 2767, 493, 6653, 291, 11, 562, 291, 600, 3094, 1203, 490, 264, 2767, 1803, 11], "temperature": 0.0, "avg_logprob": -0.1206663360595703, "compression_ratio": 1.8777777777777778, "no_speech_prob": 1.0952229786198586e-05}, {"id": 76, "seek": 32344, "start": 341.56, "end": 344.4, "text": " then you can see the connections between all the different things.", "tokens": [550, 291, 393, 536, 264, 9271, 1296, 439, 264, 819, 721, 13], "temperature": 0.0, "avg_logprob": -0.1206663360595703, "compression_ratio": 1.8777777777777778, "no_speech_prob": 1.0952229786198586e-05}, {"id": 77, "seek": 32344, "start": 344.4, "end": 347.52, "text": " You can see they're all variations of the same thing, you know?", "tokens": [509, 393, 536, 436, 434, 439, 17840, 295, 264, 912, 551, 11, 291, 458, 30], "temperature": 0.0, "avg_logprob": -0.1206663360595703, "compression_ratio": 1.8777777777777778, "no_speech_prob": 1.0952229786198586e-05}, {"id": 78, "seek": 32344, "start": 347.52, "end": 352.6, "text": " And then you can customize, rather than picking algorithm A or algorithm B, you create your", "tokens": [400, 550, 291, 393, 19734, 11, 2831, 813, 8867, 9284, 316, 420, 9284, 363, 11, 291, 1884, 428], "temperature": 0.0, "avg_logprob": -0.1206663360595703, "compression_ratio": 1.8777777777777778, "no_speech_prob": 1.0952229786198586e-05}, {"id": 79, "seek": 35260, "start": 352.6, "end": 358.08000000000004, "text": " own algorithm to solve your own problem doing just the things you need it to do.", "tokens": [1065, 9284, 281, 5039, 428, 1065, 1154, 884, 445, 264, 721, 291, 643, 309, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.11341715331124787, "compression_ratio": 1.6651785714285714, "no_speech_prob": 4.637649453798076e-06}, {"id": 80, "seek": 35260, "start": 358.08000000000004, "end": 365.8, "text": " And then you can make sure that it performs well, that you can debug it, profile it, maintain", "tokens": [400, 550, 291, 393, 652, 988, 300, 309, 26213, 731, 11, 300, 291, 393, 24083, 309, 11, 7964, 309, 11, 6909], "temperature": 0.0, "avg_logprob": -0.11341715331124787, "compression_ratio": 1.6651785714285714, "no_speech_prob": 4.637649453798076e-06}, {"id": 81, "seek": 35260, "start": 365.8, "end": 368.78000000000003, "text": " it, because you understand all of the pieces.", "tokens": [309, 11, 570, 291, 1223, 439, 295, 264, 3755, 13], "temperature": 0.0, "avg_logprob": -0.11341715331124787, "compression_ratio": 1.6651785714285714, "no_speech_prob": 4.637649453798076e-06}, {"id": 82, "seek": 35260, "start": 368.78000000000003, "end": 375.12, "text": " So normally when people say bottom up in this world, in this field, they mean bottom up", "tokens": [407, 5646, 562, 561, 584, 2767, 493, 294, 341, 1002, 11, 294, 341, 2519, 11, 436, 914, 2767, 493], "temperature": 0.0, "avg_logprob": -0.11341715331124787, "compression_ratio": 1.6651785714285714, "no_speech_prob": 4.637649453798076e-06}, {"id": 83, "seek": 35260, "start": 375.12, "end": 376.12, "text": " with math.", "tokens": [365, 5221, 13], "temperature": 0.0, "avg_logprob": -0.11341715331124787, "compression_ratio": 1.6651785714285714, "no_speech_prob": 4.637649453798076e-06}, {"id": 84, "seek": 35260, "start": 376.12, "end": 378.20000000000005, "text": " I don't mean that.", "tokens": [286, 500, 380, 914, 300, 13], "temperature": 0.0, "avg_logprob": -0.11341715331124787, "compression_ratio": 1.6651785714285714, "no_speech_prob": 4.637649453798076e-06}, {"id": 85, "seek": 35260, "start": 378.20000000000005, "end": 380.82000000000005, "text": " I mean bottom up with code, right?", "tokens": [286, 914, 2767, 493, 365, 3089, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.11341715331124787, "compression_ratio": 1.6651785714285714, "no_speech_prob": 4.637649453798076e-06}, {"id": 86, "seek": 38082, "start": 380.82, "end": 390.28, "text": " So today, step one will be to implement matrix multiplication from scratch in Python.", "tokens": [407, 965, 11, 1823, 472, 486, 312, 281, 4445, 8141, 27290, 490, 8459, 294, 15329, 13], "temperature": 0.0, "avg_logprob": -0.11704848737132792, "compression_ratio": 1.6595744680851063, "no_speech_prob": 5.594100002781488e-06}, {"id": 87, "seek": 38082, "start": 390.28, "end": 396.48, "text": " Because bottom up with code means that you can experiment really deeply on every part", "tokens": [1436, 2767, 493, 365, 3089, 1355, 300, 291, 393, 5120, 534, 8760, 322, 633, 644], "temperature": 0.0, "avg_logprob": -0.11704848737132792, "compression_ratio": 1.6595744680851063, "no_speech_prob": 5.594100002781488e-06}, {"id": 88, "seek": 38082, "start": 396.48, "end": 398.4, "text": " of every bit of the system.", "tokens": [295, 633, 857, 295, 264, 1185, 13], "temperature": 0.0, "avg_logprob": -0.11704848737132792, "compression_ratio": 1.6595744680851063, "no_speech_prob": 5.594100002781488e-06}, {"id": 89, "seek": 38082, "start": 398.4, "end": 401.88, "text": " You can see exactly what's going in, exactly what's coming out, and you can figure out", "tokens": [509, 393, 536, 2293, 437, 311, 516, 294, 11, 2293, 437, 311, 1348, 484, 11, 293, 291, 393, 2573, 484], "temperature": 0.0, "avg_logprob": -0.11704848737132792, "compression_ratio": 1.6595744680851063, "no_speech_prob": 5.594100002781488e-06}, {"id": 90, "seek": 38082, "start": 401.88, "end": 406.24, "text": " why your model's not training well, or why it's slow, or why it's giving the wrong answer,", "tokens": [983, 428, 2316, 311, 406, 3097, 731, 11, 420, 983, 309, 311, 2964, 11, 420, 983, 309, 311, 2902, 264, 2085, 1867, 11], "temperature": 0.0, "avg_logprob": -0.11704848737132792, "compression_ratio": 1.6595744680851063, "no_speech_prob": 5.594100002781488e-06}, {"id": 91, "seek": 38082, "start": 406.24, "end": 408.48, "text": " or whatever.", "tokens": [420, 2035, 13], "temperature": 0.0, "avg_logprob": -0.11704848737132792, "compression_ratio": 1.6595744680851063, "no_speech_prob": 5.594100002781488e-06}, {"id": 92, "seek": 40848, "start": 408.48, "end": 411.02000000000004, "text": " So why Swift?", "tokens": [407, 983, 25539, 30], "temperature": 0.0, "avg_logprob": -0.14509861622381648, "compression_ratio": 1.5685483870967742, "no_speech_prob": 3.4464967484382214e-06}, {"id": 93, "seek": 40848, "start": 411.02000000000004, "end": 412.24, "text": " What are these two lessons about?", "tokens": [708, 366, 613, 732, 8820, 466, 30], "temperature": 0.0, "avg_logprob": -0.14509861622381648, "compression_ratio": 1.5685483870967742, "no_speech_prob": 3.4464967484382214e-06}, {"id": 94, "seek": 40848, "start": 412.24, "end": 416.20000000000005, "text": " And be clear, we are only talking the last two lessons, right?", "tokens": [400, 312, 1850, 11, 321, 366, 787, 1417, 264, 1036, 732, 8820, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.14509861622381648, "compression_ratio": 1.5685483870967742, "no_speech_prob": 3.4464967484382214e-06}, {"id": 95, "seek": 40848, "start": 416.20000000000005, "end": 423.6, "text": " Our focus, as I'll describe, is still very much Python and PyTorch, right?", "tokens": [2621, 1879, 11, 382, 286, 603, 6786, 11, 307, 920, 588, 709, 15329, 293, 9953, 51, 284, 339, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.14509861622381648, "compression_ratio": 1.5685483870967742, "no_speech_prob": 3.4464967484382214e-06}, {"id": 96, "seek": 40848, "start": 423.6, "end": 427.34000000000003, "text": " But there's something very exciting going on.", "tokens": [583, 456, 311, 746, 588, 4670, 516, 322, 13], "temperature": 0.0, "avg_logprob": -0.14509861622381648, "compression_ratio": 1.5685483870967742, "no_speech_prob": 3.4464967484382214e-06}, {"id": 97, "seek": 40848, "start": 427.34000000000003, "end": 431.44, "text": " The first exciting thing is this guy's face you see here, Chris Latner.", "tokens": [440, 700, 4670, 551, 307, 341, 2146, 311, 1851, 291, 536, 510, 11, 6688, 7354, 1193, 13], "temperature": 0.0, "avg_logprob": -0.14509861622381648, "compression_ratio": 1.5685483870967742, "no_speech_prob": 3.4464967484382214e-06}, {"id": 98, "seek": 40848, "start": 431.44, "end": 437.36, "text": " Chris is unique as far as I know as being somebody who has built, I think what is the", "tokens": [6688, 307, 3845, 382, 1400, 382, 286, 458, 382, 885, 2618, 567, 575, 3094, 11, 286, 519, 437, 307, 264], "temperature": 0.0, "avg_logprob": -0.14509861622381648, "compression_ratio": 1.5685483870967742, "no_speech_prob": 3.4464967484382214e-06}, {"id": 99, "seek": 43736, "start": 437.36, "end": 441.96000000000004, "text": " world's most widely used compiler framework, LLVM.", "tokens": [1002, 311, 881, 13371, 1143, 31958, 8388, 11, 441, 43, 53, 44, 13], "temperature": 0.0, "avg_logprob": -0.09507154649303805, "compression_ratio": 1.5240174672489082, "no_speech_prob": 4.936747245665174e-06}, {"id": 100, "seek": 43736, "start": 441.96000000000004, "end": 451.08000000000004, "text": " He's built the default C and C++ compiler for Mac, Bing Clang, and he's built what's", "tokens": [634, 311, 3094, 264, 7576, 383, 293, 383, 25472, 31958, 337, 5707, 11, 30755, 2033, 656, 11, 293, 415, 311, 3094, 437, 311], "temperature": 0.0, "avg_logprob": -0.09507154649303805, "compression_ratio": 1.5240174672489082, "no_speech_prob": 4.936747245665174e-06}, {"id": 101, "seek": 43736, "start": 451.08000000000004, "end": 457.88, "text": " probably like the world's fastest growing, fairly new computer language, Bing Swift.", "tokens": [1391, 411, 264, 1002, 311, 14573, 4194, 11, 6457, 777, 3820, 2856, 11, 30755, 25539, 13], "temperature": 0.0, "avg_logprob": -0.09507154649303805, "compression_ratio": 1.5240174672489082, "no_speech_prob": 4.936747245665174e-06}, {"id": 102, "seek": 43736, "start": 457.88, "end": 462.2, "text": " And he's now dedicating his life to deep learning, right?", "tokens": [400, 415, 311, 586, 4172, 30541, 702, 993, 281, 2452, 2539, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.09507154649303805, "compression_ratio": 1.5240174672489082, "no_speech_prob": 4.936747245665174e-06}, {"id": 103, "seek": 43736, "start": 462.2, "end": 467.08000000000004, "text": " So we haven't had somebody from that world come into our world before.", "tokens": [407, 321, 2378, 380, 632, 2618, 490, 300, 1002, 808, 666, 527, 1002, 949, 13], "temperature": 0.0, "avg_logprob": -0.09507154649303805, "compression_ratio": 1.5240174672489082, "no_speech_prob": 4.936747245665174e-06}, {"id": 104, "seek": 46708, "start": 467.08, "end": 473.08, "text": " And so when you actually look at stuff like the internals of something like TensorFlow,", "tokens": [400, 370, 562, 291, 767, 574, 412, 1507, 411, 264, 2154, 1124, 295, 746, 411, 37624, 11], "temperature": 0.0, "avg_logprob": -0.12200876940851627, "compression_ratio": 1.708695652173913, "no_speech_prob": 2.4058574581431458e-06}, {"id": 105, "seek": 46708, "start": 473.08, "end": 477.08, "text": " it looks like something that was built by a bunch of deep learning people, not by a", "tokens": [309, 1542, 411, 746, 300, 390, 3094, 538, 257, 3840, 295, 2452, 2539, 561, 11, 406, 538, 257], "temperature": 0.0, "avg_logprob": -0.12200876940851627, "compression_ratio": 1.708695652173913, "no_speech_prob": 2.4058574581431458e-06}, {"id": 106, "seek": 46708, "start": 477.08, "end": 479.88, "text": " bunch of compiler people, right?", "tokens": [3840, 295, 31958, 561, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.12200876940851627, "compression_ratio": 1.708695652173913, "no_speech_prob": 2.4058574581431458e-06}, {"id": 107, "seek": 46708, "start": 479.88, "end": 487.59999999999997, "text": " And so I've been wanting for over 20 years for there to be a good numerical programming", "tokens": [400, 370, 286, 600, 668, 7935, 337, 670, 945, 924, 337, 456, 281, 312, 257, 665, 29054, 9410], "temperature": 0.0, "avg_logprob": -0.12200876940851627, "compression_ratio": 1.708695652173913, "no_speech_prob": 2.4058574581431458e-06}, {"id": 108, "seek": 46708, "start": 487.59999999999997, "end": 492.71999999999997, "text": " language that was built by somebody that really gets programming languages, and it's never", "tokens": [2856, 300, 390, 3094, 538, 2618, 300, 534, 2170, 9410, 8650, 11, 293, 309, 311, 1128], "temperature": 0.0, "avg_logprob": -0.12200876940851627, "compression_ratio": 1.708695652173913, "no_speech_prob": 2.4058574581431458e-06}, {"id": 109, "seek": 46708, "start": 492.71999999999997, "end": 494.52, "text": " happened.", "tokens": [2011, 13], "temperature": 0.0, "avg_logprob": -0.12200876940851627, "compression_ratio": 1.708695652173913, "no_speech_prob": 2.4058574581431458e-06}, {"id": 110, "seek": 49452, "start": 494.52, "end": 501.4, "text": " So we've had like in the early days it was eLispStat in Lisp, and then it was R, and", "tokens": [407, 321, 600, 632, 411, 294, 264, 2440, 1708, 309, 390, 308, 43, 7631, 4520, 267, 294, 441, 7631, 11, 293, 550, 309, 390, 497, 11, 293], "temperature": 0.0, "avg_logprob": -0.16417152650894656, "compression_ratio": 1.6009389671361502, "no_speech_prob": 5.5065174819901586e-06}, {"id": 111, "seek": 49452, "start": 501.4, "end": 502.4, "text": " then it was Python.", "tokens": [550, 309, 390, 15329, 13], "temperature": 0.0, "avg_logprob": -0.16417152650894656, "compression_ratio": 1.6009389671361502, "no_speech_prob": 5.5065174819901586e-06}, {"id": 112, "seek": 49452, "start": 502.4, "end": 510.44, "text": " None of these languages were built to be good at data analysis.", "tokens": [14492, 295, 613, 8650, 645, 3094, 281, 312, 665, 412, 1412, 5215, 13], "temperature": 0.0, "avg_logprob": -0.16417152650894656, "compression_ratio": 1.6009389671361502, "no_speech_prob": 5.5065174819901586e-06}, {"id": 113, "seek": 49452, "start": 510.44, "end": 514.76, "text": " They weren't built by people that really deeply understood compilers.", "tokens": [814, 4999, 380, 3094, 538, 561, 300, 534, 8760, 7320, 715, 388, 433, 13], "temperature": 0.0, "avg_logprob": -0.16417152650894656, "compression_ratio": 1.6009389671361502, "no_speech_prob": 5.5065174819901586e-06}, {"id": 114, "seek": 49452, "start": 514.76, "end": 520.04, "text": " They certainly weren't built for today's kind of modern, highly parallel processor situation", "tokens": [814, 3297, 4999, 380, 3094, 337, 965, 311, 733, 295, 4363, 11, 5405, 8952, 15321, 2590], "temperature": 0.0, "avg_logprob": -0.16417152650894656, "compression_ratio": 1.6009389671361502, "no_speech_prob": 5.5065174819901586e-06}, {"id": 115, "seek": 49452, "start": 520.04, "end": 522.6, "text": " we're in.", "tokens": [321, 434, 294, 13], "temperature": 0.0, "avg_logprob": -0.16417152650894656, "compression_ratio": 1.6009389671361502, "no_speech_prob": 5.5065174819901586e-06}, {"id": 116, "seek": 52260, "start": 522.6, "end": 524.8000000000001, "text": " But Swift was, Swift is, right?", "tokens": [583, 25539, 390, 11, 25539, 307, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.12773650160459715, "compression_ratio": 1.6718146718146718, "no_speech_prob": 6.64311437503784e-06}, {"id": 117, "seek": 52260, "start": 524.8000000000001, "end": 532.44, "text": " And so we've got this unique situation where for the first time a really widely used language,", "tokens": [400, 370, 321, 600, 658, 341, 3845, 2590, 689, 337, 264, 700, 565, 257, 534, 13371, 1143, 2856, 11], "temperature": 0.0, "avg_logprob": -0.12773650160459715, "compression_ratio": 1.6718146718146718, "no_speech_prob": 6.64311437503784e-06}, {"id": 118, "seek": 52260, "start": 532.44, "end": 539.84, "text": " a really well designed language from the ground up is actually being targeted towards numeric", "tokens": [257, 534, 731, 4761, 2856, 490, 264, 2727, 493, 307, 767, 885, 15045, 3030, 7866, 299], "temperature": 0.0, "avg_logprob": -0.12773650160459715, "compression_ratio": 1.6718146718146718, "no_speech_prob": 6.64311437503784e-06}, {"id": 119, "seek": 52260, "start": 539.84, "end": 541.4, "text": " programming and deep learning.", "tokens": [9410, 293, 2452, 2539, 13], "temperature": 0.0, "avg_logprob": -0.12773650160459715, "compression_ratio": 1.6718146718146718, "no_speech_prob": 6.64311437503784e-06}, {"id": 120, "seek": 52260, "start": 541.4, "end": 546.72, "text": " So there's no way I'm missing out on that boat, and I don't want you to miss out on", "tokens": [407, 456, 311, 572, 636, 286, 478, 5361, 484, 322, 300, 6582, 11, 293, 286, 500, 380, 528, 291, 281, 1713, 484, 322], "temperature": 0.0, "avg_logprob": -0.12773650160459715, "compression_ratio": 1.6718146718146718, "no_speech_prob": 6.64311437503784e-06}, {"id": 121, "seek": 52260, "start": 546.72, "end": 547.72, "text": " it either.", "tokens": [309, 2139, 13], "temperature": 0.0, "avg_logprob": -0.12773650160459715, "compression_ratio": 1.6718146718146718, "no_speech_prob": 6.64311437503784e-06}, {"id": 122, "seek": 52260, "start": 547.72, "end": 552.48, "text": " I should mention there's another language which you could possibly put in there, which", "tokens": [286, 820, 2152, 456, 311, 1071, 2856, 597, 291, 727, 6264, 829, 294, 456, 11, 597], "temperature": 0.0, "avg_logprob": -0.12773650160459715, "compression_ratio": 1.6718146718146718, "no_speech_prob": 6.64311437503784e-06}, {"id": 123, "seek": 55248, "start": 552.48, "end": 559.16, "text": " is a language called Julia, which has maybe as much potential.", "tokens": [307, 257, 2856, 1219, 18551, 11, 597, 575, 1310, 382, 709, 3995, 13], "temperature": 0.0, "avg_logprob": -0.19059682846069337, "compression_ratio": 1.5590551181102361, "no_speech_prob": 1.695783794275485e-05}, {"id": 124, "seek": 55248, "start": 559.16, "end": 562.24, "text": " But it's about ten times less used than Swift.", "tokens": [583, 309, 311, 466, 2064, 1413, 1570, 1143, 813, 25539, 13], "temperature": 0.0, "avg_logprob": -0.19059682846069337, "compression_ratio": 1.5590551181102361, "no_speech_prob": 1.695783794275485e-05}, {"id": 125, "seek": 55248, "start": 562.24, "end": 566.6, "text": " It doesn't have the same level of community, but I would still say it's super exciting.", "tokens": [467, 1177, 380, 362, 264, 912, 1496, 295, 1768, 11, 457, 286, 576, 920, 584, 309, 311, 1687, 4670, 13], "temperature": 0.0, "avg_logprob": -0.19059682846069337, "compression_ratio": 1.5590551181102361, "no_speech_prob": 1.695783794275485e-05}, {"id": 126, "seek": 55248, "start": 566.6, "end": 572.0, "text": " So I'd say maybe there's two languages which you might want to seriously consider picking", "tokens": [407, 286, 1116, 584, 1310, 456, 311, 732, 8650, 597, 291, 1062, 528, 281, 6638, 1949, 8867], "temperature": 0.0, "avg_logprob": -0.19059682846069337, "compression_ratio": 1.5590551181102361, "no_speech_prob": 1.695783794275485e-05}, {"id": 127, "seek": 55248, "start": 572.0, "end": 576.08, "text": " one and spending some time with it.", "tokens": [472, 293, 6434, 512, 565, 365, 309, 13], "temperature": 0.0, "avg_logprob": -0.19059682846069337, "compression_ratio": 1.5590551181102361, "no_speech_prob": 1.695783794275485e-05}, {"id": 128, "seek": 55248, "start": 576.08, "end": 578.64, "text": " Julia is actually further along.", "tokens": [18551, 307, 767, 3052, 2051, 13], "temperature": 0.0, "avg_logprob": -0.19059682846069337, "compression_ratio": 1.5590551181102361, "no_speech_prob": 1.695783794275485e-05}, {"id": 129, "seek": 55248, "start": 578.64, "end": 580.48, "text": " Swift is very early days in this world.", "tokens": [25539, 307, 588, 2440, 1708, 294, 341, 1002, 13], "temperature": 0.0, "avg_logprob": -0.19059682846069337, "compression_ratio": 1.5590551181102361, "no_speech_prob": 1.695783794275485e-05}, {"id": 130, "seek": 58048, "start": 580.48, "end": 582.84, "text": " But that's one of the things I'm excited about for it.", "tokens": [583, 300, 311, 472, 295, 264, 721, 286, 478, 2919, 466, 337, 309, 13], "temperature": 0.0, "avg_logprob": -0.1267834796181208, "compression_ratio": 1.481818181818182, "no_speech_prob": 2.9478642318281345e-06}, {"id": 131, "seek": 58048, "start": 582.84, "end": 589.52, "text": " So I actually spent some time over the Christmas break kind of digging into numeric programming", "tokens": [407, 286, 767, 4418, 512, 565, 670, 264, 5272, 1821, 733, 295, 17343, 666, 7866, 299, 9410], "temperature": 0.0, "avg_logprob": -0.1267834796181208, "compression_ratio": 1.481818181818182, "no_speech_prob": 2.9478642318281345e-06}, {"id": 132, "seek": 58048, "start": 589.52, "end": 598.28, "text": " in Swift, and I was delighted to find that I could create code from scratch that was", "tokens": [294, 25539, 11, 293, 286, 390, 18783, 281, 915, 300, 286, 727, 1884, 3089, 490, 8459, 300, 390], "temperature": 0.0, "avg_logprob": -0.1267834796181208, "compression_ratio": 1.481818181818182, "no_speech_prob": 2.9478642318281345e-06}, {"id": 133, "seek": 58048, "start": 598.28, "end": 608.5600000000001, "text": " competitive with the fastest hand-tuned Vendor linear algebra libraries, even though I am,", "tokens": [10043, 365, 264, 14573, 1011, 12, 83, 43703, 691, 521, 284, 8213, 21989, 15148, 11, 754, 1673, 286, 669, 11], "temperature": 0.0, "avg_logprob": -0.1267834796181208, "compression_ratio": 1.481818181818182, "no_speech_prob": 2.9478642318281345e-06}, {"id": 134, "seek": 60856, "start": 608.56, "end": 611.68, "text": " and remain pretty incompetent at Swift.", "tokens": [293, 6222, 1238, 41602, 317, 412, 25539, 13], "temperature": 0.0, "avg_logprob": -0.19470531463623048, "compression_ratio": 1.5758928571428572, "no_speech_prob": 1.2604787116288207e-05}, {"id": 135, "seek": 60856, "start": 611.68, "end": 615.16, "text": " I found it was a language that was really delightful.", "tokens": [286, 1352, 309, 390, 257, 2856, 300, 390, 534, 35194, 13], "temperature": 0.0, "avg_logprob": -0.19470531463623048, "compression_ratio": 1.5758928571428572, "no_speech_prob": 1.2604787116288207e-05}, {"id": 136, "seek": 60856, "start": 615.16, "end": 616.16, "text": " It was expressive.", "tokens": [467, 390, 40189, 13], "temperature": 0.0, "avg_logprob": -0.19470531463623048, "compression_ratio": 1.5758928571428572, "no_speech_prob": 1.2604787116288207e-05}, {"id": 137, "seek": 60856, "start": 616.16, "end": 622.52, "text": " It was concise, but it was also very performant, and I could write everything in Swift rather", "tokens": [467, 390, 44882, 11, 457, 309, 390, 611, 588, 2042, 394, 11, 293, 286, 727, 2464, 1203, 294, 25539, 2831], "temperature": 0.0, "avg_logprob": -0.19470531463623048, "compression_ratio": 1.5758928571428572, "no_speech_prob": 1.2604787116288207e-05}, {"id": 138, "seek": 60856, "start": 622.52, "end": 626.88, "text": " than having to kind of get to some layer where it's like, oh, that's QDNN now, or that's", "tokens": [813, 1419, 281, 733, 295, 483, 281, 512, 4583, 689, 309, 311, 411, 11, 1954, 11, 300, 311, 1249, 35, 45, 45, 586, 11, 420, 300, 311], "temperature": 0.0, "avg_logprob": -0.19470531463623048, "compression_ratio": 1.5758928571428572, "no_speech_prob": 1.2604787116288207e-05}, {"id": 139, "seek": 60856, "start": 626.88, "end": 629.0999999999999, "text": " MKL now, or whatever.", "tokens": [30770, 43, 586, 11, 420, 2035, 13], "temperature": 0.0, "avg_logprob": -0.19470531463623048, "compression_ratio": 1.5758928571428572, "no_speech_prob": 1.2604787116288207e-05}, {"id": 140, "seek": 60856, "start": 629.0999999999999, "end": 634.1199999999999, "text": " So that got me pretty enthusiastic.", "tokens": [407, 300, 658, 385, 1238, 28574, 13], "temperature": 0.0, "avg_logprob": -0.19470531463623048, "compression_ratio": 1.5758928571428572, "no_speech_prob": 1.2604787116288207e-05}, {"id": 141, "seek": 63412, "start": 634.12, "end": 639.76, "text": " And so the really exciting news, as I'm sure you've heard, is that Chris Latner himself", "tokens": [400, 370, 264, 534, 4670, 2583, 11, 382, 286, 478, 988, 291, 600, 2198, 11, 307, 300, 6688, 7354, 1193, 3647], "temperature": 0.0, "avg_logprob": -0.07859172139848981, "compression_ratio": 1.5943396226415094, "no_speech_prob": 4.710650500783231e-06}, {"id": 142, "seek": 63412, "start": 639.76, "end": 645.24, "text": " is going to come and join us for the last two lessons, and we're going to teach Swift", "tokens": [307, 516, 281, 808, 293, 3917, 505, 337, 264, 1036, 732, 8820, 11, 293, 321, 434, 516, 281, 2924, 25539], "temperature": 0.0, "avg_logprob": -0.07859172139848981, "compression_ratio": 1.5943396226415094, "no_speech_prob": 4.710650500783231e-06}, {"id": 143, "seek": 63412, "start": 645.24, "end": 648.5600000000001, "text": " for deep learning together.", "tokens": [337, 2452, 2539, 1214, 13], "temperature": 0.0, "avg_logprob": -0.07859172139848981, "compression_ratio": 1.5943396226415094, "no_speech_prob": 4.710650500783231e-06}, {"id": 144, "seek": 63412, "start": 648.5600000000001, "end": 653.36, "text": " So Swift for deep learning means Swift for TensorFlow.", "tokens": [407, 25539, 337, 2452, 2539, 1355, 25539, 337, 37624, 13], "temperature": 0.0, "avg_logprob": -0.07859172139848981, "compression_ratio": 1.5943396226415094, "no_speech_prob": 4.710650500783231e-06}, {"id": 145, "seek": 63412, "start": 653.36, "end": 661.52, "text": " That's specifically the library that Chris and his team at Google are working on.", "tokens": [663, 311, 4682, 264, 6405, 300, 6688, 293, 702, 1469, 412, 3329, 366, 1364, 322, 13], "temperature": 0.0, "avg_logprob": -0.07859172139848981, "compression_ratio": 1.5943396226415094, "no_speech_prob": 4.710650500783231e-06}, {"id": 146, "seek": 66152, "start": 661.52, "end": 665.24, "text": " We will call that S4TF when I write it down, because I couldn't be bothered typing Swift", "tokens": [492, 486, 818, 300, 318, 19, 20527, 562, 286, 2464, 309, 760, 11, 570, 286, 2809, 380, 312, 22996, 18444, 25539], "temperature": 0.0, "avg_logprob": -0.177775431160975, "compression_ratio": 1.6101694915254237, "no_speech_prob": 3.288564357717405e-06}, {"id": 147, "seek": 66152, "start": 665.24, "end": 667.96, "text": " for TensorFlow every time.", "tokens": [337, 37624, 633, 565, 13], "temperature": 0.0, "avg_logprob": -0.177775431160975, "compression_ratio": 1.6101694915254237, "no_speech_prob": 3.288564357717405e-06}, {"id": 148, "seek": 66152, "start": 667.96, "end": 672.96, "text": " Swift for TensorFlow has some pros and cons.", "tokens": [25539, 337, 37624, 575, 512, 6267, 293, 1014, 13], "temperature": 0.0, "avg_logprob": -0.177775431160975, "compression_ratio": 1.6101694915254237, "no_speech_prob": 3.288564357717405e-06}, {"id": 149, "seek": 66152, "start": 672.96, "end": 675.16, "text": " PyTorch has some pros and cons.", "tokens": [9953, 51, 284, 339, 575, 512, 6267, 293, 1014, 13], "temperature": 0.0, "avg_logprob": -0.177775431160975, "compression_ratio": 1.6101694915254237, "no_speech_prob": 3.288564357717405e-06}, {"id": 150, "seek": 66152, "start": 675.16, "end": 679.8, "text": " And interestingly, they're the opposite of each other.", "tokens": [400, 25873, 11, 436, 434, 264, 6182, 295, 1184, 661, 13], "temperature": 0.0, "avg_logprob": -0.177775431160975, "compression_ratio": 1.6101694915254237, "no_speech_prob": 3.288564357717405e-06}, {"id": 151, "seek": 66152, "start": 679.8, "end": 687.84, "text": " PyTorch's and Python's pros are you can get stuff done right now with this amazing ecosystem,", "tokens": [9953, 51, 284, 339, 311, 293, 15329, 311, 6267, 366, 291, 393, 483, 1507, 1096, 558, 586, 365, 341, 2243, 11311, 11], "temperature": 0.0, "avg_logprob": -0.177775431160975, "compression_ratio": 1.6101694915254237, "no_speech_prob": 3.288564357717405e-06}, {"id": 152, "seek": 66152, "start": 687.84, "end": 691.12, "text": " fantastic documentation and tutorials.", "tokens": [5456, 14333, 293, 17616, 13], "temperature": 0.0, "avg_logprob": -0.177775431160975, "compression_ratio": 1.6101694915254237, "no_speech_prob": 3.288564357717405e-06}, {"id": 153, "seek": 69112, "start": 691.12, "end": 698.48, "text": " It's just a really great practical system for solving problems.", "tokens": [467, 311, 445, 257, 534, 869, 8496, 1185, 337, 12606, 2740, 13], "temperature": 0.0, "avg_logprob": -0.12481143257834694, "compression_ratio": 1.6196581196581197, "no_speech_prob": 3.2885773180169053e-06}, {"id": 154, "seek": 69112, "start": 698.48, "end": 702.04, "text": " And to be clear, Swift for TensorFlow is not.", "tokens": [400, 281, 312, 1850, 11, 25539, 337, 37624, 307, 406, 13], "temperature": 0.0, "avg_logprob": -0.12481143257834694, "compression_ratio": 1.6196581196581197, "no_speech_prob": 3.2885773180169053e-06}, {"id": 155, "seek": 69112, "start": 702.04, "end": 704.16, "text": " It's not any of those things right now.", "tokens": [467, 311, 406, 604, 295, 729, 721, 558, 586, 13], "temperature": 0.0, "avg_logprob": -0.12481143257834694, "compression_ratio": 1.6196581196581197, "no_speech_prob": 3.2885773180169053e-06}, {"id": 156, "seek": 69112, "start": 704.16, "end": 707.28, "text": " It's really early.", "tokens": [467, 311, 534, 2440, 13], "temperature": 0.0, "avg_logprob": -0.12481143257834694, "compression_ratio": 1.6196581196581197, "no_speech_prob": 3.2885773180169053e-06}, {"id": 157, "seek": 69112, "start": 707.28, "end": 709.28, "text": " Almost nothing works.", "tokens": [12627, 1825, 1985, 13], "temperature": 0.0, "avg_logprob": -0.12481143257834694, "compression_ratio": 1.6196581196581197, "no_speech_prob": 3.2885773180169053e-06}, {"id": 158, "seek": 69112, "start": 709.28, "end": 712.48, "text": " You have to learn a whole new language if you don't know Swift already.", "tokens": [509, 362, 281, 1466, 257, 1379, 777, 2856, 498, 291, 500, 380, 458, 25539, 1217, 13], "temperature": 0.0, "avg_logprob": -0.12481143257834694, "compression_ratio": 1.6196581196581197, "no_speech_prob": 3.2885773180169053e-06}, {"id": 159, "seek": 69112, "start": 712.48, "end": 713.48, "text": " There's very little ecosystem.", "tokens": [821, 311, 588, 707, 11311, 13], "temperature": 0.0, "avg_logprob": -0.12481143257834694, "compression_ratio": 1.6196581196581197, "no_speech_prob": 3.2885773180169053e-06}, {"id": 160, "seek": 69112, "start": 713.48, "end": 718.72, "text": " I'm not talking about Swift in particular, but the Swift for TensorFlow and Swift for", "tokens": [286, 478, 406, 1417, 466, 25539, 294, 1729, 11, 457, 264, 25539, 337, 37624, 293, 25539, 337], "temperature": 0.0, "avg_logprob": -0.12481143257834694, "compression_ratio": 1.6196581196581197, "no_speech_prob": 3.2885773180169053e-06}, {"id": 161, "seek": 71872, "start": 718.72, "end": 721.36, "text": " deep learning and even Swift for numeric programming.", "tokens": [2452, 2539, 293, 754, 25539, 337, 7866, 299, 9410, 13], "temperature": 0.0, "avg_logprob": -0.11367058517909286, "compression_ratio": 1.7103174603174602, "no_speech_prob": 3.2376622129959287e-06}, {"id": 162, "seek": 71872, "start": 721.36, "end": 726.52, "text": " I was kind of surprised when I got into it to find there was hardly any documentation", "tokens": [286, 390, 733, 295, 6100, 562, 286, 658, 666, 309, 281, 915, 456, 390, 13572, 604, 14333], "temperature": 0.0, "avg_logprob": -0.11367058517909286, "compression_ratio": 1.7103174603174602, "no_speech_prob": 3.2376622129959287e-06}, {"id": 163, "seek": 71872, "start": 726.52, "end": 732.0, "text": " about Swift for numeric programming, even though I was pretty delighted by the experience.", "tokens": [466, 25539, 337, 7866, 299, 9410, 11, 754, 1673, 286, 390, 1238, 18783, 538, 264, 1752, 13], "temperature": 0.0, "avg_logprob": -0.11367058517909286, "compression_ratio": 1.7103174603174602, "no_speech_prob": 3.2376622129959287e-06}, {"id": 164, "seek": 71872, "start": 732.0, "end": 738.44, "text": " People have had this view that Swift is kind of for iPhone programming.", "tokens": [3432, 362, 632, 341, 1910, 300, 25539, 307, 733, 295, 337, 7252, 9410, 13], "temperature": 0.0, "avg_logprob": -0.11367058517909286, "compression_ratio": 1.7103174603174602, "no_speech_prob": 3.2376622129959287e-06}, {"id": 165, "seek": 71872, "start": 738.44, "end": 740.88, "text": " I guess that's kind of how it was marketed, right?", "tokens": [286, 2041, 300, 311, 733, 295, 577, 309, 390, 49089, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.11367058517909286, "compression_ratio": 1.7103174603174602, "no_speech_prob": 3.2376622129959287e-06}, {"id": 166, "seek": 71872, "start": 740.88, "end": 747.72, "text": " But actually, it's an incredibly well-designed, incredibly powerful language.", "tokens": [583, 767, 11, 309, 311, 364, 6252, 731, 12, 14792, 16690, 11, 6252, 4005, 2856, 13], "temperature": 0.0, "avg_logprob": -0.11367058517909286, "compression_ratio": 1.7103174603174602, "no_speech_prob": 3.2376622129959287e-06}, {"id": 167, "seek": 74772, "start": 747.72, "end": 753.48, "text": " And then TensorFlow, I mean, to be honest, I'm not a huge fan of TensorFlow in general.", "tokens": [400, 550, 37624, 11, 286, 914, 11, 281, 312, 3245, 11, 286, 478, 406, 257, 2603, 3429, 295, 37624, 294, 2674, 13], "temperature": 0.0, "avg_logprob": -0.1726324798863962, "compression_ratio": 1.616, "no_speech_prob": 1.1299035577394534e-05}, {"id": 168, "seek": 74772, "start": 753.48, "end": 757.0400000000001, "text": " I mean, if I was, we wouldn't have switched away from it.", "tokens": [286, 914, 11, 498, 286, 390, 11, 321, 2759, 380, 362, 16858, 1314, 490, 309, 13], "temperature": 0.0, "avg_logprob": -0.1726324798863962, "compression_ratio": 1.616, "no_speech_prob": 1.1299035577394534e-05}, {"id": 169, "seek": 74772, "start": 757.0400000000001, "end": 759.0, "text": " But it's getting a lot better.", "tokens": [583, 309, 311, 1242, 257, 688, 1101, 13], "temperature": 0.0, "avg_logprob": -0.1726324798863962, "compression_ratio": 1.616, "no_speech_prob": 1.1299035577394534e-05}, {"id": 170, "seek": 74772, "start": 759.0, "end": 762.5600000000001, "text": " TensorFlow 2 is certainly improving.", "tokens": [37624, 568, 307, 3297, 11470, 13], "temperature": 0.0, "avg_logprob": -0.1726324798863962, "compression_ratio": 1.616, "no_speech_prob": 1.1299035577394534e-05}, {"id": 171, "seek": 74772, "start": 762.5600000000001, "end": 767.1600000000001, "text": " And the bits of it I particularly don't like are largely the bits that Swift for TensorFlow", "tokens": [400, 264, 9239, 295, 309, 286, 4098, 500, 380, 411, 366, 11611, 264, 9239, 300, 25539, 337, 37624], "temperature": 0.0, "avg_logprob": -0.1726324798863962, "compression_ratio": 1.616, "no_speech_prob": 1.1299035577394534e-05}, {"id": 172, "seek": 74772, "start": 767.1600000000001, "end": 769.0400000000001, "text": " will avoid.", "tokens": [486, 5042, 13], "temperature": 0.0, "avg_logprob": -0.1726324798863962, "compression_ratio": 1.616, "no_speech_prob": 1.1299035577394534e-05}, {"id": 173, "seek": 74772, "start": 769.0400000000001, "end": 774.24, "text": " But I think long-term, the kind of things I see happening, like there's this fantastic", "tokens": [583, 286, 519, 938, 12, 7039, 11, 264, 733, 295, 721, 286, 536, 2737, 11, 411, 456, 311, 341, 5456], "temperature": 0.0, "avg_logprob": -0.1726324798863962, "compression_ratio": 1.616, "no_speech_prob": 1.1299035577394534e-05}, {"id": 174, "seek": 77424, "start": 774.24, "end": 781.2, "text": " new kind of compiler project called MLIR, which Chris is also co-leading, which I think", "tokens": [777, 733, 295, 31958, 1716, 1219, 21601, 7740, 11, 597, 6688, 307, 611, 598, 12, 28012, 11, 597, 286, 519], "temperature": 0.0, "avg_logprob": -0.10893848567333037, "compression_ratio": 1.5637860082304527, "no_speech_prob": 2.4287814085255377e-05}, {"id": 175, "seek": 77424, "start": 781.2, "end": 787.36, "text": " actually has the potential long-term to allow Swift to replace most of the yucky bits or", "tokens": [767, 575, 264, 3995, 938, 12, 7039, 281, 2089, 25539, 281, 7406, 881, 295, 264, 288, 10616, 9239, 420], "temperature": 0.0, "avg_logprob": -0.10893848567333037, "compression_ratio": 1.5637860082304527, "no_speech_prob": 2.4287814085255377e-05}, {"id": 176, "seek": 77424, "start": 787.36, "end": 791.5600000000001, "text": " maybe even all of the yucky bits of TensorFlow with stuff where Swift is actually talking", "tokens": [1310, 754, 439, 295, 264, 288, 10616, 9239, 295, 37624, 365, 1507, 689, 25539, 307, 767, 1417], "temperature": 0.0, "avg_logprob": -0.10893848567333037, "compression_ratio": 1.5637860082304527, "no_speech_prob": 2.4287814085255377e-05}, {"id": 177, "seek": 77424, "start": 791.5600000000001, "end": 793.84, "text": " directly to LLVM.", "tokens": [3838, 281, 441, 43, 53, 44, 13], "temperature": 0.0, "avg_logprob": -0.10893848567333037, "compression_ratio": 1.5637860082304527, "no_speech_prob": 2.4287814085255377e-05}, {"id": 178, "seek": 77424, "start": 793.84, "end": 798.16, "text": " You'll be hearing a lot more about LLVM in the coming, in the last two weeks, last two", "tokens": [509, 603, 312, 4763, 257, 688, 544, 466, 441, 43, 53, 44, 294, 264, 1348, 11, 294, 264, 1036, 732, 3259, 11, 1036, 732], "temperature": 0.0, "avg_logprob": -0.10893848567333037, "compression_ratio": 1.5637860082304527, "no_speech_prob": 2.4287814085255377e-05}, {"id": 179, "seek": 77424, "start": 798.16, "end": 799.16, "text": " lessons.", "tokens": [8820, 13], "temperature": 0.0, "avg_logprob": -0.10893848567333037, "compression_ratio": 1.5637860082304527, "no_speech_prob": 2.4287814085255377e-05}, {"id": 180, "seek": 79916, "start": 799.16, "end": 807.76, "text": " So it's the compiler infrastructure that kind of everybody uses, that Julia uses, that Clang", "tokens": [407, 309, 311, 264, 31958, 6896, 300, 733, 295, 2201, 4960, 11, 300, 18551, 4960, 11, 300, 2033, 656], "temperature": 0.0, "avg_logprob": -0.19873405364622554, "compression_ratio": 1.5121951219512195, "no_speech_prob": 9.971159670385532e-06}, {"id": 181, "seek": 79916, "start": 807.76, "end": 808.76, "text": " uses.", "tokens": [4960, 13], "temperature": 0.0, "avg_logprob": -0.19873405364622554, "compression_ratio": 1.5121951219512195, "no_speech_prob": 9.971159670385532e-06}, {"id": 182, "seek": 79916, "start": 808.76, "end": 814.4399999999999, "text": " And Swift is this kind of almost this thin layer on top of it where when you write stuff", "tokens": [400, 25539, 307, 341, 733, 295, 1920, 341, 5862, 4583, 322, 1192, 295, 309, 689, 562, 291, 2464, 1507], "temperature": 0.0, "avg_logprob": -0.19873405364622554, "compression_ratio": 1.5121951219512195, "no_speech_prob": 9.971159670385532e-06}, {"id": 183, "seek": 79916, "start": 814.4399999999999, "end": 823.68, "text": " in Swift, it's really easy for LLVM to compile it down to super-fast optimized code, which", "tokens": [294, 25539, 11, 309, 311, 534, 1858, 337, 441, 43, 53, 44, 281, 31413, 309, 760, 281, 1687, 12, 7011, 26941, 3089, 11, 597], "temperature": 0.0, "avg_logprob": -0.19873405364622554, "compression_ratio": 1.5121951219512195, "no_speech_prob": 9.971159670385532e-06}, {"id": 184, "seek": 79916, "start": 823.68, "end": 826.16, "text": " is like the opposite of Python.", "tokens": [307, 411, 264, 6182, 295, 15329, 13], "temperature": 0.0, "avg_logprob": -0.19873405364622554, "compression_ratio": 1.5121951219512195, "no_speech_prob": 9.971159670385532e-06}, {"id": 185, "seek": 82616, "start": 826.16, "end": 831.92, "text": " With Python, as you'll see today, we almost never actually write Python code.", "tokens": [2022, 15329, 11, 382, 291, 603, 536, 965, 11, 321, 1920, 1128, 767, 2464, 15329, 3089, 13], "temperature": 0.0, "avg_logprob": -0.09451000969689172, "compression_ratio": 1.756198347107438, "no_speech_prob": 9.08016681933077e-06}, {"id": 186, "seek": 82616, "start": 831.92, "end": 837.0, "text": " We write code in Python that gets turned into some other language or library, and that's", "tokens": [492, 2464, 3089, 294, 15329, 300, 2170, 3574, 666, 512, 661, 2856, 420, 6405, 11, 293, 300, 311], "temperature": 0.0, "avg_logprob": -0.09451000969689172, "compression_ratio": 1.756198347107438, "no_speech_prob": 9.08016681933077e-06}, {"id": 187, "seek": 82616, "start": 837.0, "end": 838.6, "text": " what gets run.", "tokens": [437, 2170, 1190, 13], "temperature": 0.0, "avg_logprob": -0.09451000969689172, "compression_ratio": 1.756198347107438, "no_speech_prob": 9.08016681933077e-06}, {"id": 188, "seek": 82616, "start": 838.6, "end": 843.6999999999999, "text": " And this mismatch, this impedance mismatch between what I'm trying to write and what", "tokens": [400, 341, 23220, 852, 11, 341, 36264, 23220, 852, 1296, 437, 286, 478, 1382, 281, 2464, 293, 437], "temperature": 0.0, "avg_logprob": -0.09451000969689172, "compression_ratio": 1.756198347107438, "no_speech_prob": 9.08016681933077e-06}, {"id": 189, "seek": 82616, "start": 843.6999999999999, "end": 847.64, "text": " actually gets run makes it very hard to do the kind of deep dives that we're going to", "tokens": [767, 2170, 1190, 1669, 309, 588, 1152, 281, 360, 264, 733, 295, 2452, 274, 1539, 300, 321, 434, 516, 281], "temperature": 0.0, "avg_logprob": -0.09451000969689172, "compression_ratio": 1.756198347107438, "no_speech_prob": 9.08016681933077e-06}, {"id": 190, "seek": 82616, "start": 847.64, "end": 851.3199999999999, "text": " do in this course, as you'll see.", "tokens": [360, 294, 341, 1164, 11, 382, 291, 603, 536, 13], "temperature": 0.0, "avg_logprob": -0.09451000969689172, "compression_ratio": 1.756198347107438, "no_speech_prob": 9.08016681933077e-06}, {"id": 191, "seek": 82616, "start": 851.3199999999999, "end": 854.8, "text": " It's kind of a frustrating experience.", "tokens": [467, 311, 733, 295, 257, 16522, 1752, 13], "temperature": 0.0, "avg_logprob": -0.09451000969689172, "compression_ratio": 1.756198347107438, "no_speech_prob": 9.08016681933077e-06}, {"id": 192, "seek": 85480, "start": 854.8, "end": 860.4799999999999, "text": " So I'm excited about getting involved in these very early days for impractical deep learning", "tokens": [407, 286, 478, 2919, 466, 1242, 3288, 294, 613, 588, 2440, 1708, 337, 704, 1897, 804, 2452, 2539], "temperature": 0.0, "avg_logprob": -0.11632730393182664, "compression_ratio": 1.6743295019157087, "no_speech_prob": 9.22101844480494e-06}, {"id": 193, "seek": 85480, "start": 860.4799999999999, "end": 865.8, "text": " in Swift for TensorFlow, because it means that me and those of you that want to follow", "tokens": [294, 25539, 337, 37624, 11, 570, 309, 1355, 300, 385, 293, 729, 295, 291, 300, 528, 281, 1524], "temperature": 0.0, "avg_logprob": -0.11632730393182664, "compression_ratio": 1.6743295019157087, "no_speech_prob": 9.22101844480494e-06}, {"id": 194, "seek": 85480, "start": 865.8, "end": 874.0, "text": " along can be the pioneers in something that I think is going to take over this field.", "tokens": [2051, 393, 312, 264, 47381, 294, 746, 300, 286, 519, 307, 516, 281, 747, 670, 341, 2519, 13], "temperature": 0.0, "avg_logprob": -0.11632730393182664, "compression_ratio": 1.6743295019157087, "no_speech_prob": 9.22101844480494e-06}, {"id": 195, "seek": 85480, "start": 874.0, "end": 875.7199999999999, "text": " We'll be the first in there.", "tokens": [492, 603, 312, 264, 700, 294, 456, 13], "temperature": 0.0, "avg_logprob": -0.11632730393182664, "compression_ratio": 1.6743295019157087, "no_speech_prob": 9.22101844480494e-06}, {"id": 196, "seek": 85480, "start": 875.7199999999999, "end": 878.0, "text": " We'll be the ones that understand it really well.", "tokens": [492, 603, 312, 264, 2306, 300, 1223, 309, 534, 731, 13], "temperature": 0.0, "avg_logprob": -0.11632730393182664, "compression_ratio": 1.6743295019157087, "no_speech_prob": 9.22101844480494e-06}, {"id": 197, "seek": 85480, "start": 878.0, "end": 881.9599999999999, "text": " And in your portfolio, you can actually point at things and say, that library that everybody", "tokens": [400, 294, 428, 12583, 11, 291, 393, 767, 935, 412, 721, 293, 584, 11, 300, 6405, 300, 2201], "temperature": 0.0, "avg_logprob": -0.11632730393182664, "compression_ratio": 1.6743295019157087, "no_speech_prob": 9.22101844480494e-06}, {"id": 198, "seek": 88196, "start": 881.96, "end": 887.8000000000001, "text": " uses, I wrote that, or this piece of documentation that's on the Swift for TensorFlow website,", "tokens": [4960, 11, 286, 4114, 300, 11, 420, 341, 2522, 295, 14333, 300, 311, 322, 264, 25539, 337, 37624, 3144, 11], "temperature": 0.0, "avg_logprob": -0.13471715790884836, "compression_ratio": 1.7095435684647302, "no_speech_prob": 5.093504114483949e-06}, {"id": 199, "seek": 88196, "start": 887.8000000000001, "end": 889.08, "text": " I wrote that.", "tokens": [286, 4114, 300, 13], "temperature": 0.0, "avg_logprob": -0.13471715790884836, "compression_ratio": 1.7095435684647302, "no_speech_prob": 5.093504114483949e-06}, {"id": 200, "seek": 88196, "start": 889.08, "end": 891.72, "text": " That's the opportunity that you have.", "tokens": [663, 311, 264, 2650, 300, 291, 362, 13], "temperature": 0.0, "avg_logprob": -0.13471715790884836, "compression_ratio": 1.7095435684647302, "no_speech_prob": 5.093504114483949e-06}, {"id": 201, "seek": 88196, "start": 891.72, "end": 897.64, "text": " So let's put that aside for the next five weeks.", "tokens": [407, 718, 311, 829, 300, 7359, 337, 264, 958, 1732, 3259, 13], "temperature": 0.0, "avg_logprob": -0.13471715790884836, "compression_ratio": 1.7095435684647302, "no_speech_prob": 5.093504114483949e-06}, {"id": 202, "seek": 88196, "start": 897.64, "end": 903.72, "text": " And let's try to create a really high bar for the Swift for TensorFlow team to have", "tokens": [400, 718, 311, 853, 281, 1884, 257, 534, 1090, 2159, 337, 264, 25539, 337, 37624, 1469, 281, 362], "temperature": 0.0, "avg_logprob": -0.13471715790884836, "compression_ratio": 1.7095435684647302, "no_speech_prob": 5.093504114483949e-06}, {"id": 203, "seek": 88196, "start": 903.72, "end": 906.76, "text": " to try to reimplement before six weeks' time.", "tokens": [281, 853, 281, 33433, 43704, 949, 2309, 3259, 6, 565, 13], "temperature": 0.0, "avg_logprob": -0.13471715790884836, "compression_ratio": 1.7095435684647302, "no_speech_prob": 5.093504114483949e-06}, {"id": 204, "seek": 88196, "start": 906.76, "end": 911.9200000000001, "text": " We're going to try to implement as much of fast AI and many parts of PyTorch as we can", "tokens": [492, 434, 516, 281, 853, 281, 4445, 382, 709, 295, 2370, 7318, 293, 867, 3166, 295, 9953, 51, 284, 339, 382, 321, 393], "temperature": 0.0, "avg_logprob": -0.13471715790884836, "compression_ratio": 1.7095435684647302, "no_speech_prob": 5.093504114483949e-06}, {"id": 205, "seek": 91192, "start": 911.92, "end": 917.28, "text": " and then see if the Swift for TensorFlow team can help us build that in Swift in six weeks'", "tokens": [293, 550, 536, 498, 264, 25539, 337, 37624, 1469, 393, 854, 505, 1322, 300, 294, 25539, 294, 2309, 3259, 6], "temperature": 0.0, "avg_logprob": -0.14627637448518171, "compression_ratio": 1.728813559322034, "no_speech_prob": 1.260638873645803e-05}, {"id": 206, "seek": 91192, "start": 917.28, "end": 918.8, "text": " time, five weeks' time.", "tokens": [565, 11, 1732, 3259, 6, 565, 13], "temperature": 0.0, "avg_logprob": -0.14627637448518171, "compression_ratio": 1.728813559322034, "no_speech_prob": 1.260638873645803e-05}, {"id": 207, "seek": 91192, "start": 918.8, "end": 926.28, "text": " So the goal is to recreate fast AI from the foundations and much of PyTorch, like matrix", "tokens": [407, 264, 3387, 307, 281, 25833, 2370, 7318, 490, 264, 22467, 293, 709, 295, 9953, 51, 284, 339, 11, 411, 8141], "temperature": 0.0, "avg_logprob": -0.14627637448518171, "compression_ratio": 1.728813559322034, "no_speech_prob": 1.260638873645803e-05}, {"id": 208, "seek": 91192, "start": 926.28, "end": 934.12, "text": " multiplication, a lot of torch.nn, torch.optm, data set, data loader, from the foundations.", "tokens": [27290, 11, 257, 688, 295, 27822, 13, 26384, 11, 27822, 13, 5747, 76, 11, 1412, 992, 11, 1412, 3677, 260, 11, 490, 264, 22467, 13], "temperature": 0.0, "avg_logprob": -0.14627637448518171, "compression_ratio": 1.728813559322034, "no_speech_prob": 1.260638873645803e-05}, {"id": 209, "seek": 91192, "start": 934.12, "end": 935.92, "text": " And this is the game we're going to play.", "tokens": [400, 341, 307, 264, 1216, 321, 434, 516, 281, 862, 13], "temperature": 0.0, "avg_logprob": -0.14627637448518171, "compression_ratio": 1.728813559322034, "no_speech_prob": 1.260638873645803e-05}, {"id": 210, "seek": 91192, "start": 935.92, "end": 938.8, "text": " The game we're going to play is we're only allowed to use these bits.", "tokens": [440, 1216, 321, 434, 516, 281, 862, 307, 321, 434, 787, 4350, 281, 764, 613, 9239, 13], "temperature": 0.0, "avg_logprob": -0.14627637448518171, "compression_ratio": 1.728813559322034, "no_speech_prob": 1.260638873645803e-05}, {"id": 211, "seek": 93880, "start": 938.8, "end": 945.9599999999999, "text": " We're allowed to use pure Python, anything in the Python standard library, any non-data", "tokens": [492, 434, 4350, 281, 764, 6075, 15329, 11, 1340, 294, 264, 15329, 3832, 6405, 11, 604, 2107, 12, 67, 3274], "temperature": 0.0, "avg_logprob": -0.14267931851473722, "compression_ratio": 1.649402390438247, "no_speech_prob": 9.81761058937991e-06}, {"id": 212, "seek": 93880, "start": 945.9599999999999, "end": 951.76, "text": " science modules, so like a requests library for HTTP or whatever.", "tokens": [3497, 16679, 11, 370, 411, 257, 12475, 6405, 337, 33283, 420, 2035, 13], "temperature": 0.0, "avg_logprob": -0.14267931851473722, "compression_ratio": 1.649402390438247, "no_speech_prob": 9.81761058937991e-06}, {"id": 213, "seek": 93880, "start": 951.76, "end": 958.3199999999999, "text": " We can use PyTorch but only for creating arrays, random number generation, and indexing into", "tokens": [492, 393, 764, 9953, 51, 284, 339, 457, 787, 337, 4084, 41011, 11, 4974, 1230, 5125, 11, 293, 8186, 278, 666], "temperature": 0.0, "avg_logprob": -0.14267931851473722, "compression_ratio": 1.649402390438247, "no_speech_prob": 9.81761058937991e-06}, {"id": 214, "seek": 93880, "start": 958.3199999999999, "end": 960.4599999999999, "text": " arrays.", "tokens": [41011, 13], "temperature": 0.0, "avg_logprob": -0.14267931851473722, "compression_ratio": 1.649402390438247, "no_speech_prob": 9.81761058937991e-06}, {"id": 215, "seek": 93880, "start": 960.4599999999999, "end": 964.4799999999999, "text": " We can use the fastai.datasets library because that's the thing that has access to MNIST", "tokens": [492, 393, 764, 264, 2370, 1301, 13, 20367, 296, 1385, 6405, 570, 300, 311, 264, 551, 300, 575, 2105, 281, 376, 45, 19756], "temperature": 0.0, "avg_logprob": -0.14267931851473722, "compression_ratio": 1.649402390438247, "no_speech_prob": 9.81761058937991e-06}, {"id": 216, "seek": 93880, "start": 964.4799999999999, "end": 968.52, "text": " and stuff, so we don't have to worry about writing our own HTTP stuff.", "tokens": [293, 1507, 11, 370, 321, 500, 380, 362, 281, 3292, 466, 3579, 527, 1065, 33283, 1507, 13], "temperature": 0.0, "avg_logprob": -0.14267931851473722, "compression_ratio": 1.649402390438247, "no_speech_prob": 9.81761058937991e-06}, {"id": 217, "seek": 96852, "start": 968.52, "end": 969.52, "text": " And we can use matplotlib.", "tokens": [400, 321, 393, 764, 3803, 564, 310, 38270, 13], "temperature": 0.0, "avg_logprob": -0.1084131971001625, "compression_ratio": 1.713740458015267, "no_speech_prob": 4.637686288333498e-06}, {"id": 218, "seek": 96852, "start": 969.52, "end": 971.8, "text": " We don't have to write our own plotting library.", "tokens": [492, 500, 380, 362, 281, 2464, 527, 1065, 41178, 6405, 13], "temperature": 0.0, "avg_logprob": -0.1084131971001625, "compression_ratio": 1.713740458015267, "no_speech_prob": 4.637686288333498e-06}, {"id": 219, "seek": 96852, "start": 971.8, "end": 972.8, "text": " That's it.", "tokens": [663, 311, 309, 13], "temperature": 0.0, "avg_logprob": -0.1084131971001625, "compression_ratio": 1.713740458015267, "no_speech_prob": 4.637686288333498e-06}, {"id": 220, "seek": 96852, "start": 972.8, "end": 973.8, "text": " That's the game.", "tokens": [663, 311, 264, 1216, 13], "temperature": 0.0, "avg_logprob": -0.1084131971001625, "compression_ratio": 1.713740458015267, "no_speech_prob": 4.637686288333498e-06}, {"id": 221, "seek": 96852, "start": 973.8, "end": 978.4399999999999, "text": " So we're going to try and recreate all of this from that.", "tokens": [407, 321, 434, 516, 281, 853, 293, 25833, 439, 295, 341, 490, 300, 13], "temperature": 0.0, "avg_logprob": -0.1084131971001625, "compression_ratio": 1.713740458015267, "no_speech_prob": 4.637686288333498e-06}, {"id": 222, "seek": 96852, "start": 978.4399999999999, "end": 984.56, "text": " And then the rules are that each time we have replicated some piece of fast AI or PyTorch", "tokens": [400, 550, 264, 4474, 366, 300, 1184, 565, 321, 362, 46365, 512, 2522, 295, 2370, 7318, 420, 9953, 51, 284, 339], "temperature": 0.0, "avg_logprob": -0.1084131971001625, "compression_ratio": 1.713740458015267, "no_speech_prob": 4.637686288333498e-06}, {"id": 223, "seek": 96852, "start": 984.56, "end": 990.56, "text": " from the foundations, we can then use the real version if we want to.", "tokens": [490, 264, 22467, 11, 321, 393, 550, 764, 264, 957, 3037, 498, 321, 528, 281, 13], "temperature": 0.0, "avg_logprob": -0.1084131971001625, "compression_ratio": 1.713740458015267, "no_speech_prob": 4.637686288333498e-06}, {"id": 224, "seek": 96852, "start": 990.56, "end": 994.22, "text": " So that's the game we're going to play.", "tokens": [407, 300, 311, 264, 1216, 321, 434, 516, 281, 862, 13], "temperature": 0.0, "avg_logprob": -0.1084131971001625, "compression_ratio": 1.713740458015267, "no_speech_prob": 4.637686288333498e-06}, {"id": 225, "seek": 96852, "start": 994.22, "end": 997.68, "text": " What I've discovered as I started doing that is that I started actually making things a", "tokens": [708, 286, 600, 6941, 382, 286, 1409, 884, 300, 307, 300, 286, 1409, 767, 1455, 721, 257], "temperature": 0.0, "avg_logprob": -0.1084131971001625, "compression_ratio": 1.713740458015267, "no_speech_prob": 4.637686288333498e-06}, {"id": 226, "seek": 99768, "start": 997.68, "end": 999.8399999999999, "text": " lot better than fast AI.", "tokens": [688, 1101, 813, 2370, 7318, 13], "temperature": 0.0, "avg_logprob": -0.1048057617679719, "compression_ratio": 1.7236363636363636, "no_speech_prob": 1.2605995834746864e-05}, {"id": 227, "seek": 99768, "start": 999.8399999999999, "end": 1003.7199999999999, "text": " So I'm now realizing that fast AI version 1 is kind of a disappointment because there", "tokens": [407, 286, 478, 586, 16734, 300, 2370, 7318, 3037, 502, 307, 733, 295, 257, 28175, 570, 456], "temperature": 0.0, "avg_logprob": -0.1048057617679719, "compression_ratio": 1.7236363636363636, "no_speech_prob": 1.2605995834746864e-05}, {"id": 228, "seek": 99768, "start": 1003.7199999999999, "end": 1005.9599999999999, "text": " was a whole lot of things I could have done better.", "tokens": [390, 257, 1379, 688, 295, 721, 286, 727, 362, 1096, 1101, 13], "temperature": 0.0, "avg_logprob": -0.1048057617679719, "compression_ratio": 1.7236363636363636, "no_speech_prob": 1.2605995834746864e-05}, {"id": 229, "seek": 99768, "start": 1005.9599999999999, "end": 1007.5999999999999, "text": " And so you'll find the same thing.", "tokens": [400, 370, 291, 603, 915, 264, 912, 551, 13], "temperature": 0.0, "avg_logprob": -0.1048057617679719, "compression_ratio": 1.7236363636363636, "no_speech_prob": 1.2605995834746864e-05}, {"id": 230, "seek": 99768, "start": 1007.5999999999999, "end": 1011.4799999999999, "text": " As you go along this journey, you'll find decisions that I made or the PyTorch team made", "tokens": [1018, 291, 352, 2051, 341, 4671, 11, 291, 603, 915, 5327, 300, 286, 1027, 420, 264, 9953, 51, 284, 339, 1469, 1027], "temperature": 0.0, "avg_logprob": -0.1048057617679719, "compression_ratio": 1.7236363636363636, "no_speech_prob": 1.2605995834746864e-05}, {"id": 231, "seek": 99768, "start": 1011.4799999999999, "end": 1015.88, "text": " or whatever where you think, what if they'd made a different decision there?", "tokens": [420, 2035, 689, 291, 519, 11, 437, 498, 436, 1116, 1027, 257, 819, 3537, 456, 30], "temperature": 0.0, "avg_logprob": -0.1048057617679719, "compression_ratio": 1.7236363636363636, "no_speech_prob": 1.2605995834746864e-05}, {"id": 232, "seek": 99768, "start": 1015.88, "end": 1022.68, "text": " And you can maybe come up with more examples of things that we could do differently.", "tokens": [400, 291, 393, 1310, 808, 493, 365, 544, 5110, 295, 721, 300, 321, 727, 360, 7614, 13], "temperature": 0.0, "avg_logprob": -0.1048057617679719, "compression_ratio": 1.7236363636363636, "no_speech_prob": 1.2605995834746864e-05}, {"id": 233, "seek": 99768, "start": 1022.68, "end": 1024.0, "text": " So why would you do this?", "tokens": [407, 983, 576, 291, 360, 341, 30], "temperature": 0.0, "avg_logprob": -0.1048057617679719, "compression_ratio": 1.7236363636363636, "no_speech_prob": 1.2605995834746864e-05}, {"id": 234, "seek": 102400, "start": 1024.0, "end": 1028.36, "text": " Well, the main reason is so that you can really experiment.", "tokens": [1042, 11, 264, 2135, 1778, 307, 370, 300, 291, 393, 534, 5120, 13], "temperature": 0.0, "avg_logprob": -0.08845529248637538, "compression_ratio": 2.0515873015873014, "no_speech_prob": 8.664289453008678e-06}, {"id": 235, "seek": 102400, "start": 1028.36, "end": 1031.4, "text": " So you can really understand what's going on in your models, what's really going on", "tokens": [407, 291, 393, 534, 1223, 437, 311, 516, 322, 294, 428, 5245, 11, 437, 311, 534, 516, 322], "temperature": 0.0, "avg_logprob": -0.08845529248637538, "compression_ratio": 2.0515873015873014, "no_speech_prob": 8.664289453008678e-06}, {"id": 236, "seek": 102400, "start": 1031.4, "end": 1033.0, "text": " in your training.", "tokens": [294, 428, 3097, 13], "temperature": 0.0, "avg_logprob": -0.08845529248637538, "compression_ratio": 2.0515873015873014, "no_speech_prob": 8.664289453008678e-06}, {"id": 237, "seek": 102400, "start": 1033.0, "end": 1037.4, "text": " And you'll actually find that in the experiments that we're going to do in the next couple", "tokens": [400, 291, 603, 767, 915, 300, 294, 264, 12050, 300, 321, 434, 516, 281, 360, 294, 264, 958, 1916], "temperature": 0.0, "avg_logprob": -0.08845529248637538, "compression_ratio": 2.0515873015873014, "no_speech_prob": 8.664289453008678e-06}, {"id": 238, "seek": 102400, "start": 1037.4, "end": 1042.6, "text": " of classes, we're going to actually come up with some new insights.", "tokens": [295, 5359, 11, 321, 434, 516, 281, 767, 808, 493, 365, 512, 777, 14310, 13], "temperature": 0.0, "avg_logprob": -0.08845529248637538, "compression_ratio": 2.0515873015873014, "no_speech_prob": 8.664289453008678e-06}, {"id": 239, "seek": 102400, "start": 1042.6, "end": 1048.2, "text": " If you can create something from scratch yourself, you know that you understand it.", "tokens": [759, 291, 393, 1884, 746, 490, 8459, 1803, 11, 291, 458, 300, 291, 1223, 309, 13], "temperature": 0.0, "avg_logprob": -0.08845529248637538, "compression_ratio": 2.0515873015873014, "no_speech_prob": 8.664289453008678e-06}, {"id": 240, "seek": 102400, "start": 1048.2, "end": 1050.92, "text": " And then once you've created something from scratch and you really understand it, then", "tokens": [400, 550, 1564, 291, 600, 2942, 746, 490, 8459, 293, 291, 534, 1223, 309, 11, 550], "temperature": 0.0, "avg_logprob": -0.08845529248637538, "compression_ratio": 2.0515873015873014, "no_speech_prob": 8.664289453008678e-06}, {"id": 241, "seek": 102400, "start": 1050.92, "end": 1052.88, "text": " you can tweak everything.", "tokens": [291, 393, 29879, 1203, 13], "temperature": 0.0, "avg_logprob": -0.08845529248637538, "compression_ratio": 2.0515873015873014, "no_speech_prob": 8.664289453008678e-06}, {"id": 242, "seek": 105288, "start": 1052.88, "end": 1058.88, "text": " But you suddenly realize that there's not this object detection system and this ConvNet", "tokens": [583, 291, 5800, 4325, 300, 456, 311, 406, 341, 2657, 17784, 1185, 293, 341, 2656, 85, 31890], "temperature": 0.0, "avg_logprob": -0.12217103603274324, "compression_ratio": 1.5944700460829493, "no_speech_prob": 7.527202797064092e-06}, {"id": 243, "seek": 105288, "start": 1058.88, "end": 1061.68, "text": " architecture and that optimizer.", "tokens": [9482, 293, 300, 5028, 6545, 13], "temperature": 0.0, "avg_logprob": -0.12217103603274324, "compression_ratio": 1.5944700460829493, "no_speech_prob": 7.527202797064092e-06}, {"id": 244, "seek": 105288, "start": 1061.68, "end": 1067.0800000000002, "text": " They're all like a kind of semi-arbitrary bunch of particular knobs and choices.", "tokens": [814, 434, 439, 411, 257, 733, 295, 12909, 12, 289, 5260, 81, 822, 3840, 295, 1729, 46999, 293, 7994, 13], "temperature": 0.0, "avg_logprob": -0.12217103603274324, "compression_ratio": 1.5944700460829493, "no_speech_prob": 7.527202797064092e-06}, {"id": 245, "seek": 105288, "start": 1067.0800000000002, "end": 1072.0, "text": " And that it's pretty likely that your particular problem would want a different set of knobs", "tokens": [400, 300, 309, 311, 1238, 3700, 300, 428, 1729, 1154, 576, 528, 257, 819, 992, 295, 46999], "temperature": 0.0, "avg_logprob": -0.12217103603274324, "compression_ratio": 1.5944700460829493, "no_speech_prob": 7.527202797064092e-06}, {"id": 246, "seek": 105288, "start": 1072.0, "end": 1073.1000000000001, "text": " and choices.", "tokens": [293, 7994, 13], "temperature": 0.0, "avg_logprob": -0.12217103603274324, "compression_ratio": 1.5944700460829493, "no_speech_prob": 7.527202797064092e-06}, {"id": 247, "seek": 105288, "start": 1073.1000000000001, "end": 1077.14, "text": " So you can change all of these things.", "tokens": [407, 291, 393, 1319, 439, 295, 613, 721, 13], "temperature": 0.0, "avg_logprob": -0.12217103603274324, "compression_ratio": 1.5944700460829493, "no_speech_prob": 7.527202797064092e-06}, {"id": 248, "seek": 107714, "start": 1077.14, "end": 1083.0800000000002, "text": " For those of you looking to contribute to open source, to fast AI or to PyTorch, you'll", "tokens": [1171, 729, 295, 291, 1237, 281, 10586, 281, 1269, 4009, 11, 281, 2370, 7318, 420, 281, 9953, 51, 284, 339, 11, 291, 603], "temperature": 0.0, "avg_logprob": -0.11742362609276405, "compression_ratio": 1.7245762711864407, "no_speech_prob": 3.1379804568132386e-06}, {"id": 249, "seek": 107714, "start": 1083.0800000000002, "end": 1084.68, "text": " be able to.", "tokens": [312, 1075, 281, 13], "temperature": 0.0, "avg_logprob": -0.11742362609276405, "compression_ratio": 1.7245762711864407, "no_speech_prob": 3.1379804568132386e-06}, {"id": 250, "seek": 107714, "start": 1084.68, "end": 1086.4, "text": " Because you'll understand how it's all built up.", "tokens": [1436, 291, 603, 1223, 577, 309, 311, 439, 3094, 493, 13], "temperature": 0.0, "avg_logprob": -0.11742362609276405, "compression_ratio": 1.7245762711864407, "no_speech_prob": 3.1379804568132386e-06}, {"id": 251, "seek": 107714, "start": 1086.4, "end": 1089.6000000000001, "text": " You'll understand what bits are working well, which bits need help.", "tokens": [509, 603, 1223, 437, 9239, 366, 1364, 731, 11, 597, 9239, 643, 854, 13], "temperature": 0.0, "avg_logprob": -0.11742362609276405, "compression_ratio": 1.7245762711864407, "no_speech_prob": 3.1379804568132386e-06}, {"id": 252, "seek": 107714, "start": 1089.6000000000001, "end": 1094.44, "text": " You know how to contribute tests or documentation or new features.", "tokens": [509, 458, 577, 281, 10586, 6921, 420, 14333, 420, 777, 4122, 13], "temperature": 0.0, "avg_logprob": -0.11742362609276405, "compression_ratio": 1.7245762711864407, "no_speech_prob": 3.1379804568132386e-06}, {"id": 253, "seek": 107714, "start": 1094.44, "end": 1097.24, "text": " Or create your own libraries.", "tokens": [1610, 1884, 428, 1065, 15148, 13], "temperature": 0.0, "avg_logprob": -0.11742362609276405, "compression_ratio": 1.7245762711864407, "no_speech_prob": 3.1379804568132386e-06}, {"id": 254, "seek": 107714, "start": 1097.24, "end": 1103.3600000000001, "text": " And for those of you interested in going deeper into research, you'll be implementing papers,", "tokens": [400, 337, 729, 295, 291, 3102, 294, 516, 7731, 666, 2132, 11, 291, 603, 312, 18114, 10577, 11], "temperature": 0.0, "avg_logprob": -0.11742362609276405, "compression_ratio": 1.7245762711864407, "no_speech_prob": 3.1379804568132386e-06}, {"id": 255, "seek": 110336, "start": 1103.36, "end": 1107.24, "text": " which means you'll be able to correlate the code that you're writing with the paper that", "tokens": [597, 1355, 291, 603, 312, 1075, 281, 48742, 264, 3089, 300, 291, 434, 3579, 365, 264, 3035, 300], "temperature": 0.0, "avg_logprob": -0.07053467662064071, "compression_ratio": 1.7191489361702128, "no_speech_prob": 2.521371243346948e-06}, {"id": 256, "seek": 110336, "start": 1107.24, "end": 1108.24, "text": " you're reading.", "tokens": [291, 434, 3760, 13], "temperature": 0.0, "avg_logprob": -0.07053467662064071, "compression_ratio": 1.7191489361702128, "no_speech_prob": 2.521371243346948e-06}, {"id": 257, "seek": 110336, "start": 1108.24, "end": 1113.8, "text": " And if you're a poor mathematician like I am, then you'll find that you'll be getting", "tokens": [400, 498, 291, 434, 257, 4716, 48281, 411, 286, 669, 11, 550, 291, 603, 915, 300, 291, 603, 312, 1242], "temperature": 0.0, "avg_logprob": -0.07053467662064071, "compression_ratio": 1.7191489361702128, "no_speech_prob": 2.521371243346948e-06}, {"id": 258, "seek": 110336, "start": 1113.8, "end": 1118.28, "text": " a much better understanding of papers that you might otherwise have thought were beyond", "tokens": [257, 709, 1101, 3701, 295, 10577, 300, 291, 1062, 5911, 362, 1194, 645, 4399], "temperature": 0.0, "avg_logprob": -0.07053467662064071, "compression_ratio": 1.7191489361702128, "no_speech_prob": 2.521371243346948e-06}, {"id": 259, "seek": 110336, "start": 1118.28, "end": 1119.28, "text": " you.", "tokens": [291, 13], "temperature": 0.0, "avg_logprob": -0.07053467662064071, "compression_ratio": 1.7191489361702128, "no_speech_prob": 2.521371243346948e-06}, {"id": 260, "seek": 110336, "start": 1119.28, "end": 1124.1999999999998, "text": " And you realize that all those Greek symbols actually just map to pieces of code that you're", "tokens": [400, 291, 4325, 300, 439, 729, 10281, 16944, 767, 445, 4471, 281, 3755, 295, 3089, 300, 291, 434], "temperature": 0.0, "avg_logprob": -0.07053467662064071, "compression_ratio": 1.7191489361702128, "no_speech_prob": 2.521371243346948e-06}, {"id": 261, "seek": 110336, "start": 1124.1999999999998, "end": 1128.1599999999999, "text": " already very familiar with.", "tokens": [1217, 588, 4963, 365, 13], "temperature": 0.0, "avg_logprob": -0.07053467662064071, "compression_ratio": 1.7191489361702128, "no_speech_prob": 2.521371243346948e-06}, {"id": 262, "seek": 112816, "start": 1128.16, "end": 1135.28, "text": " So there are a lot of opportunities in part one to blog and to do interesting things.", "tokens": [407, 456, 366, 257, 688, 295, 4786, 294, 644, 472, 281, 6968, 293, 281, 360, 1880, 721, 13], "temperature": 0.0, "avg_logprob": -0.11815830071767171, "compression_ratio": 1.8222996515679442, "no_speech_prob": 8.659833838464692e-06}, {"id": 263, "seek": 112816, "start": 1135.28, "end": 1137.2, "text": " But the opportunities are much greater now.", "tokens": [583, 264, 4786, 366, 709, 5044, 586, 13], "temperature": 0.0, "avg_logprob": -0.11815830071767171, "compression_ratio": 1.8222996515679442, "no_speech_prob": 8.659833838464692e-06}, {"id": 264, "seek": 112816, "start": 1137.2, "end": 1141.72, "text": " In part two, you can be doing homework that's actually at the cutting edge.", "tokens": [682, 644, 732, 11, 291, 393, 312, 884, 14578, 300, 311, 767, 412, 264, 6492, 4691, 13], "temperature": 0.0, "avg_logprob": -0.11815830071767171, "compression_ratio": 1.8222996515679442, "no_speech_prob": 8.659833838464692e-06}, {"id": 265, "seek": 112816, "start": 1141.72, "end": 1144.5400000000002, "text": " Actually doing experiments people haven't done before.", "tokens": [5135, 884, 12050, 561, 2378, 380, 1096, 949, 13], "temperature": 0.0, "avg_logprob": -0.11815830071767171, "compression_ratio": 1.8222996515679442, "no_speech_prob": 8.659833838464692e-06}, {"id": 266, "seek": 112816, "start": 1144.5400000000002, "end": 1146.8400000000001, "text": " Making observations people haven't made before.", "tokens": [14595, 18163, 561, 2378, 380, 1027, 949, 13], "temperature": 0.0, "avg_logprob": -0.11815830071767171, "compression_ratio": 1.8222996515679442, "no_speech_prob": 8.659833838464692e-06}, {"id": 267, "seek": 112816, "start": 1146.8400000000001, "end": 1152.6000000000001, "text": " Because you're getting to the point where you're a more competent deep learning practitioner", "tokens": [1436, 291, 434, 1242, 281, 264, 935, 689, 291, 434, 257, 544, 29998, 2452, 2539, 32125], "temperature": 0.0, "avg_logprob": -0.11815830071767171, "compression_ratio": 1.8222996515679442, "no_speech_prob": 8.659833838464692e-06}, {"id": 268, "seek": 112816, "start": 1152.6000000000001, "end": 1155.48, "text": " than the vast majority that are out there.", "tokens": [813, 264, 8369, 6286, 300, 366, 484, 456, 13], "temperature": 0.0, "avg_logprob": -0.11815830071767171, "compression_ratio": 1.8222996515679442, "no_speech_prob": 8.659833838464692e-06}, {"id": 269, "seek": 112816, "start": 1155.48, "end": 1158.02, "text": " And we're kind of looking at stuff that other people haven't looked at before.", "tokens": [400, 321, 434, 733, 295, 1237, 412, 1507, 300, 661, 561, 2378, 380, 2956, 412, 949, 13], "temperature": 0.0, "avg_logprob": -0.11815830071767171, "compression_ratio": 1.8222996515679442, "no_speech_prob": 8.659833838464692e-06}, {"id": 270, "seek": 115802, "start": 1158.02, "end": 1165.06, "text": " So please try doing lots of experiments, particularly in your domain area.", "tokens": [407, 1767, 853, 884, 3195, 295, 12050, 11, 4098, 294, 428, 9274, 1859, 13], "temperature": 0.0, "avg_logprob": -0.1782821496327718, "compression_ratio": 1.376543209876543, "no_speech_prob": 9.665668585512321e-06}, {"id": 271, "seek": 115802, "start": 1165.06, "end": 1168.32, "text": " And consider writing things down.", "tokens": [400, 1949, 3579, 721, 760, 13], "temperature": 0.0, "avg_logprob": -0.1782821496327718, "compression_ratio": 1.376543209876543, "no_speech_prob": 9.665668585512321e-06}, {"id": 272, "seek": 115802, "start": 1168.32, "end": 1172.12, "text": " Even if, especially if, it's not perfect.", "tokens": [2754, 498, 11, 2318, 498, 11, 309, 311, 406, 2176, 13], "temperature": 0.0, "avg_logprob": -0.1782821496327718, "compression_ratio": 1.376543209876543, "no_speech_prob": 9.665668585512321e-06}, {"id": 273, "seek": 115802, "start": 1172.12, "end": 1178.92, "text": " So write stuff down for the you of six months ago.", "tokens": [407, 2464, 1507, 760, 337, 264, 291, 295, 2309, 2493, 2057, 13], "temperature": 0.0, "avg_logprob": -0.1782821496327718, "compression_ratio": 1.376543209876543, "no_speech_prob": 9.665668585512321e-06}, {"id": 274, "seek": 115802, "start": 1178.92, "end": 1183.36, "text": " That's your audience.", "tokens": [663, 311, 428, 4034, 13], "temperature": 0.0, "avg_logprob": -0.1782821496327718, "compression_ratio": 1.376543209876543, "no_speech_prob": 9.665668585512321e-06}, {"id": 275, "seek": 118336, "start": 1183.36, "end": 1190.32, "text": " So I am going to be assuming that you remember the contents of part one.", "tokens": [407, 286, 669, 516, 281, 312, 11926, 300, 291, 1604, 264, 15768, 295, 644, 472, 13], "temperature": 0.0, "avg_logprob": -0.11972260697979793, "compression_ratio": 1.751054852320675, "no_speech_prob": 9.817281352297869e-06}, {"id": 276, "seek": 118336, "start": 1190.32, "end": 1192.8, "text": " Which was these things.", "tokens": [3013, 390, 613, 721, 13], "temperature": 0.0, "avg_logprob": -0.11972260697979793, "compression_ratio": 1.751054852320675, "no_speech_prob": 9.817281352297869e-06}, {"id": 277, "seek": 118336, "start": 1192.8, "end": 1195.2199999999998, "text": " Here is the contents of part one.", "tokens": [1692, 307, 264, 15768, 295, 644, 472, 13], "temperature": 0.0, "avg_logprob": -0.11972260697979793, "compression_ratio": 1.751054852320675, "no_speech_prob": 9.817281352297869e-06}, {"id": 278, "seek": 118336, "start": 1195.2199999999998, "end": 1200.52, "text": " In practice, it's very unlikely you remember all of these things because nobody's perfect.", "tokens": [682, 3124, 11, 309, 311, 588, 17518, 291, 1604, 439, 295, 613, 721, 570, 5079, 311, 2176, 13], "temperature": 0.0, "avg_logprob": -0.11972260697979793, "compression_ratio": 1.751054852320675, "no_speech_prob": 9.817281352297869e-06}, {"id": 279, "seek": 118336, "start": 1200.52, "end": 1205.08, "text": " So what I'm actually expecting you to do is as I'm going on about something which you're", "tokens": [407, 437, 286, 478, 767, 9650, 291, 281, 360, 307, 382, 286, 478, 516, 322, 466, 746, 597, 291, 434], "temperature": 0.0, "avg_logprob": -0.11972260697979793, "compression_ratio": 1.751054852320675, "no_speech_prob": 9.817281352297869e-06}, {"id": 280, "seek": 118336, "start": 1205.08, "end": 1210.76, "text": " thinking I don't know what he's talking about, that you'll go back and watch the video about", "tokens": [1953, 286, 500, 380, 458, 437, 415, 311, 1417, 466, 11, 300, 291, 603, 352, 646, 293, 1159, 264, 960, 466], "temperature": 0.0, "avg_logprob": -0.11972260697979793, "compression_ratio": 1.751054852320675, "no_speech_prob": 9.817281352297869e-06}, {"id": 281, "seek": 118336, "start": 1210.76, "end": 1212.04, "text": " that thing.", "tokens": [300, 551, 13], "temperature": 0.0, "avg_logprob": -0.11972260697979793, "compression_ratio": 1.751054852320675, "no_speech_prob": 9.817281352297869e-06}, {"id": 282, "seek": 121204, "start": 1212.04, "end": 1217.24, "text": " Don't just keep blasting forwards because I'm assuming that you already know the content", "tokens": [1468, 380, 445, 1066, 47134, 30126, 570, 286, 478, 11926, 300, 291, 1217, 458, 264, 2701], "temperature": 0.0, "avg_logprob": -0.1363896079685377, "compression_ratio": 1.6666666666666667, "no_speech_prob": 2.2822327082394622e-05}, {"id": 283, "seek": 121204, "start": 1217.24, "end": 1219.32, "text": " of part one.", "tokens": [295, 644, 472, 13], "temperature": 0.0, "avg_logprob": -0.1363896079685377, "compression_ratio": 1.6666666666666667, "no_speech_prob": 2.2822327082394622e-05}, {"id": 284, "seek": 121204, "start": 1219.32, "end": 1224.08, "text": " Particularly if you're less confident about the second half of part one where we went", "tokens": [32281, 498, 291, 434, 1570, 6679, 466, 264, 1150, 1922, 295, 644, 472, 689, 321, 1437], "temperature": 0.0, "avg_logprob": -0.1363896079685377, "compression_ratio": 1.6666666666666667, "no_speech_prob": 2.2822327082394622e-05}, {"id": 285, "seek": 121204, "start": 1224.08, "end": 1228.72, "text": " a little bit deeper into what's an activation really and what's a parameter really and exactly", "tokens": [257, 707, 857, 7731, 666, 437, 311, 364, 24433, 534, 293, 437, 311, 257, 13075, 534, 293, 2293], "temperature": 0.0, "avg_logprob": -0.1363896079685377, "compression_ratio": 1.6666666666666667, "no_speech_prob": 2.2822327082394622e-05}, {"id": 286, "seek": 121204, "start": 1228.72, "end": 1230.3999999999999, "text": " how does SGD work.", "tokens": [577, 775, 34520, 35, 589, 13], "temperature": 0.0, "avg_logprob": -0.1363896079685377, "compression_ratio": 1.6666666666666667, "no_speech_prob": 2.2822327082394622e-05}, {"id": 287, "seek": 121204, "start": 1230.3999999999999, "end": 1236.44, "text": " Particularly in today's lesson, I'm going to assume that you really get that stuff.", "tokens": [32281, 294, 965, 311, 6898, 11, 286, 478, 516, 281, 6552, 300, 291, 534, 483, 300, 1507, 13], "temperature": 0.0, "avg_logprob": -0.1363896079685377, "compression_ratio": 1.6666666666666667, "no_speech_prob": 2.2822327082394622e-05}, {"id": 288, "seek": 123644, "start": 1236.44, "end": 1242.06, "text": " So if you don't, then go back and relook at those videos.", "tokens": [407, 498, 291, 500, 380, 11, 550, 352, 646, 293, 319, 12747, 412, 729, 2145, 13], "temperature": 0.0, "avg_logprob": -0.09445231148366177, "compression_ratio": 1.603864734299517, "no_speech_prob": 8.314915476148599e-07}, {"id": 289, "seek": 123644, "start": 1242.06, "end": 1247.64, "text": " Go back to that SGD from scratch and take your time.", "tokens": [1037, 646, 281, 300, 34520, 35, 490, 8459, 293, 747, 428, 565, 13], "temperature": 0.0, "avg_logprob": -0.09445231148366177, "compression_ratio": 1.603864734299517, "no_speech_prob": 8.314915476148599e-07}, {"id": 290, "seek": 123644, "start": 1247.64, "end": 1255.72, "text": " I've kind of designed this course to keep most people busy up until the next course.", "tokens": [286, 600, 733, 295, 4761, 341, 1164, 281, 1066, 881, 561, 5856, 493, 1826, 264, 958, 1164, 13], "temperature": 0.0, "avg_logprob": -0.09445231148366177, "compression_ratio": 1.603864734299517, "no_speech_prob": 8.314915476148599e-07}, {"id": 291, "seek": 123644, "start": 1255.72, "end": 1262.0800000000002, "text": " So feel free to take your time and dig deeply.", "tokens": [407, 841, 1737, 281, 747, 428, 565, 293, 2528, 8760, 13], "temperature": 0.0, "avg_logprob": -0.09445231148366177, "compression_ratio": 1.603864734299517, "no_speech_prob": 8.314915476148599e-07}, {"id": 292, "seek": 123644, "start": 1262.0800000000002, "end": 1266.0, "text": " So the most important thing though is we're going to try and make sure that you can train", "tokens": [407, 264, 881, 1021, 551, 1673, 307, 321, 434, 516, 281, 853, 293, 652, 988, 300, 291, 393, 3847], "temperature": 0.0, "avg_logprob": -0.09445231148366177, "compression_ratio": 1.603864734299517, "no_speech_prob": 8.314915476148599e-07}, {"id": 293, "seek": 126600, "start": 1266.0, "end": 1267.8, "text": " really good models.", "tokens": [534, 665, 5245, 13], "temperature": 0.0, "avg_logprob": -0.15645795227378928, "compression_ratio": 1.691542288557214, "no_speech_prob": 9.972003681468777e-06}, {"id": 294, "seek": 126600, "start": 1267.8, "end": 1271.6, "text": " And there are three steps to training a really good model.", "tokens": [400, 456, 366, 1045, 4439, 281, 3097, 257, 534, 665, 2316, 13], "temperature": 0.0, "avg_logprob": -0.15645795227378928, "compression_ratio": 1.691542288557214, "no_speech_prob": 9.972003681468777e-06}, {"id": 295, "seek": 126600, "start": 1271.6, "end": 1277.72, "text": " Step one is to create something with way more capacity you need and basically no regularization", "tokens": [5470, 472, 307, 281, 1884, 746, 365, 636, 544, 6042, 291, 643, 293, 1936, 572, 3890, 2144], "temperature": 0.0, "avg_logprob": -0.15645795227378928, "compression_ratio": 1.691542288557214, "no_speech_prob": 9.972003681468777e-06}, {"id": 296, "seek": 126600, "start": 1277.72, "end": 1280.16, "text": " and overfit.", "tokens": [293, 670, 6845, 13], "temperature": 0.0, "avg_logprob": -0.15645795227378928, "compression_ratio": 1.691542288557214, "no_speech_prob": 9.972003681468777e-06}, {"id": 297, "seek": 126600, "start": 1280.16, "end": 1283.36, "text": " So overfit means what?", "tokens": [407, 670, 6845, 1355, 437, 30], "temperature": 0.0, "avg_logprob": -0.15645795227378928, "compression_ratio": 1.691542288557214, "no_speech_prob": 9.972003681468777e-06}, {"id": 298, "seek": 126600, "start": 1283.36, "end": 1289.76, "text": " It means that your training loss is lower than your validation loss?", "tokens": [467, 1355, 300, 428, 3097, 4470, 307, 3126, 813, 428, 24071, 4470, 30], "temperature": 0.0, "avg_logprob": -0.15645795227378928, "compression_ratio": 1.691542288557214, "no_speech_prob": 9.972003681468777e-06}, {"id": 299, "seek": 126600, "start": 1289.76, "end": 1290.76, "text": " No.", "tokens": [883, 13], "temperature": 0.0, "avg_logprob": -0.15645795227378928, "compression_ratio": 1.691542288557214, "no_speech_prob": 9.972003681468777e-06}, {"id": 300, "seek": 126600, "start": 1290.76, "end": 1292.04, "text": " No, it doesn't mean that.", "tokens": [883, 11, 309, 1177, 380, 914, 300, 13], "temperature": 0.0, "avg_logprob": -0.15645795227378928, "compression_ratio": 1.691542288557214, "no_speech_prob": 9.972003681468777e-06}, {"id": 301, "seek": 126600, "start": 1292.04, "end": 1293.88, "text": " Remember it doesn't mean that.", "tokens": [5459, 309, 1177, 380, 914, 300, 13], "temperature": 0.0, "avg_logprob": -0.15645795227378928, "compression_ratio": 1.691542288557214, "no_speech_prob": 9.972003681468777e-06}, {"id": 302, "seek": 129388, "start": 1293.88, "end": 1300.0400000000002, "text": " A well-fit model will almost always have training loss lower than the validation loss.", "tokens": [316, 731, 12, 6845, 2316, 486, 1920, 1009, 362, 3097, 4470, 3126, 813, 264, 24071, 4470, 13], "temperature": 0.0, "avg_logprob": -0.1384767314843964, "compression_ratio": 1.7826086956521738, "no_speech_prob": 5.093439085612772e-06}, {"id": 303, "seek": 129388, "start": 1300.0400000000002, "end": 1305.3200000000002, "text": " Remember that overfit means you have actually personally seen your validation error getting", "tokens": [5459, 300, 670, 6845, 1355, 291, 362, 767, 5665, 1612, 428, 24071, 6713, 1242], "temperature": 0.0, "avg_logprob": -0.1384767314843964, "compression_ratio": 1.7826086956521738, "no_speech_prob": 5.093439085612772e-06}, {"id": 304, "seek": 129388, "start": 1305.3200000000002, "end": 1306.3200000000002, "text": " worse.", "tokens": [5324, 13], "temperature": 0.0, "avg_logprob": -0.1384767314843964, "compression_ratio": 1.7826086956521738, "no_speech_prob": 5.093439085612772e-06}, {"id": 305, "seek": 129388, "start": 1306.3200000000002, "end": 1307.3200000000002, "text": " Okay?", "tokens": [1033, 30], "temperature": 0.0, "avg_logprob": -0.1384767314843964, "compression_ratio": 1.7826086956521738, "no_speech_prob": 5.093439085612772e-06}, {"id": 306, "seek": 129388, "start": 1307.3200000000002, "end": 1309.4, "text": " Until you see that happening, you're not overfitting.", "tokens": [9088, 291, 536, 300, 2737, 11, 291, 434, 406, 670, 69, 2414, 13], "temperature": 0.0, "avg_logprob": -0.1384767314843964, "compression_ratio": 1.7826086956521738, "no_speech_prob": 5.093439085612772e-06}, {"id": 307, "seek": 129388, "start": 1309.4, "end": 1316.5600000000002, "text": " So step one is overfit and then step two is reduce overfitting and then step three, okay,", "tokens": [407, 1823, 472, 307, 670, 6845, 293, 550, 1823, 732, 307, 5407, 670, 69, 2414, 293, 550, 1823, 1045, 11, 1392, 11], "temperature": 0.0, "avg_logprob": -0.1384767314843964, "compression_ratio": 1.7826086956521738, "no_speech_prob": 5.093439085612772e-06}, {"id": 308, "seek": 129388, "start": 1316.5600000000002, "end": 1317.5600000000002, "text": " there is no step three.", "tokens": [456, 307, 572, 1823, 1045, 13], "temperature": 0.0, "avg_logprob": -0.1384767314843964, "compression_ratio": 1.7826086956521738, "no_speech_prob": 5.093439085612772e-06}, {"id": 309, "seek": 129388, "start": 1317.5600000000002, "end": 1322.0, "text": " Well, I guess step three is to visualize the inputs and outputs and stuff like that, right?", "tokens": [1042, 11, 286, 2041, 1823, 1045, 307, 281, 23273, 264, 15743, 293, 23930, 293, 1507, 411, 300, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1384767314843964, "compression_ratio": 1.7826086956521738, "no_speech_prob": 5.093439085612772e-06}, {"id": 310, "seek": 132200, "start": 1322.0, "end": 1325.68, "text": " That is to experiment and see what's going on.", "tokens": [663, 307, 281, 5120, 293, 536, 437, 311, 516, 322, 13], "temperature": 0.0, "avg_logprob": -0.11432557678222656, "compression_ratio": 1.79296875, "no_speech_prob": 2.521512669773074e-06}, {"id": 311, "seek": 132200, "start": 1325.68, "end": 1330.68, "text": " So one is pretty easy normally, right?", "tokens": [407, 472, 307, 1238, 1858, 5646, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.11432557678222656, "compression_ratio": 1.79296875, "no_speech_prob": 2.521512669773074e-06}, {"id": 312, "seek": 132200, "start": 1330.68, "end": 1332.56, "text": " Two is the hard bit.", "tokens": [4453, 307, 264, 1152, 857, 13], "temperature": 0.0, "avg_logprob": -0.11432557678222656, "compression_ratio": 1.79296875, "no_speech_prob": 2.521512669773074e-06}, {"id": 313, "seek": 132200, "start": 1332.56, "end": 1338.08, "text": " It's not really that hard, but it's basically these are the five things that you can do", "tokens": [467, 311, 406, 534, 300, 1152, 11, 457, 309, 311, 1936, 613, 366, 264, 1732, 721, 300, 291, 393, 360], "temperature": 0.0, "avg_logprob": -0.11432557678222656, "compression_ratio": 1.79296875, "no_speech_prob": 2.521512669773074e-06}, {"id": 314, "seek": 132200, "start": 1338.08, "end": 1339.08, "text": " in order of priority.", "tokens": [294, 1668, 295, 9365, 13], "temperature": 0.0, "avg_logprob": -0.11432557678222656, "compression_ratio": 1.79296875, "no_speech_prob": 2.521512669773074e-06}, {"id": 315, "seek": 132200, "start": 1339.08, "end": 1341.58, "text": " If you can get more data, you should.", "tokens": [759, 291, 393, 483, 544, 1412, 11, 291, 820, 13], "temperature": 0.0, "avg_logprob": -0.11432557678222656, "compression_ratio": 1.79296875, "no_speech_prob": 2.521512669773074e-06}, {"id": 316, "seek": 132200, "start": 1341.58, "end": 1344.04, "text": " If you can do more data augmentation, you should.", "tokens": [759, 291, 393, 360, 544, 1412, 14501, 19631, 11, 291, 820, 13], "temperature": 0.0, "avg_logprob": -0.11432557678222656, "compression_ratio": 1.79296875, "no_speech_prob": 2.521512669773074e-06}, {"id": 317, "seek": 132200, "start": 1344.04, "end": 1347.08, "text": " If you can use a more generalizable architecture, you should.", "tokens": [759, 291, 393, 764, 257, 544, 2674, 22395, 9482, 11, 291, 820, 13], "temperature": 0.0, "avg_logprob": -0.11432557678222656, "compression_ratio": 1.79296875, "no_speech_prob": 2.521512669773074e-06}, {"id": 318, "seek": 132200, "start": 1347.08, "end": 1351.88, "text": " And then if all those things are done, then you can start adding regularization like dropout", "tokens": [400, 550, 498, 439, 729, 721, 366, 1096, 11, 550, 291, 393, 722, 5127, 3890, 2144, 411, 3270, 346], "temperature": 0.0, "avg_logprob": -0.11432557678222656, "compression_ratio": 1.79296875, "no_speech_prob": 2.521512669773074e-06}, {"id": 319, "seek": 135188, "start": 1351.88, "end": 1357.2800000000002, "text": " or weight decay.", "tokens": [420, 3364, 21039, 13], "temperature": 0.0, "avg_logprob": -0.16491258284624885, "compression_ratio": 1.6761904761904762, "no_speech_prob": 1.9523904484231025e-05}, {"id": 320, "seek": 135188, "start": 1357.2800000000002, "end": 1362.1200000000001, "text": " But remember, at that point, you're reducing the effective capacity of your model, so it's", "tokens": [583, 1604, 11, 412, 300, 935, 11, 291, 434, 12245, 264, 4942, 6042, 295, 428, 2316, 11, 370, 309, 311], "temperature": 0.0, "avg_logprob": -0.16491258284624885, "compression_ratio": 1.6761904761904762, "no_speech_prob": 1.9523904484231025e-05}, {"id": 321, "seek": 135188, "start": 1362.1200000000001, "end": 1364.2800000000002, "text": " less good than the first three things.", "tokens": [1570, 665, 813, 264, 700, 1045, 721, 13], "temperature": 0.0, "avg_logprob": -0.16491258284624885, "compression_ratio": 1.6761904761904762, "no_speech_prob": 1.9523904484231025e-05}, {"id": 322, "seek": 135188, "start": 1364.2800000000002, "end": 1368.96, "text": " And then last of all, reduce the architecture complexity.", "tokens": [400, 550, 1036, 295, 439, 11, 5407, 264, 9482, 14024, 13], "temperature": 0.0, "avg_logprob": -0.16491258284624885, "compression_ratio": 1.6761904761904762, "no_speech_prob": 1.9523904484231025e-05}, {"id": 323, "seek": 135188, "start": 1368.96, "end": 1374.72, "text": " And most people, most beginners especially, start with reducing the complexity of the", "tokens": [400, 881, 561, 11, 881, 26992, 2318, 11, 722, 365, 12245, 264, 14024, 295, 264], "temperature": 0.0, "avg_logprob": -0.16491258284624885, "compression_ratio": 1.6761904761904762, "no_speech_prob": 1.9523904484231025e-05}, {"id": 324, "seek": 135188, "start": 1374.72, "end": 1378.48, "text": " architecture, but that should be the last thing that you try.", "tokens": [9482, 11, 457, 300, 820, 312, 264, 1036, 551, 300, 291, 853, 13], "temperature": 0.0, "avg_logprob": -0.16491258284624885, "compression_ratio": 1.6761904761904762, "no_speech_prob": 1.9523904484231025e-05}, {"id": 325, "seek": 137848, "start": 1378.48, "end": 1384.44, "text": " Unless your architecture is so complex that it's too slow for your problem.", "tokens": [16581, 428, 9482, 307, 370, 3997, 300, 309, 311, 886, 2964, 337, 428, 1154, 13], "temperature": 0.0, "avg_logprob": -0.16423911314744216, "compression_ratio": 1.663677130044843, "no_speech_prob": 8.139364581438713e-06}, {"id": 326, "seek": 137848, "start": 1384.44, "end": 1389.04, "text": " So that's a kind of a summary of what we want to be able to do that we learned about in", "tokens": [407, 300, 311, 257, 733, 295, 257, 12691, 295, 437, 321, 528, 281, 312, 1075, 281, 360, 300, 321, 3264, 466, 294], "temperature": 0.0, "avg_logprob": -0.16423911314744216, "compression_ratio": 1.663677130044843, "no_speech_prob": 8.139364581438713e-06}, {"id": 327, "seek": 137848, "start": 1389.04, "end": 1391.8, "text": " part one.", "tokens": [644, 472, 13], "temperature": 0.0, "avg_logprob": -0.16423911314744216, "compression_ratio": 1.663677130044843, "no_speech_prob": 8.139364581438713e-06}, {"id": 328, "seek": 137848, "start": 1391.8, "end": 1394.6, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.16423911314744216, "compression_ratio": 1.663677130044843, "no_speech_prob": 8.139364581438713e-06}, {"id": 329, "seek": 137848, "start": 1394.6, "end": 1398.72, "text": " So we're going to be reading papers, which we didn't really do in part one.", "tokens": [407, 321, 434, 516, 281, 312, 3760, 10577, 11, 597, 321, 994, 380, 534, 360, 294, 644, 472, 13], "temperature": 0.0, "avg_logprob": -0.16423911314744216, "compression_ratio": 1.663677130044843, "no_speech_prob": 8.139364581438713e-06}, {"id": 330, "seek": 137848, "start": 1398.72, "end": 1405.32, "text": " And papers look something like this, which if you're anything like me, that's terrifying.", "tokens": [400, 10577, 574, 746, 411, 341, 11, 597, 498, 291, 434, 1340, 411, 385, 11, 300, 311, 18106, 13], "temperature": 0.0, "avg_logprob": -0.16423911314744216, "compression_ratio": 1.663677130044843, "no_speech_prob": 8.139364581438713e-06}, {"id": 331, "seek": 137848, "start": 1405.32, "end": 1406.7, "text": " And I'm not going to lie.", "tokens": [400, 286, 478, 406, 516, 281, 4544, 13], "temperature": 0.0, "avg_logprob": -0.16423911314744216, "compression_ratio": 1.663677130044843, "no_speech_prob": 8.139364581438713e-06}, {"id": 332, "seek": 140670, "start": 1406.7, "end": 1412.72, "text": " It's still the case that when I start looking at a new paper, every single time I think", "tokens": [467, 311, 920, 264, 1389, 300, 562, 286, 722, 1237, 412, 257, 777, 3035, 11, 633, 2167, 565, 286, 519], "temperature": 0.0, "avg_logprob": -0.18035106658935546, "compression_ratio": 1.5761316872427984, "no_speech_prob": 1.1842655112559441e-05}, {"id": 333, "seek": 140670, "start": 1412.72, "end": 1416.04, "text": " I'm not smart enough to understand this.", "tokens": [286, 478, 406, 4069, 1547, 281, 1223, 341, 13], "temperature": 0.0, "avg_logprob": -0.18035106658935546, "compression_ratio": 1.5761316872427984, "no_speech_prob": 1.1842655112559441e-05}, {"id": 334, "seek": 140670, "start": 1416.04, "end": 1421.2, "text": " I just can't get past that immediate reaction because I just look at this stuff and I just", "tokens": [286, 445, 393, 380, 483, 1791, 300, 11629, 5480, 570, 286, 445, 574, 412, 341, 1507, 293, 286, 445], "temperature": 0.0, "avg_logprob": -0.18035106658935546, "compression_ratio": 1.5761316872427984, "no_speech_prob": 1.1842655112559441e-05}, {"id": 335, "seek": 140670, "start": 1421.2, "end": 1423.96, "text": " go, that's not something that I understand.", "tokens": [352, 11, 300, 311, 406, 746, 300, 286, 1223, 13], "temperature": 0.0, "avg_logprob": -0.18035106658935546, "compression_ratio": 1.5761316872427984, "no_speech_prob": 1.1842655112559441e-05}, {"id": 336, "seek": 140670, "start": 1423.96, "end": 1429.56, "text": " But then I remember this is the Adam paper, and you've all seen Adam implemented in one", "tokens": [583, 550, 286, 1604, 341, 307, 264, 7938, 3035, 11, 293, 291, 600, 439, 1612, 7938, 12270, 294, 472], "temperature": 0.0, "avg_logprob": -0.18035106658935546, "compression_ratio": 1.5761316872427984, "no_speech_prob": 1.1842655112559441e-05}, {"id": 337, "seek": 140670, "start": 1429.56, "end": 1432.04, "text": " cell of Microsoft Excel.", "tokens": [2815, 295, 8116, 19060, 13], "temperature": 0.0, "avg_logprob": -0.18035106658935546, "compression_ratio": 1.5761316872427984, "no_speech_prob": 1.1842655112559441e-05}, {"id": 338, "seek": 140670, "start": 1432.04, "end": 1433.04, "text": " Right?", "tokens": [1779, 30], "temperature": 0.0, "avg_logprob": -0.18035106658935546, "compression_ratio": 1.5761316872427984, "no_speech_prob": 1.1842655112559441e-05}, {"id": 339, "seek": 143304, "start": 1433.04, "end": 1437.44, "text": " Like when it actually comes down to it, every time I do get to the point where I understand", "tokens": [1743, 562, 309, 767, 1487, 760, 281, 309, 11, 633, 565, 286, 360, 483, 281, 264, 935, 689, 286, 1223], "temperature": 0.0, "avg_logprob": -0.15453398002768462, "compression_ratio": 1.5767634854771784, "no_speech_prob": 3.0894445899321e-06}, {"id": 340, "seek": 143304, "start": 1437.44, "end": 1442.3999999999999, "text": " if an implement a paper, I go, oh my God, that's all it is.", "tokens": [498, 364, 4445, 257, 3035, 11, 286, 352, 11, 1954, 452, 1265, 11, 300, 311, 439, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.15453398002768462, "compression_ratio": 1.5767634854771784, "no_speech_prob": 3.0894445899321e-06}, {"id": 341, "seek": 143304, "start": 1442.3999999999999, "end": 1443.3999999999999, "text": " Right?", "tokens": [1779, 30], "temperature": 0.0, "avg_logprob": -0.15453398002768462, "compression_ratio": 1.5767634854771784, "no_speech_prob": 3.0894445899321e-06}, {"id": 342, "seek": 143304, "start": 1443.3999999999999, "end": 1447.72, "text": " So a big part of reading papers, especially if you're less mathematically inclined than", "tokens": [407, 257, 955, 644, 295, 3760, 10577, 11, 2318, 498, 291, 434, 1570, 44003, 28173, 813], "temperature": 0.0, "avg_logprob": -0.15453398002768462, "compression_ratio": 1.5767634854771784, "no_speech_prob": 3.0894445899321e-06}, {"id": 343, "seek": 143304, "start": 1447.72, "end": 1454.28, "text": " I am, is just getting past the fear of the Greek letters.", "tokens": [286, 669, 11, 307, 445, 1242, 1791, 264, 4240, 295, 264, 10281, 7825, 13], "temperature": 0.0, "avg_logprob": -0.15453398002768462, "compression_ratio": 1.5767634854771784, "no_speech_prob": 3.0894445899321e-06}, {"id": 344, "seek": 143304, "start": 1454.28, "end": 1456.92, "text": " I'll say something else about Greek letters.", "tokens": [286, 603, 584, 746, 1646, 466, 10281, 7825, 13], "temperature": 0.0, "avg_logprob": -0.15453398002768462, "compression_ratio": 1.5767634854771784, "no_speech_prob": 3.0894445899321e-06}, {"id": 345, "seek": 143304, "start": 1456.92, "end": 1458.24, "text": " There are lots of them.", "tokens": [821, 366, 3195, 295, 552, 13], "temperature": 0.0, "avg_logprob": -0.15453398002768462, "compression_ratio": 1.5767634854771784, "no_speech_prob": 3.0894445899321e-06}, {"id": 346, "seek": 143304, "start": 1458.24, "end": 1459.24, "text": " Right?", "tokens": [1779, 30], "temperature": 0.0, "avg_logprob": -0.15453398002768462, "compression_ratio": 1.5767634854771784, "no_speech_prob": 3.0894445899321e-06}, {"id": 347, "seek": 145924, "start": 1459.24, "end": 1464.84, "text": " And it's very hard to read something that you can't actually pronounce.", "tokens": [400, 309, 311, 588, 1152, 281, 1401, 746, 300, 291, 393, 380, 767, 19567, 13], "temperature": 0.0, "avg_logprob": -0.15708757416019595, "compression_ratio": 1.792828685258964, "no_speech_prob": 3.3930750760191586e-06}, {"id": 348, "seek": 145924, "start": 1464.84, "end": 1465.84, "text": " Right?", "tokens": [1779, 30], "temperature": 0.0, "avg_logprob": -0.15708757416019595, "compression_ratio": 1.792828685258964, "no_speech_prob": 3.3930750760191586e-06}, {"id": 349, "seek": 145924, "start": 1465.84, "end": 1469.96, "text": " Because you're just saying to yourself, oh, squiggle bracket one plus squiggle one, g", "tokens": [1436, 291, 434, 445, 1566, 281, 1803, 11, 1954, 11, 2339, 19694, 16904, 472, 1804, 2339, 19694, 472, 11, 290], "temperature": 0.0, "avg_logprob": -0.15708757416019595, "compression_ratio": 1.792828685258964, "no_speech_prob": 3.3930750760191586e-06}, {"id": 350, "seek": 145924, "start": 1469.96, "end": 1471.92, "text": " squiggle one minus squiggle.", "tokens": [2339, 19694, 472, 3175, 2339, 19694, 13], "temperature": 0.0, "avg_logprob": -0.15708757416019595, "compression_ratio": 1.792828685258964, "no_speech_prob": 3.3930750760191586e-06}, {"id": 351, "seek": 145924, "start": 1471.92, "end": 1474.04, "text": " And it's like all the squiggles, you just get lost.", "tokens": [400, 309, 311, 411, 439, 264, 2339, 19469, 11, 291, 445, 483, 2731, 13], "temperature": 0.0, "avg_logprob": -0.15708757416019595, "compression_ratio": 1.792828685258964, "no_speech_prob": 3.3930750760191586e-06}, {"id": 352, "seek": 145924, "start": 1474.04, "end": 1475.04, "text": " Right?", "tokens": [1779, 30], "temperature": 0.0, "avg_logprob": -0.15708757416019595, "compression_ratio": 1.792828685258964, "no_speech_prob": 3.3930750760191586e-06}, {"id": 353, "seek": 145924, "start": 1475.04, "end": 1480.32, "text": " So believe it or not, it actually really helps to go and learn the Greek alphabet so you can", "tokens": [407, 1697, 309, 420, 406, 11, 309, 767, 534, 3665, 281, 352, 293, 1466, 264, 10281, 23339, 370, 291, 393], "temperature": 0.0, "avg_logprob": -0.15708757416019595, "compression_ratio": 1.792828685258964, "no_speech_prob": 3.3930750760191586e-06}, {"id": 354, "seek": 145924, "start": 1480.32, "end": 1484.36, "text": " pronounce alpha times one plus beta one.", "tokens": [19567, 8961, 1413, 472, 1804, 9861, 472, 13], "temperature": 0.0, "avg_logprob": -0.15708757416019595, "compression_ratio": 1.792828685258964, "no_speech_prob": 3.3930750760191586e-06}, {"id": 355, "seek": 145924, "start": 1484.36, "end": 1485.36, "text": " Right?", "tokens": [1779, 30], "temperature": 0.0, "avg_logprob": -0.15708757416019595, "compression_ratio": 1.792828685258964, "no_speech_prob": 3.3930750760191586e-06}, {"id": 356, "seek": 145924, "start": 1485.36, "end": 1487.48, "text": " Suddenly you can start talking to other people about it.", "tokens": [21194, 291, 393, 722, 1417, 281, 661, 561, 466, 309, 13], "temperature": 0.0, "avg_logprob": -0.15708757416019595, "compression_ratio": 1.792828685258964, "no_speech_prob": 3.3930750760191586e-06}, {"id": 357, "seek": 148748, "start": 1487.48, "end": 1489.44, "text": " You can actually read it out loud.", "tokens": [509, 393, 767, 1401, 309, 484, 6588, 13], "temperature": 0.0, "avg_logprob": -0.12821852366129557, "compression_ratio": 1.6642335766423357, "no_speech_prob": 4.029302999697393e-06}, {"id": 358, "seek": 148748, "start": 1489.44, "end": 1490.94, "text": " It makes a big difference.", "tokens": [467, 1669, 257, 955, 2649, 13], "temperature": 0.0, "avg_logprob": -0.12821852366129557, "compression_ratio": 1.6642335766423357, "no_speech_prob": 4.029302999697393e-06}, {"id": 359, "seek": 148748, "start": 1490.94, "end": 1494.4, "text": " So learn to pronounce the Greek letters.", "tokens": [407, 1466, 281, 19567, 264, 10281, 7825, 13], "temperature": 0.0, "avg_logprob": -0.12821852366129557, "compression_ratio": 1.6642335766423357, "no_speech_prob": 4.029302999697393e-06}, {"id": 360, "seek": 148748, "start": 1494.4, "end": 1499.68, "text": " Note that the people that write these papers are generally not selected for their outstanding", "tokens": [11633, 300, 264, 561, 300, 2464, 613, 10577, 366, 5101, 406, 8209, 337, 641, 14485], "temperature": 0.0, "avg_logprob": -0.12821852366129557, "compression_ratio": 1.6642335766423357, "no_speech_prob": 4.029302999697393e-06}, {"id": 361, "seek": 148748, "start": 1499.68, "end": 1501.68, "text": " clarity of communication.", "tokens": [16992, 295, 6101, 13], "temperature": 0.0, "avg_logprob": -0.12821852366129557, "compression_ratio": 1.6642335766423357, "no_speech_prob": 4.029302999697393e-06}, {"id": 362, "seek": 148748, "start": 1501.68, "end": 1502.84, "text": " Right?", "tokens": [1779, 30], "temperature": 0.0, "avg_logprob": -0.12821852366129557, "compression_ratio": 1.6642335766423357, "no_speech_prob": 4.029302999697393e-06}, {"id": 363, "seek": 148748, "start": 1502.84, "end": 1508.96, "text": " So you will often find that there will be a blog post or a tutorial that does a better", "tokens": [407, 291, 486, 2049, 915, 300, 456, 486, 312, 257, 6968, 2183, 420, 257, 7073, 300, 775, 257, 1101], "temperature": 0.0, "avg_logprob": -0.12821852366129557, "compression_ratio": 1.6642335766423357, "no_speech_prob": 4.029302999697393e-06}, {"id": 364, "seek": 148748, "start": 1508.96, "end": 1511.96, "text": " job of explaining the concept than the paper does.", "tokens": [1691, 295, 13468, 264, 3410, 813, 264, 3035, 775, 13], "temperature": 0.0, "avg_logprob": -0.12821852366129557, "compression_ratio": 1.6642335766423357, "no_speech_prob": 4.029302999697393e-06}, {"id": 365, "seek": 148748, "start": 1511.96, "end": 1514.6, "text": " So don't be afraid to go and look for those as well.", "tokens": [407, 500, 380, 312, 4638, 281, 352, 293, 574, 337, 729, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.12821852366129557, "compression_ratio": 1.6642335766423357, "no_speech_prob": 4.029302999697393e-06}, {"id": 366, "seek": 148748, "start": 1514.6, "end": 1516.24, "text": " But do go back to the paper.", "tokens": [583, 360, 352, 646, 281, 264, 3035, 13], "temperature": 0.0, "avg_logprob": -0.12821852366129557, "compression_ratio": 1.6642335766423357, "no_speech_prob": 4.029302999697393e-06}, {"id": 367, "seek": 148748, "start": 1516.24, "end": 1517.24, "text": " Right?", "tokens": [1779, 30], "temperature": 0.0, "avg_logprob": -0.12821852366129557, "compression_ratio": 1.6642335766423357, "no_speech_prob": 4.029302999697393e-06}, {"id": 368, "seek": 151724, "start": 1517.24, "end": 1522.96, "text": " The paper is the one that's hopefully got it mainly right.", "tokens": [440, 3035, 307, 264, 472, 300, 311, 4696, 658, 309, 8704, 558, 13], "temperature": 0.0, "avg_logprob": -0.15521205555308948, "compression_ratio": 1.6222222222222222, "no_speech_prob": 1.0782735444081482e-05}, {"id": 369, "seek": 151724, "start": 1522.96, "end": 1526.08, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.15521205555308948, "compression_ratio": 1.6222222222222222, "no_speech_prob": 1.0782735444081482e-05}, {"id": 370, "seek": 151724, "start": 1526.08, "end": 1530.2, "text": " One of the tricky things about reading papers is the equations have symbols and you don't", "tokens": [1485, 295, 264, 12414, 721, 466, 3760, 10577, 307, 264, 11787, 362, 16944, 293, 291, 500, 380], "temperature": 0.0, "avg_logprob": -0.15521205555308948, "compression_ratio": 1.6222222222222222, "no_speech_prob": 1.0782735444081482e-05}, {"id": 371, "seek": 151724, "start": 1530.2, "end": 1533.8, "text": " know what they mean and you can't Google for them.", "tokens": [458, 437, 436, 914, 293, 291, 393, 380, 3329, 337, 552, 13], "temperature": 0.0, "avg_logprob": -0.15521205555308948, "compression_ratio": 1.6222222222222222, "no_speech_prob": 1.0782735444081482e-05}, {"id": 372, "seek": 151724, "start": 1533.8, "end": 1538.92, "text": " So a couple of good resources if you see symbols you don't recognize.", "tokens": [407, 257, 1916, 295, 665, 3593, 498, 291, 536, 16944, 291, 500, 380, 5521, 13], "temperature": 0.0, "avg_logprob": -0.15521205555308948, "compression_ratio": 1.6222222222222222, "no_speech_prob": 1.0782735444081482e-05}, {"id": 373, "seek": 151724, "start": 1538.92, "end": 1544.84, "text": " Wikipedia has an excellent list of mathematical symbols page that you can scroll through.", "tokens": [28999, 575, 364, 7103, 1329, 295, 18894, 16944, 3028, 300, 291, 393, 11369, 807, 13], "temperature": 0.0, "avg_logprob": -0.15521205555308948, "compression_ratio": 1.6222222222222222, "no_speech_prob": 1.0782735444081482e-05}, {"id": 374, "seek": 154484, "start": 1544.84, "end": 1551.04, "text": " And even better, DTechify is a website where you can draw a symbol you don't recognize", "tokens": [400, 754, 1101, 11, 413, 36050, 2505, 307, 257, 3144, 689, 291, 393, 2642, 257, 5986, 291, 500, 380, 5521], "temperature": 0.0, "avg_logprob": -0.14217970786838358, "compression_ratio": 1.6081632653061224, "no_speech_prob": 4.710653684014687e-06}, {"id": 375, "seek": 154484, "start": 1551.04, "end": 1557.24, "text": " and it uses the power of machine learning to find similar symbols.", "tokens": [293, 309, 4960, 264, 1347, 295, 3479, 2539, 281, 915, 2531, 16944, 13], "temperature": 0.0, "avg_logprob": -0.14217970786838358, "compression_ratio": 1.6081632653061224, "no_speech_prob": 4.710653684014687e-06}, {"id": 376, "seek": 154484, "start": 1557.24, "end": 1560.1599999999999, "text": " There are lots of symbols that look a bit the same so you will have to use some level", "tokens": [821, 366, 3195, 295, 16944, 300, 574, 257, 857, 264, 912, 370, 291, 486, 362, 281, 764, 512, 1496], "temperature": 0.0, "avg_logprob": -0.14217970786838358, "compression_ratio": 1.6081632653061224, "no_speech_prob": 4.710653684014687e-06}, {"id": 377, "seek": 154484, "start": 1560.1599999999999, "end": 1561.1599999999999, "text": " of judgment.", "tokens": [295, 12216, 13], "temperature": 0.0, "avg_logprob": -0.14217970786838358, "compression_ratio": 1.6081632653061224, "no_speech_prob": 4.710653684014687e-06}, {"id": 378, "seek": 154484, "start": 1561.1599999999999, "end": 1562.1599999999999, "text": " Right?", "tokens": [1779, 30], "temperature": 0.0, "avg_logprob": -0.14217970786838358, "compression_ratio": 1.6081632653061224, "no_speech_prob": 4.710653684014687e-06}, {"id": 379, "seek": 154484, "start": 1562.1599999999999, "end": 1567.56, "text": " But the thing that it shows here is the LaTeX name and you can then Google for the LaTeX", "tokens": [583, 264, 551, 300, 309, 3110, 510, 307, 264, 2369, 14233, 55, 1315, 293, 291, 393, 550, 3329, 337, 264, 2369, 14233, 55], "temperature": 0.0, "avg_logprob": -0.14217970786838358, "compression_ratio": 1.6081632653061224, "no_speech_prob": 4.710653684014687e-06}, {"id": 380, "seek": 154484, "start": 1567.56, "end": 1572.24, "text": " name to find out what that thing means.", "tokens": [1315, 281, 915, 484, 437, 300, 551, 1355, 13], "temperature": 0.0, "avg_logprob": -0.14217970786838358, "compression_ratio": 1.6081632653061224, "no_speech_prob": 4.710653684014687e-06}, {"id": 381, "seek": 154484, "start": 1572.24, "end": 1574.36, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.14217970786838358, "compression_ratio": 1.6081632653061224, "no_speech_prob": 4.710653684014687e-06}, {"id": 382, "seek": 157436, "start": 1574.36, "end": 1580.6399999999999, "text": " So let's start.", "tokens": [407, 718, 311, 722, 13], "temperature": 0.0, "avg_logprob": -0.15467893922483766, "compression_ratio": 1.508108108108108, "no_speech_prob": 4.157191597187193e-06}, {"id": 383, "seek": 157436, "start": 1580.6399999999999, "end": 1584.08, "text": " Here's what we're going to do over the next couple of lessons.", "tokens": [1692, 311, 437, 321, 434, 516, 281, 360, 670, 264, 958, 1916, 295, 8820, 13], "temperature": 0.0, "avg_logprob": -0.15467893922483766, "compression_ratio": 1.508108108108108, "no_speech_prob": 4.157191597187193e-06}, {"id": 384, "seek": 157436, "start": 1584.08, "end": 1592.0, "text": " We're going to try to create a pretty competent modern CNN model.", "tokens": [492, 434, 516, 281, 853, 281, 1884, 257, 1238, 29998, 4363, 24859, 2316, 13], "temperature": 0.0, "avg_logprob": -0.15467893922483766, "compression_ratio": 1.508108108108108, "no_speech_prob": 4.157191597187193e-06}, {"id": 385, "seek": 157436, "start": 1592.0, "end": 1598.6, "text": " And we actually already have this bit because we did that in the last course.", "tokens": [400, 321, 767, 1217, 362, 341, 857, 570, 321, 630, 300, 294, 264, 1036, 1164, 13], "temperature": 0.0, "avg_logprob": -0.15467893922483766, "compression_ratio": 1.508108108108108, "no_speech_prob": 4.157191597187193e-06}, {"id": 386, "seek": 157436, "start": 1598.6, "end": 1599.6, "text": " Right?", "tokens": [1779, 30], "temperature": 0.0, "avg_logprob": -0.15467893922483766, "compression_ratio": 1.508108108108108, "no_speech_prob": 4.157191597187193e-06}, {"id": 387, "seek": 157436, "start": 1599.6, "end": 1602.1999999999998, "text": " We already have our layers for creating a ResNet.", "tokens": [492, 1217, 362, 527, 7914, 337, 4084, 257, 5015, 31890, 13], "temperature": 0.0, "avg_logprob": -0.15467893922483766, "compression_ratio": 1.508108108108108, "no_speech_prob": 4.157191597187193e-06}, {"id": 388, "seek": 160220, "start": 1602.2, "end": 1604.76, "text": " We actually got a pretty good result.", "tokens": [492, 767, 658, 257, 1238, 665, 1874, 13], "temperature": 0.0, "avg_logprob": -0.14644694507570194, "compression_ratio": 1.7241379310344827, "no_speech_prob": 7.5274811024428345e-06}, {"id": 389, "seek": 160220, "start": 1604.76, "end": 1606.92, "text": " So we just have to do all these things.", "tokens": [407, 321, 445, 362, 281, 360, 439, 613, 721, 13], "temperature": 0.0, "avg_logprob": -0.14644694507570194, "compression_ratio": 1.7241379310344827, "no_speech_prob": 7.5274811024428345e-06}, {"id": 390, "seek": 160220, "start": 1606.92, "end": 1607.92, "text": " Okay?", "tokens": [1033, 30], "temperature": 0.0, "avg_logprob": -0.14644694507570194, "compression_ratio": 1.7241379310344827, "no_speech_prob": 7.5274811024428345e-06}, {"id": 391, "seek": 160220, "start": 1607.92, "end": 1611.68, "text": " To get us from here to here.", "tokens": [1407, 483, 505, 490, 510, 281, 510, 13], "temperature": 0.0, "avg_logprob": -0.14644694507570194, "compression_ratio": 1.7241379310344827, "no_speech_prob": 7.5274811024428345e-06}, {"id": 392, "seek": 160220, "start": 1611.68, "end": 1613.1200000000001, "text": " That's just the next couple of lessons.", "tokens": [663, 311, 445, 264, 958, 1916, 295, 8820, 13], "temperature": 0.0, "avg_logprob": -0.14644694507570194, "compression_ratio": 1.7241379310344827, "no_speech_prob": 7.5274811024428345e-06}, {"id": 393, "seek": 160220, "start": 1613.1200000000001, "end": 1615.72, "text": " After that we're going to go a lot further.", "tokens": [2381, 300, 321, 434, 516, 281, 352, 257, 688, 3052, 13], "temperature": 0.0, "avg_logprob": -0.14644694507570194, "compression_ratio": 1.7241379310344827, "no_speech_prob": 7.5274811024428345e-06}, {"id": 394, "seek": 160220, "start": 1615.72, "end": 1616.96, "text": " Right?", "tokens": [1779, 30], "temperature": 0.0, "avg_logprob": -0.14644694507570194, "compression_ratio": 1.7241379310344827, "no_speech_prob": 7.5274811024428345e-06}, {"id": 395, "seek": 160220, "start": 1616.96, "end": 1621.0, "text": " So today we're going to try to get to at least the point where we've got the backward pass", "tokens": [407, 965, 321, 434, 516, 281, 853, 281, 483, 281, 412, 1935, 264, 935, 689, 321, 600, 658, 264, 23897, 1320], "temperature": 0.0, "avg_logprob": -0.14644694507570194, "compression_ratio": 1.7241379310344827, "no_speech_prob": 7.5274811024428345e-06}, {"id": 396, "seek": 160220, "start": 1621.0, "end": 1622.0, "text": " going.", "tokens": [516, 13], "temperature": 0.0, "avg_logprob": -0.14644694507570194, "compression_ratio": 1.7241379310344827, "no_speech_prob": 7.5274811024428345e-06}, {"id": 397, "seek": 160220, "start": 1622.0, "end": 1623.0, "text": " Right?", "tokens": [1779, 30], "temperature": 0.0, "avg_logprob": -0.14644694507570194, "compression_ratio": 1.7241379310344827, "no_speech_prob": 7.5274811024428345e-06}, {"id": 398, "seek": 160220, "start": 1623.0, "end": 1627.56, "text": " So remember we're going to build a model that takes an input array and we're going to try", "tokens": [407, 1604, 321, 434, 516, 281, 1322, 257, 2316, 300, 2516, 364, 4846, 10225, 293, 321, 434, 516, 281, 853], "temperature": 0.0, "avg_logprob": -0.14644694507570194, "compression_ratio": 1.7241379310344827, "no_speech_prob": 7.5274811024428345e-06}, {"id": 399, "seek": 160220, "start": 1627.56, "end": 1629.72, "text": " and create a simple fully connected network.", "tokens": [293, 1884, 257, 2199, 4498, 4582, 3209, 13], "temperature": 0.0, "avg_logprob": -0.14644694507570194, "compression_ratio": 1.7241379310344827, "no_speech_prob": 7.5274811024428345e-06}, {"id": 400, "seek": 160220, "start": 1629.72, "end": 1630.72, "text": " Right?", "tokens": [1779, 30], "temperature": 0.0, "avg_logprob": -0.14644694507570194, "compression_ratio": 1.7241379310344827, "no_speech_prob": 7.5274811024428345e-06}, {"id": 401, "seek": 163072, "start": 1630.72, "end": 1632.3600000000001, "text": " So we're going to build one hidden layer.", "tokens": [407, 321, 434, 516, 281, 1322, 472, 7633, 4583, 13], "temperature": 0.0, "avg_logprob": -0.16971784071488813, "compression_ratio": 1.85, "no_speech_prob": 1.0783030120364856e-05}, {"id": 402, "seek": 163072, "start": 1632.3600000000001, "end": 1637.44, "text": " So we're going to start with some input, do a matrix multiply, do a value, do a matrix", "tokens": [407, 321, 434, 516, 281, 722, 365, 512, 4846, 11, 360, 257, 8141, 12972, 11, 360, 257, 2158, 11, 360, 257, 8141], "temperature": 0.0, "avg_logprob": -0.16971784071488813, "compression_ratio": 1.85, "no_speech_prob": 1.0783030120364856e-05}, {"id": 403, "seek": 163072, "start": 1637.44, "end": 1640.0, "text": " multiply, do a loss function.", "tokens": [12972, 11, 360, 257, 4470, 2445, 13], "temperature": 0.0, "avg_logprob": -0.16971784071488813, "compression_ratio": 1.85, "no_speech_prob": 1.0783030120364856e-05}, {"id": 404, "seek": 163072, "start": 1640.0, "end": 1641.2, "text": " Okay?", "tokens": [1033, 30], "temperature": 0.0, "avg_logprob": -0.16971784071488813, "compression_ratio": 1.85, "no_speech_prob": 1.0783030120364856e-05}, {"id": 405, "seek": 163072, "start": 1641.2, "end": 1644.96, "text": " And so that's a forward pass and that will tell us our loss.", "tokens": [400, 370, 300, 311, 257, 2128, 1320, 293, 300, 486, 980, 505, 527, 4470, 13], "temperature": 0.0, "avg_logprob": -0.16971784071488813, "compression_ratio": 1.85, "no_speech_prob": 1.0783030120364856e-05}, {"id": 406, "seek": 163072, "start": 1644.96, "end": 1650.52, "text": " And then we will calculate the gradients of the weights and biases with respect to the", "tokens": [400, 550, 321, 486, 8873, 264, 2771, 2448, 295, 264, 17443, 293, 32152, 365, 3104, 281, 264], "temperature": 0.0, "avg_logprob": -0.16971784071488813, "compression_ratio": 1.85, "no_speech_prob": 1.0783030120364856e-05}, {"id": 407, "seek": 163072, "start": 1650.52, "end": 1651.52, "text": " loss.", "tokens": [4470, 13], "temperature": 0.0, "avg_logprob": -0.16971784071488813, "compression_ratio": 1.85, "no_speech_prob": 1.0783030120364856e-05}, {"id": 408, "seek": 163072, "start": 1651.52, "end": 1656.24, "text": " Sorry, of the loss with respect to the weights and biases in order to basically multiply", "tokens": [4919, 11, 295, 264, 4470, 365, 3104, 281, 264, 17443, 293, 32152, 294, 1668, 281, 1936, 12972], "temperature": 0.0, "avg_logprob": -0.16971784071488813, "compression_ratio": 1.85, "no_speech_prob": 1.0783030120364856e-05}, {"id": 409, "seek": 165624, "start": 1656.24, "end": 1662.36, "text": " them by some learning rate which we will then subtract off the parameters to get our new", "tokens": [552, 538, 512, 2539, 3314, 597, 321, 486, 550, 16390, 766, 264, 9834, 281, 483, 527, 777], "temperature": 0.0, "avg_logprob": -0.09091734886169434, "compression_ratio": 1.9551569506726458, "no_speech_prob": 3.7852471450605663e-06}, {"id": 410, "seek": 165624, "start": 1662.36, "end": 1663.36, "text": " set of parameters.", "tokens": [992, 295, 9834, 13], "temperature": 0.0, "avg_logprob": -0.09091734886169434, "compression_ratio": 1.9551569506726458, "no_speech_prob": 3.7852471450605663e-06}, {"id": 411, "seek": 165624, "start": 1663.36, "end": 1666.32, "text": " And we'll repeat that lots of times.", "tokens": [400, 321, 603, 7149, 300, 3195, 295, 1413, 13], "temperature": 0.0, "avg_logprob": -0.09091734886169434, "compression_ratio": 1.9551569506726458, "no_speech_prob": 3.7852471450605663e-06}, {"id": 412, "seek": 165624, "start": 1666.32, "end": 1671.72, "text": " So to get to our fully connected backward pass we will need to first of all have the", "tokens": [407, 281, 483, 281, 527, 4498, 4582, 23897, 1320, 321, 486, 643, 281, 700, 295, 439, 362, 264], "temperature": 0.0, "avg_logprob": -0.09091734886169434, "compression_ratio": 1.9551569506726458, "no_speech_prob": 3.7852471450605663e-06}, {"id": 413, "seek": 165624, "start": 1671.72, "end": 1673.6, "text": " fully connected forward pass.", "tokens": [4498, 4582, 2128, 1320, 13], "temperature": 0.0, "avg_logprob": -0.09091734886169434, "compression_ratio": 1.9551569506726458, "no_speech_prob": 3.7852471450605663e-06}, {"id": 414, "seek": 165624, "start": 1673.6, "end": 1678.5, "text": " And the fully connected forward pass means we will need to have some initialized parameters", "tokens": [400, 264, 4498, 4582, 2128, 1320, 1355, 321, 486, 643, 281, 362, 512, 5883, 1602, 9834], "temperature": 0.0, "avg_logprob": -0.09091734886169434, "compression_ratio": 1.9551569506726458, "no_speech_prob": 3.7852471450605663e-06}, {"id": 415, "seek": 165624, "start": 1678.5, "end": 1684.7, "text": " and we'll need a value and we will also need to be able to do matrix multiplication.", "tokens": [293, 321, 603, 643, 257, 2158, 293, 321, 486, 611, 643, 281, 312, 1075, 281, 360, 8141, 27290, 13], "temperature": 0.0, "avg_logprob": -0.09091734886169434, "compression_ratio": 1.9551569506726458, "no_speech_prob": 3.7852471450605663e-06}, {"id": 416, "seek": 168470, "start": 1684.7, "end": 1691.46, "text": " So let's start there.", "tokens": [407, 718, 311, 722, 456, 13], "temperature": 0.0, "avg_logprob": -0.14476480850806603, "compression_ratio": 1.3225806451612903, "no_speech_prob": 2.6840632472158177e-06}, {"id": 417, "seek": 168470, "start": 1691.46, "end": 1699.64, "text": " So let's start at 00exports notebook.", "tokens": [407, 718, 311, 722, 412, 7143, 3121, 17845, 21060, 13], "temperature": 0.0, "avg_logprob": -0.14476480850806603, "compression_ratio": 1.3225806451612903, "no_speech_prob": 2.6840632472158177e-06}, {"id": 418, "seek": 168470, "start": 1699.64, "end": 1706.72, "text": " And what I'm showing you here is how I'm going to go about building up our library in Jupyter", "tokens": [400, 437, 286, 478, 4099, 291, 510, 307, 577, 286, 478, 516, 281, 352, 466, 2390, 493, 527, 6405, 294, 22125, 88, 391], "temperature": 0.0, "avg_logprob": -0.14476480850806603, "compression_ratio": 1.3225806451612903, "no_speech_prob": 2.6840632472158177e-06}, {"id": 419, "seek": 168470, "start": 1706.72, "end": 1708.6000000000001, "text": " Notebooks.", "tokens": [11633, 15170, 13], "temperature": 0.0, "avg_logprob": -0.14476480850806603, "compression_ratio": 1.3225806451612903, "no_speech_prob": 2.6840632472158177e-06}, {"id": 420, "seek": 170860, "start": 1708.6, "end": 1716.08, "text": " A lot of very smart people have assured me that it is impossible to do effective library", "tokens": [316, 688, 295, 588, 4069, 561, 362, 23426, 385, 300, 309, 307, 6243, 281, 360, 4942, 6405], "temperature": 0.0, "avg_logprob": -0.11428653800880516, "compression_ratio": 1.6486486486486487, "no_speech_prob": 3.785217359109083e-06}, {"id": 421, "seek": 170860, "start": 1716.08, "end": 1721.76, "text": " development in Jupyter Notebooks which is a shame because I've built a library in Jupyter", "tokens": [3250, 294, 22125, 88, 391, 11633, 15170, 597, 307, 257, 10069, 570, 286, 600, 3094, 257, 6405, 294, 22125, 88, 391], "temperature": 0.0, "avg_logprob": -0.11428653800880516, "compression_ratio": 1.6486486486486487, "no_speech_prob": 3.785217359109083e-06}, {"id": 422, "seek": 170860, "start": 1721.76, "end": 1723.4599999999998, "text": " Notebooks.", "tokens": [11633, 15170, 13], "temperature": 0.0, "avg_logprob": -0.11428653800880516, "compression_ratio": 1.6486486486486487, "no_speech_prob": 3.785217359109083e-06}, {"id": 423, "seek": 170860, "start": 1723.4599999999998, "end": 1727.9599999999998, "text": " So anyway, people will often tell you things are impossible but I will tell you my point", "tokens": [407, 4033, 11, 561, 486, 2049, 980, 291, 721, 366, 6243, 457, 286, 486, 980, 291, 452, 935], "temperature": 0.0, "avg_logprob": -0.11428653800880516, "compression_ratio": 1.6486486486486487, "no_speech_prob": 3.785217359109083e-06}, {"id": 424, "seek": 170860, "start": 1727.9599999999998, "end": 1735.6, "text": " of view which is that I've been programming for over 30 years and at the time I've been", "tokens": [295, 1910, 597, 307, 300, 286, 600, 668, 9410, 337, 670, 2217, 924, 293, 412, 264, 565, 286, 600, 668], "temperature": 0.0, "avg_logprob": -0.11428653800880516, "compression_ratio": 1.6486486486486487, "no_speech_prob": 3.785217359109083e-06}, {"id": 425, "seek": 173560, "start": 1735.6, "end": 1740.1999999999998, "text": " using Jupyter Notebooks to do my development I would guess I'm about two to three times", "tokens": [1228, 22125, 88, 391, 11633, 15170, 281, 360, 452, 3250, 286, 576, 2041, 286, 478, 466, 732, 281, 1045, 1413], "temperature": 0.0, "avg_logprob": -0.0914532312980065, "compression_ratio": 1.645021645021645, "no_speech_prob": 6.853915692772716e-06}, {"id": 426, "seek": 173560, "start": 1740.1999999999998, "end": 1741.1999999999998, "text": " more productive.", "tokens": [544, 13304, 13], "temperature": 0.0, "avg_logprob": -0.0914532312980065, "compression_ratio": 1.645021645021645, "no_speech_prob": 6.853915692772716e-06}, {"id": 427, "seek": 173560, "start": 1741.1999999999998, "end": 1748.6799999999998, "text": " I've built a lot more useful stuff in the last two or three years than I did beforehand.", "tokens": [286, 600, 3094, 257, 688, 544, 4420, 1507, 294, 264, 1036, 732, 420, 1045, 924, 813, 286, 630, 22893, 13], "temperature": 0.0, "avg_logprob": -0.0914532312980065, "compression_ratio": 1.645021645021645, "no_speech_prob": 6.853915692772716e-06}, {"id": 428, "seek": 173560, "start": 1748.6799999999998, "end": 1754.6799999999998, "text": " I'm not saying you have to do things this way either but this is how I develop and hopefully", "tokens": [286, 478, 406, 1566, 291, 362, 281, 360, 721, 341, 636, 2139, 457, 341, 307, 577, 286, 1499, 293, 4696], "temperature": 0.0, "avg_logprob": -0.0914532312980065, "compression_ratio": 1.645021645021645, "no_speech_prob": 6.853915692772716e-06}, {"id": 429, "seek": 173560, "start": 1754.6799999999998, "end": 1756.8799999999999, "text": " you find some of this useful as well.", "tokens": [291, 915, 512, 295, 341, 4420, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.0914532312980065, "compression_ratio": 1.645021645021645, "no_speech_prob": 6.853915692772716e-06}, {"id": 430, "seek": 173560, "start": 1756.8799999999999, "end": 1760.8999999999999, "text": " So I'll show you how.", "tokens": [407, 286, 603, 855, 291, 577, 13], "temperature": 0.0, "avg_logprob": -0.0914532312980065, "compression_ratio": 1.645021645021645, "no_speech_prob": 6.853915692772716e-06}, {"id": 431, "seek": 173560, "start": 1760.8999999999999, "end": 1762.4399999999998, "text": " We need to do a couple of things.", "tokens": [492, 643, 281, 360, 257, 1916, 295, 721, 13], "temperature": 0.0, "avg_logprob": -0.0914532312980065, "compression_ratio": 1.645021645021645, "no_speech_prob": 6.853915692772716e-06}, {"id": 432, "seek": 176244, "start": 1762.44, "end": 1766.56, "text": " We can't just create one giant notebook with our whole library.", "tokens": [492, 393, 380, 445, 1884, 472, 7410, 21060, 365, 527, 1379, 6405, 13], "temperature": 0.0, "avg_logprob": -0.09905203703407929, "compression_ratio": 1.7148936170212765, "no_speech_prob": 6.540166850754758e-06}, {"id": 433, "seek": 176244, "start": 1766.56, "end": 1771.24, "text": " Somehow we have to be able to pull out those little gems, those bits of code where we think", "tokens": [28357, 321, 362, 281, 312, 1075, 281, 2235, 484, 729, 707, 29296, 11, 729, 9239, 295, 3089, 689, 321, 519], "temperature": 0.0, "avg_logprob": -0.09905203703407929, "compression_ratio": 1.7148936170212765, "no_speech_prob": 6.540166850754758e-06}, {"id": 434, "seek": 176244, "start": 1771.24, "end": 1773.2, "text": " oh this is good, let's keep this.", "tokens": [1954, 341, 307, 665, 11, 718, 311, 1066, 341, 13], "temperature": 0.0, "avg_logprob": -0.09905203703407929, "compression_ratio": 1.7148936170212765, "no_speech_prob": 6.540166850754758e-06}, {"id": 435, "seek": 176244, "start": 1773.2, "end": 1777.56, "text": " We have to be able to pull that out into a package that we reuse.", "tokens": [492, 362, 281, 312, 1075, 281, 2235, 300, 484, 666, 257, 7372, 300, 321, 26225, 13], "temperature": 0.0, "avg_logprob": -0.09905203703407929, "compression_ratio": 1.7148936170212765, "no_speech_prob": 6.540166850754758e-06}, {"id": 436, "seek": 176244, "start": 1777.56, "end": 1784.48, "text": " So in order to tell our system that here is a cell that I want you to keep and reuse I", "tokens": [407, 294, 1668, 281, 980, 527, 1185, 300, 510, 307, 257, 2815, 300, 286, 528, 291, 281, 1066, 293, 26225, 286], "temperature": 0.0, "avg_logprob": -0.09905203703407929, "compression_ratio": 1.7148936170212765, "no_speech_prob": 6.540166850754758e-06}, {"id": 437, "seek": 176244, "start": 1784.48, "end": 1790.24, "text": " use this special comment hash export at the top of the cell.", "tokens": [764, 341, 2121, 2871, 22019, 10725, 412, 264, 1192, 295, 264, 2815, 13], "temperature": 0.0, "avg_logprob": -0.09905203703407929, "compression_ratio": 1.7148936170212765, "no_speech_prob": 6.540166850754758e-06}, {"id": 438, "seek": 179024, "start": 1790.24, "end": 1796.84, "text": " And then I have a program called notebook to script which goes through the notebook", "tokens": [400, 550, 286, 362, 257, 1461, 1219, 21060, 281, 5755, 597, 1709, 807, 264, 21060], "temperature": 0.0, "avg_logprob": -0.14883003234863282, "compression_ratio": 1.4739884393063585, "no_speech_prob": 3.1874558317213086e-06}, {"id": 439, "seek": 179024, "start": 1796.84, "end": 1802.56, "text": " and finds those cells and puts them into a Python module.", "tokens": [293, 10704, 729, 5438, 293, 8137, 552, 666, 257, 15329, 10088, 13], "temperature": 0.0, "avg_logprob": -0.14883003234863282, "compression_ratio": 1.4739884393063585, "no_speech_prob": 3.1874558317213086e-06}, {"id": 440, "seek": 179024, "start": 1802.56, "end": 1803.68, "text": " So let me show you.", "tokens": [407, 718, 385, 855, 291, 13], "temperature": 0.0, "avg_logprob": -0.14883003234863282, "compression_ratio": 1.4739884393063585, "no_speech_prob": 3.1874558317213086e-06}, {"id": 441, "seek": 179024, "start": 1803.68, "end": 1815.4, "text": " So if I run this cell and then I head over and notice I don't have to type all of o-o-exports", "tokens": [407, 498, 286, 1190, 341, 2815, 293, 550, 286, 1378, 670, 293, 3449, 286, 500, 380, 362, 281, 2010, 439, 295, 277, 12, 78, 12, 3121, 17845], "temperature": 0.0, "avg_logprob": -0.14883003234863282, "compression_ratio": 1.4739884393063585, "no_speech_prob": 3.1874558317213086e-06}, {"id": 442, "seek": 181540, "start": 1815.4, "end": 1822.0800000000002, "text": " because I have tab completion even for file names in Jupyter Notebook so o-o-tab is enough", "tokens": [570, 286, 362, 4421, 19372, 754, 337, 3991, 5288, 294, 22125, 88, 391, 11633, 2939, 370, 277, 12, 78, 12, 83, 455, 307, 1547], "temperature": 0.0, "avg_logprob": -0.1815743790459387, "compression_ratio": 1.5235849056603774, "no_speech_prob": 6.143692644400289e-06}, {"id": 443, "seek": 181540, "start": 1822.0800000000002, "end": 1828.52, "text": " and I could either run this here or I could go back to my console and run it.", "tokens": [293, 286, 727, 2139, 1190, 341, 510, 420, 286, 727, 352, 646, 281, 452, 11076, 293, 1190, 309, 13], "temperature": 0.0, "avg_logprob": -0.1815743790459387, "compression_ratio": 1.5235849056603774, "no_speech_prob": 6.143692644400289e-06}, {"id": 444, "seek": 181540, "start": 1828.52, "end": 1831.3200000000002, "text": " So let's run it here.", "tokens": [407, 718, 311, 1190, 309, 510, 13], "temperature": 0.0, "avg_logprob": -0.1815743790459387, "compression_ratio": 1.5235849056603774, "no_speech_prob": 6.143692644400289e-06}, {"id": 445, "seek": 181540, "start": 1831.3200000000002, "end": 1836.64, "text": " So that says converted exports.ipnb to nb-00.", "tokens": [407, 300, 1619, 16424, 31428, 13, 647, 77, 65, 281, 297, 65, 12, 628, 13], "temperature": 0.0, "avg_logprob": -0.1815743790459387, "compression_ratio": 1.5235849056603774, "no_speech_prob": 6.143692644400289e-06}, {"id": 446, "seek": 181540, "start": 1836.64, "end": 1841.0400000000002, "text": " And what I've done is I've made it so that these things go into a directory called exp", "tokens": [400, 437, 286, 600, 1096, 307, 286, 600, 1027, 309, 370, 300, 613, 721, 352, 666, 257, 21120, 1219, 1278], "temperature": 0.0, "avg_logprob": -0.1815743790459387, "compression_ratio": 1.5235849056603774, "no_speech_prob": 6.143692644400289e-06}, {"id": 447, "seek": 184104, "start": 1841.04, "end": 1847.12, "text": " for exported modules and here is that nb-00 and there it is.", "tokens": [337, 42055, 16679, 293, 510, 307, 300, 297, 65, 12, 628, 293, 456, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.14093786062196242, "compression_ratio": 1.6740331491712708, "no_speech_prob": 2.1233583993307548e-06}, {"id": 448, "seek": 184104, "start": 1847.12, "end": 1852.28, "text": " So you can see other than a standard header it's got the contents of that one cell.", "tokens": [407, 291, 393, 536, 661, 813, 257, 3832, 23117, 309, 311, 658, 264, 15768, 295, 300, 472, 2815, 13], "temperature": 0.0, "avg_logprob": -0.14093786062196242, "compression_ratio": 1.6740331491712708, "no_speech_prob": 2.1233583993307548e-06}, {"id": 449, "seek": 184104, "start": 1852.28, "end": 1861.68, "text": " So now I can import that at the top of my next notebook from exp nb-00 import star and", "tokens": [407, 586, 286, 393, 974, 300, 412, 264, 1192, 295, 452, 958, 21060, 490, 1278, 297, 65, 12, 628, 974, 3543, 293], "temperature": 0.0, "avg_logprob": -0.14093786062196242, "compression_ratio": 1.6740331491712708, "no_speech_prob": 2.1233583993307548e-06}, {"id": 450, "seek": 184104, "start": 1861.68, "end": 1868.0, "text": " I can create a test that that variable equals that value.", "tokens": [286, 393, 1884, 257, 1500, 300, 300, 7006, 6915, 300, 2158, 13], "temperature": 0.0, "avg_logprob": -0.14093786062196242, "compression_ratio": 1.6740331491712708, "no_speech_prob": 2.1233583993307548e-06}, {"id": 451, "seek": 184104, "start": 1868.0, "end": 1870.96, "text": " So let's see.", "tokens": [407, 718, 311, 536, 13], "temperature": 0.0, "avg_logprob": -0.14093786062196242, "compression_ratio": 1.6740331491712708, "no_speech_prob": 2.1233583993307548e-06}, {"id": 452, "seek": 187096, "start": 1870.96, "end": 1872.32, "text": " It does.", "tokens": [467, 775, 13], "temperature": 0.0, "avg_logprob": -0.11124833424886067, "compression_ratio": 1.7625570776255708, "no_speech_prob": 1.952530692506116e-05}, {"id": 453, "seek": 187096, "start": 1872.32, "end": 1878.52, "text": " And notice there's a lot of test frameworks around but it's not always helpful to use", "tokens": [400, 3449, 456, 311, 257, 688, 295, 1500, 29834, 926, 457, 309, 311, 406, 1009, 4961, 281, 764], "temperature": 0.0, "avg_logprob": -0.11124833424886067, "compression_ratio": 1.7625570776255708, "no_speech_prob": 1.952530692506116e-05}, {"id": 454, "seek": 187096, "start": 1878.52, "end": 1879.52, "text": " them.", "tokens": [552, 13], "temperature": 0.0, "avg_logprob": -0.11124833424886067, "compression_ratio": 1.7625570776255708, "no_speech_prob": 1.952530692506116e-05}, {"id": 455, "seek": 187096, "start": 1879.52, "end": 1883.96, "text": " Like here we've created a test framework or the start of one.", "tokens": [1743, 510, 321, 600, 2942, 257, 1500, 8388, 420, 264, 722, 295, 472, 13], "temperature": 0.0, "avg_logprob": -0.11124833424886067, "compression_ratio": 1.7625570776255708, "no_speech_prob": 1.952530692506116e-05}, {"id": 456, "seek": 187096, "start": 1883.96, "end": 1889.64, "text": " I've created a function called test which checks whether a and b return true or false", "tokens": [286, 600, 2942, 257, 2445, 1219, 1500, 597, 13834, 1968, 257, 293, 272, 2736, 2074, 420, 7908], "temperature": 0.0, "avg_logprob": -0.11124833424886067, "compression_ratio": 1.7625570776255708, "no_speech_prob": 1.952530692506116e-05}, {"id": 457, "seek": 187096, "start": 1889.64, "end": 1894.54, "text": " based on this comparison function by using assert.", "tokens": [2361, 322, 341, 9660, 2445, 538, 1228, 19810, 13], "temperature": 0.0, "avg_logprob": -0.11124833424886067, "compression_ratio": 1.7625570776255708, "no_speech_prob": 1.952530692506116e-05}, {"id": 458, "seek": 187096, "start": 1894.54, "end": 1899.76, "text": " And then I've created something called test equals which calls test passing in a and b", "tokens": [400, 550, 286, 600, 2942, 746, 1219, 1500, 6915, 597, 5498, 1500, 8437, 294, 257, 293, 272], "temperature": 0.0, "avg_logprob": -0.11124833424886067, "compression_ratio": 1.7625570776255708, "no_speech_prob": 1.952530692506116e-05}, {"id": 459, "seek": 189976, "start": 1899.76, "end": 1902.72, "text": " and operator.equals.", "tokens": [293, 12973, 13, 12816, 1124, 13], "temperature": 0.0, "avg_logprob": -0.14383165995279948, "compression_ratio": 1.5128205128205128, "no_speech_prob": 4.356810222816421e-06}, {"id": 460, "seek": 189976, "start": 1902.72, "end": 1911.2, "text": " So if they're wrong assertion error equals test, test one.", "tokens": [407, 498, 436, 434, 2085, 19810, 313, 6713, 6915, 1500, 11, 1500, 472, 13], "temperature": 0.0, "avg_logprob": -0.14383165995279948, "compression_ratio": 1.5128205128205128, "no_speech_prob": 4.356810222816421e-06}, {"id": 461, "seek": 189976, "start": 1911.2, "end": 1916.36, "text": " So we've been able to write a test which so far has basically tested that our little module", "tokens": [407, 321, 600, 668, 1075, 281, 2464, 257, 1500, 597, 370, 1400, 575, 1936, 8246, 300, 527, 707, 10088], "temperature": 0.0, "avg_logprob": -0.14383165995279948, "compression_ratio": 1.5128205128205128, "no_speech_prob": 4.356810222816421e-06}, {"id": 462, "seek": 189976, "start": 1916.36, "end": 1920.64, "text": " exporter thing works correctly.", "tokens": [1278, 6122, 551, 1985, 8944, 13], "temperature": 0.0, "avg_logprob": -0.14383165995279948, "compression_ratio": 1.5128205128205128, "no_speech_prob": 4.356810222816421e-06}, {"id": 463, "seek": 189976, "start": 1920.64, "end": 1925.64, "text": " We probably want to be able to run these tests somewhere other than just inside a notebook.", "tokens": [492, 1391, 528, 281, 312, 1075, 281, 1190, 613, 6921, 4079, 661, 813, 445, 1854, 257, 21060, 13], "temperature": 0.0, "avg_logprob": -0.14383165995279948, "compression_ratio": 1.5128205128205128, "no_speech_prob": 4.356810222816421e-06}, {"id": 464, "seek": 192564, "start": 1925.64, "end": 1930.4, "text": " So we have a little program called run notebook.py.", "tokens": [407, 321, 362, 257, 707, 1461, 1219, 1190, 21060, 13, 8200, 13], "temperature": 0.0, "avg_logprob": -0.155854860941569, "compression_ratio": 1.6666666666666667, "no_speech_prob": 4.565883500617929e-06}, {"id": 465, "seek": 192564, "start": 1930.4, "end": 1937.0, "text": " You pass it the name of a notebook and it runs it.", "tokens": [509, 1320, 309, 264, 1315, 295, 257, 21060, 293, 309, 6676, 309, 13], "temperature": 0.0, "avg_logprob": -0.155854860941569, "compression_ratio": 1.6666666666666667, "no_speech_prob": 4.565883500617929e-06}, {"id": 466, "seek": 192564, "start": 1937.0, "end": 1944.68, "text": " So I should save this one with our failing test so you can see it fail.", "tokens": [407, 286, 820, 3155, 341, 472, 365, 527, 18223, 1500, 370, 291, 393, 536, 309, 3061, 13], "temperature": 0.0, "avg_logprob": -0.155854860941569, "compression_ratio": 1.6666666666666667, "no_speech_prob": 4.565883500617929e-06}, {"id": 467, "seek": 192564, "start": 1944.68, "end": 1948.0400000000002, "text": " So first time it passed and then I make the failing test and you can see here it is assertion", "tokens": [407, 700, 565, 309, 4678, 293, 550, 286, 652, 264, 18223, 1500, 293, 291, 393, 536, 510, 309, 307, 19810, 313], "temperature": 0.0, "avg_logprob": -0.155854860941569, "compression_ratio": 1.6666666666666667, "no_speech_prob": 4.565883500617929e-06}, {"id": 468, "seek": 192564, "start": 1948.0400000000002, "end": 1951.8400000000001, "text": " error and tells you exactly where it happened.", "tokens": [6713, 293, 5112, 291, 2293, 689, 309, 2011, 13], "temperature": 0.0, "avg_logprob": -0.155854860941569, "compression_ratio": 1.6666666666666667, "no_speech_prob": 4.565883500617929e-06}, {"id": 469, "seek": 195184, "start": 1951.84, "end": 1961.32, "text": " So we now have an automatable unit testing framework in our Jupyter notebook.", "tokens": [407, 321, 586, 362, 364, 28034, 712, 4985, 4997, 8388, 294, 527, 22125, 88, 391, 21060, 13], "temperature": 0.0, "avg_logprob": -0.13392038345336915, "compression_ratio": 1.4922279792746114, "no_speech_prob": 2.9479258500941796e-06}, {"id": 470, "seek": 195184, "start": 1961.32, "end": 1971.9399999999998, "text": " I'll point out that the contents of these two Python scripts, let's look at them.", "tokens": [286, 603, 935, 484, 300, 264, 15768, 295, 613, 732, 15329, 23294, 11, 718, 311, 574, 412, 552, 13], "temperature": 0.0, "avg_logprob": -0.13392038345336915, "compression_ratio": 1.4922279792746114, "no_speech_prob": 2.9479258500941796e-06}, {"id": 471, "seek": 195184, "start": 1971.9399999999998, "end": 1976.28, "text": " So the first one was run notebook.py which is our test runner.", "tokens": [407, 264, 700, 472, 390, 1190, 21060, 13, 8200, 597, 307, 527, 1500, 24376, 13], "temperature": 0.0, "avg_logprob": -0.13392038345336915, "compression_ratio": 1.4922279792746114, "no_speech_prob": 2.9479258500941796e-06}, {"id": 472, "seek": 195184, "start": 1976.28, "end": 1978.3799999999999, "text": " There is the entirety of it.", "tokens": [821, 307, 264, 31557, 295, 309, 13], "temperature": 0.0, "avg_logprob": -0.13392038345336915, "compression_ratio": 1.4922279792746114, "no_speech_prob": 2.9479258500941796e-06}, {"id": 473, "seek": 195184, "start": 1978.3799999999999, "end": 1980.8, "text": " So there's a thing called nb format.", "tokens": [407, 456, 311, 257, 551, 1219, 297, 65, 7877, 13], "temperature": 0.0, "avg_logprob": -0.13392038345336915, "compression_ratio": 1.4922279792746114, "no_speech_prob": 2.9479258500941796e-06}, {"id": 474, "seek": 198080, "start": 1980.8, "end": 1985.76, "text": " So if you conda install nb format then it basically lets you execute a notebook and", "tokens": [407, 498, 291, 2224, 64, 3625, 297, 65, 7877, 550, 309, 1936, 6653, 291, 14483, 257, 21060, 293], "temperature": 0.0, "avg_logprob": -0.137571195954258, "compression_ratio": 1.7542372881355932, "no_speech_prob": 8.013350452529266e-06}, {"id": 475, "seek": 198080, "start": 1985.76, "end": 1988.2, "text": " it prints out any errors.", "tokens": [309, 22305, 484, 604, 13603, 13], "temperature": 0.0, "avg_logprob": -0.137571195954258, "compression_ratio": 1.7542372881355932, "no_speech_prob": 8.013350452529266e-06}, {"id": 476, "seek": 198080, "start": 1988.2, "end": 1990.56, "text": " So that's the entirety of that.", "tokens": [407, 300, 311, 264, 31557, 295, 300, 13], "temperature": 0.0, "avg_logprob": -0.137571195954258, "compression_ratio": 1.7542372881355932, "no_speech_prob": 8.013350452529266e-06}, {"id": 477, "seek": 198080, "start": 1990.56, "end": 1995.0, "text": " You'll notice that I'm using a library called fire.", "tokens": [509, 603, 3449, 300, 286, 478, 1228, 257, 6405, 1219, 2610, 13], "temperature": 0.0, "avg_logprob": -0.137571195954258, "compression_ratio": 1.7542372881355932, "no_speech_prob": 8.013350452529266e-06}, {"id": 478, "seek": 198080, "start": 1995.0, "end": 2000.68, "text": " Fire is a really neat library that lets you take any function like this one and automatically", "tokens": [7652, 307, 257, 534, 10654, 6405, 300, 6653, 291, 747, 604, 2445, 411, 341, 472, 293, 6772], "temperature": 0.0, "avg_logprob": -0.137571195954258, "compression_ratio": 1.7542372881355932, "no_speech_prob": 8.013350452529266e-06}, {"id": 479, "seek": 198080, "start": 2000.68, "end": 2004.6, "text": " converts it into a command line interface.", "tokens": [38874, 309, 666, 257, 5622, 1622, 9226, 13], "temperature": 0.0, "avg_logprob": -0.137571195954258, "compression_ratio": 1.7542372881355932, "no_speech_prob": 8.013350452529266e-06}, {"id": 480, "seek": 198080, "start": 2004.6, "end": 2009.0, "text": " So here I've got a function called run notebook and then it says fire run notebook.", "tokens": [407, 510, 286, 600, 658, 257, 2445, 1219, 1190, 21060, 293, 550, 309, 1619, 2610, 1190, 21060, 13], "temperature": 0.0, "avg_logprob": -0.137571195954258, "compression_ratio": 1.7542372881355932, "no_speech_prob": 8.013350452529266e-06}, {"id": 481, "seek": 200900, "start": 2009.0, "end": 2017.6, "text": " So if I now go Python run notebook then it says oh this function received no value, path,", "tokens": [407, 498, 286, 586, 352, 15329, 1190, 21060, 550, 309, 1619, 1954, 341, 2445, 4613, 572, 2158, 11, 3100, 11], "temperature": 0.0, "avg_logprob": -0.17538121541341145, "compression_ratio": 1.6008230452674896, "no_speech_prob": 6.96186089044204e-06}, {"id": 482, "seek": 200900, "start": 2017.6, "end": 2019.96, "text": " usage run notebook, path.", "tokens": [14924, 1190, 21060, 11, 3100, 13], "temperature": 0.0, "avg_logprob": -0.17538121541341145, "compression_ratio": 1.6008230452674896, "no_speech_prob": 6.96186089044204e-06}, {"id": 483, "seek": 200900, "start": 2019.96, "end": 2026.32, "text": " So you can see that what it did was it converted my function into a command line interface.", "tokens": [407, 291, 393, 536, 300, 437, 309, 630, 390, 309, 16424, 452, 2445, 666, 257, 5622, 1622, 9226, 13], "temperature": 0.0, "avg_logprob": -0.17538121541341145, "compression_ratio": 1.6008230452674896, "no_speech_prob": 6.96186089044204e-06}, {"id": 484, "seek": 200900, "start": 2026.32, "end": 2031.6, "text": " It is really great and it handles things like optional arguments and classes and it's super", "tokens": [467, 307, 534, 869, 293, 309, 18722, 721, 411, 17312, 12869, 293, 5359, 293, 309, 311, 1687], "temperature": 0.0, "avg_logprob": -0.17538121541341145, "compression_ratio": 1.6008230452674896, "no_speech_prob": 6.96186089044204e-06}, {"id": 485, "seek": 200900, "start": 2031.6, "end": 2036.48, "text": " useful particularly for this kind of Jupyter first development because you can grab stuff", "tokens": [4420, 4098, 337, 341, 733, 295, 22125, 88, 391, 700, 3250, 570, 291, 393, 4444, 1507], "temperature": 0.0, "avg_logprob": -0.17538121541341145, "compression_ratio": 1.6008230452674896, "no_speech_prob": 6.96186089044204e-06}, {"id": 486, "seek": 203648, "start": 2036.48, "end": 2041.24, "text": " that's in Jupyter and turn it into a script often by just copying and pasting the function", "tokens": [300, 311, 294, 22125, 88, 391, 293, 1261, 309, 666, 257, 5755, 2049, 538, 445, 27976, 293, 1791, 278, 264, 2445], "temperature": 0.0, "avg_logprob": -0.10457966967326839, "compression_ratio": 1.6153846153846154, "no_speech_prob": 8.800345312920399e-06}, {"id": 487, "seek": 203648, "start": 2041.24, "end": 2047.1200000000001, "text": " or exporting it and then just add this one line of code.", "tokens": [420, 44686, 309, 293, 550, 445, 909, 341, 472, 1622, 295, 3089, 13], "temperature": 0.0, "avg_logprob": -0.10457966967326839, "compression_ratio": 1.6153846153846154, "no_speech_prob": 8.800345312920399e-06}, {"id": 488, "seek": 203648, "start": 2047.1200000000001, "end": 2057.88, "text": " The other one, notebook to script, is not much more complicated.", "tokens": [440, 661, 472, 11, 21060, 281, 5755, 11, 307, 406, 709, 544, 6179, 13], "temperature": 0.0, "avg_logprob": -0.10457966967326839, "compression_ratio": 1.6153846153846154, "no_speech_prob": 8.800345312920399e-06}, {"id": 489, "seek": 203648, "start": 2057.88, "end": 2063.52, "text": " It's one screen of code which again the main thing here is to call fire which calls this", "tokens": [467, 311, 472, 2568, 295, 3089, 597, 797, 264, 2135, 551, 510, 307, 281, 818, 2610, 597, 5498, 341], "temperature": 0.0, "avg_logprob": -0.10457966967326839, "compression_ratio": 1.6153846153846154, "no_speech_prob": 8.800345312920399e-06}, {"id": 490, "seek": 203648, "start": 2063.52, "end": 2064.92, "text": " one function.", "tokens": [472, 2445, 13], "temperature": 0.0, "avg_logprob": -0.10457966967326839, "compression_ratio": 1.6153846153846154, "no_speech_prob": 8.800345312920399e-06}, {"id": 491, "seek": 206492, "start": 2064.92, "end": 2069.88, "text": " And you'll see basically it uses JSON.load because notebooks are JSON.", "tokens": [400, 291, 603, 536, 1936, 309, 4960, 31828, 13, 2907, 570, 43782, 366, 31828, 13], "temperature": 0.0, "avg_logprob": -0.11418281806694282, "compression_ratio": 1.6901408450704225, "no_speech_prob": 2.078305078612175e-05}, {"id": 492, "seek": 206492, "start": 2069.88, "end": 2077.32, "text": " The reason I mention this to you is that Jupyter notebook comes with this whole kind of ecosystem", "tokens": [440, 1778, 286, 2152, 341, 281, 291, 307, 300, 22125, 88, 391, 21060, 1487, 365, 341, 1379, 733, 295, 11311], "temperature": 0.0, "avg_logprob": -0.11418281806694282, "compression_ratio": 1.6901408450704225, "no_speech_prob": 2.078305078612175e-05}, {"id": 493, "seek": 206492, "start": 2077.32, "end": 2083.04, "text": " of libraries and APIs and stuff like that and on the whole I hate them.", "tokens": [295, 15148, 293, 21445, 293, 1507, 411, 300, 293, 322, 264, 1379, 286, 4700, 552, 13], "temperature": 0.0, "avg_logprob": -0.11418281806694282, "compression_ratio": 1.6901408450704225, "no_speech_prob": 2.078305078612175e-05}, {"id": 494, "seek": 206492, "start": 2083.04, "end": 2084.84, "text": " I find it's just JSON.", "tokens": [286, 915, 309, 311, 445, 31828, 13], "temperature": 0.0, "avg_logprob": -0.11418281806694282, "compression_ratio": 1.6901408450704225, "no_speech_prob": 2.078305078612175e-05}, {"id": 495, "seek": 206492, "start": 2084.84, "end": 2092.4, "text": " I find that just doing JSON.load is the easiest way and specifically I build my Jupyter notebook", "tokens": [286, 915, 300, 445, 884, 31828, 13, 2907, 307, 264, 12889, 636, 293, 4682, 286, 1322, 452, 22125, 88, 391, 21060], "temperature": 0.0, "avg_logprob": -0.11418281806694282, "compression_ratio": 1.6901408450704225, "no_speech_prob": 2.078305078612175e-05}, {"id": 496, "seek": 209240, "start": 2092.4, "end": 2095.0, "text": " infrastructure inside Jupyter notebooks.", "tokens": [6896, 1854, 22125, 88, 391, 43782, 13], "temperature": 0.0, "avg_logprob": -0.13896502217938822, "compression_ratio": 1.6, "no_speech_prob": 1.0782916433527134e-05}, {"id": 497, "seek": 209240, "start": 2095.0, "end": 2096.96, "text": " So here's how it looks.", "tokens": [407, 510, 311, 577, 309, 1542, 13], "temperature": 0.0, "avg_logprob": -0.13896502217938822, "compression_ratio": 1.6, "no_speech_prob": 1.0782916433527134e-05}, {"id": 498, "seek": 209240, "start": 2096.96, "end": 2107.44, "text": " Import JSON, JSON.load, this file and it gives you an array and there's the contents of source,", "tokens": [26391, 31828, 11, 31828, 13, 2907, 11, 341, 3991, 293, 309, 2709, 291, 364, 10225, 293, 456, 311, 264, 15768, 295, 4009, 11], "temperature": 0.0, "avg_logprob": -0.13896502217938822, "compression_ratio": 1.6, "no_speech_prob": 1.0782916433527134e-05}, {"id": 499, "seek": 209240, "start": 2107.44, "end": 2108.88, "text": " my first row.", "tokens": [452, 700, 5386, 13], "temperature": 0.0, "avg_logprob": -0.13896502217938822, "compression_ratio": 1.6, "no_speech_prob": 1.0782916433527134e-05}, {"id": 500, "seek": 209240, "start": 2108.88, "end": 2113.56, "text": " So if you do want to play around with doing stuff in Jupyter notebook it's a really great", "tokens": [407, 498, 291, 360, 528, 281, 862, 926, 365, 884, 1507, 294, 22125, 88, 391, 21060, 309, 311, 257, 534, 869], "temperature": 0.0, "avg_logprob": -0.13896502217938822, "compression_ratio": 1.6, "no_speech_prob": 1.0782916433527134e-05}, {"id": 501, "seek": 209240, "start": 2113.56, "end": 2120.08, "text": " environment for kind of automating stuff and running scripts on it and stuff like that.", "tokens": [2823, 337, 733, 295, 3553, 990, 1507, 293, 2614, 23294, 322, 309, 293, 1507, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.13896502217938822, "compression_ratio": 1.6, "no_speech_prob": 1.0782916433527134e-05}, {"id": 502, "seek": 212008, "start": 2120.08, "end": 2123.4, "text": " So there's that.", "tokens": [407, 456, 311, 300, 13], "temperature": 0.0, "avg_logprob": -0.09809721433199368, "compression_ratio": 1.7196969696969697, "no_speech_prob": 8.139256351569202e-06}, {"id": 503, "seek": 212008, "start": 2123.4, "end": 2128.44, "text": " So that's the entire contents of our development infrastructure.", "tokens": [407, 300, 311, 264, 2302, 15768, 295, 527, 3250, 6896, 13], "temperature": 0.0, "avg_logprob": -0.09809721433199368, "compression_ratio": 1.7196969696969697, "no_speech_prob": 8.139256351569202e-06}, {"id": 504, "seek": 212008, "start": 2128.44, "end": 2129.44, "text": " We now have a test.", "tokens": [492, 586, 362, 257, 1500, 13], "temperature": 0.0, "avg_logprob": -0.09809721433199368, "compression_ratio": 1.7196969696969697, "no_speech_prob": 8.139256351569202e-06}, {"id": 505, "seek": 212008, "start": 2129.44, "end": 2130.72, "text": " Let's make it pass again.", "tokens": [961, 311, 652, 309, 1320, 797, 13], "temperature": 0.0, "avg_logprob": -0.09809721433199368, "compression_ratio": 1.7196969696969697, "no_speech_prob": 8.139256351569202e-06}, {"id": 506, "seek": 212008, "start": 2130.72, "end": 2136.7999999999997, "text": " One of the great things about having unit tests in notebooks is that when one does fail", "tokens": [1485, 295, 264, 869, 721, 466, 1419, 4985, 6921, 294, 43782, 307, 300, 562, 472, 775, 3061], "temperature": 0.0, "avg_logprob": -0.09809721433199368, "compression_ratio": 1.7196969696969697, "no_speech_prob": 8.139256351569202e-06}, {"id": 507, "seek": 212008, "start": 2136.7999999999997, "end": 2142.6, "text": " you open up a notebook which can have pros saying this is what this test does, it's implementing", "tokens": [291, 1269, 493, 257, 21060, 597, 393, 362, 6267, 1566, 341, 307, 437, 341, 1500, 775, 11, 309, 311, 18114], "temperature": 0.0, "avg_logprob": -0.09809721433199368, "compression_ratio": 1.7196969696969697, "no_speech_prob": 8.139256351569202e-06}, {"id": 508, "seek": 212008, "start": 2142.6, "end": 2146.52, "text": " this part of this paper, you can see all the stuff above it that's setting up all the context", "tokens": [341, 644, 295, 341, 3035, 11, 291, 393, 536, 439, 264, 1507, 3673, 309, 300, 311, 3287, 493, 439, 264, 4319], "temperature": 0.0, "avg_logprob": -0.09809721433199368, "compression_ratio": 1.7196969696969697, "no_speech_prob": 8.139256351569202e-06}, {"id": 509, "seek": 212008, "start": 2146.52, "end": 2148.7999999999997, "text": " for it, you can check in each input and output.", "tokens": [337, 309, 11, 291, 393, 1520, 294, 1184, 4846, 293, 5598, 13], "temperature": 0.0, "avg_logprob": -0.09809721433199368, "compression_ratio": 1.7196969696969697, "no_speech_prob": 8.139256351569202e-06}, {"id": 510, "seek": 214880, "start": 2148.8, "end": 2154.6800000000003, "text": " So it's a really great way to fix those failing tests because you've got the whole truly literate", "tokens": [407, 309, 311, 257, 534, 869, 636, 281, 3191, 729, 18223, 6921, 570, 291, 600, 658, 264, 1379, 4908, 2733, 473], "temperature": 0.0, "avg_logprob": -0.14825073135233371, "compression_ratio": 1.6926070038910506, "no_speech_prob": 6.961798590054968e-06}, {"id": 511, "seek": 214880, "start": 2154.6800000000003, "end": 2157.76, "text": " programming experience all around it.", "tokens": [9410, 1752, 439, 926, 309, 13], "temperature": 0.0, "avg_logprob": -0.14825073135233371, "compression_ratio": 1.6926070038910506, "no_speech_prob": 6.961798590054968e-06}, {"id": 512, "seek": 214880, "start": 2157.76, "end": 2160.52, "text": " So I think that works great.", "tokens": [407, 286, 519, 300, 1985, 869, 13], "temperature": 0.0, "avg_logprob": -0.14825073135233371, "compression_ratio": 1.6926070038910506, "no_speech_prob": 6.961798590054968e-06}, {"id": 513, "seek": 214880, "start": 2160.52, "end": 2166.5, "text": " So before we start doing matrix multiply we need some matrices to multiply.", "tokens": [407, 949, 321, 722, 884, 8141, 12972, 321, 643, 512, 32284, 281, 12972, 13], "temperature": 0.0, "avg_logprob": -0.14825073135233371, "compression_ratio": 1.6926070038910506, "no_speech_prob": 6.961798590054968e-06}, {"id": 514, "seek": 214880, "start": 2166.5, "end": 2169.44, "text": " So these are some of the things that are allowed by our rules.", "tokens": [407, 613, 366, 512, 295, 264, 721, 300, 366, 4350, 538, 527, 4474, 13], "temperature": 0.0, "avg_logprob": -0.14825073135233371, "compression_ratio": 1.6926070038910506, "no_speech_prob": 6.961798590054968e-06}, {"id": 515, "seek": 214880, "start": 2169.44, "end": 2172.5600000000004, "text": " We've got some stuff that's part of the standard library.", "tokens": [492, 600, 658, 512, 1507, 300, 311, 644, 295, 264, 3832, 6405, 13], "temperature": 0.0, "avg_logprob": -0.14825073135233371, "compression_ratio": 1.6926070038910506, "no_speech_prob": 6.961798590054968e-06}, {"id": 516, "seek": 214880, "start": 2172.5600000000004, "end": 2176.6000000000004, "text": " This is the fast AI datasets library to let us grab the datasets we need.", "tokens": [639, 307, 264, 2370, 7318, 42856, 6405, 281, 718, 505, 4444, 264, 42856, 321, 643, 13], "temperature": 0.0, "avg_logprob": -0.14825073135233371, "compression_ratio": 1.6926070038910506, "no_speech_prob": 6.961798590054968e-06}, {"id": 517, "seek": 217660, "start": 2176.6, "end": 2180.48, "text": " The more standard library stuff, we're only allowed to use this for indexing and array", "tokens": [440, 544, 3832, 6405, 1507, 11, 321, 434, 787, 4350, 281, 764, 341, 337, 8186, 278, 293, 10225], "temperature": 0.0, "avg_logprob": -0.17852435288605867, "compression_ratio": 1.6902654867256637, "no_speech_prob": 1.3006670997128822e-05}, {"id": 518, "seek": 217660, "start": 2180.48, "end": 2182.92, "text": " creation, map plot lib.", "tokens": [8016, 11, 4471, 7542, 22854, 13], "temperature": 0.0, "avg_logprob": -0.17852435288605867, "compression_ratio": 1.6902654867256637, "no_speech_prob": 1.3006670997128822e-05}, {"id": 519, "seek": 217660, "start": 2182.92, "end": 2185.24, "text": " There we go.", "tokens": [821, 321, 352, 13], "temperature": 0.0, "avg_logprob": -0.17852435288605867, "compression_ratio": 1.6902654867256637, "no_speech_prob": 1.3006670997128822e-05}, {"id": 520, "seek": 217660, "start": 2185.24, "end": 2187.58, "text": " So let's grab MNIST.", "tokens": [407, 718, 311, 4444, 376, 45, 19756, 13], "temperature": 0.0, "avg_logprob": -0.17852435288605867, "compression_ratio": 1.6902654867256637, "no_speech_prob": 1.3006670997128822e-05}, {"id": 521, "seek": 217660, "start": 2187.58, "end": 2195.12, "text": " So to grab MNIST we can use fast AI datasets to download it and then we can use the standard", "tokens": [407, 281, 4444, 376, 45, 19756, 321, 393, 764, 2370, 7318, 42856, 281, 5484, 309, 293, 550, 321, 393, 764, 264, 3832], "temperature": 0.0, "avg_logprob": -0.17852435288605867, "compression_ratio": 1.6902654867256637, "no_speech_prob": 1.3006670997128822e-05}, {"id": 522, "seek": 217660, "start": 2195.12, "end": 2200.54, "text": " library gzip to open it and then we can pickle.loaded.", "tokens": [6405, 290, 27268, 281, 1269, 309, 293, 550, 321, 393, 31433, 13, 2907, 292, 13], "temperature": 0.0, "avg_logprob": -0.17852435288605867, "compression_ratio": 1.6902654867256637, "no_speech_prob": 1.3006670997128822e-05}, {"id": 523, "seek": 217660, "start": 2200.54, "end": 2205.8399999999997, "text": " So in Python the kind of standard serialization format is called pickle and so this MNIST", "tokens": [407, 294, 15329, 264, 733, 295, 3832, 17436, 2144, 7877, 307, 1219, 31433, 293, 370, 341, 376, 45, 19756], "temperature": 0.0, "avg_logprob": -0.17852435288605867, "compression_ratio": 1.6902654867256637, "no_speech_prob": 1.3006670997128822e-05}, {"id": 524, "seek": 220584, "start": 2205.84, "end": 2212.1600000000003, "text": " version on deeplearning.net is stored in that format and so it basically gives us a tuple", "tokens": [3037, 322, 2452, 47204, 13, 7129, 307, 12187, 294, 300, 7877, 293, 370, 309, 1936, 2709, 505, 257, 2604, 781], "temperature": 0.0, "avg_logprob": -0.14574079024486053, "compression_ratio": 1.5380434782608696, "no_speech_prob": 2.9766819352516904e-05}, {"id": 525, "seek": 220584, "start": 2212.1600000000003, "end": 2218.8, "text": " of tuples of datasets like so, X train, Y train, X valid, Y valid.", "tokens": [295, 2604, 2622, 295, 42856, 411, 370, 11, 1783, 3847, 11, 398, 3847, 11, 1783, 7363, 11, 398, 7363, 13], "temperature": 0.0, "avg_logprob": -0.14574079024486053, "compression_ratio": 1.5380434782608696, "no_speech_prob": 2.9766819352516904e-05}, {"id": 526, "seek": 220584, "start": 2218.8, "end": 2225.6000000000004, "text": " It actually contains NumPy arrays but NumPy arrays are not allowed in our foundations", "tokens": [467, 767, 8306, 22592, 47, 88, 41011, 457, 22592, 47, 88, 41011, 366, 406, 4350, 294, 527, 22467], "temperature": 0.0, "avg_logprob": -0.14574079024486053, "compression_ratio": 1.5380434782608696, "no_speech_prob": 2.9766819352516904e-05}, {"id": 527, "seek": 220584, "start": 2225.6000000000004, "end": 2228.7200000000003, "text": " so we have to convert them into tensors.", "tokens": [370, 321, 362, 281, 7620, 552, 666, 10688, 830, 13], "temperature": 0.0, "avg_logprob": -0.14574079024486053, "compression_ratio": 1.5380434782608696, "no_speech_prob": 2.9766819352516904e-05}, {"id": 528, "seek": 222872, "start": 2228.72, "end": 2236.6, "text": " So we can just use the Python map to map the tensor function over each of these four arrays", "tokens": [407, 321, 393, 445, 764, 264, 15329, 4471, 281, 4471, 264, 40863, 2445, 670, 1184, 295, 613, 1451, 41011], "temperature": 0.0, "avg_logprob": -0.07423593580108329, "compression_ratio": 1.7233009708737863, "no_speech_prob": 5.421435162134003e-06}, {"id": 529, "seek": 222872, "start": 2236.6, "end": 2239.24, "text": " to get back four tensors.", "tokens": [281, 483, 646, 1451, 10688, 830, 13], "temperature": 0.0, "avg_logprob": -0.07423593580108329, "compression_ratio": 1.7233009708737863, "no_speech_prob": 5.421435162134003e-06}, {"id": 530, "seek": 222872, "start": 2239.24, "end": 2246.64, "text": " A lot of you will be more familiar with NumPy arrays than PyTorch tensors but everything", "tokens": [316, 688, 295, 291, 486, 312, 544, 4963, 365, 22592, 47, 88, 41011, 813, 9953, 51, 284, 339, 10688, 830, 457, 1203], "temperature": 0.0, "avg_logprob": -0.07423593580108329, "compression_ratio": 1.7233009708737863, "no_speech_prob": 5.421435162134003e-06}, {"id": 531, "seek": 222872, "start": 2246.64, "end": 2252.7599999999998, "text": " you can do in NumPy arrays you can also do in PyTorch tensors but you can also do it", "tokens": [291, 393, 360, 294, 22592, 47, 88, 41011, 291, 393, 611, 360, 294, 9953, 51, 284, 339, 10688, 830, 457, 291, 393, 611, 360, 309], "temperature": 0.0, "avg_logprob": -0.07423593580108329, "compression_ratio": 1.7233009708737863, "no_speech_prob": 5.421435162134003e-06}, {"id": 532, "seek": 222872, "start": 2252.7599999999998, "end": 2256.8399999999997, "text": " on the GPU and have all this nice deep learning infrastructure.", "tokens": [322, 264, 18407, 293, 362, 439, 341, 1481, 2452, 2539, 6896, 13], "temperature": 0.0, "avg_logprob": -0.07423593580108329, "compression_ratio": 1.7233009708737863, "no_speech_prob": 5.421435162134003e-06}, {"id": 533, "seek": 225684, "start": 2256.84, "end": 2262.32, "text": " So it's a good idea to get used to using PyTorch tensors in my opinion.", "tokens": [407, 309, 311, 257, 665, 1558, 281, 483, 1143, 281, 1228, 9953, 51, 284, 339, 10688, 830, 294, 452, 4800, 13], "temperature": 0.0, "avg_logprob": -0.11083868874443902, "compression_ratio": 1.4597156398104265, "no_speech_prob": 1.2028990568069275e-05}, {"id": 534, "seek": 225684, "start": 2262.32, "end": 2269.32, "text": " So we can now grab the number of rows and number of columns in the training set and", "tokens": [407, 321, 393, 586, 4444, 264, 1230, 295, 13241, 293, 1230, 295, 13766, 294, 264, 3097, 992, 293], "temperature": 0.0, "avg_logprob": -0.11083868874443902, "compression_ratio": 1.4597156398104265, "no_speech_prob": 1.2028990568069275e-05}, {"id": 535, "seek": 225684, "start": 2269.32, "end": 2271.54, "text": " we can take a look.", "tokens": [321, 393, 747, 257, 574, 13], "temperature": 0.0, "avg_logprob": -0.11083868874443902, "compression_ratio": 1.4597156398104265, "no_speech_prob": 1.2028990568069275e-05}, {"id": 536, "seek": 225684, "start": 2271.54, "end": 2276.32, "text": " So here's MNIST, hopefully pretty familiar to you already.", "tokens": [407, 510, 311, 376, 45, 19756, 11, 4696, 1238, 4963, 281, 291, 1217, 13], "temperature": 0.0, "avg_logprob": -0.11083868874443902, "compression_ratio": 1.4597156398104265, "no_speech_prob": 1.2028990568069275e-05}, {"id": 537, "seek": 225684, "start": 2276.32, "end": 2284.1600000000003, "text": " It's 50,000 rows by 784 columns and the Y data looks something like this.", "tokens": [467, 311, 2625, 11, 1360, 13241, 538, 1614, 25494, 13766, 293, 264, 398, 1412, 1542, 746, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.11083868874443902, "compression_ratio": 1.4597156398104265, "no_speech_prob": 1.2028990568069275e-05}, {"id": 538, "seek": 228416, "start": 2284.16, "end": 2291.2, "text": " The Y shape is just 50,000 rows and the minimum and maximum of the dependent variable is 0", "tokens": [440, 398, 3909, 307, 445, 2625, 11, 1360, 13241, 293, 264, 7285, 293, 6674, 295, 264, 12334, 7006, 307, 1958], "temperature": 0.0, "avg_logprob": -0.11424063701255649, "compression_ratio": 1.5919282511210762, "no_speech_prob": 2.046008921752218e-05}, {"id": 539, "seek": 228416, "start": 2291.2, "end": 2292.2, "text": " to 9.", "tokens": [281, 1722, 13], "temperature": 0.0, "avg_logprob": -0.11424063701255649, "compression_ratio": 1.5919282511210762, "no_speech_prob": 2.046008921752218e-05}, {"id": 540, "seek": 228416, "start": 2292.2, "end": 2294.72, "text": " So hopefully that all looks pretty familiar.", "tokens": [407, 4696, 300, 439, 1542, 1238, 4963, 13], "temperature": 0.0, "avg_logprob": -0.11424063701255649, "compression_ratio": 1.5919282511210762, "no_speech_prob": 2.046008921752218e-05}, {"id": 541, "seek": 228416, "start": 2294.72, "end": 2296.3199999999997, "text": " So let's add some tests.", "tokens": [407, 718, 311, 909, 512, 6921, 13], "temperature": 0.0, "avg_logprob": -0.11424063701255649, "compression_ratio": 1.5919282511210762, "no_speech_prob": 2.046008921752218e-05}, {"id": 542, "seek": 228416, "start": 2296.3199999999997, "end": 2304.96, "text": " So the N should be equal to the shape of the Y, should be equal to 50,000.", "tokens": [407, 264, 426, 820, 312, 2681, 281, 264, 3909, 295, 264, 398, 11, 820, 312, 2681, 281, 2625, 11, 1360, 13], "temperature": 0.0, "avg_logprob": -0.11424063701255649, "compression_ratio": 1.5919282511210762, "no_speech_prob": 2.046008921752218e-05}, {"id": 543, "seek": 228416, "start": 2304.96, "end": 2309.16, "text": " The number of columns should be equal to 28 by 28 because that's how many pixels there", "tokens": [440, 1230, 295, 13766, 820, 312, 2681, 281, 7562, 538, 7562, 570, 300, 311, 577, 867, 18668, 456], "temperature": 0.0, "avg_logprob": -0.11424063701255649, "compression_ratio": 1.5919282511210762, "no_speech_prob": 2.046008921752218e-05}, {"id": 544, "seek": 228416, "start": 2309.16, "end": 2311.3199999999997, "text": " are in MNIST and so forth.", "tokens": [366, 294, 376, 45, 19756, 293, 370, 5220, 13], "temperature": 0.0, "avg_logprob": -0.11424063701255649, "compression_ratio": 1.5919282511210762, "no_speech_prob": 2.046008921752218e-05}, {"id": 545, "seek": 231132, "start": 2311.32, "end": 2318.44, "text": " And we're just using that test equals function that we created just above.", "tokens": [400, 321, 434, 445, 1228, 300, 1500, 6915, 2445, 300, 321, 2942, 445, 3673, 13], "temperature": 0.0, "avg_logprob": -0.16433301384066357, "compression_ratio": 1.4973544973544974, "no_speech_prob": 1.696336221357342e-05}, {"id": 546, "seek": 231132, "start": 2318.44, "end": 2321.56, "text": " So now we can plot it.", "tokens": [407, 586, 321, 393, 7542, 309, 13], "temperature": 0.0, "avg_logprob": -0.16433301384066357, "compression_ratio": 1.4973544973544974, "no_speech_prob": 1.696336221357342e-05}, {"id": 547, "seek": 231132, "start": 2321.56, "end": 2330.0, "text": " So we've got a float tensor and we pass that to imshow after casting it to a 28 by 28.", "tokens": [407, 321, 600, 658, 257, 15706, 40863, 293, 321, 1320, 300, 281, 566, 34436, 934, 17301, 309, 281, 257, 7562, 538, 7562, 13], "temperature": 0.0, "avg_logprob": -0.16433301384066357, "compression_ratio": 1.4973544973544974, "no_speech_prob": 1.696336221357342e-05}, {"id": 548, "seek": 231132, "start": 2330.0, "end": 2331.2000000000003, "text": ".view is really important.", "tokens": [2411, 1759, 307, 534, 1021, 13], "temperature": 0.0, "avg_logprob": -0.16433301384066357, "compression_ratio": 1.4973544973544974, "no_speech_prob": 1.696336221357342e-05}, {"id": 549, "seek": 231132, "start": 2331.2000000000003, "end": 2334.44, "text": " I think we saw it a few times in part one but get very familiar with it.", "tokens": [286, 519, 321, 1866, 309, 257, 1326, 1413, 294, 644, 472, 457, 483, 588, 4963, 365, 309, 13], "temperature": 0.0, "avg_logprob": -0.16433301384066357, "compression_ratio": 1.4973544973544974, "no_speech_prob": 1.696336221357342e-05}, {"id": 550, "seek": 233444, "start": 2334.44, "end": 2342.96, "text": " This is how we reshape our 768 long vector into a 28 by 28 matrix that's suitable for", "tokens": [639, 307, 577, 321, 725, 42406, 527, 24733, 23, 938, 8062, 666, 257, 7562, 538, 7562, 8141, 300, 311, 12873, 337], "temperature": 0.0, "avg_logprob": -0.11720748569654382, "compression_ratio": 1.4175824175824177, "no_speech_prob": 2.0904114990116796e-06}, {"id": 551, "seek": 233444, "start": 2342.96, "end": 2343.96, "text": " plotting.", "tokens": [41178, 13], "temperature": 0.0, "avg_logprob": -0.11720748569654382, "compression_ratio": 1.4175824175824177, "no_speech_prob": 2.0904114990116796e-06}, {"id": 552, "seek": 233444, "start": 2343.96, "end": 2353.96, "text": " Okay, so there's our data and let's start by creating a simple linear model.", "tokens": [1033, 11, 370, 456, 311, 527, 1412, 293, 718, 311, 722, 538, 4084, 257, 2199, 8213, 2316, 13], "temperature": 0.0, "avg_logprob": -0.11720748569654382, "compression_ratio": 1.4175824175824177, "no_speech_prob": 2.0904114990116796e-06}, {"id": 553, "seek": 233444, "start": 2353.96, "end": 2359.56, "text": " So for a linear model, we're going to need to basically have something where Y equals", "tokens": [407, 337, 257, 8213, 2316, 11, 321, 434, 516, 281, 643, 281, 1936, 362, 746, 689, 398, 6915], "temperature": 0.0, "avg_logprob": -0.11720748569654382, "compression_ratio": 1.4175824175824177, "no_speech_prob": 2.0904114990116796e-06}, {"id": 554, "seek": 235956, "start": 2359.56, "end": 2366.48, "text": " AX plus B and so our A will be a bunch of weights.", "tokens": [316, 55, 1804, 363, 293, 370, 527, 316, 486, 312, 257, 3840, 295, 17443, 13], "temperature": 0.0, "avg_logprob": -0.14344915559020224, "compression_ratio": 1.5363128491620113, "no_speech_prob": 2.2471293050330132e-05}, {"id": 555, "seek": 235956, "start": 2366.48, "end": 2374.56, "text": " So it's going to be to be 784 by 10 matrix because we've got 784 coming in and 10 going", "tokens": [407, 309, 311, 516, 281, 312, 281, 312, 1614, 25494, 538, 1266, 8141, 570, 321, 600, 658, 1614, 25494, 1348, 294, 293, 1266, 516], "temperature": 0.0, "avg_logprob": -0.14344915559020224, "compression_ratio": 1.5363128491620113, "no_speech_prob": 2.2471293050330132e-05}, {"id": 556, "seek": 235956, "start": 2374.56, "end": 2375.56, "text": " out.", "tokens": [484, 13], "temperature": 0.0, "avg_logprob": -0.14344915559020224, "compression_ratio": 1.5363128491620113, "no_speech_prob": 2.2471293050330132e-05}, {"id": 557, "seek": 235956, "start": 2375.56, "end": 2380.92, "text": " So that's going to allow us to take in our independent variable and map it to something", "tokens": [407, 300, 311, 516, 281, 2089, 505, 281, 747, 294, 527, 6695, 7006, 293, 4471, 309, 281, 746], "temperature": 0.0, "avg_logprob": -0.14344915559020224, "compression_ratio": 1.5363128491620113, "no_speech_prob": 2.2471293050330132e-05}, {"id": 558, "seek": 235956, "start": 2380.92, "end": 2384.34, "text": " which we compare to our dependent variable.", "tokens": [597, 321, 6794, 281, 527, 12334, 7006, 13], "temperature": 0.0, "avg_logprob": -0.14344915559020224, "compression_ratio": 1.5363128491620113, "no_speech_prob": 2.2471293050330132e-05}, {"id": 559, "seek": 238434, "start": 2384.34, "end": 2389.76, "text": " And then for our bias, we'll just start with 10 zeros.", "tokens": [400, 550, 337, 527, 12577, 11, 321, 603, 445, 722, 365, 1266, 35193, 13], "temperature": 0.0, "avg_logprob": -0.10341373709745186, "compression_ratio": 1.6829268292682926, "no_speech_prob": 4.5658725866815075e-06}, {"id": 560, "seek": 238434, "start": 2389.76, "end": 2396.6000000000004, "text": " So if we're going to do Y equals AX plus B, then we're going to need a matrix multiplication.", "tokens": [407, 498, 321, 434, 516, 281, 360, 398, 6915, 316, 55, 1804, 363, 11, 550, 321, 434, 516, 281, 643, 257, 8141, 27290, 13], "temperature": 0.0, "avg_logprob": -0.10341373709745186, "compression_ratio": 1.6829268292682926, "no_speech_prob": 4.5658725866815075e-06}, {"id": 561, "seek": 238434, "start": 2396.6000000000004, "end": 2404.4, "text": " So almost everything we do in deep learning is basically matrix multiplication or a variant", "tokens": [407, 1920, 1203, 321, 360, 294, 2452, 2539, 307, 1936, 8141, 27290, 420, 257, 17501], "temperature": 0.0, "avg_logprob": -0.10341373709745186, "compression_ratio": 1.6829268292682926, "no_speech_prob": 4.5658725866815075e-06}, {"id": 562, "seek": 238434, "start": 2404.4, "end": 2408.2200000000003, "text": " thereof affine functions as we call them.", "tokens": [456, 2670, 2096, 533, 6828, 382, 321, 818, 552, 13], "temperature": 0.0, "avg_logprob": -0.10341373709745186, "compression_ratio": 1.6829268292682926, "no_speech_prob": 4.5658725866815075e-06}, {"id": 563, "seek": 238434, "start": 2408.2200000000003, "end": 2412.52, "text": " So you want to be very comfortable with matrix multiplication.", "tokens": [407, 291, 528, 281, 312, 588, 4619, 365, 8141, 27290, 13], "temperature": 0.0, "avg_logprob": -0.10341373709745186, "compression_ratio": 1.6829268292682926, "no_speech_prob": 4.5658725866815075e-06}, {"id": 564, "seek": 241252, "start": 2412.52, "end": 2417.84, "text": " So this cool website matrixmultiplication.xyz shows us exactly what happens when we multiply", "tokens": [407, 341, 1627, 3144, 8141, 76, 723, 72, 4770, 399, 13, 12876, 89, 3110, 505, 2293, 437, 2314, 562, 321, 12972], "temperature": 0.0, "avg_logprob": -0.09798280816329152, "compression_ratio": 1.7647058823529411, "no_speech_prob": 9.080295967578422e-06}, {"id": 565, "seek": 241252, "start": 2417.84, "end": 2423.36, "text": " these two matrices.", "tokens": [613, 732, 32284, 13], "temperature": 0.0, "avg_logprob": -0.09798280816329152, "compression_ratio": 1.7647058823529411, "no_speech_prob": 9.080295967578422e-06}, {"id": 566, "seek": 241252, "start": 2423.36, "end": 2429.32, "text": " So we take the first column of the first row and the first row and we multiply each of", "tokens": [407, 321, 747, 264, 700, 7738, 295, 264, 700, 5386, 293, 264, 700, 5386, 293, 321, 12972, 1184, 295], "temperature": 0.0, "avg_logprob": -0.09798280816329152, "compression_ratio": 1.7647058823529411, "no_speech_prob": 9.080295967578422e-06}, {"id": 567, "seek": 241252, "start": 2429.32, "end": 2436.72, "text": " them element-wise and then we add them up and that gives us that one.", "tokens": [552, 4478, 12, 3711, 293, 550, 321, 909, 552, 493, 293, 300, 2709, 505, 300, 472, 13], "temperature": 0.0, "avg_logprob": -0.09798280816329152, "compression_ratio": 1.7647058823529411, "no_speech_prob": 9.080295967578422e-06}, {"id": 568, "seek": 241252, "start": 2436.72, "end": 2441.28, "text": " And now you can see we've got two sets going on at the same time so that gives us two more", "tokens": [400, 586, 291, 393, 536, 321, 600, 658, 732, 6352, 516, 322, 412, 264, 912, 565, 370, 300, 2709, 505, 732, 544], "temperature": 0.0, "avg_logprob": -0.09798280816329152, "compression_ratio": 1.7647058823529411, "no_speech_prob": 9.080295967578422e-06}, {"id": 569, "seek": 244128, "start": 2441.28, "end": 2445.6000000000004, "text": " and then two more and then the final one.", "tokens": [293, 550, 732, 544, 293, 550, 264, 2572, 472, 13], "temperature": 0.0, "avg_logprob": -0.11544504705465065, "compression_ratio": 1.8622448979591837, "no_speech_prob": 2.2252741018746747e-06}, {"id": 570, "seek": 244128, "start": 2445.6000000000004, "end": 2447.8, "text": " And that's our matrix multiplication.", "tokens": [400, 300, 311, 527, 8141, 27290, 13], "temperature": 0.0, "avg_logprob": -0.11544504705465065, "compression_ratio": 1.8622448979591837, "no_speech_prob": 2.2252741018746747e-06}, {"id": 571, "seek": 244128, "start": 2447.8, "end": 2452.0, "text": " So we have to do that.", "tokens": [407, 321, 362, 281, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.11544504705465065, "compression_ratio": 1.8622448979591837, "no_speech_prob": 2.2252741018746747e-06}, {"id": 572, "seek": 244128, "start": 2452.0, "end": 2455.2400000000002, "text": " So we've got a few loops going on.", "tokens": [407, 321, 600, 658, 257, 1326, 16121, 516, 322, 13], "temperature": 0.0, "avg_logprob": -0.11544504705465065, "compression_ratio": 1.8622448979591837, "no_speech_prob": 2.2252741018746747e-06}, {"id": 573, "seek": 244128, "start": 2455.2400000000002, "end": 2459.0, "text": " We've got the loop of this thing scrolling down here.", "tokens": [492, 600, 658, 264, 6367, 295, 341, 551, 29053, 760, 510, 13], "temperature": 0.0, "avg_logprob": -0.11544504705465065, "compression_ratio": 1.8622448979591837, "no_speech_prob": 2.2252741018746747e-06}, {"id": 574, "seek": 244128, "start": 2459.0, "end": 2464.0400000000004, "text": " We've got the loop of these two rows, they're really columns so we flip them around, and", "tokens": [492, 600, 658, 264, 6367, 295, 613, 732, 13241, 11, 436, 434, 534, 13766, 370, 321, 7929, 552, 926, 11, 293], "temperature": 0.0, "avg_logprob": -0.11544504705465065, "compression_ratio": 1.8622448979591837, "no_speech_prob": 2.2252741018746747e-06}, {"id": 575, "seek": 244128, "start": 2464.0400000000004, "end": 2466.96, "text": " then we've got the loop of the multiply and add.", "tokens": [550, 321, 600, 658, 264, 6367, 295, 264, 12972, 293, 909, 13], "temperature": 0.0, "avg_logprob": -0.11544504705465065, "compression_ratio": 1.8622448979591837, "no_speech_prob": 2.2252741018746747e-06}, {"id": 576, "seek": 244128, "start": 2466.96, "end": 2470.7400000000002, "text": " So we're going to need three loops.", "tokens": [407, 321, 434, 516, 281, 643, 1045, 16121, 13], "temperature": 0.0, "avg_logprob": -0.11544504705465065, "compression_ratio": 1.8622448979591837, "no_speech_prob": 2.2252741018746747e-06}, {"id": 577, "seek": 247074, "start": 2470.74, "end": 2473.3999999999996, "text": " And so here's our three loops.", "tokens": [400, 370, 510, 311, 527, 1045, 16121, 13], "temperature": 0.0, "avg_logprob": -0.10650165184684422, "compression_ratio": 1.9943181818181819, "no_speech_prob": 1.5206604984996375e-05}, {"id": 578, "seek": 247074, "start": 2473.3999999999996, "end": 2481.3199999999997, "text": " And notice this is not going to work unless the number of rows here and the number of", "tokens": [400, 3449, 341, 307, 406, 516, 281, 589, 5969, 264, 1230, 295, 13241, 510, 293, 264, 1230, 295], "temperature": 0.0, "avg_logprob": -0.10650165184684422, "compression_ratio": 1.9943181818181819, "no_speech_prob": 1.5206604984996375e-05}, {"id": 579, "seek": 247074, "start": 2481.3199999999997, "end": 2487.0, "text": " columns here, sorry, the number of columns here and the number of rows here are the same.", "tokens": [13766, 510, 11, 2597, 11, 264, 1230, 295, 13766, 510, 293, 264, 1230, 295, 13241, 510, 366, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.10650165184684422, "compression_ratio": 1.9943181818181819, "no_speech_prob": 1.5206604984996375e-05}, {"id": 580, "seek": 247074, "start": 2487.0, "end": 2493.4799999999996, "text": " So let's grab the number of rows and columns of A and the number of rows and columns of", "tokens": [407, 718, 311, 4444, 264, 1230, 295, 13241, 293, 13766, 295, 316, 293, 264, 1230, 295, 13241, 293, 13766, 295], "temperature": 0.0, "avg_logprob": -0.10650165184684422, "compression_ratio": 1.9943181818181819, "no_speech_prob": 1.5206604984996375e-05}, {"id": 581, "seek": 247074, "start": 2493.4799999999996, "end": 2500.18, "text": " B and make sure that AC equals BR, just to double check.", "tokens": [363, 293, 652, 988, 300, 8157, 6915, 10262, 11, 445, 281, 3834, 1520, 13], "temperature": 0.0, "avg_logprob": -0.10650165184684422, "compression_ratio": 1.9943181818181819, "no_speech_prob": 1.5206604984996375e-05}, {"id": 582, "seek": 250018, "start": 2500.18, "end": 2505.0, "text": " And then let's create something of size AR by BC because the size of this is going to", "tokens": [400, 550, 718, 311, 1884, 746, 295, 2744, 8943, 538, 14359, 570, 264, 2744, 295, 341, 307, 516, 281], "temperature": 0.0, "avg_logprob": -0.11446199050316444, "compression_ratio": 1.4307692307692308, "no_speech_prob": 4.565798462863313e-06}, {"id": 583, "seek": 250018, "start": 2505.0, "end": 2514.3599999999997, "text": " be AR by BC with zeros in and then have our three loops.", "tokens": [312, 8943, 538, 14359, 365, 35193, 294, 293, 550, 362, 527, 1045, 16121, 13], "temperature": 0.0, "avg_logprob": -0.11446199050316444, "compression_ratio": 1.4307692307692308, "no_speech_prob": 4.565798462863313e-06}, {"id": 584, "seek": 250018, "start": 2514.3599999999997, "end": 2523.6, "text": " And then right in the middle let's do that.", "tokens": [400, 550, 558, 294, 264, 2808, 718, 311, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.11446199050316444, "compression_ratio": 1.4307692307692308, "no_speech_prob": 4.565798462863313e-06}, {"id": 585, "seek": 252360, "start": 2523.6, "end": 2536.08, "text": " So right in the middle the result in I, J is going to be AIK by BKJ.", "tokens": [407, 558, 294, 264, 2808, 264, 1874, 294, 286, 11, 508, 307, 516, 281, 312, 7318, 42, 538, 363, 42, 41, 13], "temperature": 0.0, "avg_logprob": -0.059752044393055474, "compression_ratio": 1.4938271604938271, "no_speech_prob": 1.1544397011675755e-06}, {"id": 586, "seek": 252360, "start": 2536.08, "end": 2540.8399999999997, "text": " And this is the vast majority of what we're going to be doing in deep learning.", "tokens": [400, 341, 307, 264, 8369, 6286, 295, 437, 321, 434, 516, 281, 312, 884, 294, 2452, 2539, 13], "temperature": 0.0, "avg_logprob": -0.059752044393055474, "compression_ratio": 1.4938271604938271, "no_speech_prob": 1.1544397011675755e-06}, {"id": 587, "seek": 252360, "start": 2540.8399999999997, "end": 2547.06, "text": " So get very, very comfortable with that equation because we're going to be seeing it in three", "tokens": [407, 483, 588, 11, 588, 4619, 365, 300, 5367, 570, 321, 434, 516, 281, 312, 2577, 309, 294, 1045], "temperature": 0.0, "avg_logprob": -0.059752044393055474, "compression_ratio": 1.4938271604938271, "no_speech_prob": 1.1544397011675755e-06}, {"id": 588, "seek": 254706, "start": 2547.06, "end": 2555.7999999999997, "text": " or four different variants of notation and style in the next few minutes.", "tokens": [420, 1451, 819, 21669, 295, 24657, 293, 3758, 294, 264, 958, 1326, 2077, 13], "temperature": 0.0, "avg_logprob": -0.08730414419463187, "compression_ratio": 1.7194570135746607, "no_speech_prob": 7.88917805039091e-06}, {"id": 589, "seek": 254706, "start": 2555.7999999999997, "end": 2558.08, "text": " And it's got kind of a few interesting things going on.", "tokens": [400, 309, 311, 658, 733, 295, 257, 1326, 1880, 721, 516, 322, 13], "temperature": 0.0, "avg_logprob": -0.08730414419463187, "compression_ratio": 1.7194570135746607, "no_speech_prob": 7.88917805039091e-06}, {"id": 590, "seek": 254706, "start": 2558.08, "end": 2561.7599999999998, "text": " This I here appears also over here.", "tokens": [639, 286, 510, 7038, 611, 670, 510, 13], "temperature": 0.0, "avg_logprob": -0.08730414419463187, "compression_ratio": 1.7194570135746607, "no_speech_prob": 7.88917805039091e-06}, {"id": 591, "seek": 254706, "start": 2561.7599999999998, "end": 2565.04, "text": " This J here appears also over here.", "tokens": [639, 508, 510, 7038, 611, 670, 510, 13], "temperature": 0.0, "avg_logprob": -0.08730414419463187, "compression_ratio": 1.7194570135746607, "no_speech_prob": 7.88917805039091e-06}, {"id": 592, "seek": 254706, "start": 2565.04, "end": 2569.92, "text": " And then the K in the loop appears twice.", "tokens": [400, 550, 264, 591, 294, 264, 6367, 7038, 6091, 13], "temperature": 0.0, "avg_logprob": -0.08730414419463187, "compression_ratio": 1.7194570135746607, "no_speech_prob": 7.88917805039091e-06}, {"id": 593, "seek": 254706, "start": 2569.92, "end": 2573.36, "text": " And look, it's got to be the same number in each place because this is the bit where we're", "tokens": [400, 574, 11, 309, 311, 658, 281, 312, 264, 912, 1230, 294, 1184, 1081, 570, 341, 307, 264, 857, 689, 321, 434], "temperature": 0.0, "avg_logprob": -0.08730414419463187, "compression_ratio": 1.7194570135746607, "no_speech_prob": 7.88917805039091e-06}, {"id": 594, "seek": 254706, "start": 2573.36, "end": 2576.68, "text": " multiplying together the element-wise things.", "tokens": [30955, 1214, 264, 4478, 12, 3711, 721, 13], "temperature": 0.0, "avg_logprob": -0.08730414419463187, "compression_ratio": 1.7194570135746607, "no_speech_prob": 7.88917805039091e-06}, {"id": 595, "seek": 257668, "start": 2576.68, "end": 2578.0, "text": " So there it is.", "tokens": [407, 456, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.1635584128919498, "compression_ratio": 1.7447698744769875, "no_speech_prob": 4.264480958227068e-05}, {"id": 596, "seek": 257668, "start": 2578.0, "end": 2580.56, "text": " So let's create a nice small version.", "tokens": [407, 718, 311, 1884, 257, 1481, 1359, 3037, 13], "temperature": 0.0, "avg_logprob": -0.1635584128919498, "compression_ratio": 1.7447698744769875, "no_speech_prob": 4.264480958227068e-05}, {"id": 597, "seek": 257668, "start": 2580.56, "end": 2582.7599999999998, "text": " Grab the first five rows of the validation set.", "tokens": [20357, 264, 700, 1732, 13241, 295, 264, 24071, 992, 13], "temperature": 0.0, "avg_logprob": -0.1635584128919498, "compression_ratio": 1.7447698744769875, "no_speech_prob": 4.264480958227068e-05}, {"id": 598, "seek": 257668, "start": 2582.7599999999998, "end": 2584.0, "text": " We'll call that M1.", "tokens": [492, 603, 818, 300, 376, 16, 13], "temperature": 0.0, "avg_logprob": -0.1635584128919498, "compression_ratio": 1.7447698744769875, "no_speech_prob": 4.264480958227068e-05}, {"id": 599, "seek": 257668, "start": 2584.0, "end": 2585.0, "text": " And grab our weight matrix.", "tokens": [400, 4444, 527, 3364, 8141, 13], "temperature": 0.0, "avg_logprob": -0.1635584128919498, "compression_ratio": 1.7447698744769875, "no_speech_prob": 4.264480958227068e-05}, {"id": 600, "seek": 257668, "start": 2585.0, "end": 2588.0, "text": " We'll call that M2.", "tokens": [492, 603, 818, 300, 376, 17, 13], "temperature": 0.0, "avg_logprob": -0.1635584128919498, "compression_ratio": 1.7447698744769875, "no_speech_prob": 4.264480958227068e-05}, {"id": 601, "seek": 257668, "start": 2588.0, "end": 2589.0, "text": " Grab our weight matrix.", "tokens": [20357, 527, 3364, 8141, 13], "temperature": 0.0, "avg_logprob": -0.1635584128919498, "compression_ratio": 1.7447698744769875, "no_speech_prob": 4.264480958227068e-05}, {"id": 602, "seek": 257668, "start": 2589.0, "end": 2590.6, "text": " Call that M2.", "tokens": [7807, 300, 376, 17, 13], "temperature": 0.0, "avg_logprob": -0.1635584128919498, "compression_ratio": 1.7447698744769875, "no_speech_prob": 4.264480958227068e-05}, {"id": 603, "seek": 257668, "start": 2590.6, "end": 2595.44, "text": " And then is this sizes five because we just grabbed the first five rows.", "tokens": [400, 550, 307, 341, 11602, 1732, 570, 321, 445, 18607, 264, 700, 1732, 13241, 13], "temperature": 0.0, "avg_logprob": -0.1635584128919498, "compression_ratio": 1.7447698744769875, "no_speech_prob": 4.264480958227068e-05}, {"id": 604, "seek": 257668, "start": 2595.44, "end": 2600.3199999999997, "text": " Five by 784, okay, multiplied by 784 by 10.", "tokens": [9436, 538, 1614, 25494, 11, 1392, 11, 17207, 538, 1614, 25494, 538, 1266, 13], "temperature": 0.0, "avg_logprob": -0.1635584128919498, "compression_ratio": 1.7447698744769875, "no_speech_prob": 4.264480958227068e-05}, {"id": 605, "seek": 257668, "start": 2600.3199999999997, "end": 2603.24, "text": " So these match as they should.", "tokens": [407, 613, 2995, 382, 436, 820, 13], "temperature": 0.0, "avg_logprob": -0.1635584128919498, "compression_ratio": 1.7447698744769875, "no_speech_prob": 4.264480958227068e-05}, {"id": 606, "seek": 257668, "start": 2603.24, "end": 2606.56, "text": " And so now we can go ahead and do that matrix multiplication.", "tokens": [400, 370, 586, 321, 393, 352, 2286, 293, 360, 300, 8141, 27290, 13], "temperature": 0.0, "avg_logprob": -0.1635584128919498, "compression_ratio": 1.7447698744769875, "no_speech_prob": 4.264480958227068e-05}, {"id": 607, "seek": 260656, "start": 2606.56, "end": 2607.56, "text": " And it's done.", "tokens": [400, 309, 311, 1096, 13], "temperature": 0.0, "avg_logprob": -0.22913570194453983, "compression_ratio": 1.5714285714285714, "no_speech_prob": 2.3186750695458613e-05}, {"id": 608, "seek": 260656, "start": 2607.56, "end": 2608.56, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.22913570194453983, "compression_ratio": 1.5714285714285714, "no_speech_prob": 2.3186750695458613e-05}, {"id": 609, "seek": 260656, "start": 2608.56, "end": 2620.96, "text": " And it's given us 50,000, sorry, length of, sorry, it's given us T1.shape, as you would", "tokens": [400, 309, 311, 2212, 505, 2625, 11, 1360, 11, 2597, 11, 4641, 295, 11, 2597, 11, 309, 311, 2212, 505, 314, 16, 13, 82, 42406, 11, 382, 291, 576], "temperature": 0.0, "avg_logprob": -0.22913570194453983, "compression_ratio": 1.5714285714285714, "no_speech_prob": 2.3186750695458613e-05}, {"id": 610, "seek": 260656, "start": 2620.96, "end": 2626.48, "text": " expect, a five rows by 10 column output.", "tokens": [2066, 11, 257, 1732, 13241, 538, 1266, 7738, 5598, 13], "temperature": 0.0, "avg_logprob": -0.22913570194453983, "compression_ratio": 1.5714285714285714, "no_speech_prob": 2.3186750695458613e-05}, {"id": 611, "seek": 260656, "start": 2626.48, "end": 2628.68, "text": " And it took about a second.", "tokens": [400, 309, 1890, 466, 257, 1150, 13], "temperature": 0.0, "avg_logprob": -0.22913570194453983, "compression_ratio": 1.5714285714285714, "no_speech_prob": 2.3186750695458613e-05}, {"id": 612, "seek": 260656, "start": 2628.68, "end": 2631.52, "text": " So it took about a second for five rows.", "tokens": [407, 309, 1890, 466, 257, 1150, 337, 1732, 13241, 13], "temperature": 0.0, "avg_logprob": -0.22913570194453983, "compression_ratio": 1.5714285714285714, "no_speech_prob": 2.3186750695458613e-05}, {"id": 613, "seek": 260656, "start": 2631.52, "end": 2634.82, "text": " Our data set MNIST is 50,000 rows.", "tokens": [2621, 1412, 992, 376, 45, 19756, 307, 2625, 11, 1360, 13241, 13], "temperature": 0.0, "avg_logprob": -0.22913570194453983, "compression_ratio": 1.5714285714285714, "no_speech_prob": 2.3186750695458613e-05}, {"id": 614, "seek": 263482, "start": 2634.82, "end": 2642.96, "text": " So it's going to take about 50,000 seconds to do a single matrix multiplication in Python.", "tokens": [407, 309, 311, 516, 281, 747, 466, 2625, 11, 1360, 3949, 281, 360, 257, 2167, 8141, 27290, 294, 15329, 13], "temperature": 0.0, "avg_logprob": -0.12579703598879696, "compression_ratio": 1.5369458128078817, "no_speech_prob": 1.0030050816567382e-06}, {"id": 615, "seek": 263482, "start": 2642.96, "end": 2652.6000000000004, "text": " So imagine doing MNIST where every layer for every pass took about 10 hours.", "tokens": [407, 3811, 884, 376, 45, 19756, 689, 633, 4583, 337, 633, 1320, 1890, 466, 1266, 2496, 13], "temperature": 0.0, "avg_logprob": -0.12579703598879696, "compression_ratio": 1.5369458128078817, "no_speech_prob": 1.0030050816567382e-06}, {"id": 616, "seek": 263482, "start": 2652.6000000000004, "end": 2653.6000000000004, "text": " Not going to work.", "tokens": [1726, 516, 281, 589, 13], "temperature": 0.0, "avg_logprob": -0.12579703598879696, "compression_ratio": 1.5369458128078817, "no_speech_prob": 1.0030050816567382e-06}, {"id": 617, "seek": 263482, "start": 2653.6000000000004, "end": 2654.6000000000004, "text": " Right?", "tokens": [1779, 30], "temperature": 0.0, "avg_logprob": -0.12579703598879696, "compression_ratio": 1.5369458128078817, "no_speech_prob": 1.0030050816567382e-06}, {"id": 618, "seek": 263482, "start": 2654.6000000000004, "end": 2657.92, "text": " So that's why we don't really write things in Python.", "tokens": [407, 300, 311, 983, 321, 500, 380, 534, 2464, 721, 294, 15329, 13], "temperature": 0.0, "avg_logprob": -0.12579703598879696, "compression_ratio": 1.5369458128078817, "no_speech_prob": 1.0030050816567382e-06}, {"id": 619, "seek": 263482, "start": 2657.92, "end": 2664.6200000000003, "text": " Like when we say Python is too slow, we don't mean 20% too slow.", "tokens": [1743, 562, 321, 584, 15329, 307, 886, 2964, 11, 321, 500, 380, 914, 945, 4, 886, 2964, 13], "temperature": 0.0, "avg_logprob": -0.12579703598879696, "compression_ratio": 1.5369458128078817, "no_speech_prob": 1.0030050816567382e-06}, {"id": 620, "seek": 266462, "start": 2664.62, "end": 2667.96, "text": " We mean thousands of times too slow.", "tokens": [492, 914, 5383, 295, 1413, 886, 2964, 13], "temperature": 0.0, "avg_logprob": -0.10114412198121521, "compression_ratio": 1.5578947368421052, "no_speech_prob": 3.4464671898604138e-06}, {"id": 621, "seek": 266462, "start": 2667.96, "end": 2673.08, "text": " So let's see if we can speed this up by 50,000 times.", "tokens": [407, 718, 311, 536, 498, 321, 393, 3073, 341, 493, 538, 2625, 11, 1360, 1413, 13], "temperature": 0.0, "avg_logprob": -0.10114412198121521, "compression_ratio": 1.5578947368421052, "no_speech_prob": 3.4464671898604138e-06}, {"id": 622, "seek": 266462, "start": 2673.08, "end": 2676.2799999999997, "text": " Because if we could do that, it might just be fast enough.", "tokens": [1436, 498, 321, 727, 360, 300, 11, 309, 1062, 445, 312, 2370, 1547, 13], "temperature": 0.0, "avg_logprob": -0.10114412198121521, "compression_ratio": 1.5578947368421052, "no_speech_prob": 3.4464671898604138e-06}, {"id": 623, "seek": 266462, "start": 2676.2799999999997, "end": 2681.8399999999997, "text": " So the way we speed things up is we start in the innermost loop and we make each bit", "tokens": [407, 264, 636, 321, 3073, 721, 493, 307, 321, 722, 294, 264, 7714, 966, 555, 6367, 293, 321, 652, 1184, 857], "temperature": 0.0, "avg_logprob": -0.10114412198121521, "compression_ratio": 1.5578947368421052, "no_speech_prob": 3.4464671898604138e-06}, {"id": 624, "seek": 266462, "start": 2681.8399999999997, "end": 2683.8599999999997, "text": " faster.", "tokens": [4663, 13], "temperature": 0.0, "avg_logprob": -0.10114412198121521, "compression_ratio": 1.5578947368421052, "no_speech_prob": 3.4464671898604138e-06}, {"id": 625, "seek": 266462, "start": 2683.8599999999997, "end": 2689.88, "text": " So the way to make Python faster is to remove Python.", "tokens": [407, 264, 636, 281, 652, 15329, 4663, 307, 281, 4159, 15329, 13], "temperature": 0.0, "avg_logprob": -0.10114412198121521, "compression_ratio": 1.5578947368421052, "no_speech_prob": 3.4464671898604138e-06}, {"id": 626, "seek": 268988, "start": 2689.88, "end": 2694.76, "text": " And the way we remove Python is by passing our computation down to something that's written", "tokens": [400, 264, 636, 321, 4159, 15329, 307, 538, 8437, 527, 24903, 760, 281, 746, 300, 311, 3720], "temperature": 0.0, "avg_logprob": -0.10719213582048512, "compression_ratio": 1.6711111111111112, "no_speech_prob": 6.048842806194443e-06}, {"id": 627, "seek": 268988, "start": 2694.76, "end": 2698.52, "text": " in something other than Python, like PyTorch.", "tokens": [294, 746, 661, 813, 15329, 11, 411, 9953, 51, 284, 339, 13], "temperature": 0.0, "avg_logprob": -0.10719213582048512, "compression_ratio": 1.6711111111111112, "no_speech_prob": 6.048842806194443e-06}, {"id": 628, "seek": 268988, "start": 2698.52, "end": 2704.76, "text": " Because PyTorch behind the scenes is using a library called A10.", "tokens": [1436, 9953, 51, 284, 339, 2261, 264, 8026, 307, 1228, 257, 6405, 1219, 316, 3279, 13], "temperature": 0.0, "avg_logprob": -0.10719213582048512, "compression_ratio": 1.6711111111111112, "no_speech_prob": 6.048842806194443e-06}, {"id": 629, "seek": 268988, "start": 2704.76, "end": 2707.5, "text": " And so we want to get this going down to the A10 library.", "tokens": [400, 370, 321, 528, 281, 483, 341, 516, 760, 281, 264, 316, 3279, 6405, 13], "temperature": 0.0, "avg_logprob": -0.10719213582048512, "compression_ratio": 1.6711111111111112, "no_speech_prob": 6.048842806194443e-06}, {"id": 630, "seek": 268988, "start": 2707.5, "end": 2712.7200000000003, "text": " So the way we do that is to take advantage of something called element-wise operations.", "tokens": [407, 264, 636, 321, 360, 300, 307, 281, 747, 5002, 295, 746, 1219, 4478, 12, 3711, 7705, 13], "temperature": 0.0, "avg_logprob": -0.10719213582048512, "compression_ratio": 1.6711111111111112, "no_speech_prob": 6.048842806194443e-06}, {"id": 631, "seek": 268988, "start": 2712.7200000000003, "end": 2714.84, "text": " So you've seen them before.", "tokens": [407, 291, 600, 1612, 552, 949, 13], "temperature": 0.0, "avg_logprob": -0.10719213582048512, "compression_ratio": 1.6711111111111112, "no_speech_prob": 6.048842806194443e-06}, {"id": 632, "seek": 271484, "start": 2714.84, "end": 2723.1200000000003, "text": " For example, if I have two tensors, A and B, both of length 3, I can add them together.", "tokens": [1171, 1365, 11, 498, 286, 362, 732, 10688, 830, 11, 316, 293, 363, 11, 1293, 295, 4641, 805, 11, 286, 393, 909, 552, 1214, 13], "temperature": 0.0, "avg_logprob": -0.08551248908042908, "compression_ratio": 1.6923076923076923, "no_speech_prob": 6.048875093256356e-06}, {"id": 633, "seek": 271484, "start": 2723.1200000000003, "end": 2728.0, "text": " And when I add them together, it simply adds together the corresponding items.", "tokens": [400, 562, 286, 909, 552, 1214, 11, 309, 2935, 10860, 1214, 264, 11760, 4754, 13], "temperature": 0.0, "avg_logprob": -0.08551248908042908, "compression_ratio": 1.6923076923076923, "no_speech_prob": 6.048875093256356e-06}, {"id": 634, "seek": 271484, "start": 2728.0, "end": 2731.4, "text": " So that's called element-wise addition.", "tokens": [407, 300, 311, 1219, 4478, 12, 3711, 4500, 13], "temperature": 0.0, "avg_logprob": -0.08551248908042908, "compression_ratio": 1.6923076923076923, "no_speech_prob": 6.048875093256356e-06}, {"id": 635, "seek": 271484, "start": 2731.4, "end": 2737.38, "text": " Or I could do less than, in which case it's going to do element-wise less than.", "tokens": [1610, 286, 727, 360, 1570, 813, 11, 294, 597, 1389, 309, 311, 516, 281, 360, 4478, 12, 3711, 1570, 813, 13], "temperature": 0.0, "avg_logprob": -0.08551248908042908, "compression_ratio": 1.6923076923076923, "no_speech_prob": 6.048875093256356e-06}, {"id": 636, "seek": 271484, "start": 2737.38, "end": 2742.4, "text": " So what percentage of A is less than the corresponding item of B?", "tokens": [407, 437, 9668, 295, 316, 307, 1570, 813, 264, 11760, 3174, 295, 363, 30], "temperature": 0.0, "avg_logprob": -0.08551248908042908, "compression_ratio": 1.6923076923076923, "no_speech_prob": 6.048875093256356e-06}, {"id": 637, "seek": 274240, "start": 2742.4, "end": 2748.1600000000003, "text": " A less than B dot float dot mean.", "tokens": [316, 1570, 813, 363, 5893, 15706, 5893, 914, 13], "temperature": 0.0, "avg_logprob": -0.13526423772176108, "compression_ratio": 1.4924623115577889, "no_speech_prob": 1.4823513083683793e-06}, {"id": 638, "seek": 274240, "start": 2748.1600000000003, "end": 2753.6800000000003, "text": " We can do element-wise operations on things not just of rank 1, but we could do it on", "tokens": [492, 393, 360, 4478, 12, 3711, 7705, 322, 721, 406, 445, 295, 6181, 502, 11, 457, 321, 727, 360, 309, 322], "temperature": 0.0, "avg_logprob": -0.13526423772176108, "compression_ratio": 1.4924623115577889, "no_speech_prob": 1.4823513083683793e-06}, {"id": 639, "seek": 274240, "start": 2753.6800000000003, "end": 2758.7200000000003, "text": " a rank 2 tensor, also known as a matrix.", "tokens": [257, 6181, 568, 40863, 11, 611, 2570, 382, 257, 8141, 13], "temperature": 0.0, "avg_logprob": -0.13526423772176108, "compression_ratio": 1.4924623115577889, "no_speech_prob": 1.4823513083683793e-06}, {"id": 640, "seek": 274240, "start": 2758.7200000000003, "end": 2767.52, "text": " So here's our rank 2 tensor, M. Let's calculate the Frobenius norm.", "tokens": [407, 510, 311, 527, 6181, 568, 40863, 11, 376, 13, 961, 311, 8873, 264, 25028, 1799, 4872, 2026, 13], "temperature": 0.0, "avg_logprob": -0.13526423772176108, "compression_ratio": 1.4924623115577889, "no_speech_prob": 1.4823513083683793e-06}, {"id": 641, "seek": 274240, "start": 2767.52, "end": 2770.12, "text": " How many people know about the Frobenius norm?", "tokens": [1012, 867, 561, 458, 466, 264, 25028, 1799, 4872, 2026, 30], "temperature": 0.0, "avg_logprob": -0.13526423772176108, "compression_ratio": 1.4924623115577889, "no_speech_prob": 1.4823513083683793e-06}, {"id": 642, "seek": 274240, "start": 2770.12, "end": 2772.26, "text": " Right, almost nobody.", "tokens": [1779, 11, 1920, 5079, 13], "temperature": 0.0, "avg_logprob": -0.13526423772176108, "compression_ratio": 1.4924623115577889, "no_speech_prob": 1.4823513083683793e-06}, {"id": 643, "seek": 277226, "start": 2772.26, "end": 2778.5600000000004, "text": " And it looks kind of terrifying, but actually it's just this.", "tokens": [400, 309, 1542, 733, 295, 18106, 11, 457, 767, 309, 311, 445, 341, 13], "temperature": 0.0, "avg_logprob": -0.06370784029548551, "compression_ratio": 1.5571428571428572, "no_speech_prob": 4.289284333935939e-06}, {"id": 644, "seek": 277226, "start": 2778.5600000000004, "end": 2785.1200000000003, "text": " It's a matrix times itself dot sum dot square root.", "tokens": [467, 311, 257, 8141, 1413, 2564, 5893, 2408, 5893, 3732, 5593, 13], "temperature": 0.0, "avg_logprob": -0.06370784029548551, "compression_ratio": 1.5571428571428572, "no_speech_prob": 4.289284333935939e-06}, {"id": 645, "seek": 277226, "start": 2785.1200000000003, "end": 2791.76, "text": " So here's the first time we're going to start trying to translate some equations into code", "tokens": [407, 510, 311, 264, 700, 565, 321, 434, 516, 281, 722, 1382, 281, 13799, 512, 11787, 666, 3089], "temperature": 0.0, "avg_logprob": -0.06370784029548551, "compression_ratio": 1.5571428571428572, "no_speech_prob": 4.289284333935939e-06}, {"id": 646, "seek": 277226, "start": 2791.76, "end": 2794.76, "text": " to help us understand these equations.", "tokens": [281, 854, 505, 1223, 613, 11787, 13], "temperature": 0.0, "avg_logprob": -0.06370784029548551, "compression_ratio": 1.5571428571428572, "no_speech_prob": 4.289284333935939e-06}, {"id": 647, "seek": 277226, "start": 2794.76, "end": 2801.5600000000004, "text": " So this says, when you see something like A with two sets of double lines around it", "tokens": [407, 341, 1619, 11, 562, 291, 536, 746, 411, 316, 365, 732, 6352, 295, 3834, 3876, 926, 309], "temperature": 0.0, "avg_logprob": -0.06370784029548551, "compression_ratio": 1.5571428571428572, "no_speech_prob": 4.289284333935939e-06}, {"id": 648, "seek": 280156, "start": 2801.56, "end": 2806.7599999999998, "text": " and an F underneath, that means we are calculating the Frobenius norm.", "tokens": [293, 364, 479, 7223, 11, 300, 1355, 321, 366, 28258, 264, 25028, 1799, 4872, 2026, 13], "temperature": 0.0, "avg_logprob": -0.12661529255804616, "compression_ratio": 1.6213991769547325, "no_speech_prob": 5.6823832892405335e-06}, {"id": 649, "seek": 280156, "start": 2806.7599999999998, "end": 2810.68, "text": " So anytime you see this, and you will, it actually pops up semi-regularly in deep learning", "tokens": [407, 13038, 291, 536, 341, 11, 293, 291, 486, 11, 309, 767, 16795, 493, 12909, 12, 26713, 356, 294, 2452, 2539], "temperature": 0.0, "avg_logprob": -0.12661529255804616, "compression_ratio": 1.6213991769547325, "no_speech_prob": 5.6823832892405335e-06}, {"id": 650, "seek": 280156, "start": 2810.68, "end": 2811.68, "text": " literature.", "tokens": [10394, 13], "temperature": 0.0, "avg_logprob": -0.12661529255804616, "compression_ratio": 1.6213991769547325, "no_speech_prob": 5.6823832892405335e-06}, {"id": 651, "seek": 280156, "start": 2811.68, "end": 2817.56, "text": " When you see this, what it actually means is this function.", "tokens": [1133, 291, 536, 341, 11, 437, 309, 767, 1355, 307, 341, 2445, 13], "temperature": 0.0, "avg_logprob": -0.12661529255804616, "compression_ratio": 1.6213991769547325, "no_speech_prob": 5.6823832892405335e-06}, {"id": 652, "seek": 280156, "start": 2817.56, "end": 2821.2999999999997, "text": " As you probably know, capital sigma means sum.", "tokens": [1018, 291, 1391, 458, 11, 4238, 12771, 1355, 2408, 13], "temperature": 0.0, "avg_logprob": -0.12661529255804616, "compression_ratio": 1.6213991769547325, "no_speech_prob": 5.6823832892405335e-06}, {"id": 653, "seek": 280156, "start": 2821.2999999999997, "end": 2825.2599999999998, "text": " And this says we're going to sum over two for loops.", "tokens": [400, 341, 1619, 321, 434, 516, 281, 2408, 670, 732, 337, 16121, 13], "temperature": 0.0, "avg_logprob": -0.12661529255804616, "compression_ratio": 1.6213991769547325, "no_speech_prob": 5.6823832892405335e-06}, {"id": 654, "seek": 280156, "start": 2825.2599999999998, "end": 2830.7999999999997, "text": " The first for loop will be called I and will go from 1 to N.", "tokens": [440, 700, 337, 6367, 486, 312, 1219, 286, 293, 486, 352, 490, 502, 281, 426, 13], "temperature": 0.0, "avg_logprob": -0.12661529255804616, "compression_ratio": 1.6213991769547325, "no_speech_prob": 5.6823832892405335e-06}, {"id": 655, "seek": 283080, "start": 2830.8, "end": 2836.36, "text": " And the second for loop will also be called J and will also go from 1 to N.", "tokens": [400, 264, 1150, 337, 6367, 486, 611, 312, 1219, 508, 293, 486, 611, 352, 490, 502, 281, 426, 13], "temperature": 0.0, "avg_logprob": -0.15749880280157533, "compression_ratio": 1.7, "no_speech_prob": 2.6841842100111535e-06}, {"id": 656, "seek": 283080, "start": 2836.36, "end": 2842.6400000000003, "text": " And in these nested for loops, we're going to grab something out of a matrix A, that", "tokens": [400, 294, 613, 15646, 292, 337, 16121, 11, 321, 434, 516, 281, 4444, 746, 484, 295, 257, 8141, 316, 11, 300], "temperature": 0.0, "avg_logprob": -0.15749880280157533, "compression_ratio": 1.7, "no_speech_prob": 2.6841842100111535e-06}, {"id": 657, "seek": 283080, "start": 2842.6400000000003, "end": 2849.92, "text": " position IJ, we're going to square it, and then we're going to add all of those together,", "tokens": [2535, 286, 41, 11, 321, 434, 516, 281, 3732, 309, 11, 293, 550, 321, 434, 516, 281, 909, 439, 295, 729, 1214, 11], "temperature": 0.0, "avg_logprob": -0.15749880280157533, "compression_ratio": 1.7, "no_speech_prob": 2.6841842100111535e-06}, {"id": 658, "seek": 283080, "start": 2849.92, "end": 2853.4, "text": " and then we'll take the square root.", "tokens": [293, 550, 321, 603, 747, 264, 3732, 5593, 13], "temperature": 0.0, "avg_logprob": -0.15749880280157533, "compression_ratio": 1.7, "no_speech_prob": 2.6841842100111535e-06}, {"id": 659, "seek": 283080, "start": 2853.4, "end": 2857.44, "text": " Which is that.", "tokens": [3013, 307, 300, 13], "temperature": 0.0, "avg_logprob": -0.15749880280157533, "compression_ratio": 1.7, "no_speech_prob": 2.6841842100111535e-06}, {"id": 660, "seek": 283080, "start": 2857.44, "end": 2860.44, "text": " Now I have something to admit to you.", "tokens": [823, 286, 362, 746, 281, 9796, 281, 291, 13], "temperature": 0.0, "avg_logprob": -0.15749880280157533, "compression_ratio": 1.7, "no_speech_prob": 2.6841842100111535e-06}, {"id": 661, "seek": 286044, "start": 2860.44, "end": 2862.88, "text": " I can't write LaTeX.", "tokens": [286, 393, 380, 2464, 2369, 14233, 55, 13], "temperature": 0.0, "avg_logprob": -0.11195927096488781, "compression_ratio": 1.7196969696969697, "no_speech_prob": 3.169175033690408e-05}, {"id": 662, "seek": 286044, "start": 2862.88, "end": 2867.92, "text": " And yet I did create this Jupyter notebook, so it looks a lot like I created some LaTeX,", "tokens": [400, 1939, 286, 630, 1884, 341, 22125, 88, 391, 21060, 11, 370, 309, 1542, 257, 688, 411, 286, 2942, 512, 2369, 14233, 55, 11], "temperature": 0.0, "avg_logprob": -0.11195927096488781, "compression_ratio": 1.7196969696969697, "no_speech_prob": 3.169175033690408e-05}, {"id": 663, "seek": 286044, "start": 2867.92, "end": 2871.12, "text": " which is certainly the impression I like to give people sometimes.", "tokens": [597, 307, 3297, 264, 9995, 286, 411, 281, 976, 561, 2171, 13], "temperature": 0.0, "avg_logprob": -0.11195927096488781, "compression_ratio": 1.7196969696969697, "no_speech_prob": 3.169175033690408e-05}, {"id": 664, "seek": 286044, "start": 2871.12, "end": 2875.36, "text": " But the way I actually write LaTeX is I find somebody else who wrote it, and then I copy", "tokens": [583, 264, 636, 286, 767, 2464, 2369, 14233, 55, 307, 286, 915, 2618, 1646, 567, 4114, 309, 11, 293, 550, 286, 5055], "temperature": 0.0, "avg_logprob": -0.11195927096488781, "compression_ratio": 1.7196969696969697, "no_speech_prob": 3.169175033690408e-05}, {"id": 665, "seek": 286044, "start": 2875.36, "end": 2876.36, "text": " it.", "tokens": [309, 13], "temperature": 0.0, "avg_logprob": -0.11195927096488781, "compression_ratio": 1.7196969696969697, "no_speech_prob": 3.169175033690408e-05}, {"id": 666, "seek": 286044, "start": 2876.36, "end": 2881.64, "text": " And so the way you do this most of the time is you Google for Frobenius norm, you find", "tokens": [400, 370, 264, 636, 291, 360, 341, 881, 295, 264, 565, 307, 291, 3329, 337, 25028, 1799, 4872, 2026, 11, 291, 915], "temperature": 0.0, "avg_logprob": -0.11195927096488781, "compression_ratio": 1.7196969696969697, "no_speech_prob": 3.169175033690408e-05}, {"id": 667, "seek": 286044, "start": 2881.64, "end": 2887.6, "text": " the wiki page for Frobenius norm, you click edit next to the equation, and you copy and", "tokens": [264, 261, 9850, 3028, 337, 25028, 1799, 4872, 2026, 11, 291, 2052, 8129, 958, 281, 264, 5367, 11, 293, 291, 5055, 293], "temperature": 0.0, "avg_logprob": -0.11195927096488781, "compression_ratio": 1.7196969696969697, "no_speech_prob": 3.169175033690408e-05}, {"id": 668, "seek": 286044, "start": 2887.6, "end": 2889.7200000000003, "text": " paste it.", "tokens": [9163, 309, 13], "temperature": 0.0, "avg_logprob": -0.11195927096488781, "compression_ratio": 1.7196969696969697, "no_speech_prob": 3.169175033690408e-05}, {"id": 669, "seek": 288972, "start": 2889.72, "end": 2891.68, "text": " So that's a really good way to do it.", "tokens": [407, 300, 311, 257, 534, 665, 636, 281, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.15276109446649966, "compression_ratio": 1.7676348547717842, "no_speech_prob": 7.182981335063232e-06}, {"id": 670, "seek": 288972, "start": 2891.68, "end": 2893.9199999999996, "text": " And check dollar signs or even two dollar signs around it.", "tokens": [400, 1520, 7241, 7880, 420, 754, 732, 7241, 7880, 926, 309, 13], "temperature": 0.0, "avg_logprob": -0.15276109446649966, "compression_ratio": 1.7676348547717842, "no_speech_prob": 7.182981335063232e-06}, {"id": 671, "seek": 288972, "start": 2893.9199999999996, "end": 2896.8799999999997, "text": " Two dollar signs make it a bit bigger.", "tokens": [4453, 7241, 7880, 652, 309, 257, 857, 3801, 13], "temperature": 0.0, "avg_logprob": -0.15276109446649966, "compression_ratio": 1.7676348547717842, "no_speech_prob": 7.182981335063232e-06}, {"id": 672, "seek": 288972, "start": 2896.8799999999997, "end": 2899.7599999999998, "text": " So that's way one to get equations.", "tokens": [407, 300, 311, 636, 472, 281, 483, 11787, 13], "temperature": 0.0, "avg_logprob": -0.15276109446649966, "compression_ratio": 1.7676348547717842, "no_speech_prob": 7.182981335063232e-06}, {"id": 673, "seek": 288972, "start": 2899.7599999999998, "end": 2906.48, "text": " Method two is if it's in a paper on archive, did you know on archive you can click on download", "tokens": [25285, 732, 307, 498, 309, 311, 294, 257, 3035, 322, 23507, 11, 630, 291, 458, 322, 23507, 291, 393, 2052, 322, 5484], "temperature": 0.0, "avg_logprob": -0.15276109446649966, "compression_ratio": 1.7676348547717842, "no_speech_prob": 7.182981335063232e-06}, {"id": 674, "seek": 288972, "start": 2906.48, "end": 2912.12, "text": " other formats in the top right, and then download source, and that will actually give you the", "tokens": [661, 25879, 294, 264, 1192, 558, 11, 293, 550, 5484, 4009, 11, 293, 300, 486, 767, 976, 291, 264], "temperature": 0.0, "avg_logprob": -0.15276109446649966, "compression_ratio": 1.7676348547717842, "no_speech_prob": 7.182981335063232e-06}, {"id": 675, "seek": 288972, "start": 2912.12, "end": 2918.08, "text": " original TeX source, and then you can copy and paste their LaTeX.", "tokens": [3380, 1989, 55, 4009, 11, 293, 550, 291, 393, 5055, 293, 9163, 641, 2369, 14233, 55, 13], "temperature": 0.0, "avg_logprob": -0.15276109446649966, "compression_ratio": 1.7676348547717842, "no_speech_prob": 7.182981335063232e-06}, {"id": 676, "seek": 291808, "start": 2918.08, "end": 2921.92, "text": " So I'll be showing you a bunch of equations during these lessons, and I can promise you", "tokens": [407, 286, 603, 312, 4099, 291, 257, 3840, 295, 11787, 1830, 613, 8820, 11, 293, 286, 393, 6228, 291], "temperature": 0.0, "avg_logprob": -0.14953755248676648, "compression_ratio": 1.4511627906976745, "no_speech_prob": 6.048645900591509e-06}, {"id": 677, "seek": 291808, "start": 2921.92, "end": 2924.84, "text": " one thing, I wrote none of them by hand.", "tokens": [472, 551, 11, 286, 4114, 6022, 295, 552, 538, 1011, 13], "temperature": 0.0, "avg_logprob": -0.14953755248676648, "compression_ratio": 1.4511627906976745, "no_speech_prob": 6.048645900591509e-06}, {"id": 678, "seek": 291808, "start": 2924.84, "end": 2928.44, "text": " So this one was stolen from Wikipedia.", "tokens": [407, 341, 472, 390, 15900, 490, 28999, 13], "temperature": 0.0, "avg_logprob": -0.14953755248676648, "compression_ratio": 1.4511627906976745, "no_speech_prob": 6.048645900591509e-06}, {"id": 679, "seek": 291808, "start": 2928.44, "end": 2931.96, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.14953755248676648, "compression_ratio": 1.4511627906976745, "no_speech_prob": 6.048645900591509e-06}, {"id": 680, "seek": 291808, "start": 2931.96, "end": 2938.48, "text": " So you now know how to implement the Frobenius norm from scratch in TensorFlow.", "tokens": [407, 291, 586, 458, 577, 281, 4445, 264, 25028, 1799, 4872, 2026, 490, 8459, 294, 37624, 13], "temperature": 0.0, "avg_logprob": -0.14953755248676648, "compression_ratio": 1.4511627906976745, "no_speech_prob": 6.048645900591509e-06}, {"id": 681, "seek": 291808, "start": 2938.48, "end": 2946.3199999999997, "text": " You could also have written it, of course, as m.pal2.", "tokens": [509, 727, 611, 362, 3720, 309, 11, 295, 1164, 11, 382, 275, 13, 31862, 17, 13], "temperature": 0.0, "avg_logprob": -0.14953755248676648, "compression_ratio": 1.4511627906976745, "no_speech_prob": 6.048645900591509e-06}, {"id": 682, "seek": 294632, "start": 2946.32, "end": 2948.0800000000004, "text": " Now that would be illegal under our rules, right?", "tokens": [823, 300, 576, 312, 11905, 833, 527, 4474, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.2114385303698088, "compression_ratio": 1.5876777251184835, "no_speech_prob": 8.012881153263152e-06}, {"id": 683, "seek": 294632, "start": 2948.0800000000004, "end": 2953.76, "text": " We're not allowed to use pal yet, so that's why we did it that way.", "tokens": [492, 434, 406, 4350, 281, 764, 3984, 1939, 11, 370, 300, 311, 983, 321, 630, 309, 300, 636, 13], "temperature": 0.0, "avg_logprob": -0.2114385303698088, "compression_ratio": 1.5876777251184835, "no_speech_prob": 8.012881153263152e-06}, {"id": 684, "seek": 294632, "start": 2953.76, "end": 2954.76, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.2114385303698088, "compression_ratio": 1.5876777251184835, "no_speech_prob": 8.012881153263152e-06}, {"id": 685, "seek": 294632, "start": 2954.76, "end": 2961.04, "text": " So that's just doing the element-wise multiplication of a rank two tensor with itself.", "tokens": [407, 300, 311, 445, 884, 264, 4478, 12, 3711, 27290, 295, 257, 6181, 732, 40863, 365, 2564, 13], "temperature": 0.0, "avg_logprob": -0.2114385303698088, "compression_ratio": 1.5876777251184835, "no_speech_prob": 8.012881153263152e-06}, {"id": 686, "seek": 294632, "start": 2961.04, "end": 2965.84, "text": " One times one, two times two, three times three, et cetera.", "tokens": [1485, 1413, 472, 11, 732, 1413, 732, 11, 1045, 1413, 1045, 11, 1030, 11458, 13], "temperature": 0.0, "avg_logprob": -0.2114385303698088, "compression_ratio": 1.5876777251184835, "no_speech_prob": 8.012881153263152e-06}, {"id": 687, "seek": 294632, "start": 2965.84, "end": 2967.1600000000003, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.2114385303698088, "compression_ratio": 1.5876777251184835, "no_speech_prob": 8.012881153263152e-06}, {"id": 688, "seek": 294632, "start": 2967.1600000000003, "end": 2972.48, "text": " So that is enough information to replace this loop, right?", "tokens": [407, 300, 307, 1547, 1589, 281, 7406, 341, 6367, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.2114385303698088, "compression_ratio": 1.5876777251184835, "no_speech_prob": 8.012881153263152e-06}, {"id": 689, "seek": 297248, "start": 2972.48, "end": 2981.28, "text": " Because this loop is just going through the first row of a and the first column of b and", "tokens": [1436, 341, 6367, 307, 445, 516, 807, 264, 700, 5386, 295, 257, 293, 264, 700, 7738, 295, 272, 293], "temperature": 0.0, "avg_logprob": -0.14422712887034697, "compression_ratio": 1.5441176470588236, "no_speech_prob": 8.397825695283245e-06}, {"id": 690, "seek": 297248, "start": 2981.28, "end": 2985.84, "text": " doing an element-wise multiplication and sum.", "tokens": [884, 364, 4478, 12, 3711, 27290, 293, 2408, 13], "temperature": 0.0, "avg_logprob": -0.14422712887034697, "compression_ratio": 1.5441176470588236, "no_speech_prob": 8.397825695283245e-06}, {"id": 691, "seek": 297248, "start": 2985.84, "end": 2988.72, "text": " So our new version is going to have two loops, not three.", "tokens": [407, 527, 777, 3037, 307, 516, 281, 362, 732, 16121, 11, 406, 1045, 13], "temperature": 0.0, "avg_logprob": -0.14422712887034697, "compression_ratio": 1.5441176470588236, "no_speech_prob": 8.397825695283245e-06}, {"id": 692, "seek": 297248, "start": 2988.72, "end": 2990.48, "text": " Here it is.", "tokens": [1692, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.14422712887034697, "compression_ratio": 1.5441176470588236, "no_speech_prob": 8.397825695283245e-06}, {"id": 693, "seek": 297248, "start": 2990.48, "end": 2994.92, "text": " So this is all the same.", "tokens": [407, 341, 307, 439, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.14422712887034697, "compression_ratio": 1.5441176470588236, "no_speech_prob": 8.397825695283245e-06}, {"id": 694, "seek": 297248, "start": 2994.92, "end": 3000.2400000000002, "text": " But now we've replaced the inner loop, and you'll see that basically it looks exactly", "tokens": [583, 586, 321, 600, 10772, 264, 7284, 6367, 11, 293, 291, 603, 536, 300, 1936, 309, 1542, 2293], "temperature": 0.0, "avg_logprob": -0.14422712887034697, "compression_ratio": 1.5441176470588236, "no_speech_prob": 8.397825695283245e-06}, {"id": 695, "seek": 300024, "start": 3000.24, "end": 3004.72, "text": " the same as before, but where it used to say k, it now says colon.", "tokens": [264, 912, 382, 949, 11, 457, 689, 309, 1143, 281, 584, 350, 11, 309, 586, 1619, 8255, 13], "temperature": 0.0, "avg_logprob": -0.15537298426908605, "compression_ratio": 1.5576923076923077, "no_speech_prob": 1.6963129382929765e-05}, {"id": 696, "seek": 300024, "start": 3004.72, "end": 3011.8799999999997, "text": " So in PyTorch and NumPy, colon means the entirety of that axis, right?", "tokens": [407, 294, 9953, 51, 284, 339, 293, 22592, 47, 88, 11, 8255, 1355, 264, 31557, 295, 300, 10298, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.15537298426908605, "compression_ratio": 1.5576923076923077, "no_speech_prob": 1.6963129382929765e-05}, {"id": 697, "seek": 300024, "start": 3011.8799999999997, "end": 3021.4399999999996, "text": " So Rachel helped me remember the order of rows and columns when we talk about matrices,", "tokens": [407, 14246, 4254, 385, 1604, 264, 1668, 295, 13241, 293, 13766, 562, 321, 751, 466, 32284, 11], "temperature": 0.0, "avg_logprob": -0.15537298426908605, "compression_ratio": 1.5576923076923077, "no_speech_prob": 1.6963129382929765e-05}, {"id": 698, "seek": 300024, "start": 3021.4399999999996, "end": 3022.4399999999996, "text": " which is the song.", "tokens": [597, 307, 264, 2153, 13], "temperature": 0.0, "avg_logprob": -0.15537298426908605, "compression_ratio": 1.5576923076923077, "no_speech_prob": 1.6963129382929765e-05}, {"id": 699, "seek": 300024, "start": 3022.4399999999996, "end": 3024.8399999999997, "text": " Row by column, row by column.", "tokens": [20309, 538, 7738, 11, 5386, 538, 7738, 13], "temperature": 0.0, "avg_logprob": -0.15537298426908605, "compression_ratio": 1.5576923076923077, "no_speech_prob": 1.6963129382929765e-05}, {"id": 700, "seek": 300024, "start": 3024.8399999999997, "end": 3025.8399999999997, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.15537298426908605, "compression_ratio": 1.5576923076923077, "no_speech_prob": 1.6963129382929765e-05}, {"id": 701, "seek": 300024, "start": 3025.8399999999997, "end": 3026.9199999999996, "text": " So that's the song.", "tokens": [407, 300, 311, 264, 2153, 13], "temperature": 0.0, "avg_logprob": -0.15537298426908605, "compression_ratio": 1.5576923076923077, "no_speech_prob": 1.6963129382929765e-05}, {"id": 702, "seek": 300024, "start": 3026.9199999999996, "end": 3029.56, "text": " So i is the row number.", "tokens": [407, 741, 307, 264, 5386, 1230, 13], "temperature": 0.0, "avg_logprob": -0.15537298426908605, "compression_ratio": 1.5576923076923077, "no_speech_prob": 1.6963129382929765e-05}, {"id": 703, "seek": 302956, "start": 3029.56, "end": 3030.56, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.12701045948526132, "compression_ratio": 1.5343915343915344, "no_speech_prob": 1.7603389323994634e-06}, {"id": 704, "seek": 302956, "start": 3030.56, "end": 3034.6, "text": " So this is row number i, the whole row.", "tokens": [407, 341, 307, 5386, 1230, 741, 11, 264, 1379, 5386, 13], "temperature": 0.0, "avg_logprob": -0.12701045948526132, "compression_ratio": 1.5343915343915344, "no_speech_prob": 1.7603389323994634e-06}, {"id": 705, "seek": 302956, "start": 3034.6, "end": 3039.2, "text": " And this is column number j, the whole column.", "tokens": [400, 341, 307, 7738, 1230, 361, 11, 264, 1379, 7738, 13], "temperature": 0.0, "avg_logprob": -0.12701045948526132, "compression_ratio": 1.5343915343915344, "no_speech_prob": 1.7603389323994634e-06}, {"id": 706, "seek": 302956, "start": 3039.2, "end": 3046.88, "text": " So multiply all of column j by all of row i, and that gives us back a rank one tensor,", "tokens": [407, 12972, 439, 295, 7738, 361, 538, 439, 295, 5386, 741, 11, 293, 300, 2709, 505, 646, 257, 6181, 472, 40863, 11], "temperature": 0.0, "avg_logprob": -0.12701045948526132, "compression_ratio": 1.5343915343915344, "no_speech_prob": 1.7603389323994634e-06}, {"id": 707, "seek": 302956, "start": 3046.88, "end": 3047.88, "text": " which we add up.", "tokens": [597, 321, 909, 493, 13], "temperature": 0.0, "avg_logprob": -0.12701045948526132, "compression_ratio": 1.5343915343915344, "no_speech_prob": 1.7603389323994634e-06}, {"id": 708, "seek": 302956, "start": 3047.88, "end": 3048.88, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.12701045948526132, "compression_ratio": 1.5343915343915344, "no_speech_prob": 1.7603389323994634e-06}, {"id": 709, "seek": 302956, "start": 3048.88, "end": 3051.56, "text": " That's exactly the same as what we had before.", "tokens": [663, 311, 2293, 264, 912, 382, 437, 321, 632, 949, 13], "temperature": 0.0, "avg_logprob": -0.12701045948526132, "compression_ratio": 1.5343915343915344, "no_speech_prob": 1.7603389323994634e-06}, {"id": 710, "seek": 302956, "start": 3051.56, "end": 3055.32, "text": " And so now that takes 1.45 milliseconds.", "tokens": [400, 370, 586, 300, 2516, 502, 13, 8465, 34184, 13], "temperature": 0.0, "avg_logprob": -0.12701045948526132, "compression_ratio": 1.5343915343915344, "no_speech_prob": 1.7603389323994634e-06}, {"id": 711, "seek": 305532, "start": 3055.32, "end": 3059.7200000000003, "text": " We've removed one line of code, and it's 178 times faster.", "tokens": [492, 600, 7261, 472, 1622, 295, 3089, 11, 293, 309, 311, 3282, 23, 1413, 4663, 13], "temperature": 0.0, "avg_logprob": -0.0962663070828307, "compression_ratio": 1.5137614678899083, "no_speech_prob": 1.0782990102597978e-05}, {"id": 712, "seek": 305532, "start": 3059.7200000000003, "end": 3060.7200000000003, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.0962663070828307, "compression_ratio": 1.5137614678899083, "no_speech_prob": 1.0782990102597978e-05}, {"id": 713, "seek": 305532, "start": 3060.7200000000003, "end": 3063.76, "text": " So we successfully got rid of that inner loop.", "tokens": [407, 321, 10727, 658, 3973, 295, 300, 7284, 6367, 13], "temperature": 0.0, "avg_logprob": -0.0962663070828307, "compression_ratio": 1.5137614678899083, "no_speech_prob": 1.0782990102597978e-05}, {"id": 714, "seek": 305532, "start": 3063.76, "end": 3068.04, "text": " And so now this is running in C, right?", "tokens": [400, 370, 586, 341, 307, 2614, 294, 383, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.0962663070828307, "compression_ratio": 1.5137614678899083, "no_speech_prob": 1.0782990102597978e-05}, {"id": 715, "seek": 305532, "start": 3068.04, "end": 3070.4, "text": " We didn't really write Python here.", "tokens": [492, 994, 380, 534, 2464, 15329, 510, 13], "temperature": 0.0, "avg_logprob": -0.0962663070828307, "compression_ratio": 1.5137614678899083, "no_speech_prob": 1.0782990102597978e-05}, {"id": 716, "seek": 305532, "start": 3070.4, "end": 3076.0800000000004, "text": " We wrote kind of a Python-ish thing that said, please call this C code for us.", "tokens": [492, 4114, 733, 295, 257, 15329, 12, 742, 551, 300, 848, 11, 1767, 818, 341, 383, 3089, 337, 505, 13], "temperature": 0.0, "avg_logprob": -0.0962663070828307, "compression_ratio": 1.5137614678899083, "no_speech_prob": 1.0782990102597978e-05}, {"id": 717, "seek": 305532, "start": 3076.0800000000004, "end": 3079.1800000000003, "text": " And that made it 178 times faster.", "tokens": [400, 300, 1027, 309, 3282, 23, 1413, 4663, 13], "temperature": 0.0, "avg_logprob": -0.0962663070828307, "compression_ratio": 1.5137614678899083, "no_speech_prob": 1.0782990102597978e-05}, {"id": 718, "seek": 305532, "start": 3079.1800000000003, "end": 3080.76, "text": " Let's check that it's right.", "tokens": [961, 311, 1520, 300, 309, 311, 558, 13], "temperature": 0.0, "avg_logprob": -0.0962663070828307, "compression_ratio": 1.5137614678899083, "no_speech_prob": 1.0782990102597978e-05}, {"id": 719, "seek": 308076, "start": 3080.76, "end": 3087.2400000000002, "text": " We can't really check that it's equal because floats sometimes change slightly, depending", "tokens": [492, 393, 380, 534, 1520, 300, 309, 311, 2681, 570, 37878, 2171, 1319, 4748, 11, 5413], "temperature": 0.0, "avg_logprob": -0.12162742614746094, "compression_ratio": 1.5405405405405406, "no_speech_prob": 1.0615906830935273e-05}, {"id": 720, "seek": 308076, "start": 3087.2400000000002, "end": 3088.6800000000003, "text": " on how you calculate them.", "tokens": [322, 577, 291, 8873, 552, 13], "temperature": 0.0, "avg_logprob": -0.12162742614746094, "compression_ratio": 1.5405405405405406, "no_speech_prob": 1.0615906830935273e-05}, {"id": 721, "seek": 308076, "start": 3088.6800000000003, "end": 3095.5200000000004, "text": " So instead, let's create something called near, which calls torch.allClose to some tolerance.", "tokens": [407, 2602, 11, 718, 311, 1884, 746, 1219, 2651, 11, 597, 5498, 27822, 13, 336, 9966, 541, 281, 512, 23368, 13], "temperature": 0.0, "avg_logprob": -0.12162742614746094, "compression_ratio": 1.5405405405405406, "no_speech_prob": 1.0615906830935273e-05}, {"id": 722, "seek": 308076, "start": 3095.5200000000004, "end": 3099.44, "text": " And then we'll create a testNear function that calls our test function using our near", "tokens": [400, 550, 321, 603, 1884, 257, 1500, 45, 14881, 2445, 300, 5498, 527, 1500, 2445, 1228, 527, 2651], "temperature": 0.0, "avg_logprob": -0.12162742614746094, "compression_ratio": 1.5405405405405406, "no_speech_prob": 1.0615906830935273e-05}, {"id": 723, "seek": 308076, "start": 3099.44, "end": 3102.92, "text": " comparison.", "tokens": [9660, 13], "temperature": 0.0, "avg_logprob": -0.12162742614746094, "compression_ratio": 1.5405405405405406, "no_speech_prob": 1.0615906830935273e-05}, {"id": 724, "seek": 308076, "start": 3102.92, "end": 3103.92, "text": " And let's see.", "tokens": [400, 718, 311, 536, 13], "temperature": 0.0, "avg_logprob": -0.12162742614746094, "compression_ratio": 1.5405405405405406, "no_speech_prob": 1.0615906830935273e-05}, {"id": 725, "seek": 308076, "start": 3103.92, "end": 3104.92, "text": " Yep.", "tokens": [7010, 13], "temperature": 0.0, "avg_logprob": -0.12162742614746094, "compression_ratio": 1.5405405405405406, "no_speech_prob": 1.0615906830935273e-05}, {"id": 726, "seek": 308076, "start": 3104.92, "end": 3105.92, "text": " Passes.", "tokens": [10319, 279, 13], "temperature": 0.0, "avg_logprob": -0.12162742614746094, "compression_ratio": 1.5405405405405406, "no_speech_prob": 1.0615906830935273e-05}, {"id": 727, "seek": 308076, "start": 3105.92, "end": 3106.92, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.12162742614746094, "compression_ratio": 1.5405405405405406, "no_speech_prob": 1.0615906830935273e-05}, {"id": 728, "seek": 310692, "start": 3106.92, "end": 3112.84, "text": " So we've now got our matrix multiplication at 65 microseconds.", "tokens": [407, 321, 600, 586, 658, 527, 8141, 27290, 412, 11624, 3123, 37841, 28750, 13], "temperature": 0.0, "avg_logprob": -0.11868660122740503, "compression_ratio": 1.578512396694215, "no_speech_prob": 9.36854394240072e-06}, {"id": 729, "seek": 310692, "start": 3112.84, "end": 3118.2400000000002, "text": " Now we need to get rid of this loop, because now this is our innermost loop.", "tokens": [823, 321, 643, 281, 483, 3973, 295, 341, 6367, 11, 570, 586, 341, 307, 527, 7714, 966, 555, 6367, 13], "temperature": 0.0, "avg_logprob": -0.11868660122740503, "compression_ratio": 1.578512396694215, "no_speech_prob": 9.36854394240072e-06}, {"id": 730, "seek": 310692, "start": 3118.2400000000002, "end": 3122.04, "text": " And to do that, we're going to have to use something called broadcasting.", "tokens": [400, 281, 360, 300, 11, 321, 434, 516, 281, 362, 281, 764, 746, 1219, 30024, 13], "temperature": 0.0, "avg_logprob": -0.11868660122740503, "compression_ratio": 1.578512396694215, "no_speech_prob": 9.36854394240072e-06}, {"id": 731, "seek": 310692, "start": 3122.04, "end": 3125.2400000000002, "text": " Who here is familiar with broadcasting?", "tokens": [2102, 510, 307, 4963, 365, 30024, 30], "temperature": 0.0, "avg_logprob": -0.11868660122740503, "compression_ratio": 1.578512396694215, "no_speech_prob": 9.36854394240072e-06}, {"id": 732, "seek": 310692, "start": 3125.2400000000002, "end": 3126.2400000000002, "text": " About half.", "tokens": [7769, 1922, 13], "temperature": 0.0, "avg_logprob": -0.11868660122740503, "compression_ratio": 1.578512396694215, "no_speech_prob": 9.36854394240072e-06}, {"id": 733, "seek": 310692, "start": 3126.2400000000002, "end": 3127.2400000000002, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.11868660122740503, "compression_ratio": 1.578512396694215, "no_speech_prob": 9.36854394240072e-06}, {"id": 734, "seek": 310692, "start": 3127.2400000000002, "end": 3128.2400000000002, "text": " That's what I figured.", "tokens": [663, 311, 437, 286, 8932, 13], "temperature": 0.0, "avg_logprob": -0.11868660122740503, "compression_ratio": 1.578512396694215, "no_speech_prob": 9.36854394240072e-06}, {"id": 735, "seek": 310692, "start": 3128.2400000000002, "end": 3136.6, "text": " So broadcasting is about the most powerful tool we have in our toolbox for writing code", "tokens": [407, 30024, 307, 466, 264, 881, 4005, 2290, 321, 362, 294, 527, 44593, 337, 3579, 3089], "temperature": 0.0, "avg_logprob": -0.11868660122740503, "compression_ratio": 1.578512396694215, "no_speech_prob": 9.36854394240072e-06}, {"id": 736, "seek": 313660, "start": 3136.6, "end": 3141.92, "text": " in Python that runs at C speed.", "tokens": [294, 15329, 300, 6676, 412, 383, 3073, 13], "temperature": 0.0, "avg_logprob": -0.1435683568318685, "compression_ratio": 1.4391304347826086, "no_speech_prob": 9.665010111348238e-06}, {"id": 737, "seek": 313660, "start": 3141.92, "end": 3147.92, "text": " Or in fact, with PyTorch, if you put it on the GPU, it's going to run at CUDA speed.", "tokens": [1610, 294, 1186, 11, 365, 9953, 51, 284, 339, 11, 498, 291, 829, 309, 322, 264, 18407, 11, 309, 311, 516, 281, 1190, 412, 29777, 7509, 3073, 13], "temperature": 0.0, "avg_logprob": -0.1435683568318685, "compression_ratio": 1.4391304347826086, "no_speech_prob": 9.665010111348238e-06}, {"id": 738, "seek": 313660, "start": 3147.92, "end": 3154.0, "text": " It allows us to get rid of nearly all of our loops, as you'll see.", "tokens": [467, 4045, 505, 281, 483, 3973, 295, 6217, 439, 295, 527, 16121, 11, 382, 291, 603, 536, 13], "temperature": 0.0, "avg_logprob": -0.1435683568318685, "compression_ratio": 1.4391304347826086, "no_speech_prob": 9.665010111348238e-06}, {"id": 739, "seek": 313660, "start": 3154.0, "end": 3158.52, "text": " The term broadcasting comes from NumPy, but the idea actually goes all the way back to", "tokens": [440, 1433, 30024, 1487, 490, 22592, 47, 88, 11, 457, 264, 1558, 767, 1709, 439, 264, 636, 646, 281], "temperature": 0.0, "avg_logprob": -0.1435683568318685, "compression_ratio": 1.4391304347826086, "no_speech_prob": 9.665010111348238e-06}, {"id": 740, "seek": 313660, "start": 3158.52, "end": 3163.44, "text": " APL from 1962.", "tokens": [5372, 43, 490, 39498, 13], "temperature": 0.0, "avg_logprob": -0.1435683568318685, "compression_ratio": 1.4391304347826086, "no_speech_prob": 9.665010111348238e-06}, {"id": 741, "seek": 313660, "start": 3163.44, "end": 3166.2, "text": " And it's a really, really powerful technique.", "tokens": [400, 309, 311, 257, 534, 11, 534, 4005, 6532, 13], "temperature": 0.0, "avg_logprob": -0.1435683568318685, "compression_ratio": 1.4391304347826086, "no_speech_prob": 9.665010111348238e-06}, {"id": 742, "seek": 316620, "start": 3166.2, "end": 3170.3999999999996, "text": " A lot of people consider it a different way of programming, where we get rid of all of", "tokens": [316, 688, 295, 561, 1949, 309, 257, 819, 636, 295, 9410, 11, 689, 321, 483, 3973, 295, 439, 295], "temperature": 0.0, "avg_logprob": -0.13434886932373047, "compression_ratio": 1.5136363636363637, "no_speech_prob": 8.267727025668137e-06}, {"id": 743, "seek": 316620, "start": 3170.3999999999996, "end": 3178.64, "text": " our for loops and replace them with these implicit broadcasted loops.", "tokens": [527, 337, 16121, 293, 7406, 552, 365, 613, 26947, 9975, 292, 16121, 13], "temperature": 0.0, "avg_logprob": -0.13434886932373047, "compression_ratio": 1.5136363636363637, "no_speech_prob": 8.267727025668137e-06}, {"id": 744, "seek": 316620, "start": 3178.64, "end": 3181.96, "text": " In fact, you've seen broadcasting before.", "tokens": [682, 1186, 11, 291, 600, 1612, 30024, 949, 13], "temperature": 0.0, "avg_logprob": -0.13434886932373047, "compression_ratio": 1.5136363636363637, "no_speech_prob": 8.267727025668137e-06}, {"id": 745, "seek": 316620, "start": 3181.96, "end": 3186.04, "text": " Remember our tensor A, which contains 10, 6, 4.", "tokens": [5459, 527, 40863, 316, 11, 597, 8306, 1266, 11, 1386, 11, 1017, 13], "temperature": 0.0, "avg_logprob": -0.13434886932373047, "compression_ratio": 1.5136363636363637, "no_speech_prob": 8.267727025668137e-06}, {"id": 746, "seek": 316620, "start": 3186.04, "end": 3192.2, "text": " If you say A greater than 0, then on the left-hand side you've got to rank one tensor.", "tokens": [759, 291, 584, 316, 5044, 813, 1958, 11, 550, 322, 264, 1411, 12, 5543, 1252, 291, 600, 658, 281, 6181, 472, 40863, 13], "temperature": 0.0, "avg_logprob": -0.13434886932373047, "compression_ratio": 1.5136363636363637, "no_speech_prob": 8.267727025668137e-06}, {"id": 747, "seek": 319220, "start": 3192.2, "end": 3196.68, "text": " On the right-hand side you've got a scalar, and yet somehow it works.", "tokens": [1282, 264, 558, 12, 5543, 1252, 291, 600, 658, 257, 39684, 11, 293, 1939, 6063, 309, 1985, 13], "temperature": 0.0, "avg_logprob": -0.10039441108703613, "compression_ratio": 1.5778688524590163, "no_speech_prob": 6.048781415302074e-06}, {"id": 748, "seek": 319220, "start": 3196.68, "end": 3202.7999999999997, "text": " And the reason why is that this value 0 is broadcast three times.", "tokens": [400, 264, 1778, 983, 307, 300, 341, 2158, 1958, 307, 9975, 1045, 1413, 13], "temperature": 0.0, "avg_logprob": -0.10039441108703613, "compression_ratio": 1.5778688524590163, "no_speech_prob": 6.048781415302074e-06}, {"id": 749, "seek": 319220, "start": 3202.7999999999997, "end": 3208.02, "text": " It becomes 0, 0, 0, and then it does an element-wise comparison.", "tokens": [467, 3643, 1958, 11, 1958, 11, 1958, 11, 293, 550, 309, 775, 364, 4478, 12, 3711, 9660, 13], "temperature": 0.0, "avg_logprob": -0.10039441108703613, "compression_ratio": 1.5778688524590163, "no_speech_prob": 6.048781415302074e-06}, {"id": 750, "seek": 319220, "start": 3208.02, "end": 3213.6, "text": " So every time, for example, you've normalized a data set by subtracting the mean and divided", "tokens": [407, 633, 565, 11, 337, 1365, 11, 291, 600, 48704, 257, 1412, 992, 538, 16390, 278, 264, 914, 293, 6666], "temperature": 0.0, "avg_logprob": -0.10039441108703613, "compression_ratio": 1.5778688524590163, "no_speech_prob": 6.048781415302074e-06}, {"id": 751, "seek": 319220, "start": 3213.6, "end": 3219.4399999999996, "text": " by the standard deviation in kind of one line like this, you've actually been broadcasting.", "tokens": [538, 264, 3832, 25163, 294, 733, 295, 472, 1622, 411, 341, 11, 291, 600, 767, 668, 30024, 13], "temperature": 0.0, "avg_logprob": -0.10039441108703613, "compression_ratio": 1.5778688524590163, "no_speech_prob": 6.048781415302074e-06}, {"id": 752, "seek": 321944, "start": 3219.44, "end": 3225.46, "text": " You're broadcasting a scalar to a tensor.", "tokens": [509, 434, 30024, 257, 39684, 281, 257, 40863, 13], "temperature": 0.0, "avg_logprob": -0.14581992778372257, "compression_ratio": 1.6633165829145728, "no_speech_prob": 6.643317647103686e-06}, {"id": 753, "seek": 321944, "start": 3225.46, "end": 3230.64, "text": " So A plus 1 also broadcasts a scalar to a tensor.", "tokens": [407, 316, 1804, 502, 611, 9975, 82, 257, 39684, 281, 257, 40863, 13], "temperature": 0.0, "avg_logprob": -0.14581992778372257, "compression_ratio": 1.6633165829145728, "no_speech_prob": 6.643317647103686e-06}, {"id": 754, "seek": 321944, "start": 3230.64, "end": 3232.7200000000003, "text": " And the tensor doesn't have to be rank one.", "tokens": [400, 264, 40863, 1177, 380, 362, 281, 312, 6181, 472, 13], "temperature": 0.0, "avg_logprob": -0.14581992778372257, "compression_ratio": 1.6633165829145728, "no_speech_prob": 6.643317647103686e-06}, {"id": 755, "seek": 321944, "start": 3232.7200000000003, "end": 3237.38, "text": " Here we can multiply our rank two tensor by two.", "tokens": [1692, 321, 393, 12972, 527, 6181, 732, 40863, 538, 732, 13], "temperature": 0.0, "avg_logprob": -0.14581992778372257, "compression_ratio": 1.6633165829145728, "no_speech_prob": 6.643317647103686e-06}, {"id": 756, "seek": 321944, "start": 3237.38, "end": 3239.56, "text": " So there's the simplest kind of broadcasting.", "tokens": [407, 456, 311, 264, 22811, 733, 295, 30024, 13], "temperature": 0.0, "avg_logprob": -0.14581992778372257, "compression_ratio": 1.6633165829145728, "no_speech_prob": 6.643317647103686e-06}, {"id": 757, "seek": 321944, "start": 3239.56, "end": 3243.92, "text": " And any time you do that, you're not operating at Python speed.", "tokens": [400, 604, 565, 291, 360, 300, 11, 291, 434, 406, 7447, 412, 15329, 3073, 13], "temperature": 0.0, "avg_logprob": -0.14581992778372257, "compression_ratio": 1.6633165829145728, "no_speech_prob": 6.643317647103686e-06}, {"id": 758, "seek": 321944, "start": 3243.92, "end": 3247.84, "text": " You're operating at C or CUDA speed.", "tokens": [509, 434, 7447, 412, 383, 420, 29777, 7509, 3073, 13], "temperature": 0.0, "avg_logprob": -0.14581992778372257, "compression_ratio": 1.6633165829145728, "no_speech_prob": 6.643317647103686e-06}, {"id": 759, "seek": 324784, "start": 3247.84, "end": 3251.1400000000003, "text": " So that's good.", "tokens": [407, 300, 311, 665, 13], "temperature": 0.0, "avg_logprob": -0.1360327280484713, "compression_ratio": 1.4193548387096775, "no_speech_prob": 2.443974381094449e-06}, {"id": 760, "seek": 324784, "start": 3251.1400000000003, "end": 3255.84, "text": " We can also broadcast a vector to a matrix.", "tokens": [492, 393, 611, 9975, 257, 8062, 281, 257, 8141, 13], "temperature": 0.0, "avg_logprob": -0.1360327280484713, "compression_ratio": 1.4193548387096775, "no_speech_prob": 2.443974381094449e-06}, {"id": 761, "seek": 324784, "start": 3255.84, "end": 3264.88, "text": " So here's a rank one tensor C. And here's our previous rank two tensor M. So M's shape", "tokens": [407, 510, 311, 257, 6181, 472, 40863, 383, 13, 400, 510, 311, 527, 3894, 6181, 732, 40863, 376, 13, 407, 376, 311, 3909], "temperature": 0.0, "avg_logprob": -0.1360327280484713, "compression_ratio": 1.4193548387096775, "no_speech_prob": 2.443974381094449e-06}, {"id": 762, "seek": 324784, "start": 3264.88, "end": 3266.44, "text": " is 3, 3.", "tokens": [307, 805, 11, 805, 13], "temperature": 0.0, "avg_logprob": -0.1360327280484713, "compression_ratio": 1.4193548387096775, "no_speech_prob": 2.443974381094449e-06}, {"id": 763, "seek": 324784, "start": 3266.44, "end": 3269.7000000000003, "text": " C's shape is 3.", "tokens": [383, 311, 3909, 307, 805, 13], "temperature": 0.0, "avg_logprob": -0.1360327280484713, "compression_ratio": 1.4193548387096775, "no_speech_prob": 2.443974381094449e-06}, {"id": 764, "seek": 324784, "start": 3269.7000000000003, "end": 3274.36, "text": " And yet M plus C does something.", "tokens": [400, 1939, 376, 1804, 383, 775, 746, 13], "temperature": 0.0, "avg_logprob": -0.1360327280484713, "compression_ratio": 1.4193548387096775, "no_speech_prob": 2.443974381094449e-06}, {"id": 765, "seek": 324784, "start": 3274.36, "end": 3275.36, "text": " What did it do?", "tokens": [708, 630, 309, 360, 30], "temperature": 0.0, "avg_logprob": -0.1360327280484713, "compression_ratio": 1.4193548387096775, "no_speech_prob": 2.443974381094449e-06}, {"id": 766, "seek": 327536, "start": 3275.36, "end": 3279.8, "text": " 10, 20, 30 plus 1, 2, 3.", "tokens": [1266, 11, 945, 11, 2217, 1804, 502, 11, 568, 11, 805, 13], "temperature": 0.0, "avg_logprob": -0.16816685994466146, "compression_ratio": 1.4967320261437909, "no_speech_prob": 7.646443009434734e-06}, {"id": 767, "seek": 327536, "start": 3279.8, "end": 3283.2400000000002, "text": " 10, 20, 30 plus 4, 5, 6.", "tokens": [1266, 11, 945, 11, 2217, 1804, 1017, 11, 1025, 11, 1386, 13], "temperature": 0.0, "avg_logprob": -0.16816685994466146, "compression_ratio": 1.4967320261437909, "no_speech_prob": 7.646443009434734e-06}, {"id": 768, "seek": 327536, "start": 3283.2400000000002, "end": 3286.6, "text": " 10, 20, 30 plus 7, 8, 9.", "tokens": [1266, 11, 945, 11, 2217, 1804, 1614, 11, 1649, 11, 1722, 13], "temperature": 0.0, "avg_logprob": -0.16816685994466146, "compression_ratio": 1.4967320261437909, "no_speech_prob": 7.646443009434734e-06}, {"id": 769, "seek": 327536, "start": 3286.6, "end": 3294.2400000000002, "text": " It's broadcast this row across each row of the matrix.", "tokens": [467, 311, 9975, 341, 5386, 2108, 1184, 5386, 295, 264, 8141, 13], "temperature": 0.0, "avg_logprob": -0.16816685994466146, "compression_ratio": 1.4967320261437909, "no_speech_prob": 7.646443009434734e-06}, {"id": 770, "seek": 327536, "start": 3294.2400000000002, "end": 3297.8, "text": " And it's doing that at C speed.", "tokens": [400, 309, 311, 884, 300, 412, 383, 3073, 13], "temperature": 0.0, "avg_logprob": -0.16816685994466146, "compression_ratio": 1.4967320261437909, "no_speech_prob": 7.646443009434734e-06}, {"id": 771, "seek": 327536, "start": 3297.8, "end": 3304.48, "text": " So this, there's no loop, but it sure looks as if there was a loop.", "tokens": [407, 341, 11, 456, 311, 572, 6367, 11, 457, 309, 988, 1542, 382, 498, 456, 390, 257, 6367, 13], "temperature": 0.0, "avg_logprob": -0.16816685994466146, "compression_ratio": 1.4967320261437909, "no_speech_prob": 7.646443009434734e-06}, {"id": 772, "seek": 330448, "start": 3304.48, "end": 3308.6, "text": " C plus M does exactly the same thing.", "tokens": [383, 1804, 376, 775, 2293, 264, 912, 551, 13], "temperature": 0.0, "avg_logprob": -0.12082132508483114, "compression_ratio": 1.435374149659864, "no_speech_prob": 5.5942023209354375e-06}, {"id": 773, "seek": 330448, "start": 3308.6, "end": 3313.56, "text": " So we can write C.expandAsM.", "tokens": [407, 321, 393, 2464, 383, 13, 15952, 474, 10884, 44, 13], "temperature": 0.0, "avg_logprob": -0.12082132508483114, "compression_ratio": 1.435374149659864, "no_speech_prob": 5.5942023209354375e-06}, {"id": 774, "seek": 330448, "start": 3313.56, "end": 3322.4, "text": " And it shows us what C would look like when broadcast to M. 10, 20, 30, 10, 20, 30, 10,", "tokens": [400, 309, 3110, 505, 437, 383, 576, 574, 411, 562, 9975, 281, 376, 13, 1266, 11, 945, 11, 2217, 11, 1266, 11, 945, 11, 2217, 11, 1266, 11], "temperature": 0.0, "avg_logprob": -0.12082132508483114, "compression_ratio": 1.435374149659864, "no_speech_prob": 5.5942023209354375e-06}, {"id": 775, "seek": 330448, "start": 3322.4, "end": 3323.4, "text": " 20, 30.", "tokens": [945, 11, 2217, 13], "temperature": 0.0, "avg_logprob": -0.12082132508483114, "compression_ratio": 1.435374149659864, "no_speech_prob": 5.5942023209354375e-06}, {"id": 776, "seek": 330448, "start": 3323.4, "end": 3330.56, "text": " So you can see M plus T is the same as C plus M.", "tokens": [407, 291, 393, 536, 376, 1804, 314, 307, 264, 912, 382, 383, 1804, 376, 13], "temperature": 0.0, "avg_logprob": -0.12082132508483114, "compression_ratio": 1.435374149659864, "no_speech_prob": 5.5942023209354375e-06}, {"id": 777, "seek": 333056, "start": 3330.56, "end": 3339.72, "text": " So basically it's creating or acting as if it's creating this bigger rank two tensor.", "tokens": [407, 1936, 309, 311, 4084, 420, 6577, 382, 498, 309, 311, 4084, 341, 3801, 6181, 732, 40863, 13], "temperature": 0.0, "avg_logprob": -0.15302474682147688, "compression_ratio": 1.5974025974025974, "no_speech_prob": 1.6797031321402756e-06}, {"id": 778, "seek": 333056, "start": 3339.72, "end": 3344.7599999999998, "text": " So this is pretty cool because it now means that any time we need to do something between", "tokens": [407, 341, 307, 1238, 1627, 570, 309, 586, 1355, 300, 604, 565, 321, 643, 281, 360, 746, 1296], "temperature": 0.0, "avg_logprob": -0.15302474682147688, "compression_ratio": 1.5974025974025974, "no_speech_prob": 1.6797031321402756e-06}, {"id": 779, "seek": 333056, "start": 3344.7599999999998, "end": 3351.7599999999998, "text": " a vector and a matrix, we can do it at C speed with no loop.", "tokens": [257, 8062, 293, 257, 8141, 11, 321, 393, 360, 309, 412, 383, 3073, 365, 572, 6367, 13], "temperature": 0.0, "avg_logprob": -0.15302474682147688, "compression_ratio": 1.5974025974025974, "no_speech_prob": 1.6797031321402756e-06}, {"id": 780, "seek": 333056, "start": 3351.7599999999998, "end": 3356.04, "text": " Now you might be worrying though that this looks pretty memory intensive if we're kind", "tokens": [823, 291, 1062, 312, 18788, 1673, 300, 341, 1542, 1238, 4675, 18957, 498, 321, 434, 733], "temperature": 0.0, "avg_logprob": -0.15302474682147688, "compression_ratio": 1.5974025974025974, "no_speech_prob": 1.6797031321402756e-06}, {"id": 781, "seek": 333056, "start": 3356.04, "end": 3358.88, "text": " of turning all of our rows into big matrices.", "tokens": [295, 6246, 439, 295, 527, 13241, 666, 955, 32284, 13], "temperature": 0.0, "avg_logprob": -0.15302474682147688, "compression_ratio": 1.5974025974025974, "no_speech_prob": 1.6797031321402756e-06}, {"id": 782, "seek": 335888, "start": 3358.88, "end": 3365.04, "text": " But fear not, because you can look inside the actual memory used by PyTorch.", "tokens": [583, 4240, 406, 11, 570, 291, 393, 574, 1854, 264, 3539, 4675, 1143, 538, 9953, 51, 284, 339, 13], "temperature": 0.0, "avg_logprob": -0.11796746534459732, "compression_ratio": 1.6435643564356435, "no_speech_prob": 1.045136377797462e-05}, {"id": 783, "seek": 335888, "start": 3365.04, "end": 3373.7200000000003, "text": " So here T is a 3x3 matrix, but T.storage tells us that actually it's only storing one copy", "tokens": [407, 510, 314, 307, 257, 805, 87, 18, 8141, 11, 457, 314, 13, 372, 29226, 5112, 505, 300, 767, 309, 311, 787, 26085, 472, 5055], "temperature": 0.0, "avg_logprob": -0.11796746534459732, "compression_ratio": 1.6435643564356435, "no_speech_prob": 1.045136377797462e-05}, {"id": 784, "seek": 335888, "start": 3373.7200000000003, "end": 3375.04, "text": " of that data.", "tokens": [295, 300, 1412, 13], "temperature": 0.0, "avg_logprob": -0.11796746534459732, "compression_ratio": 1.6435643564356435, "no_speech_prob": 1.045136377797462e-05}, {"id": 785, "seek": 335888, "start": 3375.04, "end": 3381.28, "text": " T.shape tells us that T knows it's meant to be a 3x3 matrix.", "tokens": [314, 13, 82, 42406, 5112, 505, 300, 314, 3255, 309, 311, 4140, 281, 312, 257, 805, 87, 18, 8141, 13], "temperature": 0.0, "avg_logprob": -0.11796746534459732, "compression_ratio": 1.6435643564356435, "no_speech_prob": 1.045136377797462e-05}, {"id": 786, "seek": 335888, "start": 3381.28, "end": 3387.36, "text": " And T.stride tells us that it knows that when it's going from column to column, it should", "tokens": [400, 314, 13, 9733, 482, 5112, 505, 300, 309, 3255, 300, 562, 309, 311, 516, 490, 7738, 281, 7738, 11, 309, 820], "temperature": 0.0, "avg_logprob": -0.11796746534459732, "compression_ratio": 1.6435643564356435, "no_speech_prob": 1.045136377797462e-05}, {"id": 787, "seek": 338736, "start": 3387.36, "end": 3390.84, "text": " take one step through the storage.", "tokens": [747, 472, 1823, 807, 264, 6725, 13], "temperature": 0.0, "avg_logprob": -0.06935713354465181, "compression_ratio": 1.6963562753036436, "no_speech_prob": 4.425441602506908e-06}, {"id": 788, "seek": 338736, "start": 3390.84, "end": 3395.8, "text": " But when it goes from row to row, it should take zero steps.", "tokens": [583, 562, 309, 1709, 490, 5386, 281, 5386, 11, 309, 820, 747, 4018, 4439, 13], "temperature": 0.0, "avg_logprob": -0.06935713354465181, "compression_ratio": 1.6963562753036436, "no_speech_prob": 4.425441602506908e-06}, {"id": 789, "seek": 338736, "start": 3395.8, "end": 3400.7200000000003, "text": " And so that's how calm it repeats 10, 20, 30, 10, 20, 30, 10, 20, 30.", "tokens": [400, 370, 300, 311, 577, 7151, 309, 35038, 1266, 11, 945, 11, 2217, 11, 1266, 11, 945, 11, 2217, 11, 1266, 11, 945, 11, 2217, 13], "temperature": 0.0, "avg_logprob": -0.06935713354465181, "compression_ratio": 1.6963562753036436, "no_speech_prob": 4.425441602506908e-06}, {"id": 790, "seek": 338736, "start": 3400.7200000000003, "end": 3404.6800000000003, "text": " So this is a really powerful thing that appears in pretty much every linear algebra library", "tokens": [407, 341, 307, 257, 534, 4005, 551, 300, 7038, 294, 1238, 709, 633, 8213, 21989, 6405], "temperature": 0.0, "avg_logprob": -0.06935713354465181, "compression_ratio": 1.6963562753036436, "no_speech_prob": 4.425441602506908e-06}, {"id": 791, "seek": 338736, "start": 3404.6800000000003, "end": 3411.6400000000003, "text": " you'll come across is this idea that you can actually create tensors that behave like higher", "tokens": [291, 603, 808, 2108, 307, 341, 1558, 300, 291, 393, 767, 1884, 10688, 830, 300, 15158, 411, 2946], "temperature": 0.0, "avg_logprob": -0.06935713354465181, "compression_ratio": 1.6963562753036436, "no_speech_prob": 4.425441602506908e-06}, {"id": 792, "seek": 338736, "start": 3411.6400000000003, "end": 3415.7000000000003, "text": " rank things than they're actually stored as.", "tokens": [6181, 721, 813, 436, 434, 767, 12187, 382, 13], "temperature": 0.0, "avg_logprob": -0.06935713354465181, "compression_ratio": 1.6963562753036436, "no_speech_prob": 4.425441602506908e-06}, {"id": 793, "seek": 338736, "start": 3415.7000000000003, "end": 3416.7000000000003, "text": " So this is really neat.", "tokens": [407, 341, 307, 534, 10654, 13], "temperature": 0.0, "avg_logprob": -0.06935713354465181, "compression_ratio": 1.6963562753036436, "no_speech_prob": 4.425441602506908e-06}, {"id": 794, "seek": 341670, "start": 3416.7, "end": 3421.7999999999997, "text": " It basically means that this broadcasting functionality gives us C-like speed with no", "tokens": [467, 1936, 1355, 300, 341, 30024, 14980, 2709, 505, 383, 12, 4092, 3073, 365, 572], "temperature": 0.0, "avg_logprob": -0.17397994682437085, "compression_ratio": 1.3076923076923077, "no_speech_prob": 2.2602994249609765e-06}, {"id": 795, "seek": 341670, "start": 3421.7999999999997, "end": 3424.48, "text": " additional memory overhead.", "tokens": [4497, 4675, 19922, 13], "temperature": 0.0, "avg_logprob": -0.17397994682437085, "compression_ratio": 1.3076923076923077, "no_speech_prob": 2.2602994249609765e-06}, {"id": 796, "seek": 341670, "start": 3424.48, "end": 3427.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.17397994682437085, "compression_ratio": 1.3076923076923077, "no_speech_prob": 2.2602994249609765e-06}, {"id": 797, "seek": 341670, "start": 3427.0, "end": 3432.8399999999997, "text": " What if we wanted to take a column instead of a row?", "tokens": [708, 498, 321, 1415, 281, 747, 257, 7738, 2602, 295, 257, 5386, 30], "temperature": 0.0, "avg_logprob": -0.17397994682437085, "compression_ratio": 1.3076923076923077, "no_speech_prob": 2.2602994249609765e-06}, {"id": 798, "seek": 341670, "start": 3432.8399999999997, "end": 3441.56, "text": " So in other words, a rank 2 tensor of shape 3,1.", "tokens": [407, 294, 661, 2283, 11, 257, 6181, 568, 40863, 295, 3909, 805, 11, 16, 13], "temperature": 0.0, "avg_logprob": -0.17397994682437085, "compression_ratio": 1.3076923076923077, "no_speech_prob": 2.2602994249609765e-06}, {"id": 799, "seek": 344156, "start": 3441.56, "end": 3450.24, "text": " We can create a rank 2 tensor of shape 3,1 from a rank 1 tensor by using the unsqueeze", "tokens": [492, 393, 1884, 257, 6181, 568, 40863, 295, 3909, 805, 11, 16, 490, 257, 6181, 502, 40863, 538, 1228, 264, 2693, 1077, 10670], "temperature": 0.0, "avg_logprob": -0.10559357325236003, "compression_ratio": 1.5192307692307692, "no_speech_prob": 4.157315288466634e-06}, {"id": 800, "seek": 344156, "start": 3450.24, "end": 3453.08, "text": " method.", "tokens": [3170, 13], "temperature": 0.0, "avg_logprob": -0.10559357325236003, "compression_ratio": 1.5192307692307692, "no_speech_prob": 4.157315288466634e-06}, {"id": 801, "seek": 344156, "start": 3453.08, "end": 3459.92, "text": " Unsqueeze adds an additional dimension of size 1 to wherever we ask for it.", "tokens": [25017, 1077, 10670, 10860, 364, 4497, 10139, 295, 2744, 502, 281, 8660, 321, 1029, 337, 309, 13], "temperature": 0.0, "avg_logprob": -0.10559357325236003, "compression_ratio": 1.5192307692307692, "no_speech_prob": 4.157315288466634e-06}, {"id": 802, "seek": 344156, "start": 3459.92, "end": 3468.4, "text": " So unsqueeze 0, let's check this out, unsqueeze 0 is of shape 1,3.", "tokens": [407, 2693, 1077, 10670, 1958, 11, 718, 311, 1520, 341, 484, 11, 2693, 1077, 10670, 1958, 307, 295, 3909, 502, 11, 18, 13], "temperature": 0.0, "avg_logprob": -0.10559357325236003, "compression_ratio": 1.5192307692307692, "no_speech_prob": 4.157315288466634e-06}, {"id": 803, "seek": 346840, "start": 3468.4, "end": 3472.04, "text": " It puts the new dimension in position 1.", "tokens": [467, 8137, 264, 777, 10139, 294, 2535, 502, 13], "temperature": 0.0, "avg_logprob": -0.1767074992355791, "compression_ratio": 1.578125, "no_speech_prob": 2.4060436771833338e-06}, {"id": 804, "seek": 346840, "start": 3472.04, "end": 3475.88, "text": " Unsqueeze 1 is shape 3,1.", "tokens": [25017, 1077, 10670, 502, 307, 3909, 805, 11, 16, 13], "temperature": 0.0, "avg_logprob": -0.1767074992355791, "compression_ratio": 1.578125, "no_speech_prob": 2.4060436771833338e-06}, {"id": 805, "seek": 346840, "start": 3475.88, "end": 3478.8, "text": " It creates the new axis in position 1.", "tokens": [467, 7829, 264, 777, 10298, 294, 2535, 502, 13], "temperature": 0.0, "avg_logprob": -0.1767074992355791, "compression_ratio": 1.578125, "no_speech_prob": 2.4060436771833338e-06}, {"id": 806, "seek": 346840, "start": 3478.8, "end": 3484.0, "text": " So unsqueeze 0 looks a lot like C, right?", "tokens": [407, 2693, 1077, 10670, 1958, 1542, 257, 688, 411, 383, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1767074992355791, "compression_ratio": 1.578125, "no_speech_prob": 2.4060436771833338e-06}, {"id": 807, "seek": 346840, "start": 3484.0, "end": 3489.88, "text": " But now rather than being a rank 1 tensor, it's now a rank 2 tensor.", "tokens": [583, 586, 2831, 813, 885, 257, 6181, 502, 40863, 11, 309, 311, 586, 257, 6181, 568, 40863, 13], "temperature": 0.0, "avg_logprob": -0.1767074992355791, "compression_ratio": 1.578125, "no_speech_prob": 2.4060436771833338e-06}, {"id": 808, "seek": 346840, "start": 3489.88, "end": 3491.88, "text": " See how it's got two square brackets around it?", "tokens": [3008, 577, 309, 311, 658, 732, 3732, 26179, 926, 309, 30], "temperature": 0.0, "avg_logprob": -0.1767074992355791, "compression_ratio": 1.578125, "no_speech_prob": 2.4060436771833338e-06}, {"id": 809, "seek": 346840, "start": 3491.88, "end": 3492.88, "text": " Right?", "tokens": [1779, 30], "temperature": 0.0, "avg_logprob": -0.1767074992355791, "compression_ratio": 1.578125, "no_speech_prob": 2.4060436771833338e-06}, {"id": 810, "seek": 346840, "start": 3492.88, "end": 3495.64, "text": " See how its size is 1,3?", "tokens": [3008, 577, 1080, 2744, 307, 502, 11, 18, 30], "temperature": 0.0, "avg_logprob": -0.1767074992355791, "compression_ratio": 1.578125, "no_speech_prob": 2.4060436771833338e-06}, {"id": 811, "seek": 346840, "start": 3495.64, "end": 3496.92, "text": " Right?", "tokens": [1779, 30], "temperature": 0.0, "avg_logprob": -0.1767074992355791, "compression_ratio": 1.578125, "no_speech_prob": 2.4060436771833338e-06}, {"id": 812, "seek": 349692, "start": 3496.92, "end": 3503.36, "text": " As more interestingly, C.unsqueeze1 now looks like a column.", "tokens": [1018, 544, 25873, 11, 383, 13, 26684, 1077, 10670, 16, 586, 1542, 411, 257, 7738, 13], "temperature": 0.0, "avg_logprob": -0.13501057115573328, "compression_ratio": 1.480349344978166, "no_speech_prob": 4.495084340305766e-06}, {"id": 813, "seek": 349692, "start": 3503.36, "end": 3508.32, "text": " It's also a rank 2 tensor, but it's three rows by one column.", "tokens": [467, 311, 611, 257, 6181, 568, 40863, 11, 457, 309, 311, 1045, 13241, 538, 472, 7738, 13], "temperature": 0.0, "avg_logprob": -0.13501057115573328, "compression_ratio": 1.480349344978166, "no_speech_prob": 4.495084340305766e-06}, {"id": 814, "seek": 349692, "start": 3508.32, "end": 3510.4, "text": " Why is this interesting?", "tokens": [1545, 307, 341, 1880, 30], "temperature": 0.0, "avg_logprob": -0.13501057115573328, "compression_ratio": 1.480349344978166, "no_speech_prob": 4.495084340305766e-06}, {"id": 815, "seek": 349692, "start": 3510.4, "end": 3517.96, "text": " Because we can say, well actually before we do, I'll just mention writing.unsqueeze is", "tokens": [1436, 321, 393, 584, 11, 731, 767, 949, 321, 360, 11, 286, 603, 445, 2152, 3579, 13, 26684, 1077, 10670, 307], "temperature": 0.0, "avg_logprob": -0.13501057115573328, "compression_ratio": 1.480349344978166, "no_speech_prob": 4.495084340305766e-06}, {"id": 816, "seek": 349692, "start": 3517.96, "end": 3519.56, "text": " kind of clunky.", "tokens": [733, 295, 596, 25837, 13], "temperature": 0.0, "avg_logprob": -0.13501057115573328, "compression_ratio": 1.480349344978166, "no_speech_prob": 4.495084340305766e-06}, {"id": 817, "seek": 349692, "start": 3519.56, "end": 3526.52, "text": " So PyTorch and NumPy have a neat trick, which is that you can index into an array with a", "tokens": [407, 9953, 51, 284, 339, 293, 22592, 47, 88, 362, 257, 10654, 4282, 11, 597, 307, 300, 291, 393, 8186, 666, 364, 10225, 365, 257], "temperature": 0.0, "avg_logprob": -0.13501057115573328, "compression_ratio": 1.480349344978166, "no_speech_prob": 4.495084340305766e-06}, {"id": 818, "seek": 352652, "start": 3526.52, "end": 3534.0, "text": " special value none, and none means squeeze a new axis in here please.", "tokens": [2121, 2158, 6022, 11, 293, 6022, 1355, 13578, 257, 777, 10298, 294, 510, 1767, 13], "temperature": 0.0, "avg_logprob": -0.15653867628967877, "compression_ratio": 1.6502242152466369, "no_speech_prob": 1.805783722375054e-05}, {"id": 819, "seek": 352652, "start": 3534.0, "end": 3543.2, "text": " So it adds, so you can see that C none colon is exactly the same shape 1,3 as C.unsqueeze0.", "tokens": [407, 309, 10860, 11, 370, 291, 393, 536, 300, 383, 6022, 8255, 307, 2293, 264, 912, 3909, 502, 11, 18, 382, 383, 13, 26684, 1077, 10670, 15, 13], "temperature": 0.0, "avg_logprob": -0.15653867628967877, "compression_ratio": 1.6502242152466369, "no_speech_prob": 1.805783722375054e-05}, {"id": 820, "seek": 352652, "start": 3543.2, "end": 3549.16, "text": " And C colon, none is exactly the same shape as C.unsqueeze1.", "tokens": [400, 383, 8255, 11, 6022, 307, 2293, 264, 912, 3909, 382, 383, 13, 26684, 1077, 10670, 16, 13], "temperature": 0.0, "avg_logprob": -0.15653867628967877, "compression_ratio": 1.6502242152466369, "no_speech_prob": 1.805783722375054e-05}, {"id": 821, "seek": 352652, "start": 3549.16, "end": 3552.7599999999998, "text": " So I hardly ever use unsqueeze unless I'm like particularly trying to demonstrate something", "tokens": [407, 286, 13572, 1562, 764, 2693, 1077, 10670, 5969, 286, 478, 411, 4098, 1382, 281, 11698, 746], "temperature": 0.0, "avg_logprob": -0.15653867628967877, "compression_ratio": 1.6502242152466369, "no_speech_prob": 1.805783722375054e-05}, {"id": 822, "seek": 352652, "start": 3552.7599999999998, "end": 3553.7599999999998, "text": " for teaching purposes.", "tokens": [337, 4571, 9932, 13], "temperature": 0.0, "avg_logprob": -0.15653867628967877, "compression_ratio": 1.6502242152466369, "no_speech_prob": 1.805783722375054e-05}, {"id": 823, "seek": 352652, "start": 3553.7599999999998, "end": 3555.56, "text": " I pretty much always use none.", "tokens": [286, 1238, 709, 1009, 764, 6022, 13], "temperature": 0.0, "avg_logprob": -0.15653867628967877, "compression_ratio": 1.6502242152466369, "no_speech_prob": 1.805783722375054e-05}, {"id": 824, "seek": 355556, "start": 3555.56, "end": 3561.36, "text": " Apart from anything else, I can add additional axes this way.", "tokens": [24111, 490, 1340, 1646, 11, 286, 393, 909, 4497, 35387, 341, 636, 13], "temperature": 0.0, "avg_logprob": -0.13440391494006645, "compression_ratio": 1.5406976744186047, "no_speech_prob": 3.288715106464224e-06}, {"id": 825, "seek": 355556, "start": 3561.36, "end": 3565.24, "text": " Or else with unsqueeze, you have to go unsqueeze, unsqueeze, unsqueeze.", "tokens": [1610, 1646, 365, 2693, 1077, 10670, 11, 291, 362, 281, 352, 2693, 1077, 10670, 11, 2693, 1077, 10670, 11, 2693, 1077, 10670, 13], "temperature": 0.0, "avg_logprob": -0.13440391494006645, "compression_ratio": 1.5406976744186047, "no_speech_prob": 3.288715106464224e-06}, {"id": 826, "seek": 355556, "start": 3565.24, "end": 3569.0, "text": " So this is handy.", "tokens": [407, 341, 307, 13239, 13], "temperature": 0.0, "avg_logprob": -0.13440391494006645, "compression_ratio": 1.5406976744186047, "no_speech_prob": 3.288715106464224e-06}, {"id": 827, "seek": 355556, "start": 3569.0, "end": 3570.92, "text": " So why did we do all that?", "tokens": [407, 983, 630, 321, 360, 439, 300, 30], "temperature": 0.0, "avg_logprob": -0.13440391494006645, "compression_ratio": 1.5406976744186047, "no_speech_prob": 3.288715106464224e-06}, {"id": 828, "seek": 355556, "start": 3570.92, "end": 3580.56, "text": " The reason we did all that is because if we go C colon, common none, so in other words", "tokens": [440, 1778, 321, 630, 439, 300, 307, 570, 498, 321, 352, 383, 8255, 11, 2689, 6022, 11, 370, 294, 661, 2283], "temperature": 0.0, "avg_logprob": -0.13440391494006645, "compression_ratio": 1.5406976744186047, "no_speech_prob": 3.288715106464224e-06}, {"id": 829, "seek": 358056, "start": 3580.56, "end": 3589.24, "text": " we turn it into a column, kind of a columnar shape, so it's now of shape 3,1, dot expand", "tokens": [321, 1261, 309, 666, 257, 7738, 11, 733, 295, 257, 7738, 289, 3909, 11, 370, 309, 311, 586, 295, 3909, 805, 11, 16, 11, 5893, 5268], "temperature": 0.0, "avg_logprob": -0.15810443445579292, "compression_ratio": 1.6645962732919255, "no_speech_prob": 1.0615859537210781e-05}, {"id": 830, "seek": 358056, "start": 3589.24, "end": 3594.96, "text": " as, it doesn't now say 10, 20, 30, 10, 20, 30, 10, 20, 30, but it says 10, 10, 10, 20,", "tokens": [382, 11, 309, 1177, 380, 586, 584, 1266, 11, 945, 11, 2217, 11, 1266, 11, 945, 11, 2217, 11, 1266, 11, 945, 11, 2217, 11, 457, 309, 1619, 1266, 11, 1266, 11, 1266, 11, 945, 11], "temperature": 0.0, "avg_logprob": -0.15810443445579292, "compression_ratio": 1.6645962732919255, "no_speech_prob": 1.0615859537210781e-05}, {"id": 831, "seek": 358056, "start": 3594.96, "end": 3595.96, "text": " 20, 20, 30, 30, 30.", "tokens": [945, 11, 945, 11, 2217, 11, 2217, 11, 2217, 13], "temperature": 0.0, "avg_logprob": -0.15810443445579292, "compression_ratio": 1.6645962732919255, "no_speech_prob": 1.0615859537210781e-05}, {"id": 832, "seek": 358056, "start": 3595.96, "end": 3601.6, "text": " So in other words, it's getting broadcast along columns instead of rows.", "tokens": [407, 294, 661, 2283, 11, 309, 311, 1242, 9975, 2051, 13766, 2602, 295, 13241, 13], "temperature": 0.0, "avg_logprob": -0.15810443445579292, "compression_ratio": 1.6645962732919255, "no_speech_prob": 1.0615859537210781e-05}, {"id": 833, "seek": 360160, "start": 3601.6, "end": 3612.96, "text": " So as you might expect, if I take that and add it to M, then I get the result of broadcasting", "tokens": [407, 382, 291, 1062, 2066, 11, 498, 286, 747, 300, 293, 909, 309, 281, 376, 11, 550, 286, 483, 264, 1874, 295, 30024], "temperature": 0.0, "avg_logprob": -0.07953216749079087, "compression_ratio": 1.303225806451613, "no_speech_prob": 2.1907528662268305e-06}, {"id": 834, "seek": 360160, "start": 3612.96, "end": 3614.42, "text": " the column.", "tokens": [264, 7738, 13], "temperature": 0.0, "avg_logprob": -0.07953216749079087, "compression_ratio": 1.303225806451613, "no_speech_prob": 2.1907528662268305e-06}, {"id": 835, "seek": 360160, "start": 3614.42, "end": 3625.2, "text": " So it's now not 11, 22, 33, but 11, 12, 13.", "tokens": [407, 309, 311, 586, 406, 2975, 11, 5853, 11, 11816, 11, 457, 2975, 11, 2272, 11, 3705, 13], "temperature": 0.0, "avg_logprob": -0.07953216749079087, "compression_ratio": 1.303225806451613, "no_speech_prob": 2.1907528662268305e-06}, {"id": 836, "seek": 360160, "start": 3625.2, "end": 3629.2, "text": " So everything makes more sense in Excel.", "tokens": [407, 1203, 1669, 544, 2020, 294, 19060, 13], "temperature": 0.0, "avg_logprob": -0.07953216749079087, "compression_ratio": 1.303225806451613, "no_speech_prob": 2.1907528662268305e-06}, {"id": 837, "seek": 360160, "start": 3629.2, "end": 3630.42, "text": " Let's look.", "tokens": [961, 311, 574, 13], "temperature": 0.0, "avg_logprob": -0.07953216749079087, "compression_ratio": 1.303225806451613, "no_speech_prob": 2.1907528662268305e-06}, {"id": 838, "seek": 363042, "start": 3630.42, "end": 3633.52, "text": " So here's broadcasting in Excel.", "tokens": [407, 510, 311, 30024, 294, 19060, 13], "temperature": 0.0, "avg_logprob": -0.18728889737810409, "compression_ratio": 1.6115107913669064, "no_speech_prob": 5.338035407476127e-06}, {"id": 839, "seek": 363042, "start": 3633.52, "end": 3642.7200000000003, "text": " Here is a 1, 3 shape, rank 2 tensor.", "tokens": [1692, 307, 257, 502, 11, 805, 3909, 11, 6181, 568, 40863, 13], "temperature": 0.0, "avg_logprob": -0.18728889737810409, "compression_ratio": 1.6115107913669064, "no_speech_prob": 5.338035407476127e-06}, {"id": 840, "seek": 363042, "start": 3642.7200000000003, "end": 3649.48, "text": " So we can use the rows and columns functions in Excel to get the rows and columns of this", "tokens": [407, 321, 393, 764, 264, 13241, 293, 13766, 6828, 294, 19060, 281, 483, 264, 13241, 293, 13766, 295, 341], "temperature": 0.0, "avg_logprob": -0.18728889737810409, "compression_ratio": 1.6115107913669064, "no_speech_prob": 5.338035407476127e-06}, {"id": 841, "seek": 363042, "start": 3649.48, "end": 3651.64, "text": " object.", "tokens": [2657, 13], "temperature": 0.0, "avg_logprob": -0.18728889737810409, "compression_ratio": 1.6115107913669064, "no_speech_prob": 5.338035407476127e-06}, {"id": 842, "seek": 363042, "start": 3651.64, "end": 3656.32, "text": " Here is a 3 by 1 rank 2 tensor.", "tokens": [1692, 307, 257, 805, 538, 502, 6181, 568, 40863, 13], "temperature": 0.0, "avg_logprob": -0.18728889737810409, "compression_ratio": 1.6115107913669064, "no_speech_prob": 5.338035407476127e-06}, {"id": 843, "seek": 363042, "start": 3656.32, "end": 3660.04, "text": " Again, rows and columns.", "tokens": [3764, 11, 13241, 293, 13766, 13], "temperature": 0.0, "avg_logprob": -0.18728889737810409, "compression_ratio": 1.6115107913669064, "no_speech_prob": 5.338035407476127e-06}, {"id": 844, "seek": 366004, "start": 3660.04, "end": 3665.32, "text": " And here is a 2 by 2 rank, sorry, 3 by 3 rank 2 tensor.", "tokens": [400, 510, 307, 257, 568, 538, 568, 6181, 11, 2597, 11, 805, 538, 805, 6181, 568, 40863, 13], "temperature": 0.0, "avg_logprob": -0.10945429673066011, "compression_ratio": 1.6643835616438356, "no_speech_prob": 2.5215592813765397e-06}, {"id": 845, "seek": 366004, "start": 3665.32, "end": 3667.84, "text": " As you can see, rows by columns.", "tokens": [1018, 291, 393, 536, 11, 13241, 538, 13766, 13], "temperature": 0.0, "avg_logprob": -0.10945429673066011, "compression_ratio": 1.6643835616438356, "no_speech_prob": 2.5215592813765397e-06}, {"id": 846, "seek": 366004, "start": 3667.84, "end": 3681.44, "text": " So here's what happens if we broadcast this to be the shape of M.", "tokens": [407, 510, 311, 437, 2314, 498, 321, 9975, 341, 281, 312, 264, 3909, 295, 376, 13], "temperature": 0.0, "avg_logprob": -0.10945429673066011, "compression_ratio": 1.6643835616438356, "no_speech_prob": 2.5215592813765397e-06}, {"id": 847, "seek": 366004, "start": 3681.44, "end": 3689.56, "text": " And here is the result of that C plus M. And here's what happens if we broadcast this to", "tokens": [400, 510, 307, 264, 1874, 295, 300, 383, 1804, 376, 13, 400, 510, 311, 437, 2314, 498, 321, 9975, 341, 281], "temperature": 0.0, "avg_logprob": -0.10945429673066011, "compression_ratio": 1.6643835616438356, "no_speech_prob": 2.5215592813765397e-06}, {"id": 848, "seek": 368956, "start": 3689.56, "end": 3691.48, "text": " that shape.", "tokens": [300, 3909, 13], "temperature": 0.0, "avg_logprob": -0.14910605858112203, "compression_ratio": 1.3028169014084507, "no_speech_prob": 7.411063052131794e-06}, {"id": 849, "seek": 368956, "start": 3691.48, "end": 3695.7999999999997, "text": " And here is the result of that addition.", "tokens": [400, 510, 307, 264, 1874, 295, 300, 4500, 13], "temperature": 0.0, "avg_logprob": -0.14910605858112203, "compression_ratio": 1.3028169014084507, "no_speech_prob": 7.411063052131794e-06}, {"id": 850, "seek": 368956, "start": 3695.7999999999997, "end": 3703.4, "text": " There it is, 11, 12, 13, 24, 25, 26.", "tokens": [821, 309, 307, 11, 2975, 11, 2272, 11, 3705, 11, 4022, 11, 3552, 11, 7551, 13], "temperature": 0.0, "avg_logprob": -0.14910605858112203, "compression_ratio": 1.3028169014084507, "no_speech_prob": 7.411063052131794e-06}, {"id": 851, "seek": 368956, "start": 3703.4, "end": 3712.7999999999997, "text": " So basically what's happening is when we broadcast, it's taking the thing which has a unit axis", "tokens": [407, 1936, 437, 311, 2737, 307, 562, 321, 9975, 11, 309, 311, 1940, 264, 551, 597, 575, 257, 4985, 10298], "temperature": 0.0, "avg_logprob": -0.14910605858112203, "compression_ratio": 1.3028169014084507, "no_speech_prob": 7.411063052131794e-06}, {"id": 852, "seek": 371280, "start": 3712.8, "end": 3720.1600000000003, "text": " and is kind of effectively copying that unit axis so it is as long as the larger tensor", "tokens": [293, 307, 733, 295, 8659, 27976, 300, 4985, 10298, 370, 309, 307, 382, 938, 382, 264, 4833, 40863], "temperature": 0.0, "avg_logprob": -0.08818718103262094, "compression_ratio": 1.4594594594594594, "no_speech_prob": 3.138116653644829e-06}, {"id": 853, "seek": 371280, "start": 3720.1600000000003, "end": 3721.1600000000003, "text": " on that axis.", "tokens": [322, 300, 10298, 13], "temperature": 0.0, "avg_logprob": -0.08818718103262094, "compression_ratio": 1.4594594594594594, "no_speech_prob": 3.138116653644829e-06}, {"id": 854, "seek": 371280, "start": 3721.1600000000003, "end": 3722.96, "text": " But it doesn't really copy it.", "tokens": [583, 309, 1177, 380, 534, 5055, 309, 13], "temperature": 0.0, "avg_logprob": -0.08818718103262094, "compression_ratio": 1.4594594594594594, "no_speech_prob": 3.138116653644829e-06}, {"id": 855, "seek": 371280, "start": 3722.96, "end": 3726.76, "text": " It just pretends as if it's been copied.", "tokens": [467, 445, 1162, 2581, 382, 498, 309, 311, 668, 25365, 13], "temperature": 0.0, "avg_logprob": -0.08818718103262094, "compression_ratio": 1.4594594594594594, "no_speech_prob": 3.138116653644829e-06}, {"id": 856, "seek": 371280, "start": 3726.76, "end": 3734.38, "text": " So we can use that to get rid of our loop.", "tokens": [407, 321, 393, 764, 300, 281, 483, 3973, 295, 527, 6367, 13], "temperature": 0.0, "avg_logprob": -0.08818718103262094, "compression_ratio": 1.4594594594594594, "no_speech_prob": 3.138116653644829e-06}, {"id": 857, "seek": 373438, "start": 3734.38, "end": 3746.2200000000003, "text": " So this was the loop we were trying to get rid of, going through each of range BC.", "tokens": [407, 341, 390, 264, 6367, 321, 645, 1382, 281, 483, 3973, 295, 11, 516, 807, 1184, 295, 3613, 14359, 13], "temperature": 0.0, "avg_logprob": -0.13642779149507223, "compression_ratio": 1.524390243902439, "no_speech_prob": 9.27633891478763e-07}, {"id": 858, "seek": 373438, "start": 3746.2200000000003, "end": 3747.76, "text": " And so here it is.", "tokens": [400, 370, 510, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.13642779149507223, "compression_ratio": 1.524390243902439, "no_speech_prob": 9.27633891478763e-07}, {"id": 859, "seek": 373438, "start": 3747.76, "end": 3750.84, "text": " So now we are not anymore going through that loop.", "tokens": [407, 586, 321, 366, 406, 3602, 516, 807, 300, 6367, 13], "temperature": 0.0, "avg_logprob": -0.13642779149507223, "compression_ratio": 1.524390243902439, "no_speech_prob": 9.27633891478763e-07}, {"id": 860, "seek": 373438, "start": 3750.84, "end": 3758.7200000000003, "text": " So now rather than setting CI, J, we can set the entire row of CI.", "tokens": [407, 586, 2831, 813, 3287, 37777, 11, 508, 11, 321, 393, 992, 264, 2302, 5386, 295, 37777, 13], "temperature": 0.0, "avg_logprob": -0.13642779149507223, "compression_ratio": 1.524390243902439, "no_speech_prob": 9.27633891478763e-07}, {"id": 861, "seek": 373438, "start": 3758.7200000000003, "end": 3762.9, "text": " This is the same as CI, colon.", "tokens": [639, 307, 264, 912, 382, 37777, 11, 8255, 13], "temperature": 0.0, "avg_logprob": -0.13642779149507223, "compression_ratio": 1.524390243902439, "no_speech_prob": 9.27633891478763e-07}, {"id": 862, "seek": 376290, "start": 3762.9, "end": 3771.44, "text": " Anytime there's a trailing colon in NumPy or PyTorch, you can delete it, optionally.", "tokens": [39401, 456, 311, 257, 944, 4883, 8255, 294, 22592, 47, 88, 420, 9953, 51, 284, 339, 11, 291, 393, 12097, 309, 11, 3614, 379, 13], "temperature": 0.0, "avg_logprob": -0.27289214788698685, "compression_ratio": 1.4256410256410257, "no_speech_prob": 3.1874644719209755e-06}, {"id": 863, "seek": 376290, "start": 3771.44, "end": 3772.92, "text": " You don't have to.", "tokens": [509, 500, 380, 362, 281, 13], "temperature": 0.0, "avg_logprob": -0.27289214788698685, "compression_ratio": 1.4256410256410257, "no_speech_prob": 3.1874644719209755e-06}, {"id": 864, "seek": 376290, "start": 3772.92, "end": 3775.84, "text": " So before we had a few of those.", "tokens": [407, 949, 321, 632, 257, 1326, 295, 729, 13], "temperature": 0.0, "avg_logprob": -0.27289214788698685, "compression_ratio": 1.4256410256410257, "no_speech_prob": 3.1874644719209755e-06}, {"id": 865, "seek": 376290, "start": 3775.84, "end": 3783.84, "text": " Let's see if we can find one.", "tokens": [961, 311, 536, 498, 321, 393, 915, 472, 13], "temperature": 0.0, "avg_logprob": -0.27289214788698685, "compression_ratio": 1.4256410256410257, "no_speech_prob": 3.1874644719209755e-06}, {"id": 866, "seek": 376290, "start": 3783.84, "end": 3785.96, "text": " Here's one, comma, colon.", "tokens": [1692, 311, 472, 11, 22117, 11, 8255, 13], "temperature": 0.0, "avg_logprob": -0.27289214788698685, "compression_ratio": 1.4256410256410257, "no_speech_prob": 3.1874644719209755e-06}, {"id": 867, "seek": 376290, "start": 3785.96, "end": 3787.64, "text": " So I'm claiming we could have got rid of that.", "tokens": [407, 286, 478, 19232, 321, 727, 362, 658, 3973, 295, 300, 13], "temperature": 0.0, "avg_logprob": -0.27289214788698685, "compression_ratio": 1.4256410256410257, "no_speech_prob": 3.1874644719209755e-06}, {"id": 868, "seek": 376290, "start": 3787.64, "end": 3788.64, "text": " Let's see.", "tokens": [961, 311, 536, 13], "temperature": 0.0, "avg_logprob": -0.27289214788698685, "compression_ratio": 1.4256410256410257, "no_speech_prob": 3.1874644719209755e-06}, {"id": 869, "seek": 376290, "start": 3788.64, "end": 3789.64, "text": " Yep.", "tokens": [7010, 13], "temperature": 0.0, "avg_logprob": -0.27289214788698685, "compression_ratio": 1.4256410256410257, "no_speech_prob": 3.1874644719209755e-06}, {"id": 870, "seek": 376290, "start": 3789.64, "end": 3791.84, "text": " Still torch size 1, 3.", "tokens": [8291, 27822, 2744, 502, 11, 805, 13], "temperature": 0.0, "avg_logprob": -0.27289214788698685, "compression_ratio": 1.4256410256410257, "no_speech_prob": 3.1874644719209755e-06}, {"id": 871, "seek": 379184, "start": 3791.84, "end": 3799.6800000000003, "text": " And similar thing, anytime you see any number of colon commas at the start, you can replace", "tokens": [400, 2531, 551, 11, 13038, 291, 536, 604, 1230, 295, 8255, 800, 296, 412, 264, 722, 11, 291, 393, 7406], "temperature": 0.0, "avg_logprob": -0.14598717820753745, "compression_ratio": 1.5868725868725868, "no_speech_prob": 7.071688742144033e-06}, {"id": 872, "seek": 379184, "start": 3799.6800000000003, "end": 3802.76, "text": " them with a single ellipsis.", "tokens": [552, 365, 257, 2167, 8284, 2600, 271, 13], "temperature": 0.0, "avg_logprob": -0.14598717820753745, "compression_ratio": 1.5868725868725868, "no_speech_prob": 7.071688742144033e-06}, {"id": 873, "seek": 379184, "start": 3802.76, "end": 3805.54, "text": " Which in this case doesn't save us anything because there's only one of these.", "tokens": [3013, 294, 341, 1389, 1177, 380, 3155, 505, 1340, 570, 456, 311, 787, 472, 295, 613, 13], "temperature": 0.0, "avg_logprob": -0.14598717820753745, "compression_ratio": 1.5868725868725868, "no_speech_prob": 7.071688742144033e-06}, {"id": 874, "seek": 379184, "start": 3805.54, "end": 3810.04, "text": " But if you've got a really high-ranked tensor, that can be super convenient.", "tokens": [583, 498, 291, 600, 658, 257, 534, 1090, 12, 20479, 292, 40863, 11, 300, 393, 312, 1687, 10851, 13], "temperature": 0.0, "avg_logprob": -0.14598717820753745, "compression_ratio": 1.5868725868725868, "no_speech_prob": 7.071688742144033e-06}, {"id": 875, "seek": 379184, "start": 3810.04, "end": 3813.42, "text": " Especially if you want to do something where the rank of the tensor could vary.", "tokens": [8545, 498, 291, 528, 281, 360, 746, 689, 264, 6181, 295, 264, 40863, 727, 10559, 13], "temperature": 0.0, "avg_logprob": -0.14598717820753745, "compression_ratio": 1.5868725868725868, "no_speech_prob": 7.071688742144033e-06}, {"id": 876, "seek": 379184, "start": 3813.42, "end": 3820.88, "text": " You don't know how big it's going to be ahead of time.", "tokens": [509, 500, 380, 458, 577, 955, 309, 311, 516, 281, 312, 2286, 295, 565, 13], "temperature": 0.0, "avg_logprob": -0.14598717820753745, "compression_ratio": 1.5868725868725868, "no_speech_prob": 7.071688742144033e-06}, {"id": 877, "seek": 382088, "start": 3820.88, "end": 3826.6400000000003, "text": " So we're going to set the whole of row i, and we don't need that colon, although it", "tokens": [407, 321, 434, 516, 281, 992, 264, 1379, 295, 5386, 741, 11, 293, 321, 500, 380, 643, 300, 8255, 11, 4878, 309], "temperature": 0.0, "avg_logprob": -0.11832398718053644, "compression_ratio": 1.7261146496815287, "no_speech_prob": 7.646364792890381e-06}, {"id": 878, "seek": 382088, "start": 3826.6400000000003, "end": 3828.76, "text": " doesn't matter if it's there.", "tokens": [1177, 380, 1871, 498, 309, 311, 456, 13], "temperature": 0.0, "avg_logprob": -0.11832398718053644, "compression_ratio": 1.7261146496815287, "no_speech_prob": 7.646364792890381e-06}, {"id": 879, "seek": 382088, "start": 3828.76, "end": 3835.8, "text": " And we're going to set it to the whole of row i of a.", "tokens": [400, 321, 434, 516, 281, 992, 309, 281, 264, 1379, 295, 5386, 741, 295, 257, 13], "temperature": 0.0, "avg_logprob": -0.11832398718053644, "compression_ratio": 1.7261146496815287, "no_speech_prob": 7.646364792890381e-06}, {"id": 880, "seek": 382088, "start": 3835.8, "end": 3841.84, "text": " And then now that we've got row i of a, that is a rank 1 tensor.", "tokens": [400, 550, 586, 300, 321, 600, 658, 5386, 741, 295, 257, 11, 300, 307, 257, 6181, 502, 40863, 13], "temperature": 0.0, "avg_logprob": -0.11832398718053644, "compression_ratio": 1.7261146496815287, "no_speech_prob": 7.646364792890381e-06}, {"id": 881, "seek": 382088, "start": 3841.84, "end": 3845.88, "text": " So let's turn it into a rank 2 tensor.", "tokens": [407, 718, 311, 1261, 309, 666, 257, 6181, 568, 40863, 13], "temperature": 0.0, "avg_logprob": -0.11832398718053644, "compression_ratio": 1.7261146496815287, "no_speech_prob": 7.646364792890381e-06}, {"id": 882, "seek": 384588, "start": 3845.88, "end": 3851.52, "text": " So it's now got a new, and see how this is minus 1?", "tokens": [407, 309, 311, 586, 658, 257, 777, 11, 293, 536, 577, 341, 307, 3175, 502, 30], "temperature": 0.0, "avg_logprob": -0.13836867122326868, "compression_ratio": 1.45, "no_speech_prob": 5.093600975669688e-06}, {"id": 883, "seek": 384588, "start": 3851.52, "end": 3855.84, "text": " So minus 1 always means the last dimension.", "tokens": [407, 3175, 502, 1009, 1355, 264, 1036, 10139, 13], "temperature": 0.0, "avg_logprob": -0.13836867122326868, "compression_ratio": 1.45, "no_speech_prob": 5.093600975669688e-06}, {"id": 884, "seek": 384588, "start": 3855.84, "end": 3858.44, "text": " So how else could we have written that?", "tokens": [407, 577, 1646, 727, 321, 362, 3720, 300, 30], "temperature": 0.0, "avg_logprob": -0.13836867122326868, "compression_ratio": 1.45, "no_speech_prob": 5.093600975669688e-06}, {"id": 885, "seek": 384588, "start": 3858.44, "end": 3868.1800000000003, "text": " We could also have written it like that, with a special value none.", "tokens": [492, 727, 611, 362, 3720, 309, 411, 300, 11, 365, 257, 2121, 2158, 6022, 13], "temperature": 0.0, "avg_logprob": -0.13836867122326868, "compression_ratio": 1.45, "no_speech_prob": 5.093600975669688e-06}, {"id": 886, "seek": 386818, "start": 3868.18, "end": 3878.44, "text": " So this is of now length, whatever the size of a is, which is ar.", "tokens": [407, 341, 307, 295, 586, 4641, 11, 2035, 264, 2744, 295, 257, 307, 11, 597, 307, 594, 13], "temperature": 0.0, "avg_logprob": -0.13197090314782184, "compression_ratio": 1.4962406015037595, "no_speech_prob": 1.2098342949684593e-06}, {"id": 887, "seek": 386818, "start": 3878.44, "end": 3883.7599999999998, "text": " So it's of length, it's of shape ar, 1.", "tokens": [407, 309, 311, 295, 4641, 11, 309, 311, 295, 3909, 594, 11, 502, 13], "temperature": 0.0, "avg_logprob": -0.13197090314782184, "compression_ratio": 1.4962406015037595, "no_speech_prob": 1.2098342949684593e-06}, {"id": 888, "seek": 386818, "start": 3883.7599999999998, "end": 3890.12, "text": " So that is a rank 2 tensor.", "tokens": [407, 300, 307, 257, 6181, 568, 40863, 13], "temperature": 0.0, "avg_logprob": -0.13197090314782184, "compression_ratio": 1.4962406015037595, "no_speech_prob": 1.2098342949684593e-06}, {"id": 889, "seek": 386818, "start": 3890.12, "end": 3891.96, "text": " And b is also a rank 2 tensor.", "tokens": [400, 272, 307, 611, 257, 6181, 568, 40863, 13], "temperature": 0.0, "avg_logprob": -0.13197090314782184, "compression_ratio": 1.4962406015037595, "no_speech_prob": 1.2098342949684593e-06}, {"id": 890, "seek": 386818, "start": 3891.96, "end": 3895.2799999999997, "text": " That's the entirety of our matrix.", "tokens": [663, 311, 264, 31557, 295, 527, 8141, 13], "temperature": 0.0, "avg_logprob": -0.13197090314782184, "compression_ratio": 1.4962406015037595, "no_speech_prob": 1.2098342949684593e-06}, {"id": 891, "seek": 389528, "start": 3895.28, "end": 3899.6000000000004, "text": " And so this is going to get broadcast over this.", "tokens": [400, 370, 341, 307, 516, 281, 483, 9975, 670, 341, 13], "temperature": 0.0, "avg_logprob": -0.09351780729473762, "compression_ratio": 1.766990291262136, "no_speech_prob": 3.7852801142435055e-06}, {"id": 892, "seek": 389528, "start": 3899.6000000000004, "end": 3901.32, "text": " It is exactly what we want.", "tokens": [467, 307, 2293, 437, 321, 528, 13], "temperature": 0.0, "avg_logprob": -0.09351780729473762, "compression_ratio": 1.766990291262136, "no_speech_prob": 3.7852801142435055e-06}, {"id": 893, "seek": 389528, "start": 3901.32, "end": 3903.32, "text": " We want it to get rid of that loop.", "tokens": [492, 528, 309, 281, 483, 3973, 295, 300, 6367, 13], "temperature": 0.0, "avg_logprob": -0.09351780729473762, "compression_ratio": 1.766990291262136, "no_speech_prob": 3.7852801142435055e-06}, {"id": 894, "seek": 389528, "start": 3903.32, "end": 3907.7200000000003, "text": " And then, so that's going to return, because it broadcasts, it's actually going to return", "tokens": [400, 550, 11, 370, 300, 311, 516, 281, 2736, 11, 570, 309, 9975, 82, 11, 309, 311, 767, 516, 281, 2736], "temperature": 0.0, "avg_logprob": -0.09351780729473762, "compression_ratio": 1.766990291262136, "no_speech_prob": 3.7852801142435055e-06}, {"id": 895, "seek": 389528, "start": 3907.7200000000003, "end": 3909.6400000000003, "text": " a rank 2 tensor.", "tokens": [257, 6181, 568, 40863, 13], "temperature": 0.0, "avg_logprob": -0.09351780729473762, "compression_ratio": 1.766990291262136, "no_speech_prob": 3.7852801142435055e-06}, {"id": 896, "seek": 389528, "start": 3909.6400000000003, "end": 3915.6800000000003, "text": " And then that rank 2 tensor, we want to sum it up over the rows.", "tokens": [400, 550, 300, 6181, 568, 40863, 11, 321, 528, 281, 2408, 309, 493, 670, 264, 13241, 13], "temperature": 0.0, "avg_logprob": -0.09351780729473762, "compression_ratio": 1.766990291262136, "no_speech_prob": 3.7852801142435055e-06}, {"id": 897, "seek": 389528, "start": 3915.6800000000003, "end": 3922.3, "text": " And so sum, you can give it a dimension argument to say which axis to sum over.", "tokens": [400, 370, 2408, 11, 291, 393, 976, 309, 257, 10139, 6770, 281, 584, 597, 10298, 281, 2408, 670, 13], "temperature": 0.0, "avg_logprob": -0.09351780729473762, "compression_ratio": 1.766990291262136, "no_speech_prob": 3.7852801142435055e-06}, {"id": 898, "seek": 392230, "start": 3922.3, "end": 3928.1800000000003, "text": " So this one is kind of our most mind-bending broadcast of the lesson.", "tokens": [407, 341, 472, 307, 733, 295, 527, 881, 1575, 12, 65, 2029, 9975, 295, 264, 6898, 13], "temperature": 0.0, "avg_logprob": -0.10087373256683349, "compression_ratio": 1.5054945054945055, "no_speech_prob": 2.4824314550642157e-06}, {"id": 899, "seek": 392230, "start": 3928.1800000000003, "end": 3934.32, "text": " So I'm going to leave this as a bit of homework for you to go back and convince yourself as", "tokens": [407, 286, 478, 516, 281, 1856, 341, 382, 257, 857, 295, 14578, 337, 291, 281, 352, 646, 293, 13447, 1803, 382], "temperature": 0.0, "avg_logprob": -0.10087373256683349, "compression_ratio": 1.5054945054945055, "no_speech_prob": 2.4824314550642157e-06}, {"id": 900, "seek": 392230, "start": 3934.32, "end": 3935.4, "text": " to why this works.", "tokens": [281, 983, 341, 1985, 13], "temperature": 0.0, "avg_logprob": -0.10087373256683349, "compression_ratio": 1.5054945054945055, "no_speech_prob": 2.4824314550642157e-06}, {"id": 901, "seek": 392230, "start": 3935.4, "end": 3942.5600000000004, "text": " So maybe put it in Excel, or do it on paper, if it's not already clear to you why this", "tokens": [407, 1310, 829, 309, 294, 19060, 11, 420, 360, 309, 322, 3035, 11, 498, 309, 311, 406, 1217, 1850, 281, 291, 983, 341], "temperature": 0.0, "avg_logprob": -0.10087373256683349, "compression_ratio": 1.5054945054945055, "no_speech_prob": 2.4824314550642157e-06}, {"id": 902, "seek": 392230, "start": 3942.5600000000004, "end": 3943.5600000000004, "text": " works.", "tokens": [1985, 13], "temperature": 0.0, "avg_logprob": -0.10087373256683349, "compression_ratio": 1.5054945054945055, "no_speech_prob": 2.4824314550642157e-06}, {"id": 903, "seek": 394356, "start": 3943.56, "end": 3953.72, "text": " But this is sure handy, because before we were broadcasting that, we were at 1.39 milliseconds.", "tokens": [583, 341, 307, 988, 13239, 11, 570, 949, 321, 645, 30024, 300, 11, 321, 645, 412, 502, 13, 12493, 34184, 13], "temperature": 0.0, "avg_logprob": -0.09110679626464843, "compression_ratio": 1.5231481481481481, "no_speech_prob": 2.9022819489910034e-06}, {"id": 904, "seek": 394356, "start": 3953.72, "end": 3958.7599999999998, "text": " After using that broadcasting, we're down to 250 microseconds.", "tokens": [2381, 1228, 300, 30024, 11, 321, 434, 760, 281, 11650, 3123, 37841, 28750, 13], "temperature": 0.0, "avg_logprob": -0.09110679626464843, "compression_ratio": 1.5231481481481481, "no_speech_prob": 2.9022819489910034e-06}, {"id": 905, "seek": 394356, "start": 3958.7599999999998, "end": 3966.72, "text": " So at this point, we're now 3,200 times faster than Python.", "tokens": [407, 412, 341, 935, 11, 321, 434, 586, 805, 11, 7629, 1413, 4663, 813, 15329, 13], "temperature": 0.0, "avg_logprob": -0.09110679626464843, "compression_ratio": 1.5231481481481481, "no_speech_prob": 2.9022819489910034e-06}, {"id": 906, "seek": 394356, "start": 3966.72, "end": 3967.7999999999997, "text": " And it's not just speed.", "tokens": [400, 309, 311, 406, 445, 3073, 13], "temperature": 0.0, "avg_logprob": -0.09110679626464843, "compression_ratio": 1.5231481481481481, "no_speech_prob": 2.9022819489910034e-06}, {"id": 907, "seek": 394356, "start": 3967.7999999999997, "end": 3972.4, "text": " Once you get used to this style of coding, getting rid of these loops, I find, really", "tokens": [3443, 291, 483, 1143, 281, 341, 3758, 295, 17720, 11, 1242, 3973, 295, 613, 16121, 11, 286, 915, 11, 534], "temperature": 0.0, "avg_logprob": -0.09110679626464843, "compression_ratio": 1.5231481481481481, "no_speech_prob": 2.9022819489910034e-06}, {"id": 908, "seek": 397240, "start": 3972.4, "end": 3976.04, "text": " reduces a lot of errors in my code.", "tokens": [18081, 257, 688, 295, 13603, 294, 452, 3089, 13], "temperature": 0.0, "avg_logprob": -0.11967174285048739, "compression_ratio": 1.6363636363636365, "no_speech_prob": 3.611859938246198e-06}, {"id": 909, "seek": 397240, "start": 3976.04, "end": 3978.96, "text": " It takes a while to get used to, but once you're used to it, it's a really comfortable", "tokens": [467, 2516, 257, 1339, 281, 483, 1143, 281, 11, 457, 1564, 291, 434, 1143, 281, 309, 11, 309, 311, 257, 534, 4619], "temperature": 0.0, "avg_logprob": -0.11967174285048739, "compression_ratio": 1.6363636363636365, "no_speech_prob": 3.611859938246198e-06}, {"id": 910, "seek": 397240, "start": 3978.96, "end": 3983.96, "text": " way of programming.", "tokens": [636, 295, 9410, 13], "temperature": 0.0, "avg_logprob": -0.11967174285048739, "compression_ratio": 1.6363636363636365, "no_speech_prob": 3.611859938246198e-06}, {"id": 911, "seek": 397240, "start": 3983.96, "end": 3989.8, "text": " Once you get to kind of higher ranked tensors, this broadcasting can start getting a bit", "tokens": [3443, 291, 483, 281, 733, 295, 2946, 20197, 10688, 830, 11, 341, 30024, 393, 722, 1242, 257, 857], "temperature": 0.0, "avg_logprob": -0.11967174285048739, "compression_ratio": 1.6363636363636365, "no_speech_prob": 3.611859938246198e-06}, {"id": 912, "seek": 397240, "start": 3989.8, "end": 3990.8, "text": " complicated.", "tokens": [6179, 13], "temperature": 0.0, "avg_logprob": -0.11967174285048739, "compression_ratio": 1.6363636363636365, "no_speech_prob": 3.611859938246198e-06}, {"id": 913, "seek": 397240, "start": 3990.8, "end": 3995.28, "text": " So what you need to do instead of trying to keep it all in your head is apply the simple", "tokens": [407, 437, 291, 643, 281, 360, 2602, 295, 1382, 281, 1066, 309, 439, 294, 428, 1378, 307, 3079, 264, 2199], "temperature": 0.0, "avg_logprob": -0.11967174285048739, "compression_ratio": 1.6363636363636365, "no_speech_prob": 3.611859938246198e-06}, {"id": 914, "seek": 397240, "start": 3995.28, "end": 3998.96, "text": " broadcasting rules.", "tokens": [30024, 4474, 13], "temperature": 0.0, "avg_logprob": -0.11967174285048739, "compression_ratio": 1.6363636363636365, "no_speech_prob": 3.611859938246198e-06}, {"id": 915, "seek": 397240, "start": 3998.96, "end": 3999.96, "text": " Here are the rules.", "tokens": [1692, 366, 264, 4474, 13], "temperature": 0.0, "avg_logprob": -0.11967174285048739, "compression_ratio": 1.6363636363636365, "no_speech_prob": 3.611859938246198e-06}, {"id": 916, "seek": 397240, "start": 3999.96, "end": 4000.96, "text": " I've listed them here.", "tokens": [286, 600, 10052, 552, 510, 13], "temperature": 0.0, "avg_logprob": -0.11967174285048739, "compression_ratio": 1.6363636363636365, "no_speech_prob": 3.611859938246198e-06}, {"id": 917, "seek": 400096, "start": 4000.96, "end": 4003.44, "text": " You can find them in NumPy and PyTorch and TensorFlow.", "tokens": [509, 393, 915, 552, 294, 22592, 47, 88, 293, 9953, 51, 284, 339, 293, 37624, 13], "temperature": 0.0, "avg_logprob": -0.20690072003532858, "compression_ratio": 1.4093264248704662, "no_speech_prob": 4.7849157454038505e-06}, {"id": 918, "seek": 400096, "start": 4003.44, "end": 4005.16, "text": " It's all the same rules.", "tokens": [467, 311, 439, 264, 912, 4474, 13], "temperature": 0.0, "avg_logprob": -0.20690072003532858, "compression_ratio": 1.4093264248704662, "no_speech_prob": 4.7849157454038505e-06}, {"id": 919, "seek": 400096, "start": 4005.16, "end": 4011.32, "text": " What we do is we compare the shapes element-wise.", "tokens": [708, 321, 360, 307, 321, 6794, 264, 10854, 4478, 12, 3711, 13], "temperature": 0.0, "avg_logprob": -0.20690072003532858, "compression_ratio": 1.4093264248704662, "no_speech_prob": 4.7849157454038505e-06}, {"id": 920, "seek": 400096, "start": 4011.32, "end": 4018.32, "text": " So let's look at a slightly interesting example.", "tokens": [407, 718, 311, 574, 412, 257, 4748, 1880, 1365, 13], "temperature": 0.0, "avg_logprob": -0.20690072003532858, "compression_ratio": 1.4093264248704662, "no_speech_prob": 4.7849157454038505e-06}, {"id": 921, "seek": 400096, "start": 4018.32, "end": 4026.32, "text": " Here is our rank one tensor C, and let's insert a leading unit axis.", "tokens": [1692, 307, 527, 6181, 472, 40863, 383, 11, 293, 718, 311, 8969, 257, 5775, 4985, 10298, 13], "temperature": 0.0, "avg_logprob": -0.20690072003532858, "compression_ratio": 1.4093264248704662, "no_speech_prob": 4.7849157454038505e-06}, {"id": 922, "seek": 400096, "start": 4026.32, "end": 4028.2400000000002, "text": " So this is a shape 1, 3.", "tokens": [407, 341, 307, 257, 3909, 502, 11, 805, 13], "temperature": 0.0, "avg_logprob": -0.20690072003532858, "compression_ratio": 1.4093264248704662, "no_speech_prob": 4.7849157454038505e-06}, {"id": 923, "seek": 402824, "start": 4028.24, "end": 4031.7599999999998, "text": " See how there's two square brackets?", "tokens": [3008, 577, 456, 311, 732, 3732, 26179, 30], "temperature": 0.0, "avg_logprob": -0.21525209161299694, "compression_ratio": 1.49079754601227, "no_speech_prob": 1.2218426491017453e-05}, {"id": 924, "seek": 402824, "start": 4031.7599999999998, "end": 4035.04, "text": " And here's the version with a...", "tokens": [400, 510, 311, 264, 3037, 365, 257, 485], "temperature": 0.0, "avg_logprob": -0.21525209161299694, "compression_ratio": 1.49079754601227, "no_speech_prob": 1.2218426491017453e-05}, {"id": 925, "seek": 402824, "start": 4035.04, "end": 4037.4799999999996, "text": " Sorry, this one's a proceeding axis.", "tokens": [4919, 11, 341, 472, 311, 257, 41163, 10298, 13], "temperature": 0.0, "avg_logprob": -0.21525209161299694, "compression_ratio": 1.49079754601227, "no_speech_prob": 1.2218426491017453e-05}, {"id": 926, "seek": 402824, "start": 4037.4799999999996, "end": 4038.72, "text": " This one's a trailing axis.", "tokens": [639, 472, 311, 257, 944, 4883, 10298, 13], "temperature": 0.0, "avg_logprob": -0.21525209161299694, "compression_ratio": 1.49079754601227, "no_speech_prob": 1.2218426491017453e-05}, {"id": 927, "seek": 402824, "start": 4038.72, "end": 4044.0, "text": " So this is a shape 3, 1.", "tokens": [407, 341, 307, 257, 3909, 805, 11, 502, 13], "temperature": 0.0, "avg_logprob": -0.21525209161299694, "compression_ratio": 1.49079754601227, "no_speech_prob": 1.2218426491017453e-05}, {"id": 928, "seek": 402824, "start": 4044.0, "end": 4045.8399999999997, "text": " And we should take a look at that.", "tokens": [400, 321, 820, 747, 257, 574, 412, 300, 13], "temperature": 0.0, "avg_logprob": -0.21525209161299694, "compression_ratio": 1.49079754601227, "no_speech_prob": 1.2218426491017453e-05}, {"id": 929, "seek": 402824, "start": 4045.8399999999997, "end": 4054.2, "text": " So just to remind you, that looks like a column.", "tokens": [407, 445, 281, 4160, 291, 11, 300, 1542, 411, 257, 7738, 13], "temperature": 0.0, "avg_logprob": -0.21525209161299694, "compression_ratio": 1.49079754601227, "no_speech_prob": 1.2218426491017453e-05}, {"id": 930, "seek": 405420, "start": 4054.2, "end": 4061.08, "text": " What if we went C, none, comma, colon, times C, colon, comma, none?", "tokens": [708, 498, 321, 1437, 383, 11, 6022, 11, 22117, 11, 8255, 11, 1413, 383, 11, 8255, 11, 22117, 11, 6022, 30], "temperature": 0.0, "avg_logprob": -0.18435494404918742, "compression_ratio": 1.616504854368932, "no_speech_prob": 7.52789446778479e-06}, {"id": 931, "seek": 405420, "start": 4061.08, "end": 4063.72, "text": " What on earth is that?", "tokens": [708, 322, 4120, 307, 300, 30], "temperature": 0.0, "avg_logprob": -0.18435494404918742, "compression_ratio": 1.616504854368932, "no_speech_prob": 7.52789446778479e-06}, {"id": 932, "seek": 405420, "start": 4063.72, "end": 4067.72, "text": " And so let's go back to Excel.", "tokens": [400, 370, 718, 311, 352, 646, 281, 19060, 13], "temperature": 0.0, "avg_logprob": -0.18435494404918742, "compression_ratio": 1.616504854368932, "no_speech_prob": 7.52789446778479e-06}, {"id": 933, "seek": 405420, "start": 4067.72, "end": 4069.96, "text": " Here's our row version.", "tokens": [1692, 311, 527, 5386, 3037, 13], "temperature": 0.0, "avg_logprob": -0.18435494404918742, "compression_ratio": 1.616504854368932, "no_speech_prob": 7.52789446778479e-06}, {"id": 934, "seek": 405420, "start": 4069.96, "end": 4071.7999999999997, "text": " Here's our column version.", "tokens": [1692, 311, 527, 7738, 3037, 13], "temperature": 0.0, "avg_logprob": -0.18435494404918742, "compression_ratio": 1.616504854368932, "no_speech_prob": 7.52789446778479e-06}, {"id": 935, "seek": 405420, "start": 4071.7999999999997, "end": 4077.16, "text": " What happens is it says, okay, you want to multiply this by this element-wise, right?", "tokens": [708, 2314, 307, 309, 1619, 11, 1392, 11, 291, 528, 281, 12972, 341, 538, 341, 4478, 12, 3711, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.18435494404918742, "compression_ratio": 1.616504854368932, "no_speech_prob": 7.52789446778479e-06}, {"id": 936, "seek": 405420, "start": 4077.16, "end": 4078.4399999999996, "text": " This is not the at sign.", "tokens": [639, 307, 406, 264, 412, 1465, 13], "temperature": 0.0, "avg_logprob": -0.18435494404918742, "compression_ratio": 1.616504854368932, "no_speech_prob": 7.52789446778479e-06}, {"id": 937, "seek": 405420, "start": 4078.4399999999996, "end": 4081.3399999999997, "text": " This is asterisk, so element-wise multiplication.", "tokens": [639, 307, 257, 3120, 7797, 11, 370, 4478, 12, 3711, 27290, 13], "temperature": 0.0, "avg_logprob": -0.18435494404918742, "compression_ratio": 1.616504854368932, "no_speech_prob": 7.52789446778479e-06}, {"id": 938, "seek": 408134, "start": 4081.34, "end": 4088.92, "text": " It broadcasts this to be the same number of rows as that, like so.", "tokens": [467, 9975, 82, 341, 281, 312, 264, 912, 1230, 295, 13241, 382, 300, 11, 411, 370, 13], "temperature": 0.0, "avg_logprob": -0.13764580090840658, "compression_ratio": 1.75, "no_speech_prob": 3.359665186053462e-07}, {"id": 939, "seek": 408134, "start": 4088.92, "end": 4094.56, "text": " And it broadcasts this to be the same number of columns as that, like so.", "tokens": [400, 309, 9975, 82, 341, 281, 312, 264, 912, 1230, 295, 13766, 382, 300, 11, 411, 370, 13], "temperature": 0.0, "avg_logprob": -0.13764580090840658, "compression_ratio": 1.75, "no_speech_prob": 3.359665186053462e-07}, {"id": 940, "seek": 408134, "start": 4094.56, "end": 4100.76, "text": " And then it simply multiplies those together.", "tokens": [400, 550, 309, 2935, 12788, 530, 729, 1214, 13], "temperature": 0.0, "avg_logprob": -0.13764580090840658, "compression_ratio": 1.75, "no_speech_prob": 3.359665186053462e-07}, {"id": 941, "seek": 408134, "start": 4100.76, "end": 4102.04, "text": " That's it, right?", "tokens": [663, 311, 309, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.13764580090840658, "compression_ratio": 1.75, "no_speech_prob": 3.359665186053462e-07}, {"id": 942, "seek": 408134, "start": 4102.04, "end": 4105.28, "text": " So the rule that it's using...", "tokens": [407, 264, 4978, 300, 309, 311, 1228, 485], "temperature": 0.0, "avg_logprob": -0.13764580090840658, "compression_ratio": 1.75, "no_speech_prob": 3.359665186053462e-07}, {"id": 943, "seek": 408134, "start": 4105.28, "end": 4107.88, "text": " You can do the same thing with greater than, right?", "tokens": [509, 393, 360, 264, 912, 551, 365, 5044, 813, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.13764580090840658, "compression_ratio": 1.75, "no_speech_prob": 3.359665186053462e-07}, {"id": 944, "seek": 410788, "start": 4107.88, "end": 4112.92, "text": " The rule that it's using is, let's look at the two shapes, 1, 3, and 3, 1, and see if", "tokens": [440, 4978, 300, 309, 311, 1228, 307, 11, 718, 311, 574, 412, 264, 732, 10854, 11, 502, 11, 805, 11, 293, 805, 11, 502, 11, 293, 536, 498], "temperature": 0.0, "avg_logprob": -0.12028073863822873, "compression_ratio": 1.8796296296296295, "no_speech_prob": 1.0289348210790195e-05}, {"id": 945, "seek": 410788, "start": 4112.92, "end": 4115.12, "text": " they're compatible.", "tokens": [436, 434, 18218, 13], "temperature": 0.0, "avg_logprob": -0.12028073863822873, "compression_ratio": 1.8796296296296295, "no_speech_prob": 1.0289348210790195e-05}, {"id": 946, "seek": 410788, "start": 4115.12, "end": 4122.66, "text": " They're compatible if element-wise they're either the same number or one of them is 1.", "tokens": [814, 434, 18218, 498, 4478, 12, 3711, 436, 434, 2139, 264, 912, 1230, 420, 472, 295, 552, 307, 502, 13], "temperature": 0.0, "avg_logprob": -0.12028073863822873, "compression_ratio": 1.8796296296296295, "no_speech_prob": 1.0289348210790195e-05}, {"id": 947, "seek": 410788, "start": 4122.66, "end": 4127.400000000001, "text": " So in this case, 1 is compatible with 3 because one of them is 1.", "tokens": [407, 294, 341, 1389, 11, 502, 307, 18218, 365, 805, 570, 472, 295, 552, 307, 502, 13], "temperature": 0.0, "avg_logprob": -0.12028073863822873, "compression_ratio": 1.8796296296296295, "no_speech_prob": 1.0289348210790195e-05}, {"id": 948, "seek": 410788, "start": 4127.400000000001, "end": 4131.2, "text": " And 3 is compatible with 1 because one of them is 1.", "tokens": [400, 805, 307, 18218, 365, 502, 570, 472, 295, 552, 307, 502, 13], "temperature": 0.0, "avg_logprob": -0.12028073863822873, "compression_ratio": 1.8796296296296295, "no_speech_prob": 1.0289348210790195e-05}, {"id": 949, "seek": 410788, "start": 4131.2, "end": 4137.16, "text": " And so what happens is, if it's 1, that dimension is broadcast to make it the same size as the", "tokens": [400, 370, 437, 2314, 307, 11, 498, 309, 311, 502, 11, 300, 10139, 307, 9975, 281, 652, 309, 264, 912, 2744, 382, 264], "temperature": 0.0, "avg_logprob": -0.12028073863822873, "compression_ratio": 1.8796296296296295, "no_speech_prob": 1.0289348210790195e-05}, {"id": 950, "seek": 413716, "start": 4137.16, "end": 4139.639999999999, "text": " bigger one.", "tokens": [3801, 472, 13], "temperature": 0.0, "avg_logprob": -0.08505373858333973, "compression_ratio": 1.7219251336898396, "no_speech_prob": 2.8572840164997615e-06}, {"id": 951, "seek": 413716, "start": 4139.639999999999, "end": 4143.639999999999, "text": " So 3, 1 became 3, 3.", "tokens": [407, 805, 11, 502, 3062, 805, 11, 805, 13], "temperature": 0.0, "avg_logprob": -0.08505373858333973, "compression_ratio": 1.7219251336898396, "no_speech_prob": 2.8572840164997615e-06}, {"id": 952, "seek": 413716, "start": 4143.639999999999, "end": 4147.92, "text": " So this one was multiplied three times down the rows, and this one was multiplied three", "tokens": [407, 341, 472, 390, 17207, 1045, 1413, 760, 264, 13241, 11, 293, 341, 472, 390, 17207, 1045], "temperature": 0.0, "avg_logprob": -0.08505373858333973, "compression_ratio": 1.7219251336898396, "no_speech_prob": 2.8572840164997615e-06}, {"id": 953, "seek": 413716, "start": 4147.92, "end": 4151.2, "text": " times down the columns.", "tokens": [1413, 760, 264, 13766, 13], "temperature": 0.0, "avg_logprob": -0.08505373858333973, "compression_ratio": 1.7219251336898396, "no_speech_prob": 2.8572840164997615e-06}, {"id": 954, "seek": 413716, "start": 4151.2, "end": 4156.5599999999995, "text": " And then there's one more rule, which is that they don't even have to be the same rank.", "tokens": [400, 550, 456, 311, 472, 544, 4978, 11, 597, 307, 300, 436, 500, 380, 754, 362, 281, 312, 264, 912, 6181, 13], "temperature": 0.0, "avg_logprob": -0.08505373858333973, "compression_ratio": 1.7219251336898396, "no_speech_prob": 2.8572840164997615e-06}, {"id": 955, "seek": 413716, "start": 4156.5599999999995, "end": 4164.5199999999995, "text": " So something that we do a lot with image normalization is we normalize images by channel.", "tokens": [407, 746, 300, 321, 360, 257, 688, 365, 3256, 2710, 2144, 307, 321, 2710, 1125, 5267, 538, 2269, 13], "temperature": 0.0, "avg_logprob": -0.08505373858333973, "compression_ratio": 1.7219251336898396, "no_speech_prob": 2.8572840164997615e-06}, {"id": 956, "seek": 416452, "start": 4164.52, "end": 4169.200000000001, "text": " So you might have an image which is 256 by 256 by 3, and then you've got the per channel", "tokens": [407, 291, 1062, 362, 364, 3256, 597, 307, 38882, 538, 38882, 538, 805, 11, 293, 550, 291, 600, 658, 264, 680, 2269], "temperature": 0.0, "avg_logprob": -0.1550350000362585, "compression_ratio": 1.648068669527897, "no_speech_prob": 1.4823477840764099e-06}, {"id": 957, "seek": 416452, "start": 4169.200000000001, "end": 4174.0, "text": " mean, which is just a rank 1 tensor of size 3.", "tokens": [914, 11, 597, 307, 445, 257, 6181, 502, 40863, 295, 2744, 805, 13], "temperature": 0.0, "avg_logprob": -0.1550350000362585, "compression_ratio": 1.648068669527897, "no_speech_prob": 1.4823477840764099e-06}, {"id": 958, "seek": 416452, "start": 4174.0, "end": 4179.4800000000005, "text": " They're actually compatible because what it does is anywhere that there's a missing dimension,", "tokens": [814, 434, 767, 18218, 570, 437, 309, 775, 307, 4992, 300, 456, 311, 257, 5361, 10139, 11], "temperature": 0.0, "avg_logprob": -0.1550350000362585, "compression_ratio": 1.648068669527897, "no_speech_prob": 1.4823477840764099e-06}, {"id": 959, "seek": 416452, "start": 4179.4800000000005, "end": 4182.200000000001, "text": " it inserts a 1 there at the start.", "tokens": [309, 49163, 257, 502, 456, 412, 264, 722, 13], "temperature": 0.0, "avg_logprob": -0.1550350000362585, "compression_ratio": 1.648068669527897, "no_speech_prob": 1.4823477840764099e-06}, {"id": 960, "seek": 416452, "start": 4182.200000000001, "end": 4184.620000000001, "text": " It inserts leading dimensions, inserts a 1.", "tokens": [467, 49163, 5775, 12819, 11, 49163, 257, 502, 13], "temperature": 0.0, "avg_logprob": -0.1550350000362585, "compression_ratio": 1.648068669527897, "no_speech_prob": 1.4823477840764099e-06}, {"id": 961, "seek": 416452, "start": 4184.620000000001, "end": 4191.68, "text": " So that's why actually you can normalize by channel with no lines of code.", "tokens": [407, 300, 311, 983, 767, 291, 393, 2710, 1125, 538, 2269, 365, 572, 3876, 295, 3089, 13], "temperature": 0.0, "avg_logprob": -0.1550350000362585, "compression_ratio": 1.648068669527897, "no_speech_prob": 1.4823477840764099e-06}, {"id": 962, "seek": 419168, "start": 4191.68, "end": 4198.16, "text": " Mind you, in PyTorch, it's actually channel by height by width, so it's slightly different.", "tokens": [13719, 291, 11, 294, 9953, 51, 284, 339, 11, 309, 311, 767, 2269, 538, 6681, 538, 11402, 11, 370, 309, 311, 4748, 819, 13], "temperature": 0.0, "avg_logprob": -0.12475686506791549, "compression_ratio": 1.6085106382978724, "no_speech_prob": 6.540205504279584e-06}, {"id": 963, "seek": 419168, "start": 4198.16, "end": 4200.8, "text": " But this is the basic idea.", "tokens": [583, 341, 307, 264, 3875, 1558, 13], "temperature": 0.0, "avg_logprob": -0.12475686506791549, "compression_ratio": 1.6085106382978724, "no_speech_prob": 6.540205504279584e-06}, {"id": 964, "seek": 419168, "start": 4200.8, "end": 4202.52, "text": " So this is super cool.", "tokens": [407, 341, 307, 1687, 1627, 13], "temperature": 0.0, "avg_logprob": -0.12475686506791549, "compression_ratio": 1.6085106382978724, "no_speech_prob": 6.540205504279584e-06}, {"id": 965, "seek": 419168, "start": 4202.52, "end": 4206.400000000001, "text": " We're going to take a break, but we're getting pretty close.", "tokens": [492, 434, 516, 281, 747, 257, 1821, 11, 457, 321, 434, 1242, 1238, 1998, 13], "temperature": 0.0, "avg_logprob": -0.12475686506791549, "compression_ratio": 1.6085106382978724, "no_speech_prob": 6.540205504279584e-06}, {"id": 966, "seek": 419168, "start": 4206.400000000001, "end": 4211.4800000000005, "text": " My goal was to make our Python code 50,000 times faster.", "tokens": [1222, 3387, 390, 281, 652, 527, 15329, 3089, 2625, 11, 1360, 1413, 4663, 13], "temperature": 0.0, "avg_logprob": -0.12475686506791549, "compression_ratio": 1.6085106382978724, "no_speech_prob": 6.540205504279584e-06}, {"id": 967, "seek": 419168, "start": 4211.4800000000005, "end": 4214.04, "text": " We're up to 4,000 times faster.", "tokens": [492, 434, 493, 281, 1017, 11, 1360, 1413, 4663, 13], "temperature": 0.0, "avg_logprob": -0.12475686506791549, "compression_ratio": 1.6085106382978724, "no_speech_prob": 6.540205504279584e-06}, {"id": 968, "seek": 419168, "start": 4214.04, "end": 4219.400000000001, "text": " And the reason this is really important is because if we're going to be doing our own", "tokens": [400, 264, 1778, 341, 307, 534, 1021, 307, 570, 498, 321, 434, 516, 281, 312, 884, 527, 1065], "temperature": 0.0, "avg_logprob": -0.12475686506791549, "compression_ratio": 1.6085106382978724, "no_speech_prob": 6.540205504279584e-06}, {"id": 969, "seek": 421940, "start": 4219.4, "end": 4226.04, "text": " stuff, like building things that people haven't built before, we need to know how to write", "tokens": [1507, 11, 411, 2390, 721, 300, 561, 2378, 380, 3094, 949, 11, 321, 643, 281, 458, 577, 281, 2464], "temperature": 0.0, "avg_logprob": -0.11534453497992622, "compression_ratio": 1.5333333333333334, "no_speech_prob": 1.3630830835609231e-05}, {"id": 970, "seek": 421940, "start": 4226.04, "end": 4231.5199999999995, "text": " code that we can write quickly and concisely, but operates fast enough that it's actually", "tokens": [3089, 300, 321, 393, 2464, 2661, 293, 1588, 271, 736, 11, 457, 22577, 2370, 1547, 300, 309, 311, 767], "temperature": 0.0, "avg_logprob": -0.11534453497992622, "compression_ratio": 1.5333333333333334, "no_speech_prob": 1.3630830835609231e-05}, {"id": 971, "seek": 421940, "start": 4231.5199999999995, "end": 4232.759999999999, "text": " useful.", "tokens": [4420, 13], "temperature": 0.0, "avg_logprob": -0.11534453497992622, "compression_ratio": 1.5333333333333334, "no_speech_prob": 1.3630830835609231e-05}, {"id": 972, "seek": 421940, "start": 4232.759999999999, "end": 4238.74, "text": " And so this broadcasting trick is perhaps the most important trick to know about.", "tokens": [400, 370, 341, 30024, 4282, 307, 4317, 264, 881, 1021, 4282, 281, 458, 466, 13], "temperature": 0.0, "avg_logprob": -0.11534453497992622, "compression_ratio": 1.5333333333333334, "no_speech_prob": 1.3630830835609231e-05}, {"id": 973, "seek": 421940, "start": 4238.74, "end": 4244.5599999999995, "text": " So let's have a six-minute break, and I'll see you back here at 8 o'clock.", "tokens": [407, 718, 311, 362, 257, 2309, 12, 18256, 1821, 11, 293, 286, 603, 536, 291, 646, 510, 412, 1649, 277, 6, 9023, 13], "temperature": 0.0, "avg_logprob": -0.11534453497992622, "compression_ratio": 1.5333333333333334, "no_speech_prob": 1.3630830835609231e-05}, {"id": 974, "seek": 424456, "start": 4244.56, "end": 4254.6, "text": " So broadcasting, you know, when I first started teaching deep learning here, and I asked how", "tokens": [407, 30024, 11, 291, 458, 11, 562, 286, 700, 1409, 4571, 2452, 2539, 510, 11, 293, 286, 2351, 577], "temperature": 0.0, "avg_logprob": -0.11203298897578798, "compression_ratio": 1.7379032258064515, "no_speech_prob": 1.6181082173716277e-05}, {"id": 975, "seek": 424456, "start": 4254.6, "end": 4256.280000000001, "text": " many people are familiar with broadcasting.", "tokens": [867, 561, 366, 4963, 365, 30024, 13], "temperature": 0.0, "avg_logprob": -0.11203298897578798, "compression_ratio": 1.7379032258064515, "no_speech_prob": 1.6181082173716277e-05}, {"id": 976, "seek": 424456, "start": 4256.280000000001, "end": 4258.84, "text": " This is back when we used to do it in Theano.", "tokens": [639, 307, 646, 562, 321, 1143, 281, 360, 309, 294, 440, 3730, 13], "temperature": 0.0, "avg_logprob": -0.11203298897578798, "compression_ratio": 1.7379032258064515, "no_speech_prob": 1.6181082173716277e-05}, {"id": 977, "seek": 424456, "start": 4258.84, "end": 4264.68, "text": " Almost no hands went up, so I used to kind of say this is like my secret magic trick.", "tokens": [12627, 572, 2377, 1437, 493, 11, 370, 286, 1143, 281, 733, 295, 584, 341, 307, 411, 452, 4054, 5585, 4282, 13], "temperature": 0.0, "avg_logprob": -0.11203298897578798, "compression_ratio": 1.7379032258064515, "no_speech_prob": 1.6181082173716277e-05}, {"id": 978, "seek": 424456, "start": 4264.68, "end": 4265.8, "text": " I think it's really cool.", "tokens": [286, 519, 309, 311, 534, 1627, 13], "temperature": 0.0, "avg_logprob": -0.11203298897578798, "compression_ratio": 1.7379032258064515, "no_speech_prob": 1.6181082173716277e-05}, {"id": 979, "seek": 424456, "start": 4265.8, "end": 4269.1, "text": " It's kind of really cool that now half of you have already heard of it, and it's kind", "tokens": [467, 311, 733, 295, 534, 1627, 300, 586, 1922, 295, 291, 362, 1217, 2198, 295, 309, 11, 293, 309, 311, 733], "temperature": 0.0, "avg_logprob": -0.11203298897578798, "compression_ratio": 1.7379032258064515, "no_speech_prob": 1.6181082173716277e-05}, {"id": 980, "seek": 424456, "start": 4269.1, "end": 4271.4400000000005, "text": " of sad because it's now not my secret magic trick.", "tokens": [295, 4227, 570, 309, 311, 586, 406, 452, 4054, 5585, 4282, 13], "temperature": 0.0, "avg_logprob": -0.11203298897578798, "compression_ratio": 1.7379032258064515, "no_speech_prob": 1.6181082173716277e-05}, {"id": 981, "seek": 427144, "start": 4271.44, "end": 4274.759999999999, "text": " It's like, here's something half of you already knew.", "tokens": [467, 311, 411, 11, 510, 311, 746, 1922, 295, 291, 1217, 2586, 13], "temperature": 0.0, "avg_logprob": -0.18832617407446509, "compression_ratio": 1.5637860082304527, "no_speech_prob": 4.1973933548433706e-05}, {"id": 982, "seek": 427144, "start": 4274.759999999999, "end": 4279.599999999999, "text": " But the other half of you, there's a reason that people are learning this quickly, and", "tokens": [583, 264, 661, 1922, 295, 291, 11, 456, 311, 257, 1778, 300, 561, 366, 2539, 341, 2661, 11, 293], "temperature": 0.0, "avg_logprob": -0.18832617407446509, "compression_ratio": 1.5637860082304527, "no_speech_prob": 4.1973933548433706e-05}, {"id": 983, "seek": 427144, "start": 4279.599999999999, "end": 4282.679999999999, "text": " it's because it's super cool.", "tokens": [309, 311, 570, 309, 311, 1687, 1627, 13], "temperature": 0.0, "avg_logprob": -0.18832617407446509, "compression_ratio": 1.5637860082304527, "no_speech_prob": 4.1973933548433706e-05}, {"id": 984, "seek": 427144, "start": 4282.679999999999, "end": 4283.839999999999, "text": " Here's another magic trick.", "tokens": [1692, 311, 1071, 5585, 4282, 13], "temperature": 0.0, "avg_logprob": -0.18832617407446509, "compression_ratio": 1.5637860082304527, "no_speech_prob": 4.1973933548433706e-05}, {"id": 985, "seek": 427144, "start": 4283.839999999999, "end": 4287.44, "text": " How many people here know Einstein summation notation?", "tokens": [1012, 867, 561, 510, 458, 23486, 28811, 24657, 30], "temperature": 0.0, "avg_logprob": -0.18832617407446509, "compression_ratio": 1.5637860082304527, "no_speech_prob": 4.1973933548433706e-05}, {"id": 986, "seek": 427144, "start": 4287.44, "end": 4289.04, "text": " Okay, good.", "tokens": [1033, 11, 665, 13], "temperature": 0.0, "avg_logprob": -0.18832617407446509, "compression_ratio": 1.5637860082304527, "no_speech_prob": 4.1973933548433706e-05}, {"id": 987, "seek": 427144, "start": 4289.04, "end": 4290.04, "text": " Good.", "tokens": [2205, 13], "temperature": 0.0, "avg_logprob": -0.18832617407446509, "compression_ratio": 1.5637860082304527, "no_speech_prob": 4.1973933548433706e-05}, {"id": 988, "seek": 427144, "start": 4290.04, "end": 4291.04, "text": " Almost nobody.", "tokens": [12627, 5079, 13], "temperature": 0.0, "avg_logprob": -0.18832617407446509, "compression_ratio": 1.5637860082304527, "no_speech_prob": 4.1973933548433706e-05}, {"id": 989, "seek": 427144, "start": 4291.04, "end": 4297.08, "text": " So it's not as cool as broadcasting, but it is still very, very cool.", "tokens": [407, 309, 311, 406, 382, 1627, 382, 30024, 11, 457, 309, 307, 920, 588, 11, 588, 1627, 13], "temperature": 0.0, "avg_logprob": -0.18832617407446509, "compression_ratio": 1.5637860082304527, "no_speech_prob": 4.1973933548433706e-05}, {"id": 990, "seek": 427144, "start": 4297.08, "end": 4298.799999999999, "text": " Let me show you, right?", "tokens": [961, 385, 855, 291, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.18832617407446509, "compression_ratio": 1.5637860082304527, "no_speech_prob": 4.1973933548433706e-05}, {"id": 991, "seek": 429880, "start": 4298.8, "end": 4302.8, "text": " And this is a technique which I don't think it was invented by Einstein.", "tokens": [400, 341, 307, 257, 6532, 597, 286, 500, 380, 519, 309, 390, 14479, 538, 23486, 13], "temperature": 0.0, "avg_logprob": -0.17394703037136203, "compression_ratio": 1.5336322869955157, "no_speech_prob": 2.6271602109773085e-05}, {"id": 992, "seek": 429880, "start": 4302.8, "end": 4308.64, "text": " I think it was popularized by Einstein as a way of dealing with these high-rank tensor", "tokens": [286, 519, 309, 390, 3743, 1602, 538, 23486, 382, 257, 636, 295, 6260, 365, 613, 1090, 12, 20479, 40863], "temperature": 0.0, "avg_logprob": -0.17394703037136203, "compression_ratio": 1.5336322869955157, "no_speech_prob": 2.6271602109773085e-05}, {"id": 993, "seek": 429880, "start": 4308.64, "end": 4314.0, "text": " kind of reductions that he used in the general relativity, I think.", "tokens": [733, 295, 40296, 300, 415, 1143, 294, 264, 2674, 45675, 11, 286, 519, 13], "temperature": 0.0, "avg_logprob": -0.17394703037136203, "compression_ratio": 1.5336322869955157, "no_speech_prob": 2.6271602109773085e-05}, {"id": 994, "seek": 429880, "start": 4314.0, "end": 4315.4800000000005, "text": " Here's the trick.", "tokens": [1692, 311, 264, 4282, 13], "temperature": 0.0, "avg_logprob": -0.17394703037136203, "compression_ratio": 1.5336322869955157, "no_speech_prob": 2.6271602109773085e-05}, {"id": 995, "seek": 429880, "start": 4315.4800000000005, "end": 4323.400000000001, "text": " This is our, the innermost part of our original matrix multiplication for loop.", "tokens": [639, 307, 527, 11, 264, 7714, 966, 555, 644, 295, 527, 3380, 8141, 27290, 337, 6367, 13], "temperature": 0.0, "avg_logprob": -0.17394703037136203, "compression_ratio": 1.5336322869955157, "no_speech_prob": 2.6271602109773085e-05}, {"id": 996, "seek": 429880, "start": 4323.400000000001, "end": 4324.400000000001, "text": " Remember?", "tokens": [5459, 30], "temperature": 0.0, "avg_logprob": -0.17394703037136203, "compression_ratio": 1.5336322869955157, "no_speech_prob": 2.6271602109773085e-05}, {"id": 997, "seek": 429880, "start": 4324.400000000001, "end": 4325.400000000001, "text": " Right?", "tokens": [1779, 30], "temperature": 0.0, "avg_logprob": -0.17394703037136203, "compression_ratio": 1.5336322869955157, "no_speech_prob": 2.6271602109773085e-05}, {"id": 998, "seek": 432540, "start": 4325.4, "end": 4329.799999999999, "text": " Here's the version when we removed the innermost loop and replaced it with an element-wise", "tokens": [1692, 311, 264, 3037, 562, 321, 7261, 264, 7714, 966, 555, 6367, 293, 10772, 309, 365, 364, 4478, 12, 3711], "temperature": 0.0, "avg_logprob": -0.19864582433933164, "compression_ratio": 1.4595959595959596, "no_speech_prob": 2.9771725166938268e-05}, {"id": 999, "seek": 432540, "start": 4329.799999999999, "end": 4330.799999999999, "text": " product.", "tokens": [1674, 13], "temperature": 0.0, "avg_logprob": -0.19864582433933164, "compression_ratio": 1.4595959595959596, "no_speech_prob": 2.9771725166938268e-05}, {"id": 1000, "seek": 432540, "start": 4330.799999999999, "end": 4337.799999999999, "text": " And you'll notice that what happened was that the repeated K got replaced with a colon.", "tokens": [400, 291, 603, 3449, 300, 437, 2011, 390, 300, 264, 10477, 591, 658, 10772, 365, 257, 8255, 13], "temperature": 0.0, "avg_logprob": -0.19864582433933164, "compression_ratio": 1.4595959595959596, "no_speech_prob": 2.9771725166938268e-05}, {"id": 1001, "seek": 432540, "start": 4337.799999999999, "end": 4339.16, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.19864582433933164, "compression_ratio": 1.4595959595959596, "no_speech_prob": 2.9771725166938268e-05}, {"id": 1002, "seek": 432540, "start": 4339.16, "end": 4341.28, "text": " So watch this.", "tokens": [407, 1159, 341, 13], "temperature": 0.0, "avg_logprob": -0.19864582433933164, "compression_ratio": 1.4595959595959596, "no_speech_prob": 2.9771725166938268e-05}, {"id": 1003, "seek": 432540, "start": 4341.28, "end": 4349.639999999999, "text": " What if I move, okay, so first of all, let's get rid of the names of everything.", "tokens": [708, 498, 286, 1286, 11, 1392, 11, 370, 700, 295, 439, 11, 718, 311, 483, 3973, 295, 264, 5288, 295, 1203, 13], "temperature": 0.0, "avg_logprob": -0.19864582433933164, "compression_ratio": 1.4595959595959596, "no_speech_prob": 2.9771725166938268e-05}, {"id": 1004, "seek": 434964, "start": 4349.64, "end": 4359.72, "text": " And let's move the, let's move this to the end and put it after an arrow.", "tokens": [400, 718, 311, 1286, 264, 11, 718, 311, 1286, 341, 281, 264, 917, 293, 829, 309, 934, 364, 11610, 13], "temperature": 0.0, "avg_logprob": -0.1604733843552439, "compression_ratio": 1.3333333333333333, "no_speech_prob": 4.092855306225829e-06}, {"id": 1005, "seek": 434964, "start": 4359.72, "end": 4370.1, "text": " And let's keep getting rid of the names of everything.", "tokens": [400, 718, 311, 1066, 1242, 3973, 295, 264, 5288, 295, 1203, 13], "temperature": 0.0, "avg_logprob": -0.1604733843552439, "compression_ratio": 1.3333333333333333, "no_speech_prob": 4.092855306225829e-06}, {"id": 1006, "seek": 437010, "start": 4370.1, "end": 4379.84, "text": " And get rid of the commas and replace bases with commas.", "tokens": [400, 483, 3973, 295, 264, 800, 296, 293, 7406, 17949, 365, 800, 296, 13], "temperature": 0.0, "avg_logprob": -0.20523522116921164, "compression_ratio": 1.5056179775280898, "no_speech_prob": 1.0348444448027294e-06}, {"id": 1007, "seek": 437010, "start": 4379.84, "end": 4383.200000000001, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.20523522116921164, "compression_ratio": 1.5056179775280898, "no_speech_prob": 1.0348444448027294e-06}, {"id": 1008, "seek": 437010, "start": 4383.200000000001, "end": 4387.320000000001, "text": " And now I just created Einstein summation notation.", "tokens": [400, 586, 286, 445, 2942, 23486, 28811, 24657, 13], "temperature": 0.0, "avg_logprob": -0.20523522116921164, "compression_ratio": 1.5056179775280898, "no_speech_prob": 1.0348444448027294e-06}, {"id": 1009, "seek": 437010, "start": 4387.320000000001, "end": 4392.0, "text": " So Einstein summation notation is like a mini-language.", "tokens": [407, 23486, 28811, 24657, 307, 411, 257, 8382, 12, 25241, 20473, 13], "temperature": 0.0, "avg_logprob": -0.20523522116921164, "compression_ratio": 1.5056179775280898, "no_speech_prob": 1.0348444448027294e-06}, {"id": 1010, "seek": 437010, "start": 4392.0, "end": 4395.200000000001, "text": " You put it inside a string, right?", "tokens": [509, 829, 309, 1854, 257, 6798, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.20523522116921164, "compression_ratio": 1.5056179775280898, "no_speech_prob": 1.0348444448027294e-06}, {"id": 1011, "seek": 437010, "start": 4395.200000000001, "end": 4398.6, "text": " And what it says is, however many, so there's an arrow, right?", "tokens": [400, 437, 309, 1619, 307, 11, 4461, 867, 11, 370, 456, 311, 364, 11610, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.20523522116921164, "compression_ratio": 1.5056179775280898, "no_speech_prob": 1.0348444448027294e-06}, {"id": 1012, "seek": 439860, "start": 4398.6, "end": 4404.04, "text": " And on the left of the arrow is the input and on the right of the arrow is the output.", "tokens": [400, 322, 264, 1411, 295, 264, 11610, 307, 264, 4846, 293, 322, 264, 558, 295, 264, 11610, 307, 264, 5598, 13], "temperature": 0.0, "avg_logprob": -0.12259954160398191, "compression_ratio": 1.958974358974359, "no_speech_prob": 7.296275271073682e-06}, {"id": 1013, "seek": 439860, "start": 4404.04, "end": 4406.120000000001, "text": " How many inputs do you have?", "tokens": [1012, 867, 15743, 360, 291, 362, 30], "temperature": 0.0, "avg_logprob": -0.12259954160398191, "compression_ratio": 1.958974358974359, "no_speech_prob": 7.296275271073682e-06}, {"id": 1014, "seek": 439860, "start": 4406.120000000001, "end": 4408.400000000001, "text": " Well they're delimited by comma.", "tokens": [1042, 436, 434, 1103, 332, 1226, 538, 22117, 13], "temperature": 0.0, "avg_logprob": -0.12259954160398191, "compression_ratio": 1.958974358974359, "no_speech_prob": 7.296275271073682e-06}, {"id": 1015, "seek": 439860, "start": 4408.400000000001, "end": 4412.56, "text": " So in this case there's two inputs.", "tokens": [407, 294, 341, 1389, 456, 311, 732, 15743, 13], "temperature": 0.0, "avg_logprob": -0.12259954160398191, "compression_ratio": 1.958974358974359, "no_speech_prob": 7.296275271073682e-06}, {"id": 1016, "seek": 439860, "start": 4412.56, "end": 4415.240000000001, "text": " The inputs, what's the rank of each input?", "tokens": [440, 15743, 11, 437, 311, 264, 6181, 295, 1184, 4846, 30], "temperature": 0.0, "avg_logprob": -0.12259954160398191, "compression_ratio": 1.958974358974359, "no_speech_prob": 7.296275271073682e-06}, {"id": 1017, "seek": 439860, "start": 4415.240000000001, "end": 4416.820000000001, "text": " It's however many letters there are.", "tokens": [467, 311, 4461, 867, 7825, 456, 366, 13], "temperature": 0.0, "avg_logprob": -0.12259954160398191, "compression_ratio": 1.958974358974359, "no_speech_prob": 7.296275271073682e-06}, {"id": 1018, "seek": 439860, "start": 4416.820000000001, "end": 4424.0, "text": " So this is a rank two input and this is another rank two input and this is a rank two output.", "tokens": [407, 341, 307, 257, 6181, 732, 4846, 293, 341, 307, 1071, 6181, 732, 4846, 293, 341, 307, 257, 6181, 732, 5598, 13], "temperature": 0.0, "avg_logprob": -0.12259954160398191, "compression_ratio": 1.958974358974359, "no_speech_prob": 7.296275271073682e-06}, {"id": 1019, "seek": 439860, "start": 4424.0, "end": 4425.92, "text": " How big are the inputs?", "tokens": [1012, 955, 366, 264, 15743, 30], "temperature": 0.0, "avg_logprob": -0.12259954160398191, "compression_ratio": 1.958974358974359, "no_speech_prob": 7.296275271073682e-06}, {"id": 1020, "seek": 442592, "start": 4425.92, "end": 4429.16, "text": " This is one is the size i by k.", "tokens": [639, 307, 472, 307, 264, 2744, 741, 538, 350, 13], "temperature": 0.0, "avg_logprob": -0.16674478389014882, "compression_ratio": 1.8428571428571427, "no_speech_prob": 1.2805129699700046e-05}, {"id": 1021, "seek": 442592, "start": 4429.16, "end": 4431.84, "text": " This one is the size k by j.", "tokens": [639, 472, 307, 264, 2744, 350, 538, 361, 13], "temperature": 0.0, "avg_logprob": -0.16674478389014882, "compression_ratio": 1.8428571428571427, "no_speech_prob": 1.2805129699700046e-05}, {"id": 1022, "seek": 442592, "start": 4431.84, "end": 4434.46, "text": " And the output is of size i by j.", "tokens": [400, 264, 5598, 307, 295, 2744, 741, 538, 361, 13], "temperature": 0.0, "avg_logprob": -0.16674478389014882, "compression_ratio": 1.8428571428571427, "no_speech_prob": 1.2805129699700046e-05}, {"id": 1023, "seek": 442592, "start": 4434.46, "end": 4438.56, "text": " When you see the same letter appearing in different places, it's referring to the same", "tokens": [1133, 291, 536, 264, 912, 5063, 19870, 294, 819, 3190, 11, 309, 311, 13761, 281, 264, 912], "temperature": 0.0, "avg_logprob": -0.16674478389014882, "compression_ratio": 1.8428571428571427, "no_speech_prob": 1.2805129699700046e-05}, {"id": 1024, "seek": 442592, "start": 4438.56, "end": 4440.38, "text": " size dimension.", "tokens": [2744, 10139, 13], "temperature": 0.0, "avg_logprob": -0.16674478389014882, "compression_ratio": 1.8428571428571427, "no_speech_prob": 1.2805129699700046e-05}, {"id": 1025, "seek": 442592, "start": 4440.38, "end": 4442.4, "text": " So this is of size i.", "tokens": [407, 341, 307, 295, 2744, 741, 13], "temperature": 0.0, "avg_logprob": -0.16674478389014882, "compression_ratio": 1.8428571428571427, "no_speech_prob": 1.2805129699700046e-05}, {"id": 1026, "seek": 442592, "start": 4442.4, "end": 4446.16, "text": " The output is always has, also has i rows.", "tokens": [440, 5598, 307, 1009, 575, 11, 611, 575, 741, 13241, 13], "temperature": 0.0, "avg_logprob": -0.16674478389014882, "compression_ratio": 1.8428571428571427, "no_speech_prob": 1.2805129699700046e-05}, {"id": 1027, "seek": 442592, "start": 4446.16, "end": 4447.4400000000005, "text": " This has j columns.", "tokens": [639, 575, 361, 13766, 13], "temperature": 0.0, "avg_logprob": -0.16674478389014882, "compression_ratio": 1.8428571428571427, "no_speech_prob": 1.2805129699700046e-05}, {"id": 1028, "seek": 442592, "start": 4447.4400000000005, "end": 4449.16, "text": " The output also has j columns.", "tokens": [440, 5598, 611, 575, 361, 13766, 13], "temperature": 0.0, "avg_logprob": -0.16674478389014882, "compression_ratio": 1.8428571428571427, "no_speech_prob": 1.2805129699700046e-05}, {"id": 1029, "seek": 442592, "start": 4449.16, "end": 4450.16, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.16674478389014882, "compression_ratio": 1.8428571428571427, "no_speech_prob": 1.2805129699700046e-05}, {"id": 1030, "seek": 442592, "start": 4450.16, "end": 4453.9, "text": " So we know how to go from the input shape to the output shape.", "tokens": [407, 321, 458, 577, 281, 352, 490, 264, 4846, 3909, 281, 264, 5598, 3909, 13], "temperature": 0.0, "avg_logprob": -0.16674478389014882, "compression_ratio": 1.8428571428571427, "no_speech_prob": 1.2805129699700046e-05}, {"id": 1031, "seek": 445390, "start": 4453.9, "end": 4456.4, "text": " What about the k?", "tokens": [708, 466, 264, 350, 30], "temperature": 0.0, "avg_logprob": -0.13733072978694263, "compression_ratio": 1.497584541062802, "no_speech_prob": 3.2886716780922143e-06}, {"id": 1032, "seek": 445390, "start": 4456.4, "end": 4463.92, "text": " You look for any place that a letter is repeated and you do a dot product over that dimension.", "tokens": [509, 574, 337, 604, 1081, 300, 257, 5063, 307, 10477, 293, 291, 360, 257, 5893, 1674, 670, 300, 10139, 13], "temperature": 0.0, "avg_logprob": -0.13733072978694263, "compression_ratio": 1.497584541062802, "no_speech_prob": 3.2886716780922143e-06}, {"id": 1033, "seek": 445390, "start": 4463.92, "end": 4467.719999999999, "text": " In other words it's just like the way we replaced k with colon.", "tokens": [682, 661, 2283, 309, 311, 445, 411, 264, 636, 321, 10772, 350, 365, 8255, 13], "temperature": 0.0, "avg_logprob": -0.13733072978694263, "compression_ratio": 1.497584541062802, "no_speech_prob": 3.2886716780922143e-06}, {"id": 1034, "seek": 445390, "start": 4467.719999999999, "end": 4469.759999999999, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.13733072978694263, "compression_ratio": 1.497584541062802, "no_speech_prob": 3.2886716780922143e-06}, {"id": 1035, "seek": 445390, "start": 4469.759999999999, "end": 4477.879999999999, "text": " So this is going to create something of size i by j by doing dot products over these shared", "tokens": [407, 341, 307, 516, 281, 1884, 746, 295, 2744, 741, 538, 361, 538, 884, 5893, 3383, 670, 613, 5507], "temperature": 0.0, "avg_logprob": -0.13733072978694263, "compression_ratio": 1.497584541062802, "no_speech_prob": 3.2886716780922143e-06}, {"id": 1036, "seek": 445390, "start": 4477.879999999999, "end": 4482.08, "text": " k's which is matrix multiplication.", "tokens": [350, 311, 597, 307, 8141, 27290, 13], "temperature": 0.0, "avg_logprob": -0.13733072978694263, "compression_ratio": 1.497584541062802, "no_speech_prob": 3.2886716780922143e-06}, {"id": 1037, "seek": 448208, "start": 4482.08, "end": 4488.16, "text": " So that's how you write matrix multiplication with Einstein summation notation.", "tokens": [407, 300, 311, 577, 291, 2464, 8141, 27290, 365, 23486, 28811, 24657, 13], "temperature": 0.0, "avg_logprob": -0.11442133392950501, "compression_ratio": 1.6406926406926408, "no_speech_prob": 4.09270205636858e-06}, {"id": 1038, "seek": 448208, "start": 4488.16, "end": 4492.6, "text": " And then all you just do is go torch dot einsum.", "tokens": [400, 550, 439, 291, 445, 360, 307, 352, 27822, 5893, 21889, 449, 13], "temperature": 0.0, "avg_logprob": -0.11442133392950501, "compression_ratio": 1.6406926406926408, "no_speech_prob": 4.09270205636858e-06}, {"id": 1039, "seek": 448208, "start": 4492.6, "end": 4501.6, "text": " If you go to the PyTorch einsum docs or docs of most of the major libraries, you can find", "tokens": [759, 291, 352, 281, 264, 9953, 51, 284, 339, 21889, 449, 45623, 420, 45623, 295, 881, 295, 264, 2563, 15148, 11, 291, 393, 915], "temperature": 0.0, "avg_logprob": -0.11442133392950501, "compression_ratio": 1.6406926406926408, "no_speech_prob": 4.09270205636858e-06}, {"id": 1040, "seek": 448208, "start": 4501.6, "end": 4503.68, "text": " all kinds of cool examples of einsum.", "tokens": [439, 3685, 295, 1627, 5110, 295, 21889, 449, 13], "temperature": 0.0, "avg_logprob": -0.11442133392950501, "compression_ratio": 1.6406926406926408, "no_speech_prob": 4.09270205636858e-06}, {"id": 1041, "seek": 448208, "start": 4503.68, "end": 4510.86, "text": " You can use it for transpose, diagonalization, tracing, all kinds of things, batch-wise versions", "tokens": [509, 393, 764, 309, 337, 25167, 11, 21539, 2144, 11, 25262, 11, 439, 3685, 295, 721, 11, 15245, 12, 3711, 9606], "temperature": 0.0, "avg_logprob": -0.11442133392950501, "compression_ratio": 1.6406926406926408, "no_speech_prob": 4.09270205636858e-06}, {"id": 1042, "seek": 448208, "start": 4510.86, "end": 4512.0, "text": " of just about everything.", "tokens": [295, 445, 466, 1203, 13], "temperature": 0.0, "avg_logprob": -0.11442133392950501, "compression_ratio": 1.6406926406926408, "no_speech_prob": 4.09270205636858e-06}, {"id": 1043, "seek": 451200, "start": 4512.0, "end": 4523.8, "text": " So for example, if PyTorch didn't have batch-wise matrix multiplication, I just created it.", "tokens": [407, 337, 1365, 11, 498, 9953, 51, 284, 339, 994, 380, 362, 15245, 12, 3711, 8141, 27290, 11, 286, 445, 2942, 309, 13], "temperature": 0.0, "avg_logprob": -0.10390539267628464, "compression_ratio": 1.6591928251121075, "no_speech_prob": 3.966929853049805e-06}, {"id": 1044, "seek": 451200, "start": 4523.8, "end": 4525.96, "text": " There's batch-wise matrix multiplication.", "tokens": [821, 311, 15245, 12, 3711, 8141, 27290, 13], "temperature": 0.0, "avg_logprob": -0.10390539267628464, "compression_ratio": 1.6591928251121075, "no_speech_prob": 3.966929853049805e-06}, {"id": 1045, "seek": 451200, "start": 4525.96, "end": 4528.44, "text": " So there's all kinds of things you can kind of invent.", "tokens": [407, 456, 311, 439, 3685, 295, 721, 291, 393, 733, 295, 7962, 13], "temperature": 0.0, "avg_logprob": -0.10390539267628464, "compression_ratio": 1.6591928251121075, "no_speech_prob": 3.966929853049805e-06}, {"id": 1046, "seek": 451200, "start": 4528.44, "end": 4532.72, "text": " And often it's quite handy if you kind of need to put a transpose in somewhere or tweak", "tokens": [400, 2049, 309, 311, 1596, 13239, 498, 291, 733, 295, 643, 281, 829, 257, 25167, 294, 4079, 420, 29879], "temperature": 0.0, "avg_logprob": -0.10390539267628464, "compression_ratio": 1.6591928251121075, "no_speech_prob": 3.966929853049805e-06}, {"id": 1047, "seek": 451200, "start": 4532.72, "end": 4535.48, "text": " things to be a little bit different, you can use this.", "tokens": [721, 281, 312, 257, 707, 857, 819, 11, 291, 393, 764, 341, 13], "temperature": 0.0, "avg_logprob": -0.10390539267628464, "compression_ratio": 1.6591928251121075, "no_speech_prob": 3.966929853049805e-06}, {"id": 1048, "seek": 451200, "start": 4535.48, "end": 4537.4, "text": " So that's Einstein summation notation.", "tokens": [407, 300, 311, 23486, 28811, 24657, 13], "temperature": 0.0, "avg_logprob": -0.10390539267628464, "compression_ratio": 1.6591928251121075, "no_speech_prob": 3.966929853049805e-06}, {"id": 1049, "seek": 453740, "start": 4537.4, "end": 4544.12, "text": " Here's MatMul, and that's now taken us down to 57 microseconds.", "tokens": [1692, 311, 6789, 44, 425, 11, 293, 300, 311, 586, 2726, 505, 760, 281, 21423, 3123, 37841, 28750, 13], "temperature": 0.0, "avg_logprob": -0.131030703699866, "compression_ratio": 1.3877551020408163, "no_speech_prob": 6.64330445943051e-06}, {"id": 1050, "seek": 453740, "start": 4544.12, "end": 4549.36, "text": " So we're now 16,000 times faster than Python.", "tokens": [407, 321, 434, 586, 3165, 11, 1360, 1413, 4663, 813, 15329, 13], "temperature": 0.0, "avg_logprob": -0.131030703699866, "compression_ratio": 1.3877551020408163, "no_speech_prob": 6.64330445943051e-06}, {"id": 1051, "seek": 453740, "start": 4549.36, "end": 4553.719999999999, "text": " I will say something about einsum.", "tokens": [286, 486, 584, 746, 466, 21889, 449, 13], "temperature": 0.0, "avg_logprob": -0.131030703699866, "compression_ratio": 1.3877551020408163, "no_speech_prob": 6.64330445943051e-06}, {"id": 1052, "seek": 453740, "start": 4553.719999999999, "end": 4559.639999999999, "text": " It's a travesty that this exists because we've got a little mini-language inside Python in", "tokens": [467, 311, 257, 944, 5571, 88, 300, 341, 8198, 570, 321, 600, 658, 257, 707, 8382, 12, 25241, 20473, 1854, 15329, 294], "temperature": 0.0, "avg_logprob": -0.131030703699866, "compression_ratio": 1.3877551020408163, "no_speech_prob": 6.64330445943051e-06}, {"id": 1053, "seek": 453740, "start": 4559.639999999999, "end": 4560.639999999999, "text": " a string.", "tokens": [257, 6798, 13], "temperature": 0.0, "avg_logprob": -0.131030703699866, "compression_ratio": 1.3877551020408163, "no_speech_prob": 6.64330445943051e-06}, {"id": 1054, "seek": 453740, "start": 4560.639999999999, "end": 4563.599999999999, "text": " I mean, that's horrendous.", "tokens": [286, 914, 11, 300, 311, 49520, 563, 13], "temperature": 0.0, "avg_logprob": -0.131030703699866, "compression_ratio": 1.3877551020408163, "no_speech_prob": 6.64330445943051e-06}, {"id": 1055, "seek": 456360, "start": 4563.6, "end": 4567.96, "text": " You shouldn't be writing programming languages inside a string.", "tokens": [509, 4659, 380, 312, 3579, 9410, 8650, 1854, 257, 6798, 13], "temperature": 0.0, "avg_logprob": -0.1288305261860723, "compression_ratio": 1.6683168316831682, "no_speech_prob": 3.96691166315577e-06}, {"id": 1056, "seek": 456360, "start": 4567.96, "end": 4571.08, "text": " This is as bad as a regex.", "tokens": [639, 307, 382, 1578, 382, 257, 319, 432, 87, 13], "temperature": 0.0, "avg_logprob": -0.1288305261860723, "compression_ratio": 1.6683168316831682, "no_speech_prob": 3.96691166315577e-06}, {"id": 1057, "seek": 456360, "start": 4571.08, "end": 4573.92, "text": " Like regular expressions are also mini-languages inside a string.", "tokens": [1743, 3890, 15277, 366, 611, 8382, 12, 25241, 84, 1660, 1854, 257, 6798, 13], "temperature": 0.0, "avg_logprob": -0.1288305261860723, "compression_ratio": 1.6683168316831682, "no_speech_prob": 3.96691166315577e-06}, {"id": 1058, "seek": 456360, "start": 4573.92, "end": 4583.04, "text": " You want your languages to be typed and have IntelliSense and be things that you can extend.", "tokens": [509, 528, 428, 8650, 281, 312, 33941, 293, 362, 18762, 72, 50, 1288, 293, 312, 721, 300, 291, 393, 10101, 13], "temperature": 0.0, "avg_logprob": -0.1288305261860723, "compression_ratio": 1.6683168316831682, "no_speech_prob": 3.96691166315577e-06}, {"id": 1059, "seek": 456360, "start": 4583.04, "end": 4584.84, "text": " This mini-language does.", "tokens": [639, 8382, 12, 25241, 20473, 775, 13], "temperature": 0.0, "avg_logprob": -0.1288305261860723, "compression_ratio": 1.6683168316831682, "no_speech_prob": 3.96691166315577e-06}, {"id": 1060, "seek": 456360, "start": 4584.84, "end": 4589.46, "text": " It's amazing, but there's so few things that it actually does.", "tokens": [467, 311, 2243, 11, 457, 456, 311, 370, 1326, 721, 300, 309, 767, 775, 13], "temperature": 0.0, "avg_logprob": -0.1288305261860723, "compression_ratio": 1.6683168316831682, "no_speech_prob": 3.96691166315577e-06}, {"id": 1061, "seek": 458946, "start": 4589.46, "end": 4595.78, "text": " What I actually want to be able to do is create any kind of arbitrary combination of any axes", "tokens": [708, 286, 767, 528, 281, 312, 1075, 281, 360, 307, 1884, 604, 733, 295, 23211, 6562, 295, 604, 35387], "temperature": 0.0, "avg_logprob": -0.13496312307655264, "compression_ratio": 1.751054852320675, "no_speech_prob": 1.1659153642540332e-05}, {"id": 1062, "seek": 458946, "start": 4595.78, "end": 4601.16, "text": " and any operations and any reductions I like in any order in the actual language I'm writing", "tokens": [293, 604, 7705, 293, 604, 40296, 286, 411, 294, 604, 1668, 294, 264, 3539, 2856, 286, 478, 3579], "temperature": 0.0, "avg_logprob": -0.13496312307655264, "compression_ratio": 1.751054852320675, "no_speech_prob": 1.1659153642540332e-05}, {"id": 1063, "seek": 458946, "start": 4601.16, "end": 4602.16, "text": " in.", "tokens": [294, 13], "temperature": 0.0, "avg_logprob": -0.13496312307655264, "compression_ratio": 1.751054852320675, "no_speech_prob": 1.1659153642540332e-05}, {"id": 1064, "seek": 458946, "start": 4602.16, "end": 4606.8, "text": " So that's actually what APL does.", "tokens": [407, 300, 311, 767, 437, 5372, 43, 775, 13], "temperature": 0.0, "avg_logprob": -0.13496312307655264, "compression_ratio": 1.751054852320675, "no_speech_prob": 1.1659153642540332e-05}, {"id": 1065, "seek": 458946, "start": 4606.8, "end": 4608.84, "text": " That's actually what J and K do.", "tokens": [663, 311, 767, 437, 508, 293, 591, 360, 13], "temperature": 0.0, "avg_logprob": -0.13496312307655264, "compression_ratio": 1.751054852320675, "no_speech_prob": 1.1659153642540332e-05}, {"id": 1066, "seek": 458946, "start": 4608.84, "end": 4612.2, "text": " These are the J and K are the languages that kind of came out of APL.", "tokens": [1981, 366, 264, 508, 293, 591, 366, 264, 8650, 300, 733, 295, 1361, 484, 295, 5372, 43, 13], "temperature": 0.0, "avg_logprob": -0.13496312307655264, "compression_ratio": 1.751054852320675, "no_speech_prob": 1.1659153642540332e-05}, {"id": 1067, "seek": 458946, "start": 4612.2, "end": 4617.6, "text": " This is a series of languages that have been around for about 60 years, and everybody's", "tokens": [639, 307, 257, 2638, 295, 8650, 300, 362, 668, 926, 337, 466, 4060, 924, 11, 293, 2201, 311], "temperature": 0.0, "avg_logprob": -0.13496312307655264, "compression_ratio": 1.751054852320675, "no_speech_prob": 1.1659153642540332e-05}, {"id": 1068, "seek": 461760, "start": 4617.6, "end": 4621.68, "text": " pretty much failed to notice.", "tokens": [1238, 709, 7612, 281, 3449, 13], "temperature": 0.0, "avg_logprob": -0.11228482402972322, "compression_ratio": 1.611764705882353, "no_speech_prob": 5.771525138698053e-06}, {"id": 1069, "seek": 461760, "start": 4621.68, "end": 4629.72, "text": " My hope is that things like Swift and Julia will give us this, like the ability to actually", "tokens": [1222, 1454, 307, 300, 721, 411, 25539, 293, 18551, 486, 976, 505, 341, 11, 411, 264, 3485, 281, 767], "temperature": 0.0, "avg_logprob": -0.11228482402972322, "compression_ratio": 1.611764705882353, "no_speech_prob": 5.771525138698053e-06}, {"id": 1070, "seek": 461760, "start": 4629.72, "end": 4634.68, "text": " write stuff in actual Swift and actual Julia that we can run in an actual debugger and", "tokens": [2464, 1507, 294, 3539, 25539, 293, 3539, 18551, 300, 321, 393, 1190, 294, 364, 3539, 24083, 1321, 293], "temperature": 0.0, "avg_logprob": -0.11228482402972322, "compression_ratio": 1.611764705882353, "no_speech_prob": 5.771525138698053e-06}, {"id": 1071, "seek": 461760, "start": 4634.68, "end": 4640.84, "text": " use an actual profiler and do arbitrary stuff that's really fast.", "tokens": [764, 364, 3539, 1740, 5441, 293, 360, 23211, 1507, 300, 311, 534, 2370, 13], "temperature": 0.0, "avg_logprob": -0.11228482402972322, "compression_ratio": 1.611764705882353, "no_speech_prob": 5.771525138698053e-06}, {"id": 1072, "seek": 464084, "start": 4640.84, "end": 4648.72, "text": " Finally, Swift seems like it might go even quite a bit faster than Einsum in an even", "tokens": [6288, 11, 25539, 2544, 411, 309, 1062, 352, 754, 1596, 257, 857, 4663, 813, 22790, 449, 294, 364, 754], "temperature": 0.0, "avg_logprob": -0.13663831463566534, "compression_ratio": 1.5583941605839415, "no_speech_prob": 9.665059224062134e-06}, {"id": 1073, "seek": 464084, "start": 4648.72, "end": 4653.96, "text": " more flexible way thanks to this new compiler infrastructure called MLIR, which actually", "tokens": [544, 11358, 636, 3231, 281, 341, 777, 31958, 6896, 1219, 21601, 7740, 11, 597, 767], "temperature": 0.0, "avg_logprob": -0.13663831463566534, "compression_ratio": 1.5583941605839415, "no_speech_prob": 9.665059224062134e-06}, {"id": 1074, "seek": 464084, "start": 4653.96, "end": 4654.96, "text": " builds off this.", "tokens": [15182, 766, 341, 13], "temperature": 0.0, "avg_logprob": -0.13663831463566534, "compression_ratio": 1.5583941605839415, "no_speech_prob": 9.665059224062134e-06}, {"id": 1075, "seek": 464084, "start": 4654.96, "end": 4657.4800000000005, "text": " There's some really exciting new research in the compiler world.", "tokens": [821, 311, 512, 534, 4670, 777, 2132, 294, 264, 31958, 1002, 13], "temperature": 0.0, "avg_logprob": -0.13663831463566534, "compression_ratio": 1.5583941605839415, "no_speech_prob": 9.665059224062134e-06}, {"id": 1076, "seek": 464084, "start": 4657.4800000000005, "end": 4660.88, "text": " It's kind of been coming over the last few years, particularly coming out of a system", "tokens": [467, 311, 733, 295, 668, 1348, 670, 264, 1036, 1326, 924, 11, 4098, 1348, 484, 295, 257, 1185], "temperature": 0.0, "avg_logprob": -0.13663831463566534, "compression_ratio": 1.5583941605839415, "no_speech_prob": 9.665059224062134e-06}, {"id": 1077, "seek": 464084, "start": 4660.88, "end": 4667.6, "text": " called Halide, which is H-A-L-I-D-E, which is this super cool language that basically", "tokens": [1219, 13896, 482, 11, 597, 307, 389, 12, 32, 12, 43, 12, 40, 12, 35, 12, 36, 11, 597, 307, 341, 1687, 1627, 2856, 300, 1936], "temperature": 0.0, "avg_logprob": -0.13663831463566534, "compression_ratio": 1.5583941605839415, "no_speech_prob": 9.665059224062134e-06}, {"id": 1078, "seek": 466760, "start": 4667.6, "end": 4675.56, "text": " showed it's possible to create a language that can create very, very, very totally optimized", "tokens": [4712, 309, 311, 1944, 281, 1884, 257, 2856, 300, 393, 1884, 588, 11, 588, 11, 588, 3879, 26941], "temperature": 0.0, "avg_logprob": -0.14135101318359375, "compression_ratio": 1.5841121495327102, "no_speech_prob": 5.337707989383489e-06}, {"id": 1079, "seek": 466760, "start": 4675.56, "end": 4680.76, "text": " linear algebra computations in a really flexible, convenient way.", "tokens": [8213, 21989, 2807, 763, 294, 257, 534, 11358, 11, 10851, 636, 13], "temperature": 0.0, "avg_logprob": -0.14135101318359375, "compression_ratio": 1.5841121495327102, "no_speech_prob": 5.337707989383489e-06}, {"id": 1080, "seek": 466760, "start": 4680.76, "end": 4687.52, "text": " Since that came along, there's been all kinds of cool research using these techniques, like", "tokens": [4162, 300, 1361, 2051, 11, 456, 311, 668, 439, 3685, 295, 1627, 2132, 1228, 613, 7512, 11, 411], "temperature": 0.0, "avg_logprob": -0.14135101318359375, "compression_ratio": 1.5841121495327102, "no_speech_prob": 5.337707989383489e-06}, {"id": 1081, "seek": 466760, "start": 4687.52, "end": 4693.780000000001, "text": " something called polyhedral compilation, which kind of have the promise that we're going", "tokens": [746, 1219, 6754, 71, 24764, 40261, 11, 597, 733, 295, 362, 264, 6228, 300, 321, 434, 516], "temperature": 0.0, "avg_logprob": -0.14135101318359375, "compression_ratio": 1.5841121495327102, "no_speech_prob": 5.337707989383489e-06}, {"id": 1082, "seek": 469378, "start": 4693.78, "end": 4701.16, "text": " to be able to hopefully, within the next couple of years, write Swift code that runs as fast", "tokens": [281, 312, 1075, 281, 4696, 11, 1951, 264, 958, 1916, 295, 924, 11, 2464, 25539, 3089, 300, 6676, 382, 2370], "temperature": 0.0, "avg_logprob": -0.1532924568260109, "compression_ratio": 1.5572139303482586, "no_speech_prob": 3.1875035801931517e-06}, {"id": 1083, "seek": 469378, "start": 4701.16, "end": 4703.04, "text": " as the next thing I'm about to show you.", "tokens": [382, 264, 958, 551, 286, 478, 466, 281, 855, 291, 13], "temperature": 0.0, "avg_logprob": -0.1532924568260109, "compression_ratio": 1.5572139303482586, "no_speech_prob": 3.1875035801931517e-06}, {"id": 1084, "seek": 469378, "start": 4703.04, "end": 4710.719999999999, "text": " Because the next thing I'm about to show you is the PyTorch operation called Matmul.", "tokens": [1436, 264, 958, 551, 286, 478, 466, 281, 855, 291, 307, 264, 9953, 51, 284, 339, 6916, 1219, 6789, 76, 425, 13], "temperature": 0.0, "avg_logprob": -0.1532924568260109, "compression_ratio": 1.5572139303482586, "no_speech_prob": 3.1875035801931517e-06}, {"id": 1085, "seek": 469378, "start": 4710.719999999999, "end": 4719.88, "text": " And Matmul takes 18 microseconds, which is 50,000 times faster than Python.", "tokens": [400, 6789, 76, 425, 2516, 2443, 3123, 37841, 28750, 11, 597, 307, 2625, 11, 1360, 1413, 4663, 813, 15329, 13], "temperature": 0.0, "avg_logprob": -0.1532924568260109, "compression_ratio": 1.5572139303482586, "no_speech_prob": 3.1875035801931517e-06}, {"id": 1086, "seek": 469378, "start": 4719.88, "end": 4721.32, "text": " Why is it so fast?", "tokens": [1545, 307, 309, 370, 2370, 30], "temperature": 0.0, "avg_logprob": -0.1532924568260109, "compression_ratio": 1.5572139303482586, "no_speech_prob": 3.1875035801931517e-06}, {"id": 1087, "seek": 472132, "start": 4721.32, "end": 4725.84, "text": " Well, if you think about what you're doing when you do a matrix multiply of something", "tokens": [1042, 11, 498, 291, 519, 466, 437, 291, 434, 884, 562, 291, 360, 257, 8141, 12972, 295, 746], "temperature": 0.0, "avg_logprob": -0.10548441750662667, "compression_ratio": 1.6795366795366795, "no_speech_prob": 6.339041647152044e-06}, {"id": 1088, "seek": 472132, "start": 4725.84, "end": 4736.36, "text": " that's like 50,000 by 768 by 768 by 10, these are things that aren't going to fit in the", "tokens": [300, 311, 411, 2625, 11, 1360, 538, 24733, 23, 538, 24733, 23, 538, 1266, 11, 613, 366, 721, 300, 3212, 380, 516, 281, 3318, 294, 264], "temperature": 0.0, "avg_logprob": -0.10548441750662667, "compression_ratio": 1.6795366795366795, "no_speech_prob": 6.339041647152044e-06}, {"id": 1089, "seek": 472132, "start": 4736.36, "end": 4738.24, "text": " cache in your CPU.", "tokens": [19459, 294, 428, 13199, 13], "temperature": 0.0, "avg_logprob": -0.10548441750662667, "compression_ratio": 1.6795366795366795, "no_speech_prob": 6.339041647152044e-06}, {"id": 1090, "seek": 472132, "start": 4738.24, "end": 4742.5599999999995, "text": " So if you do the standard thing of going down all the rows and across all the columns, by", "tokens": [407, 498, 291, 360, 264, 3832, 551, 295, 516, 760, 439, 264, 13241, 293, 2108, 439, 264, 13766, 11, 538], "temperature": 0.0, "avg_logprob": -0.10548441750662667, "compression_ratio": 1.6795366795366795, "no_speech_prob": 6.339041647152044e-06}, {"id": 1091, "seek": 472132, "start": 4742.5599999999995, "end": 4746.24, "text": " the time you've got to the end and you go back to exactly the same column again, it", "tokens": [264, 565, 291, 600, 658, 281, 264, 917, 293, 291, 352, 646, 281, 2293, 264, 912, 7738, 797, 11, 309], "temperature": 0.0, "avg_logprob": -0.10548441750662667, "compression_ratio": 1.6795366795366795, "no_speech_prob": 6.339041647152044e-06}, {"id": 1092, "seek": 472132, "start": 4746.24, "end": 4750.259999999999, "text": " forgot the contents and has to go back to RAM and pull it in again.", "tokens": [5298, 264, 15768, 293, 575, 281, 352, 646, 281, 14561, 293, 2235, 309, 294, 797, 13], "temperature": 0.0, "avg_logprob": -0.10548441750662667, "compression_ratio": 1.6795366795366795, "no_speech_prob": 6.339041647152044e-06}, {"id": 1093, "seek": 475026, "start": 4750.26, "end": 4754.24, "text": " So if you're smart, what you do is you break your matrix up into little smaller matrices", "tokens": [407, 498, 291, 434, 4069, 11, 437, 291, 360, 307, 291, 1821, 428, 8141, 493, 666, 707, 4356, 32284], "temperature": 0.0, "avg_logprob": -0.136593706025852, "compression_ratio": 1.6724738675958188, "no_speech_prob": 5.5940899983397685e-06}, {"id": 1094, "seek": 475026, "start": 4754.24, "end": 4756.280000000001, "text": " and you do a little bit at a time.", "tokens": [293, 291, 360, 257, 707, 857, 412, 257, 565, 13], "temperature": 0.0, "avg_logprob": -0.136593706025852, "compression_ratio": 1.6724738675958188, "no_speech_prob": 5.5940899983397685e-06}, {"id": 1095, "seek": 475026, "start": 4756.280000000001, "end": 4759.320000000001, "text": " And that way everything is kind of in cache and it goes super fast.", "tokens": [400, 300, 636, 1203, 307, 733, 295, 294, 19459, 293, 309, 1709, 1687, 2370, 13], "temperature": 0.0, "avg_logprob": -0.136593706025852, "compression_ratio": 1.6724738675958188, "no_speech_prob": 5.5940899983397685e-06}, {"id": 1096, "seek": 475026, "start": 4759.320000000001, "end": 4765.6, "text": " Now normally to do that, you have to write assembly language code, particularly if you", "tokens": [823, 5646, 281, 360, 300, 11, 291, 362, 281, 2464, 12103, 2856, 3089, 11, 4098, 498, 291], "temperature": 0.0, "avg_logprob": -0.136593706025852, "compression_ratio": 1.6724738675958188, "no_speech_prob": 5.5940899983397685e-06}, {"id": 1097, "seek": 475026, "start": 4765.6, "end": 4769.2, "text": " want to get it all running in your vector processor.", "tokens": [528, 281, 483, 309, 439, 2614, 294, 428, 8062, 15321, 13], "temperature": 0.0, "avg_logprob": -0.136593706025852, "compression_ratio": 1.6724738675958188, "no_speech_prob": 5.5940899983397685e-06}, {"id": 1098, "seek": 475026, "start": 4769.2, "end": 4772.320000000001, "text": " And that's how you get these 18 microseconds.", "tokens": [400, 300, 311, 577, 291, 483, 613, 2443, 3123, 37841, 28750, 13], "temperature": 0.0, "avg_logprob": -0.136593706025852, "compression_ratio": 1.6724738675958188, "no_speech_prob": 5.5940899983397685e-06}, {"id": 1099, "seek": 475026, "start": 4772.320000000001, "end": 4777.56, "text": " So currently, to get a fast matrix multiply, things like PyTorch, they don't even write", "tokens": [407, 4362, 11, 281, 483, 257, 2370, 8141, 12972, 11, 721, 411, 9953, 51, 284, 339, 11, 436, 500, 380, 754, 2464], "temperature": 0.0, "avg_logprob": -0.136593706025852, "compression_ratio": 1.6724738675958188, "no_speech_prob": 5.5940899983397685e-06}, {"id": 1100, "seek": 475026, "start": 4777.56, "end": 4778.76, "text": " it themselves.", "tokens": [309, 2969, 13], "temperature": 0.0, "avg_logprob": -0.136593706025852, "compression_ratio": 1.6724738675958188, "no_speech_prob": 5.5940899983397685e-06}, {"id": 1101, "seek": 477876, "start": 4778.76, "end": 4782.4800000000005, "text": " They basically push that off to something called a BLAS, B-L-A-S.", "tokens": [814, 1936, 2944, 300, 766, 281, 746, 1219, 257, 15132, 3160, 11, 363, 12, 43, 12, 32, 12, 50, 13], "temperature": 0.0, "avg_logprob": -0.19217723846435547, "compression_ratio": 1.5695067264573992, "no_speech_prob": 1.3211523764766753e-05}, {"id": 1102, "seek": 477876, "start": 4782.4800000000005, "end": 4789.360000000001, "text": " A BLAS is a basic linear algebra subprograms library where companies like Intel and AMD", "tokens": [316, 15132, 3160, 307, 257, 3875, 8213, 21989, 1422, 32726, 82, 6405, 689, 3431, 411, 19762, 293, 34808], "temperature": 0.0, "avg_logprob": -0.19217723846435547, "compression_ratio": 1.5695067264573992, "no_speech_prob": 1.3211523764766753e-05}, {"id": 1103, "seek": 477876, "start": 4789.360000000001, "end": 4792.280000000001, "text": " and Nvidia write these things for you.", "tokens": [293, 46284, 2464, 613, 721, 337, 291, 13], "temperature": 0.0, "avg_logprob": -0.19217723846435547, "compression_ratio": 1.5695067264573992, "no_speech_prob": 1.3211523764766753e-05}, {"id": 1104, "seek": 477876, "start": 4792.280000000001, "end": 4797.92, "text": " So you can look up Kublas, for example, and this is like Nvidia's version of BLAS.", "tokens": [407, 291, 393, 574, 493, 35805, 7743, 11, 337, 1365, 11, 293, 341, 307, 411, 46284, 311, 3037, 295, 15132, 3160, 13], "temperature": 0.0, "avg_logprob": -0.19217723846435547, "compression_ratio": 1.5695067264573992, "no_speech_prob": 1.3211523764766753e-05}, {"id": 1105, "seek": 477876, "start": 4797.92, "end": 4804.64, "text": " Or you could look up MKL and this is Intel's version of BLAS and so forth.", "tokens": [1610, 291, 727, 574, 493, 30770, 43, 293, 341, 307, 19762, 311, 3037, 295, 15132, 3160, 293, 370, 5220, 13], "temperature": 0.0, "avg_logprob": -0.19217723846435547, "compression_ratio": 1.5695067264573992, "no_speech_prob": 1.3211523764766753e-05}, {"id": 1106, "seek": 480464, "start": 4804.64, "end": 4813.56, "text": " And this is kind of awful because the program is limited to this subset of things that your", "tokens": [400, 341, 307, 733, 295, 11232, 570, 264, 1461, 307, 5567, 281, 341, 25993, 295, 721, 300, 428], "temperature": 0.0, "avg_logprob": -0.12743310041205827, "compression_ratio": 1.5510204081632653, "no_speech_prob": 3.8669244872835407e-07}, {"id": 1107, "seek": 480464, "start": 4813.56, "end": 4815.8, "text": " BLAS can handle.", "tokens": [15132, 3160, 393, 4813, 13], "temperature": 0.0, "avg_logprob": -0.12743310041205827, "compression_ratio": 1.5510204081632653, "no_speech_prob": 3.8669244872835407e-07}, {"id": 1108, "seek": 480464, "start": 4815.8, "end": 4820.240000000001, "text": " And to use it, you don't really get to write it in Python.", "tokens": [400, 281, 764, 309, 11, 291, 500, 380, 534, 483, 281, 2464, 309, 294, 15329, 13], "temperature": 0.0, "avg_logprob": -0.12743310041205827, "compression_ratio": 1.5510204081632653, "no_speech_prob": 3.8669244872835407e-07}, {"id": 1109, "seek": 480464, "start": 4820.240000000001, "end": 4824.96, "text": " You kind of have to write the one thing that happens to be turned into that pre-existing", "tokens": [509, 733, 295, 362, 281, 2464, 264, 472, 551, 300, 2314, 281, 312, 3574, 666, 300, 659, 12, 36447], "temperature": 0.0, "avg_logprob": -0.12743310041205827, "compression_ratio": 1.5510204081632653, "no_speech_prob": 3.8669244872835407e-07}, {"id": 1110, "seek": 480464, "start": 4824.96, "end": 4826.0, "text": " BLAS call.", "tokens": [15132, 3160, 818, 13], "temperature": 0.0, "avg_logprob": -0.12743310041205827, "compression_ratio": 1.5510204081632653, "no_speech_prob": 3.8669244872835407e-07}, {"id": 1111, "seek": 480464, "start": 4826.0, "end": 4829.56, "text": " So this is why we need to do better.", "tokens": [407, 341, 307, 983, 321, 643, 281, 360, 1101, 13], "temperature": 0.0, "avg_logprob": -0.12743310041205827, "compression_ratio": 1.5510204081632653, "no_speech_prob": 3.8669244872835407e-07}, {"id": 1112, "seek": 482956, "start": 4829.56, "end": 4835.64, "text": " And there are people working on this and there are people actually in Chris Latner's team", "tokens": [400, 456, 366, 561, 1364, 322, 341, 293, 456, 366, 561, 767, 294, 6688, 7354, 1193, 311, 1469], "temperature": 0.0, "avg_logprob": -0.1993753416044218, "compression_ratio": 1.7348484848484849, "no_speech_prob": 8.266775694210082e-06}, {"id": 1113, "seek": 482956, "start": 4835.64, "end": 4836.64, "text": " working on this.", "tokens": [1364, 322, 341, 13], "temperature": 0.0, "avg_logprob": -0.1993753416044218, "compression_ratio": 1.7348484848484849, "no_speech_prob": 8.266775694210082e-06}, {"id": 1114, "seek": 482956, "start": 4836.64, "end": 4838.6, "text": " You know, there's some really cool stuff.", "tokens": [509, 458, 11, 456, 311, 512, 534, 1627, 1507, 13], "temperature": 0.0, "avg_logprob": -0.1993753416044218, "compression_ratio": 1.7348484848484849, "no_speech_prob": 8.266775694210082e-06}, {"id": 1115, "seek": 482956, "start": 4838.6, "end": 4845.200000000001, "text": " Like there's something called tensor comprehensions, which is like really originally came in PyTorch", "tokens": [1743, 456, 311, 746, 1219, 40863, 10753, 8302, 11, 597, 307, 411, 534, 7993, 1361, 294, 9953, 51, 284, 339], "temperature": 0.0, "avg_logprob": -0.1993753416044218, "compression_ratio": 1.7348484848484849, "no_speech_prob": 8.266775694210082e-06}, {"id": 1116, "seek": 482956, "start": 4845.200000000001, "end": 4850.6, "text": " and I think they're now inside Chris's team at Google, where people are basically saying,", "tokens": [293, 286, 519, 436, 434, 586, 1854, 6688, 311, 1469, 412, 3329, 11, 689, 561, 366, 1936, 1566, 11], "temperature": 0.0, "avg_logprob": -0.1993753416044218, "compression_ratio": 1.7348484848484849, "no_speech_prob": 8.266775694210082e-06}, {"id": 1117, "seek": 482956, "start": 4850.6, "end": 4853.4800000000005, "text": " hey, here are ways to compile these much more general things.", "tokens": [4177, 11, 510, 366, 2098, 281, 31413, 613, 709, 544, 2674, 721, 13], "temperature": 0.0, "avg_logprob": -0.1993753416044218, "compression_ratio": 1.7348484848484849, "no_speech_prob": 8.266775694210082e-06}, {"id": 1118, "seek": 482956, "start": 4853.4800000000005, "end": 4857.8, "text": " And this is what we want as more advanced practitioners.", "tokens": [400, 341, 307, 437, 321, 528, 382, 544, 7339, 25742, 13], "temperature": 0.0, "avg_logprob": -0.1993753416044218, "compression_ratio": 1.7348484848484849, "no_speech_prob": 8.266775694210082e-06}, {"id": 1119, "seek": 485780, "start": 4857.8, "end": 4865.72, "text": " Anyway, for now, in PyTorch world, we're stuck at this level, which is to recognize there", "tokens": [5684, 11, 337, 586, 11, 294, 9953, 51, 284, 339, 1002, 11, 321, 434, 5541, 412, 341, 1496, 11, 597, 307, 281, 5521, 456], "temperature": 0.0, "avg_logprob": -0.11856460571289062, "compression_ratio": 1.4842105263157894, "no_speech_prob": 5.954642347205663e-06}, {"id": 1120, "seek": 485780, "start": 4865.72, "end": 4873.88, "text": " are some things, this is three times faster than the best we can do in an even vaguely", "tokens": [366, 512, 721, 11, 341, 307, 1045, 1413, 4663, 813, 264, 1151, 321, 393, 360, 294, 364, 754, 13501, 48863], "temperature": 0.0, "avg_logprob": -0.11856460571289062, "compression_ratio": 1.4842105263157894, "no_speech_prob": 5.954642347205663e-06}, {"id": 1121, "seek": 485780, "start": 4873.88, "end": 4875.96, "text": " flexible way.", "tokens": [11358, 636, 13], "temperature": 0.0, "avg_logprob": -0.11856460571289062, "compression_ratio": 1.4842105263157894, "no_speech_prob": 5.954642347205663e-06}, {"id": 1122, "seek": 485780, "start": 4875.96, "end": 4886.74, "text": " And if we compare it to the actually flexible way, which is broadcasting, we had 254, yeah,", "tokens": [400, 498, 321, 6794, 309, 281, 264, 767, 11358, 636, 11, 597, 307, 30024, 11, 321, 632, 3552, 19, 11, 1338, 11], "temperature": 0.0, "avg_logprob": -0.11856460571289062, "compression_ratio": 1.4842105263157894, "no_speech_prob": 5.954642347205663e-06}, {"id": 1123, "seek": 488674, "start": 4886.74, "end": 4889.32, "text": " so still over 10 times better.", "tokens": [370, 920, 670, 1266, 1413, 1101, 13], "temperature": 0.0, "avg_logprob": -0.18119649053777306, "compression_ratio": 1.6653386454183268, "no_speech_prob": 8.01289024821017e-06}, {"id": 1124, "seek": 488674, "start": 4889.32, "end": 4896.8, "text": " So, wherever possible today, we want to use operations that are predefined in our library,", "tokens": [407, 11, 8660, 1944, 965, 11, 321, 528, 281, 764, 7705, 300, 366, 659, 37716, 294, 527, 6405, 11], "temperature": 0.0, "avg_logprob": -0.18119649053777306, "compression_ratio": 1.6653386454183268, "no_speech_prob": 8.01289024821017e-06}, {"id": 1125, "seek": 488674, "start": 4896.8, "end": 4901.5199999999995, "text": " particularly for things that kind of operate over lots of rows and columns, the things", "tokens": [4098, 337, 721, 300, 733, 295, 9651, 670, 3195, 295, 13241, 293, 13766, 11, 264, 721], "temperature": 0.0, "avg_logprob": -0.18119649053777306, "compression_ratio": 1.6653386454183268, "no_speech_prob": 8.01289024821017e-06}, {"id": 1126, "seek": 488674, "start": 4901.5199999999995, "end": 4906.639999999999, "text": " we're kind of dealing with this memory caching stuff is going to be complicated.", "tokens": [321, 434, 733, 295, 6260, 365, 341, 4675, 269, 2834, 1507, 307, 516, 281, 312, 6179, 13], "temperature": 0.0, "avg_logprob": -0.18119649053777306, "compression_ratio": 1.6653386454183268, "no_speech_prob": 8.01289024821017e-06}, {"id": 1127, "seek": 488674, "start": 4906.639999999999, "end": 4909.32, "text": " So keep an eye out for that.", "tokens": [407, 1066, 364, 3313, 484, 337, 300, 13], "temperature": 0.0, "avg_logprob": -0.18119649053777306, "compression_ratio": 1.6653386454183268, "no_speech_prob": 8.01289024821017e-06}, {"id": 1128, "seek": 488674, "start": 4909.32, "end": 4915.04, "text": " Matrix multiplication is so common and useful that it's actually got its own operator, which", "tokens": [36274, 27290, 307, 370, 2689, 293, 4420, 300, 309, 311, 767, 658, 1080, 1065, 12973, 11, 597], "temperature": 0.0, "avg_logprob": -0.18119649053777306, "compression_ratio": 1.6653386454183268, "no_speech_prob": 8.01289024821017e-06}, {"id": 1129, "seek": 488674, "start": 4915.04, "end": 4916.24, "text": " is at.", "tokens": [307, 412, 13], "temperature": 0.0, "avg_logprob": -0.18119649053777306, "compression_ratio": 1.6653386454183268, "no_speech_prob": 8.01289024821017e-06}, {"id": 1130, "seek": 491624, "start": 4916.24, "end": 4920.96, "text": " These are actually calling the exact same code, so they're the exact same speed.", "tokens": [1981, 366, 767, 5141, 264, 1900, 912, 3089, 11, 370, 436, 434, 264, 1900, 912, 3073, 13], "temperature": 0.0, "avg_logprob": -0.19405555725097656, "compression_ratio": 1.5502183406113537, "no_speech_prob": 1.1841744708362967e-05}, {"id": 1131, "seek": 491624, "start": 4920.96, "end": 4925.76, "text": " At is not actually just matrix multiplication.", "tokens": [1711, 307, 406, 767, 445, 8141, 27290, 13], "temperature": 0.0, "avg_logprob": -0.19405555725097656, "compression_ratio": 1.5502183406113537, "no_speech_prob": 1.1841744708362967e-05}, {"id": 1132, "seek": 491624, "start": 4925.76, "end": 4932.679999999999, "text": " At covers a much broader array of kind of tensor reductions across different levels", "tokens": [1711, 10538, 257, 709, 13227, 10225, 295, 733, 295, 40863, 40296, 2108, 819, 4358], "temperature": 0.0, "avg_logprob": -0.19405555725097656, "compression_ratio": 1.5502183406113537, "no_speech_prob": 1.1841744708362967e-05}, {"id": 1133, "seek": 491624, "start": 4932.679999999999, "end": 4935.16, "text": " of axes.", "tokens": [295, 35387, 13], "temperature": 0.0, "avg_logprob": -0.19405555725097656, "compression_ratio": 1.5502183406113537, "no_speech_prob": 1.1841744708362967e-05}, {"id": 1134, "seek": 491624, "start": 4935.16, "end": 4939.82, "text": " So it's worth checking out what MatBowl can do, because often it'll be able to handle", "tokens": [407, 309, 311, 3163, 8568, 484, 437, 6789, 33, 305, 75, 393, 360, 11, 570, 2049, 309, 603, 312, 1075, 281, 4813], "temperature": 0.0, "avg_logprob": -0.19405555725097656, "compression_ratio": 1.5502183406113537, "no_speech_prob": 1.1841744708362967e-05}, {"id": 1135, "seek": 491624, "start": 4939.82, "end": 4943.42, "text": " things like batch-wise or matrix versus vectors.", "tokens": [721, 411, 15245, 12, 3711, 420, 8141, 5717, 18875, 13], "temperature": 0.0, "avg_logprob": -0.19405555725097656, "compression_ratio": 1.5502183406113537, "no_speech_prob": 1.1841744708362967e-05}, {"id": 1136, "seek": 494342, "start": 4943.42, "end": 4947.72, "text": " Don't think of it as being only something that can do rank two by rank two, because", "tokens": [1468, 380, 519, 295, 309, 382, 885, 787, 746, 300, 393, 360, 6181, 732, 538, 6181, 732, 11, 570], "temperature": 0.0, "avg_logprob": -0.19260307760799633, "compression_ratio": 1.5, "no_speech_prob": 4.356745648692595e-06}, {"id": 1137, "seek": 494342, "start": 4947.72, "end": 4949.96, "text": " it's a little bit more flexible.", "tokens": [309, 311, 257, 707, 857, 544, 11358, 13], "temperature": 0.0, "avg_logprob": -0.19260307760799633, "compression_ratio": 1.5, "no_speech_prob": 4.356745648692595e-06}, {"id": 1138, "seek": 494342, "start": 4949.96, "end": 4950.96, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.19260307760799633, "compression_ratio": 1.5, "no_speech_prob": 4.356745648692595e-06}, {"id": 1139, "seek": 494342, "start": 4950.96, "end": 4953.68, "text": " So, that's that.", "tokens": [407, 11, 300, 311, 300, 13], "temperature": 0.0, "avg_logprob": -0.19260307760799633, "compression_ratio": 1.5, "no_speech_prob": 4.356745648692595e-06}, {"id": 1140, "seek": 494342, "start": 4953.68, "end": 4959.02, "text": " We have matrix multiplication, and so now we're allowed to use it.", "tokens": [492, 362, 8141, 27290, 11, 293, 370, 586, 321, 434, 4350, 281, 764, 309, 13], "temperature": 0.0, "avg_logprob": -0.19260307760799633, "compression_ratio": 1.5, "no_speech_prob": 4.356745648692595e-06}, {"id": 1141, "seek": 494342, "start": 4959.02, "end": 4965.8, "text": " And so we're going to use it to try to create a forward pass, which means we first need", "tokens": [400, 370, 321, 434, 516, 281, 764, 309, 281, 853, 281, 1884, 257, 2128, 1320, 11, 597, 1355, 321, 700, 643], "temperature": 0.0, "avg_logprob": -0.19260307760799633, "compression_ratio": 1.5, "no_speech_prob": 4.356745648692595e-06}, {"id": 1142, "seek": 496580, "start": 4965.8, "end": 4973.68, "text": " ReLU and matrix initialization, because remember, a model contains parameters which start out", "tokens": [1300, 43, 52, 293, 8141, 5883, 2144, 11, 570, 1604, 11, 257, 2316, 8306, 9834, 597, 722, 484], "temperature": 0.0, "avg_logprob": -0.11947742559142031, "compression_ratio": 1.356687898089172, "no_speech_prob": 7.00212410720269e-07}, {"id": 1143, "seek": 496580, "start": 4973.68, "end": 4980.4400000000005, "text": " randomly initialized, and then we use the gradients to gradually update them with SGD.", "tokens": [16979, 5883, 1602, 11, 293, 550, 321, 764, 264, 2771, 2448, 281, 13145, 5623, 552, 365, 34520, 35, 13], "temperature": 0.0, "avg_logprob": -0.11947742559142031, "compression_ratio": 1.356687898089172, "no_speech_prob": 7.00212410720269e-07}, {"id": 1144, "seek": 496580, "start": 4980.4400000000005, "end": 4987.76, "text": " So let's do that.", "tokens": [407, 718, 311, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.11947742559142031, "compression_ratio": 1.356687898089172, "no_speech_prob": 7.00212410720269e-07}, {"id": 1145, "seek": 496580, "start": 4987.76, "end": 4991.64, "text": " So here is O2.", "tokens": [407, 510, 307, 422, 17, 13], "temperature": 0.0, "avg_logprob": -0.11947742559142031, "compression_ratio": 1.356687898089172, "no_speech_prob": 7.00212410720269e-07}, {"id": 1146, "seek": 499164, "start": 4991.64, "end": 4998.6, "text": " So let's start by importing NB01, and I just copied and pasted the three lines we used", "tokens": [407, 718, 311, 722, 538, 43866, 426, 33, 10607, 11, 293, 286, 445, 25365, 293, 1791, 292, 264, 1045, 3876, 321, 1143], "temperature": 0.0, "avg_logprob": -0.07267288863658905, "compression_ratio": 1.5782608695652174, "no_speech_prob": 2.769303819150082e-06}, {"id": 1147, "seek": 499164, "start": 4998.6, "end": 5002.200000000001, "text": " to grab the data, and I'm just going to pop them into a function so we can use it to grab", "tokens": [281, 4444, 264, 1412, 11, 293, 286, 478, 445, 516, 281, 1665, 552, 666, 257, 2445, 370, 321, 393, 764, 309, 281, 4444], "temperature": 0.0, "avg_logprob": -0.07267288863658905, "compression_ratio": 1.5782608695652174, "no_speech_prob": 2.769303819150082e-06}, {"id": 1148, "seek": 499164, "start": 5002.200000000001, "end": 5004.72, "text": " MNIST when we need it.", "tokens": [376, 45, 19756, 562, 321, 643, 309, 13], "temperature": 0.0, "avg_logprob": -0.07267288863658905, "compression_ratio": 1.5782608695652174, "no_speech_prob": 2.769303819150082e-06}, {"id": 1149, "seek": 499164, "start": 5004.72, "end": 5009.820000000001, "text": " And now that we know about broadcasting, let's create a normalization function that takes", "tokens": [400, 586, 300, 321, 458, 466, 30024, 11, 718, 311, 1884, 257, 2710, 2144, 2445, 300, 2516], "temperature": 0.0, "avg_logprob": -0.07267288863658905, "compression_ratio": 1.5782608695652174, "no_speech_prob": 2.769303819150082e-06}, {"id": 1150, "seek": 499164, "start": 5009.820000000001, "end": 5015.84, "text": " our tensor and subtracts the means and divides by the standard deviation.", "tokens": [527, 40863, 293, 16390, 82, 264, 1355, 293, 41347, 538, 264, 3832, 25163, 13], "temperature": 0.0, "avg_logprob": -0.07267288863658905, "compression_ratio": 1.5782608695652174, "no_speech_prob": 2.769303819150082e-06}, {"id": 1151, "seek": 501584, "start": 5015.84, "end": 5022.5, "text": " So now let's grab our data, okay, and pop it into XYXY.", "tokens": [407, 586, 718, 311, 4444, 527, 1412, 11, 1392, 11, 293, 1665, 309, 666, 48826, 55, 56, 13], "temperature": 0.0, "avg_logprob": -0.12873561442399226, "compression_ratio": 1.7906976744186047, "no_speech_prob": 6.144110102468403e-06}, {"id": 1152, "seek": 501584, "start": 5022.5, "end": 5028.76, "text": " Let's grab the mean and standard deviation, and notice that they're not zero and one.", "tokens": [961, 311, 4444, 264, 914, 293, 3832, 25163, 11, 293, 3449, 300, 436, 434, 406, 4018, 293, 472, 13], "temperature": 0.0, "avg_logprob": -0.12873561442399226, "compression_ratio": 1.7906976744186047, "no_speech_prob": 6.144110102468403e-06}, {"id": 1153, "seek": 501584, "start": 5028.76, "end": 5029.76, "text": " Why would they be?", "tokens": [1545, 576, 436, 312, 30], "temperature": 0.0, "avg_logprob": -0.12873561442399226, "compression_ratio": 1.7906976744186047, "no_speech_prob": 6.144110102468403e-06}, {"id": 1154, "seek": 501584, "start": 5029.76, "end": 5030.76, "text": " Right?", "tokens": [1779, 30], "temperature": 0.0, "avg_logprob": -0.12873561442399226, "compression_ratio": 1.7906976744186047, "no_speech_prob": 6.144110102468403e-06}, {"id": 1155, "seek": 501584, "start": 5030.76, "end": 5031.76, "text": " But we want them to be zero and one.", "tokens": [583, 321, 528, 552, 281, 312, 4018, 293, 472, 13], "temperature": 0.0, "avg_logprob": -0.12873561442399226, "compression_ratio": 1.7906976744186047, "no_speech_prob": 6.144110102468403e-06}, {"id": 1156, "seek": 501584, "start": 5031.76, "end": 5036.92, "text": " We're going to be seeing a lot of why we want them to be zero and one over the next couple", "tokens": [492, 434, 516, 281, 312, 2577, 257, 688, 295, 983, 321, 528, 552, 281, 312, 4018, 293, 472, 670, 264, 958, 1916], "temperature": 0.0, "avg_logprob": -0.12873561442399226, "compression_ratio": 1.7906976744186047, "no_speech_prob": 6.144110102468403e-06}, {"id": 1157, "seek": 501584, "start": 5036.92, "end": 5040.54, "text": " of lessons, but for now, let's just take my word for it.", "tokens": [295, 8820, 11, 457, 337, 586, 11, 718, 311, 445, 747, 452, 1349, 337, 309, 13], "temperature": 0.0, "avg_logprob": -0.12873561442399226, "compression_ratio": 1.7906976744186047, "no_speech_prob": 6.144110102468403e-06}, {"id": 1158, "seek": 501584, "start": 5040.54, "end": 5042.18, "text": " We want them to be zero and one.", "tokens": [492, 528, 552, 281, 312, 4018, 293, 472, 13], "temperature": 0.0, "avg_logprob": -0.12873561442399226, "compression_ratio": 1.7906976744186047, "no_speech_prob": 6.144110102468403e-06}, {"id": 1159, "seek": 504218, "start": 5042.18, "end": 5047.72, "text": " So that means that we need to subtract the mean, divide by the standard deviation, but", "tokens": [407, 300, 1355, 300, 321, 643, 281, 16390, 264, 914, 11, 9845, 538, 264, 3832, 25163, 11, 457], "temperature": 0.0, "avg_logprob": -0.1318740737572145, "compression_ratio": 1.9639175257731958, "no_speech_prob": 4.860301032749703e-06}, {"id": 1160, "seek": 504218, "start": 5047.72, "end": 5049.76, "text": " not for the validation set.", "tokens": [406, 337, 264, 24071, 992, 13], "temperature": 0.0, "avg_logprob": -0.1318740737572145, "compression_ratio": 1.9639175257731958, "no_speech_prob": 4.860301032749703e-06}, {"id": 1161, "seek": 504218, "start": 5049.76, "end": 5053.68, "text": " We don't subtract the validation set's mean and divide by the validation set's standard", "tokens": [492, 500, 380, 16390, 264, 24071, 992, 311, 914, 293, 9845, 538, 264, 24071, 992, 311, 3832], "temperature": 0.0, "avg_logprob": -0.1318740737572145, "compression_ratio": 1.9639175257731958, "no_speech_prob": 4.860301032749703e-06}, {"id": 1162, "seek": 504218, "start": 5053.68, "end": 5060.240000000001, "text": " deviation, because if we did, those two data sets would be on totally different scales.", "tokens": [25163, 11, 570, 498, 321, 630, 11, 729, 732, 1412, 6352, 576, 312, 322, 3879, 819, 17408, 13], "temperature": 0.0, "avg_logprob": -0.1318740737572145, "compression_ratio": 1.9639175257731958, "no_speech_prob": 4.860301032749703e-06}, {"id": 1163, "seek": 504218, "start": 5060.240000000001, "end": 5068.360000000001, "text": " So if the training set was mainly green frogs and the validation set was mainly red frogs,", "tokens": [407, 498, 264, 3097, 992, 390, 8704, 3092, 37107, 293, 264, 24071, 992, 390, 8704, 2182, 37107, 11], "temperature": 0.0, "avg_logprob": -0.1318740737572145, "compression_ratio": 1.9639175257731958, "no_speech_prob": 4.860301032749703e-06}, {"id": 1164, "seek": 506836, "start": 5068.36, "end": 5074.92, "text": " right, then if we normalize with the validation set's mean and variance, we would end up with", "tokens": [558, 11, 550, 498, 321, 2710, 1125, 365, 264, 24071, 992, 311, 914, 293, 21977, 11, 321, 576, 917, 493, 365], "temperature": 0.0, "avg_logprob": -0.13566364150449453, "compression_ratio": 1.6666666666666667, "no_speech_prob": 2.3686911845288705e-06}, {"id": 1165, "seek": 506836, "start": 5074.92, "end": 5080.28, "text": " them both having the same average coloration, and we wouldn't be able to tell the two apart,", "tokens": [552, 1293, 1419, 264, 912, 4274, 2017, 399, 11, 293, 321, 2759, 380, 312, 1075, 281, 980, 264, 732, 4936, 11], "temperature": 0.0, "avg_logprob": -0.13566364150449453, "compression_ratio": 1.6666666666666667, "no_speech_prob": 2.3686911845288705e-06}, {"id": 1166, "seek": 506836, "start": 5080.28, "end": 5081.28, "text": " right?", "tokens": [558, 30], "temperature": 0.0, "avg_logprob": -0.13566364150449453, "compression_ratio": 1.6666666666666667, "no_speech_prob": 2.3686911845288705e-06}, {"id": 1167, "seek": 506836, "start": 5081.28, "end": 5085.48, "text": " So that's an important thing to remember when normalizing is to always make sure your validation", "tokens": [407, 300, 311, 364, 1021, 551, 281, 1604, 562, 2710, 3319, 307, 281, 1009, 652, 988, 428, 24071], "temperature": 0.0, "avg_logprob": -0.13566364150449453, "compression_ratio": 1.6666666666666667, "no_speech_prob": 2.3686911845288705e-06}, {"id": 1168, "seek": 506836, "start": 5085.48, "end": 5088.96, "text": " and training set normalized in the same way.", "tokens": [293, 3097, 992, 48704, 294, 264, 912, 636, 13], "temperature": 0.0, "avg_logprob": -0.13566364150449453, "compression_ratio": 1.6666666666666667, "no_speech_prob": 2.3686911845288705e-06}, {"id": 1169, "seek": 508896, "start": 5088.96, "end": 5103.0, "text": " So after doing that, our mean is pretty close to zero, and our standard deviation is very", "tokens": [407, 934, 884, 300, 11, 527, 914, 307, 1238, 1998, 281, 4018, 11, 293, 527, 3832, 25163, 307, 588], "temperature": 0.0, "avg_logprob": -0.11924647162942326, "compression_ratio": 1.826086956521739, "no_speech_prob": 5.8625746532925405e-06}, {"id": 1170, "seek": 508896, "start": 5103.0, "end": 5107.04, "text": " close to one, and it would be nice to have something to easily check that these are true.", "tokens": [1998, 281, 472, 11, 293, 309, 576, 312, 1481, 281, 362, 746, 281, 3612, 1520, 300, 613, 366, 2074, 13], "temperature": 0.0, "avg_logprob": -0.11924647162942326, "compression_ratio": 1.826086956521739, "no_speech_prob": 5.8625746532925405e-06}, {"id": 1171, "seek": 508896, "start": 5107.04, "end": 5112.76, "text": " So let's create a test near zero function, and then test that the mean is near zero,", "tokens": [407, 718, 311, 1884, 257, 1500, 2651, 4018, 2445, 11, 293, 550, 1500, 300, 264, 914, 307, 2651, 4018, 11], "temperature": 0.0, "avg_logprob": -0.11924647162942326, "compression_ratio": 1.826086956521739, "no_speech_prob": 5.8625746532925405e-06}, {"id": 1172, "seek": 508896, "start": 5112.76, "end": 5118.24, "text": " and one minus the standard deviation is near zero, and that's all good.", "tokens": [293, 472, 3175, 264, 3832, 25163, 307, 2651, 4018, 11, 293, 300, 311, 439, 665, 13], "temperature": 0.0, "avg_logprob": -0.11924647162942326, "compression_ratio": 1.826086956521739, "no_speech_prob": 5.8625746532925405e-06}, {"id": 1173, "seek": 511824, "start": 5118.24, "end": 5125.48, "text": " Let's define n and m and c the same as before, so the size of the training set and the number", "tokens": [961, 311, 6964, 297, 293, 275, 293, 269, 264, 912, 382, 949, 11, 370, 264, 2744, 295, 264, 3097, 992, 293, 264, 1230], "temperature": 0.0, "avg_logprob": -0.12596336603164673, "compression_ratio": 1.5806451612903225, "no_speech_prob": 6.6433249230613e-06}, {"id": 1174, "seek": 511824, "start": 5125.48, "end": 5131.2, "text": " of activations we're going to eventually need in our model being c, and let's try to create", "tokens": [295, 2430, 763, 321, 434, 516, 281, 4728, 643, 294, 527, 2316, 885, 269, 11, 293, 718, 311, 853, 281, 1884], "temperature": 0.0, "avg_logprob": -0.12596336603164673, "compression_ratio": 1.5806451612903225, "no_speech_prob": 6.6433249230613e-06}, {"id": 1175, "seek": 511824, "start": 5131.2, "end": 5135.12, "text": " our model.", "tokens": [527, 2316, 13], "temperature": 0.0, "avg_logprob": -0.12596336603164673, "compression_ratio": 1.5806451612903225, "no_speech_prob": 6.6433249230613e-06}, {"id": 1176, "seek": 511824, "start": 5135.12, "end": 5136.7, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.12596336603164673, "compression_ratio": 1.5806451612903225, "no_speech_prob": 6.6433249230613e-06}, {"id": 1177, "seek": 511824, "start": 5136.7, "end": 5146.28, "text": " So the model is going to have one hidden layer, and normally we would want the final output", "tokens": [407, 264, 2316, 307, 516, 281, 362, 472, 7633, 4583, 11, 293, 5646, 321, 576, 528, 264, 2572, 5598], "temperature": 0.0, "avg_logprob": -0.12596336603164673, "compression_ratio": 1.5806451612903225, "no_speech_prob": 6.6433249230613e-06}, {"id": 1178, "seek": 514628, "start": 5146.28, "end": 5152.36, "text": " to have 10 activations because we would use cross-entropy against those 10 activations,", "tokens": [281, 362, 1266, 2430, 763, 570, 321, 576, 764, 3278, 12, 317, 27514, 1970, 729, 1266, 2430, 763, 11], "temperature": 0.0, "avg_logprob": -0.10985219760203925, "compression_ratio": 2.0242914979757085, "no_speech_prob": 1.0782732715597376e-05}, {"id": 1179, "seek": 514628, "start": 5152.36, "end": 5156.679999999999, "text": " but to simplify things for now, we're going to not use cross-entropy, we're going to use", "tokens": [457, 281, 20460, 721, 337, 586, 11, 321, 434, 516, 281, 406, 764, 3278, 12, 317, 27514, 11, 321, 434, 516, 281, 764], "temperature": 0.0, "avg_logprob": -0.10985219760203925, "compression_ratio": 2.0242914979757085, "no_speech_prob": 1.0782732715597376e-05}, {"id": 1180, "seek": 514628, "start": 5156.679999999999, "end": 5160.54, "text": " mean squared error, which means we're going to have one activation, okay?", "tokens": [914, 8889, 6713, 11, 597, 1355, 321, 434, 516, 281, 362, 472, 24433, 11, 1392, 30], "temperature": 0.0, "avg_logprob": -0.10985219760203925, "compression_ratio": 2.0242914979757085, "no_speech_prob": 1.0782732715597376e-05}, {"id": 1181, "seek": 514628, "start": 5160.54, "end": 5163.8, "text": " Which makes no sense from a modeling point of view, we'll fix that later, but just to", "tokens": [3013, 1669, 572, 2020, 490, 257, 15983, 935, 295, 1910, 11, 321, 603, 3191, 300, 1780, 11, 457, 445, 281], "temperature": 0.0, "avg_logprob": -0.10985219760203925, "compression_ratio": 2.0242914979757085, "no_speech_prob": 1.0782732715597376e-05}, {"id": 1182, "seek": 514628, "start": 5163.8, "end": 5165.5199999999995, "text": " simplify things for now.", "tokens": [20460, 721, 337, 586, 13], "temperature": 0.0, "avg_logprob": -0.10985219760203925, "compression_ratio": 2.0242914979757085, "no_speech_prob": 1.0782732715597376e-05}, {"id": 1183, "seek": 514628, "start": 5165.5199999999995, "end": 5173.36, "text": " So let's create a simple neural net with a single hidden layer and a single output activation", "tokens": [407, 718, 311, 1884, 257, 2199, 18161, 2533, 365, 257, 2167, 7633, 4583, 293, 257, 2167, 5598, 24433], "temperature": 0.0, "avg_logprob": -0.10985219760203925, "compression_ratio": 2.0242914979757085, "no_speech_prob": 1.0782732715597376e-05}, {"id": 1184, "seek": 514628, "start": 5173.36, "end": 5175.92, "text": " which we're going to use mean squared error.", "tokens": [597, 321, 434, 516, 281, 764, 914, 8889, 6713, 13], "temperature": 0.0, "avg_logprob": -0.10985219760203925, "compression_ratio": 2.0242914979757085, "no_speech_prob": 1.0782732715597376e-05}, {"id": 1185, "seek": 517592, "start": 5175.92, "end": 5180.86, "text": " So let's pick a hidden size, so the number of hidden will make 50, okay?", "tokens": [407, 718, 311, 1888, 257, 7633, 2744, 11, 370, 264, 1230, 295, 7633, 486, 652, 2625, 11, 1392, 30], "temperature": 0.0, "avg_logprob": -0.11005378236957625, "compression_ratio": 1.6971153846153846, "no_speech_prob": 2.3922844775370322e-05}, {"id": 1186, "seek": 517592, "start": 5180.86, "end": 5186.28, "text": " So our two layers, we're going to need two weight matrices and two bias vectors.", "tokens": [407, 527, 732, 7914, 11, 321, 434, 516, 281, 643, 732, 3364, 32284, 293, 732, 12577, 18875, 13], "temperature": 0.0, "avg_logprob": -0.11005378236957625, "compression_ratio": 1.6971153846153846, "no_speech_prob": 2.3922844775370322e-05}, {"id": 1187, "seek": 517592, "start": 5186.28, "end": 5193.82, "text": " So here are our two weight matrices, w1 and w2, so they're random numbers, normal random", "tokens": [407, 510, 366, 527, 732, 3364, 32284, 11, 261, 16, 293, 261, 17, 11, 370, 436, 434, 4974, 3547, 11, 2710, 4974], "temperature": 0.0, "avg_logprob": -0.11005378236957625, "compression_ratio": 1.6971153846153846, "no_speech_prob": 2.3922844775370322e-05}, {"id": 1188, "seek": 517592, "start": 5193.82, "end": 5200.6, "text": " numbers of size m, which is the number of columns, 768, by nh, number of hidden, and", "tokens": [3547, 295, 2744, 275, 11, 597, 307, 264, 1230, 295, 13766, 11, 24733, 23, 11, 538, 6245, 11, 1230, 295, 7633, 11, 293], "temperature": 0.0, "avg_logprob": -0.11005378236957625, "compression_ratio": 1.6971153846153846, "no_speech_prob": 2.3922844775370322e-05}, {"id": 1189, "seek": 517592, "start": 5200.6, "end": 5205.54, "text": " then this one is nh by 1.", "tokens": [550, 341, 472, 307, 6245, 538, 502, 13], "temperature": 0.0, "avg_logprob": -0.11005378236957625, "compression_ratio": 1.6971153846153846, "no_speech_prob": 2.3922844775370322e-05}, {"id": 1190, "seek": 520554, "start": 5205.54, "end": 5214.4, "text": " Now our inputs now are mean 0, standard deviation 1, the inputs to the first layer.", "tokens": [823, 527, 15743, 586, 366, 914, 1958, 11, 3832, 25163, 502, 11, 264, 15743, 281, 264, 700, 4583, 13], "temperature": 0.0, "avg_logprob": -0.13681735731151007, "compression_ratio": 1.7023809523809523, "no_speech_prob": 8.664334927743766e-06}, {"id": 1191, "seek": 520554, "start": 5214.4, "end": 5220.72, "text": " We want the inputs to the second layer to also be mean 0, standard deviation 1.", "tokens": [492, 528, 264, 15743, 281, 264, 1150, 4583, 281, 611, 312, 914, 1958, 11, 3832, 25163, 502, 13], "temperature": 0.0, "avg_logprob": -0.13681735731151007, "compression_ratio": 1.7023809523809523, "no_speech_prob": 8.664334927743766e-06}, {"id": 1192, "seek": 520554, "start": 5220.72, "end": 5225.12, "text": " Well, how are we going to do that?", "tokens": [1042, 11, 577, 366, 321, 516, 281, 360, 300, 30], "temperature": 0.0, "avg_logprob": -0.13681735731151007, "compression_ratio": 1.7023809523809523, "no_speech_prob": 8.664334927743766e-06}, {"id": 1193, "seek": 520554, "start": 5225.12, "end": 5234.12, "text": " Because if we just grab some normal random numbers and then we define a function called", "tokens": [1436, 498, 321, 445, 4444, 512, 2710, 4974, 3547, 293, 550, 321, 6964, 257, 2445, 1219], "temperature": 0.0, "avg_logprob": -0.13681735731151007, "compression_ratio": 1.7023809523809523, "no_speech_prob": 8.664334927743766e-06}, {"id": 1194, "seek": 523412, "start": 5234.12, "end": 5240.8, "text": " linear, this is our linear layer, which is x by w plus b, and then create t, which is", "tokens": [8213, 11, 341, 307, 527, 8213, 4583, 11, 597, 307, 2031, 538, 261, 1804, 272, 11, 293, 550, 1884, 256, 11, 597, 307], "temperature": 0.0, "avg_logprob": -0.09202904171413845, "compression_ratio": 1.6186046511627907, "no_speech_prob": 7.183138222899288e-06}, {"id": 1195, "seek": 523412, "start": 5240.8, "end": 5248.0199999999995, "text": " the activation of that linear layer with our validation set and our weights and biases.", "tokens": [264, 24433, 295, 300, 8213, 4583, 365, 527, 24071, 992, 293, 527, 17443, 293, 32152, 13], "temperature": 0.0, "avg_logprob": -0.09202904171413845, "compression_ratio": 1.6186046511627907, "no_speech_prob": 7.183138222899288e-06}, {"id": 1196, "seek": 523412, "start": 5248.0199999999995, "end": 5256.58, "text": " We have a mean of minus 5 and a variance, a standard deviation of 27, which is terrible.", "tokens": [492, 362, 257, 914, 295, 3175, 1025, 293, 257, 21977, 11, 257, 3832, 25163, 295, 7634, 11, 597, 307, 6237, 13], "temperature": 0.0, "avg_logprob": -0.09202904171413845, "compression_ratio": 1.6186046511627907, "no_speech_prob": 7.183138222899288e-06}, {"id": 1197, "seek": 523412, "start": 5256.58, "end": 5263.04, "text": " So I'm going to let you work through this at home, but once you actually look at what", "tokens": [407, 286, 478, 516, 281, 718, 291, 589, 807, 341, 412, 1280, 11, 457, 1564, 291, 767, 574, 412, 437], "temperature": 0.0, "avg_logprob": -0.09202904171413845, "compression_ratio": 1.6186046511627907, "no_speech_prob": 7.183138222899288e-06}, {"id": 1198, "seek": 526304, "start": 5263.04, "end": 5269.16, "text": " happens when you multiply those things together and add them up, as you do in matrix multiplication,", "tokens": [2314, 562, 291, 12972, 729, 721, 1214, 293, 909, 552, 493, 11, 382, 291, 360, 294, 8141, 27290, 11], "temperature": 0.0, "avg_logprob": -0.09167725489689754, "compression_ratio": 1.4176470588235295, "no_speech_prob": 7.766671842546202e-06}, {"id": 1199, "seek": 526304, "start": 5269.16, "end": 5271.76, "text": " you'll see that you're not going to end up with 0, 1.", "tokens": [291, 603, 536, 300, 291, 434, 406, 516, 281, 917, 493, 365, 1958, 11, 502, 13], "temperature": 0.0, "avg_logprob": -0.09167725489689754, "compression_ratio": 1.4176470588235295, "no_speech_prob": 7.766671842546202e-06}, {"id": 1200, "seek": 526304, "start": 5271.76, "end": 5287.8, "text": " But if instead you divide by square root m, so root 768, then it's actually damn good.", "tokens": [583, 498, 2602, 291, 9845, 538, 3732, 5593, 275, 11, 370, 5593, 24733, 23, 11, 550, 309, 311, 767, 8151, 665, 13], "temperature": 0.0, "avg_logprob": -0.09167725489689754, "compression_ratio": 1.4176470588235295, "no_speech_prob": 7.766671842546202e-06}, {"id": 1201, "seek": 528780, "start": 5287.8, "end": 5295.24, "text": " So this is a simplified version of something which PyTorch calls a Keiming initialization,", "tokens": [407, 341, 307, 257, 26335, 3037, 295, 746, 597, 9953, 51, 284, 339, 5498, 257, 3189, 332, 278, 5883, 2144, 11], "temperature": 0.0, "avg_logprob": -0.20637989044189453, "compression_ratio": 1.5172413793103448, "no_speech_prob": 8.800392606644891e-06}, {"id": 1202, "seek": 528780, "start": 5295.24, "end": 5300.08, "text": " named after Keiming He, who wrote a paper or was the lead writer of a paper that we", "tokens": [4926, 934, 3189, 332, 278, 634, 11, 567, 4114, 257, 3035, 420, 390, 264, 1477, 9936, 295, 257, 3035, 300, 321], "temperature": 0.0, "avg_logprob": -0.20637989044189453, "compression_ratio": 1.5172413793103448, "no_speech_prob": 8.800392606644891e-06}, {"id": 1203, "seek": 528780, "start": 5300.08, "end": 5304.4400000000005, "text": " are looking at, look at in a moment.", "tokens": [366, 1237, 412, 11, 574, 412, 294, 257, 1623, 13], "temperature": 0.0, "avg_logprob": -0.20637989044189453, "compression_ratio": 1.5172413793103448, "no_speech_prob": 8.800392606644891e-06}, {"id": 1204, "seek": 528780, "start": 5304.4400000000005, "end": 5313.400000000001, "text": " So the weights, rand n, gives you random numbers with a mean of 0 and a standard deviation", "tokens": [407, 264, 17443, 11, 367, 474, 297, 11, 2709, 291, 4974, 3547, 365, 257, 914, 295, 1958, 293, 257, 3832, 25163], "temperature": 0.0, "avg_logprob": -0.20637989044189453, "compression_ratio": 1.5172413793103448, "no_speech_prob": 8.800392606644891e-06}, {"id": 1205, "seek": 528780, "start": 5313.400000000001, "end": 5315.14, "text": " of 1.", "tokens": [295, 502, 13], "temperature": 0.0, "avg_logprob": -0.20637989044189453, "compression_ratio": 1.5172413793103448, "no_speech_prob": 8.800392606644891e-06}, {"id": 1206, "seek": 531514, "start": 5315.14, "end": 5320.4800000000005, "text": " So if you divide by root m, it will have a mean of 0 and a standard deviation of 1 on", "tokens": [407, 498, 291, 9845, 538, 5593, 275, 11, 309, 486, 362, 257, 914, 295, 1958, 293, 257, 3832, 25163, 295, 502, 322], "temperature": 0.0, "avg_logprob": -0.08850067511372182, "compression_ratio": 1.64, "no_speech_prob": 1.0451346497575287e-05}, {"id": 1207, "seek": 531514, "start": 5320.4800000000005, "end": 5321.4800000000005, "text": " root m.", "tokens": [5593, 275, 13], "temperature": 0.0, "avg_logprob": -0.08850067511372182, "compression_ratio": 1.64, "no_speech_prob": 1.0451346497575287e-05}, {"id": 1208, "seek": 531514, "start": 5321.4800000000005, "end": 5326.56, "text": " So we can test those.", "tokens": [407, 321, 393, 1500, 729, 13], "temperature": 0.0, "avg_logprob": -0.08850067511372182, "compression_ratio": 1.64, "no_speech_prob": 1.0451346497575287e-05}, {"id": 1209, "seek": 531514, "start": 5326.56, "end": 5337.04, "text": " So in general, normal random numbers of mean 0 and standard deviation of 1 over root of", "tokens": [407, 294, 2674, 11, 2710, 4974, 3547, 295, 914, 1958, 293, 3832, 25163, 295, 502, 670, 5593, 295], "temperature": 0.0, "avg_logprob": -0.08850067511372182, "compression_ratio": 1.64, "no_speech_prob": 1.0451346497575287e-05}, {"id": 1210, "seek": 531514, "start": 5337.04, "end": 5344.68, "text": " whatever this is, so here it's m and here it's nH, will give you an output of 0, 1.", "tokens": [2035, 341, 307, 11, 370, 510, 309, 311, 275, 293, 510, 309, 311, 297, 39, 11, 486, 976, 291, 364, 5598, 295, 1958, 11, 502, 13], "temperature": 0.0, "avg_logprob": -0.08850067511372182, "compression_ratio": 1.64, "no_speech_prob": 1.0451346497575287e-05}, {"id": 1211, "seek": 534468, "start": 5344.68, "end": 5349.0, "text": " Now this may seem like a pretty minor issue, but as we're going to see in the next couple", "tokens": [823, 341, 815, 1643, 411, 257, 1238, 6696, 2734, 11, 457, 382, 321, 434, 516, 281, 536, 294, 264, 958, 1916], "temperature": 0.0, "avg_logprob": -0.10033460842665806, "compression_ratio": 1.5782608695652174, "no_speech_prob": 9.36845663090935e-06}, {"id": 1212, "seek": 534468, "start": 5349.0, "end": 5354.8, "text": " of lessons, it's like the thing that matters when it comes to training neural nets.", "tokens": [295, 8820, 11, 309, 311, 411, 264, 551, 300, 7001, 562, 309, 1487, 281, 3097, 18161, 36170, 13], "temperature": 0.0, "avg_logprob": -0.10033460842665806, "compression_ratio": 1.5782608695652174, "no_speech_prob": 9.36845663090935e-06}, {"id": 1213, "seek": 534468, "start": 5354.8, "end": 5360.360000000001, "text": " It's actually, in the last few months, people have really been noticing how important this", "tokens": [467, 311, 767, 11, 294, 264, 1036, 1326, 2493, 11, 561, 362, 534, 668, 21814, 577, 1021, 341], "temperature": 0.0, "avg_logprob": -0.10033460842665806, "compression_ratio": 1.5782608695652174, "no_speech_prob": 9.36845663090935e-06}, {"id": 1214, "seek": 534468, "start": 5360.360000000001, "end": 5361.52, "text": " is.", "tokens": [307, 13], "temperature": 0.0, "avg_logprob": -0.10033460842665806, "compression_ratio": 1.5782608695652174, "no_speech_prob": 9.36845663090935e-06}, {"id": 1215, "seek": 534468, "start": 5361.52, "end": 5372.84, "text": " There are things like fix-up initialization, where these folks actually trained a 10,000-layer", "tokens": [821, 366, 721, 411, 3191, 12, 1010, 5883, 2144, 11, 689, 613, 4024, 767, 8895, 257, 1266, 11, 1360, 12, 8376, 260], "temperature": 0.0, "avg_logprob": -0.10033460842665806, "compression_ratio": 1.5782608695652174, "no_speech_prob": 9.36845663090935e-06}, {"id": 1216, "seek": 537284, "start": 5372.84, "end": 5382.4800000000005, "text": " deep neural network with no normalization layers, just by basically doing careful initialization.", "tokens": [2452, 18161, 3209, 365, 572, 2710, 2144, 7914, 11, 445, 538, 1936, 884, 5026, 5883, 2144, 13], "temperature": 0.0, "avg_logprob": -0.13967954984275244, "compression_ratio": 1.6213991769547325, "no_speech_prob": 1.384547067573294e-05}, {"id": 1217, "seek": 537284, "start": 5382.4800000000005, "end": 5388.360000000001, "text": " So people are really spending a lot of time now thinking, like, okay, how we initialize", "tokens": [407, 561, 366, 534, 6434, 257, 688, 295, 565, 586, 1953, 11, 411, 11, 1392, 11, 577, 321, 5883, 1125], "temperature": 0.0, "avg_logprob": -0.13967954984275244, "compression_ratio": 1.6213991769547325, "no_speech_prob": 1.384547067573294e-05}, {"id": 1218, "seek": 537284, "start": 5388.360000000001, "end": 5389.88, "text": " things is really important.", "tokens": [721, 307, 534, 1021, 13], "temperature": 0.0, "avg_logprob": -0.13967954984275244, "compression_ratio": 1.6213991769547325, "no_speech_prob": 1.384547067573294e-05}, {"id": 1219, "seek": 537284, "start": 5389.88, "end": 5396.56, "text": " And we've had a lot of success with things like one-cycle training and superconvergence,", "tokens": [400, 321, 600, 632, 257, 688, 295, 2245, 365, 721, 411, 472, 12, 14796, 3097, 293, 1687, 1671, 331, 15260, 11], "temperature": 0.0, "avg_logprob": -0.13967954984275244, "compression_ratio": 1.6213991769547325, "no_speech_prob": 1.384547067573294e-05}, {"id": 1220, "seek": 537284, "start": 5396.56, "end": 5402.82, "text": " which is all about what happens in those first few iterations, and it really turns out that", "tokens": [597, 307, 439, 466, 437, 2314, 294, 729, 700, 1326, 36540, 11, 293, 309, 534, 4523, 484, 300], "temperature": 0.0, "avg_logprob": -0.13967954984275244, "compression_ratio": 1.6213991769547325, "no_speech_prob": 1.384547067573294e-05}, {"id": 1221, "seek": 540282, "start": 5402.82, "end": 5405.04, "text": " it's all about initializations.", "tokens": [309, 311, 439, 466, 5883, 14455, 13], "temperature": 0.0, "avg_logprob": -0.130754721366753, "compression_ratio": 1.688034188034188, "no_speech_prob": 2.5215581445081625e-06}, {"id": 1222, "seek": 540282, "start": 5405.04, "end": 5410.0, "text": " So we're going to be spending a lot of time studying this in depth.", "tokens": [407, 321, 434, 516, 281, 312, 6434, 257, 688, 295, 565, 7601, 341, 294, 7161, 13], "temperature": 0.0, "avg_logprob": -0.130754721366753, "compression_ratio": 1.688034188034188, "no_speech_prob": 2.5215581445081625e-06}, {"id": 1223, "seek": 540282, "start": 5410.0, "end": 5415.4, "text": " So the first thing I'm going to point out is that this is actually not how our first", "tokens": [407, 264, 700, 551, 286, 478, 516, 281, 935, 484, 307, 300, 341, 307, 767, 406, 577, 527, 700], "temperature": 0.0, "avg_logprob": -0.130754721366753, "compression_ratio": 1.688034188034188, "no_speech_prob": 2.5215581445081625e-06}, {"id": 1224, "seek": 540282, "start": 5415.4, "end": 5417.599999999999, "text": " layer is defined.", "tokens": [4583, 307, 7642, 13], "temperature": 0.0, "avg_logprob": -0.130754721366753, "compression_ratio": 1.688034188034188, "no_speech_prob": 2.5215581445081625e-06}, {"id": 1225, "seek": 540282, "start": 5417.599999999999, "end": 5420.04, "text": " Our first layer is actually defined like this.", "tokens": [2621, 700, 4583, 307, 767, 7642, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.130754721366753, "compression_ratio": 1.688034188034188, "no_speech_prob": 2.5215581445081625e-06}, {"id": 1226, "seek": 540282, "start": 5420.04, "end": 5422.04, "text": " It's got a ReLU on it.", "tokens": [467, 311, 658, 257, 1300, 43, 52, 322, 309, 13], "temperature": 0.0, "avg_logprob": -0.130754721366753, "compression_ratio": 1.688034188034188, "no_speech_prob": 2.5215581445081625e-06}, {"id": 1227, "seek": 540282, "start": 5422.04, "end": 5423.96, "text": " So first let's define ReLU.", "tokens": [407, 700, 718, 311, 6964, 1300, 43, 52, 13], "temperature": 0.0, "avg_logprob": -0.130754721366753, "compression_ratio": 1.688034188034188, "no_speech_prob": 2.5215581445081625e-06}, {"id": 1228, "seek": 540282, "start": 5423.96, "end": 5429.82, "text": " So ReLU is just grab our data and replace any negatives with zeros.", "tokens": [407, 1300, 43, 52, 307, 445, 4444, 527, 1412, 293, 7406, 604, 40019, 365, 35193, 13], "temperature": 0.0, "avg_logprob": -0.130754721366753, "compression_ratio": 1.688034188034188, "no_speech_prob": 2.5215581445081625e-06}, {"id": 1229, "seek": 540282, "start": 5429.82, "end": 5431.5199999999995, "text": " That's all ClampMin means.", "tokens": [663, 311, 439, 2033, 1215, 30031, 1355, 13], "temperature": 0.0, "avg_logprob": -0.130754721366753, "compression_ratio": 1.688034188034188, "no_speech_prob": 2.5215581445081625e-06}, {"id": 1230, "seek": 543152, "start": 5431.52, "end": 5436.68, "text": " Now, there's lots of ways I could have written this, but if you can do it with something", "tokens": [823, 11, 456, 311, 3195, 295, 2098, 286, 727, 362, 3720, 341, 11, 457, 498, 291, 393, 360, 309, 365, 746], "temperature": 0.0, "avg_logprob": -0.14137538399283342, "compression_ratio": 1.6330935251798562, "no_speech_prob": 1.4285120414569974e-05}, {"id": 1231, "seek": 543152, "start": 5436.68, "end": 5440.68, "text": " that's like a single function in PyTorch, it's almost always faster because that thing's", "tokens": [300, 311, 411, 257, 2167, 2445, 294, 9953, 51, 284, 339, 11, 309, 311, 1920, 1009, 4663, 570, 300, 551, 311], "temperature": 0.0, "avg_logprob": -0.14137538399283342, "compression_ratio": 1.6330935251798562, "no_speech_prob": 1.4285120414569974e-05}, {"id": 1232, "seek": 543152, "start": 5440.68, "end": 5442.280000000001, "text": " generally written in C for you.", "tokens": [5101, 3720, 294, 383, 337, 291, 13], "temperature": 0.0, "avg_logprob": -0.14137538399283342, "compression_ratio": 1.6330935251798562, "no_speech_prob": 1.4285120414569974e-05}, {"id": 1233, "seek": 543152, "start": 5442.280000000001, "end": 5445.88, "text": " So try to find the thing that's as close to what you want as possible.", "tokens": [407, 853, 281, 915, 264, 551, 300, 311, 382, 1998, 281, 437, 291, 528, 382, 1944, 13], "temperature": 0.0, "avg_logprob": -0.14137538399283342, "compression_ratio": 1.6330935251798562, "no_speech_prob": 1.4285120414569974e-05}, {"id": 1234, "seek": 543152, "start": 5445.88, "end": 5447.88, "text": " There's a lot of functions in PyTorch.", "tokens": [821, 311, 257, 688, 295, 6828, 294, 9953, 51, 284, 339, 13], "temperature": 0.0, "avg_logprob": -0.14137538399283342, "compression_ratio": 1.6330935251798562, "no_speech_prob": 1.4285120414569974e-05}, {"id": 1235, "seek": 543152, "start": 5447.88, "end": 5451.92, "text": " So that's a good way of implementing ReLU.", "tokens": [407, 300, 311, 257, 665, 636, 295, 18114, 1300, 43, 52, 13], "temperature": 0.0, "avg_logprob": -0.14137538399283342, "compression_ratio": 1.6330935251798562, "no_speech_prob": 1.4285120414569974e-05}, {"id": 1236, "seek": 543152, "start": 5451.92, "end": 5459.280000000001, "text": " And unfortunately, that does not have the mean zero and standard deviation of one.", "tokens": [400, 7015, 11, 300, 775, 406, 362, 264, 914, 4018, 293, 3832, 25163, 295, 472, 13], "temperature": 0.0, "avg_logprob": -0.14137538399283342, "compression_ratio": 1.6330935251798562, "no_speech_prob": 1.4285120414569974e-05}, {"id": 1237, "seek": 543152, "start": 5459.280000000001, "end": 5461.280000000001, "text": " Why not?", "tokens": [1545, 406, 30], "temperature": 0.0, "avg_logprob": -0.14137538399283342, "compression_ratio": 1.6330935251798562, "no_speech_prob": 1.4285120414569974e-05}, {"id": 1238, "seek": 546128, "start": 5461.28, "end": 5465.84, "text": " Where's my stylus?", "tokens": [2305, 311, 452, 7952, 3063, 30], "temperature": 0.0, "avg_logprob": -0.18875896229463465, "compression_ratio": 1.1222222222222222, "no_speech_prob": 8.267725206678733e-06}, {"id": 1239, "seek": 546128, "start": 5465.84, "end": 5468.04, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.18875896229463465, "compression_ratio": 1.1222222222222222, "no_speech_prob": 8.267725206678733e-06}, {"id": 1240, "seek": 546128, "start": 5468.04, "end": 5483.28, "text": " So we had some data that had a mean of zero and a standard deviation of one.", "tokens": [407, 321, 632, 512, 1412, 300, 632, 257, 914, 295, 4018, 293, 257, 3832, 25163, 295, 472, 13], "temperature": 0.0, "avg_logprob": -0.18875896229463465, "compression_ratio": 1.1222222222222222, "no_speech_prob": 8.267725206678733e-06}, {"id": 1241, "seek": 548328, "start": 5483.28, "end": 5493.92, "text": " And then we took everything that was smaller than zero and removed it.", "tokens": [400, 550, 321, 1890, 1203, 300, 390, 4356, 813, 4018, 293, 7261, 309, 13], "temperature": 0.0, "avg_logprob": -0.07929940025011699, "compression_ratio": 1.4887218045112782, "no_speech_prob": 7.453697890014155e-07}, {"id": 1242, "seek": 548328, "start": 5493.92, "end": 5500.719999999999, "text": " So that obviously does not have a mean of zero and it obviously now has about half the", "tokens": [407, 300, 2745, 775, 406, 362, 257, 914, 295, 4018, 293, 309, 2745, 586, 575, 466, 1922, 264], "temperature": 0.0, "avg_logprob": -0.07929940025011699, "compression_ratio": 1.4887218045112782, "no_speech_prob": 7.453697890014155e-07}, {"id": 1243, "seek": 548328, "start": 5500.719999999999, "end": 5504.719999999999, "text": " standard deviation that it used to have.", "tokens": [3832, 25163, 300, 309, 1143, 281, 362, 13], "temperature": 0.0, "avg_logprob": -0.07929940025011699, "compression_ratio": 1.4887218045112782, "no_speech_prob": 7.453697890014155e-07}, {"id": 1244, "seek": 550472, "start": 5504.72, "end": 5513.76, "text": " So this was one of the fantastic insights and one of the most extraordinary papers of", "tokens": [407, 341, 390, 472, 295, 264, 5456, 14310, 293, 472, 295, 264, 881, 10581, 10577, 295], "temperature": 0.0, "avg_logprob": -0.155238037109375, "compression_ratio": 1.4816753926701571, "no_speech_prob": 1.7061078096958227e-06}, {"id": 1245, "seek": 550472, "start": 5513.76, "end": 5515.4800000000005, "text": " the last few years.", "tokens": [264, 1036, 1326, 924, 13], "temperature": 0.0, "avg_logprob": -0.155238037109375, "compression_ratio": 1.4816753926701571, "no_speech_prob": 1.7061078096958227e-06}, {"id": 1246, "seek": 550472, "start": 5515.4800000000005, "end": 5522.64, "text": " It was the paper from the 2015 ImageNet winners led by the person we've mentioned, Kai Ming", "tokens": [467, 390, 264, 3035, 490, 264, 7546, 29903, 31890, 17193, 4684, 538, 264, 954, 321, 600, 2835, 11, 20753, 19352], "temperature": 0.0, "avg_logprob": -0.155238037109375, "compression_ratio": 1.4816753926701571, "no_speech_prob": 1.7061078096958227e-06}, {"id": 1247, "seek": 550472, "start": 5522.64, "end": 5523.64, "text": " He.", "tokens": [634, 13], "temperature": 0.0, "avg_logprob": -0.155238037109375, "compression_ratio": 1.4816753926701571, "no_speech_prob": 1.7061078096958227e-06}, {"id": 1248, "seek": 550472, "start": 5523.64, "end": 5527.76, "text": " Kai Ming at that time was at Microsoft Research.", "tokens": [20753, 19352, 412, 300, 565, 390, 412, 8116, 10303, 13], "temperature": 0.0, "avg_logprob": -0.155238037109375, "compression_ratio": 1.4816753926701571, "no_speech_prob": 1.7061078096958227e-06}, {"id": 1249, "seek": 550472, "start": 5527.76, "end": 5532.4400000000005, "text": " And this is full of great ideas.", "tokens": [400, 341, 307, 1577, 295, 869, 3487, 13], "temperature": 0.0, "avg_logprob": -0.155238037109375, "compression_ratio": 1.4816753926701571, "no_speech_prob": 1.7061078096958227e-06}, {"id": 1250, "seek": 553244, "start": 5532.44, "end": 5537.599999999999, "text": " Getting papers from competition winners is a very, very good idea because they tend to", "tokens": [13674, 10577, 490, 6211, 17193, 307, 257, 588, 11, 588, 665, 1558, 570, 436, 3928, 281], "temperature": 0.0, "avg_logprob": -0.16532593906515897, "compression_ratio": 1.6091954022988506, "no_speech_prob": 7.888594154792372e-06}, {"id": 1251, "seek": 553244, "start": 5537.599999999999, "end": 5542.759999999999, "text": " be, you know, normal papers will have like one tiny tweak that they spend pages and pages", "tokens": [312, 11, 291, 458, 11, 2710, 10577, 486, 362, 411, 472, 5870, 29879, 300, 436, 3496, 7183, 293, 7183], "temperature": 0.0, "avg_logprob": -0.16532593906515897, "compression_ratio": 1.6091954022988506, "no_speech_prob": 7.888594154792372e-06}, {"id": 1252, "seek": 553244, "start": 5542.759999999999, "end": 5545.96, "text": " trying to justify why they should be accepted into NeurIPS.", "tokens": [1382, 281, 20833, 983, 436, 820, 312, 9035, 666, 1734, 374, 40, 6273, 13], "temperature": 0.0, "avg_logprob": -0.16532593906515897, "compression_ratio": 1.6091954022988506, "no_speech_prob": 7.888594154792372e-06}, {"id": 1253, "seek": 553244, "start": 5545.96, "end": 5551.44, "text": " Whereas competition winners have 20 good ideas and only time to mention them in passing.", "tokens": [13813, 6211, 17193, 362, 945, 665, 3487, 293, 787, 565, 281, 2152, 552, 294, 8437, 13], "temperature": 0.0, "avg_logprob": -0.16532593906515897, "compression_ratio": 1.6091954022988506, "no_speech_prob": 7.888594154792372e-06}, {"id": 1254, "seek": 553244, "start": 5551.44, "end": 5558.5199999999995, "text": " This paper introduced us to ResNets, PreLU layers, and Kai Ming initialization amongst", "tokens": [639, 3035, 7268, 505, 281, 5015, 45, 1385, 11, 6001, 43, 52, 7914, 11, 293, 20753, 19352, 5883, 2144, 12918], "temperature": 0.0, "avg_logprob": -0.16532593906515897, "compression_ratio": 1.6091954022988506, "no_speech_prob": 7.888594154792372e-06}, {"id": 1255, "seek": 553244, "start": 5558.5199999999995, "end": 5559.839999999999, "text": " others.", "tokens": [2357, 13], "temperature": 0.0, "avg_logprob": -0.16532593906515897, "compression_ratio": 1.6091954022988506, "no_speech_prob": 7.888594154792372e-06}, {"id": 1256, "seek": 555984, "start": 5559.84, "end": 5568.38, "text": " So here is section 2.2.", "tokens": [407, 510, 307, 3541, 568, 13, 17, 13], "temperature": 0.0, "avg_logprob": -0.14076434864717371, "compression_ratio": 1.6702702702702703, "no_speech_prob": 6.854099410702474e-06}, {"id": 1257, "seek": 555984, "start": 5568.38, "end": 5571.84, "text": " Section 2.2, initialization of filter weights or rectifiers.", "tokens": [21804, 568, 13, 17, 11, 5883, 2144, 295, 6608, 17443, 420, 11048, 23463, 13], "temperature": 0.0, "avg_logprob": -0.14076434864717371, "compression_ratio": 1.6702702702702703, "no_speech_prob": 6.854099410702474e-06}, {"id": 1258, "seek": 555984, "start": 5571.84, "end": 5572.84, "text": " What's a rectifier?", "tokens": [708, 311, 257, 11048, 9902, 30], "temperature": 0.0, "avg_logprob": -0.14076434864717371, "compression_ratio": 1.6702702702702703, "no_speech_prob": 6.854099410702474e-06}, {"id": 1259, "seek": 555984, "start": 5572.84, "end": 5578.92, "text": " A rectifier is a rectified linear unit or rectifier network is any neural network with", "tokens": [316, 11048, 9902, 307, 257, 11048, 2587, 8213, 4985, 420, 11048, 9902, 3209, 307, 604, 18161, 3209, 365], "temperature": 0.0, "avg_logprob": -0.14076434864717371, "compression_ratio": 1.6702702702702703, "no_speech_prob": 6.854099410702474e-06}, {"id": 1260, "seek": 555984, "start": 5578.92, "end": 5581.16, "text": " rectifier linear units in it.", "tokens": [11048, 9902, 8213, 6815, 294, 309, 13], "temperature": 0.0, "avg_logprob": -0.14076434864717371, "compression_ratio": 1.6702702702702703, "no_speech_prob": 6.854099410702474e-06}, {"id": 1261, "seek": 555984, "start": 5581.16, "end": 5587.12, "text": " This is only 2015 but it already reads like something from another age in so many ways.", "tokens": [639, 307, 787, 7546, 457, 309, 1217, 15700, 411, 746, 490, 1071, 3205, 294, 370, 867, 2098, 13], "temperature": 0.0, "avg_logprob": -0.14076434864717371, "compression_ratio": 1.6702702702702703, "no_speech_prob": 6.854099410702474e-06}, {"id": 1262, "seek": 558712, "start": 5587.12, "end": 5593.12, "text": " Like even the word rectifier units and traditional sigmoid activation networks, no one uses sigmoid", "tokens": [1743, 754, 264, 1349, 11048, 9902, 6815, 293, 5164, 4556, 3280, 327, 24433, 9590, 11, 572, 472, 4960, 4556, 3280, 327], "temperature": 0.0, "avg_logprob": -0.14214504516876494, "compression_ratio": 1.6380597014925373, "no_speech_prob": 2.902251026171143e-06}, {"id": 1263, "seek": 558712, "start": 5593.12, "end": 5595.2, "text": " activations anymore.", "tokens": [2430, 763, 3602, 13], "temperature": 0.0, "avg_logprob": -0.14214504516876494, "compression_ratio": 1.6380597014925373, "no_speech_prob": 2.902251026171143e-06}, {"id": 1264, "seek": 558712, "start": 5595.2, "end": 5596.84, "text": " So a lot's changed since 2015.", "tokens": [407, 257, 688, 311, 3105, 1670, 7546, 13], "temperature": 0.0, "avg_logprob": -0.14214504516876494, "compression_ratio": 1.6380597014925373, "no_speech_prob": 2.902251026171143e-06}, {"id": 1265, "seek": 558712, "start": 5596.84, "end": 5599.88, "text": " So when you read these papers, you kind of have to keep these things in mind.", "tokens": [407, 562, 291, 1401, 613, 10577, 11, 291, 733, 295, 362, 281, 1066, 613, 721, 294, 1575, 13], "temperature": 0.0, "avg_logprob": -0.14214504516876494, "compression_ratio": 1.6380597014925373, "no_speech_prob": 2.902251026171143e-06}, {"id": 1266, "seek": 558712, "start": 5599.88, "end": 5609.5199999999995, "text": " They describe how, what happens if you train very deep models with more than eight layers.", "tokens": [814, 6786, 577, 11, 437, 2314, 498, 291, 3847, 588, 2452, 5245, 365, 544, 813, 3180, 7914, 13], "temperature": 0.0, "avg_logprob": -0.14214504516876494, "compression_ratio": 1.6380597014925373, "no_speech_prob": 2.902251026171143e-06}, {"id": 1267, "seek": 558712, "start": 5609.5199999999995, "end": 5611.5599999999995, "text": " So things have changed, right?", "tokens": [407, 721, 362, 3105, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.14214504516876494, "compression_ratio": 1.6380597014925373, "no_speech_prob": 2.902251026171143e-06}, {"id": 1268, "seek": 558712, "start": 5611.5599999999995, "end": 5616.16, "text": " But anyway, they said that in the old days, people used to initialize these with random", "tokens": [583, 4033, 11, 436, 848, 300, 294, 264, 1331, 1708, 11, 561, 1143, 281, 5883, 1125, 613, 365, 4974], "temperature": 0.0, "avg_logprob": -0.14214504516876494, "compression_ratio": 1.6380597014925373, "no_speech_prob": 2.902251026171143e-06}, {"id": 1269, "seek": 561616, "start": 5616.16, "end": 5617.96, "text": " Gaussian distributions.", "tokens": [39148, 37870, 13], "temperature": 0.0, "avg_logprob": -0.154199271366514, "compression_ratio": 1.6612903225806452, "no_speech_prob": 2.5464905775152147e-05}, {"id": 1270, "seek": 561616, "start": 5617.96, "end": 5620.0, "text": " So this is a Gaussian distribution.", "tokens": [407, 341, 307, 257, 39148, 7316, 13], "temperature": 0.0, "avg_logprob": -0.154199271366514, "compression_ratio": 1.6612903225806452, "no_speech_prob": 2.5464905775152147e-05}, {"id": 1271, "seek": 561616, "start": 5620.0, "end": 5624.88, "text": " It's just a fancy word for normal or bell-shaped.", "tokens": [467, 311, 445, 257, 10247, 1349, 337, 2710, 420, 4549, 12, 23103, 13], "temperature": 0.0, "avg_logprob": -0.154199271366514, "compression_ratio": 1.6612903225806452, "no_speech_prob": 2.5464905775152147e-05}, {"id": 1272, "seek": 561616, "start": 5624.88, "end": 5630.0, "text": " And when you do that, they tend to not train very well.", "tokens": [400, 562, 291, 360, 300, 11, 436, 3928, 281, 406, 3847, 588, 731, 13], "temperature": 0.0, "avg_logprob": -0.154199271366514, "compression_ratio": 1.6612903225806452, "no_speech_prob": 2.5464905775152147e-05}, {"id": 1273, "seek": 561616, "start": 5630.0, "end": 5635.4, "text": " And the reason why they point out, or actually, Loro and Benjio pointed out, let's look at", "tokens": [400, 264, 1778, 983, 436, 935, 484, 11, 420, 767, 11, 441, 10780, 293, 3964, 73, 1004, 10932, 484, 11, 718, 311, 574, 412], "temperature": 0.0, "avg_logprob": -0.154199271366514, "compression_ratio": 1.6612903225806452, "no_speech_prob": 2.5464905775152147e-05}, {"id": 1274, "seek": 561616, "start": 5635.4, "end": 5638.88, "text": " that paper.", "tokens": [300, 3035, 13], "temperature": 0.0, "avg_logprob": -0.154199271366514, "compression_ratio": 1.6612903225806452, "no_speech_prob": 2.5464905775152147e-05}, {"id": 1275, "seek": 561616, "start": 5638.88, "end": 5641.639999999999, "text": " So you'll see two initializations come up all the time.", "tokens": [407, 291, 603, 536, 732, 5883, 14455, 808, 493, 439, 264, 565, 13], "temperature": 0.0, "avg_logprob": -0.154199271366514, "compression_ratio": 1.6612903225806452, "no_speech_prob": 2.5464905775152147e-05}, {"id": 1276, "seek": 561616, "start": 5641.639999999999, "end": 5645.78, "text": " One is either Kai Ming or He initialization, which is this one, or the other you'll see", "tokens": [1485, 307, 2139, 20753, 19352, 420, 634, 5883, 2144, 11, 597, 307, 341, 472, 11, 420, 264, 661, 291, 603, 536], "temperature": 0.0, "avg_logprob": -0.154199271366514, "compression_ratio": 1.6612903225806452, "no_speech_prob": 2.5464905775152147e-05}, {"id": 1277, "seek": 564578, "start": 5645.78, "end": 5655.0, "text": " a lot is Gloro or Xavier initialization, again, named after Xavier Gloro.", "tokens": [257, 688, 307, 5209, 10780, 420, 44653, 5883, 2144, 11, 797, 11, 4926, 934, 44653, 5209, 10780, 13], "temperature": 0.0, "avg_logprob": -0.1211855976851945, "compression_ratio": 1.5892857142857142, "no_speech_prob": 5.9547569435380865e-06}, {"id": 1278, "seek": 564578, "start": 5655.0, "end": 5656.679999999999, "text": " This is a really interesting paper to read.", "tokens": [639, 307, 257, 534, 1880, 3035, 281, 1401, 13], "temperature": 0.0, "avg_logprob": -0.1211855976851945, "compression_ratio": 1.5892857142857142, "no_speech_prob": 5.9547569435380865e-06}, {"id": 1279, "seek": 564578, "start": 5656.679999999999, "end": 5657.679999999999, "text": " It's a slightly older one.", "tokens": [467, 311, 257, 4748, 4906, 472, 13], "temperature": 0.0, "avg_logprob": -0.1211855976851945, "compression_ratio": 1.5892857142857142, "no_speech_prob": 5.9547569435380865e-06}, {"id": 1280, "seek": 564578, "start": 5657.679999999999, "end": 5660.8, "text": " It's from 2010, been massively influential.", "tokens": [467, 311, 490, 9657, 11, 668, 29379, 22215, 13], "temperature": 0.0, "avg_logprob": -0.1211855976851945, "compression_ratio": 1.5892857142857142, "no_speech_prob": 5.9547569435380865e-06}, {"id": 1281, "seek": 564578, "start": 5660.8, "end": 5667.16, "text": " And one of the things you'll notice if you read it is it's very readable.", "tokens": [400, 472, 295, 264, 721, 291, 603, 3449, 498, 291, 1401, 309, 307, 309, 311, 588, 49857, 13], "temperature": 0.0, "avg_logprob": -0.1211855976851945, "compression_ratio": 1.5892857142857142, "no_speech_prob": 5.9547569435380865e-06}, {"id": 1282, "seek": 564578, "start": 5667.16, "end": 5669.16, "text": " It's very practical.", "tokens": [467, 311, 588, 8496, 13], "temperature": 0.0, "avg_logprob": -0.1211855976851945, "compression_ratio": 1.5892857142857142, "no_speech_prob": 5.9547569435380865e-06}, {"id": 1283, "seek": 564578, "start": 5669.16, "end": 5675.24, "text": " And the actual final result they come up with is it's incredibly simple.", "tokens": [400, 264, 3539, 2572, 1874, 436, 808, 493, 365, 307, 309, 311, 6252, 2199, 13], "temperature": 0.0, "avg_logprob": -0.1211855976851945, "compression_ratio": 1.5892857142857142, "no_speech_prob": 5.9547569435380865e-06}, {"id": 1284, "seek": 567524, "start": 5675.24, "end": 5679.5599999999995, "text": " And we're actually going to be re-implementing much of the stuff in this paper over the next", "tokens": [400, 321, 434, 767, 516, 281, 312, 319, 12, 332, 43704, 278, 709, 295, 264, 1507, 294, 341, 3035, 670, 264, 958], "temperature": 0.0, "avg_logprob": -0.12106721541460823, "compression_ratio": 1.492063492063492, "no_speech_prob": 1.6180372767848894e-05}, {"id": 1285, "seek": 567524, "start": 5679.5599999999995, "end": 5680.5599999999995, "text": " couple of lessons.", "tokens": [1916, 295, 8820, 13], "temperature": 0.0, "avg_logprob": -0.12106721541460823, "compression_ratio": 1.492063492063492, "no_speech_prob": 1.6180372767848894e-05}, {"id": 1286, "seek": 567524, "start": 5680.5599999999995, "end": 5692.5199999999995, "text": " But basically, they describe one suggestion for how to initialize neural nets.", "tokens": [583, 1936, 11, 436, 6786, 472, 16541, 337, 577, 281, 5883, 1125, 18161, 36170, 13], "temperature": 0.0, "avg_logprob": -0.12106721541460823, "compression_ratio": 1.492063492063492, "no_speech_prob": 1.6180372767848894e-05}, {"id": 1287, "seek": 567524, "start": 5692.5199999999995, "end": 5703.38, "text": " And they suggest this particular approach, which is root 6 over the number of input filters", "tokens": [400, 436, 3402, 341, 1729, 3109, 11, 597, 307, 5593, 1386, 670, 264, 1230, 295, 4846, 15995], "temperature": 0.0, "avg_logprob": -0.12106721541460823, "compression_ratio": 1.492063492063492, "no_speech_prob": 1.6180372767848894e-05}, {"id": 1288, "seek": 570338, "start": 5703.38, "end": 5705.72, "text": " plus the number of output filters.", "tokens": [1804, 264, 1230, 295, 5598, 15995, 13], "temperature": 0.0, "avg_logprob": -0.17208935352081947, "compression_ratio": 1.4914529914529915, "no_speech_prob": 5.255129508441314e-06}, {"id": 1289, "seek": 570338, "start": 5705.72, "end": 5712.76, "text": " And so what happened was Kai Ming, He, and that team pointed out that that does not account", "tokens": [400, 370, 437, 2011, 390, 20753, 19352, 11, 634, 11, 293, 300, 1469, 10932, 484, 300, 300, 775, 406, 2696], "temperature": 0.0, "avg_logprob": -0.17208935352081947, "compression_ratio": 1.4914529914529915, "no_speech_prob": 5.255129508441314e-06}, {"id": 1290, "seek": 570338, "start": 5712.76, "end": 5718.84, "text": " for the impact of a relu, the thing that we just noticed.", "tokens": [337, 264, 2712, 295, 257, 1039, 84, 11, 264, 551, 300, 321, 445, 5694, 13], "temperature": 0.0, "avg_logprob": -0.17208935352081947, "compression_ratio": 1.4914529914529915, "no_speech_prob": 5.255129508441314e-06}, {"id": 1291, "seek": 570338, "start": 5718.84, "end": 5720.400000000001, "text": " So this is a big problem.", "tokens": [407, 341, 307, 257, 955, 1154, 13], "temperature": 0.0, "avg_logprob": -0.17208935352081947, "compression_ratio": 1.4914529914529915, "no_speech_prob": 5.255129508441314e-06}, {"id": 1292, "seek": 570338, "start": 5720.400000000001, "end": 5727.6, "text": " If your variance halves each layer and you have a massive deep network with like eight", "tokens": [759, 428, 21977, 38490, 1184, 4583, 293, 291, 362, 257, 5994, 2452, 3209, 365, 411, 3180], "temperature": 0.0, "avg_logprob": -0.17208935352081947, "compression_ratio": 1.4914529914529915, "no_speech_prob": 5.255129508441314e-06}, {"id": 1293, "seek": 570338, "start": 5727.6, "end": 5732.2, "text": " layers, then you've got 1 over 2 to the 8 squishes.", "tokens": [7914, 11, 550, 291, 600, 658, 502, 670, 568, 281, 264, 1649, 2339, 16423, 13], "temperature": 0.0, "avg_logprob": -0.17208935352081947, "compression_ratio": 1.4914529914529915, "no_speech_prob": 5.255129508441314e-06}, {"id": 1294, "seek": 573220, "start": 5732.2, "end": 5733.76, "text": " But by the end, it's all gone.", "tokens": [583, 538, 264, 917, 11, 309, 311, 439, 2780, 13], "temperature": 0.0, "avg_logprob": -0.13573415606629616, "compression_ratio": 1.5589519650655022, "no_speech_prob": 9.223123925039545e-06}, {"id": 1295, "seek": 573220, "start": 5733.76, "end": 5741.16, "text": " And if you want to be fancy like the fix-up people with 10,000 layers, forget it.", "tokens": [400, 498, 291, 528, 281, 312, 10247, 411, 264, 3191, 12, 1010, 561, 365, 1266, 11, 1360, 7914, 11, 2870, 309, 13], "temperature": 0.0, "avg_logprob": -0.13573415606629616, "compression_ratio": 1.5589519650655022, "no_speech_prob": 9.223123925039545e-06}, {"id": 1296, "seek": 573220, "start": 5741.16, "end": 5743.22, "text": " Your gradients have totally disappeared.", "tokens": [2260, 2771, 2448, 362, 3879, 13954, 13], "temperature": 0.0, "avg_logprob": -0.13573415606629616, "compression_ratio": 1.5589519650655022, "no_speech_prob": 9.223123925039545e-06}, {"id": 1297, "seek": 573220, "start": 5743.22, "end": 5745.36, "text": " So this is totally unacceptable.", "tokens": [407, 341, 307, 3879, 31812, 13], "temperature": 0.0, "avg_logprob": -0.13573415606629616, "compression_ratio": 1.5589519650655022, "no_speech_prob": 9.223123925039545e-06}, {"id": 1298, "seek": 573220, "start": 5745.36, "end": 5749.08, "text": " So they do something super genius smart.", "tokens": [407, 436, 360, 746, 1687, 14017, 4069, 13], "temperature": 0.0, "avg_logprob": -0.13573415606629616, "compression_ratio": 1.5589519650655022, "no_speech_prob": 9.223123925039545e-06}, {"id": 1299, "seek": 573220, "start": 5749.08, "end": 5753.16, "text": " They replace the 1 on the top with a 2 on the top.", "tokens": [814, 7406, 264, 502, 322, 264, 1192, 365, 257, 568, 322, 264, 1192, 13], "temperature": 0.0, "avg_logprob": -0.13573415606629616, "compression_ratio": 1.5589519650655022, "no_speech_prob": 9.223123925039545e-06}, {"id": 1300, "seek": 573220, "start": 5753.16, "end": 5757.8, "text": " So this, which is not to take anything away from this, it's a fantastic paper.", "tokens": [407, 341, 11, 597, 307, 406, 281, 747, 1340, 1314, 490, 341, 11, 309, 311, 257, 5456, 3035, 13], "temperature": 0.0, "avg_logprob": -0.13573415606629616, "compression_ratio": 1.5589519650655022, "no_speech_prob": 9.223123925039545e-06}, {"id": 1301, "seek": 575780, "start": 5757.8, "end": 5762.400000000001, "text": " But in the end, the thing they do is to stick a 2 on the top.", "tokens": [583, 294, 264, 917, 11, 264, 551, 436, 360, 307, 281, 2897, 257, 568, 322, 264, 1192, 13], "temperature": 0.0, "avg_logprob": -0.11217630635137144, "compression_ratio": 1.691304347826087, "no_speech_prob": 3.1381057397084078e-06}, {"id": 1302, "seek": 575780, "start": 5762.400000000001, "end": 5769.56, "text": " So we can do that by taking that exact equation we just used and sticking a 2 on the top.", "tokens": [407, 321, 393, 360, 300, 538, 1940, 300, 1900, 5367, 321, 445, 1143, 293, 13465, 257, 568, 322, 264, 1192, 13], "temperature": 0.0, "avg_logprob": -0.11217630635137144, "compression_ratio": 1.691304347826087, "no_speech_prob": 3.1381057397084078e-06}, {"id": 1303, "seek": 575780, "start": 5769.56, "end": 5776.04, "text": " And if we do, then the result is much closer.", "tokens": [400, 498, 321, 360, 11, 550, 264, 1874, 307, 709, 4966, 13], "temperature": 0.0, "avg_logprob": -0.11217630635137144, "compression_ratio": 1.691304347826087, "no_speech_prob": 3.1381057397084078e-06}, {"id": 1304, "seek": 575780, "start": 5776.04, "end": 5779.24, "text": " It's not perfect, but it actually varies quite a lot.", "tokens": [467, 311, 406, 2176, 11, 457, 309, 767, 21716, 1596, 257, 688, 13], "temperature": 0.0, "avg_logprob": -0.11217630635137144, "compression_ratio": 1.691304347826087, "no_speech_prob": 3.1381057397084078e-06}, {"id": 1305, "seek": 575780, "start": 5779.24, "end": 5780.46, "text": " It's really random.", "tokens": [467, 311, 534, 4974, 13], "temperature": 0.0, "avg_logprob": -0.11217630635137144, "compression_ratio": 1.691304347826087, "no_speech_prob": 3.1381057397084078e-06}, {"id": 1306, "seek": 575780, "start": 5780.46, "end": 5783.06, "text": " Sometimes it's quite close, sometimes it's further away, but it's certainly a lot better", "tokens": [4803, 309, 311, 1596, 1998, 11, 2171, 309, 311, 3052, 1314, 11, 457, 309, 311, 3297, 257, 688, 1101], "temperature": 0.0, "avg_logprob": -0.11217630635137144, "compression_ratio": 1.691304347826087, "no_speech_prob": 3.1381057397084078e-06}, {"id": 1307, "seek": 575780, "start": 5783.06, "end": 5785.08, "text": " than it was.", "tokens": [813, 309, 390, 13], "temperature": 0.0, "avg_logprob": -0.11217630635137144, "compression_ratio": 1.691304347826087, "no_speech_prob": 3.1381057397084078e-06}, {"id": 1308, "seek": 575780, "start": 5785.08, "end": 5787.6, "text": " So that's good.", "tokens": [407, 300, 311, 665, 13], "temperature": 0.0, "avg_logprob": -0.11217630635137144, "compression_ratio": 1.691304347826087, "no_speech_prob": 3.1381057397084078e-06}, {"id": 1309, "seek": 578760, "start": 5787.6, "end": 5792.200000000001, "text": " And it's really worth reading.", "tokens": [400, 309, 311, 534, 3163, 3760, 13], "temperature": 0.0, "avg_logprob": -0.09750943369679636, "compression_ratio": 1.4705882352941178, "no_speech_prob": 1.0782060599012766e-05}, {"id": 1310, "seek": 578760, "start": 5792.200000000001, "end": 5801.280000000001, "text": " So more homework for this week is to read 2.2 of the ResNet paper.", "tokens": [407, 544, 14578, 337, 341, 1243, 307, 281, 1401, 568, 13, 17, 295, 264, 5015, 31890, 3035, 13], "temperature": 0.0, "avg_logprob": -0.09750943369679636, "compression_ratio": 1.4705882352941178, "no_speech_prob": 1.0782060599012766e-05}, {"id": 1311, "seek": 578760, "start": 5801.280000000001, "end": 5807.04, "text": " And what you'll see is that they describe what happens in the forward pass of a neural", "tokens": [400, 437, 291, 603, 536, 307, 300, 436, 6786, 437, 2314, 294, 264, 2128, 1320, 295, 257, 18161], "temperature": 0.0, "avg_logprob": -0.09750943369679636, "compression_ratio": 1.4705882352941178, "no_speech_prob": 1.0782060599012766e-05}, {"id": 1312, "seek": 578760, "start": 5807.04, "end": 5813.08, "text": " net, and they point out that for the conv layer, this is the response, y equals wx plus b.", "tokens": [2533, 11, 293, 436, 935, 484, 300, 337, 264, 3754, 4583, 11, 341, 307, 264, 4134, 11, 288, 6915, 261, 87, 1804, 272, 13], "temperature": 0.0, "avg_logprob": -0.09750943369679636, "compression_ratio": 1.4705882352941178, "no_speech_prob": 1.0782060599012766e-05}, {"id": 1313, "seek": 581308, "start": 5813.08, "end": 5819.5199999999995, "text": " Now if you're concentrating, that might be confusing because a conv layer isn't quite", "tokens": [823, 498, 291, 434, 40571, 11, 300, 1062, 312, 13181, 570, 257, 3754, 4583, 1943, 380, 1596], "temperature": 0.0, "avg_logprob": -0.2111231979814548, "compression_ratio": 1.5573122529644268, "no_speech_prob": 3.2376419767388143e-06}, {"id": 1314, "seek": 581308, "start": 5819.5199999999995, "end": 5821.0, "text": " y equals wx plus b.", "tokens": [288, 6915, 261, 87, 1804, 272, 13], "temperature": 0.0, "avg_logprob": -0.2111231979814548, "compression_ratio": 1.5573122529644268, "no_speech_prob": 3.2376419767388143e-06}, {"id": 1315, "seek": 581308, "start": 5821.0, "end": 5822.36, "text": " A conv layer has a convolution.", "tokens": [316, 3754, 4583, 575, 257, 45216, 13], "temperature": 0.0, "avg_logprob": -0.2111231979814548, "compression_ratio": 1.5573122529644268, "no_speech_prob": 3.2376419767388143e-06}, {"id": 1316, "seek": 581308, "start": 5822.36, "end": 5828.6, "text": " But do you remember in part one, I pointed out this neat article from Matt Clinesmith", "tokens": [583, 360, 291, 1604, 294, 644, 472, 11, 286, 10932, 484, 341, 10654, 7222, 490, 7397, 2033, 1652, 41708], "temperature": 0.0, "avg_logprob": -0.2111231979814548, "compression_ratio": 1.5573122529644268, "no_speech_prob": 3.2376419767388143e-06}, {"id": 1317, "seek": 581308, "start": 5828.6, "end": 5835.64, "text": " where he showed that CNNs in convolutions actually are just matrix multiplications with", "tokens": [689, 415, 4712, 300, 24859, 82, 294, 3754, 15892, 767, 366, 445, 8141, 17596, 763, 365], "temperature": 0.0, "avg_logprob": -0.2111231979814548, "compression_ratio": 1.5573122529644268, "no_speech_prob": 3.2376419767388143e-06}, {"id": 1318, "seek": 581308, "start": 5835.64, "end": 5838.38, "text": " a bunch of zeros and some tidewaits.", "tokens": [257, 3840, 295, 35193, 293, 512, 9422, 1023, 64, 1208, 13], "temperature": 0.0, "avg_logprob": -0.2111231979814548, "compression_ratio": 1.5573122529644268, "no_speech_prob": 3.2376419767388143e-06}, {"id": 1319, "seek": 581308, "start": 5838.38, "end": 5840.76, "text": " So this is basically all they're saying here.", "tokens": [407, 341, 307, 1936, 439, 436, 434, 1566, 510, 13], "temperature": 0.0, "avg_logprob": -0.2111231979814548, "compression_ratio": 1.5573122529644268, "no_speech_prob": 3.2376419767388143e-06}, {"id": 1320, "seek": 584076, "start": 5840.76, "end": 5844.860000000001, "text": " So sometimes there are these kind of like throwaway lines in papers that are actually", "tokens": [407, 2171, 456, 366, 613, 733, 295, 411, 3507, 10318, 3876, 294, 10577, 300, 366, 767], "temperature": 0.0, "avg_logprob": -0.11560966571172078, "compression_ratio": 1.6748971193415638, "no_speech_prob": 3.726476279553026e-06}, {"id": 1321, "seek": 584076, "start": 5844.860000000001, "end": 5847.2, "text": " quite deep and worth thinking about.", "tokens": [1596, 2452, 293, 3163, 1953, 466, 13], "temperature": 0.0, "avg_logprob": -0.11560966571172078, "compression_ratio": 1.6748971193415638, "no_speech_prob": 3.726476279553026e-06}, {"id": 1322, "seek": 584076, "start": 5847.2, "end": 5851.6, "text": " So they point out that you can just think of this as a linear layer, and then they basically", "tokens": [407, 436, 935, 484, 300, 291, 393, 445, 519, 295, 341, 382, 257, 8213, 4583, 11, 293, 550, 436, 1936], "temperature": 0.0, "avg_logprob": -0.11560966571172078, "compression_ratio": 1.6748971193415638, "no_speech_prob": 3.726476279553026e-06}, {"id": 1323, "seek": 584076, "start": 5851.6, "end": 5859.400000000001, "text": " take you through step by step what happens to the variance of your network depending", "tokens": [747, 291, 807, 1823, 538, 1823, 437, 2314, 281, 264, 21977, 295, 428, 3209, 5413], "temperature": 0.0, "avg_logprob": -0.11560966571172078, "compression_ratio": 1.6748971193415638, "no_speech_prob": 3.726476279553026e-06}, {"id": 1324, "seek": 584076, "start": 5859.400000000001, "end": 5861.84, "text": " on the initialization.", "tokens": [322, 264, 5883, 2144, 13], "temperature": 0.0, "avg_logprob": -0.11560966571172078, "compression_ratio": 1.6748971193415638, "no_speech_prob": 3.726476279553026e-06}, {"id": 1325, "seek": 584076, "start": 5861.84, "end": 5866.42, "text": " And so just try to get to this point here, get as far as backward propagation case.", "tokens": [400, 370, 445, 853, 281, 483, 281, 341, 935, 510, 11, 483, 382, 1400, 382, 23897, 38377, 1389, 13], "temperature": 0.0, "avg_logprob": -0.11560966571172078, "compression_ratio": 1.6748971193415638, "no_speech_prob": 3.726476279553026e-06}, {"id": 1326, "seek": 586642, "start": 5866.42, "end": 5871.76, "text": " So you've got about, I don't know, six paragraphs to read.", "tokens": [407, 291, 600, 658, 466, 11, 286, 500, 380, 458, 11, 2309, 48910, 281, 1401, 13], "temperature": 0.0, "avg_logprob": -0.10205950779197491, "compression_ratio": 1.6068702290076335, "no_speech_prob": 1.7502405171399005e-05}, {"id": 1327, "seek": 586642, "start": 5871.76, "end": 5874.54, "text": " None of the math notation is weird.", "tokens": [14492, 295, 264, 5221, 24657, 307, 3657, 13], "temperature": 0.0, "avg_logprob": -0.10205950779197491, "compression_ratio": 1.6068702290076335, "no_speech_prob": 1.7502405171399005e-05}, {"id": 1328, "seek": 586642, "start": 5874.54, "end": 5876.76, "text": " Maybe this one is if you haven't seen this before.", "tokens": [2704, 341, 472, 307, 498, 291, 2378, 380, 1612, 341, 949, 13], "temperature": 0.0, "avg_logprob": -0.10205950779197491, "compression_ratio": 1.6068702290076335, "no_speech_prob": 1.7502405171399005e-05}, {"id": 1329, "seek": 586642, "start": 5876.76, "end": 5882.12, "text": " This is exactly the same as sigma, but instead of doing a sum, you do a product.", "tokens": [639, 307, 2293, 264, 912, 382, 12771, 11, 457, 2602, 295, 884, 257, 2408, 11, 291, 360, 257, 1674, 13], "temperature": 0.0, "avg_logprob": -0.10205950779197491, "compression_ratio": 1.6068702290076335, "no_speech_prob": 1.7502405171399005e-05}, {"id": 1330, "seek": 586642, "start": 5882.12, "end": 5885.8, "text": " So this is a great way to kind of warm up your paper reading muscles is to try and read", "tokens": [407, 341, 307, 257, 869, 636, 281, 733, 295, 4561, 493, 428, 3035, 3760, 9530, 307, 281, 853, 293, 1401], "temperature": 0.0, "avg_logprob": -0.10205950779197491, "compression_ratio": 1.6068702290076335, "no_speech_prob": 1.7502405171399005e-05}, {"id": 1331, "seek": 586642, "start": 5885.8, "end": 5888.5, "text": " this section.", "tokens": [341, 3541, 13], "temperature": 0.0, "avg_logprob": -0.10205950779197491, "compression_ratio": 1.6068702290076335, "no_speech_prob": 1.7502405171399005e-05}, {"id": 1332, "seek": 586642, "start": 5888.5, "end": 5893.84, "text": " And then if that's going well, you can keep going with the backward propagation case because", "tokens": [400, 550, 498, 300, 311, 516, 731, 11, 291, 393, 1066, 516, 365, 264, 23897, 38377, 1389, 570], "temperature": 0.0, "avg_logprob": -0.10205950779197491, "compression_ratio": 1.6068702290076335, "no_speech_prob": 1.7502405171399005e-05}, {"id": 1333, "seek": 589384, "start": 5893.84, "end": 5897.4400000000005, "text": " the forward pass does a matrix multiply.", "tokens": [264, 2128, 1320, 775, 257, 8141, 12972, 13], "temperature": 0.0, "avg_logprob": -0.14330337444941202, "compression_ratio": 1.7263681592039801, "no_speech_prob": 1.5689047359046526e-05}, {"id": 1334, "seek": 589384, "start": 5897.4400000000005, "end": 5901.64, "text": " And as we'll see in a moment, the backward pass does a matrix multiply with a transpose", "tokens": [400, 382, 321, 603, 536, 294, 257, 1623, 11, 264, 23897, 1320, 775, 257, 8141, 12972, 365, 257, 25167], "temperature": 0.0, "avg_logprob": -0.14330337444941202, "compression_ratio": 1.7263681592039801, "no_speech_prob": 1.5689047359046526e-05}, {"id": 1335, "seek": 589384, "start": 5901.64, "end": 5902.64, "text": " of the matrix.", "tokens": [295, 264, 8141, 13], "temperature": 0.0, "avg_logprob": -0.14330337444941202, "compression_ratio": 1.7263681592039801, "no_speech_prob": 1.5689047359046526e-05}, {"id": 1336, "seek": 589384, "start": 5902.64, "end": 5907.2, "text": " So the backward pass is slightly different, but it's nearly the same.", "tokens": [407, 264, 23897, 1320, 307, 4748, 819, 11, 457, 309, 311, 6217, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.14330337444941202, "compression_ratio": 1.7263681592039801, "no_speech_prob": 1.5689047359046526e-05}, {"id": 1337, "seek": 589384, "start": 5907.2, "end": 5914.2, "text": " And so then at the end of that, they will eventually come up with their suggestion.", "tokens": [400, 370, 550, 412, 264, 917, 295, 300, 11, 436, 486, 4728, 808, 493, 365, 641, 16541, 13], "temperature": 0.0, "avg_logprob": -0.14330337444941202, "compression_ratio": 1.7263681592039801, "no_speech_prob": 1.5689047359046526e-05}, {"id": 1338, "seek": 589384, "start": 5914.2, "end": 5917.32, "text": " Let's see if we can find it.", "tokens": [961, 311, 536, 498, 321, 393, 915, 309, 13], "temperature": 0.0, "avg_logprob": -0.14330337444941202, "compression_ratio": 1.7263681592039801, "no_speech_prob": 1.5689047359046526e-05}, {"id": 1339, "seek": 589384, "start": 5917.32, "end": 5920.88, "text": " Oh yeah, here it is.", "tokens": [876, 1338, 11, 510, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.14330337444941202, "compression_ratio": 1.7263681592039801, "no_speech_prob": 1.5689047359046526e-05}, {"id": 1340, "seek": 592088, "start": 5920.88, "end": 5931.08, "text": " They suggest root two over nL, where nL is the number of input activations.", "tokens": [814, 3402, 5593, 732, 670, 297, 43, 11, 689, 297, 43, 307, 264, 1230, 295, 4846, 2430, 763, 13], "temperature": 0.0, "avg_logprob": -0.15493834748560067, "compression_ratio": 1.5953488372093023, "no_speech_prob": 3.905438461515587e-06}, {"id": 1341, "seek": 592088, "start": 5931.08, "end": 5933.28, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.15493834748560067, "compression_ratio": 1.5953488372093023, "no_speech_prob": 3.905438461515587e-06}, {"id": 1342, "seek": 592088, "start": 5933.28, "end": 5935.92, "text": " So that's what we're using.", "tokens": [407, 300, 311, 437, 321, 434, 1228, 13], "temperature": 0.0, "avg_logprob": -0.15493834748560067, "compression_ratio": 1.5953488372093023, "no_speech_prob": 3.905438461515587e-06}, {"id": 1343, "seek": 592088, "start": 5935.92, "end": 5940.54, "text": " That is called chiming initialization, and it gives us a pretty nice variance.", "tokens": [663, 307, 1219, 18375, 278, 5883, 2144, 11, 293, 309, 2709, 505, 257, 1238, 1481, 21977, 13], "temperature": 0.0, "avg_logprob": -0.15493834748560067, "compression_ratio": 1.5953488372093023, "no_speech_prob": 3.905438461515587e-06}, {"id": 1344, "seek": 592088, "start": 5940.54, "end": 5943.64, "text": " It doesn't give us a very nice mean though.", "tokens": [467, 1177, 380, 976, 505, 257, 588, 1481, 914, 1673, 13], "temperature": 0.0, "avg_logprob": -0.15493834748560067, "compression_ratio": 1.5953488372093023, "no_speech_prob": 3.905438461515587e-06}, {"id": 1345, "seek": 592088, "start": 5943.64, "end": 5947.06, "text": " And the reason it doesn't give us a very nice mean is because as we saw, we deleted everything", "tokens": [400, 264, 1778, 309, 1177, 380, 976, 505, 257, 588, 1481, 914, 307, 570, 382, 321, 1866, 11, 321, 22981, 1203], "temperature": 0.0, "avg_logprob": -0.15493834748560067, "compression_ratio": 1.5953488372093023, "no_speech_prob": 3.905438461515587e-06}, {"id": 1346, "seek": 592088, "start": 5947.06, "end": 5949.32, "text": " below the axis.", "tokens": [2507, 264, 10298, 13], "temperature": 0.0, "avg_logprob": -0.15493834748560067, "compression_ratio": 1.5953488372093023, "no_speech_prob": 3.905438461515587e-06}, {"id": 1347, "seek": 594932, "start": 5949.32, "end": 5954.719999999999, "text": " So naturally our mean is now half, not zero.", "tokens": [407, 8195, 527, 914, 307, 586, 1922, 11, 406, 4018, 13], "temperature": 0.0, "avg_logprob": -0.1077517413218087, "compression_ratio": 1.5943775100401607, "no_speech_prob": 2.5612425815779716e-06}, {"id": 1348, "seek": 594932, "start": 5954.719999999999, "end": 5960.5, "text": " I haven't seen anybody talk about this in the literature, but something I was just trying", "tokens": [286, 2378, 380, 1612, 4472, 751, 466, 341, 294, 264, 10394, 11, 457, 746, 286, 390, 445, 1382], "temperature": 0.0, "avg_logprob": -0.1077517413218087, "compression_ratio": 1.5943775100401607, "no_speech_prob": 2.5612425815779716e-06}, {"id": 1349, "seek": 594932, "start": 5960.5, "end": 5968.32, "text": " over the last week is something kind of obvious, which is to replace value with not just x.clampmin,", "tokens": [670, 264, 1036, 1243, 307, 746, 733, 295, 6322, 11, 597, 307, 281, 7406, 2158, 365, 406, 445, 2031, 13, 3474, 1215, 2367, 11], "temperature": 0.0, "avg_logprob": -0.1077517413218087, "compression_ratio": 1.5943775100401607, "no_speech_prob": 2.5612425815779716e-06}, {"id": 1350, "seek": 594932, "start": 5968.32, "end": 5971.48, "text": " but x.clampmin minus 0.5.", "tokens": [457, 2031, 13, 3474, 1215, 2367, 3175, 1958, 13, 20, 13], "temperature": 0.0, "avg_logprob": -0.1077517413218087, "compression_ratio": 1.5943775100401607, "no_speech_prob": 2.5612425815779716e-06}, {"id": 1351, "seek": 594932, "start": 5971.48, "end": 5975.2, "text": " And in my brief experiments, that seems to help.", "tokens": [400, 294, 452, 5353, 12050, 11, 300, 2544, 281, 854, 13], "temperature": 0.0, "avg_logprob": -0.1077517413218087, "compression_ratio": 1.5943775100401607, "no_speech_prob": 2.5612425815779716e-06}, {"id": 1352, "seek": 594932, "start": 5975.2, "end": 5978.639999999999, "text": " So there's another thing that you could try out and see if it actually helps or if I'm", "tokens": [407, 456, 311, 1071, 551, 300, 291, 727, 853, 484, 293, 536, 498, 309, 767, 3665, 420, 498, 286, 478], "temperature": 0.0, "avg_logprob": -0.1077517413218087, "compression_ratio": 1.5943775100401607, "no_speech_prob": 2.5612425815779716e-06}, {"id": 1353, "seek": 597864, "start": 5978.64, "end": 5980.280000000001, "text": " just imagining things.", "tokens": [445, 27798, 721, 13], "temperature": 0.0, "avg_logprob": -0.19984222650527955, "compression_ratio": 1.5402298850574712, "no_speech_prob": 2.7693663469108287e-06}, {"id": 1354, "seek": 597864, "start": 5980.280000000001, "end": 5984.96, "text": " It certainly returns you to the correct mean.", "tokens": [467, 3297, 11247, 291, 281, 264, 3006, 914, 13], "temperature": 0.0, "avg_logprob": -0.19984222650527955, "compression_ratio": 1.5402298850574712, "no_speech_prob": 2.7693663469108287e-06}, {"id": 1355, "seek": 597864, "start": 5984.96, "end": 5986.76, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.19984222650527955, "compression_ratio": 1.5402298850574712, "no_speech_prob": 2.7693663469108287e-06}, {"id": 1356, "seek": 597864, "start": 5986.76, "end": 5994.84, "text": " So now that we have this formula, we can replace it with init.clampmin normal according to", "tokens": [407, 586, 300, 321, 362, 341, 8513, 11, 321, 393, 7406, 309, 365, 3157, 13, 3474, 1215, 2367, 2710, 4650, 281], "temperature": 0.0, "avg_logprob": -0.19984222650527955, "compression_ratio": 1.5402298850574712, "no_speech_prob": 2.7693663469108287e-06}, {"id": 1357, "seek": 597864, "start": 5994.84, "end": 5997.76, "text": " our rules because it's the same thing.", "tokens": [527, 4474, 570, 309, 311, 264, 912, 551, 13], "temperature": 0.0, "avg_logprob": -0.19984222650527955, "compression_ratio": 1.5402298850574712, "no_speech_prob": 2.7693663469108287e-06}, {"id": 1358, "seek": 597864, "start": 5997.76, "end": 6004.200000000001, "text": " And let's check that it does the same thing.", "tokens": [400, 718, 311, 1520, 300, 309, 775, 264, 912, 551, 13], "temperature": 0.0, "avg_logprob": -0.19984222650527955, "compression_ratio": 1.5402298850574712, "no_speech_prob": 2.7693663469108287e-06}, {"id": 1359, "seek": 597864, "start": 6004.200000000001, "end": 6006.240000000001, "text": " And it does.", "tokens": [400, 309, 775, 13], "temperature": 0.0, "avg_logprob": -0.19984222650527955, "compression_ratio": 1.5402298850574712, "no_speech_prob": 2.7693663469108287e-06}, {"id": 1360, "seek": 597864, "start": 6006.240000000001, "end": 6007.240000000001, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.19984222650527955, "compression_ratio": 1.5402298850574712, "no_speech_prob": 2.7693663469108287e-06}, {"id": 1361, "seek": 600724, "start": 6007.24, "end": 6013.0, "text": " So we've got this about half mean and a bit under one standard deviation.", "tokens": [407, 321, 600, 658, 341, 466, 1922, 914, 293, 257, 857, 833, 472, 3832, 25163, 13], "temperature": 0.0, "avg_logprob": -0.15196160347230972, "compression_ratio": 1.638095238095238, "no_speech_prob": 9.665923244028818e-06}, {"id": 1362, "seek": 600724, "start": 6013.0, "end": 6018.24, "text": " You'll notice here I had to add something extra, which is mode equals fan out.", "tokens": [509, 603, 3449, 510, 286, 632, 281, 909, 746, 2857, 11, 597, 307, 4391, 6915, 3429, 484, 13], "temperature": 0.0, "avg_logprob": -0.15196160347230972, "compression_ratio": 1.638095238095238, "no_speech_prob": 9.665923244028818e-06}, {"id": 1363, "seek": 600724, "start": 6018.24, "end": 6022.48, "text": " What does that mean?", "tokens": [708, 775, 300, 914, 30], "temperature": 0.0, "avg_logprob": -0.15196160347230972, "compression_ratio": 1.638095238095238, "no_speech_prob": 9.665923244028818e-06}, {"id": 1364, "seek": 600724, "start": 6022.48, "end": 6026.2, "text": " What it means is explained here.", "tokens": [708, 309, 1355, 307, 8825, 510, 13], "temperature": 0.0, "avg_logprob": -0.15196160347230972, "compression_ratio": 1.638095238095238, "no_speech_prob": 9.665923244028818e-06}, {"id": 1365, "seek": 600724, "start": 6026.2, "end": 6028.78, "text": " Fan in or fan out.", "tokens": [18564, 294, 420, 3429, 484, 13], "temperature": 0.0, "avg_logprob": -0.15196160347230972, "compression_ratio": 1.638095238095238, "no_speech_prob": 9.665923244028818e-06}, {"id": 1366, "seek": 600724, "start": 6028.78, "end": 6032.44, "text": " Fan in preserves the magnitude of variance in the forward pass.", "tokens": [18564, 294, 1183, 9054, 264, 15668, 295, 21977, 294, 264, 2128, 1320, 13], "temperature": 0.0, "avg_logprob": -0.15196160347230972, "compression_ratio": 1.638095238095238, "no_speech_prob": 9.665923244028818e-06}, {"id": 1367, "seek": 600724, "start": 6032.44, "end": 6035.639999999999, "text": " Fan out preserves the magnitudes in the backward pass.", "tokens": [18564, 484, 1183, 9054, 264, 4944, 16451, 294, 264, 23897, 1320, 13], "temperature": 0.0, "avg_logprob": -0.15196160347230972, "compression_ratio": 1.638095238095238, "no_speech_prob": 9.665923244028818e-06}, {"id": 1368, "seek": 603564, "start": 6035.64, "end": 6042.72, "text": " Basically all it's saying is, are you dividing by root M or root NH?", "tokens": [8537, 439, 309, 311, 1566, 307, 11, 366, 291, 26764, 538, 5593, 376, 420, 5593, 31118, 30], "temperature": 0.0, "avg_logprob": -0.08923697471618652, "compression_ratio": 1.6778242677824269, "no_speech_prob": 5.0145845307270065e-06}, {"id": 1369, "seek": 603564, "start": 6042.72, "end": 6046.8, "text": " Because if you divide by root M, as you'll see in that part of the paper I was suggesting", "tokens": [1436, 498, 291, 9845, 538, 5593, 376, 11, 382, 291, 603, 536, 294, 300, 644, 295, 264, 3035, 286, 390, 18094], "temperature": 0.0, "avg_logprob": -0.08923697471618652, "compression_ratio": 1.6778242677824269, "no_speech_prob": 5.0145845307270065e-06}, {"id": 1370, "seek": 603564, "start": 6046.8, "end": 6050.96, "text": " you read, that will keep the variance at one during the forward pass.", "tokens": [291, 1401, 11, 300, 486, 1066, 264, 21977, 412, 472, 1830, 264, 2128, 1320, 13], "temperature": 0.0, "avg_logprob": -0.08923697471618652, "compression_ratio": 1.6778242677824269, "no_speech_prob": 5.0145845307270065e-06}, {"id": 1371, "seek": 603564, "start": 6050.96, "end": 6057.280000000001, "text": " But if you use NH, it will give you the right unit variance in the backward pass.", "tokens": [583, 498, 291, 764, 31118, 11, 309, 486, 976, 291, 264, 558, 4985, 21977, 294, 264, 23897, 1320, 13], "temperature": 0.0, "avg_logprob": -0.08923697471618652, "compression_ratio": 1.6778242677824269, "no_speech_prob": 5.0145845307270065e-06}, {"id": 1372, "seek": 603564, "start": 6057.280000000001, "end": 6061.12, "text": " So it's weird that I had to say fan out because according to the documentation, that's for", "tokens": [407, 309, 311, 3657, 300, 286, 632, 281, 584, 3429, 484, 570, 4650, 281, 264, 14333, 11, 300, 311, 337], "temperature": 0.0, "avg_logprob": -0.08923697471618652, "compression_ratio": 1.6778242677824269, "no_speech_prob": 5.0145845307270065e-06}, {"id": 1373, "seek": 606112, "start": 6061.12, "end": 6065.72, "text": " the backward pass to keep the unit variance.", "tokens": [264, 23897, 1320, 281, 1066, 264, 4985, 21977, 13], "temperature": 0.0, "avg_logprob": -0.14765705560383044, "compression_ratio": 1.3333333333333333, "no_speech_prob": 4.157302555540809e-06}, {"id": 1374, "seek": 606112, "start": 6065.72, "end": 6068.08, "text": " So why did I need that?", "tokens": [407, 983, 630, 286, 643, 300, 30], "temperature": 0.0, "avg_logprob": -0.14765705560383044, "compression_ratio": 1.3333333333333333, "no_speech_prob": 4.157302555540809e-06}, {"id": 1375, "seek": 606112, "start": 6068.08, "end": 6077.599999999999, "text": " Well, it's because our weight shape is 784 by 50.", "tokens": [1042, 11, 309, 311, 570, 527, 3364, 3909, 307, 1614, 25494, 538, 2625, 13], "temperature": 0.0, "avg_logprob": -0.14765705560383044, "compression_ratio": 1.3333333333333333, "no_speech_prob": 4.157302555540809e-06}, {"id": 1376, "seek": 606112, "start": 6077.599999999999, "end": 6083.76, "text": " But if you actually create a linear layer with PyTorch of the same dimensions, it creates", "tokens": [583, 498, 291, 767, 1884, 257, 8213, 4583, 365, 9953, 51, 284, 339, 295, 264, 912, 12819, 11, 309, 7829], "temperature": 0.0, "avg_logprob": -0.14765705560383044, "compression_ratio": 1.3333333333333333, "no_speech_prob": 4.157302555540809e-06}, {"id": 1377, "seek": 606112, "start": 6083.76, "end": 6087.08, "text": " it of 50 by 784.", "tokens": [309, 295, 2625, 538, 1614, 25494, 13], "temperature": 0.0, "avg_logprob": -0.14765705560383044, "compression_ratio": 1.3333333333333333, "no_speech_prob": 4.157302555540809e-06}, {"id": 1378, "seek": 606112, "start": 6087.08, "end": 6089.16, "text": " It's the opposite.", "tokens": [467, 311, 264, 6182, 13], "temperature": 0.0, "avg_logprob": -0.14765705560383044, "compression_ratio": 1.3333333333333333, "no_speech_prob": 4.157302555540809e-06}, {"id": 1379, "seek": 608916, "start": 6089.16, "end": 6091.2, "text": " So how can that possibly work?", "tokens": [407, 577, 393, 300, 6264, 589, 30], "temperature": 0.0, "avg_logprob": -0.13230963512859514, "compression_ratio": 1.7155172413793103, "no_speech_prob": 1.1658689800242428e-05}, {"id": 1380, "seek": 608916, "start": 6091.2, "end": 6093.88, "text": " These are the kind of things that it's useful to know how to dig into.", "tokens": [1981, 366, 264, 733, 295, 721, 300, 309, 311, 4420, 281, 458, 577, 281, 2528, 666, 13], "temperature": 0.0, "avg_logprob": -0.13230963512859514, "compression_ratio": 1.7155172413793103, "no_speech_prob": 1.1658689800242428e-05}, {"id": 1381, "seek": 608916, "start": 6093.88, "end": 6097.5199999999995, "text": " So how is this working?", "tokens": [407, 577, 307, 341, 1364, 30], "temperature": 0.0, "avg_logprob": -0.13230963512859514, "compression_ratio": 1.7155172413793103, "no_speech_prob": 1.1658689800242428e-05}, {"id": 1382, "seek": 608916, "start": 6097.5199999999995, "end": 6100.68, "text": " So to find out how it's working, you have to look in the source code.", "tokens": [407, 281, 915, 484, 577, 309, 311, 1364, 11, 291, 362, 281, 574, 294, 264, 4009, 3089, 13], "temperature": 0.0, "avg_logprob": -0.13230963512859514, "compression_ratio": 1.7155172413793103, "no_speech_prob": 1.1658689800242428e-05}, {"id": 1383, "seek": 608916, "start": 6100.68, "end": 6105.12, "text": " So you can either set up Visual Studio code or something like that and set it up so you", "tokens": [407, 291, 393, 2139, 992, 493, 23187, 13500, 3089, 420, 746, 411, 300, 293, 992, 309, 493, 370, 291], "temperature": 0.0, "avg_logprob": -0.13230963512859514, "compression_ratio": 1.7155172413793103, "no_speech_prob": 1.1658689800242428e-05}, {"id": 1384, "seek": 608916, "start": 6105.12, "end": 6106.92, "text": " can jump between things.", "tokens": [393, 3012, 1296, 721, 13], "temperature": 0.0, "avg_logprob": -0.13230963512859514, "compression_ratio": 1.7155172413793103, "no_speech_prob": 1.1658689800242428e-05}, {"id": 1385, "seek": 608916, "start": 6106.92, "end": 6108.36, "text": " That's a nice way to do it.", "tokens": [663, 311, 257, 1481, 636, 281, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.13230963512859514, "compression_ratio": 1.7155172413793103, "no_speech_prob": 1.1658689800242428e-05}, {"id": 1386, "seek": 608916, "start": 6108.36, "end": 6111.88, "text": " Or you can just do it here with question mark, question mark.", "tokens": [1610, 291, 393, 445, 360, 309, 510, 365, 1168, 1491, 11, 1168, 1491, 13], "temperature": 0.0, "avg_logprob": -0.13230963512859514, "compression_ratio": 1.7155172413793103, "no_speech_prob": 1.1658689800242428e-05}, {"id": 1387, "seek": 611188, "start": 6111.88, "end": 6119.28, "text": " And you can see that this is the forward function and it calls something called f.linear.", "tokens": [400, 291, 393, 536, 300, 341, 307, 264, 2128, 2445, 293, 309, 5498, 746, 1219, 283, 13, 28263, 13], "temperature": 0.0, "avg_logprob": -0.17877532440481833, "compression_ratio": 1.5898617511520738, "no_speech_prob": 5.507449259312125e-06}, {"id": 1388, "seek": 611188, "start": 6119.28, "end": 6126.68, "text": " In PyTorch, capital F always refers to the torch.nn.functional module.", "tokens": [682, 9953, 51, 284, 339, 11, 4238, 479, 1009, 14942, 281, 264, 27822, 13, 26384, 13, 22845, 304, 10088, 13], "temperature": 0.0, "avg_logprob": -0.17877532440481833, "compression_ratio": 1.5898617511520738, "no_speech_prob": 5.507449259312125e-06}, {"id": 1389, "seek": 611188, "start": 6126.68, "end": 6131.26, "text": " Because it's used everywhere, so they decided that's worth a single letter.", "tokens": [1436, 309, 311, 1143, 5315, 11, 370, 436, 3047, 300, 311, 3163, 257, 2167, 5063, 13], "temperature": 0.0, "avg_logprob": -0.17877532440481833, "compression_ratio": 1.5898617511520738, "no_speech_prob": 5.507449259312125e-06}, {"id": 1390, "seek": 611188, "start": 6131.26, "end": 6135.52, "text": " So torch.nn.functional.linear is what it calls.", "tokens": [407, 27822, 13, 26384, 13, 22845, 304, 13, 28263, 307, 437, 309, 5498, 13], "temperature": 0.0, "avg_logprob": -0.17877532440481833, "compression_ratio": 1.5898617511520738, "no_speech_prob": 5.507449259312125e-06}, {"id": 1391, "seek": 611188, "start": 6135.52, "end": 6138.36, "text": " And let's look at how that's defined.", "tokens": [400, 718, 311, 574, 412, 577, 300, 311, 7642, 13], "temperature": 0.0, "avg_logprob": -0.17877532440481833, "compression_ratio": 1.5898617511520738, "no_speech_prob": 5.507449259312125e-06}, {"id": 1392, "seek": 611188, "start": 6138.36, "end": 6141.0, "text": " Input.matmul weight.t.", "tokens": [682, 2582, 13, 15677, 76, 425, 3364, 13, 83, 13], "temperature": 0.0, "avg_logprob": -0.17877532440481833, "compression_ratio": 1.5898617511520738, "no_speech_prob": 5.507449259312125e-06}, {"id": 1393, "seek": 614100, "start": 6141.0, "end": 6143.4, "text": " T means transpose.", "tokens": [314, 1355, 25167, 13], "temperature": 0.0, "avg_logprob": -0.10815838799960371, "compression_ratio": 1.7582417582417582, "no_speech_prob": 1.2606333257281221e-05}, {"id": 1394, "seek": 614100, "start": 6143.4, "end": 6148.8, "text": " So now we know in PyTorch, a linear layer doesn't just do a matrix product.", "tokens": [407, 586, 321, 458, 294, 9953, 51, 284, 339, 11, 257, 8213, 4583, 1177, 380, 445, 360, 257, 8141, 1674, 13], "temperature": 0.0, "avg_logprob": -0.10815838799960371, "compression_ratio": 1.7582417582417582, "no_speech_prob": 1.2606333257281221e-05}, {"id": 1395, "seek": 614100, "start": 6148.8, "end": 6152.1, "text": " It does a matrix product with a transpose.", "tokens": [467, 775, 257, 8141, 1674, 365, 257, 25167, 13], "temperature": 0.0, "avg_logprob": -0.10815838799960371, "compression_ratio": 1.7582417582417582, "no_speech_prob": 1.2606333257281221e-05}, {"id": 1396, "seek": 614100, "start": 6152.1, "end": 6157.18, "text": " So in other words, it's actually going to turn this into 7, 8, 4 by 50 and then do it.", "tokens": [407, 294, 661, 2283, 11, 309, 311, 767, 516, 281, 1261, 341, 666, 1614, 11, 1649, 11, 1017, 538, 2625, 293, 550, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.10815838799960371, "compression_ratio": 1.7582417582417582, "no_speech_prob": 1.2606333257281221e-05}, {"id": 1397, "seek": 614100, "start": 6157.18, "end": 6161.82, "text": " And so that's why we kind of had to give it the opposite information when we were trying", "tokens": [400, 370, 300, 311, 983, 321, 733, 295, 632, 281, 976, 309, 264, 6182, 1589, 562, 321, 645, 1382], "temperature": 0.0, "avg_logprob": -0.10815838799960371, "compression_ratio": 1.7582417582417582, "no_speech_prob": 1.2606333257281221e-05}, {"id": 1398, "seek": 614100, "start": 6161.82, "end": 6165.84, "text": " to do it with our linear layer, which doesn't have transpose.", "tokens": [281, 360, 309, 365, 527, 8213, 4583, 11, 597, 1177, 380, 362, 25167, 13], "temperature": 0.0, "avg_logprob": -0.10815838799960371, "compression_ratio": 1.7582417582417582, "no_speech_prob": 1.2606333257281221e-05}, {"id": 1399, "seek": 614100, "start": 6165.84, "end": 6169.52, "text": " So the main reason I show you that is to kind of show you how you can dig in to the PyTorch", "tokens": [407, 264, 2135, 1778, 286, 855, 291, 300, 307, 281, 733, 295, 855, 291, 577, 291, 393, 2528, 294, 281, 264, 9953, 51, 284, 339], "temperature": 0.0, "avg_logprob": -0.10815838799960371, "compression_ratio": 1.7582417582417582, "no_speech_prob": 1.2606333257281221e-05}, {"id": 1400, "seek": 614100, "start": 6169.52, "end": 6170.52, "text": " source code.", "tokens": [4009, 3089, 13], "temperature": 0.0, "avg_logprob": -0.10815838799960371, "compression_ratio": 1.7582417582417582, "no_speech_prob": 1.2606333257281221e-05}, {"id": 1401, "seek": 617052, "start": 6170.52, "end": 6172.4400000000005, "text": " See exactly what's going on.", "tokens": [3008, 2293, 437, 311, 516, 322, 13], "temperature": 0.0, "avg_logprob": -0.12444679615861279, "compression_ratio": 1.623134328358209, "no_speech_prob": 1.1658887160592712e-05}, {"id": 1402, "seek": 617052, "start": 6172.4400000000005, "end": 6177.6, "text": " And when you come across these kind of questions, you want to be able to answer them yourself.", "tokens": [400, 562, 291, 808, 2108, 613, 733, 295, 1651, 11, 291, 528, 281, 312, 1075, 281, 1867, 552, 1803, 13], "temperature": 0.0, "avg_logprob": -0.12444679615861279, "compression_ratio": 1.623134328358209, "no_speech_prob": 1.1658887160592712e-05}, {"id": 1403, "seek": 617052, "start": 6177.6, "end": 6183.400000000001, "text": " Which also then leads to the question, if this is how linear layers can be initialized,", "tokens": [3013, 611, 550, 6689, 281, 264, 1168, 11, 498, 341, 307, 577, 8213, 7914, 393, 312, 5883, 1602, 11], "temperature": 0.0, "avg_logprob": -0.12444679615861279, "compression_ratio": 1.623134328358209, "no_speech_prob": 1.1658887160592712e-05}, {"id": 1404, "seek": 617052, "start": 6183.400000000001, "end": 6185.42, "text": " what about convolutional layers?", "tokens": [437, 466, 45216, 304, 7914, 30], "temperature": 0.0, "avg_logprob": -0.12444679615861279, "compression_ratio": 1.623134328358209, "no_speech_prob": 1.1658887160592712e-05}, {"id": 1405, "seek": 617052, "start": 6185.42, "end": 6188.320000000001, "text": " What does PyTorch do for convolutional layers?", "tokens": [708, 775, 9953, 51, 284, 339, 360, 337, 45216, 304, 7914, 30], "temperature": 0.0, "avg_logprob": -0.12444679615861279, "compression_ratio": 1.623134328358209, "no_speech_prob": 1.1658887160592712e-05}, {"id": 1406, "seek": 617052, "start": 6188.320000000001, "end": 6190.4400000000005, "text": " So we could look inside torch.nn.conf2d.", "tokens": [407, 321, 727, 574, 1854, 27822, 13, 26384, 13, 24697, 17, 67, 13], "temperature": 0.0, "avg_logprob": -0.12444679615861279, "compression_ratio": 1.623134328358209, "no_speech_prob": 1.1658887160592712e-05}, {"id": 1407, "seek": 617052, "start": 6190.4400000000005, "end": 6195.56, "text": " And when I looked at it, I noticed that it basically doesn't have any code.", "tokens": [400, 562, 286, 2956, 412, 309, 11, 286, 5694, 300, 309, 1936, 1177, 380, 362, 604, 3089, 13], "temperature": 0.0, "avg_logprob": -0.12444679615861279, "compression_ratio": 1.623134328358209, "no_speech_prob": 1.1658887160592712e-05}, {"id": 1408, "seek": 617052, "start": 6195.56, "end": 6197.4400000000005, "text": " It just has documentation.", "tokens": [467, 445, 575, 14333, 13], "temperature": 0.0, "avg_logprob": -0.12444679615861279, "compression_ratio": 1.623134328358209, "no_speech_prob": 1.1658887160592712e-05}, {"id": 1409, "seek": 619744, "start": 6197.44, "end": 6202.5199999999995, "text": " All of the code actually gets passed down to something called underscore conv-nd.", "tokens": [1057, 295, 264, 3089, 767, 2170, 4678, 760, 281, 746, 1219, 37556, 3754, 12, 273, 13], "temperature": 0.0, "avg_logprob": -0.09333030866539997, "compression_ratio": 1.8275862068965518, "no_speech_prob": 1.1125074706797022e-05}, {"id": 1410, "seek": 619744, "start": 6202.5199999999995, "end": 6206.2, "text": " And so you need to know how to find these things.", "tokens": [400, 370, 291, 643, 281, 458, 577, 281, 915, 613, 721, 13], "temperature": 0.0, "avg_logprob": -0.09333030866539997, "compression_ratio": 1.8275862068965518, "no_speech_prob": 1.1125074706797022e-05}, {"id": 1411, "seek": 619744, "start": 6206.2, "end": 6210.24, "text": " And so if you go to the very bottom, you can find the file name it's in.", "tokens": [400, 370, 498, 291, 352, 281, 264, 588, 2767, 11, 291, 393, 915, 264, 3991, 1315, 309, 311, 294, 13], "temperature": 0.0, "avg_logprob": -0.09333030866539997, "compression_ratio": 1.8275862068965518, "no_speech_prob": 1.1125074706797022e-05}, {"id": 1412, "seek": 619744, "start": 6210.24, "end": 6214.879999999999, "text": " And so you see this is actually torch.nn.modules.conf.", "tokens": [400, 370, 291, 536, 341, 307, 767, 27822, 13, 26384, 13, 8014, 3473, 13, 24697, 13], "temperature": 0.0, "avg_logprob": -0.09333030866539997, "compression_ratio": 1.8275862068965518, "no_speech_prob": 1.1125074706797022e-05}, {"id": 1413, "seek": 619744, "start": 6214.879999999999, "end": 6221.12, "text": " So we can find torch.nn.modules.conf.underscoreconvnd.", "tokens": [407, 321, 393, 915, 27822, 13, 26384, 13, 8014, 3473, 13, 24697, 13, 997, 433, 12352, 1671, 85, 273, 13], "temperature": 0.0, "avg_logprob": -0.09333030866539997, "compression_ratio": 1.8275862068965518, "no_speech_prob": 1.1125074706797022e-05}, {"id": 1414, "seek": 619744, "start": 6221.12, "end": 6222.96, "text": " And so here it is.", "tokens": [400, 370, 510, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.09333030866539997, "compression_ratio": 1.8275862068965518, "no_speech_prob": 1.1125074706797022e-05}, {"id": 1415, "seek": 619744, "start": 6222.96, "end": 6225.759999999999, "text": " And here's how it initializes things.", "tokens": [400, 510, 311, 577, 309, 5883, 5660, 721, 13], "temperature": 0.0, "avg_logprob": -0.09333030866539997, "compression_ratio": 1.8275862068965518, "no_speech_prob": 1.1125074706797022e-05}, {"id": 1416, "seek": 622576, "start": 6225.76, "end": 6230.8, "text": " And it calls chiming uniform, which is basically the same as chiming normal, but it's uniform", "tokens": [400, 309, 5498, 18375, 278, 9452, 11, 597, 307, 1936, 264, 912, 382, 18375, 278, 2710, 11, 457, 309, 311, 9452], "temperature": 0.0, "avg_logprob": -0.1189632092492055, "compression_ratio": 1.6029411764705883, "no_speech_prob": 1.3419624337984715e-05}, {"id": 1417, "seek": 622576, "start": 6230.8, "end": 6232.280000000001, "text": " instead.", "tokens": [2602, 13], "temperature": 0.0, "avg_logprob": -0.1189632092492055, "compression_ratio": 1.6029411764705883, "no_speech_prob": 1.3419624337984715e-05}, {"id": 1418, "seek": 622576, "start": 6232.280000000001, "end": 6237.4800000000005, "text": " But it has a special multiplier of math.square root 5.", "tokens": [583, 309, 575, 257, 2121, 44106, 295, 5221, 13, 33292, 543, 5593, 1025, 13], "temperature": 0.0, "avg_logprob": -0.1189632092492055, "compression_ratio": 1.6029411764705883, "no_speech_prob": 1.3419624337984715e-05}, {"id": 1419, "seek": 622576, "start": 6237.4800000000005, "end": 6239.24, "text": " And that is not documented anywhere.", "tokens": [400, 300, 307, 406, 23007, 4992, 13], "temperature": 0.0, "avg_logprob": -0.1189632092492055, "compression_ratio": 1.6029411764705883, "no_speech_prob": 1.3419624337984715e-05}, {"id": 1420, "seek": 622576, "start": 6239.24, "end": 6241.780000000001, "text": " I have no idea where it comes from.", "tokens": [286, 362, 572, 1558, 689, 309, 1487, 490, 13], "temperature": 0.0, "avg_logprob": -0.1189632092492055, "compression_ratio": 1.6029411764705883, "no_speech_prob": 1.3419624337984715e-05}, {"id": 1421, "seek": 622576, "start": 6241.780000000001, "end": 6248.62, "text": " And in my experiments, this seems to work pretty badly, as you'll see.", "tokens": [400, 294, 452, 12050, 11, 341, 2544, 281, 589, 1238, 13425, 11, 382, 291, 603, 536, 13], "temperature": 0.0, "avg_logprob": -0.1189632092492055, "compression_ratio": 1.6029411764705883, "no_speech_prob": 1.3419624337984715e-05}, {"id": 1422, "seek": 622576, "start": 6248.62, "end": 6251.08, "text": " So it's kind of useful to look inside the code.", "tokens": [407, 309, 311, 733, 295, 4420, 281, 574, 1854, 264, 3089, 13], "temperature": 0.0, "avg_logprob": -0.1189632092492055, "compression_ratio": 1.6029411764705883, "no_speech_prob": 1.3419624337984715e-05}, {"id": 1423, "seek": 622576, "start": 6251.08, "end": 6255.4800000000005, "text": " And when you're writing your own code, presumably somebody put this here for a reason.", "tokens": [400, 562, 291, 434, 3579, 428, 1065, 3089, 11, 26742, 2618, 829, 341, 510, 337, 257, 1778, 13], "temperature": 0.0, "avg_logprob": -0.1189632092492055, "compression_ratio": 1.6029411764705883, "no_speech_prob": 1.3419624337984715e-05}, {"id": 1424, "seek": 625548, "start": 6255.48, "end": 6259.24, "text": " Wouldn't it have been nice if they had a URL above it with a link to the paper that they're", "tokens": [26291, 380, 309, 362, 668, 1481, 498, 436, 632, 257, 12905, 3673, 309, 365, 257, 2113, 281, 264, 3035, 300, 436, 434], "temperature": 0.0, "avg_logprob": -0.1456854502360026, "compression_ratio": 1.612099644128114, "no_speech_prob": 1.0451140042277984e-05}, {"id": 1425, "seek": 625548, "start": 6259.24, "end": 6262.759999999999, "text": " implementing so we could see what's going on?", "tokens": [18114, 370, 321, 727, 536, 437, 311, 516, 322, 30], "temperature": 0.0, "avg_logprob": -0.1456854502360026, "compression_ratio": 1.612099644128114, "no_speech_prob": 1.0451140042277984e-05}, {"id": 1426, "seek": 625548, "start": 6262.759999999999, "end": 6266.36, "text": " So it's always a good idea, you know, is to put some comments in your code to let the", "tokens": [407, 309, 311, 1009, 257, 665, 1558, 11, 291, 458, 11, 307, 281, 829, 512, 3053, 294, 428, 3089, 281, 718, 264], "temperature": 0.0, "avg_logprob": -0.1456854502360026, "compression_ratio": 1.612099644128114, "no_speech_prob": 1.0451140042277984e-05}, {"id": 1427, "seek": 625548, "start": 6266.36, "end": 6269.639999999999, "text": " next person know, what the hell are you doing?", "tokens": [958, 954, 458, 11, 437, 264, 4921, 366, 291, 884, 30], "temperature": 0.0, "avg_logprob": -0.1456854502360026, "compression_ratio": 1.612099644128114, "no_speech_prob": 1.0451140042277984e-05}, {"id": 1428, "seek": 625548, "start": 6269.639999999999, "end": 6275.4, "text": " So that particular thing, I have a strong feeling, isn't great, as you'll see.", "tokens": [407, 300, 1729, 551, 11, 286, 362, 257, 2068, 2633, 11, 1943, 380, 869, 11, 382, 291, 603, 536, 13], "temperature": 0.0, "avg_logprob": -0.1456854502360026, "compression_ratio": 1.612099644128114, "no_speech_prob": 1.0451140042277984e-05}, {"id": 1429, "seek": 625548, "start": 6275.4, "end": 6278.04, "text": " OK.", "tokens": [2264, 13], "temperature": 0.0, "avg_logprob": -0.1456854502360026, "compression_ratio": 1.612099644128114, "no_speech_prob": 1.0451140042277984e-05}, {"id": 1430, "seek": 625548, "start": 6278.04, "end": 6279.04, "text": " So we're going to try this thing.", "tokens": [407, 321, 434, 516, 281, 853, 341, 551, 13], "temperature": 0.0, "avg_logprob": -0.1456854502360026, "compression_ratio": 1.612099644128114, "no_speech_prob": 1.0451140042277984e-05}, {"id": 1431, "seek": 625548, "start": 6279.04, "end": 6281.36, "text": " It's attracting 0.5 from our relu.", "tokens": [467, 311, 36594, 1958, 13, 20, 490, 527, 1039, 84, 13], "temperature": 0.0, "avg_logprob": -0.1456854502360026, "compression_ratio": 1.612099644128114, "no_speech_prob": 1.0451140042277984e-05}, {"id": 1432, "seek": 625548, "start": 6281.36, "end": 6283.28, "text": " So this is pretty cool, right?", "tokens": [407, 341, 307, 1238, 1627, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1456854502360026, "compression_ratio": 1.612099644128114, "no_speech_prob": 1.0451140042277984e-05}, {"id": 1433, "seek": 628328, "start": 6283.28, "end": 6289.0, "text": " We've already designed our own new activation function.", "tokens": [492, 600, 1217, 4761, 527, 1065, 777, 24433, 2445, 13], "temperature": 0.0, "avg_logprob": -0.14263249245010504, "compression_ratio": 1.6311475409836065, "no_speech_prob": 3.392986627659411e-06}, {"id": 1434, "seek": 628328, "start": 6289.0, "end": 6290.0, "text": " Is it great?", "tokens": [1119, 309, 869, 30], "temperature": 0.0, "avg_logprob": -0.14263249245010504, "compression_ratio": 1.6311475409836065, "no_speech_prob": 3.392986627659411e-06}, {"id": 1435, "seek": 628328, "start": 6290.0, "end": 6291.0, "text": " Is it terrible?", "tokens": [1119, 309, 6237, 30], "temperature": 0.0, "avg_logprob": -0.14263249245010504, "compression_ratio": 1.6311475409836065, "no_speech_prob": 3.392986627659411e-06}, {"id": 1436, "seek": 628328, "start": 6291.0, "end": 6292.0, "text": " I don't know.", "tokens": [286, 500, 380, 458, 13], "temperature": 0.0, "avg_logprob": -0.14263249245010504, "compression_ratio": 1.6311475409836065, "no_speech_prob": 3.392986627659411e-06}, {"id": 1437, "seek": 628328, "start": 6292.0, "end": 6297.84, "text": " But it's this kind of level of tweak, which is kind of, you know, when people write papers,", "tokens": [583, 309, 311, 341, 733, 295, 1496, 295, 29879, 11, 597, 307, 733, 295, 11, 291, 458, 11, 562, 561, 2464, 10577, 11], "temperature": 0.0, "avg_logprob": -0.14263249245010504, "compression_ratio": 1.6311475409836065, "no_speech_prob": 3.392986627659411e-06}, {"id": 1438, "seek": 628328, "start": 6297.84, "end": 6301.04, "text": " this is the normal level of like it's like a minor change to one line of code.", "tokens": [341, 307, 264, 2710, 1496, 295, 411, 309, 311, 411, 257, 6696, 1319, 281, 472, 1622, 295, 3089, 13], "temperature": 0.0, "avg_logprob": -0.14263249245010504, "compression_ratio": 1.6311475409836065, "no_speech_prob": 3.392986627659411e-06}, {"id": 1439, "seek": 628328, "start": 6301.04, "end": 6303.42, "text": " It'll be interesting to see how much it helps.", "tokens": [467, 603, 312, 1880, 281, 536, 577, 709, 309, 3665, 13], "temperature": 0.0, "avg_logprob": -0.14263249245010504, "compression_ratio": 1.6311475409836065, "no_speech_prob": 3.392986627659411e-06}, {"id": 1440, "seek": 628328, "start": 6303.42, "end": 6312.12, "text": " But if I use it, then you can see here, yep, now I have a mean of 0, thereabouts.", "tokens": [583, 498, 286, 764, 309, 11, 550, 291, 393, 536, 510, 11, 18633, 11, 586, 286, 362, 257, 914, 295, 1958, 11, 456, 41620, 13], "temperature": 0.0, "avg_logprob": -0.14263249245010504, "compression_ratio": 1.6311475409836065, "no_speech_prob": 3.392986627659411e-06}, {"id": 1441, "seek": 631212, "start": 6312.12, "end": 6315.8, "text": " And interestingly, I've also noticed it helps my variance a lot.", "tokens": [400, 25873, 11, 286, 600, 611, 5694, 309, 3665, 452, 21977, 257, 688, 13], "temperature": 0.0, "avg_logprob": -0.12937317848205565, "compression_ratio": 1.5509259259259258, "no_speech_prob": 5.421868081612047e-06}, {"id": 1442, "seek": 631212, "start": 6315.8, "end": 6319.24, "text": " Before my variance, remember, was generally around 0.7 to 0.8.", "tokens": [4546, 452, 21977, 11, 1604, 11, 390, 5101, 926, 1958, 13, 22, 281, 1958, 13, 23, 13], "temperature": 0.0, "avg_logprob": -0.12937317848205565, "compression_ratio": 1.5509259259259258, "no_speech_prob": 5.421868081612047e-06}, {"id": 1443, "seek": 631212, "start": 6319.24, "end": 6321.64, "text": " But now it's generally above 0.8.", "tokens": [583, 586, 309, 311, 5101, 3673, 1958, 13, 23, 13], "temperature": 0.0, "avg_logprob": -0.12937317848205565, "compression_ratio": 1.5509259259259258, "no_speech_prob": 5.421868081612047e-06}, {"id": 1444, "seek": 631212, "start": 6321.64, "end": 6328.74, "text": " So it helps both, which makes sense as to why I think I'm seeing these better results.", "tokens": [407, 309, 3665, 1293, 11, 597, 1669, 2020, 382, 281, 983, 286, 519, 286, 478, 2577, 613, 1101, 3542, 13], "temperature": 0.0, "avg_logprob": -0.12937317848205565, "compression_ratio": 1.5509259259259258, "no_speech_prob": 5.421868081612047e-06}, {"id": 1445, "seek": 631212, "start": 6328.74, "end": 6337.12, "text": " So now we have relu, we have linear, we have init, so we can do a forward pass.", "tokens": [407, 586, 321, 362, 1039, 84, 11, 321, 362, 8213, 11, 321, 362, 3157, 11, 370, 321, 393, 360, 257, 2128, 1320, 13], "temperature": 0.0, "avg_logprob": -0.12937317848205565, "compression_ratio": 1.5509259259259258, "no_speech_prob": 5.421868081612047e-06}, {"id": 1446, "seek": 631212, "start": 6337.12, "end": 6338.12, "text": " Right?", "tokens": [1779, 30], "temperature": 0.0, "avg_logprob": -0.12937317848205565, "compression_ratio": 1.5509259259259258, "no_speech_prob": 5.421868081612047e-06}, {"id": 1447, "seek": 633812, "start": 6338.12, "end": 6342.96, "text": " So we're now up to here.", "tokens": [407, 321, 434, 586, 493, 281, 510, 13], "temperature": 0.0, "avg_logprob": -0.11301379454763312, "compression_ratio": 1.6805555555555556, "no_speech_prob": 1.0782384379126597e-05}, {"id": 1448, "seek": 633812, "start": 6342.96, "end": 6344.2, "text": " And so here it is.", "tokens": [400, 370, 510, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.11301379454763312, "compression_ratio": 1.6805555555555556, "no_speech_prob": 1.0782384379126597e-05}, {"id": 1449, "seek": 633812, "start": 6344.2, "end": 6347.68, "text": " And remember, in PyTorch, a model can just be a function.", "tokens": [400, 1604, 11, 294, 9953, 51, 284, 339, 11, 257, 2316, 393, 445, 312, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.11301379454763312, "compression_ratio": 1.6805555555555556, "no_speech_prob": 1.0782384379126597e-05}, {"id": 1450, "seek": 633812, "start": 6347.68, "end": 6348.68, "text": " And so here's our model.", "tokens": [400, 370, 510, 311, 527, 2316, 13], "temperature": 0.0, "avg_logprob": -0.11301379454763312, "compression_ratio": 1.6805555555555556, "no_speech_prob": 1.0782384379126597e-05}, {"id": 1451, "seek": 633812, "start": 6348.68, "end": 6354.28, "text": " It's just a function that does one linear layer, one relu layer, and one more linear", "tokens": [467, 311, 445, 257, 2445, 300, 775, 472, 8213, 4583, 11, 472, 1039, 84, 4583, 11, 293, 472, 544, 8213], "temperature": 0.0, "avg_logprob": -0.11301379454763312, "compression_ratio": 1.6805555555555556, "no_speech_prob": 1.0782384379126597e-05}, {"id": 1452, "seek": 633812, "start": 6354.28, "end": 6356.72, "text": " layer.", "tokens": [4583, 13], "temperature": 0.0, "avg_logprob": -0.11301379454763312, "compression_ratio": 1.6805555555555556, "no_speech_prob": 1.0782384379126597e-05}, {"id": 1453, "seek": 633812, "start": 6356.72, "end": 6358.08, "text": " And let's try running it.", "tokens": [400, 718, 311, 853, 2614, 309, 13], "temperature": 0.0, "avg_logprob": -0.11301379454763312, "compression_ratio": 1.6805555555555556, "no_speech_prob": 1.0782384379126597e-05}, {"id": 1454, "seek": 633812, "start": 6358.08, "end": 6363.04, "text": " And okay, it takes eight milliseconds to run it, the model on the validation set.", "tokens": [400, 1392, 11, 309, 2516, 3180, 34184, 281, 1190, 309, 11, 264, 2316, 322, 264, 24071, 992, 13], "temperature": 0.0, "avg_logprob": -0.11301379454763312, "compression_ratio": 1.6805555555555556, "no_speech_prob": 1.0782384379126597e-05}, {"id": 1455, "seek": 633812, "start": 6363.04, "end": 6368.04, "text": " So it's plenty fast enough to train.", "tokens": [407, 309, 311, 7140, 2370, 1547, 281, 3847, 13], "temperature": 0.0, "avg_logprob": -0.11301379454763312, "compression_ratio": 1.6805555555555556, "no_speech_prob": 1.0782384379126597e-05}, {"id": 1456, "seek": 636804, "start": 6368.04, "end": 6369.04, "text": " It's looking good.", "tokens": [467, 311, 1237, 665, 13], "temperature": 0.0, "avg_logprob": -0.128047978112457, "compression_ratio": 1.5905511811023623, "no_speech_prob": 7.527753950853366e-06}, {"id": 1457, "seek": 636804, "start": 6369.04, "end": 6373.76, "text": " Add an assert to make sure the shape seems sensible.", "tokens": [5349, 364, 19810, 281, 652, 988, 264, 3909, 2544, 25380, 13], "temperature": 0.0, "avg_logprob": -0.128047978112457, "compression_ratio": 1.5905511811023623, "no_speech_prob": 7.527753950853366e-06}, {"id": 1458, "seek": 636804, "start": 6373.76, "end": 6378.12, "text": " So the next thing we need for our forward pass is a loss function.", "tokens": [407, 264, 958, 551, 321, 643, 337, 527, 2128, 1320, 307, 257, 4470, 2445, 13], "temperature": 0.0, "avg_logprob": -0.128047978112457, "compression_ratio": 1.5905511811023623, "no_speech_prob": 7.527753950853366e-06}, {"id": 1459, "seek": 636804, "start": 6378.12, "end": 6383.36, "text": " And as I said, we're going to simplify things for now by using mean squared error, even", "tokens": [400, 382, 286, 848, 11, 321, 434, 516, 281, 20460, 721, 337, 586, 538, 1228, 914, 8889, 6713, 11, 754], "temperature": 0.0, "avg_logprob": -0.128047978112457, "compression_ratio": 1.5905511811023623, "no_speech_prob": 7.527753950853366e-06}, {"id": 1460, "seek": 636804, "start": 6383.36, "end": 6387.24, "text": " though that's obviously a dumb idea.", "tokens": [1673, 300, 311, 2745, 257, 10316, 1558, 13], "temperature": 0.0, "avg_logprob": -0.128047978112457, "compression_ratio": 1.5905511811023623, "no_speech_prob": 7.527753950853366e-06}, {"id": 1461, "seek": 636804, "start": 6387.24, "end": 6391.76, "text": " Our model is returning something of size 10,000 by 1.", "tokens": [2621, 2316, 307, 12678, 746, 295, 2744, 1266, 11, 1360, 538, 502, 13], "temperature": 0.0, "avg_logprob": -0.128047978112457, "compression_ratio": 1.5905511811023623, "no_speech_prob": 7.527753950853366e-06}, {"id": 1462, "seek": 636804, "start": 6391.76, "end": 6397.72, "text": " But mean squared error, you would expect it just to be a single vector of size 10,000.", "tokens": [583, 914, 8889, 6713, 11, 291, 576, 2066, 309, 445, 281, 312, 257, 2167, 8062, 295, 2744, 1266, 11, 1360, 13], "temperature": 0.0, "avg_logprob": -0.128047978112457, "compression_ratio": 1.5905511811023623, "no_speech_prob": 7.527753950853366e-06}, {"id": 1463, "seek": 639772, "start": 6397.72, "end": 6400.68, "text": " So I want to get rid of this unit access.", "tokens": [407, 286, 528, 281, 483, 3973, 295, 341, 4985, 2105, 13], "temperature": 0.0, "avg_logprob": -0.11767222994849795, "compression_ratio": 1.8716577540106951, "no_speech_prob": 1.805804822652135e-05}, {"id": 1464, "seek": 639772, "start": 6400.68, "end": 6407.2, "text": " In PyTorch, the thing to add a unit access we've learned is called un-squeeze.", "tokens": [682, 9953, 51, 284, 339, 11, 264, 551, 281, 909, 257, 4985, 2105, 321, 600, 3264, 307, 1219, 517, 12, 44516, 10670, 13], "temperature": 0.0, "avg_logprob": -0.11767222994849795, "compression_ratio": 1.8716577540106951, "no_speech_prob": 1.805804822652135e-05}, {"id": 1465, "seek": 639772, "start": 6407.2, "end": 6410.8, "text": " The thing to get rid of a unit access, therefore, is called squeeze.", "tokens": [440, 551, 281, 483, 3973, 295, 257, 4985, 2105, 11, 4412, 11, 307, 1219, 13578, 13], "temperature": 0.0, "avg_logprob": -0.11767222994849795, "compression_ratio": 1.8716577540106951, "no_speech_prob": 1.805804822652135e-05}, {"id": 1466, "seek": 639772, "start": 6410.8, "end": 6415.360000000001, "text": " So we just go output.squeeze to get rid of that unit access.", "tokens": [407, 321, 445, 352, 5598, 13, 44516, 10670, 281, 483, 3973, 295, 300, 4985, 2105, 13], "temperature": 0.0, "avg_logprob": -0.11767222994849795, "compression_ratio": 1.8716577540106951, "no_speech_prob": 1.805804822652135e-05}, {"id": 1467, "seek": 639772, "start": 6415.360000000001, "end": 6419.4400000000005, "text": " But actually, now I think about it, this is lazy.", "tokens": [583, 767, 11, 586, 286, 519, 466, 309, 11, 341, 307, 14847, 13], "temperature": 0.0, "avg_logprob": -0.11767222994849795, "compression_ratio": 1.8716577540106951, "no_speech_prob": 1.805804822652135e-05}, {"id": 1468, "seek": 639772, "start": 6419.4400000000005, "end": 6423.16, "text": " Because output.squeeze gets rid of all unit axes.", "tokens": [1436, 5598, 13, 44516, 10670, 2170, 3973, 295, 439, 4985, 35387, 13], "temperature": 0.0, "avg_logprob": -0.11767222994849795, "compression_ratio": 1.8716577540106951, "no_speech_prob": 1.805804822652135e-05}, {"id": 1469, "seek": 642316, "start": 6423.16, "end": 6428.32, "text": " And we very commonly see on the Fast.io forums people saying that their code's broken.", "tokens": [400, 321, 588, 12719, 536, 322, 264, 15968, 13, 1004, 26998, 561, 1566, 300, 641, 3089, 311, 5463, 13], "temperature": 0.0, "avg_logprob": -0.13084408415465795, "compression_ratio": 1.6755725190839694, "no_speech_prob": 2.0461833628360182e-05}, {"id": 1470, "seek": 642316, "start": 6428.32, "end": 6431.08, "text": " And it's when they've got squeeze.", "tokens": [400, 309, 311, 562, 436, 600, 658, 13578, 13], "temperature": 0.0, "avg_logprob": -0.13084408415465795, "compression_ratio": 1.6755725190839694, "no_speech_prob": 2.0461833628360182e-05}, {"id": 1471, "seek": 642316, "start": 6431.08, "end": 6435.16, "text": " And it's that one case where maybe they had a batch size of size 1.", "tokens": [400, 309, 311, 300, 472, 1389, 689, 1310, 436, 632, 257, 15245, 2744, 295, 2744, 502, 13], "temperature": 0.0, "avg_logprob": -0.13084408415465795, "compression_ratio": 1.6755725190839694, "no_speech_prob": 2.0461833628360182e-05}, {"id": 1472, "seek": 642316, "start": 6435.16, "end": 6439.3, "text": " And so that 1, 1 would get squeezed down to a scalar.", "tokens": [400, 370, 300, 502, 11, 502, 576, 483, 39470, 760, 281, 257, 39684, 13], "temperature": 0.0, "avg_logprob": -0.13084408415465795, "compression_ratio": 1.6755725190839694, "no_speech_prob": 2.0461833628360182e-05}, {"id": 1473, "seek": 642316, "start": 6439.3, "end": 6440.46, "text": " And things would break.", "tokens": [400, 721, 576, 1821, 13], "temperature": 0.0, "avg_logprob": -0.13084408415465795, "compression_ratio": 1.6755725190839694, "no_speech_prob": 2.0461833628360182e-05}, {"id": 1474, "seek": 642316, "start": 6440.46, "end": 6443.88, "text": " So rather than just calling squeeze, it's actually better to say which dimension you", "tokens": [407, 2831, 813, 445, 5141, 13578, 11, 309, 311, 767, 1101, 281, 584, 597, 10139, 291], "temperature": 0.0, "avg_logprob": -0.13084408415465795, "compression_ratio": 1.6755725190839694, "no_speech_prob": 2.0461833628360182e-05}, {"id": 1475, "seek": 642316, "start": 6443.88, "end": 6447.4, "text": " want to squeeze, which we could write either 1 or minus 1.", "tokens": [528, 281, 13578, 11, 597, 321, 727, 2464, 2139, 502, 420, 3175, 502, 13], "temperature": 0.0, "avg_logprob": -0.13084408415465795, "compression_ratio": 1.6755725190839694, "no_speech_prob": 2.0461833628360182e-05}, {"id": 1476, "seek": 642316, "start": 6447.4, "end": 6448.4, "text": " It would be the same thing.", "tokens": [467, 576, 312, 264, 912, 551, 13], "temperature": 0.0, "avg_logprob": -0.13084408415465795, "compression_ratio": 1.6755725190839694, "no_speech_prob": 2.0461833628360182e-05}, {"id": 1477, "seek": 644840, "start": 6448.4, "end": 6453.2, "text": " This is going to be more resilient now to that weird edge case of a batch size of size", "tokens": [639, 307, 516, 281, 312, 544, 23699, 586, 281, 300, 3657, 4691, 1389, 295, 257, 15245, 2744, 295, 2744], "temperature": 0.0, "avg_logprob": -0.13652195193903233, "compression_ratio": 1.7926829268292683, "no_speech_prob": 7.646242011105642e-06}, {"id": 1478, "seek": 644840, "start": 6453.2, "end": 6454.2, "text": " 1.", "tokens": [502, 13], "temperature": 0.0, "avg_logprob": -0.13652195193903233, "compression_ratio": 1.7926829268292683, "no_speech_prob": 7.646242011105642e-06}, {"id": 1479, "seek": 644840, "start": 6454.2, "end": 6455.2, "text": " OK.", "tokens": [2264, 13], "temperature": 0.0, "avg_logprob": -0.13652195193903233, "compression_ratio": 1.7926829268292683, "no_speech_prob": 7.646242011105642e-06}, {"id": 1480, "seek": 644840, "start": 6455.2, "end": 6460.28, "text": " So output minus target squared mean.", "tokens": [407, 5598, 3175, 3779, 8889, 914, 13], "temperature": 0.0, "avg_logprob": -0.13652195193903233, "compression_ratio": 1.7926829268292683, "no_speech_prob": 7.646242011105642e-06}, {"id": 1481, "seek": 644840, "start": 6460.28, "end": 6461.28, "text": " That's mean squared error.", "tokens": [663, 311, 914, 8889, 6713, 13], "temperature": 0.0, "avg_logprob": -0.13652195193903233, "compression_ratio": 1.7926829268292683, "no_speech_prob": 7.646242011105642e-06}, {"id": 1482, "seek": 644840, "start": 6461.28, "end": 6465.08, "text": " So remember in PyTorch, loss functions can just be functions.", "tokens": [407, 1604, 294, 9953, 51, 284, 339, 11, 4470, 6828, 393, 445, 312, 6828, 13], "temperature": 0.0, "avg_logprob": -0.13652195193903233, "compression_ratio": 1.7926829268292683, "no_speech_prob": 7.646242011105642e-06}, {"id": 1483, "seek": 644840, "start": 6465.08, "end": 6468.96, "text": " For mean squared error, we're going to have to make sure these are floats.", "tokens": [1171, 914, 8889, 6713, 11, 321, 434, 516, 281, 362, 281, 652, 988, 613, 366, 37878, 13], "temperature": 0.0, "avg_logprob": -0.13652195193903233, "compression_ratio": 1.7926829268292683, "no_speech_prob": 7.646242011105642e-06}, {"id": 1484, "seek": 644840, "start": 6468.96, "end": 6470.379999999999, "text": " So let's convert them.", "tokens": [407, 718, 311, 7620, 552, 13], "temperature": 0.0, "avg_logprob": -0.13652195193903233, "compression_ratio": 1.7926829268292683, "no_speech_prob": 7.646242011105642e-06}, {"id": 1485, "seek": 644840, "start": 6470.379999999999, "end": 6473.44, "text": " So now we can calculate some predictions.", "tokens": [407, 586, 321, 393, 8873, 512, 21264, 13], "temperature": 0.0, "avg_logprob": -0.13652195193903233, "compression_ratio": 1.7926829268292683, "no_speech_prob": 7.646242011105642e-06}, {"id": 1486, "seek": 644840, "start": 6473.44, "end": 6475.259999999999, "text": " That's the shape of our predictions.", "tokens": [663, 311, 264, 3909, 295, 527, 21264, 13], "temperature": 0.0, "avg_logprob": -0.13652195193903233, "compression_ratio": 1.7926829268292683, "no_speech_prob": 7.646242011105642e-06}, {"id": 1487, "seek": 644840, "start": 6475.259999999999, "end": 6477.599999999999, "text": " And we can calculate our mean squared error.", "tokens": [400, 321, 393, 8873, 527, 914, 8889, 6713, 13], "temperature": 0.0, "avg_logprob": -0.13652195193903233, "compression_ratio": 1.7926829268292683, "no_speech_prob": 7.646242011105642e-06}, {"id": 1488, "seek": 647760, "start": 6477.6, "end": 6478.6, "text": " So there we go.", "tokens": [407, 456, 321, 352, 13], "temperature": 0.0, "avg_logprob": -0.1592313735211482, "compression_ratio": 1.7025862068965518, "no_speech_prob": 4.157298917562002e-06}, {"id": 1489, "seek": 647760, "start": 6478.6, "end": 6481.4800000000005, "text": " So we've done a forward pass.", "tokens": [407, 321, 600, 1096, 257, 2128, 1320, 13], "temperature": 0.0, "avg_logprob": -0.1592313735211482, "compression_ratio": 1.7025862068965518, "no_speech_prob": 4.157298917562002e-06}, {"id": 1490, "seek": 647760, "start": 6481.4800000000005, "end": 6483.56, "text": " So we're up to here.", "tokens": [407, 321, 434, 493, 281, 510, 13], "temperature": 0.0, "avg_logprob": -0.1592313735211482, "compression_ratio": 1.7025862068965518, "no_speech_prob": 4.157298917562002e-06}, {"id": 1491, "seek": 647760, "start": 6483.56, "end": 6485.52, "text": " A forward pass is useless.", "tokens": [316, 2128, 1320, 307, 14115, 13], "temperature": 0.0, "avg_logprob": -0.1592313735211482, "compression_ratio": 1.7025862068965518, "no_speech_prob": 4.157298917562002e-06}, {"id": 1492, "seek": 647760, "start": 6485.52, "end": 6487.200000000001, "text": " What we need is a backward pass.", "tokens": [708, 321, 643, 307, 257, 23897, 1320, 13], "temperature": 0.0, "avg_logprob": -0.1592313735211482, "compression_ratio": 1.7025862068965518, "no_speech_prob": 4.157298917562002e-06}, {"id": 1493, "seek": 647760, "start": 6487.200000000001, "end": 6491.200000000001, "text": " Because that's the thing that tells us how to update our parameters.", "tokens": [1436, 300, 311, 264, 551, 300, 5112, 505, 577, 281, 5623, 527, 9834, 13], "temperature": 0.0, "avg_logprob": -0.1592313735211482, "compression_ratio": 1.7025862068965518, "no_speech_prob": 4.157298917562002e-06}, {"id": 1494, "seek": 647760, "start": 6491.200000000001, "end": 6493.200000000001, "text": " So we need gradients.", "tokens": [407, 321, 643, 2771, 2448, 13], "temperature": 0.0, "avg_logprob": -0.1592313735211482, "compression_ratio": 1.7025862068965518, "no_speech_prob": 4.157298917562002e-06}, {"id": 1495, "seek": 647760, "start": 6493.200000000001, "end": 6494.200000000001, "text": " OK.", "tokens": [2264, 13], "temperature": 0.0, "avg_logprob": -0.1592313735211482, "compression_ratio": 1.7025862068965518, "no_speech_prob": 4.157298917562002e-06}, {"id": 1496, "seek": 647760, "start": 6494.200000000001, "end": 6497.56, "text": " How much do you want to know about matrix calculus?", "tokens": [1012, 709, 360, 291, 528, 281, 458, 466, 8141, 33400, 30], "temperature": 0.0, "avg_logprob": -0.1592313735211482, "compression_ratio": 1.7025862068965518, "no_speech_prob": 4.157298917562002e-06}, {"id": 1497, "seek": 647760, "start": 6497.56, "end": 6499.160000000001, "text": " I don't know.", "tokens": [286, 500, 380, 458, 13], "temperature": 0.0, "avg_logprob": -0.1592313735211482, "compression_ratio": 1.7025862068965518, "no_speech_prob": 4.157298917562002e-06}, {"id": 1498, "seek": 647760, "start": 6499.160000000001, "end": 6500.160000000001, "text": " It's up to you.", "tokens": [467, 311, 493, 281, 291, 13], "temperature": 0.0, "avg_logprob": -0.1592313735211482, "compression_ratio": 1.7025862068965518, "no_speech_prob": 4.157298917562002e-06}, {"id": 1499, "seek": 647760, "start": 6500.160000000001, "end": 6505.04, "text": " But if you want to know everything about matrix calculus, I can point you to this excellent", "tokens": [583, 498, 291, 528, 281, 458, 1203, 466, 8141, 33400, 11, 286, 393, 935, 291, 281, 341, 7103], "temperature": 0.0, "avg_logprob": -0.1592313735211482, "compression_ratio": 1.7025862068965518, "no_speech_prob": 4.157298917562002e-06}, {"id": 1500, "seek": 650504, "start": 6505.04, "end": 6514.36, "text": " paper by Terrence Parr and Jeremy Howard, which tells you everything about matrix calculus", "tokens": [3035, 538, 6564, 10760, 47890, 293, 17809, 17626, 11, 597, 5112, 291, 1203, 466, 8141, 33400], "temperature": 0.0, "avg_logprob": -0.16627029470495275, "compression_ratio": 1.4387755102040816, "no_speech_prob": 1.4823048104517511e-06}, {"id": 1501, "seek": 650504, "start": 6514.36, "end": 6517.5199999999995, "text": " from scratch.", "tokens": [490, 8459, 13], "temperature": 0.0, "avg_logprob": -0.16627029470495275, "compression_ratio": 1.4387755102040816, "no_speech_prob": 1.4823048104517511e-06}, {"id": 1502, "seek": 650504, "start": 6517.5199999999995, "end": 6521.44, "text": " So this is a few weeks' work to get through.", "tokens": [407, 341, 307, 257, 1326, 3259, 6, 589, 281, 483, 807, 13], "temperature": 0.0, "avg_logprob": -0.16627029470495275, "compression_ratio": 1.4387755102040816, "no_speech_prob": 1.4823048104517511e-06}, {"id": 1503, "seek": 650504, "start": 6521.44, "end": 6524.36, "text": " But it absolutely assumes nothing at all.", "tokens": [583, 309, 3122, 37808, 1825, 412, 439, 13], "temperature": 0.0, "avg_logprob": -0.16627029470495275, "compression_ratio": 1.4387755102040816, "no_speech_prob": 1.4823048104517511e-06}, {"id": 1504, "seek": 650504, "start": 6524.36, "end": 6532.6, "text": " So even like basically Terrence and I both felt like, oh, we don't know any of this stuff.", "tokens": [407, 754, 411, 1936, 6564, 10760, 293, 286, 1293, 2762, 411, 11, 1954, 11, 321, 500, 380, 458, 604, 295, 341, 1507, 13], "temperature": 0.0, "avg_logprob": -0.16627029470495275, "compression_ratio": 1.4387755102040816, "no_speech_prob": 1.4823048104517511e-06}, {"id": 1505, "seek": 653260, "start": 6532.6, "end": 6535.120000000001, "text": " Let's learn all of it and tell other people.", "tokens": [961, 311, 1466, 439, 295, 309, 293, 980, 661, 561, 13], "temperature": 0.0, "avg_logprob": -0.11202132586136605, "compression_ratio": 1.6214953271028036, "no_speech_prob": 5.8616851674742065e-06}, {"id": 1506, "seek": 653260, "start": 6535.120000000001, "end": 6538.26, "text": " And so we wrote it with that in mind.", "tokens": [400, 370, 321, 4114, 309, 365, 300, 294, 1575, 13], "temperature": 0.0, "avg_logprob": -0.11202132586136605, "compression_ratio": 1.6214953271028036, "no_speech_prob": 5.8616851674742065e-06}, {"id": 1507, "seek": 653260, "start": 6538.26, "end": 6543.96, "text": " And so this will take you all the way up to knowing everything that you need for deep", "tokens": [400, 370, 341, 486, 747, 291, 439, 264, 636, 493, 281, 5276, 1203, 300, 291, 643, 337, 2452], "temperature": 0.0, "avg_logprob": -0.11202132586136605, "compression_ratio": 1.6214953271028036, "no_speech_prob": 5.8616851674742065e-06}, {"id": 1508, "seek": 653260, "start": 6543.96, "end": 6546.04, "text": " learning.", "tokens": [2539, 13], "temperature": 0.0, "avg_logprob": -0.11202132586136605, "compression_ratio": 1.6214953271028036, "no_speech_prob": 5.8616851674742065e-06}, {"id": 1509, "seek": 653260, "start": 6546.04, "end": 6549.360000000001, "text": " You can actually get away with a lot less.", "tokens": [509, 393, 767, 483, 1314, 365, 257, 688, 1570, 13], "temperature": 0.0, "avg_logprob": -0.11202132586136605, "compression_ratio": 1.6214953271028036, "no_speech_prob": 5.8616851674742065e-06}, {"id": 1510, "seek": 653260, "start": 6549.360000000001, "end": 6552.6, "text": " But if you're here, maybe it's worth it.", "tokens": [583, 498, 291, 434, 510, 11, 1310, 309, 311, 3163, 309, 13], "temperature": 0.0, "avg_logprob": -0.11202132586136605, "compression_ratio": 1.6214953271028036, "no_speech_prob": 5.8616851674742065e-06}, {"id": 1511, "seek": 653260, "start": 6552.6, "end": 6555.06, "text": " But I'll tell you what you do need to know.", "tokens": [583, 286, 603, 980, 291, 437, 291, 360, 643, 281, 458, 13], "temperature": 0.0, "avg_logprob": -0.11202132586136605, "compression_ratio": 1.6214953271028036, "no_speech_prob": 5.8616851674742065e-06}, {"id": 1512, "seek": 653260, "start": 6555.06, "end": 6560.56, "text": " What you need to know is the chain rule.", "tokens": [708, 291, 643, 281, 458, 307, 264, 5021, 4978, 13], "temperature": 0.0, "avg_logprob": -0.11202132586136605, "compression_ratio": 1.6214953271028036, "no_speech_prob": 5.8616851674742065e-06}, {"id": 1513, "seek": 656056, "start": 6560.56, "end": 6566.52, "text": " Because let me point something out.", "tokens": [1436, 718, 385, 935, 746, 484, 13], "temperature": 0.0, "avg_logprob": -0.09299624760945638, "compression_ratio": 2.097560975609756, "no_speech_prob": 1.2218668416608125e-05}, {"id": 1514, "seek": 656056, "start": 6566.52, "end": 6573.96, "text": " We start with some input.", "tokens": [492, 722, 365, 512, 4846, 13], "temperature": 0.0, "avg_logprob": -0.09299624760945638, "compression_ratio": 2.097560975609756, "no_speech_prob": 1.2218668416608125e-05}, {"id": 1515, "seek": 656056, "start": 6573.96, "end": 6576.360000000001, "text": " We start with some input.", "tokens": [492, 722, 365, 512, 4846, 13], "temperature": 0.0, "avg_logprob": -0.09299624760945638, "compression_ratio": 2.097560975609756, "no_speech_prob": 1.2218668416608125e-05}, {"id": 1516, "seek": 656056, "start": 6576.360000000001, "end": 6580.3, "text": " And we stick it through the first linear layer.", "tokens": [400, 321, 2897, 309, 807, 264, 700, 8213, 4583, 13], "temperature": 0.0, "avg_logprob": -0.09299624760945638, "compression_ratio": 2.097560975609756, "no_speech_prob": 1.2218668416608125e-05}, {"id": 1517, "seek": 656056, "start": 6580.3, "end": 6583.0, "text": " And then we stick it through ReLU.", "tokens": [400, 550, 321, 2897, 309, 807, 1300, 43, 52, 13], "temperature": 0.0, "avg_logprob": -0.09299624760945638, "compression_ratio": 2.097560975609756, "no_speech_prob": 1.2218668416608125e-05}, {"id": 1518, "seek": 656056, "start": 6583.0, "end": 6586.160000000001, "text": " And then we stick it through the second linear layer.", "tokens": [400, 550, 321, 2897, 309, 807, 264, 1150, 8213, 4583, 13], "temperature": 0.0, "avg_logprob": -0.09299624760945638, "compression_ratio": 2.097560975609756, "no_speech_prob": 1.2218668416608125e-05}, {"id": 1519, "seek": 656056, "start": 6586.160000000001, "end": 6589.200000000001, "text": " And then we stick it through MSE.", "tokens": [400, 550, 321, 2897, 309, 807, 376, 5879, 13], "temperature": 0.0, "avg_logprob": -0.09299624760945638, "compression_ratio": 2.097560975609756, "no_speech_prob": 1.2218668416608125e-05}, {"id": 1520, "seek": 658920, "start": 6589.2, "end": 6591.679999999999, "text": " And that gives us our predictions.", "tokens": [400, 300, 2709, 505, 527, 21264, 13], "temperature": 0.0, "avg_logprob": -0.1641074571854029, "compression_ratio": 2.029850746268657, "no_speech_prob": 1.4970041775086429e-05}, {"id": 1521, "seek": 658920, "start": 6591.679999999999, "end": 6600.88, "text": " Or to put it another way, we start with x.", "tokens": [1610, 281, 829, 309, 1071, 636, 11, 321, 722, 365, 2031, 13], "temperature": 0.0, "avg_logprob": -0.1641074571854029, "compression_ratio": 2.029850746268657, "no_speech_prob": 1.4970041775086429e-05}, {"id": 1522, "seek": 658920, "start": 6600.88, "end": 6605.08, "text": " And we put it through the function len1.", "tokens": [400, 321, 829, 309, 807, 264, 2445, 40116, 16, 13], "temperature": 0.0, "avg_logprob": -0.1641074571854029, "compression_ratio": 2.029850746268657, "no_speech_prob": 1.4970041775086429e-05}, {"id": 1523, "seek": 658920, "start": 6605.08, "end": 6610.12, "text": " And then we take the output of that and we put it through the function ReLU.", "tokens": [400, 550, 321, 747, 264, 5598, 295, 300, 293, 321, 829, 309, 807, 264, 2445, 1300, 43, 52, 13], "temperature": 0.0, "avg_logprob": -0.1641074571854029, "compression_ratio": 2.029850746268657, "no_speech_prob": 1.4970041775086429e-05}, {"id": 1524, "seek": 658920, "start": 6610.12, "end": 6614.96, "text": " And then we take the output of that and we put it through the function len2.", "tokens": [400, 550, 321, 747, 264, 5598, 295, 300, 293, 321, 829, 309, 807, 264, 2445, 40116, 17, 13], "temperature": 0.0, "avg_logprob": -0.1641074571854029, "compression_ratio": 2.029850746268657, "no_speech_prob": 1.4970041775086429e-05}, {"id": 1525, "seek": 661496, "start": 6614.96, "end": 6620.42, "text": " And then we take the output of that and we put it through the function MSE.", "tokens": [400, 550, 321, 747, 264, 5598, 295, 300, 293, 321, 829, 309, 807, 264, 2445, 376, 5879, 13], "temperature": 0.0, "avg_logprob": -0.06645780343275803, "compression_ratio": 1.7810650887573964, "no_speech_prob": 7.071682375681121e-06}, {"id": 1526, "seek": 661496, "start": 6620.42, "end": 6630.88, "text": " And strictly speaking, MSE has a second argument, which is the actual target value.", "tokens": [400, 20792, 4124, 11, 376, 5879, 575, 257, 1150, 6770, 11, 597, 307, 264, 3539, 3779, 2158, 13], "temperature": 0.0, "avg_logprob": -0.06645780343275803, "compression_ratio": 1.7810650887573964, "no_speech_prob": 7.071682375681121e-06}, {"id": 1527, "seek": 661496, "start": 6630.88, "end": 6640.28, "text": " And we want the gradient of the output with respect to the input.", "tokens": [400, 321, 528, 264, 16235, 295, 264, 5598, 365, 3104, 281, 264, 4846, 13], "temperature": 0.0, "avg_logprob": -0.06645780343275803, "compression_ratio": 1.7810650887573964, "no_speech_prob": 7.071682375681121e-06}, {"id": 1528, "seek": 661496, "start": 6640.28, "end": 6643.52, "text": " So it's a function of a function of a function of a function of a function.", "tokens": [407, 309, 311, 257, 2445, 295, 257, 2445, 295, 257, 2445, 295, 257, 2445, 295, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.06645780343275803, "compression_ratio": 1.7810650887573964, "no_speech_prob": 7.071682375681121e-06}, {"id": 1529, "seek": 664352, "start": 6643.52, "end": 6648.52, "text": " So if we simplify that down a bit, we could just say, what if it's just like, I don't", "tokens": [407, 498, 321, 20460, 300, 760, 257, 857, 11, 321, 727, 445, 584, 11, 437, 498, 309, 311, 445, 411, 11, 286, 500, 380], "temperature": 0.0, "avg_logprob": -0.22488948966883407, "compression_ratio": 1.5714285714285714, "no_speech_prob": 1.5206249372567981e-05}, {"id": 1530, "seek": 664352, "start": 6648.52, "end": 6650.76, "text": " know, y equals f of x.", "tokens": [458, 11, 288, 6915, 283, 295, 2031, 13], "temperature": 0.0, "avg_logprob": -0.22488948966883407, "compression_ratio": 1.5714285714285714, "no_speech_prob": 1.5206249372567981e-05}, {"id": 1531, "seek": 664352, "start": 6650.76, "end": 6657.280000000001, "text": " Sorry, y equals f of u.", "tokens": [4919, 11, 288, 6915, 283, 295, 344, 13], "temperature": 0.0, "avg_logprob": -0.22488948966883407, "compression_ratio": 1.5714285714285714, "no_speech_prob": 1.5206249372567981e-05}, {"id": 1532, "seek": 664352, "start": 6657.280000000001, "end": 6660.68, "text": " And u equals f of x.", "tokens": [400, 344, 6915, 283, 295, 2031, 13], "temperature": 0.0, "avg_logprob": -0.22488948966883407, "compression_ratio": 1.5714285714285714, "no_speech_prob": 1.5206249372567981e-05}, {"id": 1533, "seek": 664352, "start": 6660.68, "end": 6662.4800000000005, "text": " So that's like a function of a function.", "tokens": [407, 300, 311, 411, 257, 2445, 295, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.22488948966883407, "compression_ratio": 1.5714285714285714, "no_speech_prob": 1.5206249372567981e-05}, {"id": 1534, "seek": 664352, "start": 6662.4800000000005, "end": 6664.200000000001, "text": " Simplify it a little bit.", "tokens": [3998, 564, 2505, 309, 257, 707, 857, 13], "temperature": 0.0, "avg_logprob": -0.22488948966883407, "compression_ratio": 1.5714285714285714, "no_speech_prob": 1.5206249372567981e-05}, {"id": 1535, "seek": 666420, "start": 6664.2, "end": 6673.5199999999995, "text": " And the derivative is that.", "tokens": [400, 264, 13760, 307, 300, 13], "temperature": 0.0, "avg_logprob": -0.1035778440278152, "compression_ratio": 1.6598984771573604, "no_speech_prob": 7.889078915468417e-06}, {"id": 1536, "seek": 666420, "start": 6673.5199999999995, "end": 6676.4, "text": " That's the chain rule.", "tokens": [663, 311, 264, 5021, 4978, 13], "temperature": 0.0, "avg_logprob": -0.1035778440278152, "compression_ratio": 1.6598984771573604, "no_speech_prob": 7.889078915468417e-06}, {"id": 1537, "seek": 666420, "start": 6676.4, "end": 6680.5599999999995, "text": " If that doesn't look familiar to you or you've forgotten it, go to Khan Academy.", "tokens": [759, 300, 1177, 380, 574, 4963, 281, 291, 420, 291, 600, 11832, 309, 11, 352, 281, 18136, 11735, 13], "temperature": 0.0, "avg_logprob": -0.1035778440278152, "compression_ratio": 1.6598984771573604, "no_speech_prob": 7.889078915468417e-06}, {"id": 1538, "seek": 666420, "start": 6680.5599999999995, "end": 6683.96, "text": " Khan Academy has some great tutorials on the chain rule.", "tokens": [18136, 11735, 575, 512, 869, 17616, 322, 264, 5021, 4978, 13], "temperature": 0.0, "avg_logprob": -0.1035778440278152, "compression_ratio": 1.6598984771573604, "no_speech_prob": 7.889078915468417e-06}, {"id": 1539, "seek": 666420, "start": 6683.96, "end": 6686.46, "text": " But this is actually the thing we need to know.", "tokens": [583, 341, 307, 767, 264, 551, 321, 643, 281, 458, 13], "temperature": 0.0, "avg_logprob": -0.1035778440278152, "compression_ratio": 1.6598984771573604, "no_speech_prob": 7.889078915468417e-06}, {"id": 1540, "seek": 666420, "start": 6686.46, "end": 6692.08, "text": " Because once you know that, then all you need to know is the derivative of each bit on its", "tokens": [1436, 1564, 291, 458, 300, 11, 550, 439, 291, 643, 281, 458, 307, 264, 13760, 295, 1184, 857, 322, 1080], "temperature": 0.0, "avg_logprob": -0.1035778440278152, "compression_ratio": 1.6598984771573604, "no_speech_prob": 7.889078915468417e-06}, {"id": 1541, "seek": 669208, "start": 6692.08, "end": 6697.44, "text": " own, and you just multiply them all together.", "tokens": [1065, 11, 293, 291, 445, 12972, 552, 439, 1214, 13], "temperature": 0.0, "avg_logprob": -0.14242520650227863, "compression_ratio": 1.5471698113207548, "no_speech_prob": 5.093615072837565e-06}, {"id": 1542, "seek": 669208, "start": 6697.44, "end": 6702.0, "text": " And if you ever forget the chain rule, just cross-multiply.", "tokens": [400, 498, 291, 1562, 2870, 264, 5021, 4978, 11, 445, 3278, 12, 76, 723, 647, 356, 13], "temperature": 0.0, "avg_logprob": -0.14242520650227863, "compression_ratio": 1.5471698113207548, "no_speech_prob": 5.093615072837565e-06}, {"id": 1543, "seek": 669208, "start": 6702.0, "end": 6710.72, "text": " So that would be dy du over du dx cross out du's, you get dy dx.", "tokens": [407, 300, 576, 312, 14584, 1581, 670, 1581, 30017, 3278, 484, 1581, 311, 11, 291, 483, 14584, 30017, 13], "temperature": 0.0, "avg_logprob": -0.14242520650227863, "compression_ratio": 1.5471698113207548, "no_speech_prob": 5.093615072837565e-06}, {"id": 1544, "seek": 669208, "start": 6710.72, "end": 6715.44, "text": " And if you went to a fancy school, they would have told you not to do that.", "tokens": [400, 498, 291, 1437, 281, 257, 10247, 1395, 11, 436, 576, 362, 1907, 291, 406, 281, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.14242520650227863, "compression_ratio": 1.5471698113207548, "no_speech_prob": 5.093615072837565e-06}, {"id": 1545, "seek": 671544, "start": 6715.44, "end": 6723.08, "text": " They said you can't treat calculus like this because they're special magic small things.", "tokens": [814, 848, 291, 393, 380, 2387, 33400, 411, 341, 570, 436, 434, 2121, 5585, 1359, 721, 13], "temperature": 0.0, "avg_logprob": -0.14839214002582388, "compression_ratio": 1.6464088397790055, "no_speech_prob": 1.4063439266465139e-05}, {"id": 1546, "seek": 671544, "start": 6723.08, "end": 6724.839999999999, "text": " Actually you can.", "tokens": [5135, 291, 393, 13], "temperature": 0.0, "avg_logprob": -0.14839214002582388, "compression_ratio": 1.6464088397790055, "no_speech_prob": 1.4063439266465139e-05}, {"id": 1547, "seek": 671544, "start": 6724.839999999999, "end": 6730.839999999999, "text": " There's actually a different way of treating calculus called the calculus of infinitesimals,", "tokens": [821, 311, 767, 257, 819, 636, 295, 15083, 33400, 1219, 264, 33400, 295, 7193, 3324, 332, 1124, 11], "temperature": 0.0, "avg_logprob": -0.14839214002582388, "compression_ratio": 1.6464088397790055, "no_speech_prob": 1.4063439266465139e-05}, {"id": 1548, "seek": 671544, "start": 6730.839999999999, "end": 6732.5599999999995, "text": " where all of this just makes sense.", "tokens": [689, 439, 295, 341, 445, 1669, 2020, 13], "temperature": 0.0, "avg_logprob": -0.14839214002582388, "compression_ratio": 1.6464088397790055, "no_speech_prob": 1.4063439266465139e-05}, {"id": 1549, "seek": 671544, "start": 6732.5599999999995, "end": 6737.62, "text": " And you suddenly realize you actually can do this exact thing.", "tokens": [400, 291, 5800, 4325, 291, 767, 393, 360, 341, 1900, 551, 13], "temperature": 0.0, "avg_logprob": -0.14839214002582388, "compression_ratio": 1.6464088397790055, "no_speech_prob": 1.4063439266465139e-05}, {"id": 1550, "seek": 673762, "start": 6737.62, "end": 6745.68, "text": " So anytime you see a derivative, just remember that all it's actually doing is it's taking", "tokens": [407, 13038, 291, 536, 257, 13760, 11, 445, 1604, 300, 439, 309, 311, 767, 884, 307, 309, 311, 1940], "temperature": 0.0, "avg_logprob": -0.1428192456563314, "compression_ratio": 1.5817307692307692, "no_speech_prob": 2.857251956811524e-06}, {"id": 1551, "seek": 673762, "start": 6745.68, "end": 6752.28, "text": " some function, right, and it's saying as you go across a little bit, how much do you go", "tokens": [512, 2445, 11, 558, 11, 293, 309, 311, 1566, 382, 291, 352, 2108, 257, 707, 857, 11, 577, 709, 360, 291, 352], "temperature": 0.0, "avg_logprob": -0.1428192456563314, "compression_ratio": 1.5817307692307692, "no_speech_prob": 2.857251956811524e-06}, {"id": 1552, "seek": 673762, "start": 6752.28, "end": 6754.599999999999, "text": " up?", "tokens": [493, 30], "temperature": 0.0, "avg_logprob": -0.1428192456563314, "compression_ratio": 1.5817307692307692, "no_speech_prob": 2.857251956811524e-06}, {"id": 1553, "seek": 673762, "start": 6754.599999999999, "end": 6761.24, "text": " And then it's dividing that change in y divided by that change in x.", "tokens": [400, 550, 309, 311, 26764, 300, 1319, 294, 288, 6666, 538, 300, 1319, 294, 2031, 13], "temperature": 0.0, "avg_logprob": -0.1428192456563314, "compression_ratio": 1.5817307692307692, "no_speech_prob": 2.857251956811524e-06}, {"id": 1554, "seek": 673762, "start": 6761.24, "end": 6766.18, "text": " That's literally what it is, where y and x, you must make them small numbers.", "tokens": [663, 311, 3736, 437, 309, 307, 11, 689, 288, 293, 2031, 11, 291, 1633, 652, 552, 1359, 3547, 13], "temperature": 0.0, "avg_logprob": -0.1428192456563314, "compression_ratio": 1.5817307692307692, "no_speech_prob": 2.857251956811524e-06}, {"id": 1555, "seek": 676618, "start": 6766.18, "end": 6772.8, "text": " So they behave very sensibly when you just think of them as a small change in y over", "tokens": [407, 436, 15158, 588, 2923, 3545, 562, 291, 445, 519, 295, 552, 382, 257, 1359, 1319, 294, 288, 670], "temperature": 0.0, "avg_logprob": -0.07959224780400594, "compression_ratio": 1.7403846153846154, "no_speech_prob": 5.8625423662306275e-06}, {"id": 1556, "seek": 676618, "start": 6772.8, "end": 6777.320000000001, "text": " a small change in x, as I just did showing you the chain rule.", "tokens": [257, 1359, 1319, 294, 2031, 11, 382, 286, 445, 630, 4099, 291, 264, 5021, 4978, 13], "temperature": 0.0, "avg_logprob": -0.07959224780400594, "compression_ratio": 1.7403846153846154, "no_speech_prob": 5.8625423662306275e-06}, {"id": 1557, "seek": 676618, "start": 6777.320000000001, "end": 6784.76, "text": " So to do the chain rule, we're going to have to start with the very last function.", "tokens": [407, 281, 360, 264, 5021, 4978, 11, 321, 434, 516, 281, 362, 281, 722, 365, 264, 588, 1036, 2445, 13], "temperature": 0.0, "avg_logprob": -0.07959224780400594, "compression_ratio": 1.7403846153846154, "no_speech_prob": 5.8625423662306275e-06}, {"id": 1558, "seek": 676618, "start": 6784.76, "end": 6789.84, "text": " The very last function on the outside was the loss function, mean squared error.", "tokens": [440, 588, 1036, 2445, 322, 264, 2380, 390, 264, 4470, 2445, 11, 914, 8889, 6713, 13], "temperature": 0.0, "avg_logprob": -0.07959224780400594, "compression_ratio": 1.7403846153846154, "no_speech_prob": 5.8625423662306275e-06}, {"id": 1559, "seek": 676618, "start": 6789.84, "end": 6792.64, "text": " So we start by, so we just do each bit separately.", "tokens": [407, 321, 722, 538, 11, 370, 321, 445, 360, 1184, 857, 14759, 13], "temperature": 0.0, "avg_logprob": -0.07959224780400594, "compression_ratio": 1.7403846153846154, "no_speech_prob": 5.8625423662306275e-06}, {"id": 1560, "seek": 679264, "start": 6792.64, "end": 6806.04, "text": " So the gradient of the loss with respect to, what should I say, output of previous layer.", "tokens": [407, 264, 16235, 295, 264, 4470, 365, 3104, 281, 11, 437, 820, 286, 584, 11, 5598, 295, 3894, 4583, 13], "temperature": 0.0, "avg_logprob": -0.13235448690561147, "compression_ratio": 1.6898734177215189, "no_speech_prob": 2.994414217027952e-06}, {"id": 1561, "seek": 679264, "start": 6806.04, "end": 6814.96, "text": " So the output of the previous layer, the MSE is just input minus target squared, and so", "tokens": [407, 264, 5598, 295, 264, 3894, 4583, 11, 264, 376, 5879, 307, 445, 4846, 3175, 3779, 8889, 11, 293, 370], "temperature": 0.0, "avg_logprob": -0.13235448690561147, "compression_ratio": 1.6898734177215189, "no_speech_prob": 2.994414217027952e-06}, {"id": 1562, "seek": 679264, "start": 6814.96, "end": 6819.280000000001, "text": " the derivative of that is just 2 times input minus target, because the derivative of blah", "tokens": [264, 13760, 295, 300, 307, 445, 568, 1413, 4846, 3175, 3779, 11, 570, 264, 13760, 295, 12288], "temperature": 0.0, "avg_logprob": -0.13235448690561147, "compression_ratio": 1.6898734177215189, "no_speech_prob": 2.994414217027952e-06}, {"id": 1563, "seek": 681928, "start": 6819.28, "end": 6822.96, "text": " squared is 2 times blah.", "tokens": [8889, 307, 568, 1413, 12288, 13], "temperature": 0.0, "avg_logprob": -0.11241578564201433, "compression_ratio": 1.7067307692307692, "no_speech_prob": 2.6841730687010568e-06}, {"id": 1564, "seek": 681928, "start": 6822.96, "end": 6824.719999999999, "text": " So that's it.", "tokens": [407, 300, 311, 309, 13], "temperature": 0.0, "avg_logprob": -0.11241578564201433, "compression_ratio": 1.7067307692307692, "no_speech_prob": 2.6841730687010568e-06}, {"id": 1565, "seek": 681928, "start": 6824.719999999999, "end": 6827.54, "text": " Now I need to store that gradient somewhere.", "tokens": [823, 286, 643, 281, 3531, 300, 16235, 4079, 13], "temperature": 0.0, "avg_logprob": -0.11241578564201433, "compression_ratio": 1.7067307692307692, "no_speech_prob": 2.6841730687010568e-06}, {"id": 1566, "seek": 681928, "start": 6827.54, "end": 6831.759999999999, "text": " Now the thing is that for the chain rule, I'm going to need to multiply all these things", "tokens": [823, 264, 551, 307, 300, 337, 264, 5021, 4978, 11, 286, 478, 516, 281, 643, 281, 12972, 439, 613, 721], "temperature": 0.0, "avg_logprob": -0.11241578564201433, "compression_ratio": 1.7067307692307692, "no_speech_prob": 2.6841730687010568e-06}, {"id": 1567, "seek": 681928, "start": 6831.759999999999, "end": 6833.3, "text": " together.", "tokens": [1214, 13], "temperature": 0.0, "avg_logprob": -0.11241578564201433, "compression_ratio": 1.7067307692307692, "no_speech_prob": 2.6841730687010568e-06}, {"id": 1568, "seek": 681928, "start": 6833.3, "end": 6840.5199999999995, "text": " So if I store it inside the.g attribute of the previous layer, because remember this", "tokens": [407, 498, 286, 3531, 309, 1854, 264, 2411, 70, 19667, 295, 264, 3894, 4583, 11, 570, 1604, 341], "temperature": 0.0, "avg_logprob": -0.11241578564201433, "compression_ratio": 1.7067307692307692, "no_speech_prob": 2.6841730687010568e-06}, {"id": 1569, "seek": 681928, "start": 6840.5199999999995, "end": 6847.82, "text": " is the previous layer, then when the previous layer, so the input of MSE is the same as", "tokens": [307, 264, 3894, 4583, 11, 550, 562, 264, 3894, 4583, 11, 370, 264, 4846, 295, 376, 5879, 307, 264, 912, 382], "temperature": 0.0, "avg_logprob": -0.11241578564201433, "compression_ratio": 1.7067307692307692, "no_speech_prob": 2.6841730687010568e-06}, {"id": 1570, "seek": 684782, "start": 6847.82, "end": 6850.679999999999, "text": " the output of the previous layer.", "tokens": [264, 5598, 295, 264, 3894, 4583, 13], "temperature": 0.0, "avg_logprob": -0.2267820948646182, "compression_ratio": 1.4838709677419355, "no_speech_prob": 5.014589078200515e-06}, {"id": 1571, "seek": 684782, "start": 6850.679999999999, "end": 6856.599999999999, "text": " So if I store it away in here, I can then quite comfortably refer to it.", "tokens": [407, 498, 286, 3531, 309, 1314, 294, 510, 11, 286, 393, 550, 1596, 25101, 2864, 281, 309, 13], "temperature": 0.0, "avg_logprob": -0.2267820948646182, "compression_ratio": 1.4838709677419355, "no_speech_prob": 5.014589078200515e-06}, {"id": 1572, "seek": 684782, "start": 6856.599999999999, "end": 6863.0, "text": " So here, look, ReLU, let's do ReLU.", "tokens": [407, 510, 11, 574, 11, 1300, 43, 52, 11, 718, 311, 360, 1300, 43, 52, 13], "temperature": 0.0, "avg_logprob": -0.2267820948646182, "compression_ratio": 1.4838709677419355, "no_speech_prob": 5.014589078200515e-06}, {"id": 1573, "seek": 684782, "start": 6863.0, "end": 6869.04, "text": " So ReLU is this.", "tokens": [407, 1300, 43, 52, 307, 341, 13], "temperature": 0.0, "avg_logprob": -0.2267820948646182, "compression_ratio": 1.4838709677419355, "no_speech_prob": 5.014589078200515e-06}, {"id": 1574, "seek": 684782, "start": 6869.04, "end": 6872.24, "text": " Okay, what's the gradient there?", "tokens": [1033, 11, 437, 311, 264, 16235, 456, 30], "temperature": 0.0, "avg_logprob": -0.2267820948646182, "compression_ratio": 1.4838709677419355, "no_speech_prob": 5.014589078200515e-06}, {"id": 1575, "seek": 684782, "start": 6872.24, "end": 6873.24, "text": " Zero.", "tokens": [17182, 13], "temperature": 0.0, "avg_logprob": -0.2267820948646182, "compression_ratio": 1.4838709677419355, "no_speech_prob": 5.014589078200515e-06}, {"id": 1576, "seek": 684782, "start": 6873.24, "end": 6875.84, "text": " What's the gradient there?", "tokens": [708, 311, 264, 16235, 456, 30], "temperature": 0.0, "avg_logprob": -0.2267820948646182, "compression_ratio": 1.4838709677419355, "no_speech_prob": 5.014589078200515e-06}, {"id": 1577, "seek": 684782, "start": 6875.84, "end": 6877.42, "text": " One.", "tokens": [1485, 13], "temperature": 0.0, "avg_logprob": -0.2267820948646182, "compression_ratio": 1.4838709677419355, "no_speech_prob": 5.014589078200515e-06}, {"id": 1578, "seek": 687742, "start": 6877.42, "end": 6882.52, "text": " So therefore, that's the gradient of the ReLU.", "tokens": [407, 4412, 11, 300, 311, 264, 16235, 295, 264, 1300, 43, 52, 13], "temperature": 0.0, "avg_logprob": -0.148262239637829, "compression_ratio": 1.5611111111111111, "no_speech_prob": 7.766856469970662e-06}, {"id": 1579, "seek": 687742, "start": 6882.52, "end": 6885.3, "text": " It's just greater than zero.", "tokens": [467, 311, 445, 5044, 813, 4018, 13], "temperature": 0.0, "avg_logprob": -0.148262239637829, "compression_ratio": 1.5611111111111111, "no_speech_prob": 7.766856469970662e-06}, {"id": 1580, "seek": 687742, "start": 6885.3, "end": 6891.68, "text": " But we need the chain rule, so we need to multiply this by the gradient of the next", "tokens": [583, 321, 643, 264, 5021, 4978, 11, 370, 321, 643, 281, 12972, 341, 538, 264, 16235, 295, 264, 958], "temperature": 0.0, "avg_logprob": -0.148262239637829, "compression_ratio": 1.5611111111111111, "no_speech_prob": 7.766856469970662e-06}, {"id": 1581, "seek": 687742, "start": 6891.68, "end": 6896.92, "text": " layer, which remember we stored away.", "tokens": [4583, 11, 597, 1604, 321, 12187, 1314, 13], "temperature": 0.0, "avg_logprob": -0.148262239637829, "compression_ratio": 1.5611111111111111, "no_speech_prob": 7.766856469970662e-06}, {"id": 1582, "seek": 687742, "start": 6896.92, "end": 6899.12, "text": " So we can just grab it.", "tokens": [407, 321, 393, 445, 4444, 309, 13], "temperature": 0.0, "avg_logprob": -0.148262239637829, "compression_ratio": 1.5611111111111111, "no_speech_prob": 7.766856469970662e-06}, {"id": 1583, "seek": 687742, "start": 6899.12, "end": 6901.92, "text": " So this is really cool.", "tokens": [407, 341, 307, 534, 1627, 13], "temperature": 0.0, "avg_logprob": -0.148262239637829, "compression_ratio": 1.5611111111111111, "no_speech_prob": 7.766856469970662e-06}, {"id": 1584, "seek": 687742, "start": 6901.92, "end": 6904.68, "text": " So same thing for the linear layer.", "tokens": [407, 912, 551, 337, 264, 8213, 4583, 13], "temperature": 0.0, "avg_logprob": -0.148262239637829, "compression_ratio": 1.5611111111111111, "no_speech_prob": 7.766856469970662e-06}, {"id": 1585, "seek": 690468, "start": 6904.68, "end": 6909.400000000001, "text": " The gradient is simply, and this is where the matrix calculus comes in, the gradient", "tokens": [440, 16235, 307, 2935, 11, 293, 341, 307, 689, 264, 8141, 33400, 1487, 294, 11, 264, 16235], "temperature": 0.0, "avg_logprob": -0.09289492409804771, "compression_ratio": 1.7782101167315174, "no_speech_prob": 2.1111716705490835e-05}, {"id": 1586, "seek": 690468, "start": 6909.400000000001, "end": 6914.02, "text": " of a matrix product is simply the matrix product with the transpose.", "tokens": [295, 257, 8141, 1674, 307, 2935, 264, 8141, 1674, 365, 264, 25167, 13], "temperature": 0.0, "avg_logprob": -0.09289492409804771, "compression_ratio": 1.7782101167315174, "no_speech_prob": 2.1111716705490835e-05}, {"id": 1587, "seek": 690468, "start": 6914.02, "end": 6919.56, "text": " So you can either read all that stuff I showed you, or you can take my word for it.", "tokens": [407, 291, 393, 2139, 1401, 439, 300, 1507, 286, 4712, 291, 11, 420, 291, 393, 747, 452, 1349, 337, 309, 13], "temperature": 0.0, "avg_logprob": -0.09289492409804771, "compression_ratio": 1.7782101167315174, "no_speech_prob": 2.1111716705490835e-05}, {"id": 1588, "seek": 690468, "start": 6919.56, "end": 6922.68, "text": " So here's the cool thing, right?", "tokens": [407, 510, 311, 264, 1627, 551, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.09289492409804771, "compression_ratio": 1.7782101167315174, "no_speech_prob": 2.1111716705490835e-05}, {"id": 1589, "seek": 690468, "start": 6922.68, "end": 6928.68, "text": " Here's the function which does the forward pass that we've already seen, and then it", "tokens": [1692, 311, 264, 2445, 597, 775, 264, 2128, 1320, 300, 321, 600, 1217, 1612, 11, 293, 550, 309], "temperature": 0.0, "avg_logprob": -0.09289492409804771, "compression_ratio": 1.7782101167315174, "no_speech_prob": 2.1111716705490835e-05}, {"id": 1590, "seek": 690468, "start": 6928.68, "end": 6929.68, "text": " goes backwards.", "tokens": [1709, 12204, 13], "temperature": 0.0, "avg_logprob": -0.09289492409804771, "compression_ratio": 1.7782101167315174, "no_speech_prob": 2.1111716705490835e-05}, {"id": 1591, "seek": 690468, "start": 6929.68, "end": 6933.12, "text": " It calls each of the gradients backwards, right, in reverse order, because we know we", "tokens": [467, 5498, 1184, 295, 264, 2771, 2448, 12204, 11, 558, 11, 294, 9943, 1668, 11, 570, 321, 458, 321], "temperature": 0.0, "avg_logprob": -0.09289492409804771, "compression_ratio": 1.7782101167315174, "no_speech_prob": 2.1111716705490835e-05}, {"id": 1592, "seek": 693312, "start": 6933.12, "end": 6935.36, "text": " need that for the chain rule.", "tokens": [643, 300, 337, 264, 5021, 4978, 13], "temperature": 0.0, "avg_logprob": -0.0883340057061643, "compression_ratio": 1.6150234741784038, "no_speech_prob": 5.014635007682955e-06}, {"id": 1593, "seek": 693312, "start": 6935.36, "end": 6942.36, "text": " And you can notice that every time we're passing in the result of the forward pass, and it", "tokens": [400, 291, 393, 3449, 300, 633, 565, 321, 434, 8437, 294, 264, 1874, 295, 264, 2128, 1320, 11, 293, 309], "temperature": 0.0, "avg_logprob": -0.0883340057061643, "compression_ratio": 1.6150234741784038, "no_speech_prob": 5.014635007682955e-06}, {"id": 1594, "seek": 693312, "start": 6942.36, "end": 6949.84, "text": " also has access, as we discussed, to the gradient of the next layer.", "tokens": [611, 575, 2105, 11, 382, 321, 7152, 11, 281, 264, 16235, 295, 264, 958, 4583, 13], "temperature": 0.0, "avg_logprob": -0.0883340057061643, "compression_ratio": 1.6150234741784038, "no_speech_prob": 5.014635007682955e-06}, {"id": 1595, "seek": 693312, "start": 6949.84, "end": 6952.32, "text": " This is called backpropagation, right?", "tokens": [639, 307, 1219, 646, 79, 1513, 559, 399, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.0883340057061643, "compression_ratio": 1.6150234741784038, "no_speech_prob": 5.014635007682955e-06}, {"id": 1596, "seek": 693312, "start": 6952.32, "end": 6960.12, "text": " So when people say, as they love to do, backpropagation is not just the chain rule, they're basically", "tokens": [407, 562, 561, 584, 11, 382, 436, 959, 281, 360, 11, 646, 79, 1513, 559, 399, 307, 406, 445, 264, 5021, 4978, 11, 436, 434, 1936], "temperature": 0.0, "avg_logprob": -0.0883340057061643, "compression_ratio": 1.6150234741784038, "no_speech_prob": 5.014635007682955e-06}, {"id": 1597, "seek": 693312, "start": 6960.12, "end": 6961.32, "text": " lying to you.", "tokens": [8493, 281, 291, 13], "temperature": 0.0, "avg_logprob": -0.0883340057061643, "compression_ratio": 1.6150234741784038, "no_speech_prob": 5.014635007682955e-06}, {"id": 1598, "seek": 696132, "start": 6961.32, "end": 6966.28, "text": " Backpropagation is the chain rule, where we just save away all the intermediate calculations", "tokens": [5833, 79, 1513, 559, 399, 307, 264, 5021, 4978, 11, 689, 321, 445, 3155, 1314, 439, 264, 19376, 20448], "temperature": 0.0, "avg_logprob": -0.11829590451890144, "compression_ratio": 1.5780346820809248, "no_speech_prob": 5.771849373559235e-06}, {"id": 1599, "seek": 696132, "start": 6966.28, "end": 6969.5599999999995, "text": " so we don't have to calculate them again.", "tokens": [370, 321, 500, 380, 362, 281, 8873, 552, 797, 13], "temperature": 0.0, "avg_logprob": -0.11829590451890144, "compression_ratio": 1.5780346820809248, "no_speech_prob": 5.771849373559235e-06}, {"id": 1600, "seek": 696132, "start": 6969.5599999999995, "end": 6978.28, "text": " So this is a full forward and backward pass.", "tokens": [407, 341, 307, 257, 1577, 2128, 293, 23897, 1320, 13], "temperature": 0.0, "avg_logprob": -0.11829590451890144, "compression_ratio": 1.5780346820809248, "no_speech_prob": 5.771849373559235e-06}, {"id": 1601, "seek": 696132, "start": 6978.28, "end": 6986.98, "text": " One interesting thing here is this value here, loss, this value here, loss, we never actually", "tokens": [1485, 1880, 551, 510, 307, 341, 2158, 510, 11, 4470, 11, 341, 2158, 510, 11, 4470, 11, 321, 1128, 767], "temperature": 0.0, "avg_logprob": -0.11829590451890144, "compression_ratio": 1.5780346820809248, "no_speech_prob": 5.771849373559235e-06}, {"id": 1602, "seek": 698698, "start": 6986.98, "end": 6994.0, "text": " use it, because the loss never actually appears in the gradients.", "tokens": [764, 309, 11, 570, 264, 4470, 1128, 767, 7038, 294, 264, 2771, 2448, 13], "temperature": 0.0, "avg_logprob": -0.13529708084550876, "compression_ratio": 1.6570048309178744, "no_speech_prob": 6.74789271215559e-06}, {"id": 1603, "seek": 698698, "start": 6994.0, "end": 6998.799999999999, "text": " I mean, just by the way, you still probably want it to be able to print it out or whatever,", "tokens": [286, 914, 11, 445, 538, 264, 636, 11, 291, 920, 1391, 528, 309, 281, 312, 1075, 281, 4482, 309, 484, 420, 2035, 11], "temperature": 0.0, "avg_logprob": -0.13529708084550876, "compression_ratio": 1.6570048309178744, "no_speech_prob": 6.74789271215559e-06}, {"id": 1604, "seek": 698698, "start": 6998.799999999999, "end": 7002.4, "text": " but it's actually not something that appears in the gradients.", "tokens": [457, 309, 311, 767, 406, 746, 300, 7038, 294, 264, 2771, 2448, 13], "temperature": 0.0, "avg_logprob": -0.13529708084550876, "compression_ratio": 1.6570048309178744, "no_speech_prob": 6.74789271215559e-06}, {"id": 1605, "seek": 698698, "start": 7002.4, "end": 7005.78, "text": " So that's it.", "tokens": [407, 300, 311, 309, 13], "temperature": 0.0, "avg_logprob": -0.13529708084550876, "compression_ratio": 1.6570048309178744, "no_speech_prob": 6.74789271215559e-06}, {"id": 1606, "seek": 698698, "start": 7005.78, "end": 7011.48, "text": " So w1.g, w2.g, et cetera, they now contain all of our gradients, which we're going to", "tokens": [407, 261, 16, 13, 70, 11, 261, 17, 13, 70, 11, 1030, 11458, 11, 436, 586, 5304, 439, 295, 527, 2771, 2448, 11, 597, 321, 434, 516, 281], "temperature": 0.0, "avg_logprob": -0.13529708084550876, "compression_ratio": 1.6570048309178744, "no_speech_prob": 6.74789271215559e-06}, {"id": 1607, "seek": 698698, "start": 7011.48, "end": 7015.16, "text": " use for the optimizer.", "tokens": [764, 337, 264, 5028, 6545, 13], "temperature": 0.0, "avg_logprob": -0.13529708084550876, "compression_ratio": 1.6570048309178744, "no_speech_prob": 6.74789271215559e-06}, {"id": 1608, "seek": 701516, "start": 7015.16, "end": 7022.0, "text": " And so let's cheat and use PyTorch autograd to check our results, because PyTorch can", "tokens": [400, 370, 718, 311, 17470, 293, 764, 9953, 51, 284, 339, 1476, 664, 6206, 281, 1520, 527, 3542, 11, 570, 9953, 51, 284, 339, 393], "temperature": 0.0, "avg_logprob": -0.07560957694540218, "compression_ratio": 1.7, "no_speech_prob": 7.411108981614234e-06}, {"id": 1609, "seek": 701516, "start": 7022.0, "end": 7023.84, "text": " do this for us.", "tokens": [360, 341, 337, 505, 13], "temperature": 0.0, "avg_logprob": -0.07560957694540218, "compression_ratio": 1.7, "no_speech_prob": 7.411108981614234e-06}, {"id": 1610, "seek": 701516, "start": 7023.84, "end": 7033.42, "text": " So let's clone all of our weights and biases and input, and then turn on requires grad", "tokens": [407, 718, 311, 26506, 439, 295, 527, 17443, 293, 32152, 293, 4846, 11, 293, 550, 1261, 322, 7029, 2771], "temperature": 0.0, "avg_logprob": -0.07560957694540218, "compression_ratio": 1.7, "no_speech_prob": 7.411108981614234e-06}, {"id": 1611, "seek": 701516, "start": 7033.42, "end": 7034.42, "text": " for all of them.", "tokens": [337, 439, 295, 552, 13], "temperature": 0.0, "avg_logprob": -0.07560957694540218, "compression_ratio": 1.7, "no_speech_prob": 7.411108981614234e-06}, {"id": 1612, "seek": 701516, "start": 7034.42, "end": 7040.08, "text": " So requires grad underscore is how you take a PyTorch tensor and turn it into a magical", "tokens": [407, 7029, 2771, 37556, 307, 577, 291, 747, 257, 9953, 51, 284, 339, 40863, 293, 1261, 309, 666, 257, 12066], "temperature": 0.0, "avg_logprob": -0.07560957694540218, "compression_ratio": 1.7, "no_speech_prob": 7.411108981614234e-06}, {"id": 1613, "seek": 701516, "start": 7040.08, "end": 7042.46, "text": " autogradified PyTorch tensor.", "tokens": [1476, 664, 6206, 2587, 9953, 51, 284, 339, 40863, 13], "temperature": 0.0, "avg_logprob": -0.07560957694540218, "compression_ratio": 1.7, "no_speech_prob": 7.411108981614234e-06}, {"id": 1614, "seek": 704246, "start": 7042.46, "end": 7046.4, "text": " So what it's now going to do is everything that gets calculated with test tensor, it's", "tokens": [407, 437, 309, 311, 586, 516, 281, 360, 307, 1203, 300, 2170, 15598, 365, 1500, 40863, 11, 309, 311], "temperature": 0.0, "avg_logprob": -0.12431090468660407, "compression_ratio": 1.7469879518072289, "no_speech_prob": 1.1124511729576625e-05}, {"id": 1615, "seek": 704246, "start": 7046.4, "end": 7050.32, "text": " basically going to keep track of what happened.", "tokens": [1936, 516, 281, 1066, 2837, 295, 437, 2011, 13], "temperature": 0.0, "avg_logprob": -0.12431090468660407, "compression_ratio": 1.7469879518072289, "no_speech_prob": 1.1124511729576625e-05}, {"id": 1616, "seek": 704246, "start": 7050.32, "end": 7055.2, "text": " So it basically keeps track of these steps so that then it can do these things.", "tokens": [407, 309, 1936, 5965, 2837, 295, 613, 4439, 370, 300, 550, 309, 393, 360, 613, 721, 13], "temperature": 0.0, "avg_logprob": -0.12431090468660407, "compression_ratio": 1.7469879518072289, "no_speech_prob": 1.1124511729576625e-05}, {"id": 1617, "seek": 704246, "start": 7055.2, "end": 7057.18, "text": " It's not actually that magical.", "tokens": [467, 311, 406, 767, 300, 12066, 13], "temperature": 0.0, "avg_logprob": -0.12431090468660407, "compression_ratio": 1.7469879518072289, "no_speech_prob": 1.1124511729576625e-05}, {"id": 1618, "seek": 704246, "start": 7057.18, "end": 7059.08, "text": " You could totally write it yourself.", "tokens": [509, 727, 3879, 2464, 309, 1803, 13], "temperature": 0.0, "avg_logprob": -0.12431090468660407, "compression_ratio": 1.7469879518072289, "no_speech_prob": 1.1124511729576625e-05}, {"id": 1619, "seek": 704246, "start": 7059.08, "end": 7063.32, "text": " You just need to make sure that each time you do an operation, you remember what it", "tokens": [509, 445, 643, 281, 652, 988, 300, 1184, 565, 291, 360, 364, 6916, 11, 291, 1604, 437, 309], "temperature": 0.0, "avg_logprob": -0.12431090468660407, "compression_ratio": 1.7469879518072289, "no_speech_prob": 1.1124511729576625e-05}, {"id": 1620, "seek": 704246, "start": 7063.32, "end": 7067.52, "text": " is, and so then you can just go back through them in reverse order.", "tokens": [307, 11, 293, 370, 550, 291, 393, 445, 352, 646, 807, 552, 294, 9943, 1668, 13], "temperature": 0.0, "avg_logprob": -0.12431090468660407, "compression_ratio": 1.7469879518072289, "no_speech_prob": 1.1124511729576625e-05}, {"id": 1621, "seek": 706752, "start": 7067.52, "end": 7076.92, "text": " Okay, so now that we've done requires grad, we can now just do the forward pass like so.", "tokens": [1033, 11, 370, 586, 300, 321, 600, 1096, 7029, 2771, 11, 321, 393, 586, 445, 360, 264, 2128, 1320, 411, 370, 13], "temperature": 0.0, "avg_logprob": -0.22130791894320784, "compression_ratio": 1.6303317535545023, "no_speech_prob": 1.3005880646232981e-05}, {"id": 1622, "seek": 706752, "start": 7076.92, "end": 7078.4400000000005, "text": " That gives us loss in PyTorch.", "tokens": [663, 2709, 505, 4470, 294, 9953, 51, 284, 339, 13], "temperature": 0.0, "avg_logprob": -0.22130791894320784, "compression_ratio": 1.6303317535545023, "no_speech_prob": 1.3005880646232981e-05}, {"id": 1623, "seek": 706752, "start": 7078.4400000000005, "end": 7080.200000000001, "text": " You say loss.backward.", "tokens": [509, 584, 4470, 13, 3207, 1007, 13], "temperature": 0.0, "avg_logprob": -0.22130791894320784, "compression_ratio": 1.6303317535545023, "no_speech_prob": 1.3005880646232981e-05}, {"id": 1624, "seek": 706752, "start": 7080.200000000001, "end": 7082.320000000001, "text": " And now we can test that.", "tokens": [400, 586, 321, 393, 1500, 300, 13], "temperature": 0.0, "avg_logprob": -0.22130791894320784, "compression_ratio": 1.6303317535545023, "no_speech_prob": 1.3005880646232981e-05}, {"id": 1625, "seek": 706752, "start": 7082.320000000001, "end": 7084.68, "text": " And remember PyTorch doesn't store things in.g.", "tokens": [400, 1604, 9953, 51, 284, 339, 1177, 380, 3531, 721, 294, 2411, 70, 13], "temperature": 0.0, "avg_logprob": -0.22130791894320784, "compression_ratio": 1.6303317535545023, "no_speech_prob": 1.3005880646232981e-05}, {"id": 1626, "seek": 706752, "start": 7084.68, "end": 7086.76, "text": " It stores them in.grad.", "tokens": [467, 9512, 552, 294, 2411, 7165, 13], "temperature": 0.0, "avg_logprob": -0.22130791894320784, "compression_ratio": 1.6303317535545023, "no_speech_prob": 1.3005880646232981e-05}, {"id": 1627, "seek": 706752, "start": 7086.76, "end": 7088.320000000001, "text": " And we can test them.", "tokens": [400, 321, 393, 1500, 552, 13], "temperature": 0.0, "avg_logprob": -0.22130791894320784, "compression_ratio": 1.6303317535545023, "no_speech_prob": 1.3005880646232981e-05}, {"id": 1628, "seek": 706752, "start": 7088.320000000001, "end": 7090.4800000000005, "text": " And all of our gradients were correct.", "tokens": [400, 439, 295, 527, 2771, 2448, 645, 3006, 13], "temperature": 0.0, "avg_logprob": -0.22130791894320784, "compression_ratio": 1.6303317535545023, "no_speech_prob": 1.3005880646232981e-05}, {"id": 1629, "seek": 706752, "start": 7090.4800000000005, "end": 7095.160000000001, "text": " Or at least they're the same as PyTorch's.", "tokens": [1610, 412, 1935, 436, 434, 264, 912, 382, 9953, 51, 284, 339, 311, 13], "temperature": 0.0, "avg_logprob": -0.22130791894320784, "compression_ratio": 1.6303317535545023, "no_speech_prob": 1.3005880646232981e-05}, {"id": 1630, "seek": 709516, "start": 7095.16, "end": 7099.08, "text": " So that's pretty interesting, right?", "tokens": [407, 300, 311, 1238, 1880, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.15411387749438016, "compression_ratio": 1.5899581589958158, "no_speech_prob": 9.874548823063378e-07}, {"id": 1631, "seek": 709516, "start": 7099.08, "end": 7104.36, "text": " I mean, that's an actual neural network that kind of contains all the main pieces that", "tokens": [286, 914, 11, 300, 311, 364, 3539, 18161, 3209, 300, 733, 295, 8306, 439, 264, 2135, 3755, 300], "temperature": 0.0, "avg_logprob": -0.15411387749438016, "compression_ratio": 1.5899581589958158, "no_speech_prob": 9.874548823063378e-07}, {"id": 1632, "seek": 709516, "start": 7104.36, "end": 7105.92, "text": " we're going to need.", "tokens": [321, 434, 516, 281, 643, 13], "temperature": 0.0, "avg_logprob": -0.15411387749438016, "compression_ratio": 1.5899581589958158, "no_speech_prob": 9.874548823063378e-07}, {"id": 1633, "seek": 709516, "start": 7105.92, "end": 7110.62, "text": " And we've written all these pieces from scratch.", "tokens": [400, 321, 600, 3720, 439, 613, 3755, 490, 8459, 13], "temperature": 0.0, "avg_logprob": -0.15411387749438016, "compression_ratio": 1.5899581589958158, "no_speech_prob": 9.874548823063378e-07}, {"id": 1634, "seek": 709516, "start": 7110.62, "end": 7113.2, "text": " So there's nothing magical here.", "tokens": [407, 456, 311, 1825, 12066, 510, 13], "temperature": 0.0, "avg_logprob": -0.15411387749438016, "compression_ratio": 1.5899581589958158, "no_speech_prob": 9.874548823063378e-07}, {"id": 1635, "seek": 709516, "start": 7113.2, "end": 7116.04, "text": " But let's do some cool refactoring.", "tokens": [583, 718, 311, 360, 512, 1627, 1895, 578, 3662, 13], "temperature": 0.0, "avg_logprob": -0.15411387749438016, "compression_ratio": 1.5899581589958158, "no_speech_prob": 9.874548823063378e-07}, {"id": 1636, "seek": 709516, "start": 7116.04, "end": 7117.8, "text": " I really love this refactoring.", "tokens": [286, 534, 959, 341, 1895, 578, 3662, 13], "temperature": 0.0, "avg_logprob": -0.15411387749438016, "compression_ratio": 1.5899581589958158, "no_speech_prob": 9.874548823063378e-07}, {"id": 1637, "seek": 709516, "start": 7117.8, "end": 7124.68, "text": " And this is massively inspired by, in fact, very closely stolen from the PyTorch API.", "tokens": [400, 341, 307, 29379, 7547, 538, 11, 294, 1186, 11, 588, 8185, 15900, 490, 264, 9953, 51, 284, 339, 9362, 13], "temperature": 0.0, "avg_logprob": -0.15411387749438016, "compression_ratio": 1.5899581589958158, "no_speech_prob": 9.874548823063378e-07}, {"id": 1638, "seek": 712468, "start": 7124.68, "end": 7125.68, "text": " But it's kind of interesting.", "tokens": [583, 309, 311, 733, 295, 1880, 13], "temperature": 0.0, "avg_logprob": -0.14441068782362826, "compression_ratio": 1.5875486381322956, "no_speech_prob": 1.0782939170894679e-05}, {"id": 1639, "seek": 712468, "start": 7125.68, "end": 7128.360000000001, "text": " I didn't have the PyTorch API in mind as I did this.", "tokens": [286, 994, 380, 362, 264, 9953, 51, 284, 339, 9362, 294, 1575, 382, 286, 630, 341, 13], "temperature": 0.0, "avg_logprob": -0.14441068782362826, "compression_ratio": 1.5875486381322956, "no_speech_prob": 1.0782939170894679e-05}, {"id": 1640, "seek": 712468, "start": 7128.360000000001, "end": 7133.8, "text": " But as I kept refactoring, I kind of noticed like, oh, I just recreated the PyTorch API.", "tokens": [583, 382, 286, 4305, 1895, 578, 3662, 11, 286, 733, 295, 5694, 411, 11, 1954, 11, 286, 445, 850, 26559, 264, 9953, 51, 284, 339, 9362, 13], "temperature": 0.0, "avg_logprob": -0.14441068782362826, "compression_ratio": 1.5875486381322956, "no_speech_prob": 1.0782939170894679e-05}, {"id": 1641, "seek": 712468, "start": 7133.8, "end": 7135.52, "text": " That makes perfect sense.", "tokens": [663, 1669, 2176, 2020, 13], "temperature": 0.0, "avg_logprob": -0.14441068782362826, "compression_ratio": 1.5875486381322956, "no_speech_prob": 1.0782939170894679e-05}, {"id": 1642, "seek": 712468, "start": 7135.52, "end": 7143.64, "text": " So let's take each of our layers, ReLU and Linear, and create classes.", "tokens": [407, 718, 311, 747, 1184, 295, 527, 7914, 11, 1300, 43, 52, 293, 14670, 289, 11, 293, 1884, 5359, 13], "temperature": 0.0, "avg_logprob": -0.14441068782362826, "compression_ratio": 1.5875486381322956, "no_speech_prob": 1.0782939170894679e-05}, {"id": 1643, "seek": 712468, "start": 7143.64, "end": 7147.12, "text": " And for the forward, let's use dunder call.", "tokens": [400, 337, 264, 2128, 11, 718, 311, 764, 274, 6617, 818, 13], "temperature": 0.0, "avg_logprob": -0.14441068782362826, "compression_ratio": 1.5875486381322956, "no_speech_prob": 1.0782939170894679e-05}, {"id": 1644, "seek": 712468, "start": 7147.12, "end": 7151.400000000001, "text": " Now, do you remember that dunder call means that we can now treat this as if it was a", "tokens": [823, 11, 360, 291, 1604, 300, 274, 6617, 818, 1355, 300, 321, 393, 586, 2387, 341, 382, 498, 309, 390, 257], "temperature": 0.0, "avg_logprob": -0.14441068782362826, "compression_ratio": 1.5875486381322956, "no_speech_prob": 1.0782939170894679e-05}, {"id": 1645, "seek": 712468, "start": 7151.400000000001, "end": 7152.400000000001, "text": " function?", "tokens": [2445, 30], "temperature": 0.0, "avg_logprob": -0.14441068782362826, "compression_ratio": 1.5875486381322956, "no_speech_prob": 1.0782939170894679e-05}, {"id": 1646, "seek": 715240, "start": 7152.4, "end": 7157.32, "text": " So if you call this class just with parentheses, it calls this function.", "tokens": [407, 498, 291, 818, 341, 1508, 445, 365, 34153, 11, 309, 5498, 341, 2445, 13], "temperature": 0.0, "avg_logprob": -0.11853963761102586, "compression_ratio": 1.7307692307692308, "no_speech_prob": 6.6433112806407735e-06}, {"id": 1647, "seek": 715240, "start": 7157.32, "end": 7160.32, "text": " And let's save the input.", "tokens": [400, 718, 311, 3155, 264, 4846, 13], "temperature": 0.0, "avg_logprob": -0.11853963761102586, "compression_ratio": 1.7307692307692308, "no_speech_prob": 6.6433112806407735e-06}, {"id": 1648, "seek": 715240, "start": 7160.32, "end": 7162.2, "text": " Let's save the output.", "tokens": [961, 311, 3155, 264, 5598, 13], "temperature": 0.0, "avg_logprob": -0.11853963761102586, "compression_ratio": 1.7307692307692308, "no_speech_prob": 6.6433112806407735e-06}, {"id": 1649, "seek": 715240, "start": 7162.2, "end": 7165.16, "text": " And let's return the output.", "tokens": [400, 718, 311, 2736, 264, 5598, 13], "temperature": 0.0, "avg_logprob": -0.11853963761102586, "compression_ratio": 1.7307692307692308, "no_speech_prob": 6.6433112806407735e-06}, {"id": 1650, "seek": 715240, "start": 7165.16, "end": 7169.44, "text": " And then backward, do you remember this was our backward pass?", "tokens": [400, 550, 23897, 11, 360, 291, 1604, 341, 390, 527, 23897, 1320, 30], "temperature": 0.0, "avg_logprob": -0.11853963761102586, "compression_ratio": 1.7307692307692308, "no_speech_prob": 6.6433112806407735e-06}, {"id": 1651, "seek": 715240, "start": 7169.44, "end": 7171.9, "text": " So it's exactly the same as we had before.", "tokens": [407, 309, 311, 2293, 264, 912, 382, 321, 632, 949, 13], "temperature": 0.0, "avg_logprob": -0.11853963761102586, "compression_ratio": 1.7307692307692308, "no_speech_prob": 6.6433112806407735e-06}, {"id": 1652, "seek": 715240, "start": 7171.9, "end": 7175.74, "text": " But we're going to save it inside self.input.gradient.", "tokens": [583, 321, 434, 516, 281, 3155, 309, 1854, 2698, 13, 259, 2582, 13, 7165, 1196, 13], "temperature": 0.0, "avg_logprob": -0.11853963761102586, "compression_ratio": 1.7307692307692308, "no_speech_prob": 6.6433112806407735e-06}, {"id": 1653, "seek": 715240, "start": 7175.74, "end": 7180.08, "text": " So this is exactly the same code as we had here.", "tokens": [407, 341, 307, 2293, 264, 912, 3089, 382, 321, 632, 510, 13], "temperature": 0.0, "avg_logprob": -0.11853963761102586, "compression_ratio": 1.7307692307692308, "no_speech_prob": 6.6433112806407735e-06}, {"id": 1654, "seek": 718008, "start": 7180.08, "end": 7185.28, "text": " But I've just moved the forward and backward into the same class.", "tokens": [583, 286, 600, 445, 4259, 264, 2128, 293, 23897, 666, 264, 912, 1508, 13], "temperature": 0.0, "avg_logprob": -0.12494057103207237, "compression_ratio": 1.6770186335403727, "no_speech_prob": 3.4464910640963353e-06}, {"id": 1655, "seek": 718008, "start": 7185.28, "end": 7189.2, "text": " So here's Linear, forward, exactly the same.", "tokens": [407, 510, 311, 14670, 289, 11, 2128, 11, 2293, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.12494057103207237, "compression_ratio": 1.6770186335403727, "no_speech_prob": 3.4464910640963353e-06}, {"id": 1656, "seek": 718008, "start": 7189.2, "end": 7195.16, "text": " But each time I'm saving the input, I'm saving the output, I'm returning the output.", "tokens": [583, 1184, 565, 286, 478, 6816, 264, 4846, 11, 286, 478, 6816, 264, 5598, 11, 286, 478, 12678, 264, 5598, 13], "temperature": 0.0, "avg_logprob": -0.12494057103207237, "compression_ratio": 1.6770186335403727, "no_speech_prob": 3.4464910640963353e-06}, {"id": 1657, "seek": 718008, "start": 7195.16, "end": 7202.58, "text": " And then here's our backward.", "tokens": [400, 550, 510, 311, 527, 23897, 13], "temperature": 0.0, "avg_logprob": -0.12494057103207237, "compression_ratio": 1.6770186335403727, "no_speech_prob": 3.4464910640963353e-06}, {"id": 1658, "seek": 718008, "start": 7202.58, "end": 7207.84, "text": " One thing to notice, the backward pass here.", "tokens": [1485, 551, 281, 3449, 11, 264, 23897, 1320, 510, 13], "temperature": 0.0, "avg_logprob": -0.12494057103207237, "compression_ratio": 1.6770186335403727, "no_speech_prob": 3.4464910640963353e-06}, {"id": 1659, "seek": 720784, "start": 7207.84, "end": 7214.04, "text": " For Linear, we don't just want the gradient of the outputs with respect to the inputs.", "tokens": [1171, 14670, 289, 11, 321, 500, 380, 445, 528, 264, 16235, 295, 264, 23930, 365, 3104, 281, 264, 15743, 13], "temperature": 0.0, "avg_logprob": -0.12713793049687924, "compression_ratio": 1.795774647887324, "no_speech_prob": 3.668811132229166e-06}, {"id": 1660, "seek": 720784, "start": 7214.04, "end": 7219.92, "text": " We also need the gradient of the outputs with respect to the weights and the output with", "tokens": [492, 611, 643, 264, 16235, 295, 264, 23930, 365, 3104, 281, 264, 17443, 293, 264, 5598, 365], "temperature": 0.0, "avg_logprob": -0.12713793049687924, "compression_ratio": 1.795774647887324, "no_speech_prob": 3.668811132229166e-06}, {"id": 1661, "seek": 720784, "start": 7219.92, "end": 7220.92, "text": " respect to the biases.", "tokens": [3104, 281, 264, 32152, 13], "temperature": 0.0, "avg_logprob": -0.12713793049687924, "compression_ratio": 1.795774647887324, "no_speech_prob": 3.668811132229166e-06}, {"id": 1662, "seek": 720784, "start": 7220.92, "end": 7230.04, "text": " So that's why we've got three lots of.g's going on here.", "tokens": [407, 300, 311, 983, 321, 600, 658, 1045, 3195, 295, 2411, 70, 311, 516, 322, 510, 13], "temperature": 0.0, "avg_logprob": -0.12713793049687924, "compression_ratio": 1.795774647887324, "no_speech_prob": 3.668811132229166e-06}, {"id": 1663, "seek": 723004, "start": 7230.04, "end": 7240.16, "text": " So there's our linear layers, forward and backward.", "tokens": [407, 456, 311, 527, 8213, 7914, 11, 2128, 293, 23897, 13], "temperature": 0.0, "avg_logprob": -0.0940479716739139, "compression_ratio": 1.587878787878788, "no_speech_prob": 6.681485729131964e-07}, {"id": 1664, "seek": 723004, "start": 7240.16, "end": 7243.36, "text": " And then we've got our mean squared error.", "tokens": [400, 550, 321, 600, 658, 527, 914, 8889, 6713, 13], "temperature": 0.0, "avg_logprob": -0.0940479716739139, "compression_ratio": 1.587878787878788, "no_speech_prob": 6.681485729131964e-07}, {"id": 1665, "seek": 723004, "start": 7243.36, "end": 7246.24, "text": " So there's our forward.", "tokens": [407, 456, 311, 527, 2128, 13], "temperature": 0.0, "avg_logprob": -0.0940479716739139, "compression_ratio": 1.587878787878788, "no_speech_prob": 6.681485729131964e-07}, {"id": 1666, "seek": 723004, "start": 7246.24, "end": 7250.12, "text": " And we'll save away both the input and the target for using later.", "tokens": [400, 321, 603, 3155, 1314, 1293, 264, 4846, 293, 264, 3779, 337, 1228, 1780, 13], "temperature": 0.0, "avg_logprob": -0.0940479716739139, "compression_ratio": 1.587878787878788, "no_speech_prob": 6.681485729131964e-07}, {"id": 1667, "seek": 723004, "start": 7250.12, "end": 7251.12, "text": " And there's our gradient.", "tokens": [400, 456, 311, 527, 16235, 13], "temperature": 0.0, "avg_logprob": -0.0940479716739139, "compression_ratio": 1.587878787878788, "no_speech_prob": 6.681485729131964e-07}, {"id": 1668, "seek": 723004, "start": 7251.12, "end": 7256.0, "text": " Again, same as before, 2 times input minus target.", "tokens": [3764, 11, 912, 382, 949, 11, 568, 1413, 4846, 3175, 3779, 13], "temperature": 0.0, "avg_logprob": -0.0940479716739139, "compression_ratio": 1.587878787878788, "no_speech_prob": 6.681485729131964e-07}, {"id": 1669, "seek": 725600, "start": 7256.0, "end": 7260.8, "text": " So with this refactoring, we can now create our model.", "tokens": [407, 365, 341, 1895, 578, 3662, 11, 321, 393, 586, 1884, 527, 2316, 13], "temperature": 0.0, "avg_logprob": -0.14617402449898098, "compression_ratio": 1.6198347107438016, "no_speech_prob": 1.4285127690527588e-05}, {"id": 1670, "seek": 725600, "start": 7260.8, "end": 7264.88, "text": " We can just say, let's create a model class and create something called.layers with a", "tokens": [492, 393, 445, 584, 11, 718, 311, 1884, 257, 2316, 1508, 293, 1884, 746, 1219, 2411, 8376, 433, 365, 257], "temperature": 0.0, "avg_logprob": -0.14617402449898098, "compression_ratio": 1.6198347107438016, "no_speech_prob": 1.4285127690527588e-05}, {"id": 1671, "seek": 725600, "start": 7264.88, "end": 7266.84, "text": " list of all of our layers.", "tokens": [1329, 295, 439, 295, 527, 7914, 13], "temperature": 0.0, "avg_logprob": -0.14617402449898098, "compression_ratio": 1.6198347107438016, "no_speech_prob": 1.4285127690527588e-05}, {"id": 1672, "seek": 725600, "start": 7266.84, "end": 7271.2, "text": " Notice I'm not using any PyTorch machinery.", "tokens": [13428, 286, 478, 406, 1228, 604, 9953, 51, 284, 339, 27302, 13], "temperature": 0.0, "avg_logprob": -0.14617402449898098, "compression_ratio": 1.6198347107438016, "no_speech_prob": 1.4285127690527588e-05}, {"id": 1673, "seek": 725600, "start": 7271.2, "end": 7272.74, "text": " This is all from scratch.", "tokens": [639, 307, 439, 490, 8459, 13], "temperature": 0.0, "avg_logprob": -0.14617402449898098, "compression_ratio": 1.6198347107438016, "no_speech_prob": 1.4285127690527588e-05}, {"id": 1674, "seek": 725600, "start": 7272.74, "end": 7275.68, "text": " Let's define loss, and then let's define call.", "tokens": [961, 311, 6964, 4470, 11, 293, 550, 718, 311, 6964, 818, 13], "temperature": 0.0, "avg_logprob": -0.14617402449898098, "compression_ratio": 1.6198347107438016, "no_speech_prob": 1.4285127690527588e-05}, {"id": 1675, "seek": 725600, "start": 7275.68, "end": 7281.28, "text": " And it's going to go through each layer and say x equals lx.", "tokens": [400, 309, 311, 516, 281, 352, 807, 1184, 4583, 293, 584, 2031, 6915, 287, 87, 13], "temperature": 0.0, "avg_logprob": -0.14617402449898098, "compression_ratio": 1.6198347107438016, "no_speech_prob": 1.4285127690527588e-05}, {"id": 1676, "seek": 725600, "start": 7281.28, "end": 7283.28, "text": " So this is how I do that function composition.", "tokens": [407, 341, 307, 577, 286, 360, 300, 2445, 12686, 13], "temperature": 0.0, "avg_logprob": -0.14617402449898098, "compression_ratio": 1.6198347107438016, "no_speech_prob": 1.4285127690527588e-05}, {"id": 1677, "seek": 728328, "start": 7283.28, "end": 7286.84, "text": " We're just calling the function on the result of the previous thing.", "tokens": [492, 434, 445, 5141, 264, 2445, 322, 264, 1874, 295, 264, 3894, 551, 13], "temperature": 0.0, "avg_logprob": -0.12806961216877416, "compression_ratio": 1.7205882352941178, "no_speech_prob": 3.446499704296002e-06}, {"id": 1678, "seek": 728328, "start": 7286.84, "end": 7291.639999999999, "text": " And then at the very end, call self.loss on that.", "tokens": [400, 550, 412, 264, 588, 917, 11, 818, 2698, 13, 75, 772, 322, 300, 13], "temperature": 0.0, "avg_logprob": -0.12806961216877416, "compression_ratio": 1.7205882352941178, "no_speech_prob": 3.446499704296002e-06}, {"id": 1679, "seek": 728328, "start": 7291.639999999999, "end": 7293.48, "text": " And then for backward, we do the exact opposite.", "tokens": [400, 550, 337, 23897, 11, 321, 360, 264, 1900, 6182, 13], "temperature": 0.0, "avg_logprob": -0.12806961216877416, "compression_ratio": 1.7205882352941178, "no_speech_prob": 3.446499704296002e-06}, {"id": 1680, "seek": 728328, "start": 7293.48, "end": 7299.44, "text": " We go self.loss.backward, and then we go through the reversed layers and call backward on each", "tokens": [492, 352, 2698, 13, 75, 772, 13, 3207, 1007, 11, 293, 550, 321, 352, 807, 264, 30563, 7914, 293, 818, 23897, 322, 1184], "temperature": 0.0, "avg_logprob": -0.12806961216877416, "compression_ratio": 1.7205882352941178, "no_speech_prob": 3.446499704296002e-06}, {"id": 1681, "seek": 728328, "start": 7299.44, "end": 7300.44, "text": " one.", "tokens": [472, 13], "temperature": 0.0, "avg_logprob": -0.12806961216877416, "compression_ratio": 1.7205882352941178, "no_speech_prob": 3.446499704296002e-06}, {"id": 1682, "seek": 728328, "start": 7300.44, "end": 7307.08, "text": " And remember, the backward passes are going to save the gradient away inside the.g.", "tokens": [400, 1604, 11, 264, 23897, 11335, 366, 516, 281, 3155, 264, 16235, 1314, 1854, 264, 2411, 70, 13], "temperature": 0.0, "avg_logprob": -0.12806961216877416, "compression_ratio": 1.7205882352941178, "no_speech_prob": 3.446499704296002e-06}, {"id": 1683, "seek": 730708, "start": 7307.08, "end": 7314.98, "text": " So with that, let's just set all of our gradients to none so that we know we're not cheating.", "tokens": [407, 365, 300, 11, 718, 311, 445, 992, 439, 295, 527, 2771, 2448, 281, 6022, 370, 300, 321, 458, 321, 434, 406, 18309, 13], "temperature": 0.0, "avg_logprob": -0.10234243392944337, "compression_ratio": 1.7727272727272727, "no_speech_prob": 2.5215556433977326e-06}, {"id": 1684, "seek": 730708, "start": 7314.98, "end": 7321.72, "text": " We can then create our model, this class model, and call it.", "tokens": [492, 393, 550, 1884, 527, 2316, 11, 341, 1508, 2316, 11, 293, 818, 309, 13], "temperature": 0.0, "avg_logprob": -0.10234243392944337, "compression_ratio": 1.7727272727272727, "no_speech_prob": 2.5215556433977326e-06}, {"id": 1685, "seek": 730708, "start": 7321.72, "end": 7326.8, "text": " And we can call it as if it was a function because we have done to call.", "tokens": [400, 321, 393, 818, 309, 382, 498, 309, 390, 257, 2445, 570, 321, 362, 1096, 281, 818, 13], "temperature": 0.0, "avg_logprob": -0.10234243392944337, "compression_ratio": 1.7727272727272727, "no_speech_prob": 2.5215556433977326e-06}, {"id": 1686, "seek": 730708, "start": 7326.8, "end": 7330.5599999999995, "text": " So this is going to call done to call.", "tokens": [407, 341, 307, 516, 281, 818, 1096, 281, 818, 13], "temperature": 0.0, "avg_logprob": -0.10234243392944337, "compression_ratio": 1.7727272727272727, "no_speech_prob": 2.5215556433977326e-06}, {"id": 1687, "seek": 730708, "start": 7330.5599999999995, "end": 7332.72, "text": " And then we can call backward.", "tokens": [400, 550, 321, 393, 818, 23897, 13], "temperature": 0.0, "avg_logprob": -0.10234243392944337, "compression_ratio": 1.7727272727272727, "no_speech_prob": 2.5215556433977326e-06}, {"id": 1688, "seek": 730708, "start": 7332.72, "end": 7336.92, "text": " And then we can check that our gradients are correct.", "tokens": [400, 550, 321, 393, 1520, 300, 527, 2771, 2448, 366, 3006, 13], "temperature": 0.0, "avg_logprob": -0.10234243392944337, "compression_ratio": 1.7727272727272727, "no_speech_prob": 2.5215556433977326e-06}, {"id": 1689, "seek": 733692, "start": 7336.92, "end": 7338.88, "text": " So that's nice.", "tokens": [407, 300, 311, 1481, 13], "temperature": 0.0, "avg_logprob": -0.26349897122164384, "compression_ratio": 1.5333333333333334, "no_speech_prob": 5.5075270211091265e-06}, {"id": 1690, "seek": 733692, "start": 7338.88, "end": 7343.64, "text": " One thing that's not nice is, holy crap, that took a long time.", "tokens": [1485, 551, 300, 311, 406, 1481, 307, 11, 10622, 12426, 11, 300, 1890, 257, 938, 565, 13], "temperature": 0.0, "avg_logprob": -0.26349897122164384, "compression_ratio": 1.5333333333333334, "no_speech_prob": 5.5075270211091265e-06}, {"id": 1691, "seek": 733692, "start": 7343.64, "end": 7344.64, "text": " Let's run it.", "tokens": [961, 311, 1190, 309, 13], "temperature": 0.0, "avg_logprob": -0.26349897122164384, "compression_ratio": 1.5333333333333334, "no_speech_prob": 5.5075270211091265e-06}, {"id": 1692, "seek": 733692, "start": 7344.64, "end": 7347.64, "text": " There we go.", "tokens": [821, 321, 352, 13], "temperature": 0.0, "avg_logprob": -0.26349897122164384, "compression_ratio": 1.5333333333333334, "no_speech_prob": 5.5075270211091265e-06}, {"id": 1693, "seek": 733692, "start": 7347.64, "end": 7349.64, "text": " 3.4 seconds.", "tokens": [805, 13, 19, 3949, 13], "temperature": 0.0, "avg_logprob": -0.26349897122164384, "compression_ratio": 1.5333333333333334, "no_speech_prob": 5.5075270211091265e-06}, {"id": 1694, "seek": 733692, "start": 7349.64, "end": 7353.74, "text": " So that was really, really slow.", "tokens": [407, 300, 390, 534, 11, 534, 2964, 13], "temperature": 0.0, "avg_logprob": -0.26349897122164384, "compression_ratio": 1.5333333333333334, "no_speech_prob": 5.5075270211091265e-06}, {"id": 1695, "seek": 733692, "start": 7353.74, "end": 7356.52, "text": " So we'll come back to that.", "tokens": [407, 321, 603, 808, 646, 281, 300, 13], "temperature": 0.0, "avg_logprob": -0.26349897122164384, "compression_ratio": 1.5333333333333334, "no_speech_prob": 5.5075270211091265e-06}, {"id": 1696, "seek": 733692, "start": 7356.52, "end": 7358.0, "text": " I don't like duplicate code.", "tokens": [286, 500, 380, 411, 23976, 3089, 13], "temperature": 0.0, "avg_logprob": -0.26349897122164384, "compression_ratio": 1.5333333333333334, "no_speech_prob": 5.5075270211091265e-06}, {"id": 1697, "seek": 733692, "start": 7358.0, "end": 7360.12, "text": " There's a lot of duplicate code here.", "tokens": [821, 311, 257, 688, 295, 23976, 3089, 510, 13], "temperature": 0.0, "avg_logprob": -0.26349897122164384, "compression_ratio": 1.5333333333333334, "no_speech_prob": 5.5075270211091265e-06}, {"id": 1698, "seek": 733692, "start": 7360.12, "end": 7362.08, "text": " Self.imp equals imp.", "tokens": [16348, 13, 8814, 6915, 704, 13], "temperature": 0.0, "avg_logprob": -0.26349897122164384, "compression_ratio": 1.5333333333333334, "no_speech_prob": 5.5075270211091265e-06}, {"id": 1699, "seek": 733692, "start": 7362.08, "end": 7364.2, "text": " Return self.out.", "tokens": [24350, 2698, 13, 346, 13], "temperature": 0.0, "avg_logprob": -0.26349897122164384, "compression_ratio": 1.5333333333333334, "no_speech_prob": 5.5075270211091265e-06}, {"id": 1700, "seek": 733692, "start": 7364.2, "end": 7365.46, "text": " That's messy.", "tokens": [663, 311, 16191, 13], "temperature": 0.0, "avg_logprob": -0.26349897122164384, "compression_ratio": 1.5333333333333334, "no_speech_prob": 5.5075270211091265e-06}, {"id": 1701, "seek": 736546, "start": 7365.46, "end": 7367.04, "text": " So let's get rid of it.", "tokens": [407, 718, 311, 483, 3973, 295, 309, 13], "temperature": 0.0, "avg_logprob": -0.10573814312616985, "compression_ratio": 1.6651162790697673, "no_speech_prob": 1.0845112683455227e-06}, {"id": 1702, "seek": 736546, "start": 7367.04, "end": 7371.72, "text": " So what we could do is we could create a new class called module, which basically does", "tokens": [407, 437, 321, 727, 360, 307, 321, 727, 1884, 257, 777, 1508, 1219, 10088, 11, 597, 1936, 775], "temperature": 0.0, "avg_logprob": -0.10573814312616985, "compression_ratio": 1.6651162790697673, "no_speech_prob": 1.0845112683455227e-06}, {"id": 1703, "seek": 736546, "start": 7371.72, "end": 7377.16, "text": " the self.imp equals imp and returns self.out for us.", "tokens": [264, 2698, 13, 8814, 6915, 704, 293, 11247, 2698, 13, 346, 337, 505, 13], "temperature": 0.0, "avg_logprob": -0.10573814312616985, "compression_ratio": 1.6651162790697673, "no_speech_prob": 1.0845112683455227e-06}, {"id": 1704, "seek": 736546, "start": 7377.16, "end": 7382.08, "text": " And so now we're not going to use done to call to implement our forward.", "tokens": [400, 370, 586, 321, 434, 406, 516, 281, 764, 1096, 281, 818, 281, 4445, 527, 2128, 13], "temperature": 0.0, "avg_logprob": -0.10573814312616985, "compression_ratio": 1.6651162790697673, "no_speech_prob": 1.0845112683455227e-06}, {"id": 1705, "seek": 736546, "start": 7382.08, "end": 7386.44, "text": " We're going to have a call something called self.forward, which we will initially set", "tokens": [492, 434, 516, 281, 362, 257, 818, 746, 1219, 2698, 13, 13305, 11, 597, 321, 486, 9105, 992], "temperature": 0.0, "avg_logprob": -0.10573814312616985, "compression_ratio": 1.6651162790697673, "no_speech_prob": 1.0845112683455227e-06}, {"id": 1706, "seek": 736546, "start": 7386.44, "end": 7390.24, "text": " to rows exception, not implemented.", "tokens": [281, 13241, 11183, 11, 406, 12270, 13], "temperature": 0.0, "avg_logprob": -0.10573814312616985, "compression_ratio": 1.6651162790697673, "no_speech_prob": 1.0845112683455227e-06}, {"id": 1707, "seek": 739024, "start": 7390.24, "end": 7396.36, "text": " And backward is going to call self.bwd, passing in the thing that we just saved.", "tokens": [400, 23897, 307, 516, 281, 818, 2698, 13, 65, 43778, 11, 8437, 294, 264, 551, 300, 321, 445, 6624, 13], "temperature": 0.0, "avg_logprob": -0.13928866386413574, "compression_ratio": 1.6963350785340314, "no_speech_prob": 2.443966650389484e-06}, {"id": 1708, "seek": 739024, "start": 7396.36, "end": 7401.76, "text": " And so now relu has something called forward, which just has that.", "tokens": [400, 370, 586, 1039, 84, 575, 746, 1219, 2128, 11, 597, 445, 575, 300, 13], "temperature": 0.0, "avg_logprob": -0.13928866386413574, "compression_ratio": 1.6963350785340314, "no_speech_prob": 2.443966650389484e-06}, {"id": 1709, "seek": 739024, "start": 7401.76, "end": 7403.8, "text": " So we're now basically back to where we were.", "tokens": [407, 321, 434, 586, 1936, 646, 281, 689, 321, 645, 13], "temperature": 0.0, "avg_logprob": -0.13928866386413574, "compression_ratio": 1.6963350785340314, "no_speech_prob": 2.443966650389484e-06}, {"id": 1710, "seek": 739024, "start": 7403.8, "end": 7407.4, "text": " And backward just has that.", "tokens": [400, 23897, 445, 575, 300, 13], "temperature": 0.0, "avg_logprob": -0.13928866386413574, "compression_ratio": 1.6963350785340314, "no_speech_prob": 2.443966650389484e-06}, {"id": 1711, "seek": 739024, "start": 7407.4, "end": 7410.599999999999, "text": " So now look how neat that is.", "tokens": [407, 586, 574, 577, 10654, 300, 307, 13], "temperature": 0.0, "avg_logprob": -0.13928866386413574, "compression_ratio": 1.6963350785340314, "no_speech_prob": 2.443966650389484e-06}, {"id": 1712, "seek": 739024, "start": 7410.599999999999, "end": 7416.2, "text": " And we also realized that this thing we were doing to...", "tokens": [400, 321, 611, 5334, 300, 341, 551, 321, 645, 884, 281, 485], "temperature": 0.0, "avg_logprob": -0.13928866386413574, "compression_ratio": 1.6963350785340314, "no_speech_prob": 2.443966650389484e-06}, {"id": 1713, "seek": 739024, "start": 7416.2, "end": 7418.7, "text": " Not this thing.", "tokens": [1726, 341, 551, 13], "temperature": 0.0, "avg_logprob": -0.13928866386413574, "compression_ratio": 1.6963350785340314, "no_speech_prob": 2.443966650389484e-06}, {"id": 1714, "seek": 741870, "start": 7418.7, "end": 7425.44, "text": " This thing we were doing to calculate the derivative of the output of the linear layer", "tokens": [639, 551, 321, 645, 884, 281, 8873, 264, 13760, 295, 264, 5598, 295, 264, 8213, 4583], "temperature": 0.0, "avg_logprob": -0.12012090488355986, "compression_ratio": 1.575221238938053, "no_speech_prob": 4.710806479124585e-06}, {"id": 1715, "seek": 741870, "start": 7425.44, "end": 7429.84, "text": " with respect to the weights, where we're doing an unsqueeze and an unsqueeze, which is basically", "tokens": [365, 3104, 281, 264, 17443, 11, 689, 321, 434, 884, 364, 2693, 1077, 10670, 293, 364, 2693, 1077, 10670, 11, 597, 307, 1936], "temperature": 0.0, "avg_logprob": -0.12012090488355986, "compression_ratio": 1.575221238938053, "no_speech_prob": 4.710806479124585e-06}, {"id": 1716, "seek": 741870, "start": 7429.84, "end": 7431.88, "text": " a big outer product in a sum.", "tokens": [257, 955, 10847, 1674, 294, 257, 2408, 13], "temperature": 0.0, "avg_logprob": -0.12012090488355986, "compression_ratio": 1.575221238938053, "no_speech_prob": 4.710806479124585e-06}, {"id": 1717, "seek": 741870, "start": 7431.88, "end": 7438.679999999999, "text": " We could actually re-express that with unsum.", "tokens": [492, 727, 767, 319, 12, 3121, 11637, 300, 365, 2693, 449, 13], "temperature": 0.0, "avg_logprob": -0.12012090488355986, "compression_ratio": 1.575221238938053, "no_speech_prob": 4.710806479124585e-06}, {"id": 1718, "seek": 741870, "start": 7438.679999999999, "end": 7447.36, "text": " And when we do that, so our code is now neater, and our 3.4 seconds is down to 143 milliseconds.", "tokens": [400, 562, 321, 360, 300, 11, 370, 527, 3089, 307, 586, 408, 771, 11, 293, 527, 805, 13, 19, 3949, 307, 760, 281, 3499, 18, 34184, 13], "temperature": 0.0, "avg_logprob": -0.12012090488355986, "compression_ratio": 1.575221238938053, "no_speech_prob": 4.710806479124585e-06}, {"id": 1719, "seek": 744736, "start": 7447.36, "end": 7450.16, "text": " So thank you again to unsum.", "tokens": [407, 1309, 291, 797, 281, 2693, 449, 13], "temperature": 0.0, "avg_logprob": -0.10893435748118274, "compression_ratio": 1.5305164319248827, "no_speech_prob": 2.3320596937992377e-06}, {"id": 1720, "seek": 744736, "start": 7450.16, "end": 7459.4, "text": " So you'll see this now, look, model equals model, loss equals blah, blah.backward, and", "tokens": [407, 291, 603, 536, 341, 586, 11, 574, 11, 2316, 6915, 2316, 11, 4470, 6915, 12288, 11, 12288, 13, 3207, 1007, 11, 293], "temperature": 0.0, "avg_logprob": -0.10893435748118274, "compression_ratio": 1.5305164319248827, "no_speech_prob": 2.3320596937992377e-06}, {"id": 1721, "seek": 744736, "start": 7459.4, "end": 7462.0, "text": " now the gradients are all there.", "tokens": [586, 264, 2771, 2448, 366, 439, 456, 13], "temperature": 0.0, "avg_logprob": -0.10893435748118274, "compression_ratio": 1.5305164319248827, "no_speech_prob": 2.3320596937992377e-06}, {"id": 1722, "seek": 744736, "start": 7462.0, "end": 7465.66, "text": " That looks almost exactly like PyTorch.", "tokens": [663, 1542, 1920, 2293, 411, 9953, 51, 284, 339, 13], "temperature": 0.0, "avg_logprob": -0.10893435748118274, "compression_ratio": 1.5305164319248827, "no_speech_prob": 2.3320596937992377e-06}, {"id": 1723, "seek": 744736, "start": 7465.66, "end": 7468.92, "text": " And so we can see why it's done this way.", "tokens": [400, 370, 321, 393, 536, 983, 309, 311, 1096, 341, 636, 13], "temperature": 0.0, "avg_logprob": -0.10893435748118274, "compression_ratio": 1.5305164319248827, "no_speech_prob": 2.3320596937992377e-06}, {"id": 1724, "seek": 744736, "start": 7468.92, "end": 7472.0, "text": " Why do we have to inherit from nn.module?", "tokens": [1545, 360, 321, 362, 281, 21389, 490, 297, 77, 13, 8014, 2271, 30], "temperature": 0.0, "avg_logprob": -0.10893435748118274, "compression_ratio": 1.5305164319248827, "no_speech_prob": 2.3320596937992377e-06}, {"id": 1725, "seek": 744736, "start": 7472.0, "end": 7474.24, "text": " Why do we have to define forward?", "tokens": [1545, 360, 321, 362, 281, 6964, 2128, 30], "temperature": 0.0, "avg_logprob": -0.10893435748118274, "compression_ratio": 1.5305164319248827, "no_speech_prob": 2.3320596937992377e-06}, {"id": 1726, "seek": 744736, "start": 7474.24, "end": 7475.24, "text": " This is why, right?", "tokens": [639, 307, 983, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.10893435748118274, "compression_ratio": 1.5305164319248827, "no_speech_prob": 2.3320596937992377e-06}, {"id": 1727, "seek": 747524, "start": 7475.24, "end": 7478.719999999999, "text": " That's PyTorch factor out all this duplicate stuff.", "tokens": [663, 311, 9953, 51, 284, 339, 5952, 484, 439, 341, 23976, 1507, 13], "temperature": 0.0, "avg_logprob": -0.16461337880885346, "compression_ratio": 1.5327102803738317, "no_speech_prob": 4.9368613872502465e-06}, {"id": 1728, "seek": 747524, "start": 7478.719999999999, "end": 7483.26, "text": " So all we have to do is do the implementation.", "tokens": [407, 439, 321, 362, 281, 360, 307, 360, 264, 11420, 13], "temperature": 0.0, "avg_logprob": -0.16461337880885346, "compression_ratio": 1.5327102803738317, "no_speech_prob": 4.9368613872502465e-06}, {"id": 1729, "seek": 747524, "start": 7483.26, "end": 7487.34, "text": " So I think that's pretty fun.", "tokens": [407, 286, 519, 300, 311, 1238, 1019, 13], "temperature": 0.0, "avg_logprob": -0.16461337880885346, "compression_ratio": 1.5327102803738317, "no_speech_prob": 4.9368613872502465e-06}, {"id": 1730, "seek": 747524, "start": 7487.34, "end": 7490.219999999999, "text": " And then once we realized, we thought more about it, and we're like, what are we doing", "tokens": [400, 550, 1564, 321, 5334, 11, 321, 1194, 544, 466, 309, 11, 293, 321, 434, 411, 11, 437, 366, 321, 884], "temperature": 0.0, "avg_logprob": -0.16461337880885346, "compression_ratio": 1.5327102803738317, "no_speech_prob": 4.9368613872502465e-06}, {"id": 1731, "seek": 747524, "start": 7490.219999999999, "end": 7491.66, "text": " with this unsum?", "tokens": [365, 341, 2693, 449, 30], "temperature": 0.0, "avg_logprob": -0.16461337880885346, "compression_ratio": 1.5327102803738317, "no_speech_prob": 4.9368613872502465e-06}, {"id": 1732, "seek": 747524, "start": 7491.66, "end": 7497.4, "text": " And we actually realized that it's exactly the same as just doing input.transpose times", "tokens": [400, 321, 767, 5334, 300, 309, 311, 2293, 264, 912, 382, 445, 884, 4846, 13, 24999, 43501, 1413], "temperature": 0.0, "avg_logprob": -0.16461337880885346, "compression_ratio": 1.5327102803738317, "no_speech_prob": 4.9368613872502465e-06}, {"id": 1733, "seek": 747524, "start": 7497.4, "end": 7498.4, "text": " output.", "tokens": [5598, 13], "temperature": 0.0, "avg_logprob": -0.16461337880885346, "compression_ratio": 1.5327102803738317, "no_speech_prob": 4.9368613872502465e-06}, {"id": 1734, "seek": 749840, "start": 7498.4, "end": 7505.2, "text": " And so we replaced the unsum with a matrix product, and that's 140 milliseconds.", "tokens": [400, 370, 321, 10772, 264, 2693, 449, 365, 257, 8141, 1674, 11, 293, 300, 311, 21548, 34184, 13], "temperature": 0.0, "avg_logprob": -0.11020786621991326, "compression_ratio": 1.6729857819905214, "no_speech_prob": 4.222746156301582e-06}, {"id": 1735, "seek": 749840, "start": 7505.2, "end": 7512.58, "text": " And so now we've basically implemented nn.linear and nn.module.", "tokens": [400, 370, 586, 321, 600, 1936, 12270, 297, 77, 13, 28263, 293, 297, 77, 13, 8014, 2271, 13], "temperature": 0.0, "avg_logprob": -0.11020786621991326, "compression_ratio": 1.6729857819905214, "no_speech_prob": 4.222746156301582e-06}, {"id": 1736, "seek": 749840, "start": 7512.58, "end": 7517.16, "text": " So let's now use nn.linear and nn.module, because we're allowed to.", "tokens": [407, 718, 311, 586, 764, 297, 77, 13, 28263, 293, 297, 77, 13, 8014, 2271, 11, 570, 321, 434, 4350, 281, 13], "temperature": 0.0, "avg_logprob": -0.11020786621991326, "compression_ratio": 1.6729857819905214, "no_speech_prob": 4.222746156301582e-06}, {"id": 1737, "seek": 749840, "start": 7517.16, "end": 7518.679999999999, "text": " That's the rules.", "tokens": [663, 311, 264, 4474, 13], "temperature": 0.0, "avg_logprob": -0.11020786621991326, "compression_ratio": 1.6729857819905214, "no_speech_prob": 4.222746156301582e-06}, {"id": 1738, "seek": 749840, "start": 7518.679999999999, "end": 7523.24, "text": " And the forward pass is almost exactly the same speed as our forward pass.", "tokens": [400, 264, 2128, 1320, 307, 1920, 2293, 264, 912, 3073, 382, 527, 2128, 1320, 13], "temperature": 0.0, "avg_logprob": -0.11020786621991326, "compression_ratio": 1.6729857819905214, "no_speech_prob": 4.222746156301582e-06}, {"id": 1739, "seek": 749840, "start": 7523.24, "end": 7526.719999999999, "text": " And their backward pass is about twice as fast.", "tokens": [400, 641, 23897, 1320, 307, 466, 6091, 382, 2370, 13], "temperature": 0.0, "avg_logprob": -0.11020786621991326, "compression_ratio": 1.6729857819905214, "no_speech_prob": 4.222746156301582e-06}, {"id": 1740, "seek": 752672, "start": 7526.72, "end": 7533.12, "text": " I'm guessing that's because we're calculating all of the gradients, and they're not calculating", "tokens": [286, 478, 17939, 300, 311, 570, 321, 434, 28258, 439, 295, 264, 2771, 2448, 11, 293, 436, 434, 406, 28258], "temperature": 0.0, "avg_logprob": -0.142473417459075, "compression_ratio": 1.6255707762557077, "no_speech_prob": 7.182993613241706e-06}, {"id": 1741, "seek": 752672, "start": 7533.12, "end": 7535.76, "text": " all of them, only the ones they need.", "tokens": [439, 295, 552, 11, 787, 264, 2306, 436, 643, 13], "temperature": 0.0, "avg_logprob": -0.142473417459075, "compression_ratio": 1.6255707762557077, "no_speech_prob": 7.182993613241706e-06}, {"id": 1742, "seek": 752672, "start": 7535.76, "end": 7538.68, "text": " But it's basically the same thing.", "tokens": [583, 309, 311, 1936, 264, 912, 551, 13], "temperature": 0.0, "avg_logprob": -0.142473417459075, "compression_ratio": 1.6255707762557077, "no_speech_prob": 7.182993613241706e-06}, {"id": 1743, "seek": 752672, "start": 7538.68, "end": 7548.88, "text": " So at this point, we're ready in the next lesson to do a training loop.", "tokens": [407, 412, 341, 935, 11, 321, 434, 1919, 294, 264, 958, 6898, 281, 360, 257, 3097, 6367, 13], "temperature": 0.0, "avg_logprob": -0.142473417459075, "compression_ratio": 1.6255707762557077, "no_speech_prob": 7.182993613241706e-06}, {"id": 1744, "seek": 752672, "start": 7548.88, "end": 7549.88, "text": " We have something.", "tokens": [492, 362, 746, 13], "temperature": 0.0, "avg_logprob": -0.142473417459075, "compression_ratio": 1.6255707762557077, "no_speech_prob": 7.182993613241706e-06}, {"id": 1745, "seek": 752672, "start": 7549.88, "end": 7556.68, "text": " We have a multi-layer, fully connected neural network, what the HUR paper would call a rectifier", "tokens": [492, 362, 257, 4825, 12, 8376, 260, 11, 4498, 4582, 18161, 3209, 11, 437, 264, 389, 7932, 3035, 576, 818, 257, 11048, 9902], "temperature": 0.0, "avg_logprob": -0.142473417459075, "compression_ratio": 1.6255707762557077, "no_speech_prob": 7.182993613241706e-06}, {"id": 1746, "seek": 755668, "start": 7556.68, "end": 7558.56, "text": " network.", "tokens": [3209, 13], "temperature": 0.0, "avg_logprob": -0.11727494691547595, "compression_ratio": 1.5434782608695652, "no_speech_prob": 6.814193329773843e-05}, {"id": 1747, "seek": 755668, "start": 7558.56, "end": 7561.4800000000005, "text": " We have matrix multiply organized.", "tokens": [492, 362, 8141, 12972, 9983, 13], "temperature": 0.0, "avg_logprob": -0.11727494691547595, "compression_ratio": 1.5434782608695652, "no_speech_prob": 6.814193329773843e-05}, {"id": 1748, "seek": 755668, "start": 7561.4800000000005, "end": 7564.320000000001, "text": " We have our forward and backward passes organized.", "tokens": [492, 362, 527, 2128, 293, 23897, 11335, 9983, 13], "temperature": 0.0, "avg_logprob": -0.11727494691547595, "compression_ratio": 1.5434782608695652, "no_speech_prob": 6.814193329773843e-05}, {"id": 1749, "seek": 755668, "start": 7564.320000000001, "end": 7569.92, "text": " It's all nicely refactored out into classes and a module class.", "tokens": [467, 311, 439, 9594, 1895, 578, 2769, 484, 666, 5359, 293, 257, 10088, 1508, 13], "temperature": 0.0, "avg_logprob": -0.11727494691547595, "compression_ratio": 1.5434782608695652, "no_speech_prob": 6.814193329773843e-05}, {"id": 1750, "seek": 755668, "start": 7569.92, "end": 7573.84, "text": " So in the next lesson, we will see how far we can get.", "tokens": [407, 294, 264, 958, 6898, 11, 321, 486, 536, 577, 1400, 321, 393, 483, 13], "temperature": 0.0, "avg_logprob": -0.11727494691547595, "compression_ratio": 1.5434782608695652, "no_speech_prob": 6.814193329773843e-05}, {"id": 1751, "seek": 755668, "start": 7573.84, "end": 7581.4400000000005, "text": " Hopefully we will build a high-quality, fast ResNet.", "tokens": [10429, 321, 486, 1322, 257, 1090, 12, 11286, 11, 2370, 5015, 31890, 13], "temperature": 0.0, "avg_logprob": -0.11727494691547595, "compression_ratio": 1.5434782608695652, "no_speech_prob": 6.814193329773843e-05}, {"id": 1752, "seek": 755668, "start": 7581.4400000000005, "end": 7585.8, "text": " And we're also going to take a very deep dive into optimizers and callbacks and training", "tokens": [400, 321, 434, 611, 516, 281, 747, 257, 588, 2452, 9192, 666, 5028, 22525, 293, 818, 17758, 293, 3097], "temperature": 0.0, "avg_logprob": -0.11727494691547595, "compression_ratio": 1.5434782608695652, "no_speech_prob": 6.814193329773843e-05}, {"id": 1753, "seek": 758580, "start": 7585.8, "end": 7590.8, "text": " loops and normalization methods.", "tokens": [16121, 293, 2710, 2144, 7150, 13], "temperature": 0.0, "avg_logprob": -0.25071871798971423, "compression_ratio": 1.125, "no_speech_prob": 1.7497148292022757e-05}, {"id": 1754, "seek": 758580, "start": 7590.8, "end": 7592.88, "text": " Any questions before we go?", "tokens": [2639, 1651, 949, 321, 352, 30], "temperature": 0.0, "avg_logprob": -0.25071871798971423, "compression_ratio": 1.125, "no_speech_prob": 1.7497148292022757e-05}, {"id": 1755, "seek": 758580, "start": 7592.88, "end": 7593.88, "text": " No?", "tokens": [883, 30], "temperature": 0.0, "avg_logprob": -0.25071871798971423, "compression_ratio": 1.125, "no_speech_prob": 1.7497148292022757e-05}, {"id": 1756, "seek": 758580, "start": 7593.88, "end": 7594.88, "text": " That's great.", "tokens": [663, 311, 869, 13], "temperature": 0.0, "avg_logprob": -0.25071871798971423, "compression_ratio": 1.125, "no_speech_prob": 1.7497148292022757e-05}, {"id": 1757, "seek": 758580, "start": 7594.88, "end": 7595.88, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.25071871798971423, "compression_ratio": 1.125, "no_speech_prob": 1.7497148292022757e-05}, {"id": 1758, "seek": 758580, "start": 7595.88, "end": 7596.88, "text": " Thanks, everybody.", "tokens": [2561, 11, 2201, 13], "temperature": 0.0, "avg_logprob": -0.25071871798971423, "compression_ratio": 1.125, "no_speech_prob": 1.7497148292022757e-05}, {"id": 1759, "seek": 758580, "start": 7596.88, "end": 7597.88, "text": " See you on the forums.", "tokens": [3008, 291, 322, 264, 26998, 13], "temperature": 0.0, "avg_logprob": -0.25071871798971423, "compression_ratio": 1.125, "no_speech_prob": 1.7497148292022757e-05}, {"id": 1760, "seek": 759788, "start": 7597.88, "end": 7617.72, "text": " See you in the next class.", "tokens": [3008, 291, 294, 264, 958, 1508, 13], "temperature": 1.0, "avg_logprob": -1.3459724946455522, "compression_ratio": 0.7647058823529411, "no_speech_prob": 0.0012913934187963605}], "language": "en"}