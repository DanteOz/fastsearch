{"text": " Thank you. Hi. Hello. Hello. How is everyone doing. I'm good. How are you. Doing good. Doing good. Got another blog post out so that always feels good. All right. Nice job. I'm going to go ahead and turn it over to you. I see the very warm here in Minnesota. Warm in Minnesota. I didn't know that happened. Yeah. Yeah. A little bit in the summer. I just moved away from Minnesota about a year ago. What part of Minnesota are you in? That twin cities. I live in the south. Yeah. Yeah. I lived there for. I guess 15 years. I just moved. Moved to DC from there about a year ago. Gotcha. I was there for seven years and moved last year. I went to college in Duluth actually. Oh yeah. Yeah. A little colder up there. Yeah. Not very good today. First time in a while. It's yeah. Really not very good. Is it raining? It's raining. It's raining. It's windy. So I guess that's fine. Yeah. I think it's a little bit of a relief. In terms of getting it ready. Yeah. It's like. I'll do terrifying. You know, it's like. Good to have things finished, but then. It's like, oh, you know, what if people hate it? So. Hopefully people don't hate it. Where those pictures all Dolly to generated. Yeah. Yeah. You should try. Did you try with Dolly mini instead? No, because I thought it might be more interesting because a lot of, you know, that was developed by a lot of fast AI people. Right. So. It could be, could be interesting too. Yeah, it was, but it's also like. Much less. Trams. So it's. Not normally. I mean, it's good for what it is, but. Yeah. Cause I think one of the things. I think is that in like the early days of the. I think the data, the data has to be pretty prompt and stuff because some people say, like it, you know, especially with like, I guess more pop culture and stuff. Dolly mini is better because yeah, Dolly to the filter. All that stuff out. So. Hmm. That's interesting. Yeah. Yeah. A lot of people. I didn't spend time on it, honestly. It's just like, I'll be fun to. Throw in some. Examples. Yeah. I've got a message. All right, my last picture is six. So hopefully, you will be OK. Any APL news? I posted a kind of a statistics blog post and APL on the forum a little bit ago. We were just talking about that a little bit. Very interesting going through that. Tell us about it, Isaac. Yeah, so this was calculating some simple statistics, confidence intervals, and p-values through bootstrapping. I've got a little monologue on why. For those who don't know what bootstrapping is, do you want to mention what that is? Yeah, so there's kind of a couple of ways you can calculate most statistics. Kind of the classical statistical formulas that I think most people are more familiar with. You know, you have a formula that can calculate a p-value, and you have kind of assumptions baked in. Like you're going to assume the normal distribution, and if these assumptions are true, you can calculate your value. Bootstrapping does a little bit of a different approach. Instead of kind of approximating the statistic by kind of assuming normal distribution, it says, well, we're just going to randomly sample over and over and over again. So rather than creating a kind of an artificial sampling distribution based on what we believe the distribution to be, we'll just create it by randomly sampling a thousand times. So there's less assumptions baked in. And then if you calculate a confidence interval, you can say a confidence interval on the mean. You can sample it a thousand times, get the mean of all these small samples. And if you want a 90% confidence interval, you just chop the lowest 5% off, chop the highest 5% off, and 90% of the time, your data will fall in those bounds. And you know that's the case because you did it a thousand times, and you looked at where 90% of them fell. So it's kind of a more elementary, I think more flexible approach that kind of gets the same answer. Yeah. So when I used to do consulting 25, 30 years ago, this was my one of my two big tricks was to use this kind of sampling all the time for creating simulations. I basically almost never used assumed distributions, but yeah, I would always basically get some real data and then randomly pick from a column. Yeah, it made life a lot easier and generally made things more accurate. Well, and I think it's the other trick. My other big trick was using pivot tables all the time. Back when pivot tables have just come out, it blew people's minds. Nice. They still blow people's minds by the way, but it's a little less, a little more surprising. It blows people's minds today, I guess. But yeah, and so I think the biggest value for me in this bootstrapping is you can kind of think and reason and it's very intuitive, right? Like where will 90% of my data points fall? Well, I don't know. Let me try it a thousand times and see where 90% of my data points did fall. If you want to do a hypothesis test, you can sample it a bunch of times and see how many values were more extreme than what you saw and you can actually sample it and look. And the nice thing about that is you can compare your means, but it's very easy to say not just let me validate that the means are different, but eventually you want to actually say, let me validate. Can I validate to see if the means are different by a certain amount? So you can start to do statistical tests on magnitude because just because two things are different doesn't mean it means anything. Normally there's an amount it has to be different before it matters and you can kind of... My daughter wants me. You can keep talking. So these, when you sample it, I feel it's just a way of doing it just based on kind of intuition and experimentation that I find is just a lot easier to work with and customize and understand what's going on and you don't have to be as careful about what assumptions you're making versus not making. So Isaac, have you used that a lot? I'm sorry, you might have said that I was... I might not have heard it. Yeah, I pretty much exclusively use bootstrapping. I don't really see... I mean, I think the situations where I wouldn't would be if I'm completely certain of what the assumptions of a given formula are and completely certain my data set fits those and bootstrapping for whatever reason is not feasible. Like if I really needed to calculate a statistic on some enormous, ginormous data set, then maybe but these formulas are really just kind of shortcuts. They're not different. They're not giving different values. They're just a way to do it more computationally efficient and so when I'm kind of just testing and developing things, I'd rather have something that I can think about and is a little bit more intuitive but I mean, I don't really need to... I mean, drawing a random sample is usually not computationally prohibitive so I can usually just just do it on my laptop and it's not a big deal so I almost never use the traditional formulas. I wouldn't say never but bootstrapping is definitely my default. If you can say what are the applications that you would like just a handful or like one or two? Like one or two of what you've used it on? Yeah, I mean, really... Tell me what's the data from? Pretty much anything you would do any normal statistical test or confidence interval on so you've got some data and you run, maybe you're doing an A-B test, you have a control group and you're testing, sending fewer emails to another group and you want to know did it have an impact on revenue or their level of engagement or whatever? Let me do a hypothesis there. I used it a lot for simulations so it'd be like in consulting, it'd be like, okay, what's the possible outcomes for this company under different scenarios and you would need to make a bunch of assumptions about what might happen and generally it's not the idea to do a point assumption because you don't know so then the normal thing might be to say, oh well, let's assume it's a standard deviation around our assumption of whatever. But I'd kind of often like to find him some historical data of like past results or something like that and then basically just do a random lookup into that list of values. There's a really great introductory statistics book that is a bootstrap first approach. I'll put that in the chat if anyone is interested. Yeah, that'd be great. Thank you. It's not APL but I think it teaches things in a really intuitive and useful way and it covers things like just because something is statistically significant doesn't mean it's practically significant which I think is something that's sometimes missed in statistics. It feels like remembering the author names might be too hard. Yeah, it's a frank family of I think like four of them have PhDs in statistics but it's interesting. Gotcha, thank you. I haven't seen this before. At Cart. Oh my god, $112. What is it about books? Wait, the e-book's $112 or the print book's $48. That's interesting. Oh, that's a rent for the book. Well, the rental. God, I hate textbooks. And what's this? Online access for $10. You need the $30 Dover edition. The what? $30? I'm sorry? What did you say? You know, Dover publications, they don't have these kind of pseudo textbooks. So I have a buddy that I went to college with, he's a physics professor over here in the States and he was trying to find a Dover publication on physics that he could use for one of his classes because the books only cost like $30. It's not hard bound but it's an actual physical text or physical book but unfortunately a lot of them, you know, for at least he was saying for the stuff he was looking at, they left out too much detail because, you know, they're usually, at least the ones I've seen are, you know, in that kind of standard 200 to 220 page realm but so that's what I was referencing. I see. But Dover publications has a lot of technical books. Maybe I'll find their, you know, their website and put it on the thing. And some of the books are really good. It's just that some of the detail isn't in there. The Kindle version is $47. That's weird. Is that just student solutions or? Oh, was it? Solutions manual. Oh my gosh. Okay. Right. Hardcover $362. I don't know. Yeah, it was more than I wanted but my work paid for it so I didn't feel bad for it. It's not just wasting somebody else's money. I'm more okay with it. Maybe you can find a used copy. Yeah, it's going to be on Amazon. I hope Molly is able to join because it sounded like she was going to try and actually do some prep for today's chat. She was asking what we're going to cover. And Sarada, whereabouts did you list these things? Was that in the previous session or something? I know it's in the how to write a really short APL code. Yeah, it's the first one. Okay, so tell us about this APL problem solving competition. Actually, I hear from your interview in a waycast and Adam mentioned it at the end. So I just jumped in and have a look. And under the first one, the left hand side. Oh, left hand side. So they actually give you some very easy to start with sample and then have a platform for you to do it. And I find it quite easy to use some of the I have experienced in the past in Python. Some of them I just don't know how to do the submission, but they're very good explanation. And I think I've been hooked is because of the two questions. They actually using the APL and then solving the life science problem. They actually how to tell the different DNA and the mutation. So and the second solution actually really, really short. And I really impressed by what they can do. Cool. So you can actually submit your function and test it here. Yeah. And then it has some edge case. So that's why I start digging into the documentation and find out the slightly different. I need to do that little diamond thing in it. Yeah. And they cover quite a wide range of the other problem as well. So you can pick through. Yeah, that is a bit more a multi-line question. So maybe in the future, we can you can cover it here. Yeah, I think I think Felix was telling me that a lot of the phase one questions are pretty approachable. So this will be a small exercise. I when I learn Python, I remember I tried to find different problem and just try to understand the description, how to do it. So, yeah, just kind of fun. And they give us some hints on what solution or simple we should use and then just start looking at it as well. But as APO documentation, sometimes can be quite hard to understand. So you can cover it. It will be great. And the mutation, actually, they point you to the Hamming distance. Actually, very interesting when I learned how to write APL and then I also learned other knowledge as well. So, yeah, just fun, very interesting. Yeah, I mean, this one seems trivially easy, right? Yeah. It's just. But I think that for me, it's very inspiring is the application. This one's just this, isn't it? It's over here. You're not supposed to do it. Well, I mean, presumably phase one is not. I think there is some prize money associated with phase one. Oh, you know what it is, though, it's plus slash applied to each side. So you've got to do equals on the two sides. It's interesting, actually, to think about how to do this really neatly, right, because you've got to have. I mean, you can obviously do it with a defun. But to do it directly. And I guess it's like, yeah, plus slash applied to that. That is what. So that would be. That would give you that. OK, so that would give you. It's a slightly different case to any of the. Finds I remember seeing you want the. This to be the dyadic one, and then you want to post process it with plus slash. Is there a way to do that? Yeah, so that's why you need to think about it. And yeah, they also in the example stage, they. They tell you that as different method in APL can do it and just see. How they actually quite expensive to operate actually really, really amazing. And I saw in the last year competition, they actually compare different solution and they actually can run the performance to compare different, not just the length of the solution, but also the processing time. At this one. You want X equals Y and then post process with plus equals. So you want. This is your post processing. And this is your dyadic pre processing. Is there a way to? Like run some examples and see what happens, or do you have? Yeah. Because your answer is not correct, that's right. Yeah, I was hoping to see what it does give. Actually, the example is all your test case. I see. Yeah. Let's try it. So you just need to do your function. OK, F equals plus slash. And. What's this button? J. Applied to equals. It's not that it's this. OK. That's interesting. It hasn't. It hasn't ended up. Are you are you trying to put F equals that should say F, sorry. Ten and is it saying that was wrong? Result should have been seven with that and that. Oh, wait, the number of differences. That's why. So it's. It's the. It's the opposite of that. And I believe not is Tilda. I think I saw that on. Yeah, it is. So. That's the post processing. Dega. And would you need the parentheses? I'm not sure without the parentheses. It still works. That's interesting. Now, why does it still work? So that's the operator. That's the right hand side. That's the oh, I see, that's the left hand side. And then that's what is applied to the whole thing. So I think that's correct. Test. Wow. Yeah, yeah. But my solution is only five. So one one that is more shorter than one, two, three, four, five. Mine's five. OK, yeah, yeah. And for the for them, they have the pass. They have a silver trophy for you or a gold trophy for you. Silver just passed part of the test case and the gold actually you pass all the case. And so this is gold. Yeah, I see. Thank you, said you have to log in for you to save your correct answer if you. Good point. All right. You can you can submit now and then you can put the trophy. All right. I just found very fun and busy and I can learn and practice. That's great. All right. So. So your list of things were the things that they were saying would be needed. OK, so we've done this one. So let's do these ones. And this competition's called. Twenty twenty two APL, OK. So let's create a. Section. OK, so should we just go in order? Oops. This is called key. I feel like I've heard people talk about key a few times. And. What is this left called? You can see it this one is an primitive operators. Yeah. Quad equal. OK. Quad equal. And it's spelt here. OK. Tim on a cooperator. I really wish this bookmark gave the whole hover over that the dialog editor gave you. But I will say what's that. So I really wish this bookmark that gave you the full hover over that hover effect that the editor gave with everything. But it'd be easy enough to fork it and add that, I guess. That's true. Yeah, maybe somebody can give that a go. That's a shame they're not using a nice font in here. Oh, we should add our. Boxing style equals Max. Boxing on style equals Max or dash style equals maps. OK. OK. Means key. It's OK, so the left hand side is optional, so we know to look out for that. And we're going to give it a dyadic function. Applies the function to each unique key in X. And the major cells, OK, well, maybe the best way to look at this is to look at that competition, because it had an example. I think it's OK if we look at how to do some of the phase one stuff together. That sounds reasonable. Yeah, I can say it's OK. We just want to. Oh, don't press that button. So write argument that's a character vector representing DNA string and we want to count each symbol. So. All right, so maybe we should start with like banana. And count each symbol banana. OK. Applies a function to each unique key in X and the major cells of Y having that key. I see. And here they've got a function which is just inserting a colon between things. Each unique key in the major cell of Y having that key. So if we did like. Let me know if anybody's got a thought about what we could try this for. This is shift K. I don't know if we just do like comma. Rank error. OK. Function. He's similar to group by. Maybe we should try their example. So this banana example might be an even simpler one that one potentially. Put it in the chat. I guess it's basically the same thing, but OK. Here to see what the mapping is doing. So what is it doing? So the B. Banana goes with the three. Why is the A appearing with one one nine? Oh, it's selecting from like where the A's are selecting these. Oh, and then where the ends are. It's selecting those. Wait, is that right? No, no, no. The. A. And. And. Oh, yeah. Oh, I see. These are the positions of it's kind of slightly backwards to what I expect. There's three A's. Oh, and they're in. Maybe it would be easier actually if we did. I six out of six. That's the positions of them. Which means can we just say comma? Yes. A comma. Two, four, six. Yeah, that just concatenates things. It's a bit like root by. Another example that shows actually applying a function other than kind of a custom function in there as well that I think is another functionality we might want to show. Okay. Though the I in mine is not an iota. So it should be. I see. Oh, I see. So we are saying like this is column one and this is column two and you find all the unique things that are in column one and then you find their corresponding things in column two and do something to them. And what if it's monadic? I think it will pass the iota six on both sides of it and treated as diet. I think the iota six will be alpha and omega. If it's monadic, it just does the results. Gotcha. I thought you meant only something on the right side of the quad equals like no a no left side. So like. I wonder how you can do this without the defunds. No. So in that cell 22 where you have the a with the plus thumb, I mean you can also remove the a from the left or not the alpha. You can move that and it'll pass that. That iota six is both alpha and omega to that function. Okay. That's going to be very interesting presumably. What's that doing? So that is I guess b is the first slot a is second and fourth but where is okay so I guess that just gave you the index locations for each character. The key operator applies the function to each unique key. Oh here we are. It's the same as this but we haven't done this yet have we? Maybe we should do that because it actually comes up quite a lot. So let's just step back for a moment and put it underneath this. Probably the dyadic form of this is not match. It is so that's easy. But we want the monadic version. So this is a double quote and I wouldn't have guessed that. Okay dyadic is not match so I can just move this. Copy that from match I guess. Oh we don't have anything for match. Oh we haven't done equal under bar yet either. All right. So okay. This one should be pretty easy. So this, that's interesting. Now why are these different? Oh I guess I'm confused. They look the same. And so not match. Oh because they do match. Yeah of course. Sorry. So yeah. So not match is false. I wish they had the simplest possible examples first. One doesn't match one is false. One doesn't match zero is true. Okay now the point though is that it doesn't kind of like normally equals or not equals is element wise. So this would broadcast over this and the answer would be zero zero because one it's not true that it doesn't match one. But this version with the extra line in it checks whether the ranks are the same. So it's operating on the whole thing. Which presumably there might be one somewhere to get that using the rank operator and not equals. I don't know if that's true or not. So not equals is eight. So yeah. So my point is that normally, well let's just use equals right. Just two examples. One is equal to one and one is equal to one. Or we could do it like this. And then I'm wondering is there some way rank operator was this one over rank? Okay. Shift J. Is there some way to say okay we want to take the left hand side as a scalar and the right hand side as a vector? Nope. Okay I guess I don't know how to do that then. Okay anyway so I guess I think this is clear enough. And so we could copy that up to match. Which is? It sounds like. Problem. Okay. Okay. Mana kilk. So interestingly, I think the rank operator you have to put in parentheses because otherwise it interprets that right scalar as part of the vector on the right. At least doing that at least gets it not to error. It didn't give me a useful answer but it got closer. Well, I didn't get an error. I got one one. Which is this? Yeah. Oh, gosh. Okay. Zero one. I was trying to get a single result to say this is not equal to this. This whole thing is not equal to this whole thing. Oh, using just the single equals. Okay. I misunderstood. Yeah, I was trying to get that to be the same as the match command. I wonder do they say whether it's some equivalent match. Doesn't mention it. All right. Okay. So, Tali, I think is how you get counts. I've come across this before. And the mnemonic I heard on ArrayCast, remembering this is how you get counts, is imagine rotating it by 90 degrees. It looks like tallying stuff on a whiteboard or a chalkboard or whatever. So, tally. That should be... That's three. Got three things, isn't it? What about tallying up a matrix? Okay. It's the number of major cells. There are two rows in a matrix. Yeah. So, imagine rotating that by 90 degrees. It looks like you're tallying something. There you go. Yeah, number of major cells. Great. That's interesting. It points out that row v is a y-line element vector, where else tally v is the same thing, but it's a scalar. Minor difference. Might be worth pointing that out. Like so. Okay. And then depth. Is the... How much nesting there is, I guess. So, this is a... Array of arrays. So, its depth is 2. This is an array. So, its depth is 1. This is a scalar. So, its depth is 0. And in the case where they are... Where it's not always 2, then it makes it negative. Okay. So, if all the items, the scalars, it's a simple array. It has a depth of 1, a scalar depth of 0. And if they're not all scalars, it's nested. Uniform depth, if all its items are the same depth. Okay. And it's not uniform depth, it's negative. Okay. I don't know what quadML is. Okay. So, I guess that hopefully gets us back to where we were, which I don't remember what that is. Oh, we were doing quad equal. And I guess that mentioned... Yeah. Okay. So, that is the number of elements in y. Okay. So iota of that. Yeah. Okay. That's exactly what we just saw. So, this is iota of the number of elements of a. Yes. iota6 is iota of the number of elements of a. So, that's the same as iota of tally of a. And that's why these two are the same. Cool. Did we want to have a go at trying to do this thing? Anybody have any ideas? So, to jump back, I just looked at what that quadML does. Okay. Kind of cool. Kind of don't think I'll ever use it. Okay. I guess different versions of APL define partitions differently, particularly when you're doing like partitioned enclosures and stuff like that. And apparently you can change which definition you're using. Sorry, what do you mean by partition? What does partition mean in this case? Like the back tick z or back to capital Z. It's the little c. I think it's the called... Oh, okay. We haven't learned that yet. Yeah. Left shoe under bar. So, it... All right. I guess we'll come back to that when we look at that. Okay. So, if we did this quaddy thingy, what's it called? Quad equal. She's a king. That tells us the locations of each of these things. And what did it ask us? Accounts. Oh. Okay. So, would that just be tally? No. Okay. Why didn't that work? So, do we need to have a function and apply tally only to the omega argument? Or... Yeah. Was it doing something? Was it like doing it dyadically or something like... So, key... Oh, it's a dyadic function. Right, right, right. It's a dyadic function. So, we want a way to say we want to use it monadically, which obviously we can do in a rather ugly way by doing it like this. We need the tally to apply to the omega, but not the alpha, right? That's still wrong. Are you trying to do tally? Isn't the tally the one with the... Oh, yeah. Yeah, yeah. Just the other way. Right. And then... Thank you, Tanishk. Okay. Is there a better way to say we want the monadic version? Did you come across a shorter answer to this, Serata, or did you have something like this? We can't hear you. You're muted. I think I have a longer version. Oh, okay. Let's see if it works. Well, this is an interesting thing, maybe, to see if anybody can figure out is how to do this without the defunds, because it seems like it should be unnecessary. Okay. This 2012, 17, 21. Oh, it's got to be in a particular order. Right, right, right. Which I think is easily fixed by telling it what order we want it in. Is that true? So we want it for A, G, C, T. A, C, G, T. A, C, G, T. Is that... That's not quite how it works, is it? It's going to go through each of the unique things on the left. The right-hand side is... Yeah, the problem has been entered in that order, right? That's why I actually quite long my answer. So actually, it really made you think about how to approach the problem. I think it achieved the purpose of how to use the patient as a tool for it. I've got a bad solution. If we do both arguments, we could use that rank up and rank down the, I don't know, the Christmas tree looking ones to sort it and then just select the last column of that. We haven't actually used this yet, but yeah. Okay. There should be an easier way, I would think. All right, well, we can get it in the wrong order. Fine. And so that particular order that's going to be in is going to be A, G, C, T. And the order we want is... Wait, is A, C, G, T? Oh, A, G, C, T. Slightly wrong. Yes, we could sort that list before we send it in. So if we did... Oh, because that's just sorted. Yeah. So we could just sort that. That's true. And the way we sort things, it's like a grade thing, right? Yeah, it's to the left of IOTA. It looks like a Christmas tree. Yeah, there. Oh, I see. This is how you sort things, is it? Yeah, now it returns the index locations that you have to index in. It doesn't actually sort the list. It returns the... And so then you need to use the squash quad to get back to the correct values. So it's not... Is there something like... Aha! This is... This only vaguely rings a bell. But when we did IOTA... Dyadic. Yeah, tells you index of... So this is the location of each of these things. I don't know if that helps. So I mean, I guess what we'd do with this, we could somehow get a sum by each unique number and then use the quad equals to pair that up with ACGT. Maybe. Kind of making stuff up. I don't know if that'll work, but... That's the order we want it. All right. Well, I might leave it for now. I think it's an interesting question again to think about. I mean, that's why we're trying to do all the glyphs is that until you know all the glyphs, we don't have the raw stuff we want. Why can't we just sort the... Yeah, go on. Sorry, Tanishk. Why can't we just sort the array and then do it on the sorted array? We can. We just haven't learnt the glyphs to sort with yet. They suggest using outer product. Well, maybe that's worth thinking about too. So outer product... So we would have AGCT down the left. And so if we did like outer product of... Oh, I can see how they're going to do that. So outer product is jot dot. So if I do... jot dot comma. Right? There's that. So if instead I use equals, there's that. Right? There's that. Awesome. Okay. Now, again, it'd be nice to do this tacitly, but I don't know how. So this is going to be ACGT. And then we're going to have the thing that they're passing in. Let me say it'd be nice to do it tacitly. Do you know of any reason why the tacit stuff is better? Okay. So that's the whole like... That's like asking is wildcard import in Python better? That's like a can of worms. Yeah, I asked that on the APL Discord. I realised that. Oh, there you go. Okay. Not a helpful question for me to ask. I was hoping I could get a better answer here. Hello, Americans. What do you guys think of gun control? That was about the reaction I got. Yeah. Okay. So there was an earlier raycast with Henry Rich, who's the guy who mainly implements or almost entirely implements J nowadays. And he said he basically never... not never, but he very rarely uses tacit programming. The tacit meaning without the curly braces and omegas and whatnot. So, you know, that's one point of view. Aaron Hsu, who is the creator of CodeDee funds, the GPL compiler written in slash for APL, uses a lot of tacit programming. So Henry Rich's view was like, oh, it's too hard and it gets just too complicated. And I said, I don't want to do that. Or else Aaron's view was like, well, you know, I want my APL to look like APL and I can kind of create nice small neat idioms and I can combine them together. The kind of overall sense I get from listening to a raycast is a lot of people tend to feel like stringing together four or five functions and operators is perfectly reasonable and normal. And if you go too much past that, it starts to get confusing. So I don't know. I mean, Aaron's like seems like a particularly smart guy who's particularly good at APL and writes a lot of it. And so it might be just one of these comfort things that at some point at which tacit functions are easy. One of the benefits of tacit functions is that they're invertible. So you can use the negative power operator to get the inverse. Roger Hui, who implemented a lot of dialogue, apparently he preferred defunds and a lot of the faster idiomatic versions in APL are only faster if you use defunds. For me, it's more like reference, I guess. Yeah. But the reason I wanted to do it was just to test my understanding of APL. You know, I think it's a useful exercise to try it like, particularly because I'm really bad at understanding how these things are kind of parsed and strung together. I'm just looking at this now where we're post-processing something and then this is applied diatically. Yeah, yeah, I don't know. Submit. Oh, consider cases like A as a right argument. Oh. Yeah. That's a problem. So if you think about the outer product, well, you can see it. Why didn't that work? Oh, that's a plus slash that, of course. You know, you don't have each of the rows represented there. So yeah, edge cases don't work. Anyway, I feel like we've had a good go at it. Interesting here, what do you folks find? It would also probably be an issue with the other approach of using the key, right? Like if we were to sort the array and then use key on it, it would probably have the same issue. Well, you kind of want the left-hand side to be, you know, ACGT or something and then... I guess you could look at ACGT, check if it's a member of your... in your string and if it is not, then it'll give... I guess, I don't know. Okay, so there's slash, right? Which is... what was it? Backslash something? Where was that thing that was like... or was it iota? Where? iota underbar is where? iota underbar. If you had... just a... yeah, no, it still doesn't work. So you want to go through each of ACGT. Is it possible to use it just with equals? So A equals... well C equals A and I want to do that... is this rank? Yeah, I want to do that for each thing... no, for the whole thing on the right left and for each thing on the right. Can you do something like that? Oh, that looks interesting, doesn't it? Can we use epsilon for membership? Kind of A epsilon C? I don't remember if we've covered epsilon or not. Well, I was just thinking, can we just sum this up now? Now, why did that not work? I thought it would. We've got to be a bit careful when we sum it up. But I think... Give us the wrong... It's very close to correct, right? But I think if we do this, it's correct. So I think what we need to make sure is just that the rank... okay, so consider these. Here's the problem. This is a vector. It's not a matrix with one row. So that's interesting. Oh, because that's not a list of characters, right? That's a character scalar. But that's okay because I would guess that they would actually make it a list containing the single letter A. I guess ideally we'd be able to use... I guess I don't think row works this way, but we would use row to reshape to four columns and in terms of rows, kind of do like the numpy negative one for a power of... I actually think we've already solved it. I actually think I need to write this to say a list containing the letter A. Oh, would that be the left shoe? The problem is that this is a scalar. So I think actually my test was wrong. So actually I think we've got the answer. So I think that... and then I think it should be a case of making that into a function. Okay. So we've actually ended up not using any of their suggestions, which makes me think that there's a better way to do this, but that's okay. Test. So it looks like the last example... I would say it is this. I think they are passing in a... That last example, we can see that. Can we do an enclosed left shoe? Is that how you do it? Can we just also just... You could just make it a list by... Could you just do comma and then again empty string? Oh, just direct comma before it. Look at you. All right. Nice. Yeah, yeah, yeah. Look at you. So, yeah, comma is in list, isn't it? Or ravel? Is that ravel? Ravel, I think, yeah. Nice one, Tanishk. I need a bit better at using comma. I think I end up using the enclosure too much and then having to do a bunch of reshapes and then... So that's good for me to keep in mind. All right. Perfect. That was fun. That was actually fun. The only other thing I'm thinking is like maybe we'll split this... I think this notebook is getting too long, particularly because the kernel is so slow for dialogue. So I might split it into three things, like operators, the first stuff and then operators, and then we'll do an APL competition one. So anyway, look out for that when I send it in. I won't necessarily do that in a hurry though because I have a course to release. All right. Thanks all. Bye. Have a good one. Bye.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 2.0, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50464], "temperature": 0.4, "avg_logprob": -0.7984464168548584, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9433740973472595}, {"id": 1, "seek": 3000, "start": 30.0, "end": 32.0, "text": " Hi.", "tokens": [2421, 13], "temperature": 0.0, "avg_logprob": -0.20329267747940555, "compression_ratio": 1.376068376068376, "no_speech_prob": 0.08643706887960434}, {"id": 2, "seek": 3000, "start": 32.0, "end": 34.0, "text": " Hello.", "tokens": [2425, 13], "temperature": 0.0, "avg_logprob": -0.20329267747940555, "compression_ratio": 1.376068376068376, "no_speech_prob": 0.08643706887960434}, {"id": 3, "seek": 3000, "start": 34.0, "end": 35.0, "text": " Hello.", "tokens": [2425, 13], "temperature": 0.0, "avg_logprob": -0.20329267747940555, "compression_ratio": 1.376068376068376, "no_speech_prob": 0.08643706887960434}, {"id": 4, "seek": 3000, "start": 35.0, "end": 37.0, "text": " How is everyone doing.", "tokens": [1012, 307, 1518, 884, 13], "temperature": 0.0, "avg_logprob": -0.20329267747940555, "compression_ratio": 1.376068376068376, "no_speech_prob": 0.08643706887960434}, {"id": 5, "seek": 3000, "start": 37.0, "end": 39.0, "text": " I'm good. How are you.", "tokens": [286, 478, 665, 13, 1012, 366, 291, 13], "temperature": 0.0, "avg_logprob": -0.20329267747940555, "compression_ratio": 1.376068376068376, "no_speech_prob": 0.08643706887960434}, {"id": 6, "seek": 3000, "start": 39.0, "end": 42.0, "text": " Doing good. Doing good.", "tokens": [18496, 665, 13, 18496, 665, 13], "temperature": 0.0, "avg_logprob": -0.20329267747940555, "compression_ratio": 1.376068376068376, "no_speech_prob": 0.08643706887960434}, {"id": 7, "seek": 3000, "start": 42.0, "end": 45.0, "text": " Got another blog post out so that always feels good.", "tokens": [5803, 1071, 6968, 2183, 484, 370, 300, 1009, 3417, 665, 13], "temperature": 0.0, "avg_logprob": -0.20329267747940555, "compression_ratio": 1.376068376068376, "no_speech_prob": 0.08643706887960434}, {"id": 8, "seek": 3000, "start": 45.0, "end": 46.0, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.20329267747940555, "compression_ratio": 1.376068376068376, "no_speech_prob": 0.08643706887960434}, {"id": 9, "seek": 3000, "start": 46.0, "end": 54.0, "text": " Nice job.", "tokens": [5490, 1691, 13], "temperature": 0.0, "avg_logprob": -0.20329267747940555, "compression_ratio": 1.376068376068376, "no_speech_prob": 0.08643706887960434}, {"id": 10, "seek": 5400, "start": 54.0, "end": 61.0, "text": " I'm going to go ahead and turn it over to you.", "tokens": [286, 478, 516, 281, 352, 2286, 293, 1261, 309, 670, 281, 291, 13], "temperature": 0.0, "avg_logprob": -0.42566636029411764, "compression_ratio": 1.5303867403314917, "no_speech_prob": 9.907854837365448e-05}, {"id": 11, "seek": 5400, "start": 61.0, "end": 66.0, "text": " I see the very warm here in Minnesota.", "tokens": [286, 536, 264, 588, 4561, 510, 294, 13996, 13], "temperature": 0.0, "avg_logprob": -0.42566636029411764, "compression_ratio": 1.5303867403314917, "no_speech_prob": 9.907854837365448e-05}, {"id": 12, "seek": 5400, "start": 66.0, "end": 68.0, "text": " Warm in Minnesota. I didn't know that happened.", "tokens": [40353, 294, 13996, 13, 286, 994, 380, 458, 300, 2011, 13], "temperature": 0.0, "avg_logprob": -0.42566636029411764, "compression_ratio": 1.5303867403314917, "no_speech_prob": 9.907854837365448e-05}, {"id": 13, "seek": 5400, "start": 68.0, "end": 70.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.42566636029411764, "compression_ratio": 1.5303867403314917, "no_speech_prob": 9.907854837365448e-05}, {"id": 14, "seek": 5400, "start": 70.0, "end": 74.0, "text": " Yeah. A little bit in the summer.", "tokens": [865, 13, 316, 707, 857, 294, 264, 4266, 13], "temperature": 0.0, "avg_logprob": -0.42566636029411764, "compression_ratio": 1.5303867403314917, "no_speech_prob": 9.907854837365448e-05}, {"id": 15, "seek": 5400, "start": 74.0, "end": 77.0, "text": " I just moved away from Minnesota about a year ago.", "tokens": [286, 445, 4259, 1314, 490, 13996, 466, 257, 1064, 2057, 13], "temperature": 0.0, "avg_logprob": -0.42566636029411764, "compression_ratio": 1.5303867403314917, "no_speech_prob": 9.907854837365448e-05}, {"id": 16, "seek": 5400, "start": 77.0, "end": 79.0, "text": " What part of Minnesota are you in?", "tokens": [708, 644, 295, 13996, 366, 291, 294, 30], "temperature": 0.0, "avg_logprob": -0.42566636029411764, "compression_ratio": 1.5303867403314917, "no_speech_prob": 9.907854837365448e-05}, {"id": 17, "seek": 5400, "start": 79.0, "end": 81.0, "text": " That twin cities.", "tokens": [663, 18397, 6486, 13], "temperature": 0.0, "avg_logprob": -0.42566636029411764, "compression_ratio": 1.5303867403314917, "no_speech_prob": 9.907854837365448e-05}, {"id": 18, "seek": 8100, "start": 81.0, "end": 85.0, "text": " I live in the south.", "tokens": [286, 1621, 294, 264, 7377, 13], "temperature": 0.0, "avg_logprob": -0.3331378165711748, "compression_ratio": 1.5568862275449102, "no_speech_prob": 4.1322138713439927e-05}, {"id": 19, "seek": 8100, "start": 85.0, "end": 86.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.3331378165711748, "compression_ratio": 1.5568862275449102, "no_speech_prob": 4.1322138713439927e-05}, {"id": 20, "seek": 8100, "start": 86.0, "end": 87.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.3331378165711748, "compression_ratio": 1.5568862275449102, "no_speech_prob": 4.1322138713439927e-05}, {"id": 21, "seek": 8100, "start": 87.0, "end": 89.0, "text": " I lived there for.", "tokens": [286, 5152, 456, 337, 13], "temperature": 0.0, "avg_logprob": -0.3331378165711748, "compression_ratio": 1.5568862275449102, "no_speech_prob": 4.1322138713439927e-05}, {"id": 22, "seek": 8100, "start": 89.0, "end": 91.0, "text": " I guess 15 years. I just moved.", "tokens": [286, 2041, 2119, 924, 13, 286, 445, 4259, 13], "temperature": 0.0, "avg_logprob": -0.3331378165711748, "compression_ratio": 1.5568862275449102, "no_speech_prob": 4.1322138713439927e-05}, {"id": 23, "seek": 8100, "start": 91.0, "end": 93.0, "text": " Moved to DC from there about a year ago.", "tokens": [3335, 937, 281, 9114, 490, 456, 466, 257, 1064, 2057, 13], "temperature": 0.0, "avg_logprob": -0.3331378165711748, "compression_ratio": 1.5568862275449102, "no_speech_prob": 4.1322138713439927e-05}, {"id": 24, "seek": 8100, "start": 93.0, "end": 96.0, "text": " Gotcha.", "tokens": [42109, 13], "temperature": 0.0, "avg_logprob": -0.3331378165711748, "compression_ratio": 1.5568862275449102, "no_speech_prob": 4.1322138713439927e-05}, {"id": 25, "seek": 8100, "start": 96.0, "end": 98.0, "text": " I was there for seven years and moved last year.", "tokens": [286, 390, 456, 337, 3407, 924, 293, 4259, 1036, 1064, 13], "temperature": 0.0, "avg_logprob": -0.3331378165711748, "compression_ratio": 1.5568862275449102, "no_speech_prob": 4.1322138713439927e-05}, {"id": 26, "seek": 8100, "start": 98.0, "end": 100.0, "text": " I went to college in Duluth actually.", "tokens": [286, 1437, 281, 3859, 294, 50115, 2910, 767, 13], "temperature": 0.0, "avg_logprob": -0.3331378165711748, "compression_ratio": 1.5568862275449102, "no_speech_prob": 4.1322138713439927e-05}, {"id": 27, "seek": 8100, "start": 100.0, "end": 101.0, "text": " Oh yeah.", "tokens": [876, 1338, 13], "temperature": 0.0, "avg_logprob": -0.3331378165711748, "compression_ratio": 1.5568862275449102, "no_speech_prob": 4.1322138713439927e-05}, {"id": 28, "seek": 8100, "start": 101.0, "end": 105.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.3331378165711748, "compression_ratio": 1.5568862275449102, "no_speech_prob": 4.1322138713439927e-05}, {"id": 29, "seek": 8100, "start": 105.0, "end": 110.0, "text": " A little colder up there.", "tokens": [316, 707, 31020, 493, 456, 13], "temperature": 0.0, "avg_logprob": -0.3331378165711748, "compression_ratio": 1.5568862275449102, "no_speech_prob": 4.1322138713439927e-05}, {"id": 30, "seek": 11000, "start": 110.0, "end": 111.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.34664708092099145, "compression_ratio": 1.4, "no_speech_prob": 7.410266789520392e-06}, {"id": 31, "seek": 11000, "start": 111.0, "end": 116.0, "text": " Not very good today.", "tokens": [1726, 588, 665, 965, 13], "temperature": 0.0, "avg_logprob": -0.34664708092099145, "compression_ratio": 1.4, "no_speech_prob": 7.410266789520392e-06}, {"id": 32, "seek": 11000, "start": 116.0, "end": 118.0, "text": " First time in a while. It's yeah.", "tokens": [2386, 565, 294, 257, 1339, 13, 467, 311, 1338, 13], "temperature": 0.0, "avg_logprob": -0.34664708092099145, "compression_ratio": 1.4, "no_speech_prob": 7.410266789520392e-06}, {"id": 33, "seek": 11000, "start": 118.0, "end": 120.0, "text": " Really not very good.", "tokens": [4083, 406, 588, 665, 13], "temperature": 0.0, "avg_logprob": -0.34664708092099145, "compression_ratio": 1.4, "no_speech_prob": 7.410266789520392e-06}, {"id": 34, "seek": 11000, "start": 120.0, "end": 122.0, "text": " Is it raining?", "tokens": [1119, 309, 18441, 30], "temperature": 0.0, "avg_logprob": -0.34664708092099145, "compression_ratio": 1.4, "no_speech_prob": 7.410266789520392e-06}, {"id": 35, "seek": 11000, "start": 122.0, "end": 126.0, "text": " It's raining.", "tokens": [467, 311, 18441, 13], "temperature": 0.0, "avg_logprob": -0.34664708092099145, "compression_ratio": 1.4, "no_speech_prob": 7.410266789520392e-06}, {"id": 36, "seek": 11000, "start": 126.0, "end": 134.0, "text": " It's raining. It's windy.", "tokens": [467, 311, 18441, 13, 467, 311, 30330, 13], "temperature": 0.0, "avg_logprob": -0.34664708092099145, "compression_ratio": 1.4, "no_speech_prob": 7.410266789520392e-06}, {"id": 37, "seek": 11000, "start": 134.0, "end": 138.0, "text": " So I guess that's fine.", "tokens": [407, 286, 2041, 300, 311, 2489, 13], "temperature": 0.0, "avg_logprob": -0.34664708092099145, "compression_ratio": 1.4, "no_speech_prob": 7.410266789520392e-06}, {"id": 38, "seek": 13800, "start": 138.0, "end": 140.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.4127937096815843, "compression_ratio": 1.5175879396984924, "no_speech_prob": 1.3844703062204644e-05}, {"id": 39, "seek": 13800, "start": 140.0, "end": 142.0, "text": " I think it's a little bit of a relief.", "tokens": [286, 519, 309, 311, 257, 707, 857, 295, 257, 10915, 13], "temperature": 0.0, "avg_logprob": -0.4127937096815843, "compression_ratio": 1.5175879396984924, "no_speech_prob": 1.3844703062204644e-05}, {"id": 40, "seek": 13800, "start": 142.0, "end": 143.0, "text": " In terms of getting it ready.", "tokens": [682, 2115, 295, 1242, 309, 1919, 13], "temperature": 0.0, "avg_logprob": -0.4127937096815843, "compression_ratio": 1.5175879396984924, "no_speech_prob": 1.3844703062204644e-05}, {"id": 41, "seek": 13800, "start": 143.0, "end": 145.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.4127937096815843, "compression_ratio": 1.5175879396984924, "no_speech_prob": 1.3844703062204644e-05}, {"id": 42, "seek": 13800, "start": 145.0, "end": 149.0, "text": " It's like.", "tokens": [467, 311, 411, 13], "temperature": 0.0, "avg_logprob": -0.4127937096815843, "compression_ratio": 1.5175879396984924, "no_speech_prob": 1.3844703062204644e-05}, {"id": 43, "seek": 13800, "start": 149.0, "end": 152.0, "text": " I'll do terrifying. You know, it's like.", "tokens": [286, 603, 360, 18106, 13, 509, 458, 11, 309, 311, 411, 13], "temperature": 0.0, "avg_logprob": -0.4127937096815843, "compression_ratio": 1.5175879396984924, "no_speech_prob": 1.3844703062204644e-05}, {"id": 44, "seek": 13800, "start": 152.0, "end": 155.0, "text": " Good to have things finished, but then.", "tokens": [2205, 281, 362, 721, 4335, 11, 457, 550, 13], "temperature": 0.0, "avg_logprob": -0.4127937096815843, "compression_ratio": 1.5175879396984924, "no_speech_prob": 1.3844703062204644e-05}, {"id": 45, "seek": 13800, "start": 155.0, "end": 158.0, "text": " It's like, oh, you know, what if people hate it?", "tokens": [467, 311, 411, 11, 1954, 11, 291, 458, 11, 437, 498, 561, 4700, 309, 30], "temperature": 0.0, "avg_logprob": -0.4127937096815843, "compression_ratio": 1.5175879396984924, "no_speech_prob": 1.3844703062204644e-05}, {"id": 46, "seek": 13800, "start": 158.0, "end": 161.0, "text": " So.", "tokens": [407, 13], "temperature": 0.0, "avg_logprob": -0.4127937096815843, "compression_ratio": 1.5175879396984924, "no_speech_prob": 1.3844703062204644e-05}, {"id": 47, "seek": 13800, "start": 161.0, "end": 164.0, "text": " Hopefully people don't hate it.", "tokens": [10429, 561, 500, 380, 4700, 309, 13], "temperature": 0.0, "avg_logprob": -0.4127937096815843, "compression_ratio": 1.5175879396984924, "no_speech_prob": 1.3844703062204644e-05}, {"id": 48, "seek": 13800, "start": 164.0, "end": 166.0, "text": " Where those pictures all Dolly to generated.", "tokens": [2305, 729, 5242, 439, 1144, 13020, 281, 10833, 13], "temperature": 0.0, "avg_logprob": -0.4127937096815843, "compression_ratio": 1.5175879396984924, "no_speech_prob": 1.3844703062204644e-05}, {"id": 49, "seek": 16600, "start": 166.0, "end": 168.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.30917870820458254, "compression_ratio": 1.6307053941908713, "no_speech_prob": 5.560672434512526e-05}, {"id": 50, "seek": 16600, "start": 168.0, "end": 169.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.30917870820458254, "compression_ratio": 1.6307053941908713, "no_speech_prob": 5.560672434512526e-05}, {"id": 51, "seek": 16600, "start": 169.0, "end": 170.0, "text": " You should try.", "tokens": [509, 820, 853, 13], "temperature": 0.0, "avg_logprob": -0.30917870820458254, "compression_ratio": 1.6307053941908713, "no_speech_prob": 5.560672434512526e-05}, {"id": 52, "seek": 16600, "start": 170.0, "end": 172.0, "text": " Did you try with Dolly mini instead?", "tokens": [2589, 291, 853, 365, 1144, 13020, 8382, 2602, 30], "temperature": 0.0, "avg_logprob": -0.30917870820458254, "compression_ratio": 1.6307053941908713, "no_speech_prob": 5.560672434512526e-05}, {"id": 53, "seek": 16600, "start": 172.0, "end": 175.0, "text": " No, because I thought it might be more interesting because a lot of,", "tokens": [883, 11, 570, 286, 1194, 309, 1062, 312, 544, 1880, 570, 257, 688, 295, 11], "temperature": 0.0, "avg_logprob": -0.30917870820458254, "compression_ratio": 1.6307053941908713, "no_speech_prob": 5.560672434512526e-05}, {"id": 54, "seek": 16600, "start": 175.0, "end": 179.0, "text": " you know, that was developed by a lot of fast AI people. Right. So.", "tokens": [291, 458, 11, 300, 390, 4743, 538, 257, 688, 295, 2370, 7318, 561, 13, 1779, 13, 407, 13], "temperature": 0.0, "avg_logprob": -0.30917870820458254, "compression_ratio": 1.6307053941908713, "no_speech_prob": 5.560672434512526e-05}, {"id": 55, "seek": 16600, "start": 179.0, "end": 180.0, "text": " It could be, could be interesting too.", "tokens": [467, 727, 312, 11, 727, 312, 1880, 886, 13], "temperature": 0.0, "avg_logprob": -0.30917870820458254, "compression_ratio": 1.6307053941908713, "no_speech_prob": 5.560672434512526e-05}, {"id": 56, "seek": 16600, "start": 180.0, "end": 182.0, "text": " Yeah, it was, but it's also like.", "tokens": [865, 11, 309, 390, 11, 457, 309, 311, 611, 411, 13], "temperature": 0.0, "avg_logprob": -0.30917870820458254, "compression_ratio": 1.6307053941908713, "no_speech_prob": 5.560672434512526e-05}, {"id": 57, "seek": 16600, "start": 182.0, "end": 183.0, "text": " Much less.", "tokens": [12313, 1570, 13], "temperature": 0.0, "avg_logprob": -0.30917870820458254, "compression_ratio": 1.6307053941908713, "no_speech_prob": 5.560672434512526e-05}, {"id": 58, "seek": 16600, "start": 183.0, "end": 185.0, "text": " Trams. So it's.", "tokens": [1765, 4070, 13, 407, 309, 311, 13], "temperature": 0.0, "avg_logprob": -0.30917870820458254, "compression_ratio": 1.6307053941908713, "no_speech_prob": 5.560672434512526e-05}, {"id": 59, "seek": 16600, "start": 185.0, "end": 190.0, "text": " Not normally.", "tokens": [1726, 5646, 13], "temperature": 0.0, "avg_logprob": -0.30917870820458254, "compression_ratio": 1.6307053941908713, "no_speech_prob": 5.560672434512526e-05}, {"id": 60, "seek": 16600, "start": 190.0, "end": 193.0, "text": " I mean, it's good for what it is, but.", "tokens": [286, 914, 11, 309, 311, 665, 337, 437, 309, 307, 11, 457, 13], "temperature": 0.0, "avg_logprob": -0.30917870820458254, "compression_ratio": 1.6307053941908713, "no_speech_prob": 5.560672434512526e-05}, {"id": 61, "seek": 16600, "start": 193.0, "end": 195.0, "text": " Yeah. Cause I think one of the things.", "tokens": [865, 13, 10865, 286, 519, 472, 295, 264, 721, 13], "temperature": 0.0, "avg_logprob": -0.30917870820458254, "compression_ratio": 1.6307053941908713, "no_speech_prob": 5.560672434512526e-05}, {"id": 62, "seek": 19500, "start": 195.0, "end": 197.0, "text": " I think is that in like the early days of the.", "tokens": [286, 519, 307, 300, 294, 411, 264, 2440, 1708, 295, 264, 13], "temperature": 0.6, "avg_logprob": -0.5548446146647136, "compression_ratio": 1.6654135338345866, "no_speech_prob": 1.4062043192097917e-05}, {"id": 63, "seek": 19500, "start": 197.0, "end": 199.0, "text": " I think the data,", "tokens": [286, 519, 264, 1412, 11], "temperature": 0.6, "avg_logprob": -0.5548446146647136, "compression_ratio": 1.6654135338345866, "no_speech_prob": 1.4062043192097917e-05}, {"id": 64, "seek": 19500, "start": 199.0, "end": 202.0, "text": " the data has to be pretty prompt and stuff because some people say,", "tokens": [264, 1412, 575, 281, 312, 1238, 12391, 293, 1507, 570, 512, 561, 584, 11], "temperature": 0.6, "avg_logprob": -0.5548446146647136, "compression_ratio": 1.6654135338345866, "no_speech_prob": 1.4062043192097917e-05}, {"id": 65, "seek": 19500, "start": 202.0, "end": 204.0, "text": " like it, you know, especially with like,", "tokens": [411, 309, 11, 291, 458, 11, 2318, 365, 411, 11], "temperature": 0.6, "avg_logprob": -0.5548446146647136, "compression_ratio": 1.6654135338345866, "no_speech_prob": 1.4062043192097917e-05}, {"id": 66, "seek": 19500, "start": 204.0, "end": 206.0, "text": " I guess more pop culture and stuff.", "tokens": [286, 2041, 544, 1665, 3713, 293, 1507, 13], "temperature": 0.6, "avg_logprob": -0.5548446146647136, "compression_ratio": 1.6654135338345866, "no_speech_prob": 1.4062043192097917e-05}, {"id": 67, "seek": 19500, "start": 206.0, "end": 209.0, "text": " Dolly mini is better because yeah, Dolly to the filter.", "tokens": [1144, 13020, 8382, 307, 1101, 570, 1338, 11, 1144, 13020, 281, 264, 6608, 13], "temperature": 0.6, "avg_logprob": -0.5548446146647136, "compression_ratio": 1.6654135338345866, "no_speech_prob": 1.4062043192097917e-05}, {"id": 68, "seek": 19500, "start": 209.0, "end": 210.0, "text": " All that stuff out. So.", "tokens": [1057, 300, 1507, 484, 13, 407, 13], "temperature": 0.6, "avg_logprob": -0.5548446146647136, "compression_ratio": 1.6654135338345866, "no_speech_prob": 1.4062043192097917e-05}, {"id": 69, "seek": 19500, "start": 210.0, "end": 211.0, "text": " Hmm.", "tokens": [8239, 13], "temperature": 0.6, "avg_logprob": -0.5548446146647136, "compression_ratio": 1.6654135338345866, "no_speech_prob": 1.4062043192097917e-05}, {"id": 70, "seek": 19500, "start": 211.0, "end": 212.0, "text": " That's interesting.", "tokens": [663, 311, 1880, 13], "temperature": 0.6, "avg_logprob": -0.5548446146647136, "compression_ratio": 1.6654135338345866, "no_speech_prob": 1.4062043192097917e-05}, {"id": 71, "seek": 19500, "start": 212.0, "end": 213.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.6, "avg_logprob": -0.5548446146647136, "compression_ratio": 1.6654135338345866, "no_speech_prob": 1.4062043192097917e-05}, {"id": 72, "seek": 19500, "start": 213.0, "end": 214.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.6, "avg_logprob": -0.5548446146647136, "compression_ratio": 1.6654135338345866, "no_speech_prob": 1.4062043192097917e-05}, {"id": 73, "seek": 19500, "start": 214.0, "end": 215.0, "text": " A lot of people.", "tokens": [316, 688, 295, 561, 13], "temperature": 0.6, "avg_logprob": -0.5548446146647136, "compression_ratio": 1.6654135338345866, "no_speech_prob": 1.4062043192097917e-05}, {"id": 74, "seek": 19500, "start": 215.0, "end": 216.0, "text": " I didn't spend time on it, honestly.", "tokens": [286, 994, 380, 3496, 565, 322, 309, 11, 6095, 13], "temperature": 0.6, "avg_logprob": -0.5548446146647136, "compression_ratio": 1.6654135338345866, "no_speech_prob": 1.4062043192097917e-05}, {"id": 75, "seek": 19500, "start": 216.0, "end": 218.0, "text": " It's just like, I'll be fun to.", "tokens": [467, 311, 445, 411, 11, 286, 603, 312, 1019, 281, 13], "temperature": 0.6, "avg_logprob": -0.5548446146647136, "compression_ratio": 1.6654135338345866, "no_speech_prob": 1.4062043192097917e-05}, {"id": 76, "seek": 19500, "start": 218.0, "end": 219.0, "text": " Throw in some.", "tokens": [22228, 294, 512, 13], "temperature": 0.6, "avg_logprob": -0.5548446146647136, "compression_ratio": 1.6654135338345866, "no_speech_prob": 1.4062043192097917e-05}, {"id": 77, "seek": 19500, "start": 219.0, "end": 220.0, "text": " Examples.", "tokens": [48591, 13], "temperature": 0.6, "avg_logprob": -0.5548446146647136, "compression_ratio": 1.6654135338345866, "no_speech_prob": 1.4062043192097917e-05}, {"id": 78, "seek": 19500, "start": 220.0, "end": 224.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.6, "avg_logprob": -0.5548446146647136, "compression_ratio": 1.6654135338345866, "no_speech_prob": 1.4062043192097917e-05}, {"id": 79, "seek": 22400, "start": 224.0, "end": 225.12, "text": " I've got a message.", "tokens": [286, 600, 658, 257, 3636, 13], "temperature": 0.0, "avg_logprob": -0.5259208679199219, "compression_ratio": 0.9882352941176471, "no_speech_prob": 0.04080444201827049}, {"id": 80, "seek": 22400, "start": 242.96, "end": 245.44, "text": " All right, my last picture is six.", "tokens": [1057, 558, 11, 452, 1036, 3036, 307, 2309, 13], "temperature": 0.0, "avg_logprob": -0.5259208679199219, "compression_ratio": 0.9882352941176471, "no_speech_prob": 0.04080444201827049}, {"id": 81, "seek": 22400, "start": 245.44, "end": 249.2, "text": " So hopefully, you will be OK.", "tokens": [407, 4696, 11, 291, 486, 312, 2264, 13], "temperature": 0.0, "avg_logprob": -0.5259208679199219, "compression_ratio": 0.9882352941176471, "no_speech_prob": 0.04080444201827049}, {"id": 82, "seek": 24920, "start": 249.2, "end": 251.2, "text": " Any APL news?", "tokens": [2639, 5372, 43, 2583, 30], "temperature": 0.0, "avg_logprob": -0.6396011069968894, "compression_ratio": 1.0375, "no_speech_prob": 0.00024758357903920114}, {"id": 83, "seek": 25120, "start": 251.2, "end": 268.48, "text": " I posted a kind of a statistics blog post and APL on the forum a little bit ago.", "tokens": [286, 9437, 257, 733, 295, 257, 12523, 6968, 2183, 293, 5372, 43, 322, 264, 17542, 257, 707, 857, 2057, 13], "temperature": 0.0, "avg_logprob": -0.4301835298538208, "compression_ratio": 1.0256410256410255, "no_speech_prob": 0.0002647772489581257}, {"id": 84, "seek": 26848, "start": 268.48, "end": 281.12, "text": " We were just talking about that a little bit.", "tokens": [492, 645, 445, 1417, 466, 300, 257, 707, 857, 13], "temperature": 0.0, "avg_logprob": -0.30154234170913696, "compression_ratio": 1.4027777777777777, "no_speech_prob": 0.0001762418687576428}, {"id": 85, "seek": 26848, "start": 282.08000000000004, "end": 284.64000000000004, "text": " Very interesting going through that.", "tokens": [4372, 1880, 516, 807, 300, 13], "temperature": 0.0, "avg_logprob": -0.30154234170913696, "compression_ratio": 1.4027777777777777, "no_speech_prob": 0.0001762418687576428}, {"id": 86, "seek": 26848, "start": 286.0, "end": 286.96000000000004, "text": " Tell us about it, Isaac.", "tokens": [5115, 505, 466, 309, 11, 22505, 13], "temperature": 0.0, "avg_logprob": -0.30154234170913696, "compression_ratio": 1.4027777777777777, "no_speech_prob": 0.0001762418687576428}, {"id": 87, "seek": 28696, "start": 286.96, "end": 296.4, "text": " Yeah, so this was calculating some simple statistics, confidence intervals, and p-values through", "tokens": [865, 11, 370, 341, 390, 28258, 512, 2199, 12523, 11, 6687, 26651, 11, 293, 280, 12, 46033, 807], "temperature": 0.0, "avg_logprob": -0.15775058327651606, "compression_ratio": 1.545, "no_speech_prob": 9.600997145753354e-05}, {"id": 88, "seek": 28696, "start": 299.12, "end": 299.84, "text": " bootstrapping.", "tokens": [11450, 19639, 3759, 13], "temperature": 0.0, "avg_logprob": -0.15775058327651606, "compression_ratio": 1.545, "no_speech_prob": 9.600997145753354e-05}, {"id": 89, "seek": 28696, "start": 300.88, "end": 302.47999999999996, "text": " I've got a little monologue on why.", "tokens": [286, 600, 658, 257, 707, 1108, 42298, 322, 983, 13], "temperature": 0.0, "avg_logprob": -0.15775058327651606, "compression_ratio": 1.545, "no_speech_prob": 9.600997145753354e-05}, {"id": 90, "seek": 28696, "start": 302.47999999999996, "end": 305.28, "text": " For those who don't know what bootstrapping is, do you want to mention what that is?", "tokens": [1171, 729, 567, 500, 380, 458, 437, 11450, 19639, 3759, 307, 11, 360, 291, 528, 281, 2152, 437, 300, 307, 30], "temperature": 0.0, "avg_logprob": -0.15775058327651606, "compression_ratio": 1.545, "no_speech_prob": 9.600997145753354e-05}, {"id": 91, "seek": 28696, "start": 306.56, "end": 310.47999999999996, "text": " Yeah, so there's kind of a couple of ways you can calculate most statistics.", "tokens": [865, 11, 370, 456, 311, 733, 295, 257, 1916, 295, 2098, 291, 393, 8873, 881, 12523, 13], "temperature": 0.0, "avg_logprob": -0.15775058327651606, "compression_ratio": 1.545, "no_speech_prob": 9.600997145753354e-05}, {"id": 92, "seek": 31048, "start": 310.48, "end": 318.56, "text": " Kind of the classical statistical formulas that I think most people are more familiar with.", "tokens": [9242, 295, 264, 13735, 22820, 30546, 300, 286, 519, 881, 561, 366, 544, 4963, 365, 13], "temperature": 0.0, "avg_logprob": -0.18697914380705757, "compression_ratio": 1.6576576576576576, "no_speech_prob": 5.472878910950385e-05}, {"id": 93, "seek": 31048, "start": 319.84000000000003, "end": 326.40000000000003, "text": " You know, you have a formula that can calculate a p-value, and you have kind of assumptions", "tokens": [509, 458, 11, 291, 362, 257, 8513, 300, 393, 8873, 257, 280, 12, 29155, 11, 293, 291, 362, 733, 295, 17695], "temperature": 0.0, "avg_logprob": -0.18697914380705757, "compression_ratio": 1.6576576576576576, "no_speech_prob": 5.472878910950385e-05}, {"id": 94, "seek": 31048, "start": 326.40000000000003, "end": 326.8, "text": " baked in.", "tokens": [19453, 294, 13], "temperature": 0.0, "avg_logprob": -0.18697914380705757, "compression_ratio": 1.6576576576576576, "no_speech_prob": 5.472878910950385e-05}, {"id": 95, "seek": 31048, "start": 326.8, "end": 330.40000000000003, "text": " Like you're going to assume the normal distribution, and if these assumptions are true,", "tokens": [1743, 291, 434, 516, 281, 6552, 264, 2710, 7316, 11, 293, 498, 613, 17695, 366, 2074, 11], "temperature": 0.0, "avg_logprob": -0.18697914380705757, "compression_ratio": 1.6576576576576576, "no_speech_prob": 5.472878910950385e-05}, {"id": 96, "seek": 31048, "start": 330.40000000000003, "end": 331.68, "text": " you can calculate your value.", "tokens": [291, 393, 8873, 428, 2158, 13], "temperature": 0.0, "avg_logprob": -0.18697914380705757, "compression_ratio": 1.6576576576576576, "no_speech_prob": 5.472878910950385e-05}, {"id": 97, "seek": 31048, "start": 333.68, "end": 337.44, "text": " Bootstrapping does a little bit of a different approach.", "tokens": [37263, 19639, 3759, 775, 257, 707, 857, 295, 257, 819, 3109, 13], "temperature": 0.0, "avg_logprob": -0.18697914380705757, "compression_ratio": 1.6576576576576576, "no_speech_prob": 5.472878910950385e-05}, {"id": 98, "seek": 33744, "start": 337.44, "end": 343.6, "text": " Instead of kind of approximating the statistic by kind of assuming normal distribution,", "tokens": [7156, 295, 733, 295, 8542, 990, 264, 29588, 538, 733, 295, 11926, 2710, 7316, 11], "temperature": 0.0, "avg_logprob": -0.09724969973509338, "compression_ratio": 1.8160377358490567, "no_speech_prob": 1.1189296174052288e-06}, {"id": 99, "seek": 33744, "start": 345.28, "end": 349.84, "text": " it says, well, we're just going to randomly sample over and over and over again.", "tokens": [309, 1619, 11, 731, 11, 321, 434, 445, 516, 281, 16979, 6889, 670, 293, 670, 293, 670, 797, 13], "temperature": 0.0, "avg_logprob": -0.09724969973509338, "compression_ratio": 1.8160377358490567, "no_speech_prob": 1.1189296174052288e-06}, {"id": 100, "seek": 33744, "start": 350.4, "end": 356.56, "text": " So rather than creating a kind of an artificial sampling distribution based on what we believe", "tokens": [407, 2831, 813, 4084, 257, 733, 295, 364, 11677, 21179, 7316, 2361, 322, 437, 321, 1697], "temperature": 0.0, "avg_logprob": -0.09724969973509338, "compression_ratio": 1.8160377358490567, "no_speech_prob": 1.1189296174052288e-06}, {"id": 101, "seek": 33744, "start": 356.56, "end": 362.0, "text": " the distribution to be, we'll just create it by randomly sampling a thousand times.", "tokens": [264, 7316, 281, 312, 11, 321, 603, 445, 1884, 309, 538, 16979, 21179, 257, 4714, 1413, 13], "temperature": 0.0, "avg_logprob": -0.09724969973509338, "compression_ratio": 1.8160377358490567, "no_speech_prob": 1.1189296174052288e-06}, {"id": 102, "seek": 33744, "start": 364.48, "end": 366.08, "text": " So there's less assumptions baked in.", "tokens": [407, 456, 311, 1570, 17695, 19453, 294, 13], "temperature": 0.0, "avg_logprob": -0.09724969973509338, "compression_ratio": 1.8160377358490567, "no_speech_prob": 1.1189296174052288e-06}, {"id": 103, "seek": 36608, "start": 366.08, "end": 372.88, "text": " And then if you calculate a confidence interval, you can say a confidence interval on the mean.", "tokens": [400, 550, 498, 291, 8873, 257, 6687, 15035, 11, 291, 393, 584, 257, 6687, 15035, 322, 264, 914, 13], "temperature": 0.0, "avg_logprob": -0.11047019081554194, "compression_ratio": 1.8186813186813187, "no_speech_prob": 6.962157840462169e-06}, {"id": 104, "seek": 36608, "start": 374.71999999999997, "end": 379.36, "text": " You can sample it a thousand times, get the mean of all these small samples.", "tokens": [509, 393, 6889, 309, 257, 4714, 1413, 11, 483, 264, 914, 295, 439, 613, 1359, 10938, 13], "temperature": 0.0, "avg_logprob": -0.11047019081554194, "compression_ratio": 1.8186813186813187, "no_speech_prob": 6.962157840462169e-06}, {"id": 105, "seek": 36608, "start": 380.8, "end": 387.59999999999997, "text": " And if you want a 90% confidence interval, you just chop the lowest 5% off, chop the highest 5% off,", "tokens": [400, 498, 291, 528, 257, 4289, 4, 6687, 15035, 11, 291, 445, 7931, 264, 12437, 1025, 4, 766, 11, 7931, 264, 6343, 1025, 4, 766, 11], "temperature": 0.0, "avg_logprob": -0.11047019081554194, "compression_ratio": 1.8186813186813187, "no_speech_prob": 6.962157840462169e-06}, {"id": 106, "seek": 36608, "start": 388.32, "end": 392.79999999999995, "text": " and 90% of the time, your data will fall in those bounds.", "tokens": [293, 4289, 4, 295, 264, 565, 11, 428, 1412, 486, 2100, 294, 729, 29905, 13], "temperature": 0.0, "avg_logprob": -0.11047019081554194, "compression_ratio": 1.8186813186813187, "no_speech_prob": 6.962157840462169e-06}, {"id": 107, "seek": 39280, "start": 392.8, "end": 397.6, "text": " And you know that's the case because you did it a thousand times, and you looked at where 90%", "tokens": [400, 291, 458, 300, 311, 264, 1389, 570, 291, 630, 309, 257, 4714, 1413, 11, 293, 291, 2956, 412, 689, 4289, 4], "temperature": 0.0, "avg_logprob": -0.17302426899949166, "compression_ratio": 1.427027027027027, "no_speech_prob": 9.663044693297707e-06}, {"id": 108, "seek": 39280, "start": 397.6, "end": 398.24, "text": " of them fell.", "tokens": [295, 552, 5696, 13], "temperature": 0.0, "avg_logprob": -0.17302426899949166, "compression_ratio": 1.427027027027027, "no_speech_prob": 9.663044693297707e-06}, {"id": 109, "seek": 39280, "start": 400.64, "end": 409.84000000000003, "text": " So it's kind of a more elementary, I think more flexible approach that kind of gets the same answer.", "tokens": [407, 309, 311, 733, 295, 257, 544, 16429, 11, 286, 519, 544, 11358, 3109, 300, 733, 295, 2170, 264, 912, 1867, 13], "temperature": 0.0, "avg_logprob": -0.17302426899949166, "compression_ratio": 1.427027027027027, "no_speech_prob": 9.663044693297707e-06}, {"id": 110, "seek": 39280, "start": 412.40000000000003, "end": 420.48, "text": " Yeah. So when I used to do consulting 25, 30 years ago,", "tokens": [865, 13, 407, 562, 286, 1143, 281, 360, 23682, 3552, 11, 2217, 924, 2057, 11], "temperature": 0.0, "avg_logprob": -0.17302426899949166, "compression_ratio": 1.427027027027027, "no_speech_prob": 9.663044693297707e-06}, {"id": 111, "seek": 42048, "start": 420.48, "end": 430.48, "text": " this was my one of my two big tricks was to use this kind of sampling all the time for creating", "tokens": [341, 390, 452, 472, 295, 452, 732, 955, 11733, 390, 281, 764, 341, 733, 295, 21179, 439, 264, 565, 337, 4084], "temperature": 0.0, "avg_logprob": -0.1841569788315717, "compression_ratio": 1.5736842105263158, "no_speech_prob": 4.7106850615818985e-06}, {"id": 112, "seek": 42048, "start": 430.48, "end": 438.64000000000004, "text": " simulations. I basically almost never used assumed distributions, but yeah, I would always basically", "tokens": [35138, 13, 286, 1936, 1920, 1128, 1143, 15895, 37870, 11, 457, 1338, 11, 286, 576, 1009, 1936], "temperature": 0.0, "avg_logprob": -0.1841569788315717, "compression_ratio": 1.5736842105263158, "no_speech_prob": 4.7106850615818985e-06}, {"id": 113, "seek": 42048, "start": 438.64000000000004, "end": 447.28000000000003, "text": " get some real data and then randomly pick from a column. Yeah, it made life a lot easier and generally", "tokens": [483, 512, 957, 1412, 293, 550, 16979, 1888, 490, 257, 7738, 13, 865, 11, 309, 1027, 993, 257, 688, 3571, 293, 5101], "temperature": 0.0, "avg_logprob": -0.1841569788315717, "compression_ratio": 1.5736842105263158, "no_speech_prob": 4.7106850615818985e-06}, {"id": 114, "seek": 44728, "start": 447.28, "end": 454.47999999999996, "text": " made things more accurate. Well, and I think it's the other trick. My other big trick was using pivot", "tokens": [1027, 721, 544, 8559, 13, 1042, 11, 293, 286, 519, 309, 311, 264, 661, 4282, 13, 1222, 661, 955, 4282, 390, 1228, 14538], "temperature": 0.0, "avg_logprob": -0.26290531158447267, "compression_ratio": 1.5057471264367817, "no_speech_prob": 6.401725840987638e-05}, {"id": 115, "seek": 44728, "start": 454.47999999999996, "end": 460.32, "text": " tables all the time. Back when pivot tables have just come out, it blew people's minds.", "tokens": [8020, 439, 264, 565, 13, 5833, 562, 14538, 8020, 362, 445, 808, 484, 11, 309, 19075, 561, 311, 9634, 13], "temperature": 0.0, "avg_logprob": -0.26290531158447267, "compression_ratio": 1.5057471264367817, "no_speech_prob": 6.401725840987638e-05}, {"id": 116, "seek": 44728, "start": 461.91999999999996, "end": 472.15999999999997, "text": " Nice. They still blow people's minds by the way, but it's a little less,", "tokens": [5490, 13, 814, 920, 6327, 561, 311, 9634, 538, 264, 636, 11, 457, 309, 311, 257, 707, 1570, 11], "temperature": 0.0, "avg_logprob": -0.26290531158447267, "compression_ratio": 1.5057471264367817, "no_speech_prob": 6.401725840987638e-05}, {"id": 117, "seek": 47216, "start": 472.16, "end": 479.76000000000005, "text": " a little more surprising. It blows people's minds today, I guess. But yeah, and so I think the biggest", "tokens": [257, 707, 544, 8830, 13, 467, 18458, 561, 311, 9634, 965, 11, 286, 2041, 13, 583, 1338, 11, 293, 370, 286, 519, 264, 3880], "temperature": 0.0, "avg_logprob": -0.12715191614060176, "compression_ratio": 1.570281124497992, "no_speech_prob": 5.507412879524054e-06}, {"id": 118, "seek": 47216, "start": 479.76000000000005, "end": 486.16, "text": " value for me in this bootstrapping is you can kind of think and reason and it's very intuitive,", "tokens": [2158, 337, 385, 294, 341, 11450, 19639, 3759, 307, 291, 393, 733, 295, 519, 293, 1778, 293, 309, 311, 588, 21769, 11], "temperature": 0.0, "avg_logprob": -0.12715191614060176, "compression_ratio": 1.570281124497992, "no_speech_prob": 5.507412879524054e-06}, {"id": 119, "seek": 47216, "start": 486.16, "end": 491.6, "text": " right? Like where will 90% of my data points fall? Well, I don't know. Let me try it a thousand", "tokens": [558, 30, 1743, 689, 486, 4289, 4, 295, 452, 1412, 2793, 2100, 30, 1042, 11, 286, 500, 380, 458, 13, 961, 385, 853, 309, 257, 4714], "temperature": 0.0, "avg_logprob": -0.12715191614060176, "compression_ratio": 1.570281124497992, "no_speech_prob": 5.507412879524054e-06}, {"id": 120, "seek": 49160, "start": 491.6, "end": 503.04, "text": " times and see where 90% of my data points did fall. If you want to do a hypothesis test, you can sample", "tokens": [1413, 293, 536, 689, 4289, 4, 295, 452, 1412, 2793, 630, 2100, 13, 759, 291, 528, 281, 360, 257, 17291, 1500, 11, 291, 393, 6889], "temperature": 0.0, "avg_logprob": -0.06343186060587565, "compression_ratio": 1.5473684210526315, "no_speech_prob": 4.425352926773485e-06}, {"id": 121, "seek": 49160, "start": 503.04, "end": 509.76000000000005, "text": " it a bunch of times and see how many values were more extreme than what you saw and you can", "tokens": [309, 257, 3840, 295, 1413, 293, 536, 577, 867, 4190, 645, 544, 8084, 813, 437, 291, 1866, 293, 291, 393], "temperature": 0.0, "avg_logprob": -0.06343186060587565, "compression_ratio": 1.5473684210526315, "no_speech_prob": 4.425352926773485e-06}, {"id": 122, "seek": 49160, "start": 509.76000000000005, "end": 515.2, "text": " actually sample it and look. And the nice thing about that is you can compare your means, but it's", "tokens": [767, 6889, 309, 293, 574, 13, 400, 264, 1481, 551, 466, 300, 307, 291, 393, 6794, 428, 1355, 11, 457, 309, 311], "temperature": 0.0, "avg_logprob": -0.06343186060587565, "compression_ratio": 1.5473684210526315, "no_speech_prob": 4.425352926773485e-06}, {"id": 123, "seek": 51520, "start": 515.2, "end": 523.44, "text": " very easy to say not just let me validate that the means are different, but eventually you want to", "tokens": [588, 1858, 281, 584, 406, 445, 718, 385, 29562, 300, 264, 1355, 366, 819, 11, 457, 4728, 291, 528, 281], "temperature": 0.0, "avg_logprob": -0.10238212888891046, "compression_ratio": 1.8186046511627907, "no_speech_prob": 2.4298684365930967e-05}, {"id": 124, "seek": 51520, "start": 523.44, "end": 530.24, "text": " actually say, let me validate. Can I validate to see if the means are different by a certain amount?", "tokens": [767, 584, 11, 718, 385, 29562, 13, 1664, 286, 29562, 281, 536, 498, 264, 1355, 366, 819, 538, 257, 1629, 2372, 30], "temperature": 0.0, "avg_logprob": -0.10238212888891046, "compression_ratio": 1.8186046511627907, "no_speech_prob": 2.4298684365930967e-05}, {"id": 125, "seek": 51520, "start": 530.24, "end": 535.84, "text": " So you can start to do statistical tests on magnitude because just because two things are", "tokens": [407, 291, 393, 722, 281, 360, 22820, 6921, 322, 15668, 570, 445, 570, 732, 721, 366], "temperature": 0.0, "avg_logprob": -0.10238212888891046, "compression_ratio": 1.8186046511627907, "no_speech_prob": 2.4298684365930967e-05}, {"id": 126, "seek": 51520, "start": 535.84, "end": 541.44, "text": " different doesn't mean it means anything. Normally there's an amount it has to be different before it", "tokens": [819, 1177, 380, 914, 309, 1355, 1340, 13, 17424, 456, 311, 364, 2372, 309, 575, 281, 312, 819, 949, 309], "temperature": 0.0, "avg_logprob": -0.10238212888891046, "compression_ratio": 1.8186046511627907, "no_speech_prob": 2.4298684365930967e-05}, {"id": 127, "seek": 54144, "start": 541.44, "end": 548.0, "text": " matters and you can kind of... My daughter wants me. You can keep talking. So these, when you sample", "tokens": [7001, 293, 291, 393, 733, 295, 485, 1222, 4653, 2738, 385, 13, 509, 393, 1066, 1417, 13, 407, 613, 11, 562, 291, 6889], "temperature": 0.0, "avg_logprob": -0.11046930948893229, "compression_ratio": 1.6403508771929824, "no_speech_prob": 4.131921014050022e-05}, {"id": 128, "seek": 54144, "start": 548.0, "end": 556.0, "text": " it, I feel it's just a way of doing it just based on kind of intuition and experimentation", "tokens": [309, 11, 286, 841, 309, 311, 445, 257, 636, 295, 884, 309, 445, 2361, 322, 733, 295, 24002, 293, 37142], "temperature": 0.0, "avg_logprob": -0.11046930948893229, "compression_ratio": 1.6403508771929824, "no_speech_prob": 4.131921014050022e-05}, {"id": 129, "seek": 54144, "start": 557.2, "end": 565.2, "text": " that I find is just a lot easier to work with and customize and understand what's going on", "tokens": [300, 286, 915, 307, 445, 257, 688, 3571, 281, 589, 365, 293, 19734, 293, 1223, 437, 311, 516, 322], "temperature": 0.0, "avg_logprob": -0.11046930948893229, "compression_ratio": 1.6403508771929824, "no_speech_prob": 4.131921014050022e-05}, {"id": 130, "seek": 56520, "start": 565.2, "end": 571.76, "text": " and you don't have to be as careful about what assumptions you're making versus not making.", "tokens": [293, 291, 500, 380, 362, 281, 312, 382, 5026, 466, 437, 17695, 291, 434, 1455, 5717, 406, 1455, 13], "temperature": 0.0, "avg_logprob": -0.15465608361649186, "compression_ratio": 1.511111111111111, "no_speech_prob": 8.397544661420397e-06}, {"id": 131, "seek": 56520, "start": 580.24, "end": 583.9200000000001, "text": " So Isaac, have you used that a lot? I'm sorry, you might have said that I was...", "tokens": [407, 22505, 11, 362, 291, 1143, 300, 257, 688, 30, 286, 478, 2597, 11, 291, 1062, 362, 848, 300, 286, 390, 485], "temperature": 0.0, "avg_logprob": -0.15465608361649186, "compression_ratio": 1.511111111111111, "no_speech_prob": 8.397544661420397e-06}, {"id": 132, "seek": 56520, "start": 584.88, "end": 592.32, "text": " I might not have heard it. Yeah, I pretty much exclusively use bootstrapping. I don't really see...", "tokens": [286, 1062, 406, 362, 2198, 309, 13, 865, 11, 286, 1238, 709, 20638, 764, 11450, 19639, 3759, 13, 286, 500, 380, 534, 536, 485], "temperature": 0.0, "avg_logprob": -0.15465608361649186, "compression_ratio": 1.511111111111111, "no_speech_prob": 8.397544661420397e-06}, {"id": 133, "seek": 59232, "start": 592.32, "end": 597.0400000000001, "text": " I mean, I think the situations where I wouldn't would be", "tokens": [286, 914, 11, 286, 519, 264, 6851, 689, 286, 2759, 380, 576, 312], "temperature": 0.0, "avg_logprob": -0.23687010926085633, "compression_ratio": 1.6318407960199004, "no_speech_prob": 1.0450040463183541e-05}, {"id": 134, "seek": 59232, "start": 600.1600000000001, "end": 605.0400000000001, "text": " if I'm completely certain of what the assumptions of a given formula are", "tokens": [498, 286, 478, 2584, 1629, 295, 437, 264, 17695, 295, 257, 2212, 8513, 366], "temperature": 0.0, "avg_logprob": -0.23687010926085633, "compression_ratio": 1.6318407960199004, "no_speech_prob": 1.0450040463183541e-05}, {"id": 135, "seek": 59232, "start": 605.5200000000001, "end": 614.48, "text": " and completely certain my data set fits those and bootstrapping for whatever reason is not feasible.", "tokens": [293, 2584, 1629, 452, 1412, 992, 9001, 729, 293, 11450, 19639, 3759, 337, 2035, 1778, 307, 406, 26648, 13], "temperature": 0.0, "avg_logprob": -0.23687010926085633, "compression_ratio": 1.6318407960199004, "no_speech_prob": 1.0450040463183541e-05}, {"id": 136, "seek": 59232, "start": 614.48, "end": 621.36, "text": " Like if I really needed to calculate a statistic on some enormous, ginormous data set, then maybe", "tokens": [1743, 498, 286, 534, 2978, 281, 8873, 257, 29588, 322, 512, 11322, 11, 36604, 687, 563, 1412, 992, 11, 550, 1310], "temperature": 0.0, "avg_logprob": -0.23687010926085633, "compression_ratio": 1.6318407960199004, "no_speech_prob": 1.0450040463183541e-05}, {"id": 137, "seek": 62136, "start": 621.36, "end": 627.36, "text": " but these formulas are really just kind of shortcuts. They're not different.", "tokens": [457, 613, 30546, 366, 534, 445, 733, 295, 34620, 13, 814, 434, 406, 819, 13], "temperature": 0.0, "avg_logprob": -0.12726295695585363, "compression_ratio": 1.6542056074766356, "no_speech_prob": 4.7845792323641945e-06}, {"id": 138, "seek": 62136, "start": 627.36, "end": 635.28, "text": " They're not giving different values. They're just a way to do it more computationally efficient and so", "tokens": [814, 434, 406, 2902, 819, 4190, 13, 814, 434, 445, 257, 636, 281, 360, 309, 544, 24903, 379, 7148, 293, 370], "temperature": 0.0, "avg_logprob": -0.12726295695585363, "compression_ratio": 1.6542056074766356, "no_speech_prob": 4.7845792323641945e-06}, {"id": 139, "seek": 62136, "start": 637.04, "end": 641.6, "text": " when I'm kind of just testing and developing things, I'd rather have something that I can", "tokens": [562, 286, 478, 733, 295, 445, 4997, 293, 6416, 721, 11, 286, 1116, 2831, 362, 746, 300, 286, 393], "temperature": 0.0, "avg_logprob": -0.12726295695585363, "compression_ratio": 1.6542056074766356, "no_speech_prob": 4.7845792323641945e-06}, {"id": 140, "seek": 62136, "start": 641.6, "end": 649.28, "text": " think about and is a little bit more intuitive but I mean, I don't really need to...", "tokens": [519, 466, 293, 307, 257, 707, 857, 544, 21769, 457, 286, 914, 11, 286, 500, 380, 534, 643, 281, 485], "temperature": 0.0, "avg_logprob": -0.12726295695585363, "compression_ratio": 1.6542056074766356, "no_speech_prob": 4.7845792323641945e-06}, {"id": 141, "seek": 64928, "start": 649.28, "end": 657.92, "text": " I mean, drawing a random sample is usually not computationally prohibitive so I can usually just", "tokens": [286, 914, 11, 6316, 257, 4974, 6889, 307, 2673, 406, 24903, 379, 16015, 2187, 370, 286, 393, 2673, 445], "temperature": 0.0, "avg_logprob": -0.36920203719028205, "compression_ratio": 1.6342592592592593, "no_speech_prob": 5.682221399183618e-06}, {"id": 142, "seek": 64928, "start": 658.88, "end": 665.28, "text": " just do it on my laptop and it's not a big deal so I almost never use the traditional formulas.", "tokens": [445, 360, 309, 322, 452, 10732, 293, 309, 311, 406, 257, 955, 2028, 370, 286, 1920, 1128, 764, 264, 5164, 30546, 13], "temperature": 0.0, "avg_logprob": -0.36920203719028205, "compression_ratio": 1.6342592592592593, "no_speech_prob": 5.682221399183618e-06}, {"id": 143, "seek": 64928, "start": 665.28, "end": 669.36, "text": " I wouldn't say never but bootstrapping is definitely my default.", "tokens": [286, 2759, 380, 584, 1128, 457, 11450, 19639, 3759, 307, 2138, 452, 7576, 13], "temperature": 0.0, "avg_logprob": -0.36920203719028205, "compression_ratio": 1.6342592592592593, "no_speech_prob": 5.682221399183618e-06}, {"id": 144, "seek": 64928, "start": 670.88, "end": 678.88, "text": " If you can say what are the applications that you would like just a handful or like one or two?", "tokens": [759, 291, 393, 584, 437, 366, 264, 5821, 300, 291, 576, 411, 445, 257, 16458, 420, 411, 472, 420, 732, 30], "temperature": 0.0, "avg_logprob": -0.36920203719028205, "compression_ratio": 1.6342592592592593, "no_speech_prob": 5.682221399183618e-06}, {"id": 145, "seek": 67888, "start": 678.88, "end": 680.64, "text": " Like one or two of what you've used it on?", "tokens": [1743, 472, 420, 732, 295, 437, 291, 600, 1143, 309, 322, 30], "temperature": 0.0, "avg_logprob": -0.2038211147342108, "compression_ratio": 1.6179775280898876, "no_speech_prob": 7.41092753742123e-06}, {"id": 146, "seek": 67888, "start": 681.76, "end": 683.2, "text": " Yeah, I mean, really...", "tokens": [865, 11, 286, 914, 11, 534, 485], "temperature": 0.0, "avg_logprob": -0.2038211147342108, "compression_ratio": 1.6179775280898876, "no_speech_prob": 7.41092753742123e-06}, {"id": 147, "seek": 67888, "start": 683.2, "end": 685.4399999999999, "text": " Tell me what's the data from?", "tokens": [5115, 385, 437, 311, 264, 1412, 490, 30], "temperature": 0.0, "avg_logprob": -0.2038211147342108, "compression_ratio": 1.6179775280898876, "no_speech_prob": 7.41092753742123e-06}, {"id": 148, "seek": 67888, "start": 686.8, "end": 691.4399999999999, "text": " Pretty much anything you would do any normal statistical test or confidence interval on so", "tokens": [10693, 709, 1340, 291, 576, 360, 604, 2710, 22820, 1500, 420, 6687, 15035, 322, 370], "temperature": 0.0, "avg_logprob": -0.2038211147342108, "compression_ratio": 1.6179775280898876, "no_speech_prob": 7.41092753742123e-06}, {"id": 149, "seek": 67888, "start": 692.72, "end": 698.56, "text": " you've got some data and you run, maybe you're doing an A-B test, you have a control group and", "tokens": [291, 600, 658, 512, 1412, 293, 291, 1190, 11, 1310, 291, 434, 884, 364, 316, 12, 33, 1500, 11, 291, 362, 257, 1969, 1594, 293], "temperature": 0.0, "avg_logprob": -0.2038211147342108, "compression_ratio": 1.6179775280898876, "no_speech_prob": 7.41092753742123e-06}, {"id": 150, "seek": 67888, "start": 698.56, "end": 702.0, "text": " you're testing, sending fewer emails to another group and you want to know", "tokens": [291, 434, 4997, 11, 7750, 13366, 12524, 281, 1071, 1594, 293, 291, 528, 281, 458], "temperature": 0.0, "avg_logprob": -0.2038211147342108, "compression_ratio": 1.6179775280898876, "no_speech_prob": 7.41092753742123e-06}, {"id": 151, "seek": 67888, "start": 703.84, "end": 708.08, "text": " did it have an impact on revenue or their level of engagement or whatever?", "tokens": [630, 309, 362, 364, 2712, 322, 9324, 420, 641, 1496, 295, 8742, 420, 2035, 30], "temperature": 0.0, "avg_logprob": -0.2038211147342108, "compression_ratio": 1.6179775280898876, "no_speech_prob": 7.41092753742123e-06}, {"id": 152, "seek": 70808, "start": 708.08, "end": 709.84, "text": " Let me do a hypothesis there.", "tokens": [961, 385, 360, 257, 17291, 456, 13], "temperature": 0.0, "avg_logprob": -0.1515470299066282, "compression_ratio": 1.6558704453441295, "no_speech_prob": 1.0782432582345791e-05}, {"id": 153, "seek": 70808, "start": 711.12, "end": 716.48, "text": " I used it a lot for simulations so it'd be like in consulting, it'd be like, okay, what's the", "tokens": [286, 1143, 309, 257, 688, 337, 35138, 370, 309, 1116, 312, 411, 294, 23682, 11, 309, 1116, 312, 411, 11, 1392, 11, 437, 311, 264], "temperature": 0.0, "avg_logprob": -0.1515470299066282, "compression_ratio": 1.6558704453441295, "no_speech_prob": 1.0782432582345791e-05}, {"id": 154, "seek": 70808, "start": 717.76, "end": 722.72, "text": " possible outcomes for this company under different scenarios and you would need to make a bunch of", "tokens": [1944, 10070, 337, 341, 2237, 833, 819, 15077, 293, 291, 576, 643, 281, 652, 257, 3840, 295], "temperature": 0.0, "avg_logprob": -0.1515470299066282, "compression_ratio": 1.6558704453441295, "no_speech_prob": 1.0782432582345791e-05}, {"id": 155, "seek": 70808, "start": 722.72, "end": 727.5200000000001, "text": " assumptions about what might happen and generally it's not the idea to do a point assumption because", "tokens": [17695, 466, 437, 1062, 1051, 293, 5101, 309, 311, 406, 264, 1558, 281, 360, 257, 935, 15302, 570], "temperature": 0.0, "avg_logprob": -0.1515470299066282, "compression_ratio": 1.6558704453441295, "no_speech_prob": 1.0782432582345791e-05}, {"id": 156, "seek": 70808, "start": 727.5200000000001, "end": 731.6, "text": " you don't know so then the normal thing might be to say, oh well, let's assume it's a", "tokens": [291, 500, 380, 458, 370, 550, 264, 2710, 551, 1062, 312, 281, 584, 11, 1954, 731, 11, 718, 311, 6552, 309, 311, 257], "temperature": 0.0, "avg_logprob": -0.1515470299066282, "compression_ratio": 1.6558704453441295, "no_speech_prob": 1.0782432582345791e-05}, {"id": 157, "seek": 73160, "start": 731.6, "end": 736.88, "text": " standard deviation around our assumption of whatever. But I'd kind of often like to", "tokens": [3832, 25163, 926, 527, 15302, 295, 2035, 13, 583, 286, 1116, 733, 295, 2049, 411, 281], "temperature": 0.0, "avg_logprob": -0.3189500570297241, "compression_ratio": 1.5212765957446808, "no_speech_prob": 1.5687897757743485e-05}, {"id": 158, "seek": 73160, "start": 737.76, "end": 744.64, "text": " find him some historical data of like past results or something like that and then basically just", "tokens": [915, 796, 512, 8584, 1412, 295, 411, 1791, 3542, 420, 746, 411, 300, 293, 550, 1936, 445], "temperature": 0.0, "avg_logprob": -0.3189500570297241, "compression_ratio": 1.5212765957446808, "no_speech_prob": 1.5687897757743485e-05}, {"id": 159, "seek": 73160, "start": 745.44, "end": 748.32, "text": " do a random lookup into that list of values.", "tokens": [360, 257, 4974, 574, 1010, 666, 300, 1329, 295, 4190, 13], "temperature": 0.0, "avg_logprob": -0.3189500570297241, "compression_ratio": 1.5212765957446808, "no_speech_prob": 1.5687897757743485e-05}, {"id": 160, "seek": 73160, "start": 751.12, "end": 758.1600000000001, "text": " There's a really great introductory statistics book that is", "tokens": [821, 311, 257, 534, 869, 39048, 12523, 1446, 300, 307], "temperature": 0.0, "avg_logprob": -0.3189500570297241, "compression_ratio": 1.5212765957446808, "no_speech_prob": 1.5687897757743485e-05}, {"id": 161, "seek": 75816, "start": 758.16, "end": 764.16, "text": " a bootstrap first approach. I'll put that in the chat if anyone is interested.", "tokens": [257, 11450, 372, 4007, 700, 3109, 13, 286, 603, 829, 300, 294, 264, 5081, 498, 2878, 307, 3102, 13], "temperature": 0.0, "avg_logprob": -0.26059362861547575, "compression_ratio": 1.6651982378854626, "no_speech_prob": 1.1124732736789156e-05}, {"id": 162, "seek": 75816, "start": 764.9599999999999, "end": 766.16, "text": " Yeah, that'd be great. Thank you.", "tokens": [865, 11, 300, 1116, 312, 869, 13, 1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.26059362861547575, "compression_ratio": 1.6651982378854626, "no_speech_prob": 1.1124732736789156e-05}, {"id": 163, "seek": 75816, "start": 766.9599999999999, "end": 774.3199999999999, "text": " It's not APL but I think it teaches things in a really intuitive and useful way and", "tokens": [467, 311, 406, 5372, 43, 457, 286, 519, 309, 16876, 721, 294, 257, 534, 21769, 293, 4420, 636, 293], "temperature": 0.0, "avg_logprob": -0.26059362861547575, "compression_ratio": 1.6651982378854626, "no_speech_prob": 1.1124732736789156e-05}, {"id": 164, "seek": 75816, "start": 775.12, "end": 781.28, "text": " it covers things like just because something is statistically significant doesn't mean it's", "tokens": [309, 10538, 721, 411, 445, 570, 746, 307, 36478, 4776, 1177, 380, 914, 309, 311], "temperature": 0.0, "avg_logprob": -0.26059362861547575, "compression_ratio": 1.6651982378854626, "no_speech_prob": 1.1124732736789156e-05}, {"id": 165, "seek": 75816, "start": 781.28, "end": 786.16, "text": " practically significant which I think is something that's sometimes missed in statistics.", "tokens": [15667, 4776, 597, 286, 519, 307, 746, 300, 311, 2171, 6721, 294, 12523, 13], "temperature": 0.0, "avg_logprob": -0.26059362861547575, "compression_ratio": 1.6651982378854626, "no_speech_prob": 1.1124732736789156e-05}, {"id": 166, "seek": 78616, "start": 786.16, "end": 791.68, "text": " It feels like remembering the author names might be too hard.", "tokens": [467, 3417, 411, 20719, 264, 3793, 5288, 1062, 312, 886, 1152, 13], "temperature": 0.0, "avg_logprob": -0.28385076522827146, "compression_ratio": 1.375, "no_speech_prob": 3.704592018038966e-05}, {"id": 167, "seek": 78616, "start": 793.28, "end": 801.52, "text": " Yeah, it's a frank family of I think like four of them have PhDs in statistics but it's", "tokens": [865, 11, 309, 311, 257, 10455, 1605, 295, 286, 519, 411, 1451, 295, 552, 362, 14476, 82, 294, 12523, 457, 309, 311], "temperature": 0.0, "avg_logprob": -0.28385076522827146, "compression_ratio": 1.375, "no_speech_prob": 3.704592018038966e-05}, {"id": 168, "seek": 78616, "start": 804.3199999999999, "end": 805.76, "text": " interesting.", "tokens": [1880, 13], "temperature": 0.0, "avg_logprob": -0.28385076522827146, "compression_ratio": 1.375, "no_speech_prob": 3.704592018038966e-05}, {"id": 169, "seek": 78616, "start": 806.48, "end": 807.6, "text": " Gotcha, thank you.", "tokens": [42109, 11, 1309, 291, 13], "temperature": 0.0, "avg_logprob": -0.28385076522827146, "compression_ratio": 1.375, "no_speech_prob": 3.704592018038966e-05}, {"id": 170, "seek": 78616, "start": 812.64, "end": 813.76, "text": " I haven't seen this before.", "tokens": [286, 2378, 380, 1612, 341, 949, 13], "temperature": 0.0, "avg_logprob": -0.28385076522827146, "compression_ratio": 1.375, "no_speech_prob": 3.704592018038966e-05}, {"id": 171, "seek": 81376, "start": 813.76, "end": 815.84, "text": " At Cart.", "tokens": [1711, 22478, 13], "temperature": 0.0, "avg_logprob": -0.23871935497630725, "compression_ratio": 1.4, "no_speech_prob": 2.668587512744125e-05}, {"id": 172, "seek": 81376, "start": 818.48, "end": 826.08, "text": " Oh my god, $112. What is it about books? Wait, the e-book's $112 or the print book's $48.", "tokens": [876, 452, 3044, 11, 1848, 16, 4762, 13, 708, 307, 309, 466, 3642, 30, 3802, 11, 264, 308, 12, 2939, 311, 1848, 16, 4762, 420, 264, 4482, 1446, 311, 1848, 13318, 13], "temperature": 0.0, "avg_logprob": -0.23871935497630725, "compression_ratio": 1.4, "no_speech_prob": 2.668587512744125e-05}, {"id": 173, "seek": 81376, "start": 827.28, "end": 828.56, "text": " That's interesting.", "tokens": [663, 311, 1880, 13], "temperature": 0.0, "avg_logprob": -0.23871935497630725, "compression_ratio": 1.4, "no_speech_prob": 2.668587512744125e-05}, {"id": 174, "seek": 81376, "start": 828.56, "end": 830.0, "text": " Oh, that's a rent for the book.", "tokens": [876, 11, 300, 311, 257, 6214, 337, 264, 1446, 13], "temperature": 0.0, "avg_logprob": -0.23871935497630725, "compression_ratio": 1.4, "no_speech_prob": 2.668587512744125e-05}, {"id": 175, "seek": 81376, "start": 830.0, "end": 830.88, "text": " Well, the rental.", "tokens": [1042, 11, 264, 21468, 13], "temperature": 0.0, "avg_logprob": -0.23871935497630725, "compression_ratio": 1.4, "no_speech_prob": 2.668587512744125e-05}, {"id": 176, "seek": 81376, "start": 834.4, "end": 835.52, "text": " God, I hate textbooks.", "tokens": [1265, 11, 286, 4700, 33587, 13], "temperature": 0.0, "avg_logprob": -0.23871935497630725, "compression_ratio": 1.4, "no_speech_prob": 2.668587512744125e-05}, {"id": 177, "seek": 81376, "start": 837.6, "end": 838.24, "text": " And what's this?", "tokens": [400, 437, 311, 341, 30], "temperature": 0.0, "avg_logprob": -0.23871935497630725, "compression_ratio": 1.4, "no_speech_prob": 2.668587512744125e-05}, {"id": 178, "seek": 83824, "start": 838.24, "end": 842.8, "text": " Online access for $10.", "tokens": [16930, 2105, 337, 1848, 3279, 13], "temperature": 0.0, "avg_logprob": -0.23777813381618923, "compression_ratio": 1.2222222222222223, "no_speech_prob": 8.66434675117489e-06}, {"id": 179, "seek": 83824, "start": 844.0, "end": 846.08, "text": " You need the $30 Dover edition.", "tokens": [509, 643, 264, 1848, 3446, 1144, 331, 11377, 13], "temperature": 0.0, "avg_logprob": -0.23777813381618923, "compression_ratio": 1.2222222222222223, "no_speech_prob": 8.66434675117489e-06}, {"id": 180, "seek": 83824, "start": 849.44, "end": 850.0, "text": " The what?", "tokens": [440, 437, 30], "temperature": 0.0, "avg_logprob": -0.23777813381618923, "compression_ratio": 1.2222222222222223, "no_speech_prob": 8.66434675117489e-06}, {"id": 181, "seek": 83824, "start": 852.5600000000001, "end": 853.2, "text": " $30?", "tokens": [1848, 3446, 30], "temperature": 0.0, "avg_logprob": -0.23777813381618923, "compression_ratio": 1.2222222222222223, "no_speech_prob": 8.66434675117489e-06}, {"id": 182, "seek": 83824, "start": 854.64, "end": 855.52, "text": " I'm sorry?", "tokens": [286, 478, 2597, 30], "temperature": 0.0, "avg_logprob": -0.23777813381618923, "compression_ratio": 1.2222222222222223, "no_speech_prob": 8.66434675117489e-06}, {"id": 183, "seek": 83824, "start": 855.52, "end": 856.08, "text": " What did you say?", "tokens": [708, 630, 291, 584, 30], "temperature": 0.0, "avg_logprob": -0.23777813381618923, "compression_ratio": 1.2222222222222223, "no_speech_prob": 8.66434675117489e-06}, {"id": 184, "seek": 83824, "start": 856.8, "end": 864.16, "text": " You know, Dover publications, they don't have these kind of pseudo textbooks.", "tokens": [509, 458, 11, 1144, 331, 25618, 11, 436, 500, 380, 362, 613, 733, 295, 35899, 33587, 13], "temperature": 0.0, "avg_logprob": -0.23777813381618923, "compression_ratio": 1.2222222222222223, "no_speech_prob": 8.66434675117489e-06}, {"id": 185, "seek": 86416, "start": 864.16, "end": 870.48, "text": " So I have a buddy that I went to college with, he's a physics professor over here in the States and", "tokens": [407, 286, 362, 257, 10340, 300, 286, 1437, 281, 3859, 365, 11, 415, 311, 257, 10649, 8304, 670, 510, 294, 264, 3040, 293], "temperature": 0.0, "avg_logprob": -0.1875960359868315, "compression_ratio": 1.5901639344262295, "no_speech_prob": 7.766539056319743e-06}, {"id": 186, "seek": 86416, "start": 870.48, "end": 877.68, "text": " he was trying to find a Dover publication on physics that he could use for one of his classes", "tokens": [415, 390, 1382, 281, 915, 257, 1144, 331, 19953, 322, 10649, 300, 415, 727, 764, 337, 472, 295, 702, 5359], "temperature": 0.0, "avg_logprob": -0.1875960359868315, "compression_ratio": 1.5901639344262295, "no_speech_prob": 7.766539056319743e-06}, {"id": 187, "seek": 86416, "start": 877.68, "end": 886.7199999999999, "text": " because the books only cost like $30. It's not hard bound but it's an actual physical text or", "tokens": [570, 264, 3642, 787, 2063, 411, 1848, 3446, 13, 467, 311, 406, 1152, 5472, 457, 309, 311, 364, 3539, 4001, 2487, 420], "temperature": 0.0, "avg_logprob": -0.1875960359868315, "compression_ratio": 1.5901639344262295, "no_speech_prob": 7.766539056319743e-06}, {"id": 188, "seek": 86416, "start": 886.7199999999999, "end": 892.48, "text": " physical book but unfortunately a lot of them, you know, for at least he was saying for the stuff he", "tokens": [4001, 1446, 457, 7015, 257, 688, 295, 552, 11, 291, 458, 11, 337, 412, 1935, 415, 390, 1566, 337, 264, 1507, 415], "temperature": 0.0, "avg_logprob": -0.1875960359868315, "compression_ratio": 1.5901639344262295, "no_speech_prob": 7.766539056319743e-06}, {"id": 189, "seek": 89248, "start": 892.48, "end": 899.44, "text": " was looking at, they left out too much detail because, you know, they're usually, at least the", "tokens": [390, 1237, 412, 11, 436, 1411, 484, 886, 709, 2607, 570, 11, 291, 458, 11, 436, 434, 2673, 11, 412, 1935, 264], "temperature": 0.0, "avg_logprob": -0.26402026728579875, "compression_ratio": 1.454054054054054, "no_speech_prob": 1.3211463738116436e-05}, {"id": 190, "seek": 89248, "start": 899.44, "end": 907.28, "text": " ones I've seen are, you know, in that kind of standard 200 to 220 page realm but so that's what", "tokens": [2306, 286, 600, 1612, 366, 11, 291, 458, 11, 294, 300, 733, 295, 3832, 2331, 281, 29387, 3028, 15355, 457, 370, 300, 311, 437], "temperature": 0.0, "avg_logprob": -0.26402026728579875, "compression_ratio": 1.454054054054054, "no_speech_prob": 1.3211463738116436e-05}, {"id": 191, "seek": 89248, "start": 907.28, "end": 908.4, "text": " I was referencing.", "tokens": [286, 390, 40582, 13], "temperature": 0.0, "avg_logprob": -0.26402026728579875, "compression_ratio": 1.454054054054054, "no_speech_prob": 1.3211463738116436e-05}, {"id": 192, "seek": 89248, "start": 908.4, "end": 908.9, "text": " I see.", "tokens": [286, 536, 13], "temperature": 0.0, "avg_logprob": -0.26402026728579875, "compression_ratio": 1.454054054054054, "no_speech_prob": 1.3211463738116436e-05}, {"id": 193, "seek": 89248, "start": 910.8000000000001, "end": 915.44, "text": " But Dover publications has a lot of technical books.", "tokens": [583, 1144, 331, 25618, 575, 257, 688, 295, 6191, 3642, 13], "temperature": 0.0, "avg_logprob": -0.26402026728579875, "compression_ratio": 1.454054054054054, "no_speech_prob": 1.3211463738116436e-05}, {"id": 194, "seek": 91544, "start": 915.44, "end": 920.8800000000001, "text": " Maybe I'll find their, you know, their website and put it on the thing.", "tokens": [2704, 286, 603, 915, 641, 11, 291, 458, 11, 641, 3144, 293, 829, 309, 322, 264, 551, 13], "temperature": 0.0, "avg_logprob": -0.362963184557463, "compression_ratio": 1.4413145539906103, "no_speech_prob": 1.1658984476525802e-05}, {"id": 195, "seek": 91544, "start": 922.8800000000001, "end": 927.0400000000001, "text": " And some of the books are really good. It's just that some of the detail isn't in there.", "tokens": [400, 512, 295, 264, 3642, 366, 534, 665, 13, 467, 311, 445, 300, 512, 295, 264, 2607, 1943, 380, 294, 456, 13], "temperature": 0.0, "avg_logprob": -0.362963184557463, "compression_ratio": 1.4413145539906103, "no_speech_prob": 1.1658984476525802e-05}, {"id": 196, "seek": 91544, "start": 928.24, "end": 930.96, "text": " The Kindle version is $47. That's weird.", "tokens": [440, 9242, 306, 3037, 307, 1848, 14060, 13, 663, 311, 3657, 13], "temperature": 0.0, "avg_logprob": -0.362963184557463, "compression_ratio": 1.4413145539906103, "no_speech_prob": 1.1658984476525802e-05}, {"id": 197, "seek": 91544, "start": 930.96, "end": 934.4000000000001, "text": " Is that just student solutions or?", "tokens": [1119, 300, 445, 3107, 6547, 420, 30], "temperature": 0.0, "avg_logprob": -0.362963184557463, "compression_ratio": 1.4413145539906103, "no_speech_prob": 1.1658984476525802e-05}, {"id": 198, "seek": 91544, "start": 934.4000000000001, "end": 934.9000000000001, "text": " Oh, was it?", "tokens": [876, 11, 390, 309, 30], "temperature": 0.0, "avg_logprob": -0.362963184557463, "compression_ratio": 1.4413145539906103, "no_speech_prob": 1.1658984476525802e-05}, {"id": 199, "seek": 91544, "start": 936.48, "end": 941.2800000000001, "text": " Solutions manual. Oh my gosh. Okay. Right. Hardcover $362.", "tokens": [36295, 9688, 13, 876, 452, 6502, 13, 1033, 13, 1779, 13, 11817, 12516, 1848, 11309, 17, 13], "temperature": 0.0, "avg_logprob": -0.362963184557463, "compression_ratio": 1.4413145539906103, "no_speech_prob": 1.1658984476525802e-05}, {"id": 200, "seek": 94128, "start": 941.28, "end": 950.16, "text": " I don't know.", "tokens": [286, 500, 380, 458, 13], "temperature": 0.0, "avg_logprob": -0.20319620768229166, "compression_ratio": 1.356164383561644, "no_speech_prob": 5.593941295956029e-06}, {"id": 201, "seek": 94128, "start": 950.16, "end": 956.3199999999999, "text": " Yeah, it was more than I wanted but my work paid for it so I didn't feel bad for it.", "tokens": [865, 11, 309, 390, 544, 813, 286, 1415, 457, 452, 589, 4835, 337, 309, 370, 286, 994, 380, 841, 1578, 337, 309, 13], "temperature": 0.0, "avg_logprob": -0.20319620768229166, "compression_ratio": 1.356164383561644, "no_speech_prob": 5.593941295956029e-06}, {"id": 202, "seek": 94128, "start": 957.4399999999999, "end": 960.0, "text": " It's not just wasting somebody else's money. I'm more okay with it.", "tokens": [467, 311, 406, 445, 20457, 2618, 1646, 311, 1460, 13, 286, 478, 544, 1392, 365, 309, 13], "temperature": 0.0, "avg_logprob": -0.20319620768229166, "compression_ratio": 1.356164383561644, "no_speech_prob": 5.593941295956029e-06}, {"id": 203, "seek": 94128, "start": 967.1999999999999, "end": 968.64, "text": " Maybe you can find a used copy.", "tokens": [2704, 291, 393, 915, 257, 1143, 5055, 13], "temperature": 0.0, "avg_logprob": -0.20319620768229166, "compression_ratio": 1.356164383561644, "no_speech_prob": 5.593941295956029e-06}, {"id": 204, "seek": 96864, "start": 968.64, "end": 972.64, "text": " Yeah, it's going to be on Amazon.", "tokens": [865, 11, 309, 311, 516, 281, 312, 322, 6795, 13], "temperature": 0.0, "avg_logprob": -0.2302298034940447, "compression_ratio": 1.3591549295774648, "no_speech_prob": 3.647015546448529e-05}, {"id": 205, "seek": 96864, "start": 982.64, "end": 986.16, "text": " I hope Molly is able to join because it sounded like she was going to try and actually do some", "tokens": [286, 1454, 26665, 307, 1075, 281, 3917, 570, 309, 17714, 411, 750, 390, 516, 281, 853, 293, 767, 360, 512], "temperature": 0.0, "avg_logprob": -0.2302298034940447, "compression_ratio": 1.3591549295774648, "no_speech_prob": 3.647015546448529e-05}, {"id": 206, "seek": 96864, "start": 986.16, "end": 988.8, "text": " prep for today's chat.", "tokens": [2666, 337, 965, 311, 5081, 13], "temperature": 0.0, "avg_logprob": -0.2302298034940447, "compression_ratio": 1.3591549295774648, "no_speech_prob": 3.647015546448529e-05}, {"id": 207, "seek": 96864, "start": 990.3199999999999, "end": 991.92, "text": " She was asking what we're going to cover.", "tokens": [1240, 390, 3365, 437, 321, 434, 516, 281, 2060, 13], "temperature": 0.0, "avg_logprob": -0.2302298034940447, "compression_ratio": 1.3591549295774648, "no_speech_prob": 3.647015546448529e-05}, {"id": 208, "seek": 99192, "start": 991.92, "end": 1002.24, "text": " And Sarada, whereabouts did you list these things? Was that in the previous session or something?", "tokens": [400, 6894, 1538, 11, 689, 41620, 630, 291, 1329, 613, 721, 30, 3027, 300, 294, 264, 3894, 5481, 420, 746, 30], "temperature": 0.0, "avg_logprob": -0.3831956526812385, "compression_ratio": 1.393063583815029, "no_speech_prob": 8.748678374104202e-05}, {"id": 209, "seek": 99192, "start": 1002.24, "end": 1007.4399999999999, "text": " I know it's in the how to write a really short APL code.", "tokens": [286, 458, 309, 311, 294, 264, 577, 281, 2464, 257, 534, 2099, 5372, 43, 3089, 13], "temperature": 0.0, "avg_logprob": -0.3831956526812385, "compression_ratio": 1.393063583815029, "no_speech_prob": 8.748678374104202e-05}, {"id": 210, "seek": 99192, "start": 1007.4399999999999, "end": 1009.4399999999999, "text": " Yeah, it's the first one.", "tokens": [865, 11, 309, 311, 264, 700, 472, 13], "temperature": 0.0, "avg_logprob": -0.3831956526812385, "compression_ratio": 1.393063583815029, "no_speech_prob": 8.748678374104202e-05}, {"id": 211, "seek": 99192, "start": 1009.4399999999999, "end": 1015.28, "text": " Okay, so tell us about this APL problem solving competition.", "tokens": [1033, 11, 370, 980, 505, 466, 341, 5372, 43, 1154, 12606, 6211, 13], "temperature": 0.0, "avg_logprob": -0.3831956526812385, "compression_ratio": 1.393063583815029, "no_speech_prob": 8.748678374104202e-05}, {"id": 212, "seek": 101528, "start": 1015.28, "end": 1024.96, "text": " Actually, I hear from your interview in a waycast and Adam mentioned it at the end.", "tokens": [5135, 11, 286, 1568, 490, 428, 4049, 294, 257, 636, 3734, 293, 7938, 2835, 309, 412, 264, 917, 13], "temperature": 0.0, "avg_logprob": -0.32751645360674175, "compression_ratio": 1.3909774436090225, "no_speech_prob": 0.0004039206251036376}, {"id": 213, "seek": 101528, "start": 1025.76, "end": 1027.84, "text": " So I just jumped in and have a look.", "tokens": [407, 286, 445, 13864, 294, 293, 362, 257, 574, 13], "temperature": 0.0, "avg_logprob": -0.32751645360674175, "compression_ratio": 1.3909774436090225, "no_speech_prob": 0.0004039206251036376}, {"id": 214, "seek": 101528, "start": 1031.04, "end": 1034.96, "text": " And under the first one, the left hand side.", "tokens": [400, 833, 264, 700, 472, 11, 264, 1411, 1011, 1252, 13], "temperature": 0.0, "avg_logprob": -0.32751645360674175, "compression_ratio": 1.3909774436090225, "no_speech_prob": 0.0004039206251036376}, {"id": 215, "seek": 101528, "start": 1036.16, "end": 1037.2, "text": " Oh, left hand side.", "tokens": [876, 11, 1411, 1011, 1252, 13], "temperature": 0.0, "avg_logprob": -0.32751645360674175, "compression_ratio": 1.3909774436090225, "no_speech_prob": 0.0004039206251036376}, {"id": 216, "seek": 103720, "start": 1037.2, "end": 1049.2, "text": " So they actually give you some very easy to start with sample and then have a platform for you to", "tokens": [407, 436, 767, 976, 291, 512, 588, 1858, 281, 722, 365, 6889, 293, 550, 362, 257, 3663, 337, 291, 281], "temperature": 0.0, "avg_logprob": -0.22513077475807883, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.00013121771917212754}, {"id": 217, "seek": 103720, "start": 1050.8, "end": 1057.28, "text": " do it. And I find it quite easy to use some of the I have experienced in the past in Python.", "tokens": [360, 309, 13, 400, 286, 915, 309, 1596, 1858, 281, 764, 512, 295, 264, 286, 362, 6751, 294, 264, 1791, 294, 15329, 13], "temperature": 0.0, "avg_logprob": -0.22513077475807883, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.00013121771917212754}, {"id": 218, "seek": 103720, "start": 1057.28, "end": 1061.6000000000001, "text": " Some of them I just don't know how to do the submission, but they're very good explanation.", "tokens": [2188, 295, 552, 286, 445, 500, 380, 458, 577, 281, 360, 264, 23689, 11, 457, 436, 434, 588, 665, 10835, 13], "temperature": 0.0, "avg_logprob": -0.22513077475807883, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.00013121771917212754}, {"id": 219, "seek": 103720, "start": 1061.6000000000001, "end": 1065.3600000000001, "text": " And I think I've been hooked is because of the two questions.", "tokens": [400, 286, 519, 286, 600, 668, 20410, 307, 570, 295, 264, 732, 1651, 13], "temperature": 0.0, "avg_logprob": -0.22513077475807883, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.00013121771917212754}, {"id": 220, "seek": 106536, "start": 1065.36, "end": 1070.9599999999998, "text": " They actually using the APL and then solving the life science problem.", "tokens": [814, 767, 1228, 264, 5372, 43, 293, 550, 12606, 264, 993, 3497, 1154, 13], "temperature": 0.0, "avg_logprob": -0.3746244352157802, "compression_ratio": 1.6162162162162161, "no_speech_prob": 5.4737953178118914e-05}, {"id": 221, "seek": 106536, "start": 1070.9599999999998, "end": 1076.1599999999999, "text": " They actually how to tell the different DNA and the mutation.", "tokens": [814, 767, 577, 281, 980, 264, 819, 8272, 293, 264, 27960, 13], "temperature": 0.0, "avg_logprob": -0.3746244352157802, "compression_ratio": 1.6162162162162161, "no_speech_prob": 5.4737953178118914e-05}, {"id": 222, "seek": 106536, "start": 1076.1599999999999, "end": 1080.4799999999998, "text": " So and the second solution actually really, really short.", "tokens": [407, 293, 264, 1150, 3827, 767, 534, 11, 534, 2099, 13], "temperature": 0.0, "avg_logprob": -0.3746244352157802, "compression_ratio": 1.6162162162162161, "no_speech_prob": 5.4737953178118914e-05}, {"id": 223, "seek": 106536, "start": 1080.4799999999998, "end": 1084.8799999999999, "text": " And I really impressed by what they can do.", "tokens": [400, 286, 534, 11679, 538, 437, 436, 393, 360, 13], "temperature": 0.0, "avg_logprob": -0.3746244352157802, "compression_ratio": 1.6162162162162161, "no_speech_prob": 5.4737953178118914e-05}, {"id": 224, "seek": 106536, "start": 1087.52, "end": 1092.32, "text": " Cool. So you can actually submit your function and test it here.", "tokens": [8561, 13, 407, 291, 393, 767, 10315, 428, 2445, 293, 1500, 309, 510, 13], "temperature": 0.0, "avg_logprob": -0.3746244352157802, "compression_ratio": 1.6162162162162161, "no_speech_prob": 5.4737953178118914e-05}, {"id": 225, "seek": 109232, "start": 1092.32, "end": 1094.8799999999999, "text": " Yeah. And then it has some edge case.", "tokens": [865, 13, 400, 550, 309, 575, 512, 4691, 1389, 13], "temperature": 0.0, "avg_logprob": -0.3200248336791992, "compression_ratio": 1.6017316017316017, "no_speech_prob": 0.00010068343544844538}, {"id": 226, "seek": 109232, "start": 1094.8799999999999, "end": 1101.6, "text": " So that's why I start digging into the documentation and find out the slightly different.", "tokens": [407, 300, 311, 983, 286, 722, 17343, 666, 264, 14333, 293, 915, 484, 264, 4748, 819, 13], "temperature": 0.0, "avg_logprob": -0.3200248336791992, "compression_ratio": 1.6017316017316017, "no_speech_prob": 0.00010068343544844538}, {"id": 227, "seek": 109232, "start": 1101.6, "end": 1104.3999999999999, "text": " I need to do that little diamond thing in it.", "tokens": [286, 643, 281, 360, 300, 707, 16059, 551, 294, 309, 13], "temperature": 0.0, "avg_logprob": -0.3200248336791992, "compression_ratio": 1.6017316017316017, "no_speech_prob": 0.00010068343544844538}, {"id": 228, "seek": 109232, "start": 1104.3999999999999, "end": 1110.32, "text": " Yeah. And they cover quite a wide range of the other problem as well.", "tokens": [865, 13, 400, 436, 2060, 1596, 257, 4874, 3613, 295, 264, 661, 1154, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.3200248336791992, "compression_ratio": 1.6017316017316017, "no_speech_prob": 0.00010068343544844538}, {"id": 229, "seek": 109232, "start": 1110.32, "end": 1115.6799999999998, "text": " So you can pick through. Yeah, that is a bit more a multi-line question.", "tokens": [407, 291, 393, 1888, 807, 13, 865, 11, 300, 307, 257, 857, 544, 257, 4825, 12, 1889, 1168, 13], "temperature": 0.0, "avg_logprob": -0.3200248336791992, "compression_ratio": 1.6017316017316017, "no_speech_prob": 0.00010068343544844538}, {"id": 230, "seek": 111568, "start": 1115.68, "end": 1122.64, "text": " So maybe in the future, we can you can cover it here.", "tokens": [407, 1310, 294, 264, 2027, 11, 321, 393, 291, 393, 2060, 309, 510, 13], "temperature": 0.0, "avg_logprob": -0.300601238157691, "compression_ratio": 1.4837209302325582, "no_speech_prob": 0.00012336260988377035}, {"id": 231, "seek": 111568, "start": 1122.64, "end": 1129.76, "text": " Yeah, I think I think Felix was telling me that a lot of the phase one questions are pretty approachable.", "tokens": [865, 11, 286, 519, 286, 519, 30169, 390, 3585, 385, 300, 257, 688, 295, 264, 5574, 472, 1651, 366, 1238, 3109, 712, 13], "temperature": 0.0, "avg_logprob": -0.300601238157691, "compression_ratio": 1.4837209302325582, "no_speech_prob": 0.00012336260988377035}, {"id": 232, "seek": 111568, "start": 1129.76, "end": 1135.2, "text": " So this will be a small exercise.", "tokens": [407, 341, 486, 312, 257, 1359, 5380, 13], "temperature": 0.0, "avg_logprob": -0.300601238157691, "compression_ratio": 1.4837209302325582, "no_speech_prob": 0.00012336260988377035}, {"id": 233, "seek": 111568, "start": 1135.2, "end": 1144.3200000000002, "text": " I when I learn Python, I remember I tried to find different problem and just try to understand the description, how to do it.", "tokens": [286, 562, 286, 1466, 15329, 11, 286, 1604, 286, 3031, 281, 915, 819, 1154, 293, 445, 853, 281, 1223, 264, 3855, 11, 577, 281, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.300601238157691, "compression_ratio": 1.4837209302325582, "no_speech_prob": 0.00012336260988377035}, {"id": 234, "seek": 114432, "start": 1144.32, "end": 1146.72, "text": " So, yeah, just kind of fun.", "tokens": [407, 11, 1338, 11, 445, 733, 295, 1019, 13], "temperature": 0.0, "avg_logprob": -0.22256489922018613, "compression_ratio": 1.5217391304347827, "no_speech_prob": 8.885975694283843e-05}, {"id": 235, "seek": 114432, "start": 1146.72, "end": 1155.6799999999998, "text": " And they give us some hints on what solution or simple we should use and then just start looking at it as well.", "tokens": [400, 436, 976, 505, 512, 27271, 322, 437, 3827, 420, 2199, 321, 820, 764, 293, 550, 445, 722, 1237, 412, 309, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.22256489922018613, "compression_ratio": 1.5217391304347827, "no_speech_prob": 8.885975694283843e-05}, {"id": 236, "seek": 114432, "start": 1155.6799999999998, "end": 1160.56, "text": " But as APO documentation, sometimes can be quite hard to understand.", "tokens": [583, 382, 5372, 46, 14333, 11, 2171, 393, 312, 1596, 1152, 281, 1223, 13], "temperature": 0.0, "avg_logprob": -0.22256489922018613, "compression_ratio": 1.5217391304347827, "no_speech_prob": 8.885975694283843e-05}, {"id": 237, "seek": 114432, "start": 1160.56, "end": 1162.8, "text": " So you can cover it. It will be great.", "tokens": [407, 291, 393, 2060, 309, 13, 467, 486, 312, 869, 13], "temperature": 0.0, "avg_logprob": -0.22256489922018613, "compression_ratio": 1.5217391304347827, "no_speech_prob": 8.885975694283843e-05}, {"id": 238, "seek": 114432, "start": 1165.12, "end": 1169.12, "text": " And the mutation, actually, they point you to the Hamming distance.", "tokens": [400, 264, 27960, 11, 767, 11, 436, 935, 291, 281, 264, 8234, 2810, 4560, 13], "temperature": 0.0, "avg_logprob": -0.22256489922018613, "compression_ratio": 1.5217391304347827, "no_speech_prob": 8.885975694283843e-05}, {"id": 239, "seek": 116912, "start": 1169.12, "end": 1175.28, "text": " Actually, very interesting when I learned how to write APL and then I also learned other knowledge as well.", "tokens": [5135, 11, 588, 1880, 562, 286, 3264, 577, 281, 2464, 5372, 43, 293, 550, 286, 611, 3264, 661, 3601, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.21360192549856086, "compression_ratio": 1.5571428571428572, "no_speech_prob": 0.0001088530189008452}, {"id": 240, "seek": 116912, "start": 1175.28, "end": 1179.4399999999998, "text": " So, yeah, just fun, very interesting.", "tokens": [407, 11, 1338, 11, 445, 1019, 11, 588, 1880, 13], "temperature": 0.0, "avg_logprob": -0.21360192549856086, "compression_ratio": 1.5571428571428572, "no_speech_prob": 0.0001088530189008452}, {"id": 241, "seek": 116912, "start": 1179.4399999999998, "end": 1184.8, "text": " Yeah, I mean, this one seems trivially easy, right? Yeah.", "tokens": [865, 11, 286, 914, 11, 341, 472, 2544, 1376, 85, 2270, 1858, 11, 558, 30, 865, 13], "temperature": 0.0, "avg_logprob": -0.21360192549856086, "compression_ratio": 1.5571428571428572, "no_speech_prob": 0.0001088530189008452}, {"id": 242, "seek": 116912, "start": 1184.8, "end": 1191.52, "text": " It's just. But I think that for me, it's very inspiring is the application.", "tokens": [467, 311, 445, 13, 583, 286, 519, 300, 337, 385, 11, 309, 311, 588, 15883, 307, 264, 3861, 13], "temperature": 0.0, "avg_logprob": -0.21360192549856086, "compression_ratio": 1.5571428571428572, "no_speech_prob": 0.0001088530189008452}, {"id": 243, "seek": 116912, "start": 1191.52, "end": 1195.6, "text": " This one's just this, isn't it? It's over here.", "tokens": [639, 472, 311, 445, 341, 11, 1943, 380, 309, 30, 467, 311, 670, 510, 13], "temperature": 0.0, "avg_logprob": -0.21360192549856086, "compression_ratio": 1.5571428571428572, "no_speech_prob": 0.0001088530189008452}, {"id": 244, "seek": 119560, "start": 1195.6, "end": 1204.7199999999998, "text": " You're not supposed to do it. Well, I mean, presumably phase one is not.", "tokens": [509, 434, 406, 3442, 281, 360, 309, 13, 1042, 11, 286, 914, 11, 26742, 5574, 472, 307, 406, 13], "temperature": 0.0, "avg_logprob": -0.15384863482581246, "compression_ratio": 1.4310344827586208, "no_speech_prob": 5.2228158892830834e-05}, {"id": 245, "seek": 119560, "start": 1204.7199999999998, "end": 1208.48, "text": " I think there is some prize money associated with phase one.", "tokens": [286, 519, 456, 307, 512, 12818, 1460, 6615, 365, 5574, 472, 13], "temperature": 0.0, "avg_logprob": -0.15384863482581246, "compression_ratio": 1.4310344827586208, "no_speech_prob": 5.2228158892830834e-05}, {"id": 246, "seek": 119560, "start": 1208.48, "end": 1216.1599999999999, "text": " Oh, you know what it is, though, it's plus slash applied to each side.", "tokens": [876, 11, 291, 458, 437, 309, 307, 11, 1673, 11, 309, 311, 1804, 17330, 6456, 281, 1184, 1252, 13], "temperature": 0.0, "avg_logprob": -0.15384863482581246, "compression_ratio": 1.4310344827586208, "no_speech_prob": 5.2228158892830834e-05}, {"id": 247, "seek": 119560, "start": 1216.1599999999999, "end": 1220.6399999999999, "text": " So you've got to do equals on the two sides.", "tokens": [407, 291, 600, 658, 281, 360, 6915, 322, 264, 732, 4881, 13], "temperature": 0.0, "avg_logprob": -0.15384863482581246, "compression_ratio": 1.4310344827586208, "no_speech_prob": 5.2228158892830834e-05}, {"id": 248, "seek": 122064, "start": 1220.64, "end": 1228.96, "text": " It's interesting, actually, to think about how to do this really neatly, right, because you've got to have.", "tokens": [467, 311, 1880, 11, 767, 11, 281, 519, 466, 577, 281, 360, 341, 534, 36634, 11, 558, 11, 570, 291, 600, 658, 281, 362, 13], "temperature": 0.0, "avg_logprob": -0.17818050108094147, "compression_ratio": 1.420731707317073, "no_speech_prob": 2.5452449335716665e-05}, {"id": 249, "seek": 122064, "start": 1228.96, "end": 1234.16, "text": " I mean, you can obviously do it with a defun.", "tokens": [286, 914, 11, 291, 393, 2745, 360, 309, 365, 257, 1060, 409, 13], "temperature": 0.0, "avg_logprob": -0.17818050108094147, "compression_ratio": 1.420731707317073, "no_speech_prob": 2.5452449335716665e-05}, {"id": 250, "seek": 122064, "start": 1234.16, "end": 1240.48, "text": " But to do it directly.", "tokens": [583, 281, 360, 309, 3838, 13], "temperature": 0.0, "avg_logprob": -0.17818050108094147, "compression_ratio": 1.420731707317073, "no_speech_prob": 2.5452449335716665e-05}, {"id": 251, "seek": 122064, "start": 1240.48, "end": 1246.8000000000002, "text": " And I guess it's like, yeah, plus slash applied to that.", "tokens": [400, 286, 2041, 309, 311, 411, 11, 1338, 11, 1804, 17330, 6456, 281, 300, 13], "temperature": 0.0, "avg_logprob": -0.17818050108094147, "compression_ratio": 1.420731707317073, "no_speech_prob": 2.5452449335716665e-05}, {"id": 252, "seek": 124680, "start": 1246.8, "end": 1252.32, "text": " That is what.", "tokens": [663, 307, 437, 13], "temperature": 0.0, "avg_logprob": -0.20301225835626777, "compression_ratio": 1.352, "no_speech_prob": 1.6962610970949754e-05}, {"id": 253, "seek": 124680, "start": 1252.32, "end": 1256.56, "text": " So that would be.", "tokens": [407, 300, 576, 312, 13], "temperature": 0.0, "avg_logprob": -0.20301225835626777, "compression_ratio": 1.352, "no_speech_prob": 1.6962610970949754e-05}, {"id": 254, "seek": 124680, "start": 1256.56, "end": 1263.28, "text": " That would give you that. OK, so that would give you.", "tokens": [663, 576, 976, 291, 300, 13, 2264, 11, 370, 300, 576, 976, 291, 13], "temperature": 0.0, "avg_logprob": -0.20301225835626777, "compression_ratio": 1.352, "no_speech_prob": 1.6962610970949754e-05}, {"id": 255, "seek": 124680, "start": 1263.28, "end": 1267.44, "text": " It's a slightly different case to any of the.", "tokens": [467, 311, 257, 4748, 819, 1389, 281, 604, 295, 264, 13], "temperature": 0.0, "avg_logprob": -0.20301225835626777, "compression_ratio": 1.352, "no_speech_prob": 1.6962610970949754e-05}, {"id": 256, "seek": 124680, "start": 1267.44, "end": 1272.3999999999999, "text": " Finds I remember seeing you want the.", "tokens": [11809, 82, 286, 1604, 2577, 291, 528, 264, 13], "temperature": 0.0, "avg_logprob": -0.20301225835626777, "compression_ratio": 1.352, "no_speech_prob": 1.6962610970949754e-05}, {"id": 257, "seek": 127240, "start": 1272.4, "end": 1280.0, "text": " This to be the dyadic one, and then you want to post process it with plus slash.", "tokens": [639, 281, 312, 264, 14584, 43341, 472, 11, 293, 550, 291, 528, 281, 2183, 1399, 309, 365, 1804, 17330, 13], "temperature": 0.0, "avg_logprob": -0.16132705967600752, "compression_ratio": 1.4756756756756757, "no_speech_prob": 6.0482411754492205e-06}, {"id": 258, "seek": 127240, "start": 1280.0, "end": 1284.64, "text": " Is there a way to do that?", "tokens": [1119, 456, 257, 636, 281, 360, 300, 30], "temperature": 0.0, "avg_logprob": -0.16132705967600752, "compression_ratio": 1.4756756756756757, "no_speech_prob": 6.0482411754492205e-06}, {"id": 259, "seek": 127240, "start": 1284.64, "end": 1288.24, "text": " Yeah, so that's why you need to think about it.", "tokens": [865, 11, 370, 300, 311, 983, 291, 643, 281, 519, 466, 309, 13], "temperature": 0.0, "avg_logprob": -0.16132705967600752, "compression_ratio": 1.4756756756756757, "no_speech_prob": 6.0482411754492205e-06}, {"id": 260, "seek": 127240, "start": 1288.24, "end": 1293.72, "text": " And yeah, they also in the example stage, they.", "tokens": [400, 1338, 11, 436, 611, 294, 264, 1365, 3233, 11, 436, 13], "temperature": 0.0, "avg_logprob": -0.16132705967600752, "compression_ratio": 1.4756756756756757, "no_speech_prob": 6.0482411754492205e-06}, {"id": 261, "seek": 127240, "start": 1293.72, "end": 1302.3600000000001, "text": " They tell you that as different method in APL can do it and just see.", "tokens": [814, 980, 291, 300, 382, 819, 3170, 294, 5372, 43, 393, 360, 309, 293, 445, 536, 13], "temperature": 0.0, "avg_logprob": -0.16132705967600752, "compression_ratio": 1.4756756756756757, "no_speech_prob": 6.0482411754492205e-06}, {"id": 262, "seek": 130236, "start": 1302.36, "end": 1311.28, "text": " How they actually quite expensive to operate actually really, really amazing.", "tokens": [1012, 436, 767, 1596, 5124, 281, 9651, 767, 534, 11, 534, 2243, 13], "temperature": 0.0, "avg_logprob": -0.20541324037494083, "compression_ratio": 1.7257142857142858, "no_speech_prob": 9.608711843611673e-05}, {"id": 263, "seek": 130236, "start": 1311.28, "end": 1320.12, "text": " And I saw in the last year competition, they actually compare different solution and they actually can run the performance to compare different,", "tokens": [400, 286, 1866, 294, 264, 1036, 1064, 6211, 11, 436, 767, 6794, 819, 3827, 293, 436, 767, 393, 1190, 264, 3389, 281, 6794, 819, 11], "temperature": 0.0, "avg_logprob": -0.20541324037494083, "compression_ratio": 1.7257142857142858, "no_speech_prob": 9.608711843611673e-05}, {"id": 264, "seek": 130236, "start": 1320.12, "end": 1326.3999999999999, "text": " not just the length of the solution, but also the processing time.", "tokens": [406, 445, 264, 4641, 295, 264, 3827, 11, 457, 611, 264, 9007, 565, 13], "temperature": 0.0, "avg_logprob": -0.20541324037494083, "compression_ratio": 1.7257142857142858, "no_speech_prob": 9.608711843611673e-05}, {"id": 265, "seek": 130236, "start": 1326.3999999999999, "end": 1329.7199999999998, "text": " At this one.", "tokens": [1711, 341, 472, 13], "temperature": 0.0, "avg_logprob": -0.20541324037494083, "compression_ratio": 1.7257142857142858, "no_speech_prob": 9.608711843611673e-05}, {"id": 266, "seek": 132972, "start": 1329.72, "end": 1337.76, "text": " You want X equals Y and then post process with plus equals.", "tokens": [509, 528, 1783, 6915, 398, 293, 550, 2183, 1399, 365, 1804, 6915, 13], "temperature": 0.0, "avg_logprob": -0.2520676428271878, "compression_ratio": 1.5, "no_speech_prob": 4.1571097426640335e-06}, {"id": 267, "seek": 132972, "start": 1337.76, "end": 1342.8, "text": " So you want. This is your post processing.", "tokens": [407, 291, 528, 13, 639, 307, 428, 2183, 9007, 13], "temperature": 0.0, "avg_logprob": -0.2520676428271878, "compression_ratio": 1.5, "no_speech_prob": 4.1571097426640335e-06}, {"id": 268, "seek": 132972, "start": 1342.8, "end": 1352.8, "text": " And this is your dyadic pre processing.", "tokens": [400, 341, 307, 428, 14584, 43341, 659, 9007, 13], "temperature": 0.0, "avg_logprob": -0.2520676428271878, "compression_ratio": 1.5, "no_speech_prob": 4.1571097426640335e-06}, {"id": 269, "seek": 132972, "start": 1352.8, "end": 1358.56, "text": " Is there a way to? Like run some examples and see what happens, or do you have?", "tokens": [1119, 456, 257, 636, 281, 30, 1743, 1190, 512, 5110, 293, 536, 437, 2314, 11, 420, 360, 291, 362, 30], "temperature": 0.0, "avg_logprob": -0.2520676428271878, "compression_ratio": 1.5, "no_speech_prob": 4.1571097426640335e-06}, {"id": 270, "seek": 135856, "start": 1358.56, "end": 1361.32, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.26951669391832855, "compression_ratio": 1.3129770992366412, "no_speech_prob": 3.479378210613504e-05}, {"id": 271, "seek": 135856, "start": 1361.32, "end": 1367.96, "text": " Because your answer is not correct, that's right. Yeah, I was hoping to see what it does give.", "tokens": [1436, 428, 1867, 307, 406, 3006, 11, 300, 311, 558, 13, 865, 11, 286, 390, 7159, 281, 536, 437, 309, 775, 976, 13], "temperature": 0.0, "avg_logprob": -0.26951669391832855, "compression_ratio": 1.3129770992366412, "no_speech_prob": 3.479378210613504e-05}, {"id": 272, "seek": 135856, "start": 1367.96, "end": 1372.96, "text": " Actually, the example is all your test case.", "tokens": [5135, 11, 264, 1365, 307, 439, 428, 1500, 1389, 13], "temperature": 0.0, "avg_logprob": -0.26951669391832855, "compression_ratio": 1.3129770992366412, "no_speech_prob": 3.479378210613504e-05}, {"id": 273, "seek": 135856, "start": 1372.96, "end": 1376.76, "text": " I see. Yeah.", "tokens": [286, 536, 13, 865, 13], "temperature": 0.0, "avg_logprob": -0.26951669391832855, "compression_ratio": 1.3129770992366412, "no_speech_prob": 3.479378210613504e-05}, {"id": 274, "seek": 135856, "start": 1376.76, "end": 1380.52, "text": " Let's try it.", "tokens": [961, 311, 853, 309, 13], "temperature": 0.0, "avg_logprob": -0.26951669391832855, "compression_ratio": 1.3129770992366412, "no_speech_prob": 3.479378210613504e-05}, {"id": 275, "seek": 138052, "start": 1380.52, "end": 1391.4, "text": " So you just need to do your function.", "tokens": [407, 291, 445, 643, 281, 360, 428, 2445, 13], "temperature": 0.0, "avg_logprob": -0.2560616770098286, "compression_ratio": 1.0, "no_speech_prob": 9.514226803730708e-06}, {"id": 276, "seek": 138052, "start": 1391.4, "end": 1399.32, "text": " OK, F equals plus slash.", "tokens": [2264, 11, 479, 6915, 1804, 17330, 13], "temperature": 0.0, "avg_logprob": -0.2560616770098286, "compression_ratio": 1.0, "no_speech_prob": 9.514226803730708e-06}, {"id": 277, "seek": 138052, "start": 1399.32, "end": 1405.8799999999999, "text": " And. What's this button?", "tokens": [400, 13, 708, 311, 341, 2960, 30], "temperature": 0.0, "avg_logprob": -0.2560616770098286, "compression_ratio": 1.0, "no_speech_prob": 9.514226803730708e-06}, {"id": 278, "seek": 140588, "start": 1405.88, "end": 1410.92, "text": " J. Applied to equals.", "tokens": [508, 13, 3132, 39459, 281, 6915, 13], "temperature": 0.0, "avg_logprob": -0.2938467769299523, "compression_ratio": 1.328, "no_speech_prob": 1.4967991774028633e-05}, {"id": 279, "seek": 140588, "start": 1410.92, "end": 1414.96, "text": " It's not that it's this.", "tokens": [467, 311, 406, 300, 309, 311, 341, 13], "temperature": 0.0, "avg_logprob": -0.2938467769299523, "compression_ratio": 1.328, "no_speech_prob": 1.4967991774028633e-05}, {"id": 280, "seek": 140588, "start": 1414.96, "end": 1424.6000000000001, "text": " OK. That's interesting.", "tokens": [2264, 13, 663, 311, 1880, 13], "temperature": 0.0, "avg_logprob": -0.2938467769299523, "compression_ratio": 1.328, "no_speech_prob": 1.4967991774028633e-05}, {"id": 281, "seek": 140588, "start": 1424.6000000000001, "end": 1427.4, "text": " It hasn't. It hasn't ended up.", "tokens": [467, 6132, 380, 13, 467, 6132, 380, 4590, 493, 13], "temperature": 0.0, "avg_logprob": -0.2938467769299523, "compression_ratio": 1.328, "no_speech_prob": 1.4967991774028633e-05}, {"id": 282, "seek": 140588, "start": 1427.4, "end": 1433.1200000000001, "text": " Are you are you trying to put F equals that should say F, sorry.", "tokens": [2014, 291, 366, 291, 1382, 281, 829, 479, 6915, 300, 820, 584, 479, 11, 2597, 13], "temperature": 0.0, "avg_logprob": -0.2938467769299523, "compression_ratio": 1.328, "no_speech_prob": 1.4967991774028633e-05}, {"id": 283, "seek": 143312, "start": 1433.12, "end": 1439.28, "text": " Ten and is it saying that was wrong?", "tokens": [9380, 293, 307, 309, 1566, 300, 390, 2085, 30], "temperature": 0.0, "avg_logprob": -0.22786057670161408, "compression_ratio": 1.2222222222222223, "no_speech_prob": 5.1736355999310035e-06}, {"id": 284, "seek": 143312, "start": 1439.28, "end": 1447.7199999999998, "text": " Result should have been seven with that and that.", "tokens": [5015, 723, 820, 362, 668, 3407, 365, 300, 293, 300, 13], "temperature": 0.0, "avg_logprob": -0.22786057670161408, "compression_ratio": 1.2222222222222223, "no_speech_prob": 5.1736355999310035e-06}, {"id": 285, "seek": 143312, "start": 1447.7199999999998, "end": 1450.52, "text": " Oh, wait, the number of differences.", "tokens": [876, 11, 1699, 11, 264, 1230, 295, 7300, 13], "temperature": 0.0, "avg_logprob": -0.22786057670161408, "compression_ratio": 1.2222222222222223, "no_speech_prob": 5.1736355999310035e-06}, {"id": 286, "seek": 143312, "start": 1450.52, "end": 1455.36, "text": " That's why. So it's.", "tokens": [663, 311, 983, 13, 407, 309, 311, 13], "temperature": 0.0, "avg_logprob": -0.22786057670161408, "compression_ratio": 1.2222222222222223, "no_speech_prob": 5.1736355999310035e-06}, {"id": 287, "seek": 143312, "start": 1455.36, "end": 1460.56, "text": " It's the.", "tokens": [467, 311, 264, 13], "temperature": 0.0, "avg_logprob": -0.22786057670161408, "compression_ratio": 1.2222222222222223, "no_speech_prob": 5.1736355999310035e-06}, {"id": 288, "seek": 146056, "start": 1460.56, "end": 1465.2, "text": " It's the opposite of that.", "tokens": [467, 311, 264, 6182, 295, 300, 13], "temperature": 0.0, "avg_logprob": -0.21662322150336372, "compression_ratio": 1.196078431372549, "no_speech_prob": 3.96646555600455e-06}, {"id": 289, "seek": 146056, "start": 1465.2, "end": 1469.48, "text": " And I believe not is Tilda.", "tokens": [400, 286, 1697, 406, 307, 314, 34121, 13], "temperature": 0.0, "avg_logprob": -0.21662322150336372, "compression_ratio": 1.196078431372549, "no_speech_prob": 3.96646555600455e-06}, {"id": 290, "seek": 146056, "start": 1469.48, "end": 1476.32, "text": " I think I saw that on. Yeah, it is.", "tokens": [286, 519, 286, 1866, 300, 322, 13, 865, 11, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.21662322150336372, "compression_ratio": 1.196078431372549, "no_speech_prob": 3.96646555600455e-06}, {"id": 291, "seek": 146056, "start": 1476.32, "end": 1487.28, "text": " So. That's the post processing.", "tokens": [407, 13, 663, 311, 264, 2183, 9007, 13], "temperature": 0.0, "avg_logprob": -0.21662322150336372, "compression_ratio": 1.196078431372549, "no_speech_prob": 3.96646555600455e-06}, {"id": 292, "seek": 148728, "start": 1487.28, "end": 1495.12, "text": " Dega. And would you need the parentheses?", "tokens": [413, 6335, 13, 400, 576, 291, 643, 264, 34153, 30], "temperature": 0.0, "avg_logprob": -0.16244052006648138, "compression_ratio": 1.6225165562913908, "no_speech_prob": 5.507281002792297e-06}, {"id": 293, "seek": 148728, "start": 1495.12, "end": 1500.44, "text": " I'm not sure without the parentheses.", "tokens": [286, 478, 406, 988, 1553, 264, 34153, 13], "temperature": 0.0, "avg_logprob": -0.16244052006648138, "compression_ratio": 1.6225165562913908, "no_speech_prob": 5.507281002792297e-06}, {"id": 294, "seek": 148728, "start": 1500.44, "end": 1501.68, "text": " It still works. That's interesting.", "tokens": [467, 920, 1985, 13, 663, 311, 1880, 13], "temperature": 0.0, "avg_logprob": -0.16244052006648138, "compression_ratio": 1.6225165562913908, "no_speech_prob": 5.507281002792297e-06}, {"id": 295, "seek": 148728, "start": 1501.68, "end": 1502.8, "text": " Now, why does it still work?", "tokens": [823, 11, 983, 775, 309, 920, 589, 30], "temperature": 0.0, "avg_logprob": -0.16244052006648138, "compression_ratio": 1.6225165562913908, "no_speech_prob": 5.507281002792297e-06}, {"id": 296, "seek": 148728, "start": 1502.8, "end": 1505.28, "text": " So that's the operator.", "tokens": [407, 300, 311, 264, 12973, 13], "temperature": 0.0, "avg_logprob": -0.16244052006648138, "compression_ratio": 1.6225165562913908, "no_speech_prob": 5.507281002792297e-06}, {"id": 297, "seek": 148728, "start": 1505.28, "end": 1509.8799999999999, "text": " That's the right hand side.", "tokens": [663, 311, 264, 558, 1011, 1252, 13], "temperature": 0.0, "avg_logprob": -0.16244052006648138, "compression_ratio": 1.6225165562913908, "no_speech_prob": 5.507281002792297e-06}, {"id": 298, "seek": 148728, "start": 1509.8799999999999, "end": 1513.56, "text": " That's the oh, I see, that's the left hand side.", "tokens": [663, 311, 264, 1954, 11, 286, 536, 11, 300, 311, 264, 1411, 1011, 1252, 13], "temperature": 0.0, "avg_logprob": -0.16244052006648138, "compression_ratio": 1.6225165562913908, "no_speech_prob": 5.507281002792297e-06}, {"id": 299, "seek": 151356, "start": 1513.56, "end": 1521.1599999999999, "text": " And then that's what is applied to the whole thing.", "tokens": [400, 550, 300, 311, 437, 307, 6456, 281, 264, 1379, 551, 13], "temperature": 0.0, "avg_logprob": -0.23907160758972168, "compression_ratio": 1.4071428571428573, "no_speech_prob": 2.8839298465754837e-05}, {"id": 300, "seek": 151356, "start": 1521.1599999999999, "end": 1528.8799999999999, "text": " So I think that's correct. Test.", "tokens": [407, 286, 519, 300, 311, 3006, 13, 9279, 13], "temperature": 0.0, "avg_logprob": -0.23907160758972168, "compression_ratio": 1.4071428571428573, "no_speech_prob": 2.8839298465754837e-05}, {"id": 301, "seek": 151356, "start": 1528.8799999999999, "end": 1531.9199999999998, "text": " Wow. Yeah, yeah.", "tokens": [3153, 13, 865, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.23907160758972168, "compression_ratio": 1.4071428571428573, "no_speech_prob": 2.8839298465754837e-05}, {"id": 302, "seek": 151356, "start": 1531.9199999999998, "end": 1533.3999999999999, "text": " But my solution is only five.", "tokens": [583, 452, 3827, 307, 787, 1732, 13], "temperature": 0.0, "avg_logprob": -0.23907160758972168, "compression_ratio": 1.4071428571428573, "no_speech_prob": 2.8839298465754837e-05}, {"id": 303, "seek": 151356, "start": 1533.3999999999999, "end": 1538.08, "text": " So one one that is more shorter than one, two, three, four, five.", "tokens": [407, 472, 472, 300, 307, 544, 11639, 813, 472, 11, 732, 11, 1045, 11, 1451, 11, 1732, 13], "temperature": 0.0, "avg_logprob": -0.23907160758972168, "compression_ratio": 1.4071428571428573, "no_speech_prob": 2.8839298465754837e-05}, {"id": 304, "seek": 153808, "start": 1538.08, "end": 1543.84, "text": " Mine's five. OK, yeah, yeah.", "tokens": [11620, 311, 1732, 13, 2264, 11, 1338, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.29931793212890623, "compression_ratio": 1.6761904761904762, "no_speech_prob": 4.005809751106426e-05}, {"id": 305, "seek": 153808, "start": 1543.84, "end": 1546.96, "text": " And for the for them, they have the pass.", "tokens": [400, 337, 264, 337, 552, 11, 436, 362, 264, 1320, 13], "temperature": 0.0, "avg_logprob": -0.29931793212890623, "compression_ratio": 1.6761904761904762, "no_speech_prob": 4.005809751106426e-05}, {"id": 306, "seek": 153808, "start": 1546.96, "end": 1551.32, "text": " They have a silver trophy for you or a gold trophy for you.", "tokens": [814, 362, 257, 8753, 28639, 337, 291, 420, 257, 3821, 28639, 337, 291, 13], "temperature": 0.0, "avg_logprob": -0.29931793212890623, "compression_ratio": 1.6761904761904762, "no_speech_prob": 4.005809751106426e-05}, {"id": 307, "seek": 153808, "start": 1551.32, "end": 1556.72, "text": " Silver just passed part of the test case and the gold actually you pass all the case.", "tokens": [15861, 445, 4678, 644, 295, 264, 1500, 1389, 293, 264, 3821, 767, 291, 1320, 439, 264, 1389, 13], "temperature": 0.0, "avg_logprob": -0.29931793212890623, "compression_ratio": 1.6761904761904762, "no_speech_prob": 4.005809751106426e-05}, {"id": 308, "seek": 153808, "start": 1556.72, "end": 1560.28, "text": " And so this is gold. Yeah, I see.", "tokens": [400, 370, 341, 307, 3821, 13, 865, 11, 286, 536, 13], "temperature": 0.0, "avg_logprob": -0.29931793212890623, "compression_ratio": 1.6761904761904762, "no_speech_prob": 4.005809751106426e-05}, {"id": 309, "seek": 153808, "start": 1560.28, "end": 1565.36, "text": " Thank you, said you have to log in for you to save your correct answer if you.", "tokens": [1044, 291, 11, 848, 291, 362, 281, 3565, 294, 337, 291, 281, 3155, 428, 3006, 1867, 498, 291, 13], "temperature": 0.0, "avg_logprob": -0.29931793212890623, "compression_ratio": 1.6761904761904762, "no_speech_prob": 4.005809751106426e-05}, {"id": 310, "seek": 153808, "start": 1565.36, "end": 1566.96, "text": " Good point. All right.", "tokens": [2205, 935, 13, 1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.29931793212890623, "compression_ratio": 1.6761904761904762, "no_speech_prob": 4.005809751106426e-05}, {"id": 311, "seek": 156696, "start": 1566.96, "end": 1570.88, "text": " You can you can submit now and then you can put the trophy.", "tokens": [509, 393, 291, 393, 10315, 586, 293, 550, 291, 393, 829, 264, 28639, 13], "temperature": 0.0, "avg_logprob": -0.14884980889253838, "compression_ratio": 1.576086956521739, "no_speech_prob": 6.400028360076249e-05}, {"id": 312, "seek": 156696, "start": 1570.88, "end": 1576.28, "text": " All right. I just found very fun and busy and I can learn and practice.", "tokens": [1057, 558, 13, 286, 445, 1352, 588, 1019, 293, 5856, 293, 286, 393, 1466, 293, 3124, 13], "temperature": 0.0, "avg_logprob": -0.14884980889253838, "compression_ratio": 1.576086956521739, "no_speech_prob": 6.400028360076249e-05}, {"id": 313, "seek": 156696, "start": 1576.28, "end": 1581.92, "text": " That's great. All right. So.", "tokens": [663, 311, 869, 13, 1057, 558, 13, 407, 13], "temperature": 0.0, "avg_logprob": -0.14884980889253838, "compression_ratio": 1.576086956521739, "no_speech_prob": 6.400028360076249e-05}, {"id": 314, "seek": 156696, "start": 1581.92, "end": 1585.76, "text": " So your list of things were the things that they were saying would be needed.", "tokens": [407, 428, 1329, 295, 721, 645, 264, 721, 300, 436, 645, 1566, 576, 312, 2978, 13], "temperature": 0.0, "avg_logprob": -0.14884980889253838, "compression_ratio": 1.576086956521739, "no_speech_prob": 6.400028360076249e-05}, {"id": 315, "seek": 156696, "start": 1585.76, "end": 1590.2, "text": " OK, so we've done this one.", "tokens": [2264, 11, 370, 321, 600, 1096, 341, 472, 13], "temperature": 0.0, "avg_logprob": -0.14884980889253838, "compression_ratio": 1.576086956521739, "no_speech_prob": 6.400028360076249e-05}, {"id": 316, "seek": 156696, "start": 1590.2, "end": 1594.6000000000001, "text": " So let's do these ones.", "tokens": [407, 718, 311, 360, 613, 2306, 13], "temperature": 0.0, "avg_logprob": -0.14884980889253838, "compression_ratio": 1.576086956521739, "no_speech_prob": 6.400028360076249e-05}, {"id": 317, "seek": 159460, "start": 1594.6, "end": 1599.08, "text": " And this competition's called.", "tokens": [400, 341, 6211, 311, 1219, 13], "temperature": 0.0, "avg_logprob": -0.3465008571230132, "compression_ratio": 1.0625, "no_speech_prob": 1.2207367944938596e-05}, {"id": 318, "seek": 159460, "start": 1599.08, "end": 1602.6, "text": " Twenty twenty two APL, OK.", "tokens": [28789, 7699, 732, 5372, 43, 11, 2264, 13], "temperature": 0.0, "avg_logprob": -0.3465008571230132, "compression_ratio": 1.0625, "no_speech_prob": 1.2207367944938596e-05}, {"id": 319, "seek": 160260, "start": 1602.6, "end": 1632.52, "text": " So let's create a. Section.", "tokens": [407, 718, 311, 1884, 257, 13, 21804, 13], "temperature": 0.0, "avg_logprob": -0.3110013008117676, "compression_ratio": 0.7714285714285715, "no_speech_prob": 4.4854048610432073e-05}, {"id": 320, "seek": 163252, "start": 1632.52, "end": 1650.44, "text": " OK, so should we just go in order?", "tokens": [2264, 11, 370, 820, 321, 445, 352, 294, 1668, 30], "temperature": 0.0, "avg_logprob": -0.5196318004442297, "compression_ratio": 0.9090909090909091, "no_speech_prob": 2.8826687412220053e-05}, {"id": 321, "seek": 163252, "start": 1650.44, "end": 1661.96, "text": " Oops. This is called key.", "tokens": [21726, 13, 639, 307, 1219, 2141, 13], "temperature": 0.0, "avg_logprob": -0.5196318004442297, "compression_ratio": 0.9090909090909091, "no_speech_prob": 2.8826687412220053e-05}, {"id": 322, "seek": 166196, "start": 1661.96, "end": 1672.1200000000001, "text": " I feel like I've heard people talk about key a few times.", "tokens": [286, 841, 411, 286, 600, 2198, 561, 751, 466, 2141, 257, 1326, 1413, 13], "temperature": 0.0, "avg_logprob": -0.2837033101490566, "compression_ratio": 1.0476190476190477, "no_speech_prob": 2.110587593051605e-05}, {"id": 323, "seek": 166196, "start": 1672.1200000000001, "end": 1688.08, "text": " And. What is this left called?", "tokens": [400, 13, 708, 307, 341, 1411, 1219, 30], "temperature": 0.0, "avg_logprob": -0.2837033101490566, "compression_ratio": 1.0476190476190477, "no_speech_prob": 2.110587593051605e-05}, {"id": 324, "seek": 168808, "start": 1688.08, "end": 1693.04, "text": " You can see it this one is an primitive operators. Yeah.", "tokens": [509, 393, 536, 309, 341, 472, 307, 364, 28540, 19077, 13, 865, 13], "temperature": 0.0, "avg_logprob": -0.46965165932973224, "compression_ratio": 1.25, "no_speech_prob": 6.960695827729069e-06}, {"id": 325, "seek": 168808, "start": 1693.04, "end": 1698.12, "text": " Quad equal. OK.", "tokens": [29619, 2681, 13, 2264, 13], "temperature": 0.0, "avg_logprob": -0.46965165932973224, "compression_ratio": 1.25, "no_speech_prob": 6.960695827729069e-06}, {"id": 326, "seek": 168808, "start": 1698.12, "end": 1703.24, "text": " Quad equal.", "tokens": [29619, 2681, 13], "temperature": 0.0, "avg_logprob": -0.46965165932973224, "compression_ratio": 1.25, "no_speech_prob": 6.960695827729069e-06}, {"id": 327, "seek": 168808, "start": 1703.24, "end": 1713.9199999999998, "text": " And it's spelt here. OK.", "tokens": [400, 309, 311, 637, 2018, 510, 13, 2264, 13], "temperature": 0.0, "avg_logprob": -0.46965165932973224, "compression_ratio": 1.25, "no_speech_prob": 6.960695827729069e-06}, {"id": 328, "seek": 168808, "start": 1713.9199999999998, "end": 1716.1999999999998, "text": " Tim on a cooperator.", "tokens": [7172, 322, 257, 13414, 1639, 13], "temperature": 0.0, "avg_logprob": -0.46965165932973224, "compression_ratio": 1.25, "no_speech_prob": 6.960695827729069e-06}, {"id": 329, "seek": 171620, "start": 1716.2, "end": 1722.68, "text": " I really wish this bookmark gave the whole hover over that the dialog editor gave you.", "tokens": [286, 534, 3172, 341, 1446, 5638, 2729, 264, 1379, 20076, 670, 300, 264, 19308, 9839, 2729, 291, 13], "temperature": 0.0, "avg_logprob": -0.26765328265251, "compression_ratio": 1.743718592964824, "no_speech_prob": 2.976548785227351e-05}, {"id": 330, "seek": 171620, "start": 1722.68, "end": 1725.72, "text": " But I will say what's that.", "tokens": [583, 286, 486, 584, 437, 311, 300, 13], "temperature": 0.0, "avg_logprob": -0.26765328265251, "compression_ratio": 1.743718592964824, "no_speech_prob": 2.976548785227351e-05}, {"id": 331, "seek": 171620, "start": 1725.72, "end": 1732.28, "text": " So I really wish this bookmark that gave you the full hover over that hover effect that", "tokens": [407, 286, 534, 3172, 341, 1446, 5638, 300, 2729, 291, 264, 1577, 20076, 670, 300, 20076, 1802, 300], "temperature": 0.0, "avg_logprob": -0.26765328265251, "compression_ratio": 1.743718592964824, "no_speech_prob": 2.976548785227351e-05}, {"id": 332, "seek": 171620, "start": 1732.28, "end": 1734.96, "text": " the editor gave with everything.", "tokens": [264, 9839, 2729, 365, 1203, 13], "temperature": 0.0, "avg_logprob": -0.26765328265251, "compression_ratio": 1.743718592964824, "no_speech_prob": 2.976548785227351e-05}, {"id": 333, "seek": 171620, "start": 1734.96, "end": 1739.44, "text": " But it'd be easy enough to fork it and add that, I guess.", "tokens": [583, 309, 1116, 312, 1858, 1547, 281, 17716, 309, 293, 909, 300, 11, 286, 2041, 13], "temperature": 0.0, "avg_logprob": -0.26765328265251, "compression_ratio": 1.743718592964824, "no_speech_prob": 2.976548785227351e-05}, {"id": 334, "seek": 171620, "start": 1739.44, "end": 1745.6000000000001, "text": " That's true. Yeah, maybe somebody can give that a go.", "tokens": [663, 311, 2074, 13, 865, 11, 1310, 2618, 393, 976, 300, 257, 352, 13], "temperature": 0.0, "avg_logprob": -0.26765328265251, "compression_ratio": 1.743718592964824, "no_speech_prob": 2.976548785227351e-05}, {"id": 335, "seek": 174560, "start": 1745.6, "end": 1749.8, "text": " That's a shame they're not using a nice font in here.", "tokens": [663, 311, 257, 10069, 436, 434, 406, 1228, 257, 1481, 10703, 294, 510, 13], "temperature": 0.0, "avg_logprob": -0.21317978294528261, "compression_ratio": 1.394736842105263, "no_speech_prob": 1.0615661267365795e-05}, {"id": 336, "seek": 174560, "start": 1749.8, "end": 1759.4399999999998, "text": " Oh, we should add our. Boxing style equals Max.", "tokens": [876, 11, 321, 820, 909, 527, 13, 15112, 278, 3758, 6915, 7402, 13], "temperature": 0.0, "avg_logprob": -0.21317978294528261, "compression_ratio": 1.394736842105263, "no_speech_prob": 1.0615661267365795e-05}, {"id": 337, "seek": 174560, "start": 1759.4399999999998, "end": 1774.8799999999999, "text": " Boxing on style equals Max or dash style equals maps. OK.", "tokens": [15112, 278, 322, 3758, 6915, 7402, 420, 8240, 3758, 6915, 11317, 13, 2264, 13], "temperature": 0.0, "avg_logprob": -0.21317978294528261, "compression_ratio": 1.394736842105263, "no_speech_prob": 1.0615661267365795e-05}, {"id": 338, "seek": 177488, "start": 1774.88, "end": 1782.1200000000001, "text": " OK. Means key.", "tokens": [2264, 13, 40290, 2141, 13], "temperature": 0.0, "avg_logprob": -0.1659574172076057, "compression_ratio": 1.518918918918919, "no_speech_prob": 4.289062871976057e-06}, {"id": 339, "seek": 177488, "start": 1782.1200000000001, "end": 1786.7600000000002, "text": " It's OK, so the left hand side is optional, so we know to look out for that.", "tokens": [467, 311, 2264, 11, 370, 264, 1411, 1011, 1252, 307, 17312, 11, 370, 321, 458, 281, 574, 484, 337, 300, 13], "temperature": 0.0, "avg_logprob": -0.1659574172076057, "compression_ratio": 1.518918918918919, "no_speech_prob": 4.289062871976057e-06}, {"id": 340, "seek": 177488, "start": 1786.7600000000002, "end": 1793.4, "text": " And we're going to give it a dyadic function.", "tokens": [400, 321, 434, 516, 281, 976, 309, 257, 14584, 43341, 2445, 13], "temperature": 0.0, "avg_logprob": -0.1659574172076057, "compression_ratio": 1.518918918918919, "no_speech_prob": 4.289062871976057e-06}, {"id": 341, "seek": 177488, "start": 1793.4, "end": 1797.8400000000001, "text": " Applies the function to each unique key in X.", "tokens": [3132, 24119, 264, 2445, 281, 1184, 3845, 2141, 294, 1783, 13], "temperature": 0.0, "avg_logprob": -0.1659574172076057, "compression_ratio": 1.518918918918919, "no_speech_prob": 4.289062871976057e-06}, {"id": 342, "seek": 177488, "start": 1797.8400000000001, "end": 1801.96, "text": " And the major cells, OK, well, maybe the best way to look at this is to look at that competition,", "tokens": [400, 264, 2563, 5438, 11, 2264, 11, 731, 11, 1310, 264, 1151, 636, 281, 574, 412, 341, 307, 281, 574, 412, 300, 6211, 11], "temperature": 0.0, "avg_logprob": -0.1659574172076057, "compression_ratio": 1.518918918918919, "no_speech_prob": 4.289062871976057e-06}, {"id": 343, "seek": 180196, "start": 1801.96, "end": 1807.72, "text": " because it had an example. I think it's OK if we look at how to do some of the phase", "tokens": [570, 309, 632, 364, 1365, 13, 286, 519, 309, 311, 2264, 498, 321, 574, 412, 577, 281, 360, 512, 295, 264, 5574], "temperature": 0.0, "avg_logprob": -0.33672662765260725, "compression_ratio": 1.3445945945945945, "no_speech_prob": 9.424744348507375e-05}, {"id": 344, "seek": 180196, "start": 1807.72, "end": 1811.0, "text": " one stuff together.", "tokens": [472, 1507, 1214, 13], "temperature": 0.0, "avg_logprob": -0.33672662765260725, "compression_ratio": 1.3445945945945945, "no_speech_prob": 9.424744348507375e-05}, {"id": 345, "seek": 180196, "start": 1811.0, "end": 1813.2, "text": " That sounds reasonable.", "tokens": [663, 3263, 10585, 13], "temperature": 0.0, "avg_logprob": -0.33672662765260725, "compression_ratio": 1.3445945945945945, "no_speech_prob": 9.424744348507375e-05}, {"id": 346, "seek": 180196, "start": 1813.2, "end": 1818.04, "text": " Yeah, I can say it's OK. We just want to.", "tokens": [865, 11, 286, 393, 584, 309, 311, 2264, 13, 492, 445, 528, 281, 13], "temperature": 0.0, "avg_logprob": -0.33672662765260725, "compression_ratio": 1.3445945945945945, "no_speech_prob": 9.424744348507375e-05}, {"id": 347, "seek": 181804, "start": 1818.04, "end": 1832.1599999999999, "text": " Oh, don't press that button.", "tokens": [876, 11, 500, 380, 1886, 300, 2960, 13], "temperature": 0.0, "avg_logprob": -0.3324257103172508, "compression_ratio": 1.1858407079646018, "no_speech_prob": 1.1477152838779148e-05}, {"id": 348, "seek": 181804, "start": 1832.1599999999999, "end": 1838.8799999999999, "text": " So write argument that's a character vector representing DNA string and we want to count", "tokens": [407, 2464, 6770, 300, 311, 257, 2517, 8062, 13460, 8272, 6798, 293, 321, 528, 281, 1207], "temperature": 0.0, "avg_logprob": -0.3324257103172508, "compression_ratio": 1.1858407079646018, "no_speech_prob": 1.1477152838779148e-05}, {"id": 349, "seek": 181804, "start": 1838.8799999999999, "end": 1842.12, "text": " each symbol. So.", "tokens": [1184, 5986, 13, 407, 13], "temperature": 0.0, "avg_logprob": -0.3324257103172508, "compression_ratio": 1.1858407079646018, "no_speech_prob": 1.1477152838779148e-05}, {"id": 350, "seek": 184212, "start": 1842.12, "end": 1851.3999999999999, "text": " All right, so maybe we should start with like banana.", "tokens": [1057, 558, 11, 370, 1310, 321, 820, 722, 365, 411, 14194, 13], "temperature": 0.0, "avg_logprob": -0.36088070502647984, "compression_ratio": 1.0609756097560976, "no_speech_prob": 7.071500931488117e-06}, {"id": 351, "seek": 184212, "start": 1851.3999999999999, "end": 1860.1999999999998, "text": " And count each symbol banana. OK.", "tokens": [400, 1207, 1184, 5986, 14194, 13, 2264, 13], "temperature": 0.0, "avg_logprob": -0.36088070502647984, "compression_ratio": 1.0609756097560976, "no_speech_prob": 7.071500931488117e-06}, {"id": 352, "seek": 186020, "start": 1860.2, "end": 1882.56, "text": " Applies a function to each unique key in X and the major cells of Y having that key.", "tokens": [3132, 24119, 257, 2445, 281, 1184, 3845, 2141, 294, 1783, 293, 264, 2563, 5438, 295, 398, 1419, 300, 2141, 13], "temperature": 0.0, "avg_logprob": -0.22133445739746094, "compression_ratio": 1.0632911392405062, "no_speech_prob": 5.507508831215091e-06}, {"id": 353, "seek": 188256, "start": 1882.56, "end": 1900.24, "text": " I see. And here they've got a function which is just inserting a colon between things.", "tokens": [286, 536, 13, 400, 510, 436, 600, 658, 257, 2445, 597, 307, 445, 46567, 257, 8255, 1296, 721, 13], "temperature": 0.0, "avg_logprob": -0.3029761063425164, "compression_ratio": 1.2241379310344827, "no_speech_prob": 3.259956429246813e-05}, {"id": 354, "seek": 188256, "start": 1900.24, "end": 1904.72, "text": " Each unique key in the major cell of Y having that key.", "tokens": [6947, 3845, 2141, 294, 264, 2563, 2815, 295, 398, 1419, 300, 2141, 13], "temperature": 0.0, "avg_logprob": -0.3029761063425164, "compression_ratio": 1.2241379310344827, "no_speech_prob": 3.259956429246813e-05}, {"id": 355, "seek": 190472, "start": 1904.72, "end": 1915.1200000000001, "text": " So if we did like. Let me know if anybody's got a thought about what we could try this", "tokens": [407, 498, 321, 630, 411, 13, 961, 385, 458, 498, 4472, 311, 658, 257, 1194, 466, 437, 321, 727, 853, 341], "temperature": 0.0, "avg_logprob": -0.29538347986009383, "compression_ratio": 1.148936170212766, "no_speech_prob": 7.527043180743931e-06}, {"id": 356, "seek": 190472, "start": 1915.1200000000001, "end": 1916.1200000000001, "text": " for.", "tokens": [337, 13], "temperature": 0.0, "avg_logprob": -0.29538347986009383, "compression_ratio": 1.148936170212766, "no_speech_prob": 7.527043180743931e-06}, {"id": 357, "seek": 190472, "start": 1916.1200000000001, "end": 1918.3600000000001, "text": " This is shift K.", "tokens": [639, 307, 5513, 591, 13], "temperature": 0.0, "avg_logprob": -0.29538347986009383, "compression_ratio": 1.148936170212766, "no_speech_prob": 7.527043180743931e-06}, {"id": 358, "seek": 191836, "start": 1918.36, "end": 1937.8799999999999, "text": " I don't know if we just do like comma.", "tokens": [286, 500, 380, 458, 498, 321, 445, 360, 411, 22117, 13], "temperature": 0.0, "avg_logprob": -0.5856936375300089, "compression_ratio": 0.8852459016393442, "no_speech_prob": 9.222154403687455e-06}, {"id": 359, "seek": 191836, "start": 1937.8799999999999, "end": 1939.8799999999999, "text": " Rank error.", "tokens": [35921, 6713, 13], "temperature": 0.0, "avg_logprob": -0.5856936375300089, "compression_ratio": 0.8852459016393442, "no_speech_prob": 9.222154403687455e-06}, {"id": 360, "seek": 191836, "start": 1939.8799999999999, "end": 1941.6, "text": " OK.", "tokens": [2264, 13], "temperature": 0.0, "avg_logprob": -0.5856936375300089, "compression_ratio": 0.8852459016393442, "no_speech_prob": 9.222154403687455e-06}, {"id": 361, "seek": 194160, "start": 1941.6, "end": 1954.3999999999999, "text": " Function.", "tokens": [11166, 882, 13], "temperature": 0.0, "avg_logprob": -0.5981534123420715, "compression_ratio": 0.813953488372093, "no_speech_prob": 4.756791895488277e-05}, {"id": 362, "seek": 194160, "start": 1954.3999999999999, "end": 1968.76, "text": " He's similar to group by.", "tokens": [634, 311, 2531, 281, 1594, 538, 13], "temperature": 0.0, "avg_logprob": -0.5981534123420715, "compression_ratio": 0.813953488372093, "no_speech_prob": 4.756791895488277e-05}, {"id": 363, "seek": 196876, "start": 1968.76, "end": 1992.48, "text": " Maybe we should try their example.", "tokens": [2704, 321, 820, 853, 641, 1365, 13], "temperature": 0.0, "avg_logprob": -0.10151997479525479, "compression_ratio": 0.8095238095238095, "no_speech_prob": 2.9302336770342663e-05}, {"id": 364, "seek": 199248, "start": 1992.48, "end": 2006.68, "text": " So this banana example might be an even simpler one that one potentially. Put it in the chat.", "tokens": [407, 341, 14194, 1365, 1062, 312, 364, 754, 18587, 472, 300, 472, 7263, 13, 4935, 309, 294, 264, 5081, 13], "temperature": 0.0, "avg_logprob": -0.2340322544700221, "compression_ratio": 1.238938053097345, "no_speech_prob": 3.844549610221293e-06}, {"id": 365, "seek": 199248, "start": 2006.68, "end": 2014.3600000000001, "text": " I guess it's basically the same thing, but OK.", "tokens": [286, 2041, 309, 311, 1936, 264, 912, 551, 11, 457, 2264, 13], "temperature": 0.0, "avg_logprob": -0.2340322544700221, "compression_ratio": 1.238938053097345, "no_speech_prob": 3.844549610221293e-06}, {"id": 366, "seek": 201436, "start": 2014.36, "end": 2031.32, "text": " Here to see what the mapping is doing.", "tokens": [1692, 281, 536, 437, 264, 18350, 307, 884, 13], "temperature": 0.0, "avg_logprob": -0.336921078818185, "compression_ratio": 1.378787878787879, "no_speech_prob": 8.800332579994574e-06}, {"id": 367, "seek": 201436, "start": 2031.32, "end": 2035.84, "text": " So what is it doing? So the B.", "tokens": [407, 437, 307, 309, 884, 30, 407, 264, 363, 13], "temperature": 0.0, "avg_logprob": -0.336921078818185, "compression_ratio": 1.378787878787879, "no_speech_prob": 8.800332579994574e-06}, {"id": 368, "seek": 201436, "start": 2035.84, "end": 2038.7199999999998, "text": " Banana goes with the three.", "tokens": [39588, 1709, 365, 264, 1045, 13], "temperature": 0.0, "avg_logprob": -0.336921078818185, "compression_ratio": 1.378787878787879, "no_speech_prob": 8.800332579994574e-06}, {"id": 369, "seek": 201436, "start": 2038.7199999999998, "end": 2043.8, "text": " Why is the A appearing with one one nine? Oh, it's selecting from like where the A's", "tokens": [1545, 307, 264, 316, 19870, 365, 472, 472, 4949, 30, 876, 11, 309, 311, 18182, 490, 411, 689, 264, 316, 311], "temperature": 0.0, "avg_logprob": -0.336921078818185, "compression_ratio": 1.378787878787879, "no_speech_prob": 8.800332579994574e-06}, {"id": 370, "seek": 204380, "start": 2043.8, "end": 2045.44, "text": " are selecting these.", "tokens": [366, 18182, 613, 13], "temperature": 0.0, "avg_logprob": -0.4006107630354635, "compression_ratio": 1.4545454545454546, "no_speech_prob": 2.0783747459063306e-05}, {"id": 371, "seek": 204380, "start": 2045.44, "end": 2051.2799999999997, "text": " Oh, and then where the ends are.", "tokens": [876, 11, 293, 550, 689, 264, 5314, 366, 13], "temperature": 0.0, "avg_logprob": -0.4006107630354635, "compression_ratio": 1.4545454545454546, "no_speech_prob": 2.0783747459063306e-05}, {"id": 372, "seek": 204380, "start": 2051.2799999999997, "end": 2052.2799999999997, "text": " It's selecting those.", "tokens": [467, 311, 18182, 729, 13], "temperature": 0.0, "avg_logprob": -0.4006107630354635, "compression_ratio": 1.4545454545454546, "no_speech_prob": 2.0783747459063306e-05}, {"id": 373, "seek": 204380, "start": 2052.2799999999997, "end": 2054.2799999999997, "text": " Wait, is that right?", "tokens": [3802, 11, 307, 300, 558, 30], "temperature": 0.0, "avg_logprob": -0.4006107630354635, "compression_ratio": 1.4545454545454546, "no_speech_prob": 2.0783747459063306e-05}, {"id": 374, "seek": 204380, "start": 2054.2799999999997, "end": 2056.4, "text": " No, no, no.", "tokens": [883, 11, 572, 11, 572, 13], "temperature": 0.0, "avg_logprob": -0.4006107630354635, "compression_ratio": 1.4545454545454546, "no_speech_prob": 2.0783747459063306e-05}, {"id": 375, "seek": 204380, "start": 2056.4, "end": 2057.4, "text": " The.", "tokens": [440, 13], "temperature": 0.0, "avg_logprob": -0.4006107630354635, "compression_ratio": 1.4545454545454546, "no_speech_prob": 2.0783747459063306e-05}, {"id": 376, "seek": 204380, "start": 2057.4, "end": 2058.4, "text": " A.", "tokens": [316, 13], "temperature": 0.0, "avg_logprob": -0.4006107630354635, "compression_ratio": 1.4545454545454546, "no_speech_prob": 2.0783747459063306e-05}, {"id": 377, "seek": 204380, "start": 2058.4, "end": 2059.4, "text": " And.", "tokens": [400, 13], "temperature": 0.0, "avg_logprob": -0.4006107630354635, "compression_ratio": 1.4545454545454546, "no_speech_prob": 2.0783747459063306e-05}, {"id": 378, "seek": 204380, "start": 2059.4, "end": 2060.4, "text": " And.", "tokens": [400, 13], "temperature": 0.0, "avg_logprob": -0.4006107630354635, "compression_ratio": 1.4545454545454546, "no_speech_prob": 2.0783747459063306e-05}, {"id": 379, "seek": 204380, "start": 2060.4, "end": 2061.4, "text": " Oh, yeah.", "tokens": [876, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.4006107630354635, "compression_ratio": 1.4545454545454546, "no_speech_prob": 2.0783747459063306e-05}, {"id": 380, "seek": 204380, "start": 2061.4, "end": 2063.2, "text": " Oh, I see.", "tokens": [876, 11, 286, 536, 13], "temperature": 0.0, "avg_logprob": -0.4006107630354635, "compression_ratio": 1.4545454545454546, "no_speech_prob": 2.0783747459063306e-05}, {"id": 381, "seek": 204380, "start": 2063.2, "end": 2072.36, "text": " These are the positions of it's kind of slightly backwards to what I expect.", "tokens": [1981, 366, 264, 8432, 295, 309, 311, 733, 295, 4748, 12204, 281, 437, 286, 2066, 13], "temperature": 0.0, "avg_logprob": -0.4006107630354635, "compression_ratio": 1.4545454545454546, "no_speech_prob": 2.0783747459063306e-05}, {"id": 382, "seek": 207236, "start": 2072.36, "end": 2079.6400000000003, "text": " There's three A's.", "tokens": [821, 311, 1045, 316, 311, 13], "temperature": 0.0, "avg_logprob": -0.48586620428623295, "compression_ratio": 1.086021505376344, "no_speech_prob": 1.1300427104288246e-05}, {"id": 383, "seek": 207236, "start": 2079.6400000000003, "end": 2082.6800000000003, "text": " Oh, and they're in.", "tokens": [876, 11, 293, 436, 434, 294, 13], "temperature": 0.0, "avg_logprob": -0.48586620428623295, "compression_ratio": 1.086021505376344, "no_speech_prob": 1.1300427104288246e-05}, {"id": 384, "seek": 207236, "start": 2082.6800000000003, "end": 2086.48, "text": " Maybe it would be easier actually if we did.", "tokens": [2704, 309, 576, 312, 3571, 767, 498, 321, 630, 13], "temperature": 0.0, "avg_logprob": -0.48586620428623295, "compression_ratio": 1.086021505376344, "no_speech_prob": 1.1300427104288246e-05}, {"id": 385, "seek": 207236, "start": 2086.48, "end": 2095.2400000000002, "text": " I six out of six.", "tokens": [286, 2309, 484, 295, 2309, 13], "temperature": 0.0, "avg_logprob": -0.48586620428623295, "compression_ratio": 1.086021505376344, "no_speech_prob": 1.1300427104288246e-05}, {"id": 386, "seek": 209524, "start": 2095.24, "end": 2108.56, "text": " That's the positions of them.", "tokens": [663, 311, 264, 8432, 295, 552, 13], "temperature": 0.0, "avg_logprob": -0.5534098815917968, "compression_ratio": 0.9583333333333334, "no_speech_prob": 1.6955178580246866e-05}, {"id": 387, "seek": 209524, "start": 2108.56, "end": 2114.4799999999996, "text": " Which means can we just say comma?", "tokens": [3013, 1355, 393, 321, 445, 584, 22117, 30], "temperature": 0.0, "avg_logprob": -0.5534098815917968, "compression_ratio": 0.9583333333333334, "no_speech_prob": 1.6955178580246866e-05}, {"id": 388, "seek": 209524, "start": 2114.4799999999996, "end": 2117.4799999999996, "text": " Yes.", "tokens": [1079, 13], "temperature": 0.0, "avg_logprob": -0.5534098815917968, "compression_ratio": 0.9583333333333334, "no_speech_prob": 1.6955178580246866e-05}, {"id": 389, "seek": 211748, "start": 2117.48, "end": 2128.44, "text": " A comma.", "tokens": [316, 22117, 13], "temperature": 0.0, "avg_logprob": -0.5713730591994065, "compression_ratio": 0.9384615384615385, "no_speech_prob": 3.882275632349774e-05}, {"id": 390, "seek": 211748, "start": 2128.44, "end": 2133.52, "text": " Two, four, six.", "tokens": [4453, 11, 1451, 11, 2309, 13], "temperature": 0.0, "avg_logprob": -0.5713730591994065, "compression_ratio": 0.9384615384615385, "no_speech_prob": 3.882275632349774e-05}, {"id": 391, "seek": 211748, "start": 2133.52, "end": 2140.4, "text": " Yeah, that just concatenates things.", "tokens": [865, 11, 300, 445, 1588, 7186, 1024, 721, 13], "temperature": 0.0, "avg_logprob": -0.5713730591994065, "compression_ratio": 0.9384615384615385, "no_speech_prob": 3.882275632349774e-05}, {"id": 392, "seek": 214040, "start": 2140.4, "end": 2148.2000000000003, "text": " It's a bit like root by.", "tokens": [467, 311, 257, 857, 411, 5593, 538, 13], "temperature": 0.0, "avg_logprob": -0.3183643179880062, "compression_ratio": 1.5, "no_speech_prob": 5.013782811147394e-06}, {"id": 393, "seek": 214040, "start": 2148.2000000000003, "end": 2157.88, "text": " Another example that shows actually applying a function other than kind of a custom function", "tokens": [3996, 1365, 300, 3110, 767, 9275, 257, 2445, 661, 813, 733, 295, 257, 2375, 2445], "temperature": 0.0, "avg_logprob": -0.3183643179880062, "compression_ratio": 1.5, "no_speech_prob": 5.013782811147394e-06}, {"id": 394, "seek": 214040, "start": 2157.88, "end": 2164.08, "text": " in there as well that I think is another functionality we might want to show.", "tokens": [294, 456, 382, 731, 300, 286, 519, 307, 1071, 14980, 321, 1062, 528, 281, 855, 13], "temperature": 0.0, "avg_logprob": -0.3183643179880062, "compression_ratio": 1.5, "no_speech_prob": 5.013782811147394e-06}, {"id": 395, "seek": 214040, "start": 2164.08, "end": 2165.08, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.3183643179880062, "compression_ratio": 1.5, "no_speech_prob": 5.013782811147394e-06}, {"id": 396, "seek": 214040, "start": 2165.08, "end": 2167.32, "text": " Though the I in mine is not an iota.", "tokens": [10404, 264, 286, 294, 3892, 307, 406, 364, 741, 5377, 13], "temperature": 0.0, "avg_logprob": -0.3183643179880062, "compression_ratio": 1.5, "no_speech_prob": 5.013782811147394e-06}, {"id": 397, "seek": 214040, "start": 2167.32, "end": 2170.32, "text": " So it should be.", "tokens": [407, 309, 820, 312, 13], "temperature": 0.0, "avg_logprob": -0.3183643179880062, "compression_ratio": 1.5, "no_speech_prob": 5.013782811147394e-06}, {"id": 398, "seek": 217032, "start": 2170.32, "end": 2173.32, "text": " I see.", "tokens": [286, 536, 13], "temperature": 0.0, "avg_logprob": -0.4024997552235921, "compression_ratio": 1.2386363636363635, "no_speech_prob": 3.761491461773403e-05}, {"id": 399, "seek": 217032, "start": 2173.32, "end": 2186.04, "text": " Oh, I see.", "tokens": [876, 11, 286, 536, 13], "temperature": 0.0, "avg_logprob": -0.4024997552235921, "compression_ratio": 1.2386363636363635, "no_speech_prob": 3.761491461773403e-05}, {"id": 400, "seek": 217032, "start": 2186.04, "end": 2195.7200000000003, "text": " So we are saying like this is column one and this is column two and you find all the unique", "tokens": [407, 321, 366, 1566, 411, 341, 307, 7738, 472, 293, 341, 307, 7738, 732, 293, 291, 915, 439, 264, 3845], "temperature": 0.0, "avg_logprob": -0.4024997552235921, "compression_ratio": 1.2386363636363635, "no_speech_prob": 3.761491461773403e-05}, {"id": 401, "seek": 219572, "start": 2195.72, "end": 2200.8399999999997, "text": " things that are in column one and then you find their corresponding things in column", "tokens": [721, 300, 366, 294, 7738, 472, 293, 550, 291, 915, 641, 11760, 721, 294, 7738], "temperature": 0.0, "avg_logprob": -0.19093201034947446, "compression_ratio": 1.3461538461538463, "no_speech_prob": 2.282690184074454e-05}, {"id": 402, "seek": 219572, "start": 2200.8399999999997, "end": 2208.72, "text": " two and do something to them.", "tokens": [732, 293, 360, 746, 281, 552, 13], "temperature": 0.0, "avg_logprob": -0.19093201034947446, "compression_ratio": 1.3461538461538463, "no_speech_prob": 2.282690184074454e-05}, {"id": 403, "seek": 219572, "start": 2208.72, "end": 2222.8399999999997, "text": " And what if it's monadic?", "tokens": [400, 437, 498, 309, 311, 1108, 43341, 30], "temperature": 0.0, "avg_logprob": -0.19093201034947446, "compression_ratio": 1.3461538461538463, "no_speech_prob": 2.282690184074454e-05}, {"id": 404, "seek": 222284, "start": 2222.84, "end": 2229.28, "text": " I think it will pass the iota six on both sides of it and treated as diet.", "tokens": [286, 519, 309, 486, 1320, 264, 741, 5377, 2309, 322, 1293, 4881, 295, 309, 293, 8668, 382, 6339, 13], "temperature": 0.0, "avg_logprob": -0.2626422643661499, "compression_ratio": 1.5892857142857142, "no_speech_prob": 1.5056742768138065e-06}, {"id": 405, "seek": 222284, "start": 2229.28, "end": 2233.48, "text": " I think the iota six will be alpha and omega.", "tokens": [286, 519, 264, 741, 5377, 2309, 486, 312, 8961, 293, 10498, 13], "temperature": 0.0, "avg_logprob": -0.2626422643661499, "compression_ratio": 1.5892857142857142, "no_speech_prob": 1.5056742768138065e-06}, {"id": 406, "seek": 222284, "start": 2233.48, "end": 2239.2000000000003, "text": " If it's monadic, it just does the results.", "tokens": [759, 309, 311, 1108, 43341, 11, 309, 445, 775, 264, 3542, 13], "temperature": 0.0, "avg_logprob": -0.2626422643661499, "compression_ratio": 1.5892857142857142, "no_speech_prob": 1.5056742768138065e-06}, {"id": 407, "seek": 222284, "start": 2239.2000000000003, "end": 2240.2000000000003, "text": " Gotcha.", "tokens": [42109, 13], "temperature": 0.0, "avg_logprob": -0.2626422643661499, "compression_ratio": 1.5892857142857142, "no_speech_prob": 1.5056742768138065e-06}, {"id": 408, "seek": 222284, "start": 2240.2000000000003, "end": 2247.56, "text": " I thought you meant only something on the right side of the quad equals like no a no", "tokens": [286, 1194, 291, 4140, 787, 746, 322, 264, 558, 1252, 295, 264, 10787, 6915, 411, 572, 257, 572], "temperature": 0.0, "avg_logprob": -0.2626422643661499, "compression_ratio": 1.5892857142857142, "no_speech_prob": 1.5056742768138065e-06}, {"id": 409, "seek": 222284, "start": 2247.56, "end": 2252.08, "text": " left side.", "tokens": [1411, 1252, 13], "temperature": 0.0, "avg_logprob": -0.2626422643661499, "compression_ratio": 1.5892857142857142, "no_speech_prob": 1.5056742768138065e-06}, {"id": 410, "seek": 225208, "start": 2252.08, "end": 2253.08, "text": " So like.", "tokens": [407, 411, 13], "temperature": 0.0, "avg_logprob": -0.5300451191988859, "compression_ratio": 0.90625, "no_speech_prob": 0.00016286963364109397}, {"id": 411, "seek": 225208, "start": 2253.08, "end": 2264.96, "text": " I wonder how you can do this without the defunds.", "tokens": [286, 2441, 577, 291, 393, 360, 341, 1553, 264, 1060, 997, 82, 13], "temperature": 0.0, "avg_logprob": -0.5300451191988859, "compression_ratio": 0.90625, "no_speech_prob": 0.00016286963364109397}, {"id": 412, "seek": 226496, "start": 2264.96, "end": 2291.44, "text": " No.", "tokens": [883, 13], "temperature": 0.0, "avg_logprob": -0.5633569558461508, "compression_ratio": 0.2727272727272727, "no_speech_prob": 3.940381793654524e-05}, {"id": 413, "seek": 229144, "start": 2291.44, "end": 2299.28, "text": " So in that cell 22 where you have the a with the plus thumb, I mean you can also remove", "tokens": [407, 294, 300, 2815, 5853, 689, 291, 362, 264, 257, 365, 264, 1804, 9298, 11, 286, 914, 291, 393, 611, 4159], "temperature": 0.0, "avg_logprob": -0.2775104466606589, "compression_ratio": 1.477124183006536, "no_speech_prob": 1.7775777450879104e-05}, {"id": 414, "seek": 229144, "start": 2299.28, "end": 2304.88, "text": " the a from the left or not the alpha.", "tokens": [264, 257, 490, 264, 1411, 420, 406, 264, 8961, 13], "temperature": 0.0, "avg_logprob": -0.2775104466606589, "compression_ratio": 1.477124183006536, "no_speech_prob": 1.7775777450879104e-05}, {"id": 415, "seek": 229144, "start": 2304.88, "end": 2310.0, "text": " You can move that and it'll pass that.", "tokens": [509, 393, 1286, 300, 293, 309, 603, 1320, 300, 13], "temperature": 0.0, "avg_logprob": -0.2775104466606589, "compression_ratio": 1.477124183006536, "no_speech_prob": 1.7775777450879104e-05}, {"id": 416, "seek": 229144, "start": 2310.0, "end": 2313.04, "text": " That iota six is both alpha and omega to that function.", "tokens": [663, 741, 5377, 2309, 307, 1293, 8961, 293, 10498, 281, 300, 2445, 13], "temperature": 0.0, "avg_logprob": -0.2775104466606589, "compression_ratio": 1.477124183006536, "no_speech_prob": 1.7775777450879104e-05}, {"id": 417, "seek": 229144, "start": 2313.04, "end": 2314.04, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.2775104466606589, "compression_ratio": 1.477124183006536, "no_speech_prob": 1.7775777450879104e-05}, {"id": 418, "seek": 231404, "start": 2314.04, "end": 2329.32, "text": " That's going to be very interesting presumably.", "tokens": [663, 311, 516, 281, 312, 588, 1880, 26742, 13], "temperature": 0.0, "avg_logprob": -0.31133122877641156, "compression_ratio": 1.3305084745762712, "no_speech_prob": 8.8004480858217e-06}, {"id": 419, "seek": 231404, "start": 2329.32, "end": 2333.2799999999997, "text": " What's that doing?", "tokens": [708, 311, 300, 884, 30], "temperature": 0.0, "avg_logprob": -0.31133122877641156, "compression_ratio": 1.3305084745762712, "no_speech_prob": 8.8004480858217e-06}, {"id": 420, "seek": 231404, "start": 2333.2799999999997, "end": 2341.48, "text": " So that is I guess b is the first slot a is second and fourth but where is okay so I guess", "tokens": [407, 300, 307, 286, 2041, 272, 307, 264, 700, 14747, 257, 307, 1150, 293, 6409, 457, 689, 307, 1392, 370, 286, 2041], "temperature": 0.0, "avg_logprob": -0.31133122877641156, "compression_ratio": 1.3305084745762712, "no_speech_prob": 8.8004480858217e-06}, {"id": 421, "seek": 234148, "start": 2341.48, "end": 2347.32, "text": " that just gave you the index locations for each character.", "tokens": [300, 445, 2729, 291, 264, 8186, 9253, 337, 1184, 2517, 13], "temperature": 0.0, "avg_logprob": -0.15731508835502292, "compression_ratio": 1.4659090909090908, "no_speech_prob": 7.76642991695553e-06}, {"id": 422, "seek": 234148, "start": 2347.32, "end": 2351.08, "text": " The key operator applies the function to each unique key.", "tokens": [440, 2141, 12973, 13165, 264, 2445, 281, 1184, 3845, 2141, 13], "temperature": 0.0, "avg_logprob": -0.15731508835502292, "compression_ratio": 1.4659090909090908, "no_speech_prob": 7.76642991695553e-06}, {"id": 423, "seek": 234148, "start": 2351.08, "end": 2355.32, "text": " Oh here we are.", "tokens": [876, 510, 321, 366, 13], "temperature": 0.0, "avg_logprob": -0.15731508835502292, "compression_ratio": 1.4659090909090908, "no_speech_prob": 7.76642991695553e-06}, {"id": 424, "seek": 234148, "start": 2355.32, "end": 2364.44, "text": " It's the same as this but we haven't done this yet have we?", "tokens": [467, 311, 264, 912, 382, 341, 457, 321, 2378, 380, 1096, 341, 1939, 362, 321, 30], "temperature": 0.0, "avg_logprob": -0.15731508835502292, "compression_ratio": 1.4659090909090908, "no_speech_prob": 7.76642991695553e-06}, {"id": 425, "seek": 234148, "start": 2364.44, "end": 2369.3, "text": " Maybe we should do that because it actually comes up quite a lot.", "tokens": [2704, 321, 820, 360, 300, 570, 309, 767, 1487, 493, 1596, 257, 688, 13], "temperature": 0.0, "avg_logprob": -0.15731508835502292, "compression_ratio": 1.4659090909090908, "no_speech_prob": 7.76642991695553e-06}, {"id": 426, "seek": 236930, "start": 2369.3, "end": 2394.36, "text": " So let's just step back for a moment and put it underneath this.", "tokens": [407, 718, 311, 445, 1823, 646, 337, 257, 1623, 293, 829, 309, 7223, 341, 13], "temperature": 0.0, "avg_logprob": -0.2734607144405967, "compression_ratio": 0.9846153846153847, "no_speech_prob": 4.494917448027991e-06}, {"id": 427, "seek": 239436, "start": 2394.36, "end": 2400.2000000000003, "text": " Probably the dyadic form of this is not match.", "tokens": [9210, 264, 14584, 43341, 1254, 295, 341, 307, 406, 2995, 13], "temperature": 0.0, "avg_logprob": -0.4081565632539637, "compression_ratio": 1.1222222222222222, "no_speech_prob": 1.0615645805955864e-05}, {"id": 428, "seek": 239436, "start": 2400.2000000000003, "end": 2401.76, "text": " It is so that's easy.", "tokens": [467, 307, 370, 300, 311, 1858, 13], "temperature": 0.0, "avg_logprob": -0.4081565632539637, "compression_ratio": 1.1222222222222222, "no_speech_prob": 1.0615645805955864e-05}, {"id": 429, "seek": 239436, "start": 2401.76, "end": 2414.44, "text": " But we want the monadic version.", "tokens": [583, 321, 528, 264, 1108, 43341, 3037, 13], "temperature": 0.0, "avg_logprob": -0.4081565632539637, "compression_ratio": 1.1222222222222222, "no_speech_prob": 1.0615645805955864e-05}, {"id": 430, "seek": 241444, "start": 2414.44, "end": 2435.08, "text": " So this is a double quote and I wouldn't have guessed that.", "tokens": [407, 341, 307, 257, 3834, 6513, 293, 286, 2759, 380, 362, 21852, 300, 13], "temperature": 0.0, "avg_logprob": -0.46133910285102, "compression_ratio": 0.921875, "no_speech_prob": 8.062068809522316e-05}, {"id": 431, "seek": 243508, "start": 2435.08, "end": 2460.48, "text": " Okay dyadic is not match so I can just move this.", "tokens": [1033, 14584, 43341, 307, 406, 2995, 370, 286, 393, 445, 1286, 341, 13], "temperature": 0.0, "avg_logprob": -0.2815871883083034, "compression_ratio": 1.183673469387755, "no_speech_prob": 1.1842726962640882e-05}, {"id": 432, "seek": 243508, "start": 2460.48, "end": 2462.08, "text": " Copy that from match I guess.", "tokens": [25653, 300, 490, 2995, 286, 2041, 13], "temperature": 0.0, "avg_logprob": -0.2815871883083034, "compression_ratio": 1.183673469387755, "no_speech_prob": 1.1842726962640882e-05}, {"id": 433, "seek": 243508, "start": 2462.08, "end": 2464.12, "text": " Oh we don't have anything for match.", "tokens": [876, 321, 500, 380, 362, 1340, 337, 2995, 13], "temperature": 0.0, "avg_logprob": -0.2815871883083034, "compression_ratio": 1.183673469387755, "no_speech_prob": 1.1842726962640882e-05}, {"id": 434, "seek": 246412, "start": 2464.12, "end": 2466.92, "text": " Oh we haven't done equal under bar yet either.", "tokens": [876, 321, 2378, 380, 1096, 2681, 833, 2159, 1939, 2139, 13], "temperature": 0.0, "avg_logprob": -0.5252227783203125, "compression_ratio": 1.0888888888888888, "no_speech_prob": 7.410543275909731e-06}, {"id": 435, "seek": 246412, "start": 2466.92, "end": 2470.12, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.5252227783203125, "compression_ratio": 1.0888888888888888, "no_speech_prob": 7.410543275909731e-06}, {"id": 436, "seek": 246412, "start": 2470.12, "end": 2482.14, "text": " So okay.", "tokens": [407, 1392, 13], "temperature": 0.0, "avg_logprob": -0.5252227783203125, "compression_ratio": 1.0888888888888888, "no_speech_prob": 7.410543275909731e-06}, {"id": 437, "seek": 246412, "start": 2482.14, "end": 2488.0, "text": " This one should be pretty easy.", "tokens": [639, 472, 820, 312, 1238, 1858, 13], "temperature": 0.0, "avg_logprob": -0.5252227783203125, "compression_ratio": 1.0888888888888888, "no_speech_prob": 7.410543275909731e-06}, {"id": 438, "seek": 248800, "start": 2488.0, "end": 2502.08, "text": " So this, that's interesting.", "tokens": [407, 341, 11, 300, 311, 1880, 13], "temperature": 0.0, "avg_logprob": -0.653076874582391, "compression_ratio": 0.9344262295081968, "no_speech_prob": 1.643997529754415e-05}, {"id": 439, "seek": 248800, "start": 2502.08, "end": 2507.12, "text": " Now why are these different?", "tokens": [823, 983, 366, 613, 819, 30], "temperature": 0.0, "avg_logprob": -0.653076874582391, "compression_ratio": 0.9344262295081968, "no_speech_prob": 1.643997529754415e-05}, {"id": 440, "seek": 250712, "start": 2507.12, "end": 2520.88, "text": " Oh I guess I'm confused.", "tokens": [876, 286, 2041, 286, 478, 9019, 13], "temperature": 0.0, "avg_logprob": -0.37033445494515554, "compression_ratio": 1.2654867256637168, "no_speech_prob": 8.797189366305247e-06}, {"id": 441, "seek": 250712, "start": 2520.88, "end": 2525.3199999999997, "text": " They look the same.", "tokens": [814, 574, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.37033445494515554, "compression_ratio": 1.2654867256637168, "no_speech_prob": 8.797189366305247e-06}, {"id": 442, "seek": 250712, "start": 2525.3199999999997, "end": 2528.3199999999997, "text": " And so not match.", "tokens": [400, 370, 406, 2995, 13], "temperature": 0.0, "avg_logprob": -0.37033445494515554, "compression_ratio": 1.2654867256637168, "no_speech_prob": 8.797189366305247e-06}, {"id": 443, "seek": 250712, "start": 2528.3199999999997, "end": 2530.3199999999997, "text": " Oh because they do match.", "tokens": [876, 570, 436, 360, 2995, 13], "temperature": 0.0, "avg_logprob": -0.37033445494515554, "compression_ratio": 1.2654867256637168, "no_speech_prob": 8.797189366305247e-06}, {"id": 444, "seek": 250712, "start": 2530.3199999999997, "end": 2531.3199999999997, "text": " Yeah of course.", "tokens": [865, 295, 1164, 13], "temperature": 0.0, "avg_logprob": -0.37033445494515554, "compression_ratio": 1.2654867256637168, "no_speech_prob": 8.797189366305247e-06}, {"id": 445, "seek": 250712, "start": 2531.3199999999997, "end": 2532.3199999999997, "text": " Sorry.", "tokens": [4919, 13], "temperature": 0.0, "avg_logprob": -0.37033445494515554, "compression_ratio": 1.2654867256637168, "no_speech_prob": 8.797189366305247e-06}, {"id": 446, "seek": 250712, "start": 2532.3199999999997, "end": 2533.3199999999997, "text": " So yeah.", "tokens": [407, 1338, 13], "temperature": 0.0, "avg_logprob": -0.37033445494515554, "compression_ratio": 1.2654867256637168, "no_speech_prob": 8.797189366305247e-06}, {"id": 447, "seek": 250712, "start": 2533.3199999999997, "end": 2534.3199999999997, "text": " So not match is false.", "tokens": [407, 406, 2995, 307, 7908, 13], "temperature": 0.0, "avg_logprob": -0.37033445494515554, "compression_ratio": 1.2654867256637168, "no_speech_prob": 8.797189366305247e-06}, {"id": 448, "seek": 253432, "start": 2534.32, "end": 2554.6400000000003, "text": " I wish they had the simplest possible examples first.", "tokens": [286, 3172, 436, 632, 264, 22811, 1944, 5110, 700, 13], "temperature": 0.0, "avg_logprob": -0.24262366575353286, "compression_ratio": 1.3146067415730338, "no_speech_prob": 6.540289632539498e-06}, {"id": 449, "seek": 253432, "start": 2554.6400000000003, "end": 2557.56, "text": " One doesn't match one is false.", "tokens": [1485, 1177, 380, 2995, 472, 307, 7908, 13], "temperature": 0.0, "avg_logprob": -0.24262366575353286, "compression_ratio": 1.3146067415730338, "no_speech_prob": 6.540289632539498e-06}, {"id": 450, "seek": 253432, "start": 2557.56, "end": 2561.36, "text": " One doesn't match zero is true.", "tokens": [1485, 1177, 380, 2995, 4018, 307, 2074, 13], "temperature": 0.0, "avg_logprob": -0.24262366575353286, "compression_ratio": 1.3146067415730338, "no_speech_prob": 6.540289632539498e-06}, {"id": 451, "seek": 256136, "start": 2561.36, "end": 2571.32, "text": " Okay now the point though is that it doesn't kind of like normally equals or not equals", "tokens": [1033, 586, 264, 935, 1673, 307, 300, 309, 1177, 380, 733, 295, 411, 5646, 6915, 420, 406, 6915], "temperature": 0.0, "avg_logprob": -0.12573136911763774, "compression_ratio": 1.6073298429319371, "no_speech_prob": 6.144065082480665e-06}, {"id": 452, "seek": 256136, "start": 2571.32, "end": 2573.28, "text": " is element wise.", "tokens": [307, 4478, 10829, 13], "temperature": 0.0, "avg_logprob": -0.12573136911763774, "compression_ratio": 1.6073298429319371, "no_speech_prob": 6.144065082480665e-06}, {"id": 453, "seek": 256136, "start": 2573.28, "end": 2580.04, "text": " So this would broadcast over this and the answer would be zero zero because one it's", "tokens": [407, 341, 576, 9975, 670, 341, 293, 264, 1867, 576, 312, 4018, 4018, 570, 472, 309, 311], "temperature": 0.0, "avg_logprob": -0.12573136911763774, "compression_ratio": 1.6073298429319371, "no_speech_prob": 6.144065082480665e-06}, {"id": 454, "seek": 256136, "start": 2580.04, "end": 2583.1200000000003, "text": " not true that it doesn't match one.", "tokens": [406, 2074, 300, 309, 1177, 380, 2995, 472, 13], "temperature": 0.0, "avg_logprob": -0.12573136911763774, "compression_ratio": 1.6073298429319371, "no_speech_prob": 6.144065082480665e-06}, {"id": 455, "seek": 256136, "start": 2583.1200000000003, "end": 2589.92, "text": " But this version with the extra line in it checks whether the ranks are the same.", "tokens": [583, 341, 3037, 365, 264, 2857, 1622, 294, 309, 13834, 1968, 264, 21406, 366, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.12573136911763774, "compression_ratio": 1.6073298429319371, "no_speech_prob": 6.144065082480665e-06}, {"id": 456, "seek": 258992, "start": 2589.92, "end": 2593.84, "text": " So it's operating on the whole thing.", "tokens": [407, 309, 311, 7447, 322, 264, 1379, 551, 13], "temperature": 0.0, "avg_logprob": -0.19281600770496188, "compression_ratio": 1.559782608695652, "no_speech_prob": 4.936925051879371e-06}, {"id": 457, "seek": 258992, "start": 2593.84, "end": 2601.2000000000003, "text": " Which presumably there might be one somewhere to get that using the rank operator and not", "tokens": [3013, 26742, 456, 1062, 312, 472, 4079, 281, 483, 300, 1228, 264, 6181, 12973, 293, 406], "temperature": 0.0, "avg_logprob": -0.19281600770496188, "compression_ratio": 1.559782608695652, "no_speech_prob": 4.936925051879371e-06}, {"id": 458, "seek": 258992, "start": 2601.2000000000003, "end": 2602.2000000000003, "text": " equals.", "tokens": [6915, 13], "temperature": 0.0, "avg_logprob": -0.19281600770496188, "compression_ratio": 1.559782608695652, "no_speech_prob": 4.936925051879371e-06}, {"id": 459, "seek": 258992, "start": 2602.2000000000003, "end": 2605.7200000000003, "text": " I don't know if that's true or not.", "tokens": [286, 500, 380, 458, 498, 300, 311, 2074, 420, 406, 13], "temperature": 0.0, "avg_logprob": -0.19281600770496188, "compression_ratio": 1.559782608695652, "no_speech_prob": 4.936925051879371e-06}, {"id": 460, "seek": 258992, "start": 2605.7200000000003, "end": 2612.08, "text": " So not equals is eight.", "tokens": [407, 406, 6915, 307, 3180, 13], "temperature": 0.0, "avg_logprob": -0.19281600770496188, "compression_ratio": 1.559782608695652, "no_speech_prob": 4.936925051879371e-06}, {"id": 461, "seek": 258992, "start": 2612.08, "end": 2613.5, "text": " So yeah.", "tokens": [407, 1338, 13], "temperature": 0.0, "avg_logprob": -0.19281600770496188, "compression_ratio": 1.559782608695652, "no_speech_prob": 4.936925051879371e-06}, {"id": 462, "seek": 258992, "start": 2613.5, "end": 2616.04, "text": " So my point is that normally, well let's just use equals right.", "tokens": [407, 452, 935, 307, 300, 5646, 11, 731, 718, 311, 445, 764, 6915, 558, 13], "temperature": 0.0, "avg_logprob": -0.19281600770496188, "compression_ratio": 1.559782608695652, "no_speech_prob": 4.936925051879371e-06}, {"id": 463, "seek": 258992, "start": 2616.04, "end": 2617.04, "text": " Just two examples.", "tokens": [1449, 732, 5110, 13], "temperature": 0.0, "avg_logprob": -0.19281600770496188, "compression_ratio": 1.559782608695652, "no_speech_prob": 4.936925051879371e-06}, {"id": 464, "seek": 261704, "start": 2617.04, "end": 2619.96, "text": " One is equal to one and one is equal to one.", "tokens": [1485, 307, 2681, 281, 472, 293, 472, 307, 2681, 281, 472, 13], "temperature": 0.0, "avg_logprob": -0.29698103445547597, "compression_ratio": 1.336, "no_speech_prob": 1.922259798448067e-05}, {"id": 465, "seek": 261704, "start": 2619.96, "end": 2626.2799999999997, "text": " Or we could do it like this.", "tokens": [1610, 321, 727, 360, 309, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.29698103445547597, "compression_ratio": 1.336, "no_speech_prob": 1.922259798448067e-05}, {"id": 466, "seek": 261704, "start": 2626.2799999999997, "end": 2634.44, "text": " And then I'm wondering is there some way rank operator was this one over rank?", "tokens": [400, 550, 286, 478, 6359, 307, 456, 512, 636, 6181, 12973, 390, 341, 472, 670, 6181, 30], "temperature": 0.0, "avg_logprob": -0.29698103445547597, "compression_ratio": 1.336, "no_speech_prob": 1.922259798448067e-05}, {"id": 467, "seek": 261704, "start": 2634.44, "end": 2635.44, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.29698103445547597, "compression_ratio": 1.336, "no_speech_prob": 1.922259798448067e-05}, {"id": 468, "seek": 261704, "start": 2635.44, "end": 2636.44, "text": " Shift J.", "tokens": [28304, 508, 13], "temperature": 0.0, "avg_logprob": -0.29698103445547597, "compression_ratio": 1.336, "no_speech_prob": 1.922259798448067e-05}, {"id": 469, "seek": 263644, "start": 2636.44, "end": 2649.08, "text": " Is there some way to say okay we want to take the left hand side as a scalar and the right", "tokens": [1119, 456, 512, 636, 281, 584, 1392, 321, 528, 281, 747, 264, 1411, 1011, 1252, 382, 257, 39684, 293, 264, 558], "temperature": 0.0, "avg_logprob": -0.3770896035271722, "compression_ratio": 1.3076923076923077, "no_speech_prob": 1.496965251135407e-05}, {"id": 470, "seek": 263644, "start": 2649.08, "end": 2654.56, "text": " hand side as a vector?", "tokens": [1011, 1252, 382, 257, 8062, 30], "temperature": 0.0, "avg_logprob": -0.3770896035271722, "compression_ratio": 1.3076923076923077, "no_speech_prob": 1.496965251135407e-05}, {"id": 471, "seek": 263644, "start": 2654.56, "end": 2657.56, "text": " Nope.", "tokens": [12172, 13], "temperature": 0.0, "avg_logprob": -0.3770896035271722, "compression_ratio": 1.3076923076923077, "no_speech_prob": 1.496965251135407e-05}, {"id": 472, "seek": 265756, "start": 2657.56, "end": 2666.64, "text": " Okay I guess I don't know how to do that then.", "tokens": [1033, 286, 2041, 286, 500, 380, 458, 577, 281, 360, 300, 550, 13], "temperature": 0.0, "avg_logprob": -0.28128578265508014, "compression_ratio": 1.2869565217391303, "no_speech_prob": 2.392278656770941e-05}, {"id": 473, "seek": 265756, "start": 2666.64, "end": 2671.72, "text": " Okay anyway so I guess I think this is clear enough.", "tokens": [1033, 4033, 370, 286, 2041, 286, 519, 341, 307, 1850, 1547, 13], "temperature": 0.0, "avg_logprob": -0.28128578265508014, "compression_ratio": 1.2869565217391303, "no_speech_prob": 2.392278656770941e-05}, {"id": 474, "seek": 265756, "start": 2671.72, "end": 2679.64, "text": " And so we could copy that up to match.", "tokens": [400, 370, 321, 727, 5055, 300, 493, 281, 2995, 13], "temperature": 0.0, "avg_logprob": -0.28128578265508014, "compression_ratio": 1.2869565217391303, "no_speech_prob": 2.392278656770941e-05}, {"id": 475, "seek": 265756, "start": 2679.64, "end": 2682.64, "text": " Which is?", "tokens": [3013, 307, 30], "temperature": 0.0, "avg_logprob": -0.28128578265508014, "compression_ratio": 1.2869565217391303, "no_speech_prob": 2.392278656770941e-05}, {"id": 476, "seek": 268264, "start": 2682.64, "end": 2689.8799999999997, "text": " It sounds like.", "tokens": [467, 3263, 411, 13], "temperature": 1.0, "avg_logprob": -2.1757948948786807, "compression_ratio": 0.9791666666666666, "no_speech_prob": 1.3627954103867523e-05}, {"id": 477, "seek": 268264, "start": 2689.8799999999997, "end": 2693.3599999999997, "text": " Problem.", "tokens": [11676, 13], "temperature": 1.0, "avg_logprob": -2.1757948948786807, "compression_ratio": 0.9791666666666666, "no_speech_prob": 1.3627954103867523e-05}, {"id": 478, "seek": 268264, "start": 2693.3599999999997, "end": 2695.46, "text": " Okay.", "tokens": [1033, 13], "temperature": 1.0, "avg_logprob": -2.1757948948786807, "compression_ratio": 0.9791666666666666, "no_speech_prob": 1.3627954103867523e-05}, {"id": 479, "seek": 268264, "start": 2695.46, "end": 2697.72, "text": " Okay.", "tokens": [1033, 13], "temperature": 1.0, "avg_logprob": -2.1757948948786807, "compression_ratio": 0.9791666666666666, "no_speech_prob": 1.3627954103867523e-05}, {"id": 480, "seek": 268264, "start": 2697.72, "end": 2702.94, "text": " Mana kilk.", "tokens": [33711, 5128, 74, 13], "temperature": 1.0, "avg_logprob": -2.1757948948786807, "compression_ratio": 0.9791666666666666, "no_speech_prob": 1.3627954103867523e-05}, {"id": 481, "seek": 270294, "start": 2702.94, "end": 2715.26, "text": " So interestingly, I think the rank operator you have to put in parentheses because otherwise", "tokens": [407, 25873, 11, 286, 519, 264, 6181, 12973, 291, 362, 281, 829, 294, 34153, 570, 5911], "temperature": 0.0, "avg_logprob": -0.19112321807116997, "compression_ratio": 1.3740458015267176, "no_speech_prob": 0.08031953871250153}, {"id": 482, "seek": 270294, "start": 2715.26, "end": 2728.2200000000003, "text": " it interprets that right scalar as part of the vector on the right. At least doing that", "tokens": [309, 17489, 1373, 300, 558, 39684, 382, 644, 295, 264, 8062, 322, 264, 558, 13, 1711, 1935, 884, 300], "temperature": 0.0, "avg_logprob": -0.19112321807116997, "compression_ratio": 1.3740458015267176, "no_speech_prob": 0.08031953871250153}, {"id": 483, "seek": 272822, "start": 2728.22, "end": 2735.8199999999997, "text": " at least gets it not to error. It didn't give me a useful answer but it got closer. Well,", "tokens": [412, 1935, 2170, 309, 406, 281, 6713, 13, 467, 994, 380, 976, 385, 257, 4420, 1867, 457, 309, 658, 4966, 13, 1042, 11], "temperature": 0.0, "avg_logprob": -0.23218455173001432, "compression_ratio": 1.7004830917874396, "no_speech_prob": 6.708740693284199e-05}, {"id": 484, "seek": 272822, "start": 2735.8199999999997, "end": 2743.9399999999996, "text": " I didn't get an error. I got one one. Which is this? Yeah. Oh, gosh. Okay. Zero one. I", "tokens": [286, 994, 380, 483, 364, 6713, 13, 286, 658, 472, 472, 13, 3013, 307, 341, 30, 865, 13, 876, 11, 6502, 13, 1033, 13, 17182, 472, 13, 286], "temperature": 0.0, "avg_logprob": -0.23218455173001432, "compression_ratio": 1.7004830917874396, "no_speech_prob": 6.708740693284199e-05}, {"id": 485, "seek": 272822, "start": 2743.9399999999996, "end": 2750.62, "text": " was trying to get a single result to say this is not equal to this. This whole thing is", "tokens": [390, 1382, 281, 483, 257, 2167, 1874, 281, 584, 341, 307, 406, 2681, 281, 341, 13, 639, 1379, 551, 307], "temperature": 0.0, "avg_logprob": -0.23218455173001432, "compression_ratio": 1.7004830917874396, "no_speech_prob": 6.708740693284199e-05}, {"id": 486, "seek": 272822, "start": 2750.62, "end": 2756.3399999999997, "text": " not equal to this whole thing. Oh, using just the single equals. Okay. I misunderstood.", "tokens": [406, 2681, 281, 341, 1379, 551, 13, 876, 11, 1228, 445, 264, 2167, 6915, 13, 1033, 13, 286, 33870, 13], "temperature": 0.0, "avg_logprob": -0.23218455173001432, "compression_ratio": 1.7004830917874396, "no_speech_prob": 6.708740693284199e-05}, {"id": 487, "seek": 275634, "start": 2756.34, "end": 2763.86, "text": " Yeah, I was trying to get that to be the same as the match command. I wonder do they say", "tokens": [865, 11, 286, 390, 1382, 281, 483, 300, 281, 312, 264, 912, 382, 264, 2995, 5622, 13, 286, 2441, 360, 436, 584], "temperature": 0.0, "avg_logprob": -0.14747759929070106, "compression_ratio": 1.1, "no_speech_prob": 3.5352451959624887e-05}, {"id": 488, "seek": 276386, "start": 2763.86, "end": 2793.78, "text": " whether it's some equivalent match. Doesn't mention it. All right. Okay. So, Tali, I", "tokens": [1968, 309, 311, 512, 10344, 2995, 13, 12955, 380, 2152, 309, 13, 1057, 558, 13, 1033, 13, 407, 11, 314, 5103, 11, 286], "temperature": 0.0, "avg_logprob": -0.48891198193585433, "compression_ratio": 0.9767441860465116, "no_speech_prob": 5.390489241108298e-05}, {"id": 489, "seek": 279378, "start": 2793.78, "end": 2803.86, "text": " think is how you get counts. I've come across this before. And the mnemonic I heard on", "tokens": [519, 307, 577, 291, 483, 14893, 13, 286, 600, 808, 2108, 341, 949, 13, 400, 264, 275, 25989, 11630, 286, 2198, 322], "temperature": 0.0, "avg_logprob": -0.24175832709487605, "compression_ratio": 1.3779527559055118, "no_speech_prob": 1.5205508134386037e-05}, {"id": 490, "seek": 279378, "start": 2803.86, "end": 2810.98, "text": " ArrayCast, remembering this is how you get counts, is imagine rotating it by 90 degrees.", "tokens": [1587, 3458, 34, 525, 11, 20719, 341, 307, 577, 291, 483, 14893, 11, 307, 3811, 19627, 309, 538, 4289, 5310, 13], "temperature": 0.0, "avg_logprob": -0.24175832709487605, "compression_ratio": 1.3779527559055118, "no_speech_prob": 1.5205508134386037e-05}, {"id": 491, "seek": 281098, "start": 2810.98, "end": 2826.82, "text": " It looks like tallying stuff on a whiteboard or a chalkboard or whatever. So, tally. That", "tokens": [467, 1542, 411, 256, 379, 278, 1507, 322, 257, 2418, 3787, 420, 257, 28660, 3787, 420, 2035, 13, 407, 11, 256, 379, 13, 663], "temperature": 0.0, "avg_logprob": -0.1987738949911935, "compression_ratio": 1.0853658536585367, "no_speech_prob": 5.6821909311111085e-06}, {"id": 492, "seek": 282682, "start": 2826.82, "end": 2842.42, "text": " should be... That's three. Got three things, isn't it? What about tallying up a matrix?", "tokens": [820, 312, 485, 663, 311, 1045, 13, 5803, 1045, 721, 11, 1943, 380, 309, 30, 708, 466, 256, 379, 278, 493, 257, 8141, 30], "temperature": 0.0, "avg_logprob": -0.23049570479482975, "compression_ratio": 1.2681159420289856, "no_speech_prob": 2.5465349608566612e-05}, {"id": 493, "seek": 282682, "start": 2842.42, "end": 2853.54, "text": " Okay. It's the number of major cells. There are two rows in a matrix. Yeah. So, imagine", "tokens": [1033, 13, 467, 311, 264, 1230, 295, 2563, 5438, 13, 821, 366, 732, 13241, 294, 257, 8141, 13, 865, 13, 407, 11, 3811], "temperature": 0.0, "avg_logprob": -0.23049570479482975, "compression_ratio": 1.2681159420289856, "no_speech_prob": 2.5465349608566612e-05}, {"id": 494, "seek": 285354, "start": 2853.54, "end": 2861.54, "text": " rotating that by 90 degrees. It looks like you're tallying something. There you go. Yeah,", "tokens": [19627, 300, 538, 4289, 5310, 13, 467, 1542, 411, 291, 434, 256, 379, 278, 746, 13, 821, 291, 352, 13, 865, 11], "temperature": 0.0, "avg_logprob": -0.3113727382585114, "compression_ratio": 1.3049645390070923, "no_speech_prob": 1.3211762961873319e-05}, {"id": 495, "seek": 285354, "start": 2861.54, "end": 2874.06, "text": " number of major cells. Great. That's interesting. It points out that row v is a y-line element", "tokens": [1230, 295, 2563, 5438, 13, 3769, 13, 663, 311, 1880, 13, 467, 2793, 484, 300, 5386, 371, 307, 257, 288, 12, 1889, 4478], "temperature": 0.0, "avg_logprob": -0.3113727382585114, "compression_ratio": 1.3049645390070923, "no_speech_prob": 1.3211762961873319e-05}, {"id": 496, "seek": 287406, "start": 2874.06, "end": 2887.22, "text": " vector, where else tally v is the same thing, but it's a scalar. Minor difference. Might", "tokens": [8062, 11, 689, 1646, 256, 379, 371, 307, 264, 912, 551, 11, 457, 309, 311, 257, 39684, 13, 36117, 2649, 13, 23964], "temperature": 0.0, "avg_logprob": -0.19713660386892465, "compression_ratio": 1.0731707317073171, "no_speech_prob": 1.363118462904822e-05}, {"id": 497, "seek": 288722, "start": 2887.22, "end": 2907.22, "text": " be worth pointing that out. Like so. Okay. And then depth.", "tokens": [312, 3163, 12166, 300, 484, 13, 1743, 370, 13, 1033, 13, 400, 550, 7161, 13], "temperature": 0.0, "avg_logprob": -0.32022579092728465, "compression_ratio": 0.8923076923076924, "no_speech_prob": 4.467838516575284e-05}, {"id": 498, "seek": 290722, "start": 2907.22, "end": 2937.14, "text": " Is the... How much nesting there is, I guess. So, this is a...", "tokens": [1119, 264, 485, 1012, 709, 297, 8714, 456, 307, 11, 286, 2041, 13, 407, 11, 341, 307, 257, 485], "temperature": 0.0, "avg_logprob": -0.2732596604720406, "compression_ratio": 0.96875, "no_speech_prob": 9.603865328244865e-05}, {"id": 499, "seek": 293714, "start": 2937.14, "end": 2944.62, "text": " Array of arrays. So, its depth is 2. This is an array. So, its depth is 1. This is a", "tokens": [1587, 3458, 295, 41011, 13, 407, 11, 1080, 7161, 307, 568, 13, 639, 307, 364, 10225, 13, 407, 11, 1080, 7161, 307, 502, 13, 639, 307, 257], "temperature": 0.0, "avg_logprob": -0.2065114138419168, "compression_ratio": 1.5, "no_speech_prob": 1.7231310266652144e-05}, {"id": 500, "seek": 293714, "start": 2944.62, "end": 2955.02, "text": " scalar. So, its depth is 0. And in the case where they are... Where it's not always 2,", "tokens": [39684, 13, 407, 11, 1080, 7161, 307, 1958, 13, 400, 294, 264, 1389, 689, 436, 366, 485, 2305, 309, 311, 406, 1009, 568, 11], "temperature": 0.0, "avg_logprob": -0.2065114138419168, "compression_ratio": 1.5, "no_speech_prob": 1.7231310266652144e-05}, {"id": 501, "seek": 295502, "start": 2955.02, "end": 2968.62, "text": " then it makes it negative. Okay. So, if all the items, the scalars, it's a simple array.", "tokens": [550, 309, 1669, 309, 3671, 13, 1033, 13, 407, 11, 498, 439, 264, 4754, 11, 264, 15664, 685, 11, 309, 311, 257, 2199, 10225, 13], "temperature": 0.0, "avg_logprob": -0.15269652728376717, "compression_ratio": 1.3888888888888888, "no_speech_prob": 1.750266892486252e-05}, {"id": 502, "seek": 295502, "start": 2968.62, "end": 2981.34, "text": " It has a depth of 1, a scalar depth of 0. And if they're not all scalars, it's nested.", "tokens": [467, 575, 257, 7161, 295, 502, 11, 257, 39684, 7161, 295, 1958, 13, 400, 498, 436, 434, 406, 439, 15664, 685, 11, 309, 311, 15646, 292, 13], "temperature": 0.0, "avg_logprob": -0.15269652728376717, "compression_ratio": 1.3888888888888888, "no_speech_prob": 1.750266892486252e-05}, {"id": 503, "seek": 298134, "start": 2981.34, "end": 2985.82, "text": " Uniform depth, if all its items are the same depth. Okay. And it's not uniform depth, it's", "tokens": [1156, 8629, 7161, 11, 498, 439, 1080, 4754, 366, 264, 912, 7161, 13, 1033, 13, 400, 309, 311, 406, 9452, 7161, 11, 309, 311], "temperature": 0.0, "avg_logprob": -0.2070688141716851, "compression_ratio": 1.3407407407407408, "no_speech_prob": 3.882953751599416e-05}, {"id": 504, "seek": 298134, "start": 2985.82, "end": 3005.9, "text": " negative. Okay. I don't know what quadML is. Okay. So, I guess that hopefully gets us back", "tokens": [3671, 13, 1033, 13, 286, 500, 380, 458, 437, 10787, 12683, 307, 13, 1033, 13, 407, 11, 286, 2041, 300, 4696, 2170, 505, 646], "temperature": 0.0, "avg_logprob": -0.2070688141716851, "compression_ratio": 1.3407407407407408, "no_speech_prob": 3.882953751599416e-05}, {"id": 505, "seek": 300590, "start": 3005.9, "end": 3018.1800000000003, "text": " to where we were, which I don't remember what that is. Oh, we were doing quad equal. And", "tokens": [281, 689, 321, 645, 11, 597, 286, 500, 380, 1604, 437, 300, 307, 13, 876, 11, 321, 645, 884, 10787, 2681, 13, 400], "temperature": 0.0, "avg_logprob": -0.12623189996790002, "compression_ratio": 1.1, "no_speech_prob": 1.9832945326925255e-05}, {"id": 506, "seek": 301818, "start": 3018.18, "end": 3038.74, "text": " I guess that mentioned... Yeah. Okay. So, that is the number of elements in y. Okay.", "tokens": [286, 2041, 300, 2835, 485, 865, 13, 1033, 13, 407, 11, 300, 307, 264, 1230, 295, 4959, 294, 288, 13, 1033, 13], "temperature": 0.0, "avg_logprob": -0.19141681106002242, "compression_ratio": 1.452991452991453, "no_speech_prob": 1.0451244634168688e-05}, {"id": 507, "seek": 301818, "start": 3038.74, "end": 3046.1, "text": " So iota of that. Yeah. Okay. That's exactly what we just saw. So, this is iota of the", "tokens": [407, 741, 5377, 295, 300, 13, 865, 13, 1033, 13, 663, 311, 2293, 437, 321, 445, 1866, 13, 407, 11, 341, 307, 741, 5377, 295, 264], "temperature": 0.0, "avg_logprob": -0.19141681106002242, "compression_ratio": 1.452991452991453, "no_speech_prob": 1.0451244634168688e-05}, {"id": 508, "seek": 304610, "start": 3046.1, "end": 3058.46, "text": " number of elements of a. Yes. iota6 is iota of the number of elements of a. So, that's", "tokens": [1230, 295, 4959, 295, 257, 13, 1079, 13, 741, 5377, 21, 307, 741, 5377, 295, 264, 1230, 295, 4959, 295, 257, 13, 407, 11, 300, 311], "temperature": 0.0, "avg_logprob": -0.08243128349041116, "compression_ratio": 1.5486725663716814, "no_speech_prob": 1.1300723599561024e-05}, {"id": 509, "seek": 304610, "start": 3058.46, "end": 3071.46, "text": " the same as iota of tally of a. And that's why these two are the same. Cool. Did we want", "tokens": [264, 912, 382, 741, 5377, 295, 256, 379, 295, 257, 13, 400, 300, 311, 983, 613, 732, 366, 264, 912, 13, 8561, 13, 2589, 321, 528], "temperature": 0.0, "avg_logprob": -0.08243128349041116, "compression_ratio": 1.5486725663716814, "no_speech_prob": 1.1300723599561024e-05}, {"id": 510, "seek": 307146, "start": 3071.46, "end": 3084.02, "text": " to have a go at trying to do this thing? Anybody have any ideas? So, to jump back, I just looked", "tokens": [281, 362, 257, 352, 412, 1382, 281, 360, 341, 551, 30, 19082, 362, 604, 3487, 30, 407, 11, 281, 3012, 646, 11, 286, 445, 2956], "temperature": 0.0, "avg_logprob": -0.12350081142626311, "compression_ratio": 1.4536082474226804, "no_speech_prob": 4.356812041805824e-06}, {"id": 511, "seek": 307146, "start": 3084.02, "end": 3090.42, "text": " at what that quadML does. Okay. Kind of cool. Kind of don't think I'll ever use it. Okay.", "tokens": [412, 437, 300, 10787, 12683, 775, 13, 1033, 13, 9242, 295, 1627, 13, 9242, 295, 500, 380, 519, 286, 603, 1562, 764, 309, 13, 1033, 13], "temperature": 0.0, "avg_logprob": -0.12350081142626311, "compression_ratio": 1.4536082474226804, "no_speech_prob": 4.356812041805824e-06}, {"id": 512, "seek": 307146, "start": 3090.42, "end": 3098.9, "text": " I guess different versions of APL define partitions differently, particularly when you're doing", "tokens": [286, 2041, 819, 9606, 295, 5372, 43, 6964, 644, 2451, 7614, 11, 4098, 562, 291, 434, 884], "temperature": 0.0, "avg_logprob": -0.12350081142626311, "compression_ratio": 1.4536082474226804, "no_speech_prob": 4.356812041805824e-06}, {"id": 513, "seek": 309890, "start": 3098.9, "end": 3103.5, "text": " like partitioned enclosures and stuff like that. And apparently you can change which", "tokens": [411, 24808, 292, 2058, 9389, 1303, 293, 1507, 411, 300, 13, 400, 7970, 291, 393, 1319, 597], "temperature": 0.0, "avg_logprob": -0.2174732810572574, "compression_ratio": 1.5394736842105263, "no_speech_prob": 5.738183972425759e-05}, {"id": 514, "seek": 309890, "start": 3103.5, "end": 3109.1800000000003, "text": " definition you're using. Sorry, what do you mean by partition? What does partition mean", "tokens": [7123, 291, 434, 1228, 13, 4919, 11, 437, 360, 291, 914, 538, 24808, 30, 708, 775, 24808, 914], "temperature": 0.0, "avg_logprob": -0.2174732810572574, "compression_ratio": 1.5394736842105263, "no_speech_prob": 5.738183972425759e-05}, {"id": 515, "seek": 309890, "start": 3109.1800000000003, "end": 3119.38, "text": " in this case? Like the back tick z or back to capital Z. It's the little c. I think it's", "tokens": [294, 341, 1389, 30, 1743, 264, 646, 5204, 710, 420, 646, 281, 4238, 1176, 13, 467, 311, 264, 707, 269, 13, 286, 519, 309, 311], "temperature": 0.0, "avg_logprob": -0.2174732810572574, "compression_ratio": 1.5394736842105263, "no_speech_prob": 5.738183972425759e-05}, {"id": 516, "seek": 309890, "start": 3119.38, "end": 3124.62, "text": " the called... Oh, okay. We haven't learned that yet. Yeah. Left shoe under bar. So, it...", "tokens": [264, 1219, 485, 876, 11, 1392, 13, 492, 2378, 380, 3264, 300, 1939, 13, 865, 13, 16405, 12796, 833, 2159, 13, 407, 11, 309, 485], "temperature": 0.0, "avg_logprob": -0.2174732810572574, "compression_ratio": 1.5394736842105263, "no_speech_prob": 5.738183972425759e-05}, {"id": 517, "seek": 312462, "start": 3124.62, "end": 3142.06, "text": " All right. I guess we'll come back to that when we look at that. Okay. So, if we did", "tokens": [1057, 558, 13, 286, 2041, 321, 603, 808, 646, 281, 300, 562, 321, 574, 412, 300, 13, 1033, 13, 407, 11, 498, 321, 630], "temperature": 0.0, "avg_logprob": -0.21092263289860316, "compression_ratio": 1.0120481927710843, "no_speech_prob": 3.269504668423906e-05}, {"id": 518, "seek": 314206, "start": 3142.06, "end": 3157.98, "text": " this quaddy thingy, what's it called? Quad equal. She's a king. That tells us the locations", "tokens": [341, 10787, 3173, 551, 88, 11, 437, 311, 309, 1219, 30, 29619, 2681, 13, 1240, 311, 257, 4867, 13, 663, 5112, 505, 264, 9253], "temperature": 0.0, "avg_logprob": -0.2931122098650251, "compression_ratio": 1.0705882352941176, "no_speech_prob": 2.4297754862345755e-05}, {"id": 519, "seek": 315798, "start": 3157.98, "end": 3174.58, "text": " of each of these things. And what did it ask us? Accounts. Oh. Okay. So, would that just", "tokens": [295, 1184, 295, 613, 721, 13, 400, 437, 630, 309, 1029, 505, 30, 24558, 82, 13, 876, 13, 1033, 13, 407, 11, 576, 300, 445], "temperature": 0.0, "avg_logprob": -0.10577041527320599, "compression_ratio": 1.035294117647059, "no_speech_prob": 1.0128396752406843e-05}, {"id": 520, "seek": 317458, "start": 3174.58, "end": 3196.88, "text": " be tally? No. Okay. Why didn't that work? So, do we need to have a function and apply", "tokens": [312, 256, 379, 30, 883, 13, 1033, 13, 1545, 994, 380, 300, 589, 30, 407, 11, 360, 321, 643, 281, 362, 257, 2445, 293, 3079], "temperature": 0.0, "avg_logprob": -0.15808710685143104, "compression_ratio": 1.291044776119403, "no_speech_prob": 2.8129068141424796e-06}, {"id": 521, "seek": 317458, "start": 3196.88, "end": 3204.34, "text": " tally only to the omega argument? Or... Yeah. Was it doing something? Was it like doing", "tokens": [256, 379, 787, 281, 264, 10498, 6770, 30, 1610, 485, 865, 13, 3027, 309, 884, 746, 30, 3027, 309, 411, 884], "temperature": 0.0, "avg_logprob": -0.15808710685143104, "compression_ratio": 1.291044776119403, "no_speech_prob": 2.8129068141424796e-06}, {"id": 522, "seek": 320434, "start": 3204.34, "end": 3214.46, "text": " it dyadically or something like... So, key... Oh, it's a dyadic function. Right, right,", "tokens": [309, 14584, 345, 984, 420, 746, 411, 485, 407, 11, 2141, 485, 876, 11, 309, 311, 257, 14584, 43341, 2445, 13, 1779, 11, 558, 11], "temperature": 0.0, "avg_logprob": -0.20152068556400768, "compression_ratio": 1.4871794871794872, "no_speech_prob": 1.3845805369783193e-05}, {"id": 523, "seek": 320434, "start": 3214.46, "end": 3225.6200000000003, "text": " right. It's a dyadic function. So, we want a way to say we want to use it monadically,", "tokens": [558, 13, 467, 311, 257, 14584, 43341, 2445, 13, 407, 11, 321, 528, 257, 636, 281, 584, 321, 528, 281, 764, 309, 1108, 345, 984, 11], "temperature": 0.0, "avg_logprob": -0.20152068556400768, "compression_ratio": 1.4871794871794872, "no_speech_prob": 1.3845805369783193e-05}, {"id": 524, "seek": 322562, "start": 3225.62, "end": 3238.8199999999997, "text": " which obviously we can do in a rather ugly way by doing it like this. We need the tally", "tokens": [597, 2745, 321, 393, 360, 294, 257, 2831, 12246, 636, 538, 884, 309, 411, 341, 13, 492, 643, 264, 256, 379], "temperature": 0.0, "avg_logprob": -0.11935060501098632, "compression_ratio": 1.1012658227848102, "no_speech_prob": 3.555917828634847e-06}, {"id": 525, "seek": 323882, "start": 3238.82, "end": 3257.1000000000004, "text": " to apply to the omega, but not the alpha, right? That's still wrong. Are you trying", "tokens": [281, 3079, 281, 264, 10498, 11, 457, 406, 264, 8961, 11, 558, 30, 663, 311, 920, 2085, 13, 2014, 291, 1382], "temperature": 0.0, "avg_logprob": -0.22834211025597914, "compression_ratio": 1.3203125, "no_speech_prob": 5.682091341441264e-06}, {"id": 526, "seek": 323882, "start": 3257.1000000000004, "end": 3266.02, "text": " to do tally? Isn't the tally the one with the... Oh, yeah. Yeah, yeah. Just the other", "tokens": [281, 360, 256, 379, 30, 6998, 380, 264, 256, 379, 264, 472, 365, 264, 485, 876, 11, 1338, 13, 865, 11, 1338, 13, 1449, 264, 661], "temperature": 0.0, "avg_logprob": -0.22834211025597914, "compression_ratio": 1.3203125, "no_speech_prob": 5.682091341441264e-06}, {"id": 527, "seek": 326602, "start": 3266.02, "end": 3283.74, "text": " way. Right. And then... Thank you, Tanishk. Okay. Is there a better way to say we want", "tokens": [636, 13, 1779, 13, 400, 550, 485, 1044, 291, 11, 314, 7524, 74, 13, 1033, 13, 1119, 456, 257, 1101, 636, 281, 584, 321, 528], "temperature": 0.0, "avg_logprob": -0.19266311938946062, "compression_ratio": 1.2932330827067668, "no_speech_prob": 9.914177644532174e-05}, {"id": 528, "seek": 326602, "start": 3283.74, "end": 3294.54, "text": " the monadic version? Did you come across a shorter answer to this, Serata, or did you", "tokens": [264, 1108, 43341, 3037, 30, 2589, 291, 808, 2108, 257, 11639, 1867, 281, 341, 11, 4210, 3274, 11, 420, 630, 291], "temperature": 0.0, "avg_logprob": -0.19266311938946062, "compression_ratio": 1.2932330827067668, "no_speech_prob": 9.914177644532174e-05}, {"id": 529, "seek": 329454, "start": 3294.54, "end": 3305.54, "text": " have something like this? We can't hear you. You're muted. I think I have a longer version.", "tokens": [362, 746, 411, 341, 30, 492, 393, 380, 1568, 291, 13, 509, 434, 32808, 13, 286, 519, 286, 362, 257, 2854, 3037, 13], "temperature": 0.0, "avg_logprob": -0.20170950889587402, "compression_ratio": 1.4414893617021276, "no_speech_prob": 0.000184202246600762}, {"id": 530, "seek": 329454, "start": 3305.54, "end": 3316.98, "text": " Oh, okay. Let's see if it works. Well, this is an interesting thing, maybe, to see if", "tokens": [876, 11, 1392, 13, 961, 311, 536, 498, 309, 1985, 13, 1042, 11, 341, 307, 364, 1880, 551, 11, 1310, 11, 281, 536, 498], "temperature": 0.0, "avg_logprob": -0.20170950889587402, "compression_ratio": 1.4414893617021276, "no_speech_prob": 0.000184202246600762}, {"id": 531, "seek": 329454, "start": 3316.98, "end": 3323.54, "text": " anybody can figure out is how to do this without the defunds, because it seems like it should", "tokens": [4472, 393, 2573, 484, 307, 577, 281, 360, 341, 1553, 264, 1060, 997, 82, 11, 570, 309, 2544, 411, 309, 820], "temperature": 0.0, "avg_logprob": -0.20170950889587402, "compression_ratio": 1.4414893617021276, "no_speech_prob": 0.000184202246600762}, {"id": 532, "seek": 332354, "start": 3323.54, "end": 3335.42, "text": " be unnecessary. Okay. This 2012, 17, 21. Oh, it's got to be in a particular order. Right,", "tokens": [312, 19350, 13, 1033, 13, 639, 9125, 11, 3282, 11, 5080, 13, 876, 11, 309, 311, 658, 281, 312, 294, 257, 1729, 1668, 13, 1779, 11], "temperature": 0.0, "avg_logprob": -0.2586982295198261, "compression_ratio": 1.2571428571428571, "no_speech_prob": 4.131782770855352e-05}, {"id": 533, "seek": 332354, "start": 3335.42, "end": 3342.14, "text": " right, right. Which I think is easily fixed by telling it what order we want it in. Is", "tokens": [558, 11, 558, 13, 3013, 286, 519, 307, 3612, 6806, 538, 3585, 309, 437, 1668, 321, 528, 309, 294, 13, 1119], "temperature": 0.0, "avg_logprob": -0.2586982295198261, "compression_ratio": 1.2571428571428571, "no_speech_prob": 4.131782770855352e-05}, {"id": 534, "seek": 334214, "start": 3342.14, "end": 3370.7, "text": " that true? So we want it for A, G, C, T. A, C, G, T. A, C, G, T. Is that... That's not", "tokens": [300, 2074, 30, 407, 321, 528, 309, 337, 316, 11, 460, 11, 383, 11, 314, 13, 316, 11, 383, 11, 460, 11, 314, 13, 316, 11, 383, 11, 460, 11, 314, 13, 1119, 300, 485, 663, 311, 406], "temperature": 0.0, "avg_logprob": -0.1851645310719808, "compression_ratio": 1.178082191780822, "no_speech_prob": 4.355955297796754e-06}, {"id": 535, "seek": 337070, "start": 3370.7, "end": 3387.22, "text": " quite how it works, is it? It's going to go through each of the unique things on the left.", "tokens": [1596, 577, 309, 1985, 11, 307, 309, 30, 467, 311, 516, 281, 352, 807, 1184, 295, 264, 3845, 721, 322, 264, 1411, 13], "temperature": 0.0, "avg_logprob": -0.11436630178380895, "compression_ratio": 1.1111111111111112, "no_speech_prob": 5.825886910315603e-05}, {"id": 536, "seek": 338722, "start": 3387.22, "end": 3402.02, "text": " The right-hand side is... Yeah, the problem has been entered in that order, right? That's", "tokens": [440, 558, 12, 5543, 1252, 307, 485, 865, 11, 264, 1154, 575, 668, 9065, 294, 300, 1668, 11, 558, 30, 663, 311], "temperature": 0.0, "avg_logprob": -0.22457891702651978, "compression_ratio": 1.3191489361702127, "no_speech_prob": 3.069810918532312e-05}, {"id": 537, "seek": 338722, "start": 3402.02, "end": 3410.9399999999996, "text": " why I actually quite long my answer. So actually, it really made you think about how to approach", "tokens": [983, 286, 767, 1596, 938, 452, 1867, 13, 407, 767, 11, 309, 534, 1027, 291, 519, 466, 577, 281, 3109], "temperature": 0.0, "avg_logprob": -0.22457891702651978, "compression_ratio": 1.3191489361702127, "no_speech_prob": 3.069810918532312e-05}, {"id": 538, "seek": 341094, "start": 3410.94, "end": 3419.7000000000003, "text": " the problem. I think it achieved the purpose of how to use the patient as a tool for it.", "tokens": [264, 1154, 13, 286, 519, 309, 11042, 264, 4334, 295, 577, 281, 764, 264, 4537, 382, 257, 2290, 337, 309, 13], "temperature": 0.0, "avg_logprob": -0.28556413519872376, "compression_ratio": 1.5136612021857923, "no_speech_prob": 6.813852087361738e-05}, {"id": 539, "seek": 341094, "start": 3419.7000000000003, "end": 3428.18, "text": " I've got a bad solution. If we do both arguments, we could use that rank up and rank down the,", "tokens": [286, 600, 658, 257, 1578, 3827, 13, 759, 321, 360, 1293, 12869, 11, 321, 727, 764, 300, 6181, 493, 293, 6181, 760, 264, 11], "temperature": 0.0, "avg_logprob": -0.28556413519872376, "compression_ratio": 1.5136612021857923, "no_speech_prob": 6.813852087361738e-05}, {"id": 540, "seek": 341094, "start": 3428.18, "end": 3435.1, "text": " I don't know, the Christmas tree looking ones to sort it and then just select the last column", "tokens": [286, 500, 380, 458, 11, 264, 5272, 4230, 1237, 2306, 281, 1333, 309, 293, 550, 445, 3048, 264, 1036, 7738], "temperature": 0.0, "avg_logprob": -0.28556413519872376, "compression_ratio": 1.5136612021857923, "no_speech_prob": 6.813852087361738e-05}, {"id": 541, "seek": 343510, "start": 3435.1, "end": 3441.8199999999997, "text": " of that. We haven't actually used this yet, but yeah. Okay. There should be an easier", "tokens": [295, 300, 13, 492, 2378, 380, 767, 1143, 341, 1939, 11, 457, 1338, 13, 1033, 13, 821, 820, 312, 364, 3571], "temperature": 0.0, "avg_logprob": -0.20968356499305138, "compression_ratio": 1.2794117647058822, "no_speech_prob": 1.696081926638726e-05}, {"id": 542, "seek": 343510, "start": 3441.8199999999997, "end": 3459.2599999999998, "text": " way, I would think. All right, well, we can get it in the wrong order. Fine. And so that", "tokens": [636, 11, 286, 576, 519, 13, 1057, 558, 11, 731, 11, 321, 393, 483, 309, 294, 264, 2085, 1668, 13, 12024, 13, 400, 370, 300], "temperature": 0.0, "avg_logprob": -0.20968356499305138, "compression_ratio": 1.2794117647058822, "no_speech_prob": 1.696081926638726e-05}, {"id": 543, "seek": 345926, "start": 3459.26, "end": 3467.5, "text": " particular order that's going to be in is going to be A, G, C, T. And the order we want", "tokens": [1729, 1668, 300, 311, 516, 281, 312, 294, 307, 516, 281, 312, 316, 11, 460, 11, 383, 11, 314, 13, 400, 264, 1668, 321, 528], "temperature": 0.0, "avg_logprob": -0.20950828454433343, "compression_ratio": 1.429530201342282, "no_speech_prob": 3.555901002982864e-06}, {"id": 544, "seek": 345926, "start": 3467.5, "end": 3480.6200000000003, "text": " is... Wait, is A, C, G, T? Oh, A, G, C, T. Slightly wrong.", "tokens": [307, 485, 3802, 11, 307, 316, 11, 383, 11, 460, 11, 314, 30, 876, 11, 316, 11, 460, 11, 383, 11, 314, 13, 318, 44872, 2085, 13], "temperature": 0.0, "avg_logprob": -0.20950828454433343, "compression_ratio": 1.429530201342282, "no_speech_prob": 3.555901002982864e-06}, {"id": 545, "seek": 345926, "start": 3480.6200000000003, "end": 3486.1800000000003, "text": " Yes, we could sort that list before we send it in. So if we did...", "tokens": [1079, 11, 321, 727, 1333, 300, 1329, 949, 321, 2845, 309, 294, 13, 407, 498, 321, 630, 485], "temperature": 0.0, "avg_logprob": -0.20950828454433343, "compression_ratio": 1.429530201342282, "no_speech_prob": 3.555901002982864e-06}, {"id": 546, "seek": 348618, "start": 3486.18, "end": 3497.5, "text": " Oh, because that's just sorted. Yeah. So we could just sort that. That's true. And the", "tokens": [876, 11, 570, 300, 311, 445, 25462, 13, 865, 13, 407, 321, 727, 445, 1333, 300, 13, 663, 311, 2074, 13, 400, 264], "temperature": 0.0, "avg_logprob": -0.2220842249253217, "compression_ratio": 1.5688622754491017, "no_speech_prob": 6.143991413409822e-06}, {"id": 547, "seek": 348618, "start": 3497.5, "end": 3501.54, "text": " way we sort things, it's like a grade thing, right?", "tokens": [636, 321, 1333, 721, 11, 309, 311, 411, 257, 7204, 551, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.2220842249253217, "compression_ratio": 1.5688622754491017, "no_speech_prob": 6.143991413409822e-06}, {"id": 548, "seek": 348618, "start": 3501.54, "end": 3506.5, "text": " Yeah, it's to the left of IOTA. It looks like a Christmas tree. Yeah, there.", "tokens": [865, 11, 309, 311, 281, 264, 1411, 295, 286, 5068, 32, 13, 467, 1542, 411, 257, 5272, 4230, 13, 865, 11, 456, 13], "temperature": 0.0, "avg_logprob": -0.2220842249253217, "compression_ratio": 1.5688622754491017, "no_speech_prob": 6.143991413409822e-06}, {"id": 549, "seek": 348618, "start": 3506.5, "end": 3509.66, "text": " Oh, I see. This is how you sort things, is it?", "tokens": [876, 11, 286, 536, 13, 639, 307, 577, 291, 1333, 721, 11, 307, 309, 30], "temperature": 0.0, "avg_logprob": -0.2220842249253217, "compression_ratio": 1.5688622754491017, "no_speech_prob": 6.143991413409822e-06}, {"id": 550, "seek": 350966, "start": 3509.66, "end": 3517.7, "text": " Yeah, now it returns the index locations that you have to index in. It doesn't actually", "tokens": [865, 11, 586, 309, 11247, 264, 8186, 9253, 300, 291, 362, 281, 8186, 294, 13, 467, 1177, 380, 767], "temperature": 0.0, "avg_logprob": -0.13315596787825876, "compression_ratio": 1.4193548387096775, "no_speech_prob": 6.4387313614133745e-06}, {"id": 551, "seek": 350966, "start": 3517.7, "end": 3525.74, "text": " sort the list. It returns the... And so then you need to use the squash quad to get back", "tokens": [1333, 264, 1329, 13, 467, 11247, 264, 485, 400, 370, 550, 291, 643, 281, 764, 264, 30725, 10787, 281, 483, 646], "temperature": 0.0, "avg_logprob": -0.13315596787825876, "compression_ratio": 1.4193548387096775, "no_speech_prob": 6.4387313614133745e-06}, {"id": 552, "seek": 352574, "start": 3525.74, "end": 3548.2999999999997, "text": " to the correct values. So it's not... Is there something like...", "tokens": [281, 264, 3006, 4190, 13, 407, 309, 311, 406, 485, 1119, 456, 746, 411, 485], "temperature": 0.0, "avg_logprob": -0.33645863282053096, "compression_ratio": 0.9552238805970149, "no_speech_prob": 9.078824405150954e-06}, {"id": 553, "seek": 354830, "start": 3548.3, "end": 3567.26, "text": " Aha! This is... This only vaguely rings a bell. But when we did IOTA...", "tokens": [27448, 0, 639, 307, 485, 639, 787, 13501, 48863, 11136, 257, 4549, 13, 583, 562, 321, 630, 286, 5068, 32, 485], "temperature": 0.0, "avg_logprob": -0.318776798248291, "compression_ratio": 0.9861111111111112, "no_speech_prob": 2.144158679584507e-05}, {"id": 554, "seek": 356726, "start": 3567.26, "end": 3593.34, "text": " Dyadic. Yeah, tells you index of... So this is the location of each of these things.", "tokens": [31193, 43341, 13, 865, 11, 5112, 291, 8186, 295, 485, 407, 341, 307, 264, 4914, 295, 1184, 295, 613, 721, 13], "temperature": 0.0, "avg_logprob": -0.3716262435913086, "compression_ratio": 1.037037037037037, "no_speech_prob": 7.410154921672074e-06}, {"id": 555, "seek": 359334, "start": 3593.34, "end": 3614.2200000000003, "text": " I don't know if that helps. So I mean, I guess what we'd do with this, we could somehow get", "tokens": [286, 500, 380, 458, 498, 300, 3665, 13, 407, 286, 914, 11, 286, 2041, 437, 321, 1116, 360, 365, 341, 11, 321, 727, 6063, 483], "temperature": 0.0, "avg_logprob": -0.1616147468829977, "compression_ratio": 1.0705882352941176, "no_speech_prob": 1.02883250292507e-05}, {"id": 556, "seek": 361422, "start": 3614.22, "end": 3627.02, "text": " a sum by each unique number and then use the quad equals to pair that up with ACGT. Maybe.", "tokens": [257, 2408, 538, 1184, 3845, 1230, 293, 550, 764, 264, 10787, 6915, 281, 6119, 300, 493, 365, 8157, 38, 51, 13, 2704, 13], "temperature": 0.0, "avg_logprob": -0.26404940563699475, "compression_ratio": 1.178294573643411, "no_speech_prob": 1.4284730241342913e-05}, {"id": 557, "seek": 361422, "start": 3627.02, "end": 3635.2599999999998, "text": " Kind of making stuff up. I don't know if that'll work, but...", "tokens": [9242, 295, 1455, 1507, 493, 13, 286, 500, 380, 458, 498, 300, 603, 589, 11, 457, 485], "temperature": 0.0, "avg_logprob": -0.26404940563699475, "compression_ratio": 1.178294573643411, "no_speech_prob": 1.4284730241342913e-05}, {"id": 558, "seek": 363526, "start": 3635.26, "end": 3651.82, "text": " That's the order we want it. All right. Well, I might leave it for now. I think it's an", "tokens": [663, 311, 264, 1668, 321, 528, 309, 13, 1057, 558, 13, 1042, 11, 286, 1062, 1856, 309, 337, 586, 13, 286, 519, 309, 311, 364], "temperature": 0.0, "avg_logprob": -0.15100055582383098, "compression_ratio": 1.3333333333333333, "no_speech_prob": 1.593596243765205e-05}, {"id": 559, "seek": 363526, "start": 3651.82, "end": 3662.98, "text": " interesting question again to think about. I mean, that's why we're trying to do all the", "tokens": [1880, 1168, 797, 281, 519, 466, 13, 286, 914, 11, 300, 311, 983, 321, 434, 1382, 281, 360, 439, 264], "temperature": 0.0, "avg_logprob": -0.15100055582383098, "compression_ratio": 1.3333333333333333, "no_speech_prob": 1.593596243765205e-05}, {"id": 560, "seek": 366298, "start": 3662.98, "end": 3673.78, "text": " glyphs is that until you know all the glyphs, we don't have the raw stuff we want.", "tokens": [22633, 950, 82, 307, 300, 1826, 291, 458, 439, 264, 22633, 950, 82, 11, 321, 500, 380, 362, 264, 8936, 1507, 321, 528, 13], "temperature": 0.0, "avg_logprob": -0.23038263881907745, "compression_ratio": 1.5217391304347827, "no_speech_prob": 3.943676711060107e-05}, {"id": 561, "seek": 366298, "start": 3673.78, "end": 3681.22, "text": " Why can't we just sort the... Yeah, go on. Sorry, Tanishk.", "tokens": [1545, 393, 380, 321, 445, 1333, 264, 485, 865, 11, 352, 322, 13, 4919, 11, 314, 7524, 74, 13], "temperature": 0.0, "avg_logprob": -0.23038263881907745, "compression_ratio": 1.5217391304347827, "no_speech_prob": 3.943676711060107e-05}, {"id": 562, "seek": 366298, "start": 3681.22, "end": 3688.02, "text": " Why can't we just sort the array and then do it on the sorted array?", "tokens": [1545, 393, 380, 321, 445, 1333, 264, 10225, 293, 550, 360, 309, 322, 264, 25462, 10225, 30], "temperature": 0.0, "avg_logprob": -0.23038263881907745, "compression_ratio": 1.5217391304347827, "no_speech_prob": 3.943676711060107e-05}, {"id": 563, "seek": 368802, "start": 3688.02, "end": 3703.14, "text": " We can. We just haven't learnt the glyphs to sort with yet.", "tokens": [492, 393, 13, 492, 445, 2378, 380, 18991, 264, 22633, 950, 82, 281, 1333, 365, 1939, 13], "temperature": 0.0, "avg_logprob": -0.20371685958490138, "compression_ratio": 1.2564102564102564, "no_speech_prob": 1.816158714973426e-06}, {"id": 564, "seek": 368802, "start": 3703.14, "end": 3713.98, "text": " They suggest using outer product. Well, maybe that's worth thinking about too. So outer", "tokens": [814, 3402, 1228, 10847, 1674, 13, 1042, 11, 1310, 300, 311, 3163, 1953, 466, 886, 13, 407, 10847], "temperature": 0.0, "avg_logprob": -0.20371685958490138, "compression_ratio": 1.2564102564102564, "no_speech_prob": 1.816158714973426e-06}, {"id": 565, "seek": 371398, "start": 3713.98, "end": 3729.54, "text": " product... So we would have AGCT down the left. And so if we did like outer product of...", "tokens": [1674, 485, 407, 321, 576, 362, 28406, 10259, 760, 264, 1411, 13, 400, 370, 498, 321, 630, 411, 10847, 1674, 295, 485], "temperature": 0.0, "avg_logprob": -0.2749492177423441, "compression_ratio": 1.3435114503816794, "no_speech_prob": 5.4213846851780545e-06}, {"id": 566, "seek": 371398, "start": 3729.54, "end": 3743.22, "text": " Oh, I can see how they're going to do that. So outer product is jot dot. So if I do...", "tokens": [876, 11, 286, 393, 536, 577, 436, 434, 516, 281, 360, 300, 13, 407, 10847, 1674, 307, 27873, 5893, 13, 407, 498, 286, 360, 485], "temperature": 0.0, "avg_logprob": -0.2749492177423441, "compression_ratio": 1.3435114503816794, "no_speech_prob": 5.4213846851780545e-06}, {"id": 567, "seek": 374322, "start": 3743.22, "end": 3768.9399999999996, "text": " jot dot comma. Right? There's that. So if instead I use equals, there's that. Right?", "tokens": [27873, 5893, 22117, 13, 1779, 30, 821, 311, 300, 13, 407, 498, 2602, 286, 764, 6915, 11, 456, 311, 300, 13, 1779, 30], "temperature": 0.0, "avg_logprob": -0.37769377673113785, "compression_ratio": 1.12, "no_speech_prob": 4.934615390084218e-06}, {"id": 568, "seek": 376894, "start": 3768.94, "end": 3777.5, "text": " There's that. Awesome.", "tokens": [821, 311, 300, 13, 10391, 13], "temperature": 0.0, "avg_logprob": -0.23393555176563752, "compression_ratio": 1.092783505154639, "no_speech_prob": 9.81100311037153e-06}, {"id": 569, "seek": 376894, "start": 3777.5, "end": 3792.82, "text": " Okay. Now, again, it'd be nice to do this tacitly, but I don't know how. So this is", "tokens": [1033, 13, 823, 11, 797, 11, 309, 1116, 312, 1481, 281, 360, 341, 25018, 270, 356, 11, 457, 286, 500, 380, 458, 577, 13, 407, 341, 307], "temperature": 0.0, "avg_logprob": -0.23393555176563752, "compression_ratio": 1.092783505154639, "no_speech_prob": 9.81100311037153e-06}, {"id": 570, "seek": 379282, "start": 3792.82, "end": 3799.7000000000003, "text": " going to be ACGT. And then we're going to have the thing that they're passing in.", "tokens": [516, 281, 312, 8157, 38, 51, 13, 400, 550, 321, 434, 516, 281, 362, 264, 551, 300, 436, 434, 8437, 294, 13], "temperature": 0.0, "avg_logprob": -0.2365535045492238, "compression_ratio": 1.3333333333333333, "no_speech_prob": 5.680098183802329e-06}, {"id": 571, "seek": 379282, "start": 3799.7000000000003, "end": 3812.3, "text": " Let me say it'd be nice to do it tacitly. Do you know of any reason why the tacit stuff", "tokens": [961, 385, 584, 309, 1116, 312, 1481, 281, 360, 309, 25018, 270, 356, 13, 1144, 291, 458, 295, 604, 1778, 983, 264, 25018, 270, 1507], "temperature": 0.0, "avg_logprob": -0.2365535045492238, "compression_ratio": 1.3333333333333333, "no_speech_prob": 5.680098183802329e-06}, {"id": 572, "seek": 379282, "start": 3812.3, "end": 3816.94, "text": " is better?", "tokens": [307, 1101, 30], "temperature": 0.0, "avg_logprob": -0.2365535045492238, "compression_ratio": 1.3333333333333333, "no_speech_prob": 5.680098183802329e-06}, {"id": 573, "seek": 381694, "start": 3816.94, "end": 3825.2200000000003, "text": " Okay. So that's the whole like... That's like asking is wildcard import in Python better?", "tokens": [1033, 13, 407, 300, 311, 264, 1379, 411, 485, 663, 311, 411, 3365, 307, 4868, 22259, 974, 294, 15329, 1101, 30], "temperature": 0.0, "avg_logprob": -0.34075789018110797, "compression_ratio": 1.486842105263158, "no_speech_prob": 1.1841801097034477e-05}, {"id": 574, "seek": 381694, "start": 3825.2200000000003, "end": 3827.5, "text": " That's like a can of worms.", "tokens": [663, 311, 411, 257, 393, 295, 28271, 13], "temperature": 0.0, "avg_logprob": -0.34075789018110797, "compression_ratio": 1.486842105263158, "no_speech_prob": 1.1841801097034477e-05}, {"id": 575, "seek": 381694, "start": 3827.5, "end": 3831.3, "text": " Yeah, I asked that on the APL Discord. I realised that.", "tokens": [865, 11, 286, 2351, 300, 322, 264, 5372, 43, 32623, 13, 286, 21337, 300, 13], "temperature": 0.0, "avg_logprob": -0.34075789018110797, "compression_ratio": 1.486842105263158, "no_speech_prob": 1.1841801097034477e-05}, {"id": 576, "seek": 381694, "start": 3831.3, "end": 3832.3, "text": " Oh, there you go. Okay.", "tokens": [876, 11, 456, 291, 352, 13, 1033, 13], "temperature": 0.0, "avg_logprob": -0.34075789018110797, "compression_ratio": 1.486842105263158, "no_speech_prob": 1.1841801097034477e-05}, {"id": 577, "seek": 381694, "start": 3832.3, "end": 3838.2200000000003, "text": " Not a helpful question for me to ask. I was hoping I could get a better answer here.", "tokens": [1726, 257, 4961, 1168, 337, 385, 281, 1029, 13, 286, 390, 7159, 286, 727, 483, 257, 1101, 1867, 510, 13], "temperature": 0.0, "avg_logprob": -0.34075789018110797, "compression_ratio": 1.486842105263158, "no_speech_prob": 1.1841801097034477e-05}, {"id": 578, "seek": 381694, "start": 3838.2200000000003, "end": 3842.2200000000003, "text": " Hello, Americans. What do you guys think of gun control?", "tokens": [2425, 11, 6280, 13, 708, 360, 291, 1074, 519, 295, 3874, 1969, 30], "temperature": 0.0, "avg_logprob": -0.34075789018110797, "compression_ratio": 1.486842105263158, "no_speech_prob": 1.1841801097034477e-05}, {"id": 579, "seek": 384222, "start": 3842.22, "end": 3847.7, "text": " That was about the reaction I got.", "tokens": [663, 390, 466, 264, 5480, 286, 658, 13], "temperature": 0.0, "avg_logprob": -0.20105448522065816, "compression_ratio": 1.504950495049505, "no_speech_prob": 2.212248364230618e-05}, {"id": 580, "seek": 384222, "start": 3847.7, "end": 3853.98, "text": " Yeah. Okay. So there was an earlier raycast with Henry Rich, who's the guy who mainly", "tokens": [865, 13, 1033, 13, 407, 456, 390, 364, 3071, 18592, 3734, 365, 11085, 6781, 11, 567, 311, 264, 2146, 567, 8704], "temperature": 0.0, "avg_logprob": -0.20105448522065816, "compression_ratio": 1.504950495049505, "no_speech_prob": 2.212248364230618e-05}, {"id": 581, "seek": 384222, "start": 3853.98, "end": 3858.8999999999996, "text": " implements or almost entirely implements J nowadays. And he said he basically never...", "tokens": [704, 17988, 420, 1920, 7696, 704, 17988, 508, 13434, 13, 400, 415, 848, 415, 1936, 1128, 485], "temperature": 0.0, "avg_logprob": -0.20105448522065816, "compression_ratio": 1.504950495049505, "no_speech_prob": 2.212248364230618e-05}, {"id": 582, "seek": 384222, "start": 3858.8999999999996, "end": 3864.2999999999997, "text": " not never, but he very rarely uses tacit programming. The tacit meaning without the curly braces", "tokens": [406, 1128, 11, 457, 415, 588, 13752, 4960, 25018, 270, 9410, 13, 440, 25018, 270, 3620, 1553, 264, 32066, 41537], "temperature": 0.0, "avg_logprob": -0.20105448522065816, "compression_ratio": 1.504950495049505, "no_speech_prob": 2.212248364230618e-05}, {"id": 583, "seek": 386430, "start": 3864.3, "end": 3876.02, "text": " and omegas and whatnot. So, you know, that's one point of view. Aaron Hsu, who is the creator", "tokens": [293, 3406, 1146, 296, 293, 25882, 13, 407, 11, 291, 458, 11, 300, 311, 472, 935, 295, 1910, 13, 14018, 389, 15091, 11, 567, 307, 264, 14181], "temperature": 0.0, "avg_logprob": -0.19533339643900374, "compression_ratio": 1.5397489539748954, "no_speech_prob": 7.527361503889551e-06}, {"id": 584, "seek": 386430, "start": 3876.02, "end": 3884.3, "text": " of CodeDee funds, the GPL compiler written in slash for APL, uses a lot of tacit programming.", "tokens": [295, 15549, 35, 1653, 8271, 11, 264, 460, 21593, 31958, 3720, 294, 17330, 337, 5372, 43, 11, 4960, 257, 688, 295, 25018, 270, 9410, 13], "temperature": 0.0, "avg_logprob": -0.19533339643900374, "compression_ratio": 1.5397489539748954, "no_speech_prob": 7.527361503889551e-06}, {"id": 585, "seek": 386430, "start": 3884.3, "end": 3887.94, "text": " So Henry Rich's view was like, oh, it's too hard and it gets just too complicated. And", "tokens": [407, 11085, 6781, 311, 1910, 390, 411, 11, 1954, 11, 309, 311, 886, 1152, 293, 309, 2170, 445, 886, 6179, 13, 400], "temperature": 0.0, "avg_logprob": -0.19533339643900374, "compression_ratio": 1.5397489539748954, "no_speech_prob": 7.527361503889551e-06}, {"id": 586, "seek": 386430, "start": 3887.94, "end": 3893.94, "text": " I said, I don't want to do that. Or else Aaron's view was like, well, you know, I want my APL", "tokens": [286, 848, 11, 286, 500, 380, 528, 281, 360, 300, 13, 1610, 1646, 14018, 311, 1910, 390, 411, 11, 731, 11, 291, 458, 11, 286, 528, 452, 5372, 43], "temperature": 0.0, "avg_logprob": -0.19533339643900374, "compression_ratio": 1.5397489539748954, "no_speech_prob": 7.527361503889551e-06}, {"id": 587, "seek": 389394, "start": 3893.94, "end": 3899.38, "text": " to look like APL and I can kind of create nice small neat idioms and I can combine them", "tokens": [281, 574, 411, 5372, 43, 293, 286, 393, 733, 295, 1884, 1481, 1359, 10654, 18014, 4785, 293, 286, 393, 10432, 552], "temperature": 0.0, "avg_logprob": -0.16247273893917308, "compression_ratio": 1.5444444444444445, "no_speech_prob": 5.593726200459059e-06}, {"id": 588, "seek": 389394, "start": 3899.38, "end": 3904.38, "text": " together.", "tokens": [1214, 13], "temperature": 0.0, "avg_logprob": -0.16247273893917308, "compression_ratio": 1.5444444444444445, "no_speech_prob": 5.593726200459059e-06}, {"id": 589, "seek": 389394, "start": 3904.38, "end": 3911.94, "text": " The kind of overall sense I get from listening to a raycast is a lot of people tend to feel", "tokens": [440, 733, 295, 4787, 2020, 286, 483, 490, 4764, 281, 257, 18592, 3734, 307, 257, 688, 295, 561, 3928, 281, 841], "temperature": 0.0, "avg_logprob": -0.16247273893917308, "compression_ratio": 1.5444444444444445, "no_speech_prob": 5.593726200459059e-06}, {"id": 590, "seek": 389394, "start": 3911.94, "end": 3918.06, "text": " like stringing together four or five functions and operators is perfectly reasonable and", "tokens": [411, 6798, 278, 1214, 1451, 420, 1732, 6828, 293, 19077, 307, 6239, 10585, 293], "temperature": 0.0, "avg_logprob": -0.16247273893917308, "compression_ratio": 1.5444444444444445, "no_speech_prob": 5.593726200459059e-06}, {"id": 591, "seek": 391806, "start": 3918.06, "end": 3924.66, "text": " normal. And if you go too much past that, it starts to get confusing. So I don't know.", "tokens": [2710, 13, 400, 498, 291, 352, 886, 709, 1791, 300, 11, 309, 3719, 281, 483, 13181, 13, 407, 286, 500, 380, 458, 13], "temperature": 0.0, "avg_logprob": -0.13382482528686523, "compression_ratio": 1.5884955752212389, "no_speech_prob": 7.182721219578525e-06}, {"id": 592, "seek": 391806, "start": 3924.66, "end": 3929.86, "text": " I mean, Aaron's like seems like a particularly smart guy who's particularly good at APL and", "tokens": [286, 914, 11, 14018, 311, 411, 2544, 411, 257, 4098, 4069, 2146, 567, 311, 4098, 665, 412, 5372, 43, 293], "temperature": 0.0, "avg_logprob": -0.13382482528686523, "compression_ratio": 1.5884955752212389, "no_speech_prob": 7.182721219578525e-06}, {"id": 593, "seek": 391806, "start": 3929.86, "end": 3935.34, "text": " writes a lot of it. And so it might be just one of these comfort things that at some point", "tokens": [13657, 257, 688, 295, 309, 13, 400, 370, 309, 1062, 312, 445, 472, 295, 613, 3400, 721, 300, 412, 512, 935], "temperature": 0.0, "avg_logprob": -0.13382482528686523, "compression_ratio": 1.5884955752212389, "no_speech_prob": 7.182721219578525e-06}, {"id": 594, "seek": 391806, "start": 3935.34, "end": 3940.62, "text": " at which tacit functions are easy. One of the benefits of tacit functions is that they're", "tokens": [412, 597, 25018, 270, 6828, 366, 1858, 13, 1485, 295, 264, 5311, 295, 25018, 270, 6828, 307, 300, 436, 434], "temperature": 0.0, "avg_logprob": -0.13382482528686523, "compression_ratio": 1.5884955752212389, "no_speech_prob": 7.182721219578525e-06}, {"id": 595, "seek": 394062, "start": 3940.62, "end": 3951.98, "text": " invertible. So you can use the negative power operator to get the inverse.", "tokens": [33966, 964, 13, 407, 291, 393, 764, 264, 3671, 1347, 12973, 281, 483, 264, 17340, 13], "temperature": 0.0, "avg_logprob": -0.18319014805119213, "compression_ratio": 1.3278688524590163, "no_speech_prob": 7.888318577897735e-06}, {"id": 596, "seek": 394062, "start": 3951.98, "end": 3963.1, "text": " Roger Hui, who implemented a lot of dialogue, apparently he preferred defunds and a lot", "tokens": [17666, 39340, 11, 567, 12270, 257, 688, 295, 10221, 11, 7970, 415, 16494, 1060, 997, 82, 293, 257, 688], "temperature": 0.0, "avg_logprob": -0.18319014805119213, "compression_ratio": 1.3278688524590163, "no_speech_prob": 7.888318577897735e-06}, {"id": 597, "seek": 396310, "start": 3963.1, "end": 3977.5, "text": " of the faster idiomatic versions in APL are only faster if you use defunds. For me, it's", "tokens": [295, 264, 4663, 18014, 13143, 9606, 294, 5372, 43, 366, 787, 4663, 498, 291, 764, 1060, 997, 82, 13, 1171, 385, 11, 309, 311], "temperature": 0.0, "avg_logprob": -0.2288964335123698, "compression_ratio": 1.4232804232804233, "no_speech_prob": 4.425286533660255e-06}, {"id": 598, "seek": 396310, "start": 3977.5, "end": 3983.86, "text": " more like reference, I guess. Yeah. But the reason I wanted to do it was just to test", "tokens": [544, 411, 6408, 11, 286, 2041, 13, 865, 13, 583, 264, 1778, 286, 1415, 281, 360, 309, 390, 445, 281, 1500], "temperature": 0.0, "avg_logprob": -0.2288964335123698, "compression_ratio": 1.4232804232804233, "no_speech_prob": 4.425286533660255e-06}, {"id": 599, "seek": 396310, "start": 3983.86, "end": 3992.38, "text": " my understanding of APL. You know, I think it's a useful exercise to try it like, particularly", "tokens": [452, 3701, 295, 5372, 43, 13, 509, 458, 11, 286, 519, 309, 311, 257, 4420, 5380, 281, 853, 309, 411, 11, 4098], "temperature": 0.0, "avg_logprob": -0.2288964335123698, "compression_ratio": 1.4232804232804233, "no_speech_prob": 4.425286533660255e-06}, {"id": 600, "seek": 399238, "start": 3992.38, "end": 3995.82, "text": " because I'm really bad at understanding how these things are kind of parsed and strung", "tokens": [570, 286, 478, 534, 1578, 412, 3701, 577, 613, 721, 366, 733, 295, 21156, 292, 293, 1056, 1063], "temperature": 0.0, "avg_logprob": -0.14324069023132324, "compression_ratio": 1.3828125, "no_speech_prob": 2.6268127840012312e-05}, {"id": 601, "seek": 399238, "start": 3995.82, "end": 4007.3, "text": " together. I'm just looking at this now where we're post-processing something and then this", "tokens": [1214, 13, 286, 478, 445, 1237, 412, 341, 586, 689, 321, 434, 2183, 12, 41075, 278, 746, 293, 550, 341], "temperature": 0.0, "avg_logprob": -0.14324069023132324, "compression_ratio": 1.3828125, "no_speech_prob": 2.6268127840012312e-05}, {"id": 602, "seek": 400730, "start": 4007.3, "end": 4027.2200000000003, "text": " is applied diatically. Yeah, yeah, I don't know. Submit. Oh, consider cases like A as", "tokens": [307, 6456, 1026, 5030, 13, 865, 11, 1338, 11, 286, 500, 380, 458, 13, 8511, 3508, 13, 876, 11, 1949, 3331, 411, 316, 382], "temperature": 0.0, "avg_logprob": -0.23088387080601283, "compression_ratio": 1.0, "no_speech_prob": 1.568847437738441e-05}, {"id": 603, "seek": 402722, "start": 4027.22, "end": 4057.14, "text": " a right argument. Oh. Yeah. That's a problem.", "tokens": [257, 558, 6770, 13, 876, 13, 865, 13, 663, 311, 257, 1154, 13], "temperature": 0.0, "avg_logprob": -0.5060689028571633, "compression_ratio": 0.8823529411764706, "no_speech_prob": 0.0001552559551782906}, {"id": 604, "seek": 405714, "start": 4057.14, "end": 4074.2599999999998, "text": " So if you think about the outer product, well, you can see it. Why didn't that work? Oh,", "tokens": [407, 498, 291, 519, 466, 264, 10847, 1674, 11, 731, 11, 291, 393, 536, 309, 13, 1545, 994, 380, 300, 589, 30, 876, 11], "temperature": 0.0, "avg_logprob": -0.304743800844465, "compression_ratio": 1.0232558139534884, "no_speech_prob": 2.2121726942714304e-05}, {"id": 605, "seek": 407426, "start": 4074.26, "end": 4087.5, "text": " that's a plus slash that, of course. You know, you don't have each of the rows represented", "tokens": [300, 311, 257, 1804, 17330, 300, 11, 295, 1164, 13, 509, 458, 11, 291, 500, 380, 362, 1184, 295, 264, 13241, 10379], "temperature": 0.0, "avg_logprob": -0.27464073675650136, "compression_ratio": 1.3146853146853146, "no_speech_prob": 1.3005689652345609e-05}, {"id": 606, "seek": 407426, "start": 4087.5, "end": 4095.78, "text": " there. So yeah, edge cases don't work. Anyway, I feel like we've had a good go at it. Interesting", "tokens": [456, 13, 407, 1338, 11, 4691, 3331, 500, 380, 589, 13, 5684, 11, 286, 841, 411, 321, 600, 632, 257, 665, 352, 412, 309, 13, 14711], "temperature": 0.0, "avg_logprob": -0.27464073675650136, "compression_ratio": 1.3146853146853146, "no_speech_prob": 1.3005689652345609e-05}, {"id": 607, "seek": 409578, "start": 4095.78, "end": 4107.66, "text": " here, what do you folks find? It would also probably be an issue with the", "tokens": [510, 11, 437, 360, 291, 4024, 915, 30, 467, 576, 611, 1391, 312, 364, 2734, 365, 264], "temperature": 0.0, "avg_logprob": -0.23033260880855091, "compression_ratio": 1.4285714285714286, "no_speech_prob": 2.078283068840392e-05}, {"id": 608, "seek": 409578, "start": 4107.66, "end": 4116.02, "text": " other approach of using the key, right? Like if we were to sort the array and then use", "tokens": [661, 3109, 295, 1228, 264, 2141, 11, 558, 30, 1743, 498, 321, 645, 281, 1333, 264, 10225, 293, 550, 764], "temperature": 0.0, "avg_logprob": -0.23033260880855091, "compression_ratio": 1.4285714285714286, "no_speech_prob": 2.078283068840392e-05}, {"id": 609, "seek": 409578, "start": 4116.02, "end": 4120.02, "text": " key on it, it would probably have the same issue.", "tokens": [2141, 322, 309, 11, 309, 576, 1391, 362, 264, 912, 2734, 13], "temperature": 0.0, "avg_logprob": -0.23033260880855091, "compression_ratio": 1.4285714285714286, "no_speech_prob": 2.078283068840392e-05}, {"id": 610, "seek": 412002, "start": 4120.02, "end": 4140.18, "text": " Well, you kind of want the left-hand side to be, you know, ACGT or something and then...", "tokens": [1042, 11, 291, 733, 295, 528, 264, 1411, 12, 5543, 1252, 281, 312, 11, 291, 458, 11, 8157, 38, 51, 420, 746, 293, 550, 485], "temperature": 0.0, "avg_logprob": -0.22894089797447467, "compression_ratio": 1.0232558139534884, "no_speech_prob": 1.833973146858625e-05}, {"id": 611, "seek": 414018, "start": 4140.18, "end": 4150.46, "text": " I guess you could look at ACGT, check if it's a member of your... in your string and if", "tokens": [286, 2041, 291, 727, 574, 412, 8157, 38, 51, 11, 1520, 498, 309, 311, 257, 4006, 295, 428, 485, 294, 428, 6798, 293, 498], "temperature": 0.0, "avg_logprob": -0.28110520044962567, "compression_ratio": 1.3757575757575757, "no_speech_prob": 3.844857019430492e-06}, {"id": 612, "seek": 414018, "start": 4150.46, "end": 4159.54, "text": " it is not, then it'll give... I guess, I don't know.", "tokens": [309, 307, 406, 11, 550, 309, 603, 976, 485, 286, 2041, 11, 286, 500, 380, 458, 13], "temperature": 0.0, "avg_logprob": -0.28110520044962567, "compression_ratio": 1.3757575757575757, "no_speech_prob": 3.844857019430492e-06}, {"id": 613, "seek": 414018, "start": 4159.54, "end": 4165.06, "text": " Okay, so there's slash, right? Which is... what was it? Backslash something? Where was", "tokens": [1033, 11, 370, 456, 311, 17330, 11, 558, 30, 3013, 307, 485, 437, 390, 309, 30, 5833, 10418, 1299, 746, 30, 2305, 390], "temperature": 0.0, "avg_logprob": -0.28110520044962567, "compression_ratio": 1.3757575757575757, "no_speech_prob": 3.844857019430492e-06}, {"id": 614, "seek": 416506, "start": 4165.06, "end": 4179.620000000001, "text": " that thing that was like... or was it iota? Where? iota underbar is where? iota underbar.", "tokens": [300, 551, 300, 390, 411, 485, 420, 390, 309, 741, 5377, 30, 2305, 30, 741, 5377, 833, 5356, 307, 689, 30, 741, 5377, 833, 5356, 13], "temperature": 0.0, "avg_logprob": -0.43322699864705405, "compression_ratio": 1.2535211267605635, "no_speech_prob": 8.395767508773133e-06}, {"id": 615, "seek": 417962, "start": 4179.62, "end": 4208.7, "text": " If you had... just a... yeah, no, it still doesn't work.", "tokens": [759, 291, 632, 485, 445, 257, 485, 1338, 11, 572, 11, 309, 920, 1177, 380, 589, 13], "temperature": 0.0, "avg_logprob": -0.44540155501592726, "compression_ratio": 0.9180327868852459, "no_speech_prob": 2.1092659153509885e-05}, {"id": 616, "seek": 420870, "start": 4208.7, "end": 4224.26, "text": " So you want to go through each of ACGT. Is it possible to use it just with equals? So", "tokens": [407, 291, 528, 281, 352, 807, 1184, 295, 8157, 38, 51, 13, 1119, 309, 1944, 281, 764, 309, 445, 365, 6915, 30, 407], "temperature": 0.0, "avg_logprob": -0.1087178389231364, "compression_ratio": 1.0119047619047619, "no_speech_prob": 3.905282028426882e-06}, {"id": 617, "seek": 422426, "start": 4224.26, "end": 4242.900000000001, "text": " A equals... well C equals A and I want to do that... is this rank? Yeah, I want to do", "tokens": [316, 6915, 485, 731, 383, 6915, 316, 293, 286, 528, 281, 360, 300, 485, 307, 341, 6181, 30, 865, 11, 286, 528, 281, 360], "temperature": 0.0, "avg_logprob": -0.25801329953329905, "compression_ratio": 1.1805555555555556, "no_speech_prob": 3.1381034659716533e-06}, {"id": 618, "seek": 424290, "start": 4242.9, "end": 4256.82, "text": " that for each thing... no, for the whole thing on the right left and for each thing on the", "tokens": [300, 337, 1184, 551, 485, 572, 11, 337, 264, 1379, 551, 322, 264, 558, 1411, 293, 337, 1184, 551, 322, 264], "temperature": 0.0, "avg_logprob": -0.25015165494835895, "compression_ratio": 1.456896551724138, "no_speech_prob": 8.012562830117531e-06}, {"id": 619, "seek": 424290, "start": 4256.82, "end": 4265.139999999999, "text": " right. Can you do something like that? Oh, that looks interesting, doesn't it?", "tokens": [558, 13, 1664, 291, 360, 746, 411, 300, 30, 876, 11, 300, 1542, 1880, 11, 1177, 380, 309, 30], "temperature": 0.0, "avg_logprob": -0.25015165494835895, "compression_ratio": 1.456896551724138, "no_speech_prob": 8.012562830117531e-06}, {"id": 620, "seek": 426514, "start": 4265.14, "end": 4273.1, "text": " Can we use epsilon for membership? Kind of A epsilon C? I don't remember if we've covered", "tokens": [1664, 321, 764, 17889, 337, 16560, 30, 9242, 295, 316, 17889, 383, 30, 286, 500, 380, 1604, 498, 321, 600, 5343], "temperature": 0.0, "avg_logprob": -0.2651524543762207, "compression_ratio": 1.2983870967741935, "no_speech_prob": 3.905161520378897e-06}, {"id": 621, "seek": 426514, "start": 4273.1, "end": 4276.1, "text": " epsilon or not.", "tokens": [17889, 420, 406, 13], "temperature": 0.0, "avg_logprob": -0.2651524543762207, "compression_ratio": 1.2983870967741935, "no_speech_prob": 3.905161520378897e-06}, {"id": 622, "seek": 426514, "start": 4276.1, "end": 4285.34, "text": " Well, I was just thinking, can we just sum this up now?", "tokens": [1042, 11, 286, 390, 445, 1953, 11, 393, 321, 445, 2408, 341, 493, 586, 30], "temperature": 0.0, "avg_logprob": -0.2651524543762207, "compression_ratio": 1.2983870967741935, "no_speech_prob": 3.905161520378897e-06}, {"id": 623, "seek": 428534, "start": 4285.34, "end": 4303.14, "text": " Now, why did that not work? I thought it would. We've got to be a bit careful when we sum", "tokens": [823, 11, 983, 630, 300, 406, 589, 30, 286, 1194, 309, 576, 13, 492, 600, 658, 281, 312, 257, 857, 5026, 562, 321, 2408], "temperature": 0.0, "avg_logprob": -0.17381204141152873, "compression_ratio": 1.121212121212121, "no_speech_prob": 5.95483061260893e-06}, {"id": 624, "seek": 428534, "start": 4303.14, "end": 4310.3, "text": " it up. But I think...", "tokens": [309, 493, 13, 583, 286, 519, 485], "temperature": 0.0, "avg_logprob": -0.17381204141152873, "compression_ratio": 1.121212121212121, "no_speech_prob": 5.95483061260893e-06}, {"id": 625, "seek": 431030, "start": 4310.3, "end": 4318.14, "text": " Give us the wrong... It's very close to correct, right? But I think if we do this, it's correct.", "tokens": [5303, 505, 264, 2085, 485, 467, 311, 588, 1998, 281, 3006, 11, 558, 30, 583, 286, 519, 498, 321, 360, 341, 11, 309, 311, 3006, 13], "temperature": 0.0, "avg_logprob": -0.189155398674731, "compression_ratio": 1.3455882352941178, "no_speech_prob": 1.593381239217706e-05}, {"id": 626, "seek": 431030, "start": 4318.14, "end": 4336.860000000001, "text": " So I think what we need to make sure is just that the rank... okay, so consider these.", "tokens": [407, 286, 519, 437, 321, 643, 281, 652, 988, 307, 445, 300, 264, 6181, 485, 1392, 11, 370, 1949, 613, 13], "temperature": 0.0, "avg_logprob": -0.189155398674731, "compression_ratio": 1.3455882352941178, "no_speech_prob": 1.593381239217706e-05}, {"id": 627, "seek": 433686, "start": 4336.86, "end": 4346.0599999999995, "text": " Here's the problem. This is a vector. It's not a matrix with one row. So that's interesting.", "tokens": [1692, 311, 264, 1154, 13, 639, 307, 257, 8062, 13, 467, 311, 406, 257, 8141, 365, 472, 5386, 13, 407, 300, 311, 1880, 13], "temperature": 0.0, "avg_logprob": -0.13834293365478514, "compression_ratio": 1.518918918918919, "no_speech_prob": 2.0784475054824725e-05}, {"id": 628, "seek": 433686, "start": 4346.0599999999995, "end": 4354.42, "text": " Oh, because that's not a list of characters, right? That's a character scalar. But that's", "tokens": [876, 11, 570, 300, 311, 406, 257, 1329, 295, 4342, 11, 558, 30, 663, 311, 257, 2517, 39684, 13, 583, 300, 311], "temperature": 0.0, "avg_logprob": -0.13834293365478514, "compression_ratio": 1.518918918918919, "no_speech_prob": 2.0784475054824725e-05}, {"id": 629, "seek": 433686, "start": 4354.42, "end": 4359.0599999999995, "text": " okay because I would guess that they would actually make it a list containing the single", "tokens": [1392, 570, 286, 576, 2041, 300, 436, 576, 767, 652, 309, 257, 1329, 19273, 264, 2167], "temperature": 0.0, "avg_logprob": -0.13834293365478514, "compression_ratio": 1.518918918918919, "no_speech_prob": 2.0784475054824725e-05}, {"id": 630, "seek": 433686, "start": 4359.0599999999995, "end": 4360.0599999999995, "text": " letter A.", "tokens": [5063, 316, 13], "temperature": 0.0, "avg_logprob": -0.13834293365478514, "compression_ratio": 1.518918918918919, "no_speech_prob": 2.0784475054824725e-05}, {"id": 631, "seek": 436006, "start": 4360.06, "end": 4367.780000000001, "text": " I guess ideally we'd be able to use... I guess I don't think row works this way, but we would", "tokens": [286, 2041, 22915, 321, 1116, 312, 1075, 281, 764, 485, 286, 2041, 286, 500, 380, 519, 5386, 1985, 341, 636, 11, 457, 321, 576], "temperature": 0.0, "avg_logprob": -0.2475748274061415, "compression_ratio": 1.6059113300492611, "no_speech_prob": 1.6186491848202422e-05}, {"id": 632, "seek": 436006, "start": 4367.780000000001, "end": 4376.820000000001, "text": " use row to reshape to four columns and in terms of rows, kind of do like the numpy negative", "tokens": [764, 5386, 281, 725, 42406, 281, 1451, 13766, 293, 294, 2115, 295, 13241, 11, 733, 295, 360, 411, 264, 1031, 8200, 3671], "temperature": 0.0, "avg_logprob": -0.2475748274061415, "compression_ratio": 1.6059113300492611, "no_speech_prob": 1.6186491848202422e-05}, {"id": 633, "seek": 436006, "start": 4376.820000000001, "end": 4378.620000000001, "text": " one for a power of...", "tokens": [472, 337, 257, 1347, 295, 485], "temperature": 0.0, "avg_logprob": -0.2475748274061415, "compression_ratio": 1.6059113300492611, "no_speech_prob": 1.6186491848202422e-05}, {"id": 634, "seek": 436006, "start": 4378.620000000001, "end": 4384.42, "text": " I actually think we've already solved it. I actually think I need to write this to say", "tokens": [286, 767, 519, 321, 600, 1217, 13041, 309, 13, 286, 767, 519, 286, 643, 281, 2464, 341, 281, 584], "temperature": 0.0, "avg_logprob": -0.2475748274061415, "compression_ratio": 1.6059113300492611, "no_speech_prob": 1.6186491848202422e-05}, {"id": 635, "seek": 436006, "start": 4384.42, "end": 4385.820000000001, "text": " a list containing the letter A.", "tokens": [257, 1329, 19273, 264, 5063, 316, 13], "temperature": 0.0, "avg_logprob": -0.2475748274061415, "compression_ratio": 1.6059113300492611, "no_speech_prob": 1.6186491848202422e-05}, {"id": 636, "seek": 438582, "start": 4385.82, "end": 4390.099999999999, "text": " Oh, would that be the left shoe?", "tokens": [876, 11, 576, 300, 312, 264, 1411, 12796, 30], "temperature": 0.0, "avg_logprob": -0.20366880628797743, "compression_ratio": 1.2796610169491525, "no_speech_prob": 8.800831892585848e-06}, {"id": 637, "seek": 438582, "start": 4390.099999999999, "end": 4397.7, "text": " The problem is that this is a scalar. So I think actually my test was wrong. So actually", "tokens": [440, 1154, 307, 300, 341, 307, 257, 39684, 13, 407, 286, 519, 767, 452, 1500, 390, 2085, 13, 407, 767], "temperature": 0.0, "avg_logprob": -0.20366880628797743, "compression_ratio": 1.2796610169491525, "no_speech_prob": 8.800831892585848e-06}, {"id": 638, "seek": 438582, "start": 4397.7, "end": 4406.099999999999, "text": " I think we've got the answer.", "tokens": [286, 519, 321, 600, 658, 264, 1867, 13], "temperature": 0.0, "avg_logprob": -0.20366880628797743, "compression_ratio": 1.2796610169491525, "no_speech_prob": 8.800831892585848e-06}, {"id": 639, "seek": 440610, "start": 4406.1, "end": 4416.3, "text": " So I think that... and then I think it should be a case of making that into a function.", "tokens": [407, 286, 519, 300, 485, 293, 550, 286, 519, 309, 820, 312, 257, 1389, 295, 1455, 300, 666, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.20932212083236032, "compression_ratio": 1.3208955223880596, "no_speech_prob": 4.565796189126559e-06}, {"id": 640, "seek": 440610, "start": 4416.3, "end": 4431.34, "text": " Okay. So we've actually ended up not using any of their suggestions, which makes me think", "tokens": [1033, 13, 407, 321, 600, 767, 4590, 493, 406, 1228, 604, 295, 641, 13396, 11, 597, 1669, 385, 519], "temperature": 0.0, "avg_logprob": -0.20932212083236032, "compression_ratio": 1.3208955223880596, "no_speech_prob": 4.565796189126559e-06}, {"id": 641, "seek": 443134, "start": 4431.34, "end": 4439.02, "text": " that there's a better way to do this, but that's okay.", "tokens": [300, 456, 311, 257, 1101, 636, 281, 360, 341, 11, 457, 300, 311, 1392, 13], "temperature": 0.0, "avg_logprob": -0.42728408813476565, "compression_ratio": 1.2941176470588236, "no_speech_prob": 5.014569978811778e-06}, {"id": 642, "seek": 443134, "start": 4439.02, "end": 4441.82, "text": " Test.", "tokens": [9279, 13], "temperature": 0.0, "avg_logprob": -0.42728408813476565, "compression_ratio": 1.2941176470588236, "no_speech_prob": 5.014569978811778e-06}, {"id": 643, "seek": 443134, "start": 4441.82, "end": 4450.860000000001, "text": " So it looks like the last example...", "tokens": [407, 309, 1542, 411, 264, 1036, 1365, 485], "temperature": 0.0, "avg_logprob": -0.42728408813476565, "compression_ratio": 1.2941176470588236, "no_speech_prob": 5.014569978811778e-06}, {"id": 644, "seek": 443134, "start": 4450.860000000001, "end": 4457.02, "text": " I would say it is this. I think they are passing in a...", "tokens": [286, 576, 584, 309, 307, 341, 13, 286, 519, 436, 366, 8437, 294, 257, 485], "temperature": 0.0, "avg_logprob": -0.42728408813476565, "compression_ratio": 1.2941176470588236, "no_speech_prob": 5.014569978811778e-06}, {"id": 645, "seek": 445702, "start": 4457.02, "end": 4464.820000000001, "text": " That last example, we can see that. Can we do an enclosed left shoe?", "tokens": [663, 1036, 1365, 11, 321, 393, 536, 300, 13, 1664, 321, 360, 364, 42089, 1411, 12796, 30], "temperature": 0.0, "avg_logprob": -0.35175343563682154, "compression_ratio": 1.5333333333333334, "no_speech_prob": 2.1232824565231567e-06}, {"id": 646, "seek": 445702, "start": 4464.820000000001, "end": 4466.620000000001, "text": " Is that how you do it?", "tokens": [1119, 300, 577, 291, 360, 309, 30], "temperature": 0.0, "avg_logprob": -0.35175343563682154, "compression_ratio": 1.5333333333333334, "no_speech_prob": 2.1232824565231567e-06}, {"id": 647, "seek": 445702, "start": 4466.620000000001, "end": 4470.34, "text": " Can we just also just... You could just make it a list by... Could you just do comma and", "tokens": [1664, 321, 445, 611, 445, 485, 509, 727, 445, 652, 309, 257, 1329, 538, 485, 7497, 291, 445, 360, 22117, 293], "temperature": 0.0, "avg_logprob": -0.35175343563682154, "compression_ratio": 1.5333333333333334, "no_speech_prob": 2.1232824565231567e-06}, {"id": 648, "seek": 445702, "start": 4470.34, "end": 4471.900000000001, "text": " then again empty string?", "tokens": [550, 797, 6707, 6798, 30], "temperature": 0.0, "avg_logprob": -0.35175343563682154, "compression_ratio": 1.5333333333333334, "no_speech_prob": 2.1232824565231567e-06}, {"id": 649, "seek": 445702, "start": 4471.900000000001, "end": 4477.740000000001, "text": " Oh, just direct comma before it.", "tokens": [876, 11, 445, 2047, 22117, 949, 309, 13], "temperature": 0.0, "avg_logprob": -0.35175343563682154, "compression_ratio": 1.5333333333333334, "no_speech_prob": 2.1232824565231567e-06}, {"id": 650, "seek": 445702, "start": 4477.740000000001, "end": 4478.740000000001, "text": " Look at you.", "tokens": [2053, 412, 291, 13], "temperature": 0.0, "avg_logprob": -0.35175343563682154, "compression_ratio": 1.5333333333333334, "no_speech_prob": 2.1232824565231567e-06}, {"id": 651, "seek": 445702, "start": 4478.740000000001, "end": 4480.740000000001, "text": " All right. Nice.", "tokens": [1057, 558, 13, 5490, 13], "temperature": 0.0, "avg_logprob": -0.35175343563682154, "compression_ratio": 1.5333333333333334, "no_speech_prob": 2.1232824565231567e-06}, {"id": 652, "seek": 445702, "start": 4480.740000000001, "end": 4485.660000000001, "text": " Yeah, yeah, yeah. Look at you.", "tokens": [865, 11, 1338, 11, 1338, 13, 2053, 412, 291, 13], "temperature": 0.0, "avg_logprob": -0.35175343563682154, "compression_ratio": 1.5333333333333334, "no_speech_prob": 2.1232824565231567e-06}, {"id": 653, "seek": 448566, "start": 4485.66, "end": 4492.26, "text": " So, yeah, comma is in list, isn't it? Or ravel? Is that ravel?", "tokens": [407, 11, 1338, 11, 22117, 307, 294, 1329, 11, 1943, 380, 309, 30, 1610, 3342, 779, 30, 1119, 300, 3342, 779, 30], "temperature": 0.0, "avg_logprob": -0.27956120018820163, "compression_ratio": 1.505050505050505, "no_speech_prob": 2.3921349566080607e-05}, {"id": 654, "seek": 448566, "start": 4492.26, "end": 4495.26, "text": " Ravel, I think, yeah.", "tokens": [7591, 779, 11, 286, 519, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.27956120018820163, "compression_ratio": 1.505050505050505, "no_speech_prob": 2.3921349566080607e-05}, {"id": 655, "seek": 448566, "start": 4495.26, "end": 4498.46, "text": " Nice one, Tanishk.", "tokens": [5490, 472, 11, 314, 7524, 74, 13], "temperature": 0.0, "avg_logprob": -0.27956120018820163, "compression_ratio": 1.505050505050505, "no_speech_prob": 2.3921349566080607e-05}, {"id": 656, "seek": 448566, "start": 4498.46, "end": 4506.66, "text": " I need a bit better at using comma. I think I end up using the enclosure too much and", "tokens": [286, 643, 257, 857, 1101, 412, 1228, 22117, 13, 286, 519, 286, 917, 493, 1228, 264, 34093, 886, 709, 293], "temperature": 0.0, "avg_logprob": -0.27956120018820163, "compression_ratio": 1.505050505050505, "no_speech_prob": 2.3921349566080607e-05}, {"id": 657, "seek": 448566, "start": 4506.66, "end": 4513.22, "text": " then having to do a bunch of reshapes and then... So that's good for me to keep in mind.", "tokens": [550, 1419, 281, 360, 257, 3840, 295, 725, 71, 569, 279, 293, 550, 485, 407, 300, 311, 665, 337, 385, 281, 1066, 294, 1575, 13], "temperature": 0.0, "avg_logprob": -0.27956120018820163, "compression_ratio": 1.505050505050505, "no_speech_prob": 2.3921349566080607e-05}, {"id": 658, "seek": 448566, "start": 4513.22, "end": 4514.22, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.27956120018820163, "compression_ratio": 1.505050505050505, "no_speech_prob": 2.3921349566080607e-05}, {"id": 659, "seek": 448566, "start": 4514.22, "end": 4515.22, "text": " Perfect.", "tokens": [10246, 13], "temperature": 0.0, "avg_logprob": -0.27956120018820163, "compression_ratio": 1.505050505050505, "no_speech_prob": 2.3921349566080607e-05}, {"id": 660, "seek": 451522, "start": 4515.22, "end": 4521.34, "text": " That was fun.", "tokens": [663, 390, 1019, 13], "temperature": 0.0, "avg_logprob": -0.22683792454855783, "compression_ratio": 1.4527027027027026, "no_speech_prob": 7.410242233163444e-06}, {"id": 661, "seek": 451522, "start": 4521.34, "end": 4525.46, "text": " That was actually fun.", "tokens": [663, 390, 767, 1019, 13], "temperature": 0.0, "avg_logprob": -0.22683792454855783, "compression_ratio": 1.4527027027027026, "no_speech_prob": 7.410242233163444e-06}, {"id": 662, "seek": 451522, "start": 4525.46, "end": 4529.820000000001, "text": " The only other thing I'm thinking is like maybe we'll split this... I think this notebook", "tokens": [440, 787, 661, 551, 286, 478, 1953, 307, 411, 1310, 321, 603, 7472, 341, 485, 286, 519, 341, 21060], "temperature": 0.0, "avg_logprob": -0.22683792454855783, "compression_ratio": 1.4527027027027026, "no_speech_prob": 7.410242233163444e-06}, {"id": 663, "seek": 451522, "start": 4529.820000000001, "end": 4537.02, "text": " is getting too long, particularly because the kernel is so slow for dialogue. So I might", "tokens": [307, 1242, 886, 938, 11, 4098, 570, 264, 28256, 307, 370, 2964, 337, 10221, 13, 407, 286, 1062], "temperature": 0.0, "avg_logprob": -0.22683792454855783, "compression_ratio": 1.4527027027027026, "no_speech_prob": 7.410242233163444e-06}, {"id": 664, "seek": 453702, "start": 4537.02, "end": 4549.620000000001, "text": " split it into three things, like operators, the first stuff and then operators, and then", "tokens": [7472, 309, 666, 1045, 721, 11, 411, 19077, 11, 264, 700, 1507, 293, 550, 19077, 11, 293, 550], "temperature": 0.0, "avg_logprob": -0.26468271958200557, "compression_ratio": 1.4607329842931938, "no_speech_prob": 1.3924767472417443e-06}, {"id": 665, "seek": 453702, "start": 4549.620000000001, "end": 4558.26, "text": " we'll do an APL competition one. So anyway, look out for that when I send it in. I won't", "tokens": [321, 603, 360, 364, 5372, 43, 6211, 472, 13, 407, 4033, 11, 574, 484, 337, 300, 562, 286, 2845, 309, 294, 13, 286, 1582, 380], "temperature": 0.0, "avg_logprob": -0.26468271958200557, "compression_ratio": 1.4607329842931938, "no_speech_prob": 1.3924767472417443e-06}, {"id": 666, "seek": 453702, "start": 4558.26, "end": 4562.780000000001, "text": " necessarily do that in a hurry though because I have a course to release.", "tokens": [4725, 360, 300, 294, 257, 11025, 1673, 570, 286, 362, 257, 1164, 281, 4374, 13], "temperature": 0.0, "avg_logprob": -0.26468271958200557, "compression_ratio": 1.4607329842931938, "no_speech_prob": 1.3924767472417443e-06}, {"id": 667, "seek": 453702, "start": 4562.780000000001, "end": 4566.22, "text": " All right. Thanks all. Bye.", "tokens": [1057, 558, 13, 2561, 439, 13, 4621, 13], "temperature": 0.0, "avg_logprob": -0.26468271958200557, "compression_ratio": 1.4607329842931938, "no_speech_prob": 1.3924767472417443e-06}, {"id": 668, "seek": 456622, "start": 4566.22, "end": 4569.42, "text": " Have a good one. Bye.", "tokens": [50364, 3560, 257, 665, 472, 13, 4621, 13, 50524], "temperature": 0.0, "avg_logprob": -0.1867151141166687, "compression_ratio": 0.7241379310344828, "no_speech_prob": 5.5523505579913035e-05}], "language": "en"}