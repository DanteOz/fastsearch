{"text": " I don't know if you saw, but somebody on the forum, not just somebody, somebody extremely helpful and kind, being Daniel on the forum, he does these summaries of the walkthroughs. I saw that Jeremy. I tried to do a little bit, but I think I didn't have time to finish it off. Oh yeah. Okay. So did you want to maybe share your screen and get us up to speed with like what the problem is we're solving and where the data is for it and stuff like that? You're muted by the way. Sorry. Yeah. Actually it's just what was in, I think it was the 713th, live coding. Live coding, which one? Live coding? Live coding 13. Live coding 13. Okay. Yeah. So I basically, I kind of had a really janky solution. It's not, it probably doesn't work, but what I was thinking of doing was like putting them in some kind of like a file side by side and then sort of indexing it, but I actually didn't do anything. What I did is basically this at the end. Uh huh. So. So I'm not quite sure how to take it any further. Yeah, I don't even know what it is yet. So let me just, so, okay. So I've got my screen sharing here. And so can you guys see that? Okay. So where do I start? So he. I didn't quite understand like. I finished that on the forum. Yeah. So that's basically like if you get that node at the end, he's got all the images. Yep. Right. So these are kind of like the, at the end, he's got the actual images in that dropdown. And what I did was I actually went in there and I looked at the code or what the HTML and are these meant to be in the same order as like, do they have names or I just, I don't think so. I don't think so. Let's see. So this is at, this is called add to actually hang on. What we could do is if we click edit. Right. That's right. Yeah. Oh, I see. This is like got off the edge of the screen. And so let's see. So these have, okay. These have names. Okay. Cool. Like add to class. And then presumably there's an add to class somewhere here. Let's try searching for that. Add to class. Yes. Yes. Yes. Oh, that's cool. And then the sizes are different a little bit. And this is in double brackets at the end. So I wasn't sure what kind of regex would do that, but I think the one that I got, it kind of, it just kind of captures. So what I did was what I actually did was I went to the bottom, I took all of the ones from the bottom and then I got rid of the, I just extracted that and that's about how far I got. Okay. No worries. All right. Let me just start up Jupyter then. Okay. All right. So this is our, this is our kind of source images. Okay. So you guys know if you put things in triple quotes, then it creates a multi-line string. Okay. And so then we've got our destination. Okay. I guess which is everything else, right? Destination. Okay. So there's a good start. We've got our data. So like, I guess like the reason I thought this might be interesting to do here is basically, yeah, people often ask like, how do you go about actually solving a problem or doing coding or whatever? So I thought, I guess if we do it together, then we can go through the process, which will work a lot better if you ask questions or add comments, you know, as we go, obviously. One thing that does occur to me is in this notebook, actually, this is, I find quite, this is quite awkward to have so much data here. So what I might do actually is instead put them into text files. So this one is the source, right? In bash, if you type cat and read, and then this means redirect to a file, right? So we could create a file called source.text. It's now reading from standard in, it's reading from the input, right? So I can paste like so. And then to tell basically in Unix to say I finished this file, you hit control D. Okay. And so if I was to now Vim that you can see it's there. Okay. So that's how you can quickly and easily, there's lots of quick and easy ways to create text files. Sorry, I got confused with the prompt because there was this git thing and I thought, wow, git, you know, and Oh sorry, git is just the name of the directory I'm in. Yes, yes, yes. I figured it out post, all right. So it's just, right, it was just this less than sign which pipes it to the Greater than sign. Yeah. Or greater than sign. Yeah. Right. So the main thing, I guess the main, like just to put this together, if I just type cat, right, and then I type text, it just prints out whatever I type it. Okay. So that's what cat does. The reason it's called cat is actually concatenates things if you feed it multiple things, it adds them together. If I, I can redirect from a file, which means instead of me typing things in, it'll get its input from a file. So that would cause it to print it out. Or if I redirect its output, then whatever I type in will go to the file. So one way to copy things, for example, would be to read things into cat and then output things into something else. Wow. It's like a really dumb way to copy, but you know, it does the job, right? So yeah, cat just, anything cat gets into standard in goes to standard out. Standard in being the input to a Unix command and standard out being the output from a Unix command. So if you do cat greater than file name, it will still let you type in stuff. Right. So that's what I did before, right? Is I paste it. And then at the end I hit control D, right? So now if I cat and take it from that, ah, yes, dear. There's, but I just typed. Okay. You press control D. Control D at the end. Control D means end of file in Unix. Yeah. So if I, sorry, let me move you over here. Yeah. So if I hit control D at the end, that's that, then it says, oh, you're all done. You might've seen something similar. Like, I think it's like this. Oh yeah. That thing I know. Okay. And at the end you type whatever you typed. So like, but there's no reason to do that. You can just cause you could just use control D. Cool. If you use this double less than side, it means keep reading until you see that string. That's got a here doc. This is the mystifies a lot. Yes. Yes. All right. So let me show you that again. So I'm going to do it again for my destination, right? So let's grab all that. And by the way, knowing how to do things like select to the end of line and select to the end of file and stuff like, you know, using command and control and shift and end and home. That stuff's really important to know. It varies between Mac and PC. So if you don't know how I just selected all that, then it's definitely worth Googling that. Okay. So I've just copied that. So I just want to put that into cat redirect the output to destination dot text. Right. Paste. Control D. Control D. Don't know why I had to press it twice there. That was strange. Maybe I had to hit. I don't know. Anyway. Did the job. Okay. So actually, so I guess like my starting point normally is just to kind of like import import my like standard set of things that I wish Python had, which is called fast port dot utils. Oops. Import stuff. So as some folks have pointed out before, some languages have things called a prelude, which is like the kind of stuff that people like to always have available. This is kind of my version of a prelude. And one of the things it does is it imports some things from the standard library, Python standard library that I always use. And it also imports some things that fast port adds to the standard library. So one of the things it adds is path lip dot path. So path. Okay. Like so. And so path lip dot path has a read text. Okay. So that's better. One thing that I don't particularly like is that the standard representation of strings in Jupyter uses backslash n. If you want to replace it with actual near lines, you can say print. Or, you know, like you can just do this. And so just remember curly brackets. So this means do this as a bash command. And curly brackets means read this Python variable and put it into the bash command. All right. So then we can do something similar for destination. One thing that people complain about with my code quite often is my use of abbreviations. You might reasonably ask why not put the E there. But just to explain, I quite like to have similar things be similar lengths. Because it makes it really easy for me to then have lines next to each other that operate on those two things. And all the bits will be in the same place. And so my eyes can immediately see if there's some unexpected difference or something. So it's not just me being trying to be difficult. It's, you know, there's actually a reason that I quite like doing that. But just not to say everybody has to do that. That's why I quite like to do that. And there's also something to be said for like having a standard way of coding. That then you just don't think too much about how you code. You know, so like I just have stem standard way I tend to name things and then I don't spend time thinking about naming things too much. That's cognitive load. I can focus then on solving the problem. All right. So I guess the first thing we might want to do then is we basically we probably want a dictionary that goes from the name of the thing to the location of the image, right? And so then basically then we'll just go through each type each one of these here and replace the name with the value of that when we look it up as a key. So there's a thing called find all which you give it a regex and it finds all the places of that regex. Do you guys tend to use regexes? Is there anybody here who doesn't really use regexes? Not too much. So regex is what we call a DSL, a domain specific language. They are not Python really. Python happens to have support for them but they very much don't look like Python. I actually tend to think of them as a notation and notation is one of my favourite topics. A notation is a way of representing some potentially complex domain in a concise and expressive and flexible way. So for example a notation that you've definitely used before is this one, right, which is called math notation. If you play music in the western tradition then you will have seen the staff based music notation. If you juggle you might have come across the juggling notation. If you've done quantum stuff you might have come across the Feynman diagram notation. So notations are expressive ways to represent things. Regexes are a notation for finding stuff in text. Not many honestly things in computing have got to the point that they're so well understood and studied that we've got them to the point that they are a notation. But regex is one. And my view is often, most of the time perhaps when something has got to that point we should learn that notation because it's like a way of composing things together very concisely that can solve a wide class of problems. Jeremy, would you recommend learning things like orc and sed also long term? I wouldn't recommend orc and sed. I would recommend Pell because Pell is a superset of orc and sed. And as such it's more expressive than either because you can combine everything from orc and sed and find and at pretty much everything from Python as well. So yeah, at some point in your life it's well worth Googling for Pell one liners and diving into that rabbit hole. Another nice thing about regexes is because Pell's regexes were so good, they were built by a linguist, Larry Walls, it's not surprising perhaps, that they're used almost everywhere. So JavaScript, Python, Pell, C, you know, by the PCIe library, they all use the same regexes. Vim's are slightly different. In Vim you have to add a few more backslashes to things but it's actually possible to turn on a Vim mode which is almost identical to Python and Pell which is called the very magic mode. So you can turn on very magic mode and then Vim basically is the same as everything else. Okay. So I got a quick question about 20 minutes into this. I wasn't here last time. So what are we trying to do? Yeah, this is not from last time. This is what we're trying to do is this is something new. So what we're trying to do, thanks, is Daniel creates these nice descriptions of everything in these sessions. But this is how his images come out. It's just not very helpful. So I thought it would be nice if we could, for him, make a script or something that would allow him to put the correct images in here. And I don't know why it comes out this way but that's fine. He's got a process he's happy with and in this process the images end up, you know, he can easily paste them all at the end, right? So here's our images. And so the images in his, that he pastes at the end look like this, right? So they have names, right? And then in the in the in the forum post they appear like this. So we have to replace this basically with this, but with probably with this size would be my guess. In fact, let's just check that. So yeah, that's what he wants, I guess. Fixed test error. I wonder which size he wants. Prep for fixed test in source path. 690 by 184. And where was that? Fixed test error. Okay, that's at the end. And then in destination path. I wonder if these are the actual sizes. Did he say? I think these are the actual sizes. I'm not sure why it has the 900 standard size or something. It seems to have like. Presumably that's what he wants. That's presumably the size he wants, I guess. Let's have a look. So if I copy that. This post is to test image stuff for Daniel. Paste. Okay, so that's the size that appears there. And then what if it says 900? Oh, it doesn't really make any difference. Well, without this one, I'm not sure if that makes sense. But if you were to try it without, it should also work without. It would just. Oh yeah, it would work. I just think like he's like, I assume that some of the images he's intentionally trying to resize. Sometimes. Maybe this is for his notes up. Well, yeah, I mean, he's got two different sizes. One of them is for his notes app, I assume. And one of them, I'm not going to assume this is the size he actually wants. Maybe it's already as big as it can show. Yeah, I guess I think so. If you right click and open it in a new tab, would that or would that just show the original? I think that'll show the image. Let's have a look at some more. Oh wait, does it always say 900? Oh, it's not a 1200. I see. I think all of the X by Y is the one when he drops them into the interface and it just takes whatever the size. I would say so. So I think this is probably let's assume this is actually what he wants. I think that's a reasonable guess. Okay, so you can see sometimes I just judge, you know, grab bash commands when I'm fiddling around just because yeah, sometimes I don't know. It's just like. An easy way for me to quickly check things. So grep, so actually grep doesn't take normal regexes, but you can. And I need to get into a habit of doing this. Yeah, you can use minus capital P to use Pell compatible regular expressions. So when you're looking for like, can I use normal regular expressions specifically the thing you generally want to search for is PCIe. They're called Pell compatible. So apparently we can do this. Not that it'll make any difference in this case, but no, this one. Okay. What about e-grep? No. Okay. So that maybe it's in some more recent. Oh, you know, maybe the best thing is not to use e-grep, but instead to use RG, which is rip grip. Which I guess I have to install. I noticed that. Is that a different version of grep that you use? Yeah. So RG is like, so basically like for pretty much all the classic Unix tools, somebody's rewritten it in Rust and made it better or C++ or Go, you know, increasingly it's Rust. I don't know what rip grip was written in, but like it's basically like in this kind of general category of like better versions of classic Unix tools. And I try to like get into the habit of using the newer, better versions. So even though it takes some retraining. So yeah, RG is the kind of... I meant to ask about that yesterday because I noticed you were using that and I thought maybe it's for recursive grep or something. Oh yeah. Yeah. No, it's actually a program, which amongst other things seems to be highlighting the thing I'm searching for, which is cute and showing the line number. Jeremy, you find that brew install doesn't mess with your MambaForge installation, are those orthogonal pretty much in their functions? No, it should be fine. Yeah. I mean, I'm not in paper space here, right? So like I wouldn't use... I tried filling with brew in paper space because there is a Linux brew nowadays. That seemed okay, but it uses up a lot of space. So I thought just using Mamba to install binaries like rip grip in paper space is probably the best option, you know, because it doesn't use any more space than necessary. But you know, the two shouldn't get in the way. Like they are both at themselves to the path, right? So opt home brew bin and MambaForge bin. So they're just both in the path. Yeah, I shouldn't... I can't see why they would get in the way of each other. Okay. All right. So find all looks for a pattern in a string, right? So, you know, I tend to like to like to create like a really simple version of something just to make sure I understand a command before I dive into it. So I reckon we should better find the word fix in our source, right? And there it is. Okay. It's appeared more than once. Okay. There it is, right? And so then if we... generally with regexers, we use backslashes quite a lot to mean certain things. But Python uses a backslash to mean something else, which is that the next character is a control character. So to tell Python that treat backslashes as backslashes, you put an R before the string. So this looks for the, you know, backslash F fix test. In fact, you know, if I just show you here, backslash N is normally a new line. But if I put an R there, it's not a new line. Actually, this would be easier if I say print. So that prints new line fix test. And that prints backslash F fix test. Okay. So we're going to look for stuff of this form. That's our source, right? So I would be inclined just to paste it in here. Okay. So square brackets have a special meaning in regex. So we can use a backslash to say don't use a special meaning. Ditto with pipe. Ditto with parentheses. Let's get rid of all those. Okay. And so this is going to be the name of something. And so if we want to remember some block of text, we can put it in parentheses. Right? So the thing we're going to try to find here is basically I think probably anything that's not whitespace will be fine. So backslash S means not whitespace. And plus means one or more. I don't think we care about the size. So we'll just skip over this. And then this is actually something we do want to keep, which is the actual file name we're going to end up with. So I'll create parentheses for that and put my backslash S plus there as well. Okay. So that's looking pretty hopeful. So what it's done here is found equals found 29 things. Which looks something like this. Oh, I put parentheses twice here, which is why it's appearing twice. That's better. Does that make sense? So it's basically showing each of the parenthesized expressions. And so actually we don't need this bit to be parenthesized because I don't think we care about the original size. Okay. And so we should be able to create a dictionary from that. Because we've now got a list of tuples. I never quite remember how this works. But yeah, there you go. So the list of tuples, if you pass it to dict, it'll create a dictionary. And I think like there's something to be said for programming in an interactive environment, you know, that allows us to like gradually build up a thing that works and then, you know, assign it to a variable or stick it in a function or whatever. So now we should be able to search for found add to class. And we do. So we've got the dictionary we want to. Does that make sense so far? Yeah. I just have a question about that. You got rid of the size. So if you don't put the parentheses, does that mean it will just ignore that? Yeah. I mean, it has to be there, right? So if we said, oh, look for AAA. Well, that's not there, right? So it won't find anything. So it's still searching for it. It's just not storing it. So it's finding an exclamation mark, open square bracket, finding and remembering a bunch of non-white space characters, followed by a pipe sign, followed by a bunch of non-white space characters, which it doesn't remember, followed by a closing square bracket, followed by an opening parenthesis, followed by a bunch of non-white space characters that it does remember, followed by a closing parenthesis. So putting parentheses makes it remember essentially. Correct. Correct. It does two things. It also groups things, which is a bit confusing that it does two things. But yeah, in this case, the thing we're using for is the fact that it remembers things and will end up in the output of re.findall. Amongst many other things, if you just do re.match or re.search, it will also remember them. It just returns slightly different things. re.findall is one of the easiest things to use though. So I think it's good. Okay. So now we need to basically search and replace in destination, looking for stuff like this. Okay. So this is our destination. Kind of want to look at the, you know, the end of it. Okay. Here's two things we want to change, right? So I'm just going to like use the last few characters just so I can see what's going on. So I'm just going to put that in a variable for now. Okay. So there's a thing called re.sub for substitute. That's funny. A lot of Python programmers complain about me using three-letter abbreviations, but Python apparently is allowed to use three-letter abbreviations. re.substitute. So we're going to find a pattern and replace it with something else. And we're just going to search in some string. So for example, if we replace space with star nd, okay, that's basically how it works. Or you can search for a regular expression. So let's search for that. Okay. And again, we're going to use r because we're going to use backslashes. We're going to search for a literal square bracket. We're going to search for a literal vertical bar. Okay. And you can see that's been replaced with a star. And so this thing here is the file name. And the bit before the dot is what we're going to look up. So I'm going to do, so we're going to capture this. And the thing we're going to look for is everything except for a dot. Okay. So to say everything except for a dot, you put in square brackets, you put the things to look for. And a caret means things you don't want to look for. So this is everything except a dot. And this says to capture it. So remembering, I call it remembering. It's actually called capturing. Dot has a special meaning normally, which is anything at all. So that's a literal dot. Let's not assume it's not always PNG. So I'm just going to say any three characters. In fact, regardless of whether it's JPEG or PNG, oh, here we are. Oh, it's also sometimes it's JPEG. Could be four characters. Okay. No worries. Okay. Well, anything could do. Oh, I know. We could just do some letters. So backslash W is a word symbol. So basically letters and numbers and stuff. So we'll have a bunch of those. Okay. Now interestingly in this case, this has got a pipe 900. This has got a closed square bracket. Okay. So there's a few ways we can do this. I'm going to show you, okay, I'm going to show you the more interesting way, which is that, no, let's do it the simpler way. Okay. So the simple way is rather than looking for any word symbol, let's just look for anything that's not a closed square bracket. So this is going to be slightly confusing, but basically this is a regex that searches for any A's or B's or C's. This is a regex that search for anything that's not an A or B or C. This is a regex that searches for anything that's not an open square bracket. So we want to find a bunch of things that are not a square bracket. Plus means one or more. And then there's going to be two closed square brackets. Okay. So that didn't work, which is good because now I can show you how I go about debugging these things. So to debug these things is I would just gradually make this simpler and simpler until it starts working. And that way we'll be able to figure out why it's not working. So I'm going to delete all of this. Okay. So that didn't work. So let's keep deleting. Okay. So that one did delete. Oh, okay. I see the problem. So you can see here, it's just replaced the first letter, which wasn't what I wanted. Right. I wanted to grab a bunch of these. So this here says, oh, this here says anything that's not a dot, right. But we actually want one or more things that aren't a dot. That's better. Okay. So one or more things that aren't a dot. So we can go back and now replace that up here with one or more things that aren't a dot. There we go. So that's now successfully replaced all that with a star. So that tells us that we've got our search working correctly. What confused me is the caret in the square brackets because I know that the caret is a symbol for start offline. Oh yeah, that too. So I had to Google it and it turns out that if it's inside the square brackets, it means not. But if it's outside, it means start offline. Yeah. Yeah. No one's going to claim that necessarily this notation is spelt the best. I guess it was made pre-unicode, you know, so it had to rely only on ASCII signs. And so I don't think there's enough ASCII symbols. So it ends up having to reuse ASCII symbols in ways that are entirely incompatible with each other. Yep. That's correct. So if it's not inside square brackets, it means start offline. If it is inside square brackets, it means the complement of the set, the opposite of the set. The dot which is inside bracket don't mean any character. No special character. Yeah. That just means a dot. And I think in square brackets, except for carrot is literal. Yep. So you could do this to make it extra clear. Yep. In the chat, I shared link to PyTex.org, which is nice because it has a cheat sheet. So whenever I'm working on a regex myself, I never remember, this is based on Rabelart that was very famous in the Ruby world. It's nice for testing your regexes. But also if you expand the cheat sheet, which is, yeah, and then now if you put a string in your test string, it will, and you can put a couple of strings there, it will, you know, show you what it's doing. That's how I figured out the regex. I went to one of these sites. And the most crucial bit here is the regular expression cheat sheet. When you click on it, it expands and you have all these things that you can use. Yeah, I think regex 101 is the one I've tried before. Which I think has a bit more of an explanation if I remember correctly. So I like this that, so you've got the quick reference. But you've also got this like explanation. Matches this character, matches the character. So a capturing group, that's something that remembers is a capturing group. A single character that is not one of these. So yeah. Yeah, so the first like, learning a notation is hard, you know, and so like, almost any notation people don't, as a matter of course, learn at school. It generally gets categorized into the weird, complicated, annoying thing category, you know. But there's nothing like, more or less weird or annoying about regex than basic arithmetic notation. It just isn't something we learn at school, you know. And it's, yeah, you know, arithmetic takes us some years to learn. Regex, has anybody learnt regex recently? Got a sense of how long it takes to learn? Like days, months, weeks? First time I started using it, I think it was actually last year's FASCI course, where you introduced it. And yeah, I always saw it before and I thought it was kind of like, you know, these weird, magical symbols that I'd never understand. And then basically, I like got a basic understanding of it. Really useful tool. And then basically, every few months when I have to come back and use it for something, I just use one of those like, online regex tools to kind of like give myself a jumpstart to get back into it. I mean, it comes up so much. It's like, I would say it's notation worth mastering, you know, which I wouldn't say about that many things. And mastery requires probably some fairly intentional practice over a period of time. Yeah. But yeah, certainly the kind of like, use it from time to time and learn a little bit more each time also works. So I got to show you something which I would guess most Python programmers don't know, but which is amazing, which is that this thing here, the thing we're replacing it with, star, doesn't have to be a string. It can be a function. So here's a function that returns star. And that does the same thing. Right. Or return, we're going to get past the thing that's being replaced. So, you know, just, I mean, one thing we could just do is just print that out. Okay. So we're getting past an re.match object. And so you could better handle this. So an re.match object, we can also get... Can you guys hear me? I can't hear anyone. So it must be me. Oh, sorry. My computer did something on its own. It's a bit weird with the audio. Sorry about that. Okay. So I think to play with a match object, we should probably try and create one. Which I think if we go re.search, we'll get a match object. So let's search for that pattern in that string. There we go. So there's a match object. So hitting dot and pressing tab isn't a bad idea, just to see what kind of stuff we can do. That looks nice. Groups. It doesn't seem to do anything. Ah, it's a default. Got it. This is confusing with groups because group zero is everything, right? So there's groups and group. So group is something where you give an index or name. And so zero gives you everything that was matched and one gives you the first thing that was captured. So that's actually what we want, right? So if we here did return star x.group1 star. Okay. You see what's happened there? So again, I'm doing a lot of exploring and exploring as I go. And so I find using this approach, if I'm working with my code, I basically never get stuck because every step I'm doing is so small and it's from a known place, you know. And it's a small increment. And I'm kind of keeping most of the steps along the way. So it's really, yeah, it's very hard to ever get lost or stuck. So yeah, so now all we have to do is look up the thing in found, right? So found. There we go. Okay, so now we've got to put it in the right format. So actually, yeah, we basically, yeah, this is interesting. We actually want to keep this bit, right, if it exists. So what we can do, yes, we want to keep that bit if it exists. So this thing here where we're searching for anything that's not a square bracket isn't quite what we want. I think we actually need to specifically find the extension, right? So we're looking for a full stop and then an extension. Okay, so an extension is a bunch of letters, right, is a bunch of letters. So backslash W plus. Strictly speaking, it should be three or four letters most of the time, but that's okay. We'll just say backslash W plus. And then next after that, there's either going to be a closed square bracket, or there's going to be pipe followed by a bunch of digits. So in other words, there's going to be optionally pipe followed by a bunch of digits. And I want to keep that because we want to put it in there if it exists. So we're going to look for pipe followed by a bunch of digits, backslash D is a digit. Okay, so we're going to look for all this right. Now to say that that is optional, you use question mark. And so I'm just going to change this to zero just so we can print out the whole thing to make sure it's working. Oh, and we don't want to do that anymore. Let's see. Okay, so it seems to have worked, right? And in fact, what we could even do is just say, print out the groups. And that way we'll see, okay, it's got fixed test error, pipe 900, and fixed issues, none. So you see how the optional thing is coming through as none here, right? So what we want to do is then look up group one, right, which is this. And then if it exists, we then want to put in the pipe 900. Okay, so which is x.group2. Oops, see those are not inside square brackets. Found x.group1. Oh, and that's the end of curly brackets there and start curly brackets there. There we go. Upload blah blah blah.png 900. Cool. And so then this string is going to start with exactly the same thing we had before, which is that. And it's going to end with two square brackets. Okay. So we get rid of our stars. How does that look? We have extra none at the end, which we should have. Okay, we do. Slightly annoying. So or is a Boolean operator, which returns the thing on the left if it's true and the thing on the right otherwise. And so because none stringifies as the string none, but it also is also considered falsy. So this will turn none into an empty string. Okay, well, let's try that on the whole thing. So one easy way to, you know, when you're doing something on a subset, change it to the whole set is you just go delete like so. All right. So we've got a key error, which is understandable. So we're missing good mix. So let's see if that's actually missing or not. So let's have a look in the source and search for good. Okay, there is not good mix. So what I'd be inclined to do then is change square brackets to.get because.get lets us provide a default. So let's use that as a default. All right. Looks hopeful. Or you know what actually would be nicer? I think this is going to end up kind of having like a just a broken image symbol. I think instead what I'd rather do is grab all this and see if we found it and do that. Otherwise, return. That way we'll actually be able to see it. Oops. Oh. There it is. There we are. Missing image. So let's test it. Okay. So I did it. Sure. Oh, okay. So I think I made a mistake. The destination format is not that at all. The destination format is actually this format. It's actually exclamation, square bracket. Okay. So that's not correct. If res, it's exclamation mark, square bracket. Doesn't really matter what the name is. But I guess give it a name. And then oh, and then the size, if there is one. Interesting. Size, if there is one. Just this. And close square bracket and then a parentheses and then the file name. Okay. Is that right? Oh, I've got an iry.match object. That's not right. Oh, it's oh, yeah. This. That looks better, doesn't it? So that's not bad to have an error. Do not get me started with this. Whatever. Okay. Can not. Some of these are too big, but Daniel can easily change. I mean, let's test it actually. So for 3333, let's see if we can change the size. 3333. Sometimes it puts a little percent sign and we can put in. Does that work? Discourse, image size, or comma. Was that a bracket in the comma? A bracket in the comma, sorry? Mm-hmm. Yeah, I think it was, because the next comma they say just by adding. By adding comma 20%. You still have to have the pipe in there. You think so? Do you have the end where it's like a quick just, you know? Yeah, sorry, the end. Yeah, the last sentence there. Yeah. So that might be, you could just do just the comma 50%, I assume after a bracket, maybe that would work. Well, and here it's got before the bracket. Oh, not the bar thing. Oh. Not the bracket. The pipe. Yeah. Let's try that. Yes, okay. Maybe take the dimensions out. No. Hmm. Hmm. Ah. Ah. So, oh, here we go. 50%. Hmm. Okay, so I think we probably shouldn't be putting in his sizes because they actually want to keep the sizes. So let's change it. So, if you press O, by the way, it opens and closes the output of a cell, which is quite handy. All right. So, I guess we've got to have two things. We're going to have the size and the file name. So that's fine. So all we need to do then is to capture this. So, so, so, so, so, so, so, so, so, so, so, so, so, so, so, it's not a dictionary anymore. Okay. And so, then we could say found and we could do a dictionary comprehension. So for name, size, file in that, we're going to go from a name to a tuple of the size and file name. Okay. So we're now going to go x.group. Okay. And so that means we don't need this pipe 900 bit anymore. So we don't have to remember that. Okay. And instead, we've now got the name and the size. The size and the name are the two things that are going to be in this tuple. And so we're going to go pipe followed by the size. And then the name. Extra curly brace in the size. Sorry? There is extra curly braces around size. There it is. Okay. Why did this one not work? Fix issues.png. Fix issues. Fix issues. Should have worked. Oh, okay. So remember how I told you earlier that parentheses do two things. They both group and capture. So when I removed the parentheses, it stopped grouping, which meant the question mark now referred only to the backslash d plus. Actually, I need the parentheses there. Okay. That fixed that. All right. Okay. And so sometimes that's missing. So we'll call that res after all. We'll call that res here. Do that. Okay. Let's see how that looks. Copy. Paste. Ah, cool. So look at that. They've got names. And you can change their sizes. Awesome. I think we're done. Are we done? Yeah. Okay. So these ones here are too big. Let's fix them now. Yeah. Okay. So let's change his. So let's delete that. So next step is to turn this into an app, right? Okay. So which bits do we need? So we don't need this head. Don't need that tail. Don't need the RGs. Chuck this inside here. Don't need that. Okay. So let's go ahead and change the size. So let's go ahead and change the size of the RGs. Okay. So let's restart the kernel and run it all just to make sure. Okay. So that was just that, I guess. Cool. All right. So let's run the function for this. Right. So this is basically replace image. There we go. Jeremy, what that does, this 7, cell 7, it applies the function to the. The DST contents basically. It goes to the search through that string. Yep. It's going to look for this regular expression. And then each time it finds that regular expression, it'll call this function passing in the match object that the regular expression gets. Thank you. All right. No worries. So this is like a very versatile approach to, you know, doing just about anything you can think of with text really. Search for regular expression and replace it with a function. Okay. So if we have. Okay, so let's create our function, which is going to be fix images. Okay. We're going to be passed in a source and a destination. Okay. And this, if you haven't done this before, you might be surprised to discover you can define a function inside a function. And the reason I'm doing that is that the first thing we're going to do is we're going to search for. We're going to search, we're going to create this dictionary, right? There are things to look for. And then this function here refers to that dictionary. So this is a function that kind of only makes sense inside here. And then we're going to return this, right? So we should now be able to print fix images. Passing in our source and destination. There we go. Great. So let's install Gradio. Actually, we've got the latest version by using minus U for upgrade. And I haven't used Gradio much at all except when we did that lesson. So I've forgotten everything. So I might need some help with this. Where are we? Okay. So import Gradio. I'm going to create interface. And the function is fix images. Oh, okay. This took a while. Okay, now what's this input thing? Inputs is sketch pad. Outputs is, oh, I see. We can just say label. Is there a different kind of label for like a large bit of text? Should be like a text box or something like that maybe. Yeah, something, maybe a text box. Here we are. Max lines. Yeah. Okay. Inputs. Wait. And then do we? Okay. So if we pass a string, it's going to construct it. Otherwise we construct it manually. Is that how this works? It said that there's a shortcut if you purchase text, it would work. I think if you go to the, I think I saw it when you were scrolling. I string shortcuts. Oh, text area would have seven lines. I see. I see. I see. Which isn't that many. So let's just try doing it their way. So input is that. And output is that. Okay. And they've got that new like grid flex boxy thing we might be able to use to like get one under the other because we don't really want them side by side, do we? Okay, so where to upload a file? An image there is. Oh, wait, here's something called file. I guess he's probably going to copy and paste it from the forum. So maybe we should just do it like that too. Yeah, let's just do it here. Can we still run stuff? We can. Oh, source and output. That's not right. We need two things to pass to fix images. So does that mean we put square bracket here or something or a dictionary? Inputs, string, component, western strings. Match the number of parameters. All right. Okay, so that's our source. That's cool. That's named them. That's nice. That's our destination. Yes. All right. So for all right. So Gradio needs a script. And so I guess we got us I guess we got a spaces first right. Hacking first spaces. I've forgotten everything. And we create a space. Okay. And we call it a Daniel image fix. Right. It's a Gradio space. Okay. You could just create the app file right there if you wanted to. Create the app file. In the UI. I don't know if that might be easier. I don't know. Is there a hint? Create the app.py file. I didn't know that exists. Cool. Yeah, absolutely. Okay. We're going to need like a requirements.text or something, don't we? We commit this. Does that look right? Yeah, I think so. Yeah. Requirements.text. And I think you just need to put fast core in it. Yes. Okay. Name it requirements.text containing fast core. I love doing this stuff just through the web GUI. It's just so wonderfully lazy. Okay. And that should be it, right? Yeah, I think so. Just, yeah, it has to build the app. It says it's done. So refresh. It says building. Because I think it builds for each commits, then you probably build when you committed the app.py and then it's building again when you commit. Yeah, I just want to say that. I want to say the latest logs, you know. It's got secrets. Yeah. I like the way this stuff is getting standardized now around this idea of just like some key values store secrets that you can chuck in there. Everything looks pretty similar, doesn't it? This is annoying. Runtime error. Okay. So hopefully that means we've got new logs we can see. Space not ready. Oh, that's not very helpful. Logs is now empty. Great. Can you try rerunning the building process? How do you do that? It says restart the space, it says. Okay. I guess I don't know the difference between the factory reboot or the restart. Your space could use a GPU. What does that mean? Is that a thing? I don't know. Like I think they provide it if you like, email them or something like that. It's a custom kind of thing. Oh, right. I don't like emailing people. It makes me feel like I'm being judged. Okay. Is it happening, I think. Yeah, it's a little slow, I guess. Yeah. So I want to ask how long do you plan to keep this live coding running? Is it just indefinitely? Yeah, I've got a plan, actually. Okay. I hope you guys don't think it's too crazy. Important lunch discussions. All right. So why is it still building? So hopefully, you know, get the course out in a couple of weeks. And at that point, I'm thinking of like resetting this as a walkthrough in which, you know, things are actually better organized. And so I hope you guys can still join. I mean, it will be stuff you're already familiar with at this point, but certainly be helpful to have a nice to me to have familiar faces and people who can help. So hopefully that'll be a lot more people because it'll be open to everybody. And over a period of a few weeks, you know, we'll catch up to where we are now as a group. But for the couple of weeks before that I'm planning to do a complete change, which is to do two weeks of APL. So I don't know if you guys are aware of APL, but APL is just about the world's oldest programming language that's still widely used. And it's actually, we talked about notation earlier, it's actually a notation. So APL was originally developed as a notation, not as a programming language. And it won, Iveson won the Turing Award, which is kind of like the Nobel Prize of computer science for it. For this paper about it, which was written about 20 years after he created the notation. APL is a show. So the most common, why is this not working? Oh, because they're not using Windows. I have to press that. So the most widely used APL implementation, there's a lot of them, but the most widely used one is CoreDialog. And yeah, it's basically, it's basically math. Okay. Okay, looks like math. But imagine if you started with math, which itself has been developed over hundreds of years by very smart people. And then one of the smartest people in the world, being Ken Iveson, then took everything from that and combined it with tensor analysis ideas from physics, which have been developed by mainly Albert Einstein and many other people. And then combine that with ideas from computer science. And then have a large group of people continuously work on that from 1960 through to 2022. So it's got a 60 years of continuous development. And that gives you APL. And so just to give you a taste, in math, to add up a series, we use capital sigma. Right. And capital sigma means only one thing. It means add up a series. If you want to multiply together a series, you have to use something completely different, which is capital pi. APL instead has this idea that says you can take a function like plus, and you can modify it using something that they call an operator. So plus is a function. Slash is an operator. Doesn't mean divide. Divided by means divided. And this operator, what it does is it takes a list. That's a list. Right. And it inserts this between every pair of things in the list, which is the same as sigma. Right. In math. And so here's how to do the same thing as capital pi in math. Right. So, for example, here's so then there's a bunch of other symbols. Right. So, for example, a symbol which actually finds that way. So lots and lots of ideas from APL have found their way into other programming languages. One of them is a lot of programming languages have something called IOTA, which means the same thing as range in Python. So IOTA is six. It means almost the same thing as range. It's range plus one, if you like, rather than zero to five. It's one to six. This is how sequences and series are defined in math. In math, we start at one normally. So if I want to do factorial, right, I could do apply time slash sorry, apply time slash to IOTA six. So that's going to take one to you actually read right to left in APL. So that takes this series here and sticks times between every pair of things in it. So one times two times three times four times five times six. You get the idea? And so I'll give you an example of another operator. Backslash is the same as slash, except it basically it's cumulative. It shows me the results as I go. This is one, one times two, one times two times three, one times two times three times four, one times two times four times five, one times two times three times four times five times six. So it's basically, yeah, it's a notation. It's, you know, built on mathematical notation. Jeremy, can you handle complex number as well? Yes, absolutely. Yeah, absolutely. So complex numbers are written with J. That's a complex number. And so one of the interesting things about APL is every function, or nearly every function, maybe every function, has both monadic and dyadic forms. The dyadic form means it takes two arguments, one on the left and one on the right. So here are the dyadic versions of plus, minus, divide, and times. But there's also monadic versions. And so for example, so if I wave my mouse over any of these, it tells me, so the dyadic version of plus is plus, obviously. The monadic version is conjugate, which is a complex number thing. So the conjugate of real number two is two. The conjugate of the real number two y plus three is two i minus three. So, yeah, it's, yeah, handles, it's kind of in some ways a superset of mathematical notation. And so, yeah, it's not just plus, minus, times, divide, but see all these different things at the top? There's all of these as well. Some of which you'll recognize, like epsilon, which as you'd expect, means membership as dyadic. That also has a monadic form. So it does a lot more things than normal math notation. And so some of them, like, are really quite interesting. So for example, there's something called upstyle, which is, looks like this. And it returns the maximum of those two things. Now where that gets interesting is, what if we do maximum slash what did that do? Well that did the maximum of four and three, sorry, maximum of five and four. And then it was the maximum of that and six, and then the maximum of that and four, and then the maximum of that and three. So in other words it's five upstyle four upstyle six upstyle four upstyle three, which when you think about it as the maximum of the list. Right. So, a lot of kind of things that in normal math notation we have to, like invent something in the paper as we go or whatever in APL. It's this this kind of like natural extension. So, yeah, so I just, I thought it'd be fun to have a couple of weeks of exploring this. And it's actually very helpful for pytorch, TensorFlow and array and NumPy programmers, because those ideas were in many ways stolen from APL. So for example, just like you can do an APL, a number plus a list. You can do that in APL but APL invented it. And does it in kind of like often more interesting ways. One of the fun things about APL is defining functions. Things tend to be a bit more consistent than a lot of other languages. So, in Python, for example, you define a function with like kind of a unique, you know, syntax. In APL to define a variable, you use arrow. And to find a function, you use a variable as well. It's just that the function goes in curly brackets. And you can pass one thing to the function, in which case it'll be called Omega, or you can pass two things to a function which case it'll be called Omega and Alpha. And if I were to define plus, I would go Alpha plus Omega, and I now created my own operator, and you can use any Unicode symbol so you can actually build up your own notation. And so it gets kind of pretty interesting because a lot of like for example there's an operator called power, repeats a function, n times. And so for example you can define exponent, literally as repeat power n times. And so then you can like come up with your own versions of repeating things a bunch of times in ways which aren't necessarily in math that might be quite helpful. Whatever you're doing. Anyway, so that's my plan. What do people use APL for nowadays? Honestly, there's two main areas. So APL is one of a class of what's called array languages of which there's three main ones in use, APL, K and J. The array languages are most commonly used in hedge fund trading, which is partly a historical thing, you know, that's where the money is I guess and so you know that's a group of people who don't care about trends as long as they can make money so when they kind of realize this is a really good way of expressing mathematical ideas they kind of really dived into it. And in particular, Arthur Whitney who helped create APL and went on to create K, he developed a kind of a extended version of APL called A plus at Morgan Stanley. So Morgan Stanley did a lot of stuff in A plus. Yeah, so nowadays K actually there's a whole database built on K called KDB, which is considered perhaps the fastest database in the world for a lot of things. The whole K implementation is so concise that it fits in the cache on a CPU, which is pretty amazing. Because as you can imagine with this kind of expressiveness you can often write pretty sophisticated programs in one or two lines of code. Yeah, it's also used in kind of like legacy big business stuff because it's been around a long time, you know, but I don't think that's a very interesting use of it. But then like it's starting to get popular, I mean niche popular again just as like people interested in math and notation, you know, so some of the ideas have made their way into mainstream math. So for example, something that, you know, pretty much any working mathematician will be familiar with is Iverson brackets. This is a type in Iverson, it says Iverson bracket, right. Which is basically the idea that you can put a Boolean expression and make it one or zero and once you make Booleans ones and zeros you can manipulate them in mathematical ways, you know, and so that idea comes from APL. And so for example, which of these things is greater than the corresponding thing in probably all that's very good in iota six, iota five rather. At least on my end I can, okay, because you're at the bottom so the skin is a little bit covered by the, in Zoom. Yeah, okay I see that line fine yeah. Cool. Yeah, so you know what's what you know once you recognize that you can do things like this, and if you return ones and zeros is the truth values you could be like oh like how many times was that true, you know, stuff like that, you know. So anyway so like some of the ideas have made their way into math and coding and stuff like that. So, maybe that's kind of main thing it's used for in some ways but my interest is just kind of to look for ideas and things like that I guess it's kind of useful thing. Yeah, a lot of people, including me who have spent time with array programming feel like it's the most mind opening thing they've done in computer science, because it's like going to this alien world where they've spent 60 years going in a different direction. And suddenly realizing like, and a lot of the smartest people who have worked in computer science were on that path, not our path. And it's like, wow, what have they been doing. So like, I actually find it very enjoyable because you end up reading interesting papers from the 60s and 70s and stuff and it's just like, oh my god, you know, and. So for example, I don't know if you saw but Mathematica came out with a new version of Mathematica today, which is cool. So the latest version of Mathematica, which came out yesterday or the day before, basically says, oh, we've invented this new thing called threaded. And anyway, it actually turns out if you read it, that it's the same thing as what's called the rank conjunction in APL and J, which has been around for decades. So it's like one of these things where it's like, oh, you know, ideas that have decades old are sometimes only just finding their way into modern languages. Yeah, like, like Mathematica. It's also a really, it's a really great way to learn math or part, big parts of math. Yeah, because as you go through it, let's say, for example, that's your artist question, does it have complex numbers. So as you go through it, my plan is to kind of go through each glyph. And so some of those glyphs are going to be like, okay, well, this is the conjugate of complex numbers. What on earth does that mean? So like, you know, really gives you a chance to explore that. And then in particular, the language called J, which was developed by the developers APL as a kind of a getting all the best ideas from APL over the decades and making them better actually comes with a whole bunch of things they call them labs, which basically take you through really interesting mathematical ideas like polynomials, you know, and all this stuff like using J is the notation. And I prefer that to normal math notation because I already always know exactly what it means, you know, that it has a totally consistent meaning. And yeah, so yeah, so that's my plan for next week. Actually, I come across KDB before my old boss is worked for Morgan Stanley, and I think they still have that free version, maybe I need to dig around with the memories, less than four gig, they actually have free version. They do have free versions now. And he last time we tried to do some IoT application so contact all the different sensor for machinery, and they come by and actually better and the performance faster than Panda as well. So he do all the configuration in KDP and then give me the file and then I start doing the visualization. So, yeah, but he used to tell me, take six months to actually train a person to actually can read it. So you can get us up in one thing, couple of weeks. Let's get up and running. So I've actually, I, so like, I don't know much APL at all, to be clear, so this is not like teaching you this is a shared exploration. I've done a little bit of like a little bit of J before, and then two or three weeks ago, reached the point in teaching my daughter and so I teach my daughter and her best friend math I tutor them. And we reached the point a few weeks ago where we were up to doing sequences and series, you know, like sigma notation, and I started trying to teach them and they had no idea what I was talking about. And I was like, I thought of sigma notation is actually extremely easy because, like, if you explain it to me it you just be like oh well it's like this list comprehension with some on the front, you know it's like it's a very. It's just like that's exactly what it is but of course they didn't have any of that kind of idea of indexing or anything so you know you kind of trying to say like TN equals TN minus one plus one is a arithmetic sequence, you know, or whatever, you know, like sigma equals one to six of I. They're just like, what's TN what's I like what's going on. So then we stopped trying you know there's like one failed lesson. I was like okay. Forget all that. I'm going to teach you a PL and umpire instead. And so we did like three lessons of a PL and umpire and then I said okay. So here's that thing sigma, you know, equals one to five of I. That's this. That's plus slash iota five. And I'm like, oh, oh that's all. Okay. You know, or, you know, and umpire and people didn't use MP docs I use wildcard import so some a range five plus one. Oh, that's all. So, yeah, so that's why I've been like re engaging or engaging more deeply with a PL. You know, I think it's just a beautiful, a beautiful notation. And it reminds me in some ways of like learning Chinese like once I started learning Chinese is like, oh my god this is whole culture of thousands of years. And I'm, you know, or APL is like that but this whole culture of 60 years, you know, there's this whole. And recently I tried to convert things on MATLAB mathematical formula into Python actually quite painful. Yeah, yeah. Doing some signal processing. Cool. How did our thing. Oh look, there's a thing here. So, please try it and tell me if you find anything broken up with it in the chat. Oh, why is there an M there. That's better. Alright, thanks all. Bye. Looking forward to. Hey, awesome. Thanks for having me.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 11.64, "text": " I don't know if you saw, but somebody on the forum, not just somebody, somebody extremely", "tokens": [286, 500, 380, 458, 498, 291, 1866, 11, 457, 2618, 322, 264, 17542, 11, 406, 445, 2618, 11, 2618, 4664], "temperature": 0.0, "avg_logprob": -0.25881475083371425, "compression_ratio": 1.4206349206349207, "no_speech_prob": 0.03504859656095505}, {"id": 1, "seek": 0, "start": 11.64, "end": 25.48, "text": " helpful and kind, being Daniel on the forum, he does these summaries of the walkthroughs.", "tokens": [4961, 293, 733, 11, 885, 8033, 322, 264, 17542, 11, 415, 775, 613, 8367, 4889, 295, 264, 1792, 11529, 82, 13], "temperature": 0.0, "avg_logprob": -0.25881475083371425, "compression_ratio": 1.4206349206349207, "no_speech_prob": 0.03504859656095505}, {"id": 2, "seek": 2548, "start": 25.48, "end": 37.72, "text": " I saw that Jeremy. I tried to do a little bit, but I think I didn't have time to finish", "tokens": [286, 1866, 300, 17809, 13, 286, 3031, 281, 360, 257, 707, 857, 11, 457, 286, 519, 286, 994, 380, 362, 565, 281, 2413], "temperature": 0.0, "avg_logprob": -0.23899093894071358, "compression_ratio": 1.475, "no_speech_prob": 0.00022963220544625074}, {"id": 3, "seek": 2548, "start": 37.72, "end": 38.72, "text": " it off.", "tokens": [309, 766, 13], "temperature": 0.0, "avg_logprob": -0.23899093894071358, "compression_ratio": 1.475, "no_speech_prob": 0.00022963220544625074}, {"id": 4, "seek": 2548, "start": 38.72, "end": 44.120000000000005, "text": " Oh yeah. Okay. So did you want to maybe share your screen and get us up to speed with like", "tokens": [876, 1338, 13, 1033, 13, 407, 630, 291, 528, 281, 1310, 2073, 428, 2568, 293, 483, 505, 493, 281, 3073, 365, 411], "temperature": 0.0, "avg_logprob": -0.23899093894071358, "compression_ratio": 1.475, "no_speech_prob": 0.00022963220544625074}, {"id": 5, "seek": 2548, "start": 44.120000000000005, "end": 49.400000000000006, "text": " what the problem is we're solving and where the data is for it and stuff like that? You're", "tokens": [437, 264, 1154, 307, 321, 434, 12606, 293, 689, 264, 1412, 307, 337, 309, 293, 1507, 411, 300, 30, 509, 434], "temperature": 0.0, "avg_logprob": -0.23899093894071358, "compression_ratio": 1.475, "no_speech_prob": 0.00022963220544625074}, {"id": 6, "seek": 2548, "start": 49.400000000000006, "end": 52.28, "text": " muted by the way.", "tokens": [32808, 538, 264, 636, 13], "temperature": 0.0, "avg_logprob": -0.23899093894071358, "compression_ratio": 1.475, "no_speech_prob": 0.00022963220544625074}, {"id": 7, "seek": 5228, "start": 52.28, "end": 60.72, "text": " Sorry. Yeah. Actually it's just what was in, I think it was the 713th, live coding.", "tokens": [4919, 13, 865, 13, 5135, 309, 311, 445, 437, 390, 294, 11, 286, 519, 309, 390, 264, 1614, 7668, 392, 11, 1621, 17720, 13], "temperature": 0.0, "avg_logprob": -0.2761985180424709, "compression_ratio": 1.6095238095238096, "no_speech_prob": 2.8852782634203322e-05}, {"id": 8, "seek": 5228, "start": 60.72, "end": 63.0, "text": " Live coding, which one? Live coding?", "tokens": [10385, 17720, 11, 597, 472, 30, 10385, 17720, 30], "temperature": 0.0, "avg_logprob": -0.2761985180424709, "compression_ratio": 1.6095238095238096, "no_speech_prob": 2.8852782634203322e-05}, {"id": 9, "seek": 5228, "start": 63.0, "end": 64.0, "text": " Live coding 13.", "tokens": [10385, 17720, 3705, 13], "temperature": 0.0, "avg_logprob": -0.2761985180424709, "compression_ratio": 1.6095238095238096, "no_speech_prob": 2.8852782634203322e-05}, {"id": 10, "seek": 5228, "start": 64.0, "end": 66.2, "text": " Live coding 13. Okay.", "tokens": [10385, 17720, 3705, 13, 1033, 13], "temperature": 0.0, "avg_logprob": -0.2761985180424709, "compression_ratio": 1.6095238095238096, "no_speech_prob": 2.8852782634203322e-05}, {"id": 11, "seek": 5228, "start": 66.2, "end": 74.24000000000001, "text": " Yeah. So I basically, I kind of had a really janky solution. It's not, it probably doesn't", "tokens": [865, 13, 407, 286, 1936, 11, 286, 733, 295, 632, 257, 534, 361, 657, 88, 3827, 13, 467, 311, 406, 11, 309, 1391, 1177, 380], "temperature": 0.0, "avg_logprob": -0.2761985180424709, "compression_ratio": 1.6095238095238096, "no_speech_prob": 2.8852782634203322e-05}, {"id": 12, "seek": 5228, "start": 74.24000000000001, "end": 78.6, "text": " work, but what I was thinking of doing was like putting them in some kind of like a file", "tokens": [589, 11, 457, 437, 286, 390, 1953, 295, 884, 390, 411, 3372, 552, 294, 512, 733, 295, 411, 257, 3991], "temperature": 0.0, "avg_logprob": -0.2761985180424709, "compression_ratio": 1.6095238095238096, "no_speech_prob": 2.8852782634203322e-05}, {"id": 13, "seek": 7860, "start": 78.6, "end": 82.96, "text": " side by side and then sort of indexing it, but I actually didn't do anything. What I", "tokens": [1252, 538, 1252, 293, 550, 1333, 295, 8186, 278, 309, 11, 457, 286, 767, 994, 380, 360, 1340, 13, 708, 286], "temperature": 0.0, "avg_logprob": -0.25509151111949574, "compression_ratio": 1.5043478260869565, "no_speech_prob": 1.643999530642759e-05}, {"id": 14, "seek": 7860, "start": 82.96, "end": 86.08, "text": " did is basically this at the end.", "tokens": [630, 307, 1936, 341, 412, 264, 917, 13], "temperature": 0.0, "avg_logprob": -0.25509151111949574, "compression_ratio": 1.5043478260869565, "no_speech_prob": 1.643999530642759e-05}, {"id": 15, "seek": 7860, "start": 86.08, "end": 87.08, "text": " Uh huh. So.", "tokens": [4019, 7020, 13, 407, 13], "temperature": 0.0, "avg_logprob": -0.25509151111949574, "compression_ratio": 1.5043478260869565, "no_speech_prob": 1.643999530642759e-05}, {"id": 16, "seek": 7860, "start": 87.08, "end": 91.03999999999999, "text": " So I'm not quite sure how to take it any further.", "tokens": [407, 286, 478, 406, 1596, 988, 577, 281, 747, 309, 604, 3052, 13], "temperature": 0.0, "avg_logprob": -0.25509151111949574, "compression_ratio": 1.5043478260869565, "no_speech_prob": 1.643999530642759e-05}, {"id": 17, "seek": 7860, "start": 91.03999999999999, "end": 95.47999999999999, "text": " Yeah, I don't even know what it is yet. So let me just, so, okay. So I've got my screen", "tokens": [865, 11, 286, 500, 380, 754, 458, 437, 309, 307, 1939, 13, 407, 718, 385, 445, 11, 370, 11, 1392, 13, 407, 286, 600, 658, 452, 2568], "temperature": 0.0, "avg_logprob": -0.25509151111949574, "compression_ratio": 1.5043478260869565, "no_speech_prob": 1.643999530642759e-05}, {"id": 18, "seek": 7860, "start": 95.47999999999999, "end": 107.36, "text": " sharing here. And so can you guys see that? Okay. So where do I start? So he.", "tokens": [5414, 510, 13, 400, 370, 393, 291, 1074, 536, 300, 30, 1033, 13, 407, 689, 360, 286, 722, 30, 407, 415, 13], "temperature": 0.0, "avg_logprob": -0.25509151111949574, "compression_ratio": 1.5043478260869565, "no_speech_prob": 1.643999530642759e-05}, {"id": 19, "seek": 10736, "start": 107.36, "end": 109.84, "text": " I didn't quite understand like.", "tokens": [286, 994, 380, 1596, 1223, 411, 13], "temperature": 0.0, "avg_logprob": -0.3489087677001953, "compression_ratio": 1.5822784810126582, "no_speech_prob": 1.0450092304381542e-05}, {"id": 20, "seek": 10736, "start": 109.84, "end": 114.16, "text": " I finished that on the forum.", "tokens": [286, 4335, 300, 322, 264, 17542, 13], "temperature": 0.0, "avg_logprob": -0.3489087677001953, "compression_ratio": 1.5822784810126582, "no_speech_prob": 1.0450092304381542e-05}, {"id": 21, "seek": 10736, "start": 114.16, "end": 122.44, "text": " Yeah. So that's basically like if you get that node at the end, he's got all the images.", "tokens": [865, 13, 407, 300, 311, 1936, 411, 498, 291, 483, 300, 9984, 412, 264, 917, 11, 415, 311, 658, 439, 264, 5267, 13], "temperature": 0.0, "avg_logprob": -0.3489087677001953, "compression_ratio": 1.5822784810126582, "no_speech_prob": 1.0450092304381542e-05}, {"id": 22, "seek": 10736, "start": 122.44, "end": 123.44, "text": " Yep.", "tokens": [7010, 13], "temperature": 0.0, "avg_logprob": -0.3489087677001953, "compression_ratio": 1.5822784810126582, "no_speech_prob": 1.0450092304381542e-05}, {"id": 23, "seek": 10736, "start": 123.44, "end": 132.28, "text": " Right. So these are kind of like the, at the end, he's got the actual images in that dropdown.", "tokens": [1779, 13, 407, 613, 366, 733, 295, 411, 264, 11, 412, 264, 917, 11, 415, 311, 658, 264, 3539, 5267, 294, 300, 47599, 13], "temperature": 0.0, "avg_logprob": -0.3489087677001953, "compression_ratio": 1.5822784810126582, "no_speech_prob": 1.0450092304381542e-05}, {"id": 24, "seek": 13228, "start": 132.28, "end": 138.0, "text": " And what I did was I actually went in there and I looked at the code or what the HTML", "tokens": [400, 437, 286, 630, 390, 286, 767, 1437, 294, 456, 293, 286, 2956, 412, 264, 3089, 420, 437, 264, 17995], "temperature": 0.0, "avg_logprob": -0.3287066487432684, "compression_ratio": 1.6028708133971292, "no_speech_prob": 6.7478176788426936e-06}, {"id": 25, "seek": 13228, "start": 138.0, "end": 144.36, "text": " and are these meant to be in the same order as like, do they have names or I just, I don't", "tokens": [293, 366, 613, 4140, 281, 312, 294, 264, 912, 1668, 382, 411, 11, 360, 436, 362, 5288, 420, 286, 445, 11, 286, 500, 380], "temperature": 0.0, "avg_logprob": -0.3287066487432684, "compression_ratio": 1.6028708133971292, "no_speech_prob": 6.7478176788426936e-06}, {"id": 26, "seek": 13228, "start": 144.36, "end": 147.36, "text": " think so. I don't think so.", "tokens": [519, 370, 13, 286, 500, 380, 519, 370, 13], "temperature": 0.0, "avg_logprob": -0.3287066487432684, "compression_ratio": 1.6028708133971292, "no_speech_prob": 6.7478176788426936e-06}, {"id": 27, "seek": 13228, "start": 147.36, "end": 153.16, "text": " Let's see. So this is at, this is called add to actually hang on. What we could do is if", "tokens": [961, 311, 536, 13, 407, 341, 307, 412, 11, 341, 307, 1219, 909, 281, 767, 3967, 322, 13, 708, 321, 727, 360, 307, 498], "temperature": 0.0, "avg_logprob": -0.3287066487432684, "compression_ratio": 1.6028708133971292, "no_speech_prob": 6.7478176788426936e-06}, {"id": 28, "seek": 13228, "start": 153.16, "end": 154.16, "text": " we click edit.", "tokens": [321, 2052, 8129, 13], "temperature": 0.0, "avg_logprob": -0.3287066487432684, "compression_ratio": 1.6028708133971292, "no_speech_prob": 6.7478176788426936e-06}, {"id": 29, "seek": 13228, "start": 154.16, "end": 157.16, "text": " Right. That's right. Yeah.", "tokens": [1779, 13, 663, 311, 558, 13, 865, 13], "temperature": 0.0, "avg_logprob": -0.3287066487432684, "compression_ratio": 1.6028708133971292, "no_speech_prob": 6.7478176788426936e-06}, {"id": 30, "seek": 15716, "start": 157.16, "end": 168.0, "text": " Oh, I see. This is like got off the edge of the screen. And so let's see. So these have,", "tokens": [876, 11, 286, 536, 13, 639, 307, 411, 658, 766, 264, 4691, 295, 264, 2568, 13, 400, 370, 718, 311, 536, 13, 407, 613, 362, 11], "temperature": 0.0, "avg_logprob": -0.28456641025230534, "compression_ratio": 1.4295774647887325, "no_speech_prob": 5.337797119864263e-06}, {"id": 31, "seek": 15716, "start": 168.0, "end": 177.56, "text": " okay. These have names. Okay. Cool. Like add to class. And then presumably there's an add", "tokens": [1392, 13, 1981, 362, 5288, 13, 1033, 13, 8561, 13, 1743, 909, 281, 1508, 13, 400, 550, 26742, 456, 311, 364, 909], "temperature": 0.0, "avg_logprob": -0.28456641025230534, "compression_ratio": 1.4295774647887325, "no_speech_prob": 5.337797119864263e-06}, {"id": 32, "seek": 15716, "start": 177.56, "end": 179.6, "text": " to class somewhere here.", "tokens": [281, 1508, 4079, 510, 13], "temperature": 0.0, "avg_logprob": -0.28456641025230534, "compression_ratio": 1.4295774647887325, "no_speech_prob": 5.337797119864263e-06}, {"id": 33, "seek": 17960, "start": 179.6, "end": 191.56, "text": " Let's try searching for that. Add to class. Yes. Yes. Yes. Oh, that's cool.", "tokens": [961, 311, 853, 10808, 337, 300, 13, 5349, 281, 1508, 13, 1079, 13, 1079, 13, 1079, 13, 876, 11, 300, 311, 1627, 13], "temperature": 0.0, "avg_logprob": -0.11703145027160644, "compression_ratio": 1.6328502415458936, "no_speech_prob": 2.1906671463511884e-06}, {"id": 34, "seek": 17960, "start": 191.56, "end": 195.07999999999998, "text": " And then the sizes are different a little bit. And this is in double brackets at the", "tokens": [400, 550, 264, 11602, 366, 819, 257, 707, 857, 13, 400, 341, 307, 294, 3834, 26179, 412, 264], "temperature": 0.0, "avg_logprob": -0.11703145027160644, "compression_ratio": 1.6328502415458936, "no_speech_prob": 2.1906671463511884e-06}, {"id": 35, "seek": 17960, "start": 195.07999999999998, "end": 201.07999999999998, "text": " end. So I wasn't sure what kind of regex would do that, but I think the one that I got, it", "tokens": [917, 13, 407, 286, 2067, 380, 988, 437, 733, 295, 319, 432, 87, 576, 360, 300, 11, 457, 286, 519, 264, 472, 300, 286, 658, 11, 309], "temperature": 0.0, "avg_logprob": -0.11703145027160644, "compression_ratio": 1.6328502415458936, "no_speech_prob": 2.1906671463511884e-06}, {"id": 36, "seek": 17960, "start": 201.07999999999998, "end": 207.04, "text": " kind of, it just kind of captures. So what I did was what I actually did was I went to", "tokens": [733, 295, 11, 309, 445, 733, 295, 27986, 13, 407, 437, 286, 630, 390, 437, 286, 767, 630, 390, 286, 1437, 281], "temperature": 0.0, "avg_logprob": -0.11703145027160644, "compression_ratio": 1.6328502415458936, "no_speech_prob": 2.1906671463511884e-06}, {"id": 37, "seek": 20704, "start": 207.04, "end": 215.35999999999999, "text": " the bottom, I took all of the ones from the bottom and then I got rid of the, I just extracted", "tokens": [264, 2767, 11, 286, 1890, 439, 295, 264, 2306, 490, 264, 2767, 293, 550, 286, 658, 3973, 295, 264, 11, 286, 445, 34086], "temperature": 0.0, "avg_logprob": -0.2592661332110969, "compression_ratio": 1.3445378151260505, "no_speech_prob": 1.8339067537453957e-05}, {"id": 38, "seek": 20704, "start": 215.35999999999999, "end": 217.6, "text": " that and that's about how far I got.", "tokens": [300, 293, 300, 311, 466, 577, 1400, 286, 658, 13], "temperature": 0.0, "avg_logprob": -0.2592661332110969, "compression_ratio": 1.3445378151260505, "no_speech_prob": 1.8339067537453957e-05}, {"id": 39, "seek": 20704, "start": 217.6, "end": 225.12, "text": " Okay. No worries. All right.", "tokens": [1033, 13, 883, 16340, 13, 1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.2592661332110969, "compression_ratio": 1.3445378151260505, "no_speech_prob": 1.8339067537453957e-05}, {"id": 40, "seek": 22512, "start": 225.12, "end": 241.12, "text": " Let me just start up Jupyter then. Okay.", "tokens": [961, 385, 445, 722, 493, 22125, 88, 391, 550, 13, 1033, 13], "temperature": 0.0, "avg_logprob": -0.3795425593852997, "compression_ratio": 0.8333333333333334, "no_speech_prob": 3.426085095270537e-05}, {"id": 41, "seek": 24112, "start": 241.12, "end": 269.28000000000003, "text": " All right. So this is our, this is our kind of source images.", "tokens": [1057, 558, 13, 407, 341, 307, 527, 11, 341, 307, 527, 733, 295, 4009, 5267, 13], "temperature": 0.0, "avg_logprob": -0.3436371088027954, "compression_ratio": 1.0892857142857142, "no_speech_prob": 3.3206244552275166e-05}, {"id": 42, "seek": 26928, "start": 269.28, "end": 280.35999999999996, "text": " Okay. So you guys know if you put things in triple quotes, then it creates a multi-line", "tokens": [1033, 13, 407, 291, 1074, 458, 498, 291, 829, 721, 294, 15508, 19963, 11, 550, 309, 7829, 257, 4825, 12, 1889], "temperature": 0.0, "avg_logprob": -0.33609685443696524, "compression_ratio": 1.2280701754385965, "no_speech_prob": 4.9059199227485806e-05}, {"id": 43, "seek": 26928, "start": 280.35999999999996, "end": 282.35999999999996, "text": " string.", "tokens": [6798, 13], "temperature": 0.0, "avg_logprob": -0.33609685443696524, "compression_ratio": 1.2280701754385965, "no_speech_prob": 4.9059199227485806e-05}, {"id": 44, "seek": 26928, "start": 282.35999999999996, "end": 297.44, "text": " Okay. And so then we've got our destination.", "tokens": [1033, 13, 400, 370, 550, 321, 600, 658, 527, 12236, 13], "temperature": 0.0, "avg_logprob": -0.33609685443696524, "compression_ratio": 1.2280701754385965, "no_speech_prob": 4.9059199227485806e-05}, {"id": 45, "seek": 29744, "start": 297.44, "end": 312.0, "text": " Okay. I guess which is everything else, right? Destination.", "tokens": [1033, 13, 286, 2041, 597, 307, 1203, 1646, 11, 558, 30, 16339, 2486, 13], "temperature": 0.0, "avg_logprob": -0.274112065633138, "compression_ratio": 1.2540983606557377, "no_speech_prob": 1.7228659999091178e-05}, {"id": 46, "seek": 29744, "start": 312.0, "end": 322.8, "text": " Okay. So there's a good start. We've got our data. So like, I guess like the reason I thought", "tokens": [1033, 13, 407, 456, 311, 257, 665, 722, 13, 492, 600, 658, 527, 1412, 13, 407, 411, 11, 286, 2041, 411, 264, 1778, 286, 1194], "temperature": 0.0, "avg_logprob": -0.274112065633138, "compression_ratio": 1.2540983606557377, "no_speech_prob": 1.7228659999091178e-05}, {"id": 47, "seek": 32280, "start": 322.8, "end": 336.04, "text": " this might be interesting to do here is basically, yeah, people often ask like, how do you go", "tokens": [341, 1062, 312, 1880, 281, 360, 510, 307, 1936, 11, 1338, 11, 561, 2049, 1029, 411, 11, 577, 360, 291, 352], "temperature": 0.0, "avg_logprob": -0.10610082655241995, "compression_ratio": 1.4831460674157304, "no_speech_prob": 1.553451397739991e-06}, {"id": 48, "seek": 32280, "start": 336.04, "end": 339.56, "text": " about actually solving a problem or doing coding or whatever? So I thought, I guess", "tokens": [466, 767, 12606, 257, 1154, 420, 884, 17720, 420, 2035, 30, 407, 286, 1194, 11, 286, 2041], "temperature": 0.0, "avg_logprob": -0.10610082655241995, "compression_ratio": 1.4831460674157304, "no_speech_prob": 1.553451397739991e-06}, {"id": 49, "seek": 32280, "start": 339.56, "end": 348.06, "text": " if we do it together, then we can go through the process, which will work a lot better", "tokens": [498, 321, 360, 309, 1214, 11, 550, 321, 393, 352, 807, 264, 1399, 11, 597, 486, 589, 257, 688, 1101], "temperature": 0.0, "avg_logprob": -0.10610082655241995, "compression_ratio": 1.4831460674157304, "no_speech_prob": 1.553451397739991e-06}, {"id": 50, "seek": 34806, "start": 348.06, "end": 355.24, "text": " if you ask questions or add comments, you know, as we go, obviously. One thing that", "tokens": [498, 291, 1029, 1651, 420, 909, 3053, 11, 291, 458, 11, 382, 321, 352, 11, 2745, 13, 1485, 551, 300], "temperature": 0.0, "avg_logprob": -0.18649967705331197, "compression_ratio": 1.5408163265306123, "no_speech_prob": 1.0288965313520748e-05}, {"id": 51, "seek": 34806, "start": 355.24, "end": 359.36, "text": " does occur to me is in this notebook, actually, this is, I find quite, this is quite awkward", "tokens": [775, 5160, 281, 385, 307, 294, 341, 21060, 11, 767, 11, 341, 307, 11, 286, 915, 1596, 11, 341, 307, 1596, 11411], "temperature": 0.0, "avg_logprob": -0.18649967705331197, "compression_ratio": 1.5408163265306123, "no_speech_prob": 1.0288965313520748e-05}, {"id": 52, "seek": 34806, "start": 359.36, "end": 368.6, "text": " to have so much data here. So what I might do actually is instead put them into text", "tokens": [281, 362, 370, 709, 1412, 510, 13, 407, 437, 286, 1062, 360, 767, 307, 2602, 829, 552, 666, 2487], "temperature": 0.0, "avg_logprob": -0.18649967705331197, "compression_ratio": 1.5408163265306123, "no_speech_prob": 1.0288965313520748e-05}, {"id": 53, "seek": 34806, "start": 368.6, "end": 375.56, "text": " files. So this one is the source, right?", "tokens": [7098, 13, 407, 341, 472, 307, 264, 4009, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.18649967705331197, "compression_ratio": 1.5408163265306123, "no_speech_prob": 1.0288965313520748e-05}, {"id": 54, "seek": 37556, "start": 375.56, "end": 386.24, "text": " In bash, if you type cat and read, and then this means redirect to a file, right? So we", "tokens": [682, 46183, 11, 498, 291, 2010, 3857, 293, 1401, 11, 293, 550, 341, 1355, 29066, 281, 257, 3991, 11, 558, 30, 407, 321], "temperature": 0.0, "avg_logprob": -0.2207298801369863, "compression_ratio": 1.5116279069767442, "no_speech_prob": 5.594178674073191e-06}, {"id": 55, "seek": 37556, "start": 386.24, "end": 393.16, "text": " could create a file called source.text. It's now reading from standard in, it's reading", "tokens": [727, 1884, 257, 3991, 1219, 4009, 13, 25111, 13, 467, 311, 586, 3760, 490, 3832, 294, 11, 309, 311, 3760], "temperature": 0.0, "avg_logprob": -0.2207298801369863, "compression_ratio": 1.5116279069767442, "no_speech_prob": 5.594178674073191e-06}, {"id": 56, "seek": 37556, "start": 393.16, "end": 401.4, "text": " from the input, right? So I can paste like so. And then to tell basically in Unix to", "tokens": [490, 264, 4846, 11, 558, 30, 407, 286, 393, 9163, 411, 370, 13, 400, 550, 281, 980, 1936, 294, 1156, 970, 281], "temperature": 0.0, "avg_logprob": -0.2207298801369863, "compression_ratio": 1.5116279069767442, "no_speech_prob": 5.594178674073191e-06}, {"id": 57, "seek": 40140, "start": 401.4, "end": 411.15999999999997, "text": " say I finished this file, you hit control D. Okay. And so if I was to now Vim that you", "tokens": [584, 286, 4335, 341, 3991, 11, 291, 2045, 1969, 413, 13, 1033, 13, 400, 370, 498, 286, 390, 281, 586, 691, 332, 300, 291], "temperature": 0.0, "avg_logprob": -0.30760272856681575, "compression_ratio": 1.5784313725490196, "no_speech_prob": 1.1477289262984414e-05}, {"id": 58, "seek": 40140, "start": 411.15999999999997, "end": 417.67999999999995, "text": " can see it's there. Okay. So that's how you can quickly and easily, there's lots of quick", "tokens": [393, 536, 309, 311, 456, 13, 1033, 13, 407, 300, 311, 577, 291, 393, 2661, 293, 3612, 11, 456, 311, 3195, 295, 1702], "temperature": 0.0, "avg_logprob": -0.30760272856681575, "compression_ratio": 1.5784313725490196, "no_speech_prob": 1.1477289262984414e-05}, {"id": 59, "seek": 40140, "start": 417.67999999999995, "end": 419.32, "text": " and easy ways to create text files.", "tokens": [293, 1858, 2098, 281, 1884, 2487, 7098, 13], "temperature": 0.0, "avg_logprob": -0.30760272856681575, "compression_ratio": 1.5784313725490196, "no_speech_prob": 1.1477289262984414e-05}, {"id": 60, "seek": 40140, "start": 419.32, "end": 426.2, "text": " Sorry, I got confused with the prompt because there was this git thing and I thought, wow,", "tokens": [4919, 11, 286, 658, 9019, 365, 264, 12391, 570, 456, 390, 341, 18331, 551, 293, 286, 1194, 11, 6076, 11], "temperature": 0.0, "avg_logprob": -0.30760272856681575, "compression_ratio": 1.5784313725490196, "no_speech_prob": 1.1477289262984414e-05}, {"id": 61, "seek": 40140, "start": 426.2, "end": 428.2, "text": " git, you know, and", "tokens": [18331, 11, 291, 458, 11, 293], "temperature": 0.0, "avg_logprob": -0.30760272856681575, "compression_ratio": 1.5784313725490196, "no_speech_prob": 1.1477289262984414e-05}, {"id": 62, "seek": 42820, "start": 428.2, "end": 431.64, "text": " Oh sorry, git is just the name of the directory I'm in.", "tokens": [876, 2597, 11, 18331, 307, 445, 264, 1315, 295, 264, 21120, 286, 478, 294, 13], "temperature": 0.0, "avg_logprob": -0.36710450255755084, "compression_ratio": 1.7, "no_speech_prob": 5.063386561232619e-05}, {"id": 63, "seek": 42820, "start": 431.64, "end": 441.12, "text": " Yes, yes, yes. I figured it out post, all right. So it's just, right, it was just this", "tokens": [1079, 11, 2086, 11, 2086, 13, 286, 8932, 309, 484, 2183, 11, 439, 558, 13, 407, 309, 311, 445, 11, 558, 11, 309, 390, 445, 341], "temperature": 0.0, "avg_logprob": -0.36710450255755084, "compression_ratio": 1.7, "no_speech_prob": 5.063386561232619e-05}, {"id": 64, "seek": 42820, "start": 441.12, "end": 443.59999999999997, "text": " less than sign which pipes it to the", "tokens": [1570, 813, 1465, 597, 21882, 309, 281, 264], "temperature": 0.0, "avg_logprob": -0.36710450255755084, "compression_ratio": 1.7, "no_speech_prob": 5.063386561232619e-05}, {"id": 65, "seek": 42820, "start": 443.59999999999997, "end": 444.59999999999997, "text": " Greater than sign. Yeah.", "tokens": [38410, 813, 1465, 13, 865, 13], "temperature": 0.0, "avg_logprob": -0.36710450255755084, "compression_ratio": 1.7, "no_speech_prob": 5.063386561232619e-05}, {"id": 66, "seek": 42820, "start": 444.59999999999997, "end": 445.96, "text": " Or greater than sign.", "tokens": [1610, 5044, 813, 1465, 13], "temperature": 0.0, "avg_logprob": -0.36710450255755084, "compression_ratio": 1.7, "no_speech_prob": 5.063386561232619e-05}, {"id": 67, "seek": 42820, "start": 445.96, "end": 446.96, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.36710450255755084, "compression_ratio": 1.7, "no_speech_prob": 5.063386561232619e-05}, {"id": 68, "seek": 42820, "start": 446.96, "end": 447.96, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.36710450255755084, "compression_ratio": 1.7, "no_speech_prob": 5.063386561232619e-05}, {"id": 69, "seek": 42820, "start": 447.96, "end": 450.36, "text": " So the main thing, I guess the main, like just to put this together, if I just type", "tokens": [407, 264, 2135, 551, 11, 286, 2041, 264, 2135, 11, 411, 445, 281, 829, 341, 1214, 11, 498, 286, 445, 2010], "temperature": 0.0, "avg_logprob": -0.36710450255755084, "compression_ratio": 1.7, "no_speech_prob": 5.063386561232619e-05}, {"id": 70, "seek": 45036, "start": 450.36, "end": 460.52000000000004, "text": " cat, right, and then I type text, it just prints out whatever I type it. Okay. So that's", "tokens": [3857, 11, 558, 11, 293, 550, 286, 2010, 2487, 11, 309, 445, 22305, 484, 2035, 286, 2010, 309, 13, 1033, 13, 407, 300, 311], "temperature": 0.0, "avg_logprob": -0.1545216374927097, "compression_ratio": 1.4530386740331491, "no_speech_prob": 4.710764187620953e-06}, {"id": 71, "seek": 45036, "start": 460.52000000000004, "end": 466.36, "text": " what cat does. The reason it's called cat is actually concatenates things if you feed", "tokens": [437, 3857, 775, 13, 440, 1778, 309, 311, 1219, 3857, 307, 767, 1588, 7186, 1024, 721, 498, 291, 3154], "temperature": 0.0, "avg_logprob": -0.1545216374927097, "compression_ratio": 1.4530386740331491, "no_speech_prob": 4.710764187620953e-06}, {"id": 72, "seek": 45036, "start": 466.36, "end": 476.04, "text": " it multiple things, it adds them together. If I, I can redirect from a file, which means", "tokens": [309, 3866, 721, 11, 309, 10860, 552, 1214, 13, 759, 286, 11, 286, 393, 29066, 490, 257, 3991, 11, 597, 1355], "temperature": 0.0, "avg_logprob": -0.1545216374927097, "compression_ratio": 1.4530386740331491, "no_speech_prob": 4.710764187620953e-06}, {"id": 73, "seek": 47604, "start": 476.04, "end": 481.28000000000003, "text": " instead of me typing things in, it'll get its input from a file. So that would cause", "tokens": [2602, 295, 385, 18444, 721, 294, 11, 309, 603, 483, 1080, 4846, 490, 257, 3991, 13, 407, 300, 576, 3082], "temperature": 0.0, "avg_logprob": -0.16445892977427287, "compression_ratio": 1.6216216216216217, "no_speech_prob": 2.994353280882933e-06}, {"id": 74, "seek": 47604, "start": 481.28000000000003, "end": 491.76000000000005, "text": " it to print it out. Or if I redirect its output, then whatever I type in will go to the file.", "tokens": [309, 281, 4482, 309, 484, 13, 1610, 498, 286, 29066, 1080, 5598, 11, 550, 2035, 286, 2010, 294, 486, 352, 281, 264, 3991, 13], "temperature": 0.0, "avg_logprob": -0.16445892977427287, "compression_ratio": 1.6216216216216217, "no_speech_prob": 2.994353280882933e-06}, {"id": 75, "seek": 47604, "start": 491.76000000000005, "end": 498.04, "text": " So one way to copy things, for example, would be to read things into cat and then output", "tokens": [407, 472, 636, 281, 5055, 721, 11, 337, 1365, 11, 576, 312, 281, 1401, 721, 666, 3857, 293, 550, 5598], "temperature": 0.0, "avg_logprob": -0.16445892977427287, "compression_ratio": 1.6216216216216217, "no_speech_prob": 2.994353280882933e-06}, {"id": 76, "seek": 47604, "start": 498.04, "end": 499.40000000000003, "text": " things into something else.", "tokens": [721, 666, 746, 1646, 13], "temperature": 0.0, "avg_logprob": -0.16445892977427287, "compression_ratio": 1.6216216216216217, "no_speech_prob": 2.994353280882933e-06}, {"id": 77, "seek": 47604, "start": 499.40000000000003, "end": 500.40000000000003, "text": " Wow.", "tokens": [3153, 13], "temperature": 0.0, "avg_logprob": -0.16445892977427287, "compression_ratio": 1.6216216216216217, "no_speech_prob": 2.994353280882933e-06}, {"id": 78, "seek": 50040, "start": 500.4, "end": 507.76, "text": " It's like a really dumb way to copy, but you know, it does the job, right? So yeah, cat", "tokens": [467, 311, 411, 257, 534, 10316, 636, 281, 5055, 11, 457, 291, 458, 11, 309, 775, 264, 1691, 11, 558, 30, 407, 1338, 11, 3857], "temperature": 0.0, "avg_logprob": -0.2524909973144531, "compression_ratio": 1.6616161616161615, "no_speech_prob": 1.1658950825221837e-05}, {"id": 79, "seek": 50040, "start": 507.76, "end": 514.56, "text": " just, anything cat gets into standard in goes to standard out. Standard in being the input", "tokens": [445, 11, 1340, 3857, 2170, 666, 3832, 294, 1709, 281, 3832, 484, 13, 21298, 294, 885, 264, 4846], "temperature": 0.0, "avg_logprob": -0.2524909973144531, "compression_ratio": 1.6616161616161615, "no_speech_prob": 1.1658950825221837e-05}, {"id": 80, "seek": 50040, "start": 514.56, "end": 519.12, "text": " to a Unix command and standard out being the output from a Unix command.", "tokens": [281, 257, 1156, 970, 5622, 293, 3832, 484, 885, 264, 5598, 490, 257, 1156, 970, 5622, 13], "temperature": 0.0, "avg_logprob": -0.2524909973144531, "compression_ratio": 1.6616161616161615, "no_speech_prob": 1.1658950825221837e-05}, {"id": 81, "seek": 50040, "start": 519.12, "end": 527.56, "text": " So if you do cat greater than file name, it will still let you type in stuff.", "tokens": [407, 498, 291, 360, 3857, 5044, 813, 3991, 1315, 11, 309, 486, 920, 718, 291, 2010, 294, 1507, 13], "temperature": 0.0, "avg_logprob": -0.2524909973144531, "compression_ratio": 1.6616161616161615, "no_speech_prob": 1.1658950825221837e-05}, {"id": 82, "seek": 52756, "start": 527.56, "end": 533.56, "text": " Right. So that's what I did before, right? Is I paste it. And then at the end I hit control", "tokens": [1779, 13, 407, 300, 311, 437, 286, 630, 949, 11, 558, 30, 1119, 286, 9163, 309, 13, 400, 550, 412, 264, 917, 286, 2045, 1969], "temperature": 0.0, "avg_logprob": -0.28621621034583267, "compression_ratio": 1.5154639175257731, "no_speech_prob": 4.860165518039139e-06}, {"id": 83, "seek": 52756, "start": 533.56, "end": 542.7199999999999, "text": " D, right? So now if I cat and take it from that, ah, yes, dear. There's, but I just typed.", "tokens": [413, 11, 558, 30, 407, 586, 498, 286, 3857, 293, 747, 309, 490, 300, 11, 3716, 11, 2086, 11, 6875, 13, 821, 311, 11, 457, 286, 445, 33941, 13], "temperature": 0.0, "avg_logprob": -0.28621621034583267, "compression_ratio": 1.5154639175257731, "no_speech_prob": 4.860165518039139e-06}, {"id": 84, "seek": 52756, "start": 542.7199999999999, "end": 543.7199999999999, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.28621621034583267, "compression_ratio": 1.5154639175257731, "no_speech_prob": 4.860165518039139e-06}, {"id": 85, "seek": 52756, "start": 543.7199999999999, "end": 544.7199999999999, "text": " You press control D.", "tokens": [509, 1886, 1969, 413, 13], "temperature": 0.0, "avg_logprob": -0.28621621034583267, "compression_ratio": 1.5154639175257731, "no_speech_prob": 4.860165518039139e-06}, {"id": 86, "seek": 52756, "start": 544.7199999999999, "end": 553.7199999999999, "text": " Control D at the end. Control D means end of file in Unix. Yeah. So if I, sorry, let", "tokens": [12912, 413, 412, 264, 917, 13, 12912, 413, 1355, 917, 295, 3991, 294, 1156, 970, 13, 865, 13, 407, 498, 286, 11, 2597, 11, 718], "temperature": 0.0, "avg_logprob": -0.28621621034583267, "compression_ratio": 1.5154639175257731, "no_speech_prob": 4.860165518039139e-06}, {"id": 87, "seek": 55372, "start": 553.72, "end": 558.32, "text": " me move you over here. Yeah. So if I hit control D at the end, that's that, then it says, oh,", "tokens": [385, 1286, 291, 670, 510, 13, 865, 13, 407, 498, 286, 2045, 1969, 413, 412, 264, 917, 11, 300, 311, 300, 11, 550, 309, 1619, 11, 1954, 11], "temperature": 0.0, "avg_logprob": -0.27494996458619503, "compression_ratio": 1.5129533678756477, "no_speech_prob": 1.1299601283099037e-05}, {"id": 88, "seek": 55372, "start": 558.32, "end": 563.52, "text": " you're all done. You might've seen something similar.", "tokens": [291, 434, 439, 1096, 13, 509, 1062, 600, 1612, 746, 2531, 13], "temperature": 0.0, "avg_logprob": -0.27494996458619503, "compression_ratio": 1.5129533678756477, "no_speech_prob": 1.1299601283099037e-05}, {"id": 89, "seek": 55372, "start": 563.52, "end": 573.0, "text": " Like, I think it's like this.", "tokens": [1743, 11, 286, 519, 309, 311, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.27494996458619503, "compression_ratio": 1.5129533678756477, "no_speech_prob": 1.1299601283099037e-05}, {"id": 90, "seek": 55372, "start": 573.0, "end": 576.44, "text": " Oh yeah. That thing I know.", "tokens": [876, 1338, 13, 663, 551, 286, 458, 13], "temperature": 0.0, "avg_logprob": -0.27494996458619503, "compression_ratio": 1.5129533678756477, "no_speech_prob": 1.1299601283099037e-05}, {"id": 91, "seek": 55372, "start": 576.44, "end": 580.9200000000001, "text": " Okay. And at the end you type whatever you typed. So like, but there's no reason to do", "tokens": [1033, 13, 400, 412, 264, 917, 291, 2010, 2035, 291, 33941, 13, 407, 411, 11, 457, 456, 311, 572, 1778, 281, 360], "temperature": 0.0, "avg_logprob": -0.27494996458619503, "compression_ratio": 1.5129533678756477, "no_speech_prob": 1.1299601283099037e-05}, {"id": 92, "seek": 58092, "start": 580.92, "end": 588.8, "text": " that. You can just cause you could just use control D. Cool. If you use this double less", "tokens": [300, 13, 509, 393, 445, 3082, 291, 727, 445, 764, 1969, 413, 13, 8561, 13, 759, 291, 764, 341, 3834, 1570], "temperature": 0.0, "avg_logprob": -0.2335299739131221, "compression_ratio": 1.6042553191489362, "no_speech_prob": 1.2805046026187483e-05}, {"id": 93, "seek": 58092, "start": 588.8, "end": 596.3199999999999, "text": " than side, it means keep reading until you see that string. That's got a here doc.", "tokens": [813, 1252, 11, 309, 1355, 1066, 3760, 1826, 291, 536, 300, 6798, 13, 663, 311, 658, 257, 510, 3211, 13], "temperature": 0.0, "avg_logprob": -0.2335299739131221, "compression_ratio": 1.6042553191489362, "no_speech_prob": 1.2805046026187483e-05}, {"id": 94, "seek": 58092, "start": 596.3199999999999, "end": 598.36, "text": " This is the mystifies a lot.", "tokens": [639, 307, 264, 9111, 11221, 257, 688, 13], "temperature": 0.0, "avg_logprob": -0.2335299739131221, "compression_ratio": 1.6042553191489362, "no_speech_prob": 1.2805046026187483e-05}, {"id": 95, "seek": 58092, "start": 598.36, "end": 602.4799999999999, "text": " Yes. Yes. All right. So let me show you that again. So I'm going to do it again for my", "tokens": [1079, 13, 1079, 13, 1057, 558, 13, 407, 718, 385, 855, 291, 300, 797, 13, 407, 286, 478, 516, 281, 360, 309, 797, 337, 452], "temperature": 0.0, "avg_logprob": -0.2335299739131221, "compression_ratio": 1.6042553191489362, "no_speech_prob": 1.2805046026187483e-05}, {"id": 96, "seek": 58092, "start": 602.4799999999999, "end": 609.62, "text": " destination, right? So let's grab all that. And by the way, knowing how to do things like", "tokens": [12236, 11, 558, 30, 407, 718, 311, 4444, 439, 300, 13, 400, 538, 264, 636, 11, 5276, 577, 281, 360, 721, 411], "temperature": 0.0, "avg_logprob": -0.2335299739131221, "compression_ratio": 1.6042553191489362, "no_speech_prob": 1.2805046026187483e-05}, {"id": 97, "seek": 60962, "start": 609.62, "end": 613.76, "text": " select to the end of line and select to the end of file and stuff like, you know, using", "tokens": [3048, 281, 264, 917, 295, 1622, 293, 3048, 281, 264, 917, 295, 3991, 293, 1507, 411, 11, 291, 458, 11, 1228], "temperature": 0.0, "avg_logprob": -0.11702845958953208, "compression_ratio": 1.6635514018691588, "no_speech_prob": 3.785278295254102e-06}, {"id": 98, "seek": 60962, "start": 613.76, "end": 618.88, "text": " command and control and shift and end and home. That stuff's really important to know.", "tokens": [5622, 293, 1969, 293, 5513, 293, 917, 293, 1280, 13, 663, 1507, 311, 534, 1021, 281, 458, 13], "temperature": 0.0, "avg_logprob": -0.11702845958953208, "compression_ratio": 1.6635514018691588, "no_speech_prob": 3.785278295254102e-06}, {"id": 99, "seek": 60962, "start": 618.88, "end": 624.52, "text": " It varies between Mac and PC. So if you don't know how I just selected all that, then it's", "tokens": [467, 21716, 1296, 5707, 293, 6465, 13, 407, 498, 291, 500, 380, 458, 577, 286, 445, 8209, 439, 300, 11, 550, 309, 311], "temperature": 0.0, "avg_logprob": -0.11702845958953208, "compression_ratio": 1.6635514018691588, "no_speech_prob": 3.785278295254102e-06}, {"id": 100, "seek": 60962, "start": 624.52, "end": 630.36, "text": " definitely worth Googling that. Okay. So I've just copied that. So I just want to put that", "tokens": [2138, 3163, 45005, 1688, 300, 13, 1033, 13, 407, 286, 600, 445, 25365, 300, 13, 407, 286, 445, 528, 281, 829, 300], "temperature": 0.0, "avg_logprob": -0.11702845958953208, "compression_ratio": 1.6635514018691588, "no_speech_prob": 3.785278295254102e-06}, {"id": 101, "seek": 63036, "start": 630.36, "end": 641.96, "text": " into cat redirect the output to destination dot text. Right. Paste. Control D. Control", "tokens": [666, 3857, 29066, 264, 5598, 281, 12236, 5893, 2487, 13, 1779, 13, 43827, 13, 12912, 413, 13, 12912], "temperature": 0.0, "avg_logprob": -0.3371649583180745, "compression_ratio": 1.3307692307692307, "no_speech_prob": 9.080343261302914e-06}, {"id": 102, "seek": 63036, "start": 641.96, "end": 650.2, "text": " D. Don't know why I had to press it twice there. That was strange. Maybe I had to hit.", "tokens": [413, 13, 1468, 380, 458, 983, 286, 632, 281, 1886, 309, 6091, 456, 13, 663, 390, 5861, 13, 2704, 286, 632, 281, 2045, 13], "temperature": 0.0, "avg_logprob": -0.3371649583180745, "compression_ratio": 1.3307692307692307, "no_speech_prob": 9.080343261302914e-06}, {"id": 103, "seek": 65020, "start": 650.2, "end": 660.9200000000001, "text": " I don't know. Anyway. Did the job. Okay. So actually, so I guess like my starting point", "tokens": [286, 500, 380, 458, 13, 5684, 13, 2589, 264, 1691, 13, 1033, 13, 407, 767, 11, 370, 286, 2041, 411, 452, 2891, 935], "temperature": 0.0, "avg_logprob": -0.26924046107700894, "compression_ratio": 1.4293478260869565, "no_speech_prob": 2.8129006750532426e-06}, {"id": 104, "seek": 65020, "start": 660.9200000000001, "end": 666.2, "text": " normally is just to kind of like import import my like standard set of things that I wish", "tokens": [5646, 307, 445, 281, 733, 295, 411, 974, 974, 452, 411, 3832, 992, 295, 721, 300, 286, 3172], "temperature": 0.0, "avg_logprob": -0.26924046107700894, "compression_ratio": 1.4293478260869565, "no_speech_prob": 2.8129006750532426e-06}, {"id": 105, "seek": 65020, "start": 666.2, "end": 675.9200000000001, "text": " Python had, which is called fast port dot utils. Oops. Import stuff. So as some folks", "tokens": [15329, 632, 11, 597, 307, 1219, 2370, 2436, 5893, 2839, 4174, 13, 21726, 13, 26391, 1507, 13, 407, 382, 512, 4024], "temperature": 0.0, "avg_logprob": -0.26924046107700894, "compression_ratio": 1.4293478260869565, "no_speech_prob": 2.8129006750532426e-06}, {"id": 106, "seek": 67592, "start": 675.92, "end": 681.56, "text": " have pointed out before, some languages have things called a prelude, which is like the", "tokens": [362, 10932, 484, 949, 11, 512, 8650, 362, 721, 1219, 257, 659, 32334, 11, 597, 307, 411, 264], "temperature": 0.0, "avg_logprob": -0.22505764788891897, "compression_ratio": 1.7475247524752475, "no_speech_prob": 2.857135996237048e-06}, {"id": 107, "seek": 67592, "start": 681.56, "end": 688.0799999999999, "text": " kind of stuff that people like to always have available. This is kind of my version of a", "tokens": [733, 295, 1507, 300, 561, 411, 281, 1009, 362, 2435, 13, 639, 307, 733, 295, 452, 3037, 295, 257], "temperature": 0.0, "avg_logprob": -0.22505764788891897, "compression_ratio": 1.7475247524752475, "no_speech_prob": 2.857135996237048e-06}, {"id": 108, "seek": 67592, "start": 688.0799999999999, "end": 693.88, "text": " prelude. And one of the things it does is it imports some things from the standard library,", "tokens": [659, 32334, 13, 400, 472, 295, 264, 721, 309, 775, 307, 309, 41596, 512, 721, 490, 264, 3832, 6405, 11], "temperature": 0.0, "avg_logprob": -0.22505764788891897, "compression_ratio": 1.7475247524752475, "no_speech_prob": 2.857135996237048e-06}, {"id": 109, "seek": 67592, "start": 693.88, "end": 698.0, "text": " Python standard library that I always use. And it also imports some things that fast", "tokens": [15329, 3832, 6405, 300, 286, 1009, 764, 13, 400, 309, 611, 41596, 512, 721, 300, 2370], "temperature": 0.0, "avg_logprob": -0.22505764788891897, "compression_ratio": 1.7475247524752475, "no_speech_prob": 2.857135996237048e-06}, {"id": 110, "seek": 69800, "start": 698.0, "end": 710.32, "text": " port adds to the standard library. So one of the things it adds is path lip dot path.", "tokens": [2436, 10860, 281, 264, 3832, 6405, 13, 407, 472, 295, 264, 721, 309, 10860, 307, 3100, 8280, 5893, 3100, 13], "temperature": 0.0, "avg_logprob": -0.1844786130464994, "compression_ratio": 1.4705882352941178, "no_speech_prob": 3.0413325475819875e-06}, {"id": 111, "seek": 69800, "start": 710.32, "end": 727.84, "text": " So path. Okay. Like so. And so path lip dot path has a read text. Okay. So that's better.", "tokens": [407, 3100, 13, 1033, 13, 1743, 370, 13, 400, 370, 3100, 8280, 5893, 3100, 575, 257, 1401, 2487, 13, 1033, 13, 407, 300, 311, 1101, 13], "temperature": 0.0, "avg_logprob": -0.1844786130464994, "compression_ratio": 1.4705882352941178, "no_speech_prob": 3.0413325475819875e-06}, {"id": 112, "seek": 72784, "start": 727.84, "end": 732.0, "text": " One thing that I don't particularly like is that the standard representation of strings", "tokens": [1485, 551, 300, 286, 500, 380, 4098, 411, 307, 300, 264, 3832, 10290, 295, 13985], "temperature": 0.0, "avg_logprob": -0.19373778863386673, "compression_ratio": 1.3282442748091603, "no_speech_prob": 4.157216608291492e-06}, {"id": 113, "seek": 72784, "start": 732.0, "end": 740.36, "text": " in Jupyter uses backslash n. If you want to replace it with actual near lines, you can", "tokens": [294, 22125, 88, 391, 4960, 646, 10418, 1299, 297, 13, 759, 291, 528, 281, 7406, 309, 365, 3539, 2651, 3876, 11, 291, 393], "temperature": 0.0, "avg_logprob": -0.19373778863386673, "compression_ratio": 1.3282442748091603, "no_speech_prob": 4.157216608291492e-06}, {"id": 114, "seek": 74036, "start": 740.36, "end": 760.28, "text": " say print. Or, you know, like you can just do this. And so just remember curly brackets.", "tokens": [584, 4482, 13, 1610, 11, 291, 458, 11, 411, 291, 393, 445, 360, 341, 13, 400, 370, 445, 1604, 32066, 26179, 13], "temperature": 0.0, "avg_logprob": -0.1247753267702849, "compression_ratio": 1.4516129032258065, "no_speech_prob": 2.4824571482895408e-06}, {"id": 115, "seek": 74036, "start": 760.28, "end": 766.84, "text": " So this means do this as a bash command. And curly brackets means read this Python variable", "tokens": [407, 341, 1355, 360, 341, 382, 257, 46183, 5622, 13, 400, 32066, 26179, 1355, 1401, 341, 15329, 7006], "temperature": 0.0, "avg_logprob": -0.1247753267702849, "compression_ratio": 1.4516129032258065, "no_speech_prob": 2.4824571482895408e-06}, {"id": 116, "seek": 76684, "start": 766.84, "end": 793.6800000000001, "text": " and put it into the bash command. All right. So then we can do something similar for destination.", "tokens": [293, 829, 309, 666, 264, 46183, 5622, 13, 1057, 558, 13, 407, 550, 321, 393, 360, 746, 2531, 337, 12236, 13], "temperature": 0.0, "avg_logprob": -0.08336803436279297, "compression_ratio": 1.1411764705882352, "no_speech_prob": 2.7103860702482052e-05}, {"id": 117, "seek": 79368, "start": 793.68, "end": 801.76, "text": " One thing that people complain about with my code quite often is my use of abbreviations.", "tokens": [1485, 551, 300, 561, 11024, 466, 365, 452, 3089, 1596, 2049, 307, 452, 764, 295, 35839, 763, 13], "temperature": 0.0, "avg_logprob": -0.19046679208444994, "compression_ratio": 1.5814977973568283, "no_speech_prob": 2.4298791686305776e-05}, {"id": 118, "seek": 79368, "start": 801.76, "end": 809.28, "text": " You might reasonably ask why not put the E there. But just to explain, I quite like to", "tokens": [509, 1062, 23551, 1029, 983, 406, 829, 264, 462, 456, 13, 583, 445, 281, 2903, 11, 286, 1596, 411, 281], "temperature": 0.0, "avg_logprob": -0.19046679208444994, "compression_ratio": 1.5814977973568283, "no_speech_prob": 2.4298791686305776e-05}, {"id": 119, "seek": 79368, "start": 809.28, "end": 815.9599999999999, "text": " have similar things be similar lengths. Because it makes it really easy for me to then have", "tokens": [362, 2531, 721, 312, 2531, 26329, 13, 1436, 309, 1669, 309, 534, 1858, 337, 385, 281, 550, 362], "temperature": 0.0, "avg_logprob": -0.19046679208444994, "compression_ratio": 1.5814977973568283, "no_speech_prob": 2.4298791686305776e-05}, {"id": 120, "seek": 79368, "start": 815.9599999999999, "end": 820.76, "text": " lines next to each other that operate on those two things. And all the bits will be in the", "tokens": [3876, 958, 281, 1184, 661, 300, 9651, 322, 729, 732, 721, 13, 400, 439, 264, 9239, 486, 312, 294, 264], "temperature": 0.0, "avg_logprob": -0.19046679208444994, "compression_ratio": 1.5814977973568283, "no_speech_prob": 2.4298791686305776e-05}, {"id": 121, "seek": 82076, "start": 820.76, "end": 825.4399999999999, "text": " same place. And so my eyes can immediately see if there's some unexpected difference", "tokens": [912, 1081, 13, 400, 370, 452, 2575, 393, 4258, 536, 498, 456, 311, 512, 13106, 2649], "temperature": 0.0, "avg_logprob": -0.1545976806472946, "compression_ratio": 1.6713615023474178, "no_speech_prob": 1.0129455404239707e-05}, {"id": 122, "seek": 82076, "start": 825.4399999999999, "end": 832.2, "text": " or something. So it's not just me being trying to be difficult. It's, you know, there's actually", "tokens": [420, 746, 13, 407, 309, 311, 406, 445, 385, 885, 1382, 281, 312, 2252, 13, 467, 311, 11, 291, 458, 11, 456, 311, 767], "temperature": 0.0, "avg_logprob": -0.1545976806472946, "compression_ratio": 1.6713615023474178, "no_speech_prob": 1.0129455404239707e-05}, {"id": 123, "seek": 82076, "start": 832.2, "end": 837.84, "text": " a reason that I quite like doing that. But just not to say everybody has to do that.", "tokens": [257, 1778, 300, 286, 1596, 411, 884, 300, 13, 583, 445, 406, 281, 584, 2201, 575, 281, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.1545976806472946, "compression_ratio": 1.6713615023474178, "no_speech_prob": 1.0129455404239707e-05}, {"id": 124, "seek": 82076, "start": 837.84, "end": 847.76, "text": " That's why I quite like to do that. And there's also something to be said for like having", "tokens": [663, 311, 983, 286, 1596, 411, 281, 360, 300, 13, 400, 456, 311, 611, 746, 281, 312, 848, 337, 411, 1419], "temperature": 0.0, "avg_logprob": -0.1545976806472946, "compression_ratio": 1.6713615023474178, "no_speech_prob": 1.0129455404239707e-05}, {"id": 125, "seek": 84776, "start": 847.76, "end": 853.08, "text": " a standard way of coding. That then you just don't think too much about how you code. You", "tokens": [257, 3832, 636, 295, 17720, 13, 663, 550, 291, 445, 500, 380, 519, 886, 709, 466, 577, 291, 3089, 13, 509], "temperature": 0.0, "avg_logprob": -0.20100830925835503, "compression_ratio": 1.6603773584905661, "no_speech_prob": 9.972595762519632e-06}, {"id": 126, "seek": 84776, "start": 853.08, "end": 856.72, "text": " know, so like I just have stem standard way I tend to name things and then I don't spend", "tokens": [458, 11, 370, 411, 286, 445, 362, 12312, 3832, 636, 286, 3928, 281, 1315, 721, 293, 550, 286, 500, 380, 3496], "temperature": 0.0, "avg_logprob": -0.20100830925835503, "compression_ratio": 1.6603773584905661, "no_speech_prob": 9.972595762519632e-06}, {"id": 127, "seek": 84776, "start": 856.72, "end": 861.96, "text": " time thinking about naming things too much. That's cognitive load. I can focus then on", "tokens": [565, 1953, 466, 25290, 721, 886, 709, 13, 663, 311, 15605, 3677, 13, 286, 393, 1879, 550, 322], "temperature": 0.0, "avg_logprob": -0.20100830925835503, "compression_ratio": 1.6603773584905661, "no_speech_prob": 9.972595762519632e-06}, {"id": 128, "seek": 84776, "start": 861.96, "end": 874.88, "text": " solving the problem. All right. So I guess the first thing we might want to do then is", "tokens": [12606, 264, 1154, 13, 1057, 558, 13, 407, 286, 2041, 264, 700, 551, 321, 1062, 528, 281, 360, 550, 307], "temperature": 0.0, "avg_logprob": -0.20100830925835503, "compression_ratio": 1.6603773584905661, "no_speech_prob": 9.972595762519632e-06}, {"id": 129, "seek": 87488, "start": 874.88, "end": 885.32, "text": " we basically we probably want a dictionary that goes from the name of the thing to the", "tokens": [321, 1936, 321, 1391, 528, 257, 25890, 300, 1709, 490, 264, 1315, 295, 264, 551, 281, 264], "temperature": 0.0, "avg_logprob": -0.22595640508140005, "compression_ratio": 1.4166666666666667, "no_speech_prob": 3.6118847219768213e-06}, {"id": 130, "seek": 87488, "start": 885.32, "end": 898.4399999999999, "text": " location of the image, right? And so then basically then we'll just go through each", "tokens": [4914, 295, 264, 3256, 11, 558, 30, 400, 370, 550, 1936, 550, 321, 603, 445, 352, 807, 1184], "temperature": 0.0, "avg_logprob": -0.22595640508140005, "compression_ratio": 1.4166666666666667, "no_speech_prob": 3.6118847219768213e-06}, {"id": 131, "seek": 89844, "start": 898.44, "end": 906.1600000000001, "text": " type each one of these here and replace the name with the value of that when we look it", "tokens": [2010, 1184, 472, 295, 613, 510, 293, 7406, 264, 1315, 365, 264, 2158, 295, 300, 562, 321, 574, 309], "temperature": 0.0, "avg_logprob": -0.19497813010702328, "compression_ratio": 1.392, "no_speech_prob": 9.36831838771468e-06}, {"id": 132, "seek": 89844, "start": 906.1600000000001, "end": 921.24, "text": " up as a key. So there's a thing called find all which you give it a regex and it finds", "tokens": [493, 382, 257, 2141, 13, 407, 456, 311, 257, 551, 1219, 915, 439, 597, 291, 976, 309, 257, 319, 432, 87, 293, 309, 10704], "temperature": 0.0, "avg_logprob": -0.19497813010702328, "compression_ratio": 1.392, "no_speech_prob": 9.36831838771468e-06}, {"id": 133, "seek": 92124, "start": 921.24, "end": 928.36, "text": " all the places of that regex. Do you guys tend to use regexes? Is there anybody here", "tokens": [439, 264, 3190, 295, 300, 319, 432, 87, 13, 1144, 291, 1074, 3928, 281, 764, 319, 432, 47047, 30, 1119, 456, 4472, 510], "temperature": 0.0, "avg_logprob": -0.2370427031266062, "compression_ratio": 1.4751381215469612, "no_speech_prob": 5.8624100347515196e-06}, {"id": 134, "seek": 92124, "start": 928.36, "end": 942.2, "text": " who doesn't really use regexes? Not too much. So regex is what we call a DSL, a domain specific", "tokens": [567, 1177, 380, 534, 764, 319, 432, 47047, 30, 1726, 886, 709, 13, 407, 319, 432, 87, 307, 437, 321, 818, 257, 15816, 43, 11, 257, 9274, 2685], "temperature": 0.0, "avg_logprob": -0.2370427031266062, "compression_ratio": 1.4751381215469612, "no_speech_prob": 5.8624100347515196e-06}, {"id": 135, "seek": 92124, "start": 942.2, "end": 949.48, "text": " language. They are not Python really. Python happens to have support for them but they", "tokens": [2856, 13, 814, 366, 406, 15329, 534, 13, 15329, 2314, 281, 362, 1406, 337, 552, 457, 436], "temperature": 0.0, "avg_logprob": -0.2370427031266062, "compression_ratio": 1.4751381215469612, "no_speech_prob": 5.8624100347515196e-06}, {"id": 136, "seek": 94948, "start": 949.48, "end": 956.76, "text": " very much don't look like Python. I actually tend to think of them as a notation and notation", "tokens": [588, 709, 500, 380, 574, 411, 15329, 13, 286, 767, 3928, 281, 519, 295, 552, 382, 257, 24657, 293, 24657], "temperature": 0.0, "avg_logprob": -0.12872232596079508, "compression_ratio": 1.5348837209302326, "no_speech_prob": 4.289200205676025e-06}, {"id": 137, "seek": 94948, "start": 956.76, "end": 963.76, "text": " is one of my favourite topics. A notation is a way of representing some potentially", "tokens": [307, 472, 295, 452, 10696, 8378, 13, 316, 24657, 307, 257, 636, 295, 13460, 512, 7263], "temperature": 0.0, "avg_logprob": -0.12872232596079508, "compression_ratio": 1.5348837209302326, "no_speech_prob": 4.289200205676025e-06}, {"id": 138, "seek": 94948, "start": 963.76, "end": 973.52, "text": " complex domain in a concise and expressive and flexible way. So for example a notation", "tokens": [3997, 9274, 294, 257, 44882, 293, 40189, 293, 11358, 636, 13, 407, 337, 1365, 257, 24657], "temperature": 0.0, "avg_logprob": -0.12872232596079508, "compression_ratio": 1.5348837209302326, "no_speech_prob": 4.289200205676025e-06}, {"id": 139, "seek": 97352, "start": 973.52, "end": 981.36, "text": " that you've definitely used before is this one, right, which is called math notation.", "tokens": [300, 291, 600, 2138, 1143, 949, 307, 341, 472, 11, 558, 11, 597, 307, 1219, 5221, 24657, 13], "temperature": 0.0, "avg_logprob": -0.18941867162310888, "compression_ratio": 1.6540880503144655, "no_speech_prob": 4.0057515434455127e-05}, {"id": 140, "seek": 97352, "start": 981.36, "end": 988.52, "text": " If you play music in the western tradition then you will have seen the staff based music", "tokens": [759, 291, 862, 1318, 294, 264, 13231, 6994, 550, 291, 486, 362, 1612, 264, 3525, 2361, 1318], "temperature": 0.0, "avg_logprob": -0.18941867162310888, "compression_ratio": 1.6540880503144655, "no_speech_prob": 4.0057515434455127e-05}, {"id": 141, "seek": 97352, "start": 988.52, "end": 996.68, "text": " notation. If you juggle you might have come across the juggling notation. If you've done", "tokens": [24657, 13, 759, 291, 361, 31726, 291, 1062, 362, 808, 2108, 264, 361, 29921, 24657, 13, 759, 291, 600, 1096], "temperature": 0.0, "avg_logprob": -0.18941867162310888, "compression_ratio": 1.6540880503144655, "no_speech_prob": 4.0057515434455127e-05}, {"id": 142, "seek": 99668, "start": 996.68, "end": 1004.56, "text": " quantum stuff you might have come across the Feynman diagram notation. So notations are", "tokens": [13018, 1507, 291, 1062, 362, 808, 2108, 264, 46530, 77, 1601, 10686, 24657, 13, 407, 406, 763, 366], "temperature": 0.0, "avg_logprob": -0.16834868759405416, "compression_ratio": 1.528735632183908, "no_speech_prob": 4.156962859269697e-06}, {"id": 143, "seek": 99668, "start": 1004.56, "end": 1017.52, "text": " expressive ways to represent things. Regexes are a notation for finding stuff in text.", "tokens": [40189, 2098, 281, 2906, 721, 13, 1300, 432, 47047, 366, 257, 24657, 337, 5006, 1507, 294, 2487, 13], "temperature": 0.0, "avg_logprob": -0.16834868759405416, "compression_ratio": 1.528735632183908, "no_speech_prob": 4.156962859269697e-06}, {"id": 144, "seek": 99668, "start": 1017.52, "end": 1026.1599999999999, "text": " Not many honestly things in computing have got to the point that they're so well understood", "tokens": [1726, 867, 6095, 721, 294, 15866, 362, 658, 281, 264, 935, 300, 436, 434, 370, 731, 7320], "temperature": 0.0, "avg_logprob": -0.16834868759405416, "compression_ratio": 1.528735632183908, "no_speech_prob": 4.156962859269697e-06}, {"id": 145, "seek": 102616, "start": 1026.16, "end": 1033.1200000000001, "text": " and studied that we've got them to the point that they are a notation. But regex is one.", "tokens": [293, 9454, 300, 321, 600, 658, 552, 281, 264, 935, 300, 436, 366, 257, 24657, 13, 583, 319, 432, 87, 307, 472, 13], "temperature": 0.0, "avg_logprob": -0.17662078142166138, "compression_ratio": 1.594871794871795, "no_speech_prob": 2.54535952990409e-05}, {"id": 146, "seek": 102616, "start": 1033.1200000000001, "end": 1038.48, "text": " And my view is often, most of the time perhaps when something has got to that point we should", "tokens": [400, 452, 1910, 307, 2049, 11, 881, 295, 264, 565, 4317, 562, 746, 575, 658, 281, 300, 935, 321, 820], "temperature": 0.0, "avg_logprob": -0.17662078142166138, "compression_ratio": 1.594871794871795, "no_speech_prob": 2.54535952990409e-05}, {"id": 147, "seek": 102616, "start": 1038.48, "end": 1044.24, "text": " learn that notation because it's like a way of composing things together very concisely", "tokens": [1466, 300, 24657, 570, 309, 311, 411, 257, 636, 295, 715, 6110, 721, 1214, 588, 1588, 271, 736], "temperature": 0.0, "avg_logprob": -0.17662078142166138, "compression_ratio": 1.594871794871795, "no_speech_prob": 2.54535952990409e-05}, {"id": 148, "seek": 102616, "start": 1044.24, "end": 1049.0800000000002, "text": " that can solve a wide class of problems.", "tokens": [300, 393, 5039, 257, 4874, 1508, 295, 2740, 13], "temperature": 0.0, "avg_logprob": -0.17662078142166138, "compression_ratio": 1.594871794871795, "no_speech_prob": 2.54535952990409e-05}, {"id": 149, "seek": 104908, "start": 1049.08, "end": 1056.6, "text": " Jeremy, would you recommend learning things like orc and sed also long term?", "tokens": [17809, 11, 576, 291, 2748, 2539, 721, 411, 420, 66, 293, 9643, 611, 938, 1433, 30], "temperature": 0.0, "avg_logprob": -0.17890717766501688, "compression_ratio": 1.751269035532995, "no_speech_prob": 3.703951369971037e-05}, {"id": 150, "seek": 104908, "start": 1056.6, "end": 1062.0, "text": " I wouldn't recommend orc and sed. I would recommend Pell because Pell is a superset of", "tokens": [286, 2759, 380, 2748, 420, 66, 293, 9643, 13, 286, 576, 2748, 430, 898, 570, 430, 898, 307, 257, 37906, 302, 295], "temperature": 0.0, "avg_logprob": -0.17890717766501688, "compression_ratio": 1.751269035532995, "no_speech_prob": 3.703951369971037e-05}, {"id": 151, "seek": 104908, "start": 1062.0, "end": 1068.36, "text": " orc and sed. And as such it's more expressive than either because you can combine everything", "tokens": [420, 66, 293, 9643, 13, 400, 382, 1270, 309, 311, 544, 40189, 813, 2139, 570, 291, 393, 10432, 1203], "temperature": 0.0, "avg_logprob": -0.17890717766501688, "compression_ratio": 1.751269035532995, "no_speech_prob": 3.703951369971037e-05}, {"id": 152, "seek": 104908, "start": 1068.36, "end": 1078.24, "text": " from orc and sed and find and at pretty much everything from Python as well. So yeah, at", "tokens": [490, 420, 66, 293, 9643, 293, 915, 293, 412, 1238, 709, 1203, 490, 15329, 382, 731, 13, 407, 1338, 11, 412], "temperature": 0.0, "avg_logprob": -0.17890717766501688, "compression_ratio": 1.751269035532995, "no_speech_prob": 3.703951369971037e-05}, {"id": 153, "seek": 107824, "start": 1078.24, "end": 1086.88, "text": " some point in your life it's well worth Googling for Pell one liners and diving into that rabbit", "tokens": [512, 935, 294, 428, 993, 309, 311, 731, 3163, 45005, 1688, 337, 430, 898, 472, 22896, 433, 293, 20241, 666, 300, 19509], "temperature": 0.0, "avg_logprob": -0.1766227819980719, "compression_ratio": 1.4766839378238341, "no_speech_prob": 6.540039066749159e-06}, {"id": 154, "seek": 107824, "start": 1086.88, "end": 1087.88, "text": " hole.", "tokens": [5458, 13], "temperature": 0.0, "avg_logprob": -0.1766227819980719, "compression_ratio": 1.4766839378238341, "no_speech_prob": 6.540039066749159e-06}, {"id": 155, "seek": 107824, "start": 1087.88, "end": 1092.64, "text": " Another nice thing about regexes is because Pell's regexes were so good, they were built", "tokens": [3996, 1481, 551, 466, 319, 432, 47047, 307, 570, 430, 898, 311, 319, 432, 47047, 645, 370, 665, 11, 436, 645, 3094], "temperature": 0.0, "avg_logprob": -0.1766227819980719, "compression_ratio": 1.4766839378238341, "no_speech_prob": 6.540039066749159e-06}, {"id": 156, "seek": 107824, "start": 1092.64, "end": 1098.48, "text": " by a linguist, Larry Walls, it's not surprising perhaps, that they're used almost everywhere.", "tokens": [538, 257, 21766, 468, 11, 18145, 9551, 82, 11, 309, 311, 406, 8830, 4317, 11, 300, 436, 434, 1143, 1920, 5315, 13], "temperature": 0.0, "avg_logprob": -0.1766227819980719, "compression_ratio": 1.4766839378238341, "no_speech_prob": 6.540039066749159e-06}, {"id": 157, "seek": 109848, "start": 1098.48, "end": 1108.48, "text": " So JavaScript, Python, Pell, C, you know, by the PCIe library, they all use the same", "tokens": [407, 15778, 11, 15329, 11, 430, 898, 11, 383, 11, 291, 458, 11, 538, 264, 6465, 40, 68, 6405, 11, 436, 439, 764, 264, 912], "temperature": 0.0, "avg_logprob": -0.1593563099100132, "compression_ratio": 1.5650224215246638, "no_speech_prob": 5.682043592969421e-06}, {"id": 158, "seek": 109848, "start": 1108.48, "end": 1114.16, "text": " regexes. Vim's are slightly different. In Vim you have to add a few more backslashes", "tokens": [319, 432, 47047, 13, 691, 332, 311, 366, 4748, 819, 13, 682, 691, 332, 291, 362, 281, 909, 257, 1326, 544, 646, 10418, 12808], "temperature": 0.0, "avg_logprob": -0.1593563099100132, "compression_ratio": 1.5650224215246638, "no_speech_prob": 5.682043592969421e-06}, {"id": 159, "seek": 109848, "start": 1114.16, "end": 1122.1200000000001, "text": " to things but it's actually possible to turn on a Vim mode which is almost identical to", "tokens": [281, 721, 457, 309, 311, 767, 1944, 281, 1261, 322, 257, 691, 332, 4391, 597, 307, 1920, 14800, 281], "temperature": 0.0, "avg_logprob": -0.1593563099100132, "compression_ratio": 1.5650224215246638, "no_speech_prob": 5.682043592969421e-06}, {"id": 160, "seek": 109848, "start": 1122.1200000000001, "end": 1128.0, "text": " Python and Pell which is called the very magic mode. So you can turn on very magic mode and", "tokens": [15329, 293, 430, 898, 597, 307, 1219, 264, 588, 5585, 4391, 13, 407, 291, 393, 1261, 322, 588, 5585, 4391, 293], "temperature": 0.0, "avg_logprob": -0.1593563099100132, "compression_ratio": 1.5650224215246638, "no_speech_prob": 5.682043592969421e-06}, {"id": 161, "seek": 112800, "start": 1128.0, "end": 1130.32, "text": " then Vim basically is the same as everything else.", "tokens": [550, 691, 332, 1936, 307, 264, 912, 382, 1203, 1646, 13], "temperature": 0.0, "avg_logprob": -0.26330491770868714, "compression_ratio": 1.61244019138756, "no_speech_prob": 3.822231155936606e-05}, {"id": 162, "seek": 112800, "start": 1130.32, "end": 1135.72, "text": " Okay. So I got a quick question about 20 minutes into this. I wasn't here last time. So what", "tokens": [1033, 13, 407, 286, 658, 257, 1702, 1168, 466, 945, 2077, 666, 341, 13, 286, 2067, 380, 510, 1036, 565, 13, 407, 437], "temperature": 0.0, "avg_logprob": -0.26330491770868714, "compression_ratio": 1.61244019138756, "no_speech_prob": 3.822231155936606e-05}, {"id": 163, "seek": 112800, "start": 1135.72, "end": 1136.88, "text": " are we trying to do?", "tokens": [366, 321, 1382, 281, 360, 30], "temperature": 0.0, "avg_logprob": -0.26330491770868714, "compression_ratio": 1.61244019138756, "no_speech_prob": 3.822231155936606e-05}, {"id": 164, "seek": 112800, "start": 1136.88, "end": 1140.96, "text": " Yeah, this is not from last time. This is what we're trying to do is this is something", "tokens": [865, 11, 341, 307, 406, 490, 1036, 565, 13, 639, 307, 437, 321, 434, 1382, 281, 360, 307, 341, 307, 746], "temperature": 0.0, "avg_logprob": -0.26330491770868714, "compression_ratio": 1.61244019138756, "no_speech_prob": 3.822231155936606e-05}, {"id": 165, "seek": 112800, "start": 1140.96, "end": 1152.64, "text": " new. So what we're trying to do, thanks, is Daniel creates these nice descriptions of", "tokens": [777, 13, 407, 437, 321, 434, 1382, 281, 360, 11, 3231, 11, 307, 8033, 7829, 613, 1481, 24406, 295], "temperature": 0.0, "avg_logprob": -0.26330491770868714, "compression_ratio": 1.61244019138756, "no_speech_prob": 3.822231155936606e-05}, {"id": 166, "seek": 115264, "start": 1152.64, "end": 1160.64, "text": " everything in these sessions. But this is how his images come out. It's just not very", "tokens": [1203, 294, 613, 11081, 13, 583, 341, 307, 577, 702, 5267, 808, 484, 13, 467, 311, 445, 406, 588], "temperature": 0.0, "avg_logprob": -0.1446353557497956, "compression_ratio": 1.5263157894736843, "no_speech_prob": 1.1123070180474315e-05}, {"id": 167, "seek": 115264, "start": 1160.64, "end": 1167.8400000000001, "text": " helpful. So I thought it would be nice if we could, for him, make a script or something", "tokens": [4961, 13, 407, 286, 1194, 309, 576, 312, 1481, 498, 321, 727, 11, 337, 796, 11, 652, 257, 5755, 420, 746], "temperature": 0.0, "avg_logprob": -0.1446353557497956, "compression_ratio": 1.5263157894736843, "no_speech_prob": 1.1123070180474315e-05}, {"id": 168, "seek": 115264, "start": 1167.8400000000001, "end": 1173.0, "text": " that would allow him to put the correct images in here.", "tokens": [300, 576, 2089, 796, 281, 829, 264, 3006, 5267, 294, 510, 13], "temperature": 0.0, "avg_logprob": -0.1446353557497956, "compression_ratio": 1.5263157894736843, "no_speech_prob": 1.1123070180474315e-05}, {"id": 169, "seek": 115264, "start": 1173.0, "end": 1177.48, "text": " And I don't know why it comes out this way but that's fine. He's got a process he's happy", "tokens": [400, 286, 500, 380, 458, 983, 309, 1487, 484, 341, 636, 457, 300, 311, 2489, 13, 634, 311, 658, 257, 1399, 415, 311, 2055], "temperature": 0.0, "avg_logprob": -0.1446353557497956, "compression_ratio": 1.5263157894736843, "no_speech_prob": 1.1123070180474315e-05}, {"id": 170, "seek": 117748, "start": 1177.48, "end": 1184.6, "text": " with and in this process the images end up, you know, he can easily paste them all at", "tokens": [365, 293, 294, 341, 1399, 264, 5267, 917, 493, 11, 291, 458, 11, 415, 393, 3612, 9163, 552, 439, 412], "temperature": 0.0, "avg_logprob": -0.2646402931213379, "compression_ratio": 1.3902439024390243, "no_speech_prob": 3.647163975983858e-05}, {"id": 171, "seek": 117748, "start": 1184.6, "end": 1200.56, "text": " the end, right? So here's our images. And so the images in his, that he pastes at the", "tokens": [264, 917, 11, 558, 30, 407, 510, 311, 527, 5267, 13, 400, 370, 264, 5267, 294, 702, 11, 300, 415, 1791, 279, 412, 264], "temperature": 0.0, "avg_logprob": -0.2646402931213379, "compression_ratio": 1.3902439024390243, "no_speech_prob": 3.647163975983858e-05}, {"id": 172, "seek": 120056, "start": 1200.56, "end": 1210.3999999999999, "text": " end look like this, right? So they have names, right? And then in the in the in the forum", "tokens": [917, 574, 411, 341, 11, 558, 30, 407, 436, 362, 5288, 11, 558, 30, 400, 550, 294, 264, 294, 264, 294, 264, 17542], "temperature": 0.0, "avg_logprob": -0.23518047661616884, "compression_ratio": 1.5955882352941178, "no_speech_prob": 4.5654842324438505e-06}, {"id": 173, "seek": 120056, "start": 1210.3999999999999, "end": 1220.1599999999999, "text": " post they appear like this. So we have to replace this basically with this, but with", "tokens": [2183, 436, 4204, 411, 341, 13, 407, 321, 362, 281, 7406, 341, 1936, 365, 341, 11, 457, 365], "temperature": 0.0, "avg_logprob": -0.23518047661616884, "compression_ratio": 1.5955882352941178, "no_speech_prob": 4.5654842324438505e-06}, {"id": 174, "seek": 120056, "start": 1220.1599999999999, "end": 1225.32, "text": " probably with this size would be my guess.", "tokens": [1391, 365, 341, 2744, 576, 312, 452, 2041, 13], "temperature": 0.0, "avg_logprob": -0.23518047661616884, "compression_ratio": 1.5955882352941178, "no_speech_prob": 4.5654842324438505e-06}, {"id": 175, "seek": 122532, "start": 1225.32, "end": 1235.6, "text": " In fact, let's just check that. So yeah, that's what he wants, I guess. Fixed test error.", "tokens": [682, 1186, 11, 718, 311, 445, 1520, 300, 13, 407, 1338, 11, 300, 311, 437, 415, 2738, 11, 286, 2041, 13, 25538, 292, 1500, 6713, 13], "temperature": 0.0, "avg_logprob": -0.19595252672831218, "compression_ratio": 1.0470588235294118, "no_speech_prob": 3.480146187939681e-05}, {"id": 176, "seek": 123560, "start": 1235.6, "end": 1263.36, "text": " I wonder which size he wants. Prep for fixed test in source path. 690 by 184. And where", "tokens": [286, 2441, 597, 2744, 415, 2738, 13, 21684, 337, 6806, 1500, 294, 4009, 3100, 13, 1386, 7771, 538, 2443, 19, 13, 400, 689], "temperature": 0.0, "avg_logprob": -0.325370364718967, "compression_ratio": 1.0, "no_speech_prob": 4.7107691898418125e-06}, {"id": 177, "seek": 126336, "start": 1263.36, "end": 1282.24, "text": " was that? Fixed test error. Okay, that's at the end. And then in destination path. I wonder", "tokens": [390, 300, 30, 25538, 292, 1500, 6713, 13, 1033, 11, 300, 311, 412, 264, 917, 13, 400, 550, 294, 12236, 3100, 13, 286, 2441], "temperature": 0.0, "avg_logprob": -0.2227792299710787, "compression_ratio": 1.4935064935064934, "no_speech_prob": 1.260246972378809e-05}, {"id": 178, "seek": 126336, "start": 1282.24, "end": 1288.36, "text": " if these are the actual sizes. Did he say?", "tokens": [498, 613, 366, 264, 3539, 11602, 13, 2589, 415, 584, 30], "temperature": 0.0, "avg_logprob": -0.2227792299710787, "compression_ratio": 1.4935064935064934, "no_speech_prob": 1.260246972378809e-05}, {"id": 179, "seek": 126336, "start": 1288.36, "end": 1293.28, "text": " I think these are the actual sizes. I'm not sure why it has the 900 standard size or something.", "tokens": [286, 519, 613, 366, 264, 3539, 11602, 13, 286, 478, 406, 988, 983, 309, 575, 264, 22016, 3832, 2744, 420, 746, 13], "temperature": 0.0, "avg_logprob": -0.2227792299710787, "compression_ratio": 1.4935064935064934, "no_speech_prob": 1.260246972378809e-05}, {"id": 180, "seek": 129328, "start": 1293.28, "end": 1297.32, "text": " It seems to have like.", "tokens": [467, 2544, 281, 362, 411, 13], "temperature": 0.0, "avg_logprob": -0.23254236422087016, "compression_ratio": 1.25, "no_speech_prob": 1.1842567801068071e-05}, {"id": 181, "seek": 129328, "start": 1297.32, "end": 1307.6399999999999, "text": " Presumably that's what he wants. That's presumably the size he wants, I guess. Let's have a look.", "tokens": [2718, 449, 1188, 300, 311, 437, 415, 2738, 13, 663, 311, 26742, 264, 2744, 415, 2738, 11, 286, 2041, 13, 961, 311, 362, 257, 574, 13], "temperature": 0.0, "avg_logprob": -0.23254236422087016, "compression_ratio": 1.25, "no_speech_prob": 1.1842567801068071e-05}, {"id": 182, "seek": 130764, "start": 1307.64, "end": 1326.88, "text": " So if I copy that. This post is to test image stuff for Daniel. Paste. Okay, so that's the", "tokens": [407, 498, 286, 5055, 300, 13, 639, 2183, 307, 281, 1500, 3256, 1507, 337, 8033, 13, 43827, 13, 1033, 11, 370, 300, 311, 264], "temperature": 0.0, "avg_logprob": -0.19325217178889684, "compression_ratio": 1.0344827586206897, "no_speech_prob": 1.0348468322263216e-06}, {"id": 183, "seek": 132688, "start": 1326.88, "end": 1343.96, "text": " size that appears there. And then what if it says 900? Oh, it doesn't really make any", "tokens": [2744, 300, 7038, 456, 13, 400, 550, 437, 498, 309, 1619, 22016, 30, 876, 11, 309, 1177, 380, 534, 652, 604], "temperature": 0.0, "avg_logprob": -0.3249865372975667, "compression_ratio": 1.2666666666666666, "no_speech_prob": 2.282466084579937e-05}, {"id": 184, "seek": 132688, "start": 1343.96, "end": 1353.44, "text": " difference. Well, without this one, I'm not sure if that makes sense. But if you were", "tokens": [2649, 13, 1042, 11, 1553, 341, 472, 11, 286, 478, 406, 988, 498, 300, 1669, 2020, 13, 583, 498, 291, 645], "temperature": 0.0, "avg_logprob": -0.3249865372975667, "compression_ratio": 1.2666666666666666, "no_speech_prob": 2.282466084579937e-05}, {"id": 185, "seek": 135344, "start": 1353.44, "end": 1357.04, "text": " to try it without, it should also work without. It would just.", "tokens": [281, 853, 309, 1553, 11, 309, 820, 611, 589, 1553, 13, 467, 576, 445, 13], "temperature": 0.0, "avg_logprob": -0.2623949963113536, "compression_ratio": 1.75, "no_speech_prob": 6.302267138380557e-05}, {"id": 186, "seek": 135344, "start": 1357.04, "end": 1360.28, "text": " Oh yeah, it would work. I just think like he's like, I assume that some of the images", "tokens": [876, 1338, 11, 309, 576, 589, 13, 286, 445, 519, 411, 415, 311, 411, 11, 286, 6552, 300, 512, 295, 264, 5267], "temperature": 0.0, "avg_logprob": -0.2623949963113536, "compression_ratio": 1.75, "no_speech_prob": 6.302267138380557e-05}, {"id": 187, "seek": 135344, "start": 1360.28, "end": 1365.88, "text": " he's intentionally trying to resize.", "tokens": [415, 311, 22062, 1382, 281, 50069, 13], "temperature": 0.0, "avg_logprob": -0.2623949963113536, "compression_ratio": 1.75, "no_speech_prob": 6.302267138380557e-05}, {"id": 188, "seek": 135344, "start": 1365.88, "end": 1366.88, "text": " Sometimes.", "tokens": [4803, 13], "temperature": 0.0, "avg_logprob": -0.2623949963113536, "compression_ratio": 1.75, "no_speech_prob": 6.302267138380557e-05}, {"id": 189, "seek": 135344, "start": 1366.88, "end": 1370.72, "text": " Maybe this is for his notes up.", "tokens": [2704, 341, 307, 337, 702, 5570, 493, 13], "temperature": 0.0, "avg_logprob": -0.2623949963113536, "compression_ratio": 1.75, "no_speech_prob": 6.302267138380557e-05}, {"id": 190, "seek": 135344, "start": 1370.72, "end": 1376.04, "text": " Well, yeah, I mean, he's got two different sizes. One of them is for his notes app, I", "tokens": [1042, 11, 1338, 11, 286, 914, 11, 415, 311, 658, 732, 819, 11602, 13, 1485, 295, 552, 307, 337, 702, 5570, 724, 11, 286], "temperature": 0.0, "avg_logprob": -0.2623949963113536, "compression_ratio": 1.75, "no_speech_prob": 6.302267138380557e-05}, {"id": 191, "seek": 135344, "start": 1376.04, "end": 1381.6000000000001, "text": " assume. And one of them, I'm not going to assume this is the size he actually wants.", "tokens": [6552, 13, 400, 472, 295, 552, 11, 286, 478, 406, 516, 281, 6552, 341, 307, 264, 2744, 415, 767, 2738, 13], "temperature": 0.0, "avg_logprob": -0.2623949963113536, "compression_ratio": 1.75, "no_speech_prob": 6.302267138380557e-05}, {"id": 192, "seek": 138160, "start": 1381.6, "end": 1383.56, "text": " Maybe it's already as big as it can show.", "tokens": [2704, 309, 311, 1217, 382, 955, 382, 309, 393, 855, 13], "temperature": 0.0, "avg_logprob": -0.22241220474243165, "compression_ratio": 1.5856573705179282, "no_speech_prob": 2.3920178136904724e-05}, {"id": 193, "seek": 138160, "start": 1383.56, "end": 1387.3999999999999, "text": " Yeah, I guess I think so.", "tokens": [865, 11, 286, 2041, 286, 519, 370, 13], "temperature": 0.0, "avg_logprob": -0.22241220474243165, "compression_ratio": 1.5856573705179282, "no_speech_prob": 2.3920178136904724e-05}, {"id": 194, "seek": 138160, "start": 1387.3999999999999, "end": 1392.1599999999999, "text": " If you right click and open it in a new tab, would that or would that just show the original?", "tokens": [759, 291, 558, 2052, 293, 1269, 309, 294, 257, 777, 4421, 11, 576, 300, 420, 576, 300, 445, 855, 264, 3380, 30], "temperature": 0.0, "avg_logprob": -0.22241220474243165, "compression_ratio": 1.5856573705179282, "no_speech_prob": 2.3920178136904724e-05}, {"id": 195, "seek": 138160, "start": 1392.1599999999999, "end": 1397.8, "text": " I think that'll show the image. Let's have a look at some more. Oh wait, does it always", "tokens": [286, 519, 300, 603, 855, 264, 3256, 13, 961, 311, 362, 257, 574, 412, 512, 544, 13, 876, 1699, 11, 775, 309, 1009], "temperature": 0.0, "avg_logprob": -0.22241220474243165, "compression_ratio": 1.5856573705179282, "no_speech_prob": 2.3920178136904724e-05}, {"id": 196, "seek": 138160, "start": 1397.8, "end": 1401.76, "text": " say 900? Oh, it's not a 1200. I see.", "tokens": [584, 22016, 30, 876, 11, 309, 311, 406, 257, 29139, 13, 286, 536, 13], "temperature": 0.0, "avg_logprob": -0.22241220474243165, "compression_ratio": 1.5856573705179282, "no_speech_prob": 2.3920178136904724e-05}, {"id": 197, "seek": 138160, "start": 1401.76, "end": 1406.3999999999999, "text": " I think all of the X by Y is the one when he drops them into the interface and it just", "tokens": [286, 519, 439, 295, 264, 1783, 538, 398, 307, 264, 472, 562, 415, 11438, 552, 666, 264, 9226, 293, 309, 445], "temperature": 0.0, "avg_logprob": -0.22241220474243165, "compression_ratio": 1.5856573705179282, "no_speech_prob": 2.3920178136904724e-05}, {"id": 198, "seek": 138160, "start": 1406.3999999999999, "end": 1407.84, "text": " takes whatever the size.", "tokens": [2516, 2035, 264, 2744, 13], "temperature": 0.0, "avg_logprob": -0.22241220474243165, "compression_ratio": 1.5856573705179282, "no_speech_prob": 2.3920178136904724e-05}, {"id": 199, "seek": 140784, "start": 1407.84, "end": 1413.9199999999998, "text": " I would say so. So I think this is probably let's assume this is actually what he wants.", "tokens": [286, 576, 584, 370, 13, 407, 286, 519, 341, 307, 1391, 718, 311, 6552, 341, 307, 767, 437, 415, 2738, 13], "temperature": 0.0, "avg_logprob": -0.2179083506266276, "compression_ratio": 1.5402843601895735, "no_speech_prob": 3.2376774470321834e-06}, {"id": 200, "seek": 140784, "start": 1413.9199999999998, "end": 1416.1999999999998, "text": " I think that's a reasonable guess.", "tokens": [286, 519, 300, 311, 257, 10585, 2041, 13], "temperature": 0.0, "avg_logprob": -0.2179083506266276, "compression_ratio": 1.5402843601895735, "no_speech_prob": 3.2376774470321834e-06}, {"id": 201, "seek": 140784, "start": 1416.1999999999998, "end": 1423.1399999999999, "text": " Okay, so you can see sometimes I just judge, you know, grab bash commands when I'm fiddling", "tokens": [1033, 11, 370, 291, 393, 536, 2171, 286, 445, 6995, 11, 291, 458, 11, 4444, 46183, 16901, 562, 286, 478, 283, 14273, 1688], "temperature": 0.0, "avg_logprob": -0.2179083506266276, "compression_ratio": 1.5402843601895735, "no_speech_prob": 3.2376774470321834e-06}, {"id": 202, "seek": 140784, "start": 1423.1399999999999, "end": 1428.36, "text": " around just because yeah, sometimes I don't know. It's just like.", "tokens": [926, 445, 570, 1338, 11, 2171, 286, 500, 380, 458, 13, 467, 311, 445, 411, 13], "temperature": 0.0, "avg_logprob": -0.2179083506266276, "compression_ratio": 1.5402843601895735, "no_speech_prob": 3.2376774470321834e-06}, {"id": 203, "seek": 140784, "start": 1428.36, "end": 1432.1599999999999, "text": " An easy way for me to quickly check things.", "tokens": [1107, 1858, 636, 337, 385, 281, 2661, 1520, 721, 13], "temperature": 0.0, "avg_logprob": -0.2179083506266276, "compression_ratio": 1.5402843601895735, "no_speech_prob": 3.2376774470321834e-06}, {"id": 204, "seek": 143216, "start": 1432.16, "end": 1440.44, "text": " So grep, so actually grep doesn't take normal regexes, but you can.", "tokens": [407, 6066, 79, 11, 370, 767, 6066, 79, 1177, 380, 747, 2710, 319, 432, 47047, 11, 457, 291, 393, 13], "temperature": 0.0, "avg_logprob": -0.2648169668097245, "compression_ratio": 1.6126126126126126, "no_speech_prob": 1.7330337414023234e-06}, {"id": 205, "seek": 143216, "start": 1440.44, "end": 1445.2, "text": " And I need to get into a habit of doing this.", "tokens": [400, 286, 643, 281, 483, 666, 257, 7164, 295, 884, 341, 13], "temperature": 0.0, "avg_logprob": -0.2648169668097245, "compression_ratio": 1.6126126126126126, "no_speech_prob": 1.7330337414023234e-06}, {"id": 206, "seek": 143216, "start": 1445.2, "end": 1454.1200000000001, "text": " Yeah, you can use minus capital P to use Pell compatible regular expressions. So when you're", "tokens": [865, 11, 291, 393, 764, 3175, 4238, 430, 281, 764, 430, 898, 18218, 3890, 15277, 13, 407, 562, 291, 434], "temperature": 0.0, "avg_logprob": -0.2648169668097245, "compression_ratio": 1.6126126126126126, "no_speech_prob": 1.7330337414023234e-06}, {"id": 207, "seek": 143216, "start": 1454.1200000000001, "end": 1457.76, "text": " looking for like, can I use normal regular expressions specifically the thing you generally", "tokens": [1237, 337, 411, 11, 393, 286, 764, 2710, 3890, 15277, 4682, 264, 551, 291, 5101], "temperature": 0.0, "avg_logprob": -0.2648169668097245, "compression_ratio": 1.6126126126126126, "no_speech_prob": 1.7330337414023234e-06}, {"id": 208, "seek": 143216, "start": 1457.76, "end": 1461.48, "text": " want to search for is PCIe. They're called Pell compatible.", "tokens": [528, 281, 3164, 337, 307, 6465, 40, 68, 13, 814, 434, 1219, 430, 898, 18218, 13], "temperature": 0.0, "avg_logprob": -0.2648169668097245, "compression_ratio": 1.6126126126126126, "no_speech_prob": 1.7330337414023234e-06}, {"id": 209, "seek": 146148, "start": 1461.48, "end": 1465.52, "text": " So apparently we can do this. Not that it'll make any difference in this case, but no,", "tokens": [407, 7970, 321, 393, 360, 341, 13, 1726, 300, 309, 603, 652, 604, 2649, 294, 341, 1389, 11, 457, 572, 11], "temperature": 0.0, "avg_logprob": -0.3404098253571585, "compression_ratio": 1.5, "no_speech_prob": 8.39791027829051e-06}, {"id": 210, "seek": 146148, "start": 1465.52, "end": 1468.52, "text": " this one. Okay. What about e-grep?", "tokens": [341, 472, 13, 1033, 13, 708, 466, 308, 12, 70, 19919, 30], "temperature": 0.0, "avg_logprob": -0.3404098253571585, "compression_ratio": 1.5, "no_speech_prob": 8.39791027829051e-06}, {"id": 211, "seek": 146148, "start": 1468.52, "end": 1475.88, "text": " No. Okay. So that maybe it's in some more recent.", "tokens": [883, 13, 1033, 13, 407, 300, 1310, 309, 311, 294, 512, 544, 5162, 13], "temperature": 0.0, "avg_logprob": -0.3404098253571585, "compression_ratio": 1.5, "no_speech_prob": 8.39791027829051e-06}, {"id": 212, "seek": 146148, "start": 1475.88, "end": 1487.96, "text": " Oh, you know, maybe the best thing is not to use e-grep, but instead to use RG, which", "tokens": [876, 11, 291, 458, 11, 1310, 264, 1151, 551, 307, 406, 281, 764, 308, 12, 70, 19919, 11, 457, 2602, 281, 764, 497, 38, 11, 597], "temperature": 0.0, "avg_logprob": -0.3404098253571585, "compression_ratio": 1.5, "no_speech_prob": 8.39791027829051e-06}, {"id": 213, "seek": 146148, "start": 1487.96, "end": 1490.96, "text": " is rip grip.", "tokens": [307, 12782, 12007, 13], "temperature": 0.0, "avg_logprob": -0.3404098253571585, "compression_ratio": 1.5, "no_speech_prob": 8.39791027829051e-06}, {"id": 214, "seek": 149096, "start": 1490.96, "end": 1499.96, "text": " Which I guess I have to install.", "tokens": [3013, 286, 2041, 286, 362, 281, 3625, 13], "temperature": 0.0, "avg_logprob": -0.2060338258743286, "compression_ratio": 1.407035175879397, "no_speech_prob": 1.0952337106573395e-05}, {"id": 215, "seek": 149096, "start": 1499.96, "end": 1504.24, "text": " I noticed that. Is that a different version of grep that you use?", "tokens": [286, 5694, 300, 13, 1119, 300, 257, 819, 3037, 295, 6066, 79, 300, 291, 764, 30], "temperature": 0.0, "avg_logprob": -0.2060338258743286, "compression_ratio": 1.407035175879397, "no_speech_prob": 1.0952337106573395e-05}, {"id": 216, "seek": 149096, "start": 1504.24, "end": 1510.68, "text": " Yeah. So RG is like, so basically like for pretty much all the classic Unix tools, somebody's", "tokens": [865, 13, 407, 497, 38, 307, 411, 11, 370, 1936, 411, 337, 1238, 709, 439, 264, 7230, 1156, 970, 3873, 11, 2618, 311], "temperature": 0.0, "avg_logprob": -0.2060338258743286, "compression_ratio": 1.407035175879397, "no_speech_prob": 1.0952337106573395e-05}, {"id": 217, "seek": 149096, "start": 1510.68, "end": 1520.52, "text": " rewritten it in Rust and made it better or C++ or Go, you know, increasingly it's Rust.", "tokens": [319, 26859, 309, 294, 34952, 293, 1027, 309, 1101, 420, 383, 25472, 420, 1037, 11, 291, 458, 11, 12980, 309, 311, 34952, 13], "temperature": 0.0, "avg_logprob": -0.2060338258743286, "compression_ratio": 1.407035175879397, "no_speech_prob": 1.0952337106573395e-05}, {"id": 218, "seek": 152052, "start": 1520.52, "end": 1525.32, "text": " I don't know what rip grip was written in, but like it's basically like in this kind", "tokens": [286, 500, 380, 458, 437, 12782, 12007, 390, 3720, 294, 11, 457, 411, 309, 311, 1936, 411, 294, 341, 733], "temperature": 0.0, "avg_logprob": -0.23465742506422438, "compression_ratio": 1.6273764258555132, "no_speech_prob": 1.2218028132338077e-05}, {"id": 219, "seek": 152052, "start": 1525.32, "end": 1531.44, "text": " of general category of like better versions of classic Unix tools. And I try to like get", "tokens": [295, 2674, 7719, 295, 411, 1101, 9606, 295, 7230, 1156, 970, 3873, 13, 400, 286, 853, 281, 411, 483], "temperature": 0.0, "avg_logprob": -0.23465742506422438, "compression_ratio": 1.6273764258555132, "no_speech_prob": 1.2218028132338077e-05}, {"id": 220, "seek": 152052, "start": 1531.44, "end": 1537.36, "text": " into the habit of using the newer, better versions. So even though it takes some retraining.", "tokens": [666, 264, 7164, 295, 1228, 264, 17628, 11, 1101, 9606, 13, 407, 754, 1673, 309, 2516, 512, 49356, 1760, 13], "temperature": 0.0, "avg_logprob": -0.23465742506422438, "compression_ratio": 1.6273764258555132, "no_speech_prob": 1.2218028132338077e-05}, {"id": 221, "seek": 152052, "start": 1537.36, "end": 1541.52, "text": " So yeah, RG is the kind of...", "tokens": [407, 1338, 11, 497, 38, 307, 264, 733, 295, 485], "temperature": 0.0, "avg_logprob": -0.23465742506422438, "compression_ratio": 1.6273764258555132, "no_speech_prob": 1.2218028132338077e-05}, {"id": 222, "seek": 152052, "start": 1541.52, "end": 1545.2, "text": " I meant to ask about that yesterday because I noticed you were using that and I thought", "tokens": [286, 4140, 281, 1029, 466, 300, 5186, 570, 286, 5694, 291, 645, 1228, 300, 293, 286, 1194], "temperature": 0.0, "avg_logprob": -0.23465742506422438, "compression_ratio": 1.6273764258555132, "no_speech_prob": 1.2218028132338077e-05}, {"id": 223, "seek": 152052, "start": 1545.2, "end": 1548.6399999999999, "text": " maybe it's for recursive grep or something.", "tokens": [1310, 309, 311, 337, 20560, 488, 6066, 79, 420, 746, 13], "temperature": 0.0, "avg_logprob": -0.23465742506422438, "compression_ratio": 1.6273764258555132, "no_speech_prob": 1.2218028132338077e-05}, {"id": 224, "seek": 154864, "start": 1548.64, "end": 1556.0400000000002, "text": " Oh yeah. Yeah. No, it's actually a program, which amongst other things seems to be highlighting", "tokens": [876, 1338, 13, 865, 13, 883, 11, 309, 311, 767, 257, 1461, 11, 597, 12918, 661, 721, 2544, 281, 312, 26551], "temperature": 0.0, "avg_logprob": -0.2515645628993951, "compression_ratio": 1.5737051792828685, "no_speech_prob": 2.0782714273082092e-05}, {"id": 225, "seek": 154864, "start": 1556.0400000000002, "end": 1560.8400000000001, "text": " the thing I'm searching for, which is cute and showing the line number.", "tokens": [264, 551, 286, 478, 10808, 337, 11, 597, 307, 4052, 293, 4099, 264, 1622, 1230, 13], "temperature": 0.0, "avg_logprob": -0.2515645628993951, "compression_ratio": 1.5737051792828685, "no_speech_prob": 2.0782714273082092e-05}, {"id": 226, "seek": 154864, "start": 1560.8400000000001, "end": 1565.76, "text": " Jeremy, you find that brew install doesn't mess with your MambaForge installation, are", "tokens": [17809, 11, 291, 915, 300, 34619, 3625, 1177, 380, 2082, 365, 428, 376, 23337, 37, 4685, 13260, 11, 366], "temperature": 0.0, "avg_logprob": -0.2515645628993951, "compression_ratio": 1.5737051792828685, "no_speech_prob": 2.0782714273082092e-05}, {"id": 227, "seek": 154864, "start": 1565.76, "end": 1567.88, "text": " those orthogonal pretty much in their functions?", "tokens": [729, 41488, 1238, 709, 294, 641, 6828, 30], "temperature": 0.0, "avg_logprob": -0.2515645628993951, "compression_ratio": 1.5737051792828685, "no_speech_prob": 2.0782714273082092e-05}, {"id": 228, "seek": 154864, "start": 1567.88, "end": 1572.5200000000002, "text": " No, it should be fine. Yeah. I mean, I'm not in paper space here, right? So like I wouldn't", "tokens": [883, 11, 309, 820, 312, 2489, 13, 865, 13, 286, 914, 11, 286, 478, 406, 294, 3035, 1901, 510, 11, 558, 30, 407, 411, 286, 2759, 380], "temperature": 0.0, "avg_logprob": -0.2515645628993951, "compression_ratio": 1.5737051792828685, "no_speech_prob": 2.0782714273082092e-05}, {"id": 229, "seek": 157252, "start": 1572.52, "end": 1578.96, "text": " use... I tried filling with brew in paper space because there is a Linux brew nowadays. That", "tokens": [764, 485, 286, 3031, 10623, 365, 34619, 294, 3035, 1901, 570, 456, 307, 257, 18734, 34619, 13434, 13, 663], "temperature": 0.0, "avg_logprob": -0.15489510867906653, "compression_ratio": 1.5833333333333333, "no_speech_prob": 1.96369546756614e-06}, {"id": 230, "seek": 157252, "start": 1578.96, "end": 1584.16, "text": " seemed okay, but it uses up a lot of space. So I thought just using Mamba to install binaries", "tokens": [6576, 1392, 11, 457, 309, 4960, 493, 257, 688, 295, 1901, 13, 407, 286, 1194, 445, 1228, 376, 23337, 281, 3625, 5171, 4889], "temperature": 0.0, "avg_logprob": -0.15489510867906653, "compression_ratio": 1.5833333333333333, "no_speech_prob": 1.96369546756614e-06}, {"id": 231, "seek": 157252, "start": 1584.16, "end": 1589.2, "text": " like rip grip in paper space is probably the best option, you know, because it doesn't", "tokens": [411, 12782, 12007, 294, 3035, 1901, 307, 1391, 264, 1151, 3614, 11, 291, 458, 11, 570, 309, 1177, 380], "temperature": 0.0, "avg_logprob": -0.15489510867906653, "compression_ratio": 1.5833333333333333, "no_speech_prob": 1.96369546756614e-06}, {"id": 232, "seek": 157252, "start": 1589.2, "end": 1597.6399999999999, "text": " use any more space than necessary. But you know, the two shouldn't get in the way. Like", "tokens": [764, 604, 544, 1901, 813, 4818, 13, 583, 291, 458, 11, 264, 732, 4659, 380, 483, 294, 264, 636, 13, 1743], "temperature": 0.0, "avg_logprob": -0.15489510867906653, "compression_ratio": 1.5833333333333333, "no_speech_prob": 1.96369546756614e-06}, {"id": 233, "seek": 159764, "start": 1597.64, "end": 1606.1200000000001, "text": " they are both at themselves to the path, right? So opt home brew bin and MambaForge bin. So", "tokens": [436, 366, 1293, 412, 2969, 281, 264, 3100, 11, 558, 30, 407, 2427, 1280, 34619, 5171, 293, 376, 23337, 37, 4685, 5171, 13, 407], "temperature": 0.0, "avg_logprob": -0.21971559052420134, "compression_ratio": 1.577092511013216, "no_speech_prob": 4.9368049985787366e-06}, {"id": 234, "seek": 159764, "start": 1606.1200000000001, "end": 1610.76, "text": " they're just both in the path. Yeah, I shouldn't... I can't see why they would get in the way", "tokens": [436, 434, 445, 1293, 294, 264, 3100, 13, 865, 11, 286, 4659, 380, 485, 286, 393, 380, 536, 983, 436, 576, 483, 294, 264, 636], "temperature": 0.0, "avg_logprob": -0.21971559052420134, "compression_ratio": 1.577092511013216, "no_speech_prob": 4.9368049985787366e-06}, {"id": 235, "seek": 159764, "start": 1610.76, "end": 1621.88, "text": " of each other. Okay. All right. So find all looks for a pattern in a string, right? So,", "tokens": [295, 1184, 661, 13, 1033, 13, 1057, 558, 13, 407, 915, 439, 1542, 337, 257, 5102, 294, 257, 6798, 11, 558, 30, 407, 11], "temperature": 0.0, "avg_logprob": -0.21971559052420134, "compression_ratio": 1.577092511013216, "no_speech_prob": 4.9368049985787366e-06}, {"id": 236, "seek": 159764, "start": 1621.88, "end": 1626.5200000000002, "text": " you know, I tend to like to like to create like a really simple version of something", "tokens": [291, 458, 11, 286, 3928, 281, 411, 281, 411, 281, 1884, 411, 257, 534, 2199, 3037, 295, 746], "temperature": 0.0, "avg_logprob": -0.21971559052420134, "compression_ratio": 1.577092511013216, "no_speech_prob": 4.9368049985787366e-06}, {"id": 237, "seek": 162652, "start": 1626.52, "end": 1632.2, "text": " just to make sure I understand a command before I dive into it. So I reckon we should better", "tokens": [445, 281, 652, 988, 286, 1223, 257, 5622, 949, 286, 9192, 666, 309, 13, 407, 286, 29548, 321, 820, 1101], "temperature": 0.0, "avg_logprob": -0.20975802494929388, "compression_ratio": 1.4603174603174602, "no_speech_prob": 1.0782987374113873e-05}, {"id": 238, "seek": 162652, "start": 1632.2, "end": 1640.4, "text": " find the word fix in our source, right? And there it is. Okay. It's appeared more than", "tokens": [915, 264, 1349, 3191, 294, 527, 4009, 11, 558, 30, 400, 456, 309, 307, 13, 1033, 13, 467, 311, 8516, 544, 813], "temperature": 0.0, "avg_logprob": -0.20975802494929388, "compression_ratio": 1.4603174603174602, "no_speech_prob": 1.0782987374113873e-05}, {"id": 239, "seek": 162652, "start": 1640.4, "end": 1654.2, "text": " once. Okay. There it is, right? And so then if we... generally with regexers, we use backslashes", "tokens": [1564, 13, 1033, 13, 821, 309, 307, 11, 558, 30, 400, 370, 550, 498, 321, 485, 5101, 365, 319, 432, 87, 433, 11, 321, 764, 646, 10418, 12808], "temperature": 0.0, "avg_logprob": -0.20975802494929388, "compression_ratio": 1.4603174603174602, "no_speech_prob": 1.0782987374113873e-05}, {"id": 240, "seek": 165420, "start": 1654.2, "end": 1659.44, "text": " quite a lot to mean certain things. But Python uses a backslash to mean something else, which", "tokens": [1596, 257, 688, 281, 914, 1629, 721, 13, 583, 15329, 4960, 257, 646, 10418, 1299, 281, 914, 746, 1646, 11, 597], "temperature": 0.0, "avg_logprob": -0.13750395120358935, "compression_ratio": 1.719626168224299, "no_speech_prob": 1.5206046555249486e-05}, {"id": 241, "seek": 165420, "start": 1659.44, "end": 1664.72, "text": " is that the next character is a control character. So to tell Python that treat backslashes as", "tokens": [307, 300, 264, 958, 2517, 307, 257, 1969, 2517, 13, 407, 281, 980, 15329, 300, 2387, 646, 10418, 12808, 382], "temperature": 0.0, "avg_logprob": -0.13750395120358935, "compression_ratio": 1.719626168224299, "no_speech_prob": 1.5206046555249486e-05}, {"id": 242, "seek": 165420, "start": 1664.72, "end": 1671.28, "text": " backslashes, you put an R before the string. So this looks for the, you know, backslash", "tokens": [646, 10418, 12808, 11, 291, 829, 364, 497, 949, 264, 6798, 13, 407, 341, 1542, 337, 264, 11, 291, 458, 11, 646, 10418, 1299], "temperature": 0.0, "avg_logprob": -0.13750395120358935, "compression_ratio": 1.719626168224299, "no_speech_prob": 1.5206046555249486e-05}, {"id": 243, "seek": 165420, "start": 1671.28, "end": 1682.04, "text": " F fix test. In fact, you know, if I just show you here, backslash N is normally a new line.", "tokens": [479, 3191, 1500, 13, 682, 1186, 11, 291, 458, 11, 498, 286, 445, 855, 291, 510, 11, 646, 10418, 1299, 426, 307, 5646, 257, 777, 1622, 13], "temperature": 0.0, "avg_logprob": -0.13750395120358935, "compression_ratio": 1.719626168224299, "no_speech_prob": 1.5206046555249486e-05}, {"id": 244, "seek": 168204, "start": 1682.04, "end": 1691.48, "text": " But if I put an R there, it's not a new line. Actually, this would be easier if I say print.", "tokens": [583, 498, 286, 829, 364, 497, 456, 11, 309, 311, 406, 257, 777, 1622, 13, 5135, 11, 341, 576, 312, 3571, 498, 286, 584, 4482, 13], "temperature": 0.0, "avg_logprob": -0.19239080602472478, "compression_ratio": 1.3875968992248062, "no_speech_prob": 1.0952746379189193e-05}, {"id": 245, "seek": 168204, "start": 1691.48, "end": 1703.6399999999999, "text": " So that prints new line fix test. And that prints backslash F fix test. Okay. So we're", "tokens": [407, 300, 22305, 777, 1622, 3191, 1500, 13, 400, 300, 22305, 646, 10418, 1299, 479, 3191, 1500, 13, 1033, 13, 407, 321, 434], "temperature": 0.0, "avg_logprob": -0.19239080602472478, "compression_ratio": 1.3875968992248062, "no_speech_prob": 1.0952746379189193e-05}, {"id": 246, "seek": 170364, "start": 1703.64, "end": 1713.68, "text": " going to look for stuff of this form. That's our source, right? So I would be inclined", "tokens": [516, 281, 574, 337, 1507, 295, 341, 1254, 13, 663, 311, 527, 4009, 11, 558, 30, 407, 286, 576, 312, 28173], "temperature": 0.0, "avg_logprob": -0.10365705232362489, "compression_ratio": 1.4488636363636365, "no_speech_prob": 6.54030100122327e-06}, {"id": 247, "seek": 170364, "start": 1713.68, "end": 1721.3600000000001, "text": " just to paste it in here. Okay. So square brackets have a special meaning in regex.", "tokens": [445, 281, 9163, 309, 294, 510, 13, 1033, 13, 407, 3732, 26179, 362, 257, 2121, 3620, 294, 319, 432, 87, 13], "temperature": 0.0, "avg_logprob": -0.10365705232362489, "compression_ratio": 1.4488636363636365, "no_speech_prob": 6.54030100122327e-06}, {"id": 248, "seek": 170364, "start": 1721.3600000000001, "end": 1729.3600000000001, "text": " So we can use a backslash to say don't use a special meaning. Ditto with pipe. Ditto", "tokens": [407, 321, 393, 764, 257, 646, 10418, 1299, 281, 584, 500, 380, 764, 257, 2121, 3620, 13, 413, 34924, 365, 11240, 13, 413, 34924], "temperature": 0.0, "avg_logprob": -0.10365705232362489, "compression_ratio": 1.4488636363636365, "no_speech_prob": 6.54030100122327e-06}, {"id": 249, "seek": 172936, "start": 1729.36, "end": 1743.9599999999998, "text": " with parentheses. Let's get rid of all those. Okay. And so this is going to be the name", "tokens": [365, 34153, 13, 961, 311, 483, 3973, 295, 439, 729, 13, 1033, 13, 400, 370, 341, 307, 516, 281, 312, 264, 1315], "temperature": 0.0, "avg_logprob": -0.14523155588499256, "compression_ratio": 1.5027624309392265, "no_speech_prob": 2.9943923891551094e-06}, {"id": 250, "seek": 172936, "start": 1743.9599999999998, "end": 1753.6799999999998, "text": " of something. And so if we want to remember some block of text, we can put it in parentheses.", "tokens": [295, 746, 13, 400, 370, 498, 321, 528, 281, 1604, 512, 3461, 295, 2487, 11, 321, 393, 829, 309, 294, 34153, 13], "temperature": 0.0, "avg_logprob": -0.14523155588499256, "compression_ratio": 1.5027624309392265, "no_speech_prob": 2.9943923891551094e-06}, {"id": 251, "seek": 172936, "start": 1753.6799999999998, "end": 1759.24, "text": " Right? So the thing we're going to try to find here is basically I think probably anything", "tokens": [1779, 30, 407, 264, 551, 321, 434, 516, 281, 853, 281, 915, 510, 307, 1936, 286, 519, 1391, 1340], "temperature": 0.0, "avg_logprob": -0.14523155588499256, "compression_ratio": 1.5027624309392265, "no_speech_prob": 2.9943923891551094e-06}, {"id": 252, "seek": 175924, "start": 1759.24, "end": 1767.0, "text": " that's not whitespace will be fine. So backslash S means not whitespace. And plus means one", "tokens": [300, 311, 406, 21909, 17940, 486, 312, 2489, 13, 407, 646, 10418, 1299, 318, 1355, 406, 21909, 17940, 13, 400, 1804, 1355, 472], "temperature": 0.0, "avg_logprob": -0.11541540328770468, "compression_ratio": 1.528735632183908, "no_speech_prob": 9.972834050131496e-06}, {"id": 253, "seek": 175924, "start": 1767.0, "end": 1779.84, "text": " or more. I don't think we care about the size. So we'll just skip over this. And then this", "tokens": [420, 544, 13, 286, 500, 380, 519, 321, 1127, 466, 264, 2744, 13, 407, 321, 603, 445, 10023, 670, 341, 13, 400, 550, 341], "temperature": 0.0, "avg_logprob": -0.11541540328770468, "compression_ratio": 1.528735632183908, "no_speech_prob": 9.972834050131496e-06}, {"id": 254, "seek": 175924, "start": 1779.84, "end": 1783.0, "text": " is actually something we do want to keep, which is the actual file name we're going", "tokens": [307, 767, 746, 321, 360, 528, 281, 1066, 11, 597, 307, 264, 3539, 3991, 1315, 321, 434, 516], "temperature": 0.0, "avg_logprob": -0.11541540328770468, "compression_ratio": 1.528735632183908, "no_speech_prob": 9.972834050131496e-06}, {"id": 255, "seek": 178300, "start": 1783.0, "end": 1789.88, "text": " to end up with. So I'll create parentheses for that and put my backslash S plus there", "tokens": [281, 917, 493, 365, 13, 407, 286, 603, 1884, 34153, 337, 300, 293, 829, 452, 646, 10418, 1299, 318, 1804, 456], "temperature": 0.0, "avg_logprob": -0.197632225192323, "compression_ratio": 1.356060606060606, "no_speech_prob": 3.6688427371700527e-06}, {"id": 256, "seek": 178300, "start": 1789.88, "end": 1806.16, "text": " as well. Okay. So that's looking pretty hopeful. So what it's done here is found equals found", "tokens": [382, 731, 13, 1033, 13, 407, 300, 311, 1237, 1238, 20531, 13, 407, 437, 309, 311, 1096, 510, 307, 1352, 6915, 1352], "temperature": 0.0, "avg_logprob": -0.197632225192323, "compression_ratio": 1.356060606060606, "no_speech_prob": 3.6688427371700527e-06}, {"id": 257, "seek": 180616, "start": 1806.16, "end": 1826.96, "text": " 29 things. Which looks something like this. Oh, I put parentheses twice here, which is", "tokens": [9413, 721, 13, 3013, 1542, 746, 411, 341, 13, 876, 11, 286, 829, 34153, 6091, 510, 11, 597, 307], "temperature": 0.0, "avg_logprob": -0.28067228068476135, "compression_ratio": 1.036144578313253, "no_speech_prob": 1.9525581592461094e-05}, {"id": 258, "seek": 182696, "start": 1826.96, "end": 1836.6000000000001, "text": " why it's appearing twice. That's better. Does that make sense? So it's basically showing", "tokens": [983, 309, 311, 19870, 6091, 13, 663, 311, 1101, 13, 4402, 300, 652, 2020, 30, 407, 309, 311, 1936, 4099], "temperature": 0.0, "avg_logprob": -0.13382452726364136, "compression_ratio": 1.3676470588235294, "no_speech_prob": 1.4367226413014578e-06}, {"id": 259, "seek": 182696, "start": 1836.6000000000001, "end": 1846.44, "text": " each of the parenthesized expressions. And so actually we don't need this bit to be parenthesized", "tokens": [1184, 295, 264, 23350, 279, 1602, 15277, 13, 400, 370, 767, 321, 500, 380, 643, 341, 857, 281, 312, 23350, 279, 1602], "temperature": 0.0, "avg_logprob": -0.13382452726364136, "compression_ratio": 1.3676470588235294, "no_speech_prob": 1.4367226413014578e-06}, {"id": 260, "seek": 184644, "start": 1846.44, "end": 1857.04, "text": " because I don't think we care about the original size. Okay. And so we should be able to create", "tokens": [570, 286, 500, 380, 519, 321, 1127, 466, 264, 3380, 2744, 13, 1033, 13, 400, 370, 321, 820, 312, 1075, 281, 1884], "temperature": 0.0, "avg_logprob": -0.13473758697509766, "compression_ratio": 1.454054054054054, "no_speech_prob": 9.972787665901706e-06}, {"id": 261, "seek": 184644, "start": 1857.04, "end": 1869.64, "text": " a dictionary from that. Because we've now got a list of tuples. I never quite remember", "tokens": [257, 25890, 490, 300, 13, 1436, 321, 600, 586, 658, 257, 1329, 295, 2604, 2622, 13, 286, 1128, 1596, 1604], "temperature": 0.0, "avg_logprob": -0.13473758697509766, "compression_ratio": 1.454054054054054, "no_speech_prob": 9.972787665901706e-06}, {"id": 262, "seek": 184644, "start": 1869.64, "end": 1873.48, "text": " how this works. But yeah, there you go. So the list of tuples, if you pass it to dict,", "tokens": [577, 341, 1985, 13, 583, 1338, 11, 456, 291, 352, 13, 407, 264, 1329, 295, 2604, 2622, 11, 498, 291, 1320, 309, 281, 12569, 11], "temperature": 0.0, "avg_logprob": -0.13473758697509766, "compression_ratio": 1.454054054054054, "no_speech_prob": 9.972787665901706e-06}, {"id": 263, "seek": 187348, "start": 1873.48, "end": 1885.3600000000001, "text": " it'll create a dictionary. And I think like there's something to be said for programming", "tokens": [309, 603, 1884, 257, 25890, 13, 400, 286, 519, 411, 456, 311, 746, 281, 312, 848, 337, 9410], "temperature": 0.0, "avg_logprob": -0.09876491806723854, "compression_ratio": 1.5, "no_speech_prob": 1.9637745936051942e-06}, {"id": 264, "seek": 187348, "start": 1885.3600000000001, "end": 1890.3600000000001, "text": " in an interactive environment, you know, that allows us to like gradually build up a thing", "tokens": [294, 364, 15141, 2823, 11, 291, 458, 11, 300, 4045, 505, 281, 411, 13145, 1322, 493, 257, 551], "temperature": 0.0, "avg_logprob": -0.09876491806723854, "compression_ratio": 1.5, "no_speech_prob": 1.9637745936051942e-06}, {"id": 265, "seek": 187348, "start": 1890.3600000000001, "end": 1897.28, "text": " that works and then, you know, assign it to a variable or stick it in a function or whatever.", "tokens": [300, 1985, 293, 550, 11, 291, 458, 11, 6269, 309, 281, 257, 7006, 420, 2897, 309, 294, 257, 2445, 420, 2035, 13], "temperature": 0.0, "avg_logprob": -0.09876491806723854, "compression_ratio": 1.5, "no_speech_prob": 1.9637745936051942e-06}, {"id": 266, "seek": 189728, "start": 1897.28, "end": 1907.24, "text": " So now we should be able to search for found add to class. And we do. So we've got the", "tokens": [407, 586, 321, 820, 312, 1075, 281, 3164, 337, 1352, 909, 281, 1508, 13, 400, 321, 360, 13, 407, 321, 600, 658, 264], "temperature": 0.0, "avg_logprob": -0.20819129943847656, "compression_ratio": 1.4764397905759161, "no_speech_prob": 4.8601314119878225e-06}, {"id": 267, "seek": 189728, "start": 1907.24, "end": 1911.32, "text": " dictionary we want to. Does that make sense so far?", "tokens": [25890, 321, 528, 281, 13, 4402, 300, 652, 2020, 370, 1400, 30], "temperature": 0.0, "avg_logprob": -0.20819129943847656, "compression_ratio": 1.4764397905759161, "no_speech_prob": 4.8601314119878225e-06}, {"id": 268, "seek": 189728, "start": 1911.32, "end": 1920.04, "text": " Yeah. I just have a question about that. You got rid of the size. So if you don't put the", "tokens": [865, 13, 286, 445, 362, 257, 1168, 466, 300, 13, 509, 658, 3973, 295, 264, 2744, 13, 407, 498, 291, 500, 380, 829, 264], "temperature": 0.0, "avg_logprob": -0.20819129943847656, "compression_ratio": 1.4764397905759161, "no_speech_prob": 4.8601314119878225e-06}, {"id": 269, "seek": 189728, "start": 1920.04, "end": 1923.44, "text": " parentheses, does that mean it will just ignore that?", "tokens": [34153, 11, 775, 300, 914, 309, 486, 445, 11200, 300, 30], "temperature": 0.0, "avg_logprob": -0.20819129943847656, "compression_ratio": 1.4764397905759161, "no_speech_prob": 4.8601314119878225e-06}, {"id": 270, "seek": 192344, "start": 1923.44, "end": 1933.0800000000002, "text": " Yeah. I mean, it has to be there, right? So if we said, oh, look for AAA. Well, that's", "tokens": [865, 13, 286, 914, 11, 309, 575, 281, 312, 456, 11, 558, 30, 407, 498, 321, 848, 11, 1954, 11, 574, 337, 34347, 13, 1042, 11, 300, 311], "temperature": 0.0, "avg_logprob": -0.13990740232829807, "compression_ratio": 1.5397727272727273, "no_speech_prob": 4.494976565183606e-06}, {"id": 271, "seek": 192344, "start": 1933.0800000000002, "end": 1941.04, "text": " not there, right? So it won't find anything. So it's still searching for it. It's just", "tokens": [406, 456, 11, 558, 30, 407, 309, 1582, 380, 915, 1340, 13, 407, 309, 311, 920, 10808, 337, 309, 13, 467, 311, 445], "temperature": 0.0, "avg_logprob": -0.13990740232829807, "compression_ratio": 1.5397727272727273, "no_speech_prob": 4.494976565183606e-06}, {"id": 272, "seek": 192344, "start": 1941.04, "end": 1949.68, "text": " not storing it. So it's finding an exclamation mark, open square bracket, finding and remembering", "tokens": [406, 26085, 309, 13, 407, 309, 311, 5006, 364, 1624, 43233, 1491, 11, 1269, 3732, 16904, 11, 5006, 293, 20719], "temperature": 0.0, "avg_logprob": -0.13990740232829807, "compression_ratio": 1.5397727272727273, "no_speech_prob": 4.494976565183606e-06}, {"id": 273, "seek": 194968, "start": 1949.68, "end": 1956.0, "text": " a bunch of non-white space characters, followed by a pipe sign, followed by a bunch of non-white", "tokens": [257, 3840, 295, 2107, 12, 28865, 1901, 4342, 11, 6263, 538, 257, 11240, 1465, 11, 6263, 538, 257, 3840, 295, 2107, 12, 28865], "temperature": 0.0, "avg_logprob": -0.1618902553211559, "compression_ratio": 2.3054187192118225, "no_speech_prob": 7.136968633858487e-05}, {"id": 274, "seek": 194968, "start": 1956.0, "end": 1961.1200000000001, "text": " space characters, which it doesn't remember, followed by a closing square bracket, followed", "tokens": [1901, 4342, 11, 597, 309, 1177, 380, 1604, 11, 6263, 538, 257, 10377, 3732, 16904, 11, 6263], "temperature": 0.0, "avg_logprob": -0.1618902553211559, "compression_ratio": 2.3054187192118225, "no_speech_prob": 7.136968633858487e-05}, {"id": 275, "seek": 194968, "start": 1961.1200000000001, "end": 1965.6000000000001, "text": " by an opening parenthesis, followed by a bunch of non-white space characters that it does", "tokens": [538, 364, 5193, 23350, 9374, 11, 6263, 538, 257, 3840, 295, 2107, 12, 28865, 1901, 4342, 300, 309, 775], "temperature": 0.0, "avg_logprob": -0.1618902553211559, "compression_ratio": 2.3054187192118225, "no_speech_prob": 7.136968633858487e-05}, {"id": 276, "seek": 194968, "start": 1965.6000000000001, "end": 1969.78, "text": " remember, followed by a closing parenthesis.", "tokens": [1604, 11, 6263, 538, 257, 10377, 23350, 9374, 13], "temperature": 0.0, "avg_logprob": -0.1618902553211559, "compression_ratio": 2.3054187192118225, "no_speech_prob": 7.136968633858487e-05}, {"id": 277, "seek": 194968, "start": 1969.78, "end": 1972.24, "text": " So putting parentheses makes it remember essentially.", "tokens": [407, 3372, 34153, 1669, 309, 1604, 4476, 13], "temperature": 0.0, "avg_logprob": -0.1618902553211559, "compression_ratio": 2.3054187192118225, "no_speech_prob": 7.136968633858487e-05}, {"id": 278, "seek": 194968, "start": 1972.24, "end": 1977.3200000000002, "text": " Correct. Correct. It does two things. It also groups things, which is a bit confusing that", "tokens": [12753, 13, 12753, 13, 467, 775, 732, 721, 13, 467, 611, 3935, 721, 11, 597, 307, 257, 857, 13181, 300], "temperature": 0.0, "avg_logprob": -0.1618902553211559, "compression_ratio": 2.3054187192118225, "no_speech_prob": 7.136968633858487e-05}, {"id": 279, "seek": 197732, "start": 1977.32, "end": 1981.08, "text": " it does two things. But yeah, in this case, the thing we're using for is the fact that", "tokens": [309, 775, 732, 721, 13, 583, 1338, 11, 294, 341, 1389, 11, 264, 551, 321, 434, 1228, 337, 307, 264, 1186, 300], "temperature": 0.0, "avg_logprob": -0.18412324098440316, "compression_ratio": 1.6621004566210045, "no_speech_prob": 6.1439800447260495e-06}, {"id": 280, "seek": 197732, "start": 1981.08, "end": 1990.8799999999999, "text": " it remembers things and will end up in the output of re.findall. Amongst many other things,", "tokens": [309, 26228, 721, 293, 486, 917, 493, 294, 264, 5598, 295, 319, 13, 35072, 336, 13, 16119, 372, 867, 661, 721, 11], "temperature": 0.0, "avg_logprob": -0.18412324098440316, "compression_ratio": 1.6621004566210045, "no_speech_prob": 6.1439800447260495e-06}, {"id": 281, "seek": 197732, "start": 1990.8799999999999, "end": 1995.32, "text": " if you just do re.match or re.search, it will also remember them. It just returns slightly", "tokens": [498, 291, 445, 360, 319, 13, 76, 852, 420, 319, 13, 405, 1178, 11, 309, 486, 611, 1604, 552, 13, 467, 445, 11247, 4748], "temperature": 0.0, "avg_logprob": -0.18412324098440316, "compression_ratio": 1.6621004566210045, "no_speech_prob": 6.1439800447260495e-06}, {"id": 282, "seek": 197732, "start": 1995.32, "end": 2003.28, "text": " different things. re.findall is one of the easiest things to use though. So I think it's", "tokens": [819, 721, 13, 319, 13, 35072, 336, 307, 472, 295, 264, 12889, 721, 281, 764, 1673, 13, 407, 286, 519, 309, 311], "temperature": 0.0, "avg_logprob": -0.18412324098440316, "compression_ratio": 1.6621004566210045, "no_speech_prob": 6.1439800447260495e-06}, {"id": 283, "seek": 197732, "start": 2003.28, "end": 2004.28, "text": " good.", "tokens": [665, 13], "temperature": 0.0, "avg_logprob": -0.18412324098440316, "compression_ratio": 1.6621004566210045, "no_speech_prob": 6.1439800447260495e-06}, {"id": 284, "seek": 200428, "start": 2004.28, "end": 2012.96, "text": " Okay. So now we need to basically search and replace in destination, looking for stuff", "tokens": [1033, 13, 407, 586, 321, 643, 281, 1936, 3164, 293, 7406, 294, 12236, 11, 1237, 337, 1507], "temperature": 0.0, "avg_logprob": -0.19993505023774646, "compression_ratio": 1.075, "no_speech_prob": 2.6271223759977147e-05}, {"id": 285, "seek": 201296, "start": 2012.96, "end": 2042.88, "text": " like this. Okay. So this is our destination. Kind of want to look at the, you know, the", "tokens": [411, 341, 13, 1033, 13, 407, 341, 307, 527, 12236, 13, 9242, 295, 528, 281, 574, 412, 264, 11, 291, 458, 11, 264], "temperature": 0.0, "avg_logprob": -0.553730187592683, "compression_ratio": 1.0740740740740742, "no_speech_prob": 1.7500757166999392e-05}, {"id": 286, "seek": 204288, "start": 2042.88, "end": 2053.2400000000002, "text": " end of it. Okay. Here's two things we want to change, right? So I'm just going to like", "tokens": [917, 295, 309, 13, 1033, 13, 1692, 311, 732, 721, 321, 528, 281, 1319, 11, 558, 30, 407, 286, 478, 445, 516, 281, 411], "temperature": 0.0, "avg_logprob": -0.15664042435683212, "compression_ratio": 1.5529411764705883, "no_speech_prob": 1.1478484339022543e-05}, {"id": 287, "seek": 204288, "start": 2053.2400000000002, "end": 2057.1600000000003, "text": " use the last few characters just so I can see what's going on. So I'm just going to", "tokens": [764, 264, 1036, 1326, 4342, 445, 370, 286, 393, 536, 437, 311, 516, 322, 13, 407, 286, 478, 445, 516, 281], "temperature": 0.0, "avg_logprob": -0.15664042435683212, "compression_ratio": 1.5529411764705883, "no_speech_prob": 1.1478484339022543e-05}, {"id": 288, "seek": 204288, "start": 2057.1600000000003, "end": 2072.44, "text": " put that in a variable for now. Okay. So there's a thing called re.sub for substitute. That's", "tokens": [829, 300, 294, 257, 7006, 337, 586, 13, 1033, 13, 407, 456, 311, 257, 551, 1219, 319, 13, 30131, 337, 15802, 13, 663, 311], "temperature": 0.0, "avg_logprob": -0.15664042435683212, "compression_ratio": 1.5529411764705883, "no_speech_prob": 1.1478484339022543e-05}, {"id": 289, "seek": 207244, "start": 2072.44, "end": 2076.32, "text": " funny. A lot of Python programmers complain about me using three-letter abbreviations,", "tokens": [4074, 13, 316, 688, 295, 15329, 41504, 11024, 466, 385, 1228, 1045, 12, 21248, 35839, 763, 11], "temperature": 0.0, "avg_logprob": -0.19427821947180707, "compression_ratio": 1.6294642857142858, "no_speech_prob": 2.355200740566943e-05}, {"id": 290, "seek": 207244, "start": 2076.32, "end": 2081.96, "text": " but Python apparently is allowed to use three-letter abbreviations. re.substitute. So we're going", "tokens": [457, 15329, 7970, 307, 4350, 281, 764, 1045, 12, 21248, 35839, 763, 13, 319, 13, 30131, 372, 6559, 13, 407, 321, 434, 516], "temperature": 0.0, "avg_logprob": -0.19427821947180707, "compression_ratio": 1.6294642857142858, "no_speech_prob": 2.355200740566943e-05}, {"id": 291, "seek": 207244, "start": 2081.96, "end": 2088.12, "text": " to find a pattern and replace it with something else. And we're just going to search in some", "tokens": [281, 915, 257, 5102, 293, 7406, 309, 365, 746, 1646, 13, 400, 321, 434, 445, 516, 281, 3164, 294, 512], "temperature": 0.0, "avg_logprob": -0.19427821947180707, "compression_ratio": 1.6294642857142858, "no_speech_prob": 2.355200740566943e-05}, {"id": 292, "seek": 207244, "start": 2088.12, "end": 2100.92, "text": " string. So for example, if we replace space with star nd, okay, that's basically how it", "tokens": [6798, 13, 407, 337, 1365, 11, 498, 321, 7406, 1901, 365, 3543, 220, 273, 11, 1392, 11, 300, 311, 1936, 577, 309], "temperature": 0.0, "avg_logprob": -0.19427821947180707, "compression_ratio": 1.6294642857142858, "no_speech_prob": 2.355200740566943e-05}, {"id": 293, "seek": 210092, "start": 2100.92, "end": 2116.28, "text": " works. Or you can search for a regular expression. So let's search for that. Okay. And again,", "tokens": [1985, 13, 1610, 291, 393, 3164, 337, 257, 3890, 6114, 13, 407, 718, 311, 3164, 337, 300, 13, 1033, 13, 400, 797, 11], "temperature": 0.0, "avg_logprob": -0.141428921320667, "compression_ratio": 1.8243243243243243, "no_speech_prob": 3.555954890543944e-06}, {"id": 294, "seek": 210092, "start": 2116.28, "end": 2120.36, "text": " we're going to use r because we're going to use backslashes. We're going to search for", "tokens": [321, 434, 516, 281, 764, 367, 570, 321, 434, 516, 281, 764, 646, 10418, 12808, 13, 492, 434, 516, 281, 3164, 337], "temperature": 0.0, "avg_logprob": -0.141428921320667, "compression_ratio": 1.8243243243243243, "no_speech_prob": 3.555954890543944e-06}, {"id": 295, "seek": 210092, "start": 2120.36, "end": 2128.52, "text": " a literal square bracket. We're going to search for a literal vertical bar. Okay. And you", "tokens": [257, 20411, 3732, 16904, 13, 492, 434, 516, 281, 3164, 337, 257, 20411, 9429, 2159, 13, 1033, 13, 400, 291], "temperature": 0.0, "avg_logprob": -0.141428921320667, "compression_ratio": 1.8243243243243243, "no_speech_prob": 3.555954890543944e-06}, {"id": 296, "seek": 212852, "start": 2128.52, "end": 2142.68, "text": " can see that's been replaced with a star. And so this thing here is the file name. And", "tokens": [393, 536, 300, 311, 668, 10772, 365, 257, 3543, 13, 400, 370, 341, 551, 510, 307, 264, 3991, 1315, 13, 400], "temperature": 0.0, "avg_logprob": -0.16365271645623283, "compression_ratio": 1.696774193548387, "no_speech_prob": 8.139534656947944e-06}, {"id": 297, "seek": 212852, "start": 2142.68, "end": 2151.64, "text": " the bit before the dot is what we're going to look up. So I'm going to do, so we're going", "tokens": [264, 857, 949, 264, 5893, 307, 437, 321, 434, 516, 281, 574, 493, 13, 407, 286, 478, 516, 281, 360, 11, 370, 321, 434, 516], "temperature": 0.0, "avg_logprob": -0.16365271645623283, "compression_ratio": 1.696774193548387, "no_speech_prob": 8.139534656947944e-06}, {"id": 298, "seek": 212852, "start": 2151.64, "end": 2155.68, "text": " to capture this. And the thing we're going to look for is everything except for a dot.", "tokens": [281, 7983, 341, 13, 400, 264, 551, 321, 434, 516, 281, 574, 337, 307, 1203, 3993, 337, 257, 5893, 13], "temperature": 0.0, "avg_logprob": -0.16365271645623283, "compression_ratio": 1.696774193548387, "no_speech_prob": 8.139534656947944e-06}, {"id": 299, "seek": 215568, "start": 2155.68, "end": 2159.7999999999997, "text": " Okay. So to say everything except for a dot, you put in square brackets, you put the things", "tokens": [1033, 13, 407, 281, 584, 1203, 3993, 337, 257, 5893, 11, 291, 829, 294, 3732, 26179, 11, 291, 829, 264, 721], "temperature": 0.0, "avg_logprob": -0.16253731276962782, "compression_ratio": 1.7233009708737863, "no_speech_prob": 7.183198249549605e-06}, {"id": 300, "seek": 215568, "start": 2159.7999999999997, "end": 2164.96, "text": " to look for. And a caret means things you don't want to look for. So this is everything", "tokens": [281, 574, 337, 13, 400, 257, 1127, 83, 1355, 721, 291, 500, 380, 528, 281, 574, 337, 13, 407, 341, 307, 1203], "temperature": 0.0, "avg_logprob": -0.16253731276962782, "compression_ratio": 1.7233009708737863, "no_speech_prob": 7.183198249549605e-06}, {"id": 301, "seek": 215568, "start": 2164.96, "end": 2170.48, "text": " except a dot. And this says to capture it. So remembering, I call it remembering. It's", "tokens": [3993, 257, 5893, 13, 400, 341, 1619, 281, 7983, 309, 13, 407, 20719, 11, 286, 818, 309, 20719, 13, 467, 311], "temperature": 0.0, "avg_logprob": -0.16253731276962782, "compression_ratio": 1.7233009708737863, "no_speech_prob": 7.183198249549605e-06}, {"id": 302, "seek": 215568, "start": 2170.48, "end": 2175.04, "text": " actually called capturing. Dot has a special meaning normally, which is anything at all.", "tokens": [767, 1219, 23384, 13, 38753, 575, 257, 2121, 3620, 5646, 11, 597, 307, 1340, 412, 439, 13], "temperature": 0.0, "avg_logprob": -0.16253731276962782, "compression_ratio": 1.7233009708737863, "no_speech_prob": 7.183198249549605e-06}, {"id": 303, "seek": 217504, "start": 2175.04, "end": 2186.24, "text": " So that's a literal dot. Let's not assume it's not always PNG. So I'm just going to", "tokens": [407, 300, 311, 257, 20411, 5893, 13, 961, 311, 406, 6552, 309, 311, 406, 1009, 430, 30237, 13, 407, 286, 478, 445, 516, 281], "temperature": 0.0, "avg_logprob": -0.25812860897609163, "compression_ratio": 1.2962962962962963, "no_speech_prob": 4.936958248435985e-06}, {"id": 304, "seek": 217504, "start": 2186.24, "end": 2194.2799999999997, "text": " say any three characters. In fact, regardless of whether it's JPEG or PNG, oh, here we are.", "tokens": [584, 604, 1045, 4342, 13, 682, 1186, 11, 10060, 295, 1968, 309, 311, 508, 5208, 38, 420, 430, 30237, 11, 1954, 11, 510, 321, 366, 13], "temperature": 0.0, "avg_logprob": -0.25812860897609163, "compression_ratio": 1.2962962962962963, "no_speech_prob": 4.936958248435985e-06}, {"id": 305, "seek": 219428, "start": 2194.28, "end": 2206.96, "text": " Oh, it's also sometimes it's JPEG. Could be four characters. Okay. No worries. Okay. Well,", "tokens": [876, 11, 309, 311, 611, 2171, 309, 311, 508, 5208, 38, 13, 7497, 312, 1451, 4342, 13, 1033, 13, 883, 16340, 13, 1033, 13, 1042, 11], "temperature": 0.0, "avg_logprob": -0.27093967369624544, "compression_ratio": 1.3014705882352942, "no_speech_prob": 1.2606531527126208e-05}, {"id": 306, "seek": 219428, "start": 2206.96, "end": 2216.44, "text": " anything could do. Oh, I know. We could just do some letters. So backslash W is a word", "tokens": [1340, 727, 360, 13, 876, 11, 286, 458, 13, 492, 727, 445, 360, 512, 7825, 13, 407, 646, 10418, 1299, 343, 307, 257, 1349], "temperature": 0.0, "avg_logprob": -0.27093967369624544, "compression_ratio": 1.3014705882352942, "no_speech_prob": 1.2606531527126208e-05}, {"id": 307, "seek": 221644, "start": 2216.44, "end": 2225.92, "text": " symbol. So basically letters and numbers and stuff. So we'll have a bunch of those. Okay.", "tokens": [5986, 13, 407, 1936, 7825, 293, 3547, 293, 1507, 13, 407, 321, 603, 362, 257, 3840, 295, 729, 13, 1033, 13], "temperature": 0.0, "avg_logprob": -0.19728201314022667, "compression_ratio": 1.5, "no_speech_prob": 3.6119506603427e-06}, {"id": 308, "seek": 221644, "start": 2225.92, "end": 2235.92, "text": " Now interestingly in this case, this has got a pipe 900. This has got a closed square bracket.", "tokens": [823, 25873, 294, 341, 1389, 11, 341, 575, 658, 257, 11240, 22016, 13, 639, 575, 658, 257, 5395, 3732, 16904, 13], "temperature": 0.0, "avg_logprob": -0.19728201314022667, "compression_ratio": 1.5, "no_speech_prob": 3.6119506603427e-06}, {"id": 309, "seek": 221644, "start": 2235.92, "end": 2245.08, "text": " Okay. So there's a few ways we can do this. I'm going to show you, okay, I'm going to", "tokens": [1033, 13, 407, 456, 311, 257, 1326, 2098, 321, 393, 360, 341, 13, 286, 478, 516, 281, 855, 291, 11, 1392, 11, 286, 478, 516, 281], "temperature": 0.0, "avg_logprob": -0.19728201314022667, "compression_ratio": 1.5, "no_speech_prob": 3.6119506603427e-06}, {"id": 310, "seek": 224508, "start": 2245.08, "end": 2253.24, "text": " show you the more interesting way, which is that, no, let's do it the simpler way. Okay.", "tokens": [855, 291, 264, 544, 1880, 636, 11, 597, 307, 300, 11, 572, 11, 718, 311, 360, 309, 264, 18587, 636, 13, 1033, 13], "temperature": 0.0, "avg_logprob": -0.11118245611385423, "compression_ratio": 1.7, "no_speech_prob": 3.500807224554592e-06}, {"id": 311, "seek": 224508, "start": 2253.24, "end": 2258.2799999999997, "text": " So the simple way is rather than looking for any word symbol, let's just look for anything", "tokens": [407, 264, 2199, 636, 307, 2831, 813, 1237, 337, 604, 1349, 5986, 11, 718, 311, 445, 574, 337, 1340], "temperature": 0.0, "avg_logprob": -0.11118245611385423, "compression_ratio": 1.7, "no_speech_prob": 3.500807224554592e-06}, {"id": 312, "seek": 224508, "start": 2258.2799999999997, "end": 2266.66, "text": " that's not a closed square bracket. So this is going to be slightly confusing, but basically", "tokens": [300, 311, 406, 257, 5395, 3732, 16904, 13, 407, 341, 307, 516, 281, 312, 4748, 13181, 11, 457, 1936], "temperature": 0.0, "avg_logprob": -0.11118245611385423, "compression_ratio": 1.7, "no_speech_prob": 3.500807224554592e-06}, {"id": 313, "seek": 224508, "start": 2266.66, "end": 2272.84, "text": " this is a regex that searches for any A's or B's or C's. This is a regex that search", "tokens": [341, 307, 257, 319, 432, 87, 300, 26701, 337, 604, 316, 311, 420, 363, 311, 420, 383, 311, 13, 639, 307, 257, 319, 432, 87, 300, 3164], "temperature": 0.0, "avg_logprob": -0.11118245611385423, "compression_ratio": 1.7, "no_speech_prob": 3.500807224554592e-06}, {"id": 314, "seek": 227284, "start": 2272.84, "end": 2280.6000000000004, "text": " for anything that's not an A or B or C. This is a regex that searches for anything that's", "tokens": [337, 1340, 300, 311, 406, 364, 316, 420, 363, 420, 383, 13, 639, 307, 257, 319, 432, 87, 300, 26701, 337, 1340, 300, 311], "temperature": 0.0, "avg_logprob": -0.08748592376708984, "compression_ratio": 1.4789915966386555, "no_speech_prob": 2.3185622922028415e-05}, {"id": 315, "seek": 227284, "start": 2280.6000000000004, "end": 2298.92, "text": " not an open square bracket. So we want to find a bunch of things that are not a square", "tokens": [406, 364, 1269, 3732, 16904, 13, 407, 321, 528, 281, 915, 257, 3840, 295, 721, 300, 366, 406, 257, 3732], "temperature": 0.0, "avg_logprob": -0.08748592376708984, "compression_ratio": 1.4789915966386555, "no_speech_prob": 2.3185622922028415e-05}, {"id": 316, "seek": 229892, "start": 2298.92, "end": 2309.48, "text": " bracket. Plus means one or more. And then there's going to be two closed square brackets.", "tokens": [16904, 13, 7721, 1355, 472, 420, 544, 13, 400, 550, 456, 311, 516, 281, 312, 732, 5395, 3732, 26179, 13], "temperature": 0.0, "avg_logprob": -0.12106927593102616, "compression_ratio": 1.575221238938053, "no_speech_prob": 3.187530865034205e-06}, {"id": 317, "seek": 229892, "start": 2309.48, "end": 2314.84, "text": " Okay. So that didn't work, which is good because now I can show you how I go about debugging", "tokens": [1033, 13, 407, 300, 994, 380, 589, 11, 597, 307, 665, 570, 586, 286, 393, 855, 291, 577, 286, 352, 466, 45592], "temperature": 0.0, "avg_logprob": -0.12106927593102616, "compression_ratio": 1.575221238938053, "no_speech_prob": 3.187530865034205e-06}, {"id": 318, "seek": 229892, "start": 2314.84, "end": 2321.7200000000003, "text": " these things. So to debug these things is I would just gradually make this simpler and", "tokens": [613, 721, 13, 407, 281, 24083, 613, 721, 307, 286, 576, 445, 13145, 652, 341, 18587, 293], "temperature": 0.0, "avg_logprob": -0.12106927593102616, "compression_ratio": 1.575221238938053, "no_speech_prob": 3.187530865034205e-06}, {"id": 319, "seek": 229892, "start": 2321.7200000000003, "end": 2324.6800000000003, "text": " simpler until it starts working. And that way we'll be able to figure out why it's not", "tokens": [18587, 1826, 309, 3719, 1364, 13, 400, 300, 636, 321, 603, 312, 1075, 281, 2573, 484, 983, 309, 311, 406], "temperature": 0.0, "avg_logprob": -0.12106927593102616, "compression_ratio": 1.575221238938053, "no_speech_prob": 3.187530865034205e-06}, {"id": 320, "seek": 232468, "start": 2324.68, "end": 2346.04, "text": " working. So I'm going to delete all of this. Okay. So that didn't work. So let's keep deleting.", "tokens": [1364, 13, 407, 286, 478, 516, 281, 12097, 439, 295, 341, 13, 1033, 13, 407, 300, 994, 380, 589, 13, 407, 718, 311, 1066, 48946, 13], "temperature": 0.0, "avg_logprob": -0.150311269258198, "compression_ratio": 1.4516129032258065, "no_speech_prob": 1.6442127162008546e-05}, {"id": 321, "seek": 232468, "start": 2346.04, "end": 2350.6, "text": " Okay. So that one did delete. Oh, okay. I see the problem. So you can see here, it's", "tokens": [1033, 13, 407, 300, 472, 630, 12097, 13, 876, 11, 1392, 13, 286, 536, 264, 1154, 13, 407, 291, 393, 536, 510, 11, 309, 311], "temperature": 0.0, "avg_logprob": -0.150311269258198, "compression_ratio": 1.4516129032258065, "no_speech_prob": 1.6442127162008546e-05}, {"id": 322, "seek": 235060, "start": 2350.6, "end": 2356.92, "text": " just replaced the first letter, which wasn't what I wanted. Right. I wanted to grab a bunch", "tokens": [445, 10772, 264, 700, 5063, 11, 597, 2067, 380, 437, 286, 1415, 13, 1779, 13, 286, 1415, 281, 4444, 257, 3840], "temperature": 0.0, "avg_logprob": -0.11169957632970329, "compression_ratio": 1.7989949748743719, "no_speech_prob": 6.854244020360056e-06}, {"id": 323, "seek": 235060, "start": 2356.92, "end": 2362.7599999999998, "text": " of these. So this here says, oh, this here says anything that's not a dot, right. But", "tokens": [295, 613, 13, 407, 341, 510, 1619, 11, 1954, 11, 341, 510, 1619, 1340, 300, 311, 406, 257, 5893, 11, 558, 13, 583], "temperature": 0.0, "avg_logprob": -0.11169957632970329, "compression_ratio": 1.7989949748743719, "no_speech_prob": 6.854244020360056e-06}, {"id": 324, "seek": 235060, "start": 2362.7599999999998, "end": 2370.72, "text": " we actually want one or more things that aren't a dot. That's better. Okay. So one or more", "tokens": [321, 767, 528, 472, 420, 544, 721, 300, 3212, 380, 257, 5893, 13, 663, 311, 1101, 13, 1033, 13, 407, 472, 420, 544], "temperature": 0.0, "avg_logprob": -0.11169957632970329, "compression_ratio": 1.7989949748743719, "no_speech_prob": 6.854244020360056e-06}, {"id": 325, "seek": 235060, "start": 2370.72, "end": 2375.56, "text": " things that aren't a dot. So we can go back and now replace that up here with one or more", "tokens": [721, 300, 3212, 380, 257, 5893, 13, 407, 321, 393, 352, 646, 293, 586, 7406, 300, 493, 510, 365, 472, 420, 544], "temperature": 0.0, "avg_logprob": -0.11169957632970329, "compression_ratio": 1.7989949748743719, "no_speech_prob": 6.854244020360056e-06}, {"id": 326, "seek": 237556, "start": 2375.56, "end": 2385.08, "text": " things that aren't a dot. There we go. So that's now successfully replaced all that", "tokens": [721, 300, 3212, 380, 257, 5893, 13, 821, 321, 352, 13, 407, 300, 311, 586, 10727, 10772, 439, 300], "temperature": 0.0, "avg_logprob": -0.18077630346471613, "compression_ratio": 1.5654205607476634, "no_speech_prob": 3.5559269235818647e-06}, {"id": 327, "seek": 237556, "start": 2385.08, "end": 2391.6, "text": " with a star. So that tells us that we've got our search working correctly.", "tokens": [365, 257, 3543, 13, 407, 300, 5112, 505, 300, 321, 600, 658, 527, 3164, 1364, 8944, 13], "temperature": 0.0, "avg_logprob": -0.18077630346471613, "compression_ratio": 1.5654205607476634, "no_speech_prob": 3.5559269235818647e-06}, {"id": 328, "seek": 237556, "start": 2391.6, "end": 2397.6, "text": " What confused me is the caret in the square brackets because I know that the caret is", "tokens": [708, 9019, 385, 307, 264, 1127, 83, 294, 264, 3732, 26179, 570, 286, 458, 300, 264, 1127, 83, 307], "temperature": 0.0, "avg_logprob": -0.18077630346471613, "compression_ratio": 1.5654205607476634, "no_speech_prob": 3.5559269235818647e-06}, {"id": 329, "seek": 237556, "start": 2397.6, "end": 2404.04, "text": " a symbol for start offline. Oh yeah, that too. So I had to Google it and it turns out that", "tokens": [257, 5986, 337, 722, 21857, 13, 876, 1338, 11, 300, 886, 13, 407, 286, 632, 281, 3329, 309, 293, 309, 4523, 484, 300], "temperature": 0.0, "avg_logprob": -0.18077630346471613, "compression_ratio": 1.5654205607476634, "no_speech_prob": 3.5559269235818647e-06}, {"id": 330, "seek": 240404, "start": 2404.04, "end": 2411.56, "text": " if it's inside the square brackets, it means not. But if it's outside, it means start offline.", "tokens": [498, 309, 311, 1854, 264, 3732, 26179, 11, 309, 1355, 406, 13, 583, 498, 309, 311, 2380, 11, 309, 1355, 722, 21857, 13], "temperature": 0.0, "avg_logprob": -0.12203936943641076, "compression_ratio": 1.6642335766423357, "no_speech_prob": 1.8923894458566792e-05}, {"id": 331, "seek": 240404, "start": 2411.56, "end": 2418.2799999999997, "text": " Yeah. Yeah. No one's going to claim that necessarily this notation is spelt the best. I guess it", "tokens": [865, 13, 865, 13, 883, 472, 311, 516, 281, 3932, 300, 4725, 341, 24657, 307, 637, 2018, 264, 1151, 13, 286, 2041, 309], "temperature": 0.0, "avg_logprob": -0.12203936943641076, "compression_ratio": 1.6642335766423357, "no_speech_prob": 1.8923894458566792e-05}, {"id": 332, "seek": 240404, "start": 2418.2799999999997, "end": 2423.6, "text": " was made pre-unicode, you know, so it had to rely only on ASCII signs. And so I don't", "tokens": [390, 1027, 659, 12, 409, 299, 1429, 11, 291, 458, 11, 370, 309, 632, 281, 10687, 787, 322, 7469, 34, 9503, 7880, 13, 400, 370, 286, 500, 380], "temperature": 0.0, "avg_logprob": -0.12203936943641076, "compression_ratio": 1.6642335766423357, "no_speech_prob": 1.8923894458566792e-05}, {"id": 333, "seek": 240404, "start": 2423.6, "end": 2428.68, "text": " think there's enough ASCII symbols. So it ends up having to reuse ASCII symbols in ways", "tokens": [519, 456, 311, 1547, 7469, 34, 9503, 16944, 13, 407, 309, 5314, 493, 1419, 281, 26225, 7469, 34, 9503, 16944, 294, 2098], "temperature": 0.0, "avg_logprob": -0.12203936943641076, "compression_ratio": 1.6642335766423357, "no_speech_prob": 1.8923894458566792e-05}, {"id": 334, "seek": 240404, "start": 2428.68, "end": 2432.88, "text": " that are entirely incompatible with each other. Yep. That's correct. So if it's not inside", "tokens": [300, 366, 7696, 40393, 267, 964, 365, 1184, 661, 13, 7010, 13, 663, 311, 3006, 13, 407, 498, 309, 311, 406, 1854], "temperature": 0.0, "avg_logprob": -0.12203936943641076, "compression_ratio": 1.6642335766423357, "no_speech_prob": 1.8923894458566792e-05}, {"id": 335, "seek": 243288, "start": 2432.88, "end": 2437.52, "text": " square brackets, it means start offline. If it is inside square brackets, it means the", "tokens": [3732, 26179, 11, 309, 1355, 722, 21857, 13, 759, 309, 307, 1854, 3732, 26179, 11, 309, 1355, 264], "temperature": 0.0, "avg_logprob": -0.2612468289657378, "compression_ratio": 1.7515527950310559, "no_speech_prob": 5.1361996156629175e-05}, {"id": 336, "seek": 243288, "start": 2437.52, "end": 2444.04, "text": " complement of the set, the opposite of the set.", "tokens": [17103, 295, 264, 992, 11, 264, 6182, 295, 264, 992, 13], "temperature": 0.0, "avg_logprob": -0.2612468289657378, "compression_ratio": 1.7515527950310559, "no_speech_prob": 5.1361996156629175e-05}, {"id": 337, "seek": 243288, "start": 2444.04, "end": 2450.04, "text": " The dot which is inside bracket don't mean any character.", "tokens": [440, 5893, 597, 307, 1854, 16904, 500, 380, 914, 604, 2517, 13], "temperature": 0.0, "avg_logprob": -0.2612468289657378, "compression_ratio": 1.7515527950310559, "no_speech_prob": 5.1361996156629175e-05}, {"id": 338, "seek": 243288, "start": 2450.04, "end": 2454.28, "text": " No special character. Yeah. That just means a dot. And I think in square brackets, except", "tokens": [883, 2121, 2517, 13, 865, 13, 663, 445, 1355, 257, 5893, 13, 400, 286, 519, 294, 3732, 26179, 11, 3993], "temperature": 0.0, "avg_logprob": -0.2612468289657378, "compression_ratio": 1.7515527950310559, "no_speech_prob": 5.1361996156629175e-05}, {"id": 339, "seek": 245428, "start": 2454.28, "end": 2464.5600000000004, "text": " for carrot is literal. Yep. So you could do this to make it extra clear. Yep.", "tokens": [337, 22767, 307, 20411, 13, 7010, 13, 407, 291, 727, 360, 341, 281, 652, 309, 2857, 1850, 13, 7010, 13], "temperature": 0.0, "avg_logprob": -0.214407594898079, "compression_ratio": 1.4438502673796791, "no_speech_prob": 8.091188647085801e-05}, {"id": 340, "seek": 245428, "start": 2464.5600000000004, "end": 2473.0800000000004, "text": " In the chat, I shared link to PyTex.org, which is nice because it has a cheat sheet. So whenever", "tokens": [682, 264, 5081, 11, 286, 5507, 2113, 281, 9953, 51, 3121, 13, 4646, 11, 597, 307, 1481, 570, 309, 575, 257, 17470, 8193, 13, 407, 5699], "temperature": 0.0, "avg_logprob": -0.214407594898079, "compression_ratio": 1.4438502673796791, "no_speech_prob": 8.091188647085801e-05}, {"id": 341, "seek": 245428, "start": 2473.0800000000004, "end": 2480.6000000000004, "text": " I'm working on a regex myself, I never remember, this is based on Rabelart that was very famous", "tokens": [286, 478, 1364, 322, 257, 319, 432, 87, 2059, 11, 286, 1128, 1604, 11, 341, 307, 2361, 322, 16781, 338, 446, 300, 390, 588, 4618], "temperature": 0.0, "avg_logprob": -0.214407594898079, "compression_ratio": 1.4438502673796791, "no_speech_prob": 8.091188647085801e-05}, {"id": 342, "seek": 248060, "start": 2480.6, "end": 2489.64, "text": " in the Ruby world. It's nice for testing your regexes. But also if you expand the cheat", "tokens": [294, 264, 19907, 1002, 13, 467, 311, 1481, 337, 4997, 428, 319, 432, 47047, 13, 583, 611, 498, 291, 5268, 264, 17470], "temperature": 0.0, "avg_logprob": -0.1515517234802246, "compression_ratio": 1.5914634146341464, "no_speech_prob": 4.6099619794404134e-05}, {"id": 343, "seek": 248060, "start": 2489.64, "end": 2496.16, "text": " sheet, which is, yeah, and then now if you put a string in your test string, it will,", "tokens": [8193, 11, 597, 307, 11, 1338, 11, 293, 550, 586, 498, 291, 829, 257, 6798, 294, 428, 1500, 6798, 11, 309, 486, 11], "temperature": 0.0, "avg_logprob": -0.1515517234802246, "compression_ratio": 1.5914634146341464, "no_speech_prob": 4.6099619794404134e-05}, {"id": 344, "seek": 248060, "start": 2496.16, "end": 2505.72, "text": " and you can put a couple of strings there, it will, you know, show you what it's doing.", "tokens": [293, 291, 393, 829, 257, 1916, 295, 13985, 456, 11, 309, 486, 11, 291, 458, 11, 855, 291, 437, 309, 311, 884, 13], "temperature": 0.0, "avg_logprob": -0.1515517234802246, "compression_ratio": 1.5914634146341464, "no_speech_prob": 4.6099619794404134e-05}, {"id": 345, "seek": 250572, "start": 2505.72, "end": 2511.12, "text": " That's how I figured out the regex. I went to one of these sites.", "tokens": [663, 311, 577, 286, 8932, 484, 264, 319, 432, 87, 13, 286, 1437, 281, 472, 295, 613, 7533, 13], "temperature": 0.0, "avg_logprob": -0.17029333922822595, "compression_ratio": 1.423841059602649, "no_speech_prob": 2.1109224690007977e-05}, {"id": 346, "seek": 250572, "start": 2511.12, "end": 2516.08, "text": " And the most crucial bit here is the regular expression cheat sheet. When you click on", "tokens": [400, 264, 881, 11462, 857, 510, 307, 264, 3890, 6114, 17470, 8193, 13, 1133, 291, 2052, 322], "temperature": 0.0, "avg_logprob": -0.17029333922822595, "compression_ratio": 1.423841059602649, "no_speech_prob": 2.1109224690007977e-05}, {"id": 347, "seek": 250572, "start": 2516.08, "end": 2521.72, "text": " it, it expands and you have all these things that you can use.", "tokens": [309, 11, 309, 33706, 293, 291, 362, 439, 613, 721, 300, 291, 393, 764, 13], "temperature": 0.0, "avg_logprob": -0.17029333922822595, "compression_ratio": 1.423841059602649, "no_speech_prob": 2.1109224690007977e-05}, {"id": 348, "seek": 252172, "start": 2521.72, "end": 2538.9199999999996, "text": " Yeah, I think regex 101 is the one I've tried before. Which I think has a bit more of an", "tokens": [865, 11, 286, 519, 319, 432, 87, 21055, 307, 264, 472, 286, 600, 3031, 949, 13, 3013, 286, 519, 575, 257, 857, 544, 295, 364], "temperature": 0.0, "avg_logprob": -0.15744663106984105, "compression_ratio": 1.0602409638554218, "no_speech_prob": 2.7532243620953523e-05}, {"id": 349, "seek": 253892, "start": 2538.92, "end": 2553.56, "text": " explanation if I remember correctly. So I like this that, so you've got the quick reference.", "tokens": [10835, 498, 286, 1604, 8944, 13, 407, 286, 411, 341, 300, 11, 370, 291, 600, 658, 264, 1702, 6408, 13], "temperature": 0.0, "avg_logprob": -0.17321297526359558, "compression_ratio": 1.658682634730539, "no_speech_prob": 6.240486527531175e-06}, {"id": 350, "seek": 253892, "start": 2553.56, "end": 2560.28, "text": " But you've also got this like explanation. Matches this character, matches the character.", "tokens": [583, 291, 600, 611, 658, 341, 411, 10835, 13, 26178, 279, 341, 2517, 11, 10676, 264, 2517, 13], "temperature": 0.0, "avg_logprob": -0.17321297526359558, "compression_ratio": 1.658682634730539, "no_speech_prob": 6.240486527531175e-06}, {"id": 351, "seek": 253892, "start": 2560.28, "end": 2565.6, "text": " So a capturing group, that's something that remembers is a capturing group. A single character", "tokens": [407, 257, 23384, 1594, 11, 300, 311, 746, 300, 26228, 307, 257, 23384, 1594, 13, 316, 2167, 2517], "temperature": 0.0, "avg_logprob": -0.17321297526359558, "compression_ratio": 1.658682634730539, "no_speech_prob": 6.240486527531175e-06}, {"id": 352, "seek": 256560, "start": 2565.6, "end": 2575.6, "text": " that is not one of these. So yeah. Yeah, so the first like, learning a notation is hard,", "tokens": [300, 307, 406, 472, 295, 613, 13, 407, 1338, 13, 865, 11, 370, 264, 700, 411, 11, 2539, 257, 24657, 307, 1152, 11], "temperature": 0.0, "avg_logprob": -0.24115453447614396, "compression_ratio": 1.5459770114942528, "no_speech_prob": 1.4061671208764892e-05}, {"id": 353, "seek": 256560, "start": 2575.6, "end": 2584.52, "text": " you know, and so like, almost any notation people don't, as a matter of course, learn", "tokens": [291, 458, 11, 293, 370, 411, 11, 1920, 604, 24657, 561, 500, 380, 11, 382, 257, 1871, 295, 1164, 11, 1466], "temperature": 0.0, "avg_logprob": -0.24115453447614396, "compression_ratio": 1.5459770114942528, "no_speech_prob": 1.4061671208764892e-05}, {"id": 354, "seek": 256560, "start": 2584.52, "end": 2595.16, "text": " at school. It generally gets categorized into the weird, complicated, annoying thing category,", "tokens": [412, 1395, 13, 467, 5101, 2170, 19250, 1602, 666, 264, 3657, 11, 6179, 11, 11304, 551, 7719, 11], "temperature": 0.0, "avg_logprob": -0.24115453447614396, "compression_ratio": 1.5459770114942528, "no_speech_prob": 1.4061671208764892e-05}, {"id": 355, "seek": 259516, "start": 2595.16, "end": 2604.68, "text": " you know. But there's nothing like, more or less weird or annoying about regex than basic", "tokens": [291, 458, 13, 583, 456, 311, 1825, 411, 11, 544, 420, 1570, 3657, 420, 11304, 466, 319, 432, 87, 813, 3875], "temperature": 0.0, "avg_logprob": -0.19620990753173828, "compression_ratio": 1.5906976744186045, "no_speech_prob": 4.331383024691604e-05}, {"id": 356, "seek": 259516, "start": 2604.68, "end": 2610.2, "text": " arithmetic notation. It just isn't something we learn at school, you know. And it's, yeah,", "tokens": [42973, 24657, 13, 467, 445, 1943, 380, 746, 321, 1466, 412, 1395, 11, 291, 458, 13, 400, 309, 311, 11, 1338, 11], "temperature": 0.0, "avg_logprob": -0.19620990753173828, "compression_ratio": 1.5906976744186045, "no_speech_prob": 4.331383024691604e-05}, {"id": 357, "seek": 259516, "start": 2610.2, "end": 2617.2, "text": " you know, arithmetic takes us some years to learn. Regex, has anybody learnt regex recently?", "tokens": [291, 458, 11, 42973, 2516, 505, 512, 924, 281, 1466, 13, 1300, 432, 87, 11, 575, 4472, 18991, 319, 432, 87, 3938, 30], "temperature": 0.0, "avg_logprob": -0.19620990753173828, "compression_ratio": 1.5906976744186045, "no_speech_prob": 4.331383024691604e-05}, {"id": 358, "seek": 259516, "start": 2617.2, "end": 2621.56, "text": " Got a sense of how long it takes to learn? Like days, months, weeks?", "tokens": [5803, 257, 2020, 295, 577, 938, 309, 2516, 281, 1466, 30, 1743, 1708, 11, 2493, 11, 3259, 30], "temperature": 0.0, "avg_logprob": -0.19620990753173828, "compression_ratio": 1.5906976744186045, "no_speech_prob": 4.331383024691604e-05}, {"id": 359, "seek": 262156, "start": 2621.56, "end": 2625.6, "text": " First time I started using it, I think it was actually last year's FASCI course, where", "tokens": [2386, 565, 286, 1409, 1228, 309, 11, 286, 519, 309, 390, 767, 1036, 1064, 311, 479, 3160, 25240, 1164, 11, 689], "temperature": 0.0, "avg_logprob": -0.19915789988503527, "compression_ratio": 1.717607973421927, "no_speech_prob": 2.796336411847733e-05}, {"id": 360, "seek": 262156, "start": 2625.6, "end": 2630.2, "text": " you introduced it. And yeah, I always saw it before and I thought it was kind of like,", "tokens": [291, 7268, 309, 13, 400, 1338, 11, 286, 1009, 1866, 309, 949, 293, 286, 1194, 309, 390, 733, 295, 411, 11], "temperature": 0.0, "avg_logprob": -0.19915789988503527, "compression_ratio": 1.717607973421927, "no_speech_prob": 2.796336411847733e-05}, {"id": 361, "seek": 262156, "start": 2630.2, "end": 2634.6, "text": " you know, these weird, magical symbols that I'd never understand. And then basically,", "tokens": [291, 458, 11, 613, 3657, 11, 12066, 16944, 300, 286, 1116, 1128, 1223, 13, 400, 550, 1936, 11], "temperature": 0.0, "avg_logprob": -0.19915789988503527, "compression_ratio": 1.717607973421927, "no_speech_prob": 2.796336411847733e-05}, {"id": 362, "seek": 262156, "start": 2634.6, "end": 2640.32, "text": " I like got a basic understanding of it. Really useful tool. And then basically, every few", "tokens": [286, 411, 658, 257, 3875, 3701, 295, 309, 13, 4083, 4420, 2290, 13, 400, 550, 1936, 11, 633, 1326], "temperature": 0.0, "avg_logprob": -0.19915789988503527, "compression_ratio": 1.717607973421927, "no_speech_prob": 2.796336411847733e-05}, {"id": 363, "seek": 262156, "start": 2640.32, "end": 2644.6, "text": " months when I have to come back and use it for something, I just use one of those like,", "tokens": [2493, 562, 286, 362, 281, 808, 646, 293, 764, 309, 337, 746, 11, 286, 445, 764, 472, 295, 729, 411, 11], "temperature": 0.0, "avg_logprob": -0.19915789988503527, "compression_ratio": 1.717607973421927, "no_speech_prob": 2.796336411847733e-05}, {"id": 364, "seek": 262156, "start": 2644.6, "end": 2649.12, "text": " online regex tools to kind of like give myself a jumpstart to get back into it.", "tokens": [2950, 319, 432, 87, 3873, 281, 733, 295, 411, 976, 2059, 257, 3012, 24419, 281, 483, 646, 666, 309, 13], "temperature": 0.0, "avg_logprob": -0.19915789988503527, "compression_ratio": 1.717607973421927, "no_speech_prob": 2.796336411847733e-05}, {"id": 365, "seek": 264912, "start": 2649.12, "end": 2656.3599999999997, "text": " I mean, it comes up so much. It's like, I would say it's notation worth mastering, you", "tokens": [286, 914, 11, 309, 1487, 493, 370, 709, 13, 467, 311, 411, 11, 286, 576, 584, 309, 311, 24657, 3163, 49382, 11, 291], "temperature": 0.0, "avg_logprob": -0.1525468501177701, "compression_ratio": 1.547085201793722, "no_speech_prob": 8.396496014029253e-06}, {"id": 366, "seek": 264912, "start": 2656.3599999999997, "end": 2662.6, "text": " know, which I wouldn't say about that many things. And mastery requires probably some", "tokens": [458, 11, 597, 286, 2759, 380, 584, 466, 300, 867, 721, 13, 400, 37951, 7029, 1391, 512], "temperature": 0.0, "avg_logprob": -0.1525468501177701, "compression_ratio": 1.547085201793722, "no_speech_prob": 8.396496014029253e-06}, {"id": 367, "seek": 264912, "start": 2662.6, "end": 2669.24, "text": " fairly intentional practice over a period of time. Yeah. But yeah, certainly the kind", "tokens": [6457, 21935, 3124, 670, 257, 2896, 295, 565, 13, 865, 13, 583, 1338, 11, 3297, 264, 733], "temperature": 0.0, "avg_logprob": -0.1525468501177701, "compression_ratio": 1.547085201793722, "no_speech_prob": 8.396496014029253e-06}, {"id": 368, "seek": 264912, "start": 2669.24, "end": 2675.52, "text": " of like, use it from time to time and learn a little bit more each time also works. So", "tokens": [295, 411, 11, 764, 309, 490, 565, 281, 565, 293, 1466, 257, 707, 857, 544, 1184, 565, 611, 1985, 13, 407], "temperature": 0.0, "avg_logprob": -0.1525468501177701, "compression_ratio": 1.547085201793722, "no_speech_prob": 8.396496014029253e-06}, {"id": 369, "seek": 267552, "start": 2675.52, "end": 2680.52, "text": " I got to show you something which I would guess most Python programmers don't know,", "tokens": [286, 658, 281, 855, 291, 746, 597, 286, 576, 2041, 881, 15329, 41504, 500, 380, 458, 11], "temperature": 0.0, "avg_logprob": -0.1660279287418849, "compression_ratio": 1.5195530726256983, "no_speech_prob": 1.3005981600144878e-05}, {"id": 370, "seek": 267552, "start": 2680.52, "end": 2686.72, "text": " but which is amazing, which is that this thing here, the thing we're replacing it with, star,", "tokens": [457, 597, 307, 2243, 11, 597, 307, 300, 341, 551, 510, 11, 264, 551, 321, 434, 19139, 309, 365, 11, 3543, 11], "temperature": 0.0, "avg_logprob": -0.1660279287418849, "compression_ratio": 1.5195530726256983, "no_speech_prob": 1.3005981600144878e-05}, {"id": 371, "seek": 267552, "start": 2686.72, "end": 2705.16, "text": " doesn't have to be a string. It can be a function. So here's a function that returns star. And", "tokens": [1177, 380, 362, 281, 312, 257, 6798, 13, 467, 393, 312, 257, 2445, 13, 407, 510, 311, 257, 2445, 300, 11247, 3543, 13, 400], "temperature": 0.0, "avg_logprob": -0.1660279287418849, "compression_ratio": 1.5195530726256983, "no_speech_prob": 1.3005981600144878e-05}, {"id": 372, "seek": 270516, "start": 2705.16, "end": 2711.72, "text": " that does the same thing. Right. Or return, we're going to get past the thing that's being", "tokens": [300, 775, 264, 912, 551, 13, 1779, 13, 1610, 2736, 11, 321, 434, 516, 281, 483, 1791, 264, 551, 300, 311, 885], "temperature": 0.0, "avg_logprob": -0.24815364837646484, "compression_ratio": 1.3384615384615384, "no_speech_prob": 2.3551352569484152e-05}, {"id": 373, "seek": 270516, "start": 2711.72, "end": 2721.12, "text": " replaced. So, you know, just, I mean, one thing we could just do is just print that", "tokens": [10772, 13, 407, 11, 291, 458, 11, 445, 11, 286, 914, 11, 472, 551, 321, 727, 445, 360, 307, 445, 4482, 300], "temperature": 0.0, "avg_logprob": -0.24815364837646484, "compression_ratio": 1.3384615384615384, "no_speech_prob": 2.3551352569484152e-05}, {"id": 374, "seek": 272112, "start": 2721.12, "end": 2740.52, "text": " out. Okay. So we're getting past an re.match object. And so you could better handle this.", "tokens": [484, 13, 1033, 13, 407, 321, 434, 1242, 1791, 364, 319, 13, 76, 852, 2657, 13, 400, 370, 291, 727, 1101, 4813, 341, 13], "temperature": 0.0, "avg_logprob": -0.33399759336959484, "compression_ratio": 1.2476190476190476, "no_speech_prob": 2.468101774866227e-05}, {"id": 375, "seek": 272112, "start": 2740.52, "end": 2745.3599999999997, "text": " So an re.match object, we can also get...", "tokens": [407, 364, 319, 13, 76, 852, 2657, 11, 321, 393, 611, 483, 485], "temperature": 0.0, "avg_logprob": -0.33399759336959484, "compression_ratio": 1.2476190476190476, "no_speech_prob": 2.468101774866227e-05}, {"id": 376, "seek": 274536, "start": 2745.36, "end": 2760.76, "text": " Can you guys hear me? I can't hear anyone. So it must be me. Oh, sorry. My computer did", "tokens": [1664, 291, 1074, 1568, 385, 30, 286, 393, 380, 1568, 2878, 13, 407, 309, 1633, 312, 385, 13, 876, 11, 2597, 13, 1222, 3820, 630], "temperature": 0.0, "avg_logprob": -0.26712723167575136, "compression_ratio": 1.2403100775193798, "no_speech_prob": 0.00012927441275678575}, {"id": 377, "seek": 274536, "start": 2760.76, "end": 2767.6400000000003, "text": " something on its own. It's a bit weird with the audio. Sorry about that.", "tokens": [746, 322, 1080, 1065, 13, 467, 311, 257, 857, 3657, 365, 264, 6278, 13, 4919, 466, 300, 13], "temperature": 0.0, "avg_logprob": -0.26712723167575136, "compression_ratio": 1.2403100775193798, "no_speech_prob": 0.00012927441275678575}, {"id": 378, "seek": 276764, "start": 2767.64, "end": 2779.8799999999997, "text": " Okay. So I think to play with a match object, we should probably try and create one. Which", "tokens": [1033, 13, 407, 286, 519, 281, 862, 365, 257, 2995, 2657, 11, 321, 820, 1391, 853, 293, 1884, 472, 13, 3013], "temperature": 0.0, "avg_logprob": -0.1578185374920185, "compression_ratio": 1.3740458015267176, "no_speech_prob": 2.443890252834535e-06}, {"id": 379, "seek": 276764, "start": 2779.8799999999997, "end": 2796.52, "text": " I think if we go re.search, we'll get a match object. So let's search for that pattern in", "tokens": [286, 519, 498, 321, 352, 319, 13, 405, 1178, 11, 321, 603, 483, 257, 2995, 2657, 13, 407, 718, 311, 3164, 337, 300, 5102, 294], "temperature": 0.0, "avg_logprob": -0.1578185374920185, "compression_ratio": 1.3740458015267176, "no_speech_prob": 2.443890252834535e-06}, {"id": 380, "seek": 279652, "start": 2796.52, "end": 2805.12, "text": " that string. There we go. So there's a match object. So hitting dot and pressing tab isn't", "tokens": [300, 6798, 13, 821, 321, 352, 13, 407, 456, 311, 257, 2995, 2657, 13, 407, 8850, 5893, 293, 12417, 4421, 1943, 380], "temperature": 0.0, "avg_logprob": -0.23157997131347657, "compression_ratio": 1.3203125, "no_speech_prob": 4.222722509439336e-06}, {"id": 381, "seek": 279652, "start": 2805.12, "end": 2819.56, "text": " a bad idea, just to see what kind of stuff we can do. That looks nice. Groups.", "tokens": [257, 1578, 1558, 11, 445, 281, 536, 437, 733, 295, 1507, 321, 393, 360, 13, 663, 1542, 1481, 13, 10500, 82, 13], "temperature": 0.0, "avg_logprob": -0.23157997131347657, "compression_ratio": 1.3203125, "no_speech_prob": 4.222722509439336e-06}, {"id": 382, "seek": 281956, "start": 2819.56, "end": 2831.12, "text": " It doesn't seem to do anything. Ah, it's a default. Got it.", "tokens": [467, 1177, 380, 1643, 281, 360, 1340, 13, 2438, 11, 309, 311, 257, 7576, 13, 5803, 309, 13], "temperature": 0.0, "avg_logprob": -0.19895644266097273, "compression_ratio": 1.4303797468354431, "no_speech_prob": 1.3006057088205125e-05}, {"id": 383, "seek": 281956, "start": 2831.12, "end": 2834.98, "text": " This is confusing with groups because group zero is everything, right?", "tokens": [639, 307, 13181, 365, 3935, 570, 1594, 4018, 307, 1203, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.19895644266097273, "compression_ratio": 1.4303797468354431, "no_speech_prob": 1.3006057088205125e-05}, {"id": 384, "seek": 281956, "start": 2834.98, "end": 2842.84, "text": " So there's groups and group. So group is something where you give an index or name. And so zero", "tokens": [407, 456, 311, 3935, 293, 1594, 13, 407, 1594, 307, 746, 689, 291, 976, 364, 8186, 420, 1315, 13, 400, 370, 4018], "temperature": 0.0, "avg_logprob": -0.19895644266097273, "compression_ratio": 1.4303797468354431, "no_speech_prob": 1.3006057088205125e-05}, {"id": 385, "seek": 284284, "start": 2842.84, "end": 2849.6400000000003, "text": " gives you everything that was matched and one gives you the first thing that was captured.", "tokens": [2709, 291, 1203, 300, 390, 21447, 293, 472, 2709, 291, 264, 700, 551, 300, 390, 11828, 13], "temperature": 0.0, "avg_logprob": -0.2512584976528002, "compression_ratio": 1.3888888888888888, "no_speech_prob": 8.139480087265838e-06}, {"id": 386, "seek": 284284, "start": 2849.6400000000003, "end": 2870.6400000000003, "text": " So that's actually what we want, right? So if we here did return star x.group1 star.", "tokens": [407, 300, 311, 767, 437, 321, 528, 11, 558, 30, 407, 498, 321, 510, 630, 2736, 3543, 2031, 13, 17377, 16, 3543, 13], "temperature": 0.0, "avg_logprob": -0.2512584976528002, "compression_ratio": 1.3888888888888888, "no_speech_prob": 8.139480087265838e-06}, {"id": 387, "seek": 287064, "start": 2870.64, "end": 2880.7599999999998, "text": " Okay. You see what's happened there? So again, I'm doing a lot of exploring and exploring", "tokens": [1033, 13, 509, 536, 437, 311, 2011, 456, 30, 407, 797, 11, 286, 478, 884, 257, 688, 295, 12736, 293, 12736], "temperature": 0.0, "avg_logprob": -0.18712177276611328, "compression_ratio": 1.3043478260869565, "no_speech_prob": 3.4464799227862386e-06}, {"id": 388, "seek": 287064, "start": 2880.7599999999998, "end": 2895.4, "text": " as I go. And so I find using this approach, if I'm working with my code, I basically never", "tokens": [382, 286, 352, 13, 400, 370, 286, 915, 1228, 341, 3109, 11, 498, 286, 478, 1364, 365, 452, 3089, 11, 286, 1936, 1128], "temperature": 0.0, "avg_logprob": -0.18712177276611328, "compression_ratio": 1.3043478260869565, "no_speech_prob": 3.4464799227862386e-06}, {"id": 389, "seek": 289540, "start": 2895.4, "end": 2903.36, "text": " get stuck because every step I'm doing is so small and it's from a known place, you", "tokens": [483, 5541, 570, 633, 1823, 286, 478, 884, 307, 370, 1359, 293, 309, 311, 490, 257, 2570, 1081, 11, 291], "temperature": 0.0, "avg_logprob": -0.17394680590242953, "compression_ratio": 1.5679012345679013, "no_speech_prob": 1.0289008059771731e-05}, {"id": 390, "seek": 289540, "start": 2903.36, "end": 2909.0, "text": " know. And it's a small increment. And I'm kind of keeping most of the steps along the", "tokens": [458, 13, 400, 309, 311, 257, 1359, 26200, 13, 400, 286, 478, 733, 295, 5145, 881, 295, 264, 4439, 2051, 264], "temperature": 0.0, "avg_logprob": -0.17394680590242953, "compression_ratio": 1.5679012345679013, "no_speech_prob": 1.0289008059771731e-05}, {"id": 391, "seek": 289540, "start": 2909.0, "end": 2918.56, "text": " way. So it's really, yeah, it's very hard to ever get lost or stuck. So yeah, so now", "tokens": [636, 13, 407, 309, 311, 534, 11, 1338, 11, 309, 311, 588, 1152, 281, 1562, 483, 2731, 420, 5541, 13, 407, 1338, 11, 370, 586], "temperature": 0.0, "avg_logprob": -0.17394680590242953, "compression_ratio": 1.5679012345679013, "no_speech_prob": 1.0289008059771731e-05}, {"id": 392, "seek": 291856, "start": 2918.56, "end": 2938.36, "text": " all we have to do is look up the thing in found, right? So found. There we go. Okay,", "tokens": [439, 321, 362, 281, 360, 307, 574, 493, 264, 551, 294, 1352, 11, 558, 30, 407, 1352, 13, 821, 321, 352, 13, 1033, 11], "temperature": 0.0, "avg_logprob": -0.15476221697671072, "compression_ratio": 1.024390243902439, "no_speech_prob": 7.2962820922839455e-06}, {"id": 393, "seek": 293836, "start": 2938.36, "end": 2957.48, "text": " so now we've got to put it in the right format. So actually, yeah, we basically, yeah, this", "tokens": [370, 586, 321, 600, 658, 281, 829, 309, 294, 264, 558, 7877, 13, 407, 767, 11, 1338, 11, 321, 1936, 11, 1338, 11, 341], "temperature": 0.0, "avg_logprob": -0.17584349427904403, "compression_ratio": 1.1097560975609757, "no_speech_prob": 2.295880221936386e-06}, {"id": 394, "seek": 295748, "start": 2957.48, "end": 2972.48, "text": " is interesting. We actually want to keep this bit, right, if it exists. So what we can do,", "tokens": [307, 1880, 13, 492, 767, 528, 281, 1066, 341, 857, 11, 558, 11, 498, 309, 8198, 13, 407, 437, 321, 393, 360, 11], "temperature": 0.0, "avg_logprob": -0.20095359802246093, "compression_ratio": 1.504201680672269, "no_speech_prob": 4.6378199840546586e-06}, {"id": 395, "seek": 295748, "start": 2972.48, "end": 2984.88, "text": " yes, we want to keep that bit if it exists. So this thing here where we're searching for", "tokens": [2086, 11, 321, 528, 281, 1066, 300, 857, 498, 309, 8198, 13, 407, 341, 551, 510, 689, 321, 434, 10808, 337], "temperature": 0.0, "avg_logprob": -0.20095359802246093, "compression_ratio": 1.504201680672269, "no_speech_prob": 4.6378199840546586e-06}, {"id": 396, "seek": 298488, "start": 2984.88, "end": 2990.6, "text": " anything that's not a square bracket isn't quite what we want. I think we actually need", "tokens": [1340, 300, 311, 406, 257, 3732, 16904, 1943, 380, 1596, 437, 321, 528, 13, 286, 519, 321, 767, 643], "temperature": 0.0, "avg_logprob": -0.13863704453653364, "compression_ratio": 1.572289156626506, "no_speech_prob": 3.6119033666182077e-06}, {"id": 397, "seek": 298488, "start": 2990.6, "end": 2998.2000000000003, "text": " to specifically find the extension, right? So we're looking for a full stop and then", "tokens": [281, 4682, 915, 264, 10320, 11, 558, 30, 407, 321, 434, 1237, 337, 257, 1577, 1590, 293, 550], "temperature": 0.0, "avg_logprob": -0.13863704453653364, "compression_ratio": 1.572289156626506, "no_speech_prob": 3.6119033666182077e-06}, {"id": 398, "seek": 298488, "start": 2998.2000000000003, "end": 3009.6400000000003, "text": " an extension. Okay, so an extension is a bunch of letters, right, is a bunch of letters.", "tokens": [364, 10320, 13, 1033, 11, 370, 364, 10320, 307, 257, 3840, 295, 7825, 11, 558, 11, 307, 257, 3840, 295, 7825, 13], "temperature": 0.0, "avg_logprob": -0.13863704453653364, "compression_ratio": 1.572289156626506, "no_speech_prob": 3.6119033666182077e-06}, {"id": 399, "seek": 300964, "start": 3009.64, "end": 3015.56, "text": " So backslash W plus. Strictly speaking, it should be three or four letters most of the", "tokens": [407, 646, 10418, 1299, 343, 1804, 13, 745, 3740, 356, 4124, 11, 309, 820, 312, 1045, 420, 1451, 7825, 881, 295, 264], "temperature": 0.0, "avg_logprob": -0.13495270279813404, "compression_ratio": 1.829875518672199, "no_speech_prob": 7.76681463321438e-06}, {"id": 400, "seek": 300964, "start": 3015.56, "end": 3020.12, "text": " time, but that's okay. We'll just say backslash W plus. And then next after that, there's", "tokens": [565, 11, 457, 300, 311, 1392, 13, 492, 603, 445, 584, 646, 10418, 1299, 343, 1804, 13, 400, 550, 958, 934, 300, 11, 456, 311], "temperature": 0.0, "avg_logprob": -0.13495270279813404, "compression_ratio": 1.829875518672199, "no_speech_prob": 7.76681463321438e-06}, {"id": 401, "seek": 300964, "start": 3020.12, "end": 3024.8399999999997, "text": " either going to be a closed square bracket, or there's going to be pipe followed by a", "tokens": [2139, 516, 281, 312, 257, 5395, 3732, 16904, 11, 420, 456, 311, 516, 281, 312, 11240, 6263, 538, 257], "temperature": 0.0, "avg_logprob": -0.13495270279813404, "compression_ratio": 1.829875518672199, "no_speech_prob": 7.76681463321438e-06}, {"id": 402, "seek": 300964, "start": 3024.8399999999997, "end": 3030.2, "text": " bunch of digits. So in other words, there's going to be optionally pipe followed by a", "tokens": [3840, 295, 27011, 13, 407, 294, 661, 2283, 11, 456, 311, 516, 281, 312, 3614, 379, 11240, 6263, 538, 257], "temperature": 0.0, "avg_logprob": -0.13495270279813404, "compression_ratio": 1.829875518672199, "no_speech_prob": 7.76681463321438e-06}, {"id": 403, "seek": 300964, "start": 3030.2, "end": 3037.44, "text": " bunch of digits. And I want to keep that because we want to put it in there if it exists. So", "tokens": [3840, 295, 27011, 13, 400, 286, 528, 281, 1066, 300, 570, 321, 528, 281, 829, 309, 294, 456, 498, 309, 8198, 13, 407], "temperature": 0.0, "avg_logprob": -0.13495270279813404, "compression_ratio": 1.829875518672199, "no_speech_prob": 7.76681463321438e-06}, {"id": 404, "seek": 303744, "start": 3037.44, "end": 3046.2000000000003, "text": " we're going to look for pipe followed by a bunch of digits, backslash D is a digit. Okay,", "tokens": [321, 434, 516, 281, 574, 337, 11240, 6263, 538, 257, 3840, 295, 27011, 11, 646, 10418, 1299, 413, 307, 257, 14293, 13, 1033, 11], "temperature": 0.0, "avg_logprob": -0.13687265241468274, "compression_ratio": 1.5202312138728324, "no_speech_prob": 1.5056947404445964e-06}, {"id": 405, "seek": 303744, "start": 3046.2000000000003, "end": 3050.68, "text": " so we're going to look for all this right. Now to say that that is optional, you use", "tokens": [370, 321, 434, 516, 281, 574, 337, 439, 341, 558, 13, 823, 281, 584, 300, 300, 307, 17312, 11, 291, 764], "temperature": 0.0, "avg_logprob": -0.13687265241468274, "compression_ratio": 1.5202312138728324, "no_speech_prob": 1.5056947404445964e-06}, {"id": 406, "seek": 303744, "start": 3050.68, "end": 3061.16, "text": " question mark. And so I'm just going to change this to zero just so we can print out the", "tokens": [1168, 1491, 13, 400, 370, 286, 478, 445, 516, 281, 1319, 341, 281, 4018, 445, 370, 321, 393, 4482, 484, 264], "temperature": 0.0, "avg_logprob": -0.13687265241468274, "compression_ratio": 1.5202312138728324, "no_speech_prob": 1.5056947404445964e-06}, {"id": 407, "seek": 306116, "start": 3061.16, "end": 3075.16, "text": " whole thing to make sure it's working. Oh, and we don't want to do that anymore. Let's", "tokens": [1379, 551, 281, 652, 988, 309, 311, 1364, 13, 876, 11, 293, 321, 500, 380, 528, 281, 360, 300, 3602, 13, 961, 311], "temperature": 0.0, "avg_logprob": -0.19395355008683116, "compression_ratio": 1.3059701492537314, "no_speech_prob": 2.4439832486677915e-06}, {"id": 408, "seek": 306116, "start": 3075.16, "end": 3082.7999999999997, "text": " see. Okay, so it seems to have worked, right? And in fact, what we could even do is just", "tokens": [536, 13, 1033, 11, 370, 309, 2544, 281, 362, 2732, 11, 558, 30, 400, 294, 1186, 11, 437, 321, 727, 754, 360, 307, 445], "temperature": 0.0, "avg_logprob": -0.19395355008683116, "compression_ratio": 1.3059701492537314, "no_speech_prob": 2.4439832486677915e-06}, {"id": 409, "seek": 308280, "start": 3082.8, "end": 3091.48, "text": " say, print out the groups. And that way we'll see, okay, it's got fixed test error, pipe", "tokens": [584, 11, 4482, 484, 264, 3935, 13, 400, 300, 636, 321, 603, 536, 11, 1392, 11, 309, 311, 658, 6806, 1500, 6713, 11, 11240], "temperature": 0.0, "avg_logprob": -0.18792924128080668, "compression_ratio": 1.5056818181818181, "no_speech_prob": 9.721517244543065e-07}, {"id": 410, "seek": 308280, "start": 3091.48, "end": 3096.88, "text": " 900, and fixed issues, none. So you see how the optional thing is coming through as none", "tokens": [22016, 11, 293, 6806, 2663, 11, 6022, 13, 407, 291, 536, 577, 264, 17312, 551, 307, 1348, 807, 382, 6022], "temperature": 0.0, "avg_logprob": -0.18792924128080668, "compression_ratio": 1.5056818181818181, "no_speech_prob": 9.721517244543065e-07}, {"id": 411, "seek": 308280, "start": 3096.88, "end": 3104.96, "text": " here, right? So what we want to do is then look up group one, right, which is this. And", "tokens": [510, 11, 558, 30, 407, 437, 321, 528, 281, 360, 307, 550, 574, 493, 1594, 472, 11, 558, 11, 597, 307, 341, 13, 400], "temperature": 0.0, "avg_logprob": -0.18792924128080668, "compression_ratio": 1.5056818181818181, "no_speech_prob": 9.721517244543065e-07}, {"id": 412, "seek": 310496, "start": 3104.96, "end": 3115.08, "text": " then if it exists, we then want to put in the pipe 900. Okay, so which is x.group2.", "tokens": [550, 498, 309, 8198, 11, 321, 550, 528, 281, 829, 294, 264, 11240, 22016, 13, 1033, 11, 370, 597, 307, 2031, 13, 17377, 17, 13], "temperature": 0.0, "avg_logprob": -0.2755072363491716, "compression_ratio": 1.0375, "no_speech_prob": 5.255325959296897e-06}, {"id": 413, "seek": 311508, "start": 3115.08, "end": 3134.96, "text": " Oops, see those are not inside square brackets. Found x.group1. Oh, and that's the end of", "tokens": [21726, 11, 536, 729, 366, 406, 1854, 3732, 26179, 13, 8207, 2031, 13, 17377, 16, 13, 876, 11, 293, 300, 311, 264, 917, 295], "temperature": 0.0, "avg_logprob": -0.3705067293984549, "compression_ratio": 1.0470588235294118, "no_speech_prob": 6.3391112234967295e-06}, {"id": 414, "seek": 313496, "start": 3134.96, "end": 3146.08, "text": " curly brackets there and start curly brackets there. There we go. Upload blah blah blah", "tokens": [32066, 26179, 456, 293, 722, 32066, 26179, 456, 13, 821, 321, 352, 13, 624, 21132, 345, 12288, 12288, 12288], "temperature": 0.0, "avg_logprob": -0.19511527600495712, "compression_ratio": 1.4098360655737705, "no_speech_prob": 6.786716539863846e-07}, {"id": 415, "seek": 313496, "start": 3146.08, "end": 3156.88, "text": ".png 900. Cool. And so then this string is going to start with exactly the same thing", "tokens": [2411, 79, 872, 22016, 13, 8561, 13, 400, 370, 550, 341, 6798, 307, 516, 281, 722, 365, 2293, 264, 912, 551], "temperature": 0.0, "avg_logprob": -0.19511527600495712, "compression_ratio": 1.4098360655737705, "no_speech_prob": 6.786716539863846e-07}, {"id": 416, "seek": 315688, "start": 3156.88, "end": 3180.88, "text": " we had before, which is that. And it's going to end with two square brackets. Okay. So", "tokens": [321, 632, 949, 11, 597, 307, 300, 13, 400, 309, 311, 516, 281, 917, 365, 732, 3732, 26179, 13, 1033, 13, 407], "temperature": 0.0, "avg_logprob": -0.12671767748319185, "compression_ratio": 1.0238095238095237, "no_speech_prob": 4.936942332278704e-06}, {"id": 417, "seek": 318088, "start": 3180.88, "end": 3198.48, "text": " we get rid of our stars. How does that look? We have extra none at the end, which we should", "tokens": [321, 483, 3973, 295, 527, 6105, 13, 1012, 775, 300, 574, 30, 492, 362, 2857, 6022, 412, 264, 917, 11, 597, 321, 820], "temperature": 0.0, "avg_logprob": -0.21462652418348524, "compression_ratio": 1.0963855421686748, "no_speech_prob": 4.794642882188782e-05}, {"id": 418, "seek": 319848, "start": 3198.48, "end": 3221.2, "text": " have. Okay, we do. Slightly annoying. So or is a Boolean operator, which returns the thing", "tokens": [362, 13, 1033, 11, 321, 360, 13, 318, 44872, 11304, 13, 407, 420, 307, 257, 23351, 28499, 12973, 11, 597, 11247, 264, 551], "temperature": 0.0, "avg_logprob": -0.23294586181640625, "compression_ratio": 1.3909774436090225, "no_speech_prob": 8.529928891221061e-06}, {"id": 419, "seek": 319848, "start": 3221.2, "end": 3226.84, "text": " on the left if it's true and the thing on the right otherwise. And so because none stringifies", "tokens": [322, 264, 1411, 498, 309, 311, 2074, 293, 264, 551, 322, 264, 558, 5911, 13, 400, 370, 570, 6022, 6798, 11221], "temperature": 0.0, "avg_logprob": -0.23294586181640625, "compression_ratio": 1.3909774436090225, "no_speech_prob": 8.529928891221061e-06}, {"id": 420, "seek": 322684, "start": 3226.84, "end": 3235.32, "text": " as the string none, but it also is also considered falsy. So this will turn none into an empty", "tokens": [382, 264, 6798, 6022, 11, 457, 309, 611, 307, 611, 4888, 16720, 88, 13, 407, 341, 486, 1261, 6022, 666, 364, 6707], "temperature": 0.0, "avg_logprob": -0.21137250436318888, "compression_ratio": 1.5284090909090908, "no_speech_prob": 1.221874754264718e-05}, {"id": 421, "seek": 322684, "start": 3235.32, "end": 3249.2400000000002, "text": " string. Okay, well, let's try that on the whole thing. So one easy way to, you know,", "tokens": [6798, 13, 1033, 11, 731, 11, 718, 311, 853, 300, 322, 264, 1379, 551, 13, 407, 472, 1858, 636, 281, 11, 291, 458, 11], "temperature": 0.0, "avg_logprob": -0.21137250436318888, "compression_ratio": 1.5284090909090908, "no_speech_prob": 1.221874754264718e-05}, {"id": 422, "seek": 322684, "start": 3249.2400000000002, "end": 3253.88, "text": " when you're doing something on a subset, change it to the whole set is you just go delete", "tokens": [562, 291, 434, 884, 746, 322, 257, 25993, 11, 1319, 309, 281, 264, 1379, 992, 307, 291, 445, 352, 12097], "temperature": 0.0, "avg_logprob": -0.21137250436318888, "compression_ratio": 1.5284090909090908, "no_speech_prob": 1.221874754264718e-05}, {"id": 423, "seek": 325388, "start": 3253.88, "end": 3264.6400000000003, "text": " like so. All right. So we've got a key error, which is understandable. So we're missing", "tokens": [411, 370, 13, 1057, 558, 13, 407, 321, 600, 658, 257, 2141, 6713, 11, 597, 307, 25648, 13, 407, 321, 434, 5361], "temperature": 0.0, "avg_logprob": -0.11419081370035808, "compression_ratio": 1.5294117647058822, "no_speech_prob": 2.0261331883375533e-06}, {"id": 424, "seek": 325388, "start": 3264.6400000000003, "end": 3270.92, "text": " good mix. So let's see if that's actually missing or not. So let's have a look in the", "tokens": [665, 2890, 13, 407, 718, 311, 536, 498, 300, 311, 767, 5361, 420, 406, 13, 407, 718, 311, 362, 257, 574, 294, 264], "temperature": 0.0, "avg_logprob": -0.11419081370035808, "compression_ratio": 1.5294117647058822, "no_speech_prob": 2.0261331883375533e-06}, {"id": 425, "seek": 325388, "start": 3270.92, "end": 3278.84, "text": " source and search for good. Okay, there is not good mix. So what I'd be inclined to do", "tokens": [4009, 293, 3164, 337, 665, 13, 1033, 11, 456, 307, 406, 665, 2890, 13, 407, 437, 286, 1116, 312, 28173, 281, 360], "temperature": 0.0, "avg_logprob": -0.11419081370035808, "compression_ratio": 1.5294117647058822, "no_speech_prob": 2.0261331883375533e-06}, {"id": 426, "seek": 327884, "start": 3278.84, "end": 3292.08, "text": " then is change square brackets to.get because.get lets us provide a default. So let's use", "tokens": [550, 307, 1319, 3732, 26179, 281, 2411, 847, 570, 2411, 847, 6653, 505, 2893, 257, 7576, 13, 407, 718, 311, 764], "temperature": 0.0, "avg_logprob": -0.12667036056518555, "compression_ratio": 1.1265822784810127, "no_speech_prob": 4.0294366954185534e-06}, {"id": 427, "seek": 329208, "start": 3292.08, "end": 3322.0, "text": " that as a default. All right. Looks hopeful. Or you know what actually would be nicer?", "tokens": [300, 382, 257, 7576, 13, 1057, 558, 13, 10027, 20531, 13, 1610, 291, 458, 437, 767, 576, 312, 22842, 30], "temperature": 0.0, "avg_logprob": -0.25067750612894696, "compression_ratio": 1.0238095238095237, "no_speech_prob": 6.339095762086799e-06}, {"id": 428, "seek": 332200, "start": 3322.0, "end": 3329.4, "text": " I think this is going to end up kind of having like a just a broken image symbol. I think", "tokens": [286, 519, 341, 307, 516, 281, 917, 493, 733, 295, 1419, 411, 257, 445, 257, 5463, 3256, 5986, 13, 286, 519], "temperature": 0.0, "avg_logprob": -0.1532781219482422, "compression_ratio": 1.1125, "no_speech_prob": 7.295701834664214e-06}, {"id": 429, "seek": 332940, "start": 3329.4, "end": 3355.36, "text": " instead what I'd rather do is grab all this", "tokens": [2602, 437, 286, 1116, 2831, 360, 307, 4444, 439, 341], "temperature": 0.0, "avg_logprob": -0.07592099905014038, "compression_ratio": 0.8431372549019608, "no_speech_prob": 4.53929569630418e-05}, {"id": 430, "seek": 335536, "start": 3355.36, "end": 3379.92, "text": " and see if we found it and do that. Otherwise, return. That way we'll actually be able to", "tokens": [293, 536, 498, 321, 1352, 309, 293, 360, 300, 13, 10328, 11, 2736, 13, 663, 636, 321, 603, 767, 312, 1075, 281], "temperature": 0.0, "avg_logprob": -0.3180423149695763, "compression_ratio": 1.0853658536585367, "no_speech_prob": 3.8825732190161943e-05}, {"id": 431, "seek": 337992, "start": 3379.92, "end": 3388.28, "text": " see it.", "tokens": [536, 309, 13], "temperature": 0.0, "avg_logprob": -0.7928466796875, "compression_ratio": 0.4666666666666667, "no_speech_prob": 0.0006963948253542185}, {"id": 432, "seek": 338828, "start": 3388.28, "end": 3414.1200000000003, "text": " Oops. Oh. There it is.", "tokens": [21726, 13, 876, 13, 821, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.7108136018117269, "compression_ratio": 0.7333333333333333, "no_speech_prob": 0.00013729061174672097}, {"id": 433, "seek": 341412, "start": 3414.12, "end": 3435.2, "text": " There we are. Missing image. So let's test it.", "tokens": [821, 321, 366, 13, 5275, 278, 3256, 13, 407, 718, 311, 1500, 309, 13], "temperature": 0.0, "avg_logprob": -0.4146922694312202, "compression_ratio": 0.8846153846153846, "no_speech_prob": 2.1761625248473138e-05}, {"id": 434, "seek": 343520, "start": 3435.2, "end": 3465.12, "text": " Okay. So I did it. Sure.", "tokens": [1033, 13, 407, 286, 630, 309, 13, 4894, 13], "temperature": 0.0, "avg_logprob": -0.7212250049297626, "compression_ratio": 0.8, "no_speech_prob": 0.0001229731715284288}, {"id": 435, "seek": 346512, "start": 3465.12, "end": 3470.2799999999997, "text": " Oh, okay. So I think I made a mistake. The destination format is not that at all. The", "tokens": [876, 11, 1392, 13, 407, 286, 519, 286, 1027, 257, 6146, 13, 440, 12236, 7877, 307, 406, 300, 412, 439, 13, 440], "temperature": 0.0, "avg_logprob": -0.2614325826818293, "compression_ratio": 1.4576271186440677, "no_speech_prob": 1.69637623912422e-05}, {"id": 436, "seek": 346512, "start": 3470.2799999999997, "end": 3484.8399999999997, "text": " destination format is actually this format. It's actually exclamation, square bracket.", "tokens": [12236, 7877, 307, 767, 341, 7877, 13, 467, 311, 767, 1624, 43233, 11, 3732, 16904, 13], "temperature": 0.0, "avg_logprob": -0.2614325826818293, "compression_ratio": 1.4576271186440677, "no_speech_prob": 1.69637623912422e-05}, {"id": 437, "seek": 348484, "start": 3484.84, "end": 3514.4, "text": " Okay. So that's not correct. If res, it's exclamation mark, square bracket. Doesn't", "tokens": [1033, 13, 407, 300, 311, 406, 3006, 13, 759, 725, 11, 309, 311, 1624, 43233, 1491, 11, 3732, 16904, 13, 12955, 380], "temperature": 0.0, "avg_logprob": -0.2992258438697228, "compression_ratio": 1.0, "no_speech_prob": 2.0144709196756594e-05}, {"id": 438, "seek": 351440, "start": 3514.4, "end": 3533.44, "text": " really matter what the name is. But I guess give it a name. And then oh, and then the", "tokens": [534, 1871, 437, 264, 1315, 307, 13, 583, 286, 2041, 976, 309, 257, 1315, 13, 400, 550, 1954, 11, 293, 550, 264], "temperature": 0.0, "avg_logprob": -0.27324597652141863, "compression_ratio": 1.0897435897435896, "no_speech_prob": 1.9221264665247872e-05}, {"id": 439, "seek": 353344, "start": 3533.44, "end": 3552.44, "text": " size, if there is one. Interesting.", "tokens": [2744, 11, 498, 456, 307, 472, 13, 14711, 13], "temperature": 0.0, "avg_logprob": -0.41594670369074893, "compression_ratio": 0.8536585365853658, "no_speech_prob": 4.9062917241826653e-05}, {"id": 440, "seek": 355244, "start": 3552.44, "end": 3574.96, "text": " Size, if there is one. Just this. And close square bracket and then a parentheses and", "tokens": [35818, 11, 498, 456, 307, 472, 13, 1449, 341, 13, 400, 1998, 3732, 16904, 293, 550, 257, 34153, 293], "temperature": 0.0, "avg_logprob": -0.39425746254299, "compression_ratio": 1.0493827160493827, "no_speech_prob": 4.330632873461582e-05}, {"id": 441, "seek": 357496, "start": 3574.96, "end": 3589.16, "text": " then the file name. Okay. Is that right? Oh, I've got an iry.match object. That's not right.", "tokens": [550, 264, 3991, 1315, 13, 1033, 13, 1119, 300, 558, 30, 876, 11, 286, 600, 658, 364, 3418, 88, 13, 76, 852, 2657, 13, 663, 311, 406, 558, 13], "temperature": 0.0, "avg_logprob": -0.3439674377441406, "compression_ratio": 1.0454545454545454, "no_speech_prob": 1.0287510121997911e-05}, {"id": 442, "seek": 358916, "start": 3589.16, "end": 3615.2, "text": " Oh, it's oh, yeah. This. That looks better, doesn't it?", "tokens": [876, 11, 309, 311, 1954, 11, 1338, 13, 639, 13, 663, 1542, 1101, 11, 1177, 380, 309, 30], "temperature": 0.0, "avg_logprob": -0.34578119624744763, "compression_ratio": 0.9482758620689655, "no_speech_prob": 3.168292823829688e-05}, {"id": 443, "seek": 361520, "start": 3615.2, "end": 3623.3199999999997, "text": " So that's not bad to have an error.", "tokens": [407, 300, 311, 406, 1578, 281, 362, 364, 6713, 13], "temperature": 1.0, "avg_logprob": -2.887274252401816, "compression_ratio": 1.0813953488372092, "no_speech_prob": 2.7097343263449147e-05}, {"id": 444, "seek": 361520, "start": 3623.3199999999997, "end": 3634.72, "text": " Do not get me started with this.", "tokens": [1144, 406, 483, 385, 1409, 365, 341, 13], "temperature": 1.0, "avg_logprob": -2.887274252401816, "compression_ratio": 1.0813953488372092, "no_speech_prob": 2.7097343263449147e-05}, {"id": 445, "seek": 361520, "start": 3634.72, "end": 3637.12, "text": " Whatever.", "tokens": [8541, 13], "temperature": 1.0, "avg_logprob": -2.887274252401816, "compression_ratio": 1.0813953488372092, "no_speech_prob": 2.7097343263449147e-05}, {"id": 446, "seek": 361520, "start": 3637.12, "end": 3639.52, "text": " Okay.", "tokens": [1033, 13], "temperature": 1.0, "avg_logprob": -2.887274252401816, "compression_ratio": 1.0813953488372092, "no_speech_prob": 2.7097343263449147e-05}, {"id": 447, "seek": 361520, "start": 3639.52, "end": 3644.0, "text": " Can not.", "tokens": [1664, 406, 13], "temperature": 1.0, "avg_logprob": -2.887274252401816, "compression_ratio": 1.0813953488372092, "no_speech_prob": 2.7097343263449147e-05}, {"id": 448, "seek": 364400, "start": 3644.0, "end": 3646.72, "text": " Some of these are too big, but Daniel can easily change.", "tokens": [2188, 295, 613, 366, 886, 955, 11, 457, 8033, 393, 3612, 1319, 13], "temperature": 0.0, "avg_logprob": -0.3233426676856147, "compression_ratio": 1.422077922077922, "no_speech_prob": 0.004903774242848158}, {"id": 449, "seek": 364400, "start": 3646.72, "end": 3647.76, "text": " I mean, let's test it actually.", "tokens": [286, 914, 11, 718, 311, 1500, 309, 767, 13], "temperature": 0.0, "avg_logprob": -0.3233426676856147, "compression_ratio": 1.422077922077922, "no_speech_prob": 0.004903774242848158}, {"id": 450, "seek": 364400, "start": 3647.76, "end": 3652.76, "text": " So for 3333, let's see if we can change the size.", "tokens": [407, 337, 11816, 10191, 11, 718, 311, 536, 498, 321, 393, 1319, 264, 2744, 13], "temperature": 0.0, "avg_logprob": -0.3233426676856147, "compression_ratio": 1.422077922077922, "no_speech_prob": 0.004903774242848158}, {"id": 451, "seek": 364400, "start": 3655.4, "end": 3657.04, "text": " 3333.", "tokens": [11816, 10191, 13], "temperature": 0.0, "avg_logprob": -0.3233426676856147, "compression_ratio": 1.422077922077922, "no_speech_prob": 0.004903774242848158}, {"id": 452, "seek": 364400, "start": 3662.12, "end": 3663.88, "text": " Sometimes it puts a little percent sign", "tokens": [4803, 309, 8137, 257, 707, 3043, 1465], "temperature": 0.0, "avg_logprob": -0.3233426676856147, "compression_ratio": 1.422077922077922, "no_speech_prob": 0.004903774242848158}, {"id": 453, "seek": 364400, "start": 3663.88, "end": 3664.88, "text": " and we can put in.", "tokens": [293, 321, 393, 829, 294, 13], "temperature": 0.0, "avg_logprob": -0.3233426676856147, "compression_ratio": 1.422077922077922, "no_speech_prob": 0.004903774242848158}, {"id": 454, "seek": 366488, "start": 3664.88, "end": 3669.88, "text": " Does that work?", "tokens": [4402, 300, 589, 30], "temperature": 0.0, "avg_logprob": -0.5764861106872559, "compression_ratio": 0.8260869565217391, "no_speech_prob": 6.393379590008408e-05}, {"id": 455, "seek": 366488, "start": 3686.2000000000003, "end": 3690.4, "text": " Discourse, image size,", "tokens": [19839, 13656, 11, 3256, 2744, 11], "temperature": 0.0, "avg_logprob": -0.5764861106872559, "compression_ratio": 0.8260869565217391, "no_speech_prob": 6.393379590008408e-05}, {"id": 456, "seek": 369040, "start": 3690.4, "end": 3695.4, "text": " or comma.", "tokens": [50364, 420, 22117, 13, 50614], "temperature": 0.0, "avg_logprob": -0.5709839264551798, "compression_ratio": 0.5294117647058824, "no_speech_prob": 0.001005413942039013}, {"id": 457, "seek": 372040, "start": 3720.92, "end": 3725.92, "text": " Was that a bracket in the comma?", "tokens": [3027, 300, 257, 16904, 294, 264, 22117, 30], "temperature": 0.0, "avg_logprob": -0.44879994809048845, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.08743160963058472}, {"id": 458, "seek": 372040, "start": 3728.84, "end": 3730.84, "text": " A bracket in the comma, sorry?", "tokens": [316, 16904, 294, 264, 22117, 11, 2597, 30], "temperature": 0.0, "avg_logprob": -0.44879994809048845, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.08743160963058472}, {"id": 459, "seek": 372040, "start": 3730.84, "end": 3731.8, "text": " Mm-hmm.", "tokens": [8266, 12, 10250, 13], "temperature": 0.0, "avg_logprob": -0.44879994809048845, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.08743160963058472}, {"id": 460, "seek": 372040, "start": 3731.8, "end": 3733.08, "text": " Yeah, I think it was,", "tokens": [865, 11, 286, 519, 309, 390, 11], "temperature": 0.0, "avg_logprob": -0.44879994809048845, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.08743160963058472}, {"id": 461, "seek": 372040, "start": 3734.64, "end": 3737.6, "text": " because the next comma they say just by adding.", "tokens": [570, 264, 958, 22117, 436, 584, 445, 538, 5127, 13], "temperature": 0.0, "avg_logprob": -0.44879994809048845, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.08743160963058472}, {"id": 462, "seek": 372040, "start": 3737.6, "end": 3739.52, "text": " By adding comma 20%.", "tokens": [3146, 5127, 22117, 945, 6856], "temperature": 0.0, "avg_logprob": -0.44879994809048845, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.08743160963058472}, {"id": 463, "seek": 372040, "start": 3739.52, "end": 3742.0, "text": " You still have to have the pipe in there.", "tokens": [509, 920, 362, 281, 362, 264, 11240, 294, 456, 13], "temperature": 0.0, "avg_logprob": -0.44879994809048845, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.08743160963058472}, {"id": 464, "seek": 372040, "start": 3742.0, "end": 3742.84, "text": " You think so?", "tokens": [509, 519, 370, 30], "temperature": 0.0, "avg_logprob": -0.44879994809048845, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.08743160963058472}, {"id": 465, "seek": 372040, "start": 3742.84, "end": 3744.36, "text": " Do you have the end where it's like a quick just,", "tokens": [1144, 291, 362, 264, 917, 689, 309, 311, 411, 257, 1702, 445, 11], "temperature": 0.0, "avg_logprob": -0.44879994809048845, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.08743160963058472}, {"id": 466, "seek": 372040, "start": 3744.36, "end": 3745.2000000000003, "text": " you know?", "tokens": [291, 458, 30], "temperature": 0.0, "avg_logprob": -0.44879994809048845, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.08743160963058472}, {"id": 467, "seek": 372040, "start": 3746.6, "end": 3747.6, "text": " Yeah, sorry, the end.", "tokens": [865, 11, 2597, 11, 264, 917, 13], "temperature": 0.0, "avg_logprob": -0.44879994809048845, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.08743160963058472}, {"id": 468, "seek": 374760, "start": 3747.6, "end": 3749.3199999999997, "text": " Yeah, the last sentence there.", "tokens": [865, 11, 264, 1036, 8174, 456, 13], "temperature": 0.0, "avg_logprob": -0.4041620371293049, "compression_ratio": 1.4945054945054945, "no_speech_prob": 1.4737231140315998e-05}, {"id": 469, "seek": 374760, "start": 3749.3199999999997, "end": 3750.16, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.4041620371293049, "compression_ratio": 1.4945054945054945, "no_speech_prob": 1.4737231140315998e-05}, {"id": 470, "seek": 374760, "start": 3750.16, "end": 3755.16, "text": " So that might be, you could just do just the comma 50%,", "tokens": [407, 300, 1062, 312, 11, 291, 727, 445, 360, 445, 264, 22117, 2625, 8923], "temperature": 0.0, "avg_logprob": -0.4041620371293049, "compression_ratio": 1.4945054945054945, "no_speech_prob": 1.4737231140315998e-05}, {"id": 471, "seek": 374760, "start": 3755.16, "end": 3757.2799999999997, "text": " I assume after a bracket, maybe that would work.", "tokens": [286, 6552, 934, 257, 16904, 11, 1310, 300, 576, 589, 13], "temperature": 0.0, "avg_logprob": -0.4041620371293049, "compression_ratio": 1.4945054945054945, "no_speech_prob": 1.4737231140315998e-05}, {"id": 472, "seek": 374760, "start": 3757.2799999999997, "end": 3759.48, "text": " Well, and here it's got before the bracket.", "tokens": [1042, 11, 293, 510, 309, 311, 658, 949, 264, 16904, 13], "temperature": 0.0, "avg_logprob": -0.4041620371293049, "compression_ratio": 1.4945054945054945, "no_speech_prob": 1.4737231140315998e-05}, {"id": 473, "seek": 374760, "start": 3761.12, "end": 3764.6, "text": " Oh, not the bar thing.", "tokens": [876, 11, 406, 264, 2159, 551, 13], "temperature": 0.0, "avg_logprob": -0.4041620371293049, "compression_ratio": 1.4945054945054945, "no_speech_prob": 1.4737231140315998e-05}, {"id": 474, "seek": 374760, "start": 3764.6, "end": 3765.44, "text": " Oh.", "tokens": [876, 13], "temperature": 0.0, "avg_logprob": -0.4041620371293049, "compression_ratio": 1.4945054945054945, "no_speech_prob": 1.4737231140315998e-05}, {"id": 475, "seek": 374760, "start": 3765.44, "end": 3766.2799999999997, "text": " Not the bracket.", "tokens": [1726, 264, 16904, 13], "temperature": 0.0, "avg_logprob": -0.4041620371293049, "compression_ratio": 1.4945054945054945, "no_speech_prob": 1.4737231140315998e-05}, {"id": 476, "seek": 374760, "start": 3766.2799999999997, "end": 3767.12, "text": " The pipe.", "tokens": [440, 11240, 13], "temperature": 0.0, "avg_logprob": -0.4041620371293049, "compression_ratio": 1.4945054945054945, "no_speech_prob": 1.4737231140315998e-05}, {"id": 477, "seek": 374760, "start": 3767.12, "end": 3768.12, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.4041620371293049, "compression_ratio": 1.4945054945054945, "no_speech_prob": 1.4737231140315998e-05}, {"id": 478, "seek": 374760, "start": 3769.64, "end": 3770.64, "text": " Let's try that.", "tokens": [961, 311, 853, 300, 13], "temperature": 0.0, "avg_logprob": -0.4041620371293049, "compression_ratio": 1.4945054945054945, "no_speech_prob": 1.4737231140315998e-05}, {"id": 479, "seek": 374760, "start": 3773.3199999999997, "end": 3775.2, "text": " Yes, okay.", "tokens": [1079, 11, 1392, 13], "temperature": 0.0, "avg_logprob": -0.4041620371293049, "compression_ratio": 1.4945054945054945, "no_speech_prob": 1.4737231140315998e-05}, {"id": 480, "seek": 377520, "start": 3775.2, "end": 3777.7999999999997, "text": " Maybe take the dimensions out.", "tokens": [2704, 747, 264, 12819, 484, 13], "temperature": 0.0, "avg_logprob": -0.6892455848487647, "compression_ratio": 1.0, "no_speech_prob": 2.0437197235878557e-05}, {"id": 481, "seek": 377520, "start": 3779.56, "end": 3780.3999999999996, "text": " No.", "tokens": [883, 13], "temperature": 0.0, "avg_logprob": -0.6892455848487647, "compression_ratio": 1.0, "no_speech_prob": 2.0437197235878557e-05}, {"id": 482, "seek": 377520, "start": 3780.3999999999996, "end": 3781.24, "text": " Hmm.", "tokens": [8239, 13], "temperature": 0.0, "avg_logprob": -0.6892455848487647, "compression_ratio": 1.0, "no_speech_prob": 2.0437197235878557e-05}, {"id": 483, "seek": 377520, "start": 3783.3599999999997, "end": 3784.2, "text": " Hmm.", "tokens": [8239, 13], "temperature": 0.0, "avg_logprob": -0.6892455848487647, "compression_ratio": 1.0, "no_speech_prob": 2.0437197235878557e-05}, {"id": 484, "seek": 377520, "start": 3787.3599999999997, "end": 3788.2, "text": " Ah.", "tokens": [2438, 13], "temperature": 0.0, "avg_logprob": -0.6892455848487647, "compression_ratio": 1.0, "no_speech_prob": 2.0437197235878557e-05}, {"id": 485, "seek": 378820, "start": 3788.2, "end": 3798.2, "text": " Ah.", "tokens": [2438, 13], "temperature": 0.0, "avg_logprob": -0.5190350491067638, "compression_ratio": 0.8, "no_speech_prob": 0.00010336826380807906}, {"id": 486, "seek": 378820, "start": 3800.8799999999997, "end": 3803.24, "text": " So, oh, here we go.", "tokens": [407, 11, 1954, 11, 510, 321, 352, 13], "temperature": 0.0, "avg_logprob": -0.5190350491067638, "compression_ratio": 0.8, "no_speech_prob": 0.00010336826380807906}, {"id": 487, "seek": 378820, "start": 3803.24, "end": 3804.08, "text": " 50%.", "tokens": [2625, 6856], "temperature": 0.0, "avg_logprob": -0.5190350491067638, "compression_ratio": 0.8, "no_speech_prob": 0.00010336826380807906}, {"id": 488, "seek": 380408, "start": 3804.08, "end": 3812.08, "text": " Hmm.", "tokens": [8239, 13], "temperature": 0.0, "avg_logprob": -0.24717743396759034, "compression_ratio": 1.1981981981981982, "no_speech_prob": 1.4506587831419893e-05}, {"id": 489, "seek": 380408, "start": 3819.56, "end": 3821.72, "text": " Okay, so I think we probably shouldn't be putting in", "tokens": [1033, 11, 370, 286, 519, 321, 1391, 4659, 380, 312, 3372, 294], "temperature": 0.0, "avg_logprob": -0.24717743396759034, "compression_ratio": 1.1981981981981982, "no_speech_prob": 1.4506587831419893e-05}, {"id": 490, "seek": 380408, "start": 3821.72, "end": 3825.64, "text": " his sizes because they actually want to keep the sizes.", "tokens": [702, 11602, 570, 436, 767, 528, 281, 1066, 264, 11602, 13], "temperature": 0.0, "avg_logprob": -0.24717743396759034, "compression_ratio": 1.1981981981981982, "no_speech_prob": 1.4506587831419893e-05}, {"id": 491, "seek": 382564, "start": 3825.64, "end": 3833.64, "text": " So let's change it.", "tokens": [407, 718, 311, 1319, 309, 13], "temperature": 0.0, "avg_logprob": -0.6889936006986178, "compression_ratio": 0.7419354838709677, "no_speech_prob": 6.46102853352204e-05}, {"id": 492, "seek": 383364, "start": 3833.64, "end": 3858.64, "text": " So, if you press O, by the way, it opens and closes the", "tokens": [407, 11, 498, 291, 1886, 422, 11, 538, 264, 636, 11, 309, 9870, 293, 24157, 264], "temperature": 0.0, "avg_logprob": -0.3234216628536101, "compression_ratio": 1.1176470588235294, "no_speech_prob": 3.7614358006976545e-05}, {"id": 493, "seek": 385864, "start": 3858.64, "end": 3863.64, "text": " output of a cell, which is quite handy.", "tokens": [5598, 295, 257, 2815, 11, 597, 307, 1596, 13239, 13], "temperature": 0.0, "avg_logprob": -0.3045052238132643, "compression_ratio": 0.8709677419354839, "no_speech_prob": 2.6266758140991442e-05}, {"id": 494, "seek": 385864, "start": 3866.72, "end": 3867.56, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.3045052238132643, "compression_ratio": 0.8709677419354839, "no_speech_prob": 2.6266758140991442e-05}, {"id": 495, "seek": 385864, "start": 3874.56, "end": 3875.4, "text": " So,", "tokens": [407, 11], "temperature": 0.0, "avg_logprob": -0.3045052238132643, "compression_ratio": 0.8709677419354839, "no_speech_prob": 2.6266758140991442e-05}, {"id": 496, "seek": 387540, "start": 3875.4, "end": 3878.32, "text": " I guess we've got to have two things.", "tokens": [286, 2041, 321, 600, 658, 281, 362, 732, 721, 13], "temperature": 0.0, "avg_logprob": -0.5413855779738653, "compression_ratio": 1.735042735042735, "no_speech_prob": 1.0127541827387176e-05}, {"id": 497, "seek": 387540, "start": 3878.32, "end": 3880.52, "text": " We're going to have the size and the file name.", "tokens": [492, 434, 516, 281, 362, 264, 2744, 293, 264, 3991, 1315, 13], "temperature": 0.0, "avg_logprob": -0.5413855779738653, "compression_ratio": 1.735042735042735, "no_speech_prob": 1.0127541827387176e-05}, {"id": 498, "seek": 387540, "start": 3882.52, "end": 3884.0, "text": " So that's fine.", "tokens": [407, 300, 311, 2489, 13], "temperature": 0.0, "avg_logprob": -0.5413855779738653, "compression_ratio": 1.735042735042735, "no_speech_prob": 1.0127541827387176e-05}, {"id": 499, "seek": 387540, "start": 3884.0, "end": 3888.0, "text": " So all we need to do then is to capture this.", "tokens": [407, 439, 321, 643, 281, 360, 550, 307, 281, 7983, 341, 13], "temperature": 0.0, "avg_logprob": -0.5413855779738653, "compression_ratio": 1.735042735042735, "no_speech_prob": 1.0127541827387176e-05}, {"id": 500, "seek": 387540, "start": 3893.0, "end": 3893.84, "text": " So,", "tokens": [407, 11], "temperature": 0.0, "avg_logprob": -0.5413855779738653, "compression_ratio": 1.735042735042735, "no_speech_prob": 1.0127541827387176e-05}, {"id": 501, "seek": 387540, "start": 3893.84, "end": 3894.6800000000003, "text": " so,", "tokens": [370, 11], "temperature": 0.0, "avg_logprob": -0.5413855779738653, "compression_ratio": 1.735042735042735, "no_speech_prob": 1.0127541827387176e-05}, {"id": 502, "seek": 387540, "start": 3894.6800000000003, "end": 3895.52, "text": " so,", "tokens": [370, 11], "temperature": 0.0, "avg_logprob": -0.5413855779738653, "compression_ratio": 1.735042735042735, "no_speech_prob": 1.0127541827387176e-05}, {"id": 503, "seek": 387540, "start": 3895.52, "end": 3896.36, "text": " so,", "tokens": [370, 11], "temperature": 0.0, "avg_logprob": -0.5413855779738653, "compression_ratio": 1.735042735042735, "no_speech_prob": 1.0127541827387176e-05}, {"id": 504, "seek": 387540, "start": 3896.36, "end": 3897.2000000000003, "text": " so,", "tokens": [370, 11], "temperature": 0.0, "avg_logprob": -0.5413855779738653, "compression_ratio": 1.735042735042735, "no_speech_prob": 1.0127541827387176e-05}, {"id": 505, "seek": 387540, "start": 3897.2000000000003, "end": 3898.04, "text": " so,", "tokens": [370, 11], "temperature": 0.0, "avg_logprob": -0.5413855779738653, "compression_ratio": 1.735042735042735, "no_speech_prob": 1.0127541827387176e-05}, {"id": 506, "seek": 387540, "start": 3898.04, "end": 3898.88, "text": " so,", "tokens": [370, 11], "temperature": 0.0, "avg_logprob": -0.5413855779738653, "compression_ratio": 1.735042735042735, "no_speech_prob": 1.0127541827387176e-05}, {"id": 507, "seek": 387540, "start": 3898.88, "end": 3899.7200000000003, "text": " so,", "tokens": [370, 11], "temperature": 0.0, "avg_logprob": -0.5413855779738653, "compression_ratio": 1.735042735042735, "no_speech_prob": 1.0127541827387176e-05}, {"id": 508, "seek": 387540, "start": 3899.7200000000003, "end": 3900.56, "text": " so,", "tokens": [370, 11], "temperature": 0.0, "avg_logprob": -0.5413855779738653, "compression_ratio": 1.735042735042735, "no_speech_prob": 1.0127541827387176e-05}, {"id": 509, "seek": 387540, "start": 3900.56, "end": 3901.4, "text": " so,", "tokens": [370, 11], "temperature": 0.0, "avg_logprob": -0.5413855779738653, "compression_ratio": 1.735042735042735, "no_speech_prob": 1.0127541827387176e-05}, {"id": 510, "seek": 387540, "start": 3901.4, "end": 3902.2400000000002, "text": " so,", "tokens": [370, 11], "temperature": 0.0, "avg_logprob": -0.5413855779738653, "compression_ratio": 1.735042735042735, "no_speech_prob": 1.0127541827387176e-05}, {"id": 511, "seek": 387540, "start": 3902.2400000000002, "end": 3903.08, "text": " so,", "tokens": [370, 11], "temperature": 0.0, "avg_logprob": -0.5413855779738653, "compression_ratio": 1.735042735042735, "no_speech_prob": 1.0127541827387176e-05}, {"id": 512, "seek": 387540, "start": 3903.08, "end": 3903.92, "text": " so,", "tokens": [370, 11], "temperature": 0.0, "avg_logprob": -0.5413855779738653, "compression_ratio": 1.735042735042735, "no_speech_prob": 1.0127541827387176e-05}, {"id": 513, "seek": 387540, "start": 3903.92, "end": 3904.76, "text": " so,", "tokens": [370, 11], "temperature": 0.0, "avg_logprob": -0.5413855779738653, "compression_ratio": 1.735042735042735, "no_speech_prob": 1.0127541827387176e-05}, {"id": 514, "seek": 390476, "start": 3904.76, "end": 3905.6000000000004, "text": " so,", "tokens": [370, 11], "temperature": 1.0, "avg_logprob": -0.7979042346660907, "compression_ratio": 1.2473118279569892, "no_speech_prob": 9.311855683336034e-05}, {"id": 515, "seek": 390476, "start": 3907.6000000000004, "end": 3910.7200000000003, "text": " it's not a dictionary anymore.", "tokens": [309, 311, 406, 257, 25890, 3602, 13], "temperature": 1.0, "avg_logprob": -0.7979042346660907, "compression_ratio": 1.2473118279569892, "no_speech_prob": 9.311855683336034e-05}, {"id": 516, "seek": 390476, "start": 3924.6000000000004, "end": 3925.36, "text": " Okay.", "tokens": [1033, 13], "temperature": 1.0, "avg_logprob": -0.7979042346660907, "compression_ratio": 1.2473118279569892, "no_speech_prob": 9.311855683336034e-05}, {"id": 517, "seek": 390476, "start": 3925.36, "end": 3927.28, "text": " And so, then we could say found", "tokens": [400, 370, 11, 550, 321, 727, 584, 1352], "temperature": 1.0, "avg_logprob": -0.7979042346660907, "compression_ratio": 1.2473118279569892, "no_speech_prob": 9.311855683336034e-05}, {"id": 518, "seek": 390476, "start": 3927.28, "end": 3929.36, "text": " and we could do a dictionary comprehension.", "tokens": [293, 321, 727, 360, 257, 25890, 44991, 13], "temperature": 1.0, "avg_logprob": -0.7979042346660907, "compression_ratio": 1.2473118279569892, "no_speech_prob": 9.311855683336034e-05}, {"id": 519, "seek": 392936, "start": 3929.36, "end": 3949.28, "text": " So for name, size, file in that, we're going to go from a name to a tuple of the size and", "tokens": [407, 337, 1315, 11, 2744, 11, 3991, 294, 300, 11, 321, 434, 516, 281, 352, 490, 257, 1315, 281, 257, 2604, 781, 295, 264, 2744, 293], "temperature": 0.0, "avg_logprob": -0.38453336443219865, "compression_ratio": 1.1764705882352942, "no_speech_prob": 0.004330740310251713}, {"id": 520, "seek": 392936, "start": 3949.28, "end": 3953.28, "text": " file name.", "tokens": [3991, 1315, 13], "temperature": 0.0, "avg_logprob": -0.38453336443219865, "compression_ratio": 1.1764705882352942, "no_speech_prob": 0.004330740310251713}, {"id": 521, "seek": 395328, "start": 3953.28, "end": 3961.76, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.5577878952026367, "compression_ratio": 0.8666666666666667, "no_speech_prob": 0.00033513884409330785}, {"id": 522, "seek": 395328, "start": 3961.76, "end": 3974.6800000000003, "text": " So we're now going to go x.group.", "tokens": [407, 321, 434, 586, 516, 281, 352, 2031, 13, 17377, 13], "temperature": 0.0, "avg_logprob": -0.5577878952026367, "compression_ratio": 0.8666666666666667, "no_speech_prob": 0.00033513884409330785}, {"id": 523, "seek": 397468, "start": 3974.68, "end": 3984.2799999999997, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.29818168846336573, "compression_ratio": 1.141304347826087, "no_speech_prob": 1.0615506653266493e-05}, {"id": 524, "seek": 397468, "start": 3984.2799999999997, "end": 3989.3999999999996, "text": " And so that means we don't need this pipe 900 bit anymore.", "tokens": [400, 370, 300, 1355, 321, 500, 380, 643, 341, 11240, 22016, 857, 3602, 13], "temperature": 0.0, "avg_logprob": -0.29818168846336573, "compression_ratio": 1.141304347826087, "no_speech_prob": 1.0615506653266493e-05}, {"id": 525, "seek": 397468, "start": 3989.3999999999996, "end": 3993.7999999999997, "text": " So we don't have to remember that.", "tokens": [407, 321, 500, 380, 362, 281, 1604, 300, 13], "temperature": 0.0, "avg_logprob": -0.29818168846336573, "compression_ratio": 1.141304347826087, "no_speech_prob": 1.0615506653266493e-05}, {"id": 526, "seek": 397468, "start": 3993.7999999999997, "end": 3996.68, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.29818168846336573, "compression_ratio": 1.141304347826087, "no_speech_prob": 1.0615506653266493e-05}, {"id": 527, "seek": 399668, "start": 3996.68, "end": 4005.9199999999996, "text": " And instead, we've now got the name and the size.", "tokens": [400, 2602, 11, 321, 600, 586, 658, 264, 1315, 293, 264, 2744, 13], "temperature": 0.0, "avg_logprob": -0.15397273369555203, "compression_ratio": 1.5213675213675213, "no_speech_prob": 6.747480711055687e-06}, {"id": 528, "seek": 399668, "start": 4005.9199999999996, "end": 4013.52, "text": " The size and the name are the two things that are going to be in this tuple.", "tokens": [440, 2744, 293, 264, 1315, 366, 264, 732, 721, 300, 366, 516, 281, 312, 294, 341, 2604, 781, 13], "temperature": 0.0, "avg_logprob": -0.15397273369555203, "compression_ratio": 1.5213675213675213, "no_speech_prob": 6.747480711055687e-06}, {"id": 529, "seek": 399668, "start": 4013.52, "end": 4021.52, "text": " And so we're going to go pipe followed by the size.", "tokens": [400, 370, 321, 434, 516, 281, 352, 11240, 6263, 538, 264, 2744, 13], "temperature": 0.0, "avg_logprob": -0.15397273369555203, "compression_ratio": 1.5213675213675213, "no_speech_prob": 6.747480711055687e-06}, {"id": 530, "seek": 402152, "start": 4021.52, "end": 4029.68, "text": " And then the name.", "tokens": [400, 550, 264, 1315, 13], "temperature": 0.0, "avg_logprob": -0.6576269865036011, "compression_ratio": 1.2435897435897436, "no_speech_prob": 3.2143405405804515e-05}, {"id": 531, "seek": 402152, "start": 4029.68, "end": 4037.28, "text": " Extra curly brace in the size.", "tokens": [29429, 32066, 38458, 294, 264, 2744, 13], "temperature": 0.0, "avg_logprob": -0.6576269865036011, "compression_ratio": 1.2435897435897436, "no_speech_prob": 3.2143405405804515e-05}, {"id": 532, "seek": 402152, "start": 4037.28, "end": 4038.28, "text": " Sorry?", "tokens": [4919, 30], "temperature": 0.0, "avg_logprob": -0.6576269865036011, "compression_ratio": 1.2435897435897436, "no_speech_prob": 3.2143405405804515e-05}, {"id": 533, "seek": 402152, "start": 4038.28, "end": 4043.68, "text": " There is extra curly braces around size.", "tokens": [821, 307, 2857, 32066, 41537, 926, 2744, 13], "temperature": 0.0, "avg_logprob": -0.6576269865036011, "compression_ratio": 1.2435897435897436, "no_speech_prob": 3.2143405405804515e-05}, {"id": 534, "seek": 404368, "start": 4043.68, "end": 4054.16, "text": " There it is.", "tokens": [821, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.42773730938251203, "compression_ratio": 1.1971830985915493, "no_speech_prob": 1.2605101801455021e-05}, {"id": 535, "seek": 404368, "start": 4054.16, "end": 4057.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.42773730938251203, "compression_ratio": 1.1971830985915493, "no_speech_prob": 1.2605101801455021e-05}, {"id": 536, "seek": 404368, "start": 4057.0, "end": 4059.3999999999996, "text": " Why did this one not work?", "tokens": [1545, 630, 341, 472, 406, 589, 30], "temperature": 0.0, "avg_logprob": -0.42773730938251203, "compression_ratio": 1.1971830985915493, "no_speech_prob": 1.2605101801455021e-05}, {"id": 537, "seek": 404368, "start": 4059.3999999999996, "end": 4064.7599999999998, "text": " Fix issues.png.", "tokens": [25538, 2663, 13, 79, 872, 13], "temperature": 0.0, "avg_logprob": -0.42773730938251203, "compression_ratio": 1.1971830985915493, "no_speech_prob": 1.2605101801455021e-05}, {"id": 538, "seek": 404368, "start": 4064.7599999999998, "end": 4067.3999999999996, "text": " Fix issues.", "tokens": [25538, 2663, 13], "temperature": 0.0, "avg_logprob": -0.42773730938251203, "compression_ratio": 1.1971830985915493, "no_speech_prob": 1.2605101801455021e-05}, {"id": 539, "seek": 404368, "start": 4067.3999999999996, "end": 4070.2, "text": " Fix issues.", "tokens": [25538, 2663, 13], "temperature": 0.0, "avg_logprob": -0.42773730938251203, "compression_ratio": 1.1971830985915493, "no_speech_prob": 1.2605101801455021e-05}, {"id": 540, "seek": 407020, "start": 4070.2, "end": 4076.6, "text": " Should have worked.", "tokens": [6454, 362, 2732, 13], "temperature": 0.0, "avg_logprob": -0.27622091068941, "compression_ratio": 1.4514285714285715, "no_speech_prob": 1.0288968042004853e-05}, {"id": 541, "seek": 407020, "start": 4076.6, "end": 4083.72, "text": " Oh, okay.", "tokens": [876, 11, 1392, 13], "temperature": 0.0, "avg_logprob": -0.27622091068941, "compression_ratio": 1.4514285714285715, "no_speech_prob": 1.0288968042004853e-05}, {"id": 542, "seek": 407020, "start": 4083.72, "end": 4086.3999999999996, "text": " So remember how I told you earlier that parentheses do two things.", "tokens": [407, 1604, 577, 286, 1907, 291, 3071, 300, 34153, 360, 732, 721, 13], "temperature": 0.0, "avg_logprob": -0.27622091068941, "compression_ratio": 1.4514285714285715, "no_speech_prob": 1.0288968042004853e-05}, {"id": 543, "seek": 407020, "start": 4086.3999999999996, "end": 4090.08, "text": " They both group and capture.", "tokens": [814, 1293, 1594, 293, 7983, 13], "temperature": 0.0, "avg_logprob": -0.27622091068941, "compression_ratio": 1.4514285714285715, "no_speech_prob": 1.0288968042004853e-05}, {"id": 544, "seek": 407020, "start": 4090.08, "end": 4095.24, "text": " So when I removed the parentheses, it stopped grouping, which meant the question mark now", "tokens": [407, 562, 286, 7261, 264, 34153, 11, 309, 5936, 40149, 11, 597, 4140, 264, 1168, 1491, 586], "temperature": 0.0, "avg_logprob": -0.27622091068941, "compression_ratio": 1.4514285714285715, "no_speech_prob": 1.0288968042004853e-05}, {"id": 545, "seek": 407020, "start": 4095.24, "end": 4098.2, "text": " referred only to the backslash d plus.", "tokens": [10839, 787, 281, 264, 646, 10418, 1299, 274, 1804, 13], "temperature": 0.0, "avg_logprob": -0.27622091068941, "compression_ratio": 1.4514285714285715, "no_speech_prob": 1.0288968042004853e-05}, {"id": 546, "seek": 409820, "start": 4098.2, "end": 4100.599999999999, "text": " Actually, I need the parentheses there.", "tokens": [5135, 11, 286, 643, 264, 34153, 456, 13], "temperature": 0.0, "avg_logprob": -0.508418550678328, "compression_ratio": 1.226890756302521, "no_speech_prob": 1.2218185474921484e-05}, {"id": 547, "seek": 409820, "start": 4100.599999999999, "end": 4101.599999999999, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.508418550678328, "compression_ratio": 1.226890756302521, "no_speech_prob": 1.2218185474921484e-05}, {"id": 548, "seek": 409820, "start": 4101.599999999999, "end": 4104.599999999999, "text": " That fixed that.", "tokens": [663, 6806, 300, 13], "temperature": 0.0, "avg_logprob": -0.508418550678328, "compression_ratio": 1.226890756302521, "no_speech_prob": 1.2218185474921484e-05}, {"id": 549, "seek": 409820, "start": 4104.599999999999, "end": 4108.599999999999, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.508418550678328, "compression_ratio": 1.226890756302521, "no_speech_prob": 1.2218185474921484e-05}, {"id": 550, "seek": 409820, "start": 4108.599999999999, "end": 4111.48, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.508418550678328, "compression_ratio": 1.226890756302521, "no_speech_prob": 1.2218185474921484e-05}, {"id": 551, "seek": 409820, "start": 4111.48, "end": 4120.48, "text": " And so sometimes that's missing.", "tokens": [400, 370, 2171, 300, 311, 5361, 13], "temperature": 0.0, "avg_logprob": -0.508418550678328, "compression_ratio": 1.226890756302521, "no_speech_prob": 1.2218185474921484e-05}, {"id": 552, "seek": 409820, "start": 4120.48, "end": 4122.48, "text": " So we'll call that res after all.", "tokens": [407, 321, 603, 818, 300, 725, 934, 439, 13], "temperature": 0.0, "avg_logprob": -0.508418550678328, "compression_ratio": 1.226890756302521, "no_speech_prob": 1.2218185474921484e-05}, {"id": 553, "seek": 412248, "start": 4122.48, "end": 4128.44, "text": " We'll call that res here.", "tokens": [492, 603, 818, 300, 725, 510, 13], "temperature": 0.0, "avg_logprob": -0.5968338218895165, "compression_ratio": 1.025974025974026, "no_speech_prob": 4.63781043436029e-06}, {"id": 554, "seek": 412248, "start": 4128.44, "end": 4132.4, "text": " Do that.", "tokens": [1144, 300, 13], "temperature": 0.0, "avg_logprob": -0.5968338218895165, "compression_ratio": 1.025974025974026, "no_speech_prob": 4.63781043436029e-06}, {"id": 555, "seek": 412248, "start": 4132.4, "end": 4135.16, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.5968338218895165, "compression_ratio": 1.025974025974026, "no_speech_prob": 4.63781043436029e-06}, {"id": 556, "seek": 412248, "start": 4135.16, "end": 4138.12, "text": " Let's see how that looks.", "tokens": [961, 311, 536, 577, 300, 1542, 13], "temperature": 0.0, "avg_logprob": -0.5968338218895165, "compression_ratio": 1.025974025974026, "no_speech_prob": 4.63781043436029e-06}, {"id": 557, "seek": 412248, "start": 4138.12, "end": 4140.12, "text": " Copy.", "tokens": [25653, 13], "temperature": 0.0, "avg_logprob": -0.5968338218895165, "compression_ratio": 1.025974025974026, "no_speech_prob": 4.63781043436029e-06}, {"id": 558, "seek": 412248, "start": 4140.12, "end": 4142.12, "text": " Paste.", "tokens": [43827, 13], "temperature": 0.0, "avg_logprob": -0.5968338218895165, "compression_ratio": 1.025974025974026, "no_speech_prob": 4.63781043436029e-06}, {"id": 559, "seek": 414212, "start": 4142.12, "end": 4160.28, "text": " Ah, cool.", "tokens": [2438, 11, 1627, 13], "temperature": 0.0, "avg_logprob": -0.40189626139979207, "compression_ratio": 0.9871794871794872, "no_speech_prob": 3.392963435544516e-06}, {"id": 560, "seek": 414212, "start": 4160.28, "end": 4162.8, "text": " So look at that.", "tokens": [407, 574, 412, 300, 13], "temperature": 0.0, "avg_logprob": -0.40189626139979207, "compression_ratio": 0.9871794871794872, "no_speech_prob": 3.392963435544516e-06}, {"id": 561, "seek": 414212, "start": 4162.8, "end": 4165.48, "text": " They've got names.", "tokens": [814, 600, 658, 5288, 13], "temperature": 0.0, "avg_logprob": -0.40189626139979207, "compression_ratio": 0.9871794871794872, "no_speech_prob": 3.392963435544516e-06}, {"id": 562, "seek": 414212, "start": 4165.48, "end": 4169.28, "text": " And you can change their sizes.", "tokens": [400, 291, 393, 1319, 641, 11602, 13], "temperature": 0.0, "avg_logprob": -0.40189626139979207, "compression_ratio": 0.9871794871794872, "no_speech_prob": 3.392963435544516e-06}, {"id": 563, "seek": 416928, "start": 4169.28, "end": 4185.32, "text": " Awesome.", "tokens": [10391, 13], "temperature": 0.0, "avg_logprob": -0.3484735739858527, "compression_ratio": 1.0493827160493827, "no_speech_prob": 5.173445060790982e-06}, {"id": 564, "seek": 416928, "start": 4185.32, "end": 4186.32, "text": " I think we're done.", "tokens": [286, 519, 321, 434, 1096, 13], "temperature": 0.0, "avg_logprob": -0.3484735739858527, "compression_ratio": 1.0493827160493827, "no_speech_prob": 5.173445060790982e-06}, {"id": 565, "seek": 416928, "start": 4186.32, "end": 4189.32, "text": " Are we done?", "tokens": [2014, 321, 1096, 30], "temperature": 0.0, "avg_logprob": -0.3484735739858527, "compression_ratio": 1.0493827160493827, "no_speech_prob": 5.173445060790982e-06}, {"id": 566, "seek": 416928, "start": 4189.32, "end": 4191.32, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.3484735739858527, "compression_ratio": 1.0493827160493827, "no_speech_prob": 5.173445060790982e-06}, {"id": 567, "seek": 416928, "start": 4191.32, "end": 4193.639999999999, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.3484735739858527, "compression_ratio": 1.0493827160493827, "no_speech_prob": 5.173445060790982e-06}, {"id": 568, "seek": 416928, "start": 4193.639999999999, "end": 4196.08, "text": " So these ones here are too big.", "tokens": [407, 613, 2306, 510, 366, 886, 955, 13], "temperature": 0.0, "avg_logprob": -0.3484735739858527, "compression_ratio": 1.0493827160493827, "no_speech_prob": 5.173445060790982e-06}, {"id": 569, "seek": 419608, "start": 4196.08, "end": 4203.08, "text": " Let's fix them now.", "tokens": [961, 311, 3191, 552, 586, 13], "temperature": 0.0, "avg_logprob": -0.7840539387294224, "compression_ratio": 0.7575757575757576, "no_speech_prob": 2.8853501135017723e-05}, {"id": 570, "seek": 419608, "start": 4203.08, "end": 4209.6, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.7840539387294224, "compression_ratio": 0.7575757575757576, "no_speech_prob": 2.8853501135017723e-05}, {"id": 571, "seek": 420960, "start": 4209.6, "end": 4232.400000000001, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.8132210572560629, "compression_ratio": 0.38461538461538464, "no_speech_prob": 9.078111361304764e-06}, {"id": 572, "seek": 423240, "start": 4232.4, "end": 4248.599999999999, "text": " So let's change his.", "tokens": [407, 718, 311, 1319, 702, 13], "temperature": 0.0, "avg_logprob": -0.38211443689134383, "compression_ratio": 1.0, "no_speech_prob": 1.1543581877049292e-06}, {"id": 573, "seek": 423240, "start": 4248.599999999999, "end": 4251.599999999999, "text": " So let's delete that.", "tokens": [407, 718, 311, 12097, 300, 13], "temperature": 0.0, "avg_logprob": -0.38211443689134383, "compression_ratio": 1.0, "no_speech_prob": 1.1543581877049292e-06}, {"id": 574, "seek": 425160, "start": 4251.6, "end": 4271.4400000000005, "text": " So next step", "tokens": [407, 958, 1823], "temperature": 0.0, "avg_logprob": -0.3763528121145148, "compression_ratio": 0.9056603773584906, "no_speech_prob": 6.047337592463009e-06}, {"id": 575, "seek": 425160, "start": 4271.4400000000005, "end": 4279.120000000001, "text": " is to turn this into an app, right?", "tokens": [307, 281, 1261, 341, 666, 364, 724, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.3763528121145148, "compression_ratio": 0.9056603773584906, "no_speech_prob": 6.047337592463009e-06}, {"id": 576, "seek": 427912, "start": 4279.12, "end": 4281.5199999999995, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.4749908447265625, "compression_ratio": 1.5327868852459017, "no_speech_prob": 4.222692041366827e-06}, {"id": 577, "seek": 427912, "start": 4281.5199999999995, "end": 4284.28, "text": " So which bits do we need?", "tokens": [407, 597, 9239, 360, 321, 643, 30], "temperature": 0.0, "avg_logprob": -0.4749908447265625, "compression_ratio": 1.5327868852459017, "no_speech_prob": 4.222692041366827e-06}, {"id": 578, "seek": 427912, "start": 4284.28, "end": 4285.28, "text": " So we don't need this head.", "tokens": [407, 321, 500, 380, 643, 341, 1378, 13], "temperature": 0.0, "avg_logprob": -0.4749908447265625, "compression_ratio": 1.5327868852459017, "no_speech_prob": 4.222692041366827e-06}, {"id": 579, "seek": 427912, "start": 4285.28, "end": 4286.28, "text": " Don't need that tail.", "tokens": [1468, 380, 643, 300, 6838, 13], "temperature": 0.0, "avg_logprob": -0.4749908447265625, "compression_ratio": 1.5327868852459017, "no_speech_prob": 4.222692041366827e-06}, {"id": 580, "seek": 427912, "start": 4286.28, "end": 4287.28, "text": " Don't need the RGs.", "tokens": [1468, 380, 643, 264, 497, 33715, 13], "temperature": 0.0, "avg_logprob": -0.4749908447265625, "compression_ratio": 1.5327868852459017, "no_speech_prob": 4.222692041366827e-06}, {"id": 581, "seek": 427912, "start": 4287.28, "end": 4288.28, "text": " Chuck this inside here.", "tokens": [21607, 341, 1854, 510, 13], "temperature": 0.0, "avg_logprob": -0.4749908447265625, "compression_ratio": 1.5327868852459017, "no_speech_prob": 4.222692041366827e-06}, {"id": 582, "seek": 427912, "start": 4288.28, "end": 4289.28, "text": " Don't need that.", "tokens": [1468, 380, 643, 300, 13], "temperature": 0.0, "avg_logprob": -0.4749908447265625, "compression_ratio": 1.5327868852459017, "no_speech_prob": 4.222692041366827e-06}, {"id": 583, "seek": 427912, "start": 4289.28, "end": 4290.28, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.4749908447265625, "compression_ratio": 1.5327868852459017, "no_speech_prob": 4.222692041366827e-06}, {"id": 584, "seek": 427912, "start": 4290.28, "end": 4291.28, "text": " So let's go ahead and change the size.", "tokens": [407, 718, 311, 352, 2286, 293, 1319, 264, 2744, 13], "temperature": 0.0, "avg_logprob": -0.4749908447265625, "compression_ratio": 1.5327868852459017, "no_speech_prob": 4.222692041366827e-06}, {"id": 585, "seek": 429128, "start": 4291.28, "end": 4314.24, "text": " So let's go ahead and change the size of the RGs.", "tokens": [407, 718, 311, 352, 2286, 293, 1319, 264, 2744, 295, 264, 497, 33715, 13], "temperature": 0.2, "avg_logprob": -0.9764619403415256, "compression_ratio": 0.9245283018867925, "no_speech_prob": 7.478419138351455e-05}, {"id": 586, "seek": 431424, "start": 4314.24, "end": 4325.76, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.36442886514866607, "compression_ratio": 1.196078431372549, "no_speech_prob": 2.482391664671013e-06}, {"id": 587, "seek": 431424, "start": 4325.76, "end": 4331.08, "text": " So let's restart the kernel and run it all just to make sure.", "tokens": [407, 718, 311, 21022, 264, 28256, 293, 1190, 309, 439, 445, 281, 652, 988, 13], "temperature": 0.0, "avg_logprob": -0.36442886514866607, "compression_ratio": 1.196078431372549, "no_speech_prob": 2.482391664671013e-06}, {"id": 588, "seek": 431424, "start": 4331.08, "end": 4332.599999999999, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.36442886514866607, "compression_ratio": 1.196078431372549, "no_speech_prob": 2.482391664671013e-06}, {"id": 589, "seek": 431424, "start": 4332.599999999999, "end": 4338.48, "text": " So that was just that, I guess.", "tokens": [407, 300, 390, 445, 300, 11, 286, 2041, 13], "temperature": 0.0, "avg_logprob": -0.36442886514866607, "compression_ratio": 1.196078431372549, "no_speech_prob": 2.482391664671013e-06}, {"id": 590, "seek": 431424, "start": 4338.48, "end": 4339.48, "text": " Cool.", "tokens": [8561, 13], "temperature": 0.0, "avg_logprob": -0.36442886514866607, "compression_ratio": 1.196078431372549, "no_speech_prob": 2.482391664671013e-06}, {"id": 591, "seek": 431424, "start": 4339.48, "end": 4340.48, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.36442886514866607, "compression_ratio": 1.196078431372549, "no_speech_prob": 2.482391664671013e-06}, {"id": 592, "seek": 434048, "start": 4340.48, "end": 4347.16, "text": " So let's run the function for this.", "tokens": [407, 718, 311, 1190, 264, 2445, 337, 341, 13], "temperature": 0.0, "avg_logprob": -0.6168854911372347, "compression_ratio": 1.304, "no_speech_prob": 3.5558205127017573e-06}, {"id": 593, "seek": 434048, "start": 4347.16, "end": 4350.08, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.6168854911372347, "compression_ratio": 1.304, "no_speech_prob": 3.5558205127017573e-06}, {"id": 594, "seek": 434048, "start": 4350.08, "end": 4355.919999999999, "text": " So this is basically replace image.", "tokens": [407, 341, 307, 1936, 7406, 3256, 13], "temperature": 0.0, "avg_logprob": -0.6168854911372347, "compression_ratio": 1.304, "no_speech_prob": 3.5558205127017573e-06}, {"id": 595, "seek": 434048, "start": 4355.919999999999, "end": 4361.32, "text": " There we go.", "tokens": [821, 321, 352, 13], "temperature": 0.0, "avg_logprob": -0.6168854911372347, "compression_ratio": 1.304, "no_speech_prob": 3.5558205127017573e-06}, {"id": 596, "seek": 434048, "start": 4361.32, "end": 4370.4, "text": " Jeremy, what that does, this 7, cell 7, it applies the function to the.", "tokens": [17809, 11, 437, 300, 775, 11, 341, 1614, 11, 2815, 1614, 11, 309, 13165, 264, 2445, 281, 264, 13], "temperature": 0.0, "avg_logprob": -0.6168854911372347, "compression_ratio": 1.304, "no_speech_prob": 3.5558205127017573e-06}, {"id": 597, "seek": 437040, "start": 4370.4, "end": 4372.719999999999, "text": " The DST contents basically.", "tokens": [440, 413, 6840, 15768, 1936, 13], "temperature": 0.0, "avg_logprob": -0.40522147387993046, "compression_ratio": 1.5797872340425532, "no_speech_prob": 2.0461064195842482e-05}, {"id": 598, "seek": 437040, "start": 4372.719999999999, "end": 4375.08, "text": " It goes to the search through that string.", "tokens": [467, 1709, 281, 264, 3164, 807, 300, 6798, 13], "temperature": 0.0, "avg_logprob": -0.40522147387993046, "compression_ratio": 1.5797872340425532, "no_speech_prob": 2.0461064195842482e-05}, {"id": 599, "seek": 437040, "start": 4375.08, "end": 4376.08, "text": " Yep.", "tokens": [7010, 13], "temperature": 0.0, "avg_logprob": -0.40522147387993046, "compression_ratio": 1.5797872340425532, "no_speech_prob": 2.0461064195842482e-05}, {"id": 600, "seek": 437040, "start": 4376.08, "end": 4379.32, "text": " It's going to look for this regular expression.", "tokens": [467, 311, 516, 281, 574, 337, 341, 3890, 6114, 13], "temperature": 0.0, "avg_logprob": -0.40522147387993046, "compression_ratio": 1.5797872340425532, "no_speech_prob": 2.0461064195842482e-05}, {"id": 601, "seek": 437040, "start": 4379.32, "end": 4383.5199999999995, "text": " And then each time it finds that regular expression, it'll call this function passing in the match", "tokens": [400, 550, 1184, 565, 309, 10704, 300, 3890, 6114, 11, 309, 603, 818, 341, 2445, 8437, 294, 264, 2995], "temperature": 0.0, "avg_logprob": -0.40522147387993046, "compression_ratio": 1.5797872340425532, "no_speech_prob": 2.0461064195842482e-05}, {"id": 602, "seek": 437040, "start": 4383.5199999999995, "end": 4386.04, "text": " object that the regular expression gets.", "tokens": [2657, 300, 264, 3890, 6114, 2170, 13], "temperature": 0.0, "avg_logprob": -0.40522147387993046, "compression_ratio": 1.5797872340425532, "no_speech_prob": 2.0461064195842482e-05}, {"id": 603, "seek": 437040, "start": 4386.04, "end": 4388.04, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.40522147387993046, "compression_ratio": 1.5797872340425532, "no_speech_prob": 2.0461064195842482e-05}, {"id": 604, "seek": 437040, "start": 4388.04, "end": 4390.04, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.40522147387993046, "compression_ratio": 1.5797872340425532, "no_speech_prob": 2.0461064195842482e-05}, {"id": 605, "seek": 437040, "start": 4390.04, "end": 4392.719999999999, "text": " No worries.", "tokens": [883, 16340, 13], "temperature": 0.0, "avg_logprob": -0.40522147387993046, "compression_ratio": 1.5797872340425532, "no_speech_prob": 2.0461064195842482e-05}, {"id": 606, "seek": 439272, "start": 4392.72, "end": 4402.280000000001, "text": " So this is like a very versatile approach to, you know, doing just about anything you", "tokens": [407, 341, 307, 411, 257, 588, 25057, 3109, 281, 11, 291, 458, 11, 884, 445, 466, 1340, 291], "temperature": 0.0, "avg_logprob": -0.312723784013228, "compression_ratio": 1.3819444444444444, "no_speech_prob": 1.0676783404051093e-06}, {"id": 607, "seek": 439272, "start": 4402.280000000001, "end": 4405.56, "text": " can think of with text really.", "tokens": [393, 519, 295, 365, 2487, 534, 13], "temperature": 0.0, "avg_logprob": -0.312723784013228, "compression_ratio": 1.3819444444444444, "no_speech_prob": 1.0676783404051093e-06}, {"id": 608, "seek": 439272, "start": 4405.56, "end": 4413.92, "text": " Search for regular expression and replace it with a function.", "tokens": [17180, 337, 3890, 6114, 293, 7406, 309, 365, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.312723784013228, "compression_ratio": 1.3819444444444444, "no_speech_prob": 1.0676783404051093e-06}, {"id": 609, "seek": 439272, "start": 4413.92, "end": 4414.92, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.312723784013228, "compression_ratio": 1.3819444444444444, "no_speech_prob": 1.0676783404051093e-06}, {"id": 610, "seek": 439272, "start": 4414.92, "end": 4420.12, "text": " So if we have.", "tokens": [407, 498, 321, 362, 13], "temperature": 0.0, "avg_logprob": -0.312723784013228, "compression_ratio": 1.3819444444444444, "no_speech_prob": 1.0676783404051093e-06}, {"id": 611, "seek": 442012, "start": 4420.12, "end": 4426.32, "text": " Okay, so let's create our function, which is going to be fix images.", "tokens": [1033, 11, 370, 718, 311, 1884, 527, 2445, 11, 597, 307, 516, 281, 312, 3191, 5267, 13], "temperature": 0.0, "avg_logprob": -0.2782641777625451, "compression_ratio": 1.4415584415584415, "no_speech_prob": 1.8340328097110614e-05}, {"id": 612, "seek": 442012, "start": 4426.32, "end": 4427.32, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.2782641777625451, "compression_ratio": 1.4415584415584415, "no_speech_prob": 1.8340328097110614e-05}, {"id": 613, "seek": 442012, "start": 4427.32, "end": 4435.5199999999995, "text": " We're going to be passed in a source and a destination.", "tokens": [492, 434, 516, 281, 312, 4678, 294, 257, 4009, 293, 257, 12236, 13], "temperature": 0.0, "avg_logprob": -0.2782641777625451, "compression_ratio": 1.4415584415584415, "no_speech_prob": 1.8340328097110614e-05}, {"id": 614, "seek": 442012, "start": 4435.5199999999995, "end": 4439.2, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.2782641777625451, "compression_ratio": 1.4415584415584415, "no_speech_prob": 1.8340328097110614e-05}, {"id": 615, "seek": 442012, "start": 4439.2, "end": 4447.64, "text": " And this, if you haven't done this before, you might be surprised to discover you can", "tokens": [400, 341, 11, 498, 291, 2378, 380, 1096, 341, 949, 11, 291, 1062, 312, 6100, 281, 4411, 291, 393], "temperature": 0.0, "avg_logprob": -0.2782641777625451, "compression_ratio": 1.4415584415584415, "no_speech_prob": 1.8340328097110614e-05}, {"id": 616, "seek": 444764, "start": 4447.64, "end": 4450.8, "text": " define a function inside a function.", "tokens": [6964, 257, 2445, 1854, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.22698245471036887, "compression_ratio": 1.8717948717948718, "no_speech_prob": 8.267644261650275e-06}, {"id": 617, "seek": 444764, "start": 4450.8, "end": 4455.320000000001, "text": " And the reason I'm doing that is that the first thing we're going to do is we're going", "tokens": [400, 264, 1778, 286, 478, 884, 300, 307, 300, 264, 700, 551, 321, 434, 516, 281, 360, 307, 321, 434, 516], "temperature": 0.0, "avg_logprob": -0.22698245471036887, "compression_ratio": 1.8717948717948718, "no_speech_prob": 8.267644261650275e-06}, {"id": 618, "seek": 444764, "start": 4455.320000000001, "end": 4457.320000000001, "text": " to search for.", "tokens": [281, 3164, 337, 13], "temperature": 0.0, "avg_logprob": -0.22698245471036887, "compression_ratio": 1.8717948717948718, "no_speech_prob": 8.267644261650275e-06}, {"id": 619, "seek": 444764, "start": 4457.320000000001, "end": 4465.56, "text": " We're going to search, we're going to create this dictionary, right?", "tokens": [492, 434, 516, 281, 3164, 11, 321, 434, 516, 281, 1884, 341, 25890, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.22698245471036887, "compression_ratio": 1.8717948717948718, "no_speech_prob": 8.267644261650275e-06}, {"id": 620, "seek": 444764, "start": 4465.56, "end": 4468.88, "text": " There are things to look for.", "tokens": [821, 366, 721, 281, 574, 337, 13], "temperature": 0.0, "avg_logprob": -0.22698245471036887, "compression_ratio": 1.8717948717948718, "no_speech_prob": 8.267644261650275e-06}, {"id": 621, "seek": 444764, "start": 4468.88, "end": 4472.820000000001, "text": " And then this function here refers to that dictionary.", "tokens": [400, 550, 341, 2445, 510, 14942, 281, 300, 25890, 13], "temperature": 0.0, "avg_logprob": -0.22698245471036887, "compression_ratio": 1.8717948717948718, "no_speech_prob": 8.267644261650275e-06}, {"id": 622, "seek": 447282, "start": 4472.82, "end": 4479.16, "text": " So this is a function that kind of only makes sense inside here.", "tokens": [407, 341, 307, 257, 2445, 300, 733, 295, 787, 1669, 2020, 1854, 510, 13], "temperature": 0.0, "avg_logprob": -0.27822980174311884, "compression_ratio": 1.3310344827586207, "no_speech_prob": 5.954922016826458e-06}, {"id": 623, "seek": 447282, "start": 4479.16, "end": 4492.32, "text": " And then we're going to return this, right?", "tokens": [400, 550, 321, 434, 516, 281, 2736, 341, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.27822980174311884, "compression_ratio": 1.3310344827586207, "no_speech_prob": 5.954922016826458e-06}, {"id": 624, "seek": 447282, "start": 4492.32, "end": 4497.599999999999, "text": " So we should now be able to print fix images.", "tokens": [407, 321, 820, 586, 312, 1075, 281, 4482, 3191, 5267, 13], "temperature": 0.0, "avg_logprob": -0.27822980174311884, "compression_ratio": 1.3310344827586207, "no_speech_prob": 5.954922016826458e-06}, {"id": 625, "seek": 447282, "start": 4497.599999999999, "end": 4499.599999999999, "text": " Passing in our source and destination.", "tokens": [10319, 278, 294, 527, 4009, 293, 12236, 13], "temperature": 0.0, "avg_logprob": -0.27822980174311884, "compression_ratio": 1.3310344827586207, "no_speech_prob": 5.954922016826458e-06}, {"id": 626, "seek": 449960, "start": 4499.6, "end": 4506.6, "text": " There we go.", "tokens": [821, 321, 352, 13], "temperature": 0.0, "avg_logprob": -0.3838257538644891, "compression_ratio": 1.0970873786407767, "no_speech_prob": 3.288612560936599e-06}, {"id": 627, "seek": 449960, "start": 4506.6, "end": 4511.4800000000005, "text": " Great.", "tokens": [3769, 13], "temperature": 0.0, "avg_logprob": -0.3838257538644891, "compression_ratio": 1.0970873786407767, "no_speech_prob": 3.288612560936599e-06}, {"id": 628, "seek": 449960, "start": 4511.4800000000005, "end": 4515.0, "text": " So let's install Gradio.", "tokens": [407, 718, 311, 3625, 16710, 1004, 13], "temperature": 0.0, "avg_logprob": -0.3838257538644891, "compression_ratio": 1.0970873786407767, "no_speech_prob": 3.288612560936599e-06}, {"id": 629, "seek": 449960, "start": 4515.0, "end": 4527.400000000001, "text": " Actually, we've got the latest version by using minus U for upgrade.", "tokens": [5135, 11, 321, 600, 658, 264, 6792, 3037, 538, 1228, 3175, 624, 337, 11484, 13], "temperature": 0.0, "avg_logprob": -0.3838257538644891, "compression_ratio": 1.0970873786407767, "no_speech_prob": 3.288612560936599e-06}, {"id": 630, "seek": 452740, "start": 4527.4, "end": 4532.96, "text": " And I haven't used Gradio much at all except when we did that lesson.", "tokens": [400, 286, 2378, 380, 1143, 16710, 1004, 709, 412, 439, 3993, 562, 321, 630, 300, 6898, 13], "temperature": 0.0, "avg_logprob": -0.33427775424459705, "compression_ratio": 1.2195121951219512, "no_speech_prob": 9.367945494886953e-06}, {"id": 631, "seek": 452740, "start": 4532.96, "end": 4533.96, "text": " So I've forgotten everything.", "tokens": [407, 286, 600, 11832, 1203, 13], "temperature": 0.0, "avg_logprob": -0.33427775424459705, "compression_ratio": 1.2195121951219512, "no_speech_prob": 9.367945494886953e-06}, {"id": 632, "seek": 452740, "start": 4533.96, "end": 4542.96, "text": " So I might need some help with this.", "tokens": [407, 286, 1062, 643, 512, 854, 365, 341, 13], "temperature": 0.0, "avg_logprob": -0.33427775424459705, "compression_ratio": 1.2195121951219512, "no_speech_prob": 9.367945494886953e-06}, {"id": 633, "seek": 452740, "start": 4542.96, "end": 4552.96, "text": " Where are we?", "tokens": [2305, 366, 321, 30], "temperature": 0.0, "avg_logprob": -0.33427775424459705, "compression_ratio": 1.2195121951219512, "no_speech_prob": 9.367945494886953e-06}, {"id": 634, "seek": 455296, "start": 4552.96, "end": 4557.76, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.5481644543734464, "compression_ratio": 1.0952380952380953, "no_speech_prob": 8.664215783937834e-06}, {"id": 635, "seek": 455296, "start": 4557.76, "end": 4558.76, "text": " So import Gradio.", "tokens": [407, 974, 16710, 1004, 13], "temperature": 0.0, "avg_logprob": -0.5481644543734464, "compression_ratio": 1.0952380952380953, "no_speech_prob": 8.664215783937834e-06}, {"id": 636, "seek": 455296, "start": 4558.76, "end": 4567.64, "text": " I'm going to create interface.", "tokens": [286, 478, 516, 281, 1884, 9226, 13], "temperature": 0.0, "avg_logprob": -0.5481644543734464, "compression_ratio": 1.0952380952380953, "no_speech_prob": 8.664215783937834e-06}, {"id": 637, "seek": 455296, "start": 4567.64, "end": 4571.16, "text": " And the function is fix images.", "tokens": [400, 264, 2445, 307, 3191, 5267, 13], "temperature": 0.0, "avg_logprob": -0.5481644543734464, "compression_ratio": 1.0952380952380953, "no_speech_prob": 8.664215783937834e-06}, {"id": 638, "seek": 455296, "start": 4571.16, "end": 4575.12, "text": " Oh, okay.", "tokens": [876, 11, 1392, 13], "temperature": 0.0, "avg_logprob": -0.5481644543734464, "compression_ratio": 1.0952380952380953, "no_speech_prob": 8.664215783937834e-06}, {"id": 639, "seek": 455296, "start": 4575.12, "end": 4580.6, "text": " This took a while.", "tokens": [639, 1890, 257, 1339, 13], "temperature": 0.0, "avg_logprob": -0.5481644543734464, "compression_ratio": 1.0952380952380953, "no_speech_prob": 8.664215783937834e-06}, {"id": 640, "seek": 458060, "start": 4580.6, "end": 4588.72, "text": " Okay, now what's this input thing?", "tokens": [1033, 11, 586, 437, 311, 341, 4846, 551, 30], "temperature": 0.0, "avg_logprob": -0.32260706311180476, "compression_ratio": 1.5087719298245614, "no_speech_prob": 3.4464023883629125e-06}, {"id": 641, "seek": 458060, "start": 4588.72, "end": 4589.72, "text": " Inputs is sketch pad.", "tokens": [682, 2582, 82, 307, 12325, 6887, 13], "temperature": 0.0, "avg_logprob": -0.32260706311180476, "compression_ratio": 1.5087719298245614, "no_speech_prob": 3.4464023883629125e-06}, {"id": 642, "seek": 458060, "start": 4589.72, "end": 4590.72, "text": " Outputs is, oh, I see.", "tokens": [5925, 2582, 82, 307, 11, 1954, 11, 286, 536, 13], "temperature": 0.0, "avg_logprob": -0.32260706311180476, "compression_ratio": 1.5087719298245614, "no_speech_prob": 3.4464023883629125e-06}, {"id": 643, "seek": 458060, "start": 4590.72, "end": 4591.72, "text": " We can just say label.", "tokens": [492, 393, 445, 584, 7645, 13], "temperature": 0.0, "avg_logprob": -0.32260706311180476, "compression_ratio": 1.5087719298245614, "no_speech_prob": 3.4464023883629125e-06}, {"id": 644, "seek": 458060, "start": 4591.72, "end": 4605.76, "text": " Is there a different kind of label for like a large bit of text?", "tokens": [1119, 456, 257, 819, 733, 295, 7645, 337, 411, 257, 2416, 857, 295, 2487, 30], "temperature": 0.0, "avg_logprob": -0.32260706311180476, "compression_ratio": 1.5087719298245614, "no_speech_prob": 3.4464023883629125e-06}, {"id": 645, "seek": 458060, "start": 4605.76, "end": 4608.0, "text": " Should be like a text box or something like that maybe.", "tokens": [6454, 312, 411, 257, 2487, 2424, 420, 746, 411, 300, 1310, 13], "temperature": 0.0, "avg_logprob": -0.32260706311180476, "compression_ratio": 1.5087719298245614, "no_speech_prob": 3.4464023883629125e-06}, {"id": 646, "seek": 458060, "start": 4608.0, "end": 4610.52, "text": " Yeah, something, maybe a text box.", "tokens": [865, 11, 746, 11, 1310, 257, 2487, 2424, 13], "temperature": 0.0, "avg_logprob": -0.32260706311180476, "compression_ratio": 1.5087719298245614, "no_speech_prob": 3.4464023883629125e-06}, {"id": 647, "seek": 461052, "start": 4610.52, "end": 4611.52, "text": " Here we are.", "tokens": [1692, 321, 366, 13], "temperature": 0.0, "avg_logprob": -0.43913083463101776, "compression_ratio": 1.3071428571428572, "no_speech_prob": 4.860193257627543e-06}, {"id": 648, "seek": 461052, "start": 4611.52, "end": 4614.52, "text": " Max lines.", "tokens": [7402, 3876, 13], "temperature": 0.0, "avg_logprob": -0.43913083463101776, "compression_ratio": 1.3071428571428572, "no_speech_prob": 4.860193257627543e-06}, {"id": 649, "seek": 461052, "start": 4614.52, "end": 4617.52, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.43913083463101776, "compression_ratio": 1.3071428571428572, "no_speech_prob": 4.860193257627543e-06}, {"id": 650, "seek": 461052, "start": 4617.52, "end": 4620.52, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.43913083463101776, "compression_ratio": 1.3071428571428572, "no_speech_prob": 4.860193257627543e-06}, {"id": 651, "seek": 461052, "start": 4620.52, "end": 4623.52, "text": " Inputs.", "tokens": [682, 2582, 82, 13], "temperature": 0.0, "avg_logprob": -0.43913083463101776, "compression_ratio": 1.3071428571428572, "no_speech_prob": 4.860193257627543e-06}, {"id": 652, "seek": 461052, "start": 4623.52, "end": 4626.52, "text": " Wait.", "tokens": [3802, 13], "temperature": 0.0, "avg_logprob": -0.43913083463101776, "compression_ratio": 1.3071428571428572, "no_speech_prob": 4.860193257627543e-06}, {"id": 653, "seek": 461052, "start": 4626.52, "end": 4631.52, "text": " And then do we?", "tokens": [400, 550, 360, 321, 30], "temperature": 0.0, "avg_logprob": -0.43913083463101776, "compression_ratio": 1.3071428571428572, "no_speech_prob": 4.860193257627543e-06}, {"id": 654, "seek": 461052, "start": 4631.52, "end": 4632.52, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.43913083463101776, "compression_ratio": 1.3071428571428572, "no_speech_prob": 4.860193257627543e-06}, {"id": 655, "seek": 461052, "start": 4632.52, "end": 4635.52, "text": " So if we pass a string, it's going to construct it.", "tokens": [407, 498, 321, 1320, 257, 6798, 11, 309, 311, 516, 281, 7690, 309, 13], "temperature": 0.0, "avg_logprob": -0.43913083463101776, "compression_ratio": 1.3071428571428572, "no_speech_prob": 4.860193257627543e-06}, {"id": 656, "seek": 461052, "start": 4635.52, "end": 4636.52, "text": " Otherwise we construct it manually.", "tokens": [10328, 321, 7690, 309, 16945, 13], "temperature": 0.0, "avg_logprob": -0.43913083463101776, "compression_ratio": 1.3071428571428572, "no_speech_prob": 4.860193257627543e-06}, {"id": 657, "seek": 461052, "start": 4636.52, "end": 4637.52, "text": " Is that how this works?", "tokens": [1119, 300, 577, 341, 1985, 30], "temperature": 0.0, "avg_logprob": -0.43913083463101776, "compression_ratio": 1.3071428571428572, "no_speech_prob": 4.860193257627543e-06}, {"id": 658, "seek": 463752, "start": 4637.52, "end": 4640.52, "text": " It said that there's a shortcut if you purchase text, it would work.", "tokens": [467, 848, 300, 456, 311, 257, 24822, 498, 291, 8110, 2487, 11, 309, 576, 589, 13], "temperature": 0.0, "avg_logprob": -0.1533301773891654, "compression_ratio": 1.6179775280898876, "no_speech_prob": 5.9549774960032664e-06}, {"id": 659, "seek": 463752, "start": 4640.52, "end": 4645.52, "text": " I think if you go to the, I think I saw it when you were scrolling.", "tokens": [286, 519, 498, 291, 352, 281, 264, 11, 286, 519, 286, 1866, 309, 562, 291, 645, 29053, 13], "temperature": 0.0, "avg_logprob": -0.1533301773891654, "compression_ratio": 1.6179775280898876, "no_speech_prob": 5.9549774960032664e-06}, {"id": 660, "seek": 463752, "start": 4645.52, "end": 4646.52, "text": " I string shortcuts.", "tokens": [286, 6798, 34620, 13], "temperature": 0.0, "avg_logprob": -0.1533301773891654, "compression_ratio": 1.6179775280898876, "no_speech_prob": 5.9549774960032664e-06}, {"id": 661, "seek": 463752, "start": 4646.52, "end": 4650.52, "text": " Oh, text area would have seven lines.", "tokens": [876, 11, 2487, 1859, 576, 362, 3407, 3876, 13], "temperature": 0.0, "avg_logprob": -0.1533301773891654, "compression_ratio": 1.6179775280898876, "no_speech_prob": 5.9549774960032664e-06}, {"id": 662, "seek": 463752, "start": 4650.52, "end": 4652.52, "text": " I see. I see. I see.", "tokens": [286, 536, 13, 286, 536, 13, 286, 536, 13], "temperature": 0.0, "avg_logprob": -0.1533301773891654, "compression_ratio": 1.6179775280898876, "no_speech_prob": 5.9549774960032664e-06}, {"id": 663, "seek": 463752, "start": 4652.52, "end": 4653.52, "text": " Which isn't that many.", "tokens": [3013, 1943, 380, 300, 867, 13], "temperature": 0.0, "avg_logprob": -0.1533301773891654, "compression_ratio": 1.6179775280898876, "no_speech_prob": 5.9549774960032664e-06}, {"id": 664, "seek": 463752, "start": 4653.52, "end": 4658.52, "text": " So let's just try doing it their way.", "tokens": [407, 718, 311, 445, 853, 884, 309, 641, 636, 13], "temperature": 0.0, "avg_logprob": -0.1533301773891654, "compression_ratio": 1.6179775280898876, "no_speech_prob": 5.9549774960032664e-06}, {"id": 665, "seek": 463752, "start": 4658.52, "end": 4664.52, "text": " So input is", "tokens": [407, 4846, 307], "temperature": 0.0, "avg_logprob": -0.1533301773891654, "compression_ratio": 1.6179775280898876, "no_speech_prob": 5.9549774960032664e-06}, {"id": 666, "seek": 466452, "start": 4664.52, "end": 4669.52, "text": " that.", "tokens": [300, 13], "temperature": 0.0, "avg_logprob": -0.22071519264808068, "compression_ratio": 0.8064516129032258, "no_speech_prob": 7.71822378737852e-05}, {"id": 667, "seek": 466452, "start": 4669.52, "end": 4680.52, "text": " And output is that.", "tokens": [400, 5598, 307, 300, 13], "temperature": 0.0, "avg_logprob": -0.22071519264808068, "compression_ratio": 0.8064516129032258, "no_speech_prob": 7.71822378737852e-05}, {"id": 668, "seek": 468052, "start": 4680.52, "end": 4698.52, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.13948933283487955, "compression_ratio": 0.38461538461538464, "no_speech_prob": 1.0782528988784179e-05}, {"id": 669, "seek": 469852, "start": 4698.52, "end": 4711.52, "text": " And they've got that new like grid flex boxy thing we might be able to use to like get one under the other because we don't really want them side by side, do we?", "tokens": [400, 436, 600, 658, 300, 777, 411, 10748, 5896, 2424, 88, 551, 321, 1062, 312, 1075, 281, 764, 281, 411, 483, 472, 833, 264, 661, 570, 321, 500, 380, 534, 528, 552, 1252, 538, 1252, 11, 360, 321, 30], "temperature": 0.0, "avg_logprob": -0.1946055293083191, "compression_ratio": 1.328125, "no_speech_prob": 4.784834800375393e-06}, {"id": 670, "seek": 469852, "start": 4711.52, "end": 4720.52, "text": " Okay, so", "tokens": [1033, 11, 370], "temperature": 0.0, "avg_logprob": -0.1946055293083191, "compression_ratio": 1.328125, "no_speech_prob": 4.784834800375393e-06}, {"id": 671, "seek": 472052, "start": 4720.52, "end": 4728.52, "text": " where to upload a file?", "tokens": [689, 281, 6580, 257, 3991, 30], "temperature": 0.0, "avg_logprob": -0.2575672935037052, "compression_ratio": 0.9130434782608695, "no_speech_prob": 6.240443781280192e-06}, {"id": 672, "seek": 472052, "start": 4728.52, "end": 4735.52, "text": " An image there is.", "tokens": [1107, 3256, 456, 307, 13], "temperature": 0.0, "avg_logprob": -0.2575672935037052, "compression_ratio": 0.9130434782608695, "no_speech_prob": 6.240443781280192e-06}, {"id": 673, "seek": 473552, "start": 4735.52, "end": 4750.52, "text": " Oh, wait, here's something called file.", "tokens": [876, 11, 1699, 11, 510, 311, 746, 1219, 3991, 13], "temperature": 0.0, "avg_logprob": -0.40423151424952913, "compression_ratio": 0.8297872340425532, "no_speech_prob": 4.157221155765001e-06}, {"id": 674, "seek": 475052, "start": 4750.52, "end": 4765.52, "text": " I guess he's probably going to copy and paste it from the forum.", "tokens": [286, 2041, 415, 311, 1391, 516, 281, 5055, 293, 9163, 309, 490, 264, 17542, 13], "temperature": 0.0, "avg_logprob": -0.23772452859317555, "compression_ratio": 1.265625, "no_speech_prob": 3.905332050635479e-06}, {"id": 675, "seek": 475052, "start": 4765.52, "end": 4769.52, "text": " So maybe we should just do it like that too.", "tokens": [407, 1310, 321, 820, 445, 360, 309, 411, 300, 886, 13], "temperature": 0.0, "avg_logprob": -0.23772452859317555, "compression_ratio": 1.265625, "no_speech_prob": 3.905332050635479e-06}, {"id": 676, "seek": 475052, "start": 4769.52, "end": 4774.52, "text": " Yeah, let's just do it here.", "tokens": [865, 11, 718, 311, 445, 360, 309, 510, 13], "temperature": 0.0, "avg_logprob": -0.23772452859317555, "compression_ratio": 1.265625, "no_speech_prob": 3.905332050635479e-06}, {"id": 677, "seek": 475052, "start": 4774.52, "end": 4776.52, "text": " Can we still run stuff?", "tokens": [1664, 321, 920, 1190, 1507, 30], "temperature": 0.0, "avg_logprob": -0.23772452859317555, "compression_ratio": 1.265625, "no_speech_prob": 3.905332050635479e-06}, {"id": 678, "seek": 477652, "start": 4776.52, "end": 4784.52, "text": " We can.", "tokens": [492, 393, 13], "temperature": 0.0, "avg_logprob": -0.2282840644612032, "compression_ratio": 1.0714285714285714, "no_speech_prob": 5.42210045750835e-06}, {"id": 679, "seek": 477652, "start": 4784.52, "end": 4786.52, "text": " Oh, source and output.", "tokens": [876, 11, 4009, 293, 5598, 13], "temperature": 0.0, "avg_logprob": -0.2282840644612032, "compression_ratio": 1.0714285714285714, "no_speech_prob": 5.42210045750835e-06}, {"id": 680, "seek": 477652, "start": 4786.52, "end": 4787.52, "text": " That's not right.", "tokens": [663, 311, 406, 558, 13], "temperature": 0.0, "avg_logprob": -0.2282840644612032, "compression_ratio": 1.0714285714285714, "no_speech_prob": 5.42210045750835e-06}, {"id": 681, "seek": 477652, "start": 4787.52, "end": 4798.52, "text": " We need two things to pass to fix images.", "tokens": [492, 643, 732, 721, 281, 1320, 281, 3191, 5267, 13], "temperature": 0.0, "avg_logprob": -0.2282840644612032, "compression_ratio": 1.0714285714285714, "no_speech_prob": 5.42210045750835e-06}, {"id": 682, "seek": 479852, "start": 4798.52, "end": 4807.52, "text": " So does that mean we put square bracket here or something or a dictionary?", "tokens": [407, 775, 300, 914, 321, 829, 3732, 16904, 510, 420, 746, 420, 257, 25890, 30], "temperature": 0.0, "avg_logprob": -0.226806640625, "compression_ratio": 1.2605042016806722, "no_speech_prob": 1.240946767211426e-05}, {"id": 683, "seek": 479852, "start": 4807.52, "end": 4815.52, "text": " Inputs, string, component, western strings.", "tokens": [682, 2582, 82, 11, 6798, 11, 6542, 11, 13231, 13985, 13], "temperature": 0.0, "avg_logprob": -0.226806640625, "compression_ratio": 1.2605042016806722, "no_speech_prob": 1.240946767211426e-05}, {"id": 684, "seek": 479852, "start": 4815.52, "end": 4819.52, "text": " Match the number of parameters.", "tokens": [26178, 264, 1230, 295, 9834, 13], "temperature": 0.0, "avg_logprob": -0.226806640625, "compression_ratio": 1.2605042016806722, "no_speech_prob": 1.240946767211426e-05}, {"id": 685, "seek": 481952, "start": 4819.52, "end": 4838.52, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.14267201984629913, "compression_ratio": 0.8636363636363636, "no_speech_prob": 1.9218763554817997e-05}, {"id": 686, "seek": 481952, "start": 4838.52, "end": 4842.52, "text": " Okay, so that's our source.", "tokens": [1033, 11, 370, 300, 311, 527, 4009, 13], "temperature": 0.0, "avg_logprob": -0.14267201984629913, "compression_ratio": 0.8636363636363636, "no_speech_prob": 1.9218763554817997e-05}, {"id": 687, "seek": 484252, "start": 4842.52, "end": 4859.52, "text": " That's cool. That's named them. That's nice.", "tokens": [663, 311, 1627, 13, 663, 311, 4926, 552, 13, 663, 311, 1481, 13], "temperature": 0.0, "avg_logprob": -0.16927456855773926, "compression_ratio": 1.2142857142857142, "no_speech_prob": 0.000121388140541967}, {"id": 688, "seek": 484252, "start": 4859.52, "end": 4864.52, "text": " That's our destination.", "tokens": [663, 311, 527, 12236, 13], "temperature": 0.0, "avg_logprob": -0.16927456855773926, "compression_ratio": 1.2142857142857142, "no_speech_prob": 0.000121388140541967}, {"id": 689, "seek": 486452, "start": 4864.52, "end": 4879.52, "text": " Yes.", "tokens": [1079, 13], "temperature": 0.0, "avg_logprob": -0.6912649472554525, "compression_ratio": 0.3333333333333333, "no_speech_prob": 1.4061514775676187e-05}, {"id": 690, "seek": 487952, "start": 4879.52, "end": 4906.52, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.12887902770723617, "compression_ratio": 0.5555555555555556, "no_speech_prob": 1.4060456123843323e-05}, {"id": 691, "seek": 490652, "start": 4906.52, "end": 4916.52, "text": " So for all right. So Gradio needs a script.", "tokens": [407, 337, 439, 558, 13, 407, 16710, 1004, 2203, 257, 5755, 13], "temperature": 0.0, "avg_logprob": -0.300084149395978, "compression_ratio": 1.4390243902439024, "no_speech_prob": 9.664854587754235e-06}, {"id": 692, "seek": 490652, "start": 4916.52, "end": 4925.52, "text": " And so I guess we got us I guess we got a spaces first right. Hacking first spaces.", "tokens": [400, 370, 286, 2041, 321, 658, 505, 286, 2041, 321, 658, 257, 7673, 700, 558, 13, 389, 14134, 700, 7673, 13], "temperature": 0.0, "avg_logprob": -0.300084149395978, "compression_ratio": 1.4390243902439024, "no_speech_prob": 9.664854587754235e-06}, {"id": 693, "seek": 490652, "start": 4925.52, "end": 4930.52, "text": " I've forgotten everything.", "tokens": [286, 600, 11832, 1203, 13], "temperature": 0.0, "avg_logprob": -0.300084149395978, "compression_ratio": 1.4390243902439024, "no_speech_prob": 9.664854587754235e-06}, {"id": 694, "seek": 490652, "start": 4930.52, "end": 4934.52, "text": " And we create a space.", "tokens": [400, 321, 1884, 257, 1901, 13], "temperature": 0.0, "avg_logprob": -0.300084149395978, "compression_ratio": 1.4390243902439024, "no_speech_prob": 9.664854587754235e-06}, {"id": 695, "seek": 493452, "start": 4934.52, "end": 4946.52, "text": " Okay. And we call it a Daniel image fix.", "tokens": [1033, 13, 400, 321, 818, 309, 257, 8033, 3256, 3191, 13], "temperature": 0.0, "avg_logprob": -0.25940634654118466, "compression_ratio": 0.9315068493150684, "no_speech_prob": 1.6186091670533642e-05}, {"id": 696, "seek": 493452, "start": 4946.52, "end": 4951.52, "text": " Right. It's a Gradio space.", "tokens": [1779, 13, 467, 311, 257, 16710, 1004, 1901, 13], "temperature": 0.0, "avg_logprob": -0.25940634654118466, "compression_ratio": 0.9315068493150684, "no_speech_prob": 1.6186091670533642e-05}, {"id": 697, "seek": 495152, "start": 4951.52, "end": 4967.52, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.13228602939181858, "compression_ratio": 1.2844036697247707, "no_speech_prob": 1.5934159819153138e-05}, {"id": 698, "seek": 495152, "start": 4967.52, "end": 4971.52, "text": " You could just create the app file right there if you wanted to.", "tokens": [509, 727, 445, 1884, 264, 724, 3991, 558, 456, 498, 291, 1415, 281, 13], "temperature": 0.0, "avg_logprob": -0.13228602939181858, "compression_ratio": 1.2844036697247707, "no_speech_prob": 1.5934159819153138e-05}, {"id": 699, "seek": 495152, "start": 4971.52, "end": 4973.52, "text": " Create the app file.", "tokens": [20248, 264, 724, 3991, 13], "temperature": 0.0, "avg_logprob": -0.13228602939181858, "compression_ratio": 1.2844036697247707, "no_speech_prob": 1.5934159819153138e-05}, {"id": 700, "seek": 495152, "start": 4973.52, "end": 4976.52, "text": " In the UI. I don't know if that might be easier.", "tokens": [682, 264, 15682, 13, 286, 500, 380, 458, 498, 300, 1062, 312, 3571, 13], "temperature": 0.0, "avg_logprob": -0.13228602939181858, "compression_ratio": 1.2844036697247707, "no_speech_prob": 1.5934159819153138e-05}, {"id": 701, "seek": 497652, "start": 4976.52, "end": 4981.52, "text": " I don't know.", "tokens": [286, 500, 380, 458, 13], "temperature": 0.0, "avg_logprob": -0.5708848728853113, "compression_ratio": 1.0740740740740742, "no_speech_prob": 6.438669515773654e-06}, {"id": 702, "seek": 497652, "start": 4981.52, "end": 4989.52, "text": " Is there a hint? Create the app.py file.", "tokens": [1119, 456, 257, 12075, 30, 20248, 264, 724, 13, 8200, 3991, 13], "temperature": 0.0, "avg_logprob": -0.5708848728853113, "compression_ratio": 1.0740740740740742, "no_speech_prob": 6.438669515773654e-06}, {"id": 703, "seek": 497652, "start": 4989.52, "end": 4996.52, "text": " I didn't know that exists. Cool.", "tokens": [286, 994, 380, 458, 300, 8198, 13, 8561, 13], "temperature": 0.0, "avg_logprob": -0.5708848728853113, "compression_ratio": 1.0740740740740742, "no_speech_prob": 6.438669515773654e-06}, {"id": 704, "seek": 499652, "start": 4996.52, "end": 5007.52, "text": " Yeah, absolutely. Okay.", "tokens": [865, 11, 3122, 13, 1033, 13], "temperature": 0.0, "avg_logprob": -0.3050154324235587, "compression_ratio": 1.0454545454545454, "no_speech_prob": 3.7263000649545575e-06}, {"id": 705, "seek": 499652, "start": 5007.52, "end": 5016.52, "text": " We're going to need like a requirements.text or something, don't we?", "tokens": [492, 434, 516, 281, 643, 411, 257, 7728, 13, 25111, 420, 746, 11, 500, 380, 321, 30], "temperature": 0.0, "avg_logprob": -0.3050154324235587, "compression_ratio": 1.0454545454545454, "no_speech_prob": 3.7263000649545575e-06}, {"id": 706, "seek": 501652, "start": 5016.52, "end": 5026.52, "text": " We commit this. Does that look right?", "tokens": [492, 5599, 341, 13, 4402, 300, 574, 558, 30], "temperature": 0.0, "avg_logprob": -0.3709448575973511, "compression_ratio": 1.194915254237288, "no_speech_prob": 2.9479633667506278e-06}, {"id": 707, "seek": 501652, "start": 5026.52, "end": 5031.52, "text": " Yeah, I think so. Yeah. Requirements.text. And I think you just need to put fast core in it.", "tokens": [865, 11, 286, 519, 370, 13, 865, 13, 42029, 621, 1117, 13, 25111, 13, 400, 286, 519, 291, 445, 643, 281, 829, 2370, 4965, 294, 309, 13], "temperature": 0.0, "avg_logprob": -0.3709448575973511, "compression_ratio": 1.194915254237288, "no_speech_prob": 2.9479633667506278e-06}, {"id": 708, "seek": 501652, "start": 5031.52, "end": 5033.52, "text": " Yes. Okay.", "tokens": [1079, 13, 1033, 13], "temperature": 0.0, "avg_logprob": -0.3709448575973511, "compression_ratio": 1.194915254237288, "no_speech_prob": 2.9479633667506278e-06}, {"id": 709, "seek": 503352, "start": 5033.52, "end": 5046.52, "text": " Name it requirements.text containing fast core.", "tokens": [13866, 309, 7728, 13, 25111, 19273, 2370, 4965, 13], "temperature": 0.0, "avg_logprob": -0.1842058621920072, "compression_ratio": 1.311377245508982, "no_speech_prob": 1.221851744048763e-05}, {"id": 710, "seek": 503352, "start": 5046.52, "end": 5053.52, "text": " I love doing this stuff just through the web GUI. It's just so wonderfully lazy.", "tokens": [286, 959, 884, 341, 1507, 445, 807, 264, 3670, 17917, 40, 13, 467, 311, 445, 370, 38917, 14847, 13], "temperature": 0.0, "avg_logprob": -0.1842058621920072, "compression_ratio": 1.311377245508982, "no_speech_prob": 1.221851744048763e-05}, {"id": 711, "seek": 503352, "start": 5053.52, "end": 5056.52, "text": " Okay. And that should be it, right?", "tokens": [1033, 13, 400, 300, 820, 312, 309, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1842058621920072, "compression_ratio": 1.311377245508982, "no_speech_prob": 1.221851744048763e-05}, {"id": 712, "seek": 503352, "start": 5056.52, "end": 5061.52, "text": " Yeah, I think so. Just, yeah, it has to build the app.", "tokens": [865, 11, 286, 519, 370, 13, 1449, 11, 1338, 11, 309, 575, 281, 1322, 264, 724, 13], "temperature": 0.0, "avg_logprob": -0.1842058621920072, "compression_ratio": 1.311377245508982, "no_speech_prob": 1.221851744048763e-05}, {"id": 713, "seek": 506152, "start": 5061.52, "end": 5066.52, "text": " It says it's done. So refresh.", "tokens": [467, 1619, 309, 311, 1096, 13, 407, 15134, 13], "temperature": 0.0, "avg_logprob": -0.22227294445037843, "compression_ratio": 1.6395348837209303, "no_speech_prob": 1.0289023521181662e-05}, {"id": 714, "seek": 506152, "start": 5066.52, "end": 5068.52, "text": " It says building.", "tokens": [467, 1619, 2390, 13], "temperature": 0.0, "avg_logprob": -0.22227294445037843, "compression_ratio": 1.6395348837209303, "no_speech_prob": 1.0289023521181662e-05}, {"id": 715, "seek": 506152, "start": 5068.52, "end": 5076.52, "text": " Because I think it builds for each commits, then you probably build when you committed the app.py and then it's building again when you commit.", "tokens": [1436, 286, 519, 309, 15182, 337, 1184, 48311, 11, 550, 291, 1391, 1322, 562, 291, 7784, 264, 724, 13, 8200, 293, 550, 309, 311, 2390, 797, 562, 291, 5599, 13], "temperature": 0.0, "avg_logprob": -0.22227294445037843, "compression_ratio": 1.6395348837209303, "no_speech_prob": 1.0289023521181662e-05}, {"id": 716, "seek": 506152, "start": 5076.52, "end": 5081.52, "text": " Yeah, I just want to say that. I want to say the latest logs, you know.", "tokens": [865, 11, 286, 445, 528, 281, 584, 300, 13, 286, 528, 281, 584, 264, 6792, 20820, 11, 291, 458, 13], "temperature": 0.0, "avg_logprob": -0.22227294445037843, "compression_ratio": 1.6395348837209303, "no_speech_prob": 1.0289023521181662e-05}, {"id": 717, "seek": 506152, "start": 5081.52, "end": 5086.52, "text": " It's got secrets.", "tokens": [467, 311, 658, 14093, 13], "temperature": 0.0, "avg_logprob": -0.22227294445037843, "compression_ratio": 1.6395348837209303, "no_speech_prob": 1.0289023521181662e-05}, {"id": 718, "seek": 508652, "start": 5086.52, "end": 5094.52, "text": " Yeah. I like the way this stuff is getting standardized now around this idea of just like some key values store secrets that you can chuck in there.", "tokens": [865, 13, 286, 411, 264, 636, 341, 1507, 307, 1242, 31677, 586, 926, 341, 1558, 295, 445, 411, 512, 2141, 4190, 3531, 14093, 300, 291, 393, 20870, 294, 456, 13], "temperature": 0.0, "avg_logprob": -0.18294588724772134, "compression_ratio": 1.3129251700680271, "no_speech_prob": 2.0143832443864085e-05}, {"id": 719, "seek": 508652, "start": 5094.52, "end": 5103.52, "text": " Everything looks pretty similar, doesn't it?", "tokens": [5471, 1542, 1238, 2531, 11, 1177, 380, 309, 30], "temperature": 0.0, "avg_logprob": -0.18294588724772134, "compression_ratio": 1.3129251700680271, "no_speech_prob": 2.0143832443864085e-05}, {"id": 720, "seek": 510352, "start": 5103.52, "end": 5116.52, "text": " This is annoying.", "tokens": [639, 307, 11304, 13], "temperature": 0.0, "avg_logprob": -0.15967331434551038, "compression_ratio": 1.1458333333333333, "no_speech_prob": 9.972165571525693e-06}, {"id": 721, "seek": 510352, "start": 5116.52, "end": 5118.52, "text": " Runtime error.", "tokens": [497, 2760, 1312, 6713, 13], "temperature": 0.0, "avg_logprob": -0.15967331434551038, "compression_ratio": 1.1458333333333333, "no_speech_prob": 9.972165571525693e-06}, {"id": 722, "seek": 510352, "start": 5118.52, "end": 5121.52, "text": " Okay. So hopefully that means we've got new logs we can see.", "tokens": [1033, 13, 407, 4696, 300, 1355, 321, 600, 658, 777, 20820, 321, 393, 536, 13], "temperature": 0.0, "avg_logprob": -0.15967331434551038, "compression_ratio": 1.1458333333333333, "no_speech_prob": 9.972165571525693e-06}, {"id": 723, "seek": 510352, "start": 5121.52, "end": 5127.52, "text": " Space not ready.", "tokens": [8705, 406, 1919, 13], "temperature": 0.0, "avg_logprob": -0.15967331434551038, "compression_ratio": 1.1458333333333333, "no_speech_prob": 9.972165571525693e-06}, {"id": 724, "seek": 512752, "start": 5127.52, "end": 5134.52, "text": " Oh, that's not very helpful. Logs is now empty.", "tokens": [876, 11, 300, 311, 406, 588, 4961, 13, 10824, 82, 307, 586, 6707, 13], "temperature": 0.0, "avg_logprob": -0.2432435921260289, "compression_ratio": 1.2307692307692308, "no_speech_prob": 4.222617917548632e-06}, {"id": 725, "seek": 512752, "start": 5134.52, "end": 5138.52, "text": " Great.", "tokens": [3769, 13], "temperature": 0.0, "avg_logprob": -0.2432435921260289, "compression_ratio": 1.2307692307692308, "no_speech_prob": 4.222617917548632e-06}, {"id": 726, "seek": 512752, "start": 5138.52, "end": 5142.52, "text": " Can you try rerunning the building process?", "tokens": [1664, 291, 853, 43819, 25589, 264, 2390, 1399, 30], "temperature": 0.0, "avg_logprob": -0.2432435921260289, "compression_ratio": 1.2307692307692308, "no_speech_prob": 4.222617917548632e-06}, {"id": 727, "seek": 512752, "start": 5142.52, "end": 5143.52, "text": " How do you do that?", "tokens": [1012, 360, 291, 360, 300, 30], "temperature": 0.0, "avg_logprob": -0.2432435921260289, "compression_ratio": 1.2307692307692308, "no_speech_prob": 4.222617917548632e-06}, {"id": 728, "seek": 512752, "start": 5143.52, "end": 5146.52, "text": " It says restart the space, it says.", "tokens": [467, 1619, 21022, 264, 1901, 11, 309, 1619, 13], "temperature": 0.0, "avg_logprob": -0.2432435921260289, "compression_ratio": 1.2307692307692308, "no_speech_prob": 4.222617917548632e-06}, {"id": 729, "seek": 512752, "start": 5146.52, "end": 5152.52, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.2432435921260289, "compression_ratio": 1.2307692307692308, "no_speech_prob": 4.222617917548632e-06}, {"id": 730, "seek": 515252, "start": 5152.52, "end": 5157.52, "text": " I guess I don't know the difference between the factory reboot or the restart.", "tokens": [286, 2041, 286, 500, 380, 458, 264, 2649, 1296, 264, 9265, 33818, 420, 264, 21022, 13], "temperature": 0.0, "avg_logprob": -0.1912987588465899, "compression_ratio": 1.525, "no_speech_prob": 6.2406284087046515e-06}, {"id": 731, "seek": 515252, "start": 5157.52, "end": 5164.52, "text": " Your space could use a GPU. What does that mean? Is that a thing?", "tokens": [2260, 1901, 727, 764, 257, 18407, 13, 708, 775, 300, 914, 30, 1119, 300, 257, 551, 30], "temperature": 0.0, "avg_logprob": -0.1912987588465899, "compression_ratio": 1.525, "no_speech_prob": 6.2406284087046515e-06}, {"id": 732, "seek": 515252, "start": 5164.52, "end": 5171.52, "text": " I don't know. Like I think they provide it if you like, email them or something like that. It's a custom kind of thing.", "tokens": [286, 500, 380, 458, 13, 1743, 286, 519, 436, 2893, 309, 498, 291, 411, 11, 3796, 552, 420, 746, 411, 300, 13, 467, 311, 257, 2375, 733, 295, 551, 13], "temperature": 0.0, "avg_logprob": -0.1912987588465899, "compression_ratio": 1.525, "no_speech_prob": 6.2406284087046515e-06}, {"id": 733, "seek": 515252, "start": 5171.52, "end": 5173.52, "text": " Oh, right.", "tokens": [876, 11, 558, 13], "temperature": 0.0, "avg_logprob": -0.1912987588465899, "compression_ratio": 1.525, "no_speech_prob": 6.2406284087046515e-06}, {"id": 734, "seek": 515252, "start": 5173.52, "end": 5181.52, "text": " I don't like emailing people.", "tokens": [286, 500, 380, 411, 3796, 278, 561, 13], "temperature": 0.0, "avg_logprob": -0.1912987588465899, "compression_ratio": 1.525, "no_speech_prob": 6.2406284087046515e-06}, {"id": 735, "seek": 518152, "start": 5181.52, "end": 5187.52, "text": " It makes me feel like I'm being judged.", "tokens": [467, 1669, 385, 841, 411, 286, 478, 885, 27485, 13], "temperature": 0.0, "avg_logprob": -0.15286898612976074, "compression_ratio": 1.1546391752577319, "no_speech_prob": 1.0128121175512206e-05}, {"id": 736, "seek": 518152, "start": 5187.52, "end": 5189.52, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.15286898612976074, "compression_ratio": 1.1546391752577319, "no_speech_prob": 1.0128121175512206e-05}, {"id": 737, "seek": 518152, "start": 5189.52, "end": 5194.52, "text": " Is it happening, I think.", "tokens": [1119, 309, 2737, 11, 286, 519, 13], "temperature": 0.0, "avg_logprob": -0.15286898612976074, "compression_ratio": 1.1546391752577319, "no_speech_prob": 1.0128121175512206e-05}, {"id": 738, "seek": 518152, "start": 5194.52, "end": 5197.52, "text": " Yeah, it's a little slow, I guess.", "tokens": [865, 11, 309, 311, 257, 707, 2964, 11, 286, 2041, 13], "temperature": 0.0, "avg_logprob": -0.15286898612976074, "compression_ratio": 1.1546391752577319, "no_speech_prob": 1.0128121175512206e-05}, {"id": 739, "seek": 518152, "start": 5197.52, "end": 5207.52, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.15286898612976074, "compression_ratio": 1.1546391752577319, "no_speech_prob": 1.0128121175512206e-05}, {"id": 740, "seek": 520752, "start": 5207.52, "end": 5213.52, "text": " So I want to ask how long do you plan to keep this live coding running? Is it just indefinitely?", "tokens": [407, 286, 528, 281, 1029, 577, 938, 360, 291, 1393, 281, 1066, 341, 1621, 17720, 2614, 30, 1119, 309, 445, 24162, 10925, 30], "temperature": 0.0, "avg_logprob": -0.13444025571956192, "compression_ratio": 1.1637931034482758, "no_speech_prob": 3.0883475119480863e-06}, {"id": 741, "seek": 520752, "start": 5213.52, "end": 5217.52, "text": " Yeah, I've got a plan, actually.", "tokens": [865, 11, 286, 600, 658, 257, 1393, 11, 767, 13], "temperature": 0.0, "avg_logprob": -0.13444025571956192, "compression_ratio": 1.1637931034482758, "no_speech_prob": 3.0883475119480863e-06}, {"id": 742, "seek": 520752, "start": 5217.52, "end": 5218.52, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.13444025571956192, "compression_ratio": 1.1637931034482758, "no_speech_prob": 3.0883475119480863e-06}, {"id": 743, "seek": 521852, "start": 5218.52, "end": 5238.52, "text": " I hope you guys don't think it's too crazy.", "tokens": [50364, 286, 1454, 291, 1074, 500, 380, 519, 309, 311, 886, 3219, 13, 51364], "temperature": 0.0, "avg_logprob": -0.19955676396687824, "compression_ratio": 0.8431372549019608, "no_speech_prob": 5.9108562709297985e-05}, {"id": 744, "seek": 524852, "start": 5248.52, "end": 5255.52, "text": " Important lunch discussions.", "tokens": [42908, 6349, 11088, 13], "temperature": 0.0, "avg_logprob": -0.20851236895511024, "compression_ratio": 1.1981981981981982, "no_speech_prob": 0.12575365602970123}, {"id": 745, "seek": 524852, "start": 5255.52, "end": 5266.52, "text": " All right. So why is it still building?", "tokens": [1057, 558, 13, 407, 983, 307, 309, 920, 2390, 30], "temperature": 0.0, "avg_logprob": -0.20851236895511024, "compression_ratio": 1.1981981981981982, "no_speech_prob": 0.12575365602970123}, {"id": 746, "seek": 524852, "start": 5266.52, "end": 5273.52, "text": " So hopefully, you know, get the course out in a couple of weeks.", "tokens": [407, 4696, 11, 291, 458, 11, 483, 264, 1164, 484, 294, 257, 1916, 295, 3259, 13], "temperature": 0.0, "avg_logprob": -0.20851236895511024, "compression_ratio": 1.1981981981981982, "no_speech_prob": 0.12575365602970123}, {"id": 747, "seek": 527352, "start": 5273.52, "end": 5283.52, "text": " And at that point, I'm thinking of like resetting this as a walkthrough in which, you know, things are actually better organized.", "tokens": [400, 412, 300, 935, 11, 286, 478, 1953, 295, 411, 14322, 783, 341, 382, 257, 1792, 11529, 294, 597, 11, 291, 458, 11, 721, 366, 767, 1101, 9983, 13], "temperature": 0.0, "avg_logprob": -0.10740706361370322, "compression_ratio": 1.5467289719626167, "no_speech_prob": 2.0141349523328245e-05}, {"id": 748, "seek": 527352, "start": 5283.52, "end": 5298.52, "text": " And so I hope you guys can still join. I mean, it will be stuff you're already familiar with at this point, but certainly be helpful to have a nice to me to have familiar faces and people who can help.", "tokens": [400, 370, 286, 1454, 291, 1074, 393, 920, 3917, 13, 286, 914, 11, 309, 486, 312, 1507, 291, 434, 1217, 4963, 365, 412, 341, 935, 11, 457, 3297, 312, 4961, 281, 362, 257, 1481, 281, 385, 281, 362, 4963, 8475, 293, 561, 567, 393, 854, 13], "temperature": 0.0, "avg_logprob": -0.10740706361370322, "compression_ratio": 1.5467289719626167, "no_speech_prob": 2.0141349523328245e-05}, {"id": 749, "seek": 529852, "start": 5298.52, "end": 5311.52, "text": " So hopefully that'll be a lot more people because it'll be open to everybody. And over a period of a few weeks, you know, we'll catch up to where we are now as a group.", "tokens": [407, 4696, 300, 603, 312, 257, 688, 544, 561, 570, 309, 603, 312, 1269, 281, 2201, 13, 400, 670, 257, 2896, 295, 257, 1326, 3259, 11, 291, 458, 11, 321, 603, 3745, 493, 281, 689, 321, 366, 586, 382, 257, 1594, 13], "temperature": 0.0, "avg_logprob": -0.082894287109375, "compression_ratio": 1.4840425531914894, "no_speech_prob": 1.6439149476354942e-05}, {"id": 750, "seek": 529852, "start": 5311.52, "end": 5321.52, "text": " But for the couple of weeks before that I'm planning to do a complete change, which is to do two weeks of APL.", "tokens": [583, 337, 264, 1916, 295, 3259, 949, 300, 286, 478, 5038, 281, 360, 257, 3566, 1319, 11, 597, 307, 281, 360, 732, 3259, 295, 5372, 43, 13], "temperature": 0.0, "avg_logprob": -0.082894287109375, "compression_ratio": 1.4840425531914894, "no_speech_prob": 1.6439149476354942e-05}, {"id": 751, "seek": 532152, "start": 5321.52, "end": 5334.52, "text": " So I don't know if you guys are aware of APL, but APL is just about the world's oldest programming language that's still widely used.", "tokens": [407, 286, 500, 380, 458, 498, 291, 1074, 366, 3650, 295, 5372, 43, 11, 457, 5372, 43, 307, 445, 466, 264, 1002, 311, 14026, 9410, 2856, 300, 311, 920, 13371, 1143, 13], "temperature": 0.0, "avg_logprob": -0.09045180229291525, "compression_ratio": 1.5934065934065933, "no_speech_prob": 1.696035178611055e-05}, {"id": 752, "seek": 532152, "start": 5334.52, "end": 5339.52, "text": " And it's actually, we talked about notation earlier, it's actually a notation.", "tokens": [400, 309, 311, 767, 11, 321, 2825, 466, 24657, 3071, 11, 309, 311, 767, 257, 24657, 13], "temperature": 0.0, "avg_logprob": -0.09045180229291525, "compression_ratio": 1.5934065934065933, "no_speech_prob": 1.696035178611055e-05}, {"id": 753, "seek": 532152, "start": 5339.52, "end": 5349.52, "text": " So APL was originally developed as a notation, not as a programming language.", "tokens": [407, 5372, 43, 390, 7993, 4743, 382, 257, 24657, 11, 406, 382, 257, 9410, 2856, 13], "temperature": 0.0, "avg_logprob": -0.09045180229291525, "compression_ratio": 1.5934065934065933, "no_speech_prob": 1.696035178611055e-05}, {"id": 754, "seek": 534952, "start": 5349.52, "end": 5357.52, "text": " And it won, Iveson won the Turing Award, which is kind of like the Nobel Prize of computer science for it.", "tokens": [400, 309, 1582, 11, 286, 977, 266, 1582, 264, 314, 1345, 13894, 11, 597, 307, 733, 295, 411, 264, 24611, 22604, 295, 3820, 3497, 337, 309, 13], "temperature": 0.0, "avg_logprob": -0.14221312636035985, "compression_ratio": 1.3291139240506329, "no_speech_prob": 8.137810254993383e-06}, {"id": 755, "seek": 534952, "start": 5357.52, "end": 5364.52, "text": " For this paper about it, which was written about 20 years after he created the notation.", "tokens": [1171, 341, 3035, 466, 309, 11, 597, 390, 3720, 466, 945, 924, 934, 415, 2942, 264, 24657, 13], "temperature": 0.0, "avg_logprob": -0.14221312636035985, "compression_ratio": 1.3291139240506329, "no_speech_prob": 8.137810254993383e-06}, {"id": 756, "seek": 534952, "start": 5364.52, "end": 5369.52, "text": " APL is a show.", "tokens": [5372, 43, 307, 257, 855, 13], "temperature": 0.0, "avg_logprob": -0.14221312636035985, "compression_ratio": 1.3291139240506329, "no_speech_prob": 8.137810254993383e-06}, {"id": 757, "seek": 536952, "start": 5369.52, "end": 5379.52, "text": " So the most common, why is this not working? Oh, because they're not using Windows. I have to press that.", "tokens": [407, 264, 881, 2689, 11, 983, 307, 341, 406, 1364, 30, 876, 11, 570, 436, 434, 406, 1228, 8591, 13, 286, 362, 281, 1886, 300, 13], "temperature": 0.0, "avg_logprob": -0.19648845990498862, "compression_ratio": 1.4025974025974026, "no_speech_prob": 5.421493369794916e-06}, {"id": 758, "seek": 536952, "start": 5379.52, "end": 5387.52, "text": " So the most widely used APL implementation, there's a lot of them, but the most widely used one is CoreDialog.", "tokens": [407, 264, 881, 13371, 1143, 5372, 43, 11420, 11, 456, 311, 257, 688, 295, 552, 11, 457, 264, 881, 13371, 1143, 472, 307, 14798, 35, 831, 664, 13], "temperature": 0.0, "avg_logprob": -0.19648845990498862, "compression_ratio": 1.4025974025974026, "no_speech_prob": 5.421493369794916e-06}, {"id": 759, "seek": 538752, "start": 5387.52, "end": 5400.52, "text": " And yeah, it's basically, it's basically math.", "tokens": [400, 1338, 11, 309, 311, 1936, 11, 309, 311, 1936, 5221, 13], "temperature": 0.0, "avg_logprob": -0.19816219806671143, "compression_ratio": 1.25, "no_speech_prob": 2.9763288694084622e-05}, {"id": 760, "seek": 538752, "start": 5400.52, "end": 5411.52, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.19816219806671143, "compression_ratio": 1.25, "no_speech_prob": 2.9763288694084622e-05}, {"id": 761, "seek": 538752, "start": 5411.52, "end": 5416.52, "text": " Okay, looks like math.", "tokens": [1033, 11, 1542, 411, 5221, 13], "temperature": 0.0, "avg_logprob": -0.19816219806671143, "compression_ratio": 1.25, "no_speech_prob": 2.9763288694084622e-05}, {"id": 762, "seek": 541652, "start": 5416.52, "end": 5425.52, "text": " But imagine if you started with math, which itself has been developed over hundreds of years by very smart people.", "tokens": [583, 3811, 498, 291, 1409, 365, 5221, 11, 597, 2564, 575, 668, 4743, 670, 6779, 295, 924, 538, 588, 4069, 561, 13], "temperature": 0.0, "avg_logprob": -0.09869394302368165, "compression_ratio": 1.6121495327102804, "no_speech_prob": 1.9218943634768948e-05}, {"id": 763, "seek": 541652, "start": 5425.52, "end": 5434.52, "text": " And then one of the smartest people in the world, being Ken Iveson, then took everything from that and combined it with", "tokens": [400, 550, 472, 295, 264, 41491, 561, 294, 264, 1002, 11, 885, 8273, 286, 977, 266, 11, 550, 1890, 1203, 490, 300, 293, 9354, 309, 365], "temperature": 0.0, "avg_logprob": -0.09869394302368165, "compression_ratio": 1.6121495327102804, "no_speech_prob": 1.9218943634768948e-05}, {"id": 764, "seek": 541652, "start": 5434.52, "end": 5440.52, "text": " tensor analysis ideas from physics, which have been developed by mainly Albert Einstein and many other people.", "tokens": [40863, 5215, 3487, 490, 10649, 11, 597, 362, 668, 4743, 538, 8704, 20812, 23486, 293, 867, 661, 561, 13], "temperature": 0.0, "avg_logprob": -0.09869394302368165, "compression_ratio": 1.6121495327102804, "no_speech_prob": 1.9218943634768948e-05}, {"id": 765, "seek": 544052, "start": 5440.52, "end": 5446.52, "text": " And then combine that with", "tokens": [400, 550, 10432, 300, 365], "temperature": 0.0, "avg_logprob": -0.12322780915669032, "compression_ratio": 1.3836477987421383, "no_speech_prob": 3.089252686550026e-06}, {"id": 766, "seek": 544052, "start": 5446.52, "end": 5449.52, "text": " ideas from computer science.", "tokens": [3487, 490, 3820, 3497, 13], "temperature": 0.0, "avg_logprob": -0.12322780915669032, "compression_ratio": 1.3836477987421383, "no_speech_prob": 3.089252686550026e-06}, {"id": 767, "seek": 544052, "start": 5449.52, "end": 5457.52, "text": " And then have a large group of people continuously work on that from 1960 through to 2022.", "tokens": [400, 550, 362, 257, 2416, 1594, 295, 561, 15684, 589, 322, 300, 490, 16157, 807, 281, 20229, 13], "temperature": 0.0, "avg_logprob": -0.12322780915669032, "compression_ratio": 1.3836477987421383, "no_speech_prob": 3.089252686550026e-06}, {"id": 768, "seek": 544052, "start": 5457.52, "end": 5463.52, "text": " So it's got a 60 years of continuous development. And that gives you APL.", "tokens": [407, 309, 311, 658, 257, 4060, 924, 295, 10957, 3250, 13, 400, 300, 2709, 291, 5372, 43, 13], "temperature": 0.0, "avg_logprob": -0.12322780915669032, "compression_ratio": 1.3836477987421383, "no_speech_prob": 3.089252686550026e-06}, {"id": 769, "seek": 546352, "start": 5463.52, "end": 5471.52, "text": " And so just to give you a taste, in math, to add up a series, we use capital sigma.", "tokens": [400, 370, 445, 281, 976, 291, 257, 3939, 11, 294, 5221, 11, 281, 909, 493, 257, 2638, 11, 321, 764, 4238, 12771, 13], "temperature": 0.0, "avg_logprob": -0.11691235133579798, "compression_ratio": 1.6242424242424243, "no_speech_prob": 6.438786840590183e-06}, {"id": 770, "seek": 546352, "start": 5471.52, "end": 5478.52, "text": " Right. And capital sigma means only one thing. It means add up a series.", "tokens": [1779, 13, 400, 4238, 12771, 1355, 787, 472, 551, 13, 467, 1355, 909, 493, 257, 2638, 13], "temperature": 0.0, "avg_logprob": -0.11691235133579798, "compression_ratio": 1.6242424242424243, "no_speech_prob": 6.438786840590183e-06}, {"id": 771, "seek": 546352, "start": 5478.52, "end": 5486.52, "text": " If you want to multiply together a series, you have to use something completely different, which is capital pi.", "tokens": [759, 291, 528, 281, 12972, 1214, 257, 2638, 11, 291, 362, 281, 764, 746, 2584, 819, 11, 597, 307, 4238, 3895, 13], "temperature": 0.0, "avg_logprob": -0.11691235133579798, "compression_ratio": 1.6242424242424243, "no_speech_prob": 6.438786840590183e-06}, {"id": 772, "seek": 548652, "start": 5486.52, "end": 5500.52, "text": " APL instead has this idea that says you can take a function like plus, and you can modify it using something that they call an operator.", "tokens": [5372, 43, 2602, 575, 341, 1558, 300, 1619, 291, 393, 747, 257, 2445, 411, 1804, 11, 293, 291, 393, 16927, 309, 1228, 746, 300, 436, 818, 364, 12973, 13], "temperature": 0.0, "avg_logprob": -0.13347656662399704, "compression_ratio": 1.6, "no_speech_prob": 6.438873697334202e-06}, {"id": 773, "seek": 548652, "start": 5500.52, "end": 5505.52, "text": " So plus is a function. Slash is an operator. Doesn't mean divide. Divided by means divided.", "tokens": [407, 1804, 307, 257, 2445, 13, 6187, 1299, 307, 364, 12973, 13, 12955, 380, 914, 9845, 13, 413, 1843, 292, 538, 1355, 6666, 13], "temperature": 0.0, "avg_logprob": -0.13347656662399704, "compression_ratio": 1.6, "no_speech_prob": 6.438873697334202e-06}, {"id": 774, "seek": 548652, "start": 5505.52, "end": 5511.52, "text": " And this operator, what it does is it takes a list.", "tokens": [400, 341, 12973, 11, 437, 309, 775, 307, 309, 2516, 257, 1329, 13], "temperature": 0.0, "avg_logprob": -0.13347656662399704, "compression_ratio": 1.6, "no_speech_prob": 6.438873697334202e-06}, {"id": 775, "seek": 551152, "start": 5511.52, "end": 5518.52, "text": " That's a list. Right. And it inserts this between every pair of things in the list,", "tokens": [663, 311, 257, 1329, 13, 1779, 13, 400, 309, 49163, 341, 1296, 633, 6119, 295, 721, 294, 264, 1329, 11], "temperature": 0.0, "avg_logprob": -0.1104653278986613, "compression_ratio": 1.4736842105263157, "no_speech_prob": 6.438884156523272e-06}, {"id": 776, "seek": 551152, "start": 5518.52, "end": 5523.52, "text": " which is the same as sigma. Right. In math.", "tokens": [597, 307, 264, 912, 382, 12771, 13, 1779, 13, 682, 5221, 13], "temperature": 0.0, "avg_logprob": -0.1104653278986613, "compression_ratio": 1.4736842105263157, "no_speech_prob": 6.438884156523272e-06}, {"id": 777, "seek": 551152, "start": 5523.52, "end": 5531.52, "text": " And so here's how to do the same thing as capital pi in math.", "tokens": [400, 370, 510, 311, 577, 281, 360, 264, 912, 551, 382, 4238, 3895, 294, 5221, 13], "temperature": 0.0, "avg_logprob": -0.1104653278986613, "compression_ratio": 1.4736842105263157, "no_speech_prob": 6.438884156523272e-06}, {"id": 778, "seek": 551152, "start": 5531.52, "end": 5535.52, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.1104653278986613, "compression_ratio": 1.4736842105263157, "no_speech_prob": 6.438884156523272e-06}, {"id": 779, "seek": 553552, "start": 5535.52, "end": 5542.52, "text": " So, for example, here's so then there's a bunch of other symbols. Right.", "tokens": [407, 11, 337, 1365, 11, 510, 311, 370, 550, 456, 311, 257, 3840, 295, 661, 16944, 13, 1779, 13], "temperature": 0.0, "avg_logprob": -0.10838887805030459, "compression_ratio": 1.6274509803921569, "no_speech_prob": 7.76648084865883e-06}, {"id": 780, "seek": 553552, "start": 5542.52, "end": 5545.52, "text": " So, for example, a symbol which actually finds that way.", "tokens": [407, 11, 337, 1365, 11, 257, 5986, 597, 767, 10704, 300, 636, 13], "temperature": 0.0, "avg_logprob": -0.10838887805030459, "compression_ratio": 1.6274509803921569, "no_speech_prob": 7.76648084865883e-06}, {"id": 781, "seek": 553552, "start": 5545.52, "end": 5550.52, "text": " So lots and lots of ideas from APL have found their way into other programming languages.", "tokens": [407, 3195, 293, 3195, 295, 3487, 490, 5372, 43, 362, 1352, 641, 636, 666, 661, 9410, 8650, 13], "temperature": 0.0, "avg_logprob": -0.10838887805030459, "compression_ratio": 1.6274509803921569, "no_speech_prob": 7.76648084865883e-06}, {"id": 782, "seek": 553552, "start": 5550.52, "end": 5560.52, "text": " One of them is a lot of programming languages have something called IOTA, which means the same thing as range in", "tokens": [1485, 295, 552, 307, 257, 688, 295, 9410, 8650, 362, 746, 1219, 286, 5068, 32, 11, 597, 1355, 264, 912, 551, 382, 3613, 294], "temperature": 0.0, "avg_logprob": -0.10838887805030459, "compression_ratio": 1.6274509803921569, "no_speech_prob": 7.76648084865883e-06}, {"id": 783, "seek": 556052, "start": 5560.52, "end": 5568.52, "text": " Python. So IOTA is six. It means almost the same thing as range. It's range plus one, if you like, rather than zero to five.", "tokens": [15329, 13, 407, 286, 5068, 32, 307, 2309, 13, 467, 1355, 1920, 264, 912, 551, 382, 3613, 13, 467, 311, 3613, 1804, 472, 11, 498, 291, 411, 11, 2831, 813, 4018, 281, 1732, 13], "temperature": 0.0, "avg_logprob": -0.19675975892601943, "compression_ratio": 1.4564102564102563, "no_speech_prob": 2.0784629668924026e-05}, {"id": 784, "seek": 556052, "start": 5568.52, "end": 5576.52, "text": " It's one to six. This is how sequences and series are defined in math. In math, we start at one normally.", "tokens": [467, 311, 472, 281, 2309, 13, 639, 307, 577, 22978, 293, 2638, 366, 7642, 294, 5221, 13, 682, 5221, 11, 321, 722, 412, 472, 5646, 13], "temperature": 0.0, "avg_logprob": -0.19675975892601943, "compression_ratio": 1.4564102564102563, "no_speech_prob": 2.0784629668924026e-05}, {"id": 785, "seek": 556052, "start": 5576.52, "end": 5584.52, "text": " So if I want to do factorial, right, I could do apply", "tokens": [407, 498, 286, 528, 281, 360, 36916, 11, 558, 11, 286, 727, 360, 3079], "temperature": 0.0, "avg_logprob": -0.19675975892601943, "compression_ratio": 1.4564102564102563, "no_speech_prob": 2.0784629668924026e-05}, {"id": 786, "seek": 558452, "start": 5584.52, "end": 5591.52, "text": " time slash sorry, apply time slash to IOTA six.", "tokens": [565, 17330, 2597, 11, 3079, 565, 17330, 281, 286, 5068, 32, 2309, 13], "temperature": 0.0, "avg_logprob": -0.15320744312984844, "compression_ratio": 1.6, "no_speech_prob": 1.6797068838059204e-06}, {"id": 787, "seek": 558452, "start": 5591.52, "end": 5596.52, "text": " So that's going to take one to you actually read right to left in APL.", "tokens": [407, 300, 311, 516, 281, 747, 472, 281, 291, 767, 1401, 558, 281, 1411, 294, 5372, 43, 13], "temperature": 0.0, "avg_logprob": -0.15320744312984844, "compression_ratio": 1.6, "no_speech_prob": 1.6797068838059204e-06}, {"id": 788, "seek": 558452, "start": 5596.52, "end": 5604.52, "text": " So that takes this series here and sticks times between every pair of things in it.", "tokens": [407, 300, 2516, 341, 2638, 510, 293, 12518, 1413, 1296, 633, 6119, 295, 721, 294, 309, 13], "temperature": 0.0, "avg_logprob": -0.15320744312984844, "compression_ratio": 1.6, "no_speech_prob": 1.6797068838059204e-06}, {"id": 789, "seek": 558452, "start": 5604.52, "end": 5609.52, "text": " So one times two times three times four times five times six.", "tokens": [407, 472, 1413, 732, 1413, 1045, 1413, 1451, 1413, 1732, 1413, 2309, 13], "temperature": 0.0, "avg_logprob": -0.15320744312984844, "compression_ratio": 1.6, "no_speech_prob": 1.6797068838059204e-06}, {"id": 790, "seek": 560952, "start": 5609.52, "end": 5618.52, "text": " You get the idea? And so I'll give you an example of another operator. Backslash is the same as slash, except it basically it's cumulative.", "tokens": [509, 483, 264, 1558, 30, 400, 370, 286, 603, 976, 291, 364, 1365, 295, 1071, 12973, 13, 5833, 10418, 1299, 307, 264, 912, 382, 17330, 11, 3993, 309, 1936, 309, 311, 38379, 13], "temperature": 0.0, "avg_logprob": -0.14203872887984567, "compression_ratio": 1.9513513513513514, "no_speech_prob": 8.397820238315035e-06}, {"id": 791, "seek": 560952, "start": 5618.52, "end": 5621.52, "text": " It shows me the results as I go.", "tokens": [467, 3110, 385, 264, 3542, 382, 286, 352, 13], "temperature": 0.0, "avg_logprob": -0.14203872887984567, "compression_ratio": 1.9513513513513514, "no_speech_prob": 8.397820238315035e-06}, {"id": 792, "seek": 560952, "start": 5621.52, "end": 5633.52, "text": " This is one, one times two, one times two times three, one times two times three times four, one times two times four times five, one times two times three times four times five times six.", "tokens": [639, 307, 472, 11, 472, 1413, 732, 11, 472, 1413, 732, 1413, 1045, 11, 472, 1413, 732, 1413, 1045, 1413, 1451, 11, 472, 1413, 732, 1413, 1451, 1413, 1732, 11, 472, 1413, 732, 1413, 1045, 1413, 1451, 1413, 1732, 1413, 2309, 13], "temperature": 0.0, "avg_logprob": -0.14203872887984567, "compression_ratio": 1.9513513513513514, "no_speech_prob": 8.397820238315035e-06}, {"id": 793, "seek": 563352, "start": 5633.52, "end": 5639.52, "text": " So it's basically, yeah, it's a notation.", "tokens": [407, 309, 311, 1936, 11, 1338, 11, 309, 311, 257, 24657, 13], "temperature": 0.0, "avg_logprob": -0.14649475537813628, "compression_ratio": 1.450381679389313, "no_speech_prob": 1.6962314475676976e-05}, {"id": 794, "seek": 563352, "start": 5639.52, "end": 5648.52, "text": " It's, you know, built on mathematical notation.", "tokens": [467, 311, 11, 291, 458, 11, 3094, 322, 18894, 24657, 13], "temperature": 0.0, "avg_logprob": -0.14649475537813628, "compression_ratio": 1.450381679389313, "no_speech_prob": 1.6962314475676976e-05}, {"id": 795, "seek": 563352, "start": 5648.52, "end": 5657.52, "text": " Jeremy, can you handle complex number as well? Yes, absolutely. Yeah, absolutely. So complex numbers", "tokens": [17809, 11, 393, 291, 4813, 3997, 1230, 382, 731, 30, 1079, 11, 3122, 13, 865, 11, 3122, 13, 407, 3997, 3547], "temperature": 0.0, "avg_logprob": -0.14649475537813628, "compression_ratio": 1.450381679389313, "no_speech_prob": 1.6962314475676976e-05}, {"id": 796, "seek": 565752, "start": 5657.52, "end": 5671.52, "text": " are written with J. That's a complex number. And so one of the interesting things about APL is every function, or nearly every function, maybe every function, has both monadic and dyadic forms.", "tokens": [366, 3720, 365, 508, 13, 663, 311, 257, 3997, 1230, 13, 400, 370, 472, 295, 264, 1880, 721, 466, 5372, 43, 307, 633, 2445, 11, 420, 6217, 633, 2445, 11, 1310, 633, 2445, 11, 575, 1293, 1108, 43341, 293, 14584, 43341, 6422, 13], "temperature": 0.0, "avg_logprob": -0.14384855226028798, "compression_ratio": 1.645933014354067, "no_speech_prob": 6.438632681238232e-06}, {"id": 797, "seek": 565752, "start": 5671.52, "end": 5681.52, "text": " The dyadic form means it takes two arguments, one on the left and one on the right. So here are the dyadic versions of plus, minus, divide, and times.", "tokens": [440, 14584, 43341, 1254, 1355, 309, 2516, 732, 12869, 11, 472, 322, 264, 1411, 293, 472, 322, 264, 558, 13, 407, 510, 366, 264, 14584, 43341, 9606, 295, 1804, 11, 3175, 11, 9845, 11, 293, 1413, 13], "temperature": 0.0, "avg_logprob": -0.14384855226028798, "compression_ratio": 1.645933014354067, "no_speech_prob": 6.438632681238232e-06}, {"id": 798, "seek": 568152, "start": 5681.52, "end": 5692.52, "text": " But there's also monadic versions. And so for example, so if I wave my mouse over any of these, it tells me, so the dyadic version of plus is plus, obviously.", "tokens": [583, 456, 311, 611, 1108, 43341, 9606, 13, 400, 370, 337, 1365, 11, 370, 498, 286, 5772, 452, 9719, 670, 604, 295, 613, 11, 309, 5112, 385, 11, 370, 264, 14584, 43341, 3037, 295, 1804, 307, 1804, 11, 2745, 13], "temperature": 0.0, "avg_logprob": -0.12812128331926134, "compression_ratio": 1.5823529411764705, "no_speech_prob": 2.225254775112262e-06}, {"id": 799, "seek": 568152, "start": 5692.52, "end": 5699.52, "text": " The monadic version is conjugate, which is a", "tokens": [440, 1108, 43341, 3037, 307, 45064, 11, 597, 307, 257], "temperature": 0.0, "avg_logprob": -0.12812128331926134, "compression_ratio": 1.5823529411764705, "no_speech_prob": 2.225254775112262e-06}, {"id": 800, "seek": 568152, "start": 5699.52, "end": 5705.52, "text": " complex number thing. So the conjugate of real number two is two.", "tokens": [3997, 1230, 551, 13, 407, 264, 45064, 295, 957, 1230, 732, 307, 732, 13], "temperature": 0.0, "avg_logprob": -0.12812128331926134, "compression_ratio": 1.5823529411764705, "no_speech_prob": 2.225254775112262e-06}, {"id": 801, "seek": 570552, "start": 5705.52, "end": 5713.52, "text": " The conjugate of the real number two y plus three", "tokens": [440, 45064, 295, 264, 957, 1230, 732, 288, 1804, 1045], "temperature": 0.0, "avg_logprob": -0.18614757304288904, "compression_ratio": 1.3636363636363635, "no_speech_prob": 4.289136541046901e-06}, {"id": 802, "seek": 570552, "start": 5713.52, "end": 5717.52, "text": " is two i minus three.", "tokens": [307, 732, 741, 3175, 1045, 13], "temperature": 0.0, "avg_logprob": -0.18614757304288904, "compression_ratio": 1.3636363636363635, "no_speech_prob": 4.289136541046901e-06}, {"id": 803, "seek": 570552, "start": 5717.52, "end": 5729.52, "text": " So, yeah, it's, yeah, handles, it's kind of in some ways a superset of mathematical notation.", "tokens": [407, 11, 1338, 11, 309, 311, 11, 1338, 11, 18722, 11, 309, 311, 733, 295, 294, 512, 2098, 257, 37906, 302, 295, 18894, 24657, 13], "temperature": 0.0, "avg_logprob": -0.18614757304288904, "compression_ratio": 1.3636363636363635, "no_speech_prob": 4.289136541046901e-06}, {"id": 804, "seek": 572952, "start": 5729.52, "end": 5746.52, "text": " And so, yeah, it's not just plus, minus, times, divide, but see all these different things at the top? There's all of these as well. Some of which you'll recognize, like epsilon, which as you'd expect, means membership", "tokens": [400, 370, 11, 1338, 11, 309, 311, 406, 445, 1804, 11, 3175, 11, 1413, 11, 9845, 11, 457, 536, 439, 613, 819, 721, 412, 264, 1192, 30, 821, 311, 439, 295, 613, 382, 731, 13, 2188, 295, 597, 291, 603, 5521, 11, 411, 17889, 11, 597, 382, 291, 1116, 2066, 11, 1355, 16560], "temperature": 0.0, "avg_logprob": -0.15030423255815897, "compression_ratio": 1.430939226519337, "no_speech_prob": 2.156754590032506e-06}, {"id": 805, "seek": 572952, "start": 5746.52, "end": 5748.52, "text": " as dyadic.", "tokens": [382, 14584, 43341, 13], "temperature": 0.0, "avg_logprob": -0.15030423255815897, "compression_ratio": 1.430939226519337, "no_speech_prob": 2.156754590032506e-06}, {"id": 806, "seek": 572952, "start": 5748.52, "end": 5751.52, "text": " That also has a monadic form.", "tokens": [663, 611, 575, 257, 1108, 43341, 1254, 13], "temperature": 0.0, "avg_logprob": -0.15030423255815897, "compression_ratio": 1.430939226519337, "no_speech_prob": 2.156754590032506e-06}, {"id": 807, "seek": 575152, "start": 5751.52, "end": 5767.52, "text": " So it does a lot more things than normal math notation. And so some of them, like, are really quite interesting. So for example, there's something called upstyle, which is, looks like this.", "tokens": [407, 309, 775, 257, 688, 544, 721, 813, 2710, 5221, 24657, 13, 400, 370, 512, 295, 552, 11, 411, 11, 366, 534, 1596, 1880, 13, 407, 337, 1365, 11, 456, 311, 746, 1219, 493, 15014, 11, 597, 307, 11, 1542, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.13291773924956451, "compression_ratio": 1.5677083333333333, "no_speech_prob": 1.6797127955214819e-06}, {"id": 808, "seek": 575152, "start": 5767.52, "end": 5772.52, "text": " And it returns the maximum of those two things.", "tokens": [400, 309, 11247, 264, 6674, 295, 729, 732, 721, 13], "temperature": 0.0, "avg_logprob": -0.13291773924956451, "compression_ratio": 1.5677083333333333, "no_speech_prob": 1.6797127955214819e-06}, {"id": 809, "seek": 575152, "start": 5772.52, "end": 5780.52, "text": " Now where that gets interesting is, what if we do maximum slash", "tokens": [823, 689, 300, 2170, 1880, 307, 11, 437, 498, 321, 360, 6674, 17330], "temperature": 0.0, "avg_logprob": -0.13291773924956451, "compression_ratio": 1.5677083333333333, "no_speech_prob": 1.6797127955214819e-06}, {"id": 810, "seek": 578052, "start": 5780.52, "end": 5788.52, "text": " what did that do? Well that did the maximum of four and three, sorry, maximum of five and four.", "tokens": [437, 630, 300, 360, 30, 1042, 300, 630, 264, 6674, 295, 1451, 293, 1045, 11, 2597, 11, 6674, 295, 1732, 293, 1451, 13], "temperature": 0.0, "avg_logprob": -0.16497086987052997, "compression_ratio": 2.132947976878613, "no_speech_prob": 1.1300303413008805e-05}, {"id": 811, "seek": 578052, "start": 5788.52, "end": 5802.52, "text": " And then it was the maximum of that and six, and then the maximum of that and four, and then the maximum of that and three. So in other words it's five upstyle four upstyle six upstyle four upstyle three, which when you think about it as the maximum of the list.", "tokens": [400, 550, 309, 390, 264, 6674, 295, 300, 293, 2309, 11, 293, 550, 264, 6674, 295, 300, 293, 1451, 11, 293, 550, 264, 6674, 295, 300, 293, 1045, 13, 407, 294, 661, 2283, 309, 311, 1732, 493, 15014, 1451, 493, 15014, 2309, 493, 15014, 1451, 493, 15014, 1045, 11, 597, 562, 291, 519, 466, 309, 382, 264, 6674, 295, 264, 1329, 13], "temperature": 0.0, "avg_logprob": -0.16497086987052997, "compression_ratio": 2.132947976878613, "no_speech_prob": 1.1300303413008805e-05}, {"id": 812, "seek": 578052, "start": 5802.52, "end": 5805.52, "text": " Right. So,", "tokens": [1779, 13, 407, 11], "temperature": 0.0, "avg_logprob": -0.16497086987052997, "compression_ratio": 2.132947976878613, "no_speech_prob": 1.1300303413008805e-05}, {"id": 813, "seek": 580552, "start": 5805.52, "end": 5814.52, "text": " a lot of kind of things that in normal math notation we have to, like invent something in the paper as we go or whatever in APL.", "tokens": [257, 688, 295, 733, 295, 721, 300, 294, 2710, 5221, 24657, 321, 362, 281, 11, 411, 7962, 746, 294, 264, 3035, 382, 321, 352, 420, 2035, 294, 5372, 43, 13], "temperature": 0.0, "avg_logprob": -0.12624557813008627, "compression_ratio": 1.4692737430167597, "no_speech_prob": 2.4822927571221953e-06}, {"id": 814, "seek": 580552, "start": 5814.52, "end": 5818.52, "text": " It's this this kind of like natural extension.", "tokens": [467, 311, 341, 341, 733, 295, 411, 3303, 10320, 13], "temperature": 0.0, "avg_logprob": -0.12624557813008627, "compression_ratio": 1.4692737430167597, "no_speech_prob": 2.4822927571221953e-06}, {"id": 815, "seek": 580552, "start": 5818.52, "end": 5828.52, "text": " So, yeah, so I just, I thought it'd be fun to have a couple of weeks of exploring this.", "tokens": [407, 11, 1338, 11, 370, 286, 445, 11, 286, 1194, 309, 1116, 312, 1019, 281, 362, 257, 1916, 295, 3259, 295, 12736, 341, 13], "temperature": 0.0, "avg_logprob": -0.12624557813008627, "compression_ratio": 1.4692737430167597, "no_speech_prob": 2.4822927571221953e-06}, {"id": 816, "seek": 582852, "start": 5828.52, "end": 5842.52, "text": " And it's actually very helpful for pytorch, TensorFlow and array and NumPy programmers, because those ideas were in many ways stolen from APL.", "tokens": [400, 309, 311, 767, 588, 4961, 337, 25878, 284, 339, 11, 37624, 293, 10225, 293, 22592, 47, 88, 41504, 11, 570, 729, 3487, 645, 294, 867, 2098, 15900, 490, 5372, 43, 13], "temperature": 0.0, "avg_logprob": -0.13238460487789577, "compression_ratio": 1.375, "no_speech_prob": 3.9051551539159846e-06}, {"id": 817, "seek": 582852, "start": 5842.52, "end": 5848.52, "text": " So for example, just like you can do an APL, a number plus a list.", "tokens": [407, 337, 1365, 11, 445, 411, 291, 393, 360, 364, 5372, 43, 11, 257, 1230, 1804, 257, 1329, 13], "temperature": 0.0, "avg_logprob": -0.13238460487789577, "compression_ratio": 1.375, "no_speech_prob": 3.9051551539159846e-06}, {"id": 818, "seek": 582852, "start": 5848.52, "end": 5853.52, "text": " You can do that in APL but APL invented it.", "tokens": [509, 393, 360, 300, 294, 5372, 43, 457, 5372, 43, 14479, 309, 13], "temperature": 0.0, "avg_logprob": -0.13238460487789577, "compression_ratio": 1.375, "no_speech_prob": 3.9051551539159846e-06}, {"id": 819, "seek": 585352, "start": 5853.52, "end": 5863.52, "text": " And does it in kind of like often more interesting ways.", "tokens": [400, 775, 309, 294, 733, 295, 411, 2049, 544, 1880, 2098, 13], "temperature": 0.0, "avg_logprob": -0.09899060155304384, "compression_ratio": 1.5359116022099448, "no_speech_prob": 6.048452632967383e-06}, {"id": 820, "seek": 585352, "start": 5863.52, "end": 5869.52, "text": " One of the fun things about APL is defining functions.", "tokens": [1485, 295, 264, 1019, 721, 466, 5372, 43, 307, 17827, 6828, 13], "temperature": 0.0, "avg_logprob": -0.09899060155304384, "compression_ratio": 1.5359116022099448, "no_speech_prob": 6.048452632967383e-06}, {"id": 821, "seek": 585352, "start": 5869.52, "end": 5881.52, "text": " Things tend to be a bit more consistent than a lot of other languages. So, in Python, for example, you define a function with like kind of a unique, you know, syntax.", "tokens": [9514, 3928, 281, 312, 257, 857, 544, 8398, 813, 257, 688, 295, 661, 8650, 13, 407, 11, 294, 15329, 11, 337, 1365, 11, 291, 6964, 257, 2445, 365, 411, 733, 295, 257, 3845, 11, 291, 458, 11, 28431, 13], "temperature": 0.0, "avg_logprob": -0.09899060155304384, "compression_ratio": 1.5359116022099448, "no_speech_prob": 6.048452632967383e-06}, {"id": 822, "seek": 588152, "start": 5881.52, "end": 5888.52, "text": " In APL to define a variable, you use arrow.", "tokens": [682, 5372, 43, 281, 6964, 257, 7006, 11, 291, 764, 11610, 13], "temperature": 0.0, "avg_logprob": -0.19331026077270508, "compression_ratio": 1.7584269662921348, "no_speech_prob": 6.854083949292544e-06}, {"id": 823, "seek": 588152, "start": 5888.52, "end": 5903.52, "text": " And to find a function, you use a variable as well. It's just that the function goes in curly brackets. And you can pass one thing to the function, in which case it'll be called Omega, or you can pass two things to a function which case it'll be called Omega and Alpha.", "tokens": [400, 281, 915, 257, 2445, 11, 291, 764, 257, 7006, 382, 731, 13, 467, 311, 445, 300, 264, 2445, 1709, 294, 32066, 26179, 13, 400, 291, 393, 1320, 472, 551, 281, 264, 2445, 11, 294, 597, 1389, 309, 603, 312, 1219, 27645, 11, 420, 291, 393, 1320, 732, 721, 281, 257, 2445, 597, 1389, 309, 603, 312, 1219, 27645, 293, 20588, 13], "temperature": 0.0, "avg_logprob": -0.19331026077270508, "compression_ratio": 1.7584269662921348, "no_speech_prob": 6.854083949292544e-06}, {"id": 824, "seek": 590352, "start": 5903.52, "end": 5914.52, "text": " And if I were to define plus, I would go Alpha plus Omega, and I now", "tokens": [400, 498, 286, 645, 281, 6964, 1804, 11, 286, 576, 352, 20588, 1804, 27645, 11, 293, 286, 586], "temperature": 0.0, "avg_logprob": -0.16670366128285727, "compression_ratio": 1.4895833333333333, "no_speech_prob": 2.6425452688272344e-06}, {"id": 825, "seek": 590352, "start": 5914.52, "end": 5923.52, "text": " created my own operator, and you can use any Unicode symbol so you can actually build up your own notation.", "tokens": [2942, 452, 1065, 12973, 11, 293, 291, 393, 764, 604, 1156, 299, 1429, 5986, 370, 291, 393, 767, 1322, 493, 428, 1065, 24657, 13], "temperature": 0.0, "avg_logprob": -0.16670366128285727, "compression_ratio": 1.4895833333333333, "no_speech_prob": 2.6425452688272344e-06}, {"id": 826, "seek": 590352, "start": 5923.52, "end": 5930.52, "text": " And so it gets kind of pretty interesting because a lot of like for example there's an operator called power,", "tokens": [400, 370, 309, 2170, 733, 295, 1238, 1880, 570, 257, 688, 295, 411, 337, 1365, 456, 311, 364, 12973, 1219, 1347, 11], "temperature": 0.0, "avg_logprob": -0.16670366128285727, "compression_ratio": 1.4895833333333333, "no_speech_prob": 2.6425452688272344e-06}, {"id": 827, "seek": 593052, "start": 5930.52, "end": 5935.52, "text": " repeats a function, n times.", "tokens": [35038, 257, 2445, 11, 297, 1413, 13], "temperature": 0.0, "avg_logprob": -0.1541614681482315, "compression_ratio": 1.5340909090909092, "no_speech_prob": 1.4284158169175498e-05}, {"id": 828, "seek": 593052, "start": 5935.52, "end": 5947.52, "text": " And so for example you can define exponent, literally as repeat power n times.", "tokens": [400, 370, 337, 1365, 291, 393, 6964, 37871, 11, 3736, 382, 7149, 1347, 297, 1413, 13], "temperature": 0.0, "avg_logprob": -0.1541614681482315, "compression_ratio": 1.5340909090909092, "no_speech_prob": 1.4284158169175498e-05}, {"id": 829, "seek": 593052, "start": 5947.52, "end": 5956.52, "text": " And so then you can like come up with your own versions of repeating things a bunch of times in ways which aren't necessarily in math that might be quite helpful.", "tokens": [400, 370, 550, 291, 393, 411, 808, 493, 365, 428, 1065, 9606, 295, 18617, 721, 257, 3840, 295, 1413, 294, 2098, 597, 3212, 380, 4725, 294, 5221, 300, 1062, 312, 1596, 4961, 13], "temperature": 0.0, "avg_logprob": -0.1541614681482315, "compression_ratio": 1.5340909090909092, "no_speech_prob": 1.4284158169175498e-05}, {"id": 830, "seek": 595652, "start": 5956.52, "end": 5963.52, "text": " Whatever you're doing. Anyway, so that's my plan. What do people use APL for nowadays?", "tokens": [8541, 291, 434, 884, 13, 5684, 11, 370, 300, 311, 452, 1393, 13, 708, 360, 561, 764, 5372, 43, 337, 13434, 30], "temperature": 0.0, "avg_logprob": -0.14142393778605633, "compression_ratio": 1.5101010101010102, "no_speech_prob": 2.078269244520925e-05}, {"id": 831, "seek": 595652, "start": 5963.52, "end": 5968.52, "text": " Honestly, there's two main areas.", "tokens": [12348, 11, 456, 311, 732, 2135, 3179, 13], "temperature": 0.0, "avg_logprob": -0.14142393778605633, "compression_ratio": 1.5101010101010102, "no_speech_prob": 2.078269244520925e-05}, {"id": 832, "seek": 595652, "start": 5968.52, "end": 5976.52, "text": " So APL is one of a class of what's called array languages of which there's three main ones in use, APL, K and J.", "tokens": [407, 5372, 43, 307, 472, 295, 257, 1508, 295, 437, 311, 1219, 10225, 8650, 295, 597, 456, 311, 1045, 2135, 2306, 294, 764, 11, 5372, 43, 11, 591, 293, 508, 13], "temperature": 0.0, "avg_logprob": -0.14142393778605633, "compression_ratio": 1.5101010101010102, "no_speech_prob": 2.078269244520925e-05}, {"id": 833, "seek": 595652, "start": 5976.52, "end": 5983.52, "text": " The array languages are most commonly used in hedge fund trading,", "tokens": [440, 10225, 8650, 366, 881, 12719, 1143, 294, 25304, 2374, 9529, 11], "temperature": 0.0, "avg_logprob": -0.14142393778605633, "compression_ratio": 1.5101010101010102, "no_speech_prob": 2.078269244520925e-05}, {"id": 834, "seek": 598352, "start": 5983.52, "end": 5996.52, "text": " which is partly a historical thing, you know, that's where the money is I guess and so you know that's a group of people who don't care about trends as long as they can make money so when they kind of realize this is a really good way of expressing mathematical", "tokens": [597, 307, 17031, 257, 8584, 551, 11, 291, 458, 11, 300, 311, 689, 264, 1460, 307, 286, 2041, 293, 370, 291, 458, 300, 311, 257, 1594, 295, 561, 567, 500, 380, 1127, 466, 13892, 382, 938, 382, 436, 393, 652, 1460, 370, 562, 436, 733, 295, 4325, 341, 307, 257, 534, 665, 636, 295, 22171, 18894], "temperature": 0.0, "avg_logprob": -0.11757739384969075, "compression_ratio": 1.597883597883598, "no_speech_prob": 3.0237702958402224e-05}, {"id": 835, "seek": 598352, "start": 5996.52, "end": 6002.52, "text": " ideas they kind of really dived into it.", "tokens": [3487, 436, 733, 295, 534, 274, 3194, 666, 309, 13], "temperature": 0.0, "avg_logprob": -0.11757739384969075, "compression_ratio": 1.597883597883598, "no_speech_prob": 3.0237702958402224e-05}, {"id": 836, "seek": 600252, "start": 6002.52, "end": 6015.52, "text": " And in particular, Arthur Whitney who helped create APL and went on to create K, he developed a kind of a extended version of APL called A plus at Morgan Stanley.", "tokens": [400, 294, 1729, 11, 19624, 39466, 567, 4254, 1884, 5372, 43, 293, 1437, 322, 281, 1884, 591, 11, 415, 4743, 257, 733, 295, 257, 10913, 3037, 295, 5372, 43, 1219, 316, 1804, 412, 16724, 28329, 13], "temperature": 0.0, "avg_logprob": -0.09093783696492513, "compression_ratio": 1.5677966101694916, "no_speech_prob": 6.747389761585509e-06}, {"id": 837, "seek": 600252, "start": 6015.52, "end": 6021.52, "text": " So Morgan Stanley did a lot of stuff in A plus.", "tokens": [407, 16724, 28329, 630, 257, 688, 295, 1507, 294, 316, 1804, 13], "temperature": 0.0, "avg_logprob": -0.09093783696492513, "compression_ratio": 1.5677966101694916, "no_speech_prob": 6.747389761585509e-06}, {"id": 838, "seek": 600252, "start": 6021.52, "end": 6031.52, "text": " Yeah, so nowadays K actually there's a whole database built on K called KDB, which is considered perhaps the fastest database in the world for a lot of things.", "tokens": [865, 11, 370, 13434, 591, 767, 456, 311, 257, 1379, 8149, 3094, 322, 591, 1219, 591, 27735, 11, 597, 307, 4888, 4317, 264, 14573, 8149, 294, 264, 1002, 337, 257, 688, 295, 721, 13], "temperature": 0.0, "avg_logprob": -0.09093783696492513, "compression_ratio": 1.5677966101694916, "no_speech_prob": 6.747389761585509e-06}, {"id": 839, "seek": 603152, "start": 6031.52, "end": 6039.52, "text": " The whole K implementation is so concise that it fits in the cache on a CPU, which is pretty amazing.", "tokens": [440, 1379, 591, 11420, 307, 370, 44882, 300, 309, 9001, 294, 264, 19459, 322, 257, 13199, 11, 597, 307, 1238, 2243, 13], "temperature": 0.0, "avg_logprob": -0.05710833722894842, "compression_ratio": 1.4578947368421054, "no_speech_prob": 4.029095180158038e-06}, {"id": 840, "seek": 603152, "start": 6039.52, "end": 6050.52, "text": " Because as you can imagine with this kind of expressiveness you can often write pretty sophisticated programs in one or two lines of code.", "tokens": [1436, 382, 291, 393, 3811, 365, 341, 733, 295, 5109, 8477, 291, 393, 2049, 2464, 1238, 16950, 4268, 294, 472, 420, 732, 3876, 295, 3089, 13], "temperature": 0.0, "avg_logprob": -0.05710833722894842, "compression_ratio": 1.4578947368421054, "no_speech_prob": 4.029095180158038e-06}, {"id": 841, "seek": 603152, "start": 6050.52, "end": 6054.52, "text": " Yeah, it's also used in kind of like", "tokens": [865, 11, 309, 311, 611, 1143, 294, 733, 295, 411], "temperature": 0.0, "avg_logprob": -0.05710833722894842, "compression_ratio": 1.4578947368421054, "no_speech_prob": 4.029095180158038e-06}, {"id": 842, "seek": 605452, "start": 6054.52, "end": 6062.52, "text": " legacy big business stuff because it's been around a long time, you know, but I don't think that's a very interesting use of it.", "tokens": [11711, 955, 1606, 1507, 570, 309, 311, 668, 926, 257, 938, 565, 11, 291, 458, 11, 457, 286, 500, 380, 519, 300, 311, 257, 588, 1880, 764, 295, 309, 13], "temperature": 0.0, "avg_logprob": -0.10162840880356826, "compression_ratio": 1.5931372549019607, "no_speech_prob": 1.5441835785168223e-05}, {"id": 843, "seek": 605452, "start": 6062.52, "end": 6075.52, "text": " But then like it's starting to get popular, I mean niche popular again just as like people interested in math and notation, you know, so some of the ideas have made their way into mainstream math.", "tokens": [583, 550, 411, 309, 311, 2891, 281, 483, 3743, 11, 286, 914, 19956, 3743, 797, 445, 382, 411, 561, 3102, 294, 5221, 293, 24657, 11, 291, 458, 11, 370, 512, 295, 264, 3487, 362, 1027, 641, 636, 666, 15960, 5221, 13], "temperature": 0.0, "avg_logprob": -0.10162840880356826, "compression_ratio": 1.5931372549019607, "no_speech_prob": 1.5441835785168223e-05}, {"id": 844, "seek": 607552, "start": 6075.52, "end": 6085.52, "text": " So for example, something that, you know, pretty much any working mathematician will be familiar with is Iverson brackets.", "tokens": [407, 337, 1365, 11, 746, 300, 11, 291, 458, 11, 1238, 709, 604, 1364, 48281, 486, 312, 4963, 365, 307, 286, 840, 266, 26179, 13], "temperature": 0.0, "avg_logprob": -0.10544592924792358, "compression_ratio": 1.6475409836065573, "no_speech_prob": 9.36745163926389e-06}, {"id": 845, "seek": 607552, "start": 6085.52, "end": 6090.52, "text": " This is a type in Iverson, it says Iverson bracket, right.", "tokens": [639, 307, 257, 2010, 294, 286, 840, 266, 11, 309, 1619, 286, 840, 266, 16904, 11, 558, 13], "temperature": 0.0, "avg_logprob": -0.10544592924792358, "compression_ratio": 1.6475409836065573, "no_speech_prob": 9.36745163926389e-06}, {"id": 846, "seek": 607552, "start": 6090.52, "end": 6104.52, "text": " Which is basically the idea that you can put a Boolean expression and make it one or zero and once you make Booleans ones and zeros you can manipulate them in mathematical ways, you know, and so that idea comes from APL.", "tokens": [3013, 307, 1936, 264, 1558, 300, 291, 393, 829, 257, 23351, 28499, 6114, 293, 652, 309, 472, 420, 4018, 293, 1564, 291, 652, 23351, 24008, 2306, 293, 35193, 291, 393, 20459, 552, 294, 18894, 2098, 11, 291, 458, 11, 293, 370, 300, 1558, 1487, 490, 5372, 43, 13], "temperature": 0.0, "avg_logprob": -0.10544592924792358, "compression_ratio": 1.6475409836065573, "no_speech_prob": 9.36745163926389e-06}, {"id": 847, "seek": 610452, "start": 6104.52, "end": 6114.52, "text": " And so for example,", "tokens": [400, 370, 337, 1365, 11], "temperature": 0.0, "avg_logprob": -0.25756032126290457, "compression_ratio": 1.2831858407079646, "no_speech_prob": 3.589402695070021e-05}, {"id": 848, "seek": 610452, "start": 6114.52, "end": 6123.52, "text": " which of these things is greater than the corresponding thing in", "tokens": [597, 295, 613, 721, 307, 5044, 813, 264, 11760, 551, 294], "temperature": 0.0, "avg_logprob": -0.25756032126290457, "compression_ratio": 1.2831858407079646, "no_speech_prob": 3.589402695070021e-05}, {"id": 849, "seek": 610452, "start": 6123.52, "end": 6127.52, "text": " probably all that's very good", "tokens": [1391, 439, 300, 311, 588, 665], "temperature": 0.0, "avg_logprob": -0.25756032126290457, "compression_ratio": 1.2831858407079646, "no_speech_prob": 3.589402695070021e-05}, {"id": 850, "seek": 610452, "start": 6127.52, "end": 6133.52, "text": " in iota six, iota five rather.", "tokens": [294, 741, 5377, 2309, 11, 741, 5377, 1732, 2831, 13], "temperature": 0.0, "avg_logprob": -0.25756032126290457, "compression_ratio": 1.2831858407079646, "no_speech_prob": 3.589402695070021e-05}, {"id": 851, "seek": 613352, "start": 6133.52, "end": 6142.52, "text": " At least on my end I can, okay, because you're at the bottom so the skin is a little bit covered by the, in Zoom.", "tokens": [1711, 1935, 322, 452, 917, 286, 393, 11, 1392, 11, 570, 291, 434, 412, 264, 2767, 370, 264, 3178, 307, 257, 707, 857, 5343, 538, 264, 11, 294, 13453, 13], "temperature": 0.0, "avg_logprob": -0.2445017860049293, "compression_ratio": 1.70995670995671, "no_speech_prob": 1.7499849491287023e-05}, {"id": 852, "seek": 613352, "start": 6142.52, "end": 6155.52, "text": " Yeah, okay I see that line fine yeah. Cool. Yeah, so you know what's what you know once you recognize that you can do things like this, and if you return ones and zeros is the truth values you could be like oh like how many times was that true, you know,", "tokens": [865, 11, 1392, 286, 536, 300, 1622, 2489, 1338, 13, 8561, 13, 865, 11, 370, 291, 458, 437, 311, 437, 291, 458, 1564, 291, 5521, 300, 291, 393, 360, 721, 411, 341, 11, 293, 498, 291, 2736, 2306, 293, 35193, 307, 264, 3494, 4190, 291, 727, 312, 411, 1954, 411, 577, 867, 1413, 390, 300, 2074, 11, 291, 458, 11], "temperature": 0.0, "avg_logprob": -0.2445017860049293, "compression_ratio": 1.70995670995671, "no_speech_prob": 1.7499849491287023e-05}, {"id": 853, "seek": 613352, "start": 6155.52, "end": 6161.52, "text": " stuff like that, you know.", "tokens": [1507, 411, 300, 11, 291, 458, 13], "temperature": 0.0, "avg_logprob": -0.2445017860049293, "compression_ratio": 1.70995670995671, "no_speech_prob": 1.7499849491287023e-05}, {"id": 854, "seek": 616152, "start": 6161.52, "end": 6176.52, "text": " So anyway so like some of the ideas have made their way into math and coding and stuff like that. So, maybe that's kind of main thing it's used for in some ways but my interest is just kind of to look for ideas and things like that I guess it's kind of", "tokens": [407, 4033, 370, 411, 512, 295, 264, 3487, 362, 1027, 641, 636, 666, 5221, 293, 17720, 293, 1507, 411, 300, 13, 407, 11, 1310, 300, 311, 733, 295, 2135, 551, 309, 311, 1143, 337, 294, 512, 2098, 457, 452, 1179, 307, 445, 733, 295, 281, 574, 337, 3487, 293, 721, 411, 300, 286, 2041, 309, 311, 733, 295], "temperature": 0.0, "avg_logprob": -0.1457574905887727, "compression_ratio": 1.6153846153846154, "no_speech_prob": 1.9831284589599818e-05}, {"id": 855, "seek": 617652, "start": 6176.52, "end": 6195.52, "text": " useful thing. Yeah, a lot of people, including me who have spent time with array programming feel like it's the most mind opening thing they've done in computer science, because it's like going to this alien world where they've spent 60 years going in a different", "tokens": [4420, 551, 13, 865, 11, 257, 688, 295, 561, 11, 3009, 385, 567, 362, 4418, 565, 365, 10225, 9410, 841, 411, 309, 311, 264, 881, 1575, 5193, 551, 436, 600, 1096, 294, 3820, 3497, 11, 570, 309, 311, 411, 516, 281, 341, 12319, 1002, 689, 436, 600, 4418, 4060, 924, 516, 294, 257, 819], "temperature": 0.0, "avg_logprob": -0.10964713425471864, "compression_ratio": 1.5380116959064327, "no_speech_prob": 1.3843617125530727e-05}, {"id": 856, "seek": 619552, "start": 6195.52, "end": 6209.52, "text": " direction. And suddenly realizing like, and a lot of the smartest people who have worked in computer science were on that path, not our path. And it's like, wow, what have they been doing. So like, I actually find it very enjoyable because you end up reading interesting", "tokens": [3513, 13, 400, 5800, 16734, 411, 11, 293, 257, 688, 295, 264, 41491, 561, 567, 362, 2732, 294, 3820, 3497, 645, 322, 300, 3100, 11, 406, 527, 3100, 13, 400, 309, 311, 411, 11, 6076, 11, 437, 362, 436, 668, 884, 13, 407, 411, 11, 286, 767, 915, 309, 588, 20305, 570, 291, 917, 493, 3760, 1880], "temperature": 0.0, "avg_logprob": -0.11493667689236728, "compression_ratio": 1.5526315789473684, "no_speech_prob": 1.0951297554129269e-05}, {"id": 857, "seek": 619552, "start": 6209.52, "end": 6215.52, "text": " papers from the 60s and 70s and stuff and it's just like, oh my god, you know, and.", "tokens": [10577, 490, 264, 4060, 82, 293, 5285, 82, 293, 1507, 293, 309, 311, 445, 411, 11, 1954, 452, 3044, 11, 291, 458, 11, 293, 13], "temperature": 0.0, "avg_logprob": -0.11493667689236728, "compression_ratio": 1.5526315789473684, "no_speech_prob": 1.0951297554129269e-05}, {"id": 858, "seek": 621552, "start": 6215.52, "end": 6224.52, "text": " So for example, I don't know if you saw but Mathematica came out with a new version of Mathematica today,", "tokens": [407, 337, 1365, 11, 286, 500, 380, 458, 498, 291, 1866, 457, 15776, 8615, 2262, 1361, 484, 365, 257, 777, 3037, 295, 15776, 8615, 2262, 965, 11], "temperature": 0.0, "avg_logprob": -0.12018902161542107, "compression_ratio": 1.168421052631579, "no_speech_prob": 3.425129034440033e-05}, {"id": 859, "seek": 621552, "start": 6224.52, "end": 6229.52, "text": " which", "tokens": [597], "temperature": 0.0, "avg_logprob": -0.12018902161542107, "compression_ratio": 1.168421052631579, "no_speech_prob": 3.425129034440033e-05}, {"id": 860, "seek": 622952, "start": 6229.52, "end": 6250.52, "text": " is cool.", "tokens": [307, 1627, 13], "temperature": 0.0, "avg_logprob": -0.6367010389055524, "compression_ratio": 0.5, "no_speech_prob": 0.0010511728469282389}, {"id": 861, "seek": 625052, "start": 6250.52, "end": 6271.52, "text": " So the latest version of Mathematica, which came out yesterday or the day before, basically says, oh, we've invented this new thing called threaded.", "tokens": [407, 264, 6792, 3037, 295, 15776, 8615, 2262, 11, 597, 1361, 484, 5186, 420, 264, 786, 949, 11, 1936, 1619, 11, 1954, 11, 321, 600, 14479, 341, 777, 551, 1219, 47493, 13], "temperature": 0.0, "avg_logprob": -0.21467121442159018, "compression_ratio": 1.2982456140350878, "no_speech_prob": 1.6027296396714519e-06}, {"id": 862, "seek": 627152, "start": 6271.52, "end": 6282.52, "text": " And anyway, it actually turns out if you read it, that it's the same thing as what's called the rank conjunction in APL and J, which has been around for decades.", "tokens": [400, 4033, 11, 309, 767, 4523, 484, 498, 291, 1401, 309, 11, 300, 309, 311, 264, 912, 551, 382, 437, 311, 1219, 264, 6181, 27482, 294, 5372, 43, 293, 508, 11, 597, 575, 668, 926, 337, 7878, 13], "temperature": 0.0, "avg_logprob": -0.08723333379724524, "compression_ratio": 1.5535714285714286, "no_speech_prob": 4.424699909577612e-06}, {"id": 863, "seek": 627152, "start": 6282.52, "end": 6293.52, "text": " So it's like one of these things where it's like, oh, you know, ideas that have decades old are sometimes only just finding their way into", "tokens": [407, 309, 311, 411, 472, 295, 613, 721, 689, 309, 311, 411, 11, 1954, 11, 291, 458, 11, 3487, 300, 362, 7878, 1331, 366, 2171, 787, 445, 5006, 641, 636, 666], "temperature": 0.0, "avg_logprob": -0.08723333379724524, "compression_ratio": 1.5535714285714286, "no_speech_prob": 4.424699909577612e-06}, {"id": 864, "seek": 627152, "start": 6293.52, "end": 6296.52, "text": " modern languages.", "tokens": [4363, 8650, 13], "temperature": 0.0, "avg_logprob": -0.08723333379724524, "compression_ratio": 1.5535714285714286, "no_speech_prob": 4.424699909577612e-06}, {"id": 865, "seek": 627152, "start": 6296.52, "end": 6300.52, "text": " Yeah, like, like Mathematica.", "tokens": [865, 11, 411, 11, 411, 15776, 8615, 2262, 13], "temperature": 0.0, "avg_logprob": -0.08723333379724524, "compression_ratio": 1.5535714285714286, "no_speech_prob": 4.424699909577612e-06}, {"id": 866, "seek": 630052, "start": 6300.52, "end": 6315.52, "text": " It's also a really, it's a really great way to learn math or part, big parts of math.", "tokens": [467, 311, 611, 257, 534, 11, 309, 311, 257, 534, 869, 636, 281, 1466, 5221, 420, 644, 11, 955, 3166, 295, 5221, 13], "temperature": 0.0, "avg_logprob": -0.2496380053068462, "compression_ratio": 1.6023391812865497, "no_speech_prob": 2.5856326828943565e-05}, {"id": 867, "seek": 630052, "start": 6315.52, "end": 6323.52, "text": " Yeah, because as you go through it, let's say, for example, that's your artist question, does it have complex numbers. So as you go through it, my plan is to kind of go through each glyph.", "tokens": [865, 11, 570, 382, 291, 352, 807, 309, 11, 718, 311, 584, 11, 337, 1365, 11, 300, 311, 428, 5748, 1168, 11, 775, 309, 362, 3997, 3547, 13, 407, 382, 291, 352, 807, 309, 11, 452, 1393, 307, 281, 733, 295, 352, 807, 1184, 22633, 950, 13], "temperature": 0.0, "avg_logprob": -0.2496380053068462, "compression_ratio": 1.6023391812865497, "no_speech_prob": 2.5856326828943565e-05}, {"id": 868, "seek": 632352, "start": 6323.52, "end": 6334.52, "text": " And so some of those glyphs are going to be like, okay, well, this is the conjugate of complex numbers. What on earth does that mean? So like, you know, really gives you a chance to explore that.", "tokens": [400, 370, 512, 295, 729, 22633, 950, 82, 366, 516, 281, 312, 411, 11, 1392, 11, 731, 11, 341, 307, 264, 45064, 295, 3997, 3547, 13, 708, 322, 4120, 775, 300, 914, 30, 407, 411, 11, 291, 458, 11, 534, 2709, 291, 257, 2931, 281, 6839, 300, 13], "temperature": 0.0, "avg_logprob": -0.11345243935633187, "compression_ratio": 1.5665399239543727, "no_speech_prob": 3.844325874524657e-06}, {"id": 869, "seek": 632352, "start": 6334.52, "end": 6351.52, "text": " And then in particular, the language called J, which was developed by the developers APL as a kind of a getting all the best ideas from APL over the decades and making them better actually comes with a whole bunch of", "tokens": [400, 550, 294, 1729, 11, 264, 2856, 1219, 508, 11, 597, 390, 4743, 538, 264, 8849, 5372, 43, 382, 257, 733, 295, 257, 1242, 439, 264, 1151, 3487, 490, 5372, 43, 670, 264, 7878, 293, 1455, 552, 1101, 767, 1487, 365, 257, 1379, 3840, 295], "temperature": 0.0, "avg_logprob": -0.11345243935633187, "compression_ratio": 1.5665399239543727, "no_speech_prob": 3.844325874524657e-06}, {"id": 870, "seek": 635152, "start": 6351.52, "end": 6362.52, "text": " things they call them labs, which basically take you through really interesting mathematical ideas like polynomials, you know, and all this stuff like using J is the notation.", "tokens": [721, 436, 818, 552, 20339, 11, 597, 1936, 747, 291, 807, 534, 1880, 18894, 3487, 411, 22560, 12356, 11, 291, 458, 11, 293, 439, 341, 1507, 411, 1228, 508, 307, 264, 24657, 13], "temperature": 0.0, "avg_logprob": -0.1541307112749885, "compression_ratio": 1.6180904522613064, "no_speech_prob": 8.397247256652918e-06}, {"id": 871, "seek": 635152, "start": 6362.52, "end": 6373.52, "text": " And I prefer that to normal math notation because I already always know exactly what it means, you know, that it has a totally consistent meaning.", "tokens": [400, 286, 4382, 300, 281, 2710, 5221, 24657, 570, 286, 1217, 1009, 458, 2293, 437, 309, 1355, 11, 291, 458, 11, 300, 309, 575, 257, 3879, 8398, 3620, 13], "temperature": 0.0, "avg_logprob": -0.1541307112749885, "compression_ratio": 1.6180904522613064, "no_speech_prob": 8.397247256652918e-06}, {"id": 872, "seek": 637352, "start": 6373.52, "end": 6382.52, "text": " And yeah, so yeah, so that's my plan for next week.", "tokens": [400, 1338, 11, 370, 1338, 11, 370, 300, 311, 452, 1393, 337, 958, 1243, 13], "temperature": 0.0, "avg_logprob": -0.2572993955750396, "compression_ratio": 1.46524064171123, "no_speech_prob": 3.119861503364518e-05}, {"id": 873, "seek": 637352, "start": 6382.52, "end": 6397.52, "text": " Actually, I come across KDB before my old boss is worked for Morgan Stanley, and I think they still have that free version, maybe I need to dig around with the memories, less than four gig, they actually have free version.", "tokens": [5135, 11, 286, 808, 2108, 591, 27735, 949, 452, 1331, 5741, 307, 2732, 337, 16724, 28329, 11, 293, 286, 519, 436, 920, 362, 300, 1737, 3037, 11, 1310, 286, 643, 281, 2528, 926, 365, 264, 8495, 11, 1570, 813, 1451, 8741, 11, 436, 767, 362, 1737, 3037, 13], "temperature": 0.0, "avg_logprob": -0.2572993955750396, "compression_ratio": 1.46524064171123, "no_speech_prob": 3.119861503364518e-05}, {"id": 874, "seek": 639752, "start": 6397.52, "end": 6412.52, "text": " They do have free versions now. And he last time we tried to do some IoT application so contact all the different sensor for machinery, and they come by and actually better and the performance faster than Panda as well.", "tokens": [814, 360, 362, 1737, 9606, 586, 13, 400, 415, 1036, 565, 321, 3031, 281, 360, 512, 30112, 3861, 370, 3385, 439, 264, 819, 10200, 337, 27302, 11, 293, 436, 808, 538, 293, 767, 1101, 293, 264, 3389, 4663, 813, 44207, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.23691469557741854, "compression_ratio": 1.4038461538461537, "no_speech_prob": 7.599795935675502e-05}, {"id": 875, "seek": 641252, "start": 6412.52, "end": 6427.52, "text": " So he do all the configuration in KDP and then give me the file and then I start doing the visualization. So, yeah, but he used to tell me, take six months to actually train a person to actually can read it.", "tokens": [407, 415, 360, 439, 264, 11694, 294, 591, 11373, 293, 550, 976, 385, 264, 3991, 293, 550, 286, 722, 884, 264, 25801, 13, 407, 11, 1338, 11, 457, 415, 1143, 281, 980, 385, 11, 747, 2309, 2493, 281, 767, 3847, 257, 954, 281, 767, 393, 1401, 309, 13], "temperature": 0.0, "avg_logprob": -0.2542882526622099, "compression_ratio": 1.4885057471264367, "no_speech_prob": 4.197294401819818e-05}, {"id": 876, "seek": 641252, "start": 6427.52, "end": 6431.52, "text": " So you can get us up in one thing, couple of weeks.", "tokens": [407, 291, 393, 483, 505, 493, 294, 472, 551, 11, 1916, 295, 3259, 13], "temperature": 0.0, "avg_logprob": -0.2542882526622099, "compression_ratio": 1.4885057471264367, "no_speech_prob": 4.197294401819818e-05}, {"id": 877, "seek": 643152, "start": 6431.52, "end": 6443.52, "text": " Let's get up and running. So I've actually, I, so like, I don't know much APL at all, to be clear, so this is not like teaching you this is a shared exploration.", "tokens": [961, 311, 483, 493, 293, 2614, 13, 407, 286, 600, 767, 11, 286, 11, 370, 411, 11, 286, 500, 380, 458, 709, 5372, 43, 412, 439, 11, 281, 312, 1850, 11, 370, 341, 307, 406, 411, 4571, 291, 341, 307, 257, 5507, 16197, 13], "temperature": 0.0, "avg_logprob": -0.1404319160862973, "compression_ratio": 1.6543778801843319, "no_speech_prob": 6.239083177206339e-06}, {"id": 878, "seek": 643152, "start": 6443.52, "end": 6456.52, "text": " I've done a little bit of like a little bit of J before, and then two or three weeks ago, reached the point in teaching my daughter and so I teach my daughter and her best friend math I tutor them.", "tokens": [286, 600, 1096, 257, 707, 857, 295, 411, 257, 707, 857, 295, 508, 949, 11, 293, 550, 732, 420, 1045, 3259, 2057, 11, 6488, 264, 935, 294, 4571, 452, 4653, 293, 370, 286, 2924, 452, 4653, 293, 720, 1151, 1277, 5221, 286, 35613, 552, 13], "temperature": 0.0, "avg_logprob": -0.1404319160862973, "compression_ratio": 1.6543778801843319, "no_speech_prob": 6.239083177206339e-06}, {"id": 879, "seek": 645652, "start": 6456.52, "end": 6467.52, "text": " And we reached the point a few weeks ago where we were up to doing sequences and series, you know, like sigma notation, and I started trying to teach them and they had no idea what I was talking about.", "tokens": [400, 321, 6488, 264, 935, 257, 1326, 3259, 2057, 689, 321, 645, 493, 281, 884, 22978, 293, 2638, 11, 291, 458, 11, 411, 12771, 24657, 11, 293, 286, 1409, 1382, 281, 2924, 552, 293, 436, 632, 572, 1558, 437, 286, 390, 1417, 466, 13], "temperature": 0.0, "avg_logprob": -0.13273851153919997, "compression_ratio": 1.716, "no_speech_prob": 3.0414141747314716e-06}, {"id": 880, "seek": 645652, "start": 6467.52, "end": 6479.52, "text": " And I was like, I thought of sigma notation is actually extremely easy because, like, if you explain it to me it you just be like oh well it's like this list comprehension with some on the front, you know it's like it's a very.", "tokens": [400, 286, 390, 411, 11, 286, 1194, 295, 12771, 24657, 307, 767, 4664, 1858, 570, 11, 411, 11, 498, 291, 2903, 309, 281, 385, 309, 291, 445, 312, 411, 1954, 731, 309, 311, 411, 341, 1329, 44991, 365, 512, 322, 264, 1868, 11, 291, 458, 309, 311, 411, 309, 311, 257, 588, 13], "temperature": 0.0, "avg_logprob": -0.13273851153919997, "compression_ratio": 1.716, "no_speech_prob": 3.0414141747314716e-06}, {"id": 881, "seek": 647952, "start": 6479.52, "end": 6496.52, "text": " It's just like that's exactly what it is but of course they didn't have any of that kind of idea of indexing or anything so you know you kind of trying to say like TN equals TN minus one plus one is a arithmetic sequence, you know, or whatever,", "tokens": [467, 311, 445, 411, 300, 311, 2293, 437, 309, 307, 457, 295, 1164, 436, 994, 380, 362, 604, 295, 300, 733, 295, 1558, 295, 8186, 278, 420, 1340, 370, 291, 458, 291, 733, 295, 1382, 281, 584, 411, 314, 45, 6915, 314, 45, 3175, 472, 1804, 472, 307, 257, 42973, 8310, 11, 291, 458, 11, 420, 2035, 11], "temperature": 0.0, "avg_logprob": -0.17430911461512247, "compression_ratio": 1.7277227722772277, "no_speech_prob": 9.817265890887938e-06}, {"id": 882, "seek": 647952, "start": 6496.52, "end": 6501.52, "text": " you know, like sigma equals one to six of I.", "tokens": [291, 458, 11, 411, 12771, 6915, 472, 281, 2309, 295, 286, 13], "temperature": 0.0, "avg_logprob": -0.17430911461512247, "compression_ratio": 1.7277227722772277, "no_speech_prob": 9.817265890887938e-06}, {"id": 883, "seek": 647952, "start": 6501.52, "end": 6505.52, "text": " They're just like, what's TN what's I like what's going on.", "tokens": [814, 434, 445, 411, 11, 437, 311, 314, 45, 437, 311, 286, 411, 437, 311, 516, 322, 13], "temperature": 0.0, "avg_logprob": -0.17430911461512247, "compression_ratio": 1.7277227722772277, "no_speech_prob": 9.817265890887938e-06}, {"id": 884, "seek": 650552, "start": 6505.52, "end": 6510.52, "text": " So then we stopped trying you know there's like one failed lesson.", "tokens": [407, 550, 321, 5936, 1382, 291, 458, 456, 311, 411, 472, 7612, 6898, 13], "temperature": 0.0, "avg_logprob": -0.18169366096963688, "compression_ratio": 1.635, "no_speech_prob": 5.014547696191585e-06}, {"id": 885, "seek": 650552, "start": 6510.52, "end": 6512.52, "text": " I was like okay.", "tokens": [286, 390, 411, 1392, 13], "temperature": 0.0, "avg_logprob": -0.18169366096963688, "compression_ratio": 1.635, "no_speech_prob": 5.014547696191585e-06}, {"id": 886, "seek": 650552, "start": 6512.52, "end": 6522.52, "text": " Forget all that. I'm going to teach you a PL and umpire instead. And so we did like three lessons of a PL and umpire and then I said okay.", "tokens": [18675, 439, 300, 13, 286, 478, 516, 281, 2924, 291, 257, 6999, 293, 1105, 79, 621, 2602, 13, 400, 370, 321, 630, 411, 1045, 8820, 295, 257, 6999, 293, 1105, 79, 621, 293, 550, 286, 848, 1392, 13], "temperature": 0.0, "avg_logprob": -0.18169366096963688, "compression_ratio": 1.635, "no_speech_prob": 5.014547696191585e-06}, {"id": 887, "seek": 650552, "start": 6522.52, "end": 6529.52, "text": " So here's that thing sigma, you know, equals one to five of I.", "tokens": [407, 510, 311, 300, 551, 12771, 11, 291, 458, 11, 6915, 472, 281, 1732, 295, 286, 13], "temperature": 0.0, "avg_logprob": -0.18169366096963688, "compression_ratio": 1.635, "no_speech_prob": 5.014547696191585e-06}, {"id": 888, "seek": 650552, "start": 6529.52, "end": 6534.52, "text": " That's this. That's plus slash iota five.", "tokens": [663, 311, 341, 13, 663, 311, 1804, 17330, 741, 5377, 1732, 13], "temperature": 0.0, "avg_logprob": -0.18169366096963688, "compression_ratio": 1.635, "no_speech_prob": 5.014547696191585e-06}, {"id": 889, "seek": 653452, "start": 6534.52, "end": 6538.52, "text": " And I'm like, oh, oh that's all.", "tokens": [400, 286, 478, 411, 11, 1954, 11, 1954, 300, 311, 439, 13], "temperature": 0.0, "avg_logprob": -0.23903097108353016, "compression_ratio": 1.4659090909090908, "no_speech_prob": 2.0260449673514813e-06}, {"id": 890, "seek": 653452, "start": 6538.52, "end": 6539.52, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.23903097108353016, "compression_ratio": 1.4659090909090908, "no_speech_prob": 2.0260449673514813e-06}, {"id": 891, "seek": 653452, "start": 6539.52, "end": 6550.52, "text": " You know, or, you know, and umpire and people didn't use MP docs I use wildcard import so some a range five plus one.", "tokens": [509, 458, 11, 420, 11, 291, 458, 11, 293, 1105, 79, 621, 293, 561, 994, 380, 764, 14146, 45623, 286, 764, 4868, 22259, 974, 370, 512, 257, 3613, 1732, 1804, 472, 13], "temperature": 0.0, "avg_logprob": -0.23903097108353016, "compression_ratio": 1.4659090909090908, "no_speech_prob": 2.0260449673514813e-06}, {"id": 892, "seek": 653452, "start": 6550.52, "end": 6551.52, "text": " Oh, that's all.", "tokens": [876, 11, 300, 311, 439, 13], "temperature": 0.0, "avg_logprob": -0.23903097108353016, "compression_ratio": 1.4659090909090908, "no_speech_prob": 2.0260449673514813e-06}, {"id": 893, "seek": 653452, "start": 6551.52, "end": 6560.52, "text": " So, yeah, so that's why I've been like re engaging or engaging more deeply with a PL.", "tokens": [407, 11, 1338, 11, 370, 300, 311, 983, 286, 600, 668, 411, 319, 11268, 420, 11268, 544, 8760, 365, 257, 6999, 13], "temperature": 0.0, "avg_logprob": -0.23903097108353016, "compression_ratio": 1.4659090909090908, "no_speech_prob": 2.0260449673514813e-06}, {"id": 894, "seek": 656052, "start": 6560.52, "end": 6566.52, "text": " You know, I think it's just a beautiful, a beautiful notation.", "tokens": [509, 458, 11, 286, 519, 309, 311, 445, 257, 2238, 11, 257, 2238, 24657, 13], "temperature": 0.0, "avg_logprob": -0.18060338722085054, "compression_ratio": 1.4697986577181208, "no_speech_prob": 3.9435617509298027e-05}, {"id": 895, "seek": 656052, "start": 6566.52, "end": 6574.52, "text": " And it reminds me in some ways of like learning Chinese like once I started learning Chinese is like, oh my god this is whole culture of thousands of years.", "tokens": [400, 309, 12025, 385, 294, 512, 2098, 295, 411, 2539, 4649, 411, 1564, 286, 1409, 2539, 4649, 307, 411, 11, 1954, 452, 3044, 341, 307, 1379, 3713, 295, 5383, 295, 924, 13], "temperature": 0.0, "avg_logprob": -0.18060338722085054, "compression_ratio": 1.4697986577181208, "no_speech_prob": 3.9435617509298027e-05}, {"id": 896, "seek": 657452, "start": 6574.52, "end": 6590.52, "text": " And I'm, you know, or APL is like that but this whole culture of 60 years, you know, there's this whole. And recently I tried to convert things on MATLAB mathematical formula into Python actually quite painful.", "tokens": [400, 286, 478, 11, 291, 458, 11, 420, 5372, 43, 307, 411, 300, 457, 341, 1379, 3713, 295, 4060, 924, 11, 291, 458, 11, 456, 311, 341, 1379, 13, 400, 3938, 286, 3031, 281, 7620, 721, 322, 5904, 11435, 33, 18894, 8513, 666, 15329, 767, 1596, 11697, 13], "temperature": 0.0, "avg_logprob": -0.2374300439673734, "compression_ratio": 1.4460093896713615, "no_speech_prob": 1.3628417946165428e-05}, {"id": 897, "seek": 657452, "start": 6590.52, "end": 6592.52, "text": " Yeah, yeah.", "tokens": [865, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.2374300439673734, "compression_ratio": 1.4460093896713615, "no_speech_prob": 1.3628417946165428e-05}, {"id": 898, "seek": 657452, "start": 6592.52, "end": 6595.52, "text": " Doing some signal processing. Cool.", "tokens": [18496, 512, 6358, 9007, 13, 8561, 13], "temperature": 0.0, "avg_logprob": -0.2374300439673734, "compression_ratio": 1.4460093896713615, "no_speech_prob": 1.3628417946165428e-05}, {"id": 899, "seek": 657452, "start": 6595.52, "end": 6599.52, "text": " How did our thing. Oh look, there's a thing here.", "tokens": [1012, 630, 527, 551, 13, 876, 574, 11, 456, 311, 257, 551, 510, 13], "temperature": 0.0, "avg_logprob": -0.2374300439673734, "compression_ratio": 1.4460093896713615, "no_speech_prob": 1.3628417946165428e-05}, {"id": 900, "seek": 659952, "start": 6599.52, "end": 6608.52, "text": " So, please try it and tell me if you find anything broken up with it in the chat.", "tokens": [407, 11, 1767, 853, 309, 293, 980, 385, 498, 291, 915, 1340, 5463, 493, 365, 309, 294, 264, 5081, 13], "temperature": 0.0, "avg_logprob": -0.23234961926937103, "compression_ratio": 1.2937062937062938, "no_speech_prob": 6.808711623307317e-05}, {"id": 901, "seek": 659952, "start": 6608.52, "end": 6611.52, "text": " Oh, why is there an M there.", "tokens": [876, 11, 983, 307, 456, 364, 376, 456, 13], "temperature": 0.0, "avg_logprob": -0.23234961926937103, "compression_ratio": 1.2937062937062938, "no_speech_prob": 6.808711623307317e-05}, {"id": 902, "seek": 659952, "start": 6611.52, "end": 6614.52, "text": " That's better.", "tokens": [663, 311, 1101, 13], "temperature": 0.0, "avg_logprob": -0.23234961926937103, "compression_ratio": 1.2937062937062938, "no_speech_prob": 6.808711623307317e-05}, {"id": 903, "seek": 659952, "start": 6614.52, "end": 6616.52, "text": " Alright, thanks all.", "tokens": [2798, 11, 3231, 439, 13], "temperature": 0.0, "avg_logprob": -0.23234961926937103, "compression_ratio": 1.2937062937062938, "no_speech_prob": 6.808711623307317e-05}, {"id": 904, "seek": 659952, "start": 6616.52, "end": 6618.52, "text": " Bye.", "tokens": [4621, 13], "temperature": 0.0, "avg_logprob": -0.23234961926937103, "compression_ratio": 1.2937062937062938, "no_speech_prob": 6.808711623307317e-05}, {"id": 905, "seek": 659952, "start": 6618.52, "end": 6620.52, "text": " Looking forward to.", "tokens": [11053, 2128, 281, 13], "temperature": 0.0, "avg_logprob": -0.23234961926937103, "compression_ratio": 1.2937062937062938, "no_speech_prob": 6.808711623307317e-05}, {"id": 906, "seek": 659952, "start": 6620.52, "end": 6623.52, "text": " Hey, awesome.", "tokens": [1911, 11, 3476, 13], "temperature": 0.0, "avg_logprob": -0.23234961926937103, "compression_ratio": 1.2937062937062938, "no_speech_prob": 6.808711623307317e-05}, {"id": 907, "seek": 662352, "start": 6623.52, "end": 6632.52, "text": " Thanks for having me.", "tokens": [50364, 2561, 337, 1419, 385, 13, 50814], "temperature": 0.0, "avg_logprob": -0.8645646572113037, "compression_ratio": 0.7241379310344828, "no_speech_prob": 0.00042593476246111095}], "language": "en"}