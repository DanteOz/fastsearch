{"text": " Thank you. Hello everybody. Hello. Good morning. How you guys doing. Hi. Doing good I gotta. I'm doing good. Let me see. Notebook one of the fast I numerical linear algebra course. But a PL five. Oh, it's not on the forum yet. Where do I find it? I just posted in the chat here. I literally pushed it like two minutes ago. But I will make a forum post after after the call. Really cool. Okay, so this is about the numerical well computational linear algebra course, which we did. Oh my god, five years ago. Well, three days short. Nearly five. Oh my gosh. That's amazing. Started going through it when you mentioned it just just the other day and it seems like a great course. I don't know why I didn't do it sooner. So, oh, thanks. Fantastic. I like to think so. I mean, it's not as like obviously immediately applicable kind of a thing, but you know, it's interesting. So, okay, so you've so you've taken the first notebook from it and. And then it's like, here we go. Ah, APL. Look at that. Get those two, two ones and then I can't play the answer using our matrix multiplication. Oh, nice. Nice. See, this is like a little just empty thing to fill in the space, I guess. Yeah, I'm not really sure how to make tables look good in APL. came up with. stuff together but one more section. A couple more sections here. Nice using the power operator I'm glad we did that. Yeah. And values my goodness. I didn't know how to calculate them a smart way but I got them calculated and hopefully I'll learn a smarter way later in the course. Great. This is my favorite bloom filter joke. It's also the only one I know is a good one. Nice job, Isaac. That's cool. Thank you. It's not going to get any easier. Well, I mean, in theory, this should be exactly what APL is good at right. Yes, absolutely. I mean, the bits we have to start like opening JPEGs and stuff like get complicated, but. Oh yeah I spent some time trying to figure out how to open images and it's. And then Molly's posted something. You can talk Molly you don't have to put stuff in the chat. We like hearing from people. Oh no the conversation was already going so I was waiting for it to be over. Yeah, so a few videos ago. You'll lose formula was talked about just a bit and yours identity. Yeah, the Khan Academy one shows like the power series of the power, sorry. Mccleod Ian, I forget. Series is that like a tailor. Oh yeah I guess it must be like a stainless. Yeah, like a tailor series. It shows it for sine cosine and E, and then inserts. I am to the one, the exponential. Oh cool. That one inserts I into it and shows how it's a combination of the site. The sign and cosine with an eye on it. Great. Yeah. So, and then you can split and then it shows how you can split them up into the one for sine and cosine and how it ends up looking like. Yeah, you, you lose formula. Excellent. Thank you. Anything else that's come up. I was just going to say, Jeremy I listened to some more of the array, but cast content. The right cast, or you might particular wonder or just, I listened to yours too which was great for the other. What shocked me was that how deeply embedded API is in Wall Street. Yes, that's amazing. I didn't realize that that was such a long legacy there with. Yes. Yeah, I mean, mainly nowadays it's K and KTB, which I think most of the big sense hedge fund trading folks use. But that itself came from a plus, which, after Whitney built at Morgan Stanley, and I discovered the other day that it actually exists as an open source thing nowadays. Not exactly. Yeah, historical interest. I don't know some kind of who was the interview talking about. One of the reasons that the APL community is a bit cloistered as you said last time is that a lot of them didn't open source their plantations, it was really built around proprietary applications, and that limited the exposure, which was really interesting Yeah, yeah, exactly. And it's also interesting how like proprietary trading shops like, you know secrecy so important to them. And they also like they don't care about following cultural kind of trends and so they do tend to like pick things that are good, regardless of whether they're popular so like Jane Street for example uses a camel. And yeah Morgan Stanley had a plus and lots of them use APL. That's interesting. I know a lot of them have been moving towards using more Python and recent years though, which I think you know partly that might be because Python is much better for working with accelerators. This one with Aaron was like one of my favorite episodes if you haven't seen it. And this one with Brooke was interesting it doesn't actually talk about APL that much but just like, I figured it out you're doing this so that you get us to talk. Whatever works. Great. That means that whole discussion about what's in the chat. Yes. Isaac thing you didn't actually say it. We saw that. I don't even remember pressing the stop sharing screen button. Okay. Fine. Yeah, okay, so this is K. And this is a plus. And this is this. Yeah, public the available implementation. And yeah, this is the one with Aaron who built a GPU compiler in APL. And yeah, this one with Brooke I thought was cool. Which other ones are good. There's also one with Eric Iverson which is good. Yeah, this one is good. It's a kind of a weird podcast because the first few episodes, kind of like assume you don't know anything about array programming. It's just like why would you be listening to an array programming podcast if you didn't know anything about array programming. Yeah, anyway, I felt glad about the point where they talked to Eric and talked about tacit programming was first started getting interesting. I think yeah I didn't know that until until you mentioned you're going on. Thanks for telling us. All right. No worries. Okay, should we do some calculus then. Okay, going into calculus. Yeah, so this is where we got to yesterday right we were doing. Rise over run. The slope. So this is a numerical approximation of a derivative. And it's an approximation because like the smaller you get this the closer you get to the slope at this exact point. But it's never, you know, quite short enough to be perfect. So yeah, I thought it'd be nice if we could create something that would calculate this for any function, which we can do. And the way you do it is by creating a custom operator. So we could create something called gradient. And we could kind of copy and paste all this. And let's say we put X on the left so that'll be our alpha. And our difference will be on the right. So that'll be our omega. So that's going to be a gradient of a particular function. Right. So the gradient of F at three or whatever at X, which is three. Let's write it at three with a difference of 0.01. So I'd restarted my notebook and surprised how long it takes to run actually. It's happening. There we go. Okay. So that number is the same as that number. So the thing is we want to replace F with, oh, and let's simplify this. We don't need these parentheses, right, because plus happens first. There we go. So in order to pass in a function, we can turn this into an operator. So if you look at the help for an operator, like star diuresis, you've got up to five things around it. You've got the two arguments of the function it creates and one or two arguments of the functions that you pass to the operator. So there's five things. So if you want to create a custom operator, this thing's going to be omega. This thing's going to be alpha. And then there's two more things. This thing is going to be called omega omega. And this thing's going to be called alpha alpha. So if we replace F with double alpha, we've now created an operator. And so that means we now have to tell it what function to take the derivative of. Oh, omega omega. So I'm going to put it on the right. OK, what did I do wrong? I'm not aware of needing to put it in parentheses, but. What did I do wrong? Why you still keep the F? Why is there an F here? Yeah. Because I've got to say, what am I taking the gradient of? So I'm taking the gradient of this function. So that's the thing that I make is going to be replaced with. So this is kind of where I find the quad operator really nice because right in the function, you can add your print statements to, you know, so like take that first that alpha that it's pointing at and assign that to the quad operator in the function. And then it'll print out what was there. OK, which is that should run before most everything else. OK, so it should print that before it fails. That didn't work. All right, let's try making something simpler. We're going to create an operator which just calls the function. OK, so there's the world's dumbest operator. So we should be able to go G of plus, which would be. Plus apply that to. Huh. OK. G plus. All right, so that did not work how I expected. Does it need to be alpha, alpha? The other way around. So normally you do like plus slash. So it goes on the right. I don't think this is right. OK. So maybe if we search for this. I haven't normally found this search very useful, but let's give it a try. Dops. Yes. OK, so it does expect to have just alpha, alpha if it's monadic. So that means. Oh, it goes, I think the opposite way around the way I expected. All right, so let's change this to alpha, alpha. And that would mean I think it's plus G. Ah, OK. So I guess that makes sense. Other operators work that way like plus slash. Oh, of course they do. No, I hadn't thought about that. Jeremy, you're an idiot. All right. Yes. Yeah, somehow I had it backwards in my head. OK, all that. Fine. By the way, Isaac, for your flashcards, it occurred to me that a lot of these things don't really make sense as flashcards. And for those like it occurred to me that something that might be useful is if you. Added tags to the ones that you want to be exported as cards. Then you could go through in your script and just add cards for those that have like a card tag on it or something like that. That would be a way to avoid having lots of crap you don't need. Yeah, I quickly learned the shortcut to suspend the card, but that would probably be a better way to do it. I haven't generated in the first place. Yeah. OK. Great. Yes, that's a bit I don't know. It's a bit weird in some ways, but I guess it kind of makes sense. This is how you create an operator. So this is a monadic operator because it only has alpha, alpha. It doesn't have omega, omega. And it's a monadic operator that creates a dyadic function. Because it's got an alpha and an omega. And so I don't think we actually need the parentheses anymore. Yeah, we don't because operators bind more tightly. So it's as if this is parentheses. Does that make sense? So a monadic operator takes stuff from the left. If you give it an alpha, alpha, it would take stuff on the left. I mean, I assume we could go omega, omega, although, as Isaac said, that's not quite. What you would expect, given how other ones work. Let's see if it works. No, you can't. OK, so yeah, it goes on the left if you say alpha, alpha. And if it's on the left and the right, then you would do you would do both. OK, so that's our custom. Derivative. And that's a numeric. Approximation of a derivative. To be more precise. All right, so. OK, we've got a whole list of operators here. Wait, so left arrow is considered an operator. Has anybody figured out what the curly brackets means yet, by the way? I haven't. I'll tell you an operator I'd quite like to do is this one, tilde, dioresis. I think that could save a parenthesis in the one we just did. Correct. Tilde. Tilde dioresis. OK, which is a monadic operator, so it's going to take one function. On its left and it produces a dyadic function. Hence, there's the one function on its left and that results in a dyadic function. It's got a bit of a strange name. Commute. But all it does is it takes x and y and it returns a function that actually calls y f x rather than. Rather than x f y. So if we do. OK, what's the letter for that? Yeah. Shift T. And that's called tilde dioresis. Monadic. Shift T. Dyadic. Oh, there is no monadic. OK. So then there's commute. And you could say, yeah, three minus two is that. So that would be putting x on the left and y on the right. So it's three minus two. But if we do it the other way around, two minus three, we could also write like this. Two minus three minus. And then commute means switch the order of the arguments. Does that make sense? So I just flip them around. Oh, just one moment. My daughter wants me. OK. OK. OK. OK. OK. OK. Sorry, we had a missing computer problem. So Marty found a link for brackets. Let's take a look. I've read that word before. APL shy result. By default, functions print their result unless they're shy. There you go. OK, so that's an optional argument. And that's a shy result. Great. How do you define a shy result in a function? No idea. OK. So this is a dyadic tilde dioresis. And so we can now redefine gradient. Like so. And because the right hand side is handled first, we can now say, and I find it's really helpful to like, find a way to say this, which is I would say omega divided into the right hand side. So I wouldn't say divide it, I would say divided into like normally there's some way you can like express the idea of these things being backwards in a reasonable math or English expression. So that does make it a bit more plain, which is nice. And then there was another version of tilde dioresis, which is constant. And so constant just always returns its argument. So we could create a function called zero. And so this, this is a function. And so we can apply it to anything we like. And I believe we could even do it dyadically. So that's just a function that returns zero. And that's it for tilde dioresis. This form I see a lot. People use it very frequently in APL. Jeremy when are they using it. They use it for exactly this kind of purpose. APL is hate parentheses, and they hate unnecessary symbols, which I kind of get like it's. This is certainly by having less stuff to read it's, I find it easier to read. Another one I think we might want to do is each which one of these is each does anybody remembers this one. Yeah, this one. So this is just dioresis. And here it is. One is just monadic. And it's a monadic operator. Oh, this word here means can be either monadic or dyadic. It's not ambivalent as in I don't care, but it's ambivalent as in either valence. Where valence is handedness. Yes, this is. Okay, this is a list of Okay, this is a list. This is an array of arrays. So it's an array with two elements. And if we try to do plus slash of that. It's going to get upset, because it's trying to do. It's trying to insert plus between its arguments, which would be the same as typing 1234 plus 567. The each operator takes the previous function, which in this case is itself being defined with an operator, and it means some, and it applies it over each of its arguments. So plus slash each means apply plus slash to this, and then apply plus slash to this. And thus giving us the results 10 and 18. Does that make sense. And I think that might work for like, it's creating an array, which is a two rows by three column array. I had a six rows got to go between them. Thank you. Okay. So if I tried to do two, three plus Matt, something like that can work in NumPy, it would broadcast the maybe like this, broadcast this over each row. But it doesn't add it also, I think, can work in J, but I don't think by default it works in APL. But I think if we say that it applies to each element of Matt, or is it applied to each column? Something like that. I think the problem is that it's going through each of two. Yeah, I think it's, yeah, I think it's going through each of two, three, four separately. What does this look like plus slash. Okay, it's that doesn't actually work that way correctly on a, on a matrix. I think this is, this might be related to when we were looking at the IOTA before we were searching for using it to find values in the matrix, it was, you wouldn't find individual values you'd find all rows at a time. Yeah, I think the issue is it's not going over cells of an array, but going over items. So I'm guessing if we kind of like this then we could do like Oh, not Matt B. Okay, yeah, so that's going to go over each of these, it's going to go over, it's going to go two plus this, and then it'll go three plus this. And I assume there must be some way to make that apply over a rank two array, but I don't know what it is. So I guess anybody fingers that out let us know otherwise I guess we'll probably come to it at some point. Put the syntax for defining a shy function in the chat. Okay. And one of the structure flow but shy, this is not shy copy them. I don't really have much of a flow I gotta be honest. Oh, it didn't work. Seems like you're on a roll to me. Copy that's more like it. Okay. So, I'm going to get shy, is it. And this one's not shy. So when you actually assigned it to the function that makes it not print out. Cool. Thanks. Yep. Not sure when I would want things not to print out but. Okay, so none of their examples are using matrices. The only other place that could be helpful to look at is to look at the APL wiki. It's only defined in nested APLs. I think that means things where you can have an array and an array. I don't know what I knew that means. So I assume there's going to be some magic incantation that basically turns a matrix into an array of arrays of rows, and that you would do it, do it that way. I assume. Okay. So you can search for a, an APL symbol on a PL cart will give you everything that's in. I mean, that's not a bad idea to learn how to use this thing because when I was on the podcast, they seem to think it was thing worth learning about. Okay, here it is. Each. How do I. I see so typing comma each ensures all men's vectors join items. So like idioms I guess. Yeah, so, like one that I found I was when I was working on this computational algebra you can type in like, calculate the determinant, and they've got a big long thing for that. And so some of them. Most of them. The ones at the top seem to be more simpler than the ones down below. Okay, are sorted. And actually this this tables lives in a text file repository. Here's Conway's Game of Life. That's great. I'm going to be really happy when I can read all this. Yeah, this is intense. That's cool. I only say one thing that mentions a matrix. Can you try adding matrix to the search. I can go there. Peptidagonal matrices. And I believe there are, he does have additional tags and stuff that's not shown here to help with the searching. I don't know how good they are. Non diagonal matrix of shape of matrix. So if I copy this and saying at the top that what each thing is, m is a matrix and capital N is a numeric array. So this is saying it's a numeric array, which is a matrix, I guess. So I guess that means in theory, we could type match here. We can. Okay. This is. Okay, this is the H, which is flipped. Okay, I'm going to try to do this just now. All right. I see slash bar and slope bar a lot. I didn't know this is called slope. I always call it backslash. And I have no idea what they are. So maybe we should learn. It says operator. It's a monadic operator. And we type it. And this is called replicate first. No, it's called reduce first. My daughter wants me again. Sorry. All right. So if you do the sum plus slash and a matrix versus this one, one will some column wires and one will some row wise. Okay. Cool. And we had a matrix ready to go then. Okay. And is that literally all it does? This is okay. So in J, J has a rank operator, which is actually the double quote sign, where basically you can just always say what access you want to use. So that would be reduced over the zero access. And that would be reduced over the one access. But I'm not sure if you can do anything quite the same. There is a thing called rank. Maybe we should see how this is different. So that's this one here. Which is called Jot Tyresis I assume. J. Help. J. Shift J. Classic edition. It doesn't have the same like usual information. Anyway, it's called rank. I already forgotten what letter I said. J. I guess this is called Jot Tyresis but I didn't see a thing for it. Monadic. Rank. And if I say I'm going to put over this access. That might need this. Hey look it is the same. So, wait no that's the same as sum. And what if we put a zero. Okay I don't know what I'm doing. Let's come back to that one and make sure we. Okay so it sounds like slash bar there's not much to learn. It's just the same as slash but it does it over a different access. Which I assume is going to be the same for backslash bar. Except they didn't call it backslash they called it slope. And that's probably going to be backslash I'm guessing. Nope it's not. Okay so we can we can specify the access. Plus slash. Yep. By adding like bracket one, right after the operator. I believe and then bracket. Like that. No square brackets immediately after the operator. So, just like that. Okay so. Does that apply for like everything or is that just this particular. I feel like I've seen that mentioned in the docs. Yeah, it's called a function access. This is like operators like to you can you put it on all functions or. I think it's all functions. Okay so why on earth do we need. Slash bar access. This is what I was looking at here. F must be a monadic primitive mixed function taken from these. Or a function okay I can't apply to many things it's just slash. Or slope or these. I wonder why there's a bunch of. And then you've also got access with diet a copper and. It must be a dietic primitive scalar function. Oh well that's good so any dietic scalar function primitive scope. Or a mixed function which I see means one with an operator, where they've used one of these. Okay so actually does sound like you can do a lot of things with it. That's good. Yeah, there's a, there's a wiki I put on the chat about the function access specifically and kind of covers both. Okay, cool. I see a few other people have missed them all chat by the way, is there anything we wanted to talk about or ask about anybody wants to speak up. Function access. Mine was was not specifically related to the content we were discussing so didn't want to bring it up. Oh no please do. We're so like not at all focused Molly, as you'll see. This is just like, yeah. Whatever seems interesting. And formula is definitely interesting. Oh yeah so I came first I first came across the formula in a paper that I was reading on positional embeddings. Um, so I had no idea what it was. I actually use this to figure out the fundamentals I was missing. Yeah, it was rotational positional embeddings what it was called. Okay. So, for those of you who are interested in transformer models. There's like literally no sense of like the order of things in a vector. And so it's like literally impossible for it to learn anything that requires order and language is ordered. So we use these things called positional embeddings. Is it this rotary position. Rotary positional. Rotary positional. It's been a while. Yes, that's it. And then there's a proof. Yeah, this was the actual proof I was going through, trying to figure out what they were talking about. All right. Yeah. And then I was missing a lot of the fundamentals so I just go down to where they're doing the actual proof. And then you can just click on the very whatever you do not understand like the proof for what you don't understand. So if you don't understand complex cosine, like how they are able to get the complex cosine function and it's not like infinite you don't find yourself clicking. I'm going to have to come back to where you started. Somewhat that can happen. But yeah. And then I just start looking up the various things they're talking about here until I understand it so okay. Yeah, that's cool. That's just one way I was able to understand papers like the math behind papers and stuff. So, thanks. That's great. All right. And probably talk about access. Something's going to be there. I just put a number. We can do that next time. That's going to be super handy. All right. Thanks everybody. See you next time. Bye.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 25.0, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.4, "avg_logprob": -0.8572488512311663, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.07744649797677994}, {"id": 1, "seek": 2500, "start": 25.0, "end": 38.0, "text": " Hello everybody.", "tokens": [2425, 2201, 13], "temperature": 0.0, "avg_logprob": -0.3862028402440688, "compression_ratio": 1.0657894736842106, "no_speech_prob": 0.0001414831931469962}, {"id": 2, "seek": 2500, "start": 38.0, "end": 40.0, "text": " Hello.", "tokens": [2425, 13], "temperature": 0.0, "avg_logprob": -0.3862028402440688, "compression_ratio": 1.0657894736842106, "no_speech_prob": 0.0001414831931469962}, {"id": 3, "seek": 2500, "start": 40.0, "end": 41.0, "text": " Good morning.", "tokens": [2205, 2446, 13], "temperature": 0.0, "avg_logprob": -0.3862028402440688, "compression_ratio": 1.0657894736842106, "no_speech_prob": 0.0001414831931469962}, {"id": 4, "seek": 2500, "start": 41.0, "end": 43.0, "text": " How you guys doing.", "tokens": [1012, 291, 1074, 884, 13], "temperature": 0.0, "avg_logprob": -0.3862028402440688, "compression_ratio": 1.0657894736842106, "no_speech_prob": 0.0001414831931469962}, {"id": 5, "seek": 2500, "start": 43.0, "end": 45.0, "text": " Hi.", "tokens": [2421, 13], "temperature": 0.0, "avg_logprob": -0.3862028402440688, "compression_ratio": 1.0657894736842106, "no_speech_prob": 0.0001414831931469962}, {"id": 6, "seek": 2500, "start": 45.0, "end": 49.0, "text": " Doing good I gotta.", "tokens": [18496, 665, 286, 3428, 13], "temperature": 0.0, "avg_logprob": -0.3862028402440688, "compression_ratio": 1.0657894736842106, "no_speech_prob": 0.0001414831931469962}, {"id": 7, "seek": 4900, "start": 49.0, "end": 58.0, "text": " I'm doing good.", "tokens": [286, 478, 884, 665, 13], "temperature": 0.0, "avg_logprob": -0.39742511897892147, "compression_ratio": 1.3630952380952381, "no_speech_prob": 0.00012707849964499474}, {"id": 8, "seek": 4900, "start": 58.0, "end": 65.0, "text": " Let me see.", "tokens": [961, 385, 536, 13], "temperature": 0.0, "avg_logprob": -0.39742511897892147, "compression_ratio": 1.3630952380952381, "no_speech_prob": 0.00012707849964499474}, {"id": 9, "seek": 4900, "start": 65.0, "end": 68.0, "text": " Notebook one of the fast I numerical linear algebra course.", "tokens": [11633, 2939, 472, 295, 264, 2370, 286, 29054, 8213, 21989, 1164, 13], "temperature": 0.0, "avg_logprob": -0.39742511897892147, "compression_ratio": 1.3630952380952381, "no_speech_prob": 0.00012707849964499474}, {"id": 10, "seek": 4900, "start": 68.0, "end": 70.0, "text": " But a PL five.", "tokens": [583, 257, 6999, 1732, 13], "temperature": 0.0, "avg_logprob": -0.39742511897892147, "compression_ratio": 1.3630952380952381, "no_speech_prob": 0.00012707849964499474}, {"id": 11, "seek": 4900, "start": 70.0, "end": 71.0, "text": " Oh, it's not on the forum yet.", "tokens": [876, 11, 309, 311, 406, 322, 264, 17542, 1939, 13], "temperature": 0.0, "avg_logprob": -0.39742511897892147, "compression_ratio": 1.3630952380952381, "no_speech_prob": 0.00012707849964499474}, {"id": 12, "seek": 4900, "start": 71.0, "end": 73.0, "text": " Where do I find it?", "tokens": [2305, 360, 286, 915, 309, 30], "temperature": 0.0, "avg_logprob": -0.39742511897892147, "compression_ratio": 1.3630952380952381, "no_speech_prob": 0.00012707849964499474}, {"id": 13, "seek": 4900, "start": 73.0, "end": 75.0, "text": " I just posted in the chat here.", "tokens": [286, 445, 9437, 294, 264, 5081, 510, 13], "temperature": 0.0, "avg_logprob": -0.39742511897892147, "compression_ratio": 1.3630952380952381, "no_speech_prob": 0.00012707849964499474}, {"id": 14, "seek": 4900, "start": 75.0, "end": 77.0, "text": " I literally pushed it like two minutes ago.", "tokens": [286, 3736, 9152, 309, 411, 732, 2077, 2057, 13], "temperature": 0.0, "avg_logprob": -0.39742511897892147, "compression_ratio": 1.3630952380952381, "no_speech_prob": 0.00012707849964499474}, {"id": 15, "seek": 7700, "start": 77.0, "end": 81.0, "text": " But I will make a forum post after after the call.", "tokens": [583, 286, 486, 652, 257, 17542, 2183, 934, 934, 264, 818, 13], "temperature": 0.0, "avg_logprob": -0.2306407352663436, "compression_ratio": 1.3071428571428572, "no_speech_prob": 6.10378265264444e-05}, {"id": 16, "seek": 7700, "start": 81.0, "end": 92.0, "text": " Really cool.", "tokens": [4083, 1627, 13], "temperature": 0.0, "avg_logprob": -0.2306407352663436, "compression_ratio": 1.3071428571428572, "no_speech_prob": 6.10378265264444e-05}, {"id": 17, "seek": 7700, "start": 92.0, "end": 97.0, "text": " Okay, so this is about the", "tokens": [1033, 11, 370, 341, 307, 466, 264], "temperature": 0.0, "avg_logprob": -0.2306407352663436, "compression_ratio": 1.3071428571428572, "no_speech_prob": 6.10378265264444e-05}, {"id": 18, "seek": 7700, "start": 97.0, "end": 102.0, "text": " numerical well computational linear algebra course,", "tokens": [29054, 731, 28270, 8213, 21989, 1164, 11], "temperature": 0.0, "avg_logprob": -0.2306407352663436, "compression_ratio": 1.3071428571428572, "no_speech_prob": 6.10378265264444e-05}, {"id": 19, "seek": 7700, "start": 102.0, "end": 106.0, "text": " which we did. Oh my god, five years ago.", "tokens": [597, 321, 630, 13, 876, 452, 3044, 11, 1732, 924, 2057, 13], "temperature": 0.0, "avg_logprob": -0.2306407352663436, "compression_ratio": 1.3071428571428572, "no_speech_prob": 6.10378265264444e-05}, {"id": 20, "seek": 10600, "start": 106.0, "end": 108.0, "text": " Well, three days short.", "tokens": [1042, 11, 1045, 1708, 2099, 13], "temperature": 0.0, "avg_logprob": -0.21166531244913736, "compression_ratio": 1.4222222222222223, "no_speech_prob": 6.706187559757382e-05}, {"id": 21, "seek": 10600, "start": 108.0, "end": 110.0, "text": " Nearly five.", "tokens": [38000, 1732, 13], "temperature": 0.0, "avg_logprob": -0.21166531244913736, "compression_ratio": 1.4222222222222223, "no_speech_prob": 6.706187559757382e-05}, {"id": 22, "seek": 10600, "start": 110.0, "end": 111.0, "text": " Oh my gosh.", "tokens": [876, 452, 6502, 13], "temperature": 0.0, "avg_logprob": -0.21166531244913736, "compression_ratio": 1.4222222222222223, "no_speech_prob": 6.706187559757382e-05}, {"id": 23, "seek": 10600, "start": 111.0, "end": 115.0, "text": " That's amazing.", "tokens": [663, 311, 2243, 13], "temperature": 0.0, "avg_logprob": -0.21166531244913736, "compression_ratio": 1.4222222222222223, "no_speech_prob": 6.706187559757382e-05}, {"id": 24, "seek": 10600, "start": 115.0, "end": 120.0, "text": " Started going through it when you mentioned it just just the other day and it seems like a great course.", "tokens": [39715, 516, 807, 309, 562, 291, 2835, 309, 445, 445, 264, 661, 786, 293, 309, 2544, 411, 257, 869, 1164, 13], "temperature": 0.0, "avg_logprob": -0.21166531244913736, "compression_ratio": 1.4222222222222223, "no_speech_prob": 6.706187559757382e-05}, {"id": 25, "seek": 10600, "start": 120.0, "end": 122.0, "text": " I don't know why I didn't do it sooner.", "tokens": [286, 500, 380, 458, 983, 286, 994, 380, 360, 309, 15324, 13], "temperature": 0.0, "avg_logprob": -0.21166531244913736, "compression_ratio": 1.4222222222222223, "no_speech_prob": 6.706187559757382e-05}, {"id": 26, "seek": 10600, "start": 122.0, "end": 124.0, "text": " So, oh, thanks.", "tokens": [407, 11, 1954, 11, 3231, 13], "temperature": 0.0, "avg_logprob": -0.21166531244913736, "compression_ratio": 1.4222222222222223, "no_speech_prob": 6.706187559757382e-05}, {"id": 27, "seek": 10600, "start": 124.0, "end": 126.0, "text": " Fantastic.", "tokens": [21320, 13], "temperature": 0.0, "avg_logprob": -0.21166531244913736, "compression_ratio": 1.4222222222222223, "no_speech_prob": 6.706187559757382e-05}, {"id": 28, "seek": 10600, "start": 126.0, "end": 129.0, "text": " I like to think so.", "tokens": [286, 411, 281, 519, 370, 13], "temperature": 0.0, "avg_logprob": -0.21166531244913736, "compression_ratio": 1.4222222222222223, "no_speech_prob": 6.706187559757382e-05}, {"id": 29, "seek": 12900, "start": 129.0, "end": 140.0, "text": " I mean, it's not as like obviously immediately applicable kind of a thing, but you know, it's interesting.", "tokens": [286, 914, 11, 309, 311, 406, 382, 411, 2745, 4258, 21142, 733, 295, 257, 551, 11, 457, 291, 458, 11, 309, 311, 1880, 13], "temperature": 0.0, "avg_logprob": -0.21691724459330242, "compression_ratio": 1.3918918918918919, "no_speech_prob": 5.506951310962904e-06}, {"id": 30, "seek": 12900, "start": 140.0, "end": 150.0, "text": " So, okay, so you've so you've taken the first notebook from it and.", "tokens": [407, 11, 1392, 11, 370, 291, 600, 370, 291, 600, 2726, 264, 700, 21060, 490, 309, 293, 13], "temperature": 0.0, "avg_logprob": -0.21691724459330242, "compression_ratio": 1.3918918918918919, "no_speech_prob": 5.506951310962904e-06}, {"id": 31, "seek": 12900, "start": 150.0, "end": 154.0, "text": " And then it's like, here we go.", "tokens": [400, 550, 309, 311, 411, 11, 510, 321, 352, 13], "temperature": 0.0, "avg_logprob": -0.21691724459330242, "compression_ratio": 1.3918918918918919, "no_speech_prob": 5.506951310962904e-06}, {"id": 32, "seek": 15400, "start": 154.0, "end": 159.0, "text": " Ah, APL.", "tokens": [2438, 11, 5372, 43, 13], "temperature": 0.0, "avg_logprob": -0.2723925839299741, "compression_ratio": 1.1531531531531531, "no_speech_prob": 8.012590114958584e-06}, {"id": 33, "seek": 15400, "start": 159.0, "end": 161.0, "text": " Look at that.", "tokens": [2053, 412, 300, 13], "temperature": 0.0, "avg_logprob": -0.2723925839299741, "compression_ratio": 1.1531531531531531, "no_speech_prob": 8.012590114958584e-06}, {"id": 34, "seek": 15400, "start": 161.0, "end": 167.0, "text": " Get those two, two ones and then I can't play the answer using our matrix multiplication.", "tokens": [3240, 729, 732, 11, 732, 2306, 293, 550, 286, 393, 380, 862, 264, 1867, 1228, 527, 8141, 27290, 13], "temperature": 0.0, "avg_logprob": -0.2723925839299741, "compression_ratio": 1.1531531531531531, "no_speech_prob": 8.012590114958584e-06}, {"id": 35, "seek": 15400, "start": 167.0, "end": 173.0, "text": " Oh, nice.", "tokens": [876, 11, 1481, 13], "temperature": 0.0, "avg_logprob": -0.2723925839299741, "compression_ratio": 1.1531531531531531, "no_speech_prob": 8.012590114958584e-06}, {"id": 36, "seek": 15400, "start": 173.0, "end": 180.0, "text": " Nice.", "tokens": [5490, 13], "temperature": 0.0, "avg_logprob": -0.2723925839299741, "compression_ratio": 1.1531531531531531, "no_speech_prob": 8.012590114958584e-06}, {"id": 37, "seek": 18000, "start": 180.0, "end": 185.0, "text": " See, this is like a little just empty thing to fill in the space, I guess.", "tokens": [3008, 11, 341, 307, 411, 257, 707, 445, 6707, 551, 281, 2836, 294, 264, 1901, 11, 286, 2041, 13], "temperature": 0.0, "avg_logprob": -0.2125485145439536, "compression_ratio": 1.2876712328767124, "no_speech_prob": 9.513670192973223e-06}, {"id": 38, "seek": 18000, "start": 185.0, "end": 190.0, "text": " Yeah, I'm not really sure how to make tables look good in APL.", "tokens": [865, 11, 286, 478, 406, 534, 988, 577, 281, 652, 8020, 574, 665, 294, 5372, 43, 13], "temperature": 0.0, "avg_logprob": -0.2125485145439536, "compression_ratio": 1.2876712328767124, "no_speech_prob": 9.513670192973223e-06}, {"id": 39, "seek": 18000, "start": 190.0, "end": 193.0, "text": " came up with.", "tokens": [1361, 493, 365, 13], "temperature": 0.0, "avg_logprob": -0.2125485145439536, "compression_ratio": 1.2876712328767124, "no_speech_prob": 9.513670192973223e-06}, {"id": 40, "seek": 18000, "start": 193.0, "end": 200.0, "text": " stuff together but", "tokens": [1507, 1214, 457], "temperature": 0.0, "avg_logprob": -0.2125485145439536, "compression_ratio": 1.2876712328767124, "no_speech_prob": 9.513670192973223e-06}, {"id": 41, "seek": 18000, "start": 200.0, "end": 203.0, "text": " one more section.", "tokens": [472, 544, 3541, 13], "temperature": 0.0, "avg_logprob": -0.2125485145439536, "compression_ratio": 1.2876712328767124, "no_speech_prob": 9.513670192973223e-06}, {"id": 42, "seek": 20300, "start": 203.0, "end": 214.0, "text": " A couple more sections here.", "tokens": [316, 1916, 544, 10863, 510, 13], "temperature": 0.0, "avg_logprob": -0.3334827423095703, "compression_ratio": 1.0256410256410255, "no_speech_prob": 4.02898331230972e-06}, {"id": 43, "seek": 20300, "start": 214.0, "end": 220.0, "text": " Nice using the power operator I'm glad we did that.", "tokens": [5490, 1228, 264, 1347, 12973, 286, 478, 5404, 321, 630, 300, 13], "temperature": 0.0, "avg_logprob": -0.3334827423095703, "compression_ratio": 1.0256410256410255, "no_speech_prob": 4.02898331230972e-06}, {"id": 44, "seek": 22000, "start": 220.0, "end": 234.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.2384837974201549, "compression_ratio": 1.3360655737704918, "no_speech_prob": 6.143697646621149e-06}, {"id": 45, "seek": 22000, "start": 234.0, "end": 237.0, "text": " And values my goodness.", "tokens": [400, 4190, 452, 8387, 13], "temperature": 0.0, "avg_logprob": -0.2384837974201549, "compression_ratio": 1.3360655737704918, "no_speech_prob": 6.143697646621149e-06}, {"id": 46, "seek": 22000, "start": 237.0, "end": 244.0, "text": " I didn't know how to calculate them a smart way but I got them calculated and hopefully I'll learn a smarter way later in the course.", "tokens": [286, 994, 380, 458, 577, 281, 8873, 552, 257, 4069, 636, 457, 286, 658, 552, 15598, 293, 4696, 286, 603, 1466, 257, 20294, 636, 1780, 294, 264, 1164, 13], "temperature": 0.0, "avg_logprob": -0.2384837974201549, "compression_ratio": 1.3360655737704918, "no_speech_prob": 6.143697646621149e-06}, {"id": 47, "seek": 24400, "start": 244.0, "end": 250.0, "text": " Great.", "tokens": [3769, 13], "temperature": 0.0, "avg_logprob": -0.18922450624663253, "compression_ratio": 1.2890625, "no_speech_prob": 2.482314130247687e-06}, {"id": 48, "seek": 24400, "start": 250.0, "end": 254.0, "text": " This is my favorite bloom filter joke.", "tokens": [639, 307, 452, 2954, 26899, 6608, 7647, 13], "temperature": 0.0, "avg_logprob": -0.18922450624663253, "compression_ratio": 1.2890625, "no_speech_prob": 2.482314130247687e-06}, {"id": 49, "seek": 24400, "start": 254.0, "end": 258.0, "text": " It's also the only one I know is a good one.", "tokens": [467, 311, 611, 264, 787, 472, 286, 458, 307, 257, 665, 472, 13], "temperature": 0.0, "avg_logprob": -0.18922450624663253, "compression_ratio": 1.2890625, "no_speech_prob": 2.482314130247687e-06}, {"id": 50, "seek": 24400, "start": 258.0, "end": 262.0, "text": " Nice job, Isaac. That's cool.", "tokens": [5490, 1691, 11, 22505, 13, 663, 311, 1627, 13], "temperature": 0.0, "avg_logprob": -0.18922450624663253, "compression_ratio": 1.2890625, "no_speech_prob": 2.482314130247687e-06}, {"id": 51, "seek": 24400, "start": 262.0, "end": 264.0, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.18922450624663253, "compression_ratio": 1.2890625, "no_speech_prob": 2.482314130247687e-06}, {"id": 52, "seek": 24400, "start": 264.0, "end": 268.0, "text": " It's not going to get any easier.", "tokens": [467, 311, 406, 516, 281, 483, 604, 3571, 13], "temperature": 0.0, "avg_logprob": -0.18922450624663253, "compression_ratio": 1.2890625, "no_speech_prob": 2.482314130247687e-06}, {"id": 53, "seek": 26800, "start": 268.0, "end": 276.0, "text": " Well, I mean, in theory, this should be exactly what APL is good at right. Yes, absolutely.", "tokens": [1042, 11, 286, 914, 11, 294, 5261, 11, 341, 820, 312, 2293, 437, 5372, 43, 307, 665, 412, 558, 13, 1079, 11, 3122, 13], "temperature": 0.0, "avg_logprob": -0.19941403315617487, "compression_ratio": 1.2657342657342658, "no_speech_prob": 6.240621132747037e-06}, {"id": 54, "seek": 26800, "start": 276.0, "end": 282.0, "text": " I mean, the bits we have to start like opening JPEGs and stuff like get complicated, but.", "tokens": [286, 914, 11, 264, 9239, 321, 362, 281, 722, 411, 5193, 508, 5208, 33715, 293, 1507, 411, 483, 6179, 11, 457, 13], "temperature": 0.0, "avg_logprob": -0.19941403315617487, "compression_ratio": 1.2657342657342658, "no_speech_prob": 6.240621132747037e-06}, {"id": 55, "seek": 28200, "start": 282.0, "end": 302.0, "text": " Oh yeah I spent some time trying to figure out how to open images and it's.", "tokens": [876, 1338, 286, 4418, 512, 565, 1382, 281, 2573, 484, 577, 281, 1269, 5267, 293, 309, 311, 13], "temperature": 0.0, "avg_logprob": -0.2491323563360399, "compression_ratio": 1.134020618556701, "no_speech_prob": 4.860280114371562e-06}, {"id": 56, "seek": 28200, "start": 302.0, "end": 308.0, "text": " And then Molly's posted something.", "tokens": [400, 550, 26665, 311, 9437, 746, 13], "temperature": 0.0, "avg_logprob": -0.2491323563360399, "compression_ratio": 1.134020618556701, "no_speech_prob": 4.860280114371562e-06}, {"id": 57, "seek": 30800, "start": 308.0, "end": 322.0, "text": " You can talk Molly you don't have to put stuff in the chat. We like hearing from people. Oh no the conversation was already going so I was waiting for it to be over.", "tokens": [509, 393, 751, 26665, 291, 500, 380, 362, 281, 829, 1507, 294, 264, 5081, 13, 492, 411, 4763, 490, 561, 13, 876, 572, 264, 3761, 390, 1217, 516, 370, 286, 390, 3806, 337, 309, 281, 312, 670, 13], "temperature": 0.0, "avg_logprob": -0.24058184904210708, "compression_ratio": 1.4364640883977902, "no_speech_prob": 6.10682982369326e-05}, {"id": 58, "seek": 30800, "start": 322.0, "end": 326.0, "text": " Yeah, so a few videos ago.", "tokens": [865, 11, 370, 257, 1326, 2145, 2057, 13], "temperature": 0.0, "avg_logprob": -0.24058184904210708, "compression_ratio": 1.4364640883977902, "no_speech_prob": 6.10682982369326e-05}, {"id": 59, "seek": 30800, "start": 326.0, "end": 333.0, "text": " You'll lose formula was talked about just a bit and yours identity.", "tokens": [509, 603, 3624, 8513, 390, 2825, 466, 445, 257, 857, 293, 6342, 6575, 13], "temperature": 0.0, "avg_logprob": -0.24058184904210708, "compression_ratio": 1.4364640883977902, "no_speech_prob": 6.10682982369326e-05}, {"id": 60, "seek": 33300, "start": 333.0, "end": 340.0, "text": " Yeah, the Khan Academy one shows like the power series of the power, sorry.", "tokens": [865, 11, 264, 18136, 11735, 472, 3110, 411, 264, 1347, 2638, 295, 264, 1347, 11, 2597, 13], "temperature": 0.0, "avg_logprob": -0.36457650136139436, "compression_ratio": 1.4460431654676258, "no_speech_prob": 9.458317799726501e-05}, {"id": 61, "seek": 33300, "start": 340.0, "end": 344.0, "text": " Mccleod Ian, I forget.", "tokens": [376, 1914, 306, 378, 19595, 11, 286, 2870, 13], "temperature": 0.0, "avg_logprob": -0.36457650136139436, "compression_ratio": 1.4460431654676258, "no_speech_prob": 9.458317799726501e-05}, {"id": 62, "seek": 33300, "start": 344.0, "end": 351.0, "text": " Series is that like a tailor. Oh yeah I guess it must be like a stainless. Yeah, like a tailor series.", "tokens": [13934, 307, 300, 411, 257, 33068, 13, 876, 1338, 286, 2041, 309, 1633, 312, 411, 257, 24048, 13, 865, 11, 411, 257, 33068, 2638, 13], "temperature": 0.0, "avg_logprob": -0.36457650136139436, "compression_ratio": 1.4460431654676258, "no_speech_prob": 9.458317799726501e-05}, {"id": 63, "seek": 35100, "start": 351.0, "end": 367.0, "text": " It shows it for sine cosine and E, and then inserts. I am to the one, the exponential. Oh cool. That one inserts I into it and shows how it's a combination of the site.", "tokens": [467, 3110, 309, 337, 18609, 23565, 293, 462, 11, 293, 550, 49163, 13, 286, 669, 281, 264, 472, 11, 264, 21510, 13, 876, 1627, 13, 663, 472, 49163, 286, 666, 309, 293, 3110, 577, 309, 311, 257, 6562, 295, 264, 3621, 13], "temperature": 0.0, "avg_logprob": -0.29078444838523865, "compression_ratio": 1.5068493150684932, "no_speech_prob": 9.972301086236257e-06}, {"id": 64, "seek": 35100, "start": 367.0, "end": 372.0, "text": " The sign and cosine with an eye on it. Great.", "tokens": [440, 1465, 293, 23565, 365, 364, 3313, 322, 309, 13, 3769, 13], "temperature": 0.0, "avg_logprob": -0.29078444838523865, "compression_ratio": 1.5068493150684932, "no_speech_prob": 9.972301086236257e-06}, {"id": 65, "seek": 35100, "start": 372.0, "end": 373.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.29078444838523865, "compression_ratio": 1.5068493150684932, "no_speech_prob": 9.972301086236257e-06}, {"id": 66, "seek": 37300, "start": 373.0, "end": 385.0, "text": " So, and then you can split and then it shows how you can split them up into the one for sine and cosine and how it ends up looking like.", "tokens": [407, 11, 293, 550, 291, 393, 7472, 293, 550, 309, 3110, 577, 291, 393, 7472, 552, 493, 666, 264, 472, 337, 18609, 293, 23565, 293, 577, 309, 5314, 493, 1237, 411, 13], "temperature": 0.0, "avg_logprob": -0.15476817469443044, "compression_ratio": 1.5069444444444444, "no_speech_prob": 1.077810247807065e-05}, {"id": 67, "seek": 37300, "start": 385.0, "end": 389.0, "text": " Yeah, you, you lose formula. Excellent.", "tokens": [865, 11, 291, 11, 291, 3624, 8513, 13, 16723, 13], "temperature": 0.0, "avg_logprob": -0.15476817469443044, "compression_ratio": 1.5069444444444444, "no_speech_prob": 1.077810247807065e-05}, {"id": 68, "seek": 37300, "start": 389.0, "end": 396.0, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.15476817469443044, "compression_ratio": 1.5069444444444444, "no_speech_prob": 1.077810247807065e-05}, {"id": 69, "seek": 37300, "start": 396.0, "end": 400.0, "text": " Anything else that's come up.", "tokens": [11998, 1646, 300, 311, 808, 493, 13], "temperature": 0.0, "avg_logprob": -0.15476817469443044, "compression_ratio": 1.5069444444444444, "no_speech_prob": 1.077810247807065e-05}, {"id": 70, "seek": 40000, "start": 400.0, "end": 408.0, "text": " I was just going to say, Jeremy I listened to some more of the array, but cast content.", "tokens": [286, 390, 445, 516, 281, 584, 11, 17809, 286, 13207, 281, 512, 544, 295, 264, 10225, 11, 457, 4193, 2701, 13], "temperature": 0.0, "avg_logprob": -0.2767429790277591, "compression_ratio": 1.530701754385965, "no_speech_prob": 3.761308471439406e-05}, {"id": 71, "seek": 40000, "start": 408.0, "end": 416.0, "text": " The right cast, or you might particular wonder or just, I listened to yours too which was great for the other.", "tokens": [440, 558, 4193, 11, 420, 291, 1062, 1729, 2441, 420, 445, 11, 286, 13207, 281, 6342, 886, 597, 390, 869, 337, 264, 661, 13], "temperature": 0.0, "avg_logprob": -0.2767429790277591, "compression_ratio": 1.530701754385965, "no_speech_prob": 3.761308471439406e-05}, {"id": 72, "seek": 40000, "start": 416.0, "end": 427.0, "text": " What shocked me was that how deeply embedded API is in Wall Street. Yes, that's amazing. I didn't realize that that was such a long legacy there with.", "tokens": [708, 12763, 385, 390, 300, 577, 8760, 16741, 9362, 307, 294, 9551, 7638, 13, 1079, 11, 300, 311, 2243, 13, 286, 994, 380, 4325, 300, 300, 390, 1270, 257, 938, 11711, 456, 365, 13], "temperature": 0.0, "avg_logprob": -0.2767429790277591, "compression_ratio": 1.530701754385965, "no_speech_prob": 3.761308471439406e-05}, {"id": 73, "seek": 42700, "start": 427.0, "end": 446.0, "text": " Yes. Yeah, I mean, mainly nowadays it's K and KTB, which I think most of the big sense hedge fund trading folks use.", "tokens": [1079, 13, 865, 11, 286, 914, 11, 8704, 13434, 309, 311, 591, 293, 591, 51, 33, 11, 597, 286, 519, 881, 295, 264, 955, 2020, 25304, 2374, 9529, 4024, 764, 13], "temperature": 0.0, "avg_logprob": -0.2239112445286342, "compression_ratio": 1.0943396226415094, "no_speech_prob": 2.354713433305733e-05}, {"id": 74, "seek": 44600, "start": 446.0, "end": 462.0, "text": " But that itself came from a plus, which, after Whitney built at Morgan Stanley, and I discovered the other day that it actually exists as an open source thing nowadays.", "tokens": [583, 300, 2564, 1361, 490, 257, 1804, 11, 597, 11, 934, 39466, 3094, 412, 16724, 28329, 11, 293, 286, 6941, 264, 661, 786, 300, 309, 767, 8198, 382, 364, 1269, 4009, 551, 13434, 13], "temperature": 0.0, "avg_logprob": -0.1733030891418457, "compression_ratio": 1.3333333333333333, "no_speech_prob": 1.1657671166176442e-05}, {"id": 75, "seek": 44600, "start": 462.0, "end": 465.0, "text": " Not exactly.", "tokens": [1726, 2293, 13], "temperature": 0.0, "avg_logprob": -0.1733030891418457, "compression_ratio": 1.3333333333333333, "no_speech_prob": 1.1657671166176442e-05}, {"id": 76, "seek": 44600, "start": 465.0, "end": 469.0, "text": " Yeah, historical interest.", "tokens": [865, 11, 8584, 1179, 13], "temperature": 0.0, "avg_logprob": -0.1733030891418457, "compression_ratio": 1.3333333333333333, "no_speech_prob": 1.1657671166176442e-05}, {"id": 77, "seek": 46900, "start": 469.0, "end": 476.0, "text": " I don't know some kind of who was the interview talking about.", "tokens": [286, 500, 380, 458, 512, 733, 295, 567, 390, 264, 4049, 1417, 466, 13], "temperature": 0.0, "avg_logprob": -0.25198819902208114, "compression_ratio": 1.5485436893203883, "no_speech_prob": 1.7496086002211086e-05}, {"id": 78, "seek": 46900, "start": 476.0, "end": 495.0, "text": " One of the reasons that the APL community is a bit cloistered as you said last time is that a lot of them didn't open source their plantations, it was really built around proprietary applications, and that limited the exposure, which was really interesting", "tokens": [1485, 295, 264, 4112, 300, 264, 5372, 43, 1768, 307, 257, 857, 20123, 1964, 292, 382, 291, 848, 1036, 565, 307, 300, 257, 688, 295, 552, 994, 380, 1269, 4009, 641, 3709, 763, 11, 309, 390, 534, 3094, 926, 38992, 5821, 11, 293, 300, 5567, 264, 10420, 11, 597, 390, 534, 1880], "temperature": 0.0, "avg_logprob": -0.25198819902208114, "compression_ratio": 1.5485436893203883, "no_speech_prob": 1.7496086002211086e-05}, {"id": 79, "seek": 49500, "start": 495.0, "end": 508.0, "text": " Yeah, yeah, exactly. And it's also interesting how like proprietary trading shops like, you know secrecy so important to them.", "tokens": [865, 11, 1338, 11, 2293, 13, 400, 309, 311, 611, 1880, 577, 411, 38992, 9529, 14457, 411, 11, 291, 458, 34432, 1344, 370, 1021, 281, 552, 13], "temperature": 0.0, "avg_logprob": -0.24184319280808972, "compression_ratio": 1.2, "no_speech_prob": 1.2409183909767307e-05}, {"id": 80, "seek": 50800, "start": 508.0, "end": 525.0, "text": " And they also like they don't care about following cultural kind of trends and so they do tend to like pick things that are good, regardless of whether they're popular so like Jane Street for example uses a camel.", "tokens": [400, 436, 611, 411, 436, 500, 380, 1127, 466, 3480, 6988, 733, 295, 13892, 293, 370, 436, 360, 3928, 281, 411, 1888, 721, 300, 366, 665, 11, 10060, 295, 1968, 436, 434, 3743, 370, 411, 13048, 7638, 337, 1365, 4960, 257, 37755, 13], "temperature": 0.0, "avg_logprob": -0.21662546694278717, "compression_ratio": 1.4972677595628416, "no_speech_prob": 8.851080224303587e-07}, {"id": 81, "seek": 50800, "start": 525.0, "end": 529.0, "text": " And yeah Morgan Stanley had a plus and lots of them use APL.", "tokens": [400, 1338, 16724, 28329, 632, 257, 1804, 293, 3195, 295, 552, 764, 5372, 43, 13], "temperature": 0.0, "avg_logprob": -0.21662546694278717, "compression_ratio": 1.4972677595628416, "no_speech_prob": 8.851080224303587e-07}, {"id": 82, "seek": 52900, "start": 529.0, "end": 540.0, "text": " That's interesting. I know a lot of them have been moving towards using more Python and recent years though,", "tokens": [663, 311, 1880, 13, 286, 458, 257, 688, 295, 552, 362, 668, 2684, 3030, 1228, 544, 15329, 293, 5162, 924, 1673, 11], "temperature": 0.0, "avg_logprob": -0.11738364836748909, "compression_ratio": 1.47, "no_speech_prob": 3.611819465731969e-06}, {"id": 83, "seek": 52900, "start": 540.0, "end": 550.0, "text": " which I think you know partly that might be because Python is much better for working with accelerators.", "tokens": [597, 286, 519, 291, 458, 17031, 300, 1062, 312, 570, 15329, 307, 709, 1101, 337, 1364, 365, 10172, 3391, 13], "temperature": 0.0, "avg_logprob": -0.11738364836748909, "compression_ratio": 1.47, "no_speech_prob": 3.611819465731969e-06}, {"id": 84, "seek": 52900, "start": 550.0, "end": 556.0, "text": " This one with Aaron was like one of my favorite episodes if you haven't seen it.", "tokens": [639, 472, 365, 14018, 390, 411, 472, 295, 452, 2954, 9313, 498, 291, 2378, 380, 1612, 309, 13], "temperature": 0.0, "avg_logprob": -0.11738364836748909, "compression_ratio": 1.47, "no_speech_prob": 3.611819465731969e-06}, {"id": 85, "seek": 55600, "start": 556.0, "end": 565.0, "text": " And this one with Brooke was interesting it doesn't actually talk about APL that much but just like,", "tokens": [400, 341, 472, 365, 43092, 390, 1880, 309, 1177, 380, 767, 751, 466, 5372, 43, 300, 709, 457, 445, 411, 11], "temperature": 0.0, "avg_logprob": -0.20049665524409369, "compression_ratio": 1.3006993006993006, "no_speech_prob": 3.4791126381605864e-05}, {"id": 86, "seek": 55600, "start": 565.0, "end": 572.0, "text": " I figured it out you're doing this so that you get us to talk.", "tokens": [286, 8932, 309, 484, 291, 434, 884, 341, 370, 300, 291, 483, 505, 281, 751, 13], "temperature": 0.0, "avg_logprob": -0.20049665524409369, "compression_ratio": 1.3006993006993006, "no_speech_prob": 3.4791126381605864e-05}, {"id": 87, "seek": 55600, "start": 572.0, "end": 576.0, "text": " Whatever works.", "tokens": [8541, 1985, 13], "temperature": 0.0, "avg_logprob": -0.20049665524409369, "compression_ratio": 1.3006993006993006, "no_speech_prob": 3.4791126381605864e-05}, {"id": 88, "seek": 55600, "start": 576.0, "end": 580.0, "text": " Great.", "tokens": [3769, 13], "temperature": 0.0, "avg_logprob": -0.20049665524409369, "compression_ratio": 1.3006993006993006, "no_speech_prob": 3.4791126381605864e-05}, {"id": 89, "seek": 58000, "start": 580.0, "end": 589.0, "text": " That means that whole discussion about", "tokens": [663, 1355, 300, 1379, 5017, 466], "temperature": 0.0, "avg_logprob": -0.288259642464774, "compression_ratio": 1.3647798742138364, "no_speech_prob": 3.0232398785301484e-05}, {"id": 90, "seek": 58000, "start": 589.0, "end": 592.0, "text": " what's in the chat. Yes.", "tokens": [437, 311, 294, 264, 5081, 13, 1079, 13], "temperature": 0.0, "avg_logprob": -0.288259642464774, "compression_ratio": 1.3647798742138364, "no_speech_prob": 3.0232398785301484e-05}, {"id": 91, "seek": 58000, "start": 592.0, "end": 594.0, "text": " Isaac thing you didn't actually say it.", "tokens": [22505, 551, 291, 994, 380, 767, 584, 309, 13], "temperature": 0.0, "avg_logprob": -0.288259642464774, "compression_ratio": 1.3647798742138364, "no_speech_prob": 3.0232398785301484e-05}, {"id": 92, "seek": 58000, "start": 594.0, "end": 597.0, "text": " We saw that.", "tokens": [492, 1866, 300, 13], "temperature": 0.0, "avg_logprob": -0.288259642464774, "compression_ratio": 1.3647798742138364, "no_speech_prob": 3.0232398785301484e-05}, {"id": 93, "seek": 58000, "start": 597.0, "end": 601.0, "text": " I don't even remember pressing the stop sharing screen button.", "tokens": [286, 500, 380, 754, 1604, 12417, 264, 1590, 5414, 2568, 2960, 13], "temperature": 0.0, "avg_logprob": -0.288259642464774, "compression_ratio": 1.3647798742138364, "no_speech_prob": 3.0232398785301484e-05}, {"id": 94, "seek": 58000, "start": 601.0, "end": 603.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.288259642464774, "compression_ratio": 1.3647798742138364, "no_speech_prob": 3.0232398785301484e-05}, {"id": 95, "seek": 58000, "start": 603.0, "end": 604.0, "text": " Fine.", "tokens": [12024, 13], "temperature": 0.0, "avg_logprob": -0.288259642464774, "compression_ratio": 1.3647798742138364, "no_speech_prob": 3.0232398785301484e-05}, {"id": 96, "seek": 58000, "start": 604.0, "end": 608.0, "text": " Yeah, okay, so this is K.", "tokens": [865, 11, 1392, 11, 370, 341, 307, 591, 13], "temperature": 0.0, "avg_logprob": -0.288259642464774, "compression_ratio": 1.3647798742138364, "no_speech_prob": 3.0232398785301484e-05}, {"id": 97, "seek": 60800, "start": 608.0, "end": 611.0, "text": " And this is a plus.", "tokens": [400, 341, 307, 257, 1804, 13], "temperature": 0.0, "avg_logprob": -0.1660122553507487, "compression_ratio": 1.4565217391304348, "no_speech_prob": 3.6119361084274715e-06}, {"id": 98, "seek": 60800, "start": 611.0, "end": 613.0, "text": " And this is this.", "tokens": [400, 341, 307, 341, 13], "temperature": 0.0, "avg_logprob": -0.1660122553507487, "compression_ratio": 1.4565217391304348, "no_speech_prob": 3.6119361084274715e-06}, {"id": 99, "seek": 60800, "start": 613.0, "end": 619.0, "text": " Yeah, public the available implementation.", "tokens": [865, 11, 1908, 264, 2435, 11420, 13], "temperature": 0.0, "avg_logprob": -0.1660122553507487, "compression_ratio": 1.4565217391304348, "no_speech_prob": 3.6119361084274715e-06}, {"id": 100, "seek": 60800, "start": 619.0, "end": 629.0, "text": " And yeah, this is the one with Aaron who built a GPU compiler in APL.", "tokens": [400, 1338, 11, 341, 307, 264, 472, 365, 14018, 567, 3094, 257, 18407, 31958, 294, 5372, 43, 13], "temperature": 0.0, "avg_logprob": -0.1660122553507487, "compression_ratio": 1.4565217391304348, "no_speech_prob": 3.6119361084274715e-06}, {"id": 101, "seek": 60800, "start": 629.0, "end": 634.0, "text": " And yeah, this one with Brooke I thought was cool.", "tokens": [400, 1338, 11, 341, 472, 365, 43092, 286, 1194, 390, 1627, 13], "temperature": 0.0, "avg_logprob": -0.1660122553507487, "compression_ratio": 1.4565217391304348, "no_speech_prob": 3.6119361084274715e-06}, {"id": 102, "seek": 63400, "start": 634.0, "end": 642.0, "text": " Which other ones are good. There's also one with Eric Iverson which is good.", "tokens": [3013, 661, 2306, 366, 665, 13, 821, 311, 611, 472, 365, 9336, 286, 840, 266, 597, 307, 665, 13], "temperature": 0.0, "avg_logprob": -0.1423738742696828, "compression_ratio": 1.795, "no_speech_prob": 1.7499900422990322e-05}, {"id": 103, "seek": 63400, "start": 642.0, "end": 645.0, "text": " Yeah, this one is good.", "tokens": [865, 11, 341, 472, 307, 665, 13], "temperature": 0.0, "avg_logprob": -0.1423738742696828, "compression_ratio": 1.795, "no_speech_prob": 1.7499900422990322e-05}, {"id": 104, "seek": 63400, "start": 645.0, "end": 654.0, "text": " It's a kind of a weird podcast because the first few episodes, kind of like assume you don't know anything about array programming.", "tokens": [467, 311, 257, 733, 295, 257, 3657, 7367, 570, 264, 700, 1326, 9313, 11, 733, 295, 411, 6552, 291, 500, 380, 458, 1340, 466, 10225, 9410, 13], "temperature": 0.0, "avg_logprob": -0.1423738742696828, "compression_ratio": 1.795, "no_speech_prob": 1.7499900422990322e-05}, {"id": 105, "seek": 63400, "start": 654.0, "end": 660.0, "text": " It's just like why would you be listening to an array programming podcast if you didn't know anything about array programming.", "tokens": [467, 311, 445, 411, 983, 576, 291, 312, 4764, 281, 364, 10225, 9410, 7367, 498, 291, 994, 380, 458, 1340, 466, 10225, 9410, 13], "temperature": 0.0, "avg_logprob": -0.1423738742696828, "compression_ratio": 1.795, "no_speech_prob": 1.7499900422990322e-05}, {"id": 106, "seek": 66000, "start": 660.0, "end": 671.0, "text": " Yeah, anyway, I felt glad about the point where they talked to Eric and talked about tacit programming was first started getting interesting.", "tokens": [865, 11, 4033, 11, 286, 2762, 5404, 466, 264, 935, 689, 436, 2825, 281, 9336, 293, 2825, 466, 25018, 270, 9410, 390, 700, 1409, 1242, 1880, 13], "temperature": 0.0, "avg_logprob": -0.2441405476750554, "compression_ratio": 1.4754901960784315, "no_speech_prob": 4.2630344978533685e-05}, {"id": 107, "seek": 66000, "start": 671.0, "end": 678.0, "text": " I think yeah I didn't know that until until you mentioned you're going on. Thanks for telling us. All right.", "tokens": [286, 519, 1338, 286, 994, 380, 458, 300, 1826, 1826, 291, 2835, 291, 434, 516, 322, 13, 2561, 337, 3585, 505, 13, 1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.2441405476750554, "compression_ratio": 1.4754901960784315, "no_speech_prob": 4.2630344978533685e-05}, {"id": 108, "seek": 66000, "start": 678.0, "end": 683.0, "text": " No worries.", "tokens": [883, 16340, 13], "temperature": 0.0, "avg_logprob": -0.2441405476750554, "compression_ratio": 1.4754901960784315, "no_speech_prob": 4.2630344978533685e-05}, {"id": 109, "seek": 66000, "start": 683.0, "end": 688.0, "text": " Okay, should we do some calculus then.", "tokens": [1033, 11, 820, 321, 360, 512, 33400, 550, 13], "temperature": 0.0, "avg_logprob": -0.2441405476750554, "compression_ratio": 1.4754901960784315, "no_speech_prob": 4.2630344978533685e-05}, {"id": 110, "seek": 68800, "start": 688.0, "end": 701.0, "text": " Okay, going into calculus.", "tokens": [1033, 11, 516, 666, 33400, 13], "temperature": 0.0, "avg_logprob": -0.24371842334144994, "compression_ratio": 1.1485148514851484, "no_speech_prob": 2.5862333131954074e-05}, {"id": 111, "seek": 68800, "start": 701.0, "end": 707.0, "text": " Yeah, so this is where we got to yesterday right we were doing.", "tokens": [865, 11, 370, 341, 307, 689, 321, 658, 281, 5186, 558, 321, 645, 884, 13], "temperature": 0.0, "avg_logprob": -0.24371842334144994, "compression_ratio": 1.1485148514851484, "no_speech_prob": 2.5862333131954074e-05}, {"id": 112, "seek": 68800, "start": 707.0, "end": 711.0, "text": " Rise over run.", "tokens": [34482, 670, 1190, 13], "temperature": 0.0, "avg_logprob": -0.24371842334144994, "compression_ratio": 1.1485148514851484, "no_speech_prob": 2.5862333131954074e-05}, {"id": 113, "seek": 68800, "start": 711.0, "end": 715.0, "text": " The slope.", "tokens": [440, 13525, 13], "temperature": 0.0, "avg_logprob": -0.24371842334144994, "compression_ratio": 1.1485148514851484, "no_speech_prob": 2.5862333131954074e-05}, {"id": 114, "seek": 71500, "start": 715.0, "end": 721.0, "text": " So this is a numerical approximation of a derivative.", "tokens": [407, 341, 307, 257, 29054, 28023, 295, 257, 13760, 13], "temperature": 0.0, "avg_logprob": -0.08467869173016465, "compression_ratio": 1.5032679738562091, "no_speech_prob": 1.095257539418526e-05}, {"id": 115, "seek": 71500, "start": 721.0, "end": 730.0, "text": " And it's an approximation because like the smaller you get this the closer you get to the slope at this exact point.", "tokens": [400, 309, 311, 364, 28023, 570, 411, 264, 4356, 291, 483, 341, 264, 4966, 291, 483, 281, 264, 13525, 412, 341, 1900, 935, 13], "temperature": 0.0, "avg_logprob": -0.08467869173016465, "compression_ratio": 1.5032679738562091, "no_speech_prob": 1.095257539418526e-05}, {"id": 116, "seek": 71500, "start": 730.0, "end": 736.0, "text": " But it's never, you know, quite short enough to be perfect.", "tokens": [583, 309, 311, 1128, 11, 291, 458, 11, 1596, 2099, 1547, 281, 312, 2176, 13], "temperature": 0.0, "avg_logprob": -0.08467869173016465, "compression_ratio": 1.5032679738562091, "no_speech_prob": 1.095257539418526e-05}, {"id": 117, "seek": 73600, "start": 736.0, "end": 748.0, "text": " So yeah, I thought it'd be nice if we could create something that would calculate this for any function,", "tokens": [407, 1338, 11, 286, 1194, 309, 1116, 312, 1481, 498, 321, 727, 1884, 746, 300, 576, 8873, 341, 337, 604, 2445, 11], "temperature": 0.0, "avg_logprob": -0.11782864729563396, "compression_ratio": 1.3409090909090908, "no_speech_prob": 1.0844775033547194e-06}, {"id": 118, "seek": 73600, "start": 748.0, "end": 750.0, "text": " which we can do.", "tokens": [597, 321, 393, 360, 13], "temperature": 0.0, "avg_logprob": -0.11782864729563396, "compression_ratio": 1.3409090909090908, "no_speech_prob": 1.0844775033547194e-06}, {"id": 119, "seek": 73600, "start": 750.0, "end": 755.0, "text": " And the way you do it is by creating a custom operator.", "tokens": [400, 264, 636, 291, 360, 309, 307, 538, 4084, 257, 2375, 12973, 13], "temperature": 0.0, "avg_logprob": -0.11782864729563396, "compression_ratio": 1.3409090909090908, "no_speech_prob": 1.0844775033547194e-06}, {"id": 120, "seek": 75500, "start": 755.0, "end": 770.0, "text": " So we could create something called gradient.", "tokens": [407, 321, 727, 1884, 746, 1219, 16235, 13], "temperature": 0.0, "avg_logprob": -0.07827840328216552, "compression_ratio": 1.1097560975609757, "no_speech_prob": 9.422387279300892e-07}, {"id": 121, "seek": 75500, "start": 770.0, "end": 776.0, "text": " And we could kind of copy and paste all this.", "tokens": [400, 321, 727, 733, 295, 5055, 293, 9163, 439, 341, 13], "temperature": 0.0, "avg_logprob": -0.07827840328216552, "compression_ratio": 1.1097560975609757, "no_speech_prob": 9.422387279300892e-07}, {"id": 122, "seek": 77600, "start": 776.0, "end": 785.0, "text": " And let's say we put X on the left so that'll be our alpha.", "tokens": [400, 718, 311, 584, 321, 829, 1783, 322, 264, 1411, 370, 300, 603, 312, 527, 8961, 13], "temperature": 0.0, "avg_logprob": -0.1448990870744754, "compression_ratio": 1.288659793814433, "no_speech_prob": 3.1380923246615566e-06}, {"id": 123, "seek": 77600, "start": 785.0, "end": 792.0, "text": " And our difference will be on the right. So that'll be our omega.", "tokens": [400, 527, 2649, 486, 312, 322, 264, 558, 13, 407, 300, 603, 312, 527, 10498, 13], "temperature": 0.0, "avg_logprob": -0.1448990870744754, "compression_ratio": 1.288659793814433, "no_speech_prob": 3.1380923246615566e-06}, {"id": 124, "seek": 79200, "start": 792.0, "end": 806.0, "text": " So that's going to be a gradient of a particular function. Right. So the gradient of F at", "tokens": [407, 300, 311, 516, 281, 312, 257, 16235, 295, 257, 1729, 2445, 13, 1779, 13, 407, 264, 16235, 295, 479, 412], "temperature": 0.0, "avg_logprob": -0.13051494598388672, "compression_ratio": 1.1265822784810127, "no_speech_prob": 3.237733153582667e-06}, {"id": 125, "seek": 80600, "start": 806.0, "end": 829.0, "text": " three or whatever at X, which is three. Let's write it at three with a difference of 0.01.", "tokens": [1045, 420, 2035, 412, 1783, 11, 597, 307, 1045, 13, 961, 311, 2464, 309, 412, 1045, 365, 257, 2649, 295, 1958, 13, 10607, 13], "temperature": 0.0, "avg_logprob": -0.29893698011125835, "compression_ratio": 1.1111111111111112, "no_speech_prob": 4.22279117628932e-06}, {"id": 126, "seek": 82900, "start": 829.0, "end": 841.0, "text": " So I'd restarted my notebook and surprised how long it takes to run actually.", "tokens": [407, 286, 1116, 21022, 292, 452, 21060, 293, 6100, 577, 938, 309, 2516, 281, 1190, 767, 13], "temperature": 0.0, "avg_logprob": -0.19903369825713488, "compression_ratio": 1.2916666666666667, "no_speech_prob": 5.86261012358591e-06}, {"id": 127, "seek": 82900, "start": 841.0, "end": 847.0, "text": " It's happening.", "tokens": [467, 311, 2737, 13], "temperature": 0.0, "avg_logprob": -0.19903369825713488, "compression_ratio": 1.2916666666666667, "no_speech_prob": 5.86261012358591e-06}, {"id": 128, "seek": 82900, "start": 847.0, "end": 849.0, "text": " There we go.", "tokens": [821, 321, 352, 13], "temperature": 0.0, "avg_logprob": -0.19903369825713488, "compression_ratio": 1.2916666666666667, "no_speech_prob": 5.86261012358591e-06}, {"id": 129, "seek": 82900, "start": 849.0, "end": 852.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.19903369825713488, "compression_ratio": 1.2916666666666667, "no_speech_prob": 5.86261012358591e-06}, {"id": 130, "seek": 82900, "start": 852.0, "end": 857.0, "text": " So that number is the same as that number.", "tokens": [407, 300, 1230, 307, 264, 912, 382, 300, 1230, 13], "temperature": 0.0, "avg_logprob": -0.19903369825713488, "compression_ratio": 1.2916666666666667, "no_speech_prob": 5.86261012358591e-06}, {"id": 131, "seek": 85700, "start": 857.0, "end": 864.0, "text": " So the thing is we want to replace F with, oh, and let's simplify this.", "tokens": [407, 264, 551, 307, 321, 528, 281, 7406, 479, 365, 11, 1954, 11, 293, 718, 311, 20460, 341, 13], "temperature": 0.0, "avg_logprob": -0.1399967074394226, "compression_ratio": 1.4050632911392404, "no_speech_prob": 5.5942100516404025e-06}, {"id": 132, "seek": 85700, "start": 864.0, "end": 872.0, "text": " We don't need these parentheses, right, because plus happens first.", "tokens": [492, 500, 380, 643, 613, 34153, 11, 558, 11, 570, 1804, 2314, 700, 13], "temperature": 0.0, "avg_logprob": -0.1399967074394226, "compression_ratio": 1.4050632911392404, "no_speech_prob": 5.5942100516404025e-06}, {"id": 133, "seek": 85700, "start": 872.0, "end": 874.0, "text": " There we go.", "tokens": [821, 321, 352, 13], "temperature": 0.0, "avg_logprob": -0.1399967074394226, "compression_ratio": 1.4050632911392404, "no_speech_prob": 5.5942100516404025e-06}, {"id": 134, "seek": 85700, "start": 874.0, "end": 881.0, "text": " So in order to pass in a function, we can turn this into an operator.", "tokens": [407, 294, 1668, 281, 1320, 294, 257, 2445, 11, 321, 393, 1261, 341, 666, 364, 12973, 13], "temperature": 0.0, "avg_logprob": -0.1399967074394226, "compression_ratio": 1.4050632911392404, "no_speech_prob": 5.5942100516404025e-06}, {"id": 135, "seek": 88100, "start": 881.0, "end": 891.0, "text": " So if you look at the help for an operator,", "tokens": [407, 498, 291, 574, 412, 264, 854, 337, 364, 12973, 11], "temperature": 0.0, "avg_logprob": -0.12000908454259236, "compression_ratio": 1.325, "no_speech_prob": 5.093479558127001e-06}, {"id": 136, "seek": 88100, "start": 891.0, "end": 898.0, "text": " like star diuresis,", "tokens": [411, 3543, 1026, 1303, 271, 11], "temperature": 0.0, "avg_logprob": -0.12000908454259236, "compression_ratio": 1.325, "no_speech_prob": 5.093479558127001e-06}, {"id": 137, "seek": 88100, "start": 898.0, "end": 902.0, "text": " you've got up to five things around it.", "tokens": [291, 600, 658, 493, 281, 1732, 721, 926, 309, 13], "temperature": 0.0, "avg_logprob": -0.12000908454259236, "compression_ratio": 1.325, "no_speech_prob": 5.093479558127001e-06}, {"id": 138, "seek": 88100, "start": 902.0, "end": 907.0, "text": " You've got the two arguments of the function it creates", "tokens": [509, 600, 658, 264, 732, 12869, 295, 264, 2445, 309, 7829], "temperature": 0.0, "avg_logprob": -0.12000908454259236, "compression_ratio": 1.325, "no_speech_prob": 5.093479558127001e-06}, {"id": 139, "seek": 90700, "start": 907.0, "end": 913.0, "text": " and one or two arguments of the functions that you pass to the operator.", "tokens": [293, 472, 420, 732, 12869, 295, 264, 6828, 300, 291, 1320, 281, 264, 12973, 13], "temperature": 0.0, "avg_logprob": -0.07235370768178807, "compression_ratio": 1.962962962962963, "no_speech_prob": 5.338088612916181e-06}, {"id": 140, "seek": 90700, "start": 913.0, "end": 915.0, "text": " So there's five things.", "tokens": [407, 456, 311, 1732, 721, 13], "temperature": 0.0, "avg_logprob": -0.07235370768178807, "compression_ratio": 1.962962962962963, "no_speech_prob": 5.338088612916181e-06}, {"id": 141, "seek": 90700, "start": 915.0, "end": 919.0, "text": " So if you want to create a custom operator, this thing's going to be omega.", "tokens": [407, 498, 291, 528, 281, 1884, 257, 2375, 12973, 11, 341, 551, 311, 516, 281, 312, 10498, 13], "temperature": 0.0, "avg_logprob": -0.07235370768178807, "compression_ratio": 1.962962962962963, "no_speech_prob": 5.338088612916181e-06}, {"id": 142, "seek": 90700, "start": 919.0, "end": 921.0, "text": " This thing's going to be alpha.", "tokens": [639, 551, 311, 516, 281, 312, 8961, 13], "temperature": 0.0, "avg_logprob": -0.07235370768178807, "compression_ratio": 1.962962962962963, "no_speech_prob": 5.338088612916181e-06}, {"id": 143, "seek": 90700, "start": 921.0, "end": 925.0, "text": " And then there's two more things. This thing is going to be called omega omega.", "tokens": [400, 550, 456, 311, 732, 544, 721, 13, 639, 551, 307, 516, 281, 312, 1219, 10498, 10498, 13], "temperature": 0.0, "avg_logprob": -0.07235370768178807, "compression_ratio": 1.962962962962963, "no_speech_prob": 5.338088612916181e-06}, {"id": 144, "seek": 90700, "start": 925.0, "end": 928.0, "text": " And this thing's going to be called alpha alpha.", "tokens": [400, 341, 551, 311, 516, 281, 312, 1219, 8961, 8961, 13], "temperature": 0.0, "avg_logprob": -0.07235370768178807, "compression_ratio": 1.962962962962963, "no_speech_prob": 5.338088612916181e-06}, {"id": 145, "seek": 90700, "start": 928.0, "end": 936.0, "text": " So if we replace F with double alpha,", "tokens": [407, 498, 321, 7406, 479, 365, 3834, 8961, 11], "temperature": 0.0, "avg_logprob": -0.07235370768178807, "compression_ratio": 1.962962962962963, "no_speech_prob": 5.338088612916181e-06}, {"id": 146, "seek": 93600, "start": 936.0, "end": 940.0, "text": " we've now created an operator.", "tokens": [321, 600, 586, 2942, 364, 12973, 13], "temperature": 0.0, "avg_logprob": -0.12048577327354282, "compression_ratio": 1.328, "no_speech_prob": 1.1478444321255665e-05}, {"id": 147, "seek": 93600, "start": 940.0, "end": 952.0, "text": " And so that means we now have to tell it what function to take the derivative of.", "tokens": [400, 370, 300, 1355, 321, 586, 362, 281, 980, 309, 437, 2445, 281, 747, 264, 13760, 295, 13], "temperature": 0.0, "avg_logprob": -0.12048577327354282, "compression_ratio": 1.328, "no_speech_prob": 1.1478444321255665e-05}, {"id": 148, "seek": 93600, "start": 952.0, "end": 954.0, "text": " Oh, omega omega.", "tokens": [876, 11, 10498, 10498, 13], "temperature": 0.0, "avg_logprob": -0.12048577327354282, "compression_ratio": 1.328, "no_speech_prob": 1.1478444321255665e-05}, {"id": 149, "seek": 93600, "start": 954.0, "end": 961.0, "text": " So I'm going to put it on the right.", "tokens": [407, 286, 478, 516, 281, 829, 309, 322, 264, 558, 13], "temperature": 0.0, "avg_logprob": -0.12048577327354282, "compression_ratio": 1.328, "no_speech_prob": 1.1478444321255665e-05}, {"id": 150, "seek": 96100, "start": 961.0, "end": 966.0, "text": " OK, what did I do wrong?", "tokens": [2264, 11, 437, 630, 286, 360, 2085, 30], "temperature": 0.0, "avg_logprob": -0.16376686096191406, "compression_ratio": 1.3935483870967742, "no_speech_prob": 6.400587153621018e-05}, {"id": 151, "seek": 96100, "start": 966.0, "end": 974.0, "text": " I'm not aware of needing to put it in parentheses, but.", "tokens": [286, 478, 406, 3650, 295, 18006, 281, 829, 309, 294, 34153, 11, 457, 13], "temperature": 0.0, "avg_logprob": -0.16376686096191406, "compression_ratio": 1.3935483870967742, "no_speech_prob": 6.400587153621018e-05}, {"id": 152, "seek": 96100, "start": 974.0, "end": 979.0, "text": " What did I do wrong?", "tokens": [708, 630, 286, 360, 2085, 30], "temperature": 0.0, "avg_logprob": -0.16376686096191406, "compression_ratio": 1.3935483870967742, "no_speech_prob": 6.400587153621018e-05}, {"id": 153, "seek": 96100, "start": 979.0, "end": 983.0, "text": " Why you still keep the F?", "tokens": [1545, 291, 920, 1066, 264, 479, 30], "temperature": 0.0, "avg_logprob": -0.16376686096191406, "compression_ratio": 1.3935483870967742, "no_speech_prob": 6.400587153621018e-05}, {"id": 154, "seek": 96100, "start": 983.0, "end": 985.0, "text": " Why is there an F here?", "tokens": [1545, 307, 456, 364, 479, 510, 30], "temperature": 0.0, "avg_logprob": -0.16376686096191406, "compression_ratio": 1.3935483870967742, "no_speech_prob": 6.400587153621018e-05}, {"id": 155, "seek": 96100, "start": 985.0, "end": 986.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.16376686096191406, "compression_ratio": 1.3935483870967742, "no_speech_prob": 6.400587153621018e-05}, {"id": 156, "seek": 96100, "start": 986.0, "end": 988.0, "text": " Because I've got to say, what am I taking the gradient of?", "tokens": [1436, 286, 600, 658, 281, 584, 11, 437, 669, 286, 1940, 264, 16235, 295, 30], "temperature": 0.0, "avg_logprob": -0.16376686096191406, "compression_ratio": 1.3935483870967742, "no_speech_prob": 6.400587153621018e-05}, {"id": 157, "seek": 98800, "start": 988.0, "end": 991.0, "text": " So I'm taking the gradient of this function.", "tokens": [407, 286, 478, 1940, 264, 16235, 295, 341, 2445, 13], "temperature": 0.0, "avg_logprob": -0.18295665119969567, "compression_ratio": 1.7047619047619047, "no_speech_prob": 3.9053916225384455e-06}, {"id": 158, "seek": 98800, "start": 991.0, "end": 995.0, "text": " So that's the thing that I make is going to be replaced with.", "tokens": [407, 300, 311, 264, 551, 300, 286, 652, 307, 516, 281, 312, 10772, 365, 13], "temperature": 0.0, "avg_logprob": -0.18295665119969567, "compression_ratio": 1.7047619047619047, "no_speech_prob": 3.9053916225384455e-06}, {"id": 159, "seek": 98800, "start": 995.0, "end": 1012.0, "text": " So this is kind of where I find the quad operator really nice because right in the function, you can add your print statements to, you know, so like take that first that alpha that it's pointing at and assign that to the quad operator in the function.", "tokens": [407, 341, 307, 733, 295, 689, 286, 915, 264, 10787, 12973, 534, 1481, 570, 558, 294, 264, 2445, 11, 291, 393, 909, 428, 4482, 12363, 281, 11, 291, 458, 11, 370, 411, 747, 300, 700, 300, 8961, 300, 309, 311, 12166, 412, 293, 6269, 300, 281, 264, 10787, 12973, 294, 264, 2445, 13], "temperature": 0.0, "avg_logprob": -0.18295665119969567, "compression_ratio": 1.7047619047619047, "no_speech_prob": 3.9053916225384455e-06}, {"id": 160, "seek": 101200, "start": 1012.0, "end": 1021.0, "text": " And then it'll print out what was there. OK, which is that should run before most everything else.", "tokens": [400, 550, 309, 603, 4482, 484, 437, 390, 456, 13, 2264, 11, 597, 307, 300, 820, 1190, 949, 881, 1203, 1646, 13], "temperature": 0.0, "avg_logprob": -0.18127747239737674, "compression_ratio": 1.4149659863945578, "no_speech_prob": 1.3081605629849946e-06}, {"id": 161, "seek": 101200, "start": 1021.0, "end": 1025.0, "text": " OK, so it should print that before it fails.", "tokens": [2264, 11, 370, 309, 820, 4482, 300, 949, 309, 18199, 13], "temperature": 0.0, "avg_logprob": -0.18127747239737674, "compression_ratio": 1.4149659863945578, "no_speech_prob": 1.3081605629849946e-06}, {"id": 162, "seek": 101200, "start": 1025.0, "end": 1033.0, "text": " That didn't work.", "tokens": [663, 994, 380, 589, 13], "temperature": 0.0, "avg_logprob": -0.18127747239737674, "compression_ratio": 1.4149659863945578, "no_speech_prob": 1.3081605629849946e-06}, {"id": 163, "seek": 101200, "start": 1033.0, "end": 1038.0, "text": " All right, let's try making something simpler.", "tokens": [1057, 558, 11, 718, 311, 853, 1455, 746, 18587, 13], "temperature": 0.0, "avg_logprob": -0.18127747239737674, "compression_ratio": 1.4149659863945578, "no_speech_prob": 1.3081605629849946e-06}, {"id": 164, "seek": 103800, "start": 1038.0, "end": 1047.0, "text": " We're going to create an operator which just calls the function.", "tokens": [492, 434, 516, 281, 1884, 364, 12973, 597, 445, 5498, 264, 2445, 13], "temperature": 0.0, "avg_logprob": -0.15803018049760298, "compression_ratio": 1.3455882352941178, "no_speech_prob": 5.507532932824688e-06}, {"id": 165, "seek": 103800, "start": 1047.0, "end": 1050.0, "text": " OK, so there's the world's dumbest operator.", "tokens": [2264, 11, 370, 456, 311, 264, 1002, 311, 10316, 377, 12973, 13], "temperature": 0.0, "avg_logprob": -0.15803018049760298, "compression_ratio": 1.3455882352941178, "no_speech_prob": 5.507532932824688e-06}, {"id": 166, "seek": 103800, "start": 1050.0, "end": 1058.0, "text": " So we should be able to go G of plus, which would be.", "tokens": [407, 321, 820, 312, 1075, 281, 352, 460, 295, 1804, 11, 597, 576, 312, 13], "temperature": 0.0, "avg_logprob": -0.15803018049760298, "compression_ratio": 1.3455882352941178, "no_speech_prob": 5.507532932824688e-06}, {"id": 167, "seek": 103800, "start": 1058.0, "end": 1063.0, "text": " Plus apply that to.", "tokens": [7721, 3079, 300, 281, 13], "temperature": 0.0, "avg_logprob": -0.15803018049760298, "compression_ratio": 1.3455882352941178, "no_speech_prob": 5.507532932824688e-06}, {"id": 168, "seek": 106300, "start": 1063.0, "end": 1081.0, "text": " Huh. OK.", "tokens": [8063, 13, 2264, 13], "temperature": 0.0, "avg_logprob": -0.35483639056865984, "compression_ratio": 0.6666666666666666, "no_speech_prob": 4.7108574108278845e-06}, {"id": 169, "seek": 106300, "start": 1081.0, "end": 1088.0, "text": " G plus.", "tokens": [460, 1804, 13], "temperature": 0.0, "avg_logprob": -0.35483639056865984, "compression_ratio": 0.6666666666666666, "no_speech_prob": 4.7108574108278845e-06}, {"id": 170, "seek": 108800, "start": 1088.0, "end": 1095.0, "text": " All right, so that did not work how I expected. Does it need to be alpha, alpha?", "tokens": [1057, 558, 11, 370, 300, 630, 406, 589, 577, 286, 5176, 13, 4402, 309, 643, 281, 312, 8961, 11, 8961, 30], "temperature": 0.0, "avg_logprob": -0.1597443111872269, "compression_ratio": 1.3333333333333333, "no_speech_prob": 1.5206008356472012e-05}, {"id": 171, "seek": 108800, "start": 1095.0, "end": 1099.0, "text": " The other way around. So normally you do like plus slash.", "tokens": [440, 661, 636, 926, 13, 407, 5646, 291, 360, 411, 1804, 17330, 13], "temperature": 0.0, "avg_logprob": -0.1597443111872269, "compression_ratio": 1.3333333333333333, "no_speech_prob": 1.5206008356472012e-05}, {"id": 172, "seek": 108800, "start": 1099.0, "end": 1102.0, "text": " So it goes on the right.", "tokens": [407, 309, 1709, 322, 264, 558, 13], "temperature": 0.0, "avg_logprob": -0.1597443111872269, "compression_ratio": 1.3333333333333333, "no_speech_prob": 1.5206008356472012e-05}, {"id": 173, "seek": 108800, "start": 1102.0, "end": 1110.0, "text": " I don't think this is right.", "tokens": [286, 500, 380, 519, 341, 307, 558, 13], "temperature": 0.0, "avg_logprob": -0.1597443111872269, "compression_ratio": 1.3333333333333333, "no_speech_prob": 1.5206008356472012e-05}, {"id": 174, "seek": 111000, "start": 1110.0, "end": 1126.0, "text": " OK.", "tokens": [2264, 13], "temperature": 0.0, "avg_logprob": -0.0900072521633572, "compression_ratio": 1.134020618556701, "no_speech_prob": 6.854232651676284e-06}, {"id": 175, "seek": 111000, "start": 1126.0, "end": 1132.0, "text": " So maybe if we search for this.", "tokens": [407, 1310, 498, 321, 3164, 337, 341, 13], "temperature": 0.0, "avg_logprob": -0.0900072521633572, "compression_ratio": 1.134020618556701, "no_speech_prob": 6.854232651676284e-06}, {"id": 176, "seek": 111000, "start": 1132.0, "end": 1139.0, "text": " I haven't normally found this search very useful, but let's give it a try.", "tokens": [286, 2378, 380, 5646, 1352, 341, 3164, 588, 4420, 11, 457, 718, 311, 976, 309, 257, 853, 13], "temperature": 0.0, "avg_logprob": -0.0900072521633572, "compression_ratio": 1.134020618556701, "no_speech_prob": 6.854232651676284e-06}, {"id": 177, "seek": 113900, "start": 1139.0, "end": 1150.0, "text": " Dops. Yes.", "tokens": [413, 3370, 13, 1079, 13], "temperature": 0.0, "avg_logprob": -0.15813873835972378, "compression_ratio": 1.0344827586206897, "no_speech_prob": 8.93950436875457e-06}, {"id": 178, "seek": 113900, "start": 1150.0, "end": 1158.0, "text": " OK, so it does expect to have just alpha, alpha if it's monadic.", "tokens": [2264, 11, 370, 309, 775, 2066, 281, 362, 445, 8961, 11, 8961, 498, 309, 311, 1108, 43341, 13], "temperature": 0.0, "avg_logprob": -0.15813873835972378, "compression_ratio": 1.0344827586206897, "no_speech_prob": 8.93950436875457e-06}, {"id": 179, "seek": 113900, "start": 1158.0, "end": 1161.0, "text": " So that means.", "tokens": [407, 300, 1355, 13], "temperature": 0.0, "avg_logprob": -0.15813873835972378, "compression_ratio": 1.0344827586206897, "no_speech_prob": 8.93950436875457e-06}, {"id": 180, "seek": 116100, "start": 1161.0, "end": 1169.0, "text": " Oh, it goes, I think the opposite way around the way I expected. All right, so let's change this to alpha, alpha.", "tokens": [876, 11, 309, 1709, 11, 286, 519, 264, 6182, 636, 926, 264, 636, 286, 5176, 13, 1057, 558, 11, 370, 718, 311, 1319, 341, 281, 8961, 11, 8961, 13], "temperature": 0.0, "avg_logprob": -0.19958829377826892, "compression_ratio": 1.4976525821596245, "no_speech_prob": 3.1381118787976447e-06}, {"id": 181, "seek": 116100, "start": 1169.0, "end": 1173.0, "text": " And that would mean I think it's plus G.", "tokens": [400, 300, 576, 914, 286, 519, 309, 311, 1804, 460, 13], "temperature": 0.0, "avg_logprob": -0.19958829377826892, "compression_ratio": 1.4976525821596245, "no_speech_prob": 3.1381118787976447e-06}, {"id": 182, "seek": 116100, "start": 1173.0, "end": 1176.0, "text": " Ah, OK.", "tokens": [2438, 11, 2264, 13], "temperature": 0.0, "avg_logprob": -0.19958829377826892, "compression_ratio": 1.4976525821596245, "no_speech_prob": 3.1381118787976447e-06}, {"id": 183, "seek": 116100, "start": 1176.0, "end": 1182.0, "text": " So I guess that makes sense. Other operators work that way like plus slash.", "tokens": [407, 286, 2041, 300, 1669, 2020, 13, 5358, 19077, 589, 300, 636, 411, 1804, 17330, 13], "temperature": 0.0, "avg_logprob": -0.19958829377826892, "compression_ratio": 1.4976525821596245, "no_speech_prob": 3.1381118787976447e-06}, {"id": 184, "seek": 116100, "start": 1182.0, "end": 1188.0, "text": " Oh, of course they do. No, I hadn't thought about that. Jeremy, you're an idiot.", "tokens": [876, 11, 295, 1164, 436, 360, 13, 883, 11, 286, 8782, 380, 1194, 466, 300, 13, 17809, 11, 291, 434, 364, 14270, 13], "temperature": 0.0, "avg_logprob": -0.19958829377826892, "compression_ratio": 1.4976525821596245, "no_speech_prob": 3.1381118787976447e-06}, {"id": 185, "seek": 118800, "start": 1188.0, "end": 1193.0, "text": " All right. Yes.", "tokens": [1057, 558, 13, 1079, 13], "temperature": 0.0, "avg_logprob": -0.10971082624841909, "compression_ratio": 1.3509933774834437, "no_speech_prob": 4.637780875782482e-06}, {"id": 186, "seek": 118800, "start": 1193.0, "end": 1202.0, "text": " Yeah, somehow I had it backwards in my head. OK, all that. Fine.", "tokens": [865, 11, 6063, 286, 632, 309, 12204, 294, 452, 1378, 13, 2264, 11, 439, 300, 13, 12024, 13], "temperature": 0.0, "avg_logprob": -0.10971082624841909, "compression_ratio": 1.3509933774834437, "no_speech_prob": 4.637780875782482e-06}, {"id": 187, "seek": 118800, "start": 1202.0, "end": 1210.0, "text": " By the way, Isaac, for your flashcards, it occurred to me that a lot of these things don't really make sense as flashcards.", "tokens": [3146, 264, 636, 11, 22505, 11, 337, 428, 7319, 40604, 11, 309, 11068, 281, 385, 300, 257, 688, 295, 613, 721, 500, 380, 534, 652, 2020, 382, 7319, 40604, 13], "temperature": 0.0, "avg_logprob": -0.10971082624841909, "compression_ratio": 1.3509933774834437, "no_speech_prob": 4.637780875782482e-06}, {"id": 188, "seek": 121000, "start": 1210.0, "end": 1224.0, "text": " And for those like it occurred to me that something that might be useful is if you.", "tokens": [400, 337, 729, 411, 309, 11068, 281, 385, 300, 746, 300, 1062, 312, 4420, 307, 498, 291, 13], "temperature": 0.0, "avg_logprob": -0.07472395195680506, "compression_ratio": 1.6424242424242423, "no_speech_prob": 5.954991593171144e-06}, {"id": 189, "seek": 121000, "start": 1224.0, "end": 1230.0, "text": " Added tags to the ones that you want to be exported as cards.", "tokens": [5349, 292, 18632, 281, 264, 2306, 300, 291, 528, 281, 312, 42055, 382, 5632, 13], "temperature": 0.0, "avg_logprob": -0.07472395195680506, "compression_ratio": 1.6424242424242423, "no_speech_prob": 5.954991593171144e-06}, {"id": 190, "seek": 121000, "start": 1230.0, "end": 1237.0, "text": " Then you could go through in your script and just add cards for those that have like a card tag on it or something like that.", "tokens": [1396, 291, 727, 352, 807, 294, 428, 5755, 293, 445, 909, 5632, 337, 729, 300, 362, 411, 257, 2920, 6162, 322, 309, 420, 746, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.07472395195680506, "compression_ratio": 1.6424242424242423, "no_speech_prob": 5.954991593171144e-06}, {"id": 191, "seek": 123700, "start": 1237.0, "end": 1242.0, "text": " That would be a way to avoid having lots of crap you don't need.", "tokens": [663, 576, 312, 257, 636, 281, 5042, 1419, 3195, 295, 12426, 291, 500, 380, 643, 13], "temperature": 0.0, "avg_logprob": -0.12211917763325705, "compression_ratio": 1.4223602484472049, "no_speech_prob": 3.905329322151374e-06}, {"id": 192, "seek": 123700, "start": 1242.0, "end": 1249.0, "text": " Yeah, I quickly learned the shortcut to suspend the card, but that would probably be a better way to do it.", "tokens": [865, 11, 286, 2661, 3264, 264, 24822, 281, 42546, 264, 2920, 11, 457, 300, 576, 1391, 312, 257, 1101, 636, 281, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.12211917763325705, "compression_ratio": 1.4223602484472049, "no_speech_prob": 3.905329322151374e-06}, {"id": 193, "seek": 123700, "start": 1249.0, "end": 1253.0, "text": " I haven't generated in the first place. Yeah.", "tokens": [286, 2378, 380, 10833, 294, 264, 700, 1081, 13, 865, 13], "temperature": 0.0, "avg_logprob": -0.12211917763325705, "compression_ratio": 1.4223602484472049, "no_speech_prob": 3.905329322151374e-06}, {"id": 194, "seek": 123700, "start": 1253.0, "end": 1258.0, "text": " OK.", "tokens": [2264, 13], "temperature": 0.0, "avg_logprob": -0.12211917763325705, "compression_ratio": 1.4223602484472049, "no_speech_prob": 3.905329322151374e-06}, {"id": 195, "seek": 123700, "start": 1258.0, "end": 1262.0, "text": " Great.", "tokens": [3769, 13], "temperature": 0.0, "avg_logprob": -0.12211917763325705, "compression_ratio": 1.4223602484472049, "no_speech_prob": 3.905329322151374e-06}, {"id": 196, "seek": 126200, "start": 1262.0, "end": 1267.0, "text": " Yes, that's a bit I don't know. It's a bit weird in some ways, but I guess it kind of makes sense. This is how you create an operator.", "tokens": [1079, 11, 300, 311, 257, 857, 286, 500, 380, 458, 13, 467, 311, 257, 857, 3657, 294, 512, 2098, 11, 457, 286, 2041, 309, 733, 295, 1669, 2020, 13, 639, 307, 577, 291, 1884, 364, 12973, 13], "temperature": 0.0, "avg_logprob": -0.11994116774229245, "compression_ratio": 1.7149122807017543, "no_speech_prob": 4.092821200174512e-06}, {"id": 197, "seek": 126200, "start": 1267.0, "end": 1272.0, "text": " So this is a monadic operator because it only has alpha, alpha. It doesn't have omega, omega.", "tokens": [407, 341, 307, 257, 1108, 43341, 12973, 570, 309, 787, 575, 8961, 11, 8961, 13, 467, 1177, 380, 362, 10498, 11, 10498, 13], "temperature": 0.0, "avg_logprob": -0.11994116774229245, "compression_ratio": 1.7149122807017543, "no_speech_prob": 4.092821200174512e-06}, {"id": 198, "seek": 126200, "start": 1272.0, "end": 1277.0, "text": " And it's a monadic operator that creates a dyadic function.", "tokens": [400, 309, 311, 257, 1108, 43341, 12973, 300, 7829, 257, 14584, 43341, 2445, 13], "temperature": 0.0, "avg_logprob": -0.11994116774229245, "compression_ratio": 1.7149122807017543, "no_speech_prob": 4.092821200174512e-06}, {"id": 199, "seek": 126200, "start": 1277.0, "end": 1285.0, "text": " Because it's got an alpha and an omega. And so I don't think we actually need the parentheses anymore.", "tokens": [1436, 309, 311, 658, 364, 8961, 293, 364, 10498, 13, 400, 370, 286, 500, 380, 519, 321, 767, 643, 264, 34153, 3602, 13], "temperature": 0.0, "avg_logprob": -0.11994116774229245, "compression_ratio": 1.7149122807017543, "no_speech_prob": 4.092821200174512e-06}, {"id": 200, "seek": 128500, "start": 1285.0, "end": 1295.0, "text": " Yeah, we don't because operators bind more tightly. So it's as if this is parentheses. Does that make sense?", "tokens": [865, 11, 321, 500, 380, 570, 19077, 14786, 544, 21952, 13, 407, 309, 311, 382, 498, 341, 307, 34153, 13, 4402, 300, 652, 2020, 30], "temperature": 0.0, "avg_logprob": -0.12958337710453913, "compression_ratio": 1.5743801652892562, "no_speech_prob": 5.8279754739487544e-05}, {"id": 201, "seek": 128500, "start": 1295.0, "end": 1301.0, "text": " So a monadic operator takes stuff from the left. If you give it an alpha, alpha, it would take stuff on the left.", "tokens": [407, 257, 1108, 43341, 12973, 2516, 1507, 490, 264, 1411, 13, 759, 291, 976, 309, 364, 8961, 11, 8961, 11, 309, 576, 747, 1507, 322, 264, 1411, 13], "temperature": 0.0, "avg_logprob": -0.12958337710453913, "compression_ratio": 1.5743801652892562, "no_speech_prob": 5.8279754739487544e-05}, {"id": 202, "seek": 128500, "start": 1301.0, "end": 1309.0, "text": " I mean, I assume we could go omega, omega, although, as Isaac said, that's not quite.", "tokens": [286, 914, 11, 286, 6552, 321, 727, 352, 10498, 11, 10498, 11, 4878, 11, 382, 22505, 848, 11, 300, 311, 406, 1596, 13], "temperature": 0.0, "avg_logprob": -0.12958337710453913, "compression_ratio": 1.5743801652892562, "no_speech_prob": 5.8279754739487544e-05}, {"id": 203, "seek": 128500, "start": 1309.0, "end": 1313.0, "text": " What you would expect, given how other ones work. Let's see if it works.", "tokens": [708, 291, 576, 2066, 11, 2212, 577, 661, 2306, 589, 13, 961, 311, 536, 498, 309, 1985, 13], "temperature": 0.0, "avg_logprob": -0.12958337710453913, "compression_ratio": 1.5743801652892562, "no_speech_prob": 5.8279754739487544e-05}, {"id": 204, "seek": 131300, "start": 1313.0, "end": 1318.0, "text": " No, you can't. OK, so yeah, it goes on the left if you say alpha, alpha.", "tokens": [883, 11, 291, 393, 380, 13, 2264, 11, 370, 1338, 11, 309, 1709, 322, 264, 1411, 498, 291, 584, 8961, 11, 8961, 13], "temperature": 0.0, "avg_logprob": -0.15398452088639542, "compression_ratio": 1.5294117647058822, "no_speech_prob": 1.1300462574581616e-05}, {"id": 205, "seek": 131300, "start": 1318.0, "end": 1326.0, "text": " And if it's on the left and the right, then you would do you would do both.", "tokens": [400, 498, 309, 311, 322, 264, 1411, 293, 264, 558, 11, 550, 291, 576, 360, 291, 576, 360, 1293, 13], "temperature": 0.0, "avg_logprob": -0.15398452088639542, "compression_ratio": 1.5294117647058822, "no_speech_prob": 1.1300462574581616e-05}, {"id": 206, "seek": 131300, "start": 1326.0, "end": 1331.0, "text": " OK, so that's our custom.", "tokens": [2264, 11, 370, 300, 311, 527, 2375, 13], "temperature": 0.0, "avg_logprob": -0.15398452088639542, "compression_ratio": 1.5294117647058822, "no_speech_prob": 1.1300462574581616e-05}, {"id": 207, "seek": 131300, "start": 1331.0, "end": 1334.0, "text": " Derivative.", "tokens": [5618, 592, 1166, 13], "temperature": 0.0, "avg_logprob": -0.15398452088639542, "compression_ratio": 1.5294117647058822, "no_speech_prob": 1.1300462574581616e-05}, {"id": 208, "seek": 131300, "start": 1334.0, "end": 1337.0, "text": " And that's a numeric.", "tokens": [400, 300, 311, 257, 7866, 299, 13], "temperature": 0.0, "avg_logprob": -0.15398452088639542, "compression_ratio": 1.5294117647058822, "no_speech_prob": 1.1300462574581616e-05}, {"id": 209, "seek": 133700, "start": 1337.0, "end": 1353.0, "text": " Approximation of a derivative. To be more precise.", "tokens": [29551, 3081, 399, 295, 257, 13760, 13, 1407, 312, 544, 13600, 13], "temperature": 0.0, "avg_logprob": -0.14998397619827933, "compression_ratio": 0.9420289855072463, "no_speech_prob": 2.1443414880195633e-05}, {"id": 210, "seek": 133700, "start": 1353.0, "end": 1362.0, "text": " All right, so.", "tokens": [1057, 558, 11, 370, 13], "temperature": 0.0, "avg_logprob": -0.14998397619827933, "compression_ratio": 0.9420289855072463, "no_speech_prob": 2.1443414880195633e-05}, {"id": 211, "seek": 136200, "start": 1362.0, "end": 1371.0, "text": " OK, we've got a whole list of operators here.", "tokens": [2264, 11, 321, 600, 658, 257, 1379, 1329, 295, 19077, 510, 13], "temperature": 0.0, "avg_logprob": -0.10316097970102348, "compression_ratio": 1.2794117647058822, "no_speech_prob": 2.6425468604429625e-06}, {"id": 212, "seek": 136200, "start": 1371.0, "end": 1377.0, "text": " Wait, so left arrow is considered an operator.", "tokens": [3802, 11, 370, 1411, 11610, 307, 4888, 364, 12973, 13], "temperature": 0.0, "avg_logprob": -0.10316097970102348, "compression_ratio": 1.2794117647058822, "no_speech_prob": 2.6425468604429625e-06}, {"id": 213, "seek": 136200, "start": 1377.0, "end": 1383.0, "text": " Has anybody figured out what the curly brackets means yet, by the way?", "tokens": [8646, 4472, 8932, 484, 437, 264, 32066, 26179, 1355, 1939, 11, 538, 264, 636, 30], "temperature": 0.0, "avg_logprob": -0.10316097970102348, "compression_ratio": 1.2794117647058822, "no_speech_prob": 2.6425468604429625e-06}, {"id": 214, "seek": 136200, "start": 1383.0, "end": 1390.0, "text": " I haven't.", "tokens": [286, 2378, 380, 13], "temperature": 0.0, "avg_logprob": -0.10316097970102348, "compression_ratio": 1.2794117647058822, "no_speech_prob": 2.6425468604429625e-06}, {"id": 215, "seek": 139000, "start": 1390.0, "end": 1403.0, "text": " I'll tell you an operator I'd quite like to do is this one, tilde, dioresis.", "tokens": [286, 603, 980, 291, 364, 12973, 286, 1116, 1596, 411, 281, 360, 307, 341, 472, 11, 45046, 11, 1026, 2706, 271, 13], "temperature": 0.0, "avg_logprob": -0.27180691865774304, "compression_ratio": 1.2941176470588236, "no_speech_prob": 1.3630847206513863e-05}, {"id": 216, "seek": 139000, "start": 1403.0, "end": 1406.0, "text": " I think that could save a parenthesis in the one we just did.", "tokens": [286, 519, 300, 727, 3155, 257, 23350, 9374, 294, 264, 472, 321, 445, 630, 13], "temperature": 0.0, "avg_logprob": -0.27180691865774304, "compression_ratio": 1.2941176470588236, "no_speech_prob": 1.3630847206513863e-05}, {"id": 217, "seek": 139000, "start": 1406.0, "end": 1409.0, "text": " Correct.", "tokens": [12753, 13], "temperature": 0.0, "avg_logprob": -0.27180691865774304, "compression_ratio": 1.2941176470588236, "no_speech_prob": 1.3630847206513863e-05}, {"id": 218, "seek": 139000, "start": 1409.0, "end": 1414.0, "text": " Tilde.", "tokens": [314, 15956, 13], "temperature": 0.0, "avg_logprob": -0.27180691865774304, "compression_ratio": 1.2941176470588236, "no_speech_prob": 1.3630847206513863e-05}, {"id": 219, "seek": 141400, "start": 1414.0, "end": 1420.0, "text": " Tilde dioresis. OK, which is a monadic operator, so it's going to take one function.", "tokens": [314, 15956, 1026, 2706, 271, 13, 2264, 11, 597, 307, 257, 1108, 43341, 12973, 11, 370, 309, 311, 516, 281, 747, 472, 2445, 13], "temperature": 0.0, "avg_logprob": -0.16392596992286476, "compression_ratio": 1.6103896103896105, "no_speech_prob": 5.594283265963895e-06}, {"id": 220, "seek": 141400, "start": 1420.0, "end": 1427.0, "text": " On its left and it produces a dyadic function.", "tokens": [1282, 1080, 1411, 293, 309, 14725, 257, 14584, 43341, 2445, 13], "temperature": 0.0, "avg_logprob": -0.16392596992286476, "compression_ratio": 1.6103896103896105, "no_speech_prob": 5.594283265963895e-06}, {"id": 221, "seek": 141400, "start": 1427.0, "end": 1433.0, "text": " Hence, there's the one function on its left and that results in a dyadic function.", "tokens": [22229, 11, 456, 311, 264, 472, 2445, 322, 1080, 1411, 293, 300, 3542, 294, 257, 14584, 43341, 2445, 13], "temperature": 0.0, "avg_logprob": -0.16392596992286476, "compression_ratio": 1.6103896103896105, "no_speech_prob": 5.594283265963895e-06}, {"id": 222, "seek": 141400, "start": 1433.0, "end": 1437.0, "text": " It's got a bit of a strange name.", "tokens": [467, 311, 658, 257, 857, 295, 257, 5861, 1315, 13], "temperature": 0.0, "avg_logprob": -0.16392596992286476, "compression_ratio": 1.6103896103896105, "no_speech_prob": 5.594283265963895e-06}, {"id": 223, "seek": 143700, "start": 1437.0, "end": 1448.0, "text": " Commute. But all it does is it takes x and y and it returns a function that actually calls y f x rather than.", "tokens": [3046, 1169, 13, 583, 439, 309, 775, 307, 309, 2516, 2031, 293, 288, 293, 309, 11247, 257, 2445, 300, 767, 5498, 288, 283, 2031, 2831, 813, 13], "temperature": 0.0, "avg_logprob": -0.19762990785681683, "compression_ratio": 1.2935779816513762, "no_speech_prob": 5.954817879683105e-06}, {"id": 224, "seek": 143700, "start": 1448.0, "end": 1451.0, "text": " Rather than x f y.", "tokens": [16571, 813, 2031, 283, 288, 13], "temperature": 0.0, "avg_logprob": -0.19762990785681683, "compression_ratio": 1.2935779816513762, "no_speech_prob": 5.954817879683105e-06}, {"id": 225, "seek": 143700, "start": 1451.0, "end": 1465.0, "text": " So if we do.", "tokens": [407, 498, 321, 360, 13], "temperature": 0.0, "avg_logprob": -0.19762990785681683, "compression_ratio": 1.2935779816513762, "no_speech_prob": 5.954817879683105e-06}, {"id": 226, "seek": 146500, "start": 1465.0, "end": 1469.0, "text": " OK, what's the letter for that?", "tokens": [2264, 11, 437, 311, 264, 5063, 337, 300, 30], "temperature": 0.0, "avg_logprob": -0.14865456024805704, "compression_ratio": 1.127659574468085, "no_speech_prob": 8.939539839047939e-06}, {"id": 227, "seek": 146500, "start": 1469.0, "end": 1472.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.14865456024805704, "compression_ratio": 1.127659574468085, "no_speech_prob": 8.939539839047939e-06}, {"id": 228, "seek": 146500, "start": 1472.0, "end": 1477.0, "text": " Shift T.", "tokens": [28304, 314, 13], "temperature": 0.0, "avg_logprob": -0.14865456024805704, "compression_ratio": 1.127659574468085, "no_speech_prob": 8.939539839047939e-06}, {"id": 229, "seek": 146500, "start": 1477.0, "end": 1487.0, "text": " And that's called tilde dioresis.", "tokens": [400, 300, 311, 1219, 45046, 1026, 2706, 271, 13], "temperature": 0.0, "avg_logprob": -0.14865456024805704, "compression_ratio": 1.127659574468085, "no_speech_prob": 8.939539839047939e-06}, {"id": 230, "seek": 146500, "start": 1487.0, "end": 1489.0, "text": " Monadic.", "tokens": [4713, 43341, 13], "temperature": 0.0, "avg_logprob": -0.14865456024805704, "compression_ratio": 1.127659574468085, "no_speech_prob": 8.939539839047939e-06}, {"id": 231, "seek": 146500, "start": 1489.0, "end": 1491.0, "text": " Shift T.", "tokens": [28304, 314, 13], "temperature": 0.0, "avg_logprob": -0.14865456024805704, "compression_ratio": 1.127659574468085, "no_speech_prob": 8.939539839047939e-06}, {"id": 232, "seek": 146500, "start": 1491.0, "end": 1493.0, "text": " Dyadic.", "tokens": [31193, 43341, 13], "temperature": 0.0, "avg_logprob": -0.14865456024805704, "compression_ratio": 1.127659574468085, "no_speech_prob": 8.939539839047939e-06}, {"id": 233, "seek": 149300, "start": 1493.0, "end": 1495.0, "text": " Oh, there is no monadic.", "tokens": [876, 11, 456, 307, 572, 1108, 43341, 13], "temperature": 0.0, "avg_logprob": -0.2114943398369683, "compression_ratio": 0.9661016949152542, "no_speech_prob": 4.4950907067686785e-06}, {"id": 234, "seek": 149300, "start": 1495.0, "end": 1499.0, "text": " OK.", "tokens": [2264, 13], "temperature": 0.0, "avg_logprob": -0.2114943398369683, "compression_ratio": 0.9661016949152542, "no_speech_prob": 4.4950907067686785e-06}, {"id": 235, "seek": 149300, "start": 1499.0, "end": 1512.0, "text": " So then there's commute.", "tokens": [407, 550, 456, 311, 36750, 13], "temperature": 0.0, "avg_logprob": -0.2114943398369683, "compression_ratio": 0.9661016949152542, "no_speech_prob": 4.4950907067686785e-06}, {"id": 236, "seek": 149300, "start": 1512.0, "end": 1517.0, "text": " And", "tokens": [400], "temperature": 0.0, "avg_logprob": -0.2114943398369683, "compression_ratio": 0.9661016949152542, "no_speech_prob": 4.4950907067686785e-06}, {"id": 237, "seek": 151700, "start": 1517.0, "end": 1527.0, "text": " you could say, yeah, three minus two is that. So that would be putting", "tokens": [291, 727, 584, 11, 1338, 11, 1045, 3175, 732, 307, 300, 13, 407, 300, 576, 312, 3372], "temperature": 0.0, "avg_logprob": -0.12996277442345253, "compression_ratio": 1.524822695035461, "no_speech_prob": 1.9033656144529232e-06}, {"id": 238, "seek": 151700, "start": 1527.0, "end": 1529.0, "text": " x on the left and y on the right.", "tokens": [2031, 322, 264, 1411, 293, 288, 322, 264, 558, 13], "temperature": 0.0, "avg_logprob": -0.12996277442345253, "compression_ratio": 1.524822695035461, "no_speech_prob": 1.9033656144529232e-06}, {"id": 239, "seek": 151700, "start": 1529.0, "end": 1531.0, "text": " So it's three minus two.", "tokens": [407, 309, 311, 1045, 3175, 732, 13], "temperature": 0.0, "avg_logprob": -0.12996277442345253, "compression_ratio": 1.524822695035461, "no_speech_prob": 1.9033656144529232e-06}, {"id": 240, "seek": 151700, "start": 1531.0, "end": 1537.0, "text": " But if we do it the other way around, two minus three, we could also write like this.", "tokens": [583, 498, 321, 360, 309, 264, 661, 636, 926, 11, 732, 3175, 1045, 11, 321, 727, 611, 2464, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.12996277442345253, "compression_ratio": 1.524822695035461, "no_speech_prob": 1.9033656144529232e-06}, {"id": 241, "seek": 153700, "start": 1537.0, "end": 1548.0, "text": " Two minus three minus.", "tokens": [4453, 3175, 1045, 3175, 13], "temperature": 0.0, "avg_logprob": -0.1802279702548323, "compression_ratio": 1.1590909090909092, "no_speech_prob": 4.157304374530213e-06}, {"id": 242, "seek": 153700, "start": 1548.0, "end": 1553.0, "text": " And then commute means switch the order of the arguments.", "tokens": [400, 550, 36750, 1355, 3679, 264, 1668, 295, 264, 12869, 13], "temperature": 0.0, "avg_logprob": -0.1802279702548323, "compression_ratio": 1.1590909090909092, "no_speech_prob": 4.157304374530213e-06}, {"id": 243, "seek": 153700, "start": 1553.0, "end": 1556.0, "text": " Does that make sense?", "tokens": [4402, 300, 652, 2020, 30], "temperature": 0.0, "avg_logprob": -0.1802279702548323, "compression_ratio": 1.1590909090909092, "no_speech_prob": 4.157304374530213e-06}, {"id": 244, "seek": 155600, "start": 1556.0, "end": 1584.0, "text": " So I just flip them around. Oh, just one moment. My daughter wants me.", "tokens": [407, 286, 445, 7929, 552, 926, 13, 876, 11, 445, 472, 1623, 13, 1222, 4653, 2738, 385, 13], "temperature": 0.0, "avg_logprob": -0.25586266951127484, "compression_ratio": 0.9459459459459459, "no_speech_prob": 7.471458957297727e-05}, {"id": 245, "seek": 158400, "start": 1584.0, "end": 1611.0, "text": " OK.", "tokens": [2264, 13], "temperature": 0.0, "avg_logprob": -0.8167915344238281, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.0031923241913318634}, {"id": 246, "seek": 161100, "start": 1611.0, "end": 1629.0, "text": " OK.", "tokens": [2264, 13], "temperature": 0.4, "avg_logprob": -0.9492235978444418, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.002742852084338665}, {"id": 247, "seek": 162900, "start": 1629.0, "end": 1657.0, "text": " OK.", "tokens": [2264, 13], "temperature": 0.0, "avg_logprob": -0.5671654542287191, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.002939522033557296}, {"id": 248, "seek": 165700, "start": 1657.0, "end": 1681.0, "text": " OK.", "tokens": [50364, 2264, 13, 51564], "temperature": 0.0, "avg_logprob": -0.6105159759521485, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.0024910750798881054}, {"id": 249, "seek": 168700, "start": 1687.0, "end": 1714.0, "text": " OK.", "tokens": [2264, 13], "temperature": 0.0, "avg_logprob": -0.547831137975057, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.9627047777175903}, {"id": 250, "seek": 171400, "start": 1714.0, "end": 1738.0, "text": " OK.", "tokens": [50364, 2264, 13, 51564], "temperature": 0.0, "avg_logprob": -0.6601670265197754, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.0035571837797760963}, {"id": 251, "seek": 174400, "start": 1744.0, "end": 1764.0, "text": " Sorry, we had a missing computer problem.", "tokens": [4919, 11, 321, 632, 257, 5361, 3820, 1154, 13], "temperature": 0.0, "avg_logprob": -0.24823036647978283, "compression_ratio": 0.9436619718309859, "no_speech_prob": 0.0473625548183918}, {"id": 252, "seek": 174400, "start": 1764.0, "end": 1769.0, "text": " So Marty found a link for", "tokens": [407, 29192, 1352, 257, 2113, 337], "temperature": 0.0, "avg_logprob": -0.24823036647978283, "compression_ratio": 0.9436619718309859, "no_speech_prob": 0.0473625548183918}, {"id": 253, "seek": 176900, "start": 1769.0, "end": 1775.0, "text": " brackets.", "tokens": [26179, 13], "temperature": 0.0, "avg_logprob": -0.7753863334655762, "compression_ratio": 0.5294117647058824, "no_speech_prob": 1.4283536984294187e-05}, {"id": 254, "seek": 177500, "start": 1775.0, "end": 1802.0, "text": " Let's take a look.", "tokens": [961, 311, 747, 257, 574, 13], "temperature": 0.0, "avg_logprob": -0.27893283367156985, "compression_ratio": 0.6923076923076923, "no_speech_prob": 1.1476136933197267e-05}, {"id": 255, "seek": 180200, "start": 1802.0, "end": 1805.0, "text": " I've read that word before.", "tokens": [286, 600, 1401, 300, 1349, 949, 13], "temperature": 0.0, "avg_logprob": -0.3562317689259847, "compression_ratio": 0.86, "no_speech_prob": 1.496886761742644e-05}, {"id": 256, "seek": 180200, "start": 1805.0, "end": 1827.0, "text": " APL shy result.", "tokens": [5372, 43, 12685, 1874, 13], "temperature": 0.0, "avg_logprob": -0.3562317689259847, "compression_ratio": 0.86, "no_speech_prob": 1.496886761742644e-05}, {"id": 257, "seek": 182700, "start": 1827.0, "end": 1837.0, "text": " By default, functions print their result unless they're shy.", "tokens": [3146, 7576, 11, 6828, 4482, 641, 1874, 5969, 436, 434, 12685, 13], "temperature": 0.0, "avg_logprob": -0.15173071906680152, "compression_ratio": 1.2162162162162162, "no_speech_prob": 1.8161496200264082e-06}, {"id": 258, "seek": 182700, "start": 1837.0, "end": 1840.0, "text": " There you go.", "tokens": [821, 291, 352, 13], "temperature": 0.0, "avg_logprob": -0.15173071906680152, "compression_ratio": 1.2162162162162162, "no_speech_prob": 1.8161496200264082e-06}, {"id": 259, "seek": 182700, "start": 1840.0, "end": 1845.0, "text": " OK, so that's an optional argument.", "tokens": [2264, 11, 370, 300, 311, 364, 17312, 6770, 13], "temperature": 0.0, "avg_logprob": -0.15173071906680152, "compression_ratio": 1.2162162162162162, "no_speech_prob": 1.8161496200264082e-06}, {"id": 260, "seek": 182700, "start": 1845.0, "end": 1850.0, "text": " And that's a shy result.", "tokens": [400, 300, 311, 257, 12685, 1874, 13], "temperature": 0.0, "avg_logprob": -0.15173071906680152, "compression_ratio": 1.2162162162162162, "no_speech_prob": 1.8161496200264082e-06}, {"id": 261, "seek": 185000, "start": 1850.0, "end": 1858.0, "text": " Great. How do you define a shy result in a function? No idea.", "tokens": [3769, 13, 1012, 360, 291, 6964, 257, 12685, 1874, 294, 257, 2445, 30, 883, 1558, 13], "temperature": 0.0, "avg_logprob": -0.1906648671851968, "compression_ratio": 1.2148760330578512, "no_speech_prob": 4.710766006610356e-06}, {"id": 262, "seek": 185000, "start": 1858.0, "end": 1860.0, "text": " OK.", "tokens": [2264, 13], "temperature": 0.0, "avg_logprob": -0.1906648671851968, "compression_ratio": 1.2148760330578512, "no_speech_prob": 4.710766006610356e-06}, {"id": 263, "seek": 185000, "start": 1860.0, "end": 1864.0, "text": " So this is a dyadic tilde dioresis.", "tokens": [407, 341, 307, 257, 14584, 43341, 45046, 1026, 2706, 271, 13], "temperature": 0.0, "avg_logprob": -0.1906648671851968, "compression_ratio": 1.2148760330578512, "no_speech_prob": 4.710766006610356e-06}, {"id": 264, "seek": 185000, "start": 1864.0, "end": 1871.0, "text": " And so we can now redefine gradient.", "tokens": [400, 370, 321, 393, 586, 38818, 533, 16235, 13], "temperature": 0.0, "avg_logprob": -0.1906648671851968, "compression_ratio": 1.2148760330578512, "no_speech_prob": 4.710766006610356e-06}, {"id": 265, "seek": 185000, "start": 1871.0, "end": 1877.0, "text": " Like so.", "tokens": [1743, 370, 13], "temperature": 0.0, "avg_logprob": -0.1906648671851968, "compression_ratio": 1.2148760330578512, "no_speech_prob": 4.710766006610356e-06}, {"id": 266, "seek": 187700, "start": 1877.0, "end": 1891.0, "text": " And because the right hand side is handled first, we can now say, and I find it's really helpful to like, find a way to say this, which is I would say omega", "tokens": [400, 570, 264, 558, 1011, 1252, 307, 18033, 700, 11, 321, 393, 586, 584, 11, 293, 286, 915, 309, 311, 534, 4961, 281, 411, 11, 915, 257, 636, 281, 584, 341, 11, 597, 307, 286, 576, 584, 10498], "temperature": 0.0, "avg_logprob": -0.17822340668224898, "compression_ratio": 1.5140845070422535, "no_speech_prob": 1.36306098283967e-05}, {"id": 267, "seek": 187700, "start": 1891.0, "end": 1894.0, "text": " divided into", "tokens": [6666, 666], "temperature": 0.0, "avg_logprob": -0.17822340668224898, "compression_ratio": 1.5140845070422535, "no_speech_prob": 1.36306098283967e-05}, {"id": 268, "seek": 187700, "start": 1894.0, "end": 1897.0, "text": " the right hand side.", "tokens": [264, 558, 1011, 1252, 13], "temperature": 0.0, "avg_logprob": -0.17822340668224898, "compression_ratio": 1.5140845070422535, "no_speech_prob": 1.36306098283967e-05}, {"id": 269, "seek": 187700, "start": 1897.0, "end": 1902.0, "text": " So I wouldn't say divide", "tokens": [407, 286, 2759, 380, 584, 9845], "temperature": 0.0, "avg_logprob": -0.17822340668224898, "compression_ratio": 1.5140845070422535, "no_speech_prob": 1.36306098283967e-05}, {"id": 270, "seek": 190200, "start": 1902.0, "end": 1915.0, "text": " it, I would say divided into like normally there's some way you can like express the idea of these things being backwards in a reasonable math or English expression.", "tokens": [309, 11, 286, 576, 584, 6666, 666, 411, 5646, 456, 311, 512, 636, 291, 393, 411, 5109, 264, 1558, 295, 613, 721, 885, 12204, 294, 257, 10585, 5221, 420, 3669, 6114, 13], "temperature": 0.0, "avg_logprob": -0.12747191465817964, "compression_ratio": 1.4038461538461537, "no_speech_prob": 6.14393411524361e-06}, {"id": 271, "seek": 190200, "start": 1915.0, "end": 1925.0, "text": " So that does make it a bit more plain, which is nice.", "tokens": [407, 300, 775, 652, 309, 257, 857, 544, 11121, 11, 597, 307, 1481, 13], "temperature": 0.0, "avg_logprob": -0.12747191465817964, "compression_ratio": 1.4038461538461537, "no_speech_prob": 6.14393411524361e-06}, {"id": 272, "seek": 192500, "start": 1925.0, "end": 1935.0, "text": " And then there was another version of tilde dioresis, which is constant.", "tokens": [400, 550, 456, 390, 1071, 3037, 295, 45046, 1026, 2706, 271, 11, 597, 307, 5754, 13], "temperature": 0.0, "avg_logprob": -0.12086701393127441, "compression_ratio": 1.2323232323232323, "no_speech_prob": 5.014442194806179e-06}, {"id": 273, "seek": 192500, "start": 1935.0, "end": 1940.0, "text": " And so constant just always returns its argument.", "tokens": [400, 370, 5754, 445, 1009, 11247, 1080, 6770, 13], "temperature": 0.0, "avg_logprob": -0.12086701393127441, "compression_ratio": 1.2323232323232323, "no_speech_prob": 5.014442194806179e-06}, {"id": 274, "seek": 194000, "start": 1940.0, "end": 1955.0, "text": " So we could create a function called zero.", "tokens": [407, 321, 727, 1884, 257, 2445, 1219, 4018, 13], "temperature": 0.0, "avg_logprob": -0.10163042592067345, "compression_ratio": 1.3983050847457628, "no_speech_prob": 1.1015836207661778e-06}, {"id": 275, "seek": 194000, "start": 1955.0, "end": 1960.0, "text": " And so this, this is a function.", "tokens": [400, 370, 341, 11, 341, 307, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.10163042592067345, "compression_ratio": 1.3983050847457628, "no_speech_prob": 1.1015836207661778e-06}, {"id": 276, "seek": 194000, "start": 1960.0, "end": 1963.0, "text": " And so we can apply it to anything we like.", "tokens": [400, 370, 321, 393, 3079, 309, 281, 1340, 321, 411, 13], "temperature": 0.0, "avg_logprob": -0.10163042592067345, "compression_ratio": 1.3983050847457628, "no_speech_prob": 1.1015836207661778e-06}, {"id": 277, "seek": 194000, "start": 1963.0, "end": 1968.0, "text": " And I believe we could even do it dyadically.", "tokens": [400, 286, 1697, 321, 727, 754, 360, 309, 14584, 345, 984, 13], "temperature": 0.0, "avg_logprob": -0.10163042592067345, "compression_ratio": 1.3983050847457628, "no_speech_prob": 1.1015836207661778e-06}, {"id": 278, "seek": 196800, "start": 1968.0, "end": 1974.0, "text": " So that's just a function that returns zero.", "tokens": [407, 300, 311, 445, 257, 2445, 300, 11247, 4018, 13], "temperature": 0.0, "avg_logprob": -0.09602528980800083, "compression_ratio": 1.1477272727272727, "no_speech_prob": 8.9389559434494e-06}, {"id": 279, "seek": 196800, "start": 1974.0, "end": 1979.0, "text": " And that's it for tilde dioresis.", "tokens": [400, 300, 311, 309, 337, 45046, 1026, 2706, 271, 13], "temperature": 0.0, "avg_logprob": -0.09602528980800083, "compression_ratio": 1.1477272727272727, "no_speech_prob": 8.9389559434494e-06}, {"id": 280, "seek": 196800, "start": 1979.0, "end": 1982.0, "text": " This form I see a lot.", "tokens": [639, 1254, 286, 536, 257, 688, 13], "temperature": 0.0, "avg_logprob": -0.09602528980800083, "compression_ratio": 1.1477272727272727, "no_speech_prob": 8.9389559434494e-06}, {"id": 281, "seek": 198200, "start": 1982.0, "end": 1998.0, "text": " People use it very frequently in APL.", "tokens": [3432, 764, 309, 588, 10374, 294, 5372, 43, 13], "temperature": 0.0, "avg_logprob": -0.1261573679306928, "compression_ratio": 1.1287128712871286, "no_speech_prob": 3.1379674965137383e-06}, {"id": 282, "seek": 198200, "start": 1998.0, "end": 2001.0, "text": " Jeremy when are they using it.", "tokens": [17809, 562, 366, 436, 1228, 309, 13], "temperature": 0.0, "avg_logprob": -0.1261573679306928, "compression_ratio": 1.1287128712871286, "no_speech_prob": 3.1379674965137383e-06}, {"id": 283, "seek": 198200, "start": 2001.0, "end": 2004.0, "text": " They use it for exactly this kind of purpose.", "tokens": [814, 764, 309, 337, 2293, 341, 733, 295, 4334, 13], "temperature": 0.0, "avg_logprob": -0.1261573679306928, "compression_ratio": 1.1287128712871286, "no_speech_prob": 3.1379674965137383e-06}, {"id": 284, "seek": 200400, "start": 2004.0, "end": 2015.0, "text": " APL is hate parentheses, and they hate unnecessary symbols,", "tokens": [5372, 43, 307, 4700, 34153, 11, 293, 436, 4700, 19350, 16944, 11], "temperature": 0.0, "avg_logprob": -0.1739086707433065, "compression_ratio": 1.2803030303030303, "no_speech_prob": 1.4284079952631146e-05}, {"id": 285, "seek": 200400, "start": 2015.0, "end": 2018.0, "text": " which I kind of get like it's.", "tokens": [597, 286, 733, 295, 483, 411, 309, 311, 13], "temperature": 0.0, "avg_logprob": -0.1739086707433065, "compression_ratio": 1.2803030303030303, "no_speech_prob": 1.4284079952631146e-05}, {"id": 286, "seek": 200400, "start": 2018.0, "end": 2033.0, "text": " This is certainly by having less stuff to read it's, I find it easier to read.", "tokens": [639, 307, 3297, 538, 1419, 1570, 1507, 281, 1401, 309, 311, 11, 286, 915, 309, 3571, 281, 1401, 13], "temperature": 0.0, "avg_logprob": -0.1739086707433065, "compression_ratio": 1.2803030303030303, "no_speech_prob": 1.4284079952631146e-05}, {"id": 287, "seek": 203300, "start": 2033.0, "end": 2044.0, "text": " Another one I think we might want to do", "tokens": [3996, 472, 286, 519, 321, 1062, 528, 281, 360], "temperature": 0.0, "avg_logprob": -0.1889042059580485, "compression_ratio": 1.2551020408163265, "no_speech_prob": 2.6271844035363756e-05}, {"id": 288, "seek": 203300, "start": 2044.0, "end": 2050.0, "text": " is each which one of these is each does anybody remembers this one.", "tokens": [307, 1184, 597, 472, 295, 613, 307, 1184, 775, 4472, 26228, 341, 472, 13], "temperature": 0.0, "avg_logprob": -0.1889042059580485, "compression_ratio": 1.2551020408163265, "no_speech_prob": 2.6271844035363756e-05}, {"id": 289, "seek": 203300, "start": 2050.0, "end": 2052.0, "text": " Yeah, this one.", "tokens": [865, 11, 341, 472, 13], "temperature": 0.0, "avg_logprob": -0.1889042059580485, "compression_ratio": 1.2551020408163265, "no_speech_prob": 2.6271844035363756e-05}, {"id": 290, "seek": 205200, "start": 2052.0, "end": 2064.0, "text": " So this is just dioresis.", "tokens": [407, 341, 307, 445, 1026, 2706, 271, 13], "temperature": 0.0, "avg_logprob": -0.16598287495699796, "compression_ratio": 0.9183673469387755, "no_speech_prob": 8.799195711617358e-06}, {"id": 291, "seek": 205200, "start": 2064.0, "end": 2068.0, "text": " And here it is.", "tokens": [400, 510, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.16598287495699796, "compression_ratio": 0.9183673469387755, "no_speech_prob": 8.799195711617358e-06}, {"id": 292, "seek": 205200, "start": 2068.0, "end": 2075.0, "text": " One", "tokens": [1485], "temperature": 0.0, "avg_logprob": -0.16598287495699796, "compression_ratio": 0.9183673469387755, "no_speech_prob": 8.799195711617358e-06}, {"id": 293, "seek": 207500, "start": 2075.0, "end": 2083.0, "text": " is just monadic.", "tokens": [307, 445, 1108, 43341, 13], "temperature": 0.0, "avg_logprob": -0.28949271308051217, "compression_ratio": 1.197674418604651, "no_speech_prob": 2.5465042199357413e-05}, {"id": 294, "seek": 207500, "start": 2083.0, "end": 2087.0, "text": " And", "tokens": [400], "temperature": 0.0, "avg_logprob": -0.28949271308051217, "compression_ratio": 1.197674418604651, "no_speech_prob": 2.5465042199357413e-05}, {"id": 295, "seek": 207500, "start": 2087.0, "end": 2095.0, "text": " it's a monadic operator. Oh, this word here means can be either monadic or dyadic.", "tokens": [309, 311, 257, 1108, 43341, 12973, 13, 876, 11, 341, 1349, 510, 1355, 393, 312, 2139, 1108, 43341, 420, 14584, 43341, 13], "temperature": 0.0, "avg_logprob": -0.28949271308051217, "compression_ratio": 1.197674418604651, "no_speech_prob": 2.5465042199357413e-05}, {"id": 296, "seek": 209500, "start": 2095.0, "end": 2117.0, "text": " It's not ambivalent as in I don't care, but it's ambivalent as in either valence.", "tokens": [467, 311, 406, 3913, 3576, 317, 382, 294, 286, 500, 380, 1127, 11, 457, 309, 311, 3913, 3576, 317, 382, 294, 2139, 1323, 655, 13], "temperature": 0.0, "avg_logprob": -0.11929797304087672, "compression_ratio": 1.208955223880597, "no_speech_prob": 7.028113031992689e-05}, {"id": 297, "seek": 211700, "start": 2117.0, "end": 2128.0, "text": " Where valence is handedness.", "tokens": [2305, 1323, 655, 307, 16013, 1287, 13], "temperature": 0.0, "avg_logprob": -0.20837232801649305, "compression_ratio": 0.8571428571428571, "no_speech_prob": 5.060719922767021e-05}, {"id": 298, "seek": 211700, "start": 2128.0, "end": 2134.0, "text": " Yes, this is.", "tokens": [1079, 11, 341, 307, 13], "temperature": 0.0, "avg_logprob": -0.20837232801649305, "compression_ratio": 0.8571428571428571, "no_speech_prob": 5.060719922767021e-05}, {"id": 299, "seek": 213400, "start": 2134.0, "end": 2153.0, "text": " Okay, this is a list of", "tokens": [1033, 11, 341, 307, 257, 1329, 295], "temperature": 0.0, "avg_logprob": -0.14976739883422852, "compression_ratio": 1.3974358974358974, "no_speech_prob": 1.7230864614248276e-05}, {"id": 300, "seek": 213400, "start": 2153.0, "end": 2157.0, "text": " Okay, this is a list. This is an array of arrays.", "tokens": [1033, 11, 341, 307, 257, 1329, 13, 639, 307, 364, 10225, 295, 41011, 13], "temperature": 0.0, "avg_logprob": -0.14976739883422852, "compression_ratio": 1.3974358974358974, "no_speech_prob": 1.7230864614248276e-05}, {"id": 301, "seek": 213400, "start": 2157.0, "end": 2160.0, "text": " So it's an array with two elements.", "tokens": [407, 309, 311, 364, 10225, 365, 732, 4959, 13], "temperature": 0.0, "avg_logprob": -0.14976739883422852, "compression_ratio": 1.3974358974358974, "no_speech_prob": 1.7230864614248276e-05}, {"id": 302, "seek": 216000, "start": 2160.0, "end": 2167.0, "text": " And if we try to do plus slash of that.", "tokens": [400, 498, 321, 853, 281, 360, 1804, 17330, 295, 300, 13], "temperature": 0.0, "avg_logprob": -0.09517322267804827, "compression_ratio": 1.3768115942028984, "no_speech_prob": 1.06158177004545e-05}, {"id": 303, "seek": 216000, "start": 2167.0, "end": 2172.0, "text": " It's going to get upset, because it's trying to do.", "tokens": [467, 311, 516, 281, 483, 8340, 11, 570, 309, 311, 1382, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.09517322267804827, "compression_ratio": 1.3768115942028984, "no_speech_prob": 1.06158177004545e-05}, {"id": 304, "seek": 216000, "start": 2172.0, "end": 2186.0, "text": " It's trying to insert plus between its arguments, which would be the same as typing 1234 plus 567.", "tokens": [467, 311, 1382, 281, 8969, 1804, 1296, 1080, 12869, 11, 597, 576, 312, 264, 912, 382, 18444, 2272, 12249, 1804, 19687, 22, 13], "temperature": 0.0, "avg_logprob": -0.09517322267804827, "compression_ratio": 1.3768115942028984, "no_speech_prob": 1.06158177004545e-05}, {"id": 305, "seek": 218600, "start": 2186.0, "end": 2201.0, "text": " The each operator takes the previous function, which in this case is itself being defined with an operator, and it means some, and it applies it over each of its arguments.", "tokens": [440, 1184, 12973, 2516, 264, 3894, 2445, 11, 597, 294, 341, 1389, 307, 2564, 885, 7642, 365, 364, 12973, 11, 293, 309, 1355, 512, 11, 293, 309, 13165, 309, 670, 1184, 295, 1080, 12869, 13], "temperature": 0.0, "avg_logprob": -0.12404272556304932, "compression_ratio": 1.6862745098039216, "no_speech_prob": 6.74788270771387e-06}, {"id": 306, "seek": 218600, "start": 2201.0, "end": 2214.0, "text": " So plus slash each means apply plus slash to this, and then apply plus slash to this.", "tokens": [407, 1804, 17330, 1184, 1355, 3079, 1804, 17330, 281, 341, 11, 293, 550, 3079, 1804, 17330, 281, 341, 13], "temperature": 0.0, "avg_logprob": -0.12404272556304932, "compression_ratio": 1.6862745098039216, "no_speech_prob": 6.74788270771387e-06}, {"id": 307, "seek": 221400, "start": 2214.0, "end": 2223.0, "text": " And thus giving us the results 10 and 18. Does that make sense.", "tokens": [400, 8807, 2902, 505, 264, 3542, 1266, 293, 2443, 13, 4402, 300, 652, 2020, 13], "temperature": 0.0, "avg_logprob": -0.24934966940628855, "compression_ratio": 1.146788990825688, "no_speech_prob": 4.425355200510239e-06}, {"id": 308, "seek": 221400, "start": 2223.0, "end": 2234.0, "text": " And I think that might work for like,", "tokens": [400, 286, 519, 300, 1062, 589, 337, 411, 11], "temperature": 0.0, "avg_logprob": -0.24934966940628855, "compression_ratio": 1.146788990825688, "no_speech_prob": 4.425355200510239e-06}, {"id": 309, "seek": 221400, "start": 2234.0, "end": 2237.0, "text": " it's creating an array,", "tokens": [309, 311, 4084, 364, 10225, 11], "temperature": 0.0, "avg_logprob": -0.24934966940628855, "compression_ratio": 1.146788990825688, "no_speech_prob": 4.425355200510239e-06}, {"id": 310, "seek": 223700, "start": 2237.0, "end": 2246.0, "text": " which is a two rows by three column array.", "tokens": [597, 307, 257, 732, 13241, 538, 1045, 7738, 10225, 13], "temperature": 0.0, "avg_logprob": -0.373491781729239, "compression_ratio": 1.064102564102564, "no_speech_prob": 0.0001878415496321395}, {"id": 311, "seek": 223700, "start": 2246.0, "end": 2261.0, "text": " I had a six rows got to go between them.", "tokens": [286, 632, 257, 2309, 13241, 658, 281, 352, 1296, 552, 13], "temperature": 0.0, "avg_logprob": -0.373491781729239, "compression_ratio": 1.064102564102564, "no_speech_prob": 0.0001878415496321395}, {"id": 312, "seek": 226100, "start": 2261.0, "end": 2271.0, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.29477184697201375, "compression_ratio": 0.8181818181818182, "no_speech_prob": 0.00015528603398706764}, {"id": 313, "seek": 226100, "start": 2271.0, "end": 2277.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.29477184697201375, "compression_ratio": 0.8181818181818182, "no_speech_prob": 0.00015528603398706764}, {"id": 314, "seek": 226100, "start": 2277.0, "end": 2281.0, "text": " So if I tried to do", "tokens": [407, 498, 286, 3031, 281, 360], "temperature": 0.0, "avg_logprob": -0.29477184697201375, "compression_ratio": 0.8181818181818182, "no_speech_prob": 0.00015528603398706764}, {"id": 315, "seek": 228100, "start": 2281.0, "end": 2295.0, "text": " two, three plus Matt, something like that can work in NumPy, it would broadcast the", "tokens": [732, 11, 1045, 1804, 7397, 11, 746, 411, 300, 393, 589, 294, 22592, 47, 88, 11, 309, 576, 9975, 264], "temperature": 0.0, "avg_logprob": -0.2020741078391004, "compression_ratio": 1.4522292993630572, "no_speech_prob": 5.093650997878285e-06}, {"id": 316, "seek": 228100, "start": 2295.0, "end": 2300.0, "text": " maybe like this, broadcast this over each row.", "tokens": [1310, 411, 341, 11, 9975, 341, 670, 1184, 5386, 13], "temperature": 0.0, "avg_logprob": -0.2020741078391004, "compression_ratio": 1.4522292993630572, "no_speech_prob": 5.093650997878285e-06}, {"id": 317, "seek": 228100, "start": 2300.0, "end": 2307.0, "text": " But it doesn't add it also, I think, can work in J, but I don't think by default it works in APL.", "tokens": [583, 309, 1177, 380, 909, 309, 611, 11, 286, 519, 11, 393, 589, 294, 508, 11, 457, 286, 500, 380, 519, 538, 7576, 309, 1985, 294, 5372, 43, 13], "temperature": 0.0, "avg_logprob": -0.2020741078391004, "compression_ratio": 1.4522292993630572, "no_speech_prob": 5.093650997878285e-06}, {"id": 318, "seek": 230700, "start": 2307.0, "end": 2316.0, "text": " But I think if we say that it applies to each element of Matt,", "tokens": [583, 286, 519, 498, 321, 584, 300, 309, 13165, 281, 1184, 4478, 295, 7397, 11], "temperature": 0.0, "avg_logprob": -0.19565362930297853, "compression_ratio": 1.1958762886597938, "no_speech_prob": 3.966907115682261e-06}, {"id": 319, "seek": 230700, "start": 2316.0, "end": 2322.0, "text": " or is it applied to each column?", "tokens": [420, 307, 309, 6456, 281, 1184, 7738, 30], "temperature": 0.0, "avg_logprob": -0.19565362930297853, "compression_ratio": 1.1958762886597938, "no_speech_prob": 3.966907115682261e-06}, {"id": 320, "seek": 230700, "start": 2322.0, "end": 2336.0, "text": " Something like that.", "tokens": [6595, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.19565362930297853, "compression_ratio": 1.1958762886597938, "no_speech_prob": 3.966907115682261e-06}, {"id": 321, "seek": 233600, "start": 2336.0, "end": 2340.0, "text": " I think the problem is that it's going through each of two.", "tokens": [286, 519, 264, 1154, 307, 300, 309, 311, 516, 807, 1184, 295, 732, 13], "temperature": 0.0, "avg_logprob": -0.17463609150477818, "compression_ratio": 1.5121951219512195, "no_speech_prob": 2.24727136810543e-05}, {"id": 322, "seek": 233600, "start": 2340.0, "end": 2348.0, "text": " Yeah, I think it's, yeah, I think it's going through each of", "tokens": [865, 11, 286, 519, 309, 311, 11, 1338, 11, 286, 519, 309, 311, 516, 807, 1184, 295], "temperature": 0.0, "avg_logprob": -0.17463609150477818, "compression_ratio": 1.5121951219512195, "no_speech_prob": 2.24727136810543e-05}, {"id": 323, "seek": 233600, "start": 2348.0, "end": 2358.0, "text": " two, three, four separately.", "tokens": [732, 11, 1045, 11, 1451, 14759, 13], "temperature": 0.0, "avg_logprob": -0.17463609150477818, "compression_ratio": 1.5121951219512195, "no_speech_prob": 2.24727136810543e-05}, {"id": 324, "seek": 233600, "start": 2358.0, "end": 2362.0, "text": " What does this look like plus slash.", "tokens": [708, 775, 341, 574, 411, 1804, 17330, 13], "temperature": 0.0, "avg_logprob": -0.17463609150477818, "compression_ratio": 1.5121951219512195, "no_speech_prob": 2.24727136810543e-05}, {"id": 325, "seek": 236200, "start": 2362.0, "end": 2375.0, "text": " Okay, it's that doesn't actually work that way correctly on a, on a matrix.", "tokens": [1033, 11, 309, 311, 300, 1177, 380, 767, 589, 300, 636, 8944, 322, 257, 11, 322, 257, 8141, 13], "temperature": 0.0, "avg_logprob": -0.2577482534914601, "compression_ratio": 1.335820895522388, "no_speech_prob": 1.300623898714548e-05}, {"id": 326, "seek": 236200, "start": 2375.0, "end": 2386.0, "text": " I think this is, this might be related to when we were looking at the IOTA before we were searching for", "tokens": [286, 519, 341, 307, 11, 341, 1062, 312, 4077, 281, 562, 321, 645, 1237, 412, 264, 286, 5068, 32, 949, 321, 645, 10808, 337], "temperature": 0.0, "avg_logprob": -0.2577482534914601, "compression_ratio": 1.335820895522388, "no_speech_prob": 1.300623898714548e-05}, {"id": 327, "seek": 238600, "start": 2386.0, "end": 2393.0, "text": " using it to find values in the matrix, it was, you wouldn't find individual values you'd find all rows at a time.", "tokens": [1228, 309, 281, 915, 4190, 294, 264, 8141, 11, 309, 390, 11, 291, 2759, 380, 915, 2609, 4190, 291, 1116, 915, 439, 13241, 412, 257, 565, 13], "temperature": 0.0, "avg_logprob": -0.15172522618220402, "compression_ratio": 1.457516339869281, "no_speech_prob": 5.682054052158492e-06}, {"id": 328, "seek": 238600, "start": 2393.0, "end": 2401.0, "text": " Yeah, I think the issue is it's not going over cells of an array, but going over items.", "tokens": [865, 11, 286, 519, 264, 2734, 307, 309, 311, 406, 516, 670, 5438, 295, 364, 10225, 11, 457, 516, 670, 4754, 13], "temperature": 0.0, "avg_logprob": -0.15172522618220402, "compression_ratio": 1.457516339869281, "no_speech_prob": 5.682054052158492e-06}, {"id": 329, "seek": 238600, "start": 2401.0, "end": 2407.0, "text": " So I'm guessing", "tokens": [407, 286, 478, 17939], "temperature": 0.0, "avg_logprob": -0.15172522618220402, "compression_ratio": 1.457516339869281, "no_speech_prob": 5.682054052158492e-06}, {"id": 330, "seek": 238600, "start": 2407.0, "end": 2415.0, "text": " if we", "tokens": [498, 321], "temperature": 0.0, "avg_logprob": -0.15172522618220402, "compression_ratio": 1.457516339869281, "no_speech_prob": 5.682054052158492e-06}, {"id": 331, "seek": 241500, "start": 2415.0, "end": 2426.0, "text": " kind of like this", "tokens": [733, 295, 411, 341], "temperature": 0.0, "avg_logprob": -0.35148213704427084, "compression_ratio": 0.9285714285714286, "no_speech_prob": 3.071542960242368e-05}, {"id": 332, "seek": 241500, "start": 2426.0, "end": 2442.0, "text": " then we could do like", "tokens": [550, 321, 727, 360, 411], "temperature": 0.0, "avg_logprob": -0.35148213704427084, "compression_ratio": 0.9285714285714286, "no_speech_prob": 3.071542960242368e-05}, {"id": 333, "seek": 244200, "start": 2442.0, "end": 2446.0, "text": " Oh, not Matt B.", "tokens": [876, 11, 406, 7397, 363, 13], "temperature": 0.0, "avg_logprob": -0.14922944034438534, "compression_ratio": 1.6024096385542168, "no_speech_prob": 4.710816483566305e-06}, {"id": 334, "seek": 244200, "start": 2446.0, "end": 2456.0, "text": " Okay, yeah, so that's going to go over each of these, it's going to go over, it's going to go two plus this, and then it'll go three plus this.", "tokens": [1033, 11, 1338, 11, 370, 300, 311, 516, 281, 352, 670, 1184, 295, 613, 11, 309, 311, 516, 281, 352, 670, 11, 309, 311, 516, 281, 352, 732, 1804, 341, 11, 293, 550, 309, 603, 352, 1045, 1804, 341, 13], "temperature": 0.0, "avg_logprob": -0.14922944034438534, "compression_ratio": 1.6024096385542168, "no_speech_prob": 4.710816483566305e-06}, {"id": 335, "seek": 244200, "start": 2456.0, "end": 2461.0, "text": " And I assume there must be some way to", "tokens": [400, 286, 6552, 456, 1633, 312, 512, 636, 281], "temperature": 0.0, "avg_logprob": -0.14922944034438534, "compression_ratio": 1.6024096385542168, "no_speech_prob": 4.710816483566305e-06}, {"id": 336, "seek": 244200, "start": 2461.0, "end": 2471.0, "text": " make that apply over a rank two array, but I don't know what it is.", "tokens": [652, 300, 3079, 670, 257, 6181, 732, 10225, 11, 457, 286, 500, 380, 458, 437, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.14922944034438534, "compression_ratio": 1.6024096385542168, "no_speech_prob": 4.710816483566305e-06}, {"id": 337, "seek": 247100, "start": 2471.0, "end": 2475.0, "text": " So I guess", "tokens": [407, 286, 2041], "temperature": 0.0, "avg_logprob": -0.21421614426832933, "compression_ratio": 1.401197604790419, "no_speech_prob": 1.9831011741189286e-05}, {"id": 338, "seek": 247100, "start": 2475.0, "end": 2482.0, "text": " anybody fingers that out let us know otherwise I guess we'll probably come to it at some point.", "tokens": [4472, 7350, 300, 484, 718, 505, 458, 5911, 286, 2041, 321, 603, 1391, 808, 281, 309, 412, 512, 935, 13], "temperature": 0.0, "avg_logprob": -0.21421614426832933, "compression_ratio": 1.401197604790419, "no_speech_prob": 1.9831011741189286e-05}, {"id": 339, "seek": 247100, "start": 2482.0, "end": 2487.0, "text": " Put the syntax for defining a shy function in the chat.", "tokens": [4935, 264, 28431, 337, 17827, 257, 12685, 2445, 294, 264, 5081, 13], "temperature": 0.0, "avg_logprob": -0.21421614426832933, "compression_ratio": 1.401197604790419, "no_speech_prob": 1.9831011741189286e-05}, {"id": 340, "seek": 247100, "start": 2487.0, "end": 2488.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.21421614426832933, "compression_ratio": 1.401197604790419, "no_speech_prob": 1.9831011741189286e-05}, {"id": 341, "seek": 247100, "start": 2488.0, "end": 2496.0, "text": " And one of the structure flow but shy, this is not shy copy them.", "tokens": [400, 472, 295, 264, 3877, 3095, 457, 12685, 11, 341, 307, 406, 12685, 5055, 552, 13], "temperature": 0.0, "avg_logprob": -0.21421614426832933, "compression_ratio": 1.401197604790419, "no_speech_prob": 1.9831011741189286e-05}, {"id": 342, "seek": 249600, "start": 2496.0, "end": 2501.0, "text": " I don't really have much of a flow I gotta be honest.", "tokens": [286, 500, 380, 534, 362, 709, 295, 257, 3095, 286, 3428, 312, 3245, 13], "temperature": 0.0, "avg_logprob": -0.24323126849006205, "compression_ratio": 1.3106060606060606, "no_speech_prob": 1.3005995242565405e-05}, {"id": 343, "seek": 249600, "start": 2501.0, "end": 2503.0, "text": " Oh, it didn't work.", "tokens": [876, 11, 309, 994, 380, 589, 13], "temperature": 0.0, "avg_logprob": -0.24323126849006205, "compression_ratio": 1.3106060606060606, "no_speech_prob": 1.3005995242565405e-05}, {"id": 344, "seek": 249600, "start": 2503.0, "end": 2509.0, "text": " Seems like you're on a roll to me.", "tokens": [22524, 411, 291, 434, 322, 257, 3373, 281, 385, 13], "temperature": 0.0, "avg_logprob": -0.24323126849006205, "compression_ratio": 1.3106060606060606, "no_speech_prob": 1.3005995242565405e-05}, {"id": 345, "seek": 249600, "start": 2509.0, "end": 2513.0, "text": " Copy", "tokens": [25653], "temperature": 0.0, "avg_logprob": -0.24323126849006205, "compression_ratio": 1.3106060606060606, "no_speech_prob": 1.3005995242565405e-05}, {"id": 346, "seek": 249600, "start": 2513.0, "end": 2515.0, "text": " that's more like it.", "tokens": [300, 311, 544, 411, 309, 13], "temperature": 0.0, "avg_logprob": -0.24323126849006205, "compression_ratio": 1.3106060606060606, "no_speech_prob": 1.3005995242565405e-05}, {"id": 347, "seek": 249600, "start": 2515.0, "end": 2517.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.24323126849006205, "compression_ratio": 1.3106060606060606, "no_speech_prob": 1.3005995242565405e-05}, {"id": 348, "seek": 249600, "start": 2517.0, "end": 2523.0, "text": " So, I'm going to get shy, is it.", "tokens": [407, 11, 286, 478, 516, 281, 483, 12685, 11, 307, 309, 13], "temperature": 0.0, "avg_logprob": -0.24323126849006205, "compression_ratio": 1.3106060606060606, "no_speech_prob": 1.3005995242565405e-05}, {"id": 349, "seek": 252300, "start": 2523.0, "end": 2532.0, "text": " And this one's not shy. So when you actually assigned it to the function that makes it not print out.", "tokens": [400, 341, 472, 311, 406, 12685, 13, 407, 562, 291, 767, 13279, 309, 281, 264, 2445, 300, 1669, 309, 406, 4482, 484, 13], "temperature": 0.0, "avg_logprob": -0.1896656843332144, "compression_ratio": 1.1538461538461537, "no_speech_prob": 5.6816620599420276e-06}, {"id": 350, "seek": 252300, "start": 2532.0, "end": 2533.0, "text": " Cool.", "tokens": [8561, 13], "temperature": 0.0, "avg_logprob": -0.1896656843332144, "compression_ratio": 1.1538461538461537, "no_speech_prob": 5.6816620599420276e-06}, {"id": 351, "seek": 252300, "start": 2533.0, "end": 2535.0, "text": " Thanks.", "tokens": [2561, 13], "temperature": 0.0, "avg_logprob": -0.1896656843332144, "compression_ratio": 1.1538461538461537, "no_speech_prob": 5.6816620599420276e-06}, {"id": 352, "seek": 252300, "start": 2535.0, "end": 2540.0, "text": " Yep.", "tokens": [7010, 13], "temperature": 0.0, "avg_logprob": -0.1896656843332144, "compression_ratio": 1.1538461538461537, "no_speech_prob": 5.6816620599420276e-06}, {"id": 353, "seek": 254000, "start": 2540.0, "end": 2553.0, "text": " Not sure when I would want things not to print out but.", "tokens": [1726, 988, 562, 286, 576, 528, 721, 406, 281, 4482, 484, 457, 13], "temperature": 0.0, "avg_logprob": -0.1536014664847896, "compression_ratio": 1.3404255319148937, "no_speech_prob": 1.7602674233785365e-06}, {"id": 354, "seek": 254000, "start": 2553.0, "end": 2558.0, "text": " Okay, so none of their examples are using matrices.", "tokens": [1033, 11, 370, 6022, 295, 641, 5110, 366, 1228, 32284, 13], "temperature": 0.0, "avg_logprob": -0.1536014664847896, "compression_ratio": 1.3404255319148937, "no_speech_prob": 1.7602674233785365e-06}, {"id": 355, "seek": 254000, "start": 2558.0, "end": 2569.0, "text": " The only other place that could be helpful to look at is to look at the APL wiki.", "tokens": [440, 787, 661, 1081, 300, 727, 312, 4961, 281, 574, 412, 307, 281, 574, 412, 264, 5372, 43, 261, 9850, 13], "temperature": 0.0, "avg_logprob": -0.1536014664847896, "compression_ratio": 1.3404255319148937, "no_speech_prob": 1.7602674233785365e-06}, {"id": 356, "seek": 256900, "start": 2569.0, "end": 2572.0, "text": " It's only defined in nested APLs.", "tokens": [467, 311, 787, 7642, 294, 15646, 292, 5372, 43, 82, 13], "temperature": 0.0, "avg_logprob": -0.23336183230082194, "compression_ratio": 0.8461538461538461, "no_speech_prob": 3.9431066397810355e-05}, {"id": 357, "seek": 257200, "start": 2572.0, "end": 2599.0, "text": " I think that means things where you can have an array and an array.", "tokens": [286, 519, 300, 1355, 721, 689, 291, 393, 362, 364, 10225, 293, 364, 10225, 13], "temperature": 0.0, "avg_logprob": -0.09475107569443553, "compression_ratio": 1.1166666666666667, "no_speech_prob": 1.028779661282897e-05}, {"id": 358, "seek": 259900, "start": 2599.0, "end": 2613.0, "text": " I don't know what I knew that means.", "tokens": [286, 500, 380, 458, 437, 286, 2586, 300, 1355, 13], "temperature": 0.0, "avg_logprob": -0.36335056168692453, "compression_ratio": 0.9, "no_speech_prob": 9.515870260656811e-06}, {"id": 359, "seek": 261300, "start": 2613.0, "end": 2629.0, "text": " So I assume there's going to be some magic incantation that basically turns a matrix into an array of arrays of rows, and that you would do it, do it that way. I assume.", "tokens": [407, 286, 6552, 456, 311, 516, 281, 312, 512, 5585, 834, 394, 399, 300, 1936, 4523, 257, 8141, 666, 364, 10225, 295, 41011, 295, 13241, 11, 293, 300, 291, 576, 360, 309, 11, 360, 309, 300, 636, 13, 286, 6552, 13], "temperature": 0.0, "avg_logprob": -0.17422593606484904, "compression_ratio": 1.4858757062146892, "no_speech_prob": 6.338787443382898e-06}, {"id": 360, "seek": 261300, "start": 2629.0, "end": 2630.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.17422593606484904, "compression_ratio": 1.4858757062146892, "no_speech_prob": 6.338787443382898e-06}, {"id": 361, "seek": 261300, "start": 2630.0, "end": 2640.0, "text": " So you can search for a, an APL symbol on a PL cart will give you everything that's in.", "tokens": [407, 291, 393, 3164, 337, 257, 11, 364, 5372, 43, 5986, 322, 257, 6999, 5467, 486, 976, 291, 1203, 300, 311, 294, 13], "temperature": 0.0, "avg_logprob": -0.17422593606484904, "compression_ratio": 1.4858757062146892, "no_speech_prob": 6.338787443382898e-06}, {"id": 362, "seek": 264000, "start": 2640.0, "end": 2651.0, "text": " I mean, that's not a bad idea to learn how to use this thing because when I was on the podcast, they seem to think it was thing worth learning about.", "tokens": [286, 914, 11, 300, 311, 406, 257, 1578, 1558, 281, 1466, 577, 281, 764, 341, 551, 570, 562, 286, 390, 322, 264, 7367, 11, 436, 1643, 281, 519, 309, 390, 551, 3163, 2539, 466, 13], "temperature": 0.0, "avg_logprob": -0.2298609773877641, "compression_ratio": 1.4502923976608186, "no_speech_prob": 7.527517936978256e-06}, {"id": 363, "seek": 264000, "start": 2651.0, "end": 2655.0, "text": " Okay, here it is. Each.", "tokens": [1033, 11, 510, 309, 307, 13, 6947, 13], "temperature": 0.0, "avg_logprob": -0.2298609773877641, "compression_ratio": 1.4502923976608186, "no_speech_prob": 7.527517936978256e-06}, {"id": 364, "seek": 264000, "start": 2655.0, "end": 2657.0, "text": " How do I.", "tokens": [1012, 360, 286, 13], "temperature": 0.0, "avg_logprob": -0.2298609773877641, "compression_ratio": 1.4502923976608186, "no_speech_prob": 7.527517936978256e-06}, {"id": 365, "seek": 264000, "start": 2657.0, "end": 2664.0, "text": " I see so typing comma each ensures all men's vectors join items.", "tokens": [286, 536, 370, 18444, 22117, 1184, 28111, 439, 1706, 311, 18875, 3917, 4754, 13], "temperature": 0.0, "avg_logprob": -0.2298609773877641, "compression_ratio": 1.4502923976608186, "no_speech_prob": 7.527517936978256e-06}, {"id": 366, "seek": 266400, "start": 2664.0, "end": 2670.0, "text": " So like idioms I guess.", "tokens": [407, 411, 18014, 4785, 286, 2041, 13], "temperature": 0.0, "avg_logprob": -0.2166768683761847, "compression_ratio": 1.39375, "no_speech_prob": 3.392814278413425e-06}, {"id": 367, "seek": 266400, "start": 2670.0, "end": 2683.0, "text": " Yeah, so, like one that I found I was when I was working on this computational algebra you can type in like, calculate the determinant, and they've got a big long thing for that.", "tokens": [865, 11, 370, 11, 411, 472, 300, 286, 1352, 286, 390, 562, 286, 390, 1364, 322, 341, 28270, 21989, 291, 393, 2010, 294, 411, 11, 8873, 264, 41296, 11, 293, 436, 600, 658, 257, 955, 938, 551, 337, 300, 13], "temperature": 0.0, "avg_logprob": -0.2166768683761847, "compression_ratio": 1.39375, "no_speech_prob": 3.392814278413425e-06}, {"id": 368, "seek": 266400, "start": 2683.0, "end": 2690.0, "text": " And so some of them.", "tokens": [400, 370, 512, 295, 552, 13], "temperature": 0.0, "avg_logprob": -0.2166768683761847, "compression_ratio": 1.39375, "no_speech_prob": 3.392814278413425e-06}, {"id": 369, "seek": 269000, "start": 2690.0, "end": 2699.0, "text": " Most of them. The ones at the top seem to be more simpler than the ones down below. Okay, are sorted.", "tokens": [4534, 295, 552, 13, 440, 2306, 412, 264, 1192, 1643, 281, 312, 544, 18587, 813, 264, 2306, 760, 2507, 13, 1033, 11, 366, 25462, 13], "temperature": 0.0, "avg_logprob": -0.20864971752824454, "compression_ratio": 1.3506493506493507, "no_speech_prob": 5.255124960967805e-06}, {"id": 370, "seek": 269000, "start": 2699.0, "end": 2711.0, "text": " And actually this this tables lives in a text file repository. Here's Conway's Game of Life.", "tokens": [400, 767, 341, 341, 8020, 2909, 294, 257, 2487, 3991, 25841, 13, 1692, 311, 2656, 676, 311, 7522, 295, 7720, 13], "temperature": 0.0, "avg_logprob": -0.20864971752824454, "compression_ratio": 1.3506493506493507, "no_speech_prob": 5.255124960967805e-06}, {"id": 371, "seek": 269000, "start": 2711.0, "end": 2719.0, "text": " That's great.", "tokens": [663, 311, 869, 13], "temperature": 0.0, "avg_logprob": -0.20864971752824454, "compression_ratio": 1.3506493506493507, "no_speech_prob": 5.255124960967805e-06}, {"id": 372, "seek": 271900, "start": 2719.0, "end": 2727.0, "text": " I'm going to be really happy when I can read all this. Yeah, this is intense.", "tokens": [286, 478, 516, 281, 312, 534, 2055, 562, 286, 393, 1401, 439, 341, 13, 865, 11, 341, 307, 9447, 13], "temperature": 0.0, "avg_logprob": -0.19274965354374476, "compression_ratio": 1.381294964028777, "no_speech_prob": 1.0129566362593323e-05}, {"id": 373, "seek": 271900, "start": 2727.0, "end": 2734.0, "text": " That's cool. I only say one thing that mentions a matrix.", "tokens": [663, 311, 1627, 13, 286, 787, 584, 472, 551, 300, 23844, 257, 8141, 13], "temperature": 0.0, "avg_logprob": -0.19274965354374476, "compression_ratio": 1.381294964028777, "no_speech_prob": 1.0129566362593323e-05}, {"id": 374, "seek": 271900, "start": 2734.0, "end": 2742.0, "text": " Can you try adding matrix to the search. I can go there.", "tokens": [1664, 291, 853, 5127, 8141, 281, 264, 3164, 13, 286, 393, 352, 456, 13], "temperature": 0.0, "avg_logprob": -0.19274965354374476, "compression_ratio": 1.381294964028777, "no_speech_prob": 1.0129566362593323e-05}, {"id": 375, "seek": 274200, "start": 2742.0, "end": 2751.0, "text": " Peptidagonal matrices.", "tokens": [430, 5250, 327, 6709, 304, 32284, 13], "temperature": 0.0, "avg_logprob": -0.17326700687408447, "compression_ratio": 1.2923076923076924, "no_speech_prob": 3.726413297044928e-06}, {"id": 376, "seek": 274200, "start": 2751.0, "end": 2764.0, "text": " And I believe there are, he does have additional tags and stuff that's not shown here to help with the searching.", "tokens": [400, 286, 1697, 456, 366, 11, 415, 775, 362, 4497, 18632, 293, 1507, 300, 311, 406, 4898, 510, 281, 854, 365, 264, 10808, 13], "temperature": 0.0, "avg_logprob": -0.17326700687408447, "compression_ratio": 1.2923076923076924, "no_speech_prob": 3.726413297044928e-06}, {"id": 377, "seek": 274200, "start": 2764.0, "end": 2767.0, "text": " I don't know how good they are.", "tokens": [286, 500, 380, 458, 577, 665, 436, 366, 13], "temperature": 0.0, "avg_logprob": -0.17326700687408447, "compression_ratio": 1.2923076923076924, "no_speech_prob": 3.726413297044928e-06}, {"id": 378, "seek": 276700, "start": 2767.0, "end": 2772.0, "text": " Non diagonal matrix of shape of matrix.", "tokens": [8774, 21539, 8141, 295, 3909, 295, 8141, 13], "temperature": 0.0, "avg_logprob": -0.24712704503258995, "compression_ratio": 1.345132743362832, "no_speech_prob": 1.2218803021823987e-05}, {"id": 379, "seek": 276700, "start": 2772.0, "end": 2785.0, "text": " So if I copy this and saying at the top that what each thing is, m is a matrix and capital N is a numeric array.", "tokens": [407, 498, 286, 5055, 341, 293, 1566, 412, 264, 1192, 300, 437, 1184, 551, 307, 11, 275, 307, 257, 8141, 293, 4238, 426, 307, 257, 7866, 299, 10225, 13], "temperature": 0.0, "avg_logprob": -0.24712704503258995, "compression_ratio": 1.345132743362832, "no_speech_prob": 1.2218803021823987e-05}, {"id": 380, "seek": 278500, "start": 2785.0, "end": 2798.0, "text": " So this is saying it's a numeric array, which is a matrix, I guess. So I guess that means in theory, we could type match here.", "tokens": [407, 341, 307, 1566, 309, 311, 257, 7866, 299, 10225, 11, 597, 307, 257, 8141, 11, 286, 2041, 13, 407, 286, 2041, 300, 1355, 294, 5261, 11, 321, 727, 2010, 2995, 510, 13], "temperature": 0.0, "avg_logprob": -0.185060436661179, "compression_ratio": 1.2115384615384615, "no_speech_prob": 5.254888947092695e-06}, {"id": 381, "seek": 279800, "start": 2798.0, "end": 2827.0, "text": " We can. Okay.", "tokens": [492, 393, 13, 1033, 13], "temperature": 0.0, "avg_logprob": -0.22211331791347927, "compression_ratio": 0.6190476190476191, "no_speech_prob": 0.00010707487672334537}, {"id": 382, "seek": 282700, "start": 2827.0, "end": 2835.0, "text": " This is.", "tokens": [639, 307, 13], "temperature": 0.0, "avg_logprob": -0.23696906566619874, "compression_ratio": 1.0, "no_speech_prob": 3.2687672501197085e-05}, {"id": 383, "seek": 282700, "start": 2835.0, "end": 2845.0, "text": " Okay, this is the H, which is flipped.", "tokens": [1033, 11, 341, 307, 264, 389, 11, 597, 307, 26273, 13], "temperature": 0.0, "avg_logprob": -0.23696906566619874, "compression_ratio": 1.0, "no_speech_prob": 3.2687672501197085e-05}, {"id": 384, "seek": 284500, "start": 2845.0, "end": 2857.0, "text": " Okay, I'm going to try to do this just now. All right.", "tokens": [1033, 11, 286, 478, 516, 281, 853, 281, 360, 341, 445, 586, 13, 1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.17988825817497409, "compression_ratio": 1.3247863247863247, "no_speech_prob": 2.668683919182513e-05}, {"id": 385, "seek": 284500, "start": 2857.0, "end": 2865.0, "text": " I see slash bar and slope bar a lot. I didn't know this is called slope. I always call it backslash.", "tokens": [286, 536, 17330, 2159, 293, 13525, 2159, 257, 688, 13, 286, 994, 380, 458, 341, 307, 1219, 13525, 13, 286, 1009, 818, 309, 646, 10418, 1299, 13], "temperature": 0.0, "avg_logprob": -0.17988825817497409, "compression_ratio": 1.3247863247863247, "no_speech_prob": 2.668683919182513e-05}, {"id": 386, "seek": 286500, "start": 2865.0, "end": 2878.0, "text": " And I have no idea what they are. So maybe we should learn.", "tokens": [400, 286, 362, 572, 1558, 437, 436, 366, 13, 407, 1310, 321, 820, 1466, 13], "temperature": 0.0, "avg_logprob": -0.14304959774017334, "compression_ratio": 1.1724137931034482, "no_speech_prob": 9.818151738727465e-06}, {"id": 387, "seek": 286500, "start": 2878.0, "end": 2886.0, "text": " It says operator. It's a monadic operator.", "tokens": [467, 1619, 12973, 13, 467, 311, 257, 1108, 43341, 12973, 13], "temperature": 0.0, "avg_logprob": -0.14304959774017334, "compression_ratio": 1.1724137931034482, "no_speech_prob": 9.818151738727465e-06}, {"id": 388, "seek": 288600, "start": 2886.0, "end": 2905.0, "text": " And we type it.", "tokens": [400, 321, 2010, 309, 13], "temperature": 0.0, "avg_logprob": -0.2736300097571479, "compression_ratio": 0.6521739130434783, "no_speech_prob": 2.482466925357585e-06}, {"id": 389, "seek": 290500, "start": 2905.0, "end": 2916.0, "text": " And this is called replicate first. No, it's called reduce first.", "tokens": [400, 341, 307, 1219, 25356, 700, 13, 883, 11, 309, 311, 1219, 5407, 700, 13], "temperature": 0.0, "avg_logprob": -0.09821087435672157, "compression_ratio": 1.1607142857142858, "no_speech_prob": 3.1380773179989774e-06}, {"id": 390, "seek": 291600, "start": 2916.0, "end": 2945.0, "text": " My daughter wants me again. Sorry.", "tokens": [1222, 4653, 2738, 385, 797, 13, 4919, 13], "temperature": 0.0, "avg_logprob": -0.21033376455307007, "compression_ratio": 0.8095238095238095, "no_speech_prob": 4.131798050366342e-05}, {"id": 391, "seek": 294500, "start": 2945.0, "end": 2947.0, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.19084770029241388, "compression_ratio": 1.2410714285714286, "no_speech_prob": 1.3841122381563764e-05}, {"id": 392, "seek": 294500, "start": 2947.0, "end": 2959.0, "text": " So if you do the sum plus slash and a matrix versus this one, one will some column wires and one will some row wise.", "tokens": [407, 498, 291, 360, 264, 2408, 1804, 17330, 293, 257, 8141, 5717, 341, 472, 11, 472, 486, 512, 7738, 15537, 293, 472, 486, 512, 5386, 10829, 13], "temperature": 0.0, "avg_logprob": -0.19084770029241388, "compression_ratio": 1.2410714285714286, "no_speech_prob": 1.3841122381563764e-05}, {"id": 393, "seek": 294500, "start": 2959.0, "end": 2961.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.19084770029241388, "compression_ratio": 1.2410714285714286, "no_speech_prob": 1.3841122381563764e-05}, {"id": 394, "seek": 294500, "start": 2961.0, "end": 2973.0, "text": " Cool.", "tokens": [8561, 13], "temperature": 0.0, "avg_logprob": -0.19084770029241388, "compression_ratio": 1.2410714285714286, "no_speech_prob": 1.3841122381563764e-05}, {"id": 395, "seek": 297300, "start": 2973.0, "end": 2991.0, "text": " And we had a matrix ready to go then.", "tokens": [400, 321, 632, 257, 8141, 1919, 281, 352, 550, 13], "temperature": 0.0, "avg_logprob": -0.16892304787269005, "compression_ratio": 1.0129870129870129, "no_speech_prob": 2.8404609111021273e-05}, {"id": 396, "seek": 297300, "start": 2991.0, "end": 2998.0, "text": " Okay. And is that literally all it does?", "tokens": [1033, 13, 400, 307, 300, 3736, 439, 309, 775, 30], "temperature": 0.0, "avg_logprob": -0.16892304787269005, "compression_ratio": 1.0129870129870129, "no_speech_prob": 2.8404609111021273e-05}, {"id": 397, "seek": 299800, "start": 2998.0, "end": 3011.0, "text": " This is okay. So in J, J has a rank operator, which is actually the double quote sign, where basically you can just always say what access you want to use.", "tokens": [639, 307, 1392, 13, 407, 294, 508, 11, 508, 575, 257, 6181, 12973, 11, 597, 307, 767, 264, 3834, 6513, 1465, 11, 689, 1936, 291, 393, 445, 1009, 584, 437, 2105, 291, 528, 281, 764, 13], "temperature": 0.0, "avg_logprob": -0.16225441040531283, "compression_ratio": 1.6064516129032258, "no_speech_prob": 1.2218452866363805e-05}, {"id": 398, "seek": 299800, "start": 3011.0, "end": 3021.0, "text": " So that would be reduced over the zero access. And that would be reduced over the one access.", "tokens": [407, 300, 576, 312, 9212, 670, 264, 4018, 2105, 13, 400, 300, 576, 312, 9212, 670, 264, 472, 2105, 13], "temperature": 0.0, "avg_logprob": -0.16225441040531283, "compression_ratio": 1.6064516129032258, "no_speech_prob": 1.2218452866363805e-05}, {"id": 399, "seek": 302100, "start": 3021.0, "end": 3031.0, "text": " But I'm not sure if you can do anything quite the same.", "tokens": [583, 286, 478, 406, 988, 498, 291, 393, 360, 1340, 1596, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.05921173095703125, "compression_ratio": 1.2075471698113207, "no_speech_prob": 6.339138053590432e-06}, {"id": 400, "seek": 302100, "start": 3031.0, "end": 3040.0, "text": " There is a thing called rank.", "tokens": [821, 307, 257, 551, 1219, 6181, 13], "temperature": 0.0, "avg_logprob": -0.05921173095703125, "compression_ratio": 1.2075471698113207, "no_speech_prob": 6.339138053590432e-06}, {"id": 401, "seek": 302100, "start": 3040.0, "end": 3044.0, "text": " Maybe we should see how this is different.", "tokens": [2704, 321, 820, 536, 577, 341, 307, 819, 13], "temperature": 0.0, "avg_logprob": -0.05921173095703125, "compression_ratio": 1.2075471698113207, "no_speech_prob": 6.339138053590432e-06}, {"id": 402, "seek": 304400, "start": 3044.0, "end": 3051.0, "text": " So that's this one here.", "tokens": [407, 300, 311, 341, 472, 510, 13], "temperature": 0.0, "avg_logprob": -0.3228726179703422, "compression_ratio": 1.098901098901099, "no_speech_prob": 1.2029196113871876e-05}, {"id": 403, "seek": 304400, "start": 3051.0, "end": 3056.0, "text": " Which is called Jot Tyresis I assume.", "tokens": [3013, 307, 1219, 508, 310, 5569, 495, 271, 286, 6552, 13], "temperature": 0.0, "avg_logprob": -0.3228726179703422, "compression_ratio": 1.098901098901099, "no_speech_prob": 1.2029196113871876e-05}, {"id": 404, "seek": 304400, "start": 3056.0, "end": 3059.0, "text": " J.", "tokens": [508, 13], "temperature": 0.0, "avg_logprob": -0.3228726179703422, "compression_ratio": 1.098901098901099, "no_speech_prob": 1.2029196113871876e-05}, {"id": 405, "seek": 304400, "start": 3059.0, "end": 3061.0, "text": " Help.", "tokens": [10773, 13], "temperature": 0.0, "avg_logprob": -0.3228726179703422, "compression_ratio": 1.098901098901099, "no_speech_prob": 1.2029196113871876e-05}, {"id": 406, "seek": 304400, "start": 3061.0, "end": 3063.0, "text": " J.", "tokens": [508, 13], "temperature": 0.0, "avg_logprob": -0.3228726179703422, "compression_ratio": 1.098901098901099, "no_speech_prob": 1.2029196113871876e-05}, {"id": 407, "seek": 304400, "start": 3063.0, "end": 3068.0, "text": " Shift J.", "tokens": [28304, 508, 13], "temperature": 0.0, "avg_logprob": -0.3228726179703422, "compression_ratio": 1.098901098901099, "no_speech_prob": 1.2029196113871876e-05}, {"id": 408, "seek": 304400, "start": 3068.0, "end": 3073.0, "text": " Classic edition.", "tokens": [25008, 11377, 13], "temperature": 0.0, "avg_logprob": -0.3228726179703422, "compression_ratio": 1.098901098901099, "no_speech_prob": 1.2029196113871876e-05}, {"id": 409, "seek": 307300, "start": 3073.0, "end": 3078.0, "text": " It doesn't have the same like", "tokens": [467, 1177, 380, 362, 264, 912, 411], "temperature": 0.0, "avg_logprob": -0.17296342849731444, "compression_ratio": 0.9866666666666667, "no_speech_prob": 4.029369392810622e-06}, {"id": 410, "seek": 307300, "start": 3078.0, "end": 3085.0, "text": " usual information.", "tokens": [7713, 1589, 13], "temperature": 0.0, "avg_logprob": -0.17296342849731444, "compression_ratio": 0.9866666666666667, "no_speech_prob": 4.029369392810622e-06}, {"id": 411, "seek": 307300, "start": 3085.0, "end": 3097.0, "text": " Anyway, it's called rank.", "tokens": [5684, 11, 309, 311, 1219, 6181, 13], "temperature": 0.0, "avg_logprob": -0.17296342849731444, "compression_ratio": 0.9866666666666667, "no_speech_prob": 4.029369392810622e-06}, {"id": 412, "seek": 309700, "start": 3097.0, "end": 3106.0, "text": " I already forgotten what letter I said. J.", "tokens": [286, 1217, 11832, 437, 5063, 286, 848, 13, 508, 13], "temperature": 0.0, "avg_logprob": -0.18057681189643013, "compression_ratio": 1.1682242990654206, "no_speech_prob": 1.184246411867207e-05}, {"id": 413, "seek": 309700, "start": 3106.0, "end": 3113.0, "text": " I guess this is called Jot Tyresis but I didn't see a thing for it.", "tokens": [286, 2041, 341, 307, 1219, 508, 310, 5569, 495, 271, 457, 286, 994, 380, 536, 257, 551, 337, 309, 13], "temperature": 0.0, "avg_logprob": -0.18057681189643013, "compression_ratio": 1.1682242990654206, "no_speech_prob": 1.184246411867207e-05}, {"id": 414, "seek": 309700, "start": 3113.0, "end": 3116.0, "text": " Monadic.", "tokens": [4713, 43341, 13], "temperature": 0.0, "avg_logprob": -0.18057681189643013, "compression_ratio": 1.1682242990654206, "no_speech_prob": 1.184246411867207e-05}, {"id": 415, "seek": 309700, "start": 3116.0, "end": 3121.0, "text": " Rank.", "tokens": [35921, 13], "temperature": 0.0, "avg_logprob": -0.18057681189643013, "compression_ratio": 1.1682242990654206, "no_speech_prob": 1.184246411867207e-05}, {"id": 416, "seek": 312100, "start": 3121.0, "end": 3134.0, "text": " And if I say", "tokens": [400, 498, 286, 584], "temperature": 0.0, "avg_logprob": -0.3286409378051758, "compression_ratio": 0.6, "no_speech_prob": 2.8849948648712598e-05}, {"id": 417, "seek": 313400, "start": 3134.0, "end": 3151.0, "text": " I'm going to put over this access.", "tokens": [286, 478, 516, 281, 829, 670, 341, 2105, 13], "temperature": 0.0, "avg_logprob": -0.3941430716679014, "compression_ratio": 1.0384615384615385, "no_speech_prob": 3.4463280371710425e-06}, {"id": 418, "seek": 313400, "start": 3151.0, "end": 3154.0, "text": " That might need this.", "tokens": [663, 1062, 643, 341, 13], "temperature": 0.0, "avg_logprob": -0.3941430716679014, "compression_ratio": 1.0384615384615385, "no_speech_prob": 3.4463280371710425e-06}, {"id": 419, "seek": 313400, "start": 3154.0, "end": 3158.0, "text": " Hey look it is the same.", "tokens": [1911, 574, 309, 307, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.3941430716679014, "compression_ratio": 1.0384615384615385, "no_speech_prob": 3.4463280371710425e-06}, {"id": 420, "seek": 315800, "start": 3158.0, "end": 3164.0, "text": " So, wait no that's the same as sum.", "tokens": [407, 11, 1699, 572, 300, 311, 264, 912, 382, 2408, 13], "temperature": 0.0, "avg_logprob": -0.22195918743426984, "compression_ratio": 1.3557046979865772, "no_speech_prob": 1.28047468024306e-05}, {"id": 421, "seek": 315800, "start": 3164.0, "end": 3172.0, "text": " And what if we put a zero.", "tokens": [400, 437, 498, 321, 829, 257, 4018, 13], "temperature": 0.0, "avg_logprob": -0.22195918743426984, "compression_ratio": 1.3557046979865772, "no_speech_prob": 1.28047468024306e-05}, {"id": 422, "seek": 315800, "start": 3172.0, "end": 3176.0, "text": " Okay I don't know what I'm doing.", "tokens": [1033, 286, 500, 380, 458, 437, 286, 478, 884, 13], "temperature": 0.0, "avg_logprob": -0.22195918743426984, "compression_ratio": 1.3557046979865772, "no_speech_prob": 1.28047468024306e-05}, {"id": 423, "seek": 315800, "start": 3176.0, "end": 3182.0, "text": " Let's come back to that one and make sure we. Okay so it sounds like slash bar there's not much to learn.", "tokens": [961, 311, 808, 646, 281, 300, 472, 293, 652, 988, 321, 13, 1033, 370, 309, 3263, 411, 17330, 2159, 456, 311, 406, 709, 281, 1466, 13], "temperature": 0.0, "avg_logprob": -0.22195918743426984, "compression_ratio": 1.3557046979865772, "no_speech_prob": 1.28047468024306e-05}, {"id": 424, "seek": 318200, "start": 3182.0, "end": 3189.0, "text": " It's just the same as slash but it does it over a different access.", "tokens": [467, 311, 445, 264, 912, 382, 17330, 457, 309, 775, 309, 670, 257, 819, 2105, 13], "temperature": 0.0, "avg_logprob": -0.109389743289432, "compression_ratio": 1.25, "no_speech_prob": 4.2638763261493295e-05}, {"id": 425, "seek": 318200, "start": 3189.0, "end": 3206.0, "text": " Which I assume is going to be the same for backslash bar.", "tokens": [3013, 286, 6552, 307, 516, 281, 312, 264, 912, 337, 646, 10418, 1299, 2159, 13], "temperature": 0.0, "avg_logprob": -0.109389743289432, "compression_ratio": 1.25, "no_speech_prob": 4.2638763261493295e-05}, {"id": 426, "seek": 320600, "start": 3206.0, "end": 3215.0, "text": " Except they didn't call it backslash they called it slope.", "tokens": [16192, 436, 994, 380, 818, 309, 646, 10418, 1299, 436, 1219, 309, 13525, 13], "temperature": 0.0, "avg_logprob": -0.2096487045288086, "compression_ratio": 1.3525179856115108, "no_speech_prob": 4.092738890904002e-06}, {"id": 427, "seek": 320600, "start": 3215.0, "end": 3222.0, "text": " And that's probably going to be backslash I'm guessing.", "tokens": [400, 300, 311, 1391, 516, 281, 312, 646, 10418, 1299, 286, 478, 17939, 13], "temperature": 0.0, "avg_logprob": -0.2096487045288086, "compression_ratio": 1.3525179856115108, "no_speech_prob": 4.092738890904002e-06}, {"id": 428, "seek": 320600, "start": 3222.0, "end": 3224.0, "text": " Nope it's not.", "tokens": [12172, 309, 311, 406, 13], "temperature": 0.0, "avg_logprob": -0.2096487045288086, "compression_ratio": 1.3525179856115108, "no_speech_prob": 4.092738890904002e-06}, {"id": 429, "seek": 320600, "start": 3224.0, "end": 3228.0, "text": " Okay so we can we can specify the access.", "tokens": [1033, 370, 321, 393, 321, 393, 16500, 264, 2105, 13], "temperature": 0.0, "avg_logprob": -0.2096487045288086, "compression_ratio": 1.3525179856115108, "no_speech_prob": 4.092738890904002e-06}, {"id": 430, "seek": 320600, "start": 3228.0, "end": 3231.0, "text": " Plus slash. Yep.", "tokens": [7721, 17330, 13, 7010, 13], "temperature": 0.0, "avg_logprob": -0.2096487045288086, "compression_ratio": 1.3525179856115108, "no_speech_prob": 4.092738890904002e-06}, {"id": 431, "seek": 323100, "start": 3231.0, "end": 3237.0, "text": " By adding like bracket one, right after the operator.", "tokens": [3146, 5127, 411, 16904, 472, 11, 558, 934, 264, 12973, 13], "temperature": 0.0, "avg_logprob": -0.2491822098240708, "compression_ratio": 1.535031847133758, "no_speech_prob": 1.9946937754866667e-06}, {"id": 432, "seek": 323100, "start": 3237.0, "end": 3242.0, "text": " I believe and then bracket.", "tokens": [286, 1697, 293, 550, 16904, 13], "temperature": 0.0, "avg_logprob": -0.2491822098240708, "compression_ratio": 1.535031847133758, "no_speech_prob": 1.9946937754866667e-06}, {"id": 433, "seek": 323100, "start": 3242.0, "end": 3244.0, "text": " Like that.", "tokens": [1743, 300, 13], "temperature": 0.0, "avg_logprob": -0.2491822098240708, "compression_ratio": 1.535031847133758, "no_speech_prob": 1.9946937754866667e-06}, {"id": 434, "seek": 323100, "start": 3244.0, "end": 3248.0, "text": " No square brackets immediately after the operator.", "tokens": [883, 3732, 26179, 4258, 934, 264, 12973, 13], "temperature": 0.0, "avg_logprob": -0.2491822098240708, "compression_ratio": 1.535031847133758, "no_speech_prob": 1.9946937754866667e-06}, {"id": 435, "seek": 323100, "start": 3248.0, "end": 3251.0, "text": " So, just like that.", "tokens": [407, 11, 445, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.2491822098240708, "compression_ratio": 1.535031847133758, "no_speech_prob": 1.9946937754866667e-06}, {"id": 436, "seek": 323100, "start": 3251.0, "end": 3254.0, "text": " Okay so.", "tokens": [1033, 370, 13], "temperature": 0.0, "avg_logprob": -0.2491822098240708, "compression_ratio": 1.535031847133758, "no_speech_prob": 1.9946937754866667e-06}, {"id": 437, "seek": 323100, "start": 3254.0, "end": 3260.0, "text": " Does that apply for like everything or is that just this particular.", "tokens": [4402, 300, 3079, 337, 411, 1203, 420, 307, 300, 445, 341, 1729, 13], "temperature": 0.0, "avg_logprob": -0.2491822098240708, "compression_ratio": 1.535031847133758, "no_speech_prob": 1.9946937754866667e-06}, {"id": 438, "seek": 326000, "start": 3260.0, "end": 3264.0, "text": " I feel like I've seen that mentioned in the docs.", "tokens": [286, 841, 411, 286, 600, 1612, 300, 2835, 294, 264, 45623, 13], "temperature": 0.0, "avg_logprob": -0.22939671410454643, "compression_ratio": 1.5128205128205128, "no_speech_prob": 1.2410803719831165e-05}, {"id": 439, "seek": 326000, "start": 3264.0, "end": 3267.0, "text": " Yeah, it's called a function access.", "tokens": [865, 11, 309, 311, 1219, 257, 2445, 2105, 13], "temperature": 0.0, "avg_logprob": -0.22939671410454643, "compression_ratio": 1.5128205128205128, "no_speech_prob": 1.2410803719831165e-05}, {"id": 440, "seek": 326000, "start": 3267.0, "end": 3272.0, "text": " This is like operators like to you can you put it on all functions or.", "tokens": [639, 307, 411, 19077, 411, 281, 291, 393, 291, 829, 309, 322, 439, 6828, 420, 13], "temperature": 0.0, "avg_logprob": -0.22939671410454643, "compression_ratio": 1.5128205128205128, "no_speech_prob": 1.2410803719831165e-05}, {"id": 441, "seek": 326000, "start": 3272.0, "end": 3275.0, "text": " I think it's all functions.", "tokens": [286, 519, 309, 311, 439, 6828, 13], "temperature": 0.0, "avg_logprob": -0.22939671410454643, "compression_ratio": 1.5128205128205128, "no_speech_prob": 1.2410803719831165e-05}, {"id": 442, "seek": 326000, "start": 3275.0, "end": 3279.0, "text": " Okay so why on earth do we need.", "tokens": [1033, 370, 983, 322, 4120, 360, 321, 643, 13], "temperature": 0.0, "avg_logprob": -0.22939671410454643, "compression_ratio": 1.5128205128205128, "no_speech_prob": 1.2410803719831165e-05}, {"id": 443, "seek": 326000, "start": 3279.0, "end": 3285.0, "text": " Slash bar access.", "tokens": [6187, 1299, 2159, 2105, 13], "temperature": 0.0, "avg_logprob": -0.22939671410454643, "compression_ratio": 1.5128205128205128, "no_speech_prob": 1.2410803719831165e-05}, {"id": 444, "seek": 328500, "start": 3285.0, "end": 3299.0, "text": " This is what I was looking at here.", "tokens": [639, 307, 437, 286, 390, 1237, 412, 510, 13], "temperature": 0.0, "avg_logprob": -0.2231192796126656, "compression_ratio": 1.2538461538461538, "no_speech_prob": 4.8603073992126156e-06}, {"id": 445, "seek": 328500, "start": 3299.0, "end": 3305.0, "text": " F must be a monadic primitive mixed function taken from these.", "tokens": [479, 1633, 312, 257, 1108, 43341, 28540, 7467, 2445, 2726, 490, 613, 13], "temperature": 0.0, "avg_logprob": -0.2231192796126656, "compression_ratio": 1.2538461538461538, "no_speech_prob": 4.8603073992126156e-06}, {"id": 446, "seek": 328500, "start": 3305.0, "end": 3310.0, "text": " Or a function okay I can't apply to many things it's just slash.", "tokens": [1610, 257, 2445, 1392, 286, 393, 380, 3079, 281, 867, 721, 309, 311, 445, 17330, 13], "temperature": 0.0, "avg_logprob": -0.2231192796126656, "compression_ratio": 1.2538461538461538, "no_speech_prob": 4.8603073992126156e-06}, {"id": 447, "seek": 331000, "start": 3310.0, "end": 3319.0, "text": " Or slope or these.", "tokens": [1610, 13525, 420, 613, 13], "temperature": 0.0, "avg_logprob": -0.21778196607317243, "compression_ratio": 1.1263157894736842, "no_speech_prob": 1.5206090210995171e-05}, {"id": 448, "seek": 331000, "start": 3319.0, "end": 3326.0, "text": " I wonder why there's a bunch of.", "tokens": [286, 2441, 983, 456, 311, 257, 3840, 295, 13], "temperature": 0.0, "avg_logprob": -0.21778196607317243, "compression_ratio": 1.1263157894736842, "no_speech_prob": 1.5206090210995171e-05}, {"id": 449, "seek": 331000, "start": 3326.0, "end": 3336.0, "text": " And then you've also got access with diet a copper and.", "tokens": [400, 550, 291, 600, 611, 658, 2105, 365, 6339, 257, 15007, 293, 13], "temperature": 0.0, "avg_logprob": -0.21778196607317243, "compression_ratio": 1.1263157894736842, "no_speech_prob": 1.5206090210995171e-05}, {"id": 450, "seek": 333600, "start": 3336.0, "end": 3341.0, "text": " It must be a dietic primitive scalar function.", "tokens": [467, 1633, 312, 257, 6339, 299, 28540, 39684, 2445, 13], "temperature": 0.0, "avg_logprob": -0.23436853160028873, "compression_ratio": 1.6176470588235294, "no_speech_prob": 1.593615161255002e-05}, {"id": 451, "seek": 333600, "start": 3341.0, "end": 3347.0, "text": " Oh well that's good so any dietic scalar function primitive scope.", "tokens": [876, 731, 300, 311, 665, 370, 604, 6339, 299, 39684, 2445, 28540, 11923, 13], "temperature": 0.0, "avg_logprob": -0.23436853160028873, "compression_ratio": 1.6176470588235294, "no_speech_prob": 1.593615161255002e-05}, {"id": 452, "seek": 333600, "start": 3347.0, "end": 3355.0, "text": " Or a mixed function which I see means one with an operator, where they've used one of these. Okay so actually does sound like you can do a lot of things with it.", "tokens": [1610, 257, 7467, 2445, 597, 286, 536, 1355, 472, 365, 364, 12973, 11, 689, 436, 600, 1143, 472, 295, 613, 13, 1033, 370, 767, 775, 1626, 411, 291, 393, 360, 257, 688, 295, 721, 365, 309, 13], "temperature": 0.0, "avg_logprob": -0.23436853160028873, "compression_ratio": 1.6176470588235294, "no_speech_prob": 1.593615161255002e-05}, {"id": 453, "seek": 335500, "start": 3355.0, "end": 3366.0, "text": " That's good. Yeah, there's a, there's a wiki I put on the chat about the function access specifically and kind of covers both.", "tokens": [663, 311, 665, 13, 865, 11, 456, 311, 257, 11, 456, 311, 257, 261, 9850, 286, 829, 322, 264, 5081, 466, 264, 2445, 2105, 4682, 293, 733, 295, 10538, 1293, 13], "temperature": 0.0, "avg_logprob": -0.19351434054440014, "compression_ratio": 1.521505376344086, "no_speech_prob": 1.9220567992306314e-05}, {"id": 454, "seek": 335500, "start": 3366.0, "end": 3378.0, "text": " Okay, cool. I see a few other people have missed them all chat by the way, is there anything we wanted to talk about or ask about anybody wants to speak up.", "tokens": [1033, 11, 1627, 13, 286, 536, 257, 1326, 661, 561, 362, 6721, 552, 439, 5081, 538, 264, 636, 11, 307, 456, 1340, 321, 1415, 281, 751, 466, 420, 1029, 466, 4472, 2738, 281, 1710, 493, 13], "temperature": 0.0, "avg_logprob": -0.19351434054440014, "compression_ratio": 1.521505376344086, "no_speech_prob": 1.9220567992306314e-05}, {"id": 455, "seek": 337800, "start": 3378.0, "end": 3385.0, "text": " Function access.", "tokens": [11166, 882, 2105, 13], "temperature": 0.0, "avg_logprob": -0.18555110295613605, "compression_ratio": 1.375796178343949, "no_speech_prob": 1.777622128429357e-05}, {"id": 456, "seek": 337800, "start": 3385.0, "end": 3393.0, "text": " Mine was was not specifically related to the content we were discussing so didn't want to bring it up. Oh no please do.", "tokens": [11620, 390, 390, 406, 4682, 4077, 281, 264, 2701, 321, 645, 10850, 370, 994, 380, 528, 281, 1565, 309, 493, 13, 876, 572, 1767, 360, 13], "temperature": 0.0, "avg_logprob": -0.18555110295613605, "compression_ratio": 1.375796178343949, "no_speech_prob": 1.777622128429357e-05}, {"id": 457, "seek": 337800, "start": 3393.0, "end": 3400.0, "text": " We're so like not at all focused Molly, as you'll see. This is just like, yeah.", "tokens": [492, 434, 370, 411, 406, 412, 439, 5178, 26665, 11, 382, 291, 603, 536, 13, 639, 307, 445, 411, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.18555110295613605, "compression_ratio": 1.375796178343949, "no_speech_prob": 1.777622128429357e-05}, {"id": 458, "seek": 340000, "start": 3400.0, "end": 3414.0, "text": " Whatever seems interesting. And formula is definitely interesting. Oh yeah so I came first I first came across the formula in a paper that I was reading on positional embeddings.", "tokens": [8541, 2544, 1880, 13, 400, 8513, 307, 2138, 1880, 13, 876, 1338, 370, 286, 1361, 700, 286, 700, 1361, 2108, 264, 8513, 294, 257, 3035, 300, 286, 390, 3760, 322, 2535, 304, 12240, 29432, 13], "temperature": 0.0, "avg_logprob": -0.21568452306540617, "compression_ratio": 1.6908212560386473, "no_speech_prob": 1.1477812222437933e-05}, {"id": 459, "seek": 340000, "start": 3414.0, "end": 3422.0, "text": " Um, so I had no idea what it was. I actually use this to figure out the fundamentals I was missing.", "tokens": [3301, 11, 370, 286, 632, 572, 1558, 437, 309, 390, 13, 286, 767, 764, 341, 281, 2573, 484, 264, 29505, 286, 390, 5361, 13], "temperature": 0.0, "avg_logprob": -0.21568452306540617, "compression_ratio": 1.6908212560386473, "no_speech_prob": 1.1477812222437933e-05}, {"id": 460, "seek": 340000, "start": 3422.0, "end": 3428.0, "text": " Yeah, it was rotational positional embeddings what it was called. Okay.", "tokens": [865, 11, 309, 390, 45420, 2535, 304, 12240, 29432, 437, 309, 390, 1219, 13, 1033, 13], "temperature": 0.0, "avg_logprob": -0.21568452306540617, "compression_ratio": 1.6908212560386473, "no_speech_prob": 1.1477812222437933e-05}, {"id": 461, "seek": 342800, "start": 3428.0, "end": 3444.0, "text": " So, for those of you who are interested in transformer models. There's like literally no sense of like the order of things in a vector. And so it's like literally impossible for it to learn anything that requires order and language is ordered.", "tokens": [407, 11, 337, 729, 295, 291, 567, 366, 3102, 294, 31782, 5245, 13, 821, 311, 411, 3736, 572, 2020, 295, 411, 264, 1668, 295, 721, 294, 257, 8062, 13, 400, 370, 309, 311, 411, 3736, 6243, 337, 309, 281, 1466, 1340, 300, 7029, 1668, 293, 2856, 307, 8866, 13], "temperature": 0.0, "avg_logprob": -0.16670769820978612, "compression_ratio": 1.6650485436893203, "no_speech_prob": 1.0129566362593323e-05}, {"id": 462, "seek": 342800, "start": 3444.0, "end": 3449.0, "text": " So we use these things called positional embeddings.", "tokens": [407, 321, 764, 613, 721, 1219, 2535, 304, 12240, 29432, 13], "temperature": 0.0, "avg_logprob": -0.16670769820978612, "compression_ratio": 1.6650485436893203, "no_speech_prob": 1.0129566362593323e-05}, {"id": 463, "seek": 342800, "start": 3449.0, "end": 3451.0, "text": " Is it this rotary position.", "tokens": [1119, 309, 341, 45811, 2535, 13], "temperature": 0.0, "avg_logprob": -0.16670769820978612, "compression_ratio": 1.6650485436893203, "no_speech_prob": 1.0129566362593323e-05}, {"id": 464, "seek": 342800, "start": 3451.0, "end": 3453.0, "text": " Rotary positional.", "tokens": [17681, 822, 2535, 304, 13], "temperature": 0.0, "avg_logprob": -0.16670769820978612, "compression_ratio": 1.6650485436893203, "no_speech_prob": 1.0129566362593323e-05}, {"id": 465, "seek": 345300, "start": 3453.0, "end": 3466.0, "text": " Rotary positional. It's been a while. Yes, that's it. And then there's a proof. Yeah, this was the actual proof I was going through, trying to figure out what they were talking about.", "tokens": [17681, 822, 2535, 304, 13, 467, 311, 668, 257, 1339, 13, 1079, 11, 300, 311, 309, 13, 400, 550, 456, 311, 257, 8177, 13, 865, 11, 341, 390, 264, 3539, 8177, 286, 390, 516, 807, 11, 1382, 281, 2573, 484, 437, 436, 645, 1417, 466, 13], "temperature": 0.0, "avg_logprob": -0.19545974731445312, "compression_ratio": 1.39568345323741, "no_speech_prob": 3.1198673241306096e-05}, {"id": 466, "seek": 345300, "start": 3466.0, "end": 3468.0, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.19545974731445312, "compression_ratio": 1.39568345323741, "no_speech_prob": 3.1198673241306096e-05}, {"id": 467, "seek": 346800, "start": 3468.0, "end": 3483.0, "text": " Yeah. And then I was missing a lot of the fundamentals so I just go down to where they're doing the actual proof. And then you can just click on the very whatever you do not understand like the proof for what you don't understand.", "tokens": [865, 13, 400, 550, 286, 390, 5361, 257, 688, 295, 264, 29505, 370, 286, 445, 352, 760, 281, 689, 436, 434, 884, 264, 3539, 8177, 13, 400, 550, 291, 393, 445, 2052, 322, 264, 588, 2035, 291, 360, 406, 1223, 411, 264, 8177, 337, 437, 291, 500, 380, 1223, 13], "temperature": 0.0, "avg_logprob": -0.0977866890725125, "compression_ratio": 1.8148148148148149, "no_speech_prob": 1.428403083991725e-05}, {"id": 468, "seek": 346800, "start": 3483.0, "end": 3493.0, "text": " So if you don't understand complex cosine, like how they are able to get the complex cosine function and it's not like infinite you don't find yourself clicking.", "tokens": [407, 498, 291, 500, 380, 1223, 3997, 23565, 11, 411, 577, 436, 366, 1075, 281, 483, 264, 3997, 23565, 2445, 293, 309, 311, 406, 411, 13785, 291, 500, 380, 915, 1803, 9697, 13], "temperature": 0.0, "avg_logprob": -0.0977866890725125, "compression_ratio": 1.8148148148148149, "no_speech_prob": 1.428403083991725e-05}, {"id": 469, "seek": 349300, "start": 3493.0, "end": 3498.0, "text": " I'm going to have to come back to where you started.", "tokens": [286, 478, 516, 281, 362, 281, 808, 646, 281, 689, 291, 1409, 13], "temperature": 0.0, "avg_logprob": -0.24059263865152994, "compression_ratio": 1.4, "no_speech_prob": 9.367931852466427e-06}, {"id": 470, "seek": 349300, "start": 3498.0, "end": 3502.0, "text": " Somewhat that can happen.", "tokens": [2188, 5479, 300, 393, 1051, 13], "temperature": 0.0, "avg_logprob": -0.24059263865152994, "compression_ratio": 1.4, "no_speech_prob": 9.367931852466427e-06}, {"id": 471, "seek": 349300, "start": 3502.0, "end": 3504.0, "text": " But yeah.", "tokens": [583, 1338, 13], "temperature": 0.0, "avg_logprob": -0.24059263865152994, "compression_ratio": 1.4, "no_speech_prob": 9.367931852466427e-06}, {"id": 472, "seek": 349300, "start": 3504.0, "end": 3514.0, "text": " And then I just start looking up the various things they're talking about here until I understand it so okay. Yeah, that's cool.", "tokens": [400, 550, 286, 445, 722, 1237, 493, 264, 3683, 721, 436, 434, 1417, 466, 510, 1826, 286, 1223, 309, 370, 1392, 13, 865, 11, 300, 311, 1627, 13], "temperature": 0.0, "avg_logprob": -0.24059263865152994, "compression_ratio": 1.4, "no_speech_prob": 9.367931852466427e-06}, {"id": 473, "seek": 351400, "start": 3514.0, "end": 3523.0, "text": " That's just one way I was able to understand papers like the math behind papers and stuff. So, thanks.", "tokens": [663, 311, 445, 472, 636, 286, 390, 1075, 281, 1223, 10577, 411, 264, 5221, 2261, 10577, 293, 1507, 13, 407, 11, 3231, 13], "temperature": 0.0, "avg_logprob": -0.2075874178033126, "compression_ratio": 1.2095238095238094, "no_speech_prob": 6.539507467095973e-06}, {"id": 474, "seek": 351400, "start": 3523.0, "end": 3526.0, "text": " That's great.", "tokens": [663, 311, 869, 13], "temperature": 0.0, "avg_logprob": -0.2075874178033126, "compression_ratio": 1.2095238095238094, "no_speech_prob": 6.539507467095973e-06}, {"id": 475, "seek": 351400, "start": 3526.0, "end": 3528.0, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.2075874178033126, "compression_ratio": 1.2095238095238094, "no_speech_prob": 6.539507467095973e-06}, {"id": 476, "seek": 352800, "start": 3528.0, "end": 3548.0, "text": " And probably talk about access.", "tokens": [400, 1391, 751, 466, 2105, 13], "temperature": 0.0, "avg_logprob": -0.24912054538726808, "compression_ratio": 0.7948717948717948, "no_speech_prob": 4.681073914980516e-05}, {"id": 477, "seek": 354800, "start": 3548.0, "end": 3564.0, "text": " Something's going to be there. I just put a number.", "tokens": [6595, 311, 516, 281, 312, 456, 13, 286, 445, 829, 257, 1230, 13], "temperature": 0.0, "avg_logprob": -0.2704956266615126, "compression_ratio": 1.211111111111111, "no_speech_prob": 1.045026601786958e-05}, {"id": 478, "seek": 354800, "start": 3564.0, "end": 3571.0, "text": " We can do that next time.", "tokens": [492, 393, 360, 300, 958, 565, 13], "temperature": 0.0, "avg_logprob": -0.2704956266615126, "compression_ratio": 1.211111111111111, "no_speech_prob": 1.045026601786958e-05}, {"id": 479, "seek": 354800, "start": 3571.0, "end": 3573.0, "text": " That's going to be super handy.", "tokens": [663, 311, 516, 281, 312, 1687, 13239, 13], "temperature": 0.0, "avg_logprob": -0.2704956266615126, "compression_ratio": 1.211111111111111, "no_speech_prob": 1.045026601786958e-05}, {"id": 480, "seek": 357300, "start": 3573.0, "end": 3578.0, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.3145873546600342, "compression_ratio": 0.8666666666666667, "no_speech_prob": 6.100419705035165e-05}, {"id": 481, "seek": 357300, "start": 3578.0, "end": 3580.0, "text": " Thanks everybody.", "tokens": [2561, 2201, 13], "temperature": 0.0, "avg_logprob": -0.3145873546600342, "compression_ratio": 0.8666666666666667, "no_speech_prob": 6.100419705035165e-05}, {"id": 482, "seek": 357300, "start": 3580.0, "end": 3582.0, "text": " See you next time.", "tokens": [3008, 291, 958, 565, 13], "temperature": 0.0, "avg_logprob": -0.3145873546600342, "compression_ratio": 0.8666666666666667, "no_speech_prob": 6.100419705035165e-05}, {"id": 483, "seek": 358200, "start": 3582.0, "end": 3610.0, "text": " Bye.", "tokens": [50364, 4621, 13, 51764], "temperature": 0.0, "avg_logprob": -0.6962813854217529, "compression_ratio": 0.3333333333333333, "no_speech_prob": 0.000440384988905862}], "language": "en"}