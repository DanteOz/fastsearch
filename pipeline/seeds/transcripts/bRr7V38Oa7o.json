{"text": " Hello. Hi. How are you doing? Good, how are you? Pretty good. Always look forward to APL time. Nice. Hi, Wasim. Hi, Surada. Hello. I want to say hi to Joao, but I don't know how to pronounce his name. That's good enough. It's Joao. Joao. That's good. What country is that name from? It's Portuguese. I'm Brazilian. Okay. Great. Yeah, I came here because of a recast. So, I mean, if I had known that you're having these meetings open, I would have come anyway. Welcome. Thanks for joining. Hi, Redick. How are you? I don't hear you. All right. Let's start. Anybody got anything they wanted to mention or talk about? Hopefully Redick doesn't because his microphone's not working. You can use sign language or chat or something, I suppose. I was really worried that I maybe had to do a little bit of a presentation. I was really worried that I maybe I missed a, maybe I missed a lesson or something, but apparently there wasn't any. So. I was talking to JJ. We were doing a. I was talking to JJ. I decided to do a two way, ask me anything with him. And that was, I scheduled it for. Like two hours before our. Time. And then we ended up going for such a long time. Didn't really. Yeah. I was late enough that I then thought, okay. I. I may as well cancel it. Otherwise people might have come and gone and then they'd miss out. It's like, you know, whatever. You know, I have a question for you. I guess we do hear you. Hello. Oh, you can hear me. Oh, wow. Okay. Did you press red? I don't know. Just started to work. The logic continues to surprise me. But I just wanted to second what the techniques said. I was also worried that I missed a, you know, a session because I couldn't come here on Friday. I was like, I'm going to miss it. So I just wanted to ask you, I think it would be also a. You know, and a. Interview with you or like. To look forward to that. That is, that is what a way to start the Tuesday. I sent Hamel. I sent Hamel. You know, a preview of the interview. And he said he really enjoyed it. So hopefully people like it. Cool. I'm going to share my screen. So. Couple of things on the forum. So, Adam, who has been. Apparently. Writing APL since pretty much as long as you. Could read or talk or something. Pointed out that. The way I'm doing operators is not. Quite right. Which I was kind of aware of, but I was. Hand waving over, which I. Agree, I should not be. Let me show you what I mean. So operators. The issue is that operators themselves can be monadic or dietic. So monadic operator. Means that you just have a. Function on the left of it. Whereas a dietic operator would have a function on the left and the right. Not necessarily could be a function or an array on the left and the right. And return a function. The functions that. These operators return regardless of their monadic or dietic operators can themselves be monadic or dietic functions. I guess I should also say it could be. I don't know if people would say ambivalent or ambivalent. Ambivalent sounds like they don't care to me. But anyway, ambivalent meaning two valences that could be dietic or monadic. So if we look at the help, for example. They do point this out in the documentation. So operator slash. So this is operator slash. So this is the function being returned, which is monadic. And then I know Serada asked about this and why is reduced. Is this a dietic version or something? No, it's not. This is something else. Slash is a monadic operator. With a dietic operand. Oh, OK. So the thing that it takes is dietic and it returns. OK, so this one only returns a monadic function. So what is N wise reduced? How is this different to. Oh, no, this is dietic. This is the dietic function version. OK. We don't hear you, Serada. Even though I can see. Is it OK? I hear you now. Oh, no, just the documentation very intimidating and I can't distinguish what is the difference between reduce and reduce N wise. OK. Well, in that case, this is a perfect example. Because I don't know either, but I can see from here that it's a monadic versus a dietic function. So what we could do is we could go all the way down to a fifth level heading here and say monadic function. And then. You could have. Dietic function. OK, the monadic function is called reduce. OK, which means we can't put the name up here anymore. Well, maybe I should put both reduce slash reduce and wise. And how they write it and wise, which is. Copy that. Dietic function. And why is it? OK, and so then. All right, OK, so I for we know what that is. All right, what's this doing? So this is. Three. If you have some more examples, let me know if anybody figures out what this is doing. So Windows some it seems one, two, three, two, three, four windows is three. Oh, so this is a. Yeah, so it's kind of chunking it. And then adding it. OK, that makes sense. So you've got. Oh, no, it's not chunking it. I see. So we've got the numbers one to four. So it's adding the first. Oh, it's doing it's kind of like a moving average. Right. So if I did. We do it. We do some windowed some. Yes, exactly. So if I did three divided into. Turn on my keyboard. Three divided into what's the swap thing again? Yes. So that would be like, yeah, that's like a moving average now. Right. The average of one, two, three, the average of two, three, four. There's probably a better way to write that, but it's. And then lamp is. Moving average. OK. Windowed some. Put it here. What does this do if you pass an array as the alpha argument, like three, four or something? Your microphone is so loud, it's kind of like distorting. I don't know if there's a way to like move it away from your mouth or change it. Volume or something. Sorry, that was two. That was three. That is better. That's actually almost too quiet, but that's that's not going to drive me quite so crazy yet. Oh, I was wondering what, you know, this does if you pass an array as the alpha argument, like three, four. Oh, that's a good question. On a raise up. Let's find out. Average. Two. Yeah, they don't like it. The docs AX must be a simple scalar or one item integer array. OK, well, I don't know what's the distinction between a simple scalar and an item integer array. I mean, one thing I did want to do today or soon is something that Adam suggested, which is to look at the rank operator, which would allow us to deal with this nicely. But for now, let's put that aside. OK, yeah, so this one just is doing a sum of single things, which is not very useful. OK, identity element. This is kind of interesting, actually more of a mathematical or computer science idea, but I think we should keep it because that's part of what we're learning about is the idea of the identity element for an operation. So. So basically this is like if you want to. Start with a number and then add things to it, then starting with zero is the number you would want to start at to get the right answer. Zero plus a bunch of things gives you the addition of a bunch of things that for multiply. That's not true to multiply. You have to start with the number one. And so, yeah, so APL seems to know what the identity element, at least for these operations is. That's interesting. So is that flipping the window when the scaler is negative? Where the switch, sorry, where's the scalar negative? Oh, the last one? Yeah, yeah. OK, hang on. You're getting ahead of where I'm up to a little bit. OK, so this is just showing the example with comma where comma means. Concatenate. That's easy enough. And all right, so then. Yeah, so it's just flipping it around. OK, seems reasonable. I'm not sure we need both of those. Have we done comma before? Does anybody remember? I don't remember doing it. I don't think we did. Oh, OK. Well, that's important. Oops, that's not the right button. Do have a difficult thing to search for, but let's just do it. No, we haven't. OK, fine. So let's do comma. I get a bit confused because I also do similar classes with my daughter and her friends, so I get confused about what I've done with whom, even though I'm trying to make them somewhat aligned. OK, so here's comma. Presumably they call comma. Yes, they do. All right, my net comma is called revel. Which I saw came up on the forum. This one's called that. The nice thing is that as we do more stuff, we can increasingly use. Examples directly from the docs, which is nice. OK, so. Right, so cube is going to be. Two by two by two, two by two by two. I know that because we could print that out row in there as well. Oh, thank you. I to to. Oh, no, it's just two by two. Oh, OK. Oh, I see that extra access is to show us that there's a second base. Cool. OK, so cover just would be what we'd call flatten, I guess, in pytorch. I think it will not flatten nested list nested arrays out though. Right, which I don't think pytorch would do well that what I touch doesn't have them. But looking into the documentation, they are actually different from the Epsilon. Very subtle different. I don't think we've done Epsilon yet, have we? We should do it now. OK, well, we can do it now if that's something worth looking at. Yeah, so if we revel that. It's not a it's not a higher rank tensor. It's a array of arrays. I guess that's worth including. And yeah, Epsilon does flatten that out. I see. Let's do a simple one. OK. Diadic comma. Oh, have we talked about axes yet? Does that ring a bell to anybody? Yes. Oh, we've got them here, but we haven't talked about them. Maybe let's create a section for axes then. And so let's move these. Because this is important. OK, let's move axes up to here. OK, so comma three, four. Oh, I think the problem is my little sample one's a bit broken. See, that's why that's broken. OK. This is kind of an ax. This is probably kind of an operator, but never mind. So axes are things you put in square brackets after a function. And it lets you apply that function over a particular axis. Yeah, I think we started talking about these briefly, perhaps. OK, it does not follow the normal syntax of an operator, so I'm not going to just call it a normal operator. That's why we're giving it its own spot. And it can be applied to any dyadic primitive scalar function. This looks like a good example. OK, so. So this is a function. It's going to apply equals to columns, I guess. Let's see, one, four, five, one, four, five. And so the way it describes it. Does it say what it is? I've found that kind of the way that helped me kind of understand what it's doing is with plus slash. Yeah. And you use the bracket access to have a matrix on some of the rows. I'm hoping to do this before we do operators, though, which is why I was wanting to do a dyadic version. I'm just trying to find anywhere in the help that actually say what it does. I am having trouble seeing that here. I don't think it actually says what R is, does it? That's weird. Maybe this is a description. The access operator can take a scalar. No, that doesn't tell us either. I think the APL wiki has a better. It often does information about. Thanks. Under function access, if I remember right. It's got better search to bracket access. Well, we're directed to branch function access. It seems like like different functions have different ways that access affects them. Is that what it is? Oh, is that the problem? I see. So it's hard to say exactly what it is because it varies. OK. OK, so I guess, yeah, this is what we're actually doing is we've got an access with a scalar dyadic function. So plus as well equals as a scalar dyadic function. It applied it's infix thing, which is going to have a scalar can have a scalar on the left and the right. Normally it would apply element wise over the scalars. In this case, we've got an access. So it stretches the lower rank array. So the one on the left is lower rank. This is rank one. To fit the higher rank. The elements of the lower rank array are replicated. So we want to apply this column wise. So these are treated as columns. That makes sense. And so you get one four five equals one three five and then one four five equals two four six. That's cool. OK, yeah, I think you're right, Nishik. I think that's the issue. That does make life a little confusing. All right. So let's use this example. OK, so Matt is two rows of three columns of that. OK. So plus will be applied to columns. This is the lower rank. So this will become a bunch of columns of one and two. So you get one and two added to this, one and two added to this, one and two added to this, which is exactly correct. OK. I think that makes sense. And so now what we're about to discover is that, for example, Ravel has its own special behavior. With an axis. Here we are, Ravel with axes. K is the axis and it could be a fraction. Or an integer. Or a vector. Or empty. Well, OK, if it's a fraction. A new length, axis of length one is inserted. Oh, yeah, you see the difference? We've got this. That's a bit subtle because you can't see it in the documentation, right, because they don't actually print the boxing. So I'm glad we've got boxing on. So this is inserted a new axis between the zeros axis and the ones axis. And I think we could use anything between zero and one, it would do the same thing. So in NumPy, that would be the equivalent of indexing something with with none or NP.newAxis. All right. I think the documentation tried to show it by doing a row of that to show that it's... Oh, OK. Yeah, yeah, OK, got it. You're right. Maybe we should do that as also just in case people don't notice the arrow. The axis. All right. If it's an integer. Then it only revels along those axes. OK, no worries. So we're going to create something called M. OK, so what they had. Yes, it is. So what's happening here? OK, so then we're raveling over axes one and two, which are these two. No, we index from one, I guess. Or do we index from zero for axes? Hopefully we index from one because that's what we normally do. So that would suggest we're indexing over, raveling over these. We're left with six four. Oh, OK. Wait. No, I'm slightly confused. This is the opposite of what I expected. So this is left the trailing axis on its own. And the first two axes have been combined. Oh, so that's what this is saying is combine these two axes. Yes, it is. You can see here it's combining those two axes. Does that make sense? Anybody have any questions about that so far? I came in a bit late. Is ravel the opposite of unravel? I haven't done unravel, so I have no idea. Is that a thing? I remember reading about it. Like, I came across it with NumPy before, and it was like something that NumPy has some kind of like a ravel method. And I was like confused. Like, I'm not sure if that's the opposite of. Oh, you mean just in English? Yeah, I've never actually seen that word just by itself like that. Oh, I've not seen it in normal. It's always just unravel something. Oh, there's Ravel, the composer. Oh, here we go. Apparently it exists. To disentangle or unravel. Oh, that's confusing. To become unwoven. It sounds like the same as. Sounds the same as unravel. Like, inflammable means flammable. So it's one of those things. Thank you for checking the dictionary for me. Somebody said hello in the chat. Hello Miguel. Are you able to speak or are you just on text chat today? Miguel said. I'm able to speak. I've just been lurking. Yeah, tell us what you said in the chat. Yeah, I'm Ravel, I do think means the opposite of unravel. Yes, I mean, tell us what you said earlier in the chat. You had something about BQN? Yeah, I joined a while ago. I'm also a fan of rare programming languages and memorization techniques. So I caught up with earlier sessions and I made an Anki deck for the BQN glyphs. And is that in here somewhere? Miguel Razz's Anki deck. Yeah. Excellent. So how long? Okay, so let me just go back a bit. So probably not everybody here knows what BQN is. So do you want to tell us about BQN? So BQN is a, another offshoot of APL. It's free and open source. And if you go to the community page there, that's the online rebel too so you can just try it out in your browser. And there's now my Anki deck link there, so that you can also learn the glyphs on the community page. Where's the, sorry, you said there was an online rebel here somewhere? Yeah. Where is that? Click back. Oh, you mean on here? Yeah. That's a... Oh, you can actually, this is? Yeah. I see. You can go until then. That's nifty. So BQN, all I know about it really is from listening to the ArrayCast episode with the creator of it, Marshall Lockburn, who used to work at BQN. And from listening to the ArrayCast chat with the CTO of Dialog, he described Marshall as basically wanting to go too fast. And so Marshall left Dialog and rather than trying to turn APL into the thing he really wanted it to be, he decided to start from scratch and create a new array language to be all the stuff that he wished Dialog APL was, I guess, or wished APL was based on, you know, all the things we've learned about array programming since. It uses its own character set, which some things look familiar to me like downstyle and upstyle. And these ones look the same, but there's also some symbols that aren't in APL. Yeah, there's also something interesting where they use stranding for the limiting lists. So that reduces ambiguity in the language grammar. That's this one here, right? Yep. Yeah, so stranding means this. Okay, so apparently this was a huge area of contention some decades ago, being able to basically do this to create an array of arrays is called stranding. And in BQN, can you create a list like this or even this list would require that stranding character? You need the stranding character. Okay, so you can't just write one space, two space, three. Instead you have to use this, this thing. So, one, two, three. What just happened? That didn't work the way I expected. Oh, that arrow must do something different to what I thought it did. Do I have to press enter instead? What button do I press to? I do shift enter. So I think it took some of the ideas from Jay, some ideas from APL, some ideas that aren't in APL yet. So definitely something I'm keen to check out at some point. What are your thoughts so far Miguel about BQN, like as a language for learning array programming or doing data analysis and or having fun? There's less literature than APL, which has decades. So, translating a lot of the materials into BQN is interesting. I enjoy it. I found it way easier to get started with because I couldn't work out how to download the APL thing and get it working on my computer. So I just started with BQN. And Jay has just, I think, put a little joke in the chat, which I think I understand. He said it's the less healthy version of APL. I assume where APL we read as Apple and BQN we read as bacon. And according to the documentation for BQN, you're not meant to call it bacon unless you're making a joke. So you are allowed to call it bacon in this situation. All right. Nice. We are not as yet unraveled, I don't think. Guess we should do this one now. Add it comma. All right. So this one looks pretty straightforward. Oh, well, not quite straightforward actually. So we need our cube back again. And then. All right. So this is just concatenate, which as folks on the chat have pointed out. Hang on, there's some contention here. Catenate is the same as concatenate. And so I think we are here we are concatenating four, five, six to one, two, three. And here we are taking our two by two by two cube. And concatenating 99 to the kind of innermost axis, I guess, which presumably the documentation will explain to us. Oh, and then there's a different version, which is comma bar. I guess you would call that, which we should probably therefore also mention. I guess that's catenate first, is it? Yes, it is. So is there anything else to know about comma bar? Oh, that means something else entirely, does it? Is this transpose? Oh my gosh, what a rabbit hole. Oh, that's weird. It's not quite transpose. Curious. All right, so catenation with an integer or implied axis specification, they're joined along the required axis. What does that mean, the required axis? Why does this appear at the bottom? Because you can denote the axis you want to concatenate along with the index. That's because this is comma bar, that's why. That's why, yeah. The required axis, I guess, is implied to be, oh yes, it's specified. The last axis is implied. Okay. So comma bar and comma are the same thing, but comma bar implies the first axis and comma implies the last axis. And rewrite comma bar, yeah, as? Yeah, I see. On the APL card, it explains it a little like maybe exactly almost what you said, Jeremy. Okay, cool. Great. So I can use tabular data if I have a data frame shape or a matrix. I can use comma bar with a vector of strings to print out a header row so I can see what all the columns are. That makes sense. I just did. Okay, cool. And then there's, I think at this point we don't necessarily need to explain how to use every kind of axis in every case because it might get a bit boring. Not surprisingly, if you've got a fractional axis, it kind of works the same way. They're joined along a new axis. Well, unless it's useful for seeing an example. Now that probably is useful, right? This is kind of like another way of doing what Isaac was just describing. Because here you had to already have two rows, but here you only have a vector and you want to make it into a matrix by adding the row. So this is the equivalent of stack in PyTorch versus cat in PyTorch. So yeah, that's probably worth mentioning. Okay. All right, so shift comma presumably is called comma bar and the monadic form of that is a table. Okay. Which I'm pretty confused about what it's for. Maybe we should look up APLWiki just in case it knows what it's for. Table. Yeah. Apply ravel to each major cell. So I think that's like the biggest, you know, subarrays. The arrays of rank one or higher, it's identical to applying ravel to major cells. So ravel will flatten, so it'll flatten each major cell. I don't understand what this is doing. This quad A. Is that like something they defined or is it part of the language? Quad A is A to Z. Oh. Okay. Well let's put that in our string section, shall we? Cool. Good to know. All right. So, this is the, so five row on something that's 26 long is just going to give you the first five characters. And so that's ABCDE. And then now what's going on. This is a function. Oh, okay. It applies, this is just composition. So it applies this function and then it applies this function. So first of all it applies the function ravel. And then it applies this function, which prints out the original argument and the shape of that argument. That's kind of nifty. So it's showing us that the result of this table or ravel items is ABCDE and that the shape of it is five one. And then here it's showing us that comma under bar hasn't done anything, as far as I can tell. Let's check. Okay, so that's done nothing at all. They could have told us that. But here's Yeah, so here it's applying ravel to major cells. So the major cells here are lists of four. The major cells here are vectors of four. The major cells here are matrices of three, four. So it's raveling those major cells, the two major cells that we have. Okay, so let's use that example then. Okay. I'm going to write ravel items here because I think that's easier for me to understand what that means. For an item I guess they mean a major cell. It contains two major cells, each of size three by four. And so therefore this is turning them into two length twelve major cells. It's a raveling the items. Scalar arguments converted to a one by one matrix. I guess this example is useful as well, which is basically like transpose but it's kind of adding the axis. So we should put that first. Actually maybe first we should put the scalar version. That's that. Does anybody know what this is for? It's equivalent to this operation which we haven't done yet, so we should do that soon. And we haven't done that yet. It's annoying. So we should come back probably to this idea I guess. So then we could do dyadic catnet first. Presumably this will be the same. Yes it is. But this will be different. And presumably once we add an axis specification it will make no difference because the only difference between them is the assumed axis specification. Correct. And did I? Okay, cool. All right. We're happy with that. Maybe we should do axes with operators then. How do we find those? Okay, so dyadic mixed functions. What does that mean? Dyadic mixed functions. Oh, these are not with an operator. So the plus slash, was it Isaac was suggesting plus slash with axis? How would that work because that's not a dyadic function. Yeah, I guess. Ah, it can be a function derived from slash. Okay. Right. So like with a matrix you can do plus slash bracket one and then plus slash bracket two and you'll see a row wise sum versus a column wise sum. I don't see it quite defined here but. I guess minimum or maximum works with it too. Jeremy you have a typo in the. Yes, where's my typo? Go up the S C, not S. Go up. Yep. Yep. That's not a typo. That's what I want axes. That's the plural of axis. Maybe I should say axis rather than axes I guess. I suppose so. All right. Well, yeah. Okay, so I guess we want to, we want to make tricks then. Is that the idea? And then we would say, plus slash over one. Is that how we do it? Yep. Okay. So I did a bracket two that's kind of the same thing as the default, which would be, you know, get you the same 615. Just a moment, my daughter wants me, actually maybe that's a good time to go. All right, cool. Thanks gang. See you next time. Have a good one. Bye. Bye.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 1.0, "text": " Hello.", "tokens": [2425, 13], "temperature": 0.0, "avg_logprob": -0.43859663009643557, "compression_ratio": 1.0517241379310345, "no_speech_prob": 0.23226885497570038}, {"id": 1, "seek": 0, "start": 1.0, "end": 2.0, "text": " Hi.", "tokens": [2421, 13], "temperature": 0.0, "avg_logprob": -0.43859663009643557, "compression_ratio": 1.0517241379310345, "no_speech_prob": 0.23226885497570038}, {"id": 2, "seek": 0, "start": 2.0, "end": 3.0, "text": " How are you doing?", "tokens": [1012, 366, 291, 884, 30], "temperature": 0.0, "avg_logprob": -0.43859663009643557, "compression_ratio": 1.0517241379310345, "no_speech_prob": 0.23226885497570038}, {"id": 3, "seek": 0, "start": 3.0, "end": 4.0, "text": " Good, how are you?", "tokens": [2205, 11, 577, 366, 291, 30], "temperature": 0.0, "avg_logprob": -0.43859663009643557, "compression_ratio": 1.0517241379310345, "no_speech_prob": 0.23226885497570038}, {"id": 4, "seek": 0, "start": 4.0, "end": 5.0, "text": " Pretty good.", "tokens": [10693, 665, 13], "temperature": 0.0, "avg_logprob": -0.43859663009643557, "compression_ratio": 1.0517241379310345, "no_speech_prob": 0.23226885497570038}, {"id": 5, "seek": 500, "start": 5.0, "end": 33.0, "text": " Always look forward to APL time.", "tokens": [11270, 574, 2128, 281, 5372, 43, 565, 13], "temperature": 0.0, "avg_logprob": -0.3380330006281535, "compression_ratio": 0.8, "no_speech_prob": 0.002073189476504922}, {"id": 6, "seek": 3300, "start": 33.0, "end": 36.0, "text": " Nice.", "tokens": [5490, 13], "temperature": 0.0, "avg_logprob": -0.3868154069067727, "compression_ratio": 1.28099173553719, "no_speech_prob": 0.0008067656308412552}, {"id": 7, "seek": 3300, "start": 36.0, "end": 41.0, "text": " Hi, Wasim.", "tokens": [2421, 11, 3027, 332, 13], "temperature": 0.0, "avg_logprob": -0.3868154069067727, "compression_ratio": 1.28099173553719, "no_speech_prob": 0.0008067656308412552}, {"id": 8, "seek": 3300, "start": 41.0, "end": 43.0, "text": " Hi, Surada.", "tokens": [2421, 11, 6732, 1538, 13], "temperature": 0.0, "avg_logprob": -0.3868154069067727, "compression_ratio": 1.28099173553719, "no_speech_prob": 0.0008067656308412552}, {"id": 9, "seek": 3300, "start": 43.0, "end": 45.0, "text": " Hello.", "tokens": [2425, 13], "temperature": 0.0, "avg_logprob": -0.3868154069067727, "compression_ratio": 1.28099173553719, "no_speech_prob": 0.0008067656308412552}, {"id": 10, "seek": 3300, "start": 45.0, "end": 53.0, "text": " I want to say hi to Joao, but I don't know how to pronounce his name.", "tokens": [286, 528, 281, 584, 4879, 281, 3139, 25548, 11, 457, 286, 500, 380, 458, 577, 281, 19567, 702, 1315, 13], "temperature": 0.0, "avg_logprob": -0.3868154069067727, "compression_ratio": 1.28099173553719, "no_speech_prob": 0.0008067656308412552}, {"id": 11, "seek": 3300, "start": 53.0, "end": 55.0, "text": " That's good enough.", "tokens": [663, 311, 665, 1547, 13], "temperature": 0.0, "avg_logprob": -0.3868154069067727, "compression_ratio": 1.28099173553719, "no_speech_prob": 0.0008067656308412552}, {"id": 12, "seek": 3300, "start": 55.0, "end": 56.0, "text": " It's Joao.", "tokens": [467, 311, 3139, 25548, 13], "temperature": 0.0, "avg_logprob": -0.3868154069067727, "compression_ratio": 1.28099173553719, "no_speech_prob": 0.0008067656308412552}, {"id": 13, "seek": 3300, "start": 56.0, "end": 57.0, "text": " Joao.", "tokens": [3139, 25548, 13], "temperature": 0.0, "avg_logprob": -0.3868154069067727, "compression_ratio": 1.28099173553719, "no_speech_prob": 0.0008067656308412552}, {"id": 14, "seek": 3300, "start": 57.0, "end": 58.0, "text": " That's good.", "tokens": [663, 311, 665, 13], "temperature": 0.0, "avg_logprob": -0.3868154069067727, "compression_ratio": 1.28099173553719, "no_speech_prob": 0.0008067656308412552}, {"id": 15, "seek": 5800, "start": 58.0, "end": 64.0, "text": " What country is that name from?", "tokens": [708, 1941, 307, 300, 1315, 490, 30], "temperature": 0.0, "avg_logprob": -0.26923930792160977, "compression_ratio": 1.3542857142857143, "no_speech_prob": 0.00016848194354679435}, {"id": 16, "seek": 5800, "start": 64.0, "end": 65.0, "text": " It's Portuguese.", "tokens": [467, 311, 22759, 13], "temperature": 0.0, "avg_logprob": -0.26923930792160977, "compression_ratio": 1.3542857142857143, "no_speech_prob": 0.00016848194354679435}, {"id": 17, "seek": 5800, "start": 65.0, "end": 66.0, "text": " I'm Brazilian.", "tokens": [286, 478, 23435, 13], "temperature": 0.0, "avg_logprob": -0.26923930792160977, "compression_ratio": 1.3542857142857143, "no_speech_prob": 0.00016848194354679435}, {"id": 18, "seek": 5800, "start": 66.0, "end": 67.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.26923930792160977, "compression_ratio": 1.3542857142857143, "no_speech_prob": 0.00016848194354679435}, {"id": 19, "seek": 5800, "start": 67.0, "end": 69.0, "text": " Great.", "tokens": [3769, 13], "temperature": 0.0, "avg_logprob": -0.26923930792160977, "compression_ratio": 1.3542857142857143, "no_speech_prob": 0.00016848194354679435}, {"id": 20, "seek": 5800, "start": 69.0, "end": 71.0, "text": " Yeah, I came here because of a recast.", "tokens": [865, 11, 286, 1361, 510, 570, 295, 257, 850, 525, 13], "temperature": 0.0, "avg_logprob": -0.26923930792160977, "compression_ratio": 1.3542857142857143, "no_speech_prob": 0.00016848194354679435}, {"id": 21, "seek": 5800, "start": 71.0, "end": 75.0, "text": " So, I mean, if I had known that you're having these meetings open,", "tokens": [407, 11, 286, 914, 11, 498, 286, 632, 2570, 300, 291, 434, 1419, 613, 8410, 1269, 11], "temperature": 0.0, "avg_logprob": -0.26923930792160977, "compression_ratio": 1.3542857142857143, "no_speech_prob": 0.00016848194354679435}, {"id": 22, "seek": 5800, "start": 75.0, "end": 76.0, "text": " I would have come anyway.", "tokens": [286, 576, 362, 808, 4033, 13], "temperature": 0.0, "avg_logprob": -0.26923930792160977, "compression_ratio": 1.3542857142857143, "no_speech_prob": 0.00016848194354679435}, {"id": 23, "seek": 5800, "start": 76.0, "end": 77.0, "text": " Welcome.", "tokens": [4027, 13], "temperature": 0.0, "avg_logprob": -0.26923930792160977, "compression_ratio": 1.3542857142857143, "no_speech_prob": 0.00016848194354679435}, {"id": 24, "seek": 5800, "start": 77.0, "end": 83.0, "text": " Thanks for joining.", "tokens": [2561, 337, 5549, 13], "temperature": 0.0, "avg_logprob": -0.26923930792160977, "compression_ratio": 1.3542857142857143, "no_speech_prob": 0.00016848194354679435}, {"id": 25, "seek": 8300, "start": 83.0, "end": 88.0, "text": " Hi, Redick.", "tokens": [2421, 11, 4477, 618, 13], "temperature": 0.0, "avg_logprob": -0.4041779144950535, "compression_ratio": 0.875, "no_speech_prob": 7.815448770998046e-05}, {"id": 26, "seek": 8300, "start": 88.0, "end": 95.0, "text": " How are you?", "tokens": [1012, 366, 291, 30], "temperature": 0.0, "avg_logprob": -0.4041779144950535, "compression_ratio": 0.875, "no_speech_prob": 7.815448770998046e-05}, {"id": 27, "seek": 8300, "start": 95.0, "end": 104.0, "text": " I don't hear you.", "tokens": [286, 500, 380, 1568, 291, 13], "temperature": 0.0, "avg_logprob": -0.4041779144950535, "compression_ratio": 0.875, "no_speech_prob": 7.815448770998046e-05}, {"id": 28, "seek": 10400, "start": 104.0, "end": 113.0, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.3321074705857497, "compression_ratio": 1.0379746835443038, "no_speech_prob": 7.110543083399534e-05}, {"id": 29, "seek": 10400, "start": 113.0, "end": 114.0, "text": " Let's start.", "tokens": [961, 311, 722, 13], "temperature": 0.0, "avg_logprob": -0.3321074705857497, "compression_ratio": 1.0379746835443038, "no_speech_prob": 7.110543083399534e-05}, {"id": 30, "seek": 10400, "start": 114.0, "end": 119.0, "text": " Anybody got anything they wanted to mention or talk about?", "tokens": [19082, 658, 1340, 436, 1415, 281, 2152, 420, 751, 466, 30], "temperature": 0.0, "avg_logprob": -0.3321074705857497, "compression_ratio": 1.0379746835443038, "no_speech_prob": 7.110543083399534e-05}, {"id": 31, "seek": 11900, "start": 119.0, "end": 134.0, "text": " Hopefully Redick doesn't because his microphone's not working.", "tokens": [10429, 4477, 618, 1177, 380, 570, 702, 10952, 311, 406, 1364, 13], "temperature": 0.0, "avg_logprob": -0.5138760407765707, "compression_ratio": 1.316546762589928, "no_speech_prob": 6.0986541939200833e-05}, {"id": 32, "seek": 11900, "start": 134.0, "end": 142.0, "text": " You can use sign language or chat or something, I suppose.", "tokens": [509, 393, 764, 1465, 2856, 420, 5081, 420, 746, 11, 286, 7297, 13], "temperature": 0.0, "avg_logprob": -0.5138760407765707, "compression_ratio": 1.316546762589928, "no_speech_prob": 6.0986541939200833e-05}, {"id": 33, "seek": 11900, "start": 142.0, "end": 145.0, "text": " I was really worried that I maybe had to do a little bit of a", "tokens": [286, 390, 534, 5804, 300, 286, 1310, 632, 281, 360, 257, 707, 857, 295, 257], "temperature": 0.0, "avg_logprob": -0.5138760407765707, "compression_ratio": 1.316546762589928, "no_speech_prob": 6.0986541939200833e-05}, {"id": 34, "seek": 14500, "start": 145.0, "end": 150.0, "text": " presentation.", "tokens": [5860, 13], "temperature": 0.0, "avg_logprob": -0.42639767039905896, "compression_ratio": 1.3870967741935485, "no_speech_prob": 0.000836074526887387}, {"id": 35, "seek": 14500, "start": 150.0, "end": 152.0, "text": " I was really worried that I maybe I missed a,", "tokens": [286, 390, 534, 5804, 300, 286, 1310, 286, 6721, 257, 11], "temperature": 0.0, "avg_logprob": -0.42639767039905896, "compression_ratio": 1.3870967741935485, "no_speech_prob": 0.000836074526887387}, {"id": 36, "seek": 14500, "start": 152.0, "end": 155.0, "text": " maybe I missed a lesson or something, but apparently there wasn't any.", "tokens": [1310, 286, 6721, 257, 6898, 420, 746, 11, 457, 7970, 456, 2067, 380, 604, 13], "temperature": 0.0, "avg_logprob": -0.42639767039905896, "compression_ratio": 1.3870967741935485, "no_speech_prob": 0.000836074526887387}, {"id": 37, "seek": 14500, "start": 155.0, "end": 156.0, "text": " So.", "tokens": [407, 13], "temperature": 0.0, "avg_logprob": -0.42639767039905896, "compression_ratio": 1.3870967741935485, "no_speech_prob": 0.000836074526887387}, {"id": 38, "seek": 14500, "start": 156.0, "end": 160.0, "text": " I was talking to JJ.", "tokens": [286, 390, 1417, 281, 21386, 13], "temperature": 0.0, "avg_logprob": -0.42639767039905896, "compression_ratio": 1.3870967741935485, "no_speech_prob": 0.000836074526887387}, {"id": 39, "seek": 14500, "start": 160.0, "end": 165.0, "text": " We were doing a.", "tokens": [492, 645, 884, 257, 13], "temperature": 0.0, "avg_logprob": -0.42639767039905896, "compression_ratio": 1.3870967741935485, "no_speech_prob": 0.000836074526887387}, {"id": 40, "seek": 16500, "start": 165.0, "end": 175.0, "text": " I was talking to JJ.", "tokens": [286, 390, 1417, 281, 21386, 13], "temperature": 0.0, "avg_logprob": -0.2801891090595617, "compression_ratio": 1.5327510917030567, "no_speech_prob": 9.745568968355656e-05}, {"id": 41, "seek": 16500, "start": 175.0, "end": 178.0, "text": " I decided to do a two way, ask me anything with him.", "tokens": [286, 3047, 281, 360, 257, 732, 636, 11, 1029, 385, 1340, 365, 796, 13], "temperature": 0.0, "avg_logprob": -0.2801891090595617, "compression_ratio": 1.5327510917030567, "no_speech_prob": 9.745568968355656e-05}, {"id": 42, "seek": 16500, "start": 178.0, "end": 179.0, "text": " And that was, I scheduled it for.", "tokens": [400, 300, 390, 11, 286, 15678, 309, 337, 13], "temperature": 0.0, "avg_logprob": -0.2801891090595617, "compression_ratio": 1.5327510917030567, "no_speech_prob": 9.745568968355656e-05}, {"id": 43, "seek": 16500, "start": 179.0, "end": 180.0, "text": " Like two hours before our.", "tokens": [1743, 732, 2496, 949, 527, 13], "temperature": 0.0, "avg_logprob": -0.2801891090595617, "compression_ratio": 1.5327510917030567, "no_speech_prob": 9.745568968355656e-05}, {"id": 44, "seek": 16500, "start": 180.0, "end": 181.0, "text": " Time.", "tokens": [6161, 13], "temperature": 0.0, "avg_logprob": -0.2801891090595617, "compression_ratio": 1.5327510917030567, "no_speech_prob": 9.745568968355656e-05}, {"id": 45, "seek": 16500, "start": 181.0, "end": 183.0, "text": " And then we ended up going for such a long time.", "tokens": [400, 550, 321, 4590, 493, 516, 337, 1270, 257, 938, 565, 13], "temperature": 0.0, "avg_logprob": -0.2801891090595617, "compression_ratio": 1.5327510917030567, "no_speech_prob": 9.745568968355656e-05}, {"id": 46, "seek": 16500, "start": 183.0, "end": 184.0, "text": " Didn't really. Yeah.", "tokens": [11151, 380, 534, 13, 865, 13], "temperature": 0.0, "avg_logprob": -0.2801891090595617, "compression_ratio": 1.5327510917030567, "no_speech_prob": 9.745568968355656e-05}, {"id": 47, "seek": 16500, "start": 184.0, "end": 186.0, "text": " I was late enough that I then thought, okay.", "tokens": [286, 390, 3469, 1547, 300, 286, 550, 1194, 11, 1392, 13], "temperature": 0.0, "avg_logprob": -0.2801891090595617, "compression_ratio": 1.5327510917030567, "no_speech_prob": 9.745568968355656e-05}, {"id": 48, "seek": 16500, "start": 186.0, "end": 187.0, "text": " I.", "tokens": [286, 13], "temperature": 0.0, "avg_logprob": -0.2801891090595617, "compression_ratio": 1.5327510917030567, "no_speech_prob": 9.745568968355656e-05}, {"id": 49, "seek": 16500, "start": 187.0, "end": 190.0, "text": " I may as well cancel it.", "tokens": [286, 815, 382, 731, 10373, 309, 13], "temperature": 0.0, "avg_logprob": -0.2801891090595617, "compression_ratio": 1.5327510917030567, "no_speech_prob": 9.745568968355656e-05}, {"id": 50, "seek": 16500, "start": 190.0, "end": 193.0, "text": " Otherwise people might have come and gone and then they'd miss out.", "tokens": [10328, 561, 1062, 362, 808, 293, 2780, 293, 550, 436, 1116, 1713, 484, 13], "temperature": 0.0, "avg_logprob": -0.2801891090595617, "compression_ratio": 1.5327510917030567, "no_speech_prob": 9.745568968355656e-05}, {"id": 51, "seek": 19300, "start": 193.0, "end": 195.0, "text": " It's like, you know, whatever.", "tokens": [467, 311, 411, 11, 291, 458, 11, 2035, 13], "temperature": 0.4, "avg_logprob": -0.6001146518118013, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.0005587907508015633}, {"id": 52, "seek": 19300, "start": 195.0, "end": 196.0, "text": " You know,", "tokens": [509, 458, 11], "temperature": 0.4, "avg_logprob": -0.6001146518118013, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.0005587907508015633}, {"id": 53, "seek": 19300, "start": 196.0, "end": 198.0, "text": " I have a question for you.", "tokens": [286, 362, 257, 1168, 337, 291, 13], "temperature": 0.4, "avg_logprob": -0.6001146518118013, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.0005587907508015633}, {"id": 54, "seek": 19300, "start": 198.0, "end": 200.0, "text": " I guess we do hear you. Hello.", "tokens": [286, 2041, 321, 360, 1568, 291, 13, 2425, 13], "temperature": 0.4, "avg_logprob": -0.6001146518118013, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.0005587907508015633}, {"id": 55, "seek": 19300, "start": 200.0, "end": 202.0, "text": " Oh, you can hear me. Oh, wow. Okay.", "tokens": [876, 11, 291, 393, 1568, 385, 13, 876, 11, 6076, 13, 1033, 13], "temperature": 0.4, "avg_logprob": -0.6001146518118013, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.0005587907508015633}, {"id": 56, "seek": 19300, "start": 202.0, "end": 203.0, "text": " Did you press red?", "tokens": [2589, 291, 1886, 2182, 30], "temperature": 0.4, "avg_logprob": -0.6001146518118013, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.0005587907508015633}, {"id": 57, "seek": 19300, "start": 203.0, "end": 204.0, "text": " I don't know.", "tokens": [286, 500, 380, 458, 13], "temperature": 0.4, "avg_logprob": -0.6001146518118013, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.0005587907508015633}, {"id": 58, "seek": 19300, "start": 204.0, "end": 206.0, "text": " Just started to work.", "tokens": [1449, 1409, 281, 589, 13], "temperature": 0.4, "avg_logprob": -0.6001146518118013, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.0005587907508015633}, {"id": 59, "seek": 19300, "start": 206.0, "end": 212.0, "text": " The logic continues to surprise me.", "tokens": [440, 9952, 6515, 281, 6365, 385, 13], "temperature": 0.4, "avg_logprob": -0.6001146518118013, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.0005587907508015633}, {"id": 60, "seek": 19300, "start": 212.0, "end": 214.0, "text": " But I just wanted to second what the techniques said.", "tokens": [583, 286, 445, 1415, 281, 1150, 437, 264, 7512, 848, 13], "temperature": 0.4, "avg_logprob": -0.6001146518118013, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.0005587907508015633}, {"id": 61, "seek": 19300, "start": 214.0, "end": 217.0, "text": " I was also worried that I missed a, you know,", "tokens": [286, 390, 611, 5804, 300, 286, 6721, 257, 11, 291, 458, 11], "temperature": 0.4, "avg_logprob": -0.6001146518118013, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.0005587907508015633}, {"id": 62, "seek": 19300, "start": 217.0, "end": 220.0, "text": " a session because I couldn't come here on Friday.", "tokens": [257, 5481, 570, 286, 2809, 380, 808, 510, 322, 6984, 13], "temperature": 0.4, "avg_logprob": -0.6001146518118013, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.0005587907508015633}, {"id": 63, "seek": 22000, "start": 220.0, "end": 223.0, "text": " I was like, I'm going to miss it.", "tokens": [286, 390, 411, 11, 286, 478, 516, 281, 1713, 309, 13], "temperature": 0.2, "avg_logprob": -0.533415626077091, "compression_ratio": 1.6046511627906976, "no_speech_prob": 2.8813567041652277e-05}, {"id": 64, "seek": 22000, "start": 223.0, "end": 224.0, "text": " So I just wanted to ask you,", "tokens": [407, 286, 445, 1415, 281, 1029, 291, 11], "temperature": 0.2, "avg_logprob": -0.533415626077091, "compression_ratio": 1.6046511627906976, "no_speech_prob": 2.8813567041652277e-05}, {"id": 65, "seek": 22000, "start": 224.0, "end": 227.0, "text": " I think it would be also a.", "tokens": [286, 519, 309, 576, 312, 611, 257, 13], "temperature": 0.2, "avg_logprob": -0.533415626077091, "compression_ratio": 1.6046511627906976, "no_speech_prob": 2.8813567041652277e-05}, {"id": 66, "seek": 22000, "start": 227.0, "end": 229.0, "text": " You know, and a.", "tokens": [509, 458, 11, 293, 257, 13], "temperature": 0.2, "avg_logprob": -0.533415626077091, "compression_ratio": 1.6046511627906976, "no_speech_prob": 2.8813567041652277e-05}, {"id": 67, "seek": 22000, "start": 229.0, "end": 231.0, "text": " Interview with you or like.", "tokens": [35599, 365, 291, 420, 411, 13], "temperature": 0.2, "avg_logprob": -0.533415626077091, "compression_ratio": 1.6046511627906976, "no_speech_prob": 2.8813567041652277e-05}, {"id": 68, "seek": 22000, "start": 231.0, "end": 233.0, "text": " To look forward to that.", "tokens": [1407, 574, 2128, 281, 300, 13], "temperature": 0.2, "avg_logprob": -0.533415626077091, "compression_ratio": 1.6046511627906976, "no_speech_prob": 2.8813567041652277e-05}, {"id": 69, "seek": 22000, "start": 233.0, "end": 235.0, "text": " That is, that is what a way to start the Tuesday.", "tokens": [663, 307, 11, 300, 307, 437, 257, 636, 281, 722, 264, 10017, 13], "temperature": 0.2, "avg_logprob": -0.533415626077091, "compression_ratio": 1.6046511627906976, "no_speech_prob": 2.8813567041652277e-05}, {"id": 70, "seek": 22000, "start": 235.0, "end": 236.0, "text": " I sent Hamel.", "tokens": [286, 2279, 8234, 338, 13], "temperature": 0.2, "avg_logprob": -0.533415626077091, "compression_ratio": 1.6046511627906976, "no_speech_prob": 2.8813567041652277e-05}, {"id": 71, "seek": 22000, "start": 236.0, "end": 237.0, "text": " I sent Hamel.", "tokens": [286, 2279, 8234, 338, 13], "temperature": 0.2, "avg_logprob": -0.533415626077091, "compression_ratio": 1.6046511627906976, "no_speech_prob": 2.8813567041652277e-05}, {"id": 72, "seek": 22000, "start": 237.0, "end": 239.0, "text": " You know, a preview of the interview.", "tokens": [509, 458, 11, 257, 14281, 295, 264, 4049, 13], "temperature": 0.2, "avg_logprob": -0.533415626077091, "compression_ratio": 1.6046511627906976, "no_speech_prob": 2.8813567041652277e-05}, {"id": 73, "seek": 22000, "start": 239.0, "end": 242.0, "text": " And he said he really enjoyed it. So hopefully people like it.", "tokens": [400, 415, 848, 415, 534, 4626, 309, 13, 407, 4696, 561, 411, 309, 13], "temperature": 0.2, "avg_logprob": -0.533415626077091, "compression_ratio": 1.6046511627906976, "no_speech_prob": 2.8813567041652277e-05}, {"id": 74, "seek": 22000, "start": 242.0, "end": 243.0, "text": " Cool.", "tokens": [8561, 13], "temperature": 0.2, "avg_logprob": -0.533415626077091, "compression_ratio": 1.6046511627906976, "no_speech_prob": 2.8813567041652277e-05}, {"id": 75, "seek": 24300, "start": 243.0, "end": 253.0, "text": " I'm going to share my screen.", "tokens": [286, 478, 516, 281, 2073, 452, 2568, 13], "temperature": 0.0, "avg_logprob": -0.3787550517490932, "compression_ratio": 1.0232558139534884, "no_speech_prob": 5.95447136220173e-06}, {"id": 76, "seek": 24300, "start": 253.0, "end": 259.0, "text": " So.", "tokens": [407, 13], "temperature": 0.0, "avg_logprob": -0.3787550517490932, "compression_ratio": 1.0232558139534884, "no_speech_prob": 5.95447136220173e-06}, {"id": 77, "seek": 24300, "start": 259.0, "end": 266.0, "text": " Couple of things on the forum.", "tokens": [38266, 295, 721, 322, 264, 17542, 13], "temperature": 0.0, "avg_logprob": -0.3787550517490932, "compression_ratio": 1.0232558139534884, "no_speech_prob": 5.95447136220173e-06}, {"id": 78, "seek": 24300, "start": 266.0, "end": 271.0, "text": " So, Adam, who has been.", "tokens": [407, 11, 7938, 11, 567, 575, 668, 13], "temperature": 0.0, "avg_logprob": -0.3787550517490932, "compression_ratio": 1.0232558139534884, "no_speech_prob": 5.95447136220173e-06}, {"id": 79, "seek": 27100, "start": 271.0, "end": 276.0, "text": " Apparently.", "tokens": [16755, 13], "temperature": 0.0, "avg_logprob": -0.22634245100475492, "compression_ratio": 1.3910614525139664, "no_speech_prob": 6.048418072168715e-06}, {"id": 80, "seek": 27100, "start": 276.0, "end": 279.0, "text": " Writing APL since pretty much as long as you.", "tokens": [32774, 5372, 43, 1670, 1238, 709, 382, 938, 382, 291, 13], "temperature": 0.0, "avg_logprob": -0.22634245100475492, "compression_ratio": 1.3910614525139664, "no_speech_prob": 6.048418072168715e-06}, {"id": 81, "seek": 27100, "start": 279.0, "end": 281.0, "text": " Could read or talk or something.", "tokens": [7497, 1401, 420, 751, 420, 746, 13], "temperature": 0.0, "avg_logprob": -0.22634245100475492, "compression_ratio": 1.3910614525139664, "no_speech_prob": 6.048418072168715e-06}, {"id": 82, "seek": 27100, "start": 281.0, "end": 284.0, "text": " Pointed out that.", "tokens": [12387, 292, 484, 300, 13], "temperature": 0.0, "avg_logprob": -0.22634245100475492, "compression_ratio": 1.3910614525139664, "no_speech_prob": 6.048418072168715e-06}, {"id": 83, "seek": 27100, "start": 284.0, "end": 286.0, "text": " The way I'm doing operators is not.", "tokens": [440, 636, 286, 478, 884, 19077, 307, 406, 13], "temperature": 0.0, "avg_logprob": -0.22634245100475492, "compression_ratio": 1.3910614525139664, "no_speech_prob": 6.048418072168715e-06}, {"id": 84, "seek": 27100, "start": 286.0, "end": 287.0, "text": " Quite right.", "tokens": [20464, 558, 13], "temperature": 0.0, "avg_logprob": -0.22634245100475492, "compression_ratio": 1.3910614525139664, "no_speech_prob": 6.048418072168715e-06}, {"id": 85, "seek": 27100, "start": 287.0, "end": 291.0, "text": " Which I was kind of aware of, but I was.", "tokens": [3013, 286, 390, 733, 295, 3650, 295, 11, 457, 286, 390, 13], "temperature": 0.0, "avg_logprob": -0.22634245100475492, "compression_ratio": 1.3910614525139664, "no_speech_prob": 6.048418072168715e-06}, {"id": 86, "seek": 27100, "start": 291.0, "end": 294.0, "text": " Hand waving over, which I.", "tokens": [8854, 35347, 670, 11, 597, 286, 13], "temperature": 0.0, "avg_logprob": -0.22634245100475492, "compression_ratio": 1.3910614525139664, "no_speech_prob": 6.048418072168715e-06}, {"id": 87, "seek": 27100, "start": 294.0, "end": 299.0, "text": " Agree, I should not be.", "tokens": [2725, 701, 11, 286, 820, 406, 312, 13], "temperature": 0.0, "avg_logprob": -0.22634245100475492, "compression_ratio": 1.3910614525139664, "no_speech_prob": 6.048418072168715e-06}, {"id": 88, "seek": 29900, "start": 299.0, "end": 311.0, "text": " Let me show you what I mean.", "tokens": [961, 385, 855, 291, 437, 286, 914, 13], "temperature": 0.0, "avg_logprob": -0.19393405267747782, "compression_ratio": 1.4153846153846155, "no_speech_prob": 1.4284156350186095e-05}, {"id": 89, "seek": 29900, "start": 311.0, "end": 314.0, "text": " So operators.", "tokens": [407, 19077, 13], "temperature": 0.0, "avg_logprob": -0.19393405267747782, "compression_ratio": 1.4153846153846155, "no_speech_prob": 1.4284156350186095e-05}, {"id": 90, "seek": 29900, "start": 314.0, "end": 318.0, "text": " The issue is that operators themselves can be monadic or dietic.", "tokens": [440, 2734, 307, 300, 19077, 2969, 393, 312, 1108, 43341, 420, 6339, 299, 13], "temperature": 0.0, "avg_logprob": -0.19393405267747782, "compression_ratio": 1.4153846153846155, "no_speech_prob": 1.4284156350186095e-05}, {"id": 91, "seek": 29900, "start": 318.0, "end": 320.0, "text": " So monadic operator.", "tokens": [407, 1108, 43341, 12973, 13], "temperature": 0.0, "avg_logprob": -0.19393405267747782, "compression_ratio": 1.4153846153846155, "no_speech_prob": 1.4284156350186095e-05}, {"id": 92, "seek": 29900, "start": 320.0, "end": 322.0, "text": " Means that you just have a.", "tokens": [40290, 300, 291, 445, 362, 257, 13], "temperature": 0.0, "avg_logprob": -0.19393405267747782, "compression_ratio": 1.4153846153846155, "no_speech_prob": 1.4284156350186095e-05}, {"id": 93, "seek": 29900, "start": 322.0, "end": 324.0, "text": " Function on the left of it.", "tokens": [11166, 882, 322, 264, 1411, 295, 309, 13], "temperature": 0.0, "avg_logprob": -0.19393405267747782, "compression_ratio": 1.4153846153846155, "no_speech_prob": 1.4284156350186095e-05}, {"id": 94, "seek": 32400, "start": 324.0, "end": 329.0, "text": " Whereas a dietic operator would have a function on the left and the right.", "tokens": [13813, 257, 6339, 299, 12973, 576, 362, 257, 2445, 322, 264, 1411, 293, 264, 558, 13], "temperature": 0.0, "avg_logprob": -0.16149836138260265, "compression_ratio": 1.9739130434782608, "no_speech_prob": 2.9770948458462954e-05}, {"id": 95, "seek": 32400, "start": 329.0, "end": 332.0, "text": " Not necessarily could be a function or an array on the left and the right.", "tokens": [1726, 4725, 727, 312, 257, 2445, 420, 364, 10225, 322, 264, 1411, 293, 264, 558, 13], "temperature": 0.0, "avg_logprob": -0.16149836138260265, "compression_ratio": 1.9739130434782608, "no_speech_prob": 2.9770948458462954e-05}, {"id": 96, "seek": 32400, "start": 332.0, "end": 334.0, "text": " And return a function.", "tokens": [400, 2736, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.16149836138260265, "compression_ratio": 1.9739130434782608, "no_speech_prob": 2.9770948458462954e-05}, {"id": 97, "seek": 32400, "start": 334.0, "end": 336.0, "text": " The functions that.", "tokens": [440, 6828, 300, 13], "temperature": 0.0, "avg_logprob": -0.16149836138260265, "compression_ratio": 1.9739130434782608, "no_speech_prob": 2.9770948458462954e-05}, {"id": 98, "seek": 32400, "start": 336.0, "end": 340.0, "text": " These operators return regardless of their monadic or dietic operators can", "tokens": [1981, 19077, 2736, 10060, 295, 641, 1108, 43341, 420, 6339, 299, 19077, 393], "temperature": 0.0, "avg_logprob": -0.16149836138260265, "compression_ratio": 1.9739130434782608, "no_speech_prob": 2.9770948458462954e-05}, {"id": 99, "seek": 32400, "start": 340.0, "end": 344.0, "text": " themselves be monadic or dietic functions.", "tokens": [2969, 312, 1108, 43341, 420, 6339, 299, 6828, 13], "temperature": 0.0, "avg_logprob": -0.16149836138260265, "compression_ratio": 1.9739130434782608, "no_speech_prob": 2.9770948458462954e-05}, {"id": 100, "seek": 32400, "start": 344.0, "end": 346.0, "text": " I guess I should also say it could be.", "tokens": [286, 2041, 286, 820, 611, 584, 309, 727, 312, 13], "temperature": 0.0, "avg_logprob": -0.16149836138260265, "compression_ratio": 1.9739130434782608, "no_speech_prob": 2.9770948458462954e-05}, {"id": 101, "seek": 32400, "start": 346.0, "end": 349.0, "text": " I don't know if people would say ambivalent or ambivalent.", "tokens": [286, 500, 380, 458, 498, 561, 576, 584, 3913, 3576, 317, 420, 3913, 3576, 317, 13], "temperature": 0.0, "avg_logprob": -0.16149836138260265, "compression_ratio": 1.9739130434782608, "no_speech_prob": 2.9770948458462954e-05}, {"id": 102, "seek": 32400, "start": 349.0, "end": 351.0, "text": " Ambivalent sounds like they don't care to me.", "tokens": [17196, 3576, 317, 3263, 411, 436, 500, 380, 1127, 281, 385, 13], "temperature": 0.0, "avg_logprob": -0.16149836138260265, "compression_ratio": 1.9739130434782608, "no_speech_prob": 2.9770948458462954e-05}, {"id": 103, "seek": 35100, "start": 351.0, "end": 359.0, "text": " But anyway, ambivalent meaning two valences that could be dietic or monadic.", "tokens": [583, 4033, 11, 3913, 3576, 317, 3620, 732, 1323, 2667, 300, 727, 312, 6339, 299, 420, 1108, 43341, 13], "temperature": 0.0, "avg_logprob": -0.13068598889290017, "compression_ratio": 1.2777777777777777, "no_speech_prob": 9.080056770471856e-06}, {"id": 104, "seek": 35100, "start": 359.0, "end": 366.0, "text": " So if we look at the help, for example.", "tokens": [407, 498, 321, 574, 412, 264, 854, 11, 337, 1365, 13], "temperature": 0.0, "avg_logprob": -0.13068598889290017, "compression_ratio": 1.2777777777777777, "no_speech_prob": 9.080056770471856e-06}, {"id": 105, "seek": 35100, "start": 366.0, "end": 373.0, "text": " They do point this out in the documentation.", "tokens": [814, 360, 935, 341, 484, 294, 264, 14333, 13], "temperature": 0.0, "avg_logprob": -0.13068598889290017, "compression_ratio": 1.2777777777777777, "no_speech_prob": 9.080056770471856e-06}, {"id": 106, "seek": 37300, "start": 373.0, "end": 381.0, "text": " So operator slash.", "tokens": [407, 12973, 17330, 13], "temperature": 0.0, "avg_logprob": -0.2222281678082192, "compression_ratio": 1.5384615384615385, "no_speech_prob": 1.8341548639000393e-05}, {"id": 107, "seek": 37300, "start": 381.0, "end": 382.0, "text": " So this is operator slash.", "tokens": [407, 341, 307, 12973, 17330, 13], "temperature": 0.0, "avg_logprob": -0.2222281678082192, "compression_ratio": 1.5384615384615385, "no_speech_prob": 1.8341548639000393e-05}, {"id": 108, "seek": 37300, "start": 382.0, "end": 388.0, "text": " So this is the function being returned, which is monadic.", "tokens": [407, 341, 307, 264, 2445, 885, 8752, 11, 597, 307, 1108, 43341, 13], "temperature": 0.0, "avg_logprob": -0.2222281678082192, "compression_ratio": 1.5384615384615385, "no_speech_prob": 1.8341548639000393e-05}, {"id": 109, "seek": 37300, "start": 388.0, "end": 392.0, "text": " And then I know Serada asked about this and why is reduced.", "tokens": [400, 550, 286, 458, 4210, 1538, 2351, 466, 341, 293, 983, 307, 9212, 13], "temperature": 0.0, "avg_logprob": -0.2222281678082192, "compression_ratio": 1.5384615384615385, "no_speech_prob": 1.8341548639000393e-05}, {"id": 110, "seek": 37300, "start": 392.0, "end": 394.0, "text": " Is this a dietic version or something?", "tokens": [1119, 341, 257, 6339, 299, 3037, 420, 746, 30], "temperature": 0.0, "avg_logprob": -0.2222281678082192, "compression_ratio": 1.5384615384615385, "no_speech_prob": 1.8341548639000393e-05}, {"id": 111, "seek": 37300, "start": 394.0, "end": 395.0, "text": " No, it's not.", "tokens": [883, 11, 309, 311, 406, 13], "temperature": 0.0, "avg_logprob": -0.2222281678082192, "compression_ratio": 1.5384615384615385, "no_speech_prob": 1.8341548639000393e-05}, {"id": 112, "seek": 37300, "start": 395.0, "end": 402.0, "text": " This is something else.", "tokens": [639, 307, 746, 1646, 13], "temperature": 0.0, "avg_logprob": -0.2222281678082192, "compression_ratio": 1.5384615384615385, "no_speech_prob": 1.8341548639000393e-05}, {"id": 113, "seek": 40200, "start": 402.0, "end": 408.0, "text": " Slash is a monadic operator.", "tokens": [6187, 1299, 307, 257, 1108, 43341, 12973, 13], "temperature": 0.0, "avg_logprob": -0.23493515176975982, "compression_ratio": 1.6176470588235294, "no_speech_prob": 2.468120692356024e-05}, {"id": 114, "seek": 40200, "start": 408.0, "end": 412.0, "text": " With a dietic operand.", "tokens": [2022, 257, 6339, 299, 2208, 474, 13], "temperature": 0.0, "avg_logprob": -0.23493515176975982, "compression_ratio": 1.6176470588235294, "no_speech_prob": 2.468120692356024e-05}, {"id": 115, "seek": 40200, "start": 412.0, "end": 413.0, "text": " Oh, OK.", "tokens": [876, 11, 2264, 13], "temperature": 0.0, "avg_logprob": -0.23493515176975982, "compression_ratio": 1.6176470588235294, "no_speech_prob": 2.468120692356024e-05}, {"id": 116, "seek": 40200, "start": 413.0, "end": 417.0, "text": " So the thing that it takes is dietic and it returns.", "tokens": [407, 264, 551, 300, 309, 2516, 307, 6339, 299, 293, 309, 11247, 13], "temperature": 0.0, "avg_logprob": -0.23493515176975982, "compression_ratio": 1.6176470588235294, "no_speech_prob": 2.468120692356024e-05}, {"id": 117, "seek": 40200, "start": 417.0, "end": 420.0, "text": " OK, so this one only returns a monadic function.", "tokens": [2264, 11, 370, 341, 472, 787, 11247, 257, 1108, 43341, 2445, 13], "temperature": 0.0, "avg_logprob": -0.23493515176975982, "compression_ratio": 1.6176470588235294, "no_speech_prob": 2.468120692356024e-05}, {"id": 118, "seek": 40200, "start": 420.0, "end": 423.0, "text": " So what is N wise reduced?", "tokens": [407, 437, 307, 426, 10829, 9212, 30], "temperature": 0.0, "avg_logprob": -0.23493515176975982, "compression_ratio": 1.6176470588235294, "no_speech_prob": 2.468120692356024e-05}, {"id": 119, "seek": 40200, "start": 423.0, "end": 425.0, "text": " How is this different to.", "tokens": [1012, 307, 341, 819, 281, 13], "temperature": 0.0, "avg_logprob": -0.23493515176975982, "compression_ratio": 1.6176470588235294, "no_speech_prob": 2.468120692356024e-05}, {"id": 120, "seek": 40200, "start": 425.0, "end": 427.0, "text": " Oh, no, this is dietic.", "tokens": [876, 11, 572, 11, 341, 307, 6339, 299, 13], "temperature": 0.0, "avg_logprob": -0.23493515176975982, "compression_ratio": 1.6176470588235294, "no_speech_prob": 2.468120692356024e-05}, {"id": 121, "seek": 40200, "start": 427.0, "end": 430.0, "text": " This is the dietic function version.", "tokens": [639, 307, 264, 6339, 299, 2445, 3037, 13], "temperature": 0.0, "avg_logprob": -0.23493515176975982, "compression_ratio": 1.6176470588235294, "no_speech_prob": 2.468120692356024e-05}, {"id": 122, "seek": 43000, "start": 430.0, "end": 433.0, "text": " OK.", "tokens": [2264, 13], "temperature": 0.0, "avg_logprob": -0.2619704740593232, "compression_ratio": 1.3978494623655915, "no_speech_prob": 0.0001233558141393587}, {"id": 123, "seek": 43000, "start": 433.0, "end": 440.0, "text": " We don't hear you, Serada.", "tokens": [492, 500, 380, 1568, 291, 11, 4210, 1538, 13], "temperature": 0.0, "avg_logprob": -0.2619704740593232, "compression_ratio": 1.3978494623655915, "no_speech_prob": 0.0001233558141393587}, {"id": 124, "seek": 43000, "start": 440.0, "end": 442.0, "text": " Even though I can see.", "tokens": [2754, 1673, 286, 393, 536, 13], "temperature": 0.0, "avg_logprob": -0.2619704740593232, "compression_ratio": 1.3978494623655915, "no_speech_prob": 0.0001233558141393587}, {"id": 125, "seek": 43000, "start": 442.0, "end": 443.0, "text": " Is it OK?", "tokens": [1119, 309, 2264, 30], "temperature": 0.0, "avg_logprob": -0.2619704740593232, "compression_ratio": 1.3978494623655915, "no_speech_prob": 0.0001233558141393587}, {"id": 126, "seek": 43000, "start": 443.0, "end": 444.0, "text": " I hear you now.", "tokens": [286, 1568, 291, 586, 13], "temperature": 0.0, "avg_logprob": -0.2619704740593232, "compression_ratio": 1.3978494623655915, "no_speech_prob": 0.0001233558141393587}, {"id": 127, "seek": 43000, "start": 444.0, "end": 452.0, "text": " Oh, no, just the documentation very intimidating and I can't distinguish what is the difference between reduce and reduce N wise.", "tokens": [876, 11, 572, 11, 445, 264, 14333, 588, 29714, 293, 286, 393, 380, 20206, 437, 307, 264, 2649, 1296, 5407, 293, 5407, 426, 10829, 13], "temperature": 0.0, "avg_logprob": -0.2619704740593232, "compression_ratio": 1.3978494623655915, "no_speech_prob": 0.0001233558141393587}, {"id": 128, "seek": 43000, "start": 452.0, "end": 453.0, "text": " OK.", "tokens": [2264, 13], "temperature": 0.0, "avg_logprob": -0.2619704740593232, "compression_ratio": 1.3978494623655915, "no_speech_prob": 0.0001233558141393587}, {"id": 129, "seek": 43000, "start": 453.0, "end": 455.0, "text": " Well, in that case, this is a perfect example.", "tokens": [1042, 11, 294, 300, 1389, 11, 341, 307, 257, 2176, 1365, 13], "temperature": 0.0, "avg_logprob": -0.2619704740593232, "compression_ratio": 1.3978494623655915, "no_speech_prob": 0.0001233558141393587}, {"id": 130, "seek": 45500, "start": 455.0, "end": 463.0, "text": " Because I don't know either, but I can see from here that it's a monadic versus a dietic function.", "tokens": [1436, 286, 500, 380, 458, 2139, 11, 457, 286, 393, 536, 490, 510, 300, 309, 311, 257, 1108, 43341, 5717, 257, 6339, 299, 2445, 13], "temperature": 0.0, "avg_logprob": -0.12063155762136799, "compression_ratio": 1.546583850931677, "no_speech_prob": 6.240396487555699e-06}, {"id": 131, "seek": 45500, "start": 463.0, "end": 474.0, "text": " So what we could do is we could go all the way down to a fifth level heading here and say monadic function.", "tokens": [407, 437, 321, 727, 360, 307, 321, 727, 352, 439, 264, 636, 760, 281, 257, 9266, 1496, 9864, 510, 293, 584, 1108, 43341, 2445, 13], "temperature": 0.0, "avg_logprob": -0.12063155762136799, "compression_ratio": 1.546583850931677, "no_speech_prob": 6.240396487555699e-06}, {"id": 132, "seek": 45500, "start": 474.0, "end": 477.0, "text": " And then.", "tokens": [400, 550, 13], "temperature": 0.0, "avg_logprob": -0.12063155762136799, "compression_ratio": 1.546583850931677, "no_speech_prob": 6.240396487555699e-06}, {"id": 133, "seek": 45500, "start": 477.0, "end": 479.0, "text": " You could have.", "tokens": [509, 727, 362, 13], "temperature": 0.0, "avg_logprob": -0.12063155762136799, "compression_ratio": 1.546583850931677, "no_speech_prob": 6.240396487555699e-06}, {"id": 134, "seek": 45500, "start": 479.0, "end": 483.0, "text": " Dietic function.", "tokens": [29606, 299, 2445, 13], "temperature": 0.0, "avg_logprob": -0.12063155762136799, "compression_ratio": 1.546583850931677, "no_speech_prob": 6.240396487555699e-06}, {"id": 135, "seek": 48300, "start": 483.0, "end": 494.0, "text": " OK, the monadic function is called reduce.", "tokens": [2264, 11, 264, 1108, 43341, 2445, 307, 1219, 5407, 13], "temperature": 0.0, "avg_logprob": -0.13689200083414713, "compression_ratio": 1.2975206611570247, "no_speech_prob": 3.269546868978068e-05}, {"id": 136, "seek": 48300, "start": 494.0, "end": 499.0, "text": " OK, which means we can't put the name up here anymore.", "tokens": [2264, 11, 597, 1355, 321, 393, 380, 829, 264, 1315, 493, 510, 3602, 13], "temperature": 0.0, "avg_logprob": -0.13689200083414713, "compression_ratio": 1.2975206611570247, "no_speech_prob": 3.269546868978068e-05}, {"id": 137, "seek": 48300, "start": 499.0, "end": 507.0, "text": " Well, maybe I should put both reduce slash reduce and wise.", "tokens": [1042, 11, 1310, 286, 820, 829, 1293, 5407, 17330, 5407, 293, 10829, 13], "temperature": 0.0, "avg_logprob": -0.13689200083414713, "compression_ratio": 1.2975206611570247, "no_speech_prob": 3.269546868978068e-05}, {"id": 138, "seek": 50700, "start": 507.0, "end": 517.0, "text": " And how they write it and wise, which is.", "tokens": [400, 577, 436, 2464, 309, 293, 10829, 11, 597, 307, 13], "temperature": 0.0, "avg_logprob": -0.4831913456772313, "compression_ratio": 1.05, "no_speech_prob": 1.5442768926732242e-05}, {"id": 139, "seek": 50700, "start": 517.0, "end": 521.0, "text": " Copy that.", "tokens": [25653, 300, 13], "temperature": 0.0, "avg_logprob": -0.4831913456772313, "compression_ratio": 1.05, "no_speech_prob": 1.5442768926732242e-05}, {"id": 140, "seek": 50700, "start": 521.0, "end": 524.0, "text": " Dietic function.", "tokens": [29606, 299, 2445, 13], "temperature": 0.0, "avg_logprob": -0.4831913456772313, "compression_ratio": 1.05, "no_speech_prob": 1.5442768926732242e-05}, {"id": 141, "seek": 50700, "start": 524.0, "end": 528.0, "text": " And why is it?", "tokens": [400, 983, 307, 309, 30], "temperature": 0.0, "avg_logprob": -0.4831913456772313, "compression_ratio": 1.05, "no_speech_prob": 1.5442768926732242e-05}, {"id": 142, "seek": 52800, "start": 528.0, "end": 545.0, "text": " OK, and so then.", "tokens": [2264, 11, 293, 370, 550, 13], "temperature": 0.0, "avg_logprob": -0.13900611400604249, "compression_ratio": 0.6666666666666666, "no_speech_prob": 6.141188805486308e-06}, {"id": 143, "seek": 54500, "start": 545.0, "end": 559.0, "text": " All right, OK, so I for we know what that is.", "tokens": [1057, 558, 11, 2264, 11, 370, 286, 337, 321, 458, 437, 300, 307, 13], "temperature": 0.0, "avg_logprob": -0.17824314769945646, "compression_ratio": 1.146341463414634, "no_speech_prob": 6.438609489123337e-06}, {"id": 144, "seek": 54500, "start": 559.0, "end": 561.0, "text": " All right, what's this doing?", "tokens": [1057, 558, 11, 437, 311, 341, 884, 30], "temperature": 0.0, "avg_logprob": -0.17824314769945646, "compression_ratio": 1.146341463414634, "no_speech_prob": 6.438609489123337e-06}, {"id": 145, "seek": 54500, "start": 561.0, "end": 565.0, "text": " So this is.", "tokens": [407, 341, 307, 13], "temperature": 0.0, "avg_logprob": -0.17824314769945646, "compression_ratio": 1.146341463414634, "no_speech_prob": 6.438609489123337e-06}, {"id": 146, "seek": 54500, "start": 565.0, "end": 567.0, "text": " Three.", "tokens": [6244, 13], "temperature": 0.0, "avg_logprob": -0.17824314769945646, "compression_ratio": 1.146341463414634, "no_speech_prob": 6.438609489123337e-06}, {"id": 147, "seek": 56700, "start": 567.0, "end": 577.0, "text": " If you have some more examples, let me know if anybody figures out what this is doing.", "tokens": [759, 291, 362, 512, 544, 5110, 11, 718, 385, 458, 498, 4472, 9624, 484, 437, 341, 307, 884, 13], "temperature": 0.0, "avg_logprob": -0.18177752378510265, "compression_ratio": 1.5, "no_speech_prob": 3.7852196328458376e-06}, {"id": 148, "seek": 56700, "start": 577.0, "end": 583.0, "text": " So Windows some it seems one, two, three, two, three, four windows is three.", "tokens": [407, 8591, 512, 309, 2544, 472, 11, 732, 11, 1045, 11, 732, 11, 1045, 11, 1451, 9309, 307, 1045, 13], "temperature": 0.0, "avg_logprob": -0.18177752378510265, "compression_ratio": 1.5, "no_speech_prob": 3.7852196328458376e-06}, {"id": 149, "seek": 56700, "start": 583.0, "end": 587.0, "text": " Oh, so this is a.", "tokens": [876, 11, 370, 341, 307, 257, 13], "temperature": 0.0, "avg_logprob": -0.18177752378510265, "compression_ratio": 1.5, "no_speech_prob": 3.7852196328458376e-06}, {"id": 150, "seek": 56700, "start": 587.0, "end": 591.0, "text": " Yeah, so it's kind of chunking it.", "tokens": [865, 11, 370, 309, 311, 733, 295, 16635, 278, 309, 13], "temperature": 0.0, "avg_logprob": -0.18177752378510265, "compression_ratio": 1.5, "no_speech_prob": 3.7852196328458376e-06}, {"id": 151, "seek": 56700, "start": 591.0, "end": 593.0, "text": " And then adding it.", "tokens": [400, 550, 5127, 309, 13], "temperature": 0.0, "avg_logprob": -0.18177752378510265, "compression_ratio": 1.5, "no_speech_prob": 3.7852196328458376e-06}, {"id": 152, "seek": 56700, "start": 593.0, "end": 595.0, "text": " OK, that makes sense.", "tokens": [2264, 11, 300, 1669, 2020, 13], "temperature": 0.0, "avg_logprob": -0.18177752378510265, "compression_ratio": 1.5, "no_speech_prob": 3.7852196328458376e-06}, {"id": 153, "seek": 59500, "start": 595.0, "end": 597.0, "text": " So you've got.", "tokens": [407, 291, 600, 658, 13], "temperature": 0.0, "avg_logprob": -0.1915721671525822, "compression_ratio": 1.475, "no_speech_prob": 1.3005536857235711e-05}, {"id": 154, "seek": 59500, "start": 597.0, "end": 601.0, "text": " Oh, no, it's not chunking it. I see. So we've got the numbers one to four.", "tokens": [876, 11, 572, 11, 309, 311, 406, 16635, 278, 309, 13, 286, 536, 13, 407, 321, 600, 658, 264, 3547, 472, 281, 1451, 13], "temperature": 0.0, "avg_logprob": -0.1915721671525822, "compression_ratio": 1.475, "no_speech_prob": 1.3005536857235711e-05}, {"id": 155, "seek": 59500, "start": 601.0, "end": 606.0, "text": " So it's adding the first. Oh, it's doing it's kind of like a moving average. Right.", "tokens": [407, 309, 311, 5127, 264, 700, 13, 876, 11, 309, 311, 884, 309, 311, 733, 295, 411, 257, 2684, 4274, 13, 1779, 13], "temperature": 0.0, "avg_logprob": -0.1915721671525822, "compression_ratio": 1.475, "no_speech_prob": 1.3005536857235711e-05}, {"id": 156, "seek": 59500, "start": 606.0, "end": 611.0, "text": " So if I did.", "tokens": [407, 498, 286, 630, 13], "temperature": 0.0, "avg_logprob": -0.1915721671525822, "compression_ratio": 1.475, "no_speech_prob": 1.3005536857235711e-05}, {"id": 157, "seek": 59500, "start": 611.0, "end": 615.0, "text": " We do it.", "tokens": [492, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.1915721671525822, "compression_ratio": 1.475, "no_speech_prob": 1.3005536857235711e-05}, {"id": 158, "seek": 59500, "start": 615.0, "end": 620.0, "text": " We do some windowed some. Yes, exactly.", "tokens": [492, 360, 512, 4910, 292, 512, 13, 1079, 11, 2293, 13], "temperature": 0.0, "avg_logprob": -0.1915721671525822, "compression_ratio": 1.475, "no_speech_prob": 1.3005536857235711e-05}, {"id": 159, "seek": 62000, "start": 620.0, "end": 628.0, "text": " So if I did three divided into.", "tokens": [407, 498, 286, 630, 1045, 6666, 666, 13], "temperature": 0.0, "avg_logprob": -0.19863876219718687, "compression_ratio": 1.1764705882352942, "no_speech_prob": 2.545704410295002e-05}, {"id": 160, "seek": 62000, "start": 628.0, "end": 634.0, "text": " Turn on my keyboard.", "tokens": [7956, 322, 452, 10186, 13], "temperature": 0.0, "avg_logprob": -0.19863876219718687, "compression_ratio": 1.1764705882352942, "no_speech_prob": 2.545704410295002e-05}, {"id": 161, "seek": 62000, "start": 634.0, "end": 642.0, "text": " Three divided into what's the swap thing again?", "tokens": [6244, 6666, 666, 437, 311, 264, 18135, 551, 797, 30], "temperature": 0.0, "avg_logprob": -0.19863876219718687, "compression_ratio": 1.1764705882352942, "no_speech_prob": 2.545704410295002e-05}, {"id": 162, "seek": 64200, "start": 642.0, "end": 650.0, "text": " Yes.", "tokens": [1079, 13], "temperature": 0.0, "avg_logprob": -0.13233146359843592, "compression_ratio": 1.4809160305343512, "no_speech_prob": 1.7328743524558377e-06}, {"id": 163, "seek": 64200, "start": 650.0, "end": 656.0, "text": " So that would be like, yeah, that's like a moving average now. Right.", "tokens": [407, 300, 576, 312, 411, 11, 1338, 11, 300, 311, 411, 257, 2684, 4274, 586, 13, 1779, 13], "temperature": 0.0, "avg_logprob": -0.13233146359843592, "compression_ratio": 1.4809160305343512, "no_speech_prob": 1.7328743524558377e-06}, {"id": 164, "seek": 64200, "start": 656.0, "end": 661.0, "text": " The average of one, two, three, the average of two, three, four.", "tokens": [440, 4274, 295, 472, 11, 732, 11, 1045, 11, 264, 4274, 295, 732, 11, 1045, 11, 1451, 13], "temperature": 0.0, "avg_logprob": -0.13233146359843592, "compression_ratio": 1.4809160305343512, "no_speech_prob": 1.7328743524558377e-06}, {"id": 165, "seek": 64200, "start": 661.0, "end": 666.0, "text": " There's probably a better way to write that, but it's.", "tokens": [821, 311, 1391, 257, 1101, 636, 281, 2464, 300, 11, 457, 309, 311, 13], "temperature": 0.0, "avg_logprob": -0.13233146359843592, "compression_ratio": 1.4809160305343512, "no_speech_prob": 1.7328743524558377e-06}, {"id": 166, "seek": 66600, "start": 666.0, "end": 675.0, "text": " And then lamp is.", "tokens": [400, 550, 12684, 307, 13], "temperature": 0.0, "avg_logprob": -0.32502932018703884, "compression_ratio": 0.8222222222222222, "no_speech_prob": 4.3992276914650574e-05}, {"id": 167, "seek": 66600, "start": 675.0, "end": 679.0, "text": " Moving average.", "tokens": [14242, 4274, 13], "temperature": 0.0, "avg_logprob": -0.32502932018703884, "compression_ratio": 0.8222222222222222, "no_speech_prob": 4.3992276914650574e-05}, {"id": 168, "seek": 66600, "start": 679.0, "end": 683.0, "text": " OK.", "tokens": [2264, 13], "temperature": 0.0, "avg_logprob": -0.32502932018703884, "compression_ratio": 0.8222222222222222, "no_speech_prob": 4.3992276914650574e-05}, {"id": 169, "seek": 68300, "start": 683.0, "end": 696.0, "text": " Windowed some.", "tokens": [44933, 292, 512, 13], "temperature": 0.0, "avg_logprob": -0.5434718132019043, "compression_ratio": 0.6363636363636364, "no_speech_prob": 0.0001071677979780361}, {"id": 170, "seek": 69600, "start": 696.0, "end": 713.0, "text": " Put it here.", "tokens": [4935, 309, 510, 13], "temperature": 0.0, "avg_logprob": -0.3025760958271642, "compression_ratio": 1.141304347826087, "no_speech_prob": 7.0715996116632596e-06}, {"id": 171, "seek": 69600, "start": 713.0, "end": 720.0, "text": " What does this do if you pass an array as the alpha argument, like three, four or something?", "tokens": [708, 775, 341, 360, 498, 291, 1320, 364, 10225, 382, 264, 8961, 6770, 11, 411, 1045, 11, 1451, 420, 746, 30], "temperature": 0.0, "avg_logprob": -0.3025760958271642, "compression_ratio": 1.141304347826087, "no_speech_prob": 7.0715996116632596e-06}, {"id": 172, "seek": 72000, "start": 720.0, "end": 727.0, "text": " Your microphone is so loud, it's kind of like distorting. I don't know if there's a way to like move it away from your mouth or change it.", "tokens": [2260, 10952, 307, 370, 6588, 11, 309, 311, 733, 295, 411, 37555, 278, 13, 286, 500, 380, 458, 498, 456, 311, 257, 636, 281, 411, 1286, 309, 1314, 490, 428, 4525, 420, 1319, 309, 13], "temperature": 0.0, "avg_logprob": -0.21795501708984374, "compression_ratio": 1.5223880597014925, "no_speech_prob": 4.710749635705724e-06}, {"id": 173, "seek": 72000, "start": 727.0, "end": 730.0, "text": " Volume or something.", "tokens": [38448, 420, 746, 13], "temperature": 0.0, "avg_logprob": -0.21795501708984374, "compression_ratio": 1.5223880597014925, "no_speech_prob": 4.710749635705724e-06}, {"id": 174, "seek": 72000, "start": 730.0, "end": 734.0, "text": " Sorry, that was two. That was three.", "tokens": [4919, 11, 300, 390, 732, 13, 663, 390, 1045, 13], "temperature": 0.0, "avg_logprob": -0.21795501708984374, "compression_ratio": 1.5223880597014925, "no_speech_prob": 4.710749635705724e-06}, {"id": 175, "seek": 72000, "start": 734.0, "end": 740.0, "text": " That is better. That's actually almost too quiet, but that's that's not going to drive me quite so crazy yet.", "tokens": [663, 307, 1101, 13, 663, 311, 767, 1920, 886, 5677, 11, 457, 300, 311, 300, 311, 406, 516, 281, 3332, 385, 1596, 370, 3219, 1939, 13], "temperature": 0.0, "avg_logprob": -0.21795501708984374, "compression_ratio": 1.5223880597014925, "no_speech_prob": 4.710749635705724e-06}, {"id": 176, "seek": 74000, "start": 740.0, "end": 751.0, "text": " Oh, I was wondering what, you know, this does if you pass an array as the alpha argument, like three, four.", "tokens": [876, 11, 286, 390, 6359, 437, 11, 291, 458, 11, 341, 775, 498, 291, 1320, 364, 10225, 382, 264, 8961, 6770, 11, 411, 1045, 11, 1451, 13], "temperature": 0.0, "avg_logprob": -0.2317296862602234, "compression_ratio": 1.271186440677966, "no_speech_prob": 5.804345732940419e-07}, {"id": 177, "seek": 74000, "start": 751.0, "end": 754.0, "text": " Oh, that's a good question.", "tokens": [876, 11, 300, 311, 257, 665, 1168, 13], "temperature": 0.0, "avg_logprob": -0.2317296862602234, "compression_ratio": 1.271186440677966, "no_speech_prob": 5.804345732940419e-07}, {"id": 178, "seek": 74000, "start": 754.0, "end": 755.0, "text": " On a raise up.", "tokens": [1282, 257, 5300, 493, 13], "temperature": 0.0, "avg_logprob": -0.2317296862602234, "compression_ratio": 1.271186440677966, "no_speech_prob": 5.804345732940419e-07}, {"id": 179, "seek": 75500, "start": 755.0, "end": 771.0, "text": " Let's find out.", "tokens": [961, 311, 915, 484, 13], "temperature": 0.0, "avg_logprob": -0.22950662885393416, "compression_ratio": 0.75, "no_speech_prob": 1.4061099136597477e-05}, {"id": 180, "seek": 75500, "start": 771.0, "end": 779.0, "text": " Average.", "tokens": [316, 3623, 13], "temperature": 0.0, "avg_logprob": -0.22950662885393416, "compression_ratio": 0.75, "no_speech_prob": 1.4061099136597477e-05}, {"id": 181, "seek": 77900, "start": 779.0, "end": 786.0, "text": " Two.", "tokens": [4453, 13], "temperature": 0.0, "avg_logprob": -0.2973690367581552, "compression_ratio": 1.4393939393939394, "no_speech_prob": 1.3840767678630073e-05}, {"id": 182, "seek": 77900, "start": 786.0, "end": 791.0, "text": " Yeah, they don't like it.", "tokens": [865, 11, 436, 500, 380, 411, 309, 13], "temperature": 0.0, "avg_logprob": -0.2973690367581552, "compression_ratio": 1.4393939393939394, "no_speech_prob": 1.3840767678630073e-05}, {"id": 183, "seek": 77900, "start": 791.0, "end": 797.0, "text": " The docs AX must be a simple scalar or one item integer array.", "tokens": [440, 45623, 316, 55, 1633, 312, 257, 2199, 39684, 420, 472, 3174, 24922, 10225, 13], "temperature": 0.0, "avg_logprob": -0.2973690367581552, "compression_ratio": 1.4393939393939394, "no_speech_prob": 1.3840767678630073e-05}, {"id": 184, "seek": 77900, "start": 797.0, "end": 805.0, "text": " OK, well, I don't know what's the distinction between a simple scalar and an item integer array.", "tokens": [2264, 11, 731, 11, 286, 500, 380, 458, 437, 311, 264, 16844, 1296, 257, 2199, 39684, 293, 364, 3174, 24922, 10225, 13], "temperature": 0.0, "avg_logprob": -0.2973690367581552, "compression_ratio": 1.4393939393939394, "no_speech_prob": 1.3840767678630073e-05}, {"id": 185, "seek": 80500, "start": 805.0, "end": 816.0, "text": " I mean, one thing I did want to do today or soon is something that Adam suggested, which is to look at the rank operator, which would allow us to deal with this nicely.", "tokens": [286, 914, 11, 472, 551, 286, 630, 528, 281, 360, 965, 420, 2321, 307, 746, 300, 7938, 10945, 11, 597, 307, 281, 574, 412, 264, 6181, 12973, 11, 597, 576, 2089, 505, 281, 2028, 365, 341, 9594, 13], "temperature": 0.0, "avg_logprob": -0.05874476066002479, "compression_ratio": 1.5052083333333333, "no_speech_prob": 1.6700272681191564e-05}, {"id": 186, "seek": 80500, "start": 816.0, "end": 822.0, "text": " But for now, let's put that aside.", "tokens": [583, 337, 586, 11, 718, 311, 829, 300, 7359, 13], "temperature": 0.0, "avg_logprob": -0.05874476066002479, "compression_ratio": 1.5052083333333333, "no_speech_prob": 1.6700272681191564e-05}, {"id": 187, "seek": 80500, "start": 822.0, "end": 828.0, "text": " OK, yeah, so this one just is doing a sum of single things, which is not very useful.", "tokens": [2264, 11, 1338, 11, 370, 341, 472, 445, 307, 884, 257, 2408, 295, 2167, 721, 11, 597, 307, 406, 588, 4420, 13], "temperature": 0.0, "avg_logprob": -0.05874476066002479, "compression_ratio": 1.5052083333333333, "no_speech_prob": 1.6700272681191564e-05}, {"id": 188, "seek": 82800, "start": 828.0, "end": 849.0, "text": " OK, identity element. This is kind of interesting, actually more of a mathematical or computer science idea, but I think we should keep it because that's part of what we're learning about is the idea of the identity element for an operation.", "tokens": [2264, 11, 6575, 4478, 13, 639, 307, 733, 295, 1880, 11, 767, 544, 295, 257, 18894, 420, 3820, 3497, 1558, 11, 457, 286, 519, 321, 820, 1066, 309, 570, 300, 311, 644, 295, 437, 321, 434, 2539, 466, 307, 264, 1558, 295, 264, 6575, 4478, 337, 364, 6916, 13], "temperature": 0.0, "avg_logprob": -0.12371384470086348, "compression_ratio": 1.4497041420118344, "no_speech_prob": 7.410418220388237e-06}, {"id": 189, "seek": 82800, "start": 849.0, "end": 856.0, "text": " So.", "tokens": [407, 13], "temperature": 0.0, "avg_logprob": -0.12371384470086348, "compression_ratio": 1.4497041420118344, "no_speech_prob": 7.410418220388237e-06}, {"id": 190, "seek": 85600, "start": 856.0, "end": 861.0, "text": " So basically this is like if you want to.", "tokens": [407, 1936, 341, 307, 411, 498, 291, 528, 281, 13], "temperature": 0.0, "avg_logprob": -0.10220392819108634, "compression_ratio": 1.7461139896373057, "no_speech_prob": 6.962016868783394e-06}, {"id": 191, "seek": 85600, "start": 861.0, "end": 869.0, "text": " Start with a number and then add things to it, then starting with zero is the number you would want to start at to get the right answer.", "tokens": [6481, 365, 257, 1230, 293, 550, 909, 721, 281, 309, 11, 550, 2891, 365, 4018, 307, 264, 1230, 291, 576, 528, 281, 722, 412, 281, 483, 264, 558, 1867, 13], "temperature": 0.0, "avg_logprob": -0.10220392819108634, "compression_ratio": 1.7461139896373057, "no_speech_prob": 6.962016868783394e-06}, {"id": 192, "seek": 85600, "start": 869.0, "end": 874.0, "text": " Zero plus a bunch of things gives you the addition of a bunch of things that for multiply.", "tokens": [17182, 1804, 257, 3840, 295, 721, 2709, 291, 264, 4500, 295, 257, 3840, 295, 721, 300, 337, 12972, 13], "temperature": 0.0, "avg_logprob": -0.10220392819108634, "compression_ratio": 1.7461139896373057, "no_speech_prob": 6.962016868783394e-06}, {"id": 193, "seek": 85600, "start": 874.0, "end": 877.0, "text": " That's not true to multiply.", "tokens": [663, 311, 406, 2074, 281, 12972, 13], "temperature": 0.0, "avg_logprob": -0.10220392819108634, "compression_ratio": 1.7461139896373057, "no_speech_prob": 6.962016868783394e-06}, {"id": 194, "seek": 85600, "start": 877.0, "end": 880.0, "text": " You have to start with the number one.", "tokens": [509, 362, 281, 722, 365, 264, 1230, 472, 13], "temperature": 0.0, "avg_logprob": -0.10220392819108634, "compression_ratio": 1.7461139896373057, "no_speech_prob": 6.962016868783394e-06}, {"id": 195, "seek": 88000, "start": 880.0, "end": 892.0, "text": " And so, yeah, so APL seems to know what the identity element, at least for these operations is.", "tokens": [400, 370, 11, 1338, 11, 370, 5372, 43, 2544, 281, 458, 437, 264, 6575, 4478, 11, 412, 1935, 337, 613, 7705, 307, 13], "temperature": 0.0, "avg_logprob": -0.2388296407811782, "compression_ratio": 1.4790419161676647, "no_speech_prob": 5.173321369511541e-06}, {"id": 196, "seek": 88000, "start": 892.0, "end": 899.0, "text": " That's interesting.", "tokens": [663, 311, 1880, 13], "temperature": 0.0, "avg_logprob": -0.2388296407811782, "compression_ratio": 1.4790419161676647, "no_speech_prob": 5.173321369511541e-06}, {"id": 197, "seek": 88000, "start": 899.0, "end": 905.0, "text": " So is that flipping the window when the scaler is negative?", "tokens": [407, 307, 300, 26886, 264, 4910, 562, 264, 15664, 260, 307, 3671, 30], "temperature": 0.0, "avg_logprob": -0.2388296407811782, "compression_ratio": 1.4790419161676647, "no_speech_prob": 5.173321369511541e-06}, {"id": 198, "seek": 88000, "start": 905.0, "end": 908.0, "text": " Where the switch, sorry, where's the scalar negative? Oh, the last one?", "tokens": [2305, 264, 3679, 11, 2597, 11, 689, 311, 264, 39684, 3671, 30, 876, 11, 264, 1036, 472, 30], "temperature": 0.0, "avg_logprob": -0.2388296407811782, "compression_ratio": 1.4790419161676647, "no_speech_prob": 5.173321369511541e-06}, {"id": 199, "seek": 90800, "start": 908.0, "end": 916.0, "text": " Yeah, yeah. OK, hang on. You're getting ahead of where I'm up to a little bit. OK, so this is just showing the example with comma where comma means.", "tokens": [865, 11, 1338, 13, 2264, 11, 3967, 322, 13, 509, 434, 1242, 2286, 295, 689, 286, 478, 493, 281, 257, 707, 857, 13, 2264, 11, 370, 341, 307, 445, 4099, 264, 1365, 365, 22117, 689, 22117, 1355, 13], "temperature": 0.0, "avg_logprob": -0.1772756278514862, "compression_ratio": 1.3486842105263157, "no_speech_prob": 6.853796094219433e-06}, {"id": 200, "seek": 90800, "start": 916.0, "end": 921.0, "text": " Concatenate.", "tokens": [18200, 7186, 473, 13], "temperature": 0.0, "avg_logprob": -0.1772756278514862, "compression_ratio": 1.3486842105263157, "no_speech_prob": 6.853796094219433e-06}, {"id": 201, "seek": 90800, "start": 921.0, "end": 923.0, "text": " That's easy enough.", "tokens": [663, 311, 1858, 1547, 13], "temperature": 0.0, "avg_logprob": -0.1772756278514862, "compression_ratio": 1.3486842105263157, "no_speech_prob": 6.853796094219433e-06}, {"id": 202, "seek": 90800, "start": 923.0, "end": 931.0, "text": " And all right, so then.", "tokens": [400, 439, 558, 11, 370, 550, 13], "temperature": 0.0, "avg_logprob": -0.1772756278514862, "compression_ratio": 1.3486842105263157, "no_speech_prob": 6.853796094219433e-06}, {"id": 203, "seek": 93100, "start": 931.0, "end": 942.0, "text": " Yeah, so it's just flipping it around.", "tokens": [865, 11, 370, 309, 311, 445, 26886, 309, 926, 13], "temperature": 0.0, "avg_logprob": -0.16889222124789624, "compression_ratio": 1.1967213114754098, "no_speech_prob": 6.961835879337741e-06}, {"id": 204, "seek": 93100, "start": 942.0, "end": 945.0, "text": " OK, seems reasonable.", "tokens": [2264, 11, 2544, 10585, 13], "temperature": 0.0, "avg_logprob": -0.16889222124789624, "compression_ratio": 1.1967213114754098, "no_speech_prob": 6.961835879337741e-06}, {"id": 205, "seek": 93100, "start": 945.0, "end": 952.0, "text": " I'm not sure we need both of those.", "tokens": [286, 478, 406, 988, 321, 643, 1293, 295, 729, 13], "temperature": 0.0, "avg_logprob": -0.16889222124789624, "compression_ratio": 1.1967213114754098, "no_speech_prob": 6.961835879337741e-06}, {"id": 206, "seek": 93100, "start": 952.0, "end": 956.0, "text": " Have we done comma before?", "tokens": [3560, 321, 1096, 22117, 949, 30], "temperature": 0.0, "avg_logprob": -0.16889222124789624, "compression_ratio": 1.1967213114754098, "no_speech_prob": 6.961835879337741e-06}, {"id": 207, "seek": 93100, "start": 956.0, "end": 958.0, "text": " Does anybody remember?", "tokens": [4402, 4472, 1604, 30], "temperature": 0.0, "avg_logprob": -0.16889222124789624, "compression_ratio": 1.1967213114754098, "no_speech_prob": 6.961835879337741e-06}, {"id": 208, "seek": 95800, "start": 958.0, "end": 961.0, "text": " I don't remember doing it. I don't think we did.", "tokens": [286, 500, 380, 1604, 884, 309, 13, 286, 500, 380, 519, 321, 630, 13], "temperature": 0.0, "avg_logprob": -0.17132214368399928, "compression_ratio": 1.3185185185185184, "no_speech_prob": 2.5069623006857e-05}, {"id": 209, "seek": 95800, "start": 961.0, "end": 966.0, "text": " Oh, OK. Well, that's important.", "tokens": [876, 11, 2264, 13, 1042, 11, 300, 311, 1021, 13], "temperature": 0.0, "avg_logprob": -0.17132214368399928, "compression_ratio": 1.3185185185185184, "no_speech_prob": 2.5069623006857e-05}, {"id": 210, "seek": 95800, "start": 966.0, "end": 976.0, "text": " Oops, that's not the right button.", "tokens": [21726, 11, 300, 311, 406, 264, 558, 2960, 13], "temperature": 0.0, "avg_logprob": -0.17132214368399928, "compression_ratio": 1.3185185185185184, "no_speech_prob": 2.5069623006857e-05}, {"id": 211, "seek": 95800, "start": 976.0, "end": 985.0, "text": " Do have a difficult thing to search for, but let's just do it.", "tokens": [1144, 362, 257, 2252, 551, 281, 3164, 337, 11, 457, 718, 311, 445, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.17132214368399928, "compression_ratio": 1.3185185185185184, "no_speech_prob": 2.5069623006857e-05}, {"id": 212, "seek": 98500, "start": 985.0, "end": 997.0, "text": " No, we haven't. OK, fine.", "tokens": [50364, 883, 11, 321, 2378, 380, 13, 2264, 11, 2489, 13, 50964], "temperature": 0.0, "avg_logprob": -0.25064616936903733, "compression_ratio": 0.7575757575757576, "no_speech_prob": 2.66212646238273e-05}, {"id": 213, "seek": 101500, "start": 1015.0, "end": 1025.0, "text": " So let's do comma.", "tokens": [407, 718, 311, 360, 22117, 13], "temperature": 0.0, "avg_logprob": -0.1446491817258439, "compression_ratio": 1.4256756756756757, "no_speech_prob": 0.014953013509511948}, {"id": 214, "seek": 101500, "start": 1025.0, "end": 1044.0, "text": " I get a bit confused because I also do similar classes with my daughter and her friends, so I get confused about what I've done with whom, even though I'm trying to make them somewhat aligned.", "tokens": [286, 483, 257, 857, 9019, 570, 286, 611, 360, 2531, 5359, 365, 452, 4653, 293, 720, 1855, 11, 370, 286, 483, 9019, 466, 437, 286, 600, 1096, 365, 7101, 11, 754, 1673, 286, 478, 1382, 281, 652, 552, 8344, 17962, 13], "temperature": 0.0, "avg_logprob": -0.1446491817258439, "compression_ratio": 1.4256756756756757, "no_speech_prob": 0.014953013509511948}, {"id": 215, "seek": 104400, "start": 1044.0, "end": 1056.0, "text": " OK, so here's comma.", "tokens": [50364, 2264, 11, 370, 510, 311, 22117, 13, 50964], "temperature": 0.0, "avg_logprob": -0.3449662208557129, "compression_ratio": 0.7142857142857143, "no_speech_prob": 0.00016587821301072836}, {"id": 216, "seek": 107400, "start": 1074.0, "end": 1082.0, "text": " Presumably they call comma. Yes, they do.", "tokens": [2718, 449, 1188, 436, 818, 22117, 13, 1079, 11, 436, 360, 13], "temperature": 0.0, "avg_logprob": -0.28635130173120743, "compression_ratio": 1.1717171717171717, "no_speech_prob": 0.012052083387970924}, {"id": 217, "seek": 107400, "start": 1082.0, "end": 1088.0, "text": " All right, my net comma is called revel.", "tokens": [1057, 558, 11, 452, 2533, 22117, 307, 1219, 15262, 13], "temperature": 0.0, "avg_logprob": -0.28635130173120743, "compression_ratio": 1.1717171717171717, "no_speech_prob": 0.012052083387970924}, {"id": 218, "seek": 107400, "start": 1088.0, "end": 1094.0, "text": " Which I saw came up on the forum.", "tokens": [3013, 286, 1866, 1361, 493, 322, 264, 17542, 13], "temperature": 0.0, "avg_logprob": -0.28635130173120743, "compression_ratio": 1.1717171717171717, "no_speech_prob": 0.012052083387970924}, {"id": 219, "seek": 109400, "start": 1094.0, "end": 1104.0, "text": " This one's called that.", "tokens": [639, 472, 311, 1219, 300, 13], "temperature": 0.0, "avg_logprob": -0.1777528405189514, "compression_ratio": 1.25, "no_speech_prob": 5.77108266952564e-06}, {"id": 220, "seek": 109400, "start": 1104.0, "end": 1109.0, "text": " The nice thing is that as we do more stuff, we can increasingly use.", "tokens": [440, 1481, 551, 307, 300, 382, 321, 360, 544, 1507, 11, 321, 393, 12980, 764, 13], "temperature": 0.0, "avg_logprob": -0.1777528405189514, "compression_ratio": 1.25, "no_speech_prob": 5.77108266952564e-06}, {"id": 221, "seek": 109400, "start": 1109.0, "end": 1115.0, "text": " Examples directly from the docs, which is nice.", "tokens": [48591, 3838, 490, 264, 45623, 11, 597, 307, 1481, 13], "temperature": 0.0, "avg_logprob": -0.1777528405189514, "compression_ratio": 1.25, "no_speech_prob": 5.77108266952564e-06}, {"id": 222, "seek": 111500, "start": 1115.0, "end": 1125.0, "text": " OK, so.", "tokens": [2264, 11, 370, 13], "temperature": 0.0, "avg_logprob": -0.2632867061730587, "compression_ratio": 1.3103448275862069, "no_speech_prob": 1.0450828085595276e-05}, {"id": 223, "seek": 111500, "start": 1125.0, "end": 1132.0, "text": " Right, so cube is going to be.", "tokens": [1779, 11, 370, 13728, 307, 516, 281, 312, 13], "temperature": 0.0, "avg_logprob": -0.2632867061730587, "compression_ratio": 1.3103448275862069, "no_speech_prob": 1.0450828085595276e-05}, {"id": 224, "seek": 111500, "start": 1132.0, "end": 1138.0, "text": " Two by two by two, two by two by two.", "tokens": [4453, 538, 732, 538, 732, 11, 732, 538, 732, 538, 732, 13], "temperature": 0.0, "avg_logprob": -0.2632867061730587, "compression_ratio": 1.3103448275862069, "no_speech_prob": 1.0450828085595276e-05}, {"id": 225, "seek": 113800, "start": 1138.0, "end": 1146.0, "text": " I know that because we could print that out row in there as well.", "tokens": [286, 458, 300, 570, 321, 727, 4482, 300, 484, 5386, 294, 456, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.44781094789505005, "compression_ratio": 1.0853658536585367, "no_speech_prob": 2.5064551664399914e-05}, {"id": 226, "seek": 113800, "start": 1146.0, "end": 1149.0, "text": " Oh, thank you.", "tokens": [876, 11, 1309, 291, 13], "temperature": 0.0, "avg_logprob": -0.44781094789505005, "compression_ratio": 1.0853658536585367, "no_speech_prob": 2.5064551664399914e-05}, {"id": 227, "seek": 113800, "start": 1149.0, "end": 1163.0, "text": " I to to.", "tokens": [286, 281, 281, 13], "temperature": 0.0, "avg_logprob": -0.44781094789505005, "compression_ratio": 1.0853658536585367, "no_speech_prob": 2.5064551664399914e-05}, {"id": 228, "seek": 116300, "start": 1163.0, "end": 1171.0, "text": " Oh, no, it's just two by two.", "tokens": [876, 11, 572, 11, 309, 311, 445, 732, 538, 732, 13], "temperature": 0.0, "avg_logprob": -0.23330100747041924, "compression_ratio": 1.1894736842105262, "no_speech_prob": 9.970314749807585e-06}, {"id": 229, "seek": 116300, "start": 1171.0, "end": 1178.0, "text": " Oh, OK. Oh, I see that extra access is to show us that there's a second base.", "tokens": [876, 11, 2264, 13, 876, 11, 286, 536, 300, 2857, 2105, 307, 281, 855, 505, 300, 456, 311, 257, 1150, 3096, 13], "temperature": 0.0, "avg_logprob": -0.23330100747041924, "compression_ratio": 1.1894736842105262, "no_speech_prob": 9.970314749807585e-06}, {"id": 230, "seek": 116300, "start": 1178.0, "end": 1182.0, "text": " Cool.", "tokens": [8561, 13], "temperature": 0.0, "avg_logprob": -0.23330100747041924, "compression_ratio": 1.1894736842105262, "no_speech_prob": 9.970314749807585e-06}, {"id": 231, "seek": 118200, "start": 1182.0, "end": 1193.0, "text": " OK, so cover just would be what we'd call flatten, I guess, in pytorch.", "tokens": [2264, 11, 370, 2060, 445, 576, 312, 437, 321, 1116, 818, 24183, 11, 286, 2041, 11, 294, 25878, 284, 339, 13], "temperature": 0.0, "avg_logprob": -0.33019308610395953, "compression_ratio": 1.448051948051948, "no_speech_prob": 6.539316473208601e-06}, {"id": 232, "seek": 118200, "start": 1193.0, "end": 1199.0, "text": " I think it will not flatten nested list nested arrays out though.", "tokens": [286, 519, 309, 486, 406, 24183, 15646, 292, 1329, 15646, 292, 41011, 484, 1673, 13], "temperature": 0.0, "avg_logprob": -0.33019308610395953, "compression_ratio": 1.448051948051948, "no_speech_prob": 6.539316473208601e-06}, {"id": 233, "seek": 118200, "start": 1199.0, "end": 1207.0, "text": " Right, which I don't think pytorch would do well that what I touch doesn't have them.", "tokens": [1779, 11, 597, 286, 500, 380, 519, 25878, 284, 339, 576, 360, 731, 300, 437, 286, 2557, 1177, 380, 362, 552, 13], "temperature": 0.0, "avg_logprob": -0.33019308610395953, "compression_ratio": 1.448051948051948, "no_speech_prob": 6.539316473208601e-06}, {"id": 234, "seek": 120700, "start": 1207.0, "end": 1214.0, "text": " But looking into the documentation, they are actually different from the Epsilon.", "tokens": [583, 1237, 666, 264, 14333, 11, 436, 366, 767, 819, 490, 264, 462, 16592, 13], "temperature": 0.0, "avg_logprob": -0.26539062872165586, "compression_ratio": 1.2583333333333333, "no_speech_prob": 5.305652302922681e-05}, {"id": 235, "seek": 120700, "start": 1214.0, "end": 1218.0, "text": " Very subtle different.", "tokens": [4372, 13743, 819, 13], "temperature": 0.0, "avg_logprob": -0.26539062872165586, "compression_ratio": 1.2583333333333333, "no_speech_prob": 5.305652302922681e-05}, {"id": 236, "seek": 120700, "start": 1218.0, "end": 1223.0, "text": " I don't think we've done Epsilon yet, have we?", "tokens": [286, 500, 380, 519, 321, 600, 1096, 462, 16592, 1939, 11, 362, 321, 30], "temperature": 0.0, "avg_logprob": -0.26539062872165586, "compression_ratio": 1.2583333333333333, "no_speech_prob": 5.305652302922681e-05}, {"id": 237, "seek": 122300, "start": 1223.0, "end": 1240.0, "text": " We should do it now. OK, well, we can do it now if that's something worth looking at. Yeah, so if we revel that.", "tokens": [492, 820, 360, 309, 586, 13, 2264, 11, 731, 11, 321, 393, 360, 309, 586, 498, 300, 311, 746, 3163, 1237, 412, 13, 865, 11, 370, 498, 321, 15262, 300, 13], "temperature": 0.0, "avg_logprob": -0.20029170696551984, "compression_ratio": 1.4788732394366197, "no_speech_prob": 4.637753136194078e-06}, {"id": 238, "seek": 122300, "start": 1240.0, "end": 1247.0, "text": " It's not a it's not a higher rank tensor. It's a array of arrays.", "tokens": [467, 311, 406, 257, 309, 311, 406, 257, 2946, 6181, 40863, 13, 467, 311, 257, 10225, 295, 41011, 13], "temperature": 0.0, "avg_logprob": -0.20029170696551984, "compression_ratio": 1.4788732394366197, "no_speech_prob": 4.637753136194078e-06}, {"id": 239, "seek": 122300, "start": 1247.0, "end": 1249.0, "text": " I guess that's worth including.", "tokens": [286, 2041, 300, 311, 3163, 3009, 13], "temperature": 0.0, "avg_logprob": -0.20029170696551984, "compression_ratio": 1.4788732394366197, "no_speech_prob": 4.637753136194078e-06}, {"id": 240, "seek": 124900, "start": 1249.0, "end": 1258.0, "text": " And yeah, Epsilon does flatten that out. I see. Let's do a simple one.", "tokens": [400, 1338, 11, 462, 16592, 775, 24183, 300, 484, 13, 286, 536, 13, 961, 311, 360, 257, 2199, 472, 13], "temperature": 0.0, "avg_logprob": -0.2866312435695103, "compression_ratio": 0.9487179487179487, "no_speech_prob": 6.2405360949924216e-06}, {"id": 241, "seek": 124900, "start": 1258.0, "end": 1262.0, "text": " OK.", "tokens": [2264, 13], "temperature": 0.0, "avg_logprob": -0.2866312435695103, "compression_ratio": 0.9487179487179487, "no_speech_prob": 6.2405360949924216e-06}, {"id": 242, "seek": 126200, "start": 1262.0, "end": 1283.0, "text": " Diadic comma. Oh, have we talked about axes yet?", "tokens": [8789, 43341, 22117, 13, 876, 11, 362, 321, 2825, 466, 35387, 1939, 30], "temperature": 0.0, "avg_logprob": -0.2410072750515408, "compression_ratio": 1.0123456790123457, "no_speech_prob": 6.539728929055855e-06}, {"id": 243, "seek": 126200, "start": 1283.0, "end": 1287.0, "text": " Does that ring a bell to anybody?", "tokens": [4402, 300, 4875, 257, 4549, 281, 4472, 30], "temperature": 0.0, "avg_logprob": -0.2410072750515408, "compression_ratio": 1.0123456790123457, "no_speech_prob": 6.539728929055855e-06}, {"id": 244, "seek": 128700, "start": 1287.0, "end": 1309.0, "text": " Yes. Oh, we've got them here, but we haven't talked about them.", "tokens": [1079, 13, 876, 11, 321, 600, 658, 552, 510, 11, 457, 321, 2378, 380, 2825, 466, 552, 13], "temperature": 0.0, "avg_logprob": -0.053569923747669564, "compression_ratio": 0.984375, "no_speech_prob": 1.0450196896272246e-05}, {"id": 245, "seek": 130900, "start": 1309.0, "end": 1320.0, "text": " Maybe let's create a section for axes then.", "tokens": [2704, 718, 311, 1884, 257, 3541, 337, 35387, 550, 13], "temperature": 0.0, "avg_logprob": -0.10311598437173027, "compression_ratio": 0.8431372549019608, "no_speech_prob": 5.0933972488564905e-06}, {"id": 246, "seek": 132000, "start": 1320.0, "end": 1344.0, "text": " And so let's move these. Because this is important.", "tokens": [400, 370, 718, 311, 1286, 613, 13, 1436, 341, 307, 1021, 13], "temperature": 0.0, "avg_logprob": -0.09232215583324432, "compression_ratio": 0.9444444444444444, "no_speech_prob": 8.26685118227033e-06}, {"id": 247, "seek": 134400, "start": 1344.0, "end": 1359.0, "text": " OK, let's move axes up to here.", "tokens": [2264, 11, 718, 311, 1286, 35387, 493, 281, 510, 13], "temperature": 0.0, "avg_logprob": -0.1946201835359846, "compression_ratio": 0.7948717948717948, "no_speech_prob": 8.013016667973716e-06}, {"id": 248, "seek": 135900, "start": 1359.0, "end": 1374.0, "text": " OK, so comma three, four. Oh, I think the problem is my little sample one's a bit broken.", "tokens": [2264, 11, 370, 22117, 1045, 11, 1451, 13, 876, 11, 286, 519, 264, 1154, 307, 452, 707, 6889, 472, 311, 257, 857, 5463, 13], "temperature": 0.0, "avg_logprob": -0.19470193309168662, "compression_ratio": 1.4154929577464788, "no_speech_prob": 2.5214499146386515e-06}, {"id": 249, "seek": 135900, "start": 1374.0, "end": 1379.0, "text": " See, that's why that's broken. OK.", "tokens": [3008, 11, 300, 311, 983, 300, 311, 5463, 13, 2264, 13], "temperature": 0.0, "avg_logprob": -0.19470193309168662, "compression_ratio": 1.4154929577464788, "no_speech_prob": 2.5214499146386515e-06}, {"id": 250, "seek": 135900, "start": 1379.0, "end": 1385.0, "text": " This is kind of an ax. This is probably kind of an operator, but never mind.", "tokens": [639, 307, 733, 295, 364, 6360, 13, 639, 307, 1391, 733, 295, 364, 12973, 11, 457, 1128, 1575, 13], "temperature": 0.0, "avg_logprob": -0.19470193309168662, "compression_ratio": 1.4154929577464788, "no_speech_prob": 2.5214499146386515e-06}, {"id": 251, "seek": 138500, "start": 1385.0, "end": 1399.0, "text": " So axes are things you put in square brackets after a function.", "tokens": [407, 35387, 366, 721, 291, 829, 294, 3732, 26179, 934, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.1849046594956342, "compression_ratio": 0.9545454545454546, "no_speech_prob": 4.494967470236588e-06}, {"id": 252, "seek": 139900, "start": 1399.0, "end": 1416.0, "text": " And it lets you apply that function over a particular axis.", "tokens": [400, 309, 6653, 291, 3079, 300, 2445, 670, 257, 1729, 10298, 13], "temperature": 0.0, "avg_logprob": -0.1087847448164417, "compression_ratio": 1.161904761904762, "no_speech_prob": 2.947979965028935e-06}, {"id": 253, "seek": 139900, "start": 1416.0, "end": 1423.0, "text": " Yeah, I think we started talking about these briefly, perhaps.", "tokens": [865, 11, 286, 519, 321, 1409, 1417, 466, 613, 10515, 11, 4317, 13], "temperature": 0.0, "avg_logprob": -0.1087847448164417, "compression_ratio": 1.161904761904762, "no_speech_prob": 2.947979965028935e-06}, {"id": 254, "seek": 142300, "start": 1423.0, "end": 1432.0, "text": " OK, it does not follow the normal syntax of an operator, so I'm not going to just call it a normal operator. That's why we're giving it its own spot.", "tokens": [2264, 11, 309, 775, 406, 1524, 264, 2710, 28431, 295, 364, 12973, 11, 370, 286, 478, 406, 516, 281, 445, 818, 309, 257, 2710, 12973, 13, 663, 311, 983, 321, 434, 2902, 309, 1080, 1065, 4008, 13], "temperature": 0.0, "avg_logprob": -0.07458335436307467, "compression_ratio": 1.3942857142857144, "no_speech_prob": 5.255339146970073e-06}, {"id": 255, "seek": 142300, "start": 1432.0, "end": 1446.0, "text": " And it can be applied to any dyadic primitive scalar function.", "tokens": [400, 309, 393, 312, 6456, 281, 604, 14584, 43341, 28540, 39684, 2445, 13], "temperature": 0.0, "avg_logprob": -0.07458335436307467, "compression_ratio": 1.3942857142857144, "no_speech_prob": 5.255339146970073e-06}, {"id": 256, "seek": 142300, "start": 1446.0, "end": 1451.0, "text": " This looks like a good example.", "tokens": [639, 1542, 411, 257, 665, 1365, 13], "temperature": 0.0, "avg_logprob": -0.07458335436307467, "compression_ratio": 1.3942857142857144, "no_speech_prob": 5.255339146970073e-06}, {"id": 257, "seek": 145100, "start": 1451.0, "end": 1459.0, "text": " OK, so.", "tokens": [2264, 11, 370, 13], "temperature": 0.0, "avg_logprob": -0.1525297313928604, "compression_ratio": 0.8333333333333334, "no_speech_prob": 2.090433326884522e-06}, {"id": 258, "seek": 145100, "start": 1459.0, "end": 1463.0, "text": " So this is a function.", "tokens": [407, 341, 307, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.1525297313928604, "compression_ratio": 0.8333333333333334, "no_speech_prob": 2.090433326884522e-06}, {"id": 259, "seek": 146300, "start": 1463.0, "end": 1482.0, "text": " It's going to apply equals to columns, I guess.", "tokens": [467, 311, 516, 281, 3079, 6915, 281, 13766, 11, 286, 2041, 13], "temperature": 0.0, "avg_logprob": -0.12770769175361185, "compression_ratio": 1.1948051948051948, "no_speech_prob": 1.349682975160249e-06}, {"id": 260, "seek": 146300, "start": 1482.0, "end": 1488.0, "text": " Let's see, one, four, five, one, four, five.", "tokens": [961, 311, 536, 11, 472, 11, 1451, 11, 1732, 11, 472, 11, 1451, 11, 1732, 13], "temperature": 0.0, "avg_logprob": -0.12770769175361185, "compression_ratio": 1.1948051948051948, "no_speech_prob": 1.349682975160249e-06}, {"id": 261, "seek": 148800, "start": 1488.0, "end": 1495.0, "text": " And so the way it describes it.", "tokens": [400, 370, 264, 636, 309, 15626, 309, 13], "temperature": 0.0, "avg_logprob": -0.1606818979436701, "compression_ratio": 1.4777070063694266, "no_speech_prob": 8.530116247129627e-06}, {"id": 262, "seek": 148800, "start": 1495.0, "end": 1500.0, "text": " Does it say what it is?", "tokens": [4402, 309, 584, 437, 309, 307, 30], "temperature": 0.0, "avg_logprob": -0.1606818979436701, "compression_ratio": 1.4777070063694266, "no_speech_prob": 8.530116247129627e-06}, {"id": 263, "seek": 148800, "start": 1500.0, "end": 1508.0, "text": " I've found that kind of the way that helped me kind of understand what it's doing is with plus slash.", "tokens": [286, 600, 1352, 300, 733, 295, 264, 636, 300, 4254, 385, 733, 295, 1223, 437, 309, 311, 884, 307, 365, 1804, 17330, 13], "temperature": 0.0, "avg_logprob": -0.1606818979436701, "compression_ratio": 1.4777070063694266, "no_speech_prob": 8.530116247129627e-06}, {"id": 264, "seek": 148800, "start": 1508.0, "end": 1514.0, "text": " Yeah. And you use the bracket access to have a matrix on some of the rows.", "tokens": [865, 13, 400, 291, 764, 264, 16904, 2105, 281, 362, 257, 8141, 322, 512, 295, 264, 13241, 13], "temperature": 0.0, "avg_logprob": -0.1606818979436701, "compression_ratio": 1.4777070063694266, "no_speech_prob": 8.530116247129627e-06}, {"id": 265, "seek": 151400, "start": 1514.0, "end": 1519.0, "text": " I'm hoping to do this before we do operators, though, which is why I was wanting to do a dyadic version.", "tokens": [286, 478, 7159, 281, 360, 341, 949, 321, 360, 19077, 11, 1673, 11, 597, 307, 983, 286, 390, 7935, 281, 360, 257, 14584, 43341, 3037, 13], "temperature": 0.0, "avg_logprob": -0.12964495340983073, "compression_ratio": 1.5340909090909092, "no_speech_prob": 1.1300183359708171e-05}, {"id": 266, "seek": 151400, "start": 1519.0, "end": 1526.0, "text": " I'm just trying to find anywhere in the help that actually say what it does.", "tokens": [286, 478, 445, 1382, 281, 915, 4992, 294, 264, 854, 300, 767, 584, 437, 309, 775, 13], "temperature": 0.0, "avg_logprob": -0.12964495340983073, "compression_ratio": 1.5340909090909092, "no_speech_prob": 1.1300183359708171e-05}, {"id": 267, "seek": 151400, "start": 1526.0, "end": 1534.0, "text": " I am having trouble seeing that here.", "tokens": [286, 669, 1419, 5253, 2577, 300, 510, 13], "temperature": 0.0, "avg_logprob": -0.12964495340983073, "compression_ratio": 1.5340909090909092, "no_speech_prob": 1.1300183359708171e-05}, {"id": 268, "seek": 151400, "start": 1534.0, "end": 1539.0, "text": " I don't think it actually says what R is, does it?", "tokens": [286, 500, 380, 519, 309, 767, 1619, 437, 497, 307, 11, 775, 309, 30], "temperature": 0.0, "avg_logprob": -0.12964495340983073, "compression_ratio": 1.5340909090909092, "no_speech_prob": 1.1300183359708171e-05}, {"id": 269, "seek": 153900, "start": 1539.0, "end": 1544.0, "text": " That's weird.", "tokens": [663, 311, 3657, 13], "temperature": 0.0, "avg_logprob": -0.25670001817786176, "compression_ratio": 1.3764705882352941, "no_speech_prob": 5.507513833435951e-06}, {"id": 270, "seek": 153900, "start": 1544.0, "end": 1549.0, "text": " Maybe this is a description. The access operator can take a scalar.", "tokens": [2704, 341, 307, 257, 3855, 13, 440, 2105, 12973, 393, 747, 257, 39684, 13], "temperature": 0.0, "avg_logprob": -0.25670001817786176, "compression_ratio": 1.3764705882352941, "no_speech_prob": 5.507513833435951e-06}, {"id": 271, "seek": 153900, "start": 1549.0, "end": 1552.0, "text": " No, that doesn't tell us either.", "tokens": [883, 11, 300, 1177, 380, 980, 505, 2139, 13], "temperature": 0.0, "avg_logprob": -0.25670001817786176, "compression_ratio": 1.3764705882352941, "no_speech_prob": 5.507513833435951e-06}, {"id": 272, "seek": 153900, "start": 1552.0, "end": 1556.0, "text": " I think the APL wiki has a better.", "tokens": [286, 519, 264, 5372, 43, 261, 9850, 575, 257, 1101, 13], "temperature": 0.0, "avg_logprob": -0.25670001817786176, "compression_ratio": 1.3764705882352941, "no_speech_prob": 5.507513833435951e-06}, {"id": 273, "seek": 153900, "start": 1556.0, "end": 1559.0, "text": " It often does information about.", "tokens": [467, 2049, 775, 1589, 466, 13], "temperature": 0.0, "avg_logprob": -0.25670001817786176, "compression_ratio": 1.3764705882352941, "no_speech_prob": 5.507513833435951e-06}, {"id": 274, "seek": 153900, "start": 1559.0, "end": 1563.0, "text": " Thanks. Under function access, if I remember right.", "tokens": [2561, 13, 6974, 2445, 2105, 11, 498, 286, 1604, 558, 13], "temperature": 0.0, "avg_logprob": -0.25670001817786176, "compression_ratio": 1.3764705882352941, "no_speech_prob": 5.507513833435951e-06}, {"id": 275, "seek": 156300, "start": 1563.0, "end": 1573.0, "text": " It's got better search to bracket access.", "tokens": [467, 311, 658, 1101, 3164, 281, 16904, 2105, 13], "temperature": 0.0, "avg_logprob": -0.19469767350416917, "compression_ratio": 0.8367346938775511, "no_speech_prob": 6.337455943139503e-06}, {"id": 276, "seek": 157300, "start": 1573.0, "end": 1595.0, "text": " Well, we're directed to branch function access.", "tokens": [1042, 11, 321, 434, 12898, 281, 9819, 2445, 2105, 13], "temperature": 0.0, "avg_logprob": -0.39960009711129324, "compression_ratio": 0.8545454545454545, "no_speech_prob": 2.560644134064205e-06}, {"id": 277, "seek": 159500, "start": 1595.0, "end": 1604.0, "text": " It seems like like different functions have different ways that access affects them. Is that what it is?", "tokens": [467, 2544, 411, 411, 819, 6828, 362, 819, 2098, 300, 2105, 11807, 552, 13, 1119, 300, 437, 309, 307, 30], "temperature": 0.0, "avg_logprob": -0.27741027600837476, "compression_ratio": 1.316326530612245, "no_speech_prob": 1.8160521904064808e-06}, {"id": 278, "seek": 159500, "start": 1604.0, "end": 1612.0, "text": " Oh, is that the problem?", "tokens": [876, 11, 307, 300, 264, 1154, 30], "temperature": 0.0, "avg_logprob": -0.27741027600837476, "compression_ratio": 1.316326530612245, "no_speech_prob": 1.8160521904064808e-06}, {"id": 279, "seek": 161200, "start": 1612.0, "end": 1638.0, "text": " I see. So it's hard to say exactly what it is because it varies.", "tokens": [286, 536, 13, 407, 309, 311, 1152, 281, 584, 2293, 437, 309, 307, 570, 309, 21716, 13], "temperature": 0.0, "avg_logprob": -0.09781244822910853, "compression_ratio": 0.9411764705882353, "no_speech_prob": 4.709532731794752e-06}, {"id": 280, "seek": 163800, "start": 1638.0, "end": 1645.0, "text": " OK. OK, so I guess, yeah, this is what we're actually doing is we've got an access with a scalar dyadic function.", "tokens": [2264, 13, 2264, 11, 370, 286, 2041, 11, 1338, 11, 341, 307, 437, 321, 434, 767, 884, 307, 321, 600, 658, 364, 2105, 365, 257, 39684, 14584, 43341, 2445, 13], "temperature": 0.0, "avg_logprob": -0.1578491985207737, "compression_ratio": 1.7109004739336493, "no_speech_prob": 1.653642470955674e-06}, {"id": 281, "seek": 163800, "start": 1645.0, "end": 1649.0, "text": " So plus as well equals as a scalar dyadic function.", "tokens": [407, 1804, 382, 731, 6915, 382, 257, 39684, 14584, 43341, 2445, 13], "temperature": 0.0, "avg_logprob": -0.1578491985207737, "compression_ratio": 1.7109004739336493, "no_speech_prob": 1.653642470955674e-06}, {"id": 282, "seek": 163800, "start": 1649.0, "end": 1654.0, "text": " It applied it's infix thing, which is going to have a scalar can have a scalar on the left and the right.", "tokens": [467, 6456, 309, 311, 1536, 970, 551, 11, 597, 307, 516, 281, 362, 257, 39684, 393, 362, 257, 39684, 322, 264, 1411, 293, 264, 558, 13], "temperature": 0.0, "avg_logprob": -0.1578491985207737, "compression_ratio": 1.7109004739336493, "no_speech_prob": 1.653642470955674e-06}, {"id": 283, "seek": 163800, "start": 1654.0, "end": 1658.0, "text": " Normally it would apply element wise over the scalars.", "tokens": [17424, 309, 576, 3079, 4478, 10829, 670, 264, 15664, 685, 13], "temperature": 0.0, "avg_logprob": -0.1578491985207737, "compression_ratio": 1.7109004739336493, "no_speech_prob": 1.653642470955674e-06}, {"id": 284, "seek": 163800, "start": 1658.0, "end": 1661.0, "text": " In this case, we've got an access.", "tokens": [682, 341, 1389, 11, 321, 600, 658, 364, 2105, 13], "temperature": 0.0, "avg_logprob": -0.1578491985207737, "compression_ratio": 1.7109004739336493, "no_speech_prob": 1.653642470955674e-06}, {"id": 285, "seek": 166100, "start": 1661.0, "end": 1668.0, "text": " So it stretches the lower rank array. So the one on the left is lower rank. This is rank one.", "tokens": [407, 309, 29058, 264, 3126, 6181, 10225, 13, 407, 264, 472, 322, 264, 1411, 307, 3126, 6181, 13, 639, 307, 6181, 472, 13], "temperature": 0.0, "avg_logprob": -0.10517101857199598, "compression_ratio": 1.7092198581560283, "no_speech_prob": 1.8448031369189266e-06}, {"id": 286, "seek": 166100, "start": 1668.0, "end": 1673.0, "text": " To fit the higher rank.", "tokens": [1407, 3318, 264, 2946, 6181, 13], "temperature": 0.0, "avg_logprob": -0.10517101857199598, "compression_ratio": 1.7092198581560283, "no_speech_prob": 1.8448031369189266e-06}, {"id": 287, "seek": 166100, "start": 1673.0, "end": 1677.0, "text": " The elements of the lower rank array are replicated.", "tokens": [440, 4959, 295, 264, 3126, 6181, 10225, 366, 46365, 13], "temperature": 0.0, "avg_logprob": -0.10517101857199598, "compression_ratio": 1.7092198581560283, "no_speech_prob": 1.8448031369189266e-06}, {"id": 288, "seek": 166100, "start": 1677.0, "end": 1683.0, "text": " So we want to apply this column wise.", "tokens": [407, 321, 528, 281, 3079, 341, 7738, 10829, 13], "temperature": 0.0, "avg_logprob": -0.10517101857199598, "compression_ratio": 1.7092198581560283, "no_speech_prob": 1.8448031369189266e-06}, {"id": 289, "seek": 166100, "start": 1683.0, "end": 1688.0, "text": " So these are treated as columns.", "tokens": [407, 613, 366, 8668, 382, 13766, 13], "temperature": 0.0, "avg_logprob": -0.10517101857199598, "compression_ratio": 1.7092198581560283, "no_speech_prob": 1.8448031369189266e-06}, {"id": 290, "seek": 168800, "start": 1688.0, "end": 1691.0, "text": " That makes sense.", "tokens": [663, 1669, 2020, 13], "temperature": 0.0, "avg_logprob": -0.1503410884312221, "compression_ratio": 1.5, "no_speech_prob": 2.5866602300084196e-05}, {"id": 291, "seek": 168800, "start": 1691.0, "end": 1701.0, "text": " And so you get one four five equals one three five and then one four five equals two four six.", "tokens": [400, 370, 291, 483, 472, 1451, 1732, 6915, 472, 1045, 1732, 293, 550, 472, 1451, 1732, 6915, 732, 1451, 2309, 13], "temperature": 0.0, "avg_logprob": -0.1503410884312221, "compression_ratio": 1.5, "no_speech_prob": 2.5866602300084196e-05}, {"id": 292, "seek": 168800, "start": 1701.0, "end": 1705.0, "text": " That's cool.", "tokens": [663, 311, 1627, 13], "temperature": 0.0, "avg_logprob": -0.1503410884312221, "compression_ratio": 1.5, "no_speech_prob": 2.5866602300084196e-05}, {"id": 293, "seek": 168800, "start": 1705.0, "end": 1712.0, "text": " OK, yeah, I think you're right, Nishik. I think that's the issue.", "tokens": [2264, 11, 1338, 11, 286, 519, 291, 434, 558, 11, 426, 742, 1035, 13, 286, 519, 300, 311, 264, 2734, 13], "temperature": 0.0, "avg_logprob": -0.1503410884312221, "compression_ratio": 1.5, "no_speech_prob": 2.5866602300084196e-05}, {"id": 294, "seek": 168800, "start": 1712.0, "end": 1716.0, "text": " That does make life a little confusing.", "tokens": [663, 775, 652, 993, 257, 707, 13181, 13], "temperature": 0.0, "avg_logprob": -0.1503410884312221, "compression_ratio": 1.5, "no_speech_prob": 2.5866602300084196e-05}, {"id": 295, "seek": 171600, "start": 1716.0, "end": 1725.0, "text": " All right. So let's use this example.", "tokens": [1057, 558, 13, 407, 718, 311, 764, 341, 1365, 13], "temperature": 0.0, "avg_logprob": -0.14605496610913957, "compression_ratio": 0.8222222222222222, "no_speech_prob": 1.202898238261696e-05}, {"id": 296, "seek": 172500, "start": 1725.0, "end": 1749.0, "text": " OK, so Matt is two rows of three columns of that.", "tokens": [2264, 11, 370, 7397, 307, 732, 13241, 295, 1045, 13766, 295, 300, 13], "temperature": 0.0, "avg_logprob": -0.14038986318251667, "compression_ratio": 0.9423076923076923, "no_speech_prob": 1.428408177162055e-05}, {"id": 297, "seek": 174900, "start": 1749.0, "end": 1756.0, "text": " OK.", "tokens": [2264, 13], "temperature": 0.0, "avg_logprob": -0.07003610975602094, "compression_ratio": 1.7611940298507462, "no_speech_prob": 1.3925190387453767e-06}, {"id": 298, "seek": 174900, "start": 1756.0, "end": 1763.0, "text": " So plus will be applied to columns.", "tokens": [407, 1804, 486, 312, 6456, 281, 13766, 13], "temperature": 0.0, "avg_logprob": -0.07003610975602094, "compression_ratio": 1.7611940298507462, "no_speech_prob": 1.3925190387453767e-06}, {"id": 299, "seek": 174900, "start": 1763.0, "end": 1769.0, "text": " This is the lower rank. So this will become a bunch of columns of one and two.", "tokens": [639, 307, 264, 3126, 6181, 13, 407, 341, 486, 1813, 257, 3840, 295, 13766, 295, 472, 293, 732, 13], "temperature": 0.0, "avg_logprob": -0.07003610975602094, "compression_ratio": 1.7611940298507462, "no_speech_prob": 1.3925190387453767e-06}, {"id": 300, "seek": 174900, "start": 1769.0, "end": 1775.0, "text": " So you get one and two added to this, one and two added to this, one and two added to this, which is exactly correct.", "tokens": [407, 291, 483, 472, 293, 732, 3869, 281, 341, 11, 472, 293, 732, 3869, 281, 341, 11, 472, 293, 732, 3869, 281, 341, 11, 597, 307, 2293, 3006, 13], "temperature": 0.0, "avg_logprob": -0.07003610975602094, "compression_ratio": 1.7611940298507462, "no_speech_prob": 1.3925190387453767e-06}, {"id": 301, "seek": 177500, "start": 1775.0, "end": 1781.0, "text": " OK. I think that makes sense.", "tokens": [2264, 13, 286, 519, 300, 1669, 2020, 13], "temperature": 0.0, "avg_logprob": -0.10741126859510267, "compression_ratio": 1.1441441441441442, "no_speech_prob": 3.555858256731881e-06}, {"id": 302, "seek": 177500, "start": 1781.0, "end": 1793.0, "text": " And so now what we're about to discover is that, for example, Ravel has its own special behavior.", "tokens": [400, 370, 586, 437, 321, 434, 466, 281, 4411, 307, 300, 11, 337, 1365, 11, 7591, 779, 575, 1080, 1065, 2121, 5223, 13], "temperature": 0.0, "avg_logprob": -0.10741126859510267, "compression_ratio": 1.1441441441441442, "no_speech_prob": 3.555858256731881e-06}, {"id": 303, "seek": 179300, "start": 1793.0, "end": 1806.0, "text": " With an axis. Here we are, Ravel with axes.", "tokens": [2022, 364, 10298, 13, 1692, 321, 366, 11, 7591, 779, 365, 35387, 13], "temperature": 0.0, "avg_logprob": -0.23127560282862464, "compression_ratio": 1.1941747572815533, "no_speech_prob": 1.0129310794582125e-05}, {"id": 304, "seek": 179300, "start": 1806.0, "end": 1811.0, "text": " K is the axis and it could be a fraction.", "tokens": [591, 307, 264, 10298, 293, 309, 727, 312, 257, 14135, 13], "temperature": 0.0, "avg_logprob": -0.23127560282862464, "compression_ratio": 1.1941747572815533, "no_speech_prob": 1.0129310794582125e-05}, {"id": 305, "seek": 179300, "start": 1811.0, "end": 1819.0, "text": " Or an integer. Or a vector. Or empty.", "tokens": [1610, 364, 24922, 13, 1610, 257, 8062, 13, 1610, 6707, 13], "temperature": 0.0, "avg_logprob": -0.23127560282862464, "compression_ratio": 1.1941747572815533, "no_speech_prob": 1.0129310794582125e-05}, {"id": 306, "seek": 181900, "start": 1819.0, "end": 1824.0, "text": " Well, OK, if it's a fraction.", "tokens": [1042, 11, 2264, 11, 498, 309, 311, 257, 14135, 13], "temperature": 0.0, "avg_logprob": -0.15528605665479386, "compression_ratio": 0.7837837837837838, "no_speech_prob": 7.718255073996261e-05}, {"id": 307, "seek": 182400, "start": 1824.0, "end": 1853.0, "text": " A new length, axis of length one is inserted.", "tokens": [316, 777, 4641, 11, 10298, 295, 4641, 472, 307, 27992, 13], "temperature": 0.0, "avg_logprob": -0.20417126019795737, "compression_ratio": 0.9782608695652174, "no_speech_prob": 0.00010379293962614611}, {"id": 308, "seek": 185300, "start": 1853.0, "end": 1860.0, "text": " Oh, yeah, you see the difference? We've got this.", "tokens": [876, 11, 1338, 11, 291, 536, 264, 2649, 30, 492, 600, 658, 341, 13], "temperature": 0.0, "avg_logprob": -0.14121703843812686, "compression_ratio": 1.5363128491620113, "no_speech_prob": 3.3404407986381557e-06}, {"id": 309, "seek": 185300, "start": 1860.0, "end": 1867.0, "text": " That's a bit subtle because you can't see it in the documentation, right, because they don't actually print the boxing.", "tokens": [663, 311, 257, 857, 13743, 570, 291, 393, 380, 536, 309, 294, 264, 14333, 11, 558, 11, 570, 436, 500, 380, 767, 4482, 264, 24424, 13], "temperature": 0.0, "avg_logprob": -0.14121703843812686, "compression_ratio": 1.5363128491620113, "no_speech_prob": 3.3404407986381557e-06}, {"id": 310, "seek": 185300, "start": 1867.0, "end": 1878.0, "text": " So I'm glad we've got boxing on. So this is inserted a new axis between the zeros axis and the ones axis.", "tokens": [407, 286, 478, 5404, 321, 600, 658, 24424, 322, 13, 407, 341, 307, 27992, 257, 777, 10298, 1296, 264, 35193, 10298, 293, 264, 2306, 10298, 13], "temperature": 0.0, "avg_logprob": -0.14121703843812686, "compression_ratio": 1.5363128491620113, "no_speech_prob": 3.3404407986381557e-06}, {"id": 311, "seek": 187800, "start": 1878.0, "end": 1887.0, "text": " And I think we could use anything between zero and one, it would do the same thing.", "tokens": [400, 286, 519, 321, 727, 764, 1340, 1296, 4018, 293, 472, 11, 309, 576, 360, 264, 912, 551, 13], "temperature": 0.0, "avg_logprob": -0.20487903248180042, "compression_ratio": 1.3525179856115108, "no_speech_prob": 1.0450504305481445e-05}, {"id": 312, "seek": 187800, "start": 1887.0, "end": 1900.0, "text": " So in NumPy, that would be the equivalent of indexing something with with none or NP.newAxis.", "tokens": [407, 294, 22592, 47, 88, 11, 300, 576, 312, 264, 10344, 295, 8186, 278, 746, 365, 365, 6022, 420, 38611, 13, 7686, 32, 39637, 13], "temperature": 0.0, "avg_logprob": -0.20487903248180042, "compression_ratio": 1.3525179856115108, "no_speech_prob": 1.0450504305481445e-05}, {"id": 313, "seek": 187800, "start": 1900.0, "end": 1905.0, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.20487903248180042, "compression_ratio": 1.3525179856115108, "no_speech_prob": 1.0450504305481445e-05}, {"id": 314, "seek": 190500, "start": 1905.0, "end": 1910.0, "text": " I think the documentation tried to show it by doing a row of that to show that it's...", "tokens": [286, 519, 264, 14333, 3031, 281, 855, 309, 538, 884, 257, 5386, 295, 300, 281, 855, 300, 309, 311, 485], "temperature": 0.0, "avg_logprob": -0.18875250705452853, "compression_ratio": 1.233644859813084, "no_speech_prob": 2.5065433874260634e-05}, {"id": 315, "seek": 190500, "start": 1910.0, "end": 1915.0, "text": " Oh, OK. Yeah, yeah, OK, got it. You're right.", "tokens": [876, 11, 2264, 13, 865, 11, 1338, 11, 2264, 11, 658, 309, 13, 509, 434, 558, 13], "temperature": 0.0, "avg_logprob": -0.18875250705452853, "compression_ratio": 1.233644859813084, "no_speech_prob": 2.5065433874260634e-05}, {"id": 316, "seek": 191500, "start": 1915.0, "end": 1940.0, "text": " Maybe we should do that as also just in case people don't notice the arrow.", "tokens": [2704, 321, 820, 360, 300, 382, 611, 445, 294, 1389, 561, 500, 380, 3449, 264, 11610, 13], "temperature": 0.0, "avg_logprob": -0.13680880410330637, "compression_ratio": 1.0273972602739727, "no_speech_prob": 1.4281125004345085e-05}, {"id": 317, "seek": 194000, "start": 1940.0, "end": 1948.0, "text": " The axis. All right.", "tokens": [440, 10298, 13, 1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.24353925387064615, "compression_ratio": 1.0444444444444445, "no_speech_prob": 7.410575108224293e-06}, {"id": 318, "seek": 194000, "start": 1948.0, "end": 1957.0, "text": " If it's an integer.", "tokens": [759, 309, 311, 364, 24922, 13], "temperature": 0.0, "avg_logprob": -0.24353925387064615, "compression_ratio": 1.0444444444444445, "no_speech_prob": 7.410575108224293e-06}, {"id": 319, "seek": 194000, "start": 1957.0, "end": 1961.0, "text": " Then it only revels along those axes.", "tokens": [1396, 309, 787, 15262, 82, 2051, 729, 35387, 13], "temperature": 0.0, "avg_logprob": -0.24353925387064615, "compression_ratio": 1.0444444444444445, "no_speech_prob": 7.410575108224293e-06}, {"id": 320, "seek": 194000, "start": 1961.0, "end": 1969.0, "text": " OK, no worries.", "tokens": [2264, 11, 572, 16340, 13], "temperature": 0.0, "avg_logprob": -0.24353925387064615, "compression_ratio": 1.0444444444444445, "no_speech_prob": 7.410575108224293e-06}, {"id": 321, "seek": 196900, "start": 1969.0, "end": 1989.0, "text": " So we're going to create something called M.", "tokens": [407, 321, 434, 516, 281, 1884, 746, 1219, 376, 13], "temperature": 0.0, "avg_logprob": -0.13469653470175608, "compression_ratio": 0.88, "no_speech_prob": 1.4969420590205118e-05}, {"id": 322, "seek": 198900, "start": 1989.0, "end": 2006.0, "text": " OK, so what they had. Yes, it is.", "tokens": [2264, 11, 370, 437, 436, 632, 13, 1079, 11, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.19857641061147055, "compression_ratio": 0.9672131147540983, "no_speech_prob": 4.222643383400282e-06}, {"id": 323, "seek": 198900, "start": 2006.0, "end": 2012.0, "text": " So what's happening here?", "tokens": [407, 437, 311, 2737, 510, 30], "temperature": 0.0, "avg_logprob": -0.19857641061147055, "compression_ratio": 0.9672131147540983, "no_speech_prob": 4.222643383400282e-06}, {"id": 324, "seek": 201200, "start": 2012.0, "end": 2020.0, "text": " OK, so then we're raveling over axes one and two, which are these two. No, we index from one, I guess.", "tokens": [2264, 11, 370, 550, 321, 434, 3342, 779, 278, 670, 35387, 472, 293, 732, 11, 597, 366, 613, 732, 13, 883, 11, 321, 8186, 490, 472, 11, 286, 2041, 13], "temperature": 0.0, "avg_logprob": -0.1402465991484813, "compression_ratio": 1.6257668711656441, "no_speech_prob": 6.339064384519588e-06}, {"id": 325, "seek": 201200, "start": 2020.0, "end": 2024.0, "text": " Or do we index from zero for axes?", "tokens": [1610, 360, 321, 8186, 490, 4018, 337, 35387, 30], "temperature": 0.0, "avg_logprob": -0.1402465991484813, "compression_ratio": 1.6257668711656441, "no_speech_prob": 6.339064384519588e-06}, {"id": 326, "seek": 201200, "start": 2024.0, "end": 2027.0, "text": " Hopefully we index from one because that's what we normally do.", "tokens": [10429, 321, 8186, 490, 472, 570, 300, 311, 437, 321, 5646, 360, 13], "temperature": 0.0, "avg_logprob": -0.1402465991484813, "compression_ratio": 1.6257668711656441, "no_speech_prob": 6.339064384519588e-06}, {"id": 327, "seek": 201200, "start": 2027.0, "end": 2035.0, "text": " So that would suggest we're indexing over, raveling over these.", "tokens": [407, 300, 576, 3402, 321, 434, 8186, 278, 670, 11, 3342, 779, 278, 670, 613, 13], "temperature": 0.0, "avg_logprob": -0.1402465991484813, "compression_ratio": 1.6257668711656441, "no_speech_prob": 6.339064384519588e-06}, {"id": 328, "seek": 203500, "start": 2035.0, "end": 2043.0, "text": " We're left with six four. Oh, OK. Wait. No, I'm slightly confused. This is the opposite of what I expected.", "tokens": [492, 434, 1411, 365, 2309, 1451, 13, 876, 11, 2264, 13, 3802, 13, 883, 11, 286, 478, 4748, 9019, 13, 639, 307, 264, 6182, 295, 437, 286, 5176, 13], "temperature": 0.0, "avg_logprob": -0.15221076176084322, "compression_ratio": 1.2980132450331126, "no_speech_prob": 9.36821561481338e-06}, {"id": 329, "seek": 203500, "start": 2043.0, "end": 2048.0, "text": " So this is left the trailing axis on its own.", "tokens": [407, 341, 307, 1411, 264, 944, 4883, 10298, 322, 1080, 1065, 13], "temperature": 0.0, "avg_logprob": -0.15221076176084322, "compression_ratio": 1.2980132450331126, "no_speech_prob": 9.36821561481338e-06}, {"id": 330, "seek": 203500, "start": 2048.0, "end": 2051.0, "text": " And the first two axes have been combined.", "tokens": [400, 264, 700, 732, 35387, 362, 668, 9354, 13], "temperature": 0.0, "avg_logprob": -0.15221076176084322, "compression_ratio": 1.2980132450331126, "no_speech_prob": 9.36821561481338e-06}, {"id": 331, "seek": 205100, "start": 2051.0, "end": 2068.0, "text": " Oh, so that's what this is saying is combine these two axes.", "tokens": [876, 11, 370, 300, 311, 437, 341, 307, 1566, 307, 10432, 613, 732, 35387, 13], "temperature": 0.0, "avg_logprob": -0.07383115227158005, "compression_ratio": 1.3043478260869565, "no_speech_prob": 4.4950625124329235e-06}, {"id": 332, "seek": 205100, "start": 2068.0, "end": 2077.0, "text": " Yes, it is. You can see here it's combining those two axes.", "tokens": [1079, 11, 309, 307, 13, 509, 393, 536, 510, 309, 311, 21928, 729, 732, 35387, 13], "temperature": 0.0, "avg_logprob": -0.07383115227158005, "compression_ratio": 1.3043478260869565, "no_speech_prob": 4.4950625124329235e-06}, {"id": 333, "seek": 207700, "start": 2077.0, "end": 2088.0, "text": " Does that make sense?", "tokens": [4402, 300, 652, 2020, 30], "temperature": 0.0, "avg_logprob": -0.0946643674695814, "compression_ratio": 1.2058823529411764, "no_speech_prob": 1.4737233868800104e-05}, {"id": 334, "seek": 207700, "start": 2088.0, "end": 2098.0, "text": " Anybody have any questions about that so far?", "tokens": [19082, 362, 604, 1651, 466, 300, 370, 1400, 30], "temperature": 0.0, "avg_logprob": -0.0946643674695814, "compression_ratio": 1.2058823529411764, "no_speech_prob": 1.4737233868800104e-05}, {"id": 335, "seek": 207700, "start": 2098.0, "end": 2104.0, "text": " I came in a bit late. Is ravel the opposite of unravel?", "tokens": [286, 1361, 294, 257, 857, 3469, 13, 1119, 3342, 779, 264, 6182, 295, 40507, 30], "temperature": 0.0, "avg_logprob": -0.0946643674695814, "compression_ratio": 1.2058823529411764, "no_speech_prob": 1.4737233868800104e-05}, {"id": 336, "seek": 210400, "start": 2104.0, "end": 2110.0, "text": " I haven't done unravel, so I have no idea. Is that a thing?", "tokens": [286, 2378, 380, 1096, 40507, 11, 370, 286, 362, 572, 1558, 13, 1119, 300, 257, 551, 30], "temperature": 0.0, "avg_logprob": -0.15207658965012122, "compression_ratio": 1.6330645161290323, "no_speech_prob": 5.6487824622308835e-05}, {"id": 337, "seek": 210400, "start": 2110.0, "end": 2117.0, "text": " I remember reading about it. Like, I came across it with NumPy before, and it was like something that NumPy has some kind of like a ravel method.", "tokens": [286, 1604, 3760, 466, 309, 13, 1743, 11, 286, 1361, 2108, 309, 365, 22592, 47, 88, 949, 11, 293, 309, 390, 411, 746, 300, 22592, 47, 88, 575, 512, 733, 295, 411, 257, 3342, 779, 3170, 13], "temperature": 0.0, "avg_logprob": -0.15207658965012122, "compression_ratio": 1.6330645161290323, "no_speech_prob": 5.6487824622308835e-05}, {"id": 338, "seek": 210400, "start": 2117.0, "end": 2123.0, "text": " And I was like confused. Like, I'm not sure if that's the opposite of. Oh, you mean just in English?", "tokens": [400, 286, 390, 411, 9019, 13, 1743, 11, 286, 478, 406, 988, 498, 300, 311, 264, 6182, 295, 13, 876, 11, 291, 914, 445, 294, 3669, 30], "temperature": 0.0, "avg_logprob": -0.15207658965012122, "compression_ratio": 1.6330645161290323, "no_speech_prob": 5.6487824622308835e-05}, {"id": 339, "seek": 210400, "start": 2123.0, "end": 2131.0, "text": " Yeah, I've never actually seen that word just by itself like that. Oh, I've not seen it in normal.", "tokens": [865, 11, 286, 600, 1128, 767, 1612, 300, 1349, 445, 538, 2564, 411, 300, 13, 876, 11, 286, 600, 406, 1612, 309, 294, 2710, 13], "temperature": 0.0, "avg_logprob": -0.15207658965012122, "compression_ratio": 1.6330645161290323, "no_speech_prob": 5.6487824622308835e-05}, {"id": 340, "seek": 213100, "start": 2131.0, "end": 2134.0, "text": " It's always just unravel something.", "tokens": [467, 311, 1009, 445, 40507, 746, 13], "temperature": 0.0, "avg_logprob": -0.22350942766344226, "compression_ratio": 1.4935064935064934, "no_speech_prob": 3.0239862098824233e-05}, {"id": 341, "seek": 213100, "start": 2134.0, "end": 2138.0, "text": " Oh, there's Ravel, the composer.", "tokens": [876, 11, 456, 311, 7591, 779, 11, 264, 26003, 13], "temperature": 0.0, "avg_logprob": -0.22350942766344226, "compression_ratio": 1.4935064935064934, "no_speech_prob": 3.0239862098824233e-05}, {"id": 342, "seek": 213100, "start": 2138.0, "end": 2141.0, "text": " Oh, here we go. Apparently it exists.", "tokens": [876, 11, 510, 321, 352, 13, 16755, 309, 8198, 13], "temperature": 0.0, "avg_logprob": -0.22350942766344226, "compression_ratio": 1.4935064935064934, "no_speech_prob": 3.0239862098824233e-05}, {"id": 343, "seek": 213100, "start": 2141.0, "end": 2144.0, "text": " To disentangle or unravel.", "tokens": [1407, 37313, 7846, 420, 40507, 13], "temperature": 0.0, "avg_logprob": -0.22350942766344226, "compression_ratio": 1.4935064935064934, "no_speech_prob": 3.0239862098824233e-05}, {"id": 344, "seek": 213100, "start": 2144.0, "end": 2147.0, "text": " Oh, that's confusing.", "tokens": [876, 11, 300, 311, 13181, 13], "temperature": 0.0, "avg_logprob": -0.22350942766344226, "compression_ratio": 1.4935064935064934, "no_speech_prob": 3.0239862098824233e-05}, {"id": 345, "seek": 213100, "start": 2147.0, "end": 2152.0, "text": " To become unwoven.", "tokens": [1407, 1813, 517, 6120, 553, 13], "temperature": 0.0, "avg_logprob": -0.22350942766344226, "compression_ratio": 1.4935064935064934, "no_speech_prob": 3.0239862098824233e-05}, {"id": 346, "seek": 213100, "start": 2152.0, "end": 2157.0, "text": " It sounds like the same as. Sounds the same as unravel.", "tokens": [467, 3263, 411, 264, 912, 382, 13, 14576, 264, 912, 382, 40507, 13], "temperature": 0.0, "avg_logprob": -0.22350942766344226, "compression_ratio": 1.4935064935064934, "no_speech_prob": 3.0239862098824233e-05}, {"id": 347, "seek": 215700, "start": 2157.0, "end": 2161.0, "text": " Like, inflammable means flammable.", "tokens": [1743, 11, 16782, 712, 1355, 932, 5136, 712, 13], "temperature": 0.0, "avg_logprob": -0.1726987361907959, "compression_ratio": 1.5340909090909092, "no_speech_prob": 3.7623904063366354e-05}, {"id": 348, "seek": 215700, "start": 2161.0, "end": 2165.0, "text": " So it's one of those things.", "tokens": [407, 309, 311, 472, 295, 729, 721, 13], "temperature": 0.0, "avg_logprob": -0.1726987361907959, "compression_ratio": 1.5340909090909092, "no_speech_prob": 3.7623904063366354e-05}, {"id": 349, "seek": 215700, "start": 2165.0, "end": 2168.0, "text": " Thank you for checking the dictionary for me.", "tokens": [1044, 291, 337, 8568, 264, 25890, 337, 385, 13], "temperature": 0.0, "avg_logprob": -0.1726987361907959, "compression_ratio": 1.5340909090909092, "no_speech_prob": 3.7623904063366354e-05}, {"id": 350, "seek": 215700, "start": 2168.0, "end": 2176.0, "text": " Somebody said hello in the chat. Hello Miguel. Are you able to speak or are you just on text chat today?", "tokens": [13463, 848, 7751, 294, 264, 5081, 13, 2425, 29150, 13, 2014, 291, 1075, 281, 1710, 420, 366, 291, 445, 322, 2487, 5081, 965, 30], "temperature": 0.0, "avg_logprob": -0.1726987361907959, "compression_ratio": 1.5340909090909092, "no_speech_prob": 3.7623904063366354e-05}, {"id": 351, "seek": 215700, "start": 2176.0, "end": 2179.0, "text": " Miguel said.", "tokens": [29150, 848, 13], "temperature": 0.0, "avg_logprob": -0.1726987361907959, "compression_ratio": 1.5340909090909092, "no_speech_prob": 3.7623904063366354e-05}, {"id": 352, "seek": 215700, "start": 2179.0, "end": 2182.0, "text": " I'm able to speak. I've just been lurking.", "tokens": [286, 478, 1075, 281, 1710, 13, 286, 600, 445, 668, 35583, 5092, 13], "temperature": 0.0, "avg_logprob": -0.1726987361907959, "compression_ratio": 1.5340909090909092, "no_speech_prob": 3.7623904063366354e-05}, {"id": 353, "seek": 218200, "start": 2182.0, "end": 2188.0, "text": " Yeah, tell us what you said in the chat.", "tokens": [865, 11, 980, 505, 437, 291, 848, 294, 264, 5081, 13], "temperature": 0.0, "avg_logprob": -0.16206345864392202, "compression_ratio": 1.6238938053097345, "no_speech_prob": 0.00014415776240639389}, {"id": 354, "seek": 218200, "start": 2188.0, "end": 2193.0, "text": " Yeah, I'm Ravel, I do think means the opposite of unravel.", "tokens": [865, 11, 286, 478, 7591, 779, 11, 286, 360, 519, 1355, 264, 6182, 295, 40507, 13], "temperature": 0.0, "avg_logprob": -0.16206345864392202, "compression_ratio": 1.6238938053097345, "no_speech_prob": 0.00014415776240639389}, {"id": 355, "seek": 218200, "start": 2193.0, "end": 2196.0, "text": " Yes, I mean, tell us what you said earlier in the chat.", "tokens": [1079, 11, 286, 914, 11, 980, 505, 437, 291, 848, 3071, 294, 264, 5081, 13], "temperature": 0.0, "avg_logprob": -0.16206345864392202, "compression_ratio": 1.6238938053097345, "no_speech_prob": 0.00014415776240639389}, {"id": 356, "seek": 218200, "start": 2196.0, "end": 2199.0, "text": " You had something about BQN?", "tokens": [509, 632, 746, 466, 363, 48, 45, 30], "temperature": 0.0, "avg_logprob": -0.16206345864392202, "compression_ratio": 1.6238938053097345, "no_speech_prob": 0.00014415776240639389}, {"id": 357, "seek": 218200, "start": 2199.0, "end": 2205.0, "text": " Yeah, I joined a while ago. I'm also a fan of rare programming languages and memorization techniques.", "tokens": [865, 11, 286, 6869, 257, 1339, 2057, 13, 286, 478, 611, 257, 3429, 295, 5892, 9410, 8650, 293, 10560, 2144, 7512, 13], "temperature": 0.0, "avg_logprob": -0.16206345864392202, "compression_ratio": 1.6238938053097345, "no_speech_prob": 0.00014415776240639389}, {"id": 358, "seek": 218200, "start": 2205.0, "end": 2210.0, "text": " So I caught up with earlier sessions and I made an Anki deck for the BQN glyphs.", "tokens": [407, 286, 5415, 493, 365, 3071, 11081, 293, 286, 1027, 364, 1107, 2984, 9341, 337, 264, 363, 48, 45, 22633, 950, 82, 13], "temperature": 0.0, "avg_logprob": -0.16206345864392202, "compression_ratio": 1.6238938053097345, "no_speech_prob": 0.00014415776240639389}, {"id": 359, "seek": 221000, "start": 2210.0, "end": 2213.0, "text": " And is that in here somewhere?", "tokens": [400, 307, 300, 294, 510, 4079, 30], "temperature": 0.0, "avg_logprob": -0.21460238865443637, "compression_ratio": 1.4107142857142858, "no_speech_prob": 5.471662734635174e-05}, {"id": 360, "seek": 221000, "start": 2213.0, "end": 2215.0, "text": " Miguel Razz's Anki deck.", "tokens": [29150, 497, 9112, 311, 1107, 2984, 9341, 13], "temperature": 0.0, "avg_logprob": -0.21460238865443637, "compression_ratio": 1.4107142857142858, "no_speech_prob": 5.471662734635174e-05}, {"id": 361, "seek": 221000, "start": 2215.0, "end": 2217.0, "text": " Yeah. Excellent.", "tokens": [865, 13, 16723, 13], "temperature": 0.0, "avg_logprob": -0.21460238865443637, "compression_ratio": 1.4107142857142858, "no_speech_prob": 5.471662734635174e-05}, {"id": 362, "seek": 221000, "start": 2217.0, "end": 2226.0, "text": " So how long? Okay, so let me just go back a bit. So probably not everybody here knows what BQN is. So do you want to tell us about BQN?", "tokens": [407, 577, 938, 30, 1033, 11, 370, 718, 385, 445, 352, 646, 257, 857, 13, 407, 1391, 406, 2201, 510, 3255, 437, 363, 48, 45, 307, 13, 407, 360, 291, 528, 281, 980, 505, 466, 363, 48, 45, 30], "temperature": 0.0, "avg_logprob": -0.21460238865443637, "compression_ratio": 1.4107142857142858, "no_speech_prob": 5.471662734635174e-05}, {"id": 363, "seek": 221000, "start": 2226.0, "end": 2229.0, "text": " So BQN is a,", "tokens": [407, 363, 48, 45, 307, 257, 11], "temperature": 0.0, "avg_logprob": -0.21460238865443637, "compression_ratio": 1.4107142857142858, "no_speech_prob": 5.471662734635174e-05}, {"id": 364, "seek": 221000, "start": 2229.0, "end": 2233.0, "text": " another offshoot of APL. It's free and open source.", "tokens": [1071, 39457, 24467, 295, 5372, 43, 13, 467, 311, 1737, 293, 1269, 4009, 13], "temperature": 0.0, "avg_logprob": -0.21460238865443637, "compression_ratio": 1.4107142857142858, "no_speech_prob": 5.471662734635174e-05}, {"id": 365, "seek": 221000, "start": 2233.0, "end": 2236.0, "text": " And if you go to the community page there,", "tokens": [400, 498, 291, 352, 281, 264, 1768, 3028, 456, 11], "temperature": 0.0, "avg_logprob": -0.21460238865443637, "compression_ratio": 1.4107142857142858, "no_speech_prob": 5.471662734635174e-05}, {"id": 366, "seek": 223600, "start": 2236.0, "end": 2240.0, "text": " that's the online rebel too so you can just try it out in your browser.", "tokens": [300, 311, 264, 2950, 28293, 886, 370, 291, 393, 445, 853, 309, 484, 294, 428, 11185, 13], "temperature": 0.0, "avg_logprob": -0.21074203144420278, "compression_ratio": 1.6650717703349283, "no_speech_prob": 0.00014419328363146633}, {"id": 367, "seek": 223600, "start": 2240.0, "end": 2247.0, "text": " And there's now my Anki deck link there, so that you can also learn the glyphs on the community page.", "tokens": [400, 456, 311, 586, 452, 1107, 2984, 9341, 2113, 456, 11, 370, 300, 291, 393, 611, 1466, 264, 22633, 950, 82, 322, 264, 1768, 3028, 13], "temperature": 0.0, "avg_logprob": -0.21074203144420278, "compression_ratio": 1.6650717703349283, "no_speech_prob": 0.00014419328363146633}, {"id": 368, "seek": 223600, "start": 2247.0, "end": 2253.0, "text": " Where's the, sorry, you said there was an online rebel here somewhere?", "tokens": [2305, 311, 264, 11, 2597, 11, 291, 848, 456, 390, 364, 2950, 28293, 510, 4079, 30], "temperature": 0.0, "avg_logprob": -0.21074203144420278, "compression_ratio": 1.6650717703349283, "no_speech_prob": 0.00014419328363146633}, {"id": 369, "seek": 223600, "start": 2253.0, "end": 2254.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.21074203144420278, "compression_ratio": 1.6650717703349283, "no_speech_prob": 0.00014419328363146633}, {"id": 370, "seek": 223600, "start": 2254.0, "end": 2255.0, "text": " Where is that?", "tokens": [2305, 307, 300, 30], "temperature": 0.0, "avg_logprob": -0.21074203144420278, "compression_ratio": 1.6650717703349283, "no_speech_prob": 0.00014419328363146633}, {"id": 371, "seek": 223600, "start": 2255.0, "end": 2257.0, "text": " Click back.", "tokens": [8230, 646, 13], "temperature": 0.0, "avg_logprob": -0.21074203144420278, "compression_ratio": 1.6650717703349283, "no_speech_prob": 0.00014419328363146633}, {"id": 372, "seek": 223600, "start": 2257.0, "end": 2261.0, "text": " Oh, you mean on here? Yeah.", "tokens": [876, 11, 291, 914, 322, 510, 30, 865, 13], "temperature": 0.0, "avg_logprob": -0.21074203144420278, "compression_ratio": 1.6650717703349283, "no_speech_prob": 0.00014419328363146633}, {"id": 373, "seek": 223600, "start": 2261.0, "end": 2262.0, "text": " That's a...", "tokens": [663, 311, 257, 485], "temperature": 0.0, "avg_logprob": -0.21074203144420278, "compression_ratio": 1.6650717703349283, "no_speech_prob": 0.00014419328363146633}, {"id": 374, "seek": 223600, "start": 2262.0, "end": 2264.0, "text": " Oh, you can actually, this is?", "tokens": [876, 11, 291, 393, 767, 11, 341, 307, 30], "temperature": 0.0, "avg_logprob": -0.21074203144420278, "compression_ratio": 1.6650717703349283, "no_speech_prob": 0.00014419328363146633}, {"id": 375, "seek": 226400, "start": 2264.0, "end": 2267.0, "text": " Yeah. I see. You can go until then.", "tokens": [865, 13, 286, 536, 13, 509, 393, 352, 1826, 550, 13], "temperature": 0.0, "avg_logprob": -0.14947013854980468, "compression_ratio": 1.5485436893203883, "no_speech_prob": 5.2240353397792205e-05}, {"id": 376, "seek": 226400, "start": 2267.0, "end": 2269.0, "text": " That's nifty.", "tokens": [663, 311, 297, 37177, 13], "temperature": 0.0, "avg_logprob": -0.14947013854980468, "compression_ratio": 1.5485436893203883, "no_speech_prob": 5.2240353397792205e-05}, {"id": 377, "seek": 226400, "start": 2269.0, "end": 2281.0, "text": " So BQN, all I know about it really is from listening to the ArrayCast episode with the creator of it, Marshall Lockburn, who used to work at BQN.", "tokens": [407, 363, 48, 45, 11, 439, 286, 458, 466, 309, 534, 307, 490, 4764, 281, 264, 1587, 3458, 34, 525, 3500, 365, 264, 14181, 295, 309, 11, 17279, 16736, 21763, 11, 567, 1143, 281, 589, 412, 363, 48, 45, 13], "temperature": 0.0, "avg_logprob": -0.14947013854980468, "compression_ratio": 1.5485436893203883, "no_speech_prob": 5.2240353397792205e-05}, {"id": 378, "seek": 226400, "start": 2281.0, "end": 2290.0, "text": " And from listening to the ArrayCast chat with the CTO of Dialog, he described Marshall as basically wanting to go too fast.", "tokens": [400, 490, 4764, 281, 264, 1587, 3458, 34, 525, 5081, 365, 264, 383, 15427, 295, 29658, 664, 11, 415, 7619, 17279, 382, 1936, 7935, 281, 352, 886, 2370, 13], "temperature": 0.0, "avg_logprob": -0.14947013854980468, "compression_ratio": 1.5485436893203883, "no_speech_prob": 5.2240353397792205e-05}, {"id": 379, "seek": 229000, "start": 2290.0, "end": 2313.0, "text": " And so Marshall left Dialog and rather than trying to turn APL into the thing he really wanted it to be, he decided to start from scratch and create a new array language to be all the stuff that he wished Dialog APL was, I guess, or wished APL was based on, you know, all the things we've learned about array programming since.", "tokens": [400, 370, 17279, 1411, 29658, 664, 293, 2831, 813, 1382, 281, 1261, 5372, 43, 666, 264, 551, 415, 534, 1415, 309, 281, 312, 11, 415, 3047, 281, 722, 490, 8459, 293, 1884, 257, 777, 10225, 2856, 281, 312, 439, 264, 1507, 300, 415, 25811, 29658, 664, 5372, 43, 390, 11, 286, 2041, 11, 420, 25811, 5372, 43, 390, 2361, 322, 11, 291, 458, 11, 439, 264, 721, 321, 600, 3264, 466, 10225, 9410, 1670, 13], "temperature": 0.0, "avg_logprob": -0.11784605436687227, "compression_ratio": 1.5645933014354068, "no_speech_prob": 2.9764643841190264e-05}, {"id": 380, "seek": 231300, "start": 2313.0, "end": 2320.0, "text": " It uses its own character set, which some things look familiar to me like downstyle and upstyle.", "tokens": [467, 4960, 1080, 1065, 2517, 992, 11, 597, 512, 721, 574, 4963, 281, 385, 411, 760, 15014, 293, 493, 15014, 13], "temperature": 0.0, "avg_logprob": -0.10641358407695642, "compression_ratio": 1.5810810810810811, "no_speech_prob": 5.681720267602941e-06}, {"id": 381, "seek": 231300, "start": 2320.0, "end": 2326.0, "text": " And these ones look the same, but there's also some symbols that aren't in APL.", "tokens": [400, 613, 2306, 574, 264, 912, 11, 457, 456, 311, 611, 512, 16944, 300, 3212, 380, 294, 5372, 43, 13], "temperature": 0.0, "avg_logprob": -0.10641358407695642, "compression_ratio": 1.5810810810810811, "no_speech_prob": 5.681720267602941e-06}, {"id": 382, "seek": 231300, "start": 2326.0, "end": 2336.0, "text": " Yeah, there's also something interesting where they use stranding for the limiting lists. So that reduces ambiguity in the language grammar.", "tokens": [865, 11, 456, 311, 611, 746, 1880, 689, 436, 764, 14955, 278, 337, 264, 22083, 14511, 13, 407, 300, 18081, 46519, 294, 264, 2856, 22317, 13], "temperature": 0.0, "avg_logprob": -0.10641358407695642, "compression_ratio": 1.5810810810810811, "no_speech_prob": 5.681720267602941e-06}, {"id": 383, "seek": 231300, "start": 2336.0, "end": 2338.0, "text": " That's this one here, right?", "tokens": [663, 311, 341, 472, 510, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.10641358407695642, "compression_ratio": 1.5810810810810811, "no_speech_prob": 5.681720267602941e-06}, {"id": 384, "seek": 231300, "start": 2338.0, "end": 2339.0, "text": " Yep.", "tokens": [7010, 13], "temperature": 0.0, "avg_logprob": -0.10641358407695642, "compression_ratio": 1.5810810810810811, "no_speech_prob": 5.681720267602941e-06}, {"id": 385, "seek": 233900, "start": 2339.0, "end": 2358.0, "text": " Yeah, so stranding means this. Okay, so apparently this was a huge area of contention some decades ago, being able to basically do this to create an array of arrays is called stranding.", "tokens": [865, 11, 370, 14955, 278, 1355, 341, 13, 1033, 11, 370, 7970, 341, 390, 257, 2603, 1859, 295, 660, 1251, 512, 7878, 2057, 11, 885, 1075, 281, 1936, 360, 341, 281, 1884, 364, 10225, 295, 41011, 307, 1219, 14955, 278, 13], "temperature": 0.0, "avg_logprob": -0.12242066860198975, "compression_ratio": 1.646153846153846, "no_speech_prob": 8.939089639170561e-06}, {"id": 386, "seek": 233900, "start": 2358.0, "end": 2366.0, "text": " And in BQN, can you create a list like this or even this list would require that stranding character?", "tokens": [400, 294, 363, 48, 45, 11, 393, 291, 1884, 257, 1329, 411, 341, 420, 754, 341, 1329, 576, 3651, 300, 14955, 278, 2517, 30], "temperature": 0.0, "avg_logprob": -0.12242066860198975, "compression_ratio": 1.646153846153846, "no_speech_prob": 8.939089639170561e-06}, {"id": 387, "seek": 233900, "start": 2366.0, "end": 2368.0, "text": " You need the stranding character.", "tokens": [509, 643, 264, 14955, 278, 2517, 13], "temperature": 0.0, "avg_logprob": -0.12242066860198975, "compression_ratio": 1.646153846153846, "no_speech_prob": 8.939089639170561e-06}, {"id": 388, "seek": 236800, "start": 2368.0, "end": 2382.0, "text": " Okay, so you can't just write one space, two space, three. Instead you have to use this, this thing. So, one, two, three.", "tokens": [1033, 11, 370, 291, 393, 380, 445, 2464, 472, 1901, 11, 732, 1901, 11, 1045, 13, 7156, 291, 362, 281, 764, 341, 11, 341, 551, 13, 407, 11, 472, 11, 732, 11, 1045, 13], "temperature": 0.0, "avg_logprob": -0.1787021790427723, "compression_ratio": 1.5634517766497462, "no_speech_prob": 1.1300168807792943e-05}, {"id": 389, "seek": 236800, "start": 2382.0, "end": 2388.0, "text": " What just happened? That didn't work the way I expected. Oh, that arrow must do something different to what I thought it did.", "tokens": [708, 445, 2011, 30, 663, 994, 380, 589, 264, 636, 286, 5176, 13, 876, 11, 300, 11610, 1633, 360, 746, 819, 281, 437, 286, 1194, 309, 630, 13], "temperature": 0.0, "avg_logprob": -0.1787021790427723, "compression_ratio": 1.5634517766497462, "no_speech_prob": 1.1300168807792943e-05}, {"id": 390, "seek": 236800, "start": 2388.0, "end": 2393.0, "text": " Do I have to press enter instead?", "tokens": [1144, 286, 362, 281, 1886, 3242, 2602, 30], "temperature": 0.0, "avg_logprob": -0.1787021790427723, "compression_ratio": 1.5634517766497462, "no_speech_prob": 1.1300168807792943e-05}, {"id": 391, "seek": 236800, "start": 2393.0, "end": 2395.0, "text": " What button do I press to?", "tokens": [708, 2960, 360, 286, 1886, 281, 30], "temperature": 0.0, "avg_logprob": -0.1787021790427723, "compression_ratio": 1.5634517766497462, "no_speech_prob": 1.1300168807792943e-05}, {"id": 392, "seek": 239500, "start": 2395.0, "end": 2401.0, "text": " I do shift enter.", "tokens": [286, 360, 5513, 3242, 13], "temperature": 0.0, "avg_logprob": -0.13621340857611763, "compression_ratio": 1.4251968503937007, "no_speech_prob": 5.954901553195668e-06}, {"id": 393, "seek": 239500, "start": 2401.0, "end": 2410.0, "text": " So I think it took some of the ideas from Jay, some ideas from APL, some ideas that aren't in APL yet.", "tokens": [407, 286, 519, 309, 1890, 512, 295, 264, 3487, 490, 11146, 11, 512, 3487, 490, 5372, 43, 11, 512, 3487, 300, 3212, 380, 294, 5372, 43, 1939, 13], "temperature": 0.0, "avg_logprob": -0.13621340857611763, "compression_ratio": 1.4251968503937007, "no_speech_prob": 5.954901553195668e-06}, {"id": 394, "seek": 239500, "start": 2410.0, "end": 2417.0, "text": " So definitely something I'm keen to check out at some point.", "tokens": [407, 2138, 746, 286, 478, 20297, 281, 1520, 484, 412, 512, 935, 13], "temperature": 0.0, "avg_logprob": -0.13621340857611763, "compression_ratio": 1.4251968503937007, "no_speech_prob": 5.954901553195668e-06}, {"id": 395, "seek": 241700, "start": 2417.0, "end": 2433.0, "text": " What are your thoughts so far Miguel about BQN, like as a language for learning array programming or doing data analysis and or having fun?", "tokens": [708, 366, 428, 4598, 370, 1400, 29150, 466, 363, 48, 45, 11, 411, 382, 257, 2856, 337, 2539, 10225, 9410, 420, 884, 1412, 5215, 293, 420, 1419, 1019, 30], "temperature": 0.0, "avg_logprob": -0.13149263012793758, "compression_ratio": 1.391304347826087, "no_speech_prob": 1.0288091289112344e-05}, {"id": 396, "seek": 241700, "start": 2433.0, "end": 2444.0, "text": " There's less literature than APL, which has decades. So, translating a lot of the materials into BQN is interesting.", "tokens": [821, 311, 1570, 10394, 813, 5372, 43, 11, 597, 575, 7878, 13, 407, 11, 35030, 257, 688, 295, 264, 5319, 666, 363, 48, 45, 307, 1880, 13], "temperature": 0.0, "avg_logprob": -0.13149263012793758, "compression_ratio": 1.391304347826087, "no_speech_prob": 1.0288091289112344e-05}, {"id": 397, "seek": 244400, "start": 2444.0, "end": 2455.0, "text": " I enjoy it. I found it way easier to get started with because I couldn't work out how to download the APL thing and get it working on my computer.", "tokens": [286, 2103, 309, 13, 286, 1352, 309, 636, 3571, 281, 483, 1409, 365, 570, 286, 2809, 380, 589, 484, 577, 281, 5484, 264, 5372, 43, 551, 293, 483, 309, 1364, 322, 452, 3820, 13], "temperature": 0.0, "avg_logprob": -0.11029493668500115, "compression_ratio": 1.4854368932038835, "no_speech_prob": 3.167943577864207e-05}, {"id": 398, "seek": 244400, "start": 2455.0, "end": 2459.0, "text": " So I just started with BQN.", "tokens": [407, 286, 445, 1409, 365, 363, 48, 45, 13], "temperature": 0.0, "avg_logprob": -0.11029493668500115, "compression_ratio": 1.4854368932038835, "no_speech_prob": 3.167943577864207e-05}, {"id": 399, "seek": 244400, "start": 2459.0, "end": 2467.0, "text": " And Jay has just, I think, put a little joke in the chat, which I think I understand. He said it's the less healthy version of APL.", "tokens": [400, 11146, 575, 445, 11, 286, 519, 11, 829, 257, 707, 7647, 294, 264, 5081, 11, 597, 286, 519, 286, 1223, 13, 634, 848, 309, 311, 264, 1570, 4627, 3037, 295, 5372, 43, 13], "temperature": 0.0, "avg_logprob": -0.11029493668500115, "compression_ratio": 1.4854368932038835, "no_speech_prob": 3.167943577864207e-05}, {"id": 400, "seek": 246700, "start": 2467.0, "end": 2477.0, "text": " I assume where APL we read as Apple and BQN we read as bacon.", "tokens": [286, 6552, 689, 5372, 43, 321, 1401, 382, 6373, 293, 363, 48, 45, 321, 1401, 382, 16400, 13], "temperature": 0.0, "avg_logprob": -0.10387789862496512, "compression_ratio": 1.5, "no_speech_prob": 4.0683578845346346e-05}, {"id": 401, "seek": 246700, "start": 2477.0, "end": 2483.0, "text": " And according to the documentation for BQN, you're not meant to call it bacon unless you're making a joke.", "tokens": [400, 4650, 281, 264, 14333, 337, 363, 48, 45, 11, 291, 434, 406, 4140, 281, 818, 309, 16400, 5969, 291, 434, 1455, 257, 7647, 13], "temperature": 0.0, "avg_logprob": -0.10387789862496512, "compression_ratio": 1.5, "no_speech_prob": 4.0683578845346346e-05}, {"id": 402, "seek": 246700, "start": 2483.0, "end": 2489.0, "text": " So you are allowed to call it bacon in this situation.", "tokens": [407, 291, 366, 4350, 281, 818, 309, 16400, 294, 341, 2590, 13], "temperature": 0.0, "avg_logprob": -0.10387789862496512, "compression_ratio": 1.5, "no_speech_prob": 4.0683578845346346e-05}, {"id": 403, "seek": 246700, "start": 2489.0, "end": 2495.0, "text": " All right. Nice.", "tokens": [1057, 558, 13, 5490, 13], "temperature": 0.0, "avg_logprob": -0.10387789862496512, "compression_ratio": 1.5, "no_speech_prob": 4.0683578845346346e-05}, {"id": 404, "seek": 249500, "start": 2495.0, "end": 2502.0, "text": " We are not as yet unraveled, I don't think.", "tokens": [492, 366, 406, 382, 1939, 40507, 292, 11, 286, 500, 380, 519, 13], "temperature": 0.0, "avg_logprob": -0.20014401844569615, "compression_ratio": 1.3795620437956204, "no_speech_prob": 1.2218594747537281e-05}, {"id": 405, "seek": 249500, "start": 2502.0, "end": 2505.0, "text": " Guess we should do this one now.", "tokens": [17795, 321, 820, 360, 341, 472, 586, 13], "temperature": 0.0, "avg_logprob": -0.20014401844569615, "compression_ratio": 1.3795620437956204, "no_speech_prob": 1.2218594747537281e-05}, {"id": 406, "seek": 249500, "start": 2505.0, "end": 2512.0, "text": " Add it comma.", "tokens": [5349, 309, 22117, 13], "temperature": 0.0, "avg_logprob": -0.20014401844569615, "compression_ratio": 1.3795620437956204, "no_speech_prob": 1.2218594747537281e-05}, {"id": 407, "seek": 249500, "start": 2512.0, "end": 2518.0, "text": " All right. So this one looks pretty straightforward.", "tokens": [1057, 558, 13, 407, 341, 472, 1542, 1238, 15325, 13], "temperature": 0.0, "avg_logprob": -0.20014401844569615, "compression_ratio": 1.3795620437956204, "no_speech_prob": 1.2218594747537281e-05}, {"id": 408, "seek": 249500, "start": 2518.0, "end": 2523.0, "text": " Oh, well, not quite straightforward actually.", "tokens": [876, 11, 731, 11, 406, 1596, 15325, 767, 13], "temperature": 0.0, "avg_logprob": -0.20014401844569615, "compression_ratio": 1.3795620437956204, "no_speech_prob": 1.2218594747537281e-05}, {"id": 409, "seek": 252300, "start": 2523.0, "end": 2534.0, "text": " So we need our cube back again.", "tokens": [407, 321, 643, 527, 13728, 646, 797, 13], "temperature": 0.0, "avg_logprob": -0.1725597620010376, "compression_ratio": 1.2115384615384615, "no_speech_prob": 6.747778570570517e-06}, {"id": 410, "seek": 252300, "start": 2534.0, "end": 2536.0, "text": " And then.", "tokens": [400, 550, 13], "temperature": 0.0, "avg_logprob": -0.1725597620010376, "compression_ratio": 1.2115384615384615, "no_speech_prob": 6.747778570570517e-06}, {"id": 411, "seek": 252300, "start": 2536.0, "end": 2546.0, "text": " All right. So this is just concatenate, which as folks on the chat have pointed out.", "tokens": [1057, 558, 13, 407, 341, 307, 445, 1588, 7186, 473, 11, 597, 382, 4024, 322, 264, 5081, 362, 10932, 484, 13], "temperature": 0.0, "avg_logprob": -0.1725597620010376, "compression_ratio": 1.2115384615384615, "no_speech_prob": 6.747778570570517e-06}, {"id": 412, "seek": 254600, "start": 2546.0, "end": 2553.0, "text": " Hang on, there's some contention here.", "tokens": [14070, 322, 11, 456, 311, 512, 660, 1251, 510, 13], "temperature": 0.0, "avg_logprob": -0.19026628662558162, "compression_ratio": 1.5909090909090908, "no_speech_prob": 6.048773229849758e-06}, {"id": 413, "seek": 254600, "start": 2553.0, "end": 2556.0, "text": " Catenate is the same as concatenate.", "tokens": [9565, 268, 473, 307, 264, 912, 382, 1588, 7186, 473, 13], "temperature": 0.0, "avg_logprob": -0.19026628662558162, "compression_ratio": 1.5909090909090908, "no_speech_prob": 6.048773229849758e-06}, {"id": 414, "seek": 254600, "start": 2556.0, "end": 2565.0, "text": " And so I think we are here we are concatenating four, five, six to one, two, three.", "tokens": [400, 370, 286, 519, 321, 366, 510, 321, 366, 1588, 7186, 990, 1451, 11, 1732, 11, 2309, 281, 472, 11, 732, 11, 1045, 13], "temperature": 0.0, "avg_logprob": -0.19026628662558162, "compression_ratio": 1.5909090909090908, "no_speech_prob": 6.048773229849758e-06}, {"id": 415, "seek": 254600, "start": 2565.0, "end": 2571.0, "text": " And here we are taking our two by two by two cube.", "tokens": [400, 510, 321, 366, 1940, 527, 732, 538, 732, 538, 732, 13728, 13], "temperature": 0.0, "avg_logprob": -0.19026628662558162, "compression_ratio": 1.5909090909090908, "no_speech_prob": 6.048773229849758e-06}, {"id": 416, "seek": 257100, "start": 2571.0, "end": 2598.0, "text": " And concatenating 99 to the kind of innermost axis, I guess, which presumably the documentation will explain to us.", "tokens": [400, 1588, 7186, 990, 11803, 281, 264, 733, 295, 7714, 966, 555, 10298, 11, 286, 2041, 11, 597, 26742, 264, 14333, 486, 2903, 281, 505, 13], "temperature": 0.0, "avg_logprob": -0.11393019358317057, "compression_ratio": 1.1274509803921569, "no_speech_prob": 3.590684355003759e-05}, {"id": 417, "seek": 259800, "start": 2598.0, "end": 2611.0, "text": " Oh, and then there's a different version, which is comma bar. I guess you would call that, which we should probably therefore also mention.", "tokens": [876, 11, 293, 550, 456, 311, 257, 819, 3037, 11, 597, 307, 22117, 2159, 13, 286, 2041, 291, 576, 818, 300, 11, 597, 321, 820, 1391, 4412, 611, 2152, 13], "temperature": 0.0, "avg_logprob": -0.129738374189897, "compression_ratio": 1.3597122302158273, "no_speech_prob": 2.014264464378357e-05}, {"id": 418, "seek": 259800, "start": 2611.0, "end": 2616.0, "text": " I guess that's catenate first, is it?", "tokens": [286, 2041, 300, 311, 3857, 268, 473, 700, 11, 307, 309, 30], "temperature": 0.0, "avg_logprob": -0.129738374189897, "compression_ratio": 1.3597122302158273, "no_speech_prob": 2.014264464378357e-05}, {"id": 419, "seek": 259800, "start": 2616.0, "end": 2620.0, "text": " Yes, it is.", "tokens": [1079, 11, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.129738374189897, "compression_ratio": 1.3597122302158273, "no_speech_prob": 2.014264464378357e-05}, {"id": 420, "seek": 262000, "start": 2620.0, "end": 2634.0, "text": " So is there anything else to know about comma bar?", "tokens": [407, 307, 456, 1340, 1646, 281, 458, 466, 22117, 2159, 30], "temperature": 0.0, "avg_logprob": -0.11708382297964658, "compression_ratio": 1.2164948453608246, "no_speech_prob": 1.1478485248517245e-05}, {"id": 421, "seek": 262000, "start": 2634.0, "end": 2640.0, "text": " Oh, that means something else entirely, does it?", "tokens": [876, 11, 300, 1355, 746, 1646, 7696, 11, 775, 309, 30], "temperature": 0.0, "avg_logprob": -0.11708382297964658, "compression_ratio": 1.2164948453608246, "no_speech_prob": 1.1478485248517245e-05}, {"id": 422, "seek": 262000, "start": 2640.0, "end": 2645.0, "text": " Is this transpose?", "tokens": [1119, 341, 25167, 30], "temperature": 0.0, "avg_logprob": -0.11708382297964658, "compression_ratio": 1.2164948453608246, "no_speech_prob": 1.1478485248517245e-05}, {"id": 423, "seek": 264500, "start": 2645.0, "end": 2656.0, "text": " Oh my gosh, what a rabbit hole.", "tokens": [876, 452, 6502, 11, 437, 257, 19509, 5458, 13], "temperature": 0.0, "avg_logprob": -0.2297189811180378, "compression_ratio": 0.9868421052631579, "no_speech_prob": 3.119772009085864e-05}, {"id": 424, "seek": 264500, "start": 2656.0, "end": 2660.0, "text": " Oh, that's weird.", "tokens": [876, 11, 300, 311, 3657, 13], "temperature": 0.0, "avg_logprob": -0.2297189811180378, "compression_ratio": 0.9868421052631579, "no_speech_prob": 3.119772009085864e-05}, {"id": 425, "seek": 264500, "start": 2660.0, "end": 2674.0, "text": " It's not quite transpose.", "tokens": [467, 311, 406, 1596, 25167, 13], "temperature": 0.0, "avg_logprob": -0.2297189811180378, "compression_ratio": 0.9868421052631579, "no_speech_prob": 3.119772009085864e-05}, {"id": 426, "seek": 267400, "start": 2674.0, "end": 2691.0, "text": " Curious.", "tokens": [7907, 851, 13], "temperature": 0.0, "avg_logprob": -0.19199706614017487, "compression_ratio": 1.188118811881188, "no_speech_prob": 1.8630489648785442e-05}, {"id": 427, "seek": 267400, "start": 2691.0, "end": 2702.0, "text": " All right, so catenation with an integer or implied axis specification, they're joined along the required axis.", "tokens": [1057, 558, 11, 370, 3857, 268, 399, 365, 364, 24922, 420, 32614, 10298, 31256, 11, 436, 434, 6869, 2051, 264, 4739, 10298, 13], "temperature": 0.0, "avg_logprob": -0.19199706614017487, "compression_ratio": 1.188118811881188, "no_speech_prob": 1.8630489648785442e-05}, {"id": 428, "seek": 270200, "start": 2702.0, "end": 2712.0, "text": " What does that mean, the required axis?", "tokens": [708, 775, 300, 914, 11, 264, 4739, 10298, 30], "temperature": 0.0, "avg_logprob": -0.1331407456170945, "compression_ratio": 1.3189655172413792, "no_speech_prob": 2.668346496648155e-05}, {"id": 429, "seek": 270200, "start": 2712.0, "end": 2723.0, "text": " Why does this appear at the bottom?", "tokens": [1545, 775, 341, 4204, 412, 264, 2767, 30], "temperature": 0.0, "avg_logprob": -0.1331407456170945, "compression_ratio": 1.3189655172413792, "no_speech_prob": 2.668346496648155e-05}, {"id": 430, "seek": 270200, "start": 2723.0, "end": 2728.0, "text": " Because you can denote the axis you want to concatenate along with the index.", "tokens": [1436, 291, 393, 45708, 264, 10298, 291, 528, 281, 1588, 7186, 473, 2051, 365, 264, 8186, 13], "temperature": 0.0, "avg_logprob": -0.1331407456170945, "compression_ratio": 1.3189655172413792, "no_speech_prob": 2.668346496648155e-05}, {"id": 431, "seek": 272800, "start": 2728.0, "end": 2732.0, "text": " That's because this is comma bar, that's why.", "tokens": [663, 311, 570, 341, 307, 22117, 2159, 11, 300, 311, 983, 13], "temperature": 0.0, "avg_logprob": -0.24654669510690788, "compression_ratio": 1.3636363636363635, "no_speech_prob": 5.09356641487102e-06}, {"id": 432, "seek": 272800, "start": 2732.0, "end": 2742.0, "text": " That's why, yeah. The required axis, I guess, is", "tokens": [663, 311, 983, 11, 1338, 13, 440, 4739, 10298, 11, 286, 2041, 11, 307], "temperature": 0.0, "avg_logprob": -0.24654669510690788, "compression_ratio": 1.3636363636363635, "no_speech_prob": 5.09356641487102e-06}, {"id": 433, "seek": 272800, "start": 2742.0, "end": 2746.0, "text": " implied to be,", "tokens": [32614, 281, 312, 11], "temperature": 0.0, "avg_logprob": -0.24654669510690788, "compression_ratio": 1.3636363636363635, "no_speech_prob": 5.09356641487102e-06}, {"id": 434, "seek": 272800, "start": 2746.0, "end": 2749.0, "text": " oh yes, it's specified.", "tokens": [1954, 2086, 11, 309, 311, 22206, 13], "temperature": 0.0, "avg_logprob": -0.24654669510690788, "compression_ratio": 1.3636363636363635, "no_speech_prob": 5.09356641487102e-06}, {"id": 435, "seek": 272800, "start": 2749.0, "end": 2752.0, "text": " The last axis is implied. Okay.", "tokens": [440, 1036, 10298, 307, 32614, 13, 1033, 13], "temperature": 0.0, "avg_logprob": -0.24654669510690788, "compression_ratio": 1.3636363636363635, "no_speech_prob": 5.09356641487102e-06}, {"id": 436, "seek": 275200, "start": 2752.0, "end": 2760.0, "text": " So comma bar and comma are the same thing, but comma bar implies the", "tokens": [407, 22117, 2159, 293, 22117, 366, 264, 912, 551, 11, 457, 22117, 2159, 18779, 264], "temperature": 0.0, "avg_logprob": -0.21796694034483374, "compression_ratio": 1.5104166666666667, "no_speech_prob": 2.3547372620669194e-05}, {"id": 437, "seek": 275200, "start": 2760.0, "end": 2768.0, "text": " first axis and comma implies the last axis.", "tokens": [700, 10298, 293, 22117, 18779, 264, 1036, 10298, 13], "temperature": 0.0, "avg_logprob": -0.21796694034483374, "compression_ratio": 1.5104166666666667, "no_speech_prob": 2.3547372620669194e-05}, {"id": 438, "seek": 275200, "start": 2768.0, "end": 2775.0, "text": " And rewrite comma bar, yeah, as?", "tokens": [400, 28132, 22117, 2159, 11, 1338, 11, 382, 30], "temperature": 0.0, "avg_logprob": -0.21796694034483374, "compression_ratio": 1.5104166666666667, "no_speech_prob": 2.3547372620669194e-05}, {"id": 439, "seek": 277500, "start": 2775.0, "end": 2785.0, "text": " Yeah, I see.", "tokens": [865, 11, 286, 536, 13], "temperature": 0.0, "avg_logprob": -0.4170346941266741, "compression_ratio": 1.1308411214953271, "no_speech_prob": 1.505678937974153e-06}, {"id": 440, "seek": 277500, "start": 2785.0, "end": 2789.0, "text": " On the APL card, it explains it a little like maybe exactly almost what you said, Jeremy.", "tokens": [1282, 264, 5372, 43, 2920, 11, 309, 13948, 309, 257, 707, 411, 1310, 2293, 1920, 437, 291, 848, 11, 17809, 13], "temperature": 0.0, "avg_logprob": -0.4170346941266741, "compression_ratio": 1.1308411214953271, "no_speech_prob": 1.505678937974153e-06}, {"id": 441, "seek": 277500, "start": 2789.0, "end": 2793.0, "text": " Okay, cool.", "tokens": [1033, 11, 1627, 13], "temperature": 0.0, "avg_logprob": -0.4170346941266741, "compression_ratio": 1.1308411214953271, "no_speech_prob": 1.505678937974153e-06}, {"id": 442, "seek": 277500, "start": 2793.0, "end": 2797.0, "text": " Great.", "tokens": [3769, 13], "temperature": 0.0, "avg_logprob": -0.4170346941266741, "compression_ratio": 1.1308411214953271, "no_speech_prob": 1.505678937974153e-06}, {"id": 443, "seek": 279700, "start": 2797.0, "end": 2806.0, "text": " So I can use tabular data if I have a data frame shape or a matrix.", "tokens": [407, 286, 393, 764, 4421, 1040, 1412, 498, 286, 362, 257, 1412, 3920, 3909, 420, 257, 8141, 13], "temperature": 0.0, "avg_logprob": -0.31252551078796387, "compression_ratio": 1.4338235294117647, "no_speech_prob": 9.363620847580023e-06}, {"id": 444, "seek": 279700, "start": 2806.0, "end": 2816.0, "text": " I can use comma bar with a vector of strings to print out a header row so I can see what all the columns are.", "tokens": [286, 393, 764, 22117, 2159, 365, 257, 8062, 295, 13985, 281, 4482, 484, 257, 23117, 5386, 370, 286, 393, 536, 437, 439, 264, 13766, 366, 13], "temperature": 0.0, "avg_logprob": -0.31252551078796387, "compression_ratio": 1.4338235294117647, "no_speech_prob": 9.363620847580023e-06}, {"id": 445, "seek": 279700, "start": 2816.0, "end": 2822.0, "text": " That makes sense.", "tokens": [663, 1669, 2020, 13], "temperature": 0.0, "avg_logprob": -0.31252551078796387, "compression_ratio": 1.4338235294117647, "no_speech_prob": 9.363620847580023e-06}, {"id": 446, "seek": 282200, "start": 2822.0, "end": 2836.0, "text": " I just did.", "tokens": [286, 445, 630, 13], "temperature": 0.0, "avg_logprob": -0.32064458302089144, "compression_ratio": 0.7419354838709677, "no_speech_prob": 1.0781982382468414e-05}, {"id": 447, "seek": 282200, "start": 2836.0, "end": 2840.0, "text": " Okay, cool.", "tokens": [1033, 11, 1627, 13], "temperature": 0.0, "avg_logprob": -0.32064458302089144, "compression_ratio": 0.7419354838709677, "no_speech_prob": 1.0781982382468414e-05}, {"id": 448, "seek": 284000, "start": 2840.0, "end": 2855.0, "text": " And then there's, I think at this point we don't necessarily need to explain how to use every kind of axis in every case because it might get a bit boring.", "tokens": [400, 550, 456, 311, 11, 286, 519, 412, 341, 935, 321, 500, 380, 4725, 643, 281, 2903, 577, 281, 764, 633, 733, 295, 10298, 294, 633, 1389, 570, 309, 1062, 483, 257, 857, 9989, 13], "temperature": 0.0, "avg_logprob": -0.09574728608131408, "compression_ratio": 1.4790697674418605, "no_speech_prob": 2.7693661195371533e-06}, {"id": 449, "seek": 284000, "start": 2855.0, "end": 2867.0, "text": " Not surprisingly, if you've got a fractional axis, it kind of works the same way. They're joined along a new axis. Well, unless it's useful for seeing an example.", "tokens": [1726, 17600, 11, 498, 291, 600, 658, 257, 17948, 1966, 10298, 11, 309, 733, 295, 1985, 264, 912, 636, 13, 814, 434, 6869, 2051, 257, 777, 10298, 13, 1042, 11, 5969, 309, 311, 4420, 337, 2577, 364, 1365, 13], "temperature": 0.0, "avg_logprob": -0.09574728608131408, "compression_ratio": 1.4790697674418605, "no_speech_prob": 2.7693661195371533e-06}, {"id": 450, "seek": 286700, "start": 2867.0, "end": 2875.0, "text": " Now that probably is useful, right? This is kind of like another way of doing what Isaac was just describing.", "tokens": [823, 300, 1391, 307, 4420, 11, 558, 30, 639, 307, 733, 295, 411, 1071, 636, 295, 884, 437, 22505, 390, 445, 16141, 13], "temperature": 0.0, "avg_logprob": -0.10008800320509004, "compression_ratio": 1.5096153846153846, "no_speech_prob": 5.9550770856731106e-06}, {"id": 451, "seek": 286700, "start": 2875.0, "end": 2886.0, "text": " Because here you had to already have two rows, but here you only have a vector and you want to make it into a matrix by adding the row.", "tokens": [1436, 510, 291, 632, 281, 1217, 362, 732, 13241, 11, 457, 510, 291, 787, 362, 257, 8062, 293, 291, 528, 281, 652, 309, 666, 257, 8141, 538, 5127, 264, 5386, 13], "temperature": 0.0, "avg_logprob": -0.10008800320509004, "compression_ratio": 1.5096153846153846, "no_speech_prob": 5.9550770856731106e-06}, {"id": 452, "seek": 286700, "start": 2886.0, "end": 2895.0, "text": " So this is the equivalent of stack in PyTorch versus cat in PyTorch.", "tokens": [407, 341, 307, 264, 10344, 295, 8630, 294, 9953, 51, 284, 339, 5717, 3857, 294, 9953, 51, 284, 339, 13], "temperature": 0.0, "avg_logprob": -0.10008800320509004, "compression_ratio": 1.5096153846153846, "no_speech_prob": 5.9550770856731106e-06}, {"id": 453, "seek": 289500, "start": 2895.0, "end": 2904.0, "text": " So yeah, that's probably worth mentioning.", "tokens": [407, 1338, 11, 300, 311, 1391, 3163, 18315, 13], "temperature": 0.0, "avg_logprob": -0.28505939245224, "compression_ratio": 0.8571428571428571, "no_speech_prob": 0.0001232186477864161}, {"id": 454, "seek": 290400, "start": 2904.0, "end": 2929.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.08502431710561116, "compression_ratio": 0.38461538461538464, "no_speech_prob": 0.00010373099939897656}, {"id": 455, "seek": 292900, "start": 2929.0, "end": 2944.0, "text": " All right, so shift comma presumably is called comma bar and the monadic form of that", "tokens": [1057, 558, 11, 370, 5513, 22117, 26742, 307, 1219, 22117, 2159, 293, 264, 1108, 43341, 1254, 295, 300], "temperature": 0.0, "avg_logprob": -0.28896587916782923, "compression_ratio": 1.1237113402061856, "no_speech_prob": 5.173827048565727e-06}, {"id": 456, "seek": 292900, "start": 2944.0, "end": 2950.0, "text": " is a table.", "tokens": [307, 257, 3199, 13], "temperature": 0.0, "avg_logprob": -0.28896587916782923, "compression_ratio": 1.1237113402061856, "no_speech_prob": 5.173827048565727e-06}, {"id": 457, "seek": 292900, "start": 2950.0, "end": 2952.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.28896587916782923, "compression_ratio": 1.1237113402061856, "no_speech_prob": 5.173827048565727e-06}, {"id": 458, "seek": 292900, "start": 2952.0, "end": 2955.0, "text": " Which", "tokens": [3013], "temperature": 0.0, "avg_logprob": -0.28896587916782923, "compression_ratio": 1.1237113402061856, "no_speech_prob": 5.173827048565727e-06}, {"id": 459, "seek": 295500, "start": 2955.0, "end": 2962.0, "text": " I'm pretty confused about what it's for. Maybe we should look up APLWiki", "tokens": [286, 478, 1238, 9019, 466, 437, 309, 311, 337, 13, 2704, 321, 820, 574, 493, 5372, 43, 54, 9850], "temperature": 0.0, "avg_logprob": -0.15937337210012037, "compression_ratio": 1.150943396226415, "no_speech_prob": 2.2473506760434248e-05}, {"id": 460, "seek": 295500, "start": 2962.0, "end": 2965.0, "text": " just in case it knows what it's for.", "tokens": [445, 294, 1389, 309, 3255, 437, 309, 311, 337, 13], "temperature": 0.0, "avg_logprob": -0.15937337210012037, "compression_ratio": 1.150943396226415, "no_speech_prob": 2.2473506760434248e-05}, {"id": 461, "seek": 295500, "start": 2965.0, "end": 2971.0, "text": " Table.", "tokens": [25535, 13], "temperature": 0.0, "avg_logprob": -0.15937337210012037, "compression_ratio": 1.150943396226415, "no_speech_prob": 2.2473506760434248e-05}, {"id": 462, "seek": 295500, "start": 2971.0, "end": 2973.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.15937337210012037, "compression_ratio": 1.150943396226415, "no_speech_prob": 2.2473506760434248e-05}, {"id": 463, "seek": 297300, "start": 2973.0, "end": 2986.0, "text": " Apply ravel to each major cell. So I think that's like the biggest, you know, subarrays.", "tokens": [25264, 3342, 779, 281, 1184, 2563, 2815, 13, 407, 286, 519, 300, 311, 411, 264, 3880, 11, 291, 458, 11, 1422, 2284, 3772, 13], "temperature": 0.0, "avg_logprob": -0.18607776505606516, "compression_ratio": 1.0232558139534884, "no_speech_prob": 8.13922997622285e-06}, {"id": 464, "seek": 298600, "start": 2986.0, "end": 3007.0, "text": " The arrays of rank one or higher, it's identical to applying ravel to major cells. So ravel will flatten, so it'll flatten each major cell.", "tokens": [440, 41011, 295, 6181, 472, 420, 2946, 11, 309, 311, 14800, 281, 9275, 3342, 779, 281, 2563, 5438, 13, 407, 3342, 779, 486, 24183, 11, 370, 309, 603, 24183, 1184, 2563, 2815, 13], "temperature": 0.0, "avg_logprob": -0.17783795870267427, "compression_ratio": 1.4044117647058822, "no_speech_prob": 7.071734671626473e-06}, {"id": 465, "seek": 298600, "start": 3007.0, "end": 3013.0, "text": " I don't understand what this is doing. This quad A.", "tokens": [286, 500, 380, 1223, 437, 341, 307, 884, 13, 639, 10787, 316, 13], "temperature": 0.0, "avg_logprob": -0.17783795870267427, "compression_ratio": 1.4044117647058822, "no_speech_prob": 7.071734671626473e-06}, {"id": 466, "seek": 301300, "start": 3013.0, "end": 3017.0, "text": " Is that like something they defined or is it part of the language?", "tokens": [1119, 300, 411, 746, 436, 7642, 420, 307, 309, 644, 295, 264, 2856, 30], "temperature": 0.0, "avg_logprob": -0.19865692578829253, "compression_ratio": 1.204724409448819, "no_speech_prob": 2.668312117748428e-05}, {"id": 467, "seek": 301300, "start": 3017.0, "end": 3020.0, "text": " Quad A is A to Z.", "tokens": [29619, 316, 307, 316, 281, 1176, 13], "temperature": 0.0, "avg_logprob": -0.19865692578829253, "compression_ratio": 1.204724409448819, "no_speech_prob": 2.668312117748428e-05}, {"id": 468, "seek": 301300, "start": 3020.0, "end": 3022.0, "text": " Oh.", "tokens": [876, 13], "temperature": 0.0, "avg_logprob": -0.19865692578829253, "compression_ratio": 1.204724409448819, "no_speech_prob": 2.668312117748428e-05}, {"id": 469, "seek": 301300, "start": 3022.0, "end": 3039.0, "text": " Okay. Well let's put that in our string section, shall we?", "tokens": [1033, 13, 1042, 718, 311, 829, 300, 294, 527, 6798, 3541, 11, 4393, 321, 30], "temperature": 0.0, "avg_logprob": -0.19865692578829253, "compression_ratio": 1.204724409448819, "no_speech_prob": 2.668312117748428e-05}, {"id": 470, "seek": 301300, "start": 3039.0, "end": 3041.0, "text": " Cool.", "tokens": [8561, 13], "temperature": 0.0, "avg_logprob": -0.19865692578829253, "compression_ratio": 1.204724409448819, "no_speech_prob": 2.668312117748428e-05}, {"id": 471, "seek": 304100, "start": 3041.0, "end": 3052.0, "text": " Good to know.", "tokens": [2205, 281, 458, 13], "temperature": 0.0, "avg_logprob": -0.1430508041381836, "compression_ratio": 1.24, "no_speech_prob": 1.1842327694466803e-05}, {"id": 472, "seek": 304100, "start": 3052.0, "end": 3054.0, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.1430508041381836, "compression_ratio": 1.24, "no_speech_prob": 1.1842327694466803e-05}, {"id": 473, "seek": 304100, "start": 3054.0, "end": 3064.0, "text": " So, this is the, so five row on something that's 26 long is just going to give you the first five characters.", "tokens": [407, 11, 341, 307, 264, 11, 370, 1732, 5386, 322, 746, 300, 311, 7551, 938, 307, 445, 516, 281, 976, 291, 264, 700, 1732, 4342, 13], "temperature": 0.0, "avg_logprob": -0.1430508041381836, "compression_ratio": 1.24, "no_speech_prob": 1.1842327694466803e-05}, {"id": 474, "seek": 304100, "start": 3064.0, "end": 3067.0, "text": " And so that's ABCDE.", "tokens": [400, 370, 300, 311, 22342, 22296, 13], "temperature": 0.0, "avg_logprob": -0.1430508041381836, "compression_ratio": 1.24, "no_speech_prob": 1.1842327694466803e-05}, {"id": 475, "seek": 306700, "start": 3067.0, "end": 3076.0, "text": " And then", "tokens": [400, 550], "temperature": 0.0, "avg_logprob": -0.1794741153717041, "compression_ratio": 1.6428571428571428, "no_speech_prob": 6.962043244129745e-06}, {"id": 476, "seek": 306700, "start": 3076.0, "end": 3082.0, "text": " now what's going on. This is a function.", "tokens": [586, 437, 311, 516, 322, 13, 639, 307, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.1794741153717041, "compression_ratio": 1.6428571428571428, "no_speech_prob": 6.962043244129745e-06}, {"id": 477, "seek": 306700, "start": 3082.0, "end": 3093.0, "text": " Oh, okay. It applies, this is just composition. So it applies this function and then it applies this function. So first of all it applies the function ravel.", "tokens": [876, 11, 1392, 13, 467, 13165, 11, 341, 307, 445, 12686, 13, 407, 309, 13165, 341, 2445, 293, 550, 309, 13165, 341, 2445, 13, 407, 700, 295, 439, 309, 13165, 264, 2445, 3342, 779, 13], "temperature": 0.0, "avg_logprob": -0.1794741153717041, "compression_ratio": 1.6428571428571428, "no_speech_prob": 6.962043244129745e-06}, {"id": 478, "seek": 309300, "start": 3093.0, "end": 3102.0, "text": " And then it applies this function, which prints out the original argument and the shape of that argument.", "tokens": [400, 550, 309, 13165, 341, 2445, 11, 597, 22305, 484, 264, 3380, 6770, 293, 264, 3909, 295, 300, 6770, 13], "temperature": 0.0, "avg_logprob": -0.08745599515510327, "compression_ratio": 1.233009708737864, "no_speech_prob": 3.0415269520744914e-06}, {"id": 479, "seek": 309300, "start": 3102.0, "end": 3105.0, "text": " That's kind of nifty.", "tokens": [663, 311, 733, 295, 297, 37177, 13], "temperature": 0.0, "avg_logprob": -0.08745599515510327, "compression_ratio": 1.233009708737864, "no_speech_prob": 3.0415269520744914e-06}, {"id": 480, "seek": 310500, "start": 3105.0, "end": 3125.0, "text": " So it's showing us that the result of this table or ravel items is ABCDE and that the shape of it is five one.", "tokens": [407, 309, 311, 4099, 505, 300, 264, 1874, 295, 341, 3199, 420, 3342, 779, 4754, 307, 22342, 22296, 293, 300, 264, 3909, 295, 309, 307, 1732, 472, 13], "temperature": 0.0, "avg_logprob": -0.12687483429908752, "compression_ratio": 1.1827956989247312, "no_speech_prob": 1.8161972548114136e-06}, {"id": 481, "seek": 312500, "start": 3125.0, "end": 3141.0, "text": " And then here it's showing us that comma under bar hasn't done anything, as far as I can tell.", "tokens": [400, 550, 510, 309, 311, 4099, 505, 300, 22117, 833, 2159, 6132, 380, 1096, 1340, 11, 382, 1400, 382, 286, 393, 980, 13], "temperature": 0.0, "avg_logprob": -0.1072478944605047, "compression_ratio": 1.1263157894736842, "no_speech_prob": 3.500582579363254e-06}, {"id": 482, "seek": 312500, "start": 3141.0, "end": 3151.0, "text": " Let's check.", "tokens": [961, 311, 1520, 13], "temperature": 0.0, "avg_logprob": -0.1072478944605047, "compression_ratio": 1.1263157894736842, "no_speech_prob": 3.500582579363254e-06}, {"id": 483, "seek": 315100, "start": 3151.0, "end": 3158.0, "text": " Okay, so that's done nothing at all.", "tokens": [1033, 11, 370, 300, 311, 1096, 1825, 412, 439, 13], "temperature": 0.0, "avg_logprob": -0.14834082126617432, "compression_ratio": 0.9746835443037974, "no_speech_prob": 1.1659240954031702e-05}, {"id": 484, "seek": 315100, "start": 3158.0, "end": 3162.0, "text": " They could have told us that.", "tokens": [814, 727, 362, 1907, 505, 300, 13], "temperature": 0.0, "avg_logprob": -0.14834082126617432, "compression_ratio": 0.9746835443037974, "no_speech_prob": 1.1659240954031702e-05}, {"id": 485, "seek": 315100, "start": 3162.0, "end": 3166.0, "text": " But here's", "tokens": [583, 510, 311], "temperature": 0.0, "avg_logprob": -0.14834082126617432, "compression_ratio": 0.9746835443037974, "no_speech_prob": 1.1659240954031702e-05}, {"id": 486, "seek": 316600, "start": 3166.0, "end": 3190.0, "text": " Yeah, so here it's applying ravel to major cells. So the major cells here are lists of four. The major cells here are vectors of four. The major cells here are matrices of three, four. So it's raveling those major cells, the two major cells that we have.", "tokens": [865, 11, 370, 510, 309, 311, 9275, 3342, 779, 281, 2563, 5438, 13, 407, 264, 2563, 5438, 510, 366, 14511, 295, 1451, 13, 440, 2563, 5438, 510, 366, 18875, 295, 1451, 13, 440, 2563, 5438, 510, 366, 32284, 295, 1045, 11, 1451, 13, 407, 309, 311, 3342, 779, 278, 729, 2563, 5438, 11, 264, 732, 2563, 5438, 300, 321, 362, 13], "temperature": 0.0, "avg_logprob": -0.1152004021864671, "compression_ratio": 1.9389312977099236, "no_speech_prob": 6.540189133374952e-06}, {"id": 487, "seek": 319000, "start": 3190.0, "end": 3198.0, "text": " Okay, so", "tokens": [1033, 11, 370], "temperature": 0.0, "avg_logprob": -0.1370534896850586, "compression_ratio": 0.5, "no_speech_prob": 5.3876130550634116e-05}, {"id": 488, "seek": 319800, "start": 3198.0, "end": 3224.0, "text": " let's use that example then.", "tokens": [718, 311, 764, 300, 1365, 550, 13], "temperature": 0.0, "avg_logprob": -0.14464098756963556, "compression_ratio": 0.8484848484848485, "no_speech_prob": 3.701199239003472e-05}, {"id": 489, "seek": 322400, "start": 3224.0, "end": 3233.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.11081567677584561, "compression_ratio": 1.2857142857142858, "no_speech_prob": 2.94795177069318e-06}, {"id": 490, "seek": 322400, "start": 3233.0, "end": 3241.0, "text": " I'm going to write ravel items here because I think that's easier for me to understand what that means.", "tokens": [286, 478, 516, 281, 2464, 3342, 779, 4754, 510, 570, 286, 519, 300, 311, 3571, 337, 385, 281, 1223, 437, 300, 1355, 13], "temperature": 0.0, "avg_logprob": -0.11081567677584561, "compression_ratio": 1.2857142857142858, "no_speech_prob": 2.94795177069318e-06}, {"id": 491, "seek": 322400, "start": 3241.0, "end": 3245.0, "text": " For an item I guess they mean a major cell.", "tokens": [1171, 364, 3174, 286, 2041, 436, 914, 257, 2563, 2815, 13], "temperature": 0.0, "avg_logprob": -0.11081567677584561, "compression_ratio": 1.2857142857142858, "no_speech_prob": 2.94795177069318e-06}, {"id": 492, "seek": 324500, "start": 3245.0, "end": 3265.0, "text": " It contains two major cells, each of size three by four. And so therefore this is turning them into two length twelve major cells. It's a raveling the items.", "tokens": [467, 8306, 732, 2563, 5438, 11, 1184, 295, 2744, 1045, 538, 1451, 13, 400, 370, 4412, 341, 307, 6246, 552, 666, 732, 4641, 14390, 2563, 5438, 13, 467, 311, 257, 3342, 779, 278, 264, 4754, 13], "temperature": 0.0, "avg_logprob": -0.14573325750962743, "compression_ratio": 1.4054054054054055, "no_speech_prob": 9.721497917780653e-07}, {"id": 493, "seek": 324500, "start": 3265.0, "end": 3273.0, "text": " Scalar arguments converted to a one by one matrix.", "tokens": [2747, 12031, 12869, 16424, 281, 257, 472, 538, 472, 8141, 13], "temperature": 0.0, "avg_logprob": -0.14573325750962743, "compression_ratio": 1.4054054054054055, "no_speech_prob": 9.721497917780653e-07}, {"id": 494, "seek": 327300, "start": 3273.0, "end": 3283.0, "text": " I guess this example is useful as well, which is basically like transpose but it's kind of adding the axis.", "tokens": [286, 2041, 341, 1365, 307, 4420, 382, 731, 11, 597, 307, 1936, 411, 25167, 457, 309, 311, 733, 295, 5127, 264, 10298, 13], "temperature": 0.0, "avg_logprob": -0.13524776697158813, "compression_ratio": 1.3840579710144927, "no_speech_prob": 1.2482593092499883e-06}, {"id": 495, "seek": 327300, "start": 3283.0, "end": 3286.0, "text": " So we should put that first.", "tokens": [407, 321, 820, 829, 300, 700, 13], "temperature": 0.0, "avg_logprob": -0.13524776697158813, "compression_ratio": 1.3840579710144927, "no_speech_prob": 1.2482593092499883e-06}, {"id": 496, "seek": 327300, "start": 3286.0, "end": 3291.0, "text": " Actually maybe first we should put the scalar version.", "tokens": [5135, 1310, 700, 321, 820, 829, 264, 39684, 3037, 13], "temperature": 0.0, "avg_logprob": -0.13524776697158813, "compression_ratio": 1.3840579710144927, "no_speech_prob": 1.2482593092499883e-06}, {"id": 497, "seek": 329100, "start": 3291.0, "end": 3309.0, "text": " That's that. Does anybody know what this is for?", "tokens": [663, 311, 300, 13, 4402, 4472, 458, 437, 341, 307, 337, 30], "temperature": 0.0, "avg_logprob": -0.10442841053009033, "compression_ratio": 1.2035398230088497, "no_speech_prob": 8.267681550933048e-06}, {"id": 498, "seek": 329100, "start": 3309.0, "end": 3314.0, "text": " It's equivalent to this operation", "tokens": [467, 311, 10344, 281, 341, 6916], "temperature": 0.0, "avg_logprob": -0.10442841053009033, "compression_ratio": 1.2035398230088497, "no_speech_prob": 8.267681550933048e-06}, {"id": 499, "seek": 329100, "start": 3314.0, "end": 3319.0, "text": " which we haven't done yet, so we should do that soon.", "tokens": [597, 321, 2378, 380, 1096, 1939, 11, 370, 321, 820, 360, 300, 2321, 13], "temperature": 0.0, "avg_logprob": -0.10442841053009033, "compression_ratio": 1.2035398230088497, "no_speech_prob": 8.267681550933048e-06}, {"id": 500, "seek": 331900, "start": 3319.0, "end": 3323.0, "text": " And we haven't done that yet. It's annoying.", "tokens": [400, 321, 2378, 380, 1096, 300, 1939, 13, 467, 311, 11304, 13], "temperature": 0.0, "avg_logprob": -0.15834220250447592, "compression_ratio": 1.0888888888888888, "no_speech_prob": 1.7501575712230988e-05}, {"id": 501, "seek": 331900, "start": 3323.0, "end": 3338.0, "text": " So we should come back probably to this idea I guess.", "tokens": [407, 321, 820, 808, 646, 1391, 281, 341, 1558, 286, 2041, 13], "temperature": 0.0, "avg_logprob": -0.15834220250447592, "compression_ratio": 1.0888888888888888, "no_speech_prob": 1.7501575712230988e-05}, {"id": 502, "seek": 333800, "start": 3338.0, "end": 3367.0, "text": " So then we could do dyadic catnet first.", "tokens": [407, 550, 321, 727, 360, 14584, 43341, 3857, 7129, 700, 13], "temperature": 0.0, "avg_logprob": -0.3025369644165039, "compression_ratio": 0.8333333333333334, "no_speech_prob": 1.3210257748141885e-05}, {"id": 503, "seek": 336700, "start": 3367.0, "end": 3371.0, "text": " Presumably this will be the same.", "tokens": [2718, 449, 1188, 341, 486, 312, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.09914616176060267, "compression_ratio": 1.6524822695035462, "no_speech_prob": 5.3380499593913555e-06}, {"id": 504, "seek": 336700, "start": 3371.0, "end": 3376.0, "text": " Yes it is.", "tokens": [1079, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.09914616176060267, "compression_ratio": 1.6524822695035462, "no_speech_prob": 5.3380499593913555e-06}, {"id": 505, "seek": 336700, "start": 3376.0, "end": 3383.0, "text": " But this will be different.", "tokens": [583, 341, 486, 312, 819, 13], "temperature": 0.0, "avg_logprob": -0.09914616176060267, "compression_ratio": 1.6524822695035462, "no_speech_prob": 5.3380499593913555e-06}, {"id": 506, "seek": 336700, "start": 3383.0, "end": 3394.0, "text": " And presumably once we add an axis specification it will make no difference because the only difference between them is the assumed axis specification. Correct.", "tokens": [400, 26742, 1564, 321, 909, 364, 10298, 31256, 309, 486, 652, 572, 2649, 570, 264, 787, 2649, 1296, 552, 307, 264, 15895, 10298, 31256, 13, 12753, 13], "temperature": 0.0, "avg_logprob": -0.09914616176060267, "compression_ratio": 1.6524822695035462, "no_speech_prob": 5.3380499593913555e-06}, {"id": 507, "seek": 339400, "start": 3394.0, "end": 3399.0, "text": " And did I? Okay, cool.", "tokens": [400, 630, 286, 30, 1033, 11, 1627, 13], "temperature": 0.0, "avg_logprob": -0.39707497989430146, "compression_ratio": 0.8048780487804879, "no_speech_prob": 7.962143718032166e-05}, {"id": 508, "seek": 339400, "start": 3399.0, "end": 3400.0, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.39707497989430146, "compression_ratio": 0.8048780487804879, "no_speech_prob": 7.962143718032166e-05}, {"id": 509, "seek": 340000, "start": 3400.0, "end": 3429.0, "text": " We're happy with that.", "tokens": [492, 434, 2055, 365, 300, 13], "temperature": 0.0, "avg_logprob": -0.20815517902374267, "compression_ratio": 0.7333333333333333, "no_speech_prob": 6.10161769145634e-05}, {"id": 510, "seek": 342900, "start": 3429.0, "end": 3455.0, "text": " Maybe we should do axes with operators then.", "tokens": [2704, 321, 820, 360, 35387, 365, 19077, 550, 13], "temperature": 0.0, "avg_logprob": -0.18938561586233285, "compression_ratio": 0.8461538461538461, "no_speech_prob": 0.0001172894990304485}, {"id": 511, "seek": 345500, "start": 3455.0, "end": 3483.0, "text": " How do we find those?", "tokens": [1012, 360, 321, 915, 729, 30], "temperature": 0.0, "avg_logprob": -0.144694721698761, "compression_ratio": 0.7241379310344828, "no_speech_prob": 0.0006187621038407087}, {"id": 512, "seek": 348300, "start": 3483.0, "end": 3490.0, "text": " Okay, so dyadic mixed functions. What does that mean?", "tokens": [1033, 11, 370, 14584, 43341, 7467, 6828, 13, 708, 775, 300, 914, 30], "temperature": 0.0, "avg_logprob": -0.20121508378248948, "compression_ratio": 1.5286624203821657, "no_speech_prob": 1.0615112842060626e-05}, {"id": 513, "seek": 348300, "start": 3490.0, "end": 3496.0, "text": " Dyadic mixed functions. Oh, these are not with an operator.", "tokens": [31193, 43341, 7467, 6828, 13, 876, 11, 613, 366, 406, 365, 364, 12973, 13], "temperature": 0.0, "avg_logprob": -0.20121508378248948, "compression_ratio": 1.5286624203821657, "no_speech_prob": 1.0615112842060626e-05}, {"id": 514, "seek": 348300, "start": 3496.0, "end": 3507.0, "text": " So the plus slash, was it Isaac was suggesting plus slash with axis?", "tokens": [407, 264, 1804, 17330, 11, 390, 309, 22505, 390, 18094, 1804, 17330, 365, 10298, 30], "temperature": 0.0, "avg_logprob": -0.20121508378248948, "compression_ratio": 1.5286624203821657, "no_speech_prob": 1.0615112842060626e-05}, {"id": 515, "seek": 348300, "start": 3507.0, "end": 3512.0, "text": " How would that work because that's not a dyadic function.", "tokens": [1012, 576, 300, 589, 570, 300, 311, 406, 257, 14584, 43341, 2445, 13], "temperature": 0.0, "avg_logprob": -0.20121508378248948, "compression_ratio": 1.5286624203821657, "no_speech_prob": 1.0615112842060626e-05}, {"id": 516, "seek": 351200, "start": 3512.0, "end": 3518.0, "text": " Yeah, I guess.", "tokens": [865, 11, 286, 2041, 13], "temperature": 0.0, "avg_logprob": -0.19896432558695476, "compression_ratio": 0.9230769230769231, "no_speech_prob": 1.670009078225121e-05}, {"id": 517, "seek": 351200, "start": 3518.0, "end": 3521.0, "text": " Ah, it can be a function derived from slash.", "tokens": [2438, 11, 309, 393, 312, 257, 2445, 18949, 490, 17330, 13], "temperature": 0.0, "avg_logprob": -0.19896432558695476, "compression_ratio": 0.9230769230769231, "no_speech_prob": 1.670009078225121e-05}, {"id": 518, "seek": 351200, "start": 3521.0, "end": 3525.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.19896432558695476, "compression_ratio": 0.9230769230769231, "no_speech_prob": 1.670009078225121e-05}, {"id": 519, "seek": 351200, "start": 3525.0, "end": 3530.0, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.19896432558695476, "compression_ratio": 0.9230769230769231, "no_speech_prob": 1.670009078225121e-05}, {"id": 520, "seek": 353000, "start": 3530.0, "end": 3551.0, "text": " So like with a matrix you can do plus slash bracket one and then plus slash bracket two and you'll see a row wise sum versus a column wise sum.", "tokens": [407, 411, 365, 257, 8141, 291, 393, 360, 1804, 17330, 16904, 472, 293, 550, 1804, 17330, 16904, 732, 293, 291, 603, 536, 257, 5386, 10829, 2408, 5717, 257, 7738, 10829, 2408, 13], "temperature": 0.0, "avg_logprob": -0.12898755073547363, "compression_ratio": 1.3883495145631068, "no_speech_prob": 4.028914190712385e-06}, {"id": 521, "seek": 355100, "start": 3551.0, "end": 3561.0, "text": " I don't see it quite defined here but.", "tokens": [286, 500, 380, 536, 309, 1596, 7642, 510, 457, 13], "temperature": 0.0, "avg_logprob": -0.2093040943145752, "compression_ratio": 1.0769230769230769, "no_speech_prob": 2.3546095690107904e-05}, {"id": 522, "seek": 355100, "start": 3561.0, "end": 3573.0, "text": " I guess minimum or maximum works with it too.", "tokens": [286, 2041, 7285, 420, 6674, 1985, 365, 309, 886, 13], "temperature": 0.0, "avg_logprob": -0.2093040943145752, "compression_ratio": 1.0769230769230769, "no_speech_prob": 2.3546095690107904e-05}, {"id": 523, "seek": 357300, "start": 3573.0, "end": 3586.0, "text": " Jeremy you have a typo in the.", "tokens": [17809, 291, 362, 257, 2125, 78, 294, 264, 13], "temperature": 0.0, "avg_logprob": -0.2911868375890395, "compression_ratio": 1.3846153846153846, "no_speech_prob": 2.7532798412721604e-05}, {"id": 524, "seek": 357300, "start": 3586.0, "end": 3588.0, "text": " Yes, where's my typo?", "tokens": [1079, 11, 689, 311, 452, 2125, 78, 30], "temperature": 0.0, "avg_logprob": -0.2911868375890395, "compression_ratio": 1.3846153846153846, "no_speech_prob": 2.7532798412721604e-05}, {"id": 525, "seek": 357300, "start": 3588.0, "end": 3592.0, "text": " Go up the S C, not S.", "tokens": [1037, 493, 264, 318, 383, 11, 406, 318, 13], "temperature": 0.0, "avg_logprob": -0.2911868375890395, "compression_ratio": 1.3846153846153846, "no_speech_prob": 2.7532798412721604e-05}, {"id": 526, "seek": 357300, "start": 3592.0, "end": 3594.0, "text": " Go up. Yep.", "tokens": [1037, 493, 13, 7010, 13], "temperature": 0.0, "avg_logprob": -0.2911868375890395, "compression_ratio": 1.3846153846153846, "no_speech_prob": 2.7532798412721604e-05}, {"id": 527, "seek": 357300, "start": 3594.0, "end": 3597.0, "text": " Yep. That's not a typo. That's what I want axes.", "tokens": [7010, 13, 663, 311, 406, 257, 2125, 78, 13, 663, 311, 437, 286, 528, 35387, 13], "temperature": 0.0, "avg_logprob": -0.2911868375890395, "compression_ratio": 1.3846153846153846, "no_speech_prob": 2.7532798412721604e-05}, {"id": 528, "seek": 357300, "start": 3597.0, "end": 3601.0, "text": " That's the plural of axis.", "tokens": [663, 311, 264, 25377, 295, 10298, 13], "temperature": 0.0, "avg_logprob": -0.2911868375890395, "compression_ratio": 1.3846153846153846, "no_speech_prob": 2.7532798412721604e-05}, {"id": 529, "seek": 360100, "start": 3601.0, "end": 3606.0, "text": " Maybe I should say axis rather than axes I guess.", "tokens": [2704, 286, 820, 584, 10298, 2831, 813, 35387, 286, 2041, 13], "temperature": 0.0, "avg_logprob": -0.20331240635292203, "compression_ratio": 1.296, "no_speech_prob": 1.0781136552395765e-05}, {"id": 530, "seek": 360100, "start": 3606.0, "end": 3613.0, "text": " I suppose so.", "tokens": [286, 7297, 370, 13], "temperature": 0.0, "avg_logprob": -0.20331240635292203, "compression_ratio": 1.296, "no_speech_prob": 1.0781136552395765e-05}, {"id": 531, "seek": 360100, "start": 3613.0, "end": 3627.0, "text": " All right. Well, yeah. Okay, so I guess we want to, we want to make tricks then. Is that the idea?", "tokens": [1057, 558, 13, 1042, 11, 1338, 13, 1033, 11, 370, 286, 2041, 321, 528, 281, 11, 321, 528, 281, 652, 11733, 550, 13, 1119, 300, 264, 1558, 30], "temperature": 0.0, "avg_logprob": -0.20331240635292203, "compression_ratio": 1.296, "no_speech_prob": 1.0781136552395765e-05}, {"id": 532, "seek": 362700, "start": 3627.0, "end": 3643.0, "text": " And then we would say, plus slash over one. Is that how we do it?", "tokens": [400, 550, 321, 576, 584, 11, 1804, 17330, 670, 472, 13, 1119, 300, 577, 321, 360, 309, 30], "temperature": 0.0, "avg_logprob": -0.17471927007039387, "compression_ratio": 0.9743589743589743, "no_speech_prob": 1.3630403373099398e-05}, {"id": 533, "seek": 362700, "start": 3643.0, "end": 3645.0, "text": " Yep.", "tokens": [7010, 13], "temperature": 0.0, "avg_logprob": -0.17471927007039387, "compression_ratio": 0.9743589743589743, "no_speech_prob": 1.3630403373099398e-05}, {"id": 534, "seek": 362700, "start": 3645.0, "end": 3649.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.17471927007039387, "compression_ratio": 0.9743589743589743, "no_speech_prob": 1.3630403373099398e-05}, {"id": 535, "seek": 364900, "start": 3649.0, "end": 3661.0, "text": " So I did a bracket two that's kind of the same thing as the default, which would be, you know, get you the same 615.", "tokens": [407, 286, 630, 257, 16904, 732, 300, 311, 733, 295, 264, 912, 551, 382, 264, 7576, 11, 597, 576, 312, 11, 291, 458, 11, 483, 291, 264, 912, 1386, 5211, 13], "temperature": 0.0, "avg_logprob": -0.20157807213919504, "compression_ratio": 1.424731182795699, "no_speech_prob": 2.045718429144472e-05}, {"id": 536, "seek": 364900, "start": 3661.0, "end": 3665.0, "text": " Just a moment, my daughter wants me, actually maybe that's a good time to go.", "tokens": [1449, 257, 1623, 11, 452, 4653, 2738, 385, 11, 767, 1310, 300, 311, 257, 665, 565, 281, 352, 13], "temperature": 0.0, "avg_logprob": -0.20157807213919504, "compression_ratio": 1.424731182795699, "no_speech_prob": 2.045718429144472e-05}, {"id": 537, "seek": 364900, "start": 3665.0, "end": 3666.0, "text": " All right, cool.", "tokens": [1057, 558, 11, 1627, 13], "temperature": 0.0, "avg_logprob": -0.20157807213919504, "compression_ratio": 1.424731182795699, "no_speech_prob": 2.045718429144472e-05}, {"id": 538, "seek": 364900, "start": 3666.0, "end": 3668.0, "text": " Thanks gang.", "tokens": [2561, 10145, 13], "temperature": 0.0, "avg_logprob": -0.20157807213919504, "compression_ratio": 1.424731182795699, "no_speech_prob": 2.045718429144472e-05}, {"id": 539, "seek": 364900, "start": 3668.0, "end": 3670.0, "text": " See you next time.", "tokens": [3008, 291, 958, 565, 13], "temperature": 0.0, "avg_logprob": -0.20157807213919504, "compression_ratio": 1.424731182795699, "no_speech_prob": 2.045718429144472e-05}, {"id": 540, "seek": 364900, "start": 3670.0, "end": 3672.0, "text": " Have a good one. Bye.", "tokens": [3560, 257, 665, 472, 13, 4621, 13], "temperature": 0.0, "avg_logprob": -0.20157807213919504, "compression_ratio": 1.424731182795699, "no_speech_prob": 2.045718429144472e-05}, {"id": 541, "seek": 367200, "start": 3672.0, "end": 3682.0, "text": " Bye.", "tokens": [50364, 4621, 13, 50864], "temperature": 0.0, "avg_logprob": -0.5469505786895752, "compression_ratio": 0.3333333333333333, "no_speech_prob": 0.001139555242843926}], "language": "en"}