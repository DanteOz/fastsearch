{"text": " Hi everybody welcome to practical deep learning for coders. This is part one of our two-part course I'm Presenting this from the Data Institute in San Francisco We'll be doing seven lessons in this part of the course Most of them will be about a couple of hours long this first one may be a little bit shorter Practical deep learning for coders is all about getting you up and running with deep learning in practice Getting world-class results, and it's a really coding focused approach as the name suggests But we're not going to dumb it down by the end of the course you'll have learned all of the Theory and details that are necessary to rebuild all of the world-class results. We're learning about from scratch Now I should mention that our videos are hosted on YouTube But we strongly recommend watching them via our website at course dot fast AI Although they're exactly the same videos the important thing about watching them through our website Is that you'll get all of the information you need about kind of updates to libraries by all locations Further information frequently asked questions and so forth So if you're currently on YouTube watching this Why don't you switch over to cost of fast today? I now and start watching through there and make sure you read all of the material on the page before you start just to make Sure that you've got everything you need The other thing to mention is that there is a really great strong community at forums dot fast AI From time to time you'll find that you get stuck You may get stuck very early on you may not get stuck for quite a while But at some point you might get stuck with understanding Why something works the way it does or there may be some computer problem that you have or so forth on forums dot fast at AI There are thousands of other learners talking about every lesson and lots of other topics besides It's the most active deep learning community on the internet by far. So definitely register there and And start getting involved. You'll get a lot more out of this course if you do that So we're going to start by doing some coding this is an approach We're going to be talking about in a moment called the top-down approach to study But let's learn it by doing it. So let's go ahead and try and actually train a neural network Now in order to train a neural network, you almost certainly want a GPU GPU is a graphics processing a graphics processing unit It's the things that Companies use to help you play games better They let your computer render the game much more quickly than your CPU can We'll be talking about them more shortly But for now I'm going to show you how you can get access to a GPU Specifically you're going to need an Nvidia GPU because only Nvidia GPUs support something called CUDA CUDA is the language and framework that nearly all deep learning libraries and practitioners use to do their work Obviously, it's not ideal that we're stuck with one particular vendors cards and over time We hope to see more competition in this space. But for now we do need an Nvidia GPU Your laptop almost certainly doesn't have one unless you specifically went out of your way to buy like a gaming laptop So almost certainly you will need to rent one and the good news is that renting access Paying by the second for a GPU based computer is pretty easy and pretty cheap I'm going to show you a couple of options The first option I'll show you which is Probably the easiest is called Cressul if you go to Cressul.com and Click on sign up or if you've been there before sign in You will find yourself at this screen which has a big button that says start Jupiter and another switch called enable GPU So if we make sure that is set to true enable GPU is on and we click start Jupiter And we click start Jupiter It's going to launch us into something called Jupiter notebook Jupiter notebook in a recent survey of tens of thousands of data scientists was rated as the third most Important tool in the data scientists toolbox It's really important that you get to learn it well and all of our courses will be run through Jupiter Yes, Rachel. You have a question or a comment. Oh, I just wanted to point out that you get I believe 10 free hours So if you wanted to try Cressul out Yeah Yeah He might have changed that recently to less hours, but you can check the fact or the pricing but you certainly get some free hours The pricing varies because this is actually runs on top of Amazon Web Services So at the moment, it's 60 cents an hour The nice thing is though that you can always turn it turn it on You know start your Jupiter without the CP without the GPU running and pay a tenth of that price, which is pretty cool So Jupiter notebook is something we'll be doing all of this course in and so to get started here We're going to find our particular course. So we'd go to courses and We'd go to fast AI 2 and There they are Things have been moving around a little bit. So it may be in a different spot for you When you look at this and we'll make sure all the information current information is on the website Now having said that that's you know, the Cressul approach is You know as you can see, it's basically instant and and easy But if you've got, you know an extra hour or so to get going an even better option Is something called paper space? Paper space unlike Cressul doesn't run on top of Amazon. They have their own machines And if I click on so here's his paper space and so if I click on new machine I Can pick which one of their three data centers to use so pick the plot one closest to you. So I'll say West Coast and Then I'll say Linux and I'll say Ubuntu 16 And then it says choose machine and you can see there's various different machines I can choose from And pay by the hour So this is pretty cool for 40 cents an hour. So it's cheaper than Cressul I get a machine that's actually going to be much faster than Cressul 60 cent an hour machine or for 65 cents an hour Way way way faster, right? So I'm going to actually show you how to get started with with the with the paper space approach Because that actually is going to do everything from scratch You may find if you try to do the 65 cents an hour one that it may require you to contact paper space to say Like why do you want it? That's just an anti-fraud thing. So if you say fast AI there then They'll quickly get you up and running. So I'm going to use the cheapest one here 40 cents an hour You can pick how much storage you want and Note that you pay for a month of storage as soon as you start the machine up, right? So don't start and stop lots of machines because each time you pay for that month of storage I think the 250 gigs $7 a month option is pretty good But you only need 50 gig. So if you're trying to minimize the price you can go there The only other thing you need to do is turn on public IP so that we can actually log into this and We can turn off auto snapshot to save the money of not having backups All right, so if you then click on create your paper space about a minute later you will find That your machine will pop up here is my Ubuntu 1604 machine If you check your email You will find that they have emailed you a password so you can copy that And you can go to your machine and enter your password now to paste the password you would press ctrl shift V or On Mac I guess Apple shift V So it's slightly different to normal pasting or of course you can just type it in And here we are now we can make a little bit more room here by clicking on these little arrows And then we can go to the next step Now we can make a little bit more room here by clicking on these little arrows I Can zoom in a little bit? And so as you can see we've got like a terminal that's sitting inside Our browser which is kind of quite a handy way to do it So now we need to configure this for the course and so the way you configure it for the course is you type Curl HTTP colon slash slash files dot fast AI slash setup slash paperspace Pipe bash Okay, and so that's then going to run a script which is going to set up all of the CUDA drivers the special Python Reaper pipe Python distribution we use called anaconda all of the libraries all of the courses And the data we use for the first part of the course Okay, so that takes an hour or so and when it's finished running you'll need to reboot your computer So to reboot not your own computer But your paperspace computer and so to do that you can just click on this little circular restart machine button Okay, and when it comes back up you'll be ready to go so what you'll find Is that you've now got an anaconda 3 directory that's where your Python is you've got a data directory Which contains the data for the first part of this course first lesson which is that dogs and cats? And you've got a fast AI directory And that contains everything for this course so what you should do Is CD fast AI and from time to time you should go get pull and that will just make sure that all of your Fast AI stuff is up to date And also from time to time you might want to just check that your Python libraries are up to date and so you can type Conda and update to do that Alright, so make sure that you've cd'd into fast AI and then you can type Jupiter notebook All right there it is so we now have a Jupiter notebook server running And we want to connect to that and so you can see here. It says copy paste this URL Into your browser when you connect so if you double click on it Then that will actually That will actually copy it for you Then you can go and paste it, but you need to change this localhost To be the paper space IP address, so if you click on the little arrows to go smaller you can see the IP address is here, so I just copy that and Paste it Where it used to say localhost okay? So it's now HTTP and then my IP and then everything else I copied before and so there it is So this is the fast AI Get repo and our courses are all in courses and in there the deep learning part one is dl1 and In there you will find Lesson one dot I pie and be I Python notebook So here we are ready to go depending whether you're using Cressel or paper space or something else if you check courses dot fast at AI We'll keep putting additional videos and links to information about how to set up other You know good Jupiter notebook providers as well So to run a cell in Jupiter notebook you select the cell and you hold down shift and press enter or If you've got the toolbar showing you can just click on the little run button So you'll notice that some cells contain Code and some contain text and some contain pictures and some contain videos so this environment basically has You know it's a way that we can give you access to an it a way to run Experiments and to kind of tell you what's going on show pictures This is why it's like a super popular tool in data science The data science is kind of all about running experiments really So let's go ahead and click run and you'll see that cell turn into a star the one turned into a star for a moment And then it finished running okay, so let's try the next one this time instead of using the toolbar I'm going to hold down shift and press enter And you can see again it turned into a star and then said to so if I'd hold down shift and keep pressing enter It just keeps running each cell right so I can put anything. I like for example 1 plus 1 These two okay So what we're going to do is we're going to Yes, Rachel. This is just a side note, but I wanted to point out that we're using Python 3 here. Yes Thank you Python 3.6 Yeah And it is important to switch to Python 3 you know now well for fast.ai you require it But you know increasingly a lot of libraries are removing support for Python 2 Thanks Rachel Now it mentions here that you can download the data set for this lesson from this location if you're using Cressell or the paper space script that we just used to set up and this will already be made available for you Okay, if you're not you'll need to w get it as soon now Cressell is quite a bit slower than paper space and also it There are some particular things it doesn't support that we really need and so there there are a couple of extra steps if you're using Cressell you have to run two more cells right so you can see these are commented out They've got hashes at the start so if you remove the hashes from these and run these two additional cells That just runs the stuff the stuff that you only need for Cressell. I'm using paper space, so I'm not going to run it Okay, so Inside our Data so we set up this path to data slash dogs cats That's pretty set up for you and so inside there you can see here. I can use an exclamation mark to Basically say I don't want to run Python, but I want to run bash I don't want to run shell so this runs a bash command and the bit inside the curly brackets Actually refers however to a Python variable so it inserts that Python variable into the bash command So here is the contents of our folder There's a training set and a validation set if you're not familiar with the idea of training sets and validation sets It would be a very good idea to check out our practical machine learning course Which tells you a lot about this kind of stuff of like that the basics of how to set up and run machine learning projects more generally Would you recommend that people take that course before this one? Actually a lot of students who would you know as they went through these has said they look they've liked doing them together So you can kind of check it out and see the machine learning course Yeah, they cover some similar stuff, but all in different directions so people have done both since you know say they find it They each support each other. I wouldn't say it's prerequisite But you know if I do if I say something like hey, this is the training set and this is a validation set And you're going I don't know what that means at least Google it do a quick read. You know because we're assuming that You know the very basics of kind of what machine learning is and does to some extent And I have a whole blog post on this topic as well, okay And we'll make sure that you link to that from course dot faster day I and I just wanted to say in general with fast AI our philosophy is to kind of learn things on an as needed Basis yeah, exactly don't try and learn everything that you think you might need first otherwise You'll never get around to lead learning the stuff you actually want to learn Exactly that shows up in deep learning. I think particularly a lot yes Okay, so in our validation folder There's a cat's folder and a dog's folder and then inside the validation cats folder is a whole bunch of JPEGs The reason that it's set up like this is that this is kind of the most common standard approach for how image classification data sets are shared and provided and the idea is that each folder Tells you the label so there's each of these Images is labeled cats and each of the images in the dogs folder is labeled dogs Okay, this is how Keras works as well for example So this is a pretty standard way to share image classification files So we can have a look so if you go plot. I am show We can see an example of the first of the cats If you haven't seen This before this is a python 3.6 format string so you can google for that if you haven't seen it It's a very convenient way to do string formatting and we use it a lot So there's our cat, but we're going to mainly be interested in the underlying data that makes up that cat so specifically It's an image whose shape that is the dimensions of the array is 198 by 179 by 3 So it's a three-dimensional array also called a rank 3 tensor And here are the first four rows and four columns of that image So as you can see each of those Cells has three Items in it, and this is the red green and blue pixel values between naught and 255 So here's a little subset of what a picture actually looks like inside your computer so that's that that's what be our idea is to take these kinds of numbers and Use them to predict whether those kinds of numbers represent a cat or a dog Based on looking at lots of pictures of cats and dogs so that's a pretty hard thing to do and at the point in time when this this this data set actually comes from a Kaggle competition the dogs versus cats cat Kaggle competition and When it was released in I think it was 2012 The state-of-the-art was 80% accuracy so computers weren't really able to at all accurately recognize dogs versus cats So let's go ahead and train a model So Here are the three lines of code necessary to train a model And so let's go ahead and run it so I click on this on the cell I press shift enter and Then we'll wait a couple of seconds for it to pop up and there it goes Okay, and it's training and So I've asked it to do three epochs so that means it's going to look at every image three times in total or look at The entire set of images three times. That's what we mean by an epoch and as we do it's going to print out The accuracy is this last of the three numbers it prints out on the validation set okay The first two numbers we'll talk about later in short They're the value of the loss function which is in this case the cross entropy loss for the training set and the validation set and then Right at the start here is the epoch number, so you can see it's getting about 90 percent accuracy and It took 17 seconds so you can see we've come a long way since 2012 and in fact even in the competition This actually would have won The Kaggle competition of that time the best in the Kaggle competition was 98.9, and we're getting about 99 percent so this may surprise you that we're getting a You know Kaggle winning as of 20 end of 2012 early 2013 Kaggle winning image classifier in 17 seconds But and three lines of code And I think that's because like a lot of people assume that deep learning takes a huge amount of time And lots of resources and lots of data and as you'll learn in this course That in general isn't true One of the ways we've made it much simpler is that this code is written on top of a library we built imaginatively called fast AI the fast AI library is basically a library which takes all of the Best practices approaches that we can find and so each time a paper comes out You know we that looks interesting we test it out If it works well for a variety of data sets and we can figure out how to tune it We implement it in fast AI and so fast AI kind of curates all this stuff and packages up for you and Much of the time or most the time kind of automatically figures out the best way to handle things So the fast AI library is why we were able to do this in just three lines of code And the reason that we were able to make the fast AI library work So well is because it in turn sits on top of something called pytorch Which is a really flexible deep learning and machine learning and GPU computation library written by Facebook Most people are more familiar with tensorflow than pytorch because Google Markets that pretty heavily But most of the top researchers I know nowadays at least the ones that aren't at Google have switched across to pytorch Yes, Rachel, and we'll be covering some pytorch later in the course. Yeah, it's I mean one of the things that Hopefully you're really like about fast AI is that it's really flexible that you can use all these kind of curated best Practices as much or as little as you want and it's really easy to hook in at any point and write your own Data augmentation write your own loss function write your own network architecture whatever and so we'll do all of those things in this course So what does this model look like well what we can do is we can? Take a look at so what are the what is the the validation set? Dependent variable the y look like and it's just a bunch of zeros and ones So the zeros if we look at data dot classes the zeros represent cats the ones represent dogs You'll see here. There's basically two objects I'm working with one is an object called data Which contains the validation and training data and another one is the object called learn which contains the model right? So anytime you want to find something out about the data we can look inside data So we're going to get predictions for our validation set and so to do that we can call learn dot predict and So you can see here the first ten predictions and what it's giving you is prediction for dog and a prediction for cat now the way pie torch generally works and therefore fast AI also works is that most models return the log of The predictions rather than the probabilities themselves will learn why that is later in the course So for now recognize that to get your probabilities you have to get e to the power of You'll see here We're using numpy NP is numpy if you're not familiar with numpy that is one of the things that we assume that you have some familiarity with So be sure to check out the material on course dot fast at AI to learn the basics of numpy it's the way that Python handles all of the Fast numerical programming array computation that kind of thing Okay, so we can get the probabilities using that using NP dot exp There's a few functions here that you can look at yourself if you're interested, but just some plotting functions that we'll use And so we can now plot some random correct Images and so here are some images that it was correct about okay, and so remember one is a dog So anything greater than 0.5 is dog and zero is a cat so this is what 10 to the negative 5 obviously a cat Here are some which are incorrect Alright, so you can see that some of these which it thinks are incorrect obviously are just the you know images It shouldn't be there at all But clearly this one which it called a dog is not at all a dog so there are some obvious mistakes We can also take a look at Which cats is it the most confident are cats which dogs are the most dog like the most confident dogs Perhaps more interestingly we can also see which cats is it the most confident are actually dogs so which ones it is at the most wrong about and Same thing for the ones the dogs that it really thinks are cats and again some of these are just pretty weird I guess there is a dog in there. Yes, Rachel. I Just say do you want to say more about why you would want to look at your data? Yeah, sure So Yeah, so finally I just mentioned the last one We've got here is to see which ones have the probability closest to 0.5 So these are the ones that the the model knows it doesn't really know what to do with and some of these it's not surprising So yeah, I mean this is kind of like Always the first thing I do after I build a model is to try to find a way to like visualize what it's built Because if I want to make the model better Then I need to take advantage of the things that's doing well and fix the things that's doing badly so in this case And often this is the case I've learned something about the data set itself Which is that there are some things that are in here that probably shouldn't be But I've also like it's also clear that this Model has room to improve like to me. That's pretty obviously a Dog, but one thing I'm suspicious about here is this image is very kind of fat and short and As we all learn The way these algorithms work is it kind of grabs a square piece at a time So this rather makes me suspicious that we're going to need to use something called data augmentation That will learn about learn about later to handle this properly Okay Okay, so That's it right we've now built We've now built an image classifier and Something that you should try now is to grab some data yourself some pictures of Two or more different types of thing put them in different folders and run the same three lines of code on them okay, and you'll find That it will work for that as well as long as that they are pictures of things like the kinds of things that people normally take photos of right so if they're microscope microscope pictures or pathology pictures or CT scans or something this won't work very well as well learn about later There are some other things we do need to do to make that work, but for things that look like normal photos These you can run exactly the same three lines of code and just point your path variable somewhere else To get your own image classifier, so for example one student Took those three lines of code downloaded from Google images Ten examples of pictures of people playing cricket ten examples of people playing baseball And build a classifier of those images which was nearly perfectly correct the same student actually also tried downloading seven pictures of Canadian currency seven pictures of American currency and again in that case the model was 100% Accurate so you can just go to Google images if you like and download a few things of a few different classes and see See what works and tell us on the forum both your successes and your failures So what we just did was to Train a neural network, but we didn't first of all tell you what a neural network is or what training means or anything Why is that well this is the start of our top-down approach to learning? and basically the idea is that unlike the way math and technical subjects are usually taught where you learn every little element piece by piece, and you don't actually get to put them all together and build your own image classifier until Third year of graduate school our approach is to say from the start Hey, let's show you how to train an image classifier And you can start doing stuff and then gradually we dig deeper and deeper and deeper and so the idea is that Throughout the course you're going to see like new problems that we want to solve so for example in the next lesson We'll look at well What if we're not looking at normal kinds of photos, but we're looking at satellite images And we'll see why it is that this approach that we're learning today doesn't quite work as well And what things do we have to change and so we'll learn enough about the theory to understand why that happens And then we'll learn about the libraries and how we can change change things with the libraries to make that work better and So during the course we're gradually going to learn to solve more and more problems as we do so we'll need to learn More and more parts of the library more and more bits of the theory until by the end we're actually going to learn how to create a world-class Neural net architecture from scratch and our own training loop from scratch, and so we're actually built everything Ourselves so that's the general Approach yes, Rachel and we sometimes also call this the whole game Which is inspired by Harvard professor David Perkins Yeah And so the idea with the whole game is like this is more like how you would learn baseball or music With baseball you would get taken to a ball game you would learn what baseball is you would start playing it And it would only be years later that you might learn about the physics of how curveball works for example or with music we put a instrument in your hand and you start banging the drum or hitting the xylophone and it's not until years later that you learn about the circle of fifths and Understand how to construct a cadence for example So yeah, so that's this is kind of the approach. We're using it's very inspired by David Perkins and other writers of education So what that does mean is to take advantage of this as we peel back the layers We want you to keep like looking under the hood yourself as well like experiment a lot Because this is a very code driven approach So here's basically what happens right we start out looking today at convolutional neural networks for images and then in a couple of lessons we'll start to look at how to use neural nets to look at structured data and then to look at language data and then to look at recommendation system data and Then we kind of then take all of those steps, and we go backwards through them in reverse order So now you know by the end of that fourth piece you will know By the end of lesson four how to create a world-class image classifier a world-class structured data analysis program world-class language classifier world-class recommendation system And then we're going to go back over all of them again and learn in depth about like well What exactly did it do and how did it work and how do we change things around and use in different situations? For for the recommendation systems structured data Images and then finally back to language, so that's how it's going to work so What that kind of means is that most students find that they tend to watch the videos two or three times? but not like Watch lesson one two or three times and lesson two two or three times and listen three three times But like they do the whole thing into end lessons one through seven and then go back and start lesson one again That's an approach which a lot of people find when they want to kind of go back and understand all the details That off that can work pretty well, so I would say you know aim to get through to the end of lesson seven You know as as quickly as you can rather than aiming to fully understand every detail from the start So basically the plan is that in today's lesson you learn In as few lines as code as possible with as few details as possible How do you actually build an image classifier with deep learning to do this to in this case say hey here are some pictures of dogs as opposed to pictures of cats Then we're going to learn How to look at different kinds of images and particularly we're going to look at images of from satellites And we're going to say for a satellite image What kinds of things might you be seeing in that image and there could be multiple things that we're looking at so a multi-label classification problem From there we'll move to something which is perhaps the most Widely applicable for the most people which is looking at what we call structured data so data about Data that kind of comes from Databases or spreadsheets so we're going to specifically look at this data set of predicting sales The number of things that are sold at different stores on different dates Based on different holidays and and so on and so forth and so we're going to be doing this sales forecasting exercise After that we're going to look at language, and we're going to figure out What this person? Thinks about the movie zombie Gettin and we'll be able to figure out how to create just like we create image Classifiers for any kind of image will learn to create in NLP classifiers to classify any kind of language in lots of different ways Then we'll look at something called collaborative filtering which is used mainly for recommendation systems We're going to be looking at this data set that showed for different people for different movies What rating did they give it here are some of the movies and so? This is maybe an easier way to think about it is there are lots of different users and lots of different movies and then for each One we can look up for each user how much they like that movie and the goal will be of course to predict for user Movie combinations we haven't seen before are they likely to enjoy that movie or not? And that's the really common approach used for like deciding what stuff to put on your home page When somebody's visiting you know what book might they want to read or what what film might they want to see or so forth? From there we're going to then dig back into language a bit more and we're going to look at Actually, we're going to look at the writings of Nietzsche the philosopher and learn how to create our own Nietzsche philosophy from scratch Character by character so this here perhaps that every life of values of blood of intercourse when it senses there is unscrupulous His very rights and still impulse love is not actually Nietzsche That's actually like some character by character generated text that we built with this recurrent neural network And then finally we're going to loop all the way back to computer vision again We're going to learn how not just to recognize cats from dogs But to actually find like where the cat is with this kind of heat map And we're also going to learn how to write our own architectures from scratch now so this is an example of a resnet which is the kind of network that we Using in today's lesson for computer vision And so we'll actually end up building the network and the training loop from scratch And so they're basically the the steps that we're going to be taking from here and at each step. We're going to be getting into Increasing amounts of detail about how to actually do these things yourself So We've actually heard back from our students of past courses about what they found and one of the things that we've heard a lot of students say is that they spend too much time on theory and research And not enough time running the code and even after we tell people about this morning Would they still come to the end of the course and often say I wish I had taken more Seriously that advice which is to keep running code So these are actual quotes from our forum in retrospect. I should have spent the majority of my time on the actual code and the notebooks See what goes in see what comes out Now this idea that you can create World-class models in a code first approach learning what you need as you go It's very different to a lot of the advice you'll read out there such as this person on the forum hacker news who claimed that the best way to become an ML engineer is to Learn all of math learn C and C++ Learn parallel programming learn ML algorithms implement them yourself using plain C and finally start doing ML So we would say if you want to become an effective practitioner do exactly the opposite of this Yes, Rachel. Oh, yeah, I was just highlighting that this is We think this is bad advice and this can be very discouraging for a lot of people to come across. Yeah Yeah, it's it's it's it's you know we now have thousands or tens of thousands of people that have done this course and have lots and lots of examples of people who are now running research labs or Google brain residents or you know Have created patents based on deep learning and so forth who have done it by doing this course So the top-down approach works super well Now one thing to mention is like we've we've now already learned how you can actually train a world-class image classifier in 17 seconds I should mention by the way the first time you run that code There are two things it has to do that take more than 17 seconds one is that it downloads a Pre-trained model from the internet so you'll see the first time you run it. It'll say downloading model So that takes a minute or two also The first time you run it it pre computes and caches some of the intermediate information that it needs And that takes about a minute and a half as well, so if the first time you run it it takes three or four minutes To download and pre compute stuff. That's normal if you run it again. You should find it takes 20 seconds or so so image classifiers You know you may not feel like you Need to recognize cats versus dogs very often on a computer You can probably do it yourself pretty well, but what's interestingly interesting is that these? Image classification algorithms are really useful for lots and lots of things for example AlphaGo which became which beat the go world champion the way it worked was to use something at its heart that looked Almost exactly like our dogs versus cats image classification algorithm It looked at thousands and thousands of go boards And for each one there was a label saying whether that go board ended up being the winning or the losing player and so it learnt Basically an image classification that was able to look at a go board and figure out whether it was a good go board or a bad Go board and that's really the key most important Step in playing go well is to know which which move is better Another example is one of our earlier students who actually Got a couple of patterns for this work Looked at anti-fraud He had lots of examples of his customers mouse movements because they they provided kind of these user tracking software to help avoid fraud and so he took the the mouse paths basically of the users on his customers websites Turned them into pictures of where the mouse moved and how quickly it moved And then built a image classifier that took those images As input and as output it was was that a fraudulent transaction or not? And turned out to get you know really great results for his company so image classifiers Are like much more flexible than you might imagine so So this is how you know some of the ways you can use deep learning specifically for image recognition and It's worth understanding that Deep learning is not You know just a word that means the same thing as machine learning right like what is it that we're actually doing here when we're doing deep learning Instead deep learning is a kind of machine learning so machine learning was invented by this guy Arthur Samuels who was pretty amazing in the late 50s he got this IBM mainframe to play checkers Better than he can and the way he did it was he invented machine learning he got the Mainframe to play against itself Lots of times and figure out which kinds of things led to victories and which kinds of things didn't And use that to kind of almost write its own program And Arthur's Arthur Samuels actually said in 1962 that he thought that one day the vast majority of computer software Would be written using this machine learning approach rather than written by hand by writing the loops and so forth by hand So I guess that hasn't happened yet, but it seems to be in the process of happening I think one of the reasons it didn't happen for a long time is because traditional machine learning actually was very difficult and very Knowledge and time intensive so for example here's something called the computational pathologist or see path From guy called Andy back Andy back back when he was at Stanford He's now moved on to Somewhere on the East Coast Harvard, I think And what he did was he took these pathology slides of breast cancer biopsies right and he worked with lots of pathologists to come up with ideas about what kinds of patterns or features might be associated with some long-term survival versus versus dying quickly basically and so he came up with these ideas like Well, they came up with these ideas like relationship between epithelial nuclear neighbors Relationship between epithelial and stromal objects and so forth and so they came up with all of these ideas of features these are just a few of the hundreds that they thought of and then lots of smart computer programmers wrote specialist algorithms to to calculate all these different features and then those those Features were passed into a logistic regression To predict survival and it ended up working very well It had ended up that the survival predictions were more accurate than pathologists own survival predictions work and so machine learning can work really well, but the point here is that this was a an approach that took lots of domain experts and computer experts Many years of work to actually to build this thing right? so We really want something something better and So specifically I'm going to show you something which rather than being a very specific function with all this very domain specific feature engineering We're going to try and create an infinitely flexible function a function that could solve any problem Right it would solve any problem if only you set the parameters of that function correctly And so then we need some all-purpose way of setting the parameters of that function And we would need that to be fast and scalable right now if we had something that had these three things Then you wouldn't need to do this incredibly time and domain knowledge intensive approach anymore instead We can learn all of those things with this with this algorithm So as you might have guessed The algorithm in question which has these three properties is called deep learning Or if not an algorithm, then maybe we would call it a class of algorithms Let's look at each of these three things in turn So the underlying function that deep learning uses is something called the neural network Now the neural network We're going to learn all about it and implemented ourselves from scratch later on in the course But for now all you need to know about it is that it consists of a number of simple linear layers interspersed with a number of simple nonlinear layers And when you intersperse these layers in this way You get something called the universal approximation theorem and the universal approximation theorem says that this kind of function Can solve any given problem to? arbitrarily close accuracy as Long as you add enough parameters So it's actually provably shown to be an infinitely flexible function All right, so now we need some way to fit the parameters so that this infinitely flexible neural network solves some specific problem and So the way we do that is using a technique that Probably most of you will have come across before at some stage called gradient descent and with gradient descent We basically say okay for the different parameters we have How how good are they at solving my problem? And let's figure out a slightly better set of parameters and a slightly better set of parameters and basically follow down The the surface of the loss function downwards. It's kind of like a marble going down to find the minimum and As you can see here depending on where you start you end up in different places These things are called local minima now Interestingly it turns out that for neural networks particularly in particular There aren't actually multiple different Local minima there's basically just there's basically just one right or to think of it another way There are different parts of the space which are all equally good so gradient descent therefore turns out to be actually an excellent way to Solve this problem of fitting parameters to neural networks The problem is though that we need to do it in a reasonable amount of time and It's really only thanks to GPUs that that's become possible So GPUs this shows over the last few years How many gigaflops per second can you get out of a? GPU that's the red and green versus a CPU. That's the blue right and this is on a log scale So you can see that generally speaking the GPUs are about 10 times faster than the CPUs and What's really interesting is that nowadays not only is the Titan X about 10 times faster than the e5 2699 CPU But the Titan X well actually better one to look at would be the GTX 10 ATI GPU costs about 700 bucks Whereas the CPU which is 10 times slower costs over four thousand dollars So GPUs turn out to be able to solve these Neural network parameter fitting problems incredibly quickly And also incredibly cheaply so they've been absolutely key in bringing these three pieces together Then there's one more piece Which is I mentioned that these neural networks you can intersperse multiple sets of linear and then nonlinear layers In the particular example that's drawn here there's actually only one what we call hidden layer one layer in the middle and Something that we learned in the last few years is that these kinds of neural networks although they do Support the universal approximation theorem they can solve any given problem arbitrarily closely They require an exponentially increasing number of parameters to do so So they don't actually solve the fast and scalable for even reasonable size problems But we've since discovered that if you create add multiple hidden layers Then you get super linear scaling so you can add a few more hidden layers to get multiplicatively more accuracy to multiplicative Lee more complex problems and That is where it becomes called deep learning so deep learning means a neural network with multiple hidden layers So when you put all this together, it's actually really amazing what happens Google started investing in deep learning in 2012 They actually hired Jeffrey Hinton who's kind of the father of deep learning and his top student Alex Krojewski And they started trying to build a team that team became known as Google Brain and because Things with these three properties are so incredibly powerful and so incredibly flexible you can actually see over time How many projects at Google use deep learning? My graph here only goes up to a bit over a year ago But it's I know it's been continually to grow exponentially since then as well And so what you see now is around Google that deep learning is used in like every part of the business And so it's really interesting to see how This this kind of simple idea that we can solve machine learning problems Using a an algorithm that has these properties When a big company invests heavily and actually making that happen You see this incredible growth in how much it's used So for example if you use the inbox by Google software Then when you receive an email from somebody it will often Tell you here are some replies That I could send for you And so it's actually using deep learning here to read the original email and to generate some suggested replies and so like this is a really great example of the kind of stuff that Previously just wasn't possible Another great example would be Microsoft is also a little bit more recently invested heavily in deep learning and so now you can Use Skype you can speaking to it in English and ask it at the other end to Translate it in real time to Chinese or Spanish and then when they talk back to you in Chinese or Spanish Skype will in real time translate it the speech in in their language into English speech in real time And again, this is an example of stuff which we can only do thanks to deep learning And something is really interesting to think about how deep learning can be combined with human expertise So here's an example of like drawing something just sketching it out And then using a program called neural doodle This is from a couple of years ago to then say please take that sketch and render it in the style of an artist And so here's the picture that it then created Rendering it as you know impressionist painting, and I think this is a really great example of how You can use deep learning to help combine human expertise and What computers are good at? So I a few years ago Decided to try this myself like what would happen if I took? Think learning and try to use it to solve a really important problem and so the problem I picked was Diagnosing lung cancer it turns out if you can find lung nodules earlier There's a ten times higher probability of survival So it's a really important problem to solve so I got together with three other people none of us had any medical background And we grabbed a data set of CT scans We used a convolutional neural network Much like the dogs versus cats one we trained at the start of today's lesson to try and predict which CT scans had Malignant tumors in them and we ended up after a couple of months with something with a much lower False negative rate and a much lower false positive rate and a panel of four radiologists and we went on to build this in a startup into a company called analytic which has really become pretty successful and Since that time the idea of using deep learning for medical imaging has become Hugely popular and it's being used all around the world so What I've generally noticed is that you know the vast majority of Of kind of things that people do in the world currently aren't using deep learning and then each time somebody says Oh, let's try using deep learning to improve performance at this thing They nearly always get fantastic results, and then suddenly everybody in that industry starts using it as well So there's just lots and lots of opportunities here at this particular time to use deep learning to help with all kinds of different stuff So I've shut it down a few ideas here. These are all things which I know you can use deep learning for right now to get good results from and You know are things which people spend a lot of money on or have a lot of you know important business opportunities There's lots more as well But these are some examples of things that maybe at your company you could think about applying deep learning for So let's talk about what's actually going on What actually happened when we trained that deep learning model earlier? And so as I briefly mentioned the thing we created is something called a convolutional neural network or CNN and The key piece of a convolutional neural network is the convolution? So here's a great example From a website I've got the URL up here explained visually It's called and the explained visually website has an example of a convolution kind of in practice over here in the bottom left is a very zoomed-in picture of somebody's face and Over here on the right is an example of using a convolution on that image You can see here this particular thing is obviously finding Edges the edges of his head right top and bottom edges in particular Now how is it doing that well if we look at each of these little three by three areas? This is moving over. It's taking each three by three area of pixels and here are the pixel values right for each thing in that three by three area and It's multiplying each one of those three by three pixels by each one of these three by three Kernel values in a convolution this specific set of nine values is called a kernel It doesn't have to be nine it could be four by four or five by five or two by two or whatever right? In this case, it's a three by three kernel and in fact in deep learning nearly all of our kernels are three by three So in this case the kernel is one two one. Oh minus one minus two minus one so we take each of the Black through white pixel values and we multiply as you can see each of them by the corresponding value in the kernel and then we add them all together and So if you do that for every three by three area you end up with The values that you see over here on the right hand side Okay, so very low values become black very high values become white and so you can see when we're at an edge where it's black at the bottom and White at the top we're obviously going to get higher numbers over here and vice versa Okay, so that's a convolution So as you can see it is a linear operation and so based on that definition of a neural net I described before This can be a layer in our neural network It is a simple linear operation and we're going to look at much more at convolutions later including building a little spreadsheet That implements them ourselves So the next thing we're going to do is we're going to add a nonlinear layer so a nonlinearity as it's called is something which takes an input value and Turns it into some different value in a nonlinear way and you can see this orange picture here is an example of a nonlinear function specifically this is something called a sigmoid and So a sigmoid is something that has this kind of s-shape and this is what we used to use as our Nonlinearities in neural networks a lot actually nowadays. We nearly entirely use something else called a relu or rectified linear unit a relu is simply take any negative numbers and replace them with zero and Leave any positive numbers as they are so in other words in code that would be Y Equals max x comma zero so max x comma zero simply says Replace the negatives with zero Um regardless of whether you use a sigmoid or a value or something else The key point about taking this combination of a linear layer Followed by a element wise nonlinear function is that it allows us to create arbitrarily complex shapes as you see in the bottom right and The reason why is that and this is all from Michael Nielsen's neural networks and deep learning calm really fantastic interactive book as you change the values of your linear functions it basically allows you to kind of like Build these arbitrarily tall or thin blocks and then combine those blocks together And this is actually the essence of the universal approximation theorem this idea that when you have a linear layer Feeding into a nonlinearity you can actually create these arbitrarily complex shapes So this is the key idea behind why neural networks can solve any computable problem So then we need a way as we described to actually Set these parameters, so it's all very well knowing that we can move the parameters around manually to try to Create different shapes, but we have some specific shape. We want how do we get to that shape and So as we discussed earlier the basic idea is to use something called gradient descent This is an extract from a notebook actually one of the fast AI lessons And it shows actually an example of using gradient descent to solve a simple linear regression problem But I can show you the basic idea. Let's say you were just you had a simple Quadratic right and So you were trying to find the minimum of this quadratic and so in order to find the minimum You start out by randomly picking some point right so we'll say okay Let's pick let's pick here, and so you go up there, and you calculate the value of your quadratic at that point So what you now want to do is try to find a slightly better point So what you could do is you can move a little bit to the left and a little bit to the right To find out which direction is down and what you'll find out is that moving a little bit to the left Decreases the value of the function so that looks good right and so in other words. We're calculating the derivative of the function at that point And so that tells you which way is down It's the gradient and so now that we know that going to the left is down. We can take a small step in that direction To create a new point and then we can repeat the process and say okay Which way is down now and we can now take another step and another step and another step another step another step, okay? And each time we're getting closer and closer So the basic approach here is to say okay. We start we're at some point We've got some value X which is our current guess right that that time step n So then our new guess at time step n plus 1 is just equal to our previous guess plus the derivative right times Some small number because we want to take a small step We need to pick a small number because if we picked a big number right then we say okay We know we want to go to the left. Let's jump a big long way to the left We could go all the way over here and we actually end up worse right and then we do it again now or even worse again, right so if you have too high a Step size you can actually end up with divergence rather than convergence So this number here We're going to be talking about it a lot during this course and we're going to be writing all this stuff out in code from Scratch ourselves, but this number here is called the learning rate Okay So You can see here This is an example of basically starting out with some random line and then using gradient descent to gradually make the line better and better and better So what happens when you combine these ideas right the convolution? The non-linearity and gradient descent because they're all tiny small simple little things it doesn't sound that exciting But if you have enough of these kernels Right with enough layers something really interesting happens And we can actually draw them so here's the So this is a really interesting paper by Matt Seiler and Rob Fergus and what they did a few years ago Was they figured out how to basically draw a picture of what each layer in a deep learning network learned? And so they showed that layer one of the network here are nine examples of Convolution or filters from layer one of a trained network And they found that some of the filters kind of lost their And they found that some of the filters kind of learnt these diagonal lines or simple little grid patterns Some of them learnt these simple gradients right and so for each of these filters They show nine examples of little pieces of actual photos which activate that filter quite highly All right, so you can see layer one these learnt remember these these are learnt using gradient descent these filters were not programmed They were learnt using gradient descent right so in other words we were learning These nine numbers So layer two then was going to take these as inputs and Combine them together and so layer two had you know this is like nine kind of attempts to draw One of the examples as a filters in layer two they're pretty hard to draw But what you can do is say for each filter What are examples of little bits of images that activated them and you can see by layer two we've got basically Something that's being activated nearly entirely by little bits of sunset Something that's being activated by circular objects something that's being activated by Repeating horizontal lines something that's being activated by corners right so you can see how we're basically Combining layer one features together So if we combine those features together and again these are all Convolution or filters learnt through gradient descent by the third layer It's actually learnt to recognize the presence of text Another filter has learnt to recognize the presence of petals Another filter has learnt to recognize the presence of human faces right so just three layers is enough to get some pretty rich behavior So but by the time we get to layer five we've got something that can recognize the eyeballs of Insects and birds and something that can recognize unicycle wheels All right, so so this is kind of where we start with something Incredibly simple right But if we use it as a bit a big enough scale Thanks to the universal approximation theorem and the use of multiple hidden layers in deep learning We actually get these very very rich capabilities Very very rich capabilities So that is what we used when we actually trained Our little dog versus cat recognizer, right So Let's talk more about this dog versus cat recognizer So we've learned the idea of like we can look at the pictures that come out of the other end to see what the models Classifying well or classifying badly or which ones it's unsure about But let's talk about like this key thing. I mentioned which is the learning rate So I mentioned we have to set this thing I just call it L before the learning rate and you might have noticed there's a couple of numbers these kind of magic numbers Here the first one is the learning rate, right? So this number is how much do you want to multiply the gradient by when you're taking each step in? Your gradient descent We already talked about why you wouldn't want it to be too high Right, but probably also it's obvious to see why you wouldn't want it to be too low, right? If you had it too low You would take like a little step and you'd be a little bit closer and a little bit step little step little step And it would take lots and lots and lots of steps and it would take too long So setting this number well is actually really important And for the longest time this was driving deep learning research is crazy because they didn't really know a Good way to set this reliably So the good news is last year a researcher came up with an approach to quite reliably set the learning rate Unfortunately almost nobody noticed so almost no deep learning research as I know about actually are aware of this approach But it's incredibly successful and it's incredibly simple and I'll show you the idea It's built into the fast AI library as something called LR find or the learning rate finder and it comes from this paper I was actually 2015 paper. Sorry Cyclical learning rates for training neural networks by a terrific researcher called Leslie Smith and I'll show you Leslie's idea So Leslie's idea started out with the same basic idea that we've seen before Which is if we're going to optimize something pick some random point Take its gradient All right, and then specifically he said take a tiny tiny step Like tiny step so a learning rate of like 10 e next seven All right, and then do it again again, but each time increase the learning rate like double it So then we try like 2 e next seven four e next seven eight e next seven Ten e next six right and so gradually your steps Are getting bigger and bigger? Right and so you can see what's going to happen. It's going to like Start doing almost nothing right and it's going to then suddenly the loss function is going to improve very quickly Right, but then it's going to step even further again And then even further again Right let's draw the rest of that line to be clear Right and so suddenly it's then going to shoot off and get much worse right so The idea then is to go back and say okay At what point did we see like the best improvement So here We've got our best improvement right and so we'd say okay. Let's use that Learning rate right so in other words if we were to plot the learning rate Over time It was increasing like so Right and so what we then want to do is we want to plot the learning rate Against the loss right so when I say the loss I basically mean like how accurate is the model how close in this case? The loss would be how far away is the predicted prediction? from the from the goal Right and so if we plotted the learning rate against the loss we'd say like okay initially it didn't do very much right For small learning rates, and then it suddenly improved a lot and then it suddenly got a lot worse So that's the basic idea, and so we'd be looking for the point where this graph is Dropping quickly right we're not looking for its minimum point We're not saying like where was it the lowest because that could actually be the point where it's just jumped too far We want at what point was it dropping the fastest? So if you go So if you create your learn object in the same way that we did before we'll be learning more about this these details shortly If you then call LR find method on that you'll see that it'll start training a model Like it did before but it'll generally stop before it gets to 100% Because if it notices that the loss is getting A lot worse, then it'll stop automatically that's so that you can see here. It stopped at 84% and So then you can call learn dot shed that gets you the learning rate scheduler That's the object which actually does this learning rate finding and that object has a plot learning rate function And so you can see here by iteration you can see the learning rate All right, so you can see each step the learning rates getting bigger and bigger So you can see each step the learning rates getting bigger and bigger You can do it this way we can see it's increasing exponentially another way that Leslie Smith the researcher suggests is to do it linearly So I'm actually currently researching with both of these approaches to see which works best Recently I've been mainly using exponential, but I'm starting to look more at using linear at the moment And so if we then call shed dot plot that does the plot that I just described down here learning rate versus loss All right, and so we're looking for the highest learning rate we can find Where the loss is still improving? Clearly well right and so in this case I would say Ten to the negative two acts at ten to the negative one. It's not improving All right ten to the negative three it is also improving, but I'm trying to find the highest learning rate I can where it's still clearly improving, so I'd say ten to the negative two All right, so you might have noticed that when we ran our model before we had Ten to the negative two zero point zero one so that's why we picked that learning rate So there's really only one other number that we have to pick and That was this number three and so that number three controlled how many? epochs that we run so an epoch means going through our entire data set of images and Using each each time we do a bunch of they're called mini batches We grab like 64 images at a time and use them to try to improve the model a little bit using gradient descent Right and using all of the images once is called one epoch and so at the end of each epoch we print out the accuracy and validation and training loss at the end of the epoch so the question of How many epochs should we run is kind of the one other question that you need to answer to run these three lines of code? and the answer really to me is like As many as you like What you might find happen is if you run it for too long the accuracy you'll start getting worse Right and we'll learn about that why later. It's something called overfitting right so You can run it for a while run lots of epochs Once you see it getting worse You know how many epochs you can run the other thing that might happen is if you've got like a really big model or Lots and lots of data. Maybe it takes so long you don't have time until you just run enough epochs that Fit into the time you have available so the number of epochs you run. You know that's a pretty easy thing to set So they're the only two numbers that you're going to have to set and so the goal This week will be to make sure that you can run Not only these three lines of code on the data that I've provided But to run it on a set of images that you either have on your computer or that you Get from work or that you download from Google And like try to get a sense of like which kinds of images does this seem to work well for? Which ones doesn't it work work well for? or What kind of learning rates do you need for different kinds of images how many epochs do you need? How does the number of the learning rate change the accuracy you get and so forth like really experiment and then? You know try to get a sense of like what's inside this data object You know what are the y values look like what are these classes mean? And if you're not familiar with numpy you know really practice a lot with numpy So that by the time you come back for the next lesson You know we're going to be digging into a lot more detail And so you'll really feel ready to do that now one thing that's really important to be able to do that is that you? need to really know how to work with NumPy the faster. I library and so forth and so I want to show you some tricks in Jupyter Notebook to make that much easier So one trick to be aware of is if you can't quite remember how to spell something right so If you're not quite sure What the method you want is you can always hit tab and you'll get a list of? Methods that start with that letter right and so that's a quick way to find things if you then can't remember what the arguments are To a method hit shift tab Hit shift tab right so hitting shift tab tells you the arguments to the method So shift tab is like one of the most helpful things I know So let's take Np.Exp Shift tab and so now you might be wondering like okay. Well. What does this function do and how does it work? If you press shift tab twice Then it actually brings up the documentation shows you what the parameters are and shows you what it returns And gives you examples Okay, if you press it three times Then it actually pops up a whole little separate window with that information okay, so shift tab is super helpful One way to grab that window straight away is if you just put question mark at the start Then it just brings up that little documentation window Now the other thing to be aware of is Increasingly during this course we're going to be looking at the actual source code of fast AI itself and learning How it's built and why it's built that way It's really helpful to look at source code in order to you know Understand what you can do and how you can do it So if you for example wanted to look at the source code for learn dot predict you can just put two question marks Okay, and you can see it's popped up the source code right and so it's just a single line of code You'll very often find that fast AI Methods like they're they're designed to never be more than About half a screen full of code and they're often under six lines, so you can see this case It's calling predict with tags, so we could then get the source code for that in the same way Okay And then that's calling a function called predict with tags so we could get the documentation for that in the same way and Then so here we are and then finally that's what it does it iterates through a data loader Gets the predictions and then passes them back and so forth okay, so Question mark question mark is how to get source code the single question mark is how to get documentation and Shift tab is how to bring up parameters or press it more times to get the docs So that's really helpful Another really helpful thing to know about is how to use jupyter notebook well and the button that you want to know is H If you press H. It will bring up the keyboard shortcuts Palette and so now you can see exactly what jupyter notebook can do and how to do it I personally find all of these functions useful So I generally tell students to try and learn four or five different keyboard shortcuts a day Try them out see what they do see how they work, and then you can try practicing in that session And one very important thing to remember when you're finished with your work for the day Go back to paper space and click on that little button which stops and starts the machine so after it's stopped You'll see it says connection closed, and you'll see it's off if you leave it running You'll be charged for it same thing with Cressul be sure to go to your Cressul Instance and stop it you can't just turn your computer off or close the browser You actually have to stop it in Cressul or in paper space and don't forget to do that or you'll end up being charged until You finally do remember Okay, so I think that's all the information that you need to get started Please remember about the forums okay? If you get stuck at any point check them out But before you do make sure you read the information on course dot fast at AI for each lesson All right because that is going to tell you about like things that have changed okay, so if there's been some change to Which? Jupiter notebook provider we suggest using or how to set up paper space or anything like that That'll all be on course dot fast at AI Okay, thanks very much for watching and look forward to seeing you in the next lesson you", "segments": [{"id": 0, "seek": 0, "start": 0.48, "end": 8.24, "text": " Hi everybody welcome to practical deep learning for coders. This is part one of our two-part course", "tokens": [2421, 2201, 2928, 281, 8496, 2452, 2539, 337, 17656, 433, 13, 639, 307, 644, 472, 295, 527, 732, 12, 6971, 1164], "temperature": 0.0, "avg_logprob": -0.21505655561174666, "compression_ratio": 1.545, "no_speech_prob": 0.003763797925785184}, {"id": 1, "seek": 0, "start": 8.76, "end": 10.76, "text": " I'm", "tokens": [286, 478], "temperature": 0.0, "avg_logprob": -0.21505655561174666, "compression_ratio": 1.545, "no_speech_prob": 0.003763797925785184}, {"id": 2, "seek": 0, "start": 11.120000000000001, "end": 14.040000000000001, "text": " Presenting this from the Data Institute in San Francisco", "tokens": [33253, 278, 341, 490, 264, 11888, 9446, 294, 5271, 12279], "temperature": 0.0, "avg_logprob": -0.21505655561174666, "compression_ratio": 1.545, "no_speech_prob": 0.003763797925785184}, {"id": 3, "seek": 0, "start": 16.12, "end": 19.64, "text": " We'll be doing seven lessons in this part of the course", "tokens": [492, 603, 312, 884, 3407, 8820, 294, 341, 644, 295, 264, 1164], "temperature": 0.0, "avg_logprob": -0.21505655561174666, "compression_ratio": 1.545, "no_speech_prob": 0.003763797925785184}, {"id": 4, "seek": 0, "start": 20.0, "end": 24.38, "text": " Most of them will be about a couple of hours long this first one may be a little bit shorter", "tokens": [4534, 295, 552, 486, 312, 466, 257, 1916, 295, 2496, 938, 341, 700, 472, 815, 312, 257, 707, 857, 11639], "temperature": 0.0, "avg_logprob": -0.21505655561174666, "compression_ratio": 1.545, "no_speech_prob": 0.003763797925785184}, {"id": 5, "seek": 2438, "start": 24.38, "end": 32.22, "text": " Practical deep learning for coders is all about getting you up and running with deep learning in practice", "tokens": [19170, 804, 2452, 2539, 337, 17656, 433, 307, 439, 466, 1242, 291, 493, 293, 2614, 365, 2452, 2539, 294, 3124], "temperature": 0.0, "avg_logprob": -0.15800517538319464, "compression_ratio": 1.7413793103448276, "no_speech_prob": 2.586481423350051e-05}, {"id": 6, "seek": 2438, "start": 32.82, "end": 38.7, "text": " Getting world-class results, and it's a really coding focused approach as the name suggests", "tokens": [13674, 1002, 12, 11665, 3542, 11, 293, 309, 311, 257, 534, 17720, 5178, 3109, 382, 264, 1315, 13409], "temperature": 0.0, "avg_logprob": -0.15800517538319464, "compression_ratio": 1.7413793103448276, "no_speech_prob": 2.586481423350051e-05}, {"id": 7, "seek": 2438, "start": 38.7, "end": 43.22, "text": " But we're not going to dumb it down by the end of the course you'll have learned all of the", "tokens": [583, 321, 434, 406, 516, 281, 10316, 309, 760, 538, 264, 917, 295, 264, 1164, 291, 603, 362, 3264, 439, 295, 264], "temperature": 0.0, "avg_logprob": -0.15800517538319464, "compression_ratio": 1.7413793103448276, "no_speech_prob": 2.586481423350051e-05}, {"id": 8, "seek": 2438, "start": 43.66, "end": 49.66, "text": " Theory and details that are necessary to rebuild all of the world-class results. We're learning about from scratch", "tokens": [29009, 293, 4365, 300, 366, 4818, 281, 16877, 439, 295, 264, 1002, 12, 11665, 3542, 13, 492, 434, 2539, 466, 490, 8459], "temperature": 0.0, "avg_logprob": -0.15800517538319464, "compression_ratio": 1.7413793103448276, "no_speech_prob": 2.586481423350051e-05}, {"id": 9, "seek": 4966, "start": 49.66, "end": 54.98, "text": " Now I should mention that our videos are hosted on YouTube", "tokens": [823, 286, 820, 2152, 300, 527, 2145, 366, 19204, 322, 3088], "temperature": 0.0, "avg_logprob": -0.23090496769657842, "compression_ratio": 1.6736401673640167, "no_speech_prob": 2.4682147341081873e-05}, {"id": 10, "seek": 4966, "start": 55.58, "end": 60.9, "text": " But we strongly recommend watching them via our website at course dot fast AI", "tokens": [583, 321, 10613, 2748, 1976, 552, 5766, 527, 3144, 412, 1164, 5893, 2370, 7318], "temperature": 0.0, "avg_logprob": -0.23090496769657842, "compression_ratio": 1.6736401673640167, "no_speech_prob": 2.4682147341081873e-05}, {"id": 11, "seek": 4966, "start": 61.9, "end": 67.25999999999999, "text": " Although they're exactly the same videos the important thing about watching them through our website", "tokens": [5780, 436, 434, 2293, 264, 912, 2145, 264, 1021, 551, 466, 1976, 552, 807, 527, 3144], "temperature": 0.0, "avg_logprob": -0.23090496769657842, "compression_ratio": 1.6736401673640167, "no_speech_prob": 2.4682147341081873e-05}, {"id": 12, "seek": 4966, "start": 67.46, "end": 74.17999999999999, "text": " Is that you'll get all of the information you need about kind of updates to libraries by all locations", "tokens": [1119, 300, 291, 603, 483, 439, 295, 264, 1589, 291, 643, 466, 733, 295, 9205, 281, 15148, 538, 439, 9253], "temperature": 0.0, "avg_logprob": -0.23090496769657842, "compression_ratio": 1.6736401673640167, "no_speech_prob": 2.4682147341081873e-05}, {"id": 13, "seek": 4966, "start": 74.58, "end": 77.97999999999999, "text": " Further information frequently asked questions and so forth", "tokens": [15364, 1589, 10374, 2351, 1651, 293, 370, 5220], "temperature": 0.0, "avg_logprob": -0.23090496769657842, "compression_ratio": 1.6736401673640167, "no_speech_prob": 2.4682147341081873e-05}, {"id": 14, "seek": 7798, "start": 77.98, "end": 80.94, "text": " So if you're currently on YouTube watching this", "tokens": [407, 498, 291, 434, 4362, 322, 3088, 1976, 341], "temperature": 0.0, "avg_logprob": -0.1754165182308275, "compression_ratio": 1.6653061224489796, "no_speech_prob": 3.6688011277874466e-06}, {"id": 15, "seek": 7798, "start": 81.22, "end": 83.5, "text": " Why don't you switch over to cost of fast today?", "tokens": [1545, 500, 380, 291, 3679, 670, 281, 2063, 295, 2370, 965, 30], "temperature": 0.0, "avg_logprob": -0.1754165182308275, "compression_ratio": 1.6653061224489796, "no_speech_prob": 3.6688011277874466e-06}, {"id": 16, "seek": 7798, "start": 83.5, "end": 90.08, "text": " I now and start watching through there and make sure you read all of the material on the page before you start just to make", "tokens": [286, 586, 293, 722, 1976, 807, 456, 293, 652, 988, 291, 1401, 439, 295, 264, 2527, 322, 264, 3028, 949, 291, 722, 445, 281, 652], "temperature": 0.0, "avg_logprob": -0.1754165182308275, "compression_ratio": 1.6653061224489796, "no_speech_prob": 3.6688011277874466e-06}, {"id": 17, "seek": 7798, "start": 90.08, "end": 92.08, "text": " Sure that you've got everything you need", "tokens": [4894, 300, 291, 600, 658, 1203, 291, 643], "temperature": 0.0, "avg_logprob": -0.1754165182308275, "compression_ratio": 1.6653061224489796, "no_speech_prob": 3.6688011277874466e-06}, {"id": 18, "seek": 7798, "start": 93.24000000000001, "end": 99.02000000000001, "text": " The other thing to mention is that there is a really great strong community at forums dot fast AI", "tokens": [440, 661, 551, 281, 2152, 307, 300, 456, 307, 257, 534, 869, 2068, 1768, 412, 26998, 5893, 2370, 7318], "temperature": 0.0, "avg_logprob": -0.1754165182308275, "compression_ratio": 1.6653061224489796, "no_speech_prob": 3.6688011277874466e-06}, {"id": 19, "seek": 7798, "start": 101.38000000000001, "end": 104.56, "text": " From time to time you'll find that you get stuck", "tokens": [3358, 565, 281, 565, 291, 603, 915, 300, 291, 483, 5541], "temperature": 0.0, "avg_logprob": -0.1754165182308275, "compression_ratio": 1.6653061224489796, "no_speech_prob": 3.6688011277874466e-06}, {"id": 20, "seek": 10456, "start": 104.56, "end": 109.28, "text": " You may get stuck very early on you may not get stuck for quite a while", "tokens": [509, 815, 483, 5541, 588, 2440, 322, 291, 815, 406, 483, 5541, 337, 1596, 257, 1339], "temperature": 0.0, "avg_logprob": -0.16993073742799084, "compression_ratio": 1.696629213483146, "no_speech_prob": 1.1365531236151583e-06}, {"id": 21, "seek": 10456, "start": 109.28, "end": 111.76, "text": " But at some point you might get stuck with understanding", "tokens": [583, 412, 512, 935, 291, 1062, 483, 5541, 365, 3701], "temperature": 0.0, "avg_logprob": -0.16993073742799084, "compression_ratio": 1.696629213483146, "no_speech_prob": 1.1365531236151583e-06}, {"id": 22, "seek": 10456, "start": 112.68, "end": 120.24000000000001, "text": " Why something works the way it does or there may be some computer problem that you have or so forth on forums dot fast at AI", "tokens": [1545, 746, 1985, 264, 636, 309, 775, 420, 456, 815, 312, 512, 3820, 1154, 300, 291, 362, 420, 370, 5220, 322, 26998, 5893, 2370, 412, 7318], "temperature": 0.0, "avg_logprob": -0.16993073742799084, "compression_ratio": 1.696629213483146, "no_speech_prob": 1.1365531236151583e-06}, {"id": 23, "seek": 10456, "start": 120.36, "end": 126.04, "text": " There are thousands of other learners talking about every lesson and lots of other topics besides", "tokens": [821, 366, 5383, 295, 661, 23655, 1417, 466, 633, 6898, 293, 3195, 295, 661, 8378, 11868], "temperature": 0.0, "avg_logprob": -0.16993073742799084, "compression_ratio": 1.696629213483146, "no_speech_prob": 1.1365531236151583e-06}, {"id": 24, "seek": 10456, "start": 126.32000000000001, "end": 132.68, "text": " It's the most active deep learning community on the internet by far. So definitely register there and", "tokens": [467, 311, 264, 881, 4967, 2452, 2539, 1768, 322, 264, 4705, 538, 1400, 13, 407, 2138, 7280, 456, 293], "temperature": 0.0, "avg_logprob": -0.16993073742799084, "compression_ratio": 1.696629213483146, "no_speech_prob": 1.1365531236151583e-06}, {"id": 25, "seek": 13268, "start": 132.68, "end": 136.92000000000002, "text": " And start getting involved. You'll get a lot more out of this course if you do that", "tokens": [400, 722, 1242, 3288, 13, 509, 603, 483, 257, 688, 544, 484, 295, 341, 1164, 498, 291, 360, 300], "temperature": 0.0, "avg_logprob": -0.1653374180649266, "compression_ratio": 1.6851063829787234, "no_speech_prob": 1.7603307469471474e-06}, {"id": 26, "seek": 13268, "start": 139.68, "end": 144.54000000000002, "text": " So we're going to start by doing some coding this is an approach", "tokens": [407, 321, 434, 516, 281, 722, 538, 884, 512, 17720, 341, 307, 364, 3109], "temperature": 0.0, "avg_logprob": -0.1653374180649266, "compression_ratio": 1.6851063829787234, "no_speech_prob": 1.7603307469471474e-06}, {"id": 27, "seek": 13268, "start": 144.54000000000002, "end": 149.18, "text": " We're going to be talking about in a moment called the top-down approach to study", "tokens": [492, 434, 516, 281, 312, 1417, 466, 294, 257, 1623, 1219, 264, 1192, 12, 5093, 3109, 281, 2979], "temperature": 0.0, "avg_logprob": -0.1653374180649266, "compression_ratio": 1.6851063829787234, "no_speech_prob": 1.7603307469471474e-06}, {"id": 28, "seek": 13268, "start": 150.04000000000002, "end": 156.3, "text": " But let's learn it by doing it. So let's go ahead and try and actually train a neural network", "tokens": [583, 718, 311, 1466, 309, 538, 884, 309, 13, 407, 718, 311, 352, 2286, 293, 853, 293, 767, 3847, 257, 18161, 3209], "temperature": 0.0, "avg_logprob": -0.1653374180649266, "compression_ratio": 1.6851063829787234, "no_speech_prob": 1.7603307469471474e-06}, {"id": 29, "seek": 15630, "start": 156.3, "end": 162.16000000000003, "text": " Now in order to train a neural network, you almost certainly want a GPU", "tokens": [823, 294, 1668, 281, 3847, 257, 18161, 3209, 11, 291, 1920, 3297, 528, 257, 18407], "temperature": 0.0, "avg_logprob": -0.19439993819145307, "compression_ratio": 1.5634517766497462, "no_speech_prob": 1.1911032515854458e-06}, {"id": 30, "seek": 15630, "start": 162.84, "end": 166.48000000000002, "text": " GPU is a graphics processing a graphics processing unit", "tokens": [18407, 307, 257, 11837, 9007, 257, 11837, 9007, 4985], "temperature": 0.0, "avg_logprob": -0.19439993819145307, "compression_ratio": 1.5634517766497462, "no_speech_prob": 1.1911032515854458e-06}, {"id": 31, "seek": 15630, "start": 167.68, "end": 169.68, "text": " It's the things that", "tokens": [467, 311, 264, 721, 300], "temperature": 0.0, "avg_logprob": -0.19439993819145307, "compression_ratio": 1.5634517766497462, "no_speech_prob": 1.1911032515854458e-06}, {"id": 32, "seek": 15630, "start": 169.84, "end": 173.24, "text": " Companies use to help you play games better", "tokens": [44031, 764, 281, 854, 291, 862, 2813, 1101], "temperature": 0.0, "avg_logprob": -0.19439993819145307, "compression_ratio": 1.5634517766497462, "no_speech_prob": 1.1911032515854458e-06}, {"id": 33, "seek": 15630, "start": 174.48000000000002, "end": 179.76000000000002, "text": " They let your computer render the game much more quickly than your CPU can", "tokens": [814, 718, 428, 3820, 15529, 264, 1216, 709, 544, 2661, 813, 428, 13199, 393], "temperature": 0.0, "avg_logprob": -0.19439993819145307, "compression_ratio": 1.5634517766497462, "no_speech_prob": 1.1911032515854458e-06}, {"id": 34, "seek": 15630, "start": 180.60000000000002, "end": 182.60000000000002, "text": " We'll be talking about them more shortly", "tokens": [492, 603, 312, 1417, 466, 552, 544, 13392], "temperature": 0.0, "avg_logprob": -0.19439993819145307, "compression_ratio": 1.5634517766497462, "no_speech_prob": 1.1911032515854458e-06}, {"id": 35, "seek": 18260, "start": 182.6, "end": 187.2, "text": " But for now I'm going to show you how you can get access to a GPU", "tokens": [583, 337, 586, 286, 478, 516, 281, 855, 291, 577, 291, 393, 483, 2105, 281, 257, 18407], "temperature": 0.0, "avg_logprob": -0.17945407737385144, "compression_ratio": 1.5541666666666667, "no_speech_prob": 2.9943914796604076e-06}, {"id": 36, "seek": 18260, "start": 189.0, "end": 196.16, "text": " Specifically you're going to need an Nvidia GPU because only Nvidia GPUs support something called CUDA", "tokens": [26058, 291, 434, 516, 281, 643, 364, 46284, 18407, 570, 787, 46284, 18407, 82, 1406, 746, 1219, 29777, 7509], "temperature": 0.0, "avg_logprob": -0.17945407737385144, "compression_ratio": 1.5541666666666667, "no_speech_prob": 2.9943914796604076e-06}, {"id": 37, "seek": 18260, "start": 196.76, "end": 200.84, "text": " CUDA is the language and framework that nearly all deep learning", "tokens": [29777, 7509, 307, 264, 2856, 293, 8388, 300, 6217, 439, 2452, 2539], "temperature": 0.0, "avg_logprob": -0.17945407737385144, "compression_ratio": 1.5541666666666667, "no_speech_prob": 2.9943914796604076e-06}, {"id": 38, "seek": 18260, "start": 201.68, "end": 203.4, "text": " libraries and", "tokens": [15148, 293], "temperature": 0.0, "avg_logprob": -0.17945407737385144, "compression_ratio": 1.5541666666666667, "no_speech_prob": 2.9943914796604076e-06}, {"id": 39, "seek": 18260, "start": 203.4, "end": 205.4, "text": " practitioners use to do their work", "tokens": [25742, 764, 281, 360, 641, 589], "temperature": 0.0, "avg_logprob": -0.17945407737385144, "compression_ratio": 1.5541666666666667, "no_speech_prob": 2.9943914796604076e-06}, {"id": 40, "seek": 18260, "start": 207.07999999999998, "end": 211.51999999999998, "text": " Obviously, it's not ideal that we're stuck with one particular vendors cards and over time", "tokens": [7580, 11, 309, 311, 406, 7157, 300, 321, 434, 5541, 365, 472, 1729, 22056, 5632, 293, 670, 565], "temperature": 0.0, "avg_logprob": -0.17945407737385144, "compression_ratio": 1.5541666666666667, "no_speech_prob": 2.9943914796604076e-06}, {"id": 41, "seek": 21152, "start": 211.52, "end": 215.84, "text": " We hope to see more competition in this space. But for now we do need an Nvidia GPU", "tokens": [492, 1454, 281, 536, 544, 6211, 294, 341, 1901, 13, 583, 337, 586, 321, 360, 643, 364, 46284, 18407], "temperature": 0.0, "avg_logprob": -0.1599186244763826, "compression_ratio": 1.623015873015873, "no_speech_prob": 4.565918970911298e-06}, {"id": 42, "seek": 21152, "start": 217.12, "end": 223.4, "text": " Your laptop almost certainly doesn't have one unless you specifically went out of your way to buy like a gaming laptop", "tokens": [2260, 10732, 1920, 3297, 1177, 380, 362, 472, 5969, 291, 4682, 1437, 484, 295, 428, 636, 281, 2256, 411, 257, 9703, 10732], "temperature": 0.0, "avg_logprob": -0.1599186244763826, "compression_ratio": 1.623015873015873, "no_speech_prob": 4.565918970911298e-06}, {"id": 43, "seek": 21152, "start": 224.88, "end": 232.12, "text": " So almost certainly you will need to rent one and the good news is that renting access", "tokens": [407, 1920, 3297, 291, 486, 643, 281, 6214, 472, 293, 264, 665, 2583, 307, 300, 40598, 2105], "temperature": 0.0, "avg_logprob": -0.1599186244763826, "compression_ratio": 1.623015873015873, "no_speech_prob": 4.565918970911298e-06}, {"id": 44, "seek": 21152, "start": 232.64000000000001, "end": 237.82000000000002, "text": " Paying by the second for a GPU based computer is pretty easy and pretty cheap", "tokens": [11431, 278, 538, 264, 1150, 337, 257, 18407, 2361, 3820, 307, 1238, 1858, 293, 1238, 7084], "temperature": 0.0, "avg_logprob": -0.1599186244763826, "compression_ratio": 1.623015873015873, "no_speech_prob": 4.565918970911298e-06}, {"id": 45, "seek": 23782, "start": 237.82, "end": 240.95999999999998, "text": " I'm going to show you a couple of options", "tokens": [286, 478, 516, 281, 855, 291, 257, 1916, 295, 3956], "temperature": 0.0, "avg_logprob": -0.2560474484465843, "compression_ratio": 1.5571428571428572, "no_speech_prob": 2.0261338704585796e-06}, {"id": 46, "seek": 23782, "start": 242.68, "end": 245.64, "text": " The first option I'll show you which is", "tokens": [440, 700, 3614, 286, 603, 855, 291, 597, 307], "temperature": 0.0, "avg_logprob": -0.2560474484465843, "compression_ratio": 1.5571428571428572, "no_speech_prob": 2.0261338704585796e-06}, {"id": 47, "seek": 23782, "start": 246.64, "end": 252.23999999999998, "text": " Probably the easiest is called Cressul if you go to Cressul.com", "tokens": [9210, 264, 12889, 307, 1219, 383, 735, 425, 498, 291, 352, 281, 383, 735, 425, 13, 1112], "temperature": 0.0, "avg_logprob": -0.2560474484465843, "compression_ratio": 1.5571428571428572, "no_speech_prob": 2.0261338704585796e-06}, {"id": 48, "seek": 23782, "start": 253.35999999999999, "end": 254.64, "text": " and", "tokens": [293], "temperature": 0.0, "avg_logprob": -0.2560474484465843, "compression_ratio": 1.5571428571428572, "no_speech_prob": 2.0261338704585796e-06}, {"id": 49, "seek": 23782, "start": 254.64, "end": 257.26, "text": " Click on sign up or if you've been there before sign in", "tokens": [8230, 322, 1465, 493, 420, 498, 291, 600, 668, 456, 949, 1465, 294], "temperature": 0.0, "avg_logprob": -0.2560474484465843, "compression_ratio": 1.5571428571428572, "no_speech_prob": 2.0261338704585796e-06}, {"id": 50, "seek": 23782, "start": 257.88, "end": 265.6, "text": " You will find yourself at this screen which has a big button that says start Jupiter and another switch called enable GPU", "tokens": [509, 486, 915, 1803, 412, 341, 2568, 597, 575, 257, 955, 2960, 300, 1619, 722, 24567, 293, 1071, 3679, 1219, 9528, 18407], "temperature": 0.0, "avg_logprob": -0.2560474484465843, "compression_ratio": 1.5571428571428572, "no_speech_prob": 2.0261338704585796e-06}, {"id": 51, "seek": 26560, "start": 265.6, "end": 271.18, "text": " So if we make sure that is set to true enable GPU is on and we click start Jupiter", "tokens": [407, 498, 321, 652, 988, 300, 307, 992, 281, 2074, 9528, 18407, 307, 322, 293, 321, 2052, 722, 24567], "temperature": 0.0, "avg_logprob": -0.24099279429814588, "compression_ratio": 1.7219251336898396, "no_speech_prob": 1.9033749367736164e-06}, {"id": 52, "seek": 26560, "start": 272.72, "end": 275.40000000000003, "text": " And we click start Jupiter", "tokens": [400, 321, 2052, 722, 24567], "temperature": 0.0, "avg_logprob": -0.24099279429814588, "compression_ratio": 1.7219251336898396, "no_speech_prob": 1.9033749367736164e-06}, {"id": 53, "seek": 26560, "start": 277.48, "end": 280.64000000000004, "text": " It's going to launch us into something called Jupiter notebook", "tokens": [467, 311, 516, 281, 4025, 505, 666, 746, 1219, 24567, 21060], "temperature": 0.0, "avg_logprob": -0.24099279429814588, "compression_ratio": 1.7219251336898396, "no_speech_prob": 1.9033749367736164e-06}, {"id": 54, "seek": 26560, "start": 281.08000000000004, "end": 287.72, "text": " Jupiter notebook in a recent survey of tens of thousands of data scientists was rated as the third most", "tokens": [24567, 21060, 294, 257, 5162, 8984, 295, 10688, 295, 5383, 295, 1412, 7708, 390, 22103, 382, 264, 2636, 881], "temperature": 0.0, "avg_logprob": -0.24099279429814588, "compression_ratio": 1.7219251336898396, "no_speech_prob": 1.9033749367736164e-06}, {"id": 55, "seek": 26560, "start": 288.20000000000005, "end": 290.72, "text": " Important tool in the data scientists toolbox", "tokens": [42908, 2290, 294, 264, 1412, 7708, 44593], "temperature": 0.0, "avg_logprob": -0.24099279429814588, "compression_ratio": 1.7219251336898396, "no_speech_prob": 1.9033749367736164e-06}, {"id": 56, "seek": 29072, "start": 290.72, "end": 295.8, "text": " It's really important that you get to learn it well and all of our courses will be run through Jupiter", "tokens": [467, 311, 534, 1021, 300, 291, 483, 281, 1466, 309, 731, 293, 439, 295, 527, 7712, 486, 312, 1190, 807, 24567], "temperature": 0.0, "avg_logprob": -0.19461817619128105, "compression_ratio": 1.6366782006920415, "no_speech_prob": 4.936947334499564e-06}, {"id": 57, "seek": 29072, "start": 296.32000000000005, "end": 301.68, "text": " Yes, Rachel. You have a question or a comment. Oh, I just wanted to point out that you get I believe 10 free hours", "tokens": [1079, 11, 14246, 13, 509, 362, 257, 1168, 420, 257, 2871, 13, 876, 11, 286, 445, 1415, 281, 935, 484, 300, 291, 483, 286, 1697, 1266, 1737, 2496], "temperature": 0.0, "avg_logprob": -0.19461817619128105, "compression_ratio": 1.6366782006920415, "no_speech_prob": 4.936947334499564e-06}, {"id": 58, "seek": 29072, "start": 302.48, "end": 304.48, "text": " So if you wanted to try Cressul out", "tokens": [407, 498, 291, 1415, 281, 853, 383, 735, 425, 484], "temperature": 0.0, "avg_logprob": -0.19461817619128105, "compression_ratio": 1.6366782006920415, "no_speech_prob": 4.936947334499564e-06}, {"id": 59, "seek": 29072, "start": 305.56, "end": 307.36, "text": " Yeah", "tokens": [865], "temperature": 0.0, "avg_logprob": -0.19461817619128105, "compression_ratio": 1.6366782006920415, "no_speech_prob": 4.936947334499564e-06}, {"id": 60, "seek": 29072, "start": 307.36, "end": 308.56, "text": " Yeah", "tokens": [865], "temperature": 0.0, "avg_logprob": -0.19461817619128105, "compression_ratio": 1.6366782006920415, "no_speech_prob": 4.936947334499564e-06}, {"id": 61, "seek": 29072, "start": 308.56, "end": 314.6, "text": " He might have changed that recently to less hours, but you can check the fact or the pricing but you certainly get some free hours", "tokens": [634, 1062, 362, 3105, 300, 3938, 281, 1570, 2496, 11, 457, 291, 393, 1520, 264, 1186, 420, 264, 17621, 457, 291, 3297, 483, 512, 1737, 2496], "temperature": 0.0, "avg_logprob": -0.19461817619128105, "compression_ratio": 1.6366782006920415, "no_speech_prob": 4.936947334499564e-06}, {"id": 62, "seek": 29072, "start": 315.20000000000005, "end": 319.20000000000005, "text": " The pricing varies because this is actually runs on top of Amazon Web Services", "tokens": [440, 17621, 21716, 570, 341, 307, 767, 6676, 322, 1192, 295, 6795, 9573, 12124], "temperature": 0.0, "avg_logprob": -0.19461817619128105, "compression_ratio": 1.6366782006920415, "no_speech_prob": 4.936947334499564e-06}, {"id": 63, "seek": 31920, "start": 319.2, "end": 321.71999999999997, "text": " So at the moment, it's 60 cents an hour", "tokens": [407, 412, 264, 1623, 11, 309, 311, 4060, 14941, 364, 1773], "temperature": 0.0, "avg_logprob": -0.18315406239360843, "compression_ratio": 1.6454183266932272, "no_speech_prob": 1.7603289279577439e-06}, {"id": 64, "seek": 31920, "start": 323.08, "end": 326.28, "text": " The nice thing is though that you can always turn it turn it on", "tokens": [440, 1481, 551, 307, 1673, 300, 291, 393, 1009, 1261, 309, 1261, 309, 322], "temperature": 0.0, "avg_logprob": -0.18315406239360843, "compression_ratio": 1.6454183266932272, "no_speech_prob": 1.7603289279577439e-06}, {"id": 65, "seek": 31920, "start": 326.28, "end": 332.0, "text": " You know start your Jupiter without the CP without the GPU running and pay a tenth of that price, which is pretty cool", "tokens": [509, 458, 722, 428, 24567, 1553, 264, 22431, 1553, 264, 18407, 2614, 293, 1689, 257, 27269, 295, 300, 3218, 11, 597, 307, 1238, 1627], "temperature": 0.0, "avg_logprob": -0.18315406239360843, "compression_ratio": 1.6454183266932272, "no_speech_prob": 1.7603289279577439e-06}, {"id": 66, "seek": 31920, "start": 334.2, "end": 339.15999999999997, "text": " So Jupiter notebook is something we'll be doing all of this course in and so to get started here", "tokens": [407, 24567, 21060, 307, 746, 321, 603, 312, 884, 439, 295, 341, 1164, 294, 293, 370, 281, 483, 1409, 510], "temperature": 0.0, "avg_logprob": -0.18315406239360843, "compression_ratio": 1.6454183266932272, "no_speech_prob": 1.7603289279577439e-06}, {"id": 67, "seek": 31920, "start": 339.15999999999997, "end": 342.4, "text": " We're going to find our particular course. So we'd go to courses and", "tokens": [492, 434, 516, 281, 915, 527, 1729, 1164, 13, 407, 321, 1116, 352, 281, 7712, 293], "temperature": 0.0, "avg_logprob": -0.18315406239360843, "compression_ratio": 1.6454183266932272, "no_speech_prob": 1.7603289279577439e-06}, {"id": 68, "seek": 31920, "start": 343.56, "end": 345.71999999999997, "text": " We'd go to fast AI 2", "tokens": [492, 1116, 352, 281, 2370, 7318, 568], "temperature": 0.0, "avg_logprob": -0.18315406239360843, "compression_ratio": 1.6454183266932272, "no_speech_prob": 1.7603289279577439e-06}, {"id": 69, "seek": 31920, "start": 346.59999999999997, "end": 347.91999999999996, "text": " and", "tokens": [293], "temperature": 0.0, "avg_logprob": -0.18315406239360843, "compression_ratio": 1.6454183266932272, "no_speech_prob": 1.7603289279577439e-06}, {"id": 70, "seek": 34792, "start": 347.92, "end": 349.48, "text": " There they are", "tokens": [821, 436, 366], "temperature": 0.0, "avg_logprob": -0.1711856218484732, "compression_ratio": 1.6175298804780875, "no_speech_prob": 4.495107987168012e-06}, {"id": 71, "seek": 34792, "start": 349.48, "end": 353.44, "text": " Things have been moving around a little bit. So it may be in a different spot for you", "tokens": [9514, 362, 668, 2684, 926, 257, 707, 857, 13, 407, 309, 815, 312, 294, 257, 819, 4008, 337, 291], "temperature": 0.0, "avg_logprob": -0.1711856218484732, "compression_ratio": 1.6175298804780875, "no_speech_prob": 4.495107987168012e-06}, {"id": 72, "seek": 34792, "start": 354.08000000000004, "end": 357.96000000000004, "text": " When you look at this and we'll make sure all the information current information is on the website", "tokens": [1133, 291, 574, 412, 341, 293, 321, 603, 652, 988, 439, 264, 1589, 2190, 1589, 307, 322, 264, 3144], "temperature": 0.0, "avg_logprob": -0.1711856218484732, "compression_ratio": 1.6175298804780875, "no_speech_prob": 4.495107987168012e-06}, {"id": 73, "seek": 34792, "start": 360.04, "end": 363.56, "text": " Now having said that that's you know, the Cressul approach is", "tokens": [823, 1419, 848, 300, 300, 311, 291, 458, 11, 264, 383, 735, 425, 3109, 307], "temperature": 0.0, "avg_logprob": -0.1711856218484732, "compression_ratio": 1.6175298804780875, "no_speech_prob": 4.495107987168012e-06}, {"id": 74, "seek": 34792, "start": 364.40000000000003, "end": 368.08000000000004, "text": " You know as you can see, it's basically instant and and easy", "tokens": [509, 458, 382, 291, 393, 536, 11, 309, 311, 1936, 9836, 293, 293, 1858], "temperature": 0.0, "avg_logprob": -0.1711856218484732, "compression_ratio": 1.6175298804780875, "no_speech_prob": 4.495107987168012e-06}, {"id": 75, "seek": 34792, "start": 369.48, "end": 376.48, "text": " But if you've got, you know an extra hour or so to get going an even better option", "tokens": [583, 498, 291, 600, 658, 11, 291, 458, 364, 2857, 1773, 420, 370, 281, 483, 516, 364, 754, 1101, 3614], "temperature": 0.0, "avg_logprob": -0.1711856218484732, "compression_ratio": 1.6175298804780875, "no_speech_prob": 4.495107987168012e-06}, {"id": 76, "seek": 37648, "start": 376.48, "end": 378.68, "text": " Is something called paper space?", "tokens": [1119, 746, 1219, 3035, 1901, 30], "temperature": 0.0, "avg_logprob": -0.22272155284881592, "compression_ratio": 1.5707070707070707, "no_speech_prob": 8.664500455779489e-06}, {"id": 77, "seek": 37648, "start": 382.72, "end": 387.8, "text": " Paper space unlike Cressul doesn't run on top of Amazon. They have their own machines", "tokens": [24990, 1901, 8343, 383, 735, 425, 1177, 380, 1190, 322, 1192, 295, 6795, 13, 814, 362, 641, 1065, 8379], "temperature": 0.0, "avg_logprob": -0.22272155284881592, "compression_ratio": 1.5707070707070707, "no_speech_prob": 8.664500455779489e-06}, {"id": 78, "seek": 37648, "start": 393.24, "end": 398.40000000000003, "text": " And if I click on so here's his paper space and so if I click on new machine I", "tokens": [400, 498, 286, 2052, 322, 370, 510, 311, 702, 3035, 1901, 293, 370, 498, 286, 2052, 322, 777, 3479, 286], "temperature": 0.0, "avg_logprob": -0.22272155284881592, "compression_ratio": 1.5707070707070707, "no_speech_prob": 8.664500455779489e-06}, {"id": 79, "seek": 39840, "start": 398.4, "end": 405.59999999999997, "text": " Can pick which one of their three data centers to use so pick the plot one closest to you. So I'll say West Coast and", "tokens": [1664, 1888, 597, 472, 295, 641, 1045, 1412, 10898, 281, 764, 370, 1888, 264, 7542, 472, 13699, 281, 291, 13, 407, 286, 603, 584, 4055, 14960, 293], "temperature": 0.0, "avg_logprob": -0.17542723391918427, "compression_ratio": 1.5990990990990992, "no_speech_prob": 1.9333463114890037e-06}, {"id": 80, "seek": 39840, "start": 406.56, "end": 410.56, "text": " Then I'll say Linux and I'll say Ubuntu 16", "tokens": [1396, 286, 603, 584, 18734, 293, 286, 603, 584, 30230, 45605, 3165], "temperature": 0.0, "avg_logprob": -0.17542723391918427, "compression_ratio": 1.5990990990990992, "no_speech_prob": 1.9333463114890037e-06}, {"id": 81, "seek": 39840, "start": 412.28, "end": 417.23999999999995, "text": " And then it says choose machine and you can see there's various different machines I can choose from", "tokens": [400, 550, 309, 1619, 2826, 3479, 293, 291, 393, 536, 456, 311, 3683, 819, 8379, 286, 393, 2826, 490], "temperature": 0.0, "avg_logprob": -0.17542723391918427, "compression_ratio": 1.5990990990990992, "no_speech_prob": 1.9333463114890037e-06}, {"id": 82, "seek": 39840, "start": 417.84, "end": 419.84, "text": " And pay by the hour", "tokens": [400, 1689, 538, 264, 1773], "temperature": 0.0, "avg_logprob": -0.17542723391918427, "compression_ratio": 1.5990990990990992, "no_speech_prob": 1.9333463114890037e-06}, {"id": 83, "seek": 39840, "start": 420.28, "end": 425.71999999999997, "text": " So this is pretty cool for 40 cents an hour. So it's cheaper than Cressul", "tokens": [407, 341, 307, 1238, 1627, 337, 3356, 14941, 364, 1773, 13, 407, 309, 311, 12284, 813, 383, 735, 425], "temperature": 0.0, "avg_logprob": -0.17542723391918427, "compression_ratio": 1.5990990990990992, "no_speech_prob": 1.9333463114890037e-06}, {"id": 84, "seek": 42572, "start": 425.72, "end": 432.52000000000004, "text": " I get a machine that's actually going to be much faster than Cressul 60 cent an hour machine or for 65 cents an hour", "tokens": [286, 483, 257, 3479, 300, 311, 767, 516, 281, 312, 709, 4663, 813, 383, 735, 425, 4060, 1489, 364, 1773, 3479, 420, 337, 11624, 14941, 364, 1773], "temperature": 0.0, "avg_logprob": -0.1498744511368251, "compression_ratio": 1.7982456140350878, "no_speech_prob": 1.1478591659397352e-05}, {"id": 85, "seek": 42572, "start": 432.92, "end": 435.08000000000004, "text": " Way way way faster, right?", "tokens": [9558, 636, 636, 4663, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1498744511368251, "compression_ratio": 1.7982456140350878, "no_speech_prob": 1.1478591659397352e-05}, {"id": 86, "seek": 42572, "start": 435.08000000000004, "end": 440.04, "text": " So I'm going to actually show you how to get started with with the with the paper space approach", "tokens": [407, 286, 478, 516, 281, 767, 855, 291, 577, 281, 483, 1409, 365, 365, 264, 365, 264, 3035, 1901, 3109], "temperature": 0.0, "avg_logprob": -0.1498744511368251, "compression_ratio": 1.7982456140350878, "no_speech_prob": 1.1478591659397352e-05}, {"id": 87, "seek": 42572, "start": 440.52000000000004, "end": 444.88000000000005, "text": " Because that actually is going to do everything from scratch", "tokens": [1436, 300, 767, 307, 516, 281, 360, 1203, 490, 8459], "temperature": 0.0, "avg_logprob": -0.1498744511368251, "compression_ratio": 1.7982456140350878, "no_speech_prob": 1.1478591659397352e-05}, {"id": 88, "seek": 42572, "start": 445.44000000000005, "end": 452.54, "text": " You may find if you try to do the 65 cents an hour one that it may require you to contact paper space to say", "tokens": [509, 815, 915, 498, 291, 853, 281, 360, 264, 11624, 14941, 364, 1773, 472, 300, 309, 815, 3651, 291, 281, 3385, 3035, 1901, 281, 584], "temperature": 0.0, "avg_logprob": -0.1498744511368251, "compression_ratio": 1.7982456140350878, "no_speech_prob": 1.1478591659397352e-05}, {"id": 89, "seek": 45254, "start": 452.54, "end": 458.38, "text": " Like why do you want it? That's just an anti-fraud thing. So if you say fast AI there", "tokens": [1743, 983, 360, 291, 528, 309, 30, 663, 311, 445, 364, 6061, 12, 69, 424, 532, 551, 13, 407, 498, 291, 584, 2370, 7318, 456], "temperature": 0.0, "avg_logprob": -0.15468554453806835, "compression_ratio": 1.6734693877551021, "no_speech_prob": 5.989251121718553e-07}, {"id": 90, "seek": 45254, "start": 459.38, "end": 460.94, "text": " then", "tokens": [550], "temperature": 0.0, "avg_logprob": -0.15468554453806835, "compression_ratio": 1.6734693877551021, "no_speech_prob": 5.989251121718553e-07}, {"id": 91, "seek": 45254, "start": 460.94, "end": 465.34000000000003, "text": " They'll quickly get you up and running. So I'm going to use the cheapest one here 40 cents an hour", "tokens": [814, 603, 2661, 483, 291, 493, 293, 2614, 13, 407, 286, 478, 516, 281, 764, 264, 29167, 472, 510, 3356, 14941, 364, 1773], "temperature": 0.0, "avg_logprob": -0.15468554453806835, "compression_ratio": 1.6734693877551021, "no_speech_prob": 5.989251121718553e-07}, {"id": 92, "seek": 45254, "start": 468.94, "end": 471.66, "text": " You can pick how much storage you want and", "tokens": [509, 393, 1888, 577, 709, 6725, 291, 528, 293], "temperature": 0.0, "avg_logprob": -0.15468554453806835, "compression_ratio": 1.6734693877551021, "no_speech_prob": 5.989251121718553e-07}, {"id": 93, "seek": 45254, "start": 472.74, "end": 477.46000000000004, "text": " Note that you pay for a month of storage as soon as you start the machine up, right?", "tokens": [11633, 300, 291, 1689, 337, 257, 1618, 295, 6725, 382, 2321, 382, 291, 722, 264, 3479, 493, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.15468554453806835, "compression_ratio": 1.6734693877551021, "no_speech_prob": 5.989251121718553e-07}, {"id": 94, "seek": 45254, "start": 477.46000000000004, "end": 481.14000000000004, "text": " So don't start and stop lots of machines because each time you pay for that month of storage", "tokens": [407, 500, 380, 722, 293, 1590, 3195, 295, 8379, 570, 1184, 565, 291, 1689, 337, 300, 1618, 295, 6725], "temperature": 0.0, "avg_logprob": -0.15468554453806835, "compression_ratio": 1.6734693877551021, "no_speech_prob": 5.989251121718553e-07}, {"id": 95, "seek": 48114, "start": 481.14, "end": 485.65999999999997, "text": " I think the 250 gigs $7 a month option is pretty good", "tokens": [286, 519, 264, 11650, 34586, 1848, 22, 257, 1618, 3614, 307, 1238, 665], "temperature": 0.0, "avg_logprob": -0.15112137008499313, "compression_ratio": 1.5782608695652174, "no_speech_prob": 3.288727384642698e-06}, {"id": 96, "seek": 48114, "start": 486.18, "end": 489.56, "text": " But you only need 50 gig. So if you're trying to minimize the price you can go there", "tokens": [583, 291, 787, 643, 2625, 8741, 13, 407, 498, 291, 434, 1382, 281, 17522, 264, 3218, 291, 393, 352, 456], "temperature": 0.0, "avg_logprob": -0.15112137008499313, "compression_ratio": 1.5782608695652174, "no_speech_prob": 3.288727384642698e-06}, {"id": 97, "seek": 48114, "start": 491.65999999999997, "end": 497.53999999999996, "text": " The only other thing you need to do is turn on public IP so that we can actually log into this and", "tokens": [440, 787, 661, 551, 291, 643, 281, 360, 307, 1261, 322, 1908, 8671, 370, 300, 321, 393, 767, 3565, 666, 341, 293], "temperature": 0.0, "avg_logprob": -0.15112137008499313, "compression_ratio": 1.5782608695652174, "no_speech_prob": 3.288727384642698e-06}, {"id": 98, "seek": 48114, "start": 497.9, "end": 501.7, "text": " We can turn off auto snapshot to save the money of not having backups", "tokens": [492, 393, 1261, 766, 8399, 30163, 281, 3155, 264, 1460, 295, 406, 1419, 50160], "temperature": 0.0, "avg_logprob": -0.15112137008499313, "compression_ratio": 1.5782608695652174, "no_speech_prob": 3.288727384642698e-06}, {"id": 99, "seek": 50170, "start": 501.7, "end": 509.3, "text": " All right, so if you then click on create your paper space about a minute later you will find", "tokens": [1057, 558, 11, 370, 498, 291, 550, 2052, 322, 1884, 428, 3035, 1901, 466, 257, 3456, 1780, 291, 486, 915], "temperature": 0.0, "avg_logprob": -0.46211540699005127, "compression_ratio": 1.5029940119760479, "no_speech_prob": 9.132508580478316e-07}, {"id": 100, "seek": 50170, "start": 510.82, "end": 515.78, "text": " That your machine will pop up here is my Ubuntu 1604 machine", "tokens": [663, 428, 3479, 486, 1665, 493, 510, 307, 452, 30230, 45605, 3165, 14565, 3479], "temperature": 0.0, "avg_logprob": -0.46211540699005127, "compression_ratio": 1.5029940119760479, "no_speech_prob": 9.132508580478316e-07}, {"id": 101, "seek": 50170, "start": 517.54, "end": 519.54, "text": " If you check your email", "tokens": [759, 291, 1520, 428, 3796], "temperature": 0.0, "avg_logprob": -0.46211540699005127, "compression_ratio": 1.5029940119760479, "no_speech_prob": 9.132508580478316e-07}, {"id": 102, "seek": 50170, "start": 521.1, "end": 525.62, "text": " You will find that they have emailed you a password so you can copy that", "tokens": [509, 486, 915, 300, 436, 362, 45460, 291, 257, 11524, 370, 291, 393, 5055, 300], "temperature": 0.0, "avg_logprob": -0.46211540699005127, "compression_ratio": 1.5029940119760479, "no_speech_prob": 9.132508580478316e-07}, {"id": 103, "seek": 52562, "start": 525.62, "end": 533.02, "text": " And you can go to your machine and enter your password now to paste the password you would press ctrl shift V or", "tokens": [400, 291, 393, 352, 281, 428, 3479, 293, 3242, 428, 11524, 586, 281, 9163, 264, 11524, 291, 576, 1886, 269, 28269, 5513, 691, 420], "temperature": 0.0, "avg_logprob": -0.5445113711886935, "compression_ratio": 1.6388888888888888, "no_speech_prob": 4.222783900331706e-06}, {"id": 104, "seek": 52562, "start": 533.62, "end": 535.86, "text": " On Mac I guess Apple shift V", "tokens": [1282, 5707, 286, 2041, 6373, 5513, 691], "temperature": 0.0, "avg_logprob": -0.5445113711886935, "compression_ratio": 1.6388888888888888, "no_speech_prob": 4.222783900331706e-06}, {"id": 105, "seek": 52562, "start": 537.38, "end": 541.62, "text": " So it's slightly different to normal pasting or of course you can just type it in", "tokens": [407, 309, 311, 4748, 819, 281, 2710, 1791, 278, 420, 295, 1164, 291, 393, 445, 2010, 309, 294], "temperature": 0.0, "avg_logprob": -0.5445113711886935, "compression_ratio": 1.6388888888888888, "no_speech_prob": 4.222783900331706e-06}, {"id": 106, "seek": 52562, "start": 544.74, "end": 548.98, "text": " And here we are now we can make a little bit more room here by clicking on these little arrows", "tokens": [400, 510, 321, 366, 586, 321, 393, 652, 257, 707, 857, 544, 1808, 510, 538, 9697, 322, 613, 707, 19669], "temperature": 0.0, "avg_logprob": -0.5445113711886935, "compression_ratio": 1.6388888888888888, "no_speech_prob": 4.222783900331706e-06}, {"id": 107, "seek": 52562, "start": 550.1, "end": 552.1, "text": " And then we can go to the next step", "tokens": [400, 550, 321, 393, 352, 281, 264, 958, 1823], "temperature": 0.0, "avg_logprob": -0.5445113711886935, "compression_ratio": 1.6388888888888888, "no_speech_prob": 4.222783900331706e-06}, {"id": 108, "seek": 55210, "start": 552.1, "end": 555.0600000000001, "text": " Now we can make a little bit more room here by clicking on these little arrows I", "tokens": [823, 321, 393, 652, 257, 707, 857, 544, 1808, 510, 538, 9697, 322, 613, 707, 19669, 286], "temperature": 0.0, "avg_logprob": -0.1771990734597911, "compression_ratio": 1.6303317535545023, "no_speech_prob": 4.637849997379817e-06}, {"id": 109, "seek": 55210, "start": 555.94, "end": 557.78, "text": " Can zoom in a little bit?", "tokens": [1664, 8863, 294, 257, 707, 857, 30], "temperature": 0.0, "avg_logprob": -0.1771990734597911, "compression_ratio": 1.6303317535545023, "no_speech_prob": 4.637849997379817e-06}, {"id": 110, "seek": 55210, "start": 557.78, "end": 562.3000000000001, "text": " And so as you can see we've got like a terminal that's sitting inside", "tokens": [400, 370, 382, 291, 393, 536, 321, 600, 658, 411, 257, 14709, 300, 311, 3798, 1854], "temperature": 0.0, "avg_logprob": -0.1771990734597911, "compression_ratio": 1.6303317535545023, "no_speech_prob": 4.637849997379817e-06}, {"id": 111, "seek": 55210, "start": 563.46, "end": 566.0600000000001, "text": " Our browser which is kind of quite a handy way to do it", "tokens": [2621, 11185, 597, 307, 733, 295, 1596, 257, 13239, 636, 281, 360, 309], "temperature": 0.0, "avg_logprob": -0.1771990734597911, "compression_ratio": 1.6303317535545023, "no_speech_prob": 4.637849997379817e-06}, {"id": 112, "seek": 55210, "start": 566.0600000000001, "end": 573.02, "text": " So now we need to configure this for the course and so the way you configure it for the course is you type", "tokens": [407, 586, 321, 643, 281, 22162, 341, 337, 264, 1164, 293, 370, 264, 636, 291, 22162, 309, 337, 264, 1164, 307, 291, 2010], "temperature": 0.0, "avg_logprob": -0.1771990734597911, "compression_ratio": 1.6303317535545023, "no_speech_prob": 4.637849997379817e-06}, {"id": 113, "seek": 55210, "start": 574.82, "end": 576.82, "text": " Curl", "tokens": [7907, 75], "temperature": 0.0, "avg_logprob": -0.1771990734597911, "compression_ratio": 1.6303317535545023, "no_speech_prob": 4.637849997379817e-06}, {"id": 114, "seek": 57682, "start": 576.82, "end": 584.3000000000001, "text": " HTTP colon slash slash files dot fast AI slash setup slash paperspace", "tokens": [33283, 8255, 17330, 17330, 7098, 5893, 2370, 7318, 17330, 8657, 17330, 10577, 17940], "temperature": 0.0, "avg_logprob": -0.27046089702182347, "compression_ratio": 1.5454545454545454, "no_speech_prob": 3.555964440238313e-06}, {"id": 115, "seek": 57682, "start": 587.22, "end": 589.22, "text": " Pipe bash", "tokens": [430, 6527, 46183], "temperature": 0.0, "avg_logprob": -0.27046089702182347, "compression_ratio": 1.5454545454545454, "no_speech_prob": 3.555964440238313e-06}, {"id": 116, "seek": 57682, "start": 589.6600000000001, "end": 596.5400000000001, "text": " Okay, and so that's then going to run a script which is going to set up all of the CUDA drivers", "tokens": [1033, 11, 293, 370, 300, 311, 550, 516, 281, 1190, 257, 5755, 597, 307, 516, 281, 992, 493, 439, 295, 264, 29777, 7509, 11590], "temperature": 0.0, "avg_logprob": -0.27046089702182347, "compression_ratio": 1.5454545454545454, "no_speech_prob": 3.555964440238313e-06}, {"id": 117, "seek": 57682, "start": 597.3000000000001, "end": 599.3000000000001, "text": " the special Python", "tokens": [264, 2121, 15329], "temperature": 0.0, "avg_logprob": -0.27046089702182347, "compression_ratio": 1.5454545454545454, "no_speech_prob": 3.555964440238313e-06}, {"id": 118, "seek": 59930, "start": 599.3, "end": 606.4599999999999, "text": " Reaper pipe Python distribution we use called anaconda all of the libraries all of the courses", "tokens": [49956, 11240, 15329, 7316, 321, 764, 1219, 364, 326, 12233, 439, 295, 264, 15148, 439, 295, 264, 7712], "temperature": 0.0, "avg_logprob": -0.15520377781080164, "compression_ratio": 1.736842105263158, "no_speech_prob": 2.994422402480268e-06}, {"id": 119, "seek": 59930, "start": 607.0999999999999, "end": 609.9799999999999, "text": " And the data we use for the first part of the course", "tokens": [400, 264, 1412, 321, 764, 337, 264, 700, 644, 295, 264, 1164], "temperature": 0.0, "avg_logprob": -0.15520377781080164, "compression_ratio": 1.736842105263158, "no_speech_prob": 2.994422402480268e-06}, {"id": 120, "seek": 59930, "start": 610.3, "end": 617.9799999999999, "text": " Okay, so that takes an hour or so and when it's finished running you'll need to reboot your computer", "tokens": [1033, 11, 370, 300, 2516, 364, 1773, 420, 370, 293, 562, 309, 311, 4335, 2614, 291, 603, 643, 281, 33818, 428, 3820], "temperature": 0.0, "avg_logprob": -0.15520377781080164, "compression_ratio": 1.736842105263158, "no_speech_prob": 2.994422402480268e-06}, {"id": 121, "seek": 59930, "start": 618.18, "end": 620.26, "text": " So to reboot not your own computer", "tokens": [407, 281, 33818, 406, 428, 1065, 3820], "temperature": 0.0, "avg_logprob": -0.15520377781080164, "compression_ratio": 1.736842105263158, "no_speech_prob": 2.994422402480268e-06}, {"id": 122, "seek": 59930, "start": 620.26, "end": 626.0999999999999, "text": " But your paperspace computer and so to do that you can just click on this little circular restart machine button", "tokens": [583, 428, 10577, 17940, 3820, 293, 370, 281, 360, 300, 291, 393, 445, 2052, 322, 341, 707, 16476, 21022, 3479, 2960], "temperature": 0.0, "avg_logprob": -0.15520377781080164, "compression_ratio": 1.736842105263158, "no_speech_prob": 2.994422402480268e-06}, {"id": 123, "seek": 62610, "start": 626.1, "end": 631.02, "text": " Okay, and when it comes back up you'll be ready to go so what you'll find", "tokens": [1033, 11, 293, 562, 309, 1487, 646, 493, 291, 603, 312, 1919, 281, 352, 370, 437, 291, 603, 915], "temperature": 0.0, "avg_logprob": -0.2554969988371197, "compression_ratio": 1.7746478873239437, "no_speech_prob": 1.2679245173785603e-06}, {"id": 124, "seek": 62610, "start": 632.9, "end": 638.98, "text": " Is that you've now got an anaconda 3 directory that's where your Python is you've got a data directory", "tokens": [1119, 300, 291, 600, 586, 658, 364, 364, 326, 12233, 805, 21120, 300, 311, 689, 428, 15329, 307, 291, 600, 658, 257, 1412, 21120], "temperature": 0.0, "avg_logprob": -0.2554969988371197, "compression_ratio": 1.7746478873239437, "no_speech_prob": 1.2679245173785603e-06}, {"id": 125, "seek": 62610, "start": 639.5400000000001, "end": 644.62, "text": " Which contains the data for the first part of this course first lesson which is that dogs and cats?", "tokens": [3013, 8306, 264, 1412, 337, 264, 700, 644, 295, 341, 1164, 700, 6898, 597, 307, 300, 7197, 293, 11111, 30], "temperature": 0.0, "avg_logprob": -0.2554969988371197, "compression_ratio": 1.7746478873239437, "no_speech_prob": 1.2679245173785603e-06}, {"id": 126, "seek": 62610, "start": 645.3000000000001, "end": 647.62, "text": " And you've got a fast AI directory", "tokens": [400, 291, 600, 658, 257, 2370, 7318, 21120], "temperature": 0.0, "avg_logprob": -0.2554969988371197, "compression_ratio": 1.7746478873239437, "no_speech_prob": 1.2679245173785603e-06}, {"id": 127, "seek": 62610, "start": 648.66, "end": 654.2, "text": " And that contains everything for this course so what you should do", "tokens": [400, 300, 8306, 1203, 337, 341, 1164, 370, 437, 291, 820, 360], "temperature": 0.0, "avg_logprob": -0.2554969988371197, "compression_ratio": 1.7746478873239437, "no_speech_prob": 1.2679245173785603e-06}, {"id": 128, "seek": 65420, "start": 654.2, "end": 656.2, "text": " Is", "tokens": [1119], "temperature": 0.0, "avg_logprob": -0.20844386322329742, "compression_ratio": 1.7733990147783252, "no_speech_prob": 2.769388629531022e-06}, {"id": 129, "seek": 65420, "start": 657.44, "end": 663.24, "text": " CD fast AI and from time to time you should go get pull and that will just make sure that all of your", "tokens": [6743, 2370, 7318, 293, 490, 565, 281, 565, 291, 820, 352, 483, 2235, 293, 300, 486, 445, 652, 988, 300, 439, 295, 428], "temperature": 0.0, "avg_logprob": -0.20844386322329742, "compression_ratio": 1.7733990147783252, "no_speech_prob": 2.769388629531022e-06}, {"id": 130, "seek": 65420, "start": 664.08, "end": 666.08, "text": " Fast AI stuff is up to date", "tokens": [15968, 7318, 1507, 307, 493, 281, 4002], "temperature": 0.0, "avg_logprob": -0.20844386322329742, "compression_ratio": 1.7733990147783252, "no_speech_prob": 2.769388629531022e-06}, {"id": 131, "seek": 65420, "start": 666.6, "end": 671.96, "text": " And also from time to time you might want to just check that your Python libraries are up to date and so you can type", "tokens": [400, 611, 490, 565, 281, 565, 291, 1062, 528, 281, 445, 1520, 300, 428, 15329, 15148, 366, 493, 281, 4002, 293, 370, 291, 393, 2010], "temperature": 0.0, "avg_logprob": -0.20844386322329742, "compression_ratio": 1.7733990147783252, "no_speech_prob": 2.769388629531022e-06}, {"id": 132, "seek": 65420, "start": 671.96, "end": 673.96, "text": " Conda and update", "tokens": [383, 12233, 293, 5623], "temperature": 0.0, "avg_logprob": -0.20844386322329742, "compression_ratio": 1.7733990147783252, "no_speech_prob": 2.769388629531022e-06}, {"id": 133, "seek": 65420, "start": 674.0, "end": 676.0, "text": " to do that", "tokens": [281, 360, 300], "temperature": 0.0, "avg_logprob": -0.20844386322329742, "compression_ratio": 1.7733990147783252, "no_speech_prob": 2.769388629531022e-06}, {"id": 134, "seek": 65420, "start": 676.0, "end": 681.76, "text": " Alright, so make sure that you've cd'd into fast AI and then you can type Jupiter", "tokens": [2798, 11, 370, 652, 988, 300, 291, 600, 269, 67, 1116, 666, 2370, 7318, 293, 550, 291, 393, 2010, 24567], "temperature": 0.0, "avg_logprob": -0.20844386322329742, "compression_ratio": 1.7733990147783252, "no_speech_prob": 2.769388629531022e-06}, {"id": 135, "seek": 68176, "start": 681.76, "end": 683.76, "text": " notebook", "tokens": [21060], "temperature": 0.0, "avg_logprob": -0.22170740937533445, "compression_ratio": 1.5888888888888888, "no_speech_prob": 1.8448130276738084e-06}, {"id": 136, "seek": 68176, "start": 686.96, "end": 691.28, "text": " All right there it is so we now have a Jupiter notebook server running", "tokens": [1057, 558, 456, 309, 307, 370, 321, 586, 362, 257, 24567, 21060, 7154, 2614], "temperature": 0.0, "avg_logprob": -0.22170740937533445, "compression_ratio": 1.5888888888888888, "no_speech_prob": 1.8448130276738084e-06}, {"id": 137, "seek": 68176, "start": 691.28, "end": 696.4399999999999, "text": " And we want to connect to that and so you can see here. It says copy paste this URL", "tokens": [400, 321, 528, 281, 1745, 281, 300, 293, 370, 291, 393, 536, 510, 13, 467, 1619, 5055, 9163, 341, 12905], "temperature": 0.0, "avg_logprob": -0.22170740937533445, "compression_ratio": 1.5888888888888888, "no_speech_prob": 1.8448130276738084e-06}, {"id": 138, "seek": 68176, "start": 697.3199999999999, "end": 701.0, "text": " Into your browser when you connect so if you double click on it", "tokens": [23373, 428, 11185, 562, 291, 1745, 370, 498, 291, 3834, 2052, 322, 309], "temperature": 0.0, "avg_logprob": -0.22170740937533445, "compression_ratio": 1.5888888888888888, "no_speech_prob": 1.8448130276738084e-06}, {"id": 139, "seek": 68176, "start": 701.76, "end": 703.76, "text": " Then that will actually", "tokens": [1396, 300, 486, 767], "temperature": 0.0, "avg_logprob": -0.22170740937533445, "compression_ratio": 1.5888888888888888, "no_speech_prob": 1.8448130276738084e-06}, {"id": 140, "seek": 68176, "start": 706.2, "end": 708.2, "text": " That will actually copy it for you", "tokens": [663, 486, 767, 5055, 309, 337, 291], "temperature": 0.0, "avg_logprob": -0.22170740937533445, "compression_ratio": 1.5888888888888888, "no_speech_prob": 1.8448130276738084e-06}, {"id": 141, "seek": 70820, "start": 708.2, "end": 712.9000000000001, "text": " Then you can go and paste it, but you need to change this localhost", "tokens": [1396, 291, 393, 352, 293, 9163, 309, 11, 457, 291, 643, 281, 1319, 341, 2654, 6037], "temperature": 0.0, "avg_logprob": -0.1956183910369873, "compression_ratio": 1.6355140186915889, "no_speech_prob": 1.5056925803946797e-06}, {"id": 142, "seek": 70820, "start": 713.76, "end": 719.2, "text": " To be the paper space IP address, so if you click on the little arrows to go smaller", "tokens": [1407, 312, 264, 3035, 1901, 8671, 2985, 11, 370, 498, 291, 2052, 322, 264, 707, 19669, 281, 352, 4356], "temperature": 0.0, "avg_logprob": -0.1956183910369873, "compression_ratio": 1.6355140186915889, "no_speech_prob": 1.5056925803946797e-06}, {"id": 143, "seek": 70820, "start": 719.44, "end": 723.5200000000001, "text": " you can see the IP address is here, so I just copy that and", "tokens": [291, 393, 536, 264, 8671, 2985, 307, 510, 11, 370, 286, 445, 5055, 300, 293], "temperature": 0.0, "avg_logprob": -0.1956183910369873, "compression_ratio": 1.6355140186915889, "no_speech_prob": 1.5056925803946797e-06}, {"id": 144, "seek": 70820, "start": 724.88, "end": 726.84, "text": " Paste it", "tokens": [43827, 309], "temperature": 0.0, "avg_logprob": -0.1956183910369873, "compression_ratio": 1.6355140186915889, "no_speech_prob": 1.5056925803946797e-06}, {"id": 145, "seek": 70820, "start": 726.84, "end": 728.88, "text": " Where it used to say localhost okay?", "tokens": [2305, 309, 1143, 281, 584, 2654, 6037, 1392, 30], "temperature": 0.0, "avg_logprob": -0.1956183910369873, "compression_ratio": 1.6355140186915889, "no_speech_prob": 1.5056925803946797e-06}, {"id": 146, "seek": 70820, "start": 728.88, "end": 735.44, "text": " So it's now HTTP and then my IP and then everything else I copied before and so there it is", "tokens": [407, 309, 311, 586, 33283, 293, 550, 452, 8671, 293, 550, 1203, 1646, 286, 25365, 949, 293, 370, 456, 309, 307], "temperature": 0.0, "avg_logprob": -0.1956183910369873, "compression_ratio": 1.6355140186915889, "no_speech_prob": 1.5056925803946797e-06}, {"id": 147, "seek": 73544, "start": 735.44, "end": 738.44, "text": " So this is the fast AI", "tokens": [407, 341, 307, 264, 2370, 7318], "temperature": 0.0, "avg_logprob": -0.31955761068007527, "compression_ratio": 1.4969325153374233, "no_speech_prob": 1.4823533547314582e-06}, {"id": 148, "seek": 73544, "start": 739.44, "end": 747.36, "text": " Get repo and our courses are all in courses and in there the deep learning part one is dl1 and", "tokens": [3240, 49040, 293, 527, 7712, 366, 439, 294, 7712, 293, 294, 456, 264, 2452, 2539, 644, 472, 307, 274, 75, 16, 293], "temperature": 0.0, "avg_logprob": -0.31955761068007527, "compression_ratio": 1.4969325153374233, "no_speech_prob": 1.4823533547314582e-06}, {"id": 149, "seek": 73544, "start": 748.1600000000001, "end": 750.1600000000001, "text": " In there you will find", "tokens": [682, 456, 291, 486, 915], "temperature": 0.0, "avg_logprob": -0.31955761068007527, "compression_ratio": 1.4969325153374233, "no_speech_prob": 1.4823533547314582e-06}, {"id": 150, "seek": 73544, "start": 750.6800000000001, "end": 754.12, "text": " Lesson one dot I pie and be I Python notebook", "tokens": [18649, 266, 472, 5893, 286, 1730, 293, 312, 286, 15329, 21060], "temperature": 0.0, "avg_logprob": -0.31955761068007527, "compression_ratio": 1.4969325153374233, "no_speech_prob": 1.4823533547314582e-06}, {"id": 151, "seek": 73544, "start": 759.44, "end": 762.6, "text": " So here we are ready to go depending whether you're using", "tokens": [407, 510, 321, 366, 1919, 281, 352, 5413, 1968, 291, 434, 1228], "temperature": 0.0, "avg_logprob": -0.31955761068007527, "compression_ratio": 1.4969325153374233, "no_speech_prob": 1.4823533547314582e-06}, {"id": 152, "seek": 76260, "start": 762.6, "end": 766.32, "text": " Cressel or paper space or something else if you check courses dot fast at AI", "tokens": [383, 735, 338, 420, 3035, 1901, 420, 746, 1646, 498, 291, 1520, 7712, 5893, 2370, 412, 7318], "temperature": 0.0, "avg_logprob": -0.23159056124479874, "compression_ratio": 1.6224066390041494, "no_speech_prob": 3.90543482353678e-06}, {"id": 153, "seek": 76260, "start": 766.6, "end": 771.08, "text": " We'll keep putting additional videos and links to information about how to set up other", "tokens": [492, 603, 1066, 3372, 4497, 2145, 293, 6123, 281, 1589, 466, 577, 281, 992, 493, 661], "temperature": 0.0, "avg_logprob": -0.23159056124479874, "compression_ratio": 1.6224066390041494, "no_speech_prob": 3.90543482353678e-06}, {"id": 154, "seek": 76260, "start": 771.64, "end": 774.72, "text": " You know good Jupiter notebook providers as well", "tokens": [509, 458, 665, 24567, 21060, 11330, 382, 731], "temperature": 0.0, "avg_logprob": -0.23159056124479874, "compression_ratio": 1.6224066390041494, "no_speech_prob": 3.90543482353678e-06}, {"id": 155, "seek": 76260, "start": 777.48, "end": 780.0400000000001, "text": " So to run a cell in", "tokens": [407, 281, 1190, 257, 2815, 294], "temperature": 0.0, "avg_logprob": -0.23159056124479874, "compression_ratio": 1.6224066390041494, "no_speech_prob": 3.90543482353678e-06}, {"id": 156, "seek": 76260, "start": 780.6, "end": 786.12, "text": " Jupiter notebook you select the cell and you hold down shift and press enter or", "tokens": [24567, 21060, 291, 3048, 264, 2815, 293, 291, 1797, 760, 5513, 293, 1886, 3242, 420], "temperature": 0.0, "avg_logprob": -0.23159056124479874, "compression_ratio": 1.6224066390041494, "no_speech_prob": 3.90543482353678e-06}, {"id": 157, "seek": 76260, "start": 786.72, "end": 791.6, "text": " If you've got the toolbar showing you can just click on the little run button", "tokens": [759, 291, 600, 658, 264, 47715, 4099, 291, 393, 445, 2052, 322, 264, 707, 1190, 2960], "temperature": 0.0, "avg_logprob": -0.23159056124479874, "compression_ratio": 1.6224066390041494, "no_speech_prob": 3.90543482353678e-06}, {"id": 158, "seek": 79160, "start": 791.6, "end": 794.28, "text": " So you'll notice that some cells contain", "tokens": [407, 291, 603, 3449, 300, 512, 5438, 5304], "temperature": 0.0, "avg_logprob": -0.19280415489560082, "compression_ratio": 1.6796116504854368, "no_speech_prob": 1.6280456520689768e-06}, {"id": 159, "seek": 79160, "start": 795.08, "end": 802.86, "text": " Code and some contain text and some contain pictures and some contain videos so this environment basically has", "tokens": [15549, 293, 512, 5304, 2487, 293, 512, 5304, 5242, 293, 512, 5304, 2145, 370, 341, 2823, 1936, 575], "temperature": 0.0, "avg_logprob": -0.19280415489560082, "compression_ratio": 1.6796116504854368, "no_speech_prob": 1.6280456520689768e-06}, {"id": 160, "seek": 79160, "start": 803.88, "end": 809.26, "text": " You know it's a way that we can give you access to an it a way to run", "tokens": [509, 458, 309, 311, 257, 636, 300, 321, 393, 976, 291, 2105, 281, 364, 309, 257, 636, 281, 1190], "temperature": 0.0, "avg_logprob": -0.19280415489560082, "compression_ratio": 1.6796116504854368, "no_speech_prob": 1.6280456520689768e-06}, {"id": 161, "seek": 79160, "start": 809.5600000000001, "end": 813.66, "text": " Experiments and to kind of tell you what's going on show pictures", "tokens": [12522, 8321, 293, 281, 733, 295, 980, 291, 437, 311, 516, 322, 855, 5242], "temperature": 0.0, "avg_logprob": -0.19280415489560082, "compression_ratio": 1.6796116504854368, "no_speech_prob": 1.6280456520689768e-06}, {"id": 162, "seek": 79160, "start": 814.2, "end": 818.6, "text": " This is why it's like a super popular tool in data science", "tokens": [639, 307, 983, 309, 311, 411, 257, 1687, 3743, 2290, 294, 1412, 3497], "temperature": 0.0, "avg_logprob": -0.19280415489560082, "compression_ratio": 1.6796116504854368, "no_speech_prob": 1.6280456520689768e-06}, {"id": 163, "seek": 81860, "start": 818.6, "end": 822.6800000000001, "text": " The data science is kind of all about running experiments really", "tokens": [440, 1412, 3497, 307, 733, 295, 439, 466, 2614, 12050, 534], "temperature": 0.0, "avg_logprob": -0.15955835018517836, "compression_ratio": 1.8158995815899581, "no_speech_prob": 2.26031670536031e-06}, {"id": 164, "seek": 81860, "start": 824.12, "end": 831.24, "text": " So let's go ahead and click run and you'll see that cell turn into a star the one turned into a star for a moment", "tokens": [407, 718, 311, 352, 2286, 293, 2052, 1190, 293, 291, 603, 536, 300, 2815, 1261, 666, 257, 3543, 264, 472, 3574, 666, 257, 3543, 337, 257, 1623], "temperature": 0.0, "avg_logprob": -0.15955835018517836, "compression_ratio": 1.8158995815899581, "no_speech_prob": 2.26031670536031e-06}, {"id": 165, "seek": 81860, "start": 831.24, "end": 836.3000000000001, "text": " And then it finished running okay, so let's try the next one this time instead of using the toolbar", "tokens": [400, 550, 309, 4335, 2614, 1392, 11, 370, 718, 311, 853, 264, 958, 472, 341, 565, 2602, 295, 1228, 264, 47715], "temperature": 0.0, "avg_logprob": -0.15955835018517836, "compression_ratio": 1.8158995815899581, "no_speech_prob": 2.26031670536031e-06}, {"id": 166, "seek": 81860, "start": 836.3000000000001, "end": 838.3000000000001, "text": " I'm going to hold down shift and press enter", "tokens": [286, 478, 516, 281, 1797, 760, 5513, 293, 1886, 3242], "temperature": 0.0, "avg_logprob": -0.15955835018517836, "compression_ratio": 1.8158995815899581, "no_speech_prob": 2.26031670536031e-06}, {"id": 167, "seek": 81860, "start": 839.0, "end": 844.32, "text": " And you can see again it turned into a star and then said to so if I'd hold down shift and keep pressing enter", "tokens": [400, 291, 393, 536, 797, 309, 3574, 666, 257, 3543, 293, 550, 848, 281, 370, 498, 286, 1116, 1797, 760, 5513, 293, 1066, 12417, 3242], "temperature": 0.0, "avg_logprob": -0.15955835018517836, "compression_ratio": 1.8158995815899581, "no_speech_prob": 2.26031670536031e-06}, {"id": 168, "seek": 84432, "start": 844.32, "end": 850.6400000000001, "text": " It just keeps running each cell right so I can put anything. I like for example 1 plus 1", "tokens": [467, 445, 5965, 2614, 1184, 2815, 558, 370, 286, 393, 829, 1340, 13, 286, 411, 337, 1365, 502, 1804, 502], "temperature": 0.0, "avg_logprob": -0.2563664809517238, "compression_ratio": 1.5265700483091786, "no_speech_prob": 3.5559648949856637e-06}, {"id": 169, "seek": 84432, "start": 851.44, "end": 853.44, "text": " These two okay", "tokens": [1981, 732, 1392], "temperature": 0.0, "avg_logprob": -0.2563664809517238, "compression_ratio": 1.5265700483091786, "no_speech_prob": 3.5559648949856637e-06}, {"id": 170, "seek": 84432, "start": 855.32, "end": 857.72, "text": " So what we're going to do is we're going to", "tokens": [407, 437, 321, 434, 516, 281, 360, 307, 321, 434, 516, 281], "temperature": 0.0, "avg_logprob": -0.2563664809517238, "compression_ratio": 1.5265700483091786, "no_speech_prob": 3.5559648949856637e-06}, {"id": 171, "seek": 84432, "start": 858.5600000000001, "end": 864.84, "text": " Yes, Rachel. This is just a side note, but I wanted to point out that we're using Python 3 here. Yes", "tokens": [1079, 11, 14246, 13, 639, 307, 445, 257, 1252, 3637, 11, 457, 286, 1415, 281, 935, 484, 300, 321, 434, 1228, 15329, 805, 510, 13, 1079], "temperature": 0.0, "avg_logprob": -0.2563664809517238, "compression_ratio": 1.5265700483091786, "no_speech_prob": 3.5559648949856637e-06}, {"id": 172, "seek": 84432, "start": 864.84, "end": 866.84, "text": " Thank you Python 3.6", "tokens": [1044, 291, 15329, 805, 13, 21], "temperature": 0.0, "avg_logprob": -0.2563664809517238, "compression_ratio": 1.5265700483091786, "no_speech_prob": 3.5559648949856637e-06}, {"id": 173, "seek": 84432, "start": 869.08, "end": 871.08, "text": " Yeah", "tokens": [865], "temperature": 0.0, "avg_logprob": -0.2563664809517238, "compression_ratio": 1.5265700483091786, "no_speech_prob": 3.5559648949856637e-06}, {"id": 174, "seek": 87108, "start": 871.08, "end": 877.5200000000001, "text": " And it is important to switch to Python 3 you know now well for fast.ai you require it", "tokens": [400, 309, 307, 1021, 281, 3679, 281, 15329, 805, 291, 458, 586, 731, 337, 2370, 13, 1301, 291, 3651, 309], "temperature": 0.0, "avg_logprob": -0.24069068801235144, "compression_ratio": 1.4973821989528795, "no_speech_prob": 8.139544661389664e-06}, {"id": 175, "seek": 87108, "start": 878.6800000000001, "end": 880.9200000000001, "text": " But you know increasingly a lot of libraries are", "tokens": [583, 291, 458, 12980, 257, 688, 295, 15148, 366], "temperature": 0.0, "avg_logprob": -0.24069068801235144, "compression_ratio": 1.4973821989528795, "no_speech_prob": 8.139544661389664e-06}, {"id": 176, "seek": 87108, "start": 882.08, "end": 884.08, "text": " removing support for Python 2", "tokens": [12720, 1406, 337, 15329, 568], "temperature": 0.0, "avg_logprob": -0.24069068801235144, "compression_ratio": 1.4973821989528795, "no_speech_prob": 8.139544661389664e-06}, {"id": 177, "seek": 87108, "start": 885.48, "end": 887.48, "text": " Thanks Rachel", "tokens": [2561, 14246], "temperature": 0.0, "avg_logprob": -0.24069068801235144, "compression_ratio": 1.4973821989528795, "no_speech_prob": 8.139544661389664e-06}, {"id": 178, "seek": 87108, "start": 888.4000000000001, "end": 894.1800000000001, "text": " Now it mentions here that you can download the data set for this lesson from this location", "tokens": [823, 309, 23844, 510, 300, 291, 393, 5484, 264, 1412, 992, 337, 341, 6898, 490, 341, 4914], "temperature": 0.0, "avg_logprob": -0.24069068801235144, "compression_ratio": 1.4973821989528795, "no_speech_prob": 8.139544661389664e-06}, {"id": 179, "seek": 87108, "start": 895.4000000000001, "end": 897.12, "text": " if you're using", "tokens": [498, 291, 434, 1228], "temperature": 0.0, "avg_logprob": -0.24069068801235144, "compression_ratio": 1.4973821989528795, "no_speech_prob": 8.139544661389664e-06}, {"id": 180, "seek": 89712, "start": 897.12, "end": 903.72, "text": " Cressell or the paper space script that we just used to set up and this will already be made available for you", "tokens": [383, 495, 14555, 420, 264, 3035, 1901, 5755, 300, 321, 445, 1143, 281, 992, 493, 293, 341, 486, 1217, 312, 1027, 2435, 337, 291], "temperature": 0.0, "avg_logprob": -0.1734577540693612, "compression_ratio": 1.7286821705426356, "no_speech_prob": 2.8130002647230867e-06}, {"id": 181, "seek": 89712, "start": 903.72, "end": 906.44, "text": " Okay, if you're not you'll need to w get it as soon", "tokens": [1033, 11, 498, 291, 434, 406, 291, 603, 643, 281, 261, 483, 309, 382, 2321], "temperature": 0.0, "avg_logprob": -0.1734577540693612, "compression_ratio": 1.7286821705426356, "no_speech_prob": 2.8130002647230867e-06}, {"id": 182, "seek": 89712, "start": 907.16, "end": 908.32, "text": " now", "tokens": [586], "temperature": 0.0, "avg_logprob": -0.1734577540693612, "compression_ratio": 1.7286821705426356, "no_speech_prob": 2.8130002647230867e-06}, {"id": 183, "seek": 89712, "start": 908.32, "end": 910.32, "text": " Cressell is", "tokens": [383, 495, 14555, 307], "temperature": 0.0, "avg_logprob": -0.1734577540693612, "compression_ratio": 1.7286821705426356, "no_speech_prob": 2.8130002647230867e-06}, {"id": 184, "seek": 89712, "start": 910.52, "end": 914.1, "text": " quite a bit slower than paper space and also it", "tokens": [1596, 257, 857, 14009, 813, 3035, 1901, 293, 611, 309], "temperature": 0.0, "avg_logprob": -0.1734577540693612, "compression_ratio": 1.7286821705426356, "no_speech_prob": 2.8130002647230867e-06}, {"id": 185, "seek": 89712, "start": 915.04, "end": 921.6, "text": " There are some particular things it doesn't support that we really need and so there there are a couple of extra steps if you're using", "tokens": [821, 366, 512, 1729, 721, 309, 1177, 380, 1406, 300, 321, 534, 643, 293, 370, 456, 456, 366, 257, 1916, 295, 2857, 4439, 498, 291, 434, 1228], "temperature": 0.0, "avg_logprob": -0.1734577540693612, "compression_ratio": 1.7286821705426356, "no_speech_prob": 2.8130002647230867e-06}, {"id": 186, "seek": 89712, "start": 921.64, "end": 926.12, "text": " Cressell you have to run two more cells right so you can see these are commented out", "tokens": [383, 495, 14555, 291, 362, 281, 1190, 732, 544, 5438, 558, 370, 291, 393, 536, 613, 366, 26940, 484], "temperature": 0.0, "avg_logprob": -0.1734577540693612, "compression_ratio": 1.7286821705426356, "no_speech_prob": 2.8130002647230867e-06}, {"id": 187, "seek": 92612, "start": 926.12, "end": 931.48, "text": " They've got hashes at the start so if you remove the hashes from these and run these two additional cells", "tokens": [814, 600, 658, 575, 8076, 412, 264, 722, 370, 498, 291, 4159, 264, 575, 8076, 490, 613, 293, 1190, 613, 732, 4497, 5438], "temperature": 0.0, "avg_logprob": -0.13444654657206404, "compression_ratio": 1.6808510638297873, "no_speech_prob": 3.2887180623220047e-06}, {"id": 188, "seek": 92612, "start": 931.72, "end": 937.22, "text": " That just runs the stuff the stuff that you only need for Cressell. I'm using paper space, so I'm not going to run it", "tokens": [663, 445, 6676, 264, 1507, 264, 1507, 300, 291, 787, 643, 337, 383, 495, 14555, 13, 286, 478, 1228, 3035, 1901, 11, 370, 286, 478, 406, 516, 281, 1190, 309], "temperature": 0.0, "avg_logprob": -0.13444654657206404, "compression_ratio": 1.6808510638297873, "no_speech_prob": 3.2887180623220047e-06}, {"id": 189, "seek": 92612, "start": 938.64, "end": 940.64, "text": " Okay, so", "tokens": [1033, 11, 370], "temperature": 0.0, "avg_logprob": -0.13444654657206404, "compression_ratio": 1.6808510638297873, "no_speech_prob": 3.2887180623220047e-06}, {"id": 190, "seek": 92612, "start": 941.64, "end": 943.64, "text": " Inside our", "tokens": [15123, 527], "temperature": 0.0, "avg_logprob": -0.13444654657206404, "compression_ratio": 1.6808510638297873, "no_speech_prob": 3.2887180623220047e-06}, {"id": 191, "seek": 92612, "start": 943.76, "end": 947.92, "text": " Data so we set up this path to data slash dogs cats", "tokens": [11888, 370, 321, 992, 493, 341, 3100, 281, 1412, 17330, 7197, 11111], "temperature": 0.0, "avg_logprob": -0.13444654657206404, "compression_ratio": 1.6808510638297873, "no_speech_prob": 3.2887180623220047e-06}, {"id": 192, "seek": 92612, "start": 947.92, "end": 952.78, "text": " That's pretty set up for you and so inside there you can see here. I can use an exclamation mark", "tokens": [663, 311, 1238, 992, 493, 337, 291, 293, 370, 1854, 456, 291, 393, 536, 510, 13, 286, 393, 764, 364, 1624, 43233, 1491], "temperature": 0.0, "avg_logprob": -0.13444654657206404, "compression_ratio": 1.6808510638297873, "no_speech_prob": 3.2887180623220047e-06}, {"id": 193, "seek": 95278, "start": 952.78, "end": 954.78, "text": " to", "tokens": [281], "temperature": 0.0, "avg_logprob": -0.1870553180424854, "compression_ratio": 1.8533333333333333, "no_speech_prob": 2.090450152536505e-06}, {"id": 194, "seek": 95278, "start": 956.6999999999999, "end": 959.52, "text": " Basically say I don't want to run Python, but I want to run bash", "tokens": [8537, 584, 286, 500, 380, 528, 281, 1190, 15329, 11, 457, 286, 528, 281, 1190, 46183], "temperature": 0.0, "avg_logprob": -0.1870553180424854, "compression_ratio": 1.8533333333333333, "no_speech_prob": 2.090450152536505e-06}, {"id": 195, "seek": 95278, "start": 959.52, "end": 965.3, "text": " I don't want to run shell so this runs a bash command and the bit inside the curly brackets", "tokens": [286, 500, 380, 528, 281, 1190, 8720, 370, 341, 6676, 257, 46183, 5622, 293, 264, 857, 1854, 264, 32066, 26179], "temperature": 0.0, "avg_logprob": -0.1870553180424854, "compression_ratio": 1.8533333333333333, "no_speech_prob": 2.090450152536505e-06}, {"id": 196, "seek": 95278, "start": 965.74, "end": 971.02, "text": " Actually refers however to a Python variable so it inserts that Python variable into the bash command", "tokens": [5135, 14942, 4461, 281, 257, 15329, 7006, 370, 309, 49163, 300, 15329, 7006, 666, 264, 46183, 5622], "temperature": 0.0, "avg_logprob": -0.1870553180424854, "compression_ratio": 1.8533333333333333, "no_speech_prob": 2.090450152536505e-06}, {"id": 197, "seek": 95278, "start": 971.3399999999999, "end": 973.86, "text": " So here is the contents of our folder", "tokens": [407, 510, 307, 264, 15768, 295, 527, 10820], "temperature": 0.0, "avg_logprob": -0.1870553180424854, "compression_ratio": 1.8533333333333333, "no_speech_prob": 2.090450152536505e-06}, {"id": 198, "seek": 95278, "start": 974.14, "end": 981.06, "text": " There's a training set and a validation set if you're not familiar with the idea of training sets and validation sets", "tokens": [821, 311, 257, 3097, 992, 293, 257, 24071, 992, 498, 291, 434, 406, 4963, 365, 264, 1558, 295, 3097, 6352, 293, 24071, 6352], "temperature": 0.0, "avg_logprob": -0.1870553180424854, "compression_ratio": 1.8533333333333333, "no_speech_prob": 2.090450152536505e-06}, {"id": 199, "seek": 98106, "start": 981.06, "end": 984.0999999999999, "text": " It would be a very good idea to check out our", "tokens": [467, 576, 312, 257, 588, 665, 1558, 281, 1520, 484, 527], "temperature": 0.0, "avg_logprob": -0.18262929182786208, "compression_ratio": 1.7318007662835249, "no_speech_prob": 2.2603157958656084e-06}, {"id": 200, "seek": 98106, "start": 985.06, "end": 987.06, "text": " practical machine learning course", "tokens": [8496, 3479, 2539, 1164], "temperature": 0.0, "avg_logprob": -0.18262929182786208, "compression_ratio": 1.7318007662835249, "no_speech_prob": 2.2603157958656084e-06}, {"id": 201, "seek": 98106, "start": 987.14, "end": 993.9399999999999, "text": " Which tells you a lot about this kind of stuff of like that the basics of how to set up and run machine learning", "tokens": [3013, 5112, 291, 257, 688, 466, 341, 733, 295, 1507, 295, 411, 300, 264, 14688, 295, 577, 281, 992, 493, 293, 1190, 3479, 2539], "temperature": 0.0, "avg_logprob": -0.18262929182786208, "compression_ratio": 1.7318007662835249, "no_speech_prob": 2.2603157958656084e-06}, {"id": 202, "seek": 98106, "start": 994.38, "end": 996.38, "text": " projects more generally", "tokens": [4455, 544, 5101], "temperature": 0.0, "avg_logprob": -0.18262929182786208, "compression_ratio": 1.7318007662835249, "no_speech_prob": 2.2603157958656084e-06}, {"id": 203, "seek": 98106, "start": 996.66, "end": 1000.3399999999999, "text": " Would you recommend that people take that course before this one?", "tokens": [6068, 291, 2748, 300, 561, 747, 300, 1164, 949, 341, 472, 30], "temperature": 0.0, "avg_logprob": -0.18262929182786208, "compression_ratio": 1.7318007662835249, "no_speech_prob": 2.2603157958656084e-06}, {"id": 204, "seek": 98106, "start": 1001.02, "end": 1006.9, "text": " Actually a lot of students who would you know as they went through these has said they look they've liked doing them together", "tokens": [5135, 257, 688, 295, 1731, 567, 576, 291, 458, 382, 436, 1437, 807, 613, 575, 848, 436, 574, 436, 600, 4501, 884, 552, 1214], "temperature": 0.0, "avg_logprob": -0.18262929182786208, "compression_ratio": 1.7318007662835249, "no_speech_prob": 2.2603157958656084e-06}, {"id": 205, "seek": 100690, "start": 1006.9, "end": 1010.22, "text": " So you can kind of check it out and see", "tokens": [407, 291, 393, 733, 295, 1520, 309, 484, 293, 536], "temperature": 0.0, "avg_logprob": -0.16434407030415332, "compression_ratio": 1.6344827586206896, "no_speech_prob": 4.157323019171599e-06}, {"id": 206, "seek": 100690, "start": 1011.3, "end": 1013.3, "text": " the machine learning course", "tokens": [264, 3479, 2539, 1164], "temperature": 0.0, "avg_logprob": -0.16434407030415332, "compression_ratio": 1.6344827586206896, "no_speech_prob": 4.157323019171599e-06}, {"id": 207, "seek": 100690, "start": 1015.8199999999999, "end": 1021.8199999999999, "text": " Yeah, they cover some similar stuff, but all in different directions so people have done both since you know say they find it", "tokens": [865, 11, 436, 2060, 512, 2531, 1507, 11, 457, 439, 294, 819, 11095, 370, 561, 362, 1096, 1293, 1670, 291, 458, 584, 436, 915, 309], "temperature": 0.0, "avg_logprob": -0.16434407030415332, "compression_ratio": 1.6344827586206896, "no_speech_prob": 4.157323019171599e-06}, {"id": 208, "seek": 100690, "start": 1021.8199999999999, "end": 1025.74, "text": " They each support each other. I wouldn't say it's prerequisite", "tokens": [814, 1184, 1406, 1184, 661, 13, 286, 2759, 380, 584, 309, 311, 38333, 34152], "temperature": 0.0, "avg_logprob": -0.16434407030415332, "compression_ratio": 1.6344827586206896, "no_speech_prob": 4.157323019171599e-06}, {"id": 209, "seek": 100690, "start": 1026.7, "end": 1030.74, "text": " But you know if I do if I say something like hey, this is the training set and this is a validation set", "tokens": [583, 291, 458, 498, 286, 360, 498, 286, 584, 746, 411, 4177, 11, 341, 307, 264, 3097, 992, 293, 341, 307, 257, 24071, 992], "temperature": 0.0, "avg_logprob": -0.16434407030415332, "compression_ratio": 1.6344827586206896, "no_speech_prob": 4.157323019171599e-06}, {"id": 210, "seek": 100690, "start": 1030.74, "end": 1035.5, "text": " And you're going I don't know what that means at least Google it do a quick read. You know because we're assuming", "tokens": [400, 291, 434, 516, 286, 500, 380, 458, 437, 300, 1355, 412, 1935, 3329, 309, 360, 257, 1702, 1401, 13, 509, 458, 570, 321, 434, 11926], "temperature": 0.0, "avg_logprob": -0.16434407030415332, "compression_ratio": 1.6344827586206896, "no_speech_prob": 4.157323019171599e-06}, {"id": 211, "seek": 103550, "start": 1035.5, "end": 1036.54, "text": " that", "tokens": [300], "temperature": 0.0, "avg_logprob": -0.24728023119209228, "compression_ratio": 1.7030716723549488, "no_speech_prob": 4.710852863354376e-06}, {"id": 212, "seek": 103550, "start": 1036.54, "end": 1043.26, "text": " You know the very basics of kind of what machine learning is and does to some extent", "tokens": [509, 458, 264, 588, 14688, 295, 733, 295, 437, 3479, 2539, 307, 293, 775, 281, 512, 8396], "temperature": 0.0, "avg_logprob": -0.24728023119209228, "compression_ratio": 1.7030716723549488, "no_speech_prob": 4.710852863354376e-06}, {"id": 213, "seek": 103550, "start": 1043.26, "end": 1046.7, "text": " And I have a whole blog post on this topic as well, okay", "tokens": [400, 286, 362, 257, 1379, 6968, 2183, 322, 341, 4829, 382, 731, 11, 1392], "temperature": 0.0, "avg_logprob": -0.24728023119209228, "compression_ratio": 1.7030716723549488, "no_speech_prob": 4.710852863354376e-06}, {"id": 214, "seek": 103550, "start": 1046.7, "end": 1049.66, "text": " And we'll make sure that you link to that from course dot faster day", "tokens": [400, 321, 603, 652, 988, 300, 291, 2113, 281, 300, 490, 1164, 5893, 4663, 786], "temperature": 0.0, "avg_logprob": -0.24728023119209228, "compression_ratio": 1.7030716723549488, "no_speech_prob": 4.710852863354376e-06}, {"id": 215, "seek": 103550, "start": 1049.66, "end": 1056.64, "text": " I and I just wanted to say in general with fast AI our philosophy is to kind of learn things on an as needed", "tokens": [286, 293, 286, 445, 1415, 281, 584, 294, 2674, 365, 2370, 7318, 527, 10675, 307, 281, 733, 295, 1466, 721, 322, 364, 382, 2978], "temperature": 0.0, "avg_logprob": -0.24728023119209228, "compression_ratio": 1.7030716723549488, "no_speech_prob": 4.710852863354376e-06}, {"id": 216, "seek": 103550, "start": 1056.82, "end": 1062.04, "text": " Basis yeah, exactly don't try and learn everything that you think you might need first otherwise", "tokens": [5859, 271, 1338, 11, 2293, 500, 380, 853, 293, 1466, 1203, 300, 291, 519, 291, 1062, 643, 700, 5911], "temperature": 0.0, "avg_logprob": -0.24728023119209228, "compression_ratio": 1.7030716723549488, "no_speech_prob": 4.710852863354376e-06}, {"id": 217, "seek": 103550, "start": 1062.04, "end": 1064.38, "text": " You'll never get around to lead learning the stuff you actually want to learn", "tokens": [509, 603, 1128, 483, 926, 281, 1477, 2539, 264, 1507, 291, 767, 528, 281, 1466], "temperature": 0.0, "avg_logprob": -0.24728023119209228, "compression_ratio": 1.7030716723549488, "no_speech_prob": 4.710852863354376e-06}, {"id": 218, "seek": 106438, "start": 1064.38, "end": 1067.2, "text": " Exactly that shows up in deep learning. I think", "tokens": [7587, 300, 3110, 493, 294, 2452, 2539, 13, 286, 519], "temperature": 0.0, "avg_logprob": -0.19262358607078084, "compression_ratio": 1.6887966804979253, "no_speech_prob": 4.157329840381863e-06}, {"id": 219, "seek": 106438, "start": 1068.1000000000001, "end": 1070.1000000000001, "text": " particularly a lot yes", "tokens": [4098, 257, 688, 2086], "temperature": 0.0, "avg_logprob": -0.19262358607078084, "compression_ratio": 1.6887966804979253, "no_speech_prob": 4.157329840381863e-06}, {"id": 220, "seek": 106438, "start": 1070.5, "end": 1073.5400000000002, "text": " Okay, so in our validation folder", "tokens": [1033, 11, 370, 294, 527, 24071, 10820], "temperature": 0.0, "avg_logprob": -0.19262358607078084, "compression_ratio": 1.6887966804979253, "no_speech_prob": 4.157329840381863e-06}, {"id": 221, "seek": 106438, "start": 1073.5400000000002, "end": 1080.42, "text": " There's a cat's folder and a dog's folder and then inside the validation cats folder is a whole bunch of JPEGs", "tokens": [821, 311, 257, 3857, 311, 10820, 293, 257, 3000, 311, 10820, 293, 550, 1854, 264, 24071, 11111, 10820, 307, 257, 1379, 3840, 295, 508, 5208, 33715], "temperature": 0.0, "avg_logprob": -0.19262358607078084, "compression_ratio": 1.6887966804979253, "no_speech_prob": 4.157329840381863e-06}, {"id": 222, "seek": 106438, "start": 1081.42, "end": 1086.94, "text": " The reason that it's set up like this is that this is kind of the most common standard approach for how", "tokens": [440, 1778, 300, 309, 311, 992, 493, 411, 341, 307, 300, 341, 307, 733, 295, 264, 881, 2689, 3832, 3109, 337, 577], "temperature": 0.0, "avg_logprob": -0.19262358607078084, "compression_ratio": 1.6887966804979253, "no_speech_prob": 4.157329840381863e-06}, {"id": 223, "seek": 106438, "start": 1087.5400000000002, "end": 1093.14, "text": " image classification data sets are shared and provided and the idea is that each folder", "tokens": [3256, 21538, 1412, 6352, 366, 5507, 293, 5649, 293, 264, 1558, 307, 300, 1184, 10820], "temperature": 0.0, "avg_logprob": -0.19262358607078084, "compression_ratio": 1.6887966804979253, "no_speech_prob": 4.157329840381863e-06}, {"id": 224, "seek": 109314, "start": 1093.14, "end": 1096.94, "text": " Tells you the label so there's each of these", "tokens": [5115, 82, 291, 264, 7645, 370, 456, 311, 1184, 295, 613], "temperature": 0.0, "avg_logprob": -0.2519256685986931, "compression_ratio": 1.5945945945945945, "no_speech_prob": 9.422422522220586e-07}, {"id": 225, "seek": 109314, "start": 1097.66, "end": 1102.8600000000001, "text": " Images is labeled cats and each of the images in the dogs folder is labeled dogs", "tokens": [4331, 1660, 307, 21335, 11111, 293, 1184, 295, 264, 5267, 294, 264, 7197, 10820, 307, 21335, 7197], "temperature": 0.0, "avg_logprob": -0.2519256685986931, "compression_ratio": 1.5945945945945945, "no_speech_prob": 9.422422522220586e-07}, {"id": 226, "seek": 109314, "start": 1103.0600000000002, "end": 1106.14, "text": " Okay, this is how Keras works as well for example", "tokens": [1033, 11, 341, 307, 577, 591, 6985, 1985, 382, 731, 337, 1365], "temperature": 0.0, "avg_logprob": -0.2519256685986931, "compression_ratio": 1.5945945945945945, "no_speech_prob": 9.422422522220586e-07}, {"id": 227, "seek": 109314, "start": 1108.5800000000002, "end": 1113.7800000000002, "text": " So this is a pretty standard way to share image classification", "tokens": [407, 341, 307, 257, 1238, 3832, 636, 281, 2073, 3256, 21538], "temperature": 0.0, "avg_logprob": -0.2519256685986931, "compression_ratio": 1.5945945945945945, "no_speech_prob": 9.422422522220586e-07}, {"id": 228, "seek": 109314, "start": 1115.22, "end": 1116.98, "text": " files", "tokens": [7098], "temperature": 0.0, "avg_logprob": -0.2519256685986931, "compression_ratio": 1.5945945945945945, "no_speech_prob": 9.422422522220586e-07}, {"id": 229, "seek": 109314, "start": 1116.98, "end": 1120.64, "text": " So we can have a look so if you go plot. I am show", "tokens": [407, 321, 393, 362, 257, 574, 370, 498, 291, 352, 7542, 13, 286, 669, 855], "temperature": 0.0, "avg_logprob": -0.2519256685986931, "compression_ratio": 1.5945945945945945, "no_speech_prob": 9.422422522220586e-07}, {"id": 230, "seek": 112064, "start": 1120.64, "end": 1124.0, "text": " We can see an example of the first of the cats", "tokens": [492, 393, 536, 364, 1365, 295, 264, 700, 295, 264, 11111], "temperature": 0.0, "avg_logprob": -0.14758682250976562, "compression_ratio": 1.6036036036036037, "no_speech_prob": 4.02942987420829e-06}, {"id": 231, "seek": 112064, "start": 1125.92, "end": 1127.92, "text": " If you haven't seen", "tokens": [759, 291, 2378, 380, 1612], "temperature": 0.0, "avg_logprob": -0.14758682250976562, "compression_ratio": 1.6036036036036037, "no_speech_prob": 4.02942987420829e-06}, {"id": 232, "seek": 112064, "start": 1127.96, "end": 1129.96, "text": " This before this is a python", "tokens": [639, 949, 341, 307, 257, 38797], "temperature": 0.0, "avg_logprob": -0.14758682250976562, "compression_ratio": 1.6036036036036037, "no_speech_prob": 4.02942987420829e-06}, {"id": 233, "seek": 112064, "start": 1130.5200000000002, "end": 1134.2, "text": " 3.6 format string so you can google for that if you haven't seen it", "tokens": [805, 13, 21, 7877, 6798, 370, 291, 393, 20742, 337, 300, 498, 291, 2378, 380, 1612, 309], "temperature": 0.0, "avg_logprob": -0.14758682250976562, "compression_ratio": 1.6036036036036037, "no_speech_prob": 4.02942987420829e-06}, {"id": 234, "seek": 112064, "start": 1134.2, "end": 1137.0800000000002, "text": " It's a very convenient way to do string formatting and we use it a lot", "tokens": [467, 311, 257, 588, 10851, 636, 281, 360, 6798, 39366, 293, 321, 764, 309, 257, 688], "temperature": 0.0, "avg_logprob": -0.14758682250976562, "compression_ratio": 1.6036036036036037, "no_speech_prob": 4.02942987420829e-06}, {"id": 235, "seek": 112064, "start": 1138.6000000000001, "end": 1145.16, "text": " So there's our cat, but we're going to mainly be interested in the underlying data that makes up that cat", "tokens": [407, 456, 311, 527, 3857, 11, 457, 321, 434, 516, 281, 8704, 312, 3102, 294, 264, 14217, 1412, 300, 1669, 493, 300, 3857], "temperature": 0.0, "avg_logprob": -0.14758682250976562, "compression_ratio": 1.6036036036036037, "no_speech_prob": 4.02942987420829e-06}, {"id": 236, "seek": 112064, "start": 1145.76, "end": 1147.76, "text": " so specifically", "tokens": [370, 4682], "temperature": 0.0, "avg_logprob": -0.14758682250976562, "compression_ratio": 1.6036036036036037, "no_speech_prob": 4.02942987420829e-06}, {"id": 237, "seek": 114776, "start": 1147.76, "end": 1155.08, "text": " It's an image whose shape that is the dimensions of the array is 198 by 179 by 3", "tokens": [467, 311, 364, 3256, 6104, 3909, 300, 307, 264, 12819, 295, 264, 10225, 307, 6375, 538, 3282, 24, 538, 805], "temperature": 0.0, "avg_logprob": -0.17020136244753573, "compression_ratio": 1.5633802816901408, "no_speech_prob": 3.0415751552936854e-06}, {"id": 238, "seek": 114776, "start": 1155.08, "end": 1158.52, "text": " So it's a three-dimensional array also called a rank 3 tensor", "tokens": [407, 309, 311, 257, 1045, 12, 18759, 10225, 611, 1219, 257, 6181, 805, 40863], "temperature": 0.0, "avg_logprob": -0.17020136244753573, "compression_ratio": 1.5633802816901408, "no_speech_prob": 3.0415751552936854e-06}, {"id": 239, "seek": 114776, "start": 1159.12, "end": 1163.56, "text": " And here are the first four rows and four columns of that image", "tokens": [400, 510, 366, 264, 700, 1451, 13241, 293, 1451, 13766, 295, 300, 3256], "temperature": 0.0, "avg_logprob": -0.17020136244753573, "compression_ratio": 1.5633802816901408, "no_speech_prob": 3.0415751552936854e-06}, {"id": 240, "seek": 114776, "start": 1164.76, "end": 1166.76, "text": " So as you can see", "tokens": [407, 382, 291, 393, 536], "temperature": 0.0, "avg_logprob": -0.17020136244753573, "compression_ratio": 1.5633802816901408, "no_speech_prob": 3.0415751552936854e-06}, {"id": 241, "seek": 114776, "start": 1166.8, "end": 1168.68, "text": " each of those", "tokens": [1184, 295, 729], "temperature": 0.0, "avg_logprob": -0.17020136244753573, "compression_ratio": 1.5633802816901408, "no_speech_prob": 3.0415751552936854e-06}, {"id": 242, "seek": 114776, "start": 1168.68, "end": 1170.68, "text": " Cells has three", "tokens": [383, 13677, 575, 1045], "temperature": 0.0, "avg_logprob": -0.17020136244753573, "compression_ratio": 1.5633802816901408, "no_speech_prob": 3.0415751552936854e-06}, {"id": 243, "seek": 117068, "start": 1170.68, "end": 1177.3600000000001, "text": " Items in it, and this is the red green and blue pixel values between naught and 255", "tokens": [467, 9097, 294, 309, 11, 293, 341, 307, 264, 2182, 3092, 293, 3344, 19261, 4190, 1296, 13138, 293, 3552, 20], "temperature": 0.0, "avg_logprob": -0.15710006639795396, "compression_ratio": 1.7125, "no_speech_prob": 1.7603376818442484e-06}, {"id": 244, "seek": 117068, "start": 1177.44, "end": 1182.3600000000001, "text": " So here's a little subset of what a picture actually looks like inside your computer", "tokens": [407, 510, 311, 257, 707, 25993, 295, 437, 257, 3036, 767, 1542, 411, 1854, 428, 3820], "temperature": 0.0, "avg_logprob": -0.15710006639795396, "compression_ratio": 1.7125, "no_speech_prob": 1.7603376818442484e-06}, {"id": 245, "seek": 117068, "start": 1183.3200000000002, "end": 1184.68, "text": " so that's", "tokens": [370, 300, 311], "temperature": 0.0, "avg_logprob": -0.15710006639795396, "compression_ratio": 1.7125, "no_speech_prob": 1.7603376818442484e-06}, {"id": 246, "seek": 117068, "start": 1184.68, "end": 1188.5600000000002, "text": " that that's what be our idea is to take these kinds of numbers and", "tokens": [300, 300, 311, 437, 312, 527, 1558, 307, 281, 747, 613, 3685, 295, 3547, 293], "temperature": 0.0, "avg_logprob": -0.15710006639795396, "compression_ratio": 1.7125, "no_speech_prob": 1.7603376818442484e-06}, {"id": 247, "seek": 117068, "start": 1189.0, "end": 1193.8400000000001, "text": " Use them to predict whether those kinds of numbers represent a cat or a dog", "tokens": [8278, 552, 281, 6069, 1968, 729, 3685, 295, 3547, 2906, 257, 3857, 420, 257, 3000], "temperature": 0.0, "avg_logprob": -0.15710006639795396, "compression_ratio": 1.7125, "no_speech_prob": 1.7603376818442484e-06}, {"id": 248, "seek": 117068, "start": 1194.28, "end": 1199.44, "text": " Based on looking at lots of pictures of cats and dogs so that's a pretty hard thing to do", "tokens": [18785, 322, 1237, 412, 3195, 295, 5242, 295, 11111, 293, 7197, 370, 300, 311, 257, 1238, 1152, 551, 281, 360], "temperature": 0.0, "avg_logprob": -0.15710006639795396, "compression_ratio": 1.7125, "no_speech_prob": 1.7603376818442484e-06}, {"id": 249, "seek": 119944, "start": 1199.44, "end": 1202.48, "text": " and at the point in time when this", "tokens": [293, 412, 264, 935, 294, 565, 562, 341], "temperature": 0.0, "avg_logprob": -0.20339810988482307, "compression_ratio": 1.631578947368421, "no_speech_prob": 2.36878850046196e-06}, {"id": 250, "seek": 119944, "start": 1203.52, "end": 1208.28, "text": " this this data set actually comes from a Kaggle competition the dogs versus cats cat Kaggle competition and", "tokens": [341, 341, 1412, 992, 767, 1487, 490, 257, 48751, 22631, 6211, 264, 7197, 5717, 11111, 3857, 48751, 22631, 6211, 293], "temperature": 0.0, "avg_logprob": -0.20339810988482307, "compression_ratio": 1.631578947368421, "no_speech_prob": 2.36878850046196e-06}, {"id": 251, "seek": 119944, "start": 1208.56, "end": 1210.92, "text": " When it was released in I think it was 2012", "tokens": [1133, 309, 390, 4736, 294, 286, 519, 309, 390, 9125], "temperature": 0.0, "avg_logprob": -0.20339810988482307, "compression_ratio": 1.631578947368421, "no_speech_prob": 2.36878850046196e-06}, {"id": 252, "seek": 119944, "start": 1211.72, "end": 1220.0800000000002, "text": " The state-of-the-art was 80% accuracy so computers weren't really able to at all accurately recognize dogs versus cats", "tokens": [440, 1785, 12, 2670, 12, 3322, 12, 446, 390, 4688, 4, 14170, 370, 10807, 4999, 380, 534, 1075, 281, 412, 439, 20095, 5521, 7197, 5717, 11111], "temperature": 0.0, "avg_logprob": -0.20339810988482307, "compression_ratio": 1.631578947368421, "no_speech_prob": 2.36878850046196e-06}, {"id": 253, "seek": 119944, "start": 1221.2, "end": 1224.0800000000002, "text": " So let's go ahead and train a model", "tokens": [407, 718, 311, 352, 2286, 293, 3847, 257, 2316], "temperature": 0.0, "avg_logprob": -0.20339810988482307, "compression_ratio": 1.631578947368421, "no_speech_prob": 2.36878850046196e-06}, {"id": 254, "seek": 122408, "start": 1224.08, "end": 1226.08, "text": " So", "tokens": [407], "temperature": 0.0, "avg_logprob": -0.2723548889160156, "compression_ratio": 1.464705882352941, "no_speech_prob": 1.0188057331106393e-06}, {"id": 255, "seek": 122408, "start": 1230.0, "end": 1234.6799999999998, "text": " Here are the three lines of code necessary to train a model", "tokens": [1692, 366, 264, 1045, 3876, 295, 3089, 4818, 281, 3847, 257, 2316], "temperature": 0.0, "avg_logprob": -0.2723548889160156, "compression_ratio": 1.464705882352941, "no_speech_prob": 1.0188057331106393e-06}, {"id": 256, "seek": 122408, "start": 1235.24, "end": 1240.08, "text": " And so let's go ahead and run it so I click on this on the cell I press shift enter", "tokens": [400, 370, 718, 311, 352, 2286, 293, 1190, 309, 370, 286, 2052, 322, 341, 322, 264, 2815, 286, 1886, 5513, 3242], "temperature": 0.0, "avg_logprob": -0.2723548889160156, "compression_ratio": 1.464705882352941, "no_speech_prob": 1.0188057331106393e-06}, {"id": 257, "seek": 122408, "start": 1241.6, "end": 1243.36, "text": " and", "tokens": [293], "temperature": 0.0, "avg_logprob": -0.2723548889160156, "compression_ratio": 1.464705882352941, "no_speech_prob": 1.0188057331106393e-06}, {"id": 258, "seek": 122408, "start": 1243.36, "end": 1247.3999999999999, "text": " Then we'll wait a couple of seconds for it to pop up and there it goes", "tokens": [1396, 321, 603, 1699, 257, 1916, 295, 3949, 337, 309, 281, 1665, 493, 293, 456, 309, 1709], "temperature": 0.0, "avg_logprob": -0.2723548889160156, "compression_ratio": 1.464705882352941, "no_speech_prob": 1.0188057331106393e-06}, {"id": 259, "seek": 122408, "start": 1248.32, "end": 1250.32, "text": " Okay, and it's training", "tokens": [1033, 11, 293, 309, 311, 3097], "temperature": 0.0, "avg_logprob": -0.2723548889160156, "compression_ratio": 1.464705882352941, "no_speech_prob": 1.0188057331106393e-06}, {"id": 260, "seek": 122408, "start": 1250.6399999999999, "end": 1251.72, "text": " and", "tokens": [293], "temperature": 0.0, "avg_logprob": -0.2723548889160156, "compression_ratio": 1.464705882352941, "no_speech_prob": 1.0188057331106393e-06}, {"id": 261, "seek": 125172, "start": 1251.72, "end": 1257.6000000000001, "text": " So I've asked it to do three epochs so that means it's going to look at every image three times in total or look at", "tokens": [407, 286, 600, 2351, 309, 281, 360, 1045, 30992, 28346, 370, 300, 1355, 309, 311, 516, 281, 574, 412, 633, 3256, 1045, 1413, 294, 3217, 420, 574, 412], "temperature": 0.0, "avg_logprob": -0.13377518382498887, "compression_ratio": 1.9122137404580153, "no_speech_prob": 2.8129979909863323e-06}, {"id": 262, "seek": 125172, "start": 1257.6000000000001, "end": 1264.32, "text": " The entire set of images three times. That's what we mean by an epoch and as we do it's going to print out", "tokens": [440, 2302, 992, 295, 5267, 1045, 1413, 13, 663, 311, 437, 321, 914, 538, 364, 30992, 339, 293, 382, 321, 360, 309, 311, 516, 281, 4482, 484], "temperature": 0.0, "avg_logprob": -0.13377518382498887, "compression_ratio": 1.9122137404580153, "no_speech_prob": 2.8129979909863323e-06}, {"id": 263, "seek": 125172, "start": 1265.96, "end": 1271.3600000000001, "text": " The accuracy is this last of the three numbers it prints out on the validation set okay", "tokens": [440, 14170, 307, 341, 1036, 295, 264, 1045, 3547, 309, 22305, 484, 322, 264, 24071, 992, 1392], "temperature": 0.0, "avg_logprob": -0.13377518382498887, "compression_ratio": 1.9122137404580153, "no_speech_prob": 2.8129979909863323e-06}, {"id": 264, "seek": 125172, "start": 1272.2, "end": 1275.3600000000001, "text": " The first two numbers we'll talk about later in short", "tokens": [440, 700, 732, 3547, 321, 603, 751, 466, 1780, 294, 2099], "temperature": 0.0, "avg_logprob": -0.13377518382498887, "compression_ratio": 1.9122137404580153, "no_speech_prob": 2.8129979909863323e-06}, {"id": 265, "seek": 127536, "start": 1275.36, "end": 1281.7199999999998, "text": " They're the value of the loss function which is in this case the cross entropy loss for the training set and the validation set and then", "tokens": [814, 434, 264, 2158, 295, 264, 4470, 2445, 597, 307, 294, 341, 1389, 264, 3278, 30867, 4470, 337, 264, 3097, 992, 293, 264, 24071, 992, 293, 550], "temperature": 0.0, "avg_logprob": -0.17373967170715332, "compression_ratio": 1.6130434782608696, "no_speech_prob": 2.9022978651482845e-06}, {"id": 266, "seek": 127536, "start": 1281.7199999999998, "end": 1286.36, "text": " Right at the start here is the epoch number, so you can see it's getting about", "tokens": [1779, 412, 264, 722, 510, 307, 264, 30992, 339, 1230, 11, 370, 291, 393, 536, 309, 311, 1242, 466], "temperature": 0.0, "avg_logprob": -0.17373967170715332, "compression_ratio": 1.6130434782608696, "no_speech_prob": 2.9022978651482845e-06}, {"id": 267, "seek": 127536, "start": 1287.56, "end": 1289.56, "text": " 90 percent accuracy and", "tokens": [4289, 3043, 14170, 293], "temperature": 0.0, "avg_logprob": -0.17373967170715332, "compression_ratio": 1.6130434782608696, "no_speech_prob": 2.9022978651482845e-06}, {"id": 268, "seek": 127536, "start": 1290.1599999999999, "end": 1294.32, "text": " It took 17 seconds so you can see we've come a long way since", "tokens": [467, 1890, 3282, 3949, 370, 291, 393, 536, 321, 600, 808, 257, 938, 636, 1670], "temperature": 0.0, "avg_logprob": -0.17373967170715332, "compression_ratio": 1.6130434782608696, "no_speech_prob": 2.9022978651482845e-06}, {"id": 269, "seek": 127536, "start": 1295.28, "end": 1298.4799999999998, "text": " 2012 and in fact even in the competition", "tokens": [9125, 293, 294, 1186, 754, 294, 264, 6211], "temperature": 0.0, "avg_logprob": -0.17373967170715332, "compression_ratio": 1.6130434782608696, "no_speech_prob": 2.9022978651482845e-06}, {"id": 270, "seek": 127536, "start": 1299.3999999999999, "end": 1301.3999999999999, "text": " This actually would have won", "tokens": [639, 767, 576, 362, 1582], "temperature": 0.0, "avg_logprob": -0.17373967170715332, "compression_ratio": 1.6130434782608696, "no_speech_prob": 2.9022978651482845e-06}, {"id": 271, "seek": 130140, "start": 1301.4, "end": 1308.5800000000002, "text": " The Kaggle competition of that time the best in the Kaggle competition was 98.9, and we're getting about 99 percent", "tokens": [440, 48751, 22631, 6211, 295, 300, 565, 264, 1151, 294, 264, 48751, 22631, 6211, 390, 20860, 13, 24, 11, 293, 321, 434, 1242, 466, 11803, 3043], "temperature": 0.0, "avg_logprob": -0.19092788194355212, "compression_ratio": 1.5901639344262295, "no_speech_prob": 2.123369768014527e-06}, {"id": 272, "seek": 130140, "start": 1309.0, "end": 1312.7, "text": " so this may surprise you that we're getting a", "tokens": [370, 341, 815, 6365, 291, 300, 321, 434, 1242, 257], "temperature": 0.0, "avg_logprob": -0.19092788194355212, "compression_ratio": 1.5901639344262295, "no_speech_prob": 2.123369768014527e-06}, {"id": 273, "seek": 130140, "start": 1313.48, "end": 1317.48, "text": " You know Kaggle winning as of 20 end of 2012 early 2013", "tokens": [509, 458, 48751, 22631, 8224, 382, 295, 945, 917, 295, 9125, 2440, 9012], "temperature": 0.0, "avg_logprob": -0.19092788194355212, "compression_ratio": 1.5901639344262295, "no_speech_prob": 2.123369768014527e-06}, {"id": 274, "seek": 130140, "start": 1319.8400000000001, "end": 1323.2, "text": " Kaggle winning image classifier in 17 seconds", "tokens": [48751, 22631, 8224, 3256, 1508, 9902, 294, 3282, 3949], "temperature": 0.0, "avg_logprob": -0.19092788194355212, "compression_ratio": 1.5901639344262295, "no_speech_prob": 2.123369768014527e-06}, {"id": 275, "seek": 130140, "start": 1325.2800000000002, "end": 1327.2800000000002, "text": " But and three lines of code", "tokens": [583, 293, 1045, 3876, 295, 3089], "temperature": 0.0, "avg_logprob": -0.19092788194355212, "compression_ratio": 1.5901639344262295, "no_speech_prob": 2.123369768014527e-06}, {"id": 276, "seek": 132728, "start": 1327.28, "end": 1334.8, "text": " And I think that's because like a lot of people assume that deep learning takes a huge amount of time", "tokens": [400, 286, 519, 300, 311, 570, 411, 257, 688, 295, 561, 6552, 300, 2452, 2539, 2516, 257, 2603, 2372, 295, 565], "temperature": 0.0, "avg_logprob": -0.14727787799145803, "compression_ratio": 1.5734597156398105, "no_speech_prob": 1.7061781818483723e-06}, {"id": 277, "seek": 132728, "start": 1335.3999999999999, "end": 1340.3999999999999, "text": " And lots of resources and lots of data and as you'll learn in this course", "tokens": [400, 3195, 295, 3593, 293, 3195, 295, 1412, 293, 382, 291, 603, 1466, 294, 341, 1164], "temperature": 0.0, "avg_logprob": -0.14727787799145803, "compression_ratio": 1.5734597156398105, "no_speech_prob": 1.7061781818483723e-06}, {"id": 278, "seek": 132728, "start": 1341.08, "end": 1343.3999999999999, "text": " That in general isn't true", "tokens": [663, 294, 2674, 1943, 380, 2074], "temperature": 0.0, "avg_logprob": -0.14727787799145803, "compression_ratio": 1.5734597156398105, "no_speech_prob": 1.7061781818483723e-06}, {"id": 279, "seek": 132728, "start": 1344.32, "end": 1351.44, "text": " One of the ways we've made it much simpler is that this code is written on top of a library we built", "tokens": [1485, 295, 264, 2098, 321, 600, 1027, 309, 709, 18587, 307, 300, 341, 3089, 307, 3720, 322, 1192, 295, 257, 6405, 321, 3094], "temperature": 0.0, "avg_logprob": -0.14727787799145803, "compression_ratio": 1.5734597156398105, "no_speech_prob": 1.7061781818483723e-06}, {"id": 280, "seek": 132728, "start": 1352.56, "end": 1354.56, "text": " imaginatively called fast AI", "tokens": [23427, 19020, 1219, 2370, 7318], "temperature": 0.0, "avg_logprob": -0.14727787799145803, "compression_ratio": 1.5734597156398105, "no_speech_prob": 1.7061781818483723e-06}, {"id": 281, "seek": 135456, "start": 1354.56, "end": 1360.0, "text": " the fast AI library is basically a library which takes all of the", "tokens": [264, 2370, 7318, 6405, 307, 1936, 257, 6405, 597, 2516, 439, 295, 264], "temperature": 0.0, "avg_logprob": -0.15512950863458413, "compression_ratio": 1.7916666666666667, "no_speech_prob": 4.936919140163809e-06}, {"id": 282, "seek": 135456, "start": 1360.72, "end": 1365.2, "text": " Best practices approaches that we can find and so each time a paper comes out", "tokens": [9752, 7525, 11587, 300, 321, 393, 915, 293, 370, 1184, 565, 257, 3035, 1487, 484], "temperature": 0.0, "avg_logprob": -0.15512950863458413, "compression_ratio": 1.7916666666666667, "no_speech_prob": 4.936919140163809e-06}, {"id": 283, "seek": 135456, "start": 1365.2, "end": 1368.0, "text": " You know we that looks interesting we test it out", "tokens": [509, 458, 321, 300, 1542, 1880, 321, 1500, 309, 484], "temperature": 0.0, "avg_logprob": -0.15512950863458413, "compression_ratio": 1.7916666666666667, "no_speech_prob": 4.936919140163809e-06}, {"id": 284, "seek": 135456, "start": 1368.28, "end": 1372.04, "text": " If it works well for a variety of data sets and we can figure out how to tune it", "tokens": [759, 309, 1985, 731, 337, 257, 5673, 295, 1412, 6352, 293, 321, 393, 2573, 484, 577, 281, 10864, 309], "temperature": 0.0, "avg_logprob": -0.15512950863458413, "compression_ratio": 1.7916666666666667, "no_speech_prob": 4.936919140163809e-06}, {"id": 285, "seek": 135456, "start": 1372.08, "end": 1378.04, "text": " We implement it in fast AI and so fast AI kind of curates all this stuff and packages up for you and", "tokens": [492, 4445, 309, 294, 2370, 7318, 293, 370, 2370, 7318, 733, 295, 1262, 1024, 439, 341, 1507, 293, 17401, 493, 337, 291, 293], "temperature": 0.0, "avg_logprob": -0.15512950863458413, "compression_ratio": 1.7916666666666667, "no_speech_prob": 4.936919140163809e-06}, {"id": 286, "seek": 135456, "start": 1378.52, "end": 1383.44, "text": " Much of the time or most the time kind of automatically figures out the best way to handle things", "tokens": [12313, 295, 264, 565, 420, 881, 264, 565, 733, 295, 6772, 9624, 484, 264, 1151, 636, 281, 4813, 721], "temperature": 0.0, "avg_logprob": -0.15512950863458413, "compression_ratio": 1.7916666666666667, "no_speech_prob": 4.936919140163809e-06}, {"id": 287, "seek": 138344, "start": 1383.44, "end": 1387.56, "text": " So the fast AI library is why we were able to do this in just three lines of code", "tokens": [407, 264, 2370, 7318, 6405, 307, 983, 321, 645, 1075, 281, 360, 341, 294, 445, 1045, 3876, 295, 3089], "temperature": 0.0, "avg_logprob": -0.19765826930170474, "compression_ratio": 1.684873949579832, "no_speech_prob": 1.3287708497955464e-06}, {"id": 288, "seek": 138344, "start": 1388.04, "end": 1391.76, "text": " And the reason that we were able to make the fast AI library work", "tokens": [400, 264, 1778, 300, 321, 645, 1075, 281, 652, 264, 2370, 7318, 6405, 589], "temperature": 0.0, "avg_logprob": -0.19765826930170474, "compression_ratio": 1.684873949579832, "no_speech_prob": 1.3287708497955464e-06}, {"id": 289, "seek": 138344, "start": 1391.76, "end": 1396.16, "text": " So well is because it in turn sits on top of something called pytorch", "tokens": [407, 731, 307, 570, 309, 294, 1261, 12696, 322, 1192, 295, 746, 1219, 25878, 284, 339], "temperature": 0.0, "avg_logprob": -0.19765826930170474, "compression_ratio": 1.684873949579832, "no_speech_prob": 1.3287708497955464e-06}, {"id": 290, "seek": 138344, "start": 1397.0, "end": 1405.42, "text": " Which is a really flexible deep learning and machine learning and GPU computation library written by Facebook", "tokens": [3013, 307, 257, 534, 11358, 2452, 2539, 293, 3479, 2539, 293, 18407, 24903, 6405, 3720, 538, 4384], "temperature": 0.0, "avg_logprob": -0.19765826930170474, "compression_ratio": 1.684873949579832, "no_speech_prob": 1.3287708497955464e-06}, {"id": 291, "seek": 138344, "start": 1407.6000000000001, "end": 1412.3600000000001, "text": " Most people are more familiar with tensorflow than pytorch because Google", "tokens": [4534, 561, 366, 544, 4963, 365, 40863, 10565, 813, 25878, 284, 339, 570, 3329], "temperature": 0.0, "avg_logprob": -0.19765826930170474, "compression_ratio": 1.684873949579832, "no_speech_prob": 1.3287708497955464e-06}, {"id": 292, "seek": 141236, "start": 1412.36, "end": 1414.36, "text": " Markets that pretty heavily", "tokens": [3934, 1385, 300, 1238, 10950], "temperature": 0.0, "avg_logprob": -0.15021715325824284, "compression_ratio": 1.6529209621993126, "no_speech_prob": 3.2563056606704777e-07}, {"id": 293, "seek": 141236, "start": 1414.4399999999998, "end": 1420.6799999999998, "text": " But most of the top researchers I know nowadays at least the ones that aren't at Google have switched across to pytorch", "tokens": [583, 881, 295, 264, 1192, 10309, 286, 458, 13434, 412, 1935, 264, 2306, 300, 3212, 380, 412, 3329, 362, 16858, 2108, 281, 25878, 284, 339], "temperature": 0.0, "avg_logprob": -0.15021715325824284, "compression_ratio": 1.6529209621993126, "no_speech_prob": 3.2563056606704777e-07}, {"id": 294, "seek": 141236, "start": 1421.04, "end": 1427.4799999999998, "text": " Yes, Rachel, and we'll be covering some pytorch later in the course. Yeah, it's I mean one of the things that", "tokens": [1079, 11, 14246, 11, 293, 321, 603, 312, 10322, 512, 25878, 284, 339, 1780, 294, 264, 1164, 13, 865, 11, 309, 311, 286, 914, 472, 295, 264, 721, 300], "temperature": 0.0, "avg_logprob": -0.15021715325824284, "compression_ratio": 1.6529209621993126, "no_speech_prob": 3.2563056606704777e-07}, {"id": 295, "seek": 141236, "start": 1428.9199999999998, "end": 1435.6399999999999, "text": " Hopefully you're really like about fast AI is that it's really flexible that you can use all these kind of curated best", "tokens": [10429, 291, 434, 534, 411, 466, 2370, 7318, 307, 300, 309, 311, 534, 11358, 300, 291, 393, 764, 439, 613, 733, 295, 47851, 1151], "temperature": 0.0, "avg_logprob": -0.15021715325824284, "compression_ratio": 1.6529209621993126, "no_speech_prob": 3.2563056606704777e-07}, {"id": 296, "seek": 143564, "start": 1435.64, "end": 1442.0800000000002, "text": " Practices as much or as little as you want and it's really easy to hook in at any point and write your own", "tokens": [19170, 1473, 382, 709, 420, 382, 707, 382, 291, 528, 293, 309, 311, 534, 1858, 281, 6328, 294, 412, 604, 935, 293, 2464, 428, 1065], "temperature": 0.0, "avg_logprob": -0.17673589828166555, "compression_ratio": 1.7453703703703705, "no_speech_prob": 1.8448160972184269e-06}, {"id": 297, "seek": 143564, "start": 1442.66, "end": 1449.4, "text": " Data augmentation write your own loss function write your own network architecture whatever and so we'll do all of those things", "tokens": [11888, 14501, 19631, 2464, 428, 1065, 4470, 2445, 2464, 428, 1065, 3209, 9482, 2035, 293, 370, 321, 603, 360, 439, 295, 729, 721], "temperature": 0.0, "avg_logprob": -0.17673589828166555, "compression_ratio": 1.7453703703703705, "no_speech_prob": 1.8448160972184269e-06}, {"id": 298, "seek": 143564, "start": 1450.0400000000002, "end": 1452.0400000000002, "text": " in this course", "tokens": [294, 341, 1164], "temperature": 0.0, "avg_logprob": -0.17673589828166555, "compression_ratio": 1.7453703703703705, "no_speech_prob": 1.8448160972184269e-06}, {"id": 299, "seek": 143564, "start": 1452.2, "end": 1457.66, "text": " So what does this model look like well what we can do is we can?", "tokens": [407, 437, 775, 341, 2316, 574, 411, 731, 437, 321, 393, 360, 307, 321, 393, 30], "temperature": 0.0, "avg_logprob": -0.17673589828166555, "compression_ratio": 1.7453703703703705, "no_speech_prob": 1.8448160972184269e-06}, {"id": 300, "seek": 143564, "start": 1458.44, "end": 1462.1200000000001, "text": " Take a look at so what are the what is the the validation set?", "tokens": [3664, 257, 574, 412, 370, 437, 366, 264, 437, 307, 264, 264, 24071, 992, 30], "temperature": 0.0, "avg_logprob": -0.17673589828166555, "compression_ratio": 1.7453703703703705, "no_speech_prob": 1.8448160972184269e-06}, {"id": 301, "seek": 146212, "start": 1462.12, "end": 1466.52, "text": " Dependent variable the y look like and it's just a bunch of zeros and ones", "tokens": [4056, 521, 317, 7006, 264, 288, 574, 411, 293, 309, 311, 445, 257, 3840, 295, 35193, 293, 2306], "temperature": 0.0, "avg_logprob": -0.1420766260022315, "compression_ratio": 1.7575757575757576, "no_speech_prob": 3.905458015651675e-06}, {"id": 302, "seek": 146212, "start": 1467.56, "end": 1472.8, "text": " So the zeros if we look at data dot classes the zeros represent cats the ones represent dogs", "tokens": [407, 264, 35193, 498, 321, 574, 412, 1412, 5893, 5359, 264, 35193, 2906, 11111, 264, 2306, 2906, 7197], "temperature": 0.0, "avg_logprob": -0.1420766260022315, "compression_ratio": 1.7575757575757576, "no_speech_prob": 3.905458015651675e-06}, {"id": 303, "seek": 146212, "start": 1473.1599999999999, "end": 1475.2399999999998, "text": " You'll see here. There's basically two objects", "tokens": [509, 603, 536, 510, 13, 821, 311, 1936, 732, 6565], "temperature": 0.0, "avg_logprob": -0.1420766260022315, "compression_ratio": 1.7575757575757576, "no_speech_prob": 3.905458015651675e-06}, {"id": 304, "seek": 146212, "start": 1475.2399999999998, "end": 1477.2399999999998, "text": " I'm working with one is an object called data", "tokens": [286, 478, 1364, 365, 472, 307, 364, 2657, 1219, 1412], "temperature": 0.0, "avg_logprob": -0.1420766260022315, "compression_ratio": 1.7575757575757576, "no_speech_prob": 3.905458015651675e-06}, {"id": 305, "seek": 146212, "start": 1477.2399999999998, "end": 1484.1799999999998, "text": " Which contains the validation and training data and another one is the object called learn which contains the model right?", "tokens": [3013, 8306, 264, 24071, 293, 3097, 1412, 293, 1071, 472, 307, 264, 2657, 1219, 1466, 597, 8306, 264, 2316, 558, 30], "temperature": 0.0, "avg_logprob": -0.1420766260022315, "compression_ratio": 1.7575757575757576, "no_speech_prob": 3.905458015651675e-06}, {"id": 306, "seek": 146212, "start": 1484.6799999999998, "end": 1487.8, "text": " So anytime you want to find something out about the data we can look inside data", "tokens": [407, 13038, 291, 528, 281, 915, 746, 484, 466, 264, 1412, 321, 393, 574, 1854, 1412], "temperature": 0.0, "avg_logprob": -0.1420766260022315, "compression_ratio": 1.7575757575757576, "no_speech_prob": 3.905458015651675e-06}, {"id": 307, "seek": 148780, "start": 1487.8, "end": 1495.44, "text": " So we're going to get predictions for our validation set and so to do that we can call learn dot predict", "tokens": [407, 321, 434, 516, 281, 483, 21264, 337, 527, 24071, 992, 293, 370, 281, 360, 300, 321, 393, 818, 1466, 5893, 6069], "temperature": 0.0, "avg_logprob": -0.24840011596679687, "compression_ratio": 1.7179487179487178, "no_speech_prob": 1.653682147662039e-06}, {"id": 308, "seek": 148780, "start": 1496.44, "end": 1497.84, "text": " and", "tokens": [293], "temperature": 0.0, "avg_logprob": -0.24840011596679687, "compression_ratio": 1.7179487179487178, "no_speech_prob": 1.653682147662039e-06}, {"id": 309, "seek": 148780, "start": 1497.84, "end": 1505.26, "text": " So you can see here the first ten predictions and what it's giving you is prediction for dog and a prediction for cat", "tokens": [407, 291, 393, 536, 510, 264, 700, 2064, 21264, 293, 437, 309, 311, 2902, 291, 307, 17630, 337, 3000, 293, 257, 17630, 337, 3857], "temperature": 0.0, "avg_logprob": -0.24840011596679687, "compression_ratio": 1.7179487179487178, "no_speech_prob": 1.653682147662039e-06}, {"id": 310, "seek": 148780, "start": 1505.6, "end": 1512.04, "text": " now the way pie torch generally works and therefore fast AI also works is that most models return the", "tokens": [586, 264, 636, 1730, 27822, 5101, 1985, 293, 4412, 2370, 7318, 611, 1985, 307, 300, 881, 5245, 2736, 264], "temperature": 0.0, "avg_logprob": -0.24840011596679687, "compression_ratio": 1.7179487179487178, "no_speech_prob": 1.653682147662039e-06}, {"id": 311, "seek": 148780, "start": 1513.04, "end": 1514.52, "text": " log of", "tokens": [3565, 295], "temperature": 0.0, "avg_logprob": -0.24840011596679687, "compression_ratio": 1.7179487179487178, "no_speech_prob": 1.653682147662039e-06}, {"id": 312, "seek": 151452, "start": 1514.52, "end": 1519.92, "text": " The predictions rather than the probabilities themselves will learn why that is later in the course", "tokens": [440, 21264, 2831, 813, 264, 33783, 2969, 486, 1466, 983, 300, 307, 1780, 294, 264, 1164], "temperature": 0.0, "avg_logprob": -0.20243035075820495, "compression_ratio": 1.7745901639344261, "no_speech_prob": 1.012981647363631e-05}, {"id": 313, "seek": 151452, "start": 1520.12, "end": 1523.6399999999999, "text": " So for now recognize that to get your probabilities you have to get", "tokens": [407, 337, 586, 5521, 300, 281, 483, 428, 33783, 291, 362, 281, 483], "temperature": 0.0, "avg_logprob": -0.20243035075820495, "compression_ratio": 1.7745901639344261, "no_speech_prob": 1.012981647363631e-05}, {"id": 314, "seek": 151452, "start": 1524.6399999999999, "end": 1526.6399999999999, "text": " e to the power of", "tokens": [308, 281, 264, 1347, 295], "temperature": 0.0, "avg_logprob": -0.20243035075820495, "compression_ratio": 1.7745901639344261, "no_speech_prob": 1.012981647363631e-05}, {"id": 315, "seek": 151452, "start": 1527.04, "end": 1527.98, "text": " You'll see here", "tokens": [509, 603, 536, 510], "temperature": 0.0, "avg_logprob": -0.20243035075820495, "compression_ratio": 1.7745901639344261, "no_speech_prob": 1.012981647363631e-05}, {"id": 316, "seek": 151452, "start": 1527.98, "end": 1535.62, "text": " We're using numpy NP is numpy if you're not familiar with numpy that is one of the things that we assume that you have some", "tokens": [492, 434, 1228, 1031, 8200, 38611, 307, 1031, 8200, 498, 291, 434, 406, 4963, 365, 1031, 8200, 300, 307, 472, 295, 264, 721, 300, 321, 6552, 300, 291, 362, 512], "temperature": 0.0, "avg_logprob": -0.20243035075820495, "compression_ratio": 1.7745901639344261, "no_speech_prob": 1.012981647363631e-05}, {"id": 317, "seek": 151452, "start": 1535.8, "end": 1536.92, "text": " familiarity with", "tokens": [49828, 365], "temperature": 0.0, "avg_logprob": -0.20243035075820495, "compression_ratio": 1.7745901639344261, "no_speech_prob": 1.012981647363631e-05}, {"id": 318, "seek": 151452, "start": 1536.92, "end": 1543.06, "text": " So be sure to check out the material on course dot fast at AI to learn the basics of numpy", "tokens": [407, 312, 988, 281, 1520, 484, 264, 2527, 322, 1164, 5893, 2370, 412, 7318, 281, 1466, 264, 14688, 295, 1031, 8200], "temperature": 0.0, "avg_logprob": -0.20243035075820495, "compression_ratio": 1.7745901639344261, "no_speech_prob": 1.012981647363631e-05}, {"id": 319, "seek": 154306, "start": 1543.06, "end": 1544.82, "text": " it's", "tokens": [309, 311], "temperature": 0.0, "avg_logprob": -0.23110055334774066, "compression_ratio": 1.5853658536585367, "no_speech_prob": 2.947996335933567e-06}, {"id": 320, "seek": 154306, "start": 1544.82, "end": 1548.06, "text": " the way that Python handles all of the", "tokens": [264, 636, 300, 15329, 18722, 439, 295, 264], "temperature": 0.0, "avg_logprob": -0.23110055334774066, "compression_ratio": 1.5853658536585367, "no_speech_prob": 2.947996335933567e-06}, {"id": 321, "seek": 154306, "start": 1550.34, "end": 1554.86, "text": " Fast numerical programming array computation that kind of thing", "tokens": [15968, 29054, 9410, 10225, 24903, 300, 733, 295, 551], "temperature": 0.0, "avg_logprob": -0.23110055334774066, "compression_ratio": 1.5853658536585367, "no_speech_prob": 2.947996335933567e-06}, {"id": 322, "seek": 154306, "start": 1556.06, "end": 1559.28, "text": " Okay, so we can get the probabilities using that", "tokens": [1033, 11, 370, 321, 393, 483, 264, 33783, 1228, 300], "temperature": 0.0, "avg_logprob": -0.23110055334774066, "compression_ratio": 1.5853658536585367, "no_speech_prob": 2.947996335933567e-06}, {"id": 323, "seek": 154306, "start": 1560.1, "end": 1562.1, "text": " using NP dot exp", "tokens": [1228, 38611, 5893, 1278], "temperature": 0.0, "avg_logprob": -0.23110055334774066, "compression_ratio": 1.5853658536585367, "no_speech_prob": 2.947996335933567e-06}, {"id": 324, "seek": 154306, "start": 1562.3799999999999, "end": 1567.62, "text": " There's a few functions here that you can look at yourself if you're interested, but just some plotting functions that we'll use", "tokens": [821, 311, 257, 1326, 6828, 510, 300, 291, 393, 574, 412, 1803, 498, 291, 434, 3102, 11, 457, 445, 512, 41178, 6828, 300, 321, 603, 764], "temperature": 0.0, "avg_logprob": -0.23110055334774066, "compression_ratio": 1.5853658536585367, "no_speech_prob": 2.947996335933567e-06}, {"id": 325, "seek": 154306, "start": 1568.7, "end": 1570.8999999999999, "text": " And so we can now plot", "tokens": [400, 370, 321, 393, 586, 7542], "temperature": 0.0, "avg_logprob": -0.23110055334774066, "compression_ratio": 1.5853658536585367, "no_speech_prob": 2.947996335933567e-06}, {"id": 326, "seek": 157090, "start": 1570.9, "end": 1572.9, "text": " some random", "tokens": [512, 4974], "temperature": 0.0, "avg_logprob": -0.20812684746198756, "compression_ratio": 1.7358490566037736, "no_speech_prob": 8.990946298581548e-07}, {"id": 327, "seek": 157090, "start": 1573.26, "end": 1575.26, "text": " correct", "tokens": [3006], "temperature": 0.0, "avg_logprob": -0.20812684746198756, "compression_ratio": 1.7358490566037736, "no_speech_prob": 8.990946298581548e-07}, {"id": 328, "seek": 157090, "start": 1575.9, "end": 1582.38, "text": " Images and so here are some images that it was correct about okay, and so remember one is a dog", "tokens": [4331, 1660, 293, 370, 510, 366, 512, 5267, 300, 309, 390, 3006, 466, 1392, 11, 293, 370, 1604, 472, 307, 257, 3000], "temperature": 0.0, "avg_logprob": -0.20812684746198756, "compression_ratio": 1.7358490566037736, "no_speech_prob": 8.990946298581548e-07}, {"id": 329, "seek": 157090, "start": 1582.38, "end": 1589.42, "text": " So anything greater than 0.5 is dog and zero is a cat so this is what 10 to the negative 5 obviously a cat", "tokens": [407, 1340, 5044, 813, 1958, 13, 20, 307, 3000, 293, 4018, 307, 257, 3857, 370, 341, 307, 437, 1266, 281, 264, 3671, 1025, 2745, 257, 3857], "temperature": 0.0, "avg_logprob": -0.20812684746198756, "compression_ratio": 1.7358490566037736, "no_speech_prob": 8.990946298581548e-07}, {"id": 330, "seek": 157090, "start": 1590.3000000000002, "end": 1592.5, "text": " Here are some which are incorrect", "tokens": [1692, 366, 512, 597, 366, 18424], "temperature": 0.0, "avg_logprob": -0.20812684746198756, "compression_ratio": 1.7358490566037736, "no_speech_prob": 8.990946298581548e-07}, {"id": 331, "seek": 157090, "start": 1593.46, "end": 1599.38, "text": " Alright, so you can see that some of these which it thinks are incorrect obviously are just the you know images", "tokens": [2798, 11, 370, 291, 393, 536, 300, 512, 295, 613, 597, 309, 7309, 366, 18424, 2745, 366, 445, 264, 291, 458, 5267], "temperature": 0.0, "avg_logprob": -0.20812684746198756, "compression_ratio": 1.7358490566037736, "no_speech_prob": 8.990946298581548e-07}, {"id": 332, "seek": 159938, "start": 1599.38, "end": 1601.38, "text": " It shouldn't be there at all", "tokens": [467, 4659, 380, 312, 456, 412, 439], "temperature": 0.0, "avg_logprob": -0.16196956404720445, "compression_ratio": 1.9130434782608696, "no_speech_prob": 2.857303798009525e-06}, {"id": 333, "seek": 159938, "start": 1601.5, "end": 1608.38, "text": " But clearly this one which it called a dog is not at all a dog so there are some obvious mistakes", "tokens": [583, 4448, 341, 472, 597, 309, 1219, 257, 3000, 307, 406, 412, 439, 257, 3000, 370, 456, 366, 512, 6322, 8038], "temperature": 0.0, "avg_logprob": -0.16196956404720445, "compression_ratio": 1.9130434782608696, "no_speech_prob": 2.857303798009525e-06}, {"id": 334, "seek": 159938, "start": 1611.22, "end": 1613.22, "text": " We can also take a look at", "tokens": [492, 393, 611, 747, 257, 574, 412], "temperature": 0.0, "avg_logprob": -0.16196956404720445, "compression_ratio": 1.9130434782608696, "no_speech_prob": 2.857303798009525e-06}, {"id": 335, "seek": 159938, "start": 1614.7800000000002, "end": 1622.38, "text": " Which cats is it the most confident are cats which dogs are the most dog like the most confident dogs", "tokens": [3013, 11111, 307, 309, 264, 881, 6679, 366, 11111, 597, 7197, 366, 264, 881, 3000, 411, 264, 881, 6679, 7197], "temperature": 0.0, "avg_logprob": -0.16196956404720445, "compression_ratio": 1.9130434782608696, "no_speech_prob": 2.857303798009525e-06}, {"id": 336, "seek": 162238, "start": 1622.38, "end": 1628.98, "text": " Perhaps more interestingly we can also see which cats is it the most confident are actually dogs", "tokens": [10517, 544, 25873, 321, 393, 611, 536, 597, 11111, 307, 309, 264, 881, 6679, 366, 767, 7197], "temperature": 0.0, "avg_logprob": -0.20398883819580077, "compression_ratio": 1.672340425531915, "no_speech_prob": 1.816212602534506e-06}, {"id": 337, "seek": 162238, "start": 1629.0200000000002, "end": 1631.98, "text": " so which ones it is at the most wrong about and", "tokens": [370, 597, 2306, 309, 307, 412, 264, 881, 2085, 466, 293], "temperature": 0.0, "avg_logprob": -0.20398883819580077, "compression_ratio": 1.672340425531915, "no_speech_prob": 1.816212602534506e-06}, {"id": 338, "seek": 162238, "start": 1632.8600000000001, "end": 1639.96, "text": " Same thing for the ones the dogs that it really thinks are cats and again some of these are just pretty weird", "tokens": [10635, 551, 337, 264, 2306, 264, 7197, 300, 309, 534, 7309, 366, 11111, 293, 797, 512, 295, 613, 366, 445, 1238, 3657], "temperature": 0.0, "avg_logprob": -0.20398883819580077, "compression_ratio": 1.672340425531915, "no_speech_prob": 1.816212602534506e-06}, {"id": 339, "seek": 162238, "start": 1639.96, "end": 1642.98, "text": " I guess there is a dog in there. Yes, Rachel. I", "tokens": [286, 2041, 456, 307, 257, 3000, 294, 456, 13, 1079, 11, 14246, 13, 286], "temperature": 0.0, "avg_logprob": -0.20398883819580077, "compression_ratio": 1.672340425531915, "no_speech_prob": 1.816212602534506e-06}, {"id": 340, "seek": 162238, "start": 1643.5, "end": 1646.74, "text": " Just say do you want to say more about why you would want to look at your data?", "tokens": [1449, 584, 360, 291, 528, 281, 584, 544, 466, 983, 291, 576, 528, 281, 574, 412, 428, 1412, 30], "temperature": 0.0, "avg_logprob": -0.20398883819580077, "compression_ratio": 1.672340425531915, "no_speech_prob": 1.816212602534506e-06}, {"id": 341, "seek": 162238, "start": 1647.94, "end": 1649.94, "text": " Yeah, sure", "tokens": [865, 11, 988], "temperature": 0.0, "avg_logprob": -0.20398883819580077, "compression_ratio": 1.672340425531915, "no_speech_prob": 1.816212602534506e-06}, {"id": 342, "seek": 164994, "start": 1649.94, "end": 1651.94, "text": " So", "tokens": [407], "temperature": 0.0, "avg_logprob": -0.15313474031595084, "compression_ratio": 1.598360655737705, "no_speech_prob": 3.187545871696784e-06}, {"id": 343, "seek": 164994, "start": 1652.18, "end": 1654.8600000000001, "text": " Yeah, so finally I just mentioned the last one", "tokens": [865, 11, 370, 2721, 286, 445, 2835, 264, 1036, 472], "temperature": 0.0, "avg_logprob": -0.15313474031595084, "compression_ratio": 1.598360655737705, "no_speech_prob": 3.187545871696784e-06}, {"id": 344, "seek": 164994, "start": 1654.8600000000001, "end": 1658.5800000000002, "text": " We've got here is to see which ones have the probability closest to 0.5", "tokens": [492, 600, 658, 510, 307, 281, 536, 597, 2306, 362, 264, 8482, 13699, 281, 1958, 13, 20], "temperature": 0.0, "avg_logprob": -0.15313474031595084, "compression_ratio": 1.598360655737705, "no_speech_prob": 3.187545871696784e-06}, {"id": 345, "seek": 164994, "start": 1658.5800000000002, "end": 1664.54, "text": " So these are the ones that the the model knows it doesn't really know what to do with and some of these it's not surprising", "tokens": [407, 613, 366, 264, 2306, 300, 264, 264, 2316, 3255, 309, 1177, 380, 534, 458, 437, 281, 360, 365, 293, 512, 295, 613, 309, 311, 406, 8830], "temperature": 0.0, "avg_logprob": -0.15313474031595084, "compression_ratio": 1.598360655737705, "no_speech_prob": 3.187545871696784e-06}, {"id": 346, "seek": 164994, "start": 1666.3400000000001, "end": 1668.78, "text": " So yeah, I mean this is kind of like", "tokens": [407, 1338, 11, 286, 914, 341, 307, 733, 295, 411], "temperature": 0.0, "avg_logprob": -0.15313474031595084, "compression_ratio": 1.598360655737705, "no_speech_prob": 3.187545871696784e-06}, {"id": 347, "seek": 164994, "start": 1670.7, "end": 1676.66, "text": " Always the first thing I do after I build a model is to try to find a way to like visualize what it's built", "tokens": [11270, 264, 700, 551, 286, 360, 934, 286, 1322, 257, 2316, 307, 281, 853, 281, 915, 257, 636, 281, 411, 23273, 437, 309, 311, 3094], "temperature": 0.0, "avg_logprob": -0.15313474031595084, "compression_ratio": 1.598360655737705, "no_speech_prob": 3.187545871696784e-06}, {"id": 348, "seek": 167666, "start": 1676.66, "end": 1679.46, "text": " Because if I want to make the model better", "tokens": [1436, 498, 286, 528, 281, 652, 264, 2316, 1101], "temperature": 0.0, "avg_logprob": -0.1675889024110598, "compression_ratio": 1.7325102880658436, "no_speech_prob": 2.2959045509196585e-06}, {"id": 349, "seek": 167666, "start": 1679.8600000000001, "end": 1684.5400000000002, "text": " Then I need to take advantage of the things that's doing well and fix the things that's doing badly", "tokens": [1396, 286, 643, 281, 747, 5002, 295, 264, 721, 300, 311, 884, 731, 293, 3191, 264, 721, 300, 311, 884, 13425], "temperature": 0.0, "avg_logprob": -0.1675889024110598, "compression_ratio": 1.7325102880658436, "no_speech_prob": 2.2959045509196585e-06}, {"id": 350, "seek": 167666, "start": 1685.0600000000002, "end": 1687.0600000000002, "text": " so in this case", "tokens": [370, 294, 341, 1389], "temperature": 0.0, "avg_logprob": -0.1675889024110598, "compression_ratio": 1.7325102880658436, "no_speech_prob": 2.2959045509196585e-06}, {"id": 351, "seek": 167666, "start": 1687.66, "end": 1691.26, "text": " And often this is the case I've learned something about the data set itself", "tokens": [400, 2049, 341, 307, 264, 1389, 286, 600, 3264, 746, 466, 264, 1412, 992, 2564], "temperature": 0.0, "avg_logprob": -0.1675889024110598, "compression_ratio": 1.7325102880658436, "no_speech_prob": 2.2959045509196585e-06}, {"id": 352, "seek": 167666, "start": 1691.26, "end": 1694.66, "text": " Which is that there are some things that are in here that probably shouldn't be", "tokens": [3013, 307, 300, 456, 366, 512, 721, 300, 366, 294, 510, 300, 1391, 4659, 380, 312], "temperature": 0.0, "avg_logprob": -0.1675889024110598, "compression_ratio": 1.7325102880658436, "no_speech_prob": 2.2959045509196585e-06}, {"id": 353, "seek": 167666, "start": 1696.5400000000002, "end": 1698.5400000000002, "text": " But I've also like it's also clear that", "tokens": [583, 286, 600, 611, 411, 309, 311, 611, 1850, 300], "temperature": 0.0, "avg_logprob": -0.1675889024110598, "compression_ratio": 1.7325102880658436, "no_speech_prob": 2.2959045509196585e-06}, {"id": 354, "seek": 167666, "start": 1699.3000000000002, "end": 1700.8200000000002, "text": " this", "tokens": [341], "temperature": 0.0, "avg_logprob": -0.1675889024110598, "compression_ratio": 1.7325102880658436, "no_speech_prob": 2.2959045509196585e-06}, {"id": 355, "seek": 167666, "start": 1700.8200000000002, "end": 1705.3000000000002, "text": " Model has room to improve like to me. That's pretty obviously", "tokens": [17105, 575, 1808, 281, 3470, 411, 281, 385, 13, 663, 311, 1238, 2745], "temperature": 0.0, "avg_logprob": -0.1675889024110598, "compression_ratio": 1.7325102880658436, "no_speech_prob": 2.2959045509196585e-06}, {"id": 356, "seek": 170530, "start": 1705.3, "end": 1706.3799999999999, "text": " a", "tokens": [257], "temperature": 0.0, "avg_logprob": -0.23406219482421875, "compression_ratio": 1.6401869158878504, "no_speech_prob": 2.9479992917913478e-06}, {"id": 357, "seek": 170530, "start": 1706.3799999999999, "end": 1711.5, "text": " Dog, but one thing I'm suspicious about here is this image is very", "tokens": [13472, 11, 457, 472, 551, 286, 478, 17931, 466, 510, 307, 341, 3256, 307, 588], "temperature": 0.0, "avg_logprob": -0.23406219482421875, "compression_ratio": 1.6401869158878504, "no_speech_prob": 2.9479992917913478e-06}, {"id": 358, "seek": 170530, "start": 1712.62, "end": 1714.62, "text": " kind of fat and", "tokens": [733, 295, 4046, 293], "temperature": 0.0, "avg_logprob": -0.23406219482421875, "compression_ratio": 1.6401869158878504, "no_speech_prob": 2.9479992917913478e-06}, {"id": 359, "seek": 170530, "start": 1715.18, "end": 1717.18, "text": " short and", "tokens": [2099, 293], "temperature": 0.0, "avg_logprob": -0.23406219482421875, "compression_ratio": 1.6401869158878504, "no_speech_prob": 2.9479992917913478e-06}, {"id": 360, "seek": 170530, "start": 1717.3, "end": 1719.22, "text": " As we all learn", "tokens": [1018, 321, 439, 1466], "temperature": 0.0, "avg_logprob": -0.23406219482421875, "compression_ratio": 1.6401869158878504, "no_speech_prob": 2.9479992917913478e-06}, {"id": 361, "seek": 170530, "start": 1719.22, "end": 1724.3799999999999, "text": " The way these algorithms work is it kind of grabs a square piece at a time", "tokens": [440, 636, 613, 14642, 589, 307, 309, 733, 295, 30028, 257, 3732, 2522, 412, 257, 565], "temperature": 0.0, "avg_logprob": -0.23406219482421875, "compression_ratio": 1.6401869158878504, "no_speech_prob": 2.9479992917913478e-06}, {"id": 362, "seek": 170530, "start": 1725.18, "end": 1729.18, "text": " So this rather makes me suspicious that we're going to need to use something called data augmentation", "tokens": [407, 341, 2831, 1669, 385, 17931, 300, 321, 434, 516, 281, 643, 281, 764, 746, 1219, 1412, 14501, 19631], "temperature": 0.0, "avg_logprob": -0.23406219482421875, "compression_ratio": 1.6401869158878504, "no_speech_prob": 2.9479992917913478e-06}, {"id": 363, "seek": 170530, "start": 1729.6599999999999, "end": 1733.3799999999999, "text": " That will learn about learn about later to handle this properly", "tokens": [663, 486, 1466, 466, 1466, 466, 1780, 281, 4813, 341, 6108], "temperature": 0.0, "avg_logprob": -0.23406219482421875, "compression_ratio": 1.6401869158878504, "no_speech_prob": 2.9479992917913478e-06}, {"id": 364, "seek": 173338, "start": 1733.38, "end": 1735.38, "text": " Okay", "tokens": [1033], "temperature": 0.0, "avg_logprob": -0.18220910634080026, "compression_ratio": 1.5517241379310345, "no_speech_prob": 3.156120556013775e-07}, {"id": 365, "seek": 173338, "start": 1736.22, "end": 1738.22, "text": " Okay, so", "tokens": [1033, 11, 370], "temperature": 0.0, "avg_logprob": -0.18220910634080026, "compression_ratio": 1.5517241379310345, "no_speech_prob": 3.156120556013775e-07}, {"id": 366, "seek": 173338, "start": 1739.18, "end": 1741.18, "text": " That's it right we've now built", "tokens": [663, 311, 309, 558, 321, 600, 586, 3094], "temperature": 0.0, "avg_logprob": -0.18220910634080026, "compression_ratio": 1.5517241379310345, "no_speech_prob": 3.156120556013775e-07}, {"id": 367, "seek": 173338, "start": 1743.0600000000002, "end": 1744.5, "text": " We've now", "tokens": [492, 600, 586], "temperature": 0.0, "avg_logprob": -0.18220910634080026, "compression_ratio": 1.5517241379310345, "no_speech_prob": 3.156120556013775e-07}, {"id": 368, "seek": 173338, "start": 1744.5, "end": 1746.5, "text": " built an image classifier and", "tokens": [3094, 364, 3256, 1508, 9902, 293], "temperature": 0.0, "avg_logprob": -0.18220910634080026, "compression_ratio": 1.5517241379310345, "no_speech_prob": 3.156120556013775e-07}, {"id": 369, "seek": 173338, "start": 1746.74, "end": 1752.46, "text": " Something that you should try now is to grab some data yourself", "tokens": [6595, 300, 291, 820, 853, 586, 307, 281, 4444, 512, 1412, 1803], "temperature": 0.0, "avg_logprob": -0.18220910634080026, "compression_ratio": 1.5517241379310345, "no_speech_prob": 3.156120556013775e-07}, {"id": 370, "seek": 173338, "start": 1753.74, "end": 1755.74, "text": " some pictures of", "tokens": [512, 5242, 295], "temperature": 0.0, "avg_logprob": -0.18220910634080026, "compression_ratio": 1.5517241379310345, "no_speech_prob": 3.156120556013775e-07}, {"id": 371, "seek": 175574, "start": 1755.74, "end": 1763.02, "text": " Two or more different types of thing put them in different folders and run the same three lines of code on", "tokens": [4453, 420, 544, 819, 3467, 295, 551, 829, 552, 294, 819, 31082, 293, 1190, 264, 912, 1045, 3876, 295, 3089, 322], "temperature": 0.0, "avg_logprob": -0.18222247229682076, "compression_ratio": 1.8177083333333333, "no_speech_prob": 8.851544066601491e-07}, {"id": 372, "seek": 175574, "start": 1763.7, "end": 1766.1, "text": " them okay, and you'll find", "tokens": [552, 1392, 11, 293, 291, 603, 915], "temperature": 0.0, "avg_logprob": -0.18222247229682076, "compression_ratio": 1.8177083333333333, "no_speech_prob": 8.851544066601491e-07}, {"id": 373, "seek": 175574, "start": 1767.02, "end": 1773.22, "text": " That it will work for that as well as long as that they are pictures of things like", "tokens": [663, 309, 486, 589, 337, 300, 382, 731, 382, 938, 382, 300, 436, 366, 5242, 295, 721, 411], "temperature": 0.0, "avg_logprob": -0.18222247229682076, "compression_ratio": 1.8177083333333333, "no_speech_prob": 8.851544066601491e-07}, {"id": 374, "seek": 175574, "start": 1774.02, "end": 1777.9, "text": " the kinds of things that people normally take photos of right so if they're", "tokens": [264, 3685, 295, 721, 300, 561, 5646, 747, 5787, 295, 558, 370, 498, 436, 434], "temperature": 0.0, "avg_logprob": -0.18222247229682076, "compression_ratio": 1.8177083333333333, "no_speech_prob": 8.851544066601491e-07}, {"id": 375, "seek": 175574, "start": 1778.86, "end": 1781.9, "text": " microscope microscope pictures or pathology pictures or", "tokens": [29753, 29753, 5242, 420, 3100, 1793, 5242, 420], "temperature": 0.0, "avg_logprob": -0.18222247229682076, "compression_ratio": 1.8177083333333333, "no_speech_prob": 8.851544066601491e-07}, {"id": 376, "seek": 178190, "start": 1781.9, "end": 1787.42, "text": " CT scans or something this won't work very well as well learn about later", "tokens": [19529, 35116, 420, 746, 341, 1582, 380, 589, 588, 731, 382, 731, 1466, 466, 1780], "temperature": 0.0, "avg_logprob": -0.1776967275710333, "compression_ratio": 1.6093023255813954, "no_speech_prob": 9.570803740643896e-07}, {"id": 377, "seek": 178190, "start": 1787.42, "end": 1793.0800000000002, "text": " There are some other things we do need to do to make that work, but for things that look like normal photos", "tokens": [821, 366, 512, 661, 721, 321, 360, 643, 281, 360, 281, 652, 300, 589, 11, 457, 337, 721, 300, 574, 411, 2710, 5787], "temperature": 0.0, "avg_logprob": -0.1776967275710333, "compression_ratio": 1.6093023255813954, "no_speech_prob": 9.570803740643896e-07}, {"id": 378, "seek": 178190, "start": 1794.8200000000002, "end": 1799.5, "text": " These you can run exactly the same three lines of code and just point your", "tokens": [1981, 291, 393, 1190, 2293, 264, 912, 1045, 3876, 295, 3089, 293, 445, 935, 428], "temperature": 0.0, "avg_logprob": -0.1776967275710333, "compression_ratio": 1.6093023255813954, "no_speech_prob": 9.570803740643896e-07}, {"id": 379, "seek": 178190, "start": 1800.5, "end": 1802.5, "text": " path variable somewhere else", "tokens": [3100, 7006, 4079, 1646], "temperature": 0.0, "avg_logprob": -0.1776967275710333, "compression_ratio": 1.6093023255813954, "no_speech_prob": 9.570803740643896e-07}, {"id": 380, "seek": 178190, "start": 1803.38, "end": 1806.5, "text": " To get your own image classifier, so for example", "tokens": [1407, 483, 428, 1065, 3256, 1508, 9902, 11, 370, 337, 1365], "temperature": 0.0, "avg_logprob": -0.1776967275710333, "compression_ratio": 1.6093023255813954, "no_speech_prob": 9.570803740643896e-07}, {"id": 381, "seek": 178190, "start": 1807.22, "end": 1809.18, "text": " one student", "tokens": [472, 3107], "temperature": 0.0, "avg_logprob": -0.1776967275710333, "compression_ratio": 1.6093023255813954, "no_speech_prob": 9.570803740643896e-07}, {"id": 382, "seek": 180918, "start": 1809.18, "end": 1812.9, "text": " Took those three lines of code downloaded from Google images", "tokens": [38288, 729, 1045, 3876, 295, 3089, 21748, 490, 3329, 5267], "temperature": 0.0, "avg_logprob": -0.2202158463306916, "compression_ratio": 1.7321428571428572, "no_speech_prob": 6.64335584588116e-06}, {"id": 383, "seek": 180918, "start": 1813.0600000000002, "end": 1817.8200000000002, "text": " Ten examples of pictures of people playing cricket ten examples of people playing baseball", "tokens": [9380, 5110, 295, 5242, 295, 561, 2433, 31626, 2064, 5110, 295, 561, 2433, 14323], "temperature": 0.0, "avg_logprob": -0.2202158463306916, "compression_ratio": 1.7321428571428572, "no_speech_prob": 6.64335584588116e-06}, {"id": 384, "seek": 180918, "start": 1818.5, "end": 1823.26, "text": " And build a classifier of those images which was nearly perfectly correct", "tokens": [400, 1322, 257, 1508, 9902, 295, 729, 5267, 597, 390, 6217, 6239, 3006], "temperature": 0.0, "avg_logprob": -0.2202158463306916, "compression_ratio": 1.7321428571428572, "no_speech_prob": 6.64335584588116e-06}, {"id": 385, "seek": 180918, "start": 1823.98, "end": 1825.42, "text": " the same", "tokens": [264, 912], "temperature": 0.0, "avg_logprob": -0.2202158463306916, "compression_ratio": 1.7321428571428572, "no_speech_prob": 6.64335584588116e-06}, {"id": 386, "seek": 180918, "start": 1825.42, "end": 1829.38, "text": " student actually also tried downloading seven pictures of", "tokens": [3107, 767, 611, 3031, 32529, 3407, 5242, 295], "temperature": 0.0, "avg_logprob": -0.2202158463306916, "compression_ratio": 1.7321428571428572, "no_speech_prob": 6.64335584588116e-06}, {"id": 387, "seek": 180918, "start": 1830.18, "end": 1837.26, "text": " Canadian currency seven pictures of American currency and again in that case the model was 100%", "tokens": [12641, 13346, 3407, 5242, 295, 2665, 13346, 293, 797, 294, 300, 1389, 264, 2316, 390, 2319, 4], "temperature": 0.0, "avg_logprob": -0.2202158463306916, "compression_ratio": 1.7321428571428572, "no_speech_prob": 6.64335584588116e-06}, {"id": 388, "seek": 183726, "start": 1837.26, "end": 1843.46, "text": " Accurate so you can just go to Google images if you like and download a few things of a few different classes and see", "tokens": [5725, 33144, 370, 291, 393, 445, 352, 281, 3329, 5267, 498, 291, 411, 293, 5484, 257, 1326, 721, 295, 257, 1326, 819, 5359, 293, 536], "temperature": 0.0, "avg_logprob": -0.11848571186973936, "compression_ratio": 1.6521739130434783, "no_speech_prob": 3.6326713370726793e-07}, {"id": 389, "seek": 183726, "start": 1843.7, "end": 1848.3, "text": " See what works and tell us on the forum both your successes and your failures", "tokens": [3008, 437, 1985, 293, 980, 505, 322, 264, 17542, 1293, 428, 26101, 293, 428, 20774], "temperature": 0.0, "avg_logprob": -0.11848571186973936, "compression_ratio": 1.6521739130434783, "no_speech_prob": 3.6326713370726793e-07}, {"id": 390, "seek": 183726, "start": 1852.34, "end": 1854.5, "text": " So what we just did was to", "tokens": [407, 437, 321, 445, 630, 390, 281], "temperature": 0.0, "avg_logprob": -0.11848571186973936, "compression_ratio": 1.6521739130434783, "no_speech_prob": 3.6326713370726793e-07}, {"id": 391, "seek": 183726, "start": 1855.78, "end": 1862.18, "text": " Train a neural network, but we didn't first of all tell you what a neural network is or what training means or", "tokens": [28029, 257, 18161, 3209, 11, 457, 321, 994, 380, 700, 295, 439, 980, 291, 437, 257, 18161, 3209, 307, 420, 437, 3097, 1355, 420], "temperature": 0.0, "avg_logprob": -0.11848571186973936, "compression_ratio": 1.6521739130434783, "no_speech_prob": 3.6326713370726793e-07}, {"id": 392, "seek": 183726, "start": 1863.3, "end": 1864.5, "text": " anything", "tokens": [1340], "temperature": 0.0, "avg_logprob": -0.11848571186973936, "compression_ratio": 1.6521739130434783, "no_speech_prob": 3.6326713370726793e-07}, {"id": 393, "seek": 186450, "start": 1864.5, "end": 1871.32, "text": " Why is that well this is the start of our top-down approach to learning?", "tokens": [1545, 307, 300, 731, 341, 307, 264, 722, 295, 527, 1192, 12, 5093, 3109, 281, 2539, 30], "temperature": 0.0, "avg_logprob": -0.1964531821766119, "compression_ratio": 1.6666666666666667, "no_speech_prob": 2.857294020941481e-06}, {"id": 394, "seek": 186450, "start": 1871.58, "end": 1878.94, "text": " and basically the idea is that unlike the way math and technical subjects are usually taught where you learn every", "tokens": [293, 1936, 264, 1558, 307, 300, 8343, 264, 636, 5221, 293, 6191, 13066, 366, 2673, 5928, 689, 291, 1466, 633], "temperature": 0.0, "avg_logprob": -0.1964531821766119, "compression_ratio": 1.6666666666666667, "no_speech_prob": 2.857294020941481e-06}, {"id": 395, "seek": 186450, "start": 1879.14, "end": 1883.7, "text": " little element piece by piece, and you don't actually get to put them all together and", "tokens": [707, 4478, 2522, 538, 2522, 11, 293, 291, 500, 380, 767, 483, 281, 829, 552, 439, 1214, 293], "temperature": 0.0, "avg_logprob": -0.1964531821766119, "compression_ratio": 1.6666666666666667, "no_speech_prob": 2.857294020941481e-06}, {"id": 396, "seek": 186450, "start": 1884.42, "end": 1886.54, "text": " build your own image classifier until", "tokens": [1322, 428, 1065, 3256, 1508, 9902, 1826], "temperature": 0.0, "avg_logprob": -0.1964531821766119, "compression_ratio": 1.6666666666666667, "no_speech_prob": 2.857294020941481e-06}, {"id": 397, "seek": 186450, "start": 1887.02, "end": 1891.58, "text": " Third year of graduate school our approach is to say from the start", "tokens": [12548, 1064, 295, 8080, 1395, 527, 3109, 307, 281, 584, 490, 264, 722], "temperature": 0.0, "avg_logprob": -0.1964531821766119, "compression_ratio": 1.6666666666666667, "no_speech_prob": 2.857294020941481e-06}, {"id": 398, "seek": 189158, "start": 1891.58, "end": 1895.06, "text": " Hey, let's show you how to train an image classifier", "tokens": [1911, 11, 718, 311, 855, 291, 577, 281, 3847, 364, 3256, 1508, 9902], "temperature": 0.0, "avg_logprob": -0.1748625504343133, "compression_ratio": 1.682608695652174, "no_speech_prob": 3.668845465654158e-06}, {"id": 399, "seek": 189158, "start": 1895.06, "end": 1900.1399999999999, "text": " And you can start doing stuff and then gradually we dig deeper and deeper and deeper", "tokens": [400, 291, 393, 722, 884, 1507, 293, 550, 13145, 321, 2528, 7731, 293, 7731, 293, 7731], "temperature": 0.0, "avg_logprob": -0.1748625504343133, "compression_ratio": 1.682608695652174, "no_speech_prob": 3.668845465654158e-06}, {"id": 400, "seek": 189158, "start": 1901.62, "end": 1904.1, "text": " and so the idea is that", "tokens": [293, 370, 264, 1558, 307, 300], "temperature": 0.0, "avg_logprob": -0.1748625504343133, "compression_ratio": 1.682608695652174, "no_speech_prob": 3.668845465654158e-06}, {"id": 401, "seek": 189158, "start": 1906.1799999999998, "end": 1913.1, "text": " Throughout the course you're going to see like new problems that we want to solve so for example in the next lesson", "tokens": [22775, 264, 1164, 291, 434, 516, 281, 536, 411, 777, 2740, 300, 321, 528, 281, 5039, 370, 337, 1365, 294, 264, 958, 6898], "temperature": 0.0, "avg_logprob": -0.1748625504343133, "compression_ratio": 1.682608695652174, "no_speech_prob": 3.668845465654158e-06}, {"id": 402, "seek": 189158, "start": 1913.1, "end": 1915.1, "text": " We'll look at well", "tokens": [492, 603, 574, 412, 731], "temperature": 0.0, "avg_logprob": -0.1748625504343133, "compression_ratio": 1.682608695652174, "no_speech_prob": 3.668845465654158e-06}, {"id": 403, "seek": 191510, "start": 1915.1, "end": 1921.1799999999998, "text": " What if we're not looking at normal kinds of photos, but we're looking at satellite images", "tokens": [708, 498, 321, 434, 406, 1237, 412, 2710, 3685, 295, 5787, 11, 457, 321, 434, 1237, 412, 16016, 5267], "temperature": 0.0, "avg_logprob": -0.14531962725580955, "compression_ratio": 1.8427947598253276, "no_speech_prob": 2.7264557047601556e-06}, {"id": 404, "seek": 191510, "start": 1921.1799999999998, "end": 1926.02, "text": " And we'll see why it is that this approach that we're learning today doesn't quite work as well", "tokens": [400, 321, 603, 536, 983, 309, 307, 300, 341, 3109, 300, 321, 434, 2539, 965, 1177, 380, 1596, 589, 382, 731], "temperature": 0.0, "avg_logprob": -0.14531962725580955, "compression_ratio": 1.8427947598253276, "no_speech_prob": 2.7264557047601556e-06}, {"id": 405, "seek": 191510, "start": 1926.02, "end": 1932.1, "text": " And what things do we have to change and so we'll learn enough about the theory to understand why that happens", "tokens": [400, 437, 721, 360, 321, 362, 281, 1319, 293, 370, 321, 603, 1466, 1547, 466, 264, 5261, 281, 1223, 983, 300, 2314], "temperature": 0.0, "avg_logprob": -0.14531962725580955, "compression_ratio": 1.8427947598253276, "no_speech_prob": 2.7264557047601556e-06}, {"id": 406, "seek": 191510, "start": 1932.1, "end": 1937.62, "text": " And then we'll learn about the libraries and how we can change change things with the libraries to make that work better", "tokens": [400, 550, 321, 603, 1466, 466, 264, 15148, 293, 577, 321, 393, 1319, 1319, 721, 365, 264, 15148, 281, 652, 300, 589, 1101], "temperature": 0.0, "avg_logprob": -0.14531962725580955, "compression_ratio": 1.8427947598253276, "no_speech_prob": 2.7264557047601556e-06}, {"id": 407, "seek": 191510, "start": 1939.1, "end": 1940.4599999999998, "text": " and", "tokens": [293], "temperature": 0.0, "avg_logprob": -0.14531962725580955, "compression_ratio": 1.8427947598253276, "no_speech_prob": 2.7264557047601556e-06}, {"id": 408, "seek": 194046, "start": 1940.46, "end": 1946.54, "text": " So during the course we're gradually going to learn to solve more and more problems as we do so we'll need to learn", "tokens": [407, 1830, 264, 1164, 321, 434, 13145, 516, 281, 1466, 281, 5039, 544, 293, 544, 2740, 382, 321, 360, 370, 321, 603, 643, 281, 1466], "temperature": 0.0, "avg_logprob": -0.20078090745575575, "compression_ratio": 1.8623853211009174, "no_speech_prob": 3.8448874875030015e-06}, {"id": 409, "seek": 194046, "start": 1946.58, "end": 1951.94, "text": " More and more parts of the library more and more bits of the theory until by the end", "tokens": [5048, 293, 544, 3166, 295, 264, 6405, 544, 293, 544, 9239, 295, 264, 5261, 1826, 538, 264, 917], "temperature": 0.0, "avg_logprob": -0.20078090745575575, "compression_ratio": 1.8623853211009174, "no_speech_prob": 3.8448874875030015e-06}, {"id": 410, "seek": 194046, "start": 1952.3, "end": 1955.02, "text": " we're actually going to learn how to create a", "tokens": [321, 434, 767, 516, 281, 1466, 577, 281, 1884, 257], "temperature": 0.0, "avg_logprob": -0.20078090745575575, "compression_ratio": 1.8623853211009174, "no_speech_prob": 3.8448874875030015e-06}, {"id": 411, "seek": 194046, "start": 1956.3, "end": 1957.54, "text": " world-class", "tokens": [1002, 12, 11665], "temperature": 0.0, "avg_logprob": -0.20078090745575575, "compression_ratio": 1.8623853211009174, "no_speech_prob": 3.8448874875030015e-06}, {"id": 412, "seek": 194046, "start": 1957.54, "end": 1964.14, "text": " Neural net architecture from scratch and our own training loop from scratch, and so we're actually built everything", "tokens": [1734, 1807, 2533, 9482, 490, 8459, 293, 527, 1065, 3097, 6367, 490, 8459, 11, 293, 370, 321, 434, 767, 3094, 1203], "temperature": 0.0, "avg_logprob": -0.20078090745575575, "compression_ratio": 1.8623853211009174, "no_speech_prob": 3.8448874875030015e-06}, {"id": 413, "seek": 194046, "start": 1964.94, "end": 1967.1000000000001, "text": " Ourselves so that's the general", "tokens": [2621, 2036, 370, 300, 311, 264, 2674], "temperature": 0.0, "avg_logprob": -0.20078090745575575, "compression_ratio": 1.8623853211009174, "no_speech_prob": 3.8448874875030015e-06}, {"id": 414, "seek": 196710, "start": 1967.1, "end": 1972.2199999999998, "text": " Approach yes, Rachel and we sometimes also call this the whole game", "tokens": [29551, 608, 2086, 11, 14246, 293, 321, 2171, 611, 818, 341, 264, 1379, 1216], "temperature": 0.0, "avg_logprob": -0.21620939273645381, "compression_ratio": 1.743083003952569, "no_speech_prob": 6.747924544470152e-06}, {"id": 415, "seek": 196710, "start": 1972.6999999999998, "end": 1976.6599999999999, "text": " Which is inspired by Harvard professor David Perkins", "tokens": [3013, 307, 7547, 538, 13378, 8304, 4389, 3026, 10277], "temperature": 0.0, "avg_logprob": -0.21620939273645381, "compression_ratio": 1.743083003952569, "no_speech_prob": 6.747924544470152e-06}, {"id": 416, "seek": 196710, "start": 1976.9399999999998, "end": 1977.4599999999998, "text": " Yeah", "tokens": [865], "temperature": 0.0, "avg_logprob": -0.21620939273645381, "compression_ratio": 1.743083003952569, "no_speech_prob": 6.747924544470152e-06}, {"id": 417, "seek": 196710, "start": 1977.4599999999998, "end": 1982.62, "text": " And so the idea with the whole game is like this is more like how you would learn baseball or music", "tokens": [400, 370, 264, 1558, 365, 264, 1379, 1216, 307, 411, 341, 307, 544, 411, 577, 291, 576, 1466, 14323, 420, 1318], "temperature": 0.0, "avg_logprob": -0.21620939273645381, "compression_ratio": 1.743083003952569, "no_speech_prob": 6.747924544470152e-06}, {"id": 418, "seek": 196710, "start": 1982.6599999999999, "end": 1989.4399999999998, "text": " With baseball you would get taken to a ball game you would learn what baseball is you would start playing it", "tokens": [2022, 14323, 291, 576, 483, 2726, 281, 257, 2594, 1216, 291, 576, 1466, 437, 14323, 307, 291, 576, 722, 2433, 309], "temperature": 0.0, "avg_logprob": -0.21620939273645381, "compression_ratio": 1.743083003952569, "no_speech_prob": 6.747924544470152e-06}, {"id": 419, "seek": 196710, "start": 1989.78, "end": 1995.1399999999999, "text": " And it would only be years later that you might learn about the physics of how curveball works for example", "tokens": [400, 309, 576, 787, 312, 924, 1780, 300, 291, 1062, 1466, 466, 264, 10649, 295, 577, 7605, 3129, 1985, 337, 1365], "temperature": 0.0, "avg_logprob": -0.21620939273645381, "compression_ratio": 1.743083003952569, "no_speech_prob": 6.747924544470152e-06}, {"id": 420, "seek": 199514, "start": 1995.14, "end": 2000.0400000000002, "text": " or with music we put a instrument in your hand and you start", "tokens": [420, 365, 1318, 321, 829, 257, 7198, 294, 428, 1011, 293, 291, 722], "temperature": 0.0, "avg_logprob": -0.20018315538067685, "compression_ratio": 1.6029411764705883, "no_speech_prob": 2.332058784304536e-06}, {"id": 421, "seek": 199514, "start": 2000.42, "end": 2006.18, "text": " banging the drum or hitting the xylophone and it's not until years later that you learn about the circle of fifths and", "tokens": [36982, 264, 10206, 420, 8850, 264, 2031, 5088, 32561, 293, 309, 311, 406, 1826, 924, 1780, 300, 291, 1466, 466, 264, 6329, 295, 9266, 82, 293], "temperature": 0.0, "avg_logprob": -0.20018315538067685, "compression_ratio": 1.6029411764705883, "no_speech_prob": 2.332058784304536e-06}, {"id": 422, "seek": 199514, "start": 2006.5, "end": 2009.2, "text": " Understand how to construct a cadence for example", "tokens": [26093, 577, 281, 7690, 257, 46109, 337, 1365], "temperature": 0.0, "avg_logprob": -0.20018315538067685, "compression_ratio": 1.6029411764705883, "no_speech_prob": 2.332058784304536e-06}, {"id": 423, "seek": 199514, "start": 2010.46, "end": 2014.22, "text": " So yeah, so that's this is kind of the approach. We're using it's very inspired by", "tokens": [407, 1338, 11, 370, 300, 311, 341, 307, 733, 295, 264, 3109, 13, 492, 434, 1228, 309, 311, 588, 7547, 538], "temperature": 0.0, "avg_logprob": -0.20018315538067685, "compression_ratio": 1.6029411764705883, "no_speech_prob": 2.332058784304536e-06}, {"id": 424, "seek": 199514, "start": 2014.8600000000001, "end": 2017.7, "text": " David Perkins and other writers of education", "tokens": [4389, 3026, 10277, 293, 661, 13491, 295, 3309], "temperature": 0.0, "avg_logprob": -0.20018315538067685, "compression_ratio": 1.6029411764705883, "no_speech_prob": 2.332058784304536e-06}, {"id": 425, "seek": 199514, "start": 2018.7, "end": 2023.5, "text": " So what that does mean is to take advantage of this as we peel back the layers", "tokens": [407, 437, 300, 775, 914, 307, 281, 747, 5002, 295, 341, 382, 321, 13889, 646, 264, 7914], "temperature": 0.0, "avg_logprob": -0.20018315538067685, "compression_ratio": 1.6029411764705883, "no_speech_prob": 2.332058784304536e-06}, {"id": 426, "seek": 202350, "start": 2023.5, "end": 2029.42, "text": " We want you to keep like looking under the hood yourself as well like experiment a lot", "tokens": [492, 528, 291, 281, 1066, 411, 1237, 833, 264, 13376, 1803, 382, 731, 411, 5120, 257, 688], "temperature": 0.0, "avg_logprob": -0.18310955873469717, "compression_ratio": 1.7842323651452283, "no_speech_prob": 1.3925420034865965e-06}, {"id": 427, "seek": 202350, "start": 2029.7, "end": 2032.82, "text": " Because this is a very code driven approach", "tokens": [1436, 341, 307, 257, 588, 3089, 9555, 3109], "temperature": 0.0, "avg_logprob": -0.18310955873469717, "compression_ratio": 1.7842323651452283, "no_speech_prob": 1.3925420034865965e-06}, {"id": 428, "seek": 202350, "start": 2033.42, "end": 2037.34, "text": " So here's basically what happens right we start out looking today at", "tokens": [407, 510, 311, 1936, 437, 2314, 558, 321, 722, 484, 1237, 965, 412], "temperature": 0.0, "avg_logprob": -0.18310955873469717, "compression_ratio": 1.7842323651452283, "no_speech_prob": 1.3925420034865965e-06}, {"id": 429, "seek": 202350, "start": 2038.02, "end": 2042.06, "text": " convolutional neural networks for images and then in a couple of lessons", "tokens": [45216, 304, 18161, 9590, 337, 5267, 293, 550, 294, 257, 1916, 295, 8820], "temperature": 0.0, "avg_logprob": -0.18310955873469717, "compression_ratio": 1.7842323651452283, "no_speech_prob": 1.3925420034865965e-06}, {"id": 430, "seek": 202350, "start": 2042.06, "end": 2048.06, "text": " we'll start to look at how to use neural nets to look at structured data and then to look at language data and", "tokens": [321, 603, 722, 281, 574, 412, 577, 281, 764, 18161, 36170, 281, 574, 412, 18519, 1412, 293, 550, 281, 574, 412, 2856, 1412, 293], "temperature": 0.0, "avg_logprob": -0.18310955873469717, "compression_ratio": 1.7842323651452283, "no_speech_prob": 1.3925420034865965e-06}, {"id": 431, "seek": 202350, "start": 2048.22, "end": 2051.06, "text": " then to look at recommendation system data and", "tokens": [550, 281, 574, 412, 11879, 1185, 1412, 293], "temperature": 0.0, "avg_logprob": -0.18310955873469717, "compression_ratio": 1.7842323651452283, "no_speech_prob": 1.3925420034865965e-06}, {"id": 432, "seek": 205106, "start": 2051.06, "end": 2058.1, "text": " Then we kind of then take all of those steps, and we go backwards through them in reverse order", "tokens": [1396, 321, 733, 295, 550, 747, 439, 295, 729, 4439, 11, 293, 321, 352, 12204, 807, 552, 294, 9943, 1668], "temperature": 0.0, "avg_logprob": -0.18305345229160638, "compression_ratio": 1.7487179487179487, "no_speech_prob": 4.029422143503325e-06}, {"id": 433, "seek": 205106, "start": 2058.1, "end": 2062.14, "text": " So now you know by the end of that fourth piece you will know", "tokens": [407, 586, 291, 458, 538, 264, 917, 295, 300, 6409, 2522, 291, 486, 458], "temperature": 0.0, "avg_logprob": -0.18305345229160638, "compression_ratio": 1.7487179487179487, "no_speech_prob": 4.029422143503325e-06}, {"id": 434, "seek": 205106, "start": 2063.5, "end": 2069.2599999999998, "text": " By the end of lesson four how to create a world-class image classifier a world-class", "tokens": [3146, 264, 917, 295, 6898, 1451, 577, 281, 1884, 257, 1002, 12, 11665, 3256, 1508, 9902, 257, 1002, 12, 11665], "temperature": 0.0, "avg_logprob": -0.18305345229160638, "compression_ratio": 1.7487179487179487, "no_speech_prob": 4.029422143503325e-06}, {"id": 435, "seek": 205106, "start": 2070.22, "end": 2072.22, "text": " structured data analysis program", "tokens": [18519, 1412, 5215, 1461], "temperature": 0.0, "avg_logprob": -0.18305345229160638, "compression_ratio": 1.7487179487179487, "no_speech_prob": 4.029422143503325e-06}, {"id": 436, "seek": 205106, "start": 2072.86, "end": 2076.68, "text": " world-class language classifier world-class recommendation system", "tokens": [1002, 12, 11665, 2856, 1508, 9902, 1002, 12, 11665, 11879, 1185], "temperature": 0.0, "avg_logprob": -0.18305345229160638, "compression_ratio": 1.7487179487179487, "no_speech_prob": 4.029422143503325e-06}, {"id": 437, "seek": 207668, "start": 2076.68, "end": 2081.2799999999997, "text": " And then we're going to go back over all of them again and learn in depth about like well", "tokens": [400, 550, 321, 434, 516, 281, 352, 646, 670, 439, 295, 552, 797, 293, 1466, 294, 7161, 466, 411, 731], "temperature": 0.0, "avg_logprob": -0.1922022995439548, "compression_ratio": 1.6666666666666667, "no_speech_prob": 4.2470202288313885e-07}, {"id": 438, "seek": 207668, "start": 2081.2799999999997, "end": 2086.8799999999997, "text": " What exactly did it do and how did it work and how do we change things around and use in different situations?", "tokens": [708, 2293, 630, 309, 360, 293, 577, 630, 309, 589, 293, 577, 360, 321, 1319, 721, 926, 293, 764, 294, 819, 6851, 30], "temperature": 0.0, "avg_logprob": -0.1922022995439548, "compression_ratio": 1.6666666666666667, "no_speech_prob": 4.2470202288313885e-07}, {"id": 439, "seek": 207668, "start": 2087.48, "end": 2091.0, "text": " For for the recommendation systems structured data", "tokens": [1171, 337, 264, 11879, 3652, 18519, 1412], "temperature": 0.0, "avg_logprob": -0.1922022995439548, "compression_ratio": 1.6666666666666667, "no_speech_prob": 4.2470202288313885e-07}, {"id": 440, "seek": 207668, "start": 2091.7599999999998, "end": 2096.96, "text": " Images and then finally back to language, so that's how it's going to work so", "tokens": [4331, 1660, 293, 550, 2721, 646, 281, 2856, 11, 370, 300, 311, 577, 309, 311, 516, 281, 589, 370], "temperature": 0.0, "avg_logprob": -0.1922022995439548, "compression_ratio": 1.6666666666666667, "no_speech_prob": 4.2470202288313885e-07}, {"id": 441, "seek": 207668, "start": 2097.48, "end": 2104.08, "text": " What that kind of means is that most students find that they tend to watch the videos two or three times?", "tokens": [708, 300, 733, 295, 1355, 307, 300, 881, 1731, 915, 300, 436, 3928, 281, 1159, 264, 2145, 732, 420, 1045, 1413, 30], "temperature": 0.0, "avg_logprob": -0.1922022995439548, "compression_ratio": 1.6666666666666667, "no_speech_prob": 4.2470202288313885e-07}, {"id": 442, "seek": 210408, "start": 2104.08, "end": 2106.08, "text": " but not", "tokens": [457, 406], "temperature": 0.0, "avg_logprob": -0.17026681445893788, "compression_ratio": 1.8487394957983194, "no_speech_prob": 3.5763525829679566e-07}, {"id": 443, "seek": 210408, "start": 2106.08, "end": 2107.08, "text": " like", "tokens": [411], "temperature": 0.0, "avg_logprob": -0.17026681445893788, "compression_ratio": 1.8487394957983194, "no_speech_prob": 3.5763525829679566e-07}, {"id": 444, "seek": 210408, "start": 2107.08, "end": 2111.2799999999997, "text": " Watch lesson one two or three times and lesson two two or three times and listen three three times", "tokens": [7277, 6898, 472, 732, 420, 1045, 1413, 293, 6898, 732, 732, 420, 1045, 1413, 293, 2140, 1045, 1045, 1413], "temperature": 0.0, "avg_logprob": -0.17026681445893788, "compression_ratio": 1.8487394957983194, "no_speech_prob": 3.5763525829679566e-07}, {"id": 445, "seek": 210408, "start": 2111.2799999999997, "end": 2118.3199999999997, "text": " But like they do the whole thing into end lessons one through seven and then go back and start lesson one again", "tokens": [583, 411, 436, 360, 264, 1379, 551, 666, 917, 8820, 472, 807, 3407, 293, 550, 352, 646, 293, 722, 6898, 472, 797], "temperature": 0.0, "avg_logprob": -0.17026681445893788, "compression_ratio": 1.8487394957983194, "no_speech_prob": 3.5763525829679566e-07}, {"id": 446, "seek": 210408, "start": 2119.44, "end": 2123.7599999999998, "text": " That's an approach which a lot of people find when they want to kind of go back and understand all the details", "tokens": [663, 311, 364, 3109, 597, 257, 688, 295, 561, 915, 562, 436, 528, 281, 733, 295, 352, 646, 293, 1223, 439, 264, 4365], "temperature": 0.0, "avg_logprob": -0.17026681445893788, "compression_ratio": 1.8487394957983194, "no_speech_prob": 3.5763525829679566e-07}, {"id": 447, "seek": 210408, "start": 2123.88, "end": 2130.2599999999998, "text": " That off that can work pretty well, so I would say you know aim to get through to the end of lesson seven", "tokens": [663, 766, 300, 393, 589, 1238, 731, 11, 370, 286, 576, 584, 291, 458, 5939, 281, 483, 807, 281, 264, 917, 295, 6898, 3407], "temperature": 0.0, "avg_logprob": -0.17026681445893788, "compression_ratio": 1.8487394957983194, "no_speech_prob": 3.5763525829679566e-07}, {"id": 448, "seek": 213026, "start": 2130.26, "end": 2139.0600000000004, "text": " You know as as quickly as you can rather than aiming to fully understand every detail from the start", "tokens": [509, 458, 382, 382, 2661, 382, 291, 393, 2831, 813, 20253, 281, 4498, 1223, 633, 2607, 490, 264, 722], "temperature": 0.0, "avg_logprob": -0.16894067363974488, "compression_ratio": 1.6451612903225807, "no_speech_prob": 2.295905915161711e-06}, {"id": 449, "seek": 213026, "start": 2141.5, "end": 2146.78, "text": " So basically the plan is that in today's lesson you learn", "tokens": [407, 1936, 264, 1393, 307, 300, 294, 965, 311, 6898, 291, 1466], "temperature": 0.0, "avg_logprob": -0.16894067363974488, "compression_ratio": 1.6451612903225807, "no_speech_prob": 2.295905915161711e-06}, {"id": 450, "seek": 213026, "start": 2147.78, "end": 2152.2400000000002, "text": " In as few lines as code as possible with as few details as possible", "tokens": [682, 382, 1326, 3876, 382, 3089, 382, 1944, 365, 382, 1326, 4365, 382, 1944], "temperature": 0.0, "avg_logprob": -0.16894067363974488, "compression_ratio": 1.6451612903225807, "no_speech_prob": 2.295905915161711e-06}, {"id": 451, "seek": 215224, "start": 2152.24, "end": 2160.1, "text": " How do you actually build an image classifier with deep learning to do this to in this case say hey here are some pictures of dogs as", "tokens": [1012, 360, 291, 767, 1322, 364, 3256, 1508, 9902, 365, 2452, 2539, 281, 360, 341, 281, 294, 341, 1389, 584, 4177, 510, 366, 512, 5242, 295, 7197, 382], "temperature": 0.0, "avg_logprob": -0.12275676899128132, "compression_ratio": 1.849802371541502, "no_speech_prob": 8.800992873148061e-06}, {"id": 452, "seek": 215224, "start": 2160.18, "end": 2162.18, "text": " opposed to pictures of cats", "tokens": [8851, 281, 5242, 295, 11111], "temperature": 0.0, "avg_logprob": -0.12275676899128132, "compression_ratio": 1.849802371541502, "no_speech_prob": 8.800992873148061e-06}, {"id": 453, "seek": 215224, "start": 2163.18, "end": 2165.18, "text": " Then we're going to learn", "tokens": [1396, 321, 434, 516, 281, 1466], "temperature": 0.0, "avg_logprob": -0.12275676899128132, "compression_ratio": 1.849802371541502, "no_speech_prob": 8.800992873148061e-06}, {"id": 454, "seek": 215224, "start": 2165.8199999999997, "end": 2171.8799999999997, "text": " How to look at different kinds of images and particularly we're going to look at images of from satellites", "tokens": [1012, 281, 574, 412, 819, 3685, 295, 5267, 293, 4098, 321, 434, 516, 281, 574, 412, 5267, 295, 490, 24960], "temperature": 0.0, "avg_logprob": -0.12275676899128132, "compression_ratio": 1.849802371541502, "no_speech_prob": 8.800992873148061e-06}, {"id": 455, "seek": 215224, "start": 2171.9799999999996, "end": 2173.9799999999996, "text": " And we're going to say for a satellite image", "tokens": [400, 321, 434, 516, 281, 584, 337, 257, 16016, 3256], "temperature": 0.0, "avg_logprob": -0.12275676899128132, "compression_ratio": 1.849802371541502, "no_speech_prob": 8.800992873148061e-06}, {"id": 456, "seek": 215224, "start": 2174.4199999999996, "end": 2181.06, "text": " What kinds of things might you be seeing in that image and there could be multiple things that we're looking at so a multi-label", "tokens": [708, 3685, 295, 721, 1062, 291, 312, 2577, 294, 300, 3256, 293, 456, 727, 312, 3866, 721, 300, 321, 434, 1237, 412, 370, 257, 4825, 12, 75, 18657], "temperature": 0.0, "avg_logprob": -0.12275676899128132, "compression_ratio": 1.849802371541502, "no_speech_prob": 8.800992873148061e-06}, {"id": 457, "seek": 218106, "start": 2181.06, "end": 2183.06, "text": " classification problem", "tokens": [21538, 1154], "temperature": 0.0, "avg_logprob": -0.18132860907192888, "compression_ratio": 1.6782608695652175, "no_speech_prob": 3.668822273539263e-06}, {"id": 458, "seek": 218106, "start": 2183.42, "end": 2186.7799999999997, "text": " From there we'll move to something which is perhaps the most", "tokens": [3358, 456, 321, 603, 1286, 281, 746, 597, 307, 4317, 264, 881], "temperature": 0.0, "avg_logprob": -0.18132860907192888, "compression_ratio": 1.6782608695652175, "no_speech_prob": 3.668822273539263e-06}, {"id": 459, "seek": 218106, "start": 2187.58, "end": 2192.2999999999997, "text": " Widely applicable for the most people which is looking at what we call structured data", "tokens": [28331, 736, 21142, 337, 264, 881, 561, 597, 307, 1237, 412, 437, 321, 818, 18519, 1412], "temperature": 0.0, "avg_logprob": -0.18132860907192888, "compression_ratio": 1.6782608695652175, "no_speech_prob": 3.668822273539263e-06}, {"id": 460, "seek": 218106, "start": 2193.1, "end": 2195.1, "text": " so data about", "tokens": [370, 1412, 466], "temperature": 0.0, "avg_logprob": -0.18132860907192888, "compression_ratio": 1.6782608695652175, "no_speech_prob": 3.668822273539263e-06}, {"id": 461, "seek": 218106, "start": 2195.38, "end": 2197.38, "text": " Data that kind of comes from", "tokens": [11888, 300, 733, 295, 1487, 490], "temperature": 0.0, "avg_logprob": -0.18132860907192888, "compression_ratio": 1.6782608695652175, "no_speech_prob": 3.668822273539263e-06}, {"id": 462, "seek": 218106, "start": 2198.34, "end": 2203.1, "text": " Databases or spreadsheets so we're going to specifically look at this data set of predicting sales", "tokens": [40461, 1957, 420, 23651, 1385, 370, 321, 434, 516, 281, 4682, 574, 412, 341, 1412, 992, 295, 32884, 5763], "temperature": 0.0, "avg_logprob": -0.18132860907192888, "compression_ratio": 1.6782608695652175, "no_speech_prob": 3.668822273539263e-06}, {"id": 463, "seek": 218106, "start": 2203.62, "end": 2208.2999999999997, "text": " The number of things that are sold at different stores on different dates", "tokens": [440, 1230, 295, 721, 300, 366, 3718, 412, 819, 9512, 322, 819, 11691], "temperature": 0.0, "avg_logprob": -0.18132860907192888, "compression_ratio": 1.6782608695652175, "no_speech_prob": 3.668822273539263e-06}, {"id": 464, "seek": 220830, "start": 2208.3, "end": 2214.6600000000003, "text": " Based on different holidays and and so on and so forth and so we're going to be doing this sales forecasting", "tokens": [18785, 322, 819, 15734, 293, 293, 370, 322, 293, 370, 5220, 293, 370, 321, 434, 516, 281, 312, 884, 341, 5763, 44331], "temperature": 0.0, "avg_logprob": -0.1749448602849787, "compression_ratio": 1.8677685950413223, "no_speech_prob": 1.7603314290681737e-06}, {"id": 465, "seek": 220830, "start": 2215.1000000000004, "end": 2216.54, "text": " exercise", "tokens": [5380], "temperature": 0.0, "avg_logprob": -0.1749448602849787, "compression_ratio": 1.8677685950413223, "no_speech_prob": 1.7603314290681737e-06}, {"id": 466, "seek": 220830, "start": 2216.54, "end": 2220.6200000000003, "text": " After that we're going to look at language, and we're going to figure out", "tokens": [2381, 300, 321, 434, 516, 281, 574, 412, 2856, 11, 293, 321, 434, 516, 281, 2573, 484], "temperature": 0.0, "avg_logprob": -0.1749448602849787, "compression_ratio": 1.8677685950413223, "no_speech_prob": 1.7603314290681737e-06}, {"id": 467, "seek": 220830, "start": 2221.42, "end": 2223.1000000000004, "text": " What this person?", "tokens": [708, 341, 954, 30], "temperature": 0.0, "avg_logprob": -0.1749448602849787, "compression_ratio": 1.8677685950413223, "no_speech_prob": 1.7603314290681737e-06}, {"id": 468, "seek": 220830, "start": 2223.1000000000004, "end": 2229.1000000000004, "text": " Thinks about the movie zombie Gettin and we'll be able to figure out how to create just like we create image", "tokens": [6557, 82, 466, 264, 3169, 20310, 460, 3093, 259, 293, 321, 603, 312, 1075, 281, 2573, 484, 577, 281, 1884, 445, 411, 321, 1884, 3256], "temperature": 0.0, "avg_logprob": -0.1749448602849787, "compression_ratio": 1.8677685950413223, "no_speech_prob": 1.7603314290681737e-06}, {"id": 469, "seek": 222910, "start": 2229.1, "end": 2238.66, "text": " Classifiers for any kind of image will learn to create in NLP classifiers to classify any kind of language in lots of different ways", "tokens": [9471, 23463, 337, 604, 733, 295, 3256, 486, 1466, 281, 1884, 294, 426, 45196, 1508, 23463, 281, 33872, 604, 733, 295, 2856, 294, 3195, 295, 819, 2098], "temperature": 0.0, "avg_logprob": -0.11977329604122616, "compression_ratio": 1.8690909090909091, "no_speech_prob": 1.9947167402278865e-06}, {"id": 470, "seek": 222910, "start": 2239.06, "end": 2243.86, "text": " Then we'll look at something called collaborative filtering which is used mainly for recommendation systems", "tokens": [1396, 321, 603, 574, 412, 746, 1219, 16555, 30822, 597, 307, 1143, 8704, 337, 11879, 3652], "temperature": 0.0, "avg_logprob": -0.11977329604122616, "compression_ratio": 1.8690909090909091, "no_speech_prob": 1.9947167402278865e-06}, {"id": 471, "seek": 222910, "start": 2244.3399999999997, "end": 2248.62, "text": " We're going to be looking at this data set that showed for different people for different movies", "tokens": [492, 434, 516, 281, 312, 1237, 412, 341, 1412, 992, 300, 4712, 337, 819, 561, 337, 819, 6233], "temperature": 0.0, "avg_logprob": -0.11977329604122616, "compression_ratio": 1.8690909090909091, "no_speech_prob": 1.9947167402278865e-06}, {"id": 472, "seek": 222910, "start": 2248.74, "end": 2252.7799999999997, "text": " What rating did they give it here are some of the movies and so?", "tokens": [708, 10990, 630, 436, 976, 309, 510, 366, 512, 295, 264, 6233, 293, 370, 30], "temperature": 0.0, "avg_logprob": -0.11977329604122616, "compression_ratio": 1.8690909090909091, "no_speech_prob": 1.9947167402278865e-06}, {"id": 473, "seek": 225278, "start": 2252.78, "end": 2260.1000000000004, "text": " This is maybe an easier way to think about it is there are lots of different users and lots of different movies and then for each", "tokens": [639, 307, 1310, 364, 3571, 636, 281, 519, 466, 309, 307, 456, 366, 3195, 295, 819, 5022, 293, 3195, 295, 819, 6233, 293, 550, 337, 1184], "temperature": 0.0, "avg_logprob": -0.15608337245036646, "compression_ratio": 1.7317073170731707, "no_speech_prob": 1.2482634019761463e-06}, {"id": 474, "seek": 225278, "start": 2260.1000000000004, "end": 2266.6400000000003, "text": " One we can look up for each user how much they like that movie and the goal will be of course to predict for user", "tokens": [1485, 321, 393, 574, 493, 337, 1184, 4195, 577, 709, 436, 411, 300, 3169, 293, 264, 3387, 486, 312, 295, 1164, 281, 6069, 337, 4195], "temperature": 0.0, "avg_logprob": -0.15608337245036646, "compression_ratio": 1.7317073170731707, "no_speech_prob": 1.2482634019761463e-06}, {"id": 475, "seek": 225278, "start": 2266.7400000000002, "end": 2271.6200000000003, "text": " Movie combinations we haven't seen before are they likely to enjoy that movie or not?", "tokens": [28766, 21267, 321, 2378, 380, 1612, 949, 366, 436, 3700, 281, 2103, 300, 3169, 420, 406, 30], "temperature": 0.0, "avg_logprob": -0.15608337245036646, "compression_ratio": 1.7317073170731707, "no_speech_prob": 1.2482634019761463e-06}, {"id": 476, "seek": 225278, "start": 2271.98, "end": 2277.6600000000003, "text": " And that's the really common approach used for like deciding what stuff to put on your home page", "tokens": [400, 300, 311, 264, 534, 2689, 3109, 1143, 337, 411, 17990, 437, 1507, 281, 829, 322, 428, 1280, 3028], "temperature": 0.0, "avg_logprob": -0.15608337245036646, "compression_ratio": 1.7317073170731707, "no_speech_prob": 1.2482634019761463e-06}, {"id": 477, "seek": 227766, "start": 2277.66, "end": 2283.8999999999996, "text": " When somebody's visiting you know what book might they want to read or what what film might they want to see or so forth?", "tokens": [1133, 2618, 311, 11700, 291, 458, 437, 1446, 1062, 436, 528, 281, 1401, 420, 437, 437, 2007, 1062, 436, 528, 281, 536, 420, 370, 5220, 30], "temperature": 0.0, "avg_logprob": -0.19207566244560376, "compression_ratio": 1.77007299270073, "no_speech_prob": 4.936945970257511e-06}, {"id": 478, "seek": 227766, "start": 2285.8599999999997, "end": 2291.14, "text": " From there we're going to then dig back into language a bit more and we're going to look at", "tokens": [3358, 456, 321, 434, 516, 281, 550, 2528, 646, 666, 2856, 257, 857, 544, 293, 321, 434, 516, 281, 574, 412], "temperature": 0.0, "avg_logprob": -0.19207566244560376, "compression_ratio": 1.77007299270073, "no_speech_prob": 4.936945970257511e-06}, {"id": 479, "seek": 227766, "start": 2292.1, "end": 2297.18, "text": " Actually, we're going to look at the writings of Nietzsche the philosopher and learn how to create our own", "tokens": [5135, 11, 321, 434, 516, 281, 574, 412, 264, 30083, 295, 36583, 89, 12287, 264, 29805, 293, 1466, 577, 281, 1884, 527, 1065], "temperature": 0.0, "avg_logprob": -0.19207566244560376, "compression_ratio": 1.77007299270073, "no_speech_prob": 4.936945970257511e-06}, {"id": 480, "seek": 227766, "start": 2297.7, "end": 2299.7999999999997, "text": " Nietzsche philosophy from scratch", "tokens": [36583, 89, 12287, 10675, 490, 8459], "temperature": 0.0, "avg_logprob": -0.19207566244560376, "compression_ratio": 1.77007299270073, "no_speech_prob": 4.936945970257511e-06}, {"id": 481, "seek": 227766, "start": 2300.22, "end": 2307.02, "text": " Character by character so this here perhaps that every life of values of blood of intercourse when it senses there is unscrupulous", "tokens": [36786, 538, 2517, 370, 341, 510, 4317, 300, 633, 993, 295, 4190, 295, 3390, 295, 728, 31913, 562, 309, 17057, 456, 307, 2693, 66, 11976, 6893], "temperature": 0.0, "avg_logprob": -0.19207566244560376, "compression_ratio": 1.77007299270073, "no_speech_prob": 4.936945970257511e-06}, {"id": 482, "seek": 230702, "start": 2307.02, "end": 2311.06, "text": " His very rights and still impulse love is not actually Nietzsche", "tokens": [2812, 588, 4601, 293, 920, 26857, 959, 307, 406, 767, 36583, 89, 12287], "temperature": 0.0, "avg_logprob": -0.16632816838283165, "compression_ratio": 1.7215686274509805, "no_speech_prob": 1.0511473647056846e-06}, {"id": 483, "seek": 230702, "start": 2311.78, "end": 2319.16, "text": " That's actually like some character by character generated text that we built with this recurrent neural network", "tokens": [663, 311, 767, 411, 512, 2517, 538, 2517, 10833, 2487, 300, 321, 3094, 365, 341, 18680, 1753, 18161, 3209], "temperature": 0.0, "avg_logprob": -0.16632816838283165, "compression_ratio": 1.7215686274509805, "no_speech_prob": 1.0511473647056846e-06}, {"id": 484, "seek": 230702, "start": 2321.3, "end": 2324.7, "text": " And then finally we're going to loop all the way back to computer vision again", "tokens": [400, 550, 2721, 321, 434, 516, 281, 6367, 439, 264, 636, 646, 281, 3820, 5201, 797], "temperature": 0.0, "avg_logprob": -0.16632816838283165, "compression_ratio": 1.7215686274509805, "no_speech_prob": 1.0511473647056846e-06}, {"id": 485, "seek": 230702, "start": 2325.22, "end": 2328.44, "text": " We're going to learn how not just to recognize cats from dogs", "tokens": [492, 434, 516, 281, 1466, 577, 406, 445, 281, 5521, 11111, 490, 7197], "temperature": 0.0, "avg_logprob": -0.16632816838283165, "compression_ratio": 1.7215686274509805, "no_speech_prob": 1.0511473647056846e-06}, {"id": 486, "seek": 230702, "start": 2328.5, "end": 2332.14, "text": " But to actually find like where the cat is with this kind of heat map", "tokens": [583, 281, 767, 915, 411, 689, 264, 3857, 307, 365, 341, 733, 295, 3738, 4471], "temperature": 0.0, "avg_logprob": -0.16632816838283165, "compression_ratio": 1.7215686274509805, "no_speech_prob": 1.0511473647056846e-06}, {"id": 487, "seek": 230702, "start": 2332.58, "end": 2335.38, "text": " And we're also going to learn how to write our own", "tokens": [400, 321, 434, 611, 516, 281, 1466, 577, 281, 2464, 527, 1065], "temperature": 0.0, "avg_logprob": -0.16632816838283165, "compression_ratio": 1.7215686274509805, "no_speech_prob": 1.0511473647056846e-06}, {"id": 488, "seek": 233538, "start": 2335.38, "end": 2341.28, "text": " architectures from scratch now so this is an example of a resnet which is the kind of network that we", "tokens": [6331, 1303, 490, 8459, 586, 370, 341, 307, 364, 1365, 295, 257, 725, 7129, 597, 307, 264, 733, 295, 3209, 300, 321], "temperature": 0.0, "avg_logprob": -0.17567960739135743, "compression_ratio": 1.736, "no_speech_prob": 4.637829533749027e-06}, {"id": 489, "seek": 233538, "start": 2342.1, "end": 2344.7000000000003, "text": " Using in today's lesson for computer vision", "tokens": [11142, 294, 965, 311, 6898, 337, 3820, 5201], "temperature": 0.0, "avg_logprob": -0.17567960739135743, "compression_ratio": 1.736, "no_speech_prob": 4.637829533749027e-06}, {"id": 490, "seek": 233538, "start": 2344.7000000000003, "end": 2349.9, "text": " And so we'll actually end up building the network and the training loop from scratch", "tokens": [400, 370, 321, 603, 767, 917, 493, 2390, 264, 3209, 293, 264, 3097, 6367, 490, 8459], "temperature": 0.0, "avg_logprob": -0.17567960739135743, "compression_ratio": 1.736, "no_speech_prob": 4.637829533749027e-06}, {"id": 491, "seek": 233538, "start": 2349.9, "end": 2356.2200000000003, "text": " And so they're basically the the steps that we're going to be taking from here and at each step. We're going to be getting into", "tokens": [400, 370, 436, 434, 1936, 264, 264, 4439, 300, 321, 434, 516, 281, 312, 1940, 490, 510, 293, 412, 1184, 1823, 13, 492, 434, 516, 281, 312, 1242, 666], "temperature": 0.0, "avg_logprob": -0.17567960739135743, "compression_ratio": 1.736, "no_speech_prob": 4.637829533749027e-06}, {"id": 492, "seek": 233538, "start": 2357.3, "end": 2361.34, "text": " Increasing amounts of detail about how to actually do these things yourself", "tokens": [30367, 3349, 11663, 295, 2607, 466, 577, 281, 767, 360, 613, 721, 1803], "temperature": 0.0, "avg_logprob": -0.17567960739135743, "compression_ratio": 1.736, "no_speech_prob": 4.637829533749027e-06}, {"id": 493, "seek": 236134, "start": 2361.34, "end": 2363.34, "text": " So", "tokens": [407], "temperature": 0.0, "avg_logprob": -0.20016555509705475, "compression_ratio": 1.5856353591160222, "no_speech_prob": 1.1365585805833689e-06}, {"id": 494, "seek": 236134, "start": 2364.78, "end": 2370.02, "text": " We've actually heard back from our students of past courses about what they found and", "tokens": [492, 600, 767, 2198, 646, 490, 527, 1731, 295, 1791, 7712, 466, 437, 436, 1352, 293], "temperature": 0.0, "avg_logprob": -0.20016555509705475, "compression_ratio": 1.5856353591160222, "no_speech_prob": 1.1365585805833689e-06}, {"id": 495, "seek": 236134, "start": 2371.06, "end": 2379.2200000000003, "text": " one of the things that we've heard a lot of students say is that they spend too much time on theory and", "tokens": [472, 295, 264, 721, 300, 321, 600, 2198, 257, 688, 295, 1731, 584, 307, 300, 436, 3496, 886, 709, 565, 322, 5261, 293], "temperature": 0.0, "avg_logprob": -0.20016555509705475, "compression_ratio": 1.5856353591160222, "no_speech_prob": 1.1365585805833689e-06}, {"id": 496, "seek": 236134, "start": 2379.9, "end": 2381.1000000000004, "text": " research", "tokens": [2132], "temperature": 0.0, "avg_logprob": -0.20016555509705475, "compression_ratio": 1.5856353591160222, "no_speech_prob": 1.1365585805833689e-06}, {"id": 497, "seek": 236134, "start": 2381.1000000000004, "end": 2387.08, "text": " And not enough time running the code and even after we tell people about this morning", "tokens": [400, 406, 1547, 565, 2614, 264, 3089, 293, 754, 934, 321, 980, 561, 466, 341, 2446], "temperature": 0.0, "avg_logprob": -0.20016555509705475, "compression_ratio": 1.5856353591160222, "no_speech_prob": 1.1365585805833689e-06}, {"id": 498, "seek": 238708, "start": 2387.08, "end": 2391.12, "text": " Would they still come to the end of the course and often say I wish I had taken more", "tokens": [6068, 436, 920, 808, 281, 264, 917, 295, 264, 1164, 293, 2049, 584, 286, 3172, 286, 632, 2726, 544], "temperature": 0.0, "avg_logprob": -0.16636972892575147, "compression_ratio": 1.5925925925925926, "no_speech_prob": 1.7061778407878592e-06}, {"id": 499, "seek": 238708, "start": 2392.2, "end": 2395.12, "text": " Seriously that advice which is to keep running code", "tokens": [14063, 300, 5192, 597, 307, 281, 1066, 2614, 3089], "temperature": 0.0, "avg_logprob": -0.16636972892575147, "compression_ratio": 1.5925925925925926, "no_speech_prob": 1.7061778407878592e-06}, {"id": 500, "seek": 238708, "start": 2395.68, "end": 2403.84, "text": " So these are actual quotes from our forum in retrospect. I should have spent the majority of my time on the actual code and the notebooks", "tokens": [407, 613, 366, 3539, 19963, 490, 527, 17542, 294, 34997, 13, 286, 820, 362, 4418, 264, 6286, 295, 452, 565, 322, 264, 3539, 3089, 293, 264, 43782], "temperature": 0.0, "avg_logprob": -0.16636972892575147, "compression_ratio": 1.5925925925925926, "no_speech_prob": 1.7061778407878592e-06}, {"id": 501, "seek": 238708, "start": 2405.44, "end": 2407.7599999999998, "text": " See what goes in see what comes out", "tokens": [3008, 437, 1709, 294, 536, 437, 1487, 484], "temperature": 0.0, "avg_logprob": -0.16636972892575147, "compression_ratio": 1.5925925925925926, "no_speech_prob": 1.7061778407878592e-06}, {"id": 502, "seek": 238708, "start": 2410.44, "end": 2414.16, "text": " Now this idea that you can create", "tokens": [823, 341, 1558, 300, 291, 393, 1884], "temperature": 0.0, "avg_logprob": -0.16636972892575147, "compression_ratio": 1.5925925925925926, "no_speech_prob": 1.7061778407878592e-06}, {"id": 503, "seek": 241416, "start": 2414.16, "end": 2419.54, "text": " World-class models in a code first approach learning what you need as you go", "tokens": [3937, 12, 11665, 5245, 294, 257, 3089, 700, 3109, 2539, 437, 291, 643, 382, 291, 352], "temperature": 0.0, "avg_logprob": -0.21786751217312283, "compression_ratio": 1.572, "no_speech_prob": 5.093638719699811e-06}, {"id": 504, "seek": 241416, "start": 2419.56, "end": 2423.64, "text": " It's very different to a lot of the advice you'll read out there such as this", "tokens": [467, 311, 588, 819, 281, 257, 688, 295, 264, 5192, 291, 603, 1401, 484, 456, 1270, 382, 341], "temperature": 0.0, "avg_logprob": -0.21786751217312283, "compression_ratio": 1.572, "no_speech_prob": 5.093638719699811e-06}, {"id": 505, "seek": 241416, "start": 2424.92, "end": 2431.8399999999997, "text": " person on the forum hacker news who claimed that the best way to become an ML engineer is to", "tokens": [954, 322, 264, 17542, 38155, 2583, 567, 12941, 300, 264, 1151, 636, 281, 1813, 364, 21601, 11403, 307, 281], "temperature": 0.0, "avg_logprob": -0.21786751217312283, "compression_ratio": 1.572, "no_speech_prob": 5.093638719699811e-06}, {"id": 506, "seek": 241416, "start": 2432.12, "end": 2435.92, "text": " Learn all of math learn C and C++", "tokens": [17216, 439, 295, 5221, 1466, 383, 293, 383, 25472], "temperature": 0.0, "avg_logprob": -0.21786751217312283, "compression_ratio": 1.572, "no_speech_prob": 5.093638719699811e-06}, {"id": 507, "seek": 243592, "start": 2435.92, "end": 2443.88, "text": " Learn parallel programming learn ML algorithms implement them yourself using plain C and finally start doing ML", "tokens": [17216, 8952, 9410, 1466, 21601, 14642, 4445, 552, 1803, 1228, 11121, 383, 293, 2721, 722, 884, 21601], "temperature": 0.0, "avg_logprob": -0.1718914582557285, "compression_ratio": 1.5637065637065637, "no_speech_prob": 1.8162020296585979e-06}, {"id": 508, "seek": 243592, "start": 2444.08, "end": 2450.28, "text": " So we would say if you want to become an effective practitioner do exactly the opposite of this", "tokens": [407, 321, 576, 584, 498, 291, 528, 281, 1813, 364, 4942, 32125, 360, 2293, 264, 6182, 295, 341], "temperature": 0.0, "avg_logprob": -0.1718914582557285, "compression_ratio": 1.5637065637065637, "no_speech_prob": 1.8162020296585979e-06}, {"id": 509, "seek": 243592, "start": 2450.92, "end": 2453.92, "text": " Yes, Rachel. Oh, yeah, I was just highlighting that this is", "tokens": [1079, 11, 14246, 13, 876, 11, 1338, 11, 286, 390, 445, 26551, 300, 341, 307], "temperature": 0.0, "avg_logprob": -0.1718914582557285, "compression_ratio": 1.5637065637065637, "no_speech_prob": 1.8162020296585979e-06}, {"id": 510, "seek": 243592, "start": 2454.84, "end": 2459.98, "text": " We think this is bad advice and this can be very discouraging for a lot of people to come across. Yeah", "tokens": [492, 519, 341, 307, 1578, 5192, 293, 341, 393, 312, 588, 21497, 3568, 337, 257, 688, 295, 561, 281, 808, 2108, 13, 865], "temperature": 0.0, "avg_logprob": -0.1718914582557285, "compression_ratio": 1.5637065637065637, "no_speech_prob": 1.8162020296585979e-06}, {"id": 511, "seek": 243592, "start": 2460.12, "end": 2462.32, "text": " Yeah, it's it's it's it's you know", "tokens": [865, 11, 309, 311, 309, 311, 309, 311, 309, 311, 291, 458], "temperature": 0.0, "avg_logprob": -0.1718914582557285, "compression_ratio": 1.5637065637065637, "no_speech_prob": 1.8162020296585979e-06}, {"id": 512, "seek": 246232, "start": 2462.32, "end": 2466.1200000000003, "text": " we now have thousands or tens of thousands of people that have done this course and", "tokens": [321, 586, 362, 5383, 420, 10688, 295, 5383, 295, 561, 300, 362, 1096, 341, 1164, 293], "temperature": 0.0, "avg_logprob": -0.19889102379480997, "compression_ratio": 1.7866666666666666, "no_speech_prob": 4.092886229045689e-06}, {"id": 513, "seek": 246232, "start": 2467.48, "end": 2469.1600000000003, "text": " have", "tokens": [362], "temperature": 0.0, "avg_logprob": -0.19889102379480997, "compression_ratio": 1.7866666666666666, "no_speech_prob": 4.092886229045689e-06}, {"id": 514, "seek": 246232, "start": 2469.1600000000003, "end": 2471.84, "text": " lots and lots of examples of people who are now", "tokens": [3195, 293, 3195, 295, 5110, 295, 561, 567, 366, 586], "temperature": 0.0, "avg_logprob": -0.19889102379480997, "compression_ratio": 1.7866666666666666, "no_speech_prob": 4.092886229045689e-06}, {"id": 515, "seek": 246232, "start": 2472.6800000000003, "end": 2474.6800000000003, "text": " running research labs or", "tokens": [2614, 2132, 20339, 420], "temperature": 0.0, "avg_logprob": -0.19889102379480997, "compression_ratio": 1.7866666666666666, "no_speech_prob": 4.092886229045689e-06}, {"id": 516, "seek": 246232, "start": 2475.2000000000003, "end": 2477.6000000000004, "text": " Google brain residents or you know", "tokens": [3329, 3567, 9630, 420, 291, 458], "temperature": 0.0, "avg_logprob": -0.19889102379480997, "compression_ratio": 1.7866666666666666, "no_speech_prob": 4.092886229045689e-06}, {"id": 517, "seek": 246232, "start": 2478.0800000000004, "end": 2482.88, "text": " Have created patents based on deep learning and so forth who have done it by doing this course", "tokens": [3560, 2942, 38142, 2361, 322, 2452, 2539, 293, 370, 5220, 567, 362, 1096, 309, 538, 884, 341, 1164], "temperature": 0.0, "avg_logprob": -0.19889102379480997, "compression_ratio": 1.7866666666666666, "no_speech_prob": 4.092886229045689e-06}, {"id": 518, "seek": 246232, "start": 2483.44, "end": 2486.4, "text": " So the top-down approach works super well", "tokens": [407, 264, 1192, 12, 5093, 3109, 1985, 1687, 731], "temperature": 0.0, "avg_logprob": -0.19889102379480997, "compression_ratio": 1.7866666666666666, "no_speech_prob": 4.092886229045689e-06}, {"id": 519, "seek": 248640, "start": 2486.4, "end": 2493.6800000000003, "text": " Now one thing to mention is like we've we've now already learned how you can actually train a", "tokens": [823, 472, 551, 281, 2152, 307, 411, 321, 600, 321, 600, 586, 1217, 3264, 577, 291, 393, 767, 3847, 257], "temperature": 0.0, "avg_logprob": -0.16829627919419904, "compression_ratio": 1.7520661157024793, "no_speech_prob": 1.9637900550151244e-06}, {"id": 520, "seek": 248640, "start": 2494.1600000000003, "end": 2497.0, "text": " world-class image classifier in 17 seconds", "tokens": [1002, 12, 11665, 3256, 1508, 9902, 294, 3282, 3949], "temperature": 0.0, "avg_logprob": -0.16829627919419904, "compression_ratio": 1.7520661157024793, "no_speech_prob": 1.9637900550151244e-06}, {"id": 521, "seek": 248640, "start": 2497.0, "end": 2501.6, "text": " I should mention by the way the first time you run that code", "tokens": [286, 820, 2152, 538, 264, 636, 264, 700, 565, 291, 1190, 300, 3089], "temperature": 0.0, "avg_logprob": -0.16829627919419904, "compression_ratio": 1.7520661157024793, "no_speech_prob": 1.9637900550151244e-06}, {"id": 522, "seek": 248640, "start": 2501.96, "end": 2507.4, "text": " There are two things it has to do that take more than 17 seconds one is that it downloads a", "tokens": [821, 366, 732, 721, 309, 575, 281, 360, 300, 747, 544, 813, 3282, 3949, 472, 307, 300, 309, 36553, 257], "temperature": 0.0, "avg_logprob": -0.16829627919419904, "compression_ratio": 1.7520661157024793, "no_speech_prob": 1.9637900550151244e-06}, {"id": 523, "seek": 248640, "start": 2508.1600000000003, "end": 2513.1600000000003, "text": " Pre-trained model from the internet so you'll see the first time you run it. It'll say downloading model", "tokens": [6001, 12, 17227, 2001, 2316, 490, 264, 4705, 370, 291, 603, 536, 264, 700, 565, 291, 1190, 309, 13, 467, 603, 584, 32529, 2316], "temperature": 0.0, "avg_logprob": -0.16829627919419904, "compression_ratio": 1.7520661157024793, "no_speech_prob": 1.9637900550151244e-06}, {"id": 524, "seek": 248640, "start": 2513.84, "end": 2515.84, "text": " So that takes a minute or two", "tokens": [407, 300, 2516, 257, 3456, 420, 732], "temperature": 0.0, "avg_logprob": -0.16829627919419904, "compression_ratio": 1.7520661157024793, "no_speech_prob": 1.9637900550151244e-06}, {"id": 525, "seek": 251584, "start": 2515.84, "end": 2517.36, "text": " also", "tokens": [611], "temperature": 0.0, "avg_logprob": -0.15979089282807848, "compression_ratio": 1.7212389380530972, "no_speech_prob": 2.260313522128854e-06}, {"id": 526, "seek": 251584, "start": 2517.36, "end": 2522.86, "text": " The first time you run it it pre computes and caches some of the intermediate information that it needs", "tokens": [440, 700, 565, 291, 1190, 309, 309, 659, 715, 1819, 293, 269, 13272, 512, 295, 264, 19376, 1589, 300, 309, 2203], "temperature": 0.0, "avg_logprob": -0.15979089282807848, "compression_ratio": 1.7212389380530972, "no_speech_prob": 2.260313522128854e-06}, {"id": 527, "seek": 251584, "start": 2523.44, "end": 2528.6000000000004, "text": " And that takes about a minute and a half as well, so if the first time you run it it takes", "tokens": [400, 300, 2516, 466, 257, 3456, 293, 257, 1922, 382, 731, 11, 370, 498, 264, 700, 565, 291, 1190, 309, 309, 2516], "temperature": 0.0, "avg_logprob": -0.15979089282807848, "compression_ratio": 1.7212389380530972, "no_speech_prob": 2.260313522128854e-06}, {"id": 528, "seek": 251584, "start": 2529.2000000000003, "end": 2530.96, "text": " three or four minutes", "tokens": [1045, 420, 1451, 2077], "temperature": 0.0, "avg_logprob": -0.15979089282807848, "compression_ratio": 1.7212389380530972, "no_speech_prob": 2.260313522128854e-06}, {"id": 529, "seek": 251584, "start": 2530.96, "end": 2536.1200000000003, "text": " To download and pre compute stuff. That's normal if you run it again. You should find it takes", "tokens": [1407, 5484, 293, 659, 14722, 1507, 13, 663, 311, 2710, 498, 291, 1190, 309, 797, 13, 509, 820, 915, 309, 2516], "temperature": 0.0, "avg_logprob": -0.15979089282807848, "compression_ratio": 1.7212389380530972, "no_speech_prob": 2.260313522128854e-06}, {"id": 530, "seek": 251584, "start": 2536.7200000000003, "end": 2538.56, "text": " 20 seconds or so", "tokens": [945, 3949, 420, 370], "temperature": 0.0, "avg_logprob": -0.15979089282807848, "compression_ratio": 1.7212389380530972, "no_speech_prob": 2.260313522128854e-06}, {"id": 531, "seek": 251584, "start": 2538.56, "end": 2540.32, "text": " so", "tokens": [370], "temperature": 0.0, "avg_logprob": -0.15979089282807848, "compression_ratio": 1.7212389380530972, "no_speech_prob": 2.260313522128854e-06}, {"id": 532, "seek": 251584, "start": 2540.32, "end": 2541.96, "text": " image classifiers", "tokens": [3256, 1508, 23463], "temperature": 0.0, "avg_logprob": -0.15979089282807848, "compression_ratio": 1.7212389380530972, "no_speech_prob": 2.260313522128854e-06}, {"id": 533, "seek": 251584, "start": 2541.96, "end": 2543.96, "text": " You know you may not feel like you", "tokens": [509, 458, 291, 815, 406, 841, 411, 291], "temperature": 0.0, "avg_logprob": -0.15979089282807848, "compression_ratio": 1.7212389380530972, "no_speech_prob": 2.260313522128854e-06}, {"id": 534, "seek": 254396, "start": 2543.96, "end": 2548.6, "text": " Need to recognize cats versus dogs very often on a computer", "tokens": [16984, 281, 5521, 11111, 5717, 7197, 588, 2049, 322, 257, 3820], "temperature": 0.0, "avg_logprob": -0.22738051414489746, "compression_ratio": 1.5689655172413792, "no_speech_prob": 3.668839326564921e-06}, {"id": 535, "seek": 254396, "start": 2548.68, "end": 2553.2400000000002, "text": " You can probably do it yourself pretty well, but what's interestingly interesting is that these?", "tokens": [509, 393, 1391, 360, 309, 1803, 1238, 731, 11, 457, 437, 311, 25873, 1880, 307, 300, 613, 30], "temperature": 0.0, "avg_logprob": -0.22738051414489746, "compression_ratio": 1.5689655172413792, "no_speech_prob": 3.668839326564921e-06}, {"id": 536, "seek": 254396, "start": 2553.84, "end": 2558.12, "text": " Image classification algorithms are really useful for lots and lots of things", "tokens": [29903, 21538, 14642, 366, 534, 4420, 337, 3195, 293, 3195, 295, 721], "temperature": 0.0, "avg_logprob": -0.22738051414489746, "compression_ratio": 1.5689655172413792, "no_speech_prob": 3.668839326564921e-06}, {"id": 537, "seek": 254396, "start": 2559.7200000000003, "end": 2561.7200000000003, "text": " for example", "tokens": [337, 1365], "temperature": 0.0, "avg_logprob": -0.22738051414489746, "compression_ratio": 1.5689655172413792, "no_speech_prob": 3.668839326564921e-06}, {"id": 538, "seek": 254396, "start": 2561.84, "end": 2568.48, "text": " AlphaGo which became which beat the go world champion the way it worked was to use something", "tokens": [20588, 12104, 597, 3062, 597, 4224, 264, 352, 1002, 10971, 264, 636, 309, 2732, 390, 281, 764, 746], "temperature": 0.0, "avg_logprob": -0.22738051414489746, "compression_ratio": 1.5689655172413792, "no_speech_prob": 3.668839326564921e-06}, {"id": 539, "seek": 254396, "start": 2569.48, "end": 2571.48, "text": " at its heart that looked", "tokens": [412, 1080, 1917, 300, 2956], "temperature": 0.0, "avg_logprob": -0.22738051414489746, "compression_ratio": 1.5689655172413792, "no_speech_prob": 3.668839326564921e-06}, {"id": 540, "seek": 257148, "start": 2571.48, "end": 2576.36, "text": " Almost exactly like our dogs versus cats image classification algorithm", "tokens": [12627, 2293, 411, 527, 7197, 5717, 11111, 3256, 21538, 9284], "temperature": 0.0, "avg_logprob": -0.2112339421322471, "compression_ratio": 1.8008474576271187, "no_speech_prob": 1.7330430637230165e-06}, {"id": 541, "seek": 257148, "start": 2576.88, "end": 2580.8, "text": " It looked at thousands and thousands of go boards", "tokens": [467, 2956, 412, 5383, 293, 5383, 295, 352, 13293], "temperature": 0.0, "avg_logprob": -0.2112339421322471, "compression_ratio": 1.8008474576271187, "no_speech_prob": 1.7330430637230165e-06}, {"id": 542, "seek": 257148, "start": 2581.72, "end": 2587.16, "text": " And for each one there was a label saying whether that go board ended up being the winning or the losing", "tokens": [400, 337, 1184, 472, 456, 390, 257, 7645, 1566, 1968, 300, 352, 3150, 4590, 493, 885, 264, 8224, 420, 264, 7027], "temperature": 0.0, "avg_logprob": -0.2112339421322471, "compression_ratio": 1.8008474576271187, "no_speech_prob": 1.7330430637230165e-06}, {"id": 543, "seek": 257148, "start": 2588.08, "end": 2590.36, "text": " player and so it learnt", "tokens": [4256, 293, 370, 309, 18991], "temperature": 0.0, "avg_logprob": -0.2112339421322471, "compression_ratio": 1.8008474576271187, "no_speech_prob": 1.7330430637230165e-06}, {"id": 544, "seek": 257148, "start": 2591.08, "end": 2596.98, "text": " Basically an image classification that was able to look at a go board and figure out whether it was a good go board or a bad", "tokens": [8537, 364, 3256, 21538, 300, 390, 1075, 281, 574, 412, 257, 352, 3150, 293, 2573, 484, 1968, 309, 390, 257, 665, 352, 3150, 420, 257, 1578], "temperature": 0.0, "avg_logprob": -0.2112339421322471, "compression_ratio": 1.8008474576271187, "no_speech_prob": 1.7330430637230165e-06}, {"id": 545, "seek": 257148, "start": 2596.98, "end": 2600.8, "text": " Go board and that's really the key most important", "tokens": [1037, 3150, 293, 300, 311, 534, 264, 2141, 881, 1021], "temperature": 0.0, "avg_logprob": -0.2112339421322471, "compression_ratio": 1.8008474576271187, "no_speech_prob": 1.7330430637230165e-06}, {"id": 546, "seek": 260080, "start": 2600.8, "end": 2605.6800000000003, "text": " Step in playing go well is to know which which move is better", "tokens": [5470, 294, 2433, 352, 731, 307, 281, 458, 597, 597, 1286, 307, 1101], "temperature": 0.0, "avg_logprob": -0.18593525886535645, "compression_ratio": 1.508108108108108, "no_speech_prob": 4.785062174050836e-06}, {"id": 547, "seek": 260080, "start": 2607.8, "end": 2612.0, "text": " Another example is one of our earlier students who actually", "tokens": [3996, 1365, 307, 472, 295, 527, 3071, 1731, 567, 767], "temperature": 0.0, "avg_logprob": -0.18593525886535645, "compression_ratio": 1.508108108108108, "no_speech_prob": 4.785062174050836e-06}, {"id": 548, "seek": 260080, "start": 2613.36, "end": 2615.36, "text": " Got a couple of patterns for this work", "tokens": [5803, 257, 1916, 295, 8294, 337, 341, 589], "temperature": 0.0, "avg_logprob": -0.18593525886535645, "compression_ratio": 1.508108108108108, "no_speech_prob": 4.785062174050836e-06}, {"id": 549, "seek": 260080, "start": 2616.1200000000003, "end": 2618.1200000000003, "text": " Looked at anti-fraud", "tokens": [2053, 292, 412, 6061, 12, 69, 424, 532], "temperature": 0.0, "avg_logprob": -0.18593525886535645, "compression_ratio": 1.508108108108108, "no_speech_prob": 4.785062174050836e-06}, {"id": 550, "seek": 260080, "start": 2618.36, "end": 2625.1800000000003, "text": " He had lots of examples of his customers mouse movements because they they provided kind of these", "tokens": [634, 632, 3195, 295, 5110, 295, 702, 4581, 9719, 9981, 570, 436, 436, 5649, 733, 295, 613], "temperature": 0.0, "avg_logprob": -0.18593525886535645, "compression_ratio": 1.508108108108108, "no_speech_prob": 4.785062174050836e-06}, {"id": 551, "seek": 262518, "start": 2625.18, "end": 2630.54, "text": " user tracking software to help avoid fraud and so he took the", "tokens": [4195, 11603, 4722, 281, 854, 5042, 14560, 293, 370, 415, 1890, 264], "temperature": 0.0, "avg_logprob": -0.2346765783768666, "compression_ratio": 1.6305418719211822, "no_speech_prob": 8.315231525557465e-07}, {"id": 552, "seek": 262518, "start": 2631.2599999999998, "end": 2633.2599999999998, "text": " the mouse paths", "tokens": [264, 9719, 14518], "temperature": 0.0, "avg_logprob": -0.2346765783768666, "compression_ratio": 1.6305418719211822, "no_speech_prob": 8.315231525557465e-07}, {"id": 553, "seek": 262518, "start": 2633.3399999999997, "end": 2636.66, "text": " basically of the users on his customers websites", "tokens": [1936, 295, 264, 5022, 322, 702, 4581, 12891], "temperature": 0.0, "avg_logprob": -0.2346765783768666, "compression_ratio": 1.6305418719211822, "no_speech_prob": 8.315231525557465e-07}, {"id": 554, "seek": 262518, "start": 2637.3799999999997, "end": 2641.7799999999997, "text": " Turned them into pictures of where the mouse moved and how quickly it moved", "tokens": [7956, 292, 552, 666, 5242, 295, 689, 264, 9719, 4259, 293, 577, 2661, 309, 4259], "temperature": 0.0, "avg_logprob": -0.2346765783768666, "compression_ratio": 1.6305418719211822, "no_speech_prob": 8.315231525557465e-07}, {"id": 555, "seek": 262518, "start": 2642.62, "end": 2646.46, "text": " And then built a image classifier that took those images", "tokens": [400, 550, 3094, 257, 3256, 1508, 9902, 300, 1890, 729, 5267], "temperature": 0.0, "avg_logprob": -0.2346765783768666, "compression_ratio": 1.6305418719211822, "no_speech_prob": 8.315231525557465e-07}, {"id": 556, "seek": 262518, "start": 2647.06, "end": 2651.96, "text": " As input and as output it was was that a fraudulent transaction or not?", "tokens": [1018, 4846, 293, 382, 5598, 309, 390, 390, 300, 257, 14560, 23405, 14425, 420, 406, 30], "temperature": 0.0, "avg_logprob": -0.2346765783768666, "compression_ratio": 1.6305418719211822, "no_speech_prob": 8.315231525557465e-07}, {"id": 557, "seek": 265196, "start": 2651.96, "end": 2658.48, "text": " And turned out to get you know really great results for his company so image classifiers", "tokens": [400, 3574, 484, 281, 483, 291, 458, 534, 869, 3542, 337, 702, 2237, 370, 3256, 1508, 23463], "temperature": 0.0, "avg_logprob": -0.18723626817975725, "compression_ratio": 1.541237113402062, "no_speech_prob": 1.0030103112512734e-06}, {"id": 558, "seek": 265196, "start": 2659.6, "end": 2662.84, "text": " Are like much more flexible than you might imagine", "tokens": [2014, 411, 709, 544, 11358, 813, 291, 1062, 3811], "temperature": 0.0, "avg_logprob": -0.18723626817975725, "compression_ratio": 1.541237113402062, "no_speech_prob": 1.0030103112512734e-06}, {"id": 559, "seek": 265196, "start": 2664.2400000000002, "end": 2666.2400000000002, "text": " so", "tokens": [370], "temperature": 0.0, "avg_logprob": -0.18723626817975725, "compression_ratio": 1.541237113402062, "no_speech_prob": 1.0030103112512734e-06}, {"id": 560, "seek": 265196, "start": 2666.56, "end": 2672.44, "text": " So this is how you know some of the ways you can use deep learning specifically for image recognition and", "tokens": [407, 341, 307, 577, 291, 458, 512, 295, 264, 2098, 291, 393, 764, 2452, 2539, 4682, 337, 3256, 11150, 293], "temperature": 0.0, "avg_logprob": -0.18723626817975725, "compression_ratio": 1.541237113402062, "no_speech_prob": 1.0030103112512734e-06}, {"id": 561, "seek": 265196, "start": 2673.84, "end": 2675.84, "text": " It's worth understanding that", "tokens": [467, 311, 3163, 3701, 300], "temperature": 0.0, "avg_logprob": -0.18723626817975725, "compression_ratio": 1.541237113402062, "no_speech_prob": 1.0030103112512734e-06}, {"id": 562, "seek": 265196, "start": 2677.12, "end": 2679.12, "text": " Deep learning is not", "tokens": [14895, 2539, 307, 406], "temperature": 0.0, "avg_logprob": -0.18723626817975725, "compression_ratio": 1.541237113402062, "no_speech_prob": 1.0030103112512734e-06}, {"id": 563, "seek": 267912, "start": 2679.12, "end": 2685.52, "text": " You know just a word that means the same thing as machine learning right like what is it that we're actually doing here when we're", "tokens": [509, 458, 445, 257, 1349, 300, 1355, 264, 912, 551, 382, 3479, 2539, 558, 411, 437, 307, 309, 300, 321, 434, 767, 884, 510, 562, 321, 434], "temperature": 0.0, "avg_logprob": -0.15446296691894532, "compression_ratio": 1.825531914893617, "no_speech_prob": 4.425451606948627e-06}, {"id": 564, "seek": 267912, "start": 2685.52, "end": 2687.4, "text": " doing deep learning", "tokens": [884, 2452, 2539], "temperature": 0.0, "avg_logprob": -0.15446296691894532, "compression_ratio": 1.825531914893617, "no_speech_prob": 4.425451606948627e-06}, {"id": 565, "seek": 267912, "start": 2687.4, "end": 2694.48, "text": " Instead deep learning is a kind of machine learning so machine learning was invented by this guy Arthur", "tokens": [7156, 2452, 2539, 307, 257, 733, 295, 3479, 2539, 370, 3479, 2539, 390, 14479, 538, 341, 2146, 19624], "temperature": 0.0, "avg_logprob": -0.15446296691894532, "compression_ratio": 1.825531914893617, "no_speech_prob": 4.425451606948627e-06}, {"id": 566, "seek": 267912, "start": 2694.48, "end": 2700.92, "text": " Samuels who was pretty amazing in the late 50s he got this IBM mainframe to play checkers", "tokens": [4832, 84, 1625, 567, 390, 1238, 2243, 294, 264, 3469, 2625, 82, 415, 658, 341, 23487, 2135, 17265, 281, 862, 1520, 433], "temperature": 0.0, "avg_logprob": -0.15446296691894532, "compression_ratio": 1.825531914893617, "no_speech_prob": 4.425451606948627e-06}, {"id": 567, "seek": 267912, "start": 2701.16, "end": 2706.96, "text": " Better than he can and the way he did it was he invented machine learning he got the", "tokens": [15753, 813, 415, 393, 293, 264, 636, 415, 630, 309, 390, 415, 14479, 3479, 2539, 415, 658, 264], "temperature": 0.0, "avg_logprob": -0.15446296691894532, "compression_ratio": 1.825531914893617, "no_speech_prob": 4.425451606948627e-06}, {"id": 568, "seek": 270696, "start": 2706.96, "end": 2709.84, "text": " Mainframe to play against itself", "tokens": [12383, 17265, 281, 862, 1970, 2564], "temperature": 0.0, "avg_logprob": -0.20740957463041265, "compression_ratio": 1.6784313725490196, "no_speech_prob": 1.4367462881637039e-06}, {"id": 569, "seek": 270696, "start": 2710.28, "end": 2715.68, "text": " Lots of times and figure out which kinds of things led to victories and which kinds of things didn't", "tokens": [15908, 295, 1413, 293, 2573, 484, 597, 3685, 295, 721, 4684, 281, 38259, 293, 597, 3685, 295, 721, 994, 380], "temperature": 0.0, "avg_logprob": -0.20740957463041265, "compression_ratio": 1.6784313725490196, "no_speech_prob": 1.4367462881637039e-06}, {"id": 570, "seek": 270696, "start": 2716.04, "end": 2719.32, "text": " And use that to kind of almost write its own program", "tokens": [400, 764, 300, 281, 733, 295, 1920, 2464, 1080, 1065, 1461], "temperature": 0.0, "avg_logprob": -0.20740957463041265, "compression_ratio": 1.6784313725490196, "no_speech_prob": 1.4367462881637039e-06}, {"id": 571, "seek": 270696, "start": 2719.68, "end": 2726.56, "text": " And Arthur's Arthur Samuels actually said in 1962 that he thought that one day the vast majority of computer software", "tokens": [400, 19624, 311, 19624, 4832, 84, 1625, 767, 848, 294, 39498, 300, 415, 1194, 300, 472, 786, 264, 8369, 6286, 295, 3820, 4722], "temperature": 0.0, "avg_logprob": -0.20740957463041265, "compression_ratio": 1.6784313725490196, "no_speech_prob": 1.4367462881637039e-06}, {"id": 572, "seek": 270696, "start": 2727.16, "end": 2734.62, "text": " Would be written using this machine learning approach rather than written by hand by writing the loops and so forth by hand", "tokens": [6068, 312, 3720, 1228, 341, 3479, 2539, 3109, 2831, 813, 3720, 538, 1011, 538, 3579, 264, 16121, 293, 370, 5220, 538, 1011], "temperature": 0.0, "avg_logprob": -0.20740957463041265, "compression_ratio": 1.6784313725490196, "no_speech_prob": 1.4367462881637039e-06}, {"id": 573, "seek": 273462, "start": 2734.62, "end": 2741.42, "text": " So I guess that hasn't happened yet, but it seems to be in the process of happening", "tokens": [407, 286, 2041, 300, 6132, 380, 2011, 1939, 11, 457, 309, 2544, 281, 312, 294, 264, 1399, 295, 2737], "temperature": 0.0, "avg_logprob": -0.20730737708080774, "compression_ratio": 1.625514403292181, "no_speech_prob": 1.844812004492269e-06}, {"id": 574, "seek": 273462, "start": 2741.42, "end": 2747.94, "text": " I think one of the reasons it didn't happen for a long time is because traditional machine learning actually was very", "tokens": [286, 519, 472, 295, 264, 4112, 309, 994, 380, 1051, 337, 257, 938, 565, 307, 570, 5164, 3479, 2539, 767, 390, 588], "temperature": 0.0, "avg_logprob": -0.20730737708080774, "compression_ratio": 1.625514403292181, "no_speech_prob": 1.844812004492269e-06}, {"id": 575, "seek": 273462, "start": 2748.54, "end": 2750.54, "text": " difficult and very", "tokens": [2252, 293, 588], "temperature": 0.0, "avg_logprob": -0.20730737708080774, "compression_ratio": 1.625514403292181, "no_speech_prob": 1.844812004492269e-06}, {"id": 576, "seek": 273462, "start": 2751.62, "end": 2757.56, "text": " Knowledge and time intensive so for example here's something called the computational pathologist or see path", "tokens": [32906, 293, 565, 18957, 370, 337, 1365, 510, 311, 746, 1219, 264, 28270, 3100, 9201, 420, 536, 3100], "temperature": 0.0, "avg_logprob": -0.20730737708080774, "compression_ratio": 1.625514403292181, "no_speech_prob": 1.844812004492269e-06}, {"id": 577, "seek": 273462, "start": 2758.58, "end": 2762.38, "text": " From guy called Andy back Andy back back when he was at Stanford", "tokens": [3358, 2146, 1219, 13285, 646, 13285, 646, 646, 562, 415, 390, 412, 20374], "temperature": 0.0, "avg_logprob": -0.20730737708080774, "compression_ratio": 1.625514403292181, "no_speech_prob": 1.844812004492269e-06}, {"id": 578, "seek": 276238, "start": 2762.38, "end": 2764.38, "text": " He's now moved on to", "tokens": [634, 311, 586, 4259, 322, 281], "temperature": 0.0, "avg_logprob": -0.35897834391533573, "compression_ratio": 1.5427135678391959, "no_speech_prob": 2.0261272766219918e-06}, {"id": 579, "seek": 276238, "start": 2766.26, "end": 2768.42, "text": " Somewhere on the East Coast Harvard, I think", "tokens": [34500, 322, 264, 6747, 14960, 13378, 11, 286, 519], "temperature": 0.0, "avg_logprob": -0.35897834391533573, "compression_ratio": 1.5427135678391959, "no_speech_prob": 2.0261272766219918e-06}, {"id": 580, "seek": 276238, "start": 2769.1, "end": 2773.84, "text": " And what he did was he took these pathology slides of breast cancer", "tokens": [400, 437, 415, 630, 390, 415, 1890, 613, 3100, 1793, 9788, 295, 9934, 5592], "temperature": 0.0, "avg_logprob": -0.35897834391533573, "compression_ratio": 1.5427135678391959, "no_speech_prob": 2.0261272766219918e-06}, {"id": 581, "seek": 276238, "start": 2775.02, "end": 2777.5, "text": " biopsies right and he", "tokens": [3228, 3370, 530, 558, 293, 415], "temperature": 0.0, "avg_logprob": -0.35897834391533573, "compression_ratio": 1.5427135678391959, "no_speech_prob": 2.0261272766219918e-06}, {"id": 582, "seek": 276238, "start": 2778.06, "end": 2783.26, "text": " worked with lots of pathologists to come up with ideas about what kinds of", "tokens": [2732, 365, 3195, 295, 3100, 12256, 281, 808, 493, 365, 3487, 466, 437, 3685, 295], "temperature": 0.0, "avg_logprob": -0.35897834391533573, "compression_ratio": 1.5427135678391959, "no_speech_prob": 2.0261272766219918e-06}, {"id": 583, "seek": 276238, "start": 2784.02, "end": 2786.6600000000003, "text": " patterns or features might be associated with", "tokens": [8294, 420, 4122, 1062, 312, 6615, 365], "temperature": 0.0, "avg_logprob": -0.35897834391533573, "compression_ratio": 1.5427135678391959, "no_speech_prob": 2.0261272766219918e-06}, {"id": 584, "seek": 276238, "start": 2787.34, "end": 2789.94, "text": " some long-term survival versus", "tokens": [512, 938, 12, 7039, 12559, 5717], "temperature": 0.0, "avg_logprob": -0.35897834391533573, "compression_ratio": 1.5427135678391959, "no_speech_prob": 2.0261272766219918e-06}, {"id": 585, "seek": 278994, "start": 2789.94, "end": 2794.94, "text": " versus dying quickly basically and so he came up with these ideas like", "tokens": [5717, 8639, 2661, 1936, 293, 370, 415, 1361, 493, 365, 613, 3487, 411], "temperature": 0.0, "avg_logprob": -0.20036330732327062, "compression_ratio": 1.9510204081632654, "no_speech_prob": 7.934473273962794e-07}, {"id": 586, "seek": 278994, "start": 2795.34, "end": 2799.36, "text": " Well, they came up with these ideas like relationship between epithelial nuclear neighbors", "tokens": [1042, 11, 436, 1361, 493, 365, 613, 3487, 411, 2480, 1296, 2388, 355, 338, 831, 8179, 12512], "temperature": 0.0, "avg_logprob": -0.20036330732327062, "compression_ratio": 1.9510204081632654, "no_speech_prob": 7.934473273962794e-07}, {"id": 587, "seek": 278994, "start": 2800.06, "end": 2805.9, "text": " Relationship between epithelial and stromal objects and so forth and so they came up with all of these ideas of features", "tokens": [28663, 1210, 1296, 2388, 355, 338, 831, 293, 1056, 298, 304, 6565, 293, 370, 5220, 293, 370, 436, 1361, 493, 365, 439, 295, 613, 3487, 295, 4122], "temperature": 0.0, "avg_logprob": -0.20036330732327062, "compression_ratio": 1.9510204081632654, "no_speech_prob": 7.934473273962794e-07}, {"id": 588, "seek": 278994, "start": 2805.9, "end": 2810.06, "text": " these are just a few of the hundreds that they thought of and then lots of", "tokens": [613, 366, 445, 257, 1326, 295, 264, 6779, 300, 436, 1194, 295, 293, 550, 3195, 295], "temperature": 0.0, "avg_logprob": -0.20036330732327062, "compression_ratio": 1.9510204081632654, "no_speech_prob": 7.934473273962794e-07}, {"id": 589, "seek": 278994, "start": 2810.7000000000003, "end": 2812.9, "text": " smart computer programmers wrote", "tokens": [4069, 3820, 41504, 4114], "temperature": 0.0, "avg_logprob": -0.20036330732327062, "compression_ratio": 1.9510204081632654, "no_speech_prob": 7.934473273962794e-07}, {"id": 590, "seek": 281290, "start": 2812.9, "end": 2819.64, "text": " specialist algorithms to to calculate all these different features and then those those", "tokens": [17008, 14642, 281, 281, 8873, 439, 613, 819, 4122, 293, 550, 729, 729], "temperature": 0.0, "avg_logprob": -0.20531781514485678, "compression_ratio": 1.768181818181818, "no_speech_prob": 1.209863398798916e-06}, {"id": 591, "seek": 281290, "start": 2820.38, "end": 2822.94, "text": " Features were passed into a logistic regression", "tokens": [3697, 3377, 645, 4678, 666, 257, 3565, 3142, 24590], "temperature": 0.0, "avg_logprob": -0.20531781514485678, "compression_ratio": 1.768181818181818, "no_speech_prob": 1.209863398798916e-06}, {"id": 592, "seek": 281290, "start": 2823.7000000000003, "end": 2827.06, "text": " To predict survival and it ended up working very well", "tokens": [1407, 6069, 12559, 293, 309, 4590, 493, 1364, 588, 731], "temperature": 0.0, "avg_logprob": -0.20531781514485678, "compression_ratio": 1.768181818181818, "no_speech_prob": 1.209863398798916e-06}, {"id": 593, "seek": 281290, "start": 2827.1800000000003, "end": 2835.1, "text": " It had ended up that the survival predictions were more accurate than pathologists own survival predictions work", "tokens": [467, 632, 4590, 493, 300, 264, 12559, 21264, 645, 544, 8559, 813, 3100, 12256, 1065, 12559, 21264, 589], "temperature": 0.0, "avg_logprob": -0.20531781514485678, "compression_ratio": 1.768181818181818, "no_speech_prob": 1.209863398798916e-06}, {"id": 594, "seek": 281290, "start": 2835.6600000000003, "end": 2840.1, "text": " and so machine learning can work really well, but the point here is that this was a an", "tokens": [293, 370, 3479, 2539, 393, 589, 534, 731, 11, 457, 264, 935, 510, 307, 300, 341, 390, 257, 364], "temperature": 0.0, "avg_logprob": -0.20531781514485678, "compression_ratio": 1.768181818181818, "no_speech_prob": 1.209863398798916e-06}, {"id": 595, "seek": 284010, "start": 2840.1, "end": 2845.14, "text": " approach that took lots of domain experts and computer experts", "tokens": [3109, 300, 1890, 3195, 295, 9274, 8572, 293, 3820, 8572], "temperature": 0.0, "avg_logprob": -0.24813805765180447, "compression_ratio": 1.574585635359116, "no_speech_prob": 1.19110154628288e-06}, {"id": 596, "seek": 284010, "start": 2846.02, "end": 2851.14, "text": " Many years of work to actually to build this thing right?", "tokens": [5126, 924, 295, 589, 281, 767, 281, 1322, 341, 551, 558, 30], "temperature": 0.0, "avg_logprob": -0.24813805765180447, "compression_ratio": 1.574585635359116, "no_speech_prob": 1.19110154628288e-06}, {"id": 597, "seek": 284010, "start": 2851.9, "end": 2853.9, "text": " so", "tokens": [370], "temperature": 0.0, "avg_logprob": -0.24813805765180447, "compression_ratio": 1.574585635359116, "no_speech_prob": 1.19110154628288e-06}, {"id": 598, "seek": 284010, "start": 2855.46, "end": 2857.46, "text": " We really want something", "tokens": [492, 534, 528, 746], "temperature": 0.0, "avg_logprob": -0.24813805765180447, "compression_ratio": 1.574585635359116, "no_speech_prob": 1.19110154628288e-06}, {"id": 599, "seek": 284010, "start": 2858.02, "end": 2860.02, "text": " something better and", "tokens": [746, 1101, 293], "temperature": 0.0, "avg_logprob": -0.24813805765180447, "compression_ratio": 1.574585635359116, "no_speech_prob": 1.19110154628288e-06}, {"id": 600, "seek": 284010, "start": 2860.14, "end": 2865.58, "text": " So specifically I'm going to show you something which rather than being a very specific", "tokens": [407, 4682, 286, 478, 516, 281, 855, 291, 746, 597, 2831, 813, 885, 257, 588, 2685], "temperature": 0.0, "avg_logprob": -0.24813805765180447, "compression_ratio": 1.574585635359116, "no_speech_prob": 1.19110154628288e-06}, {"id": 601, "seek": 284010, "start": 2866.42, "end": 2868.42, "text": " function with all this very", "tokens": [2445, 365, 439, 341, 588], "temperature": 0.0, "avg_logprob": -0.24813805765180447, "compression_ratio": 1.574585635359116, "no_speech_prob": 1.19110154628288e-06}, {"id": 602, "seek": 286842, "start": 2868.42, "end": 2870.42, "text": " domain specific", "tokens": [9274, 2685], "temperature": 0.0, "avg_logprob": -0.15698712666829426, "compression_ratio": 1.8289473684210527, "no_speech_prob": 3.34051492245635e-06}, {"id": 603, "seek": 286842, "start": 2870.98, "end": 2872.98, "text": " feature engineering", "tokens": [4111, 7043], "temperature": 0.0, "avg_logprob": -0.15698712666829426, "compression_ratio": 1.8289473684210527, "no_speech_prob": 3.34051492245635e-06}, {"id": 604, "seek": 286842, "start": 2873.02, "end": 2878.02, "text": " We're going to try and create an infinitely flexible function a function that could solve any problem", "tokens": [492, 434, 516, 281, 853, 293, 1884, 364, 36227, 11358, 2445, 257, 2445, 300, 727, 5039, 604, 1154], "temperature": 0.0, "avg_logprob": -0.15698712666829426, "compression_ratio": 1.8289473684210527, "no_speech_prob": 3.34051492245635e-06}, {"id": 605, "seek": 286842, "start": 2878.82, "end": 2883.46, "text": " Right it would solve any problem if only you set the parameters of that function correctly", "tokens": [1779, 309, 576, 5039, 604, 1154, 498, 787, 291, 992, 264, 9834, 295, 300, 2445, 8944], "temperature": 0.0, "avg_logprob": -0.15698712666829426, "compression_ratio": 1.8289473684210527, "no_speech_prob": 3.34051492245635e-06}, {"id": 606, "seek": 286842, "start": 2883.46, "end": 2888.78, "text": " And so then we need some all-purpose way of setting the parameters of that function", "tokens": [400, 370, 550, 321, 643, 512, 439, 12, 42601, 636, 295, 3287, 264, 9834, 295, 300, 2445], "temperature": 0.0, "avg_logprob": -0.15698712666829426, "compression_ratio": 1.8289473684210527, "no_speech_prob": 3.34051492245635e-06}, {"id": 607, "seek": 286842, "start": 2888.78, "end": 2894.3, "text": " And we would need that to be fast and scalable right now if we had something that had these three things", "tokens": [400, 321, 576, 643, 300, 281, 312, 2370, 293, 38481, 558, 586, 498, 321, 632, 746, 300, 632, 613, 1045, 721], "temperature": 0.0, "avg_logprob": -0.15698712666829426, "compression_ratio": 1.8289473684210527, "no_speech_prob": 3.34051492245635e-06}, {"id": 608, "seek": 289430, "start": 2894.3, "end": 2901.34, "text": " Then you wouldn't need to do this incredibly time and domain knowledge intensive approach anymore instead", "tokens": [1396, 291, 2759, 380, 643, 281, 360, 341, 6252, 565, 293, 9274, 3601, 18957, 3109, 3602, 2602], "temperature": 0.0, "avg_logprob": -0.1602403784310946, "compression_ratio": 1.6861924686192469, "no_speech_prob": 1.7330451100860955e-06}, {"id": 609, "seek": 289430, "start": 2901.34, "end": 2903.34, "text": " We can learn all of those things", "tokens": [492, 393, 1466, 439, 295, 729, 721], "temperature": 0.0, "avg_logprob": -0.1602403784310946, "compression_ratio": 1.6861924686192469, "no_speech_prob": 1.7330451100860955e-06}, {"id": 610, "seek": 289430, "start": 2903.6200000000003, "end": 2905.2200000000003, "text": " with this", "tokens": [365, 341], "temperature": 0.0, "avg_logprob": -0.1602403784310946, "compression_ratio": 1.6861924686192469, "no_speech_prob": 1.7330451100860955e-06}, {"id": 611, "seek": 289430, "start": 2905.2200000000003, "end": 2907.2200000000003, "text": " with this algorithm", "tokens": [365, 341, 9284], "temperature": 0.0, "avg_logprob": -0.1602403784310946, "compression_ratio": 1.6861924686192469, "no_speech_prob": 1.7330451100860955e-06}, {"id": 612, "seek": 289430, "start": 2907.3, "end": 2909.3, "text": " So as you might have guessed", "tokens": [407, 382, 291, 1062, 362, 21852], "temperature": 0.0, "avg_logprob": -0.1602403784310946, "compression_ratio": 1.6861924686192469, "no_speech_prob": 1.7330451100860955e-06}, {"id": 613, "seek": 289430, "start": 2909.42, "end": 2914.42, "text": " The algorithm in question which has these three properties is called deep learning", "tokens": [440, 9284, 294, 1168, 597, 575, 613, 1045, 7221, 307, 1219, 2452, 2539], "temperature": 0.0, "avg_logprob": -0.1602403784310946, "compression_ratio": 1.6861924686192469, "no_speech_prob": 1.7330451100860955e-06}, {"id": 614, "seek": 289430, "start": 2914.94, "end": 2919.26, "text": " Or if not an algorithm, then maybe we would call it a class of algorithms", "tokens": [1610, 498, 406, 364, 9284, 11, 550, 1310, 321, 576, 818, 309, 257, 1508, 295, 14642], "temperature": 0.0, "avg_logprob": -0.1602403784310946, "compression_ratio": 1.6861924686192469, "no_speech_prob": 1.7330451100860955e-06}, {"id": 615, "seek": 289430, "start": 2920.54, "end": 2922.54, "text": " Let's look at each of these three things in turn", "tokens": [961, 311, 574, 412, 1184, 295, 613, 1045, 721, 294, 1261], "temperature": 0.0, "avg_logprob": -0.1602403784310946, "compression_ratio": 1.6861924686192469, "no_speech_prob": 1.7330451100860955e-06}, {"id": 616, "seek": 292254, "start": 2922.54, "end": 2929.5, "text": " So the underlying function that deep learning uses is something called the neural network", "tokens": [407, 264, 14217, 2445, 300, 2452, 2539, 4960, 307, 746, 1219, 264, 18161, 3209], "temperature": 0.0, "avg_logprob": -0.16103070847531584, "compression_ratio": 1.7982456140350878, "no_speech_prob": 5.368738129618578e-07}, {"id": 617, "seek": 292254, "start": 2930.46, "end": 2932.38, "text": " Now the neural network", "tokens": [823, 264, 18161, 3209], "temperature": 0.0, "avg_logprob": -0.16103070847531584, "compression_ratio": 1.7982456140350878, "no_speech_prob": 5.368738129618578e-07}, {"id": 618, "seek": 292254, "start": 2932.38, "end": 2936.36, "text": " We're going to learn all about it and implemented ourselves from scratch later on in the course", "tokens": [492, 434, 516, 281, 1466, 439, 466, 309, 293, 12270, 4175, 490, 8459, 1780, 322, 294, 264, 1164], "temperature": 0.0, "avg_logprob": -0.16103070847531584, "compression_ratio": 1.7982456140350878, "no_speech_prob": 5.368738129618578e-07}, {"id": 619, "seek": 292254, "start": 2936.86, "end": 2943.32, "text": " But for now all you need to know about it is that it consists of a number of simple linear layers", "tokens": [583, 337, 586, 439, 291, 643, 281, 458, 466, 309, 307, 300, 309, 14689, 295, 257, 1230, 295, 2199, 8213, 7914], "temperature": 0.0, "avg_logprob": -0.16103070847531584, "compression_ratio": 1.7982456140350878, "no_speech_prob": 5.368738129618578e-07}, {"id": 620, "seek": 292254, "start": 2944.18, "end": 2947.06, "text": " interspersed with a number of simple nonlinear layers", "tokens": [728, 4952, 433, 292, 365, 257, 1230, 295, 2199, 2107, 28263, 7914], "temperature": 0.0, "avg_logprob": -0.16103070847531584, "compression_ratio": 1.7982456140350878, "no_speech_prob": 5.368738129618578e-07}, {"id": 621, "seek": 294706, "start": 2947.06, "end": 2952.2999999999997, "text": " And when you intersperse these layers in this way", "tokens": [400, 562, 291, 728, 82, 610, 405, 613, 7914, 294, 341, 636], "temperature": 0.0, "avg_logprob": -0.2647649421066534, "compression_ratio": 1.6162790697674418, "no_speech_prob": 4.888294711236085e-07}, {"id": 622, "seek": 294706, "start": 2952.9, "end": 2961.5, "text": " You get something called the universal approximation theorem and the universal approximation theorem says that this kind of function", "tokens": [509, 483, 746, 1219, 264, 11455, 28023, 20904, 293, 264, 11455, 28023, 20904, 1619, 300, 341, 733, 295, 2445], "temperature": 0.0, "avg_logprob": -0.2647649421066534, "compression_ratio": 1.6162790697674418, "no_speech_prob": 4.888294711236085e-07}, {"id": 623, "seek": 294706, "start": 2962.42, "end": 2965.18, "text": " Can solve any given problem to?", "tokens": [1664, 5039, 604, 2212, 1154, 281, 30], "temperature": 0.0, "avg_logprob": -0.2647649421066534, "compression_ratio": 1.6162790697674418, "no_speech_prob": 4.888294711236085e-07}, {"id": 624, "seek": 294706, "start": 2966.5, "end": 2968.5, "text": " arbitrarily close accuracy as", "tokens": [19071, 3289, 1998, 14170, 382], "temperature": 0.0, "avg_logprob": -0.2647649421066534, "compression_ratio": 1.6162790697674418, "no_speech_prob": 4.888294711236085e-07}, {"id": 625, "seek": 294706, "start": 2968.86, "end": 2971.9, "text": " Long as you add enough parameters", "tokens": [8282, 382, 291, 909, 1547, 9834], "temperature": 0.0, "avg_logprob": -0.2647649421066534, "compression_ratio": 1.6162790697674418, "no_speech_prob": 4.888294711236085e-07}, {"id": 626, "seek": 297190, "start": 2971.9, "end": 2977.38, "text": " So it's actually provably shown to be an infinitely flexible function", "tokens": [407, 309, 311, 767, 1439, 1188, 4898, 281, 312, 364, 36227, 11358, 2445], "temperature": 0.0, "avg_logprob": -0.21004204128099524, "compression_ratio": 1.712, "no_speech_prob": 7.811458999640308e-07}, {"id": 627, "seek": 297190, "start": 2978.54, "end": 2983.46, "text": " All right, so now we need some way to fit the parameters so that this infinitely flexible neural network", "tokens": [1057, 558, 11, 370, 586, 321, 643, 512, 636, 281, 3318, 264, 9834, 370, 300, 341, 36227, 11358, 18161, 3209], "temperature": 0.0, "avg_logprob": -0.21004204128099524, "compression_ratio": 1.712, "no_speech_prob": 7.811458999640308e-07}, {"id": 628, "seek": 297190, "start": 2984.2200000000003, "end": 2986.2200000000003, "text": " solves some specific problem and", "tokens": [39890, 512, 2685, 1154, 293], "temperature": 0.0, "avg_logprob": -0.21004204128099524, "compression_ratio": 1.712, "no_speech_prob": 7.811458999640308e-07}, {"id": 629, "seek": 297190, "start": 2987.1, "end": 2990.1, "text": " So the way we do that is using a technique that", "tokens": [407, 264, 636, 321, 360, 300, 307, 1228, 257, 6532, 300], "temperature": 0.0, "avg_logprob": -0.21004204128099524, "compression_ratio": 1.712, "no_speech_prob": 7.811458999640308e-07}, {"id": 630, "seek": 297190, "start": 2990.78, "end": 2996.7000000000003, "text": " Probably most of you will have come across before at some stage called gradient descent and with gradient descent", "tokens": [9210, 881, 295, 291, 486, 362, 808, 2108, 949, 412, 512, 3233, 1219, 16235, 23475, 293, 365, 16235, 23475], "temperature": 0.0, "avg_logprob": -0.21004204128099524, "compression_ratio": 1.712, "no_speech_prob": 7.811458999640308e-07}, {"id": 631, "seek": 297190, "start": 2996.7000000000003, "end": 3000.2200000000003, "text": " We basically say okay for the different parameters we have", "tokens": [492, 1936, 584, 1392, 337, 264, 819, 9834, 321, 362], "temperature": 0.0, "avg_logprob": -0.21004204128099524, "compression_ratio": 1.712, "no_speech_prob": 7.811458999640308e-07}, {"id": 632, "seek": 300022, "start": 3000.22, "end": 3003.98, "text": " How how good are they at solving my problem?", "tokens": [1012, 577, 665, 366, 436, 412, 12606, 452, 1154, 30], "temperature": 0.0, "avg_logprob": -0.17954428401994116, "compression_ratio": 1.6682242990654206, "no_speech_prob": 1.62804599312949e-06}, {"id": 633, "seek": 300022, "start": 3003.98, "end": 3011.7, "text": " And let's figure out a slightly better set of parameters and a slightly better set of parameters and basically follow down", "tokens": [400, 718, 311, 2573, 484, 257, 4748, 1101, 992, 295, 9834, 293, 257, 4748, 1101, 992, 295, 9834, 293, 1936, 1524, 760], "temperature": 0.0, "avg_logprob": -0.17954428401994116, "compression_ratio": 1.6682242990654206, "no_speech_prob": 1.62804599312949e-06}, {"id": 634, "seek": 300022, "start": 3012.18, "end": 3019.4599999999996, "text": " The the surface of the loss function downwards. It's kind of like a marble going down to find the minimum and", "tokens": [440, 264, 3753, 295, 264, 4470, 2445, 39880, 13, 467, 311, 733, 295, 411, 257, 26844, 516, 760, 281, 915, 264, 7285, 293], "temperature": 0.0, "avg_logprob": -0.17954428401994116, "compression_ratio": 1.6682242990654206, "no_speech_prob": 1.62804599312949e-06}, {"id": 635, "seek": 300022, "start": 3020.22, "end": 3025.14, "text": " As you can see here depending on where you start you end up in different places", "tokens": [1018, 291, 393, 536, 510, 5413, 322, 689, 291, 722, 291, 917, 493, 294, 819, 3190], "temperature": 0.0, "avg_logprob": -0.17954428401994116, "compression_ratio": 1.6682242990654206, "no_speech_prob": 1.62804599312949e-06}, {"id": 636, "seek": 302514, "start": 3025.14, "end": 3029.42, "text": " These things are called local minima now", "tokens": [1981, 721, 366, 1219, 2654, 4464, 64, 586], "temperature": 0.0, "avg_logprob": -0.22561666700575086, "compression_ratio": 1.7354497354497354, "no_speech_prob": 3.2563082186243264e-07}, {"id": 637, "seek": 302514, "start": 3029.94, "end": 3034.2599999999998, "text": " Interestingly it turns out that for neural networks particularly in particular", "tokens": [30564, 309, 4523, 484, 300, 337, 18161, 9590, 4098, 294, 1729], "temperature": 0.0, "avg_logprob": -0.22561666700575086, "compression_ratio": 1.7354497354497354, "no_speech_prob": 3.2563082186243264e-07}, {"id": 638, "seek": 302514, "start": 3035.8199999999997, "end": 3039.1, "text": " There aren't actually multiple different", "tokens": [821, 3212, 380, 767, 3866, 819], "temperature": 0.0, "avg_logprob": -0.22561666700575086, "compression_ratio": 1.7354497354497354, "no_speech_prob": 3.2563082186243264e-07}, {"id": 639, "seek": 302514, "start": 3040.66, "end": 3046.98, "text": " Local minima there's basically just there's basically just one right or to think of it another way", "tokens": [22755, 4464, 64, 456, 311, 1936, 445, 456, 311, 1936, 445, 472, 558, 420, 281, 519, 295, 309, 1071, 636], "temperature": 0.0, "avg_logprob": -0.22561666700575086, "compression_ratio": 1.7354497354497354, "no_speech_prob": 3.2563082186243264e-07}, {"id": 640, "seek": 302514, "start": 3046.98, "end": 3050.62, "text": " There are different parts of the space which are all equally good", "tokens": [821, 366, 819, 3166, 295, 264, 1901, 597, 366, 439, 12309, 665], "temperature": 0.0, "avg_logprob": -0.22561666700575086, "compression_ratio": 1.7354497354497354, "no_speech_prob": 3.2563082186243264e-07}, {"id": 641, "seek": 302514, "start": 3051.9, "end": 3053.9, "text": " so", "tokens": [370], "temperature": 0.0, "avg_logprob": -0.22561666700575086, "compression_ratio": 1.7354497354497354, "no_speech_prob": 3.2563082186243264e-07}, {"id": 642, "seek": 305390, "start": 3053.9, "end": 3057.98, "text": " gradient descent therefore turns out to be actually an excellent way to", "tokens": [16235, 23475, 4412, 4523, 484, 281, 312, 767, 364, 7103, 636, 281], "temperature": 0.0, "avg_logprob": -0.1895158741925214, "compression_ratio": 1.541871921182266, "no_speech_prob": 6.681506761196943e-07}, {"id": 643, "seek": 305390, "start": 3058.82, "end": 3062.7400000000002, "text": " Solve this problem of fitting parameters to neural networks", "tokens": [7026, 303, 341, 1154, 295, 15669, 9834, 281, 18161, 9590], "temperature": 0.0, "avg_logprob": -0.1895158741925214, "compression_ratio": 1.541871921182266, "no_speech_prob": 6.681506761196943e-07}, {"id": 644, "seek": 305390, "start": 3064.86, "end": 3069.46, "text": " The problem is though that we need to do it in a reasonable amount of time and", "tokens": [440, 1154, 307, 1673, 300, 321, 643, 281, 360, 309, 294, 257, 10585, 2372, 295, 565, 293], "temperature": 0.0, "avg_logprob": -0.1895158741925214, "compression_ratio": 1.541871921182266, "no_speech_prob": 6.681506761196943e-07}, {"id": 645, "seek": 305390, "start": 3070.3, "end": 3074.2200000000003, "text": " It's really only thanks to GPUs that that's become possible", "tokens": [467, 311, 534, 787, 3231, 281, 18407, 82, 300, 300, 311, 1813, 1944], "temperature": 0.0, "avg_logprob": -0.1895158741925214, "compression_ratio": 1.541871921182266, "no_speech_prob": 6.681506761196943e-07}, {"id": 646, "seek": 305390, "start": 3075.06, "end": 3077.54, "text": " So GPUs this shows over the last few years", "tokens": [407, 18407, 82, 341, 3110, 670, 264, 1036, 1326, 924], "temperature": 0.0, "avg_logprob": -0.1895158741925214, "compression_ratio": 1.541871921182266, "no_speech_prob": 6.681506761196943e-07}, {"id": 647, "seek": 307754, "start": 3077.54, "end": 3083.94, "text": " How many gigaflops per second can you get out of a?", "tokens": [1012, 867, 8741, 2792, 75, 3370, 680, 1150, 393, 291, 483, 484, 295, 257, 30], "temperature": 0.0, "avg_logprob": -0.24749918544993682, "compression_ratio": 1.4156626506024097, "no_speech_prob": 2.6841878479899606e-06}, {"id": 648, "seek": 307754, "start": 3085.22, "end": 3091.18, "text": " GPU that's the red and green versus a CPU. That's the blue right and this is on a log scale", "tokens": [18407, 300, 311, 264, 2182, 293, 3092, 5717, 257, 13199, 13, 663, 311, 264, 3344, 558, 293, 341, 307, 322, 257, 3565, 4373], "temperature": 0.0, "avg_logprob": -0.24749918544993682, "compression_ratio": 1.4156626506024097, "no_speech_prob": 2.6841878479899606e-06}, {"id": 649, "seek": 307754, "start": 3091.74, "end": 3095.66, "text": " So you can see that generally speaking the GPUs are", "tokens": [407, 291, 393, 536, 300, 5101, 4124, 264, 18407, 82, 366], "temperature": 0.0, "avg_logprob": -0.24749918544993682, "compression_ratio": 1.4156626506024097, "no_speech_prob": 2.6841878479899606e-06}, {"id": 650, "seek": 307754, "start": 3096.54, "end": 3100.74, "text": " about 10 times faster than the CPUs and", "tokens": [466, 1266, 1413, 4663, 813, 264, 13199, 82, 293], "temperature": 0.0, "avg_logprob": -0.24749918544993682, "compression_ratio": 1.4156626506024097, "no_speech_prob": 2.6841878479899606e-06}, {"id": 651, "seek": 310074, "start": 3100.74, "end": 3106.5, "text": " What's really interesting is that nowadays not only is the", "tokens": [708, 311, 534, 1880, 307, 300, 13434, 406, 787, 307, 264], "temperature": 0.0, "avg_logprob": -0.2512367718840299, "compression_ratio": 1.4690721649484537, "no_speech_prob": 6.43897010377259e-06}, {"id": 652, "seek": 310074, "start": 3106.9799999999996, "end": 3111.8999999999996, "text": " Titan X about 10 times faster than the e5 2699 CPU", "tokens": [17731, 1783, 466, 1266, 1413, 4663, 813, 264, 308, 20, 7551, 8494, 13199], "temperature": 0.0, "avg_logprob": -0.2512367718840299, "compression_ratio": 1.4690721649484537, "no_speech_prob": 6.43897010377259e-06}, {"id": 653, "seek": 310074, "start": 3112.2599999999998, "end": 3118.4199999999996, "text": " But the Titan X well actually better one to look at would be the GTX 10 ATI", "tokens": [583, 264, 17731, 1783, 731, 767, 1101, 472, 281, 574, 412, 576, 312, 264, 17530, 55, 1266, 316, 5422], "temperature": 0.0, "avg_logprob": -0.2512367718840299, "compression_ratio": 1.4690721649484537, "no_speech_prob": 6.43897010377259e-06}, {"id": 654, "seek": 310074, "start": 3119.2999999999997, "end": 3121.3799999999997, "text": " GPU costs about 700 bucks", "tokens": [18407, 5497, 466, 15204, 11829], "temperature": 0.0, "avg_logprob": -0.2512367718840299, "compression_ratio": 1.4690721649484537, "no_speech_prob": 6.43897010377259e-06}, {"id": 655, "seek": 310074, "start": 3122.22, "end": 3126.8999999999996, "text": " Whereas the CPU which is 10 times slower costs over four thousand dollars", "tokens": [13813, 264, 13199, 597, 307, 1266, 1413, 14009, 5497, 670, 1451, 4714, 3808], "temperature": 0.0, "avg_logprob": -0.2512367718840299, "compression_ratio": 1.4690721649484537, "no_speech_prob": 6.43897010377259e-06}, {"id": 656, "seek": 312690, "start": 3126.9, "end": 3131.78, "text": " So GPUs turn out to be able to solve these", "tokens": [407, 18407, 82, 1261, 484, 281, 312, 1075, 281, 5039, 613], "temperature": 0.0, "avg_logprob": -0.19303034373692105, "compression_ratio": 1.5360824742268042, "no_speech_prob": 1.2482665852076025e-06}, {"id": 657, "seek": 312690, "start": 3133.42, "end": 3135.98, "text": " Neural network parameter fitting problems", "tokens": [1734, 1807, 3209, 13075, 15669, 2740], "temperature": 0.0, "avg_logprob": -0.19303034373692105, "compression_ratio": 1.5360824742268042, "no_speech_prob": 1.2482665852076025e-06}, {"id": 658, "seek": 312690, "start": 3137.1, "end": 3138.58, "text": " incredibly quickly", "tokens": [6252, 2661], "temperature": 0.0, "avg_logprob": -0.19303034373692105, "compression_ratio": 1.5360824742268042, "no_speech_prob": 1.2482665852076025e-06}, {"id": 659, "seek": 312690, "start": 3138.58, "end": 3145.58, "text": " And also incredibly cheaply so they've been absolutely key in bringing these three pieces together", "tokens": [400, 611, 6252, 7084, 356, 370, 436, 600, 668, 3122, 2141, 294, 5062, 613, 1045, 3755, 1214], "temperature": 0.0, "avg_logprob": -0.19303034373692105, "compression_ratio": 1.5360824742268042, "no_speech_prob": 1.2482665852076025e-06}, {"id": 660, "seek": 312690, "start": 3147.82, "end": 3149.6600000000003, "text": " Then there's one more piece", "tokens": [1396, 456, 311, 472, 544, 2522], "temperature": 0.0, "avg_logprob": -0.19303034373692105, "compression_ratio": 1.5360824742268042, "no_speech_prob": 1.2482665852076025e-06}, {"id": 661, "seek": 312690, "start": 3149.6600000000003, "end": 3153.2200000000003, "text": " Which is I mentioned that these neural networks you can intersperse", "tokens": [3013, 307, 286, 2835, 300, 613, 18161, 9590, 291, 393, 728, 82, 610, 405], "temperature": 0.0, "avg_logprob": -0.19303034373692105, "compression_ratio": 1.5360824742268042, "no_speech_prob": 1.2482665852076025e-06}, {"id": 662, "seek": 315322, "start": 3153.22, "end": 3156.98, "text": " multiple sets of linear and then nonlinear layers", "tokens": [3866, 6352, 295, 8213, 293, 550, 2107, 28263, 7914], "temperature": 0.0, "avg_logprob": -0.2006978499583709, "compression_ratio": 1.6696428571428572, "no_speech_prob": 4.637843176169554e-06}, {"id": 663, "seek": 315322, "start": 3159.66, "end": 3162.18, "text": " In the particular example that's drawn here", "tokens": [682, 264, 1729, 1365, 300, 311, 10117, 510], "temperature": 0.0, "avg_logprob": -0.2006978499583709, "compression_ratio": 1.6696428571428572, "no_speech_prob": 4.637843176169554e-06}, {"id": 664, "seek": 315322, "start": 3162.18, "end": 3166.4599999999996, "text": " there's actually only one what we call hidden layer one layer in the middle and", "tokens": [456, 311, 767, 787, 472, 437, 321, 818, 7633, 4583, 472, 4583, 294, 264, 2808, 293], "temperature": 0.0, "avg_logprob": -0.2006978499583709, "compression_ratio": 1.6696428571428572, "no_speech_prob": 4.637843176169554e-06}, {"id": 665, "seek": 315322, "start": 3167.1, "end": 3172.66, "text": " Something that we learned in the last few years is that these kinds of neural networks although they do", "tokens": [6595, 300, 321, 3264, 294, 264, 1036, 1326, 924, 307, 300, 613, 3685, 295, 18161, 9590, 4878, 436, 360], "temperature": 0.0, "avg_logprob": -0.2006978499583709, "compression_ratio": 1.6696428571428572, "no_speech_prob": 4.637843176169554e-06}, {"id": 666, "seek": 315322, "start": 3173.22, "end": 3179.2999999999997, "text": " Support the universal approximation theorem they can solve any given problem arbitrarily closely", "tokens": [18073, 264, 11455, 28023, 20904, 436, 393, 5039, 604, 2212, 1154, 19071, 3289, 8185], "temperature": 0.0, "avg_logprob": -0.2006978499583709, "compression_ratio": 1.6696428571428572, "no_speech_prob": 4.637843176169554e-06}, {"id": 667, "seek": 317930, "start": 3179.3, "end": 3185.02, "text": " They require an exponentially increasing number of parameters to do so", "tokens": [814, 3651, 364, 37330, 5662, 1230, 295, 9834, 281, 360, 370], "temperature": 0.0, "avg_logprob": -0.21092169625418528, "compression_ratio": 1.5825242718446602, "no_speech_prob": 3.632673895026528e-07}, {"id": 668, "seek": 317930, "start": 3185.2200000000003, "end": 3190.26, "text": " So they don't actually solve the fast and scalable for even reasonable size problems", "tokens": [407, 436, 500, 380, 767, 5039, 264, 2370, 293, 38481, 337, 754, 10585, 2744, 2740], "temperature": 0.0, "avg_logprob": -0.21092169625418528, "compression_ratio": 1.5825242718446602, "no_speech_prob": 3.632673895026528e-07}, {"id": 669, "seek": 317930, "start": 3191.38, "end": 3196.9, "text": " But we've since discovered that if you create add multiple hidden layers", "tokens": [583, 321, 600, 1670, 6941, 300, 498, 291, 1884, 909, 3866, 7633, 7914], "temperature": 0.0, "avg_logprob": -0.21092169625418528, "compression_ratio": 1.5825242718446602, "no_speech_prob": 3.632673895026528e-07}, {"id": 670, "seek": 317930, "start": 3197.3, "end": 3203.5800000000004, "text": " Then you get super linear scaling so you can add a few more hidden layers to get", "tokens": [1396, 291, 483, 1687, 8213, 21589, 370, 291, 393, 909, 257, 1326, 544, 7633, 7914, 281, 483], "temperature": 0.0, "avg_logprob": -0.21092169625418528, "compression_ratio": 1.5825242718446602, "no_speech_prob": 3.632673895026528e-07}, {"id": 671, "seek": 317930, "start": 3204.2200000000003, "end": 3205.6200000000003, "text": " multiplicatively", "tokens": [17596, 19020], "temperature": 0.0, "avg_logprob": -0.21092169625418528, "compression_ratio": 1.5825242718446602, "no_speech_prob": 3.632673895026528e-07}, {"id": 672, "seek": 320562, "start": 3205.62, "end": 3209.2599999999998, "text": " more accuracy to multiplicative Lee more complex problems and", "tokens": [544, 14170, 281, 17596, 1166, 6957, 544, 3997, 2740, 293], "temperature": 0.0, "avg_logprob": -0.16939461615777784, "compression_ratio": 1.5408163265306123, "no_speech_prob": 9.874614761429257e-07}, {"id": 673, "seek": 320562, "start": 3209.98, "end": 3216.74, "text": " That is where it becomes called deep learning so deep learning means a neural network with multiple hidden layers", "tokens": [663, 307, 689, 309, 3643, 1219, 2452, 2539, 370, 2452, 2539, 1355, 257, 18161, 3209, 365, 3866, 7633, 7914], "temperature": 0.0, "avg_logprob": -0.16939461615777784, "compression_ratio": 1.5408163265306123, "no_speech_prob": 9.874614761429257e-07}, {"id": 674, "seek": 320562, "start": 3221.14, "end": 3225.14, "text": " So when you put all this together, it's actually really amazing what happens", "tokens": [407, 562, 291, 829, 439, 341, 1214, 11, 309, 311, 767, 534, 2243, 437, 2314], "temperature": 0.0, "avg_logprob": -0.16939461615777784, "compression_ratio": 1.5408163265306123, "no_speech_prob": 9.874614761429257e-07}, {"id": 675, "seek": 320562, "start": 3227.18, "end": 3231.22, "text": " Google started investing in deep learning in 2012", "tokens": [3329, 1409, 10978, 294, 2452, 2539, 294, 9125], "temperature": 0.0, "avg_logprob": -0.16939461615777784, "compression_ratio": 1.5408163265306123, "no_speech_prob": 9.874614761429257e-07}, {"id": 676, "seek": 323122, "start": 3231.22, "end": 3240.06, "text": " They actually hired Jeffrey Hinton who's kind of the father of deep learning and his top student Alex Krojewski", "tokens": [814, 767, 13144, 28721, 389, 12442, 567, 311, 733, 295, 264, 3086, 295, 2452, 2539, 293, 702, 1192, 3107, 5202, 591, 340, 73, 1023, 18020], "temperature": 0.0, "avg_logprob": -0.28183803819630243, "compression_ratio": 1.5333333333333334, "no_speech_prob": 1.3925421171734342e-06}, {"id": 677, "seek": 323122, "start": 3240.74, "end": 3246.18, "text": " And they started trying to build a team that team became known as Google Brain", "tokens": [400, 436, 1409, 1382, 281, 1322, 257, 1469, 300, 1469, 3062, 2570, 382, 3329, 29783], "temperature": 0.0, "avg_logprob": -0.28183803819630243, "compression_ratio": 1.5333333333333334, "no_speech_prob": 1.3925421171734342e-06}, {"id": 678, "seek": 323122, "start": 3247.2999999999997, "end": 3248.66, "text": " and", "tokens": [293], "temperature": 0.0, "avg_logprob": -0.28183803819630243, "compression_ratio": 1.5333333333333334, "no_speech_prob": 1.3925421171734342e-06}, {"id": 679, "seek": 323122, "start": 3248.66, "end": 3249.66, "text": " because", "tokens": [570], "temperature": 0.0, "avg_logprob": -0.28183803819630243, "compression_ratio": 1.5333333333333334, "no_speech_prob": 1.3925421171734342e-06}, {"id": 680, "seek": 323122, "start": 3249.66, "end": 3257.7799999999997, "text": " Things with these three properties are so incredibly powerful and so incredibly flexible you can actually see over time", "tokens": [9514, 365, 613, 1045, 7221, 366, 370, 6252, 4005, 293, 370, 6252, 11358, 291, 393, 767, 536, 670, 565], "temperature": 0.0, "avg_logprob": -0.28183803819630243, "compression_ratio": 1.5333333333333334, "no_speech_prob": 1.3925421171734342e-06}, {"id": 681, "seek": 325778, "start": 3257.78, "end": 3262.42, "text": " How many projects at Google use deep learning?", "tokens": [1012, 867, 4455, 412, 3329, 764, 2452, 2539, 30], "temperature": 0.0, "avg_logprob": -0.17494487762451172, "compression_ratio": 1.5862068965517242, "no_speech_prob": 2.857301751646446e-06}, {"id": 682, "seek": 325778, "start": 3263.5, "end": 3266.5, "text": " My graph here only goes up to a bit over a year ago", "tokens": [1222, 4295, 510, 787, 1709, 493, 281, 257, 857, 670, 257, 1064, 2057], "temperature": 0.0, "avg_logprob": -0.17494487762451172, "compression_ratio": 1.5862068965517242, "no_speech_prob": 2.857301751646446e-06}, {"id": 683, "seek": 325778, "start": 3267.1000000000004, "end": 3270.94, "text": " But it's I know it's been continually to grow exponentially since then as well", "tokens": [583, 309, 311, 286, 458, 309, 311, 668, 22277, 281, 1852, 37330, 1670, 550, 382, 731], "temperature": 0.0, "avg_logprob": -0.17494487762451172, "compression_ratio": 1.5862068965517242, "no_speech_prob": 2.857301751646446e-06}, {"id": 684, "seek": 325778, "start": 3271.46, "end": 3277.6600000000003, "text": " And so what you see now is around Google that deep learning is used in like every part of the business", "tokens": [400, 370, 437, 291, 536, 586, 307, 926, 3329, 300, 2452, 2539, 307, 1143, 294, 411, 633, 644, 295, 264, 1606], "temperature": 0.0, "avg_logprob": -0.17494487762451172, "compression_ratio": 1.5862068965517242, "no_speech_prob": 2.857301751646446e-06}, {"id": 685, "seek": 325778, "start": 3278.1800000000003, "end": 3281.3, "text": " And so it's really interesting to see how", "tokens": [400, 370, 309, 311, 534, 1880, 281, 536, 577], "temperature": 0.0, "avg_logprob": -0.17494487762451172, "compression_ratio": 1.5862068965517242, "no_speech_prob": 2.857301751646446e-06}, {"id": 686, "seek": 328130, "start": 3281.3, "end": 3289.0600000000004, "text": " This this kind of simple idea that we can solve machine learning problems", "tokens": [639, 341, 733, 295, 2199, 1558, 300, 321, 393, 5039, 3479, 2539, 2740], "temperature": 0.0, "avg_logprob": -0.21648290264072703, "compression_ratio": 1.4898989898989898, "no_speech_prob": 7.4111785579589196e-06}, {"id": 687, "seek": 328130, "start": 3289.94, "end": 3292.98, "text": " Using a an algorithm that has these properties", "tokens": [11142, 257, 364, 9284, 300, 575, 613, 7221], "temperature": 0.0, "avg_logprob": -0.21648290264072703, "compression_ratio": 1.4898989898989898, "no_speech_prob": 7.4111785579589196e-06}, {"id": 688, "seek": 328130, "start": 3293.98, "end": 3297.7000000000003, "text": " When a big company invests heavily and actually making that happen", "tokens": [1133, 257, 955, 2237, 1963, 82, 10950, 293, 767, 1455, 300, 1051], "temperature": 0.0, "avg_logprob": -0.21648290264072703, "compression_ratio": 1.4898989898989898, "no_speech_prob": 7.4111785579589196e-06}, {"id": 689, "seek": 328130, "start": 3298.3, "end": 3301.6600000000003, "text": " You see this incredible growth in how much it's used", "tokens": [509, 536, 341, 4651, 4599, 294, 577, 709, 309, 311, 1143], "temperature": 0.0, "avg_logprob": -0.21648290264072703, "compression_ratio": 1.4898989898989898, "no_speech_prob": 7.4111785579589196e-06}, {"id": 690, "seek": 328130, "start": 3303.1800000000003, "end": 3307.9, "text": " So for example if you use the inbox by Google software", "tokens": [407, 337, 1365, 498, 291, 764, 264, 35067, 538, 3329, 4722], "temperature": 0.0, "avg_logprob": -0.21648290264072703, "compression_ratio": 1.4898989898989898, "no_speech_prob": 7.4111785579589196e-06}, {"id": 691, "seek": 330790, "start": 3307.9, "end": 3312.98, "text": " Then when you receive an email from somebody it will often", "tokens": [1396, 562, 291, 4774, 364, 3796, 490, 2618, 309, 486, 2049], "temperature": 0.0, "avg_logprob": -0.1773905692162452, "compression_ratio": 1.5545023696682465, "no_speech_prob": 2.0261293229850708e-06}, {"id": 692, "seek": 330790, "start": 3313.86, "end": 3315.86, "text": " Tell you here are some replies", "tokens": [5115, 291, 510, 366, 512, 42289], "temperature": 0.0, "avg_logprob": -0.1773905692162452, "compression_ratio": 1.5545023696682465, "no_speech_prob": 2.0261293229850708e-06}, {"id": 693, "seek": 330790, "start": 3316.7000000000003, "end": 3318.34, "text": " That I could send for you", "tokens": [663, 286, 727, 2845, 337, 291], "temperature": 0.0, "avg_logprob": -0.1773905692162452, "compression_ratio": 1.5545023696682465, "no_speech_prob": 2.0261293229850708e-06}, {"id": 694, "seek": 330790, "start": 3318.34, "end": 3326.0, "text": " And so it's actually using deep learning here to read the original email and to generate some suggested replies", "tokens": [400, 370, 309, 311, 767, 1228, 2452, 2539, 510, 281, 1401, 264, 3380, 3796, 293, 281, 8460, 512, 10945, 42289], "temperature": 0.0, "avg_logprob": -0.1773905692162452, "compression_ratio": 1.5545023696682465, "no_speech_prob": 2.0261293229850708e-06}, {"id": 695, "seek": 330790, "start": 3326.58, "end": 3330.78, "text": " and so like this is a really great example of the kind of stuff that", "tokens": [293, 370, 411, 341, 307, 257, 534, 869, 1365, 295, 264, 733, 295, 1507, 300], "temperature": 0.0, "avg_logprob": -0.1773905692162452, "compression_ratio": 1.5545023696682465, "no_speech_prob": 2.0261293229850708e-06}, {"id": 696, "seek": 330790, "start": 3331.6600000000003, "end": 3333.6600000000003, "text": " Previously just wasn't possible", "tokens": [33606, 445, 2067, 380, 1944], "temperature": 0.0, "avg_logprob": -0.1773905692162452, "compression_ratio": 1.5545023696682465, "no_speech_prob": 2.0261293229850708e-06}, {"id": 697, "seek": 333366, "start": 3333.66, "end": 3338.8599999999997, "text": " Another great example would be Microsoft is also a little bit more recently", "tokens": [3996, 869, 1365, 576, 312, 8116, 307, 611, 257, 707, 857, 544, 3938], "temperature": 0.0, "avg_logprob": -0.18663485153861667, "compression_ratio": 1.8105726872246697, "no_speech_prob": 8.186314630620473e-07}, {"id": 698, "seek": 333366, "start": 3339.5, "end": 3342.98, "text": " invested heavily in deep learning and so now you can", "tokens": [13104, 10950, 294, 2452, 2539, 293, 370, 586, 291, 393], "temperature": 0.0, "avg_logprob": -0.18663485153861667, "compression_ratio": 1.8105726872246697, "no_speech_prob": 8.186314630620473e-07}, {"id": 699, "seek": 333366, "start": 3343.7799999999997, "end": 3349.8999999999996, "text": " Use Skype you can speaking to it in English and ask it at the other end to", "tokens": [8278, 31743, 291, 393, 4124, 281, 309, 294, 3669, 293, 1029, 309, 412, 264, 661, 917, 281], "temperature": 0.0, "avg_logprob": -0.18663485153861667, "compression_ratio": 1.8105726872246697, "no_speech_prob": 8.186314630620473e-07}, {"id": 700, "seek": 333366, "start": 3350.22, "end": 3355.7599999999998, "text": " Translate it in real time to Chinese or Spanish and then when they talk back to you in Chinese or Spanish", "tokens": [6531, 17593, 309, 294, 957, 565, 281, 4649, 420, 8058, 293, 550, 562, 436, 751, 646, 281, 291, 294, 4649, 420, 8058], "temperature": 0.0, "avg_logprob": -0.18663485153861667, "compression_ratio": 1.8105726872246697, "no_speech_prob": 8.186314630620473e-07}, {"id": 701, "seek": 335576, "start": 3355.76, "end": 3363.5200000000004, "text": " Skype will in real time translate it the speech in in their language into English speech in real time", "tokens": [31743, 486, 294, 957, 565, 13799, 309, 264, 6218, 294, 294, 641, 2856, 666, 3669, 6218, 294, 957, 565], "temperature": 0.0, "avg_logprob": -0.19712596061902168, "compression_ratio": 1.6822429906542056, "no_speech_prob": 3.555948524081032e-06}, {"id": 702, "seek": 335576, "start": 3364.2000000000003, "end": 3369.28, "text": " And again, this is an example of stuff which we can only do thanks to deep learning", "tokens": [400, 797, 11, 341, 307, 364, 1365, 295, 1507, 597, 321, 393, 787, 360, 3231, 281, 2452, 2539], "temperature": 0.0, "avg_logprob": -0.19712596061902168, "compression_ratio": 1.6822429906542056, "no_speech_prob": 3.555948524081032e-06}, {"id": 703, "seek": 335576, "start": 3371.7200000000003, "end": 3378.1000000000004, "text": " And something is really interesting to think about how deep learning can be combined with human expertise", "tokens": [400, 746, 307, 534, 1880, 281, 519, 466, 577, 2452, 2539, 393, 312, 9354, 365, 1952, 11769], "temperature": 0.0, "avg_logprob": -0.19712596061902168, "compression_ratio": 1.6822429906542056, "no_speech_prob": 3.555948524081032e-06}, {"id": 704, "seek": 335576, "start": 3378.6800000000003, "end": 3383.0, "text": " So here's an example of like drawing something just sketching it out", "tokens": [407, 510, 311, 364, 1365, 295, 411, 6316, 746, 445, 12325, 278, 309, 484], "temperature": 0.0, "avg_logprob": -0.19712596061902168, "compression_ratio": 1.6822429906542056, "no_speech_prob": 3.555948524081032e-06}, {"id": 705, "seek": 338300, "start": 3383.0, "end": 3386.12, "text": " And then using a program called neural doodle", "tokens": [400, 550, 1228, 257, 1461, 1219, 18161, 360, 30013], "temperature": 0.0, "avg_logprob": -0.14465189973513284, "compression_ratio": 1.5934959349593496, "no_speech_prob": 1.9333431282575475e-06}, {"id": 706, "seek": 338300, "start": 3386.12, "end": 3393.34, "text": " This is from a couple of years ago to then say please take that sketch and render it in the style of an artist", "tokens": [639, 307, 490, 257, 1916, 295, 924, 2057, 281, 550, 584, 1767, 747, 300, 12325, 293, 15529, 309, 294, 264, 3758, 295, 364, 5748], "temperature": 0.0, "avg_logprob": -0.14465189973513284, "compression_ratio": 1.5934959349593496, "no_speech_prob": 1.9333431282575475e-06}, {"id": 707, "seek": 338300, "start": 3394.08, "end": 3396.48, "text": " And so here's the picture that it then created", "tokens": [400, 370, 510, 311, 264, 3036, 300, 309, 550, 2942], "temperature": 0.0, "avg_logprob": -0.14465189973513284, "compression_ratio": 1.5934959349593496, "no_speech_prob": 1.9333431282575475e-06}, {"id": 708, "seek": 338300, "start": 3397.48, "end": 3402.92, "text": " Rendering it as you know impressionist painting, and I think this is a really great example of how", "tokens": [48174, 1794, 309, 382, 291, 458, 9995, 468, 5370, 11, 293, 286, 519, 341, 307, 257, 534, 869, 1365, 295, 577], "temperature": 0.0, "avg_logprob": -0.14465189973513284, "compression_ratio": 1.5934959349593496, "no_speech_prob": 1.9333431282575475e-06}, {"id": 709, "seek": 338300, "start": 3403.96, "end": 3406.72, "text": " You can use deep learning to help combine", "tokens": [509, 393, 764, 2452, 2539, 281, 854, 10432], "temperature": 0.0, "avg_logprob": -0.14465189973513284, "compression_ratio": 1.5934959349593496, "no_speech_prob": 1.9333431282575475e-06}, {"id": 710, "seek": 338300, "start": 3407.32, "end": 3409.32, "text": " human expertise and", "tokens": [1952, 11769, 293], "temperature": 0.0, "avg_logprob": -0.14465189973513284, "compression_ratio": 1.5934959349593496, "no_speech_prob": 1.9333431282575475e-06}, {"id": 711, "seek": 340932, "start": 3409.32, "end": 3416.44, "text": " What computers are good at? So I a few years ago", "tokens": [708, 10807, 366, 665, 412, 30, 407, 286, 257, 1326, 924, 2057], "temperature": 0.0, "avg_logprob": -0.2505267890723976, "compression_ratio": 1.4816753926701571, "no_speech_prob": 1.9033776652577217e-06}, {"id": 712, "seek": 340932, "start": 3417.28, "end": 3421.0, "text": " Decided to try this myself like what would happen if I took?", "tokens": [12427, 2112, 281, 853, 341, 2059, 411, 437, 576, 1051, 498, 286, 1890, 30], "temperature": 0.0, "avg_logprob": -0.2505267890723976, "compression_ratio": 1.4816753926701571, "no_speech_prob": 1.9033776652577217e-06}, {"id": 713, "seek": 340932, "start": 3422.1200000000003, "end": 3428.1600000000003, "text": " Think learning and try to use it to solve a really important problem and so the problem I picked was", "tokens": [6557, 2539, 293, 853, 281, 764, 309, 281, 5039, 257, 534, 1021, 1154, 293, 370, 264, 1154, 286, 6183, 390], "temperature": 0.0, "avg_logprob": -0.2505267890723976, "compression_ratio": 1.4816753926701571, "no_speech_prob": 1.9033776652577217e-06}, {"id": 714, "seek": 340932, "start": 3428.7400000000002, "end": 3432.6800000000003, "text": " Diagnosing lung cancer it turns out if you can find", "tokens": [8789, 4535, 6110, 16730, 5592, 309, 4523, 484, 498, 291, 393, 915], "temperature": 0.0, "avg_logprob": -0.2505267890723976, "compression_ratio": 1.4816753926701571, "no_speech_prob": 1.9033776652577217e-06}, {"id": 715, "seek": 340932, "start": 3433.7200000000003, "end": 3435.7200000000003, "text": " lung nodules earlier", "tokens": [16730, 15224, 3473, 3071], "temperature": 0.0, "avg_logprob": -0.2505267890723976, "compression_ratio": 1.4816753926701571, "no_speech_prob": 1.9033776652577217e-06}, {"id": 716, "seek": 343572, "start": 3435.72, "end": 3440.2799999999997, "text": " There's a ten times higher probability of survival", "tokens": [821, 311, 257, 2064, 1413, 2946, 8482, 295, 12559], "temperature": 0.0, "avg_logprob": -0.18192451991391986, "compression_ratio": 1.5574468085106383, "no_speech_prob": 5.862754278496141e-06}, {"id": 717, "seek": 343572, "start": 3440.8799999999997, "end": 3447.8799999999997, "text": " So it's a really important problem to solve so I got together with three other people none of us had any medical background", "tokens": [407, 309, 311, 257, 534, 1021, 1154, 281, 5039, 370, 286, 658, 1214, 365, 1045, 661, 561, 6022, 295, 505, 632, 604, 4625, 3678], "temperature": 0.0, "avg_logprob": -0.18192451991391986, "compression_ratio": 1.5574468085106383, "no_speech_prob": 5.862754278496141e-06}, {"id": 718, "seek": 343572, "start": 3448.3199999999997, "end": 3451.3199999999997, "text": " And we grabbed a data set of CT scans", "tokens": [400, 321, 18607, 257, 1412, 992, 295, 19529, 35116], "temperature": 0.0, "avg_logprob": -0.18192451991391986, "compression_ratio": 1.5574468085106383, "no_speech_prob": 5.862754278496141e-06}, {"id": 719, "seek": 343572, "start": 3452.24, "end": 3454.24, "text": " We used a convolutional neural network", "tokens": [492, 1143, 257, 45216, 304, 18161, 3209], "temperature": 0.0, "avg_logprob": -0.18192451991391986, "compression_ratio": 1.5574468085106383, "no_speech_prob": 5.862754278496141e-06}, {"id": 720, "seek": 343572, "start": 3455.0, "end": 3458.66, "text": " Much like the dogs versus cats one we trained at the start of today's lesson", "tokens": [12313, 411, 264, 7197, 5717, 11111, 472, 321, 8895, 412, 264, 722, 295, 965, 311, 6898], "temperature": 0.0, "avg_logprob": -0.18192451991391986, "compression_ratio": 1.5574468085106383, "no_speech_prob": 5.862754278496141e-06}, {"id": 721, "seek": 343572, "start": 3459.52, "end": 3461.52, "text": " to try and predict which", "tokens": [281, 853, 293, 6069, 597], "temperature": 0.0, "avg_logprob": -0.18192451991391986, "compression_ratio": 1.5574468085106383, "no_speech_prob": 5.862754278496141e-06}, {"id": 722, "seek": 343572, "start": 3462.3599999999997, "end": 3464.3599999999997, "text": " CT scans had", "tokens": [19529, 35116, 632], "temperature": 0.0, "avg_logprob": -0.18192451991391986, "compression_ratio": 1.5574468085106383, "no_speech_prob": 5.862754278496141e-06}, {"id": 723, "seek": 346436, "start": 3464.36, "end": 3470.6800000000003, "text": " Malignant tumors in them and we ended up after a couple of months with something with a much lower", "tokens": [5746, 36818, 38466, 294, 552, 293, 321, 4590, 493, 934, 257, 1916, 295, 2493, 365, 746, 365, 257, 709, 3126], "temperature": 0.0, "avg_logprob": -0.23104752434624565, "compression_ratio": 1.7065637065637065, "no_speech_prob": 2.812999355228385e-06}, {"id": 724, "seek": 346436, "start": 3470.88, "end": 3475.78, "text": " False negative rate and a much lower false positive rate and a panel of four radiologists", "tokens": [50040, 3671, 3314, 293, 257, 709, 3126, 7908, 3353, 3314, 293, 257, 4831, 295, 1451, 16335, 12256], "temperature": 0.0, "avg_logprob": -0.23104752434624565, "compression_ratio": 1.7065637065637065, "no_speech_prob": 2.812999355228385e-06}, {"id": 725, "seek": 346436, "start": 3476.1200000000003, "end": 3478.1200000000003, "text": " and we went on to", "tokens": [293, 321, 1437, 322, 281], "temperature": 0.0, "avg_logprob": -0.23104752434624565, "compression_ratio": 1.7065637065637065, "no_speech_prob": 2.812999355228385e-06}, {"id": 726, "seek": 346436, "start": 3478.34, "end": 3483.82, "text": " build this in a startup into a company called analytic which has really become pretty successful and", "tokens": [1322, 341, 294, 257, 18578, 666, 257, 2237, 1219, 40358, 597, 575, 534, 1813, 1238, 4406, 293], "temperature": 0.0, "avg_logprob": -0.23104752434624565, "compression_ratio": 1.7065637065637065, "no_speech_prob": 2.812999355228385e-06}, {"id": 727, "seek": 346436, "start": 3484.76, "end": 3489.44, "text": " Since that time the idea of using deep learning for medical imaging has become", "tokens": [4162, 300, 565, 264, 1558, 295, 1228, 2452, 2539, 337, 4625, 25036, 575, 1813], "temperature": 0.0, "avg_logprob": -0.23104752434624565, "compression_ratio": 1.7065637065637065, "no_speech_prob": 2.812999355228385e-06}, {"id": 728, "seek": 346436, "start": 3489.96, "end": 3492.7200000000003, "text": " Hugely popular and it's being used all around the world", "tokens": [46892, 736, 3743, 293, 309, 311, 885, 1143, 439, 926, 264, 1002], "temperature": 0.0, "avg_logprob": -0.23104752434624565, "compression_ratio": 1.7065637065637065, "no_speech_prob": 2.812999355228385e-06}, {"id": 729, "seek": 349272, "start": 3492.72, "end": 3494.16, "text": " so", "tokens": [370], "temperature": 0.0, "avg_logprob": -0.1685098280389625, "compression_ratio": 1.6123348017621146, "no_speech_prob": 3.555952162059839e-06}, {"id": 730, "seek": 349272, "start": 3494.16, "end": 3496.9199999999996, "text": " What I've generally noticed is that you know the vast", "tokens": [708, 286, 600, 5101, 5694, 307, 300, 291, 458, 264, 8369], "temperature": 0.0, "avg_logprob": -0.1685098280389625, "compression_ratio": 1.6123348017621146, "no_speech_prob": 3.555952162059839e-06}, {"id": 731, "seek": 349272, "start": 3497.9599999999996, "end": 3499.9599999999996, "text": " majority of", "tokens": [6286, 295], "temperature": 0.0, "avg_logprob": -0.1685098280389625, "compression_ratio": 1.6123348017621146, "no_speech_prob": 3.555952162059839e-06}, {"id": 732, "seek": 349272, "start": 3500.9599999999996, "end": 3507.2, "text": " Of kind of things that people do in the world currently aren't using deep learning and then each time somebody says", "tokens": [2720, 733, 295, 721, 300, 561, 360, 294, 264, 1002, 4362, 3212, 380, 1228, 2452, 2539, 293, 550, 1184, 565, 2618, 1619], "temperature": 0.0, "avg_logprob": -0.1685098280389625, "compression_ratio": 1.6123348017621146, "no_speech_prob": 3.555952162059839e-06}, {"id": 733, "seek": 349272, "start": 3507.2, "end": 3510.64, "text": " Oh, let's try using deep learning to improve performance at this thing", "tokens": [876, 11, 718, 311, 853, 1228, 2452, 2539, 281, 3470, 3389, 412, 341, 551], "temperature": 0.0, "avg_logprob": -0.1685098280389625, "compression_ratio": 1.6123348017621146, "no_speech_prob": 3.555952162059839e-06}, {"id": 734, "seek": 349272, "start": 3510.8399999999997, "end": 3517.2799999999997, "text": " They nearly always get fantastic results, and then suddenly everybody in that industry starts using it as well", "tokens": [814, 6217, 1009, 483, 5456, 3542, 11, 293, 550, 5800, 2201, 294, 300, 3518, 3719, 1228, 309, 382, 731], "temperature": 0.0, "avg_logprob": -0.1685098280389625, "compression_ratio": 1.6123348017621146, "no_speech_prob": 3.555952162059839e-06}, {"id": 735, "seek": 351728, "start": 3517.28, "end": 3525.0, "text": " So there's just lots and lots of opportunities here at this particular time to use deep learning to help with all kinds of different stuff", "tokens": [407, 456, 311, 445, 3195, 293, 3195, 295, 4786, 510, 412, 341, 1729, 565, 281, 764, 2452, 2539, 281, 854, 365, 439, 3685, 295, 819, 1507], "temperature": 0.0, "avg_logprob": -0.14044602394104003, "compression_ratio": 1.7154471544715446, "no_speech_prob": 2.0580334876285633e-06}, {"id": 736, "seek": 351728, "start": 3526.2000000000003, "end": 3531.36, "text": " So I've shut it down a few ideas here. These are all things which I know you can use", "tokens": [407, 286, 600, 5309, 309, 760, 257, 1326, 3487, 510, 13, 1981, 366, 439, 721, 597, 286, 458, 291, 393, 764], "temperature": 0.0, "avg_logprob": -0.14044602394104003, "compression_ratio": 1.7154471544715446, "no_speech_prob": 2.0580334876285633e-06}, {"id": 737, "seek": 351728, "start": 3532.1200000000003, "end": 3535.32, "text": " deep learning for right now to get good results from", "tokens": [2452, 2539, 337, 558, 586, 281, 483, 665, 3542, 490], "temperature": 0.0, "avg_logprob": -0.14044602394104003, "compression_ratio": 1.7154471544715446, "no_speech_prob": 2.0580334876285633e-06}, {"id": 738, "seek": 351728, "start": 3536.32, "end": 3537.7200000000003, "text": " and", "tokens": [293], "temperature": 0.0, "avg_logprob": -0.14044602394104003, "compression_ratio": 1.7154471544715446, "no_speech_prob": 2.0580334876285633e-06}, {"id": 739, "seek": 351728, "start": 3537.7200000000003, "end": 3543.82, "text": " You know are things which people spend a lot of money on or have a lot of you know important business opportunities", "tokens": [509, 458, 366, 721, 597, 561, 3496, 257, 688, 295, 1460, 322, 420, 362, 257, 688, 295, 291, 458, 1021, 1606, 4786], "temperature": 0.0, "avg_logprob": -0.14044602394104003, "compression_ratio": 1.7154471544715446, "no_speech_prob": 2.0580334876285633e-06}, {"id": 740, "seek": 351728, "start": 3544.1600000000003, "end": 3546.1200000000003, "text": " There's lots more as well", "tokens": [821, 311, 3195, 544, 382, 731], "temperature": 0.0, "avg_logprob": -0.14044602394104003, "compression_ratio": 1.7154471544715446, "no_speech_prob": 2.0580334876285633e-06}, {"id": 741, "seek": 354612, "start": 3546.12, "end": 3551.48, "text": " But these are some examples of things that maybe at your company you could think about applying deep learning for", "tokens": [583, 613, 366, 512, 5110, 295, 721, 300, 1310, 412, 428, 2237, 291, 727, 519, 466, 9275, 2452, 2539, 337], "temperature": 0.0, "avg_logprob": -0.15055473460707552, "compression_ratio": 1.771551724137931, "no_speech_prob": 1.2482660167734139e-06}, {"id": 742, "seek": 354612, "start": 3553.2799999999997, "end": 3555.88, "text": " So let's talk about what's actually going on", "tokens": [407, 718, 311, 751, 466, 437, 311, 767, 516, 322], "temperature": 0.0, "avg_logprob": -0.15055473460707552, "compression_ratio": 1.771551724137931, "no_speech_prob": 1.2482660167734139e-06}, {"id": 743, "seek": 354612, "start": 3556.6, "end": 3561.7599999999998, "text": " What actually happened when we trained that deep learning model earlier?", "tokens": [708, 767, 2011, 562, 321, 8895, 300, 2452, 2539, 2316, 3071, 30], "temperature": 0.0, "avg_logprob": -0.15055473460707552, "compression_ratio": 1.771551724137931, "no_speech_prob": 1.2482660167734139e-06}, {"id": 744, "seek": 354612, "start": 3561.7599999999998, "end": 3569.56, "text": " And so as I briefly mentioned the thing we created is something called a convolutional neural network or CNN and", "tokens": [400, 370, 382, 286, 10515, 2835, 264, 551, 321, 2942, 307, 746, 1219, 257, 45216, 304, 18161, 3209, 420, 24859, 293], "temperature": 0.0, "avg_logprob": -0.15055473460707552, "compression_ratio": 1.771551724137931, "no_speech_prob": 1.2482660167734139e-06}, {"id": 745, "seek": 356956, "start": 3569.56, "end": 3577.2799999999997, "text": " The key piece of a convolutional neural network is the convolution? So here's a great example", "tokens": [440, 2141, 2522, 295, 257, 45216, 304, 18161, 3209, 307, 264, 45216, 30, 407, 510, 311, 257, 869, 1365], "temperature": 0.0, "avg_logprob": -0.20190422709395245, "compression_ratio": 1.6305418719211822, "no_speech_prob": 9.42242479595734e-07}, {"id": 746, "seek": 356956, "start": 3577.88, "end": 3579.88, "text": " From a website", "tokens": [3358, 257, 3144], "temperature": 0.0, "avg_logprob": -0.20190422709395245, "compression_ratio": 1.6305418719211822, "no_speech_prob": 9.42242479595734e-07}, {"id": 747, "seek": 356956, "start": 3580.12, "end": 3582.12, "text": " I've got the URL up here", "tokens": [286, 600, 658, 264, 12905, 493, 510], "temperature": 0.0, "avg_logprob": -0.20190422709395245, "compression_ratio": 1.6305418719211822, "no_speech_prob": 9.42242479595734e-07}, {"id": 748, "seek": 356956, "start": 3582.7599999999998, "end": 3584.32, "text": " explained visually", "tokens": [8825, 19622], "temperature": 0.0, "avg_logprob": -0.20190422709395245, "compression_ratio": 1.6305418719211822, "no_speech_prob": 9.42242479595734e-07}, {"id": 749, "seek": 356956, "start": 3584.32, "end": 3590.16, "text": " It's called and the explained visually website has an example of a convolution", "tokens": [467, 311, 1219, 293, 264, 8825, 19622, 3144, 575, 364, 1365, 295, 257, 45216], "temperature": 0.0, "avg_logprob": -0.20190422709395245, "compression_ratio": 1.6305418719211822, "no_speech_prob": 9.42242479595734e-07}, {"id": 750, "seek": 356956, "start": 3590.7999999999997, "end": 3596.64, "text": " kind of in practice over here in the bottom left is a very zoomed-in picture of somebody's face and", "tokens": [733, 295, 294, 3124, 670, 510, 294, 264, 2767, 1411, 307, 257, 588, 8863, 292, 12, 259, 3036, 295, 2618, 311, 1851, 293], "temperature": 0.0, "avg_logprob": -0.20190422709395245, "compression_ratio": 1.6305418719211822, "no_speech_prob": 9.42242479595734e-07}, {"id": 751, "seek": 359664, "start": 3596.64, "end": 3603.48, "text": " Over here on the right is an example of using a convolution on that image", "tokens": [4886, 510, 322, 264, 558, 307, 364, 1365, 295, 1228, 257, 45216, 322, 300, 3256], "temperature": 0.0, "avg_logprob": -0.167832070502682, "compression_ratio": 1.6145251396648044, "no_speech_prob": 2.3320662876358256e-06}, {"id": 752, "seek": 359664, "start": 3604.48, "end": 3608.16, "text": " You can see here this particular thing is obviously finding", "tokens": [509, 393, 536, 510, 341, 1729, 551, 307, 2745, 5006], "temperature": 0.0, "avg_logprob": -0.167832070502682, "compression_ratio": 1.6145251396648044, "no_speech_prob": 2.3320662876358256e-06}, {"id": 753, "seek": 359664, "start": 3610.96, "end": 3616.98, "text": " Edges the edges of his head right top and bottom edges in particular", "tokens": [3977, 2880, 264, 8819, 295, 702, 1378, 558, 1192, 293, 2767, 8819, 294, 1729], "temperature": 0.0, "avg_logprob": -0.167832070502682, "compression_ratio": 1.6145251396648044, "no_speech_prob": 2.3320662876358256e-06}, {"id": 754, "seek": 359664, "start": 3617.48, "end": 3622.62, "text": " Now how is it doing that well if we look at each of these little three by three areas?", "tokens": [823, 577, 307, 309, 884, 300, 731, 498, 321, 574, 412, 1184, 295, 613, 707, 1045, 538, 1045, 3179, 30], "temperature": 0.0, "avg_logprob": -0.167832070502682, "compression_ratio": 1.6145251396648044, "no_speech_prob": 2.3320662876358256e-06}, {"id": 755, "seek": 362262, "start": 3622.62, "end": 3628.4, "text": " This is moving over. It's taking each three by three area of pixels and here are the pixel values", "tokens": [639, 307, 2684, 670, 13, 467, 311, 1940, 1184, 1045, 538, 1045, 1859, 295, 18668, 293, 510, 366, 264, 19261, 4190], "temperature": 0.0, "avg_logprob": -0.16901003272788037, "compression_ratio": 1.9090909090909092, "no_speech_prob": 2.0261343252059305e-06}, {"id": 756, "seek": 362262, "start": 3628.7999999999997, "end": 3631.44, "text": " right for each thing in that three by three area and", "tokens": [558, 337, 1184, 551, 294, 300, 1045, 538, 1045, 1859, 293], "temperature": 0.0, "avg_logprob": -0.16901003272788037, "compression_ratio": 1.9090909090909092, "no_speech_prob": 2.0261343252059305e-06}, {"id": 757, "seek": 362262, "start": 3632.12, "end": 3637.3399999999997, "text": " It's multiplying each one of those three by three pixels by each one of these", "tokens": [467, 311, 30955, 1184, 472, 295, 729, 1045, 538, 1045, 18668, 538, 1184, 472, 295, 613], "temperature": 0.0, "avg_logprob": -0.16901003272788037, "compression_ratio": 1.9090909090909092, "no_speech_prob": 2.0261343252059305e-06}, {"id": 758, "seek": 362262, "start": 3638.68, "end": 3640.4, "text": " three by three", "tokens": [1045, 538, 1045], "temperature": 0.0, "avg_logprob": -0.16901003272788037, "compression_ratio": 1.9090909090909092, "no_speech_prob": 2.0261343252059305e-06}, {"id": 759, "seek": 362262, "start": 3640.4, "end": 3647.44, "text": " Kernel values in a convolution this specific set of nine values is called a kernel", "tokens": [40224, 338, 4190, 294, 257, 45216, 341, 2685, 992, 295, 4949, 4190, 307, 1219, 257, 28256], "temperature": 0.0, "avg_logprob": -0.16901003272788037, "compression_ratio": 1.9090909090909092, "no_speech_prob": 2.0261343252059305e-06}, {"id": 760, "seek": 364744, "start": 3647.44, "end": 3652.8, "text": " It doesn't have to be nine it could be four by four or five by five or two by two or whatever right?", "tokens": [467, 1177, 380, 362, 281, 312, 4949, 309, 727, 312, 1451, 538, 1451, 420, 1732, 538, 1732, 420, 732, 538, 732, 420, 2035, 558, 30], "temperature": 0.0, "avg_logprob": -0.1664778288974557, "compression_ratio": 1.7024390243902439, "no_speech_prob": 1.963800059456844e-06}, {"id": 761, "seek": 364744, "start": 3653.4, "end": 3658.8, "text": " In this case, it's a three by three kernel and in fact in deep learning nearly all of our kernels are three by three", "tokens": [682, 341, 1389, 11, 309, 311, 257, 1045, 538, 1045, 28256, 293, 294, 1186, 294, 2452, 2539, 6217, 439, 295, 527, 23434, 1625, 366, 1045, 538, 1045], "temperature": 0.0, "avg_logprob": -0.1664778288974557, "compression_ratio": 1.7024390243902439, "no_speech_prob": 1.963800059456844e-06}, {"id": 762, "seek": 364744, "start": 3660.0, "end": 3662.32, "text": " So in this case the kernel is one two one. Oh", "tokens": [407, 294, 341, 1389, 264, 28256, 307, 472, 732, 472, 13, 876], "temperature": 0.0, "avg_logprob": -0.1664778288974557, "compression_ratio": 1.7024390243902439, "no_speech_prob": 1.963800059456844e-06}, {"id": 763, "seek": 364744, "start": 3663.0, "end": 3667.28, "text": " minus one minus two minus one so we take each of the", "tokens": [3175, 472, 3175, 732, 3175, 472, 370, 321, 747, 1184, 295, 264], "temperature": 0.0, "avg_logprob": -0.1664778288974557, "compression_ratio": 1.7024390243902439, "no_speech_prob": 1.963800059456844e-06}, {"id": 764, "seek": 364744, "start": 3670.7200000000003, "end": 3673.38, "text": " Black through white pixel values", "tokens": [4076, 807, 2418, 19261, 4190], "temperature": 0.0, "avg_logprob": -0.1664778288974557, "compression_ratio": 1.7024390243902439, "no_speech_prob": 1.963800059456844e-06}, {"id": 765, "seek": 367338, "start": 3673.38, "end": 3677.92, "text": " and we multiply as you can see each of them by the corresponding value in the kernel and", "tokens": [293, 321, 12972, 382, 291, 393, 536, 1184, 295, 552, 538, 264, 11760, 2158, 294, 264, 28256, 293], "temperature": 0.0, "avg_logprob": -0.1779945723864497, "compression_ratio": 1.759090909090909, "no_speech_prob": 6.179386105031881e-07}, {"id": 766, "seek": 367338, "start": 3678.4, "end": 3680.48, "text": " then we add them all together and", "tokens": [550, 321, 909, 552, 439, 1214, 293], "temperature": 0.0, "avg_logprob": -0.1779945723864497, "compression_ratio": 1.759090909090909, "no_speech_prob": 6.179386105031881e-07}, {"id": 767, "seek": 367338, "start": 3681.6, "end": 3686.08, "text": " So if you do that for every three by three area you end up with", "tokens": [407, 498, 291, 360, 300, 337, 633, 1045, 538, 1045, 1859, 291, 917, 493, 365], "temperature": 0.0, "avg_logprob": -0.1779945723864497, "compression_ratio": 1.759090909090909, "no_speech_prob": 6.179386105031881e-07}, {"id": 768, "seek": 367338, "start": 3686.6400000000003, "end": 3689.04, "text": " The values that you see over here on the right hand side", "tokens": [440, 4190, 300, 291, 536, 670, 510, 322, 264, 558, 1011, 1252], "temperature": 0.0, "avg_logprob": -0.1779945723864497, "compression_ratio": 1.759090909090909, "no_speech_prob": 6.179386105031881e-07}, {"id": 769, "seek": 367338, "start": 3689.96, "end": 3692.84, "text": " Okay, so very low values become", "tokens": [1033, 11, 370, 588, 2295, 4190, 1813], "temperature": 0.0, "avg_logprob": -0.1779945723864497, "compression_ratio": 1.759090909090909, "no_speech_prob": 6.179386105031881e-07}, {"id": 770, "seek": 367338, "start": 3693.6800000000003, "end": 3702.0, "text": " black very high values become white and so you can see when we're at an edge where it's black at the bottom and", "tokens": [2211, 588, 1090, 4190, 1813, 2418, 293, 370, 291, 393, 536, 562, 321, 434, 412, 364, 4691, 689, 309, 311, 2211, 412, 264, 2767, 293], "temperature": 0.0, "avg_logprob": -0.1779945723864497, "compression_ratio": 1.759090909090909, "no_speech_prob": 6.179386105031881e-07}, {"id": 771, "seek": 370200, "start": 3702.0, "end": 3708.02, "text": " White at the top we're obviously going to get higher numbers over here and vice versa", "tokens": [5552, 412, 264, 1192, 321, 434, 2745, 516, 281, 483, 2946, 3547, 670, 510, 293, 11964, 25650], "temperature": 0.0, "avg_logprob": -0.2014232018981317, "compression_ratio": 1.7091633466135459, "no_speech_prob": 2.443984612909844e-06}, {"id": 772, "seek": 370200, "start": 3708.84, "end": 3710.84, "text": " Okay, so that's a convolution", "tokens": [1033, 11, 370, 300, 311, 257, 45216], "temperature": 0.0, "avg_logprob": -0.2014232018981317, "compression_ratio": 1.7091633466135459, "no_speech_prob": 2.443984612909844e-06}, {"id": 773, "seek": 370200, "start": 3711.88, "end": 3718.4, "text": " So as you can see it is a linear operation and so based on that definition of a neural net I described before", "tokens": [407, 382, 291, 393, 536, 309, 307, 257, 8213, 6916, 293, 370, 2361, 322, 300, 7123, 295, 257, 18161, 2533, 286, 7619, 949], "temperature": 0.0, "avg_logprob": -0.2014232018981317, "compression_ratio": 1.7091633466135459, "no_speech_prob": 2.443984612909844e-06}, {"id": 774, "seek": 370200, "start": 3718.56, "end": 3721.48, "text": " This can be a layer in our neural network", "tokens": [639, 393, 312, 257, 4583, 294, 527, 18161, 3209], "temperature": 0.0, "avg_logprob": -0.2014232018981317, "compression_ratio": 1.7091633466135459, "no_speech_prob": 2.443984612909844e-06}, {"id": 775, "seek": 370200, "start": 3721.56, "end": 3728.84, "text": " It is a simple linear operation and we're going to look at much more at convolutions later including building a little spreadsheet", "tokens": [467, 307, 257, 2199, 8213, 6916, 293, 321, 434, 516, 281, 574, 412, 709, 544, 412, 3754, 15892, 1780, 3009, 2390, 257, 707, 27733], "temperature": 0.0, "avg_logprob": -0.2014232018981317, "compression_ratio": 1.7091633466135459, "no_speech_prob": 2.443984612909844e-06}, {"id": 776, "seek": 370200, "start": 3729.52, "end": 3731.52, "text": " That implements them ourselves", "tokens": [663, 704, 17988, 552, 4175], "temperature": 0.0, "avg_logprob": -0.2014232018981317, "compression_ratio": 1.7091633466135459, "no_speech_prob": 2.443984612909844e-06}, {"id": 777, "seek": 373152, "start": 3731.52, "end": 3736.28, "text": " So the next thing we're going to do is we're going to add a nonlinear layer", "tokens": [407, 264, 958, 551, 321, 434, 516, 281, 360, 307, 321, 434, 516, 281, 909, 257, 2107, 28263, 4583], "temperature": 0.0, "avg_logprob": -0.16418724749461713, "compression_ratio": 1.8021390374331552, "no_speech_prob": 2.902300138885039e-06}, {"id": 778, "seek": 373152, "start": 3737.2, "end": 3744.08, "text": " so a nonlinearity as it's called is something which takes an input value and", "tokens": [370, 257, 2107, 1889, 17409, 382, 309, 311, 1219, 307, 746, 597, 2516, 364, 4846, 2158, 293], "temperature": 0.0, "avg_logprob": -0.16418724749461713, "compression_ratio": 1.8021390374331552, "no_speech_prob": 2.902300138885039e-06}, {"id": 779, "seek": 373152, "start": 3745.48, "end": 3752.24, "text": " Turns it into some different value in a nonlinear way and you can see this orange picture here is an example of a nonlinear", "tokens": [29524, 309, 666, 512, 819, 2158, 294, 257, 2107, 28263, 636, 293, 291, 393, 536, 341, 7671, 3036, 510, 307, 364, 1365, 295, 257, 2107, 28263], "temperature": 0.0, "avg_logprob": -0.16418724749461713, "compression_ratio": 1.8021390374331552, "no_speech_prob": 2.902300138885039e-06}, {"id": 780, "seek": 373152, "start": 3752.8, "end": 3756.08, "text": " function specifically this is something called a sigmoid and", "tokens": [2445, 4682, 341, 307, 746, 1219, 257, 4556, 3280, 327, 293], "temperature": 0.0, "avg_logprob": -0.16418724749461713, "compression_ratio": 1.8021390374331552, "no_speech_prob": 2.902300138885039e-06}, {"id": 781, "seek": 375608, "start": 3756.08, "end": 3762.68, "text": " So a sigmoid is something that has this kind of s-shape and this is what we used to use as our", "tokens": [407, 257, 4556, 3280, 327, 307, 746, 300, 575, 341, 733, 295, 262, 12, 82, 42406, 293, 341, 307, 437, 321, 1143, 281, 764, 382, 527], "temperature": 0.0, "avg_logprob": -0.1863676296767368, "compression_ratio": 1.658008658008658, "no_speech_prob": 2.5215601908712415e-06}, {"id": 782, "seek": 375608, "start": 3763.04, "end": 3771.44, "text": " Nonlinearities in neural networks a lot actually nowadays. We nearly entirely use something else called a relu or rectified linear unit", "tokens": [8774, 28263, 1088, 294, 18161, 9590, 257, 688, 767, 13434, 13, 492, 6217, 7696, 764, 746, 1646, 1219, 257, 1039, 84, 420, 11048, 2587, 8213, 4985], "temperature": 0.0, "avg_logprob": -0.1863676296767368, "compression_ratio": 1.658008658008658, "no_speech_prob": 2.5215601908712415e-06}, {"id": 783, "seek": 375608, "start": 3772.16, "end": 3778.36, "text": " a relu is simply take any negative numbers and replace them with zero and", "tokens": [257, 1039, 84, 307, 2935, 747, 604, 3671, 3547, 293, 7406, 552, 365, 4018, 293], "temperature": 0.0, "avg_logprob": -0.1863676296767368, "compression_ratio": 1.658008658008658, "no_speech_prob": 2.5215601908712415e-06}, {"id": 784, "seek": 375608, "start": 3778.68, "end": 3784.04, "text": " Leave any positive numbers as they are so in other words in code that would be", "tokens": [9825, 604, 3353, 3547, 382, 436, 366, 370, 294, 661, 2283, 294, 3089, 300, 576, 312], "temperature": 0.0, "avg_logprob": -0.1863676296767368, "compression_ratio": 1.658008658008658, "no_speech_prob": 2.5215601908712415e-06}, {"id": 785, "seek": 378404, "start": 3784.04, "end": 3786.04, "text": " Y", "tokens": [398], "temperature": 0.0, "avg_logprob": -0.30785292285983845, "compression_ratio": 1.4671052631578947, "no_speech_prob": 1.873869109658699e-06}, {"id": 786, "seek": 378404, "start": 3786.36, "end": 3792.6, "text": " Equals max x comma zero so max x comma zero simply says", "tokens": [15624, 1124, 11469, 2031, 22117, 4018, 370, 11469, 2031, 22117, 4018, 2935, 1619], "temperature": 0.0, "avg_logprob": -0.30785292285983845, "compression_ratio": 1.4671052631578947, "no_speech_prob": 1.873869109658699e-06}, {"id": 787, "seek": 378404, "start": 3793.04, "end": 3795.48, "text": " Replace the negatives with zero", "tokens": [1300, 6742, 264, 40019, 365, 4018], "temperature": 0.0, "avg_logprob": -0.30785292285983845, "compression_ratio": 1.4671052631578947, "no_speech_prob": 1.873869109658699e-06}, {"id": 788, "seek": 378404, "start": 3799.12, "end": 3804.04, "text": " Um regardless of whether you use a sigmoid or a value or something else", "tokens": [3301, 10060, 295, 1968, 291, 764, 257, 4556, 3280, 327, 420, 257, 2158, 420, 746, 1646], "temperature": 0.0, "avg_logprob": -0.30785292285983845, "compression_ratio": 1.4671052631578947, "no_speech_prob": 1.873869109658699e-06}, {"id": 789, "seek": 378404, "start": 3804.84, "end": 3809.12, "text": " The key point about taking this combination of a linear layer", "tokens": [440, 2141, 935, 466, 1940, 341, 6562, 295, 257, 8213, 4583], "temperature": 0.0, "avg_logprob": -0.30785292285983845, "compression_ratio": 1.4671052631578947, "no_speech_prob": 1.873869109658699e-06}, {"id": 790, "seek": 380912, "start": 3809.12, "end": 3814.96, "text": " Followed by a element wise nonlinear function is that it allows us to create", "tokens": [9876, 292, 538, 257, 4478, 10829, 2107, 28263, 2445, 307, 300, 309, 4045, 505, 281, 1884], "temperature": 0.0, "avg_logprob": -0.22919019838658775, "compression_ratio": 1.6205357142857142, "no_speech_prob": 1.7880578297990724e-06}, {"id": 791, "seek": 380912, "start": 3815.4, "end": 3818.4, "text": " arbitrarily complex shapes as you see in the bottom right and", "tokens": [19071, 3289, 3997, 10854, 382, 291, 536, 294, 264, 2767, 558, 293], "temperature": 0.0, "avg_logprob": -0.22919019838658775, "compression_ratio": 1.6205357142857142, "no_speech_prob": 1.7880578297990724e-06}, {"id": 792, "seek": 380912, "start": 3818.88, "end": 3826.7799999999997, "text": " The reason why is that and this is all from Michael Nielsen's neural networks and deep learning calm really fantastic", "tokens": [440, 1778, 983, 307, 300, 293, 341, 307, 439, 490, 5116, 426, 1187, 6748, 311, 18161, 9590, 293, 2452, 2539, 7151, 534, 5456], "temperature": 0.0, "avg_logprob": -0.22919019838658775, "compression_ratio": 1.6205357142857142, "no_speech_prob": 1.7880578297990724e-06}, {"id": 793, "seek": 380912, "start": 3827.08, "end": 3833.2799999999997, "text": " interactive book as you change the values of your linear functions", "tokens": [15141, 1446, 382, 291, 1319, 264, 4190, 295, 428, 8213, 6828], "temperature": 0.0, "avg_logprob": -0.22919019838658775, "compression_ratio": 1.6205357142857142, "no_speech_prob": 1.7880578297990724e-06}, {"id": 794, "seek": 380912, "start": 3834.24, "end": 3836.52, "text": " it basically allows you to kind of like", "tokens": [309, 1936, 4045, 291, 281, 733, 295, 411], "temperature": 0.0, "avg_logprob": -0.22919019838658775, "compression_ratio": 1.6205357142857142, "no_speech_prob": 1.7880578297990724e-06}, {"id": 795, "seek": 383652, "start": 3836.52, "end": 3842.28, "text": " Build these arbitrarily tall or thin blocks and then combine those blocks together", "tokens": [11875, 613, 19071, 3289, 6764, 420, 5862, 8474, 293, 550, 10432, 729, 8474, 1214], "temperature": 0.0, "avg_logprob": -0.16471079776161596, "compression_ratio": 1.6912442396313363, "no_speech_prob": 1.6536851035198197e-06}, {"id": 796, "seek": 383652, "start": 3843.04, "end": 3850.44, "text": " And this is actually the essence of the universal approximation theorem this idea that when you have a linear layer", "tokens": [400, 341, 307, 767, 264, 12801, 295, 264, 11455, 28023, 20904, 341, 1558, 300, 562, 291, 362, 257, 8213, 4583], "temperature": 0.0, "avg_logprob": -0.16471079776161596, "compression_ratio": 1.6912442396313363, "no_speech_prob": 1.6536851035198197e-06}, {"id": 797, "seek": 383652, "start": 3850.84, "end": 3855.62, "text": " Feeding into a nonlinearity you can actually create these arbitrarily complex shapes", "tokens": [3697, 9794, 666, 257, 2107, 1889, 17409, 291, 393, 767, 1884, 613, 19071, 3289, 3997, 10854], "temperature": 0.0, "avg_logprob": -0.16471079776161596, "compression_ratio": 1.6912442396313363, "no_speech_prob": 1.6536851035198197e-06}, {"id": 798, "seek": 383652, "start": 3856.16, "end": 3862.6, "text": " So this is the key idea behind why neural networks can solve any computable problem", "tokens": [407, 341, 307, 264, 2141, 1558, 2261, 983, 18161, 9590, 393, 5039, 604, 2807, 712, 1154], "temperature": 0.0, "avg_logprob": -0.16471079776161596, "compression_ratio": 1.6912442396313363, "no_speech_prob": 1.6536851035198197e-06}, {"id": 799, "seek": 386260, "start": 3862.6, "end": 3868.6, "text": " So then we need a way as we described to actually", "tokens": [407, 550, 321, 643, 257, 636, 382, 321, 7619, 281, 767], "temperature": 0.0, "avg_logprob": -0.17362822762018518, "compression_ratio": 1.6333333333333333, "no_speech_prob": 4.289297976356465e-06}, {"id": 800, "seek": 386260, "start": 3870.8399999999997, "end": 3876.52, "text": " Set these parameters, so it's all very well knowing that we can move the parameters around manually to try to", "tokens": [8928, 613, 9834, 11, 370, 309, 311, 439, 588, 731, 5276, 300, 321, 393, 1286, 264, 9834, 926, 16945, 281, 853, 281], "temperature": 0.0, "avg_logprob": -0.17362822762018518, "compression_ratio": 1.6333333333333333, "no_speech_prob": 4.289297976356465e-06}, {"id": 801, "seek": 386260, "start": 3877.6, "end": 3882.96, "text": " Create different shapes, but we have some specific shape. We want how do we get to that shape and", "tokens": [20248, 819, 10854, 11, 457, 321, 362, 512, 2685, 3909, 13, 492, 528, 577, 360, 321, 483, 281, 300, 3909, 293], "temperature": 0.0, "avg_logprob": -0.17362822762018518, "compression_ratio": 1.6333333333333333, "no_speech_prob": 4.289297976356465e-06}, {"id": 802, "seek": 386260, "start": 3883.56, "end": 3888.2799999999997, "text": " So as we discussed earlier the basic idea is to use something called gradient descent", "tokens": [407, 382, 321, 7152, 3071, 264, 3875, 1558, 307, 281, 764, 746, 1219, 16235, 23475], "temperature": 0.0, "avg_logprob": -0.17362822762018518, "compression_ratio": 1.6333333333333333, "no_speech_prob": 4.289297976356465e-06}, {"id": 803, "seek": 388828, "start": 3888.28, "end": 3893.6400000000003, "text": " This is an extract from a notebook actually one of the fast AI lessons", "tokens": [639, 307, 364, 8947, 490, 257, 21060, 767, 472, 295, 264, 2370, 7318, 8820], "temperature": 0.0, "avg_logprob": -0.16477111766212865, "compression_ratio": 1.5523809523809524, "no_speech_prob": 9.874623856376274e-07}, {"id": 804, "seek": 388828, "start": 3894.44, "end": 3901.5600000000004, "text": " And it shows actually an example of using gradient descent to solve a simple linear regression problem", "tokens": [400, 309, 3110, 767, 364, 1365, 295, 1228, 16235, 23475, 281, 5039, 257, 2199, 8213, 24590, 1154], "temperature": 0.0, "avg_logprob": -0.16477111766212865, "compression_ratio": 1.5523809523809524, "no_speech_prob": 9.874623856376274e-07}, {"id": 805, "seek": 388828, "start": 3902.96, "end": 3907.7400000000002, "text": " But I can show you the basic idea. Let's say you were just you had a simple", "tokens": [583, 286, 393, 855, 291, 264, 3875, 1558, 13, 961, 311, 584, 291, 645, 445, 291, 632, 257, 2199], "temperature": 0.0, "avg_logprob": -0.16477111766212865, "compression_ratio": 1.5523809523809524, "no_speech_prob": 9.874623856376274e-07}, {"id": 806, "seek": 388828, "start": 3911.0, "end": 3913.0, "text": " Quadratic right and", "tokens": [29619, 25198, 558, 293], "temperature": 0.0, "avg_logprob": -0.16477111766212865, "compression_ratio": 1.5523809523809524, "no_speech_prob": 9.874623856376274e-07}, {"id": 807, "seek": 391300, "start": 3913.0, "end": 3920.52, "text": " So you were trying to find the minimum of this quadratic and so in order to find the minimum", "tokens": [407, 291, 645, 1382, 281, 915, 264, 7285, 295, 341, 37262, 293, 370, 294, 1668, 281, 915, 264, 7285], "temperature": 0.0, "avg_logprob": -0.13522121393791983, "compression_ratio": 1.8820960698689957, "no_speech_prob": 4.157348030275898e-06}, {"id": 808, "seek": 391300, "start": 3921.04, "end": 3925.44, "text": " You start out by randomly picking some point right so we'll say okay", "tokens": [509, 722, 484, 538, 16979, 8867, 512, 935, 558, 370, 321, 603, 584, 1392], "temperature": 0.0, "avg_logprob": -0.13522121393791983, "compression_ratio": 1.8820960698689957, "no_speech_prob": 4.157348030275898e-06}, {"id": 809, "seek": 391300, "start": 3925.44, "end": 3931.64, "text": " Let's pick let's pick here, and so you go up there, and you calculate the value of your quadratic at that point", "tokens": [961, 311, 1888, 718, 311, 1888, 510, 11, 293, 370, 291, 352, 493, 456, 11, 293, 291, 8873, 264, 2158, 295, 428, 37262, 412, 300, 935], "temperature": 0.0, "avg_logprob": -0.13522121393791983, "compression_ratio": 1.8820960698689957, "no_speech_prob": 4.157348030275898e-06}, {"id": 810, "seek": 391300, "start": 3932.32, "end": 3935.92, "text": " So what you now want to do is try to find a slightly better point", "tokens": [407, 437, 291, 586, 528, 281, 360, 307, 853, 281, 915, 257, 4748, 1101, 935], "temperature": 0.0, "avg_logprob": -0.13522121393791983, "compression_ratio": 1.8820960698689957, "no_speech_prob": 4.157348030275898e-06}, {"id": 811, "seek": 393592, "start": 3935.92, "end": 3942.84, "text": " So what you could do is you can move a little bit to the left and a little bit to the right", "tokens": [407, 437, 291, 727, 360, 307, 291, 393, 1286, 257, 707, 857, 281, 264, 1411, 293, 257, 707, 857, 281, 264, 558], "temperature": 0.0, "avg_logprob": -0.13554881867908297, "compression_ratio": 1.8524590163934427, "no_speech_prob": 6.08358448062063e-07}, {"id": 812, "seek": 393592, "start": 3943.12, "end": 3948.4, "text": " To find out which direction is down and what you'll find out is that moving a little bit to the left", "tokens": [1407, 915, 484, 597, 3513, 307, 760, 293, 437, 291, 603, 915, 484, 307, 300, 2684, 257, 707, 857, 281, 264, 1411], "temperature": 0.0, "avg_logprob": -0.13554881867908297, "compression_ratio": 1.8524590163934427, "no_speech_prob": 6.08358448062063e-07}, {"id": 813, "seek": 393592, "start": 3949.08, "end": 3955.2000000000003, "text": " Decreases the value of the function so that looks good right and so in other words. We're calculating the", "tokens": [12427, 265, 1957, 264, 2158, 295, 264, 2445, 370, 300, 1542, 665, 558, 293, 370, 294, 661, 2283, 13, 492, 434, 28258, 264], "temperature": 0.0, "avg_logprob": -0.13554881867908297, "compression_ratio": 1.8524590163934427, "no_speech_prob": 6.08358448062063e-07}, {"id": 814, "seek": 393592, "start": 3956.16, "end": 3959.16, "text": " derivative of the function at that point", "tokens": [13760, 295, 264, 2445, 412, 300, 935], "temperature": 0.0, "avg_logprob": -0.13554881867908297, "compression_ratio": 1.8524590163934427, "no_speech_prob": 6.08358448062063e-07}, {"id": 815, "seek": 395916, "start": 3959.16, "end": 3964.7999999999997, "text": " And so that tells you which way is down", "tokens": [400, 370, 300, 5112, 291, 597, 636, 307, 760], "temperature": 0.0, "avg_logprob": -0.15326868404041638, "compression_ratio": 1.9333333333333333, "no_speech_prob": 2.6841944418265484e-06}, {"id": 816, "seek": 395916, "start": 3964.7999999999997, "end": 3971.3599999999997, "text": " It's the gradient and so now that we know that going to the left is down. We can take a small step in", "tokens": [467, 311, 264, 16235, 293, 370, 586, 300, 321, 458, 300, 516, 281, 264, 1411, 307, 760, 13, 492, 393, 747, 257, 1359, 1823, 294], "temperature": 0.0, "avg_logprob": -0.15326868404041638, "compression_ratio": 1.9333333333333333, "no_speech_prob": 2.6841944418265484e-06}, {"id": 817, "seek": 395916, "start": 3972.08, "end": 3973.8399999999997, "text": " that direction", "tokens": [300, 3513], "temperature": 0.0, "avg_logprob": -0.15326868404041638, "compression_ratio": 1.9333333333333333, "no_speech_prob": 2.6841944418265484e-06}, {"id": 818, "seek": 395916, "start": 3973.8399999999997, "end": 3978.72, "text": " To create a new point and then we can repeat the process and say okay", "tokens": [1407, 1884, 257, 777, 935, 293, 550, 321, 393, 7149, 264, 1399, 293, 584, 1392], "temperature": 0.0, "avg_logprob": -0.15326868404041638, "compression_ratio": 1.9333333333333333, "no_speech_prob": 2.6841944418265484e-06}, {"id": 819, "seek": 395916, "start": 3978.72, "end": 3986.2799999999997, "text": " Which way is down now and we can now take another step and another step and another step another step another step, okay?", "tokens": [3013, 636, 307, 760, 586, 293, 321, 393, 586, 747, 1071, 1823, 293, 1071, 1823, 293, 1071, 1823, 1071, 1823, 1071, 1823, 11, 1392, 30], "temperature": 0.0, "avg_logprob": -0.15326868404041638, "compression_ratio": 1.9333333333333333, "no_speech_prob": 2.6841944418265484e-06}, {"id": 820, "seek": 398628, "start": 3986.28, "end": 3988.84, "text": " And each time we're getting closer and closer", "tokens": [400, 1184, 565, 321, 434, 1242, 4966, 293, 4966], "temperature": 0.0, "avg_logprob": -0.20711925361729874, "compression_ratio": 1.6120218579234973, "no_speech_prob": 8.579220889259886e-07}, {"id": 821, "seek": 398628, "start": 3989.6000000000004, "end": 3994.44, "text": " So the basic approach here is to say okay. We start we're at some point", "tokens": [407, 264, 3875, 3109, 510, 307, 281, 584, 1392, 13, 492, 722, 321, 434, 412, 512, 935], "temperature": 0.0, "avg_logprob": -0.20711925361729874, "compression_ratio": 1.6120218579234973, "no_speech_prob": 8.579220889259886e-07}, {"id": 822, "seek": 398628, "start": 3994.6800000000003, "end": 4001.1600000000003, "text": " We've got some value X which is our current guess right that that time step n", "tokens": [492, 600, 658, 512, 2158, 1783, 597, 307, 527, 2190, 2041, 558, 300, 300, 565, 1823, 297], "temperature": 0.0, "avg_logprob": -0.20711925361729874, "compression_ratio": 1.6120218579234973, "no_speech_prob": 8.579220889259886e-07}, {"id": 823, "seek": 398628, "start": 4001.6400000000003, "end": 4007.5600000000004, "text": " So then our new guess at time step n plus 1 is just equal to our previous guess", "tokens": [407, 550, 527, 777, 2041, 412, 565, 1823, 297, 1804, 502, 307, 445, 2681, 281, 527, 3894, 2041], "temperature": 0.0, "avg_logprob": -0.20711925361729874, "compression_ratio": 1.6120218579234973, "no_speech_prob": 8.579220889259886e-07}, {"id": 824, "seek": 398628, "start": 4008.44, "end": 4009.7200000000003, "text": " plus", "tokens": [1804], "temperature": 0.0, "avg_logprob": -0.20711925361729874, "compression_ratio": 1.6120218579234973, "no_speech_prob": 8.579220889259886e-07}, {"id": 825, "seek": 398628, "start": 4009.7200000000003, "end": 4010.8, "text": " the", "tokens": [264], "temperature": 0.0, "avg_logprob": -0.20711925361729874, "compression_ratio": 1.6120218579234973, "no_speech_prob": 8.579220889259886e-07}, {"id": 826, "seek": 401080, "start": 4010.8, "end": 4016.8, "text": " derivative right", "tokens": [13760, 558], "temperature": 0.0, "avg_logprob": -0.13936207511208273, "compression_ratio": 1.7421052631578948, "no_speech_prob": 9.570823067406309e-07}, {"id": 827, "seek": 401080, "start": 4017.76, "end": 4019.76, "text": " times", "tokens": [1413], "temperature": 0.0, "avg_logprob": -0.13936207511208273, "compression_ratio": 1.7421052631578948, "no_speech_prob": 9.570823067406309e-07}, {"id": 828, "seek": 401080, "start": 4020.2400000000002, "end": 4022.92, "text": " Some small number because we want to take a small step", "tokens": [2188, 1359, 1230, 570, 321, 528, 281, 747, 257, 1359, 1823], "temperature": 0.0, "avg_logprob": -0.13936207511208273, "compression_ratio": 1.7421052631578948, "no_speech_prob": 9.570823067406309e-07}, {"id": 829, "seek": 401080, "start": 4023.84, "end": 4029.26, "text": " We need to pick a small number because if we picked a big number right then we say okay", "tokens": [492, 643, 281, 1888, 257, 1359, 1230, 570, 498, 321, 6183, 257, 955, 1230, 558, 550, 321, 584, 1392], "temperature": 0.0, "avg_logprob": -0.13936207511208273, "compression_ratio": 1.7421052631578948, "no_speech_prob": 9.570823067406309e-07}, {"id": 830, "seek": 401080, "start": 4029.26, "end": 4032.92, "text": " We know we want to go to the left. Let's jump a big long way to the left", "tokens": [492, 458, 321, 528, 281, 352, 281, 264, 1411, 13, 961, 311, 3012, 257, 955, 938, 636, 281, 264, 1411], "temperature": 0.0, "avg_logprob": -0.13936207511208273, "compression_ratio": 1.7421052631578948, "no_speech_prob": 9.570823067406309e-07}, {"id": 831, "seek": 401080, "start": 4032.92, "end": 4038.36, "text": " We could go all the way over here and we actually end up worse right and then we do it again", "tokens": [492, 727, 352, 439, 264, 636, 670, 510, 293, 321, 767, 917, 493, 5324, 558, 293, 550, 321, 360, 309, 797], "temperature": 0.0, "avg_logprob": -0.13936207511208273, "compression_ratio": 1.7421052631578948, "no_speech_prob": 9.570823067406309e-07}, {"id": 832, "seek": 403836, "start": 4038.36, "end": 4039.6400000000003, "text": " now", "tokens": [586], "temperature": 0.0, "avg_logprob": -0.189384244737171, "compression_ratio": 1.7, "no_speech_prob": 1.2098640809199424e-06}, {"id": 833, "seek": 403836, "start": 4039.6400000000003, "end": 4044.32, "text": " or even worse again, right so if you have too high a", "tokens": [420, 754, 5324, 797, 11, 558, 370, 498, 291, 362, 886, 1090, 257], "temperature": 0.0, "avg_logprob": -0.189384244737171, "compression_ratio": 1.7, "no_speech_prob": 1.2098640809199424e-06}, {"id": 834, "seek": 403836, "start": 4046.0, "end": 4051.04, "text": " Step size you can actually end up with divergence rather than convergence", "tokens": [5470, 2744, 291, 393, 767, 917, 493, 365, 47387, 2831, 813, 32181], "temperature": 0.0, "avg_logprob": -0.189384244737171, "compression_ratio": 1.7, "no_speech_prob": 1.2098640809199424e-06}, {"id": 835, "seek": 403836, "start": 4051.48, "end": 4052.96, "text": " So this number here", "tokens": [407, 341, 1230, 510], "temperature": 0.0, "avg_logprob": -0.189384244737171, "compression_ratio": 1.7, "no_speech_prob": 1.2098640809199424e-06}, {"id": 836, "seek": 403836, "start": 4052.96, "end": 4057.32, "text": " We're going to be talking about it a lot during this course and we're going to be writing all this stuff out in code from", "tokens": [492, 434, 516, 281, 312, 1417, 466, 309, 257, 688, 1830, 341, 1164, 293, 321, 434, 516, 281, 312, 3579, 439, 341, 1507, 484, 294, 3089, 490], "temperature": 0.0, "avg_logprob": -0.189384244737171, "compression_ratio": 1.7, "no_speech_prob": 1.2098640809199424e-06}, {"id": 837, "seek": 403836, "start": 4057.32, "end": 4060.96, "text": " Scratch ourselves, but this number here is called the learning rate", "tokens": [34944, 852, 4175, 11, 457, 341, 1230, 510, 307, 1219, 264, 2539, 3314], "temperature": 0.0, "avg_logprob": -0.189384244737171, "compression_ratio": 1.7, "no_speech_prob": 1.2098640809199424e-06}, {"id": 838, "seek": 406096, "start": 4060.96, "end": 4062.96, "text": " Okay", "tokens": [1033], "temperature": 0.0, "avg_logprob": -0.25262161723354404, "compression_ratio": 1.5153374233128833, "no_speech_prob": 2.9649010002685827e-07}, {"id": 839, "seek": 406096, "start": 4066.96, "end": 4068.96, "text": " So", "tokens": [407], "temperature": 0.0, "avg_logprob": -0.25262161723354404, "compression_ratio": 1.5153374233128833, "no_speech_prob": 2.9649010002685827e-07}, {"id": 840, "seek": 406096, "start": 4069.2400000000002, "end": 4070.56, "text": " You can see here", "tokens": [509, 393, 536, 510], "temperature": 0.0, "avg_logprob": -0.25262161723354404, "compression_ratio": 1.5153374233128833, "no_speech_prob": 2.9649010002685827e-07}, {"id": 841, "seek": 406096, "start": 4070.56, "end": 4078.76, "text": " This is an example of basically starting out with some random line and then using gradient descent to gradually make the line better and better and better", "tokens": [639, 307, 364, 1365, 295, 1936, 2891, 484, 365, 512, 4974, 1622, 293, 550, 1228, 16235, 23475, 281, 13145, 652, 264, 1622, 1101, 293, 1101, 293, 1101], "temperature": 0.0, "avg_logprob": -0.25262161723354404, "compression_ratio": 1.5153374233128833, "no_speech_prob": 2.9649010002685827e-07}, {"id": 842, "seek": 406096, "start": 4080.0, "end": 4084.68, "text": " So what happens when you combine these ideas right the convolution?", "tokens": [407, 437, 2314, 562, 291, 10432, 613, 3487, 558, 264, 45216, 30], "temperature": 0.0, "avg_logprob": -0.25262161723354404, "compression_ratio": 1.5153374233128833, "no_speech_prob": 2.9649010002685827e-07}, {"id": 843, "seek": 408468, "start": 4084.68, "end": 4092.48, "text": " The non-linearity and gradient descent because they're all tiny small simple little things it doesn't sound that exciting", "tokens": [440, 2107, 12, 1889, 17409, 293, 16235, 23475, 570, 436, 434, 439, 5870, 1359, 2199, 707, 721, 309, 1177, 380, 1626, 300, 4670], "temperature": 0.0, "avg_logprob": -0.17097896145236108, "compression_ratio": 1.4751381215469612, "no_speech_prob": 5.896407060390629e-07}, {"id": 844, "seek": 408468, "start": 4092.7999999999997, "end": 4096.62, "text": " But if you have enough of these kernels", "tokens": [583, 498, 291, 362, 1547, 295, 613, 23434, 1625], "temperature": 0.0, "avg_logprob": -0.17097896145236108, "compression_ratio": 1.4751381215469612, "no_speech_prob": 5.896407060390629e-07}, {"id": 845, "seek": 408468, "start": 4097.68, "end": 4101.12, "text": " Right with enough layers something really interesting happens", "tokens": [1779, 365, 1547, 7914, 746, 534, 1880, 2314], "temperature": 0.0, "avg_logprob": -0.17097896145236108, "compression_ratio": 1.4751381215469612, "no_speech_prob": 5.896407060390629e-07}, {"id": 846, "seek": 408468, "start": 4101.96, "end": 4103.96, "text": " And we can actually draw them", "tokens": [400, 321, 393, 767, 2642, 552], "temperature": 0.0, "avg_logprob": -0.17097896145236108, "compression_ratio": 1.4751381215469612, "no_speech_prob": 5.896407060390629e-07}, {"id": 847, "seek": 408468, "start": 4104.96, "end": 4106.96, "text": " so here's the", "tokens": [370, 510, 311, 264], "temperature": 0.0, "avg_logprob": -0.17097896145236108, "compression_ratio": 1.4751381215469612, "no_speech_prob": 5.896407060390629e-07}, {"id": 848, "seek": 410696, "start": 4106.96, "end": 4113.44, "text": " So this is a really interesting paper by Matt Seiler and Rob Fergus and what they did a few years ago", "tokens": [407, 341, 307, 257, 534, 1880, 3035, 538, 7397, 1100, 5441, 293, 5424, 36790, 293, 437, 436, 630, 257, 1326, 924, 2057], "temperature": 0.0, "avg_logprob": -0.4883430156301945, "compression_ratio": 1.7033898305084745, "no_speech_prob": 4.381833775823907e-07}, {"id": 849, "seek": 410696, "start": 4113.96, "end": 4120.6, "text": " Was they figured out how to basically draw a picture of what each layer in a deep learning network learned?", "tokens": [3027, 436, 8932, 484, 577, 281, 1936, 2642, 257, 3036, 295, 437, 1184, 4583, 294, 257, 2452, 2539, 3209, 3264, 30], "temperature": 0.0, "avg_logprob": -0.4883430156301945, "compression_ratio": 1.7033898305084745, "no_speech_prob": 4.381833775823907e-07}, {"id": 850, "seek": 410696, "start": 4121.44, "end": 4127.52, "text": " And so they showed that layer one of the network here are nine examples of", "tokens": [400, 370, 436, 4712, 300, 4583, 472, 295, 264, 3209, 510, 366, 4949, 5110, 295], "temperature": 0.0, "avg_logprob": -0.4883430156301945, "compression_ratio": 1.7033898305084745, "no_speech_prob": 4.381833775823907e-07}, {"id": 851, "seek": 410696, "start": 4128.2, "end": 4130.76, "text": " Convolution or filters from layer one of a trained network", "tokens": [2656, 85, 3386, 420, 15995, 490, 4583, 472, 295, 257, 8895, 3209], "temperature": 0.0, "avg_logprob": -0.4883430156301945, "compression_ratio": 1.7033898305084745, "no_speech_prob": 4.381833775823907e-07}, {"id": 852, "seek": 410696, "start": 4131.4800000000005, "end": 4132.18, "text": " And they found that some of the filters kind of lost their", "tokens": [400, 436, 1352, 300, 512, 295, 264, 15995, 733, 295, 2731, 641], "temperature": 0.0, "avg_logprob": -0.4883430156301945, "compression_ratio": 1.7033898305084745, "no_speech_prob": 4.381833775823907e-07}, {"id": 853, "seek": 413218, "start": 4132.18, "end": 4140.72, "text": " And they found that some of the filters kind of learnt these diagonal lines or simple little grid patterns", "tokens": [400, 436, 1352, 300, 512, 295, 264, 15995, 733, 295, 18991, 613, 21539, 3876, 420, 2199, 707, 10748, 8294], "temperature": 0.0, "avg_logprob": -0.2731207847595215, "compression_ratio": 1.8611111111111112, "no_speech_prob": 3.0415856144827558e-06}, {"id": 854, "seek": 413218, "start": 4140.96, "end": 4145.88, "text": " Some of them learnt these simple gradients right and so for each of these filters", "tokens": [2188, 295, 552, 18991, 613, 2199, 2771, 2448, 558, 293, 370, 337, 1184, 295, 613, 15995], "temperature": 0.0, "avg_logprob": -0.2731207847595215, "compression_ratio": 1.8611111111111112, "no_speech_prob": 3.0415856144827558e-06}, {"id": 855, "seek": 413218, "start": 4146.360000000001, "end": 4154.12, "text": " They show nine examples of little pieces of actual photos which activate that filter quite highly", "tokens": [814, 855, 4949, 5110, 295, 707, 3755, 295, 3539, 5787, 597, 13615, 300, 6608, 1596, 5405], "temperature": 0.0, "avg_logprob": -0.2731207847595215, "compression_ratio": 1.8611111111111112, "no_speech_prob": 3.0415856144827558e-06}, {"id": 856, "seek": 415412, "start": 4154.12, "end": 4162.72, "text": " All right, so you can see layer one these learnt remember these these are learnt using gradient descent these filters were not programmed", "tokens": [1057, 558, 11, 370, 291, 393, 536, 4583, 472, 613, 18991, 1604, 613, 613, 366, 18991, 1228, 16235, 23475, 613, 15995, 645, 406, 31092], "temperature": 0.0, "avg_logprob": -0.2166464366610088, "compression_ratio": 1.7975460122699387, "no_speech_prob": 3.4125770298487623e-07}, {"id": 857, "seek": 415412, "start": 4162.72, "end": 4167.4, "text": " They were learnt using gradient descent right so in other words we were learning", "tokens": [814, 645, 18991, 1228, 16235, 23475, 558, 370, 294, 661, 2283, 321, 645, 2539], "temperature": 0.0, "avg_logprob": -0.2166464366610088, "compression_ratio": 1.7975460122699387, "no_speech_prob": 3.4125770298487623e-07}, {"id": 858, "seek": 415412, "start": 4169.32, "end": 4172.96, "text": " These nine numbers", "tokens": [1981, 4949, 3547], "temperature": 0.0, "avg_logprob": -0.2166464366610088, "compression_ratio": 1.7975460122699387, "no_speech_prob": 3.4125770298487623e-07}, {"id": 859, "seek": 415412, "start": 4177.04, "end": 4181.32, "text": " So layer two then was going to take these as inputs and", "tokens": [407, 4583, 732, 550, 390, 516, 281, 747, 613, 382, 15743, 293], "temperature": 0.0, "avg_logprob": -0.2166464366610088, "compression_ratio": 1.7975460122699387, "no_speech_prob": 3.4125770298487623e-07}, {"id": 860, "seek": 418132, "start": 4181.32, "end": 4188.04, "text": " Combine them together and so layer two had you know this is like nine kind of attempts to draw", "tokens": [25939, 533, 552, 1214, 293, 370, 4583, 732, 632, 291, 458, 341, 307, 411, 4949, 733, 295, 15257, 281, 2642], "temperature": 0.0, "avg_logprob": -0.39056508437446924, "compression_ratio": 1.7412280701754386, "no_speech_prob": 7.934468726489285e-07}, {"id": 861, "seek": 418132, "start": 4188.04, "end": 4192.04, "text": " One of the examples as a filters in layer two they're pretty hard to draw", "tokens": [1485, 295, 264, 5110, 382, 257, 15995, 294, 4583, 732, 436, 434, 1238, 1152, 281, 2642], "temperature": 0.0, "avg_logprob": -0.39056508437446924, "compression_ratio": 1.7412280701754386, "no_speech_prob": 7.934468726489285e-07}, {"id": 862, "seek": 418132, "start": 4192.04, "end": 4195.04, "text": " But what you can do is say for each filter", "tokens": [583, 437, 291, 393, 360, 307, 584, 337, 1184, 6608], "temperature": 0.0, "avg_logprob": -0.39056508437446924, "compression_ratio": 1.7412280701754386, "no_speech_prob": 7.934468726489285e-07}, {"id": 863, "seek": 418132, "start": 4195.04, "end": 4202.04, "text": " What are examples of little bits of images that activated them and you can see by layer two we've got basically", "tokens": [708, 366, 5110, 295, 707, 9239, 295, 5267, 300, 18157, 552, 293, 291, 393, 536, 538, 4583, 732, 321, 600, 658, 1936], "temperature": 0.0, "avg_logprob": -0.39056508437446924, "compression_ratio": 1.7412280701754386, "no_speech_prob": 7.934468726489285e-07}, {"id": 864, "seek": 418132, "start": 4202.5199999999995, "end": 4206.04, "text": " Something that's being activated nearly entirely by little bits of sunset", "tokens": [6595, 300, 311, 885, 18157, 6217, 7696, 538, 707, 9239, 295, 20142], "temperature": 0.0, "avg_logprob": -0.39056508437446924, "compression_ratio": 1.7412280701754386, "no_speech_prob": 7.934468726489285e-07}, {"id": 865, "seek": 420604, "start": 4206.04, "end": 4212.44, "text": " Something that's being activated by circular objects something that's being activated by", "tokens": [6595, 300, 311, 885, 18157, 538, 16476, 6565, 746, 300, 311, 885, 18157, 538], "temperature": 0.0, "avg_logprob": -0.3464055742536272, "compression_ratio": 1.8756218905472637, "no_speech_prob": 1.7603358628548449e-06}, {"id": 866, "seek": 420604, "start": 4213.24, "end": 4219.68, "text": " Repeating horizontal lines something that's being activated by corners right so you can see how we're basically", "tokens": [24927, 990, 12750, 3876, 746, 300, 311, 885, 18157, 538, 12413, 558, 370, 291, 393, 536, 577, 321, 434, 1936], "temperature": 0.0, "avg_logprob": -0.3464055742536272, "compression_ratio": 1.8756218905472637, "no_speech_prob": 1.7603358628548449e-06}, {"id": 867, "seek": 420604, "start": 4220.16, "end": 4222.16, "text": " Combining layer one features together", "tokens": [25939, 1760, 4583, 472, 4122, 1214], "temperature": 0.0, "avg_logprob": -0.3464055742536272, "compression_ratio": 1.8756218905472637, "no_speech_prob": 1.7603358628548449e-06}, {"id": 868, "seek": 420604, "start": 4223.16, "end": 4226.44, "text": " So if we combine those features together and again these are all", "tokens": [407, 498, 321, 10432, 729, 4122, 1214, 293, 797, 613, 366, 439], "temperature": 0.0, "avg_logprob": -0.3464055742536272, "compression_ratio": 1.8756218905472637, "no_speech_prob": 1.7603358628548449e-06}, {"id": 869, "seek": 420604, "start": 4227.04, "end": 4231.56, "text": " Convolution or filters learnt through gradient descent by the third layer", "tokens": [2656, 85, 3386, 420, 15995, 18991, 807, 16235, 23475, 538, 264, 2636, 4583], "temperature": 0.0, "avg_logprob": -0.3464055742536272, "compression_ratio": 1.8756218905472637, "no_speech_prob": 1.7603358628548449e-06}, {"id": 870, "seek": 423156, "start": 4231.56, "end": 4236.240000000001, "text": " It's actually learnt to recognize the presence of text", "tokens": [467, 311, 767, 18991, 281, 5521, 264, 6814, 295, 2487], "temperature": 0.0, "avg_logprob": -0.3617123051693565, "compression_ratio": 1.9661016949152543, "no_speech_prob": 4.8604115363559686e-06}, {"id": 871, "seek": 423156, "start": 4236.64, "end": 4240.120000000001, "text": " Another filter has learnt to recognize the presence of petals", "tokens": [3996, 6608, 575, 18991, 281, 5521, 264, 6814, 295, 31530], "temperature": 0.0, "avg_logprob": -0.3617123051693565, "compression_ratio": 1.9661016949152543, "no_speech_prob": 4.8604115363559686e-06}, {"id": 872, "seek": 423156, "start": 4240.84, "end": 4248.280000000001, "text": " Another filter has learnt to recognize the presence of human faces right so just three layers is enough to get some pretty", "tokens": [3996, 6608, 575, 18991, 281, 5521, 264, 6814, 295, 1952, 8475, 558, 370, 445, 1045, 7914, 307, 1547, 281, 483, 512, 1238], "temperature": 0.0, "avg_logprob": -0.3617123051693565, "compression_ratio": 1.9661016949152543, "no_speech_prob": 4.8604115363559686e-06}, {"id": 873, "seek": 423156, "start": 4248.84, "end": 4250.280000000001, "text": " rich behavior", "tokens": [4593, 5223], "temperature": 0.0, "avg_logprob": -0.3617123051693565, "compression_ratio": 1.9661016949152543, "no_speech_prob": 4.8604115363559686e-06}, {"id": 874, "seek": 423156, "start": 4250.280000000001, "end": 4256.120000000001, "text": " So but by the time we get to layer five we've got something that can recognize the eyeballs of", "tokens": [407, 457, 538, 264, 565, 321, 483, 281, 4583, 1732, 321, 600, 658, 746, 300, 393, 5521, 264, 43758, 295], "temperature": 0.0, "avg_logprob": -0.3617123051693565, "compression_ratio": 1.9661016949152543, "no_speech_prob": 4.8604115363559686e-06}, {"id": 875, "seek": 425612, "start": 4256.12, "end": 4261.32, "text": " Insects and birds and something that can recognize unicycle wheels", "tokens": [682, 9632, 82, 293, 9009, 293, 746, 300, 393, 5521, 517, 2632, 2160, 10046], "temperature": 0.0, "avg_logprob": -0.4039337344285918, "compression_ratio": 1.5650224215246638, "no_speech_prob": 1.6028056961658876e-06}, {"id": 876, "seek": 425612, "start": 4261.8, "end": 4266.28, "text": " All right, so so this is kind of where we start with something", "tokens": [1057, 558, 11, 370, 370, 341, 307, 733, 295, 689, 321, 722, 365, 746], "temperature": 0.0, "avg_logprob": -0.4039337344285918, "compression_ratio": 1.5650224215246638, "no_speech_prob": 1.6028056961658876e-06}, {"id": 877, "seek": 425612, "start": 4267.16, "end": 4269.16, "text": " Incredibly simple right", "tokens": [27792, 3545, 2199, 558], "temperature": 0.0, "avg_logprob": -0.4039337344285918, "compression_ratio": 1.5650224215246638, "no_speech_prob": 1.6028056961658876e-06}, {"id": 878, "seek": 425612, "start": 4269.72, "end": 4272.28, "text": " But if we use it as a bit a big enough scale", "tokens": [583, 498, 321, 764, 309, 382, 257, 857, 257, 955, 1547, 4373], "temperature": 0.0, "avg_logprob": -0.4039337344285918, "compression_ratio": 1.5650224215246638, "no_speech_prob": 1.6028056961658876e-06}, {"id": 879, "seek": 425612, "start": 4272.76, "end": 4278.76, "text": " Thanks to the universal approximation theorem and the use of multiple hidden layers in deep learning", "tokens": [2561, 281, 264, 11455, 28023, 20904, 293, 264, 764, 295, 3866, 7633, 7914, 294, 2452, 2539], "temperature": 0.0, "avg_logprob": -0.4039337344285918, "compression_ratio": 1.5650224215246638, "no_speech_prob": 1.6028056961658876e-06}, {"id": 880, "seek": 425612, "start": 4279.5599999999995, "end": 4283.68, "text": " We actually get these very very rich capabilities", "tokens": [492, 767, 483, 613, 588, 588, 4593, 10862], "temperature": 0.0, "avg_logprob": -0.4039337344285918, "compression_ratio": 1.5650224215246638, "no_speech_prob": 1.6028056961658876e-06}, {"id": 881, "seek": 428368, "start": 4283.68, "end": 4286.04, "text": " Very very rich capabilities", "tokens": [4372, 588, 4593, 10862], "temperature": 0.0, "avg_logprob": -0.21071186065673828, "compression_ratio": 1.5956284153005464, "no_speech_prob": 6.681507329631131e-07}, {"id": 882, "seek": 428368, "start": 4287.12, "end": 4290.3, "text": " So that is what we used when we actually trained", "tokens": [407, 300, 307, 437, 321, 1143, 562, 321, 767, 8895], "temperature": 0.0, "avg_logprob": -0.21071186065673828, "compression_ratio": 1.5956284153005464, "no_speech_prob": 6.681507329631131e-07}, {"id": 883, "seek": 428368, "start": 4292.72, "end": 4296.4400000000005, "text": " Our little dog versus cat recognizer, right", "tokens": [2621, 707, 3000, 5717, 3857, 3068, 6545, 11, 558], "temperature": 0.0, "avg_logprob": -0.21071186065673828, "compression_ratio": 1.5956284153005464, "no_speech_prob": 6.681507329631131e-07}, {"id": 884, "seek": 428368, "start": 4299.200000000001, "end": 4301.200000000001, "text": " So", "tokens": [407], "temperature": 0.0, "avg_logprob": -0.21071186065673828, "compression_ratio": 1.5956284153005464, "no_speech_prob": 6.681507329631131e-07}, {"id": 885, "seek": 428368, "start": 4301.240000000001, "end": 4304.88, "text": " Let's talk more about this dog versus cat recognizer", "tokens": [961, 311, 751, 544, 466, 341, 3000, 5717, 3857, 3068, 6545], "temperature": 0.0, "avg_logprob": -0.21071186065673828, "compression_ratio": 1.5956284153005464, "no_speech_prob": 6.681507329631131e-07}, {"id": 886, "seek": 428368, "start": 4305.16, "end": 4310.900000000001, "text": " So we've learned the idea of like we can look at the pictures that come out of the other end to see what the models", "tokens": [407, 321, 600, 3264, 264, 1558, 295, 411, 321, 393, 574, 412, 264, 5242, 300, 808, 484, 295, 264, 661, 917, 281, 536, 437, 264, 5245], "temperature": 0.0, "avg_logprob": -0.21071186065673828, "compression_ratio": 1.5956284153005464, "no_speech_prob": 6.681507329631131e-07}, {"id": 887, "seek": 431090, "start": 4310.9, "end": 4314.82, "text": " Classifying well or classifying badly or which ones it's unsure about", "tokens": [9471, 5489, 731, 420, 1508, 5489, 13425, 420, 597, 2306, 309, 311, 32486, 466], "temperature": 0.0, "avg_logprob": -0.16638445854187012, "compression_ratio": 1.7709923664122138, "no_speech_prob": 3.5008372378797503e-06}, {"id": 888, "seek": 431090, "start": 4316.259999999999, "end": 4321.219999999999, "text": " But let's talk about like this key thing. I mentioned which is the learning rate", "tokens": [583, 718, 311, 751, 466, 411, 341, 2141, 551, 13, 286, 2835, 597, 307, 264, 2539, 3314], "temperature": 0.0, "avg_logprob": -0.16638445854187012, "compression_ratio": 1.7709923664122138, "no_speech_prob": 3.5008372378797503e-06}, {"id": 889, "seek": 431090, "start": 4321.219999999999, "end": 4323.5599999999995, "text": " So I mentioned we have to set this thing", "tokens": [407, 286, 2835, 321, 362, 281, 992, 341, 551], "temperature": 0.0, "avg_logprob": -0.16638445854187012, "compression_ratio": 1.7709923664122138, "no_speech_prob": 3.5008372378797503e-06}, {"id": 890, "seek": 431090, "start": 4323.5599999999995, "end": 4329.96, "text": " I just call it L before the learning rate and you might have noticed there's a couple of numbers these kind of magic numbers", "tokens": [286, 445, 818, 309, 441, 949, 264, 2539, 3314, 293, 291, 1062, 362, 5694, 456, 311, 257, 1916, 295, 3547, 613, 733, 295, 5585, 3547], "temperature": 0.0, "avg_logprob": -0.16638445854187012, "compression_ratio": 1.7709923664122138, "no_speech_prob": 3.5008372378797503e-06}, {"id": 891, "seek": 431090, "start": 4330.54, "end": 4334.46, "text": " Here the first one is the learning rate, right?", "tokens": [1692, 264, 700, 472, 307, 264, 2539, 3314, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.16638445854187012, "compression_ratio": 1.7709923664122138, "no_speech_prob": 3.5008372378797503e-06}, {"id": 892, "seek": 431090, "start": 4334.46, "end": 4340.0199999999995, "text": " So this number is how much do you want to multiply the gradient by when you're taking each step in?", "tokens": [407, 341, 1230, 307, 577, 709, 360, 291, 528, 281, 12972, 264, 16235, 538, 562, 291, 434, 1940, 1184, 1823, 294, 30], "temperature": 0.0, "avg_logprob": -0.16638445854187012, "compression_ratio": 1.7709923664122138, "no_speech_prob": 3.5008372378797503e-06}, {"id": 893, "seek": 434002, "start": 4340.02, "end": 4342.02, "text": " Your gradient descent", "tokens": [2260, 16235, 23475], "temperature": 0.0, "avg_logprob": -0.17365726124156605, "compression_ratio": 1.9475982532751093, "no_speech_prob": 2.225276375611429e-06}, {"id": 894, "seek": 434002, "start": 4343.38, "end": 4346.42, "text": " We already talked about why you wouldn't want it to be too high", "tokens": [492, 1217, 2825, 466, 983, 291, 2759, 380, 528, 309, 281, 312, 886, 1090], "temperature": 0.0, "avg_logprob": -0.17365726124156605, "compression_ratio": 1.9475982532751093, "no_speech_prob": 2.225276375611429e-06}, {"id": 895, "seek": 434002, "start": 4347.1, "end": 4353.540000000001, "text": " Right, but probably also it's obvious to see why you wouldn't want it to be too low, right? If you had it too low", "tokens": [1779, 11, 457, 1391, 611, 309, 311, 6322, 281, 536, 983, 291, 2759, 380, 528, 309, 281, 312, 886, 2295, 11, 558, 30, 759, 291, 632, 309, 886, 2295], "temperature": 0.0, "avg_logprob": -0.17365726124156605, "compression_ratio": 1.9475982532751093, "no_speech_prob": 2.225276375611429e-06}, {"id": 896, "seek": 434002, "start": 4354.820000000001, "end": 4360.540000000001, "text": " You would take like a little step and you'd be a little bit closer and a little bit step little step little step", "tokens": [509, 576, 747, 411, 257, 707, 1823, 293, 291, 1116, 312, 257, 707, 857, 4966, 293, 257, 707, 857, 1823, 707, 1823, 707, 1823], "temperature": 0.0, "avg_logprob": -0.17365726124156605, "compression_ratio": 1.9475982532751093, "no_speech_prob": 2.225276375611429e-06}, {"id": 897, "seek": 434002, "start": 4360.540000000001, "end": 4364.4800000000005, "text": " And it would take lots and lots and lots of steps and it would take too long", "tokens": [400, 309, 576, 747, 3195, 293, 3195, 293, 3195, 295, 4439, 293, 309, 576, 747, 886, 938], "temperature": 0.0, "avg_logprob": -0.17365726124156605, "compression_ratio": 1.9475982532751093, "no_speech_prob": 2.225276375611429e-06}, {"id": 898, "seek": 434002, "start": 4365.540000000001, "end": 4369.18, "text": " So setting this number well is actually really important", "tokens": [407, 3287, 341, 1230, 731, 307, 767, 534, 1021], "temperature": 0.0, "avg_logprob": -0.17365726124156605, "compression_ratio": 1.9475982532751093, "no_speech_prob": 2.225276375611429e-06}, {"id": 899, "seek": 436918, "start": 4369.18, "end": 4373.14, "text": " And for the longest time this was driving", "tokens": [400, 337, 264, 15438, 565, 341, 390, 4840], "temperature": 0.0, "avg_logprob": -0.2663465131793106, "compression_ratio": 1.53125, "no_speech_prob": 1.9333533600729425e-06}, {"id": 900, "seek": 436918, "start": 4373.820000000001, "end": 4377.54, "text": " deep learning research is crazy because they didn't really know a", "tokens": [2452, 2539, 2132, 307, 3219, 570, 436, 994, 380, 534, 458, 257], "temperature": 0.0, "avg_logprob": -0.2663465131793106, "compression_ratio": 1.53125, "no_speech_prob": 1.9333533600729425e-06}, {"id": 901, "seek": 436918, "start": 4378.46, "end": 4380.46, "text": " Good way to set this reliably", "tokens": [2205, 636, 281, 992, 341, 49927], "temperature": 0.0, "avg_logprob": -0.2663465131793106, "compression_ratio": 1.53125, "no_speech_prob": 1.9333533600729425e-06}, {"id": 902, "seek": 436918, "start": 4381.62, "end": 4390.88, "text": " So the good news is last year a researcher came up with an approach to quite reliably set the learning rate", "tokens": [407, 264, 665, 2583, 307, 1036, 1064, 257, 21751, 1361, 493, 365, 364, 3109, 281, 1596, 49927, 992, 264, 2539, 3314], "temperature": 0.0, "avg_logprob": -0.2663465131793106, "compression_ratio": 1.53125, "no_speech_prob": 1.9333533600729425e-06}, {"id": 903, "seek": 439088, "start": 4390.88, "end": 4399.7, "text": " Unfortunately almost nobody noticed so almost no deep learning research as I know about actually are aware of this approach", "tokens": [8590, 1920, 5079, 5694, 370, 1920, 572, 2452, 2539, 2132, 382, 286, 458, 466, 767, 366, 3650, 295, 341, 3109], "temperature": 0.0, "avg_logprob": -0.20847275257110595, "compression_ratio": 1.5947136563876652, "no_speech_prob": 5.539162089007732e-07}, {"id": 904, "seek": 439088, "start": 4400.68, "end": 4405.36, "text": " But it's incredibly successful and it's incredibly simple and I'll show you the idea", "tokens": [583, 309, 311, 6252, 4406, 293, 309, 311, 6252, 2199, 293, 286, 603, 855, 291, 264, 1558], "temperature": 0.0, "avg_logprob": -0.20847275257110595, "compression_ratio": 1.5947136563876652, "no_speech_prob": 5.539162089007732e-07}, {"id": 905, "seek": 439088, "start": 4406.16, "end": 4413.04, "text": " It's built into the fast AI library as something called LR find or the learning rate finder and it comes from this paper", "tokens": [467, 311, 3094, 666, 264, 2370, 7318, 6405, 382, 746, 1219, 441, 49, 915, 420, 264, 2539, 3314, 915, 260, 293, 309, 1487, 490, 341, 3035], "temperature": 0.0, "avg_logprob": -0.20847275257110595, "compression_ratio": 1.5947136563876652, "no_speech_prob": 5.539162089007732e-07}, {"id": 906, "seek": 439088, "start": 4413.4800000000005, "end": 4415.4800000000005, "text": " I was actually 2015 paper. Sorry", "tokens": [286, 390, 767, 7546, 3035, 13, 4919], "temperature": 0.0, "avg_logprob": -0.20847275257110595, "compression_ratio": 1.5947136563876652, "no_speech_prob": 5.539162089007732e-07}, {"id": 907, "seek": 441548, "start": 4415.48, "end": 4421.28, "text": " Cyclical learning rates for training neural networks by a terrific researcher called Leslie Smith and", "tokens": [49173, 804, 2539, 6846, 337, 3097, 18161, 9590, 538, 257, 20899, 21751, 1219, 28140, 8538, 293], "temperature": 0.0, "avg_logprob": -0.18929182593502217, "compression_ratio": 1.5260416666666667, "no_speech_prob": 3.726612703758292e-06}, {"id": 908, "seek": 441548, "start": 4422.32, "end": 4424.32, "text": " I'll show you Leslie's idea", "tokens": [286, 603, 855, 291, 28140, 311, 1558], "temperature": 0.0, "avg_logprob": -0.18929182593502217, "compression_ratio": 1.5260416666666667, "no_speech_prob": 3.726612703758292e-06}, {"id": 909, "seek": 441548, "start": 4428.16, "end": 4433.12, "text": " So Leslie's idea started out with the same basic idea that we've seen before", "tokens": [407, 28140, 311, 1558, 1409, 484, 365, 264, 912, 3875, 1558, 300, 321, 600, 1612, 949], "temperature": 0.0, "avg_logprob": -0.18929182593502217, "compression_ratio": 1.5260416666666667, "no_speech_prob": 3.726612703758292e-06}, {"id": 910, "seek": 441548, "start": 4433.48, "end": 4437.599999999999, "text": " Which is if we're going to optimize something pick some random point", "tokens": [3013, 307, 498, 321, 434, 516, 281, 19719, 746, 1888, 512, 4974, 935], "temperature": 0.0, "avg_logprob": -0.18929182593502217, "compression_ratio": 1.5260416666666667, "no_speech_prob": 3.726612703758292e-06}, {"id": 911, "seek": 441548, "start": 4438.5, "end": 4440.5, "text": " Take its gradient", "tokens": [3664, 1080, 16235], "temperature": 0.0, "avg_logprob": -0.18929182593502217, "compression_ratio": 1.5260416666666667, "no_speech_prob": 3.726612703758292e-06}, {"id": 912, "seek": 444050, "start": 4440.5, "end": 4445.74, "text": " All right, and then specifically he said take a tiny tiny step", "tokens": [1057, 558, 11, 293, 550, 4682, 415, 848, 747, 257, 5870, 5870, 1823], "temperature": 0.0, "avg_logprob": -0.2543817717453529, "compression_ratio": 1.8360655737704918, "no_speech_prob": 3.288728976258426e-06}, {"id": 913, "seek": 444050, "start": 4447.78, "end": 4451.8, "text": " Like tiny step so a learning rate of like 10 e next seven", "tokens": [1743, 5870, 1823, 370, 257, 2539, 3314, 295, 411, 1266, 308, 958, 3407], "temperature": 0.0, "avg_logprob": -0.2543817717453529, "compression_ratio": 1.8360655737704918, "no_speech_prob": 3.288728976258426e-06}, {"id": 914, "seek": 444050, "start": 4452.3, "end": 4458.26, "text": " All right, and then do it again again, but each time increase the learning rate like double it", "tokens": [1057, 558, 11, 293, 550, 360, 309, 797, 797, 11, 457, 1184, 565, 3488, 264, 2539, 3314, 411, 3834, 309], "temperature": 0.0, "avg_logprob": -0.2543817717453529, "compression_ratio": 1.8360655737704918, "no_speech_prob": 3.288728976258426e-06}, {"id": 915, "seek": 444050, "start": 4458.26, "end": 4462.98, "text": " So then we try like 2 e next seven four e next seven eight e next seven", "tokens": [407, 550, 321, 853, 411, 568, 308, 958, 3407, 1451, 308, 958, 3407, 3180, 308, 958, 3407], "temperature": 0.0, "avg_logprob": -0.2543817717453529, "compression_ratio": 1.8360655737704918, "no_speech_prob": 3.288728976258426e-06}, {"id": 916, "seek": 444050, "start": 4463.66, "end": 4466.62, "text": " Ten e next six right and so gradually", "tokens": [9380, 308, 958, 2309, 558, 293, 370, 13145], "temperature": 0.0, "avg_logprob": -0.2543817717453529, "compression_ratio": 1.8360655737704918, "no_speech_prob": 3.288728976258426e-06}, {"id": 917, "seek": 444050, "start": 4467.54, "end": 4469.34, "text": " your steps", "tokens": [428, 4439], "temperature": 0.0, "avg_logprob": -0.2543817717453529, "compression_ratio": 1.8360655737704918, "no_speech_prob": 3.288728976258426e-06}, {"id": 918, "seek": 446934, "start": 4469.34, "end": 4471.78, "text": " Are getting bigger and bigger?", "tokens": [2014, 1242, 3801, 293, 3801, 30], "temperature": 0.0, "avg_logprob": -0.25946998596191406, "compression_ratio": 1.7487437185929648, "no_speech_prob": 2.6016055016953032e-06}, {"id": 919, "seek": 446934, "start": 4473.5, "end": 4476.78, "text": " Right and so you can see what's going to happen. It's going to like", "tokens": [1779, 293, 370, 291, 393, 536, 437, 311, 516, 281, 1051, 13, 467, 311, 516, 281, 411], "temperature": 0.0, "avg_logprob": -0.25946998596191406, "compression_ratio": 1.7487437185929648, "no_speech_prob": 2.6016055016953032e-06}, {"id": 920, "seek": 446934, "start": 4477.46, "end": 4483.7, "text": " Start doing almost nothing right and it's going to then suddenly the loss function is going to improve very quickly", "tokens": [6481, 884, 1920, 1825, 558, 293, 309, 311, 516, 281, 550, 5800, 264, 4470, 2445, 307, 516, 281, 3470, 588, 2661], "temperature": 0.0, "avg_logprob": -0.25946998596191406, "compression_ratio": 1.7487437185929648, "no_speech_prob": 2.6016055016953032e-06}, {"id": 921, "seek": 446934, "start": 4484.26, "end": 4487.1, "text": " Right, but then it's going to step even further again", "tokens": [1779, 11, 457, 550, 309, 311, 516, 281, 1823, 754, 3052, 797], "temperature": 0.0, "avg_logprob": -0.25946998596191406, "compression_ratio": 1.7487437185929648, "no_speech_prob": 2.6016055016953032e-06}, {"id": 922, "seek": 446934, "start": 4488.3, "end": 4490.62, "text": " And then even further again", "tokens": [400, 550, 754, 3052, 797], "temperature": 0.0, "avg_logprob": -0.25946998596191406, "compression_ratio": 1.7487437185929648, "no_speech_prob": 2.6016055016953032e-06}, {"id": 923, "seek": 449062, "start": 4490.62, "end": 4496.3, "text": " Right let's draw the rest of that line to be clear", "tokens": [1779, 718, 311, 2642, 264, 1472, 295, 300, 1622, 281, 312, 1850], "temperature": 0.0, "avg_logprob": -0.27204341888427735, "compression_ratio": 1.4615384615384615, "no_speech_prob": 2.090450152536505e-06}, {"id": 924, "seek": 449062, "start": 4499.66, "end": 4503.22, "text": " Right and so suddenly it's then going to shoot off and get much worse", "tokens": [1779, 293, 370, 5800, 309, 311, 550, 516, 281, 3076, 766, 293, 483, 709, 5324], "temperature": 0.0, "avg_logprob": -0.27204341888427735, "compression_ratio": 1.4615384615384615, "no_speech_prob": 2.090450152536505e-06}, {"id": 925, "seek": 449062, "start": 4504.18, "end": 4506.0599999999995, "text": " right so", "tokens": [558, 370], "temperature": 0.0, "avg_logprob": -0.27204341888427735, "compression_ratio": 1.4615384615384615, "no_speech_prob": 2.090450152536505e-06}, {"id": 926, "seek": 449062, "start": 4506.0599999999995, "end": 4510.599999999999, "text": " The idea then is to go back and say okay", "tokens": [440, 1558, 550, 307, 281, 352, 646, 293, 584, 1392], "temperature": 0.0, "avg_logprob": -0.27204341888427735, "compression_ratio": 1.4615384615384615, "no_speech_prob": 2.090450152536505e-06}, {"id": 927, "seek": 449062, "start": 4514.62, "end": 4518.58, "text": " At what point did we see like the best", "tokens": [1711, 437, 935, 630, 321, 536, 411, 264, 1151], "temperature": 0.0, "avg_logprob": -0.27204341888427735, "compression_ratio": 1.4615384615384615, "no_speech_prob": 2.090450152536505e-06}, {"id": 928, "seek": 451858, "start": 4518.58, "end": 4520.58, "text": " improvement", "tokens": [10444], "temperature": 0.0, "avg_logprob": -0.21690756375672388, "compression_ratio": 1.4366197183098592, "no_speech_prob": 5.043468149779073e-07}, {"id": 929, "seek": 451858, "start": 4525.1, "end": 4527.1, "text": " So here", "tokens": [407, 510], "temperature": 0.0, "avg_logprob": -0.21690756375672388, "compression_ratio": 1.4366197183098592, "no_speech_prob": 5.043468149779073e-07}, {"id": 930, "seek": 451858, "start": 4527.1, "end": 4531.78, "text": " We've got our best improvement right and so we'd say okay. Let's use that", "tokens": [492, 600, 658, 527, 1151, 10444, 558, 293, 370, 321, 1116, 584, 1392, 13, 961, 311, 764, 300], "temperature": 0.0, "avg_logprob": -0.21690756375672388, "compression_ratio": 1.4366197183098592, "no_speech_prob": 5.043468149779073e-07}, {"id": 931, "seek": 451858, "start": 4532.66, "end": 4536.14, "text": " Learning rate right so in other words if we were to plot", "tokens": [15205, 3314, 558, 370, 294, 661, 2283, 498, 321, 645, 281, 7542], "temperature": 0.0, "avg_logprob": -0.21690756375672388, "compression_ratio": 1.4366197183098592, "no_speech_prob": 5.043468149779073e-07}, {"id": 932, "seek": 451858, "start": 4537.54, "end": 4539.54, "text": " the learning rate", "tokens": [264, 2539, 3314], "temperature": 0.0, "avg_logprob": -0.21690756375672388, "compression_ratio": 1.4366197183098592, "no_speech_prob": 5.043468149779073e-07}, {"id": 933, "seek": 451858, "start": 4540.54, "end": 4542.54, "text": " Over time", "tokens": [4886, 565], "temperature": 0.0, "avg_logprob": -0.21690756375672388, "compression_ratio": 1.4366197183098592, "no_speech_prob": 5.043468149779073e-07}, {"id": 934, "seek": 451858, "start": 4543.1, "end": 4545.1, "text": " It was increasing", "tokens": [467, 390, 5662], "temperature": 0.0, "avg_logprob": -0.21690756375672388, "compression_ratio": 1.4366197183098592, "no_speech_prob": 5.043468149779073e-07}, {"id": 935, "seek": 451858, "start": 4545.34, "end": 4547.0599999999995, "text": " like so", "tokens": [411, 370], "temperature": 0.0, "avg_logprob": -0.21690756375672388, "compression_ratio": 1.4366197183098592, "no_speech_prob": 5.043468149779073e-07}, {"id": 936, "seek": 454706, "start": 4547.06, "end": 4550.52, "text": " Right and so what we then want to do is we want to plot", "tokens": [1779, 293, 370, 437, 321, 550, 528, 281, 360, 307, 321, 528, 281, 7542], "temperature": 0.0, "avg_logprob": -0.2070009093923667, "compression_ratio": 1.838862559241706, "no_speech_prob": 2.2603148863709066e-06}, {"id": 937, "seek": 454706, "start": 4551.14, "end": 4553.14, "text": " the learning rate", "tokens": [264, 2539, 3314], "temperature": 0.0, "avg_logprob": -0.2070009093923667, "compression_ratio": 1.838862559241706, "no_speech_prob": 2.2603148863709066e-06}, {"id": 938, "seek": 454706, "start": 4553.54, "end": 4560.660000000001, "text": " Against the loss right so when I say the loss I basically mean like how accurate is the model how close in this case?", "tokens": [29995, 264, 4470, 558, 370, 562, 286, 584, 264, 4470, 286, 1936, 914, 411, 577, 8559, 307, 264, 2316, 577, 1998, 294, 341, 1389, 30], "temperature": 0.0, "avg_logprob": -0.2070009093923667, "compression_ratio": 1.838862559241706, "no_speech_prob": 2.2603148863709066e-06}, {"id": 939, "seek": 454706, "start": 4560.660000000001, "end": 4565.0, "text": " The loss would be how far away is the predicted prediction?", "tokens": [440, 4470, 576, 312, 577, 1400, 1314, 307, 264, 19147, 17630, 30], "temperature": 0.0, "avg_logprob": -0.2070009093923667, "compression_ratio": 1.838862559241706, "no_speech_prob": 2.2603148863709066e-06}, {"id": 940, "seek": 454706, "start": 4565.580000000001, "end": 4567.580000000001, "text": " from the from the goal", "tokens": [490, 264, 490, 264, 3387], "temperature": 0.0, "avg_logprob": -0.2070009093923667, "compression_ratio": 1.838862559241706, "no_speech_prob": 2.2603148863709066e-06}, {"id": 941, "seek": 454706, "start": 4567.820000000001, "end": 4575.1, "text": " Right and so if we plotted the learning rate against the loss we'd say like okay initially it didn't do very much", "tokens": [1779, 293, 370, 498, 321, 43288, 264, 2539, 3314, 1970, 264, 4470, 321, 1116, 584, 411, 1392, 9105, 309, 994, 380, 360, 588, 709], "temperature": 0.0, "avg_logprob": -0.2070009093923667, "compression_ratio": 1.838862559241706, "no_speech_prob": 2.2603148863709066e-06}, {"id": 942, "seek": 457510, "start": 4575.1, "end": 4576.620000000001, "text": " right", "tokens": [558], "temperature": 0.0, "avg_logprob": -0.15541179507386452, "compression_ratio": 1.7531380753138075, "no_speech_prob": 1.1015935115210596e-06}, {"id": 943, "seek": 457510, "start": 4576.620000000001, "end": 4582.38, "text": " For small learning rates, and then it suddenly improved a lot and then it suddenly got a lot worse", "tokens": [1171, 1359, 2539, 6846, 11, 293, 550, 309, 5800, 9689, 257, 688, 293, 550, 309, 5800, 658, 257, 688, 5324], "temperature": 0.0, "avg_logprob": -0.15541179507386452, "compression_ratio": 1.7531380753138075, "no_speech_prob": 1.1015935115210596e-06}, {"id": 944, "seek": 457510, "start": 4583.740000000001, "end": 4589.1, "text": " So that's the basic idea, and so we'd be looking for the point where this graph is", "tokens": [407, 300, 311, 264, 3875, 1558, 11, 293, 370, 321, 1116, 312, 1237, 337, 264, 935, 689, 341, 4295, 307], "temperature": 0.0, "avg_logprob": -0.15541179507386452, "compression_ratio": 1.7531380753138075, "no_speech_prob": 1.1015935115210596e-06}, {"id": 945, "seek": 457510, "start": 4589.9800000000005, "end": 4593.02, "text": " Dropping quickly right we're not looking for its minimum point", "tokens": [35305, 3759, 2661, 558, 321, 434, 406, 1237, 337, 1080, 7285, 935], "temperature": 0.0, "avg_logprob": -0.15541179507386452, "compression_ratio": 1.7531380753138075, "no_speech_prob": 1.1015935115210596e-06}, {"id": 946, "seek": 457510, "start": 4593.02, "end": 4598.42, "text": " We're not saying like where was it the lowest because that could actually be the point where it's just jumped too far", "tokens": [492, 434, 406, 1566, 411, 689, 390, 309, 264, 12437, 570, 300, 727, 767, 312, 264, 935, 689, 309, 311, 445, 13864, 886, 1400], "temperature": 0.0, "avg_logprob": -0.15541179507386452, "compression_ratio": 1.7531380753138075, "no_speech_prob": 1.1015935115210596e-06}, {"id": 947, "seek": 457510, "start": 4598.620000000001, "end": 4602.06, "text": " We want at what point was it dropping the fastest?", "tokens": [492, 528, 412, 437, 935, 390, 309, 13601, 264, 14573, 30], "temperature": 0.0, "avg_logprob": -0.15541179507386452, "compression_ratio": 1.7531380753138075, "no_speech_prob": 1.1015935115210596e-06}, {"id": 948, "seek": 460206, "start": 4602.06, "end": 4604.3, "text": " So if you go", "tokens": [407, 498, 291, 352], "temperature": 0.0, "avg_logprob": -0.4100018220789292, "compression_ratio": 1.6280193236714975, "no_speech_prob": 2.601608002805733e-06}, {"id": 949, "seek": 460206, "start": 4604.3, "end": 4611.1, "text": " So if you create your learn object in the same way that we did before we'll be learning more about this these details shortly", "tokens": [407, 498, 291, 1884, 428, 1466, 2657, 294, 264, 912, 636, 300, 321, 630, 949, 321, 603, 312, 2539, 544, 466, 341, 613, 4365, 13392], "temperature": 0.0, "avg_logprob": -0.4100018220789292, "compression_ratio": 1.6280193236714975, "no_speech_prob": 2.601608002805733e-06}, {"id": 950, "seek": 460206, "start": 4612.1, "end": 4618.580000000001, "text": " If you then call LR find method on that you'll see that it'll start training a model", "tokens": [759, 291, 550, 818, 441, 49, 915, 3170, 322, 300, 291, 603, 536, 300, 309, 603, 722, 3097, 257, 2316], "temperature": 0.0, "avg_logprob": -0.4100018220789292, "compression_ratio": 1.6280193236714975, "no_speech_prob": 2.601608002805733e-06}, {"id": 951, "seek": 460206, "start": 4619.06, "end": 4623.46, "text": " Like it did before but it'll generally stop before it gets to 100%", "tokens": [1743, 309, 630, 949, 457, 309, 603, 5101, 1590, 949, 309, 2170, 281, 2319, 4], "temperature": 0.0, "avg_logprob": -0.4100018220789292, "compression_ratio": 1.6280193236714975, "no_speech_prob": 2.601608002805733e-06}, {"id": 952, "seek": 460206, "start": 4624.18, "end": 4628.22, "text": " Because if it notices that the loss is getting", "tokens": [1436, 498, 309, 32978, 300, 264, 4470, 307, 1242], "temperature": 0.0, "avg_logprob": -0.4100018220789292, "compression_ratio": 1.6280193236714975, "no_speech_prob": 2.601608002805733e-06}, {"id": 953, "seek": 462822, "start": 4628.22, "end": 4633.9400000000005, "text": " A lot worse, then it'll stop automatically that's so that you can see here. It stopped at 84% and", "tokens": [316, 688, 5324, 11, 550, 309, 603, 1590, 6772, 300, 311, 370, 300, 291, 393, 536, 510, 13, 467, 5936, 412, 29018, 4, 293], "temperature": 0.0, "avg_logprob": -0.34371035706763176, "compression_ratio": 1.9553571428571428, "no_speech_prob": 2.561274641266209e-06}, {"id": 954, "seek": 462822, "start": 4634.54, "end": 4639.1, "text": " So then you can call learn dot shed that gets you the learning rate scheduler", "tokens": [407, 550, 291, 393, 818, 1466, 5893, 14951, 300, 2170, 291, 264, 2539, 3314, 12000, 260], "temperature": 0.0, "avg_logprob": -0.34371035706763176, "compression_ratio": 1.9553571428571428, "no_speech_prob": 2.561274641266209e-06}, {"id": 955, "seek": 462822, "start": 4639.1, "end": 4644.860000000001, "text": " That's the object which actually does this learning rate finding and that object has a plot learning rate function", "tokens": [663, 311, 264, 2657, 597, 767, 775, 341, 2539, 3314, 5006, 293, 300, 2657, 575, 257, 7542, 2539, 3314, 2445], "temperature": 0.0, "avg_logprob": -0.34371035706763176, "compression_ratio": 1.9553571428571428, "no_speech_prob": 2.561274641266209e-06}, {"id": 956, "seek": 462822, "start": 4644.860000000001, "end": 4649.26, "text": " And so you can see here by iteration you can see the learning rate", "tokens": [400, 370, 291, 393, 536, 510, 538, 24784, 291, 393, 536, 264, 2539, 3314], "temperature": 0.0, "avg_logprob": -0.34371035706763176, "compression_ratio": 1.9553571428571428, "no_speech_prob": 2.561274641266209e-06}, {"id": 957, "seek": 462822, "start": 4649.26, "end": 4653.3, "text": " All right, so you can see each step the learning rates getting bigger and bigger", "tokens": [1057, 558, 11, 370, 291, 393, 536, 1184, 1823, 264, 2539, 6846, 1242, 3801, 293, 3801], "temperature": 0.0, "avg_logprob": -0.34371035706763176, "compression_ratio": 1.9553571428571428, "no_speech_prob": 2.561274641266209e-06}, {"id": 958, "seek": 465330, "start": 4653.3, "end": 4656.74, "text": " So you can see each step the learning rates getting bigger and bigger", "tokens": [407, 291, 393, 536, 1184, 1823, 264, 2539, 6846, 1242, 3801, 293, 3801], "temperature": 0.0, "avg_logprob": -0.14767564729202626, "compression_ratio": 1.7088607594936709, "no_speech_prob": 2.0904528810206102e-06}, {"id": 959, "seek": 465330, "start": 4659.14, "end": 4666.38, "text": " You can do it this way we can see it's increasing exponentially another way that Leslie Smith the researcher suggests is to do it linearly", "tokens": [509, 393, 360, 309, 341, 636, 321, 393, 536, 309, 311, 5662, 37330, 1071, 636, 300, 28140, 8538, 264, 21751, 13409, 307, 281, 360, 309, 43586], "temperature": 0.0, "avg_logprob": -0.14767564729202626, "compression_ratio": 1.7088607594936709, "no_speech_prob": 2.0904528810206102e-06}, {"id": 960, "seek": 465330, "start": 4667.58, "end": 4671.66, "text": " So I'm actually currently researching with both of these approaches to see which works best", "tokens": [407, 286, 478, 767, 4362, 24176, 365, 1293, 295, 613, 11587, 281, 536, 597, 1985, 1151], "temperature": 0.0, "avg_logprob": -0.14767564729202626, "compression_ratio": 1.7088607594936709, "no_speech_prob": 2.0904528810206102e-06}, {"id": 961, "seek": 465330, "start": 4672.58, "end": 4677.22, "text": " Recently I've been mainly using exponential, but I'm starting to look more at using linear at the moment", "tokens": [20072, 286, 600, 668, 8704, 1228, 21510, 11, 457, 286, 478, 2891, 281, 574, 544, 412, 1228, 8213, 412, 264, 1623], "temperature": 0.0, "avg_logprob": -0.14767564729202626, "compression_ratio": 1.7088607594936709, "no_speech_prob": 2.0904528810206102e-06}, {"id": 962, "seek": 467722, "start": 4677.22, "end": 4683.9800000000005, "text": " And so if we then call shed dot plot that does the plot that I just described down here", "tokens": [400, 370, 498, 321, 550, 818, 14951, 5893, 7542, 300, 775, 264, 7542, 300, 286, 445, 7619, 760, 510], "temperature": 0.0, "avg_logprob": -0.2290869818793403, "compression_ratio": 1.6859903381642511, "no_speech_prob": 7.453759849340713e-07}, {"id": 963, "seek": 467722, "start": 4684.780000000001, "end": 4686.02, "text": " learning rate", "tokens": [2539, 3314], "temperature": 0.0, "avg_logprob": -0.2290869818793403, "compression_ratio": 1.6859903381642511, "no_speech_prob": 7.453759849340713e-07}, {"id": 964, "seek": 467722, "start": 4686.02, "end": 4687.740000000001, "text": " versus loss", "tokens": [5717, 4470], "temperature": 0.0, "avg_logprob": -0.2290869818793403, "compression_ratio": 1.6859903381642511, "no_speech_prob": 7.453759849340713e-07}, {"id": 965, "seek": 467722, "start": 4687.740000000001, "end": 4692.5, "text": " All right, and so we're looking for the highest learning rate we can find", "tokens": [1057, 558, 11, 293, 370, 321, 434, 1237, 337, 264, 6343, 2539, 3314, 321, 393, 915], "temperature": 0.0, "avg_logprob": -0.2290869818793403, "compression_ratio": 1.6859903381642511, "no_speech_prob": 7.453759849340713e-07}, {"id": 966, "seek": 467722, "start": 4693.14, "end": 4695.14, "text": " Where the loss is still improving?", "tokens": [2305, 264, 4470, 307, 920, 11470, 30], "temperature": 0.0, "avg_logprob": -0.2290869818793403, "compression_ratio": 1.6859903381642511, "no_speech_prob": 7.453759849340713e-07}, {"id": 967, "seek": 467722, "start": 4696.26, "end": 4700.42, "text": " Clearly well right and so in this case I would say", "tokens": [24120, 731, 558, 293, 370, 294, 341, 1389, 286, 576, 584], "temperature": 0.0, "avg_logprob": -0.2290869818793403, "compression_ratio": 1.6859903381642511, "no_speech_prob": 7.453759849340713e-07}, {"id": 968, "seek": 467722, "start": 4701.3, "end": 4705.26, "text": " Ten to the negative two acts at ten to the negative one. It's not improving", "tokens": [9380, 281, 264, 3671, 732, 10672, 412, 2064, 281, 264, 3671, 472, 13, 467, 311, 406, 11470], "temperature": 0.0, "avg_logprob": -0.2290869818793403, "compression_ratio": 1.6859903381642511, "no_speech_prob": 7.453759849340713e-07}, {"id": 969, "seek": 470526, "start": 4705.26, "end": 4711.02, "text": " All right ten to the negative three it is also improving, but I'm trying to find the highest learning rate", "tokens": [1057, 558, 2064, 281, 264, 3671, 1045, 309, 307, 611, 11470, 11, 457, 286, 478, 1382, 281, 915, 264, 6343, 2539, 3314], "temperature": 0.0, "avg_logprob": -0.13004342474118627, "compression_ratio": 1.8258928571428572, "no_speech_prob": 1.0030131534222164e-06}, {"id": 970, "seek": 470526, "start": 4711.02, "end": 4714.58, "text": " I can where it's still clearly improving, so I'd say ten to the negative two", "tokens": [286, 393, 689, 309, 311, 920, 4448, 11470, 11, 370, 286, 1116, 584, 2064, 281, 264, 3671, 732], "temperature": 0.0, "avg_logprob": -0.13004342474118627, "compression_ratio": 1.8258928571428572, "no_speech_prob": 1.0030131534222164e-06}, {"id": 971, "seek": 470526, "start": 4714.9800000000005, "end": 4720.280000000001, "text": " All right, so you might have noticed that when we ran our model before we had", "tokens": [1057, 558, 11, 370, 291, 1062, 362, 5694, 300, 562, 321, 5872, 527, 2316, 949, 321, 632], "temperature": 0.0, "avg_logprob": -0.13004342474118627, "compression_ratio": 1.8258928571428572, "no_speech_prob": 1.0030131534222164e-06}, {"id": 972, "seek": 470526, "start": 4721.62, "end": 4725.9800000000005, "text": " Ten to the negative two zero point zero one so that's why we picked that learning rate", "tokens": [9380, 281, 264, 3671, 732, 4018, 935, 4018, 472, 370, 300, 311, 983, 321, 6183, 300, 2539, 3314], "temperature": 0.0, "avg_logprob": -0.13004342474118627, "compression_ratio": 1.8258928571428572, "no_speech_prob": 1.0030131534222164e-06}, {"id": 973, "seek": 472598, "start": 4725.98, "end": 4733.7, "text": " So there's really only one other number that we have to pick and", "tokens": [407, 456, 311, 534, 787, 472, 661, 1230, 300, 321, 362, 281, 1888, 293], "temperature": 0.0, "avg_logprob": -0.20157234885475853, "compression_ratio": 1.5857142857142856, "no_speech_prob": 4.888289026894199e-07}, {"id": 974, "seek": 472598, "start": 4736.339999999999, "end": 4742.139999999999, "text": " That was this number three and so that number three controlled how many?", "tokens": [663, 390, 341, 1230, 1045, 293, 370, 300, 1230, 1045, 10164, 577, 867, 30], "temperature": 0.0, "avg_logprob": -0.20157234885475853, "compression_ratio": 1.5857142857142856, "no_speech_prob": 4.888289026894199e-07}, {"id": 975, "seek": 472598, "start": 4743.0599999999995, "end": 4750.379999999999, "text": " epochs that we run so an epoch means going through our entire data set of images and", "tokens": [30992, 28346, 300, 321, 1190, 370, 364, 30992, 339, 1355, 516, 807, 527, 2302, 1412, 992, 295, 5267, 293], "temperature": 0.0, "avg_logprob": -0.20157234885475853, "compression_ratio": 1.5857142857142856, "no_speech_prob": 4.888289026894199e-07}, {"id": 976, "seek": 475038, "start": 4750.38, "end": 4756.66, "text": " Using each each time we do a bunch of they're called mini batches", "tokens": [11142, 1184, 1184, 565, 321, 360, 257, 3840, 295, 436, 434, 1219, 8382, 15245, 279], "temperature": 0.0, "avg_logprob": -0.18596980882727582, "compression_ratio": 1.6923076923076923, "no_speech_prob": 8.579209520576114e-07}, {"id": 977, "seek": 475038, "start": 4756.66, "end": 4763.3, "text": " We grab like 64 images at a time and use them to try to improve the model a little bit using gradient descent", "tokens": [492, 4444, 411, 12145, 5267, 412, 257, 565, 293, 764, 552, 281, 853, 281, 3470, 264, 2316, 257, 707, 857, 1228, 16235, 23475], "temperature": 0.0, "avg_logprob": -0.18596980882727582, "compression_ratio": 1.6923076923076923, "no_speech_prob": 8.579209520576114e-07}, {"id": 978, "seek": 475038, "start": 4763.42, "end": 4767.46, "text": " Right and using all of the images once is called one epoch", "tokens": [1779, 293, 1228, 439, 295, 264, 5267, 1564, 307, 1219, 472, 30992, 339], "temperature": 0.0, "avg_logprob": -0.18596980882727582, "compression_ratio": 1.6923076923076923, "no_speech_prob": 8.579209520576114e-07}, {"id": 979, "seek": 475038, "start": 4768.38, "end": 4772.9800000000005, "text": " and so at the end of each epoch we print out the accuracy and", "tokens": [293, 370, 412, 264, 917, 295, 1184, 30992, 339, 321, 4482, 484, 264, 14170, 293], "temperature": 0.0, "avg_logprob": -0.18596980882727582, "compression_ratio": 1.6923076923076923, "no_speech_prob": 8.579209520576114e-07}, {"id": 980, "seek": 475038, "start": 4773.9400000000005, "end": 4776.7, "text": " validation and training loss at the end of the epoch", "tokens": [24071, 293, 3097, 4470, 412, 264, 917, 295, 264, 30992, 339], "temperature": 0.0, "avg_logprob": -0.18596980882727582, "compression_ratio": 1.6923076923076923, "no_speech_prob": 8.579209520576114e-07}, {"id": 981, "seek": 475038, "start": 4778.02, "end": 4780.02, "text": " so", "tokens": [370], "temperature": 0.0, "avg_logprob": -0.18596980882727582, "compression_ratio": 1.6923076923076923, "no_speech_prob": 8.579209520576114e-07}, {"id": 982, "seek": 478002, "start": 4780.02, "end": 4781.820000000001, "text": " the question of", "tokens": [264, 1168, 295], "temperature": 0.0, "avg_logprob": -0.18664532899856567, "compression_ratio": 1.6391304347826088, "no_speech_prob": 2.8573008421517443e-06}, {"id": 983, "seek": 478002, "start": 4781.820000000001, "end": 4788.34, "text": " How many epochs should we run is kind of the one other question that you need to answer to run these three lines of code?", "tokens": [1012, 867, 30992, 28346, 820, 321, 1190, 307, 733, 295, 264, 472, 661, 1168, 300, 291, 643, 281, 1867, 281, 1190, 613, 1045, 3876, 295, 3089, 30], "temperature": 0.0, "avg_logprob": -0.18664532899856567, "compression_ratio": 1.6391304347826088, "no_speech_prob": 2.8573008421517443e-06}, {"id": 984, "seek": 478002, "start": 4788.660000000001, "end": 4791.96, "text": " and the answer really to me is like", "tokens": [293, 264, 1867, 534, 281, 385, 307, 411], "temperature": 0.0, "avg_logprob": -0.18664532899856567, "compression_ratio": 1.6391304347826088, "no_speech_prob": 2.8573008421517443e-06}, {"id": 985, "seek": 478002, "start": 4793.38, "end": 4795.34, "text": " As many as you like", "tokens": [1018, 867, 382, 291, 411], "temperature": 0.0, "avg_logprob": -0.18664532899856567, "compression_ratio": 1.6391304347826088, "no_speech_prob": 2.8573008421517443e-06}, {"id": 986, "seek": 478002, "start": 4795.34, "end": 4801.660000000001, "text": " What you might find happen is if you run it for too long the accuracy you'll start getting worse", "tokens": [708, 291, 1062, 915, 1051, 307, 498, 291, 1190, 309, 337, 886, 938, 264, 14170, 291, 603, 722, 1242, 5324], "temperature": 0.0, "avg_logprob": -0.18664532899856567, "compression_ratio": 1.6391304347826088, "no_speech_prob": 2.8573008421517443e-06}, {"id": 987, "seek": 478002, "start": 4802.22, "end": 4806.9400000000005, "text": " Right and we'll learn about that why later. It's something called overfitting right so", "tokens": [1779, 293, 321, 603, 1466, 466, 300, 983, 1780, 13, 467, 311, 746, 1219, 670, 69, 2414, 558, 370], "temperature": 0.0, "avg_logprob": -0.18664532899856567, "compression_ratio": 1.6391304347826088, "no_speech_prob": 2.8573008421517443e-06}, {"id": 988, "seek": 480694, "start": 4806.94, "end": 4809.82, "text": " You can run it for a while run lots of epochs", "tokens": [509, 393, 1190, 309, 337, 257, 1339, 1190, 3195, 295, 30992, 28346], "temperature": 0.0, "avg_logprob": -0.14672258332019716, "compression_ratio": 1.7941176470588236, "no_speech_prob": 1.1726380080290255e-06}, {"id": 989, "seek": 480694, "start": 4810.78, "end": 4812.0599999999995, "text": " Once you see it getting worse", "tokens": [3443, 291, 536, 309, 1242, 5324], "temperature": 0.0, "avg_logprob": -0.14672258332019716, "compression_ratio": 1.7941176470588236, "no_speech_prob": 1.1726380080290255e-06}, {"id": 990, "seek": 480694, "start": 4812.0599999999995, "end": 4817.98, "text": " You know how many epochs you can run the other thing that might happen is if you've got like a really big model or", "tokens": [509, 458, 577, 867, 30992, 28346, 291, 393, 1190, 264, 661, 551, 300, 1062, 1051, 307, 498, 291, 600, 658, 411, 257, 534, 955, 2316, 420], "temperature": 0.0, "avg_logprob": -0.14672258332019716, "compression_ratio": 1.7941176470588236, "no_speech_prob": 1.1726380080290255e-06}, {"id": 991, "seek": 480694, "start": 4817.98, "end": 4823.5199999999995, "text": " Lots and lots of data. Maybe it takes so long you don't have time until you just run enough epochs that", "tokens": [15908, 293, 3195, 295, 1412, 13, 2704, 309, 2516, 370, 938, 291, 500, 380, 362, 565, 1826, 291, 445, 1190, 1547, 30992, 28346, 300], "temperature": 0.0, "avg_logprob": -0.14672258332019716, "compression_ratio": 1.7941176470588236, "no_speech_prob": 1.1726380080290255e-06}, {"id": 992, "seek": 480694, "start": 4824.219999999999, "end": 4829.599999999999, "text": " Fit into the time you have available so the number of epochs you run. You know that's a pretty easy thing to set", "tokens": [29263, 666, 264, 565, 291, 362, 2435, 370, 264, 1230, 295, 30992, 28346, 291, 1190, 13, 509, 458, 300, 311, 257, 1238, 1858, 551, 281, 992], "temperature": 0.0, "avg_logprob": -0.14672258332019716, "compression_ratio": 1.7941176470588236, "no_speech_prob": 1.1726380080290255e-06}, {"id": 993, "seek": 480694, "start": 4830.62, "end": 4834.86, "text": " So they're the only two numbers that you're going to have to set and so the goal", "tokens": [407, 436, 434, 264, 787, 732, 3547, 300, 291, 434, 516, 281, 362, 281, 992, 293, 370, 264, 3387], "temperature": 0.0, "avg_logprob": -0.14672258332019716, "compression_ratio": 1.7941176470588236, "no_speech_prob": 1.1726380080290255e-06}, {"id": 994, "seek": 483486, "start": 4834.86, "end": 4839.0199999999995, "text": " This week will be to make sure that you can run", "tokens": [639, 1243, 486, 312, 281, 652, 988, 300, 291, 393, 1190], "temperature": 0.0, "avg_logprob": -0.20723669869559153, "compression_ratio": 1.724770642201835, "no_speech_prob": 3.5008347367693204e-06}, {"id": 995, "seek": 483486, "start": 4839.42, "end": 4843.62, "text": " Not only these three lines of code on the data that I've provided", "tokens": [1726, 787, 613, 1045, 3876, 295, 3089, 322, 264, 1412, 300, 286, 600, 5649], "temperature": 0.0, "avg_logprob": -0.20723669869559153, "compression_ratio": 1.724770642201835, "no_speech_prob": 3.5008347367693204e-06}, {"id": 996, "seek": 483486, "start": 4844.66, "end": 4850.339999999999, "text": " But to run it on a set of images that you either have on your computer or that you", "tokens": [583, 281, 1190, 309, 322, 257, 992, 295, 5267, 300, 291, 2139, 362, 322, 428, 3820, 420, 300, 291], "temperature": 0.0, "avg_logprob": -0.20723669869559153, "compression_ratio": 1.724770642201835, "no_speech_prob": 3.5008347367693204e-06}, {"id": 997, "seek": 483486, "start": 4850.78, "end": 4853.42, "text": " Get from work or that you download from Google", "tokens": [3240, 490, 589, 420, 300, 291, 5484, 490, 3329], "temperature": 0.0, "avg_logprob": -0.20723669869559153, "compression_ratio": 1.724770642201835, "no_speech_prob": 3.5008347367693204e-06}, {"id": 998, "seek": 483486, "start": 4853.94, "end": 4859.46, "text": " And like try to get a sense of like which kinds of images does this seem to work well for?", "tokens": [400, 411, 853, 281, 483, 257, 2020, 295, 411, 597, 3685, 295, 5267, 775, 341, 1643, 281, 589, 731, 337, 30], "temperature": 0.0, "avg_logprob": -0.20723669869559153, "compression_ratio": 1.724770642201835, "no_speech_prob": 3.5008347367693204e-06}, {"id": 999, "seek": 483486, "start": 4860.62, "end": 4862.86, "text": " Which ones doesn't it work work well for?", "tokens": [3013, 2306, 1177, 380, 309, 589, 589, 731, 337, 30], "temperature": 0.0, "avg_logprob": -0.20723669869559153, "compression_ratio": 1.724770642201835, "no_speech_prob": 3.5008347367693204e-06}, {"id": 1000, "seek": 486286, "start": 4862.86, "end": 4864.46, "text": " or", "tokens": [420], "temperature": 0.0, "avg_logprob": -0.20591795143960906, "compression_ratio": 1.783882783882784, "no_speech_prob": 1.482352672610432e-06}, {"id": 1001, "seek": 486286, "start": 4864.46, "end": 4869.16, "text": " What kind of learning rates do you need for different kinds of images how many epochs do you need?", "tokens": [708, 733, 295, 2539, 6846, 360, 291, 643, 337, 819, 3685, 295, 5267, 577, 867, 30992, 28346, 360, 291, 643, 30], "temperature": 0.0, "avg_logprob": -0.20591795143960906, "compression_ratio": 1.783882783882784, "no_speech_prob": 1.482352672610432e-06}, {"id": 1002, "seek": 486286, "start": 4869.58, "end": 4876.46, "text": " How does the number of the learning rate change the accuracy you get and so forth like really experiment and then?", "tokens": [1012, 775, 264, 1230, 295, 264, 2539, 3314, 1319, 264, 14170, 291, 483, 293, 370, 5220, 411, 534, 5120, 293, 550, 30], "temperature": 0.0, "avg_logprob": -0.20591795143960906, "compression_ratio": 1.783882783882784, "no_speech_prob": 1.482352672610432e-06}, {"id": 1003, "seek": 486286, "start": 4877.0199999999995, "end": 4881.139999999999, "text": " You know try to get a sense of like what's inside this data object", "tokens": [509, 458, 853, 281, 483, 257, 2020, 295, 411, 437, 311, 1854, 341, 1412, 2657], "temperature": 0.0, "avg_logprob": -0.20591795143960906, "compression_ratio": 1.783882783882784, "no_speech_prob": 1.482352672610432e-06}, {"id": 1004, "seek": 486286, "start": 4881.179999999999, "end": 4885.0199999999995, "text": " You know what are the y values look like what are these classes mean?", "tokens": [509, 458, 437, 366, 264, 288, 4190, 574, 411, 437, 366, 613, 5359, 914, 30], "temperature": 0.0, "avg_logprob": -0.20591795143960906, "compression_ratio": 1.783882783882784, "no_speech_prob": 1.482352672610432e-06}, {"id": 1005, "seek": 486286, "start": 4885.46, "end": 4889.2, "text": " And if you're not familiar with numpy you know really practice a lot with numpy", "tokens": [400, 498, 291, 434, 406, 4963, 365, 1031, 8200, 291, 458, 534, 3124, 257, 688, 365, 1031, 8200], "temperature": 0.0, "avg_logprob": -0.20591795143960906, "compression_ratio": 1.783882783882784, "no_speech_prob": 1.482352672610432e-06}, {"id": 1006, "seek": 488920, "start": 4889.2, "end": 4892.48, "text": " So that by the time you come back for the next lesson", "tokens": [407, 300, 538, 264, 565, 291, 808, 646, 337, 264, 958, 6898], "temperature": 0.0, "avg_logprob": -0.17953118823823475, "compression_ratio": 1.651063829787234, "no_speech_prob": 1.8448181435815059e-06}, {"id": 1007, "seek": 488920, "start": 4893.679999999999, "end": 4896.22, "text": " You know we're going to be digging into a lot more detail", "tokens": [509, 458, 321, 434, 516, 281, 312, 17343, 666, 257, 688, 544, 2607], "temperature": 0.0, "avg_logprob": -0.17953118823823475, "compression_ratio": 1.651063829787234, "no_speech_prob": 1.8448181435815059e-06}, {"id": 1008, "seek": 488920, "start": 4896.22, "end": 4903.12, "text": " And so you'll really feel ready to do that now one thing that's really important to be able to do that is that you?", "tokens": [400, 370, 291, 603, 534, 841, 1919, 281, 360, 300, 586, 472, 551, 300, 311, 534, 1021, 281, 312, 1075, 281, 360, 300, 307, 300, 291, 30], "temperature": 0.0, "avg_logprob": -0.17953118823823475, "compression_ratio": 1.651063829787234, "no_speech_prob": 1.8448181435815059e-06}, {"id": 1009, "seek": 488920, "start": 4903.12, "end": 4905.12, "text": " need to really know how to", "tokens": [643, 281, 534, 458, 577, 281], "temperature": 0.0, "avg_logprob": -0.17953118823823475, "compression_ratio": 1.651063829787234, "no_speech_prob": 1.8448181435815059e-06}, {"id": 1010, "seek": 488920, "start": 4905.84, "end": 4907.84, "text": " work with", "tokens": [589, 365], "temperature": 0.0, "avg_logprob": -0.17953118823823475, "compression_ratio": 1.651063829787234, "no_speech_prob": 1.8448181435815059e-06}, {"id": 1011, "seek": 488920, "start": 4908.76, "end": 4915.24, "text": " NumPy the faster. I library and so forth and so I want to show you some tricks in Jupyter Notebook to make that much easier", "tokens": [22592, 47, 88, 264, 4663, 13, 286, 6405, 293, 370, 5220, 293, 370, 286, 528, 281, 855, 291, 512, 11733, 294, 22125, 88, 391, 11633, 2939, 281, 652, 300, 709, 3571], "temperature": 0.0, "avg_logprob": -0.17953118823823475, "compression_ratio": 1.651063829787234, "no_speech_prob": 1.8448181435815059e-06}, {"id": 1012, "seek": 491524, "start": 4915.24, "end": 4920.76, "text": " So one trick to be aware of is if you can't quite remember how to spell something right so", "tokens": [407, 472, 4282, 281, 312, 3650, 295, 307, 498, 291, 393, 380, 1596, 1604, 577, 281, 9827, 746, 558, 370], "temperature": 0.0, "avg_logprob": -0.31077001383016395, "compression_ratio": 1.6956521739130435, "no_speech_prob": 3.500828825053759e-06}, {"id": 1013, "seek": 491524, "start": 4921.5599999999995, "end": 4923.5599999999995, "text": " If you're not quite sure", "tokens": [759, 291, 434, 406, 1596, 988], "temperature": 0.0, "avg_logprob": -0.31077001383016395, "compression_ratio": 1.6956521739130435, "no_speech_prob": 3.500828825053759e-06}, {"id": 1014, "seek": 491524, "start": 4923.5599999999995, "end": 4928.84, "text": " What the method you want is you can always hit tab and you'll get a list of?", "tokens": [708, 264, 3170, 291, 528, 307, 291, 393, 1009, 2045, 4421, 293, 291, 603, 483, 257, 1329, 295, 30], "temperature": 0.0, "avg_logprob": -0.31077001383016395, "compression_ratio": 1.6956521739130435, "no_speech_prob": 3.500828825053759e-06}, {"id": 1015, "seek": 491524, "start": 4929.48, "end": 4936.28, "text": " Methods that start with that letter right and so that's a quick way to find things if you then can't remember what the arguments are", "tokens": [25285, 82, 300, 722, 365, 300, 5063, 558, 293, 370, 300, 311, 257, 1702, 636, 281, 915, 721, 498, 291, 550, 393, 380, 1604, 437, 264, 12869, 366], "temperature": 0.0, "avg_logprob": -0.31077001383016395, "compression_ratio": 1.6956521739130435, "no_speech_prob": 3.500828825053759e-06}, {"id": 1016, "seek": 491524, "start": 4936.28, "end": 4938.92, "text": " To a method hit shift tab", "tokens": [1407, 257, 3170, 2045, 5513, 4421], "temperature": 0.0, "avg_logprob": -0.31077001383016395, "compression_ratio": 1.6956521739130435, "no_speech_prob": 3.500828825053759e-06}, {"id": 1017, "seek": 493892, "start": 4938.92, "end": 4946.4800000000005, "text": " Hit shift tab right so hitting shift tab tells you the arguments to the method", "tokens": [9217, 5513, 4421, 558, 370, 8850, 5513, 4421, 5112, 291, 264, 12869, 281, 264, 3170], "temperature": 0.0, "avg_logprob": -0.2288626988728841, "compression_ratio": 1.6132075471698113, "no_speech_prob": 1.0348509249524795e-06}, {"id": 1018, "seek": 493892, "start": 4946.4800000000005, "end": 4949.68, "text": " So shift tab is like one of the most helpful things I know", "tokens": [407, 5513, 4421, 307, 411, 472, 295, 264, 881, 4961, 721, 286, 458], "temperature": 0.0, "avg_logprob": -0.2288626988728841, "compression_ratio": 1.6132075471698113, "no_speech_prob": 1.0348509249524795e-06}, {"id": 1019, "seek": 493892, "start": 4951.72, "end": 4953.72, "text": " So let's take", "tokens": [407, 718, 311, 747], "temperature": 0.0, "avg_logprob": -0.2288626988728841, "compression_ratio": 1.6132075471698113, "no_speech_prob": 1.0348509249524795e-06}, {"id": 1020, "seek": 493892, "start": 4954.36, "end": 4955.84, "text": " Np.Exp", "tokens": [426, 79, 13, 11149, 79], "temperature": 0.0, "avg_logprob": -0.2288626988728841, "compression_ratio": 1.6132075471698113, "no_speech_prob": 1.0348509249524795e-06}, {"id": 1021, "seek": 493892, "start": 4955.84, "end": 4962.12, "text": " Shift tab and so now you might be wondering like okay. Well. What does this function do and how does it work?", "tokens": [28304, 4421, 293, 370, 586, 291, 1062, 312, 6359, 411, 1392, 13, 1042, 13, 708, 775, 341, 2445, 360, 293, 577, 775, 309, 589, 30], "temperature": 0.0, "avg_logprob": -0.2288626988728841, "compression_ratio": 1.6132075471698113, "no_speech_prob": 1.0348509249524795e-06}, {"id": 1022, "seek": 493892, "start": 4962.76, "end": 4964.76, "text": " If you press shift tab twice", "tokens": [759, 291, 1886, 5513, 4421, 6091], "temperature": 0.0, "avg_logprob": -0.2288626988728841, "compression_ratio": 1.6132075471698113, "no_speech_prob": 1.0348509249524795e-06}, {"id": 1023, "seek": 496476, "start": 4964.76, "end": 4972.320000000001, "text": " Then it actually brings up the documentation shows you what the parameters are and shows you what it returns", "tokens": [1396, 309, 767, 5607, 493, 264, 14333, 3110, 291, 437, 264, 9834, 366, 293, 3110, 291, 437, 309, 11247], "temperature": 0.0, "avg_logprob": -0.1522467892344405, "compression_ratio": 1.6912442396313363, "no_speech_prob": 2.026136144195334e-06}, {"id": 1024, "seek": 496476, "start": 4973.04, "end": 4975.04, "text": " And gives you examples", "tokens": [400, 2709, 291, 5110], "temperature": 0.0, "avg_logprob": -0.1522467892344405, "compression_ratio": 1.6912442396313363, "no_speech_prob": 2.026136144195334e-06}, {"id": 1025, "seek": 496476, "start": 4975.4400000000005, "end": 4978.360000000001, "text": " Okay, if you press it three times", "tokens": [1033, 11, 498, 291, 1886, 309, 1045, 1413], "temperature": 0.0, "avg_logprob": -0.1522467892344405, "compression_ratio": 1.6912442396313363, "no_speech_prob": 2.026136144195334e-06}, {"id": 1026, "seek": 496476, "start": 4979.4400000000005, "end": 4985.72, "text": " Then it actually pops up a whole little separate window with that information okay, so shift tab is super helpful", "tokens": [1396, 309, 767, 16795, 493, 257, 1379, 707, 4994, 4910, 365, 300, 1589, 1392, 11, 370, 5513, 4421, 307, 1687, 4961], "temperature": 0.0, "avg_logprob": -0.1522467892344405, "compression_ratio": 1.6912442396313363, "no_speech_prob": 2.026136144195334e-06}, {"id": 1027, "seek": 496476, "start": 4987.400000000001, "end": 4992.56, "text": " One way to grab that window straight away is if you just put question mark at the start", "tokens": [1485, 636, 281, 4444, 300, 4910, 2997, 1314, 307, 498, 291, 445, 829, 1168, 1491, 412, 264, 722], "temperature": 0.0, "avg_logprob": -0.1522467892344405, "compression_ratio": 1.6912442396313363, "no_speech_prob": 2.026136144195334e-06}, {"id": 1028, "seek": 499256, "start": 4992.56, "end": 4996.72, "text": " Then it just brings up that little documentation window", "tokens": [1396, 309, 445, 5607, 493, 300, 707, 14333, 4910], "temperature": 0.0, "avg_logprob": -0.1553951760996943, "compression_ratio": 1.7902621722846441, "no_speech_prob": 1.0677011914594914e-06}, {"id": 1029, "seek": 499256, "start": 4998.92, "end": 5000.92, "text": " Now the other thing to be aware of is", "tokens": [823, 264, 661, 551, 281, 312, 3650, 295, 307], "temperature": 0.0, "avg_logprob": -0.1553951760996943, "compression_ratio": 1.7902621722846441, "no_speech_prob": 1.0677011914594914e-06}, {"id": 1030, "seek": 499256, "start": 5001.360000000001, "end": 5006.8, "text": " Increasingly during this course we're going to be looking at the actual source code of fast AI itself and learning", "tokens": [30367, 3349, 356, 1830, 341, 1164, 321, 434, 516, 281, 312, 1237, 412, 264, 3539, 4009, 3089, 295, 2370, 7318, 2564, 293, 2539], "temperature": 0.0, "avg_logprob": -0.1553951760996943, "compression_ratio": 1.7902621722846441, "no_speech_prob": 1.0677011914594914e-06}, {"id": 1031, "seek": 499256, "start": 5007.120000000001, "end": 5009.18, "text": " How it's built and why it's built that way", "tokens": [1012, 309, 311, 3094, 293, 983, 309, 311, 3094, 300, 636], "temperature": 0.0, "avg_logprob": -0.1553951760996943, "compression_ratio": 1.7902621722846441, "no_speech_prob": 1.0677011914594914e-06}, {"id": 1032, "seek": 499256, "start": 5009.72, "end": 5013.8, "text": " It's really helpful to look at source code in order to you know", "tokens": [467, 311, 534, 4961, 281, 574, 412, 4009, 3089, 294, 1668, 281, 291, 458], "temperature": 0.0, "avg_logprob": -0.1553951760996943, "compression_ratio": 1.7902621722846441, "no_speech_prob": 1.0677011914594914e-06}, {"id": 1033, "seek": 499256, "start": 5014.4800000000005, "end": 5016.56, "text": " Understand what you can do and how you can do it", "tokens": [26093, 437, 291, 393, 360, 293, 577, 291, 393, 360, 309], "temperature": 0.0, "avg_logprob": -0.1553951760996943, "compression_ratio": 1.7902621722846441, "no_speech_prob": 1.0677011914594914e-06}, {"id": 1034, "seek": 501656, "start": 5016.56, "end": 5022.52, "text": " So if you for example wanted to look at the source code for learn dot predict you can just put two question marks", "tokens": [407, 498, 291, 337, 1365, 1415, 281, 574, 412, 264, 4009, 3089, 337, 1466, 5893, 6069, 291, 393, 445, 829, 732, 1168, 10640], "temperature": 0.0, "avg_logprob": -0.1535670592053102, "compression_ratio": 1.680672268907563, "no_speech_prob": 2.0261384179320885e-06}, {"id": 1035, "seek": 501656, "start": 5024.84, "end": 5030.360000000001, "text": " Okay, and you can see it's popped up the source code right and so it's just a single line of code", "tokens": [1033, 11, 293, 291, 393, 536, 309, 311, 21545, 493, 264, 4009, 3089, 558, 293, 370, 309, 311, 445, 257, 2167, 1622, 295, 3089], "temperature": 0.0, "avg_logprob": -0.1535670592053102, "compression_ratio": 1.680672268907563, "no_speech_prob": 2.0261384179320885e-06}, {"id": 1036, "seek": 501656, "start": 5030.360000000001, "end": 5032.8, "text": " You'll very often find that fast AI", "tokens": [509, 603, 588, 2049, 915, 300, 2370, 7318], "temperature": 0.0, "avg_logprob": -0.1535670592053102, "compression_ratio": 1.680672268907563, "no_speech_prob": 2.0261384179320885e-06}, {"id": 1037, "seek": 501656, "start": 5033.360000000001, "end": 5036.72, "text": " Methods like they're they're designed to never be more than", "tokens": [25285, 82, 411, 436, 434, 436, 434, 4761, 281, 1128, 312, 544, 813], "temperature": 0.0, "avg_logprob": -0.1535670592053102, "compression_ratio": 1.680672268907563, "no_speech_prob": 2.0261384179320885e-06}, {"id": 1038, "seek": 501656, "start": 5037.4400000000005, "end": 5042.68, "text": " About half a screen full of code and they're often under six lines, so you can see this case", "tokens": [7769, 1922, 257, 2568, 1577, 295, 3089, 293, 436, 434, 2049, 833, 2309, 3876, 11, 370, 291, 393, 536, 341, 1389], "temperature": 0.0, "avg_logprob": -0.1535670592053102, "compression_ratio": 1.680672268907563, "no_speech_prob": 2.0261384179320885e-06}, {"id": 1039, "seek": 504268, "start": 5042.68, "end": 5047.34, "text": " It's calling predict with tags, so we could then get the source code for that in the same way", "tokens": [467, 311, 5141, 6069, 365, 18632, 11, 370, 321, 727, 550, 483, 264, 4009, 3089, 337, 300, 294, 264, 912, 636], "temperature": 0.0, "avg_logprob": -0.1689283229686596, "compression_ratio": 1.924778761061947, "no_speech_prob": 2.9480063403752865e-06}, {"id": 1040, "seek": 504268, "start": 5049.280000000001, "end": 5050.96, "text": " Okay", "tokens": [1033], "temperature": 0.0, "avg_logprob": -0.1689283229686596, "compression_ratio": 1.924778761061947, "no_speech_prob": 2.9480063403752865e-06}, {"id": 1041, "seek": 504268, "start": 5050.96, "end": 5056.38, "text": " And then that's calling a function called predict with tags so we could get the documentation for that in the same way and", "tokens": [400, 550, 300, 311, 5141, 257, 2445, 1219, 6069, 365, 18632, 370, 321, 727, 483, 264, 14333, 337, 300, 294, 264, 912, 636, 293], "temperature": 0.0, "avg_logprob": -0.1689283229686596, "compression_ratio": 1.924778761061947, "no_speech_prob": 2.9480063403752865e-06}, {"id": 1042, "seek": 504268, "start": 5056.84, "end": 5060.96, "text": " Then so here we are and then finally that's what it does it iterates through a data loader", "tokens": [1396, 370, 510, 321, 366, 293, 550, 2721, 300, 311, 437, 309, 775, 309, 17138, 1024, 807, 257, 1412, 3677, 260], "temperature": 0.0, "avg_logprob": -0.1689283229686596, "compression_ratio": 1.924778761061947, "no_speech_prob": 2.9480063403752865e-06}, {"id": 1043, "seek": 504268, "start": 5061.200000000001, "end": 5063.52, "text": " Gets the predictions and then passes them back", "tokens": [460, 1385, 264, 21264, 293, 550, 11335, 552, 646], "temperature": 0.0, "avg_logprob": -0.1689283229686596, "compression_ratio": 1.924778761061947, "no_speech_prob": 2.9480063403752865e-06}, {"id": 1044, "seek": 504268, "start": 5064.12, "end": 5066.12, "text": " and so forth okay, so", "tokens": [293, 370, 5220, 1392, 11, 370], "temperature": 0.0, "avg_logprob": -0.1689283229686596, "compression_ratio": 1.924778761061947, "no_speech_prob": 2.9480063403752865e-06}, {"id": 1045, "seek": 504268, "start": 5067.04, "end": 5070.1, "text": " Question mark question mark is how to get source code", "tokens": [14464, 1491, 1168, 1491, 307, 577, 281, 483, 4009, 3089], "temperature": 0.0, "avg_logprob": -0.1689283229686596, "compression_ratio": 1.924778761061947, "no_speech_prob": 2.9480063403752865e-06}, {"id": 1046, "seek": 507010, "start": 5070.1, "end": 5073.660000000001, "text": " the single question mark is how to get documentation and", "tokens": [264, 2167, 1168, 1491, 307, 577, 281, 483, 14333, 293], "temperature": 0.0, "avg_logprob": -0.2121634196086102, "compression_ratio": 1.6600985221674878, "no_speech_prob": 1.816216240513313e-06}, {"id": 1047, "seek": 507010, "start": 5074.780000000001, "end": 5080.700000000001, "text": " Shift tab is how to bring up parameters or press it more times to get the docs", "tokens": [28304, 4421, 307, 577, 281, 1565, 493, 9834, 420, 1886, 309, 544, 1413, 281, 483, 264, 45623], "temperature": 0.0, "avg_logprob": -0.2121634196086102, "compression_ratio": 1.6600985221674878, "no_speech_prob": 1.816216240513313e-06}, {"id": 1048, "seek": 507010, "start": 5081.660000000001, "end": 5083.02, "text": " So that's really helpful", "tokens": [407, 300, 311, 534, 4961], "temperature": 0.0, "avg_logprob": -0.2121634196086102, "compression_ratio": 1.6600985221674878, "no_speech_prob": 1.816216240513313e-06}, {"id": 1049, "seek": 507010, "start": 5083.02, "end": 5090.1, "text": " Another really helpful thing to know about is how to use jupyter notebook well and the button that you want to know is H", "tokens": [3996, 534, 4961, 551, 281, 458, 466, 307, 577, 281, 764, 361, 1010, 88, 391, 21060, 731, 293, 264, 2960, 300, 291, 528, 281, 458, 307, 389], "temperature": 0.0, "avg_logprob": -0.2121634196086102, "compression_ratio": 1.6600985221674878, "no_speech_prob": 1.816216240513313e-06}, {"id": 1050, "seek": 507010, "start": 5090.900000000001, "end": 5094.38, "text": " If you press H. It will bring up the keyboard shortcuts", "tokens": [759, 291, 1886, 389, 13, 467, 486, 1565, 493, 264, 10186, 34620], "temperature": 0.0, "avg_logprob": -0.2121634196086102, "compression_ratio": 1.6600985221674878, "no_speech_prob": 1.816216240513313e-06}, {"id": 1051, "seek": 509438, "start": 5094.38, "end": 5100.52, "text": " Palette and so now you can see exactly what jupyter notebook can do and how to do it", "tokens": [6116, 3007, 293, 370, 586, 291, 393, 536, 2293, 437, 361, 1010, 88, 391, 21060, 393, 360, 293, 577, 281, 360, 309], "temperature": 0.0, "avg_logprob": -0.1627242695201527, "compression_ratio": 1.6690391459074734, "no_speech_prob": 1.933351086336188e-06}, {"id": 1052, "seek": 509438, "start": 5100.52, "end": 5103.66, "text": " I personally find all of these functions useful", "tokens": [286, 5665, 915, 439, 295, 613, 6828, 4420], "temperature": 0.0, "avg_logprob": -0.1627242695201527, "compression_ratio": 1.6690391459074734, "no_speech_prob": 1.933351086336188e-06}, {"id": 1053, "seek": 509438, "start": 5103.9800000000005, "end": 5108.9400000000005, "text": " So I generally tell students to try and learn four or five different keyboard shortcuts a day", "tokens": [407, 286, 5101, 980, 1731, 281, 853, 293, 1466, 1451, 420, 1732, 819, 10186, 34620, 257, 786], "temperature": 0.0, "avg_logprob": -0.1627242695201527, "compression_ratio": 1.6690391459074734, "no_speech_prob": 1.933351086336188e-06}, {"id": 1054, "seek": 509438, "start": 5109.900000000001, "end": 5114.92, "text": " Try them out see what they do see how they work, and then you can try practicing in that session", "tokens": [6526, 552, 484, 536, 437, 436, 360, 536, 577, 436, 589, 11, 293, 550, 291, 393, 853, 11350, 294, 300, 5481], "temperature": 0.0, "avg_logprob": -0.1627242695201527, "compression_ratio": 1.6690391459074734, "no_speech_prob": 1.933351086336188e-06}, {"id": 1055, "seek": 509438, "start": 5115.74, "end": 5120.66, "text": " And one very important thing to remember when you're finished with your work for the day", "tokens": [400, 472, 588, 1021, 551, 281, 1604, 562, 291, 434, 4335, 365, 428, 589, 337, 264, 786], "temperature": 0.0, "avg_logprob": -0.1627242695201527, "compression_ratio": 1.6690391459074734, "no_speech_prob": 1.933351086336188e-06}, {"id": 1056, "seek": 512066, "start": 5120.66, "end": 5127.5, "text": " Go back to paper space and click on that little button which stops and starts the machine so after it's stopped", "tokens": [1037, 646, 281, 3035, 1901, 293, 2052, 322, 300, 707, 2960, 597, 10094, 293, 3719, 264, 3479, 370, 934, 309, 311, 5936], "temperature": 0.0, "avg_logprob": -0.16623722712198893, "compression_ratio": 1.800751879699248, "no_speech_prob": 1.7061727248801617e-06}, {"id": 1057, "seek": 512066, "start": 5127.5, "end": 5132.099999999999, "text": " You'll see it says connection closed, and you'll see it's off if you leave it running", "tokens": [509, 603, 536, 309, 1619, 4984, 5395, 11, 293, 291, 603, 536, 309, 311, 766, 498, 291, 1856, 309, 2614], "temperature": 0.0, "avg_logprob": -0.16623722712198893, "compression_ratio": 1.800751879699248, "no_speech_prob": 1.7061727248801617e-06}, {"id": 1058, "seek": 512066, "start": 5132.22, "end": 5137.099999999999, "text": " You'll be charged for it same thing with Cressul be sure to go to your Cressul", "tokens": [509, 603, 312, 11109, 337, 309, 912, 551, 365, 383, 735, 425, 312, 988, 281, 352, 281, 428, 383, 735, 425], "temperature": 0.0, "avg_logprob": -0.16623722712198893, "compression_ratio": 1.800751879699248, "no_speech_prob": 1.7061727248801617e-06}, {"id": 1059, "seek": 512066, "start": 5137.9, "end": 5143.0599999999995, "text": " Instance and stop it you can't just turn your computer off or close the browser", "tokens": [2730, 719, 293, 1590, 309, 291, 393, 380, 445, 1261, 428, 3820, 766, 420, 1998, 264, 11185], "temperature": 0.0, "avg_logprob": -0.16623722712198893, "compression_ratio": 1.800751879699248, "no_speech_prob": 1.7061727248801617e-06}, {"id": 1060, "seek": 514306, "start": 5143.06, "end": 5150.1, "text": " You actually have to stop it in Cressul or in paper space and don't forget to do that or you'll end up being charged until", "tokens": [509, 767, 362, 281, 1590, 309, 294, 383, 735, 425, 420, 294, 3035, 1901, 293, 500, 380, 2870, 281, 360, 300, 420, 291, 603, 917, 493, 885, 11109, 1826], "temperature": 0.0, "avg_logprob": -0.18878410801743017, "compression_ratio": 1.6337448559670782, "no_speech_prob": 1.003010424938111e-06}, {"id": 1061, "seek": 514306, "start": 5150.660000000001, "end": 5152.660000000001, "text": " You finally do remember", "tokens": [509, 2721, 360, 1604], "temperature": 0.0, "avg_logprob": -0.18878410801743017, "compression_ratio": 1.6337448559670782, "no_speech_prob": 1.003010424938111e-06}, {"id": 1062, "seek": 514306, "start": 5153.22, "end": 5157.9400000000005, "text": " Okay, so I think that's all the information that you need to get started", "tokens": [1033, 11, 370, 286, 519, 300, 311, 439, 264, 1589, 300, 291, 643, 281, 483, 1409], "temperature": 0.0, "avg_logprob": -0.18878410801743017, "compression_ratio": 1.6337448559670782, "no_speech_prob": 1.003010424938111e-06}, {"id": 1063, "seek": 514306, "start": 5158.42, "end": 5160.9400000000005, "text": " Please remember about the forums okay?", "tokens": [2555, 1604, 466, 264, 26998, 1392, 30], "temperature": 0.0, "avg_logprob": -0.18878410801743017, "compression_ratio": 1.6337448559670782, "no_speech_prob": 1.003010424938111e-06}, {"id": 1064, "seek": 514306, "start": 5161.38, "end": 5164.5, "text": " If you get stuck at any point check them out", "tokens": [759, 291, 483, 5541, 412, 604, 935, 1520, 552, 484], "temperature": 0.0, "avg_logprob": -0.18878410801743017, "compression_ratio": 1.6337448559670782, "no_speech_prob": 1.003010424938111e-06}, {"id": 1065, "seek": 514306, "start": 5164.5, "end": 5171.02, "text": " But before you do make sure you read the information on course dot fast at AI for each lesson", "tokens": [583, 949, 291, 360, 652, 988, 291, 1401, 264, 1589, 322, 1164, 5893, 2370, 412, 7318, 337, 1184, 6898], "temperature": 0.0, "avg_logprob": -0.18878410801743017, "compression_ratio": 1.6337448559670782, "no_speech_prob": 1.003010424938111e-06}, {"id": 1066, "seek": 517102, "start": 5171.02, "end": 5177.900000000001, "text": " All right because that is going to tell you about like things that have changed okay, so if there's been some change to", "tokens": [1057, 558, 570, 300, 307, 516, 281, 980, 291, 466, 411, 721, 300, 362, 3105, 1392, 11, 370, 498, 456, 311, 668, 512, 1319, 281], "temperature": 0.0, "avg_logprob": -0.1954440372746165, "compression_ratio": 1.5377777777777777, "no_speech_prob": 4.495109351410065e-06}, {"id": 1067, "seek": 517102, "start": 5179.34, "end": 5180.900000000001, "text": " Which?", "tokens": [3013, 30], "temperature": 0.0, "avg_logprob": -0.1954440372746165, "compression_ratio": 1.5377777777777777, "no_speech_prob": 4.495109351410065e-06}, {"id": 1068, "seek": 517102, "start": 5180.900000000001, "end": 5186.06, "text": " Jupiter notebook provider we suggest using or how to set up paper space or anything like that", "tokens": [24567, 21060, 12398, 321, 3402, 1228, 420, 577, 281, 992, 493, 3035, 1901, 420, 1340, 411, 300], "temperature": 0.0, "avg_logprob": -0.1954440372746165, "compression_ratio": 1.5377777777777777, "no_speech_prob": 4.495109351410065e-06}, {"id": 1069, "seek": 517102, "start": 5186.540000000001, "end": 5188.780000000001, "text": " That'll all be on course dot fast at AI", "tokens": [663, 603, 439, 312, 322, 1164, 5893, 2370, 412, 7318], "temperature": 0.0, "avg_logprob": -0.1954440372746165, "compression_ratio": 1.5377777777777777, "no_speech_prob": 4.495109351410065e-06}, {"id": 1070, "seek": 518878, "start": 5188.78, "end": 5200.74, "text": " Okay, thanks very much for watching and look forward to seeing you in the next lesson you", "tokens": [50364, 1033, 11, 3231, 588, 709, 337, 1976, 293, 574, 2128, 281, 2577, 291, 294, 264, 958, 6898, 291, 50962], "temperature": 0.0, "avg_logprob": -0.27866411209106445, "compression_ratio": 1.1125, "no_speech_prob": 1.8340511815040372e-05}], "language": "en"}