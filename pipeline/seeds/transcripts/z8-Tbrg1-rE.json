{"text": " So let me talk a little bit about the derivation of Naive Bayes. I think might be helpful for another kind of perspective of what are we even using here. I guess before I get into that, so this is the notebook 3B. So I've got some links if you've been having trouble installing the Fast AI library. I should say I really really highly recommend using Conda as if you're not already for this. I put, I'm not gonna, I don't think I'm gonna go into it here, but I had some questions last time wanting more detail about randomized SVD, and so I did just put a little bit in here of kind of the the key thing and like the key things I wanted you to know about randomized SVD are just that it is fast and it gives us the truncated SVD, whereas kind of with the traditional approach it's like we're calculating the full SVD and throwing stuff away, and then if you're curious to know more I've got some got some more details in here. But let's since we're talking about Naive Bayes, let's remember Bayes theorem. And so here I have an example from the book The Drunkard's Walk, which I read a long time ago but really enjoyed. It's kind of a lots of applications of how probability shows up in in various answer, various areas in pop culture. The writer is a physicist and in the book he shares the example that he tested positive for HIV in 1989 and his doctor told him this means there's a 99.9% chance that he had HIV. Here true positives, so if A is positive test results, B is having HIV, true positives was 99.9%, the prevalence was just 0.01%, and the rate of false positives was 0.1%. So I want to take you I want you to take a moment and calculate given a positive test result based on these numbers what were the chances that he that he actually had HIV. So take a moment to calculate this and you'll be using Bayes theorem. And this is a very, Bayes theorem is very relevant both in medicine with dealing with false positives and false negatives. Also in law there are a number of court cases where people have lawyers have made mistakes because they didn't didn't know or understand Bayes theorem. So it kind of shows up a lot of places. So someone want to share what they got? Good, but 9%? Yes that's correct 9%. And so good job. One approach to solving these that I like is to instead of dealing with percents to think about a group of people and so here I've done this with okay if you had 10,000 people how many people would kind of be in each bucket? So out of 10,000 people there would be only one this is so 1989 statistics since the prevalence was just 0.01% there would just be one person who was HIV positive out of that group 9,999 that are negative. However with the false positive rates that would result in 10 false positives and 0 false negatives and you can kind of sum those up to see and so we're interested in given that he's tested positive it's just a 1 in 11 chance. There are questions about this and this is actually just curiosity. Have you guys been seeing problems like this in job interviews or see a few nods? This is something that sometimes can be asked this sort of kind of like a probability calculation. But yeah so Bayes theorem shows up a lot of places and how we're using it in our naive Bayes is so given that a movie review say had the words I loved it we want to know what's the probability that that's a positive review. We don't have that information so what we'll use instead is what's the probability that given that it's positive it has the words I loved it since conditional probability Bayes theorem is giving you this way to relate you know which condition is the one that kind of comes first which is the one that you're calculating and so here we flipped it from we want to figure out the probability that's positive using our kind of reviews that we already have we can look at the probability out of positive reviews how many of those include the words I loved or it. The naive part of naive Bayes is that we're assuming that the probabilities of different words are all independent which is probably not the case but you know as we saw it still allowed us to get a reasonable reasonable estimates and and so we're going to basically do this calculation of what's the the probability the reviews positive what's the probability it's negative and then we'll see which which is more likely and here we just had two two classes of interests but you could be doing a classification problem with with more classes. We add to want we add one to our numerator and denominator to avoid dividing by zero and we also take logarithms to avoid multiplying by a bunch of tiny values so if we were going to go off of this formulation we would kind of end up with all these probabilities many of which are very small and multiplying by a lot of small values can can be bad with a computer and I'm going to talk a little bit little bit about about why that is numerical stability so we'll start with an exercise I want you to take a moment to look at this function F and before you try running it in the notebook I want you to write on paper what would the output be if you started X1 equals F of 1 tenth put that back into F and calculate X2 equals F of that answer and keep going for 10 iterations so you're getting an answer and then you're putting it putting that answer back into your method F getting a new answer putting that in and so write down on paper what you would get if you go 10 iterations of that. Is that a hand? You got two-fifths okay and now what's something that made it easier for doing it in your head or potentially? So this is I was trying to be a leading question so did you detect a pattern? Yeah yeah so this seems like it's cycling through right some answers so let me try running this and I'm gonna run this 80 times. Oh. Let me make sure my kernel is... All right. So for 10, let me see, 1, 2, 3, 4, 5, 6, 7, 8, 9. I might be off one. Did everyone get two fifths? This is what they thought it should be. So what happens when I actually ran it? OK, I see. So it's starting out like what we expect, right? Like this seems like a pattern. It's going 0.1, 0.2, 0.4, 0.8. And then we kind of start getting a little bit of something over here on the edge, like in the very small decimal, which is OK at first. Like we can tell this is still supposed to be 0.6, 0.2, 0.4, 0.8, 0.6, 0.2, 0.4, 0.8, and so on. But eventually, this is going to cause problems for us. And if you run this long enough, you'll see this is now it's converged to 1 everywhere. And that's not what you were getting by hand, right? It seems like it was going to cycle forever. And so this is one of the problems about using computers, potentially, which is that math is continuous and also infinite. But computers are discrete and finite. So we're having to kind of approximate how we store numbers. Two limitations for representing numbers in the computer are that they can't be arbitrarily large or small, because we've just got this finite amount of space. And also, there have to be gaps between them. So in math, numbers are continuous. But on a computer, we're having to represent them in this discrete way. So it's helpful to understand a little bit about how computers store numbers to kind of realize where these problems might arise. We care about accuracy. Computers can't store infinitely accurate numbers. And so it's possible to create calculations that give wrong answers, particularly when we're repeating an operation many times, as we were before. So before, we were kind of recursively using the same function again and again, which did involve some multiplication. And that can create problems and did. So computers store numbers for floating points. There are three parts. There's the sine, positive or negative, what's called the mantissa, and the exponent. And the base, which is also called the radix, is usually assumed to be 2. The sine is just a single bit. And the mantissa can also be referred to as the significant. And if you, I know, in high school learned about significant digits, you might have talked about the significant there. IEEE sets, which is the kind of an electrical engineering society, sets standards around how numbers should be stored. So it's got a maximum. This is for double precision, which is a kind of type of floating point number. Numbers can be as large as 1.79 times 10 to the 308. So that's pretty big, or as small as 2 times 10 to the negative 308. Something interesting to note is so then the interval 1 to 2 is represented by this discrete subset of 1, and then 1 plus 2 to the negative 52, 1 plus 2 times 2 to the negative 52, 1 plus 3 times 2 to the negative 52, and so on until you get to 2. You use that same method to represent the numbers in the interval 2 to 4. And it means that numbers are not equidistant apart. So kind of the smaller numbers are, the closer they can be represented together as you get bigger, you've got bigger gaps between the numbers since we're breaking up the interval 1 to 2 into, I guess, 52 numbers here. And 2 to 4 is also being broken up into the same number of numbers. And half the distance between 1 and the next largest number is considered, it's called machine epsilon. And this can vary by computer, but IEEE standards for double precision specify that machine epsilon should be 2 to the negative 53 approximately. There are questions about this idea of computers storing numbers. So this is just kind of interesting to know, and this explains this is why we were taking the logarithm with our naive Bayes. Nice property of log. So we were going to have this product of all these tiny probabilities. And we wanted to avoid that. All this multiplication of things very close to 0 could have been a problem. What is the log of a product? Do you remember? The sum of the logs. Yeah, so that's a really nice property, and that kind of rescues us a little bit from having to worry about, oh, we're going to be multiplying all these tiny things. There are questions about that? OK. And then kind of while we're on this topic, just because it came up a little bit last week, I just wanted to mention the speeds of different types of memory. With a disclaimer, this is not strictly an NLP topic, but it's something that I think is useful to know before you finish your MSDS and that you'll definitely be seeing. So Jeff Dean gave a talk a few years ago with numbers everybody should know, showing what an L1 cache reference is. It's half a nanosecond. L2 cache reference is 7 nanoseconds. Referencing main memory or RAM is 100 nanoseconds. And so on, as you start getting stuff over a network, it's 20,000 nanoseconds. Something within a data center, 500,000 nanoseconds. Disk seek is 10 million nanoseconds. There's an updated interactive version of these numbers. So the ones listed there from a few years ago, this is kind of neat. It shows you and kind of look at over the years. So the slider controls what year. We're here in 2019. And what happens is, so here a black square represents 1 nanosecond. So we see an L1 cache reference is 1 nanosecond. Or actually probably less, but they have it as 1 nanosecond. And then here, 100 nanoseconds. So 100 black squares is a single blue square. And a main memory reference would be 100 nanoseconds. And the key thing to note about this is that just typically, you don't have to have these exact numbers memorized. But as you're going up a level, it's typically an order of magnitude slower. So this is not something that's scaling linearly. But as you're going from L1 cache to L2 to main memory, it's scaling much worse than linearly. And so this is kind of just to highlight the importance of thinking about how much, kind of why you have to move things around, or why you need to be mindful of where things are stored and how much you're having to move them around. So I just wanted to share this. Any questions? All right. So we just have 10 minutes of class left. Maybe I'll start introducing regex. Let's see if I have the regex notebook open. And actually, OK, so what I will do, we're going to be, so regex is a useful tool in NLP. It can seem pretty cryptic when you first start learning about it. And this is the regex notebook. Let me put this. And we're going to consider two motivating examples. So this is going to be a kind of less complete notebook or application than the others. And that's why I didn't give it a number. But it is something that sometimes is very useful and that I want you to see. So one problem could be, suppose we're given some data that includes phone numbers. And some of it has dashes, some has faces, maybe there's some with parentheses. Some of it might just be wrong. 101 Howard is not a phone number. But we've got a mistake in our data, which happens a lot. We want to be able to pick out the phone numbers and also only the phone numbers. And then the second application, which is a little bit more involved, will be, suppose we wanted to create our own tokens. And so in the earlier notebooks, we've used SKLearn or we've used FastAI to do our tokenization. But now we're going to go a level lower and see how could we do it ourselves if we wanted to. So for the phone number problem, we're given these phone numbers. And I'm going to attempt it without RegEx just to kind of motivate the need for RegEx. So I'm not actually recommending that you do this. Here I wrote a method to check. I said, OK, valid characters are just the numbers, which you can get from Python's string.digits, as well as spaces, hyphens, and parentheses. And then actually, I should be running these as I go. And then checking, are these phone numbers? And so that works OK. However, things like 1, 2, 3, 4, which is way too short to be a phone number, that fails. And are you familiar with this using assert to check test cases? OK, good. Cool. So I want to deal with that. Now I'm trying to confirm that I have 10 numbers in a number to make it truly a phone number. But I also want to get the digits out, which will be useful. And I want to check things like, this is probably not a phone number because they put spaces between every two digits. That's not how you format a phone number. Would like to be able to pick that up. That's not a phone number. And so this is going to get really unwieldy, because you see here I'm already kind of having to have a lot of different ifs to check things. This code, you can imagine becoming even lengthier with lots of branches of your if else than what you're checking of formats. So I do not recommend this approach. I wanted to offer regx as an alternative. And I should say, part of this notebook I adapted from Brian Spearing's notebooks from when he taught this last summer. Regular expressions are a pattern matching language. And instead of writing 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, you can write 0 to 9, or backslash lowercase d represents digits. I'll also note regx, you kind of have to learn it by doing it. And I'll give you some time next time to practice. Because I think when you just hear it, it can sound like, oh my goodness, this is a bunch of cryptic sounding rules. So you really just kind of have to play around with it. And fortunately, there are some nice sites that I've got links to a few of them that give you kind of practice problems, and also kind of display if what you're doing works or not. And matching phone numbers is considered the hello world of regx. You could write something 0 to 9, 0 to 9. Here, this is picking off three numbers, dash, three more numbers, dash, four numbers. That's terribly long and not what you want to write. You could refactor that into backslash d, backslash d, 10 of those. That's still a bit long and not what you want to write. Fortunately, regx gives you quantifiers. So here, this can be refactored into slash d, three, dash. So basically, this is saying three numeric digits, a dash, three more numeric digits, dash, four numeric digits. Some unexact quantifiers, a question mark means 0 or 1 of something, star means 0 or more, plus sign means 1 or more for specifying what you want. And so I think I'll stop here, and we'll continue next time. But next time, we'll take some time to practice this and kind of see what they look like on the ground when you're using them. But yeah, we'll end here. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 7.32, "text": " So let me talk a little bit about the derivation of Naive Bayes. I think might", "tokens": [407, 718, 385, 751, 257, 707, 857, 466, 264, 10151, 399, 295, 6056, 488, 7840, 279, 13, 286, 519, 1062], "temperature": 0.0, "avg_logprob": -0.22049258617644615, "compression_ratio": 1.5146443514644352, "no_speech_prob": 0.006095652002841234}, {"id": 1, "seek": 0, "start": 7.32, "end": 12.120000000000001, "text": " be helpful for another kind of perspective of what are we even", "tokens": [312, 4961, 337, 1071, 733, 295, 4585, 295, 437, 366, 321, 754], "temperature": 0.0, "avg_logprob": -0.22049258617644615, "compression_ratio": 1.5146443514644352, "no_speech_prob": 0.006095652002841234}, {"id": 2, "seek": 0, "start": 12.120000000000001, "end": 18.76, "text": " using here. I guess before I get into that, so this is the notebook 3B.", "tokens": [1228, 510, 13, 286, 2041, 949, 286, 483, 666, 300, 11, 370, 341, 307, 264, 21060, 805, 33, 13], "temperature": 0.0, "avg_logprob": -0.22049258617644615, "compression_ratio": 1.5146443514644352, "no_speech_prob": 0.006095652002841234}, {"id": 3, "seek": 0, "start": 18.76, "end": 23.400000000000002, "text": " So I've got some links if you've been having trouble installing the Fast AI", "tokens": [407, 286, 600, 658, 512, 6123, 498, 291, 600, 668, 1419, 5253, 20762, 264, 15968, 7318], "temperature": 0.0, "avg_logprob": -0.22049258617644615, "compression_ratio": 1.5146443514644352, "no_speech_prob": 0.006095652002841234}, {"id": 4, "seek": 0, "start": 23.400000000000002, "end": 29.28, "text": " library. I should say I really really highly recommend using Conda as if", "tokens": [6405, 13, 286, 820, 584, 286, 534, 534, 5405, 2748, 1228, 383, 12233, 382, 498], "temperature": 0.0, "avg_logprob": -0.22049258617644615, "compression_ratio": 1.5146443514644352, "no_speech_prob": 0.006095652002841234}, {"id": 5, "seek": 2928, "start": 29.28, "end": 36.32, "text": " you're not already for this. I put, I'm not gonna, I don't think I'm gonna go into", "tokens": [291, 434, 406, 1217, 337, 341, 13, 286, 829, 11, 286, 478, 406, 799, 11, 286, 500, 380, 519, 286, 478, 799, 352, 666], "temperature": 0.0, "avg_logprob": -0.14555826010527434, "compression_ratio": 1.7048458149779735, "no_speech_prob": 8.479713142151013e-05}, {"id": 6, "seek": 2928, "start": 36.32, "end": 40.480000000000004, "text": " it here, but I had some questions last time wanting more detail about", "tokens": [309, 510, 11, 457, 286, 632, 512, 1651, 1036, 565, 7935, 544, 2607, 466], "temperature": 0.0, "avg_logprob": -0.14555826010527434, "compression_ratio": 1.7048458149779735, "no_speech_prob": 8.479713142151013e-05}, {"id": 7, "seek": 2928, "start": 40.480000000000004, "end": 46.44, "text": " randomized SVD, and so I did just put a little bit in here of kind of the the", "tokens": [38513, 31910, 35, 11, 293, 370, 286, 630, 445, 829, 257, 707, 857, 294, 510, 295, 733, 295, 264, 264], "temperature": 0.0, "avg_logprob": -0.14555826010527434, "compression_ratio": 1.7048458149779735, "no_speech_prob": 8.479713142151013e-05}, {"id": 8, "seek": 2928, "start": 46.44, "end": 49.84, "text": " key thing and like the key things I wanted you to know about randomized SVD", "tokens": [2141, 551, 293, 411, 264, 2141, 721, 286, 1415, 291, 281, 458, 466, 38513, 31910, 35], "temperature": 0.0, "avg_logprob": -0.14555826010527434, "compression_ratio": 1.7048458149779735, "no_speech_prob": 8.479713142151013e-05}, {"id": 9, "seek": 2928, "start": 49.84, "end": 56.16, "text": " are just that it is fast and it gives us the truncated SVD, whereas kind of with", "tokens": [366, 445, 300, 309, 307, 2370, 293, 309, 2709, 505, 264, 504, 409, 66, 770, 31910, 35, 11, 9735, 733, 295, 365], "temperature": 0.0, "avg_logprob": -0.14555826010527434, "compression_ratio": 1.7048458149779735, "no_speech_prob": 8.479713142151013e-05}, {"id": 10, "seek": 5616, "start": 56.16, "end": 59.48, "text": " the traditional approach it's like we're calculating the full SVD and throwing", "tokens": [264, 5164, 3109, 309, 311, 411, 321, 434, 28258, 264, 1577, 31910, 35, 293, 10238], "temperature": 0.0, "avg_logprob": -0.15767523385946033, "compression_ratio": 1.532, "no_speech_prob": 9.515788406133652e-06}, {"id": 11, "seek": 5616, "start": 59.48, "end": 64.92, "text": " stuff away, and then if you're curious to know more I've got some got some more", "tokens": [1507, 1314, 11, 293, 550, 498, 291, 434, 6369, 281, 458, 544, 286, 600, 658, 512, 658, 512, 544], "temperature": 0.0, "avg_logprob": -0.15767523385946033, "compression_ratio": 1.532, "no_speech_prob": 9.515788406133652e-06}, {"id": 12, "seek": 5616, "start": 64.92, "end": 71.28, "text": " details in here. But let's since we're talking about Naive Bayes, let's", "tokens": [4365, 294, 510, 13, 583, 718, 311, 1670, 321, 434, 1417, 466, 6056, 488, 7840, 279, 11, 718, 311], "temperature": 0.0, "avg_logprob": -0.15767523385946033, "compression_ratio": 1.532, "no_speech_prob": 9.515788406133652e-06}, {"id": 13, "seek": 5616, "start": 71.28, "end": 77.84, "text": " remember Bayes theorem. And so here I have an example from the book The", "tokens": [1604, 7840, 279, 20904, 13, 400, 370, 510, 286, 362, 364, 1365, 490, 264, 1446, 440], "temperature": 0.0, "avg_logprob": -0.15767523385946033, "compression_ratio": 1.532, "no_speech_prob": 9.515788406133652e-06}, {"id": 14, "seek": 5616, "start": 77.84, "end": 82.67999999999999, "text": " Drunkard's Walk, which I read a long time ago but really enjoyed. It's kind of a", "tokens": [2491, 3197, 515, 311, 10818, 11, 597, 286, 1401, 257, 938, 565, 2057, 457, 534, 4626, 13, 467, 311, 733, 295, 257], "temperature": 0.0, "avg_logprob": -0.15767523385946033, "compression_ratio": 1.532, "no_speech_prob": 9.515788406133652e-06}, {"id": 15, "seek": 8268, "start": 82.68, "end": 88.84, "text": " lots of applications of how probability shows up in in various answer, various", "tokens": [3195, 295, 5821, 295, 577, 8482, 3110, 493, 294, 294, 3683, 1867, 11, 3683], "temperature": 0.0, "avg_logprob": -0.13232013506767076, "compression_ratio": 1.5097087378640777, "no_speech_prob": 7.182854915299686e-06}, {"id": 16, "seek": 8268, "start": 88.84, "end": 94.60000000000001, "text": " areas in pop culture. The writer is a physicist and in the book he shares the", "tokens": [3179, 294, 1665, 3713, 13, 440, 9936, 307, 257, 42466, 293, 294, 264, 1446, 415, 12182, 264], "temperature": 0.0, "avg_logprob": -0.13232013506767076, "compression_ratio": 1.5097087378640777, "no_speech_prob": 7.182854915299686e-06}, {"id": 17, "seek": 8268, "start": 94.60000000000001, "end": 101.04, "text": " example that he tested positive for HIV in 1989 and his doctor told him this", "tokens": [1365, 300, 415, 8246, 3353, 337, 15907, 294, 22427, 293, 702, 4631, 1907, 796, 341], "temperature": 0.0, "avg_logprob": -0.13232013506767076, "compression_ratio": 1.5097087378640777, "no_speech_prob": 7.182854915299686e-06}, {"id": 18, "seek": 8268, "start": 101.04, "end": 111.48, "text": " means there's a 99.9% chance that he had HIV. Here true positives, so if A is", "tokens": [1355, 456, 311, 257, 11803, 13, 24, 4, 2931, 300, 415, 632, 15907, 13, 1692, 2074, 35127, 11, 370, 498, 316, 307], "temperature": 0.0, "avg_logprob": -0.13232013506767076, "compression_ratio": 1.5097087378640777, "no_speech_prob": 7.182854915299686e-06}, {"id": 19, "seek": 11148, "start": 111.48, "end": 120.24000000000001, "text": " positive test results, B is having HIV, true positives was 99.9%, the", "tokens": [3353, 1500, 3542, 11, 363, 307, 1419, 15907, 11, 2074, 35127, 390, 11803, 13, 24, 8923, 264], "temperature": 0.0, "avg_logprob": -0.15679476811335638, "compression_ratio": 1.6096256684491979, "no_speech_prob": 2.046157169388607e-05}, {"id": 20, "seek": 11148, "start": 120.24000000000001, "end": 128.88, "text": " prevalence was just 0.01%, and the rate of false positives was 0.1%. So I", "tokens": [42583, 390, 445, 1958, 13, 10607, 8923, 293, 264, 3314, 295, 7908, 35127, 390, 1958, 13, 16, 6856, 407, 286], "temperature": 0.0, "avg_logprob": -0.15679476811335638, "compression_ratio": 1.6096256684491979, "no_speech_prob": 2.046157169388607e-05}, {"id": 21, "seek": 11148, "start": 128.88, "end": 134.88, "text": " want to take you I want you to take a moment and calculate given a positive", "tokens": [528, 281, 747, 291, 286, 528, 291, 281, 747, 257, 1623, 293, 8873, 2212, 257, 3353], "temperature": 0.0, "avg_logprob": -0.15679476811335638, "compression_ratio": 1.6096256684491979, "no_speech_prob": 2.046157169388607e-05}, {"id": 22, "seek": 11148, "start": 134.88, "end": 141.04000000000002, "text": " test result based on these numbers what were the chances that he that he actually", "tokens": [1500, 1874, 2361, 322, 613, 3547, 437, 645, 264, 10486, 300, 415, 300, 415, 767], "temperature": 0.0, "avg_logprob": -0.15679476811335638, "compression_ratio": 1.6096256684491979, "no_speech_prob": 2.046157169388607e-05}, {"id": 23, "seek": 14104, "start": 141.04, "end": 149.56, "text": " had HIV. So take a moment to calculate this and you'll be using Bayes", "tokens": [632, 15907, 13, 407, 747, 257, 1623, 281, 8873, 341, 293, 291, 603, 312, 1228, 7840, 279], "temperature": 0.0, "avg_logprob": -0.16546488644783958, "compression_ratio": 1.4610389610389611, "no_speech_prob": 1.7777223547454923e-05}, {"id": 24, "seek": 14104, "start": 149.56, "end": 159.76, "text": " theorem. And this is a very, Bayes theorem is very relevant both in medicine", "tokens": [20904, 13, 400, 341, 307, 257, 588, 11, 7840, 279, 20904, 307, 588, 7340, 1293, 294, 7195], "temperature": 0.0, "avg_logprob": -0.16546488644783958, "compression_ratio": 1.4610389610389611, "no_speech_prob": 1.7777223547454923e-05}, {"id": 25, "seek": 14104, "start": 159.76, "end": 166.16, "text": " with dealing with false positives and false negatives. Also in law there are a", "tokens": [365, 6260, 365, 7908, 35127, 293, 7908, 40019, 13, 2743, 294, 2101, 456, 366, 257], "temperature": 0.0, "avg_logprob": -0.16546488644783958, "compression_ratio": 1.4610389610389611, "no_speech_prob": 1.7777223547454923e-05}, {"id": 26, "seek": 16616, "start": 166.16, "end": 171.07999999999998, "text": " number of court cases where people have lawyers have made mistakes because they", "tokens": [1230, 295, 4753, 3331, 689, 561, 362, 16219, 362, 1027, 8038, 570, 436], "temperature": 0.0, "avg_logprob": -0.30693851817737927, "compression_ratio": 1.4104046242774566, "no_speech_prob": 1.2218099072924815e-05}, {"id": 27, "seek": 16616, "start": 171.07999999999998, "end": 176.16, "text": " didn't didn't know or understand Bayes theorem. So it kind of shows up a lot of", "tokens": [994, 380, 994, 380, 458, 420, 1223, 7840, 279, 20904, 13, 407, 309, 733, 295, 3110, 493, 257, 688, 295], "temperature": 0.0, "avg_logprob": -0.30693851817737927, "compression_ratio": 1.4104046242774566, "no_speech_prob": 1.2218099072924815e-05}, {"id": 28, "seek": 16616, "start": 176.16, "end": 178.44, "text": " places.", "tokens": [3190, 13], "temperature": 0.0, "avg_logprob": -0.30693851817737927, "compression_ratio": 1.4104046242774566, "no_speech_prob": 1.2218099072924815e-05}, {"id": 29, "seek": 16616, "start": 182.68, "end": 192.35999999999999, "text": " So someone want to share what they got? Good, but 9%? Yes that's correct 9%.", "tokens": [407, 1580, 528, 281, 2073, 437, 436, 658, 30, 2205, 11, 457, 1722, 4, 30, 1079, 300, 311, 3006, 1722, 6856], "temperature": 0.0, "avg_logprob": -0.30693851817737927, "compression_ratio": 1.4104046242774566, "no_speech_prob": 1.2218099072924815e-05}, {"id": 30, "seek": 19236, "start": 192.36, "end": 201.76000000000002, "text": " And so good job. One approach to solving these that I like is to", "tokens": [400, 370, 665, 1691, 13, 1485, 3109, 281, 12606, 613, 300, 286, 411, 307, 281], "temperature": 0.0, "avg_logprob": -0.18394831607216283, "compression_ratio": 1.394904458598726, "no_speech_prob": 2.840650086000096e-05}, {"id": 31, "seek": 19236, "start": 201.76000000000002, "end": 206.72000000000003, "text": " instead of dealing with percents to think about a group of people and so here", "tokens": [2602, 295, 6260, 365, 680, 36976, 281, 519, 466, 257, 1594, 295, 561, 293, 370, 510], "temperature": 0.0, "avg_logprob": -0.18394831607216283, "compression_ratio": 1.394904458598726, "no_speech_prob": 2.840650086000096e-05}, {"id": 32, "seek": 19236, "start": 206.72000000000003, "end": 213.12, "text": " I've done this with okay if you had 10,000 people how many people would kind", "tokens": [286, 600, 1096, 341, 365, 1392, 498, 291, 632, 1266, 11, 1360, 561, 577, 867, 561, 576, 733], "temperature": 0.0, "avg_logprob": -0.18394831607216283, "compression_ratio": 1.394904458598726, "no_speech_prob": 2.840650086000096e-05}, {"id": 33, "seek": 21312, "start": 213.12, "end": 224.0, "text": " of be in each bucket? So out of 10,000 people there would be only one this is", "tokens": [295, 312, 294, 1184, 13058, 30, 407, 484, 295, 1266, 11, 1360, 561, 456, 576, 312, 787, 472, 341, 307], "temperature": 0.0, "avg_logprob": -0.15563891010899697, "compression_ratio": 1.4242424242424243, "no_speech_prob": 4.4950825213163625e-06}, {"id": 34, "seek": 21312, "start": 224.0, "end": 231.48000000000002, "text": " so 1989 statistics since the prevalence was just 0.01% there would just be one", "tokens": [370, 22427, 12523, 1670, 264, 42583, 390, 445, 1958, 13, 10607, 4, 456, 576, 445, 312, 472], "temperature": 0.0, "avg_logprob": -0.15563891010899697, "compression_ratio": 1.4242424242424243, "no_speech_prob": 4.4950825213163625e-06}, {"id": 35, "seek": 21312, "start": 231.48000000000002, "end": 238.76, "text": " person who was HIV positive out of that group 9,999 that are negative. However", "tokens": [954, 567, 390, 15907, 3353, 484, 295, 300, 1594, 1722, 11, 49017, 300, 366, 3671, 13, 2908], "temperature": 0.0, "avg_logprob": -0.15563891010899697, "compression_ratio": 1.4242424242424243, "no_speech_prob": 4.4950825213163625e-06}, {"id": 36, "seek": 23876, "start": 238.76, "end": 246.56, "text": " with the false positive rates that would result in 10 false positives and 0 false", "tokens": [365, 264, 7908, 3353, 6846, 300, 576, 1874, 294, 1266, 7908, 35127, 293, 1958, 7908], "temperature": 0.0, "avg_logprob": -0.17617967210966964, "compression_ratio": 1.5866666666666667, "no_speech_prob": 1.2606436939677224e-05}, {"id": 37, "seek": 23876, "start": 246.56, "end": 253.6, "text": " negatives and you can kind of sum those up to see and so we're interested in", "tokens": [40019, 293, 291, 393, 733, 295, 2408, 729, 493, 281, 536, 293, 370, 321, 434, 3102, 294], "temperature": 0.0, "avg_logprob": -0.17617967210966964, "compression_ratio": 1.5866666666666667, "no_speech_prob": 1.2606436939677224e-05}, {"id": 38, "seek": 23876, "start": 255.64, "end": 263.88, "text": " given that he's tested positive it's just a 1 in 11 chance. There are questions", "tokens": [2212, 300, 415, 311, 8246, 3353, 309, 311, 445, 257, 502, 294, 2975, 2931, 13, 821, 366, 1651], "temperature": 0.0, "avg_logprob": -0.17617967210966964, "compression_ratio": 1.5866666666666667, "no_speech_prob": 1.2606436939677224e-05}, {"id": 39, "seek": 26388, "start": 263.88, "end": 270.52, "text": " about this and this is actually just curiosity. Have you guys been seeing", "tokens": [466, 341, 293, 341, 307, 767, 445, 18769, 13, 3560, 291, 1074, 668, 2577], "temperature": 0.0, "avg_logprob": -0.17533061083625345, "compression_ratio": 1.4726027397260273, "no_speech_prob": 2.7107007554150186e-05}, {"id": 40, "seek": 26388, "start": 270.52, "end": 278.76, "text": " problems like this in job interviews or see a few nods? This is", "tokens": [2740, 411, 341, 294, 1691, 12318, 420, 536, 257, 1326, 15224, 82, 30, 639, 307], "temperature": 0.0, "avg_logprob": -0.17533061083625345, "compression_ratio": 1.4726027397260273, "no_speech_prob": 2.7107007554150186e-05}, {"id": 41, "seek": 26388, "start": 278.76, "end": 283.92, "text": " something that sometimes can be asked this sort of kind of like a probability", "tokens": [746, 300, 2171, 393, 312, 2351, 341, 1333, 295, 733, 295, 411, 257, 8482], "temperature": 0.0, "avg_logprob": -0.17533061083625345, "compression_ratio": 1.4726027397260273, "no_speech_prob": 2.7107007554150186e-05}, {"id": 42, "seek": 28392, "start": 283.92, "end": 294.28000000000003, "text": " calculation. But yeah so Bayes theorem shows up a lot of places and how we're", "tokens": [17108, 13, 583, 1338, 370, 7840, 279, 20904, 3110, 493, 257, 688, 295, 3190, 293, 577, 321, 434], "temperature": 0.0, "avg_logprob": -0.15772773424784342, "compression_ratio": 1.4615384615384615, "no_speech_prob": 5.33802131030825e-06}, {"id": 43, "seek": 28392, "start": 294.28000000000003, "end": 303.56, "text": " using it in our naive Bayes is so given that a movie review say had the", "tokens": [1228, 309, 294, 527, 29052, 7840, 279, 307, 370, 2212, 300, 257, 3169, 3131, 584, 632, 264], "temperature": 0.0, "avg_logprob": -0.15772773424784342, "compression_ratio": 1.4615384615384615, "no_speech_prob": 5.33802131030825e-06}, {"id": 44, "seek": 28392, "start": 303.56, "end": 307.84000000000003, "text": " words I loved it we want to know what's the probability that that's a positive", "tokens": [2283, 286, 4333, 309, 321, 528, 281, 458, 437, 311, 264, 8482, 300, 300, 311, 257, 3353], "temperature": 0.0, "avg_logprob": -0.15772773424784342, "compression_ratio": 1.4615384615384615, "no_speech_prob": 5.33802131030825e-06}, {"id": 45, "seek": 30784, "start": 307.84, "end": 315.44, "text": " review. We don't have that information so what we'll use instead is what's the", "tokens": [3131, 13, 492, 500, 380, 362, 300, 1589, 370, 437, 321, 603, 764, 2602, 307, 437, 311, 264], "temperature": 0.0, "avg_logprob": -0.09827044914508688, "compression_ratio": 1.7242990654205608, "no_speech_prob": 4.133304173592478e-05}, {"id": 46, "seek": 30784, "start": 315.44, "end": 320.67999999999995, "text": " probability that given that it's positive it has the words I loved it", "tokens": [8482, 300, 2212, 300, 309, 311, 3353, 309, 575, 264, 2283, 286, 4333, 309], "temperature": 0.0, "avg_logprob": -0.09827044914508688, "compression_ratio": 1.7242990654205608, "no_speech_prob": 4.133304173592478e-05}, {"id": 47, "seek": 30784, "start": 320.67999999999995, "end": 325.35999999999996, "text": " since conditional probability Bayes theorem is giving you this way to relate", "tokens": [1670, 27708, 8482, 7840, 279, 20904, 307, 2902, 291, 341, 636, 281, 10961], "temperature": 0.0, "avg_logprob": -0.09827044914508688, "compression_ratio": 1.7242990654205608, "no_speech_prob": 4.133304173592478e-05}, {"id": 48, "seek": 30784, "start": 325.35999999999996, "end": 330.32, "text": " you know which condition is the one that kind of comes first which", "tokens": [291, 458, 597, 4188, 307, 264, 472, 300, 733, 295, 1487, 700, 597], "temperature": 0.0, "avg_logprob": -0.09827044914508688, "compression_ratio": 1.7242990654205608, "no_speech_prob": 4.133304173592478e-05}, {"id": 49, "seek": 30784, "start": 330.32, "end": 336.15999999999997, "text": " is the one that you're calculating and so here we flipped it from we want to", "tokens": [307, 264, 472, 300, 291, 434, 28258, 293, 370, 510, 321, 26273, 309, 490, 321, 528, 281], "temperature": 0.0, "avg_logprob": -0.09827044914508688, "compression_ratio": 1.7242990654205608, "no_speech_prob": 4.133304173592478e-05}, {"id": 50, "seek": 33616, "start": 336.16, "end": 339.84000000000003, "text": " figure out the probability that's positive using our kind of reviews that", "tokens": [2573, 484, 264, 8482, 300, 311, 3353, 1228, 527, 733, 295, 10229, 300], "temperature": 0.0, "avg_logprob": -0.08133116329417509, "compression_ratio": 1.7110091743119267, "no_speech_prob": 6.339054380077869e-06}, {"id": 51, "seek": 33616, "start": 339.84000000000003, "end": 344.08000000000004, "text": " we already have we can look at the probability out of positive reviews how", "tokens": [321, 1217, 362, 321, 393, 574, 412, 264, 8482, 484, 295, 3353, 10229, 577], "temperature": 0.0, "avg_logprob": -0.08133116329417509, "compression_ratio": 1.7110091743119267, "no_speech_prob": 6.339054380077869e-06}, {"id": 52, "seek": 33616, "start": 344.08000000000004, "end": 352.44000000000005, "text": " many of those include the words I loved or it. The naive part of naive Bayes is", "tokens": [867, 295, 729, 4090, 264, 2283, 286, 4333, 420, 309, 13, 440, 29052, 644, 295, 29052, 7840, 279, 307], "temperature": 0.0, "avg_logprob": -0.08133116329417509, "compression_ratio": 1.7110091743119267, "no_speech_prob": 6.339054380077869e-06}, {"id": 53, "seek": 33616, "start": 352.44000000000005, "end": 356.76000000000005, "text": " that we're assuming that the probabilities of different words are all", "tokens": [300, 321, 434, 11926, 300, 264, 33783, 295, 819, 2283, 366, 439], "temperature": 0.0, "avg_logprob": -0.08133116329417509, "compression_ratio": 1.7110091743119267, "no_speech_prob": 6.339054380077869e-06}, {"id": 54, "seek": 33616, "start": 356.76000000000005, "end": 362.44000000000005, "text": " independent which is probably not the case but you know as we saw it still", "tokens": [6695, 597, 307, 1391, 406, 264, 1389, 457, 291, 458, 382, 321, 1866, 309, 920], "temperature": 0.0, "avg_logprob": -0.08133116329417509, "compression_ratio": 1.7110091743119267, "no_speech_prob": 6.339054380077869e-06}, {"id": 55, "seek": 36244, "start": 362.44, "end": 369.4, "text": " allowed us to get a reasonable reasonable estimates and and so we're", "tokens": [4350, 505, 281, 483, 257, 10585, 10585, 20561, 293, 293, 370, 321, 434], "temperature": 0.0, "avg_logprob": -0.14224328190447336, "compression_ratio": 1.759433962264151, "no_speech_prob": 5.9549329307628796e-06}, {"id": 56, "seek": 36244, "start": 369.4, "end": 374.4, "text": " going to basically do this calculation of what's the the probability the", "tokens": [516, 281, 1936, 360, 341, 17108, 295, 437, 311, 264, 264, 8482, 264], "temperature": 0.0, "avg_logprob": -0.14224328190447336, "compression_ratio": 1.759433962264151, "no_speech_prob": 5.9549329307628796e-06}, {"id": 57, "seek": 36244, "start": 374.4, "end": 378.12, "text": " reviews positive what's the probability it's negative and then we'll see which", "tokens": [10229, 3353, 437, 311, 264, 8482, 309, 311, 3671, 293, 550, 321, 603, 536, 597], "temperature": 0.0, "avg_logprob": -0.14224328190447336, "compression_ratio": 1.759433962264151, "no_speech_prob": 5.9549329307628796e-06}, {"id": 58, "seek": 36244, "start": 378.12, "end": 384.0, "text": " which is more likely and here we just had two two classes of interests but", "tokens": [597, 307, 544, 3700, 293, 510, 321, 445, 632, 732, 732, 5359, 295, 8847, 457], "temperature": 0.0, "avg_logprob": -0.14224328190447336, "compression_ratio": 1.759433962264151, "no_speech_prob": 5.9549329307628796e-06}, {"id": 59, "seek": 36244, "start": 384.0, "end": 390.28, "text": " you could be doing a classification problem with with more classes. We add to", "tokens": [291, 727, 312, 884, 257, 21538, 1154, 365, 365, 544, 5359, 13, 492, 909, 281], "temperature": 0.0, "avg_logprob": -0.14224328190447336, "compression_ratio": 1.759433962264151, "no_speech_prob": 5.9549329307628796e-06}, {"id": 60, "seek": 39028, "start": 390.28, "end": 395.44, "text": " want we add one to our numerator and denominator to avoid dividing by zero", "tokens": [528, 321, 909, 472, 281, 527, 30380, 293, 20687, 281, 5042, 26764, 538, 4018], "temperature": 0.0, "avg_logprob": -0.10172084103459897, "compression_ratio": 1.7297297297297298, "no_speech_prob": 1.2804917787434533e-05}, {"id": 61, "seek": 39028, "start": 395.44, "end": 403.23999999999995, "text": " and we also take logarithms to avoid multiplying by a bunch of tiny values so", "tokens": [293, 321, 611, 747, 41473, 355, 2592, 281, 5042, 30955, 538, 257, 3840, 295, 5870, 4190, 370], "temperature": 0.0, "avg_logprob": -0.10172084103459897, "compression_ratio": 1.7297297297297298, "no_speech_prob": 1.2804917787434533e-05}, {"id": 62, "seek": 39028, "start": 403.23999999999995, "end": 407.2, "text": " if we were going to go off of this formulation we would kind of end up with", "tokens": [498, 321, 645, 516, 281, 352, 766, 295, 341, 37642, 321, 576, 733, 295, 917, 493, 365], "temperature": 0.0, "avg_logprob": -0.10172084103459897, "compression_ratio": 1.7297297297297298, "no_speech_prob": 1.2804917787434533e-05}, {"id": 63, "seek": 39028, "start": 407.2, "end": 412.59999999999997, "text": " all these probabilities many of which are very small and multiplying by a lot", "tokens": [439, 613, 33783, 867, 295, 597, 366, 588, 1359, 293, 30955, 538, 257, 688], "temperature": 0.0, "avg_logprob": -0.10172084103459897, "compression_ratio": 1.7297297297297298, "no_speech_prob": 1.2804917787434533e-05}, {"id": 64, "seek": 39028, "start": 412.59999999999997, "end": 417.11999999999995, "text": " of small values can can be bad with a computer and I'm going to talk a little", "tokens": [295, 1359, 4190, 393, 393, 312, 1578, 365, 257, 3820, 293, 286, 478, 516, 281, 751, 257, 707], "temperature": 0.0, "avg_logprob": -0.10172084103459897, "compression_ratio": 1.7297297297297298, "no_speech_prob": 1.2804917787434533e-05}, {"id": 65, "seek": 41712, "start": 417.12, "end": 423.76, "text": " bit little bit about about why that is numerical stability so we'll start with", "tokens": [857, 707, 857, 466, 466, 983, 300, 307, 29054, 11826, 370, 321, 603, 722, 365], "temperature": 0.0, "avg_logprob": -0.15243095546573787, "compression_ratio": 1.5555555555555556, "no_speech_prob": 7.527676643803716e-06}, {"id": 66, "seek": 41712, "start": 423.76, "end": 431.04, "text": " an exercise I want you to take a moment to look at this function F and before", "tokens": [364, 5380, 286, 528, 291, 281, 747, 257, 1623, 281, 574, 412, 341, 2445, 479, 293, 949], "temperature": 0.0, "avg_logprob": -0.15243095546573787, "compression_ratio": 1.5555555555555556, "no_speech_prob": 7.527676643803716e-06}, {"id": 67, "seek": 41712, "start": 431.04, "end": 436.12, "text": " you try running it in the notebook I want you to write on paper what would", "tokens": [291, 853, 2614, 309, 294, 264, 21060, 286, 528, 291, 281, 2464, 322, 3035, 437, 576], "temperature": 0.0, "avg_logprob": -0.15243095546573787, "compression_ratio": 1.5555555555555556, "no_speech_prob": 7.527676643803716e-06}, {"id": 68, "seek": 41712, "start": 436.12, "end": 445.24, "text": " the output be if you started X1 equals F of 1 tenth put that back into F and", "tokens": [264, 5598, 312, 498, 291, 1409, 1783, 16, 6915, 479, 295, 502, 27269, 829, 300, 646, 666, 479, 293], "temperature": 0.0, "avg_logprob": -0.15243095546573787, "compression_ratio": 1.5555555555555556, "no_speech_prob": 7.527676643803716e-06}, {"id": 69, "seek": 44524, "start": 445.24, "end": 451.04, "text": " calculate X2 equals F of that answer and keep going for 10 iterations so you're", "tokens": [8873, 1783, 17, 6915, 479, 295, 300, 1867, 293, 1066, 516, 337, 1266, 36540, 370, 291, 434], "temperature": 0.0, "avg_logprob": -0.11075930692711655, "compression_ratio": 1.813953488372093, "no_speech_prob": 5.255047199170804e-06}, {"id": 70, "seek": 44524, "start": 451.04, "end": 454.08, "text": " getting an answer and then you're putting it putting that answer back into", "tokens": [1242, 364, 1867, 293, 550, 291, 434, 3372, 309, 3372, 300, 1867, 646, 666], "temperature": 0.0, "avg_logprob": -0.11075930692711655, "compression_ratio": 1.813953488372093, "no_speech_prob": 5.255047199170804e-06}, {"id": 71, "seek": 44524, "start": 454.08, "end": 458.0, "text": " your method F getting a new answer putting that in and so write down on", "tokens": [428, 3170, 479, 1242, 257, 777, 1867, 3372, 300, 294, 293, 370, 2464, 760, 322], "temperature": 0.0, "avg_logprob": -0.11075930692711655, "compression_ratio": 1.813953488372093, "no_speech_prob": 5.255047199170804e-06}, {"id": 72, "seek": 44524, "start": 458.0, "end": 468.40000000000003, "text": " paper what you would get if you go 10 iterations of that. Is that a hand? You got", "tokens": [3035, 437, 291, 576, 483, 498, 291, 352, 1266, 36540, 295, 300, 13, 1119, 300, 257, 1011, 30, 509, 658], "temperature": 0.0, "avg_logprob": -0.11075930692711655, "compression_ratio": 1.813953488372093, "no_speech_prob": 5.255047199170804e-06}, {"id": 73, "seek": 44524, "start": 468.40000000000003, "end": 471.92, "text": " two-fifths okay and now what's something that made it easier for doing it in your", "tokens": [732, 12, 69, 351, 32184, 1392, 293, 586, 437, 311, 746, 300, 1027, 309, 3571, 337, 884, 309, 294, 428], "temperature": 0.0, "avg_logprob": -0.11075930692711655, "compression_ratio": 1.813953488372093, "no_speech_prob": 5.255047199170804e-06}, {"id": 74, "seek": 47192, "start": 471.92, "end": 487.76, "text": " head or potentially? So this is I was trying to be a leading question so did", "tokens": [1378, 420, 7263, 30, 407, 341, 307, 286, 390, 1382, 281, 312, 257, 5775, 1168, 370, 630], "temperature": 0.0, "avg_logprob": -0.19444828767042893, "compression_ratio": 1.2833333333333334, "no_speech_prob": 6.853900686110137e-06}, {"id": 75, "seek": 47192, "start": 487.76, "end": 493.48, "text": " you detect a pattern? Yeah yeah so this seems like it's cycling through right", "tokens": [291, 5531, 257, 5102, 30, 865, 1338, 370, 341, 2544, 411, 309, 311, 22425, 807, 558], "temperature": 0.0, "avg_logprob": -0.19444828767042893, "compression_ratio": 1.2833333333333334, "no_speech_prob": 6.853900686110137e-06}, {"id": 76, "seek": 49348, "start": 493.48, "end": 504.6, "text": " some answers so let me try running this and I'm gonna run this 80 times.", "tokens": [512, 6338, 370, 718, 385, 853, 2614, 341, 293, 286, 478, 799, 1190, 341, 4688, 1413, 13], "temperature": 0.0, "avg_logprob": -0.3408512842087519, "compression_ratio": 1.0140845070422535, "no_speech_prob": 4.264644667273387e-05}, {"id": 77, "seek": 50460, "start": 504.6, "end": 510.24, "text": " Oh.", "tokens": [876, 13], "temperature": 1.0, "avg_logprob": -1.361847718556722, "compression_ratio": 0.2727272727272727, "no_speech_prob": 3.822745566139929e-05}, {"id": 78, "seek": 51024, "start": 510.24, "end": 525.92, "text": " Let me make sure my kernel is...", "tokens": [961, 385, 652, 988, 452, 28256, 307, 485], "temperature": 0.0, "avg_logprob": -0.3592577616373698, "compression_ratio": 1.0333333333333334, "no_speech_prob": 0.03512606397271156}, {"id": 79, "seek": 51024, "start": 525.92, "end": 532.88, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.3592577616373698, "compression_ratio": 1.0333333333333334, "no_speech_prob": 0.03512606397271156}, {"id": 80, "seek": 51024, "start": 532.88, "end": 539.84, "text": " So for 10, let me see, 1, 2, 3, 4, 5, 6, 7, 8, 9.", "tokens": [407, 337, 1266, 11, 718, 385, 536, 11, 502, 11, 568, 11, 805, 11, 1017, 11, 1025, 11, 1386, 11, 1614, 11, 1649, 11, 1722, 13], "temperature": 0.0, "avg_logprob": -0.3592577616373698, "compression_ratio": 1.0333333333333334, "no_speech_prob": 0.03512606397271156}, {"id": 81, "seek": 53984, "start": 539.84, "end": 541.1600000000001, "text": " I might be off one.", "tokens": [286, 1062, 312, 766, 472, 13], "temperature": 0.0, "avg_logprob": -0.2284623811829765, "compression_ratio": 1.460093896713615, "no_speech_prob": 3.8221831346163526e-05}, {"id": 82, "seek": 53984, "start": 541.1600000000001, "end": 542.76, "text": " Did everyone get two fifths?", "tokens": [2589, 1518, 483, 732, 9266, 82, 30], "temperature": 0.0, "avg_logprob": -0.2284623811829765, "compression_ratio": 1.460093896713615, "no_speech_prob": 3.8221831346163526e-05}, {"id": 83, "seek": 53984, "start": 542.76, "end": 544.6800000000001, "text": " This is what they thought it should be.", "tokens": [639, 307, 437, 436, 1194, 309, 820, 312, 13], "temperature": 0.0, "avg_logprob": -0.2284623811829765, "compression_ratio": 1.460093896713615, "no_speech_prob": 3.8221831346163526e-05}, {"id": 84, "seek": 53984, "start": 544.6800000000001, "end": 548.8000000000001, "text": " So what happens when I actually ran it?", "tokens": [407, 437, 2314, 562, 286, 767, 5872, 309, 30], "temperature": 0.0, "avg_logprob": -0.2284623811829765, "compression_ratio": 1.460093896713615, "no_speech_prob": 3.8221831346163526e-05}, {"id": 85, "seek": 53984, "start": 548.8000000000001, "end": 549.64, "text": " OK, I see.", "tokens": [2264, 11, 286, 536, 13], "temperature": 0.0, "avg_logprob": -0.2284623811829765, "compression_ratio": 1.460093896713615, "no_speech_prob": 3.8221831346163526e-05}, {"id": 86, "seek": 53984, "start": 555.48, "end": 558.48, "text": " So it's starting out like what we expect, right?", "tokens": [407, 309, 311, 2891, 484, 411, 437, 321, 2066, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.2284623811829765, "compression_ratio": 1.460093896713615, "no_speech_prob": 3.8221831346163526e-05}, {"id": 87, "seek": 53984, "start": 558.48, "end": 559.8000000000001, "text": " Like this seems like a pattern.", "tokens": [1743, 341, 2544, 411, 257, 5102, 13], "temperature": 0.0, "avg_logprob": -0.2284623811829765, "compression_ratio": 1.460093896713615, "no_speech_prob": 3.8221831346163526e-05}, {"id": 88, "seek": 53984, "start": 559.8000000000001, "end": 564.4000000000001, "text": " It's going 0.1, 0.2, 0.4, 0.8.", "tokens": [467, 311, 516, 1958, 13, 16, 11, 1958, 13, 17, 11, 1958, 13, 19, 11, 1958, 13, 23, 13], "temperature": 0.0, "avg_logprob": -0.2284623811829765, "compression_ratio": 1.460093896713615, "no_speech_prob": 3.8221831346163526e-05}, {"id": 89, "seek": 53984, "start": 564.4000000000001, "end": 568.0, "text": " And then we kind of start getting a little bit of something", "tokens": [400, 550, 321, 733, 295, 722, 1242, 257, 707, 857, 295, 746], "temperature": 0.0, "avg_logprob": -0.2284623811829765, "compression_ratio": 1.460093896713615, "no_speech_prob": 3.8221831346163526e-05}, {"id": 90, "seek": 56800, "start": 568.0, "end": 571.84, "text": " over here on the edge, like in the very small decimal, which", "tokens": [670, 510, 322, 264, 4691, 11, 411, 294, 264, 588, 1359, 26601, 11, 597], "temperature": 0.0, "avg_logprob": -0.13925379877505095, "compression_ratio": 1.553921568627451, "no_speech_prob": 1.8342307157581672e-05}, {"id": 91, "seek": 56800, "start": 571.84, "end": 572.76, "text": " is OK at first.", "tokens": [307, 2264, 412, 700, 13], "temperature": 0.0, "avg_logprob": -0.13925379877505095, "compression_ratio": 1.553921568627451, "no_speech_prob": 1.8342307157581672e-05}, {"id": 92, "seek": 56800, "start": 572.76, "end": 575.96, "text": " Like we can tell this is still supposed to be 0.6, 0.2, 0.4,", "tokens": [1743, 321, 393, 980, 341, 307, 920, 3442, 281, 312, 1958, 13, 21, 11, 1958, 13, 17, 11, 1958, 13, 19, 11], "temperature": 0.0, "avg_logprob": -0.13925379877505095, "compression_ratio": 1.553921568627451, "no_speech_prob": 1.8342307157581672e-05}, {"id": 93, "seek": 56800, "start": 575.96, "end": 581.76, "text": " 0.8, 0.6, 0.2, 0.4, 0.8, and so on.", "tokens": [1958, 13, 23, 11, 1958, 13, 21, 11, 1958, 13, 17, 11, 1958, 13, 19, 11, 1958, 13, 23, 11, 293, 370, 322, 13], "temperature": 0.0, "avg_logprob": -0.13925379877505095, "compression_ratio": 1.553921568627451, "no_speech_prob": 1.8342307157581672e-05}, {"id": 94, "seek": 56800, "start": 581.76, "end": 586.76, "text": " But eventually, this is going to cause problems for us.", "tokens": [583, 4728, 11, 341, 307, 516, 281, 3082, 2740, 337, 505, 13], "temperature": 0.0, "avg_logprob": -0.13925379877505095, "compression_ratio": 1.553921568627451, "no_speech_prob": 1.8342307157581672e-05}, {"id": 95, "seek": 56800, "start": 586.76, "end": 591.92, "text": " And if you run this long enough, you'll see this is now", "tokens": [400, 498, 291, 1190, 341, 938, 1547, 11, 291, 603, 536, 341, 307, 586], "temperature": 0.0, "avg_logprob": -0.13925379877505095, "compression_ratio": 1.553921568627451, "no_speech_prob": 1.8342307157581672e-05}, {"id": 96, "seek": 56800, "start": 591.92, "end": 595.2, "text": " it's converged to 1 everywhere.", "tokens": [309, 311, 9652, 3004, 281, 502, 5315, 13], "temperature": 0.0, "avg_logprob": -0.13925379877505095, "compression_ratio": 1.553921568627451, "no_speech_prob": 1.8342307157581672e-05}, {"id": 97, "seek": 59520, "start": 595.2, "end": 598.6400000000001, "text": " And that's not what you were getting by hand, right?", "tokens": [400, 300, 311, 406, 437, 291, 645, 1242, 538, 1011, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1620703466010816, "compression_ratio": 1.463276836158192, "no_speech_prob": 1.5534719750576187e-06}, {"id": 98, "seek": 59520, "start": 598.6400000000001, "end": 602.76, "text": " It seems like it was going to cycle forever.", "tokens": [467, 2544, 411, 309, 390, 516, 281, 6586, 5680, 13], "temperature": 0.0, "avg_logprob": -0.1620703466010816, "compression_ratio": 1.463276836158192, "no_speech_prob": 1.5534719750576187e-06}, {"id": 99, "seek": 59520, "start": 602.76, "end": 609.08, "text": " And so this is one of the problems about using computers,", "tokens": [400, 370, 341, 307, 472, 295, 264, 2740, 466, 1228, 10807, 11], "temperature": 0.0, "avg_logprob": -0.1620703466010816, "compression_ratio": 1.463276836158192, "no_speech_prob": 1.5534719750576187e-06}, {"id": 100, "seek": 59520, "start": 609.08, "end": 616.36, "text": " potentially, which is that math is continuous and also infinite.", "tokens": [7263, 11, 597, 307, 300, 5221, 307, 10957, 293, 611, 13785, 13], "temperature": 0.0, "avg_logprob": -0.1620703466010816, "compression_ratio": 1.463276836158192, "no_speech_prob": 1.5534719750576187e-06}, {"id": 101, "seek": 59520, "start": 616.36, "end": 620.12, "text": " But computers are discrete and finite.", "tokens": [583, 10807, 366, 27706, 293, 19362, 13], "temperature": 0.0, "avg_logprob": -0.1620703466010816, "compression_ratio": 1.463276836158192, "no_speech_prob": 1.5534719750576187e-06}, {"id": 102, "seek": 62012, "start": 620.12, "end": 625.8, "text": " So we're having to kind of approximate how we store numbers.", "tokens": [407, 321, 434, 1419, 281, 733, 295, 30874, 577, 321, 3531, 3547, 13], "temperature": 0.0, "avg_logprob": -0.08065818019748963, "compression_ratio": 1.6331877729257642, "no_speech_prob": 1.0288639714417513e-05}, {"id": 103, "seek": 62012, "start": 625.8, "end": 629.5600000000001, "text": " Two limitations for representing numbers in the computer", "tokens": [4453, 15705, 337, 13460, 3547, 294, 264, 3820], "temperature": 0.0, "avg_logprob": -0.08065818019748963, "compression_ratio": 1.6331877729257642, "no_speech_prob": 1.0288639714417513e-05}, {"id": 104, "seek": 62012, "start": 629.5600000000001, "end": 633.08, "text": " are that they can't be arbitrarily large or small,", "tokens": [366, 300, 436, 393, 380, 312, 19071, 3289, 2416, 420, 1359, 11], "temperature": 0.0, "avg_logprob": -0.08065818019748963, "compression_ratio": 1.6331877729257642, "no_speech_prob": 1.0288639714417513e-05}, {"id": 105, "seek": 62012, "start": 633.08, "end": 635.76, "text": " because we've just got this finite amount of space.", "tokens": [570, 321, 600, 445, 658, 341, 19362, 2372, 295, 1901, 13], "temperature": 0.0, "avg_logprob": -0.08065818019748963, "compression_ratio": 1.6331877729257642, "no_speech_prob": 1.0288639714417513e-05}, {"id": 106, "seek": 62012, "start": 635.76, "end": 638.4, "text": " And also, there have to be gaps between them.", "tokens": [400, 611, 11, 456, 362, 281, 312, 15031, 1296, 552, 13], "temperature": 0.0, "avg_logprob": -0.08065818019748963, "compression_ratio": 1.6331877729257642, "no_speech_prob": 1.0288639714417513e-05}, {"id": 107, "seek": 62012, "start": 638.4, "end": 642.52, "text": " So in math, numbers are continuous.", "tokens": [407, 294, 5221, 11, 3547, 366, 10957, 13], "temperature": 0.0, "avg_logprob": -0.08065818019748963, "compression_ratio": 1.6331877729257642, "no_speech_prob": 1.0288639714417513e-05}, {"id": 108, "seek": 62012, "start": 642.52, "end": 644.44, "text": " But on a computer, we're having to represent them", "tokens": [583, 322, 257, 3820, 11, 321, 434, 1419, 281, 2906, 552], "temperature": 0.0, "avg_logprob": -0.08065818019748963, "compression_ratio": 1.6331877729257642, "no_speech_prob": 1.0288639714417513e-05}, {"id": 109, "seek": 62012, "start": 644.44, "end": 647.44, "text": " in this discrete way.", "tokens": [294, 341, 27706, 636, 13], "temperature": 0.0, "avg_logprob": -0.08065818019748963, "compression_ratio": 1.6331877729257642, "no_speech_prob": 1.0288639714417513e-05}, {"id": 110, "seek": 64744, "start": 647.44, "end": 651.36, "text": " So it's helpful to understand a little bit about how computers", "tokens": [407, 309, 311, 4961, 281, 1223, 257, 707, 857, 466, 577, 10807], "temperature": 0.0, "avg_logprob": -0.13139108332192026, "compression_ratio": 1.5810810810810811, "no_speech_prob": 1.0614994607749395e-05}, {"id": 111, "seek": 64744, "start": 651.36, "end": 655.1600000000001, "text": " store numbers to kind of realize where these problems might arise.", "tokens": [3531, 3547, 281, 733, 295, 4325, 689, 613, 2740, 1062, 20288, 13], "temperature": 0.0, "avg_logprob": -0.13139108332192026, "compression_ratio": 1.5810810810810811, "no_speech_prob": 1.0614994607749395e-05}, {"id": 112, "seek": 64744, "start": 659.24, "end": 661.0400000000001, "text": " We care about accuracy.", "tokens": [492, 1127, 466, 14170, 13], "temperature": 0.0, "avg_logprob": -0.13139108332192026, "compression_ratio": 1.5810810810810811, "no_speech_prob": 1.0614994607749395e-05}, {"id": 113, "seek": 64744, "start": 661.0400000000001, "end": 664.48, "text": " Computers can't store infinitely accurate numbers.", "tokens": [37804, 433, 393, 380, 3531, 36227, 8559, 3547, 13], "temperature": 0.0, "avg_logprob": -0.13139108332192026, "compression_ratio": 1.5810810810810811, "no_speech_prob": 1.0614994607749395e-05}, {"id": 114, "seek": 64744, "start": 664.48, "end": 666.48, "text": " And so it's possible to create calculations", "tokens": [400, 370, 309, 311, 1944, 281, 1884, 20448], "temperature": 0.0, "avg_logprob": -0.13139108332192026, "compression_ratio": 1.5810810810810811, "no_speech_prob": 1.0614994607749395e-05}, {"id": 115, "seek": 64744, "start": 666.48, "end": 668.7600000000001, "text": " that give wrong answers, particularly", "tokens": [300, 976, 2085, 6338, 11, 4098], "temperature": 0.0, "avg_logprob": -0.13139108332192026, "compression_ratio": 1.5810810810810811, "no_speech_prob": 1.0614994607749395e-05}, {"id": 116, "seek": 64744, "start": 668.7600000000001, "end": 673.6800000000001, "text": " when we're repeating an operation many times, as we were before.", "tokens": [562, 321, 434, 18617, 364, 6916, 867, 1413, 11, 382, 321, 645, 949, 13], "temperature": 0.0, "avg_logprob": -0.13139108332192026, "compression_ratio": 1.5810810810810811, "no_speech_prob": 1.0614994607749395e-05}, {"id": 117, "seek": 67368, "start": 673.68, "end": 678.0799999999999, "text": " So before, we were kind of recursively using the same function", "tokens": [407, 949, 11, 321, 645, 733, 295, 20560, 3413, 1228, 264, 912, 2445], "temperature": 0.0, "avg_logprob": -0.08902098270172769, "compression_ratio": 1.609865470852018, "no_speech_prob": 1.28050032799365e-05}, {"id": 118, "seek": 67368, "start": 678.0799999999999, "end": 683.5999999999999, "text": " again and again, which did involve some multiplication.", "tokens": [797, 293, 797, 11, 597, 630, 9494, 512, 27290, 13], "temperature": 0.0, "avg_logprob": -0.08902098270172769, "compression_ratio": 1.609865470852018, "no_speech_prob": 1.28050032799365e-05}, {"id": 119, "seek": 67368, "start": 683.5999999999999, "end": 687.56, "text": " And that can create problems and did.", "tokens": [400, 300, 393, 1884, 2740, 293, 630, 13], "temperature": 0.0, "avg_logprob": -0.08902098270172769, "compression_ratio": 1.609865470852018, "no_speech_prob": 1.28050032799365e-05}, {"id": 120, "seek": 67368, "start": 687.56, "end": 691.4799999999999, "text": " So computers store numbers for floating points.", "tokens": [407, 10807, 3531, 3547, 337, 12607, 2793, 13], "temperature": 0.0, "avg_logprob": -0.08902098270172769, "compression_ratio": 1.609865470852018, "no_speech_prob": 1.28050032799365e-05}, {"id": 121, "seek": 67368, "start": 691.4799999999999, "end": 693.4399999999999, "text": " There are three parts.", "tokens": [821, 366, 1045, 3166, 13], "temperature": 0.0, "avg_logprob": -0.08902098270172769, "compression_ratio": 1.609865470852018, "no_speech_prob": 1.28050032799365e-05}, {"id": 122, "seek": 67368, "start": 693.4399999999999, "end": 696.0799999999999, "text": " There's the sine, positive or negative,", "tokens": [821, 311, 264, 18609, 11, 3353, 420, 3671, 11], "temperature": 0.0, "avg_logprob": -0.08902098270172769, "compression_ratio": 1.609865470852018, "no_speech_prob": 1.28050032799365e-05}, {"id": 123, "seek": 67368, "start": 696.0799999999999, "end": 699.88, "text": " what's called the mantissa, and the exponent.", "tokens": [437, 311, 1219, 264, 10845, 10138, 11, 293, 264, 37871, 13], "temperature": 0.0, "avg_logprob": -0.08902098270172769, "compression_ratio": 1.609865470852018, "no_speech_prob": 1.28050032799365e-05}, {"id": 124, "seek": 67368, "start": 699.88, "end": 702.64, "text": " And the base, which is also called the radix,", "tokens": [400, 264, 3096, 11, 597, 307, 611, 1219, 264, 2843, 970, 11], "temperature": 0.0, "avg_logprob": -0.08902098270172769, "compression_ratio": 1.609865470852018, "no_speech_prob": 1.28050032799365e-05}, {"id": 125, "seek": 70264, "start": 702.64, "end": 705.76, "text": " is usually assumed to be 2.", "tokens": [307, 2673, 15895, 281, 312, 568, 13], "temperature": 0.0, "avg_logprob": -0.1225500014221784, "compression_ratio": 1.6008403361344539, "no_speech_prob": 7.766734597680625e-06}, {"id": 126, "seek": 70264, "start": 705.76, "end": 708.16, "text": " The sine is just a single bit.", "tokens": [440, 18609, 307, 445, 257, 2167, 857, 13], "temperature": 0.0, "avg_logprob": -0.1225500014221784, "compression_ratio": 1.6008403361344539, "no_speech_prob": 7.766734597680625e-06}, {"id": 127, "seek": 70264, "start": 708.16, "end": 710.96, "text": " And the mantissa can also be referred to as the significant.", "tokens": [400, 264, 10845, 10138, 393, 611, 312, 10839, 281, 382, 264, 4776, 13], "temperature": 0.0, "avg_logprob": -0.1225500014221784, "compression_ratio": 1.6008403361344539, "no_speech_prob": 7.766734597680625e-06}, {"id": 128, "seek": 70264, "start": 710.96, "end": 712.68, "text": " And if you, I know, in high school", "tokens": [400, 498, 291, 11, 286, 458, 11, 294, 1090, 1395], "temperature": 0.0, "avg_logprob": -0.1225500014221784, "compression_ratio": 1.6008403361344539, "no_speech_prob": 7.766734597680625e-06}, {"id": 129, "seek": 70264, "start": 712.68, "end": 715.6, "text": " learned about significant digits, you", "tokens": [3264, 466, 4776, 27011, 11, 291], "temperature": 0.0, "avg_logprob": -0.1225500014221784, "compression_ratio": 1.6008403361344539, "no_speech_prob": 7.766734597680625e-06}, {"id": 130, "seek": 70264, "start": 715.6, "end": 719.24, "text": " might have talked about the significant there.", "tokens": [1062, 362, 2825, 466, 264, 4776, 456, 13], "temperature": 0.0, "avg_logprob": -0.1225500014221784, "compression_ratio": 1.6008403361344539, "no_speech_prob": 7.766734597680625e-06}, {"id": 131, "seek": 70264, "start": 719.24, "end": 724.28, "text": " IEEE sets, which is the kind of an electrical engineering", "tokens": [286, 7258, 36, 6352, 11, 597, 307, 264, 733, 295, 364, 12147, 7043], "temperature": 0.0, "avg_logprob": -0.1225500014221784, "compression_ratio": 1.6008403361344539, "no_speech_prob": 7.766734597680625e-06}, {"id": 132, "seek": 70264, "start": 724.28, "end": 729.76, "text": " society, sets standards around how numbers should be stored.", "tokens": [4086, 11, 6352, 7787, 926, 577, 3547, 820, 312, 12187, 13], "temperature": 0.0, "avg_logprob": -0.1225500014221784, "compression_ratio": 1.6008403361344539, "no_speech_prob": 7.766734597680625e-06}, {"id": 133, "seek": 70264, "start": 729.76, "end": 731.8, "text": " So it's got a maximum.", "tokens": [407, 309, 311, 658, 257, 6674, 13], "temperature": 0.0, "avg_logprob": -0.1225500014221784, "compression_ratio": 1.6008403361344539, "no_speech_prob": 7.766734597680625e-06}, {"id": 134, "seek": 73180, "start": 731.8, "end": 734.3199999999999, "text": " This is for double precision, which", "tokens": [639, 307, 337, 3834, 18356, 11, 597], "temperature": 0.0, "avg_logprob": -0.14553267161051434, "compression_ratio": 1.527363184079602, "no_speech_prob": 1.2410819181241095e-05}, {"id": 135, "seek": 73180, "start": 734.3199999999999, "end": 738.24, "text": " is a kind of type of floating point number.", "tokens": [307, 257, 733, 295, 2010, 295, 12607, 935, 1230, 13], "temperature": 0.0, "avg_logprob": -0.14553267161051434, "compression_ratio": 1.527363184079602, "no_speech_prob": 1.2410819181241095e-05}, {"id": 136, "seek": 73180, "start": 738.24, "end": 743.4799999999999, "text": " Numbers can be as large as 1.79 times 10 to the 308.", "tokens": [22592, 1616, 393, 312, 382, 2416, 382, 502, 13, 32042, 1413, 1266, 281, 264, 2217, 23, 13], "temperature": 0.0, "avg_logprob": -0.14553267161051434, "compression_ratio": 1.527363184079602, "no_speech_prob": 1.2410819181241095e-05}, {"id": 137, "seek": 73180, "start": 743.4799999999999, "end": 747.7199999999999, "text": " So that's pretty big, or as small as 2 times 10", "tokens": [407, 300, 311, 1238, 955, 11, 420, 382, 1359, 382, 568, 1413, 1266], "temperature": 0.0, "avg_logprob": -0.14553267161051434, "compression_ratio": 1.527363184079602, "no_speech_prob": 1.2410819181241095e-05}, {"id": 138, "seek": 73180, "start": 747.7199999999999, "end": 750.56, "text": " to the negative 308.", "tokens": [281, 264, 3671, 2217, 23, 13], "temperature": 0.0, "avg_logprob": -0.14553267161051434, "compression_ratio": 1.527363184079602, "no_speech_prob": 1.2410819181241095e-05}, {"id": 139, "seek": 73180, "start": 750.56, "end": 753.88, "text": " Something interesting to note is so then the interval 1 to 2", "tokens": [6595, 1880, 281, 3637, 307, 370, 550, 264, 15035, 502, 281, 568], "temperature": 0.0, "avg_logprob": -0.14553267161051434, "compression_ratio": 1.527363184079602, "no_speech_prob": 1.2410819181241095e-05}, {"id": 140, "seek": 73180, "start": 753.88, "end": 758.28, "text": " is represented by this discrete subset of 1,", "tokens": [307, 10379, 538, 341, 27706, 25993, 295, 502, 11], "temperature": 0.0, "avg_logprob": -0.14553267161051434, "compression_ratio": 1.527363184079602, "no_speech_prob": 1.2410819181241095e-05}, {"id": 141, "seek": 75828, "start": 758.28, "end": 762.8399999999999, "text": " and then 1 plus 2 to the negative 52, 1 plus 2 times 2", "tokens": [293, 550, 502, 1804, 568, 281, 264, 3671, 18079, 11, 502, 1804, 568, 1413, 568], "temperature": 0.0, "avg_logprob": -0.0883544921875, "compression_ratio": 1.8412698412698412, "no_speech_prob": 2.684170567590627e-06}, {"id": 142, "seek": 75828, "start": 762.8399999999999, "end": 767.8, "text": " to the negative 52, 1 plus 3 times 2 to the negative 52,", "tokens": [281, 264, 3671, 18079, 11, 502, 1804, 805, 1413, 568, 281, 264, 3671, 18079, 11], "temperature": 0.0, "avg_logprob": -0.0883544921875, "compression_ratio": 1.8412698412698412, "no_speech_prob": 2.684170567590627e-06}, {"id": 143, "seek": 75828, "start": 767.8, "end": 771.12, "text": " and so on until you get to 2.", "tokens": [293, 370, 322, 1826, 291, 483, 281, 568, 13], "temperature": 0.0, "avg_logprob": -0.0883544921875, "compression_ratio": 1.8412698412698412, "no_speech_prob": 2.684170567590627e-06}, {"id": 144, "seek": 75828, "start": 771.12, "end": 775.0, "text": " You use that same method to represent the numbers", "tokens": [509, 764, 300, 912, 3170, 281, 2906, 264, 3547], "temperature": 0.0, "avg_logprob": -0.0883544921875, "compression_ratio": 1.8412698412698412, "no_speech_prob": 2.684170567590627e-06}, {"id": 145, "seek": 75828, "start": 775.0, "end": 777.3199999999999, "text": " in the interval 2 to 4.", "tokens": [294, 264, 15035, 568, 281, 1017, 13], "temperature": 0.0, "avg_logprob": -0.0883544921875, "compression_ratio": 1.8412698412698412, "no_speech_prob": 2.684170567590627e-06}, {"id": 146, "seek": 75828, "start": 777.3199999999999, "end": 781.0, "text": " And it means that numbers are not equidistant apart.", "tokens": [400, 309, 1355, 300, 3547, 366, 406, 1267, 327, 10329, 4936, 13], "temperature": 0.0, "avg_logprob": -0.0883544921875, "compression_ratio": 1.8412698412698412, "no_speech_prob": 2.684170567590627e-06}, {"id": 147, "seek": 75828, "start": 781.0, "end": 783.48, "text": " So kind of the smaller numbers are,", "tokens": [407, 733, 295, 264, 4356, 3547, 366, 11], "temperature": 0.0, "avg_logprob": -0.0883544921875, "compression_ratio": 1.8412698412698412, "no_speech_prob": 2.684170567590627e-06}, {"id": 148, "seek": 75828, "start": 783.48, "end": 787.8399999999999, "text": " the closer they can be represented together", "tokens": [264, 4966, 436, 393, 312, 10379, 1214], "temperature": 0.0, "avg_logprob": -0.0883544921875, "compression_ratio": 1.8412698412698412, "no_speech_prob": 2.684170567590627e-06}, {"id": 149, "seek": 78784, "start": 787.84, "end": 789.84, "text": " as you get bigger, you've got bigger gaps", "tokens": [382, 291, 483, 3801, 11, 291, 600, 658, 3801, 15031], "temperature": 0.0, "avg_logprob": -0.1458886123838879, "compression_ratio": 1.592783505154639, "no_speech_prob": 1.0451410162204411e-05}, {"id": 150, "seek": 78784, "start": 789.84, "end": 794.6800000000001, "text": " between the numbers since we're breaking up the interval 1", "tokens": [1296, 264, 3547, 1670, 321, 434, 7697, 493, 264, 15035, 502], "temperature": 0.0, "avg_logprob": -0.1458886123838879, "compression_ratio": 1.592783505154639, "no_speech_prob": 1.0451410162204411e-05}, {"id": 151, "seek": 78784, "start": 794.6800000000001, "end": 800.6, "text": " to 2 into, I guess, 52 numbers here.", "tokens": [281, 568, 666, 11, 286, 2041, 11, 18079, 3547, 510, 13], "temperature": 0.0, "avg_logprob": -0.1458886123838879, "compression_ratio": 1.592783505154639, "no_speech_prob": 1.0451410162204411e-05}, {"id": 152, "seek": 78784, "start": 800.6, "end": 803.08, "text": " And 2 to 4 is also being broken up", "tokens": [400, 568, 281, 1017, 307, 611, 885, 5463, 493], "temperature": 0.0, "avg_logprob": -0.1458886123838879, "compression_ratio": 1.592783505154639, "no_speech_prob": 1.0451410162204411e-05}, {"id": 153, "seek": 78784, "start": 803.08, "end": 805.8000000000001, "text": " into the same number of numbers.", "tokens": [666, 264, 912, 1230, 295, 3547, 13], "temperature": 0.0, "avg_logprob": -0.1458886123838879, "compression_ratio": 1.592783505154639, "no_speech_prob": 1.0451410162204411e-05}, {"id": 154, "seek": 78784, "start": 811.0400000000001, "end": 814.6800000000001, "text": " And half the distance between 1 and the next largest number", "tokens": [400, 1922, 264, 4560, 1296, 502, 293, 264, 958, 6443, 1230], "temperature": 0.0, "avg_logprob": -0.1458886123838879, "compression_ratio": 1.592783505154639, "no_speech_prob": 1.0451410162204411e-05}, {"id": 155, "seek": 78784, "start": 814.6800000000001, "end": 817.64, "text": " is considered, it's called machine epsilon.", "tokens": [307, 4888, 11, 309, 311, 1219, 3479, 17889, 13], "temperature": 0.0, "avg_logprob": -0.1458886123838879, "compression_ratio": 1.592783505154639, "no_speech_prob": 1.0451410162204411e-05}, {"id": 156, "seek": 81764, "start": 817.64, "end": 822.08, "text": " And this can vary by computer, but IEEE standards", "tokens": [400, 341, 393, 10559, 538, 3820, 11, 457, 286, 7258, 36, 7787], "temperature": 0.0, "avg_logprob": -0.20036457286161535, "compression_ratio": 1.4716157205240175, "no_speech_prob": 9.08016681933077e-06}, {"id": 157, "seek": 81764, "start": 822.08, "end": 825.4399999999999, "text": " for double precision specify that machine epsilon should", "tokens": [337, 3834, 18356, 16500, 300, 3479, 17889, 820], "temperature": 0.0, "avg_logprob": -0.20036457286161535, "compression_ratio": 1.4716157205240175, "no_speech_prob": 9.08016681933077e-06}, {"id": 158, "seek": 81764, "start": 825.4399999999999, "end": 830.08, "text": " be 2 to the negative 53 approximately.", "tokens": [312, 568, 281, 264, 3671, 21860, 10447, 13], "temperature": 0.0, "avg_logprob": -0.20036457286161535, "compression_ratio": 1.4716157205240175, "no_speech_prob": 9.08016681933077e-06}, {"id": 159, "seek": 81764, "start": 830.08, "end": 831.92, "text": " There are questions about this idea", "tokens": [821, 366, 1651, 466, 341, 1558], "temperature": 0.0, "avg_logprob": -0.20036457286161535, "compression_ratio": 1.4716157205240175, "no_speech_prob": 9.08016681933077e-06}, {"id": 160, "seek": 81764, "start": 831.92, "end": 833.6, "text": " of computers storing numbers.", "tokens": [295, 10807, 26085, 3547, 13], "temperature": 0.0, "avg_logprob": -0.20036457286161535, "compression_ratio": 1.4716157205240175, "no_speech_prob": 9.08016681933077e-06}, {"id": 161, "seek": 81764, "start": 836.72, "end": 838.48, "text": " So this is just kind of interesting to know,", "tokens": [407, 341, 307, 445, 733, 295, 1880, 281, 458, 11], "temperature": 0.0, "avg_logprob": -0.20036457286161535, "compression_ratio": 1.4716157205240175, "no_speech_prob": 9.08016681933077e-06}, {"id": 162, "seek": 81764, "start": 838.48, "end": 843.04, "text": " and this explains this is why we were taking the logarithm", "tokens": [293, 341, 13948, 341, 307, 983, 321, 645, 1940, 264, 41473, 32674], "temperature": 0.0, "avg_logprob": -0.20036457286161535, "compression_ratio": 1.4716157205240175, "no_speech_prob": 9.08016681933077e-06}, {"id": 163, "seek": 81764, "start": 843.04, "end": 847.08, "text": " with our naive Bayes.", "tokens": [365, 527, 29052, 7840, 279, 13], "temperature": 0.0, "avg_logprob": -0.20036457286161535, "compression_ratio": 1.4716157205240175, "no_speech_prob": 9.08016681933077e-06}, {"id": 164, "seek": 84708, "start": 847.08, "end": 848.64, "text": " Nice property of log.", "tokens": [5490, 4707, 295, 3565, 13], "temperature": 0.0, "avg_logprob": -0.17183658054896764, "compression_ratio": 1.623015873015873, "no_speech_prob": 5.5074110605346505e-06}, {"id": 165, "seek": 84708, "start": 848.64, "end": 850.72, "text": " So we were going to have this product of all", "tokens": [407, 321, 645, 516, 281, 362, 341, 1674, 295, 439], "temperature": 0.0, "avg_logprob": -0.17183658054896764, "compression_ratio": 1.623015873015873, "no_speech_prob": 5.5074110605346505e-06}, {"id": 166, "seek": 84708, "start": 850.72, "end": 853.5200000000001, "text": " these tiny probabilities.", "tokens": [613, 5870, 33783, 13], "temperature": 0.0, "avg_logprob": -0.17183658054896764, "compression_ratio": 1.623015873015873, "no_speech_prob": 5.5074110605346505e-06}, {"id": 167, "seek": 84708, "start": 853.5200000000001, "end": 854.8000000000001, "text": " And we wanted to avoid that.", "tokens": [400, 321, 1415, 281, 5042, 300, 13], "temperature": 0.0, "avg_logprob": -0.17183658054896764, "compression_ratio": 1.623015873015873, "no_speech_prob": 5.5074110605346505e-06}, {"id": 168, "seek": 84708, "start": 854.8000000000001, "end": 858.0, "text": " All this multiplication of things very close to 0", "tokens": [1057, 341, 27290, 295, 721, 588, 1998, 281, 1958], "temperature": 0.0, "avg_logprob": -0.17183658054896764, "compression_ratio": 1.623015873015873, "no_speech_prob": 5.5074110605346505e-06}, {"id": 169, "seek": 84708, "start": 858.0, "end": 859.64, "text": " could have been a problem.", "tokens": [727, 362, 668, 257, 1154, 13], "temperature": 0.0, "avg_logprob": -0.17183658054896764, "compression_ratio": 1.623015873015873, "no_speech_prob": 5.5074110605346505e-06}, {"id": 170, "seek": 84708, "start": 859.64, "end": 863.4000000000001, "text": " What is the log of a product?", "tokens": [708, 307, 264, 3565, 295, 257, 1674, 30], "temperature": 0.0, "avg_logprob": -0.17183658054896764, "compression_ratio": 1.623015873015873, "no_speech_prob": 5.5074110605346505e-06}, {"id": 171, "seek": 84708, "start": 863.4000000000001, "end": 866.24, "text": " Do you remember?", "tokens": [1144, 291, 1604, 30], "temperature": 0.0, "avg_logprob": -0.17183658054896764, "compression_ratio": 1.623015873015873, "no_speech_prob": 5.5074110605346505e-06}, {"id": 172, "seek": 84708, "start": 866.24, "end": 867.48, "text": " The sum of the logs.", "tokens": [440, 2408, 295, 264, 20820, 13], "temperature": 0.0, "avg_logprob": -0.17183658054896764, "compression_ratio": 1.623015873015873, "no_speech_prob": 5.5074110605346505e-06}, {"id": 173, "seek": 84708, "start": 867.48, "end": 869.6, "text": " Yeah, so that's a really nice property,", "tokens": [865, 11, 370, 300, 311, 257, 534, 1481, 4707, 11], "temperature": 0.0, "avg_logprob": -0.17183658054896764, "compression_ratio": 1.623015873015873, "no_speech_prob": 5.5074110605346505e-06}, {"id": 174, "seek": 84708, "start": 869.6, "end": 872.48, "text": " and that kind of rescues us a little bit from having", "tokens": [293, 300, 733, 295, 9610, 1247, 505, 257, 707, 857, 490, 1419], "temperature": 0.0, "avg_logprob": -0.17183658054896764, "compression_ratio": 1.623015873015873, "no_speech_prob": 5.5074110605346505e-06}, {"id": 175, "seek": 84708, "start": 872.48, "end": 875.32, "text": " to worry about, oh, we're going to be multiplying", "tokens": [281, 3292, 466, 11, 1954, 11, 321, 434, 516, 281, 312, 30955], "temperature": 0.0, "avg_logprob": -0.17183658054896764, "compression_ratio": 1.623015873015873, "no_speech_prob": 5.5074110605346505e-06}, {"id": 176, "seek": 87532, "start": 875.32, "end": 879.24, "text": " all these tiny things.", "tokens": [439, 613, 5870, 721, 13], "temperature": 0.0, "avg_logprob": -0.15954793294270833, "compression_ratio": 1.5, "no_speech_prob": 1.3845298781234305e-05}, {"id": 177, "seek": 87532, "start": 879.24, "end": 880.72, "text": " There are questions about that?", "tokens": [821, 366, 1651, 466, 300, 30], "temperature": 0.0, "avg_logprob": -0.15954793294270833, "compression_ratio": 1.5, "no_speech_prob": 1.3845298781234305e-05}, {"id": 178, "seek": 87532, "start": 884.6, "end": 885.5600000000001, "text": " OK.", "tokens": [2264, 13], "temperature": 0.0, "avg_logprob": -0.15954793294270833, "compression_ratio": 1.5, "no_speech_prob": 1.3845298781234305e-05}, {"id": 179, "seek": 87532, "start": 885.5600000000001, "end": 888.84, "text": " And then kind of while we're on this topic,", "tokens": [400, 550, 733, 295, 1339, 321, 434, 322, 341, 4829, 11], "temperature": 0.0, "avg_logprob": -0.15954793294270833, "compression_ratio": 1.5, "no_speech_prob": 1.3845298781234305e-05}, {"id": 180, "seek": 87532, "start": 888.84, "end": 892.5600000000001, "text": " just because it came up a little bit last week,", "tokens": [445, 570, 309, 1361, 493, 257, 707, 857, 1036, 1243, 11], "temperature": 0.0, "avg_logprob": -0.15954793294270833, "compression_ratio": 1.5, "no_speech_prob": 1.3845298781234305e-05}, {"id": 181, "seek": 87532, "start": 892.5600000000001, "end": 894.12, "text": " I just wanted to mention the speeds", "tokens": [286, 445, 1415, 281, 2152, 264, 16411], "temperature": 0.0, "avg_logprob": -0.15954793294270833, "compression_ratio": 1.5, "no_speech_prob": 1.3845298781234305e-05}, {"id": 182, "seek": 87532, "start": 894.12, "end": 896.0, "text": " of different types of memory.", "tokens": [295, 819, 3467, 295, 4675, 13], "temperature": 0.0, "avg_logprob": -0.15954793294270833, "compression_ratio": 1.5, "no_speech_prob": 1.3845298781234305e-05}, {"id": 183, "seek": 87532, "start": 896.0, "end": 899.36, "text": " With a disclaimer, this is not strictly an NLP topic,", "tokens": [2022, 257, 40896, 11, 341, 307, 406, 20792, 364, 426, 45196, 4829, 11], "temperature": 0.0, "avg_logprob": -0.15954793294270833, "compression_ratio": 1.5, "no_speech_prob": 1.3845298781234305e-05}, {"id": 184, "seek": 87532, "start": 899.36, "end": 902.12, "text": " but it's something that I think is useful to know before you", "tokens": [457, 309, 311, 746, 300, 286, 519, 307, 4420, 281, 458, 949, 291], "temperature": 0.0, "avg_logprob": -0.15954793294270833, "compression_ratio": 1.5, "no_speech_prob": 1.3845298781234305e-05}, {"id": 185, "seek": 87532, "start": 902.12, "end": 904.36, "text": " finish your MSDS and that you'll definitely", "tokens": [2413, 428, 7395, 11844, 293, 300, 291, 603, 2138], "temperature": 0.0, "avg_logprob": -0.15954793294270833, "compression_ratio": 1.5, "no_speech_prob": 1.3845298781234305e-05}, {"id": 186, "seek": 90436, "start": 904.36, "end": 906.64, "text": " be seeing.", "tokens": [312, 2577, 13], "temperature": 0.0, "avg_logprob": -0.14871924453311497, "compression_ratio": 1.451219512195122, "no_speech_prob": 1.750132105371449e-05}, {"id": 187, "seek": 90436, "start": 906.64, "end": 916.6, "text": " So Jeff Dean gave a talk a few years ago with numbers", "tokens": [407, 7506, 13324, 2729, 257, 751, 257, 1326, 924, 2057, 365, 3547], "temperature": 0.0, "avg_logprob": -0.14871924453311497, "compression_ratio": 1.451219512195122, "no_speech_prob": 1.750132105371449e-05}, {"id": 188, "seek": 90436, "start": 916.6, "end": 922.16, "text": " everybody should know, showing what an L1 cache reference is.", "tokens": [2201, 820, 458, 11, 4099, 437, 364, 441, 16, 19459, 6408, 307, 13], "temperature": 0.0, "avg_logprob": -0.14871924453311497, "compression_ratio": 1.451219512195122, "no_speech_prob": 1.750132105371449e-05}, {"id": 189, "seek": 90436, "start": 922.16, "end": 924.16, "text": " It's half a nanosecond.", "tokens": [467, 311, 1922, 257, 14067, 541, 18882, 13], "temperature": 0.0, "avg_logprob": -0.14871924453311497, "compression_ratio": 1.451219512195122, "no_speech_prob": 1.750132105371449e-05}, {"id": 190, "seek": 90436, "start": 924.16, "end": 927.6800000000001, "text": " L2 cache reference is 7 nanoseconds.", "tokens": [441, 17, 19459, 6408, 307, 1614, 14067, 541, 28750, 13], "temperature": 0.0, "avg_logprob": -0.14871924453311497, "compression_ratio": 1.451219512195122, "no_speech_prob": 1.750132105371449e-05}, {"id": 191, "seek": 90436, "start": 927.6800000000001, "end": 932.6, "text": " Referencing main memory or RAM is 100 nanoseconds.", "tokens": [36889, 13644, 2135, 4675, 420, 14561, 307, 2319, 14067, 541, 28750, 13], "temperature": 0.0, "avg_logprob": -0.14871924453311497, "compression_ratio": 1.451219512195122, "no_speech_prob": 1.750132105371449e-05}, {"id": 192, "seek": 93260, "start": 932.6, "end": 936.64, "text": " And so on, as you start getting stuff over a network,", "tokens": [400, 370, 322, 11, 382, 291, 722, 1242, 1507, 670, 257, 3209, 11], "temperature": 0.0, "avg_logprob": -0.14721381447531962, "compression_ratio": 1.6180257510729614, "no_speech_prob": 6.438628588512074e-06}, {"id": 193, "seek": 93260, "start": 936.64, "end": 939.16, "text": " it's 20,000 nanoseconds.", "tokens": [309, 311, 945, 11, 1360, 14067, 541, 28750, 13], "temperature": 0.0, "avg_logprob": -0.14721381447531962, "compression_ratio": 1.6180257510729614, "no_speech_prob": 6.438628588512074e-06}, {"id": 194, "seek": 93260, "start": 939.16, "end": 943.2, "text": " Something within a data center, 500,000 nanoseconds.", "tokens": [6595, 1951, 257, 1412, 3056, 11, 5923, 11, 1360, 14067, 541, 28750, 13], "temperature": 0.0, "avg_logprob": -0.14721381447531962, "compression_ratio": 1.6180257510729614, "no_speech_prob": 6.438628588512074e-06}, {"id": 195, "seek": 93260, "start": 943.2, "end": 947.0, "text": " Disk seek is 10 million nanoseconds.", "tokens": [30609, 8075, 307, 1266, 2459, 14067, 541, 28750, 13], "temperature": 0.0, "avg_logprob": -0.14721381447531962, "compression_ratio": 1.6180257510729614, "no_speech_prob": 6.438628588512074e-06}, {"id": 196, "seek": 93260, "start": 947.0, "end": 950.28, "text": " There's an updated interactive version of these numbers.", "tokens": [821, 311, 364, 10588, 15141, 3037, 295, 613, 3547, 13], "temperature": 0.0, "avg_logprob": -0.14721381447531962, "compression_ratio": 1.6180257510729614, "no_speech_prob": 6.438628588512074e-06}, {"id": 197, "seek": 93260, "start": 950.28, "end": 953.16, "text": " So the ones listed there from a few years ago,", "tokens": [407, 264, 2306, 10052, 456, 490, 257, 1326, 924, 2057, 11], "temperature": 0.0, "avg_logprob": -0.14721381447531962, "compression_ratio": 1.6180257510729614, "no_speech_prob": 6.438628588512074e-06}, {"id": 198, "seek": 93260, "start": 953.16, "end": 954.76, "text": " this is kind of neat.", "tokens": [341, 307, 733, 295, 10654, 13], "temperature": 0.0, "avg_logprob": -0.14721381447531962, "compression_ratio": 1.6180257510729614, "no_speech_prob": 6.438628588512074e-06}, {"id": 199, "seek": 93260, "start": 954.76, "end": 958.8000000000001, "text": " It shows you and kind of look at over the years.", "tokens": [467, 3110, 291, 293, 733, 295, 574, 412, 670, 264, 924, 13], "temperature": 0.0, "avg_logprob": -0.14721381447531962, "compression_ratio": 1.6180257510729614, "no_speech_prob": 6.438628588512074e-06}, {"id": 200, "seek": 93260, "start": 958.8000000000001, "end": 961.28, "text": " So the slider controls what year.", "tokens": [407, 264, 26046, 9003, 437, 1064, 13], "temperature": 0.0, "avg_logprob": -0.14721381447531962, "compression_ratio": 1.6180257510729614, "no_speech_prob": 6.438628588512074e-06}, {"id": 201, "seek": 96128, "start": 961.28, "end": 963.64, "text": " We're here in 2019.", "tokens": [492, 434, 510, 294, 6071, 13], "temperature": 0.0, "avg_logprob": -0.11566473007202148, "compression_ratio": 1.7010309278350515, "no_speech_prob": 2.5865134375635535e-05}, {"id": 202, "seek": 96128, "start": 963.64, "end": 968.4399999999999, "text": " And what happens is, so here a black square", "tokens": [400, 437, 2314, 307, 11, 370, 510, 257, 2211, 3732], "temperature": 0.0, "avg_logprob": -0.11566473007202148, "compression_ratio": 1.7010309278350515, "no_speech_prob": 2.5865134375635535e-05}, {"id": 203, "seek": 96128, "start": 968.4399999999999, "end": 970.0799999999999, "text": " represents 1 nanosecond.", "tokens": [8855, 502, 14067, 541, 18882, 13], "temperature": 0.0, "avg_logprob": -0.11566473007202148, "compression_ratio": 1.7010309278350515, "no_speech_prob": 2.5865134375635535e-05}, {"id": 204, "seek": 96128, "start": 970.0799999999999, "end": 974.48, "text": " So we see an L1 cache reference is 1 nanosecond.", "tokens": [407, 321, 536, 364, 441, 16, 19459, 6408, 307, 502, 14067, 541, 18882, 13], "temperature": 0.0, "avg_logprob": -0.11566473007202148, "compression_ratio": 1.7010309278350515, "no_speech_prob": 2.5865134375635535e-05}, {"id": 205, "seek": 96128, "start": 974.48, "end": 980.36, "text": " Or actually probably less, but they have it as 1 nanosecond.", "tokens": [1610, 767, 1391, 1570, 11, 457, 436, 362, 309, 382, 502, 14067, 541, 18882, 13], "temperature": 0.0, "avg_logprob": -0.11566473007202148, "compression_ratio": 1.7010309278350515, "no_speech_prob": 2.5865134375635535e-05}, {"id": 206, "seek": 96128, "start": 980.36, "end": 982.88, "text": " And then here, 100 nanoseconds.", "tokens": [400, 550, 510, 11, 2319, 14067, 541, 28750, 13], "temperature": 0.0, "avg_logprob": -0.11566473007202148, "compression_ratio": 1.7010309278350515, "no_speech_prob": 2.5865134375635535e-05}, {"id": 207, "seek": 96128, "start": 982.88, "end": 986.72, "text": " So 100 black squares is a single blue square.", "tokens": [407, 2319, 2211, 19368, 307, 257, 2167, 3344, 3732, 13], "temperature": 0.0, "avg_logprob": -0.11566473007202148, "compression_ratio": 1.7010309278350515, "no_speech_prob": 2.5865134375635535e-05}, {"id": 208, "seek": 96128, "start": 986.72, "end": 990.64, "text": " And a main memory reference would be 100 nanoseconds.", "tokens": [400, 257, 2135, 4675, 6408, 576, 312, 2319, 14067, 541, 28750, 13], "temperature": 0.0, "avg_logprob": -0.11566473007202148, "compression_ratio": 1.7010309278350515, "no_speech_prob": 2.5865134375635535e-05}, {"id": 209, "seek": 99064, "start": 990.64, "end": 992.92, "text": " And the key thing to note about this", "tokens": [400, 264, 2141, 551, 281, 3637, 466, 341], "temperature": 0.0, "avg_logprob": -0.08351040794735863, "compression_ratio": 1.6830357142857142, "no_speech_prob": 1.012948814604897e-05}, {"id": 210, "seek": 99064, "start": 992.92, "end": 995.8, "text": " is that just typically, you don't", "tokens": [307, 300, 445, 5850, 11, 291, 500, 380], "temperature": 0.0, "avg_logprob": -0.08351040794735863, "compression_ratio": 1.6830357142857142, "no_speech_prob": 1.012948814604897e-05}, {"id": 211, "seek": 99064, "start": 995.8, "end": 997.72, "text": " have to have these exact numbers memorized.", "tokens": [362, 281, 362, 613, 1900, 3547, 46677, 13], "temperature": 0.0, "avg_logprob": -0.08351040794735863, "compression_ratio": 1.6830357142857142, "no_speech_prob": 1.012948814604897e-05}, {"id": 212, "seek": 99064, "start": 997.72, "end": 1002.68, "text": " But as you're going up a level, it's typically", "tokens": [583, 382, 291, 434, 516, 493, 257, 1496, 11, 309, 311, 5850], "temperature": 0.0, "avg_logprob": -0.08351040794735863, "compression_ratio": 1.6830357142857142, "no_speech_prob": 1.012948814604897e-05}, {"id": 213, "seek": 99064, "start": 1002.68, "end": 1004.96, "text": " an order of magnitude slower.", "tokens": [364, 1668, 295, 15668, 14009, 13], "temperature": 0.0, "avg_logprob": -0.08351040794735863, "compression_ratio": 1.6830357142857142, "no_speech_prob": 1.012948814604897e-05}, {"id": 214, "seek": 99064, "start": 1004.96, "end": 1007.96, "text": " So this is not something that's scaling linearly.", "tokens": [407, 341, 307, 406, 746, 300, 311, 21589, 43586, 13], "temperature": 0.0, "avg_logprob": -0.08351040794735863, "compression_ratio": 1.6830357142857142, "no_speech_prob": 1.012948814604897e-05}, {"id": 215, "seek": 99064, "start": 1007.96, "end": 1012.72, "text": " But as you're going from L1 cache to L2 to main memory,", "tokens": [583, 382, 291, 434, 516, 490, 441, 16, 19459, 281, 441, 17, 281, 2135, 4675, 11], "temperature": 0.0, "avg_logprob": -0.08351040794735863, "compression_ratio": 1.6830357142857142, "no_speech_prob": 1.012948814604897e-05}, {"id": 216, "seek": 99064, "start": 1012.72, "end": 1016.28, "text": " it's scaling much worse than linearly.", "tokens": [309, 311, 21589, 709, 5324, 813, 43586, 13], "temperature": 0.0, "avg_logprob": -0.08351040794735863, "compression_ratio": 1.6830357142857142, "no_speech_prob": 1.012948814604897e-05}, {"id": 217, "seek": 99064, "start": 1016.28, "end": 1018.28, "text": " And so this is kind of just to highlight", "tokens": [400, 370, 341, 307, 733, 295, 445, 281, 5078], "temperature": 0.0, "avg_logprob": -0.08351040794735863, "compression_ratio": 1.6830357142857142, "no_speech_prob": 1.012948814604897e-05}, {"id": 218, "seek": 101828, "start": 1018.28, "end": 1021.4399999999999, "text": " the importance of thinking about how much, kind of why", "tokens": [264, 7379, 295, 1953, 466, 577, 709, 11, 733, 295, 983], "temperature": 0.0, "avg_logprob": -0.23491005781220226, "compression_ratio": 1.5932203389830508, "no_speech_prob": 1.473729389545042e-05}, {"id": 219, "seek": 101828, "start": 1021.4399999999999, "end": 1024.3999999999999, "text": " you have to move things around, or why", "tokens": [291, 362, 281, 1286, 721, 926, 11, 420, 983], "temperature": 0.0, "avg_logprob": -0.23491005781220226, "compression_ratio": 1.5932203389830508, "no_speech_prob": 1.473729389545042e-05}, {"id": 220, "seek": 101828, "start": 1024.3999999999999, "end": 1026.6, "text": " you need to be mindful of where things are stored", "tokens": [291, 643, 281, 312, 14618, 295, 689, 721, 366, 12187], "temperature": 0.0, "avg_logprob": -0.23491005781220226, "compression_ratio": 1.5932203389830508, "no_speech_prob": 1.473729389545042e-05}, {"id": 221, "seek": 101828, "start": 1026.6, "end": 1029.3999999999999, "text": " and how much you're having to move them around.", "tokens": [293, 577, 709, 291, 434, 1419, 281, 1286, 552, 926, 13], "temperature": 0.0, "avg_logprob": -0.23491005781220226, "compression_ratio": 1.5932203389830508, "no_speech_prob": 1.473729389545042e-05}, {"id": 222, "seek": 101828, "start": 1029.3999999999999, "end": 1031.6399999999999, "text": " So I just wanted to share this.", "tokens": [407, 286, 445, 1415, 281, 2073, 341, 13], "temperature": 0.0, "avg_logprob": -0.23491005781220226, "compression_ratio": 1.5932203389830508, "no_speech_prob": 1.473729389545042e-05}, {"id": 223, "seek": 101828, "start": 1031.6399999999999, "end": 1032.32, "text": " Any questions?", "tokens": [2639, 1651, 30], "temperature": 0.0, "avg_logprob": -0.23491005781220226, "compression_ratio": 1.5932203389830508, "no_speech_prob": 1.473729389545042e-05}, {"id": 224, "seek": 101828, "start": 1041.16, "end": 1042.24, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.23491005781220226, "compression_ratio": 1.5932203389830508, "no_speech_prob": 1.473729389545042e-05}, {"id": 225, "seek": 104224, "start": 1042.24, "end": 1052.52, "text": " So we just have 10 minutes of class left.", "tokens": [407, 321, 445, 362, 1266, 2077, 295, 1508, 1411, 13], "temperature": 0.0, "avg_logprob": -0.28513250595484024, "compression_ratio": 1.161904761904762, "no_speech_prob": 9.080157724383753e-06}, {"id": 226, "seek": 104224, "start": 1052.52, "end": 1058.0, "text": " Maybe I'll start introducing regex.", "tokens": [2704, 286, 603, 722, 15424, 319, 432, 87, 13], "temperature": 0.0, "avg_logprob": -0.28513250595484024, "compression_ratio": 1.161904761904762, "no_speech_prob": 9.080157724383753e-06}, {"id": 227, "seek": 105800, "start": 1058.0, "end": 1069.0, "text": " Let's see if I have the regex notebook open.", "tokens": [961, 311, 536, 498, 286, 362, 264, 319, 432, 87, 21060, 1269, 13], "temperature": 0.0, "avg_logprob": -0.2388904234942268, "compression_ratio": 1.3223684210526316, "no_speech_prob": 5.507408332050545e-06}, {"id": 228, "seek": 105800, "start": 1073.88, "end": 1079.64, "text": " And actually, OK, so what I will do, we're going to be,", "tokens": [400, 767, 11, 2264, 11, 370, 437, 286, 486, 360, 11, 321, 434, 516, 281, 312, 11], "temperature": 0.0, "avg_logprob": -0.2388904234942268, "compression_ratio": 1.3223684210526316, "no_speech_prob": 5.507408332050545e-06}, {"id": 229, "seek": 105800, "start": 1079.64, "end": 1083.84, "text": " so regex is a useful tool in NLP.", "tokens": [370, 319, 432, 87, 307, 257, 4420, 2290, 294, 426, 45196, 13], "temperature": 0.0, "avg_logprob": -0.2388904234942268, "compression_ratio": 1.3223684210526316, "no_speech_prob": 5.507408332050545e-06}, {"id": 230, "seek": 105800, "start": 1083.84, "end": 1085.68, "text": " It can seem pretty cryptic when you first", "tokens": [467, 393, 1643, 1238, 9844, 299, 562, 291, 700], "temperature": 0.0, "avg_logprob": -0.2388904234942268, "compression_ratio": 1.3223684210526316, "no_speech_prob": 5.507408332050545e-06}, {"id": 231, "seek": 105800, "start": 1085.68, "end": 1087.48, "text": " start learning about it.", "tokens": [722, 2539, 466, 309, 13], "temperature": 0.0, "avg_logprob": -0.2388904234942268, "compression_ratio": 1.3223684210526316, "no_speech_prob": 5.507408332050545e-06}, {"id": 232, "seek": 108748, "start": 1087.48, "end": 1090.4, "text": " And this is the regex notebook.", "tokens": [400, 341, 307, 264, 319, 432, 87, 21060, 13], "temperature": 0.0, "avg_logprob": -0.1527157870205966, "compression_ratio": 1.6307053941908713, "no_speech_prob": 4.610849282471463e-05}, {"id": 233, "seek": 108748, "start": 1090.4, "end": 1091.4, "text": " Let me put this.", "tokens": [961, 385, 829, 341, 13], "temperature": 0.0, "avg_logprob": -0.1527157870205966, "compression_ratio": 1.6307053941908713, "no_speech_prob": 4.610849282471463e-05}, {"id": 234, "seek": 108748, "start": 1094.1200000000001, "end": 1096.52, "text": " And we're going to consider two motivating examples.", "tokens": [400, 321, 434, 516, 281, 1949, 732, 41066, 5110, 13], "temperature": 0.0, "avg_logprob": -0.1527157870205966, "compression_ratio": 1.6307053941908713, "no_speech_prob": 4.610849282471463e-05}, {"id": 235, "seek": 108748, "start": 1096.52, "end": 1099.28, "text": " So this is going to be a kind of less complete notebook", "tokens": [407, 341, 307, 516, 281, 312, 257, 733, 295, 1570, 3566, 21060], "temperature": 0.0, "avg_logprob": -0.1527157870205966, "compression_ratio": 1.6307053941908713, "no_speech_prob": 4.610849282471463e-05}, {"id": 236, "seek": 108748, "start": 1099.28, "end": 1100.88, "text": " or application than the others.", "tokens": [420, 3861, 813, 264, 2357, 13], "temperature": 0.0, "avg_logprob": -0.1527157870205966, "compression_ratio": 1.6307053941908713, "no_speech_prob": 4.610849282471463e-05}, {"id": 237, "seek": 108748, "start": 1100.88, "end": 1102.92, "text": " And that's why I didn't give it a number.", "tokens": [400, 300, 311, 983, 286, 994, 380, 976, 309, 257, 1230, 13], "temperature": 0.0, "avg_logprob": -0.1527157870205966, "compression_ratio": 1.6307053941908713, "no_speech_prob": 4.610849282471463e-05}, {"id": 238, "seek": 108748, "start": 1102.92, "end": 1105.68, "text": " But it is something that sometimes is very useful", "tokens": [583, 309, 307, 746, 300, 2171, 307, 588, 4420], "temperature": 0.0, "avg_logprob": -0.1527157870205966, "compression_ratio": 1.6307053941908713, "no_speech_prob": 4.610849282471463e-05}, {"id": 239, "seek": 108748, "start": 1105.68, "end": 1108.28, "text": " and that I want you to see.", "tokens": [293, 300, 286, 528, 291, 281, 536, 13], "temperature": 0.0, "avg_logprob": -0.1527157870205966, "compression_ratio": 1.6307053941908713, "no_speech_prob": 4.610849282471463e-05}, {"id": 240, "seek": 108748, "start": 1108.28, "end": 1110.38, "text": " So one problem could be, suppose we're", "tokens": [407, 472, 1154, 727, 312, 11, 7297, 321, 434], "temperature": 0.0, "avg_logprob": -0.1527157870205966, "compression_ratio": 1.6307053941908713, "no_speech_prob": 4.610849282471463e-05}, {"id": 241, "seek": 108748, "start": 1110.38, "end": 1114.6, "text": " given some data that includes phone numbers.", "tokens": [2212, 512, 1412, 300, 5974, 2593, 3547, 13], "temperature": 0.0, "avg_logprob": -0.1527157870205966, "compression_ratio": 1.6307053941908713, "no_speech_prob": 4.610849282471463e-05}, {"id": 242, "seek": 111460, "start": 1114.6, "end": 1117.8, "text": " And some of it has dashes, some has faces,", "tokens": [400, 512, 295, 309, 575, 8240, 279, 11, 512, 575, 8475, 11], "temperature": 0.0, "avg_logprob": -0.10937194061279297, "compression_ratio": 1.6741573033707866, "no_speech_prob": 1.6186277207452804e-05}, {"id": 243, "seek": 111460, "start": 1117.8, "end": 1120.76, "text": " maybe there's some with parentheses.", "tokens": [1310, 456, 311, 512, 365, 34153, 13], "temperature": 0.0, "avg_logprob": -0.10937194061279297, "compression_ratio": 1.6741573033707866, "no_speech_prob": 1.6186277207452804e-05}, {"id": 244, "seek": 111460, "start": 1120.76, "end": 1122.1599999999999, "text": " Some of it might just be wrong.", "tokens": [2188, 295, 309, 1062, 445, 312, 2085, 13], "temperature": 0.0, "avg_logprob": -0.10937194061279297, "compression_ratio": 1.6741573033707866, "no_speech_prob": 1.6186277207452804e-05}, {"id": 245, "seek": 111460, "start": 1122.1599999999999, "end": 1124.3999999999999, "text": " 101 Howard is not a phone number.", "tokens": [21055, 17626, 307, 406, 257, 2593, 1230, 13], "temperature": 0.0, "avg_logprob": -0.10937194061279297, "compression_ratio": 1.6741573033707866, "no_speech_prob": 1.6186277207452804e-05}, {"id": 246, "seek": 111460, "start": 1124.3999999999999, "end": 1128.4399999999998, "text": " But we've got a mistake in our data, which happens a lot.", "tokens": [583, 321, 600, 658, 257, 6146, 294, 527, 1412, 11, 597, 2314, 257, 688, 13], "temperature": 0.0, "avg_logprob": -0.10937194061279297, "compression_ratio": 1.6741573033707866, "no_speech_prob": 1.6186277207452804e-05}, {"id": 247, "seek": 111460, "start": 1128.4399999999998, "end": 1131.48, "text": " We want to be able to pick out the phone numbers and also", "tokens": [492, 528, 281, 312, 1075, 281, 1888, 484, 264, 2593, 3547, 293, 611], "temperature": 0.0, "avg_logprob": -0.10937194061279297, "compression_ratio": 1.6741573033707866, "no_speech_prob": 1.6186277207452804e-05}, {"id": 248, "seek": 111460, "start": 1131.48, "end": 1133.8799999999999, "text": " only the phone numbers.", "tokens": [787, 264, 2593, 3547, 13], "temperature": 0.0, "avg_logprob": -0.10937194061279297, "compression_ratio": 1.6741573033707866, "no_speech_prob": 1.6186277207452804e-05}, {"id": 249, "seek": 111460, "start": 1133.8799999999999, "end": 1137.84, "text": " And then the second application, which is a little bit more", "tokens": [400, 550, 264, 1150, 3861, 11, 597, 307, 257, 707, 857, 544], "temperature": 0.0, "avg_logprob": -0.10937194061279297, "compression_ratio": 1.6741573033707866, "no_speech_prob": 1.6186277207452804e-05}, {"id": 250, "seek": 111460, "start": 1137.84, "end": 1141.12, "text": " involved, will be, suppose we wanted to create our own tokens.", "tokens": [3288, 11, 486, 312, 11, 7297, 321, 1415, 281, 1884, 527, 1065, 22667, 13], "temperature": 0.0, "avg_logprob": -0.10937194061279297, "compression_ratio": 1.6741573033707866, "no_speech_prob": 1.6186277207452804e-05}, {"id": 251, "seek": 111460, "start": 1141.12, "end": 1143.1999999999998, "text": " And so in the earlier notebooks, we've", "tokens": [400, 370, 294, 264, 3071, 43782, 11, 321, 600], "temperature": 0.0, "avg_logprob": -0.10937194061279297, "compression_ratio": 1.6741573033707866, "no_speech_prob": 1.6186277207452804e-05}, {"id": 252, "seek": 114320, "start": 1143.2, "end": 1147.48, "text": " used SKLearn or we've used FastAI to do our tokenization.", "tokens": [1143, 21483, 11020, 1083, 420, 321, 600, 1143, 15968, 48698, 281, 360, 527, 14862, 2144, 13], "temperature": 0.0, "avg_logprob": -0.1630393278251574, "compression_ratio": 1.5434782608695652, "no_speech_prob": 9.222843800671399e-06}, {"id": 253, "seek": 114320, "start": 1147.48, "end": 1149.28, "text": " But now we're going to go a level lower", "tokens": [583, 586, 321, 434, 516, 281, 352, 257, 1496, 3126], "temperature": 0.0, "avg_logprob": -0.1630393278251574, "compression_ratio": 1.5434782608695652, "no_speech_prob": 9.222843800671399e-06}, {"id": 254, "seek": 114320, "start": 1149.28, "end": 1154.44, "text": " and see how could we do it ourselves if we wanted to.", "tokens": [293, 536, 577, 727, 321, 360, 309, 4175, 498, 321, 1415, 281, 13], "temperature": 0.0, "avg_logprob": -0.1630393278251574, "compression_ratio": 1.5434782608695652, "no_speech_prob": 9.222843800671399e-06}, {"id": 255, "seek": 114320, "start": 1154.44, "end": 1157.72, "text": " So for the phone number problem, we're", "tokens": [407, 337, 264, 2593, 1230, 1154, 11, 321, 434], "temperature": 0.0, "avg_logprob": -0.1630393278251574, "compression_ratio": 1.5434782608695652, "no_speech_prob": 9.222843800671399e-06}, {"id": 256, "seek": 114320, "start": 1157.72, "end": 1160.48, "text": " given these phone numbers.", "tokens": [2212, 613, 2593, 3547, 13], "temperature": 0.0, "avg_logprob": -0.1630393278251574, "compression_ratio": 1.5434782608695652, "no_speech_prob": 9.222843800671399e-06}, {"id": 257, "seek": 114320, "start": 1160.48, "end": 1163.96, "text": " And I'm going to attempt it without RegEx just", "tokens": [400, 286, 478, 516, 281, 5217, 309, 1553, 4791, 11149, 445], "temperature": 0.0, "avg_logprob": -0.1630393278251574, "compression_ratio": 1.5434782608695652, "no_speech_prob": 9.222843800671399e-06}, {"id": 258, "seek": 114320, "start": 1163.96, "end": 1167.1200000000001, "text": " to kind of motivate the need for RegEx.", "tokens": [281, 733, 295, 28497, 264, 643, 337, 4791, 11149, 13], "temperature": 0.0, "avg_logprob": -0.1630393278251574, "compression_ratio": 1.5434782608695652, "no_speech_prob": 9.222843800671399e-06}, {"id": 259, "seek": 114320, "start": 1167.1200000000001, "end": 1171.0, "text": " So I'm not actually recommending that you do this.", "tokens": [407, 286, 478, 406, 767, 30559, 300, 291, 360, 341, 13], "temperature": 0.0, "avg_logprob": -0.1630393278251574, "compression_ratio": 1.5434782608695652, "no_speech_prob": 9.222843800671399e-06}, {"id": 260, "seek": 117100, "start": 1171.0, "end": 1176.96, "text": " Here I wrote a method to check.", "tokens": [1692, 286, 4114, 257, 3170, 281, 1520, 13], "temperature": 0.0, "avg_logprob": -0.16665474106283748, "compression_ratio": 1.3652694610778444, "no_speech_prob": 2.0144658265053295e-05}, {"id": 261, "seek": 117100, "start": 1176.96, "end": 1180.44, "text": " I said, OK, valid characters are just", "tokens": [286, 848, 11, 2264, 11, 7363, 4342, 366, 445], "temperature": 0.0, "avg_logprob": -0.16665474106283748, "compression_ratio": 1.3652694610778444, "no_speech_prob": 2.0144658265053295e-05}, {"id": 262, "seek": 117100, "start": 1180.44, "end": 1185.0, "text": " the numbers, which you can get from Python's string.digits,", "tokens": [264, 3547, 11, 597, 291, 393, 483, 490, 15329, 311, 6798, 13, 25259, 1208, 11], "temperature": 0.0, "avg_logprob": -0.16665474106283748, "compression_ratio": 1.3652694610778444, "no_speech_prob": 2.0144658265053295e-05}, {"id": 263, "seek": 117100, "start": 1185.0, "end": 1189.72, "text": " as well as spaces, hyphens, and parentheses.", "tokens": [382, 731, 382, 7673, 11, 2477, 950, 694, 11, 293, 34153, 13], "temperature": 0.0, "avg_logprob": -0.16665474106283748, "compression_ratio": 1.3652694610778444, "no_speech_prob": 2.0144658265053295e-05}, {"id": 264, "seek": 118972, "start": 1189.72, "end": 1205.0, "text": " And then actually, I should be running these as I go.", "tokens": [400, 550, 767, 11, 286, 820, 312, 2614, 613, 382, 286, 352, 13], "temperature": 0.0, "avg_logprob": -0.15189064250272863, "compression_ratio": 1.2440944881889764, "no_speech_prob": 4.7108251237659715e-06}, {"id": 265, "seek": 118972, "start": 1205.0, "end": 1209.72, "text": " And then checking, are these phone numbers?", "tokens": [400, 550, 8568, 11, 366, 613, 2593, 3547, 30], "temperature": 0.0, "avg_logprob": -0.15189064250272863, "compression_ratio": 1.2440944881889764, "no_speech_prob": 4.7108251237659715e-06}, {"id": 266, "seek": 118972, "start": 1209.72, "end": 1214.52, "text": " And so that works OK.", "tokens": [400, 370, 300, 1985, 2264, 13], "temperature": 0.0, "avg_logprob": -0.15189064250272863, "compression_ratio": 1.2440944881889764, "no_speech_prob": 4.7108251237659715e-06}, {"id": 267, "seek": 118972, "start": 1214.52, "end": 1217.3600000000001, "text": " However, things like 1, 2, 3, 4, which", "tokens": [2908, 11, 721, 411, 502, 11, 568, 11, 805, 11, 1017, 11, 597], "temperature": 0.0, "avg_logprob": -0.15189064250272863, "compression_ratio": 1.2440944881889764, "no_speech_prob": 4.7108251237659715e-06}, {"id": 268, "seek": 121736, "start": 1217.36, "end": 1222.36, "text": " is way too short to be a phone number, that fails.", "tokens": [307, 636, 886, 2099, 281, 312, 257, 2593, 1230, 11, 300, 18199, 13], "temperature": 0.0, "avg_logprob": -0.1732146715877032, "compression_ratio": 1.5144230769230769, "no_speech_prob": 1.1125390301458538e-05}, {"id": 269, "seek": 121736, "start": 1222.36, "end": 1224.36, "text": " And are you familiar with this using assert", "tokens": [400, 366, 291, 4963, 365, 341, 1228, 19810], "temperature": 0.0, "avg_logprob": -0.1732146715877032, "compression_ratio": 1.5144230769230769, "no_speech_prob": 1.1125390301458538e-05}, {"id": 270, "seek": 121736, "start": 1224.36, "end": 1226.1999999999998, "text": " to check test cases?", "tokens": [281, 1520, 1500, 3331, 30], "temperature": 0.0, "avg_logprob": -0.1732146715877032, "compression_ratio": 1.5144230769230769, "no_speech_prob": 1.1125390301458538e-05}, {"id": 271, "seek": 121736, "start": 1226.1999999999998, "end": 1227.8799999999999, "text": " OK, good.", "tokens": [2264, 11, 665, 13], "temperature": 0.0, "avg_logprob": -0.1732146715877032, "compression_ratio": 1.5144230769230769, "no_speech_prob": 1.1125390301458538e-05}, {"id": 272, "seek": 121736, "start": 1227.8799999999999, "end": 1228.36, "text": " Cool.", "tokens": [8561, 13], "temperature": 0.0, "avg_logprob": -0.1732146715877032, "compression_ratio": 1.5144230769230769, "no_speech_prob": 1.1125390301458538e-05}, {"id": 273, "seek": 121736, "start": 1231.0, "end": 1232.84, "text": " So I want to deal with that.", "tokens": [407, 286, 528, 281, 2028, 365, 300, 13], "temperature": 0.0, "avg_logprob": -0.1732146715877032, "compression_ratio": 1.5144230769230769, "no_speech_prob": 1.1125390301458538e-05}, {"id": 274, "seek": 121736, "start": 1232.84, "end": 1238.24, "text": " Now I'm trying to confirm that I have 10 numbers in a number", "tokens": [823, 286, 478, 1382, 281, 9064, 300, 286, 362, 1266, 3547, 294, 257, 1230], "temperature": 0.0, "avg_logprob": -0.1732146715877032, "compression_ratio": 1.5144230769230769, "no_speech_prob": 1.1125390301458538e-05}, {"id": 275, "seek": 121736, "start": 1238.24, "end": 1239.76, "text": " to make it truly a phone number.", "tokens": [281, 652, 309, 4908, 257, 2593, 1230, 13], "temperature": 0.0, "avg_logprob": -0.1732146715877032, "compression_ratio": 1.5144230769230769, "no_speech_prob": 1.1125390301458538e-05}, {"id": 276, "seek": 121736, "start": 1243.52, "end": 1245.3999999999999, "text": " But I also want to get the digits out,", "tokens": [583, 286, 611, 528, 281, 483, 264, 27011, 484, 11], "temperature": 0.0, "avg_logprob": -0.1732146715877032, "compression_ratio": 1.5144230769230769, "no_speech_prob": 1.1125390301458538e-05}, {"id": 277, "seek": 121736, "start": 1245.3999999999999, "end": 1246.76, "text": " which will be useful.", "tokens": [597, 486, 312, 4420, 13], "temperature": 0.0, "avg_logprob": -0.1732146715877032, "compression_ratio": 1.5144230769230769, "no_speech_prob": 1.1125390301458538e-05}, {"id": 278, "seek": 124676, "start": 1246.76, "end": 1249.24, "text": " And I want to check things like, this is probably not", "tokens": [400, 286, 528, 281, 1520, 721, 411, 11, 341, 307, 1391, 406], "temperature": 0.0, "avg_logprob": -0.16311020738496554, "compression_ratio": 1.7471264367816093, "no_speech_prob": 1.5445601093233563e-05}, {"id": 279, "seek": 124676, "start": 1249.24, "end": 1253.2, "text": " a phone number because they put spaces between every two", "tokens": [257, 2593, 1230, 570, 436, 829, 7673, 1296, 633, 732], "temperature": 0.0, "avg_logprob": -0.16311020738496554, "compression_ratio": 1.7471264367816093, "no_speech_prob": 1.5445601093233563e-05}, {"id": 280, "seek": 124676, "start": 1253.2, "end": 1253.76, "text": " digits.", "tokens": [27011, 13], "temperature": 0.0, "avg_logprob": -0.16311020738496554, "compression_ratio": 1.7471264367816093, "no_speech_prob": 1.5445601093233563e-05}, {"id": 281, "seek": 124676, "start": 1253.76, "end": 1256.64, "text": " That's not how you format a phone number.", "tokens": [663, 311, 406, 577, 291, 7877, 257, 2593, 1230, 13], "temperature": 0.0, "avg_logprob": -0.16311020738496554, "compression_ratio": 1.7471264367816093, "no_speech_prob": 1.5445601093233563e-05}, {"id": 282, "seek": 124676, "start": 1256.64, "end": 1258.28, "text": " Would like to be able to pick that up.", "tokens": [6068, 411, 281, 312, 1075, 281, 1888, 300, 493, 13], "temperature": 0.0, "avg_logprob": -0.16311020738496554, "compression_ratio": 1.7471264367816093, "no_speech_prob": 1.5445601093233563e-05}, {"id": 283, "seek": 124676, "start": 1258.28, "end": 1260.4, "text": " That's not a phone number.", "tokens": [663, 311, 406, 257, 2593, 1230, 13], "temperature": 0.0, "avg_logprob": -0.16311020738496554, "compression_ratio": 1.7471264367816093, "no_speech_prob": 1.5445601093233563e-05}, {"id": 284, "seek": 124676, "start": 1260.4, "end": 1262.44, "text": " And so this is going to get really unwieldy,", "tokens": [400, 370, 341, 307, 516, 281, 483, 534, 14853, 1789, 88, 11], "temperature": 0.0, "avg_logprob": -0.16311020738496554, "compression_ratio": 1.7471264367816093, "no_speech_prob": 1.5445601093233563e-05}, {"id": 285, "seek": 124676, "start": 1262.44, "end": 1264.36, "text": " because you see here I'm already kind of having", "tokens": [570, 291, 536, 510, 286, 478, 1217, 733, 295, 1419], "temperature": 0.0, "avg_logprob": -0.16311020738496554, "compression_ratio": 1.7471264367816093, "no_speech_prob": 1.5445601093233563e-05}, {"id": 286, "seek": 124676, "start": 1264.36, "end": 1267.52, "text": " to have a lot of different ifs to check things.", "tokens": [281, 362, 257, 688, 295, 819, 498, 82, 281, 1520, 721, 13], "temperature": 0.0, "avg_logprob": -0.16311020738496554, "compression_ratio": 1.7471264367816093, "no_speech_prob": 1.5445601093233563e-05}, {"id": 287, "seek": 124676, "start": 1267.52, "end": 1271.28, "text": " This code, you can imagine becoming even lengthier", "tokens": [639, 3089, 11, 291, 393, 3811, 5617, 754, 4641, 811], "temperature": 0.0, "avg_logprob": -0.16311020738496554, "compression_ratio": 1.7471264367816093, "no_speech_prob": 1.5445601093233563e-05}, {"id": 288, "seek": 124676, "start": 1271.28, "end": 1274.24, "text": " with lots of branches of your if else", "tokens": [365, 3195, 295, 14770, 295, 428, 498, 1646], "temperature": 0.0, "avg_logprob": -0.16311020738496554, "compression_ratio": 1.7471264367816093, "no_speech_prob": 1.5445601093233563e-05}, {"id": 289, "seek": 127424, "start": 1274.24, "end": 1276.84, "text": " than what you're checking of formats.", "tokens": [813, 437, 291, 434, 8568, 295, 25879, 13], "temperature": 0.0, "avg_logprob": -0.12249178933625174, "compression_ratio": 1.4678111587982832, "no_speech_prob": 1.0451131856825668e-05}, {"id": 290, "seek": 127424, "start": 1276.84, "end": 1279.72, "text": " So I do not recommend this approach.", "tokens": [407, 286, 360, 406, 2748, 341, 3109, 13], "temperature": 0.0, "avg_logprob": -0.12249178933625174, "compression_ratio": 1.4678111587982832, "no_speech_prob": 1.0451131856825668e-05}, {"id": 291, "seek": 127424, "start": 1279.72, "end": 1285.84, "text": " I wanted to offer regx as an alternative.", "tokens": [286, 1415, 281, 2626, 1121, 87, 382, 364, 8535, 13], "temperature": 0.0, "avg_logprob": -0.12249178933625174, "compression_ratio": 1.4678111587982832, "no_speech_prob": 1.0451131856825668e-05}, {"id": 292, "seek": 127424, "start": 1285.84, "end": 1287.88, "text": " And I should say, part of this notebook", "tokens": [400, 286, 820, 584, 11, 644, 295, 341, 21060], "temperature": 0.0, "avg_logprob": -0.12249178933625174, "compression_ratio": 1.4678111587982832, "no_speech_prob": 1.0451131856825668e-05}, {"id": 293, "seek": 127424, "start": 1287.88, "end": 1290.6, "text": " I adapted from Brian Spearing's notebooks", "tokens": [286, 20871, 490, 10765, 3550, 1921, 311, 43782], "temperature": 0.0, "avg_logprob": -0.12249178933625174, "compression_ratio": 1.4678111587982832, "no_speech_prob": 1.0451131856825668e-05}, {"id": 294, "seek": 127424, "start": 1290.6, "end": 1293.76, "text": " from when he taught this last summer.", "tokens": [490, 562, 415, 5928, 341, 1036, 4266, 13], "temperature": 0.0, "avg_logprob": -0.12249178933625174, "compression_ratio": 1.4678111587982832, "no_speech_prob": 1.0451131856825668e-05}, {"id": 295, "seek": 127424, "start": 1293.76, "end": 1297.44, "text": " Regular expressions are a pattern matching language.", "tokens": [45659, 15277, 366, 257, 5102, 14324, 2856, 13], "temperature": 0.0, "avg_logprob": -0.12249178933625174, "compression_ratio": 1.4678111587982832, "no_speech_prob": 1.0451131856825668e-05}, {"id": 296, "seek": 127424, "start": 1297.44, "end": 1301.64, "text": " And instead of writing 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,", "tokens": [400, 2602, 295, 3579, 1958, 11, 502, 11, 568, 11, 805, 11, 1017, 11, 1025, 11, 1386, 11, 1614, 11, 1649, 11, 1722, 11], "temperature": 0.0, "avg_logprob": -0.12249178933625174, "compression_ratio": 1.4678111587982832, "no_speech_prob": 1.0451131856825668e-05}, {"id": 297, "seek": 130164, "start": 1301.64, "end": 1306.0400000000002, "text": " you can write 0 to 9, or backslash lowercase d", "tokens": [291, 393, 2464, 1958, 281, 1722, 11, 420, 646, 10418, 1299, 3126, 9765, 274], "temperature": 0.0, "avg_logprob": -0.16688725043987407, "compression_ratio": 1.592741935483871, "no_speech_prob": 1.3845051398675423e-05}, {"id": 298, "seek": 130164, "start": 1306.0400000000002, "end": 1308.5600000000002, "text": " represents digits.", "tokens": [8855, 27011, 13], "temperature": 0.0, "avg_logprob": -0.16688725043987407, "compression_ratio": 1.592741935483871, "no_speech_prob": 1.3845051398675423e-05}, {"id": 299, "seek": 130164, "start": 1308.5600000000002, "end": 1313.0, "text": " I'll also note regx, you kind of have to learn it by doing it.", "tokens": [286, 603, 611, 3637, 1121, 87, 11, 291, 733, 295, 362, 281, 1466, 309, 538, 884, 309, 13], "temperature": 0.0, "avg_logprob": -0.16688725043987407, "compression_ratio": 1.592741935483871, "no_speech_prob": 1.3845051398675423e-05}, {"id": 300, "seek": 130164, "start": 1313.0, "end": 1317.92, "text": " And I'll give you some time next time to practice.", "tokens": [400, 286, 603, 976, 291, 512, 565, 958, 565, 281, 3124, 13], "temperature": 0.0, "avg_logprob": -0.16688725043987407, "compression_ratio": 1.592741935483871, "no_speech_prob": 1.3845051398675423e-05}, {"id": 301, "seek": 130164, "start": 1317.92, "end": 1319.96, "text": " Because I think when you just hear it,", "tokens": [1436, 286, 519, 562, 291, 445, 1568, 309, 11], "temperature": 0.0, "avg_logprob": -0.16688725043987407, "compression_ratio": 1.592741935483871, "no_speech_prob": 1.3845051398675423e-05}, {"id": 302, "seek": 130164, "start": 1319.96, "end": 1321.3600000000001, "text": " it can sound like, oh my goodness,", "tokens": [309, 393, 1626, 411, 11, 1954, 452, 8387, 11], "temperature": 0.0, "avg_logprob": -0.16688725043987407, "compression_ratio": 1.592741935483871, "no_speech_prob": 1.3845051398675423e-05}, {"id": 303, "seek": 130164, "start": 1321.3600000000001, "end": 1325.3600000000001, "text": " this is a bunch of cryptic sounding rules.", "tokens": [341, 307, 257, 3840, 295, 9844, 299, 24931, 4474, 13], "temperature": 0.0, "avg_logprob": -0.16688725043987407, "compression_ratio": 1.592741935483871, "no_speech_prob": 1.3845051398675423e-05}, {"id": 304, "seek": 130164, "start": 1325.3600000000001, "end": 1327.6000000000001, "text": " So you really just kind of have to play around with it.", "tokens": [407, 291, 534, 445, 733, 295, 362, 281, 862, 926, 365, 309, 13], "temperature": 0.0, "avg_logprob": -0.16688725043987407, "compression_ratio": 1.592741935483871, "no_speech_prob": 1.3845051398675423e-05}, {"id": 305, "seek": 130164, "start": 1327.6000000000001, "end": 1329.8000000000002, "text": " And fortunately, there are some nice sites", "tokens": [400, 25511, 11, 456, 366, 512, 1481, 7533], "temperature": 0.0, "avg_logprob": -0.16688725043987407, "compression_ratio": 1.592741935483871, "no_speech_prob": 1.3845051398675423e-05}, {"id": 306, "seek": 132980, "start": 1329.8, "end": 1332.6399999999999, "text": " that I've got links to a few of them", "tokens": [300, 286, 600, 658, 6123, 281, 257, 1326, 295, 552], "temperature": 0.0, "avg_logprob": -0.1415767970838045, "compression_ratio": 1.5885167464114833, "no_speech_prob": 1.9523713490343653e-05}, {"id": 307, "seek": 132980, "start": 1332.6399999999999, "end": 1336.8, "text": " that give you kind of practice problems,", "tokens": [300, 976, 291, 733, 295, 3124, 2740, 11], "temperature": 0.0, "avg_logprob": -0.1415767970838045, "compression_ratio": 1.5885167464114833, "no_speech_prob": 1.9523713490343653e-05}, {"id": 308, "seek": 132980, "start": 1336.8, "end": 1341.8, "text": " and also kind of display if what you're doing works or not.", "tokens": [293, 611, 733, 295, 4674, 498, 437, 291, 434, 884, 1985, 420, 406, 13], "temperature": 0.0, "avg_logprob": -0.1415767970838045, "compression_ratio": 1.5885167464114833, "no_speech_prob": 1.9523713490343653e-05}, {"id": 309, "seek": 132980, "start": 1341.8, "end": 1345.28, "text": " And matching phone numbers is considered", "tokens": [400, 14324, 2593, 3547, 307, 4888], "temperature": 0.0, "avg_logprob": -0.1415767970838045, "compression_ratio": 1.5885167464114833, "no_speech_prob": 1.9523713490343653e-05}, {"id": 310, "seek": 132980, "start": 1345.28, "end": 1348.12, "text": " the hello world of regx.", "tokens": [264, 7751, 1002, 295, 1121, 87, 13], "temperature": 0.0, "avg_logprob": -0.1415767970838045, "compression_ratio": 1.5885167464114833, "no_speech_prob": 1.9523713490343653e-05}, {"id": 311, "seek": 132980, "start": 1348.12, "end": 1351.96, "text": " You could write something 0 to 9, 0 to 9.", "tokens": [509, 727, 2464, 746, 1958, 281, 1722, 11, 1958, 281, 1722, 13], "temperature": 0.0, "avg_logprob": -0.1415767970838045, "compression_ratio": 1.5885167464114833, "no_speech_prob": 1.9523713490343653e-05}, {"id": 312, "seek": 132980, "start": 1351.96, "end": 1355.1599999999999, "text": " Here, this is picking off three numbers, dash,", "tokens": [1692, 11, 341, 307, 8867, 766, 1045, 3547, 11, 8240, 11], "temperature": 0.0, "avg_logprob": -0.1415767970838045, "compression_ratio": 1.5885167464114833, "no_speech_prob": 1.9523713490343653e-05}, {"id": 313, "seek": 132980, "start": 1355.1599999999999, "end": 1358.24, "text": " three more numbers, dash, four numbers.", "tokens": [1045, 544, 3547, 11, 8240, 11, 1451, 3547, 13], "temperature": 0.0, "avg_logprob": -0.1415767970838045, "compression_ratio": 1.5885167464114833, "no_speech_prob": 1.9523713490343653e-05}, {"id": 314, "seek": 135824, "start": 1358.24, "end": 1362.16, "text": " That's terribly long and not what you want to write.", "tokens": [663, 311, 22903, 938, 293, 406, 437, 291, 528, 281, 2464, 13], "temperature": 0.0, "avg_logprob": -0.11170784262723701, "compression_ratio": 1.6727272727272726, "no_speech_prob": 2.111154935846571e-05}, {"id": 315, "seek": 135824, "start": 1362.16, "end": 1369.08, "text": " You could refactor that into backslash d, backslash d,", "tokens": [509, 727, 1895, 15104, 300, 666, 646, 10418, 1299, 274, 11, 646, 10418, 1299, 274, 11], "temperature": 0.0, "avg_logprob": -0.11170784262723701, "compression_ratio": 1.6727272727272726, "no_speech_prob": 2.111154935846571e-05}, {"id": 316, "seek": 135824, "start": 1369.08, "end": 1370.32, "text": " 10 of those.", "tokens": [1266, 295, 729, 13], "temperature": 0.0, "avg_logprob": -0.11170784262723701, "compression_ratio": 1.6727272727272726, "no_speech_prob": 2.111154935846571e-05}, {"id": 317, "seek": 135824, "start": 1370.32, "end": 1373.0, "text": " That's still a bit long and not what you want to write.", "tokens": [663, 311, 920, 257, 857, 938, 293, 406, 437, 291, 528, 281, 2464, 13], "temperature": 0.0, "avg_logprob": -0.11170784262723701, "compression_ratio": 1.6727272727272726, "no_speech_prob": 2.111154935846571e-05}, {"id": 318, "seek": 135824, "start": 1373.0, "end": 1376.96, "text": " Fortunately, regx gives you quantifiers.", "tokens": [20652, 11, 1121, 87, 2709, 291, 4426, 23463, 13], "temperature": 0.0, "avg_logprob": -0.11170784262723701, "compression_ratio": 1.6727272727272726, "no_speech_prob": 2.111154935846571e-05}, {"id": 319, "seek": 135824, "start": 1376.96, "end": 1386.28, "text": " So here, this can be refactored into slash d, three, dash.", "tokens": [407, 510, 11, 341, 393, 312, 1895, 578, 2769, 666, 17330, 274, 11, 1045, 11, 8240, 13], "temperature": 0.0, "avg_logprob": -0.11170784262723701, "compression_ratio": 1.6727272727272726, "no_speech_prob": 2.111154935846571e-05}, {"id": 320, "seek": 138628, "start": 1386.28, "end": 1389.72, "text": " So basically, this is saying three numeric digits, a dash,", "tokens": [407, 1936, 11, 341, 307, 1566, 1045, 7866, 299, 27011, 11, 257, 8240, 11], "temperature": 0.0, "avg_logprob": -0.1411777754961434, "compression_ratio": 1.5615384615384615, "no_speech_prob": 8.664384040457662e-06}, {"id": 321, "seek": 138628, "start": 1389.72, "end": 1394.08, "text": " three more numeric digits, dash, four numeric digits.", "tokens": [1045, 544, 7866, 299, 27011, 11, 8240, 11, 1451, 7866, 299, 27011, 13], "temperature": 0.0, "avg_logprob": -0.1411777754961434, "compression_ratio": 1.5615384615384615, "no_speech_prob": 8.664384040457662e-06}, {"id": 322, "seek": 138628, "start": 1397.04, "end": 1401.8, "text": " Some unexact quantifiers, a question mark", "tokens": [2188, 11572, 578, 4426, 23463, 11, 257, 1168, 1491], "temperature": 0.0, "avg_logprob": -0.1411777754961434, "compression_ratio": 1.5615384615384615, "no_speech_prob": 8.664384040457662e-06}, {"id": 323, "seek": 138628, "start": 1401.8, "end": 1407.8, "text": " means 0 or 1 of something, star means 0 or more,", "tokens": [1355, 1958, 420, 502, 295, 746, 11, 3543, 1355, 1958, 420, 544, 11], "temperature": 0.0, "avg_logprob": -0.1411777754961434, "compression_ratio": 1.5615384615384615, "no_speech_prob": 8.664384040457662e-06}, {"id": 324, "seek": 140780, "start": 1407.8, "end": 1416.6, "text": " plus sign means 1 or more for specifying what you want.", "tokens": [1804, 1465, 1355, 502, 420, 544, 337, 1608, 5489, 437, 291, 528, 13], "temperature": 0.0, "avg_logprob": -0.1922042483375186, "compression_ratio": 1.5053763440860215, "no_speech_prob": 6.338976618280867e-06}, {"id": 325, "seek": 140780, "start": 1416.6, "end": 1420.76, "text": " And so I think I'll stop here, and we'll continue next time.", "tokens": [400, 370, 286, 519, 286, 603, 1590, 510, 11, 293, 321, 603, 2354, 958, 565, 13], "temperature": 0.0, "avg_logprob": -0.1922042483375186, "compression_ratio": 1.5053763440860215, "no_speech_prob": 6.338976618280867e-06}, {"id": 326, "seek": 140780, "start": 1420.76, "end": 1424.0, "text": " But next time, we'll take some time to practice this", "tokens": [583, 958, 565, 11, 321, 603, 747, 512, 565, 281, 3124, 341], "temperature": 0.0, "avg_logprob": -0.1922042483375186, "compression_ratio": 1.5053763440860215, "no_speech_prob": 6.338976618280867e-06}, {"id": 327, "seek": 140780, "start": 1424.0, "end": 1427.84, "text": " and kind of see what they look like on the ground", "tokens": [293, 733, 295, 536, 437, 436, 574, 411, 322, 264, 2727], "temperature": 0.0, "avg_logprob": -0.1922042483375186, "compression_ratio": 1.5053763440860215, "no_speech_prob": 6.338976618280867e-06}, {"id": 328, "seek": 140780, "start": 1427.84, "end": 1429.9199999999998, "text": " when you're using them.", "tokens": [562, 291, 434, 1228, 552, 13], "temperature": 0.0, "avg_logprob": -0.1922042483375186, "compression_ratio": 1.5053763440860215, "no_speech_prob": 6.338976618280867e-06}, {"id": 329, "seek": 140780, "start": 1429.9199999999998, "end": 1430.96, "text": " But yeah, we'll end here.", "tokens": [583, 1338, 11, 321, 603, 917, 510, 13], "temperature": 0.0, "avg_logprob": -0.1922042483375186, "compression_ratio": 1.5053763440860215, "no_speech_prob": 6.338976618280867e-06}, {"id": 330, "seek": 143096, "start": 1430.96, "end": 1437.96, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50714], "temperature": 0.0, "avg_logprob": -0.7930062611897787, "compression_ratio": 0.5555555555555556, "no_speech_prob": 7.012182322796434e-05}], "language": "en"}