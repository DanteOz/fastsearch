{"text": " you me How about now? Good. All right. I think that's a weird thing where I just have to turn the volume up and down for no particular reason. Oh look, Ben's joining us. Hello Ben. You're muted. It's like you've got a halo around you there. Very elegant. I put it there especially. Nice to meet you. Hi. Hey, Sarada. Yeah, yeah. Sarada and I live on the same side of the country. We should catch up sometime. Oh, you're in Perth Ben? I'm in Colley which is 40 minutes up the hill from Bumbury. It's another two hours. It took two in Bumbury's two hours south of Perth. How do you spell Colley? C-O-L-L-I-E like the dog. Colley, Western Australia. It's the power generation centre of the state prior to renewables. Okay. I see. You're inland. Yeah. Lots of forests around you. That sounds nice. It is. Yeah. Yeah. Actually in my introduction at the course, I showed a few videos of the place. We were transitioning from coal powered to something else. So I'm not quite sure yet, but the government's putting a lot of money into the town to help it get started in other industries. That's good. Okay. Yeah. So usually this is right in the middle of my drive to work. But I've got a little cough developing, so I thought I'd stay home and have an opportunity to tune in. I hope you're all right. Yeah. Yeah, I'll see how it goes. All right. Any news since yesterday? Okay. The forum. I was just looking at one thing that just happened to do a poll on the APL notebook. And I was just looking at the 9-11-1, which is monadic and it's called rank. Are you looking at what? I'm looking at the notebook. The notebook. Yep. All right. I've got it open here. So I just gave that a pull a few minutes ago. Yeah. So it should be 9-11-1. What does that mean? 9-11-1? They're all numbered. Each thing. So I don't have numbering on mine. No? Okay. It's interesting why mine's different. That's because you'll have the table of contents extension installed. Ah, gotcha. I could say jot dioresis. Okay. The monadic. Go down to operators. And yeah, towards the end. Jot dioresis. Yep. Yeah. It says in brackets, it says rank. And that's what it's doing is not what I understood rank to be. That seems to be incorrect. So, um. Jeremy, do you want to share the screen? Yes. Just looking up the correct name for jot dioresis. Oh, it does say rank on. For a different meaning of rank. Yeah. Okay. No, it is. Oh, yeah, it is rank. And we haven't really fully investigated this one yet. So, yeah, let's come back to that. Maybe even today. All right. Let me share my screen. Hi, Wasim. How are you? I'm good, thanks. Not bad. All right. So yesterday we were doing access with a comma, we did comma bar. Is that basically where we got to? I guess so. Oh, and then we were doing access. With my notic operand. Okay. Yeah, well, that's actually not a bad time actually to look at jot dioresis. So what if we move? I guess the first thing I'd say is slope and slope probably deserve to be moved up anyway. And then let's move jot dioresis up. Okay. This one. Okay, this one's got a monadic as well. All the possible versions. So there's both rank and a top. So rank is not its meaning. This is the type of rank is its meaning. Yep. I know what it is now. It is the rank operator. So, okay. So it's quite similar to access and in fact, okay. So slope bar and slash bar are basically identical, I think, to using the access operator. Yes. As you can see. And then rank is also the same. Yes. As you see here. So the rank operator is takes a function on the left and a scalar on the right. Is it always a scalar? Wrong one. Okay, it can be a scalar. Okay, sorry, a scalar or it can be a vector. Ah, yes, yes, yes. Okay. I knew that too. All right. So what this is going to do is it's going to take the plus slash function and it's going to apply it over this axis. So which it's very similar to the access operator. Just to clarify, it's not rank in the way that we learned through the course, where it's the number of dimensions. Correct. It is not that. So that rank is row row. So you can always get the rank by calling row. Maybe just an extra comment there, just because when I read rank. Yeah, I mean, I haven't added any pros to this yet. So I'm not going to add it just yet. But yeah, when we do that. So if we've got here. So the first dimension, the first axis is this one. So this is going to apply some over the first axis. Which is identical to slash bar. No, it's not slash bar. It's slash bar would be doing it over the second axis. What am I like? Something interesting going on here. Ah, so, so there's any Okay, it's different to axes because if we did axes. To use a cube for an example to see the difference. Okay, so axes works this way. It specifies the rank of the cells. Okay, so it selects K cells of the corresponding argument. So K cells. So, okay, so the, the one cells of this are the cells which are vectors. I see. So, rank isn't able to like transpose it or anything, I guess, using this approach. I don't know if there's something if it's negative here. Yeah, it's negative. Minus one selects major cells. Okay, so there's a whole thing about cells and subarrays here that's useful. A rank K cell. Describes a subarray on the last K axis. Okay. Negative K describes a subarray on the leading K axis of an array. R plus K. What does that mean? Because like R is the rank of the array. Okay, so now that's two. So a negative K would be, oh, R plus minus one. I see. That's why. So, got it. R plus minus one would be would be the last axis. Okay, that makes perfect sense. Yeah, so this is different to the axis operator you can't change the axis you can just say what cells to do this over. So, I like this idea of using a cube. And that would be cube. Okay, so that's doing it over the one cells. So these are the one cells. And here are the sums of the one cells. Okay, so then if we do two should be over the two cells, which are interesting. Two cells would be, I see, I thought a two cell would be this whole thing. So I was expecting it to add that all up. Okay, so they have some examples. Gosh, this is confusing. I posted a link in the chat. Go ahead. I posted a link in the chat to the wiki which shows strength versus access like some examples, how to get the same. Okay, forgetting to use APL wiki. Right. And what's an anomalous axis operator. One negative right operand that's what we have specifies the number of final axes to which the function applies. Oh, that shouldn't make any difference, should it, when you've got a rank with it. Try it. I think this should be the same. Is the round brackets causing something to change how it's applied. The round brackets. I think would be necessary, because otherwise because of precedence without it. It would be paused. Like that, I believe. Okay, so this is different, somehow. Monadic, okay, dietic slash bar as an operator. So the sense of arrays documentation says that two cells are like two matrices of 2d shape. So if we look at the notebook. Just before we do, I just want to mention this, this is what I thought it says it just implies reduction among a particular axis. So I'm not sure why. These two are giving slightly different answers. Oh, I see why. So, cube is reducing down. So it's doing matrices, and it's summing up each lot of thing in each of those matrices. Okay, yeah, sorry, go ahead. So what were you saying about notebook. I think you, you're on the right track. So the documentation says if x is the three dimensional matrix of shape 234 the two cells are two matrices of shape 34. So in our case it is two matrices of shape two by two. One, two, three, four, okay. Yeah. And so, two cells rank two cells are the matrices of shapes three by four. And we are applying the slash to that whole matrix, the each matrix. So, slash bar, I guess, is applying it to the last axis. So one plus five plus nine is 15 to six stand is 18. And 131721 is 15. So the operator is applied for each matrix of three by four. So, if we went matrix is a three by four. Yeah, so that's that is the first row of that. Because it's being applied to matrices. Is that the idea. And then this one is being applied to vectors. One is the rank of the sub matrix. documentation you showed you before case else. So that's, I believe, is a case sells so I'd expect to get 710. Yes, which you do. Okay. That makes sense, kind of. The one I think is particularly helpful is the version where you pass a two element array on the right hand side. Because then we should be able to add. Let's say we wanted to add one to each row or add one, two, three to the first, second and third rows. We'd go one, two, three. Now you can't just add that to the matrix because they don't match. But what you could do is you could say so the keyboard shortcut for this is shift J. So we're going to go through each cell on the left. And then on the right, we're going to go through each. Each vector on the right. Yes, okay. Scalar on the left. So this is going to go through each scalar on the left. And each vector on the right. And so the vectors on the right are the first one, one, two, three, four. And the first scalar on the left is one. So the first result is one plus one, two, three, four. The second is two plus five, six, seven, eight. So that's how we can do quick loops between two different things. So that's a pretty important operator. And Adam mentioned that as well on the forums. Does anybody have any questions about that? It's a bit odd. I think a key thing is to look at this idea about cells and salaries. I've come across this before because they talk about it in J a lot. J being the language that I have built after he built APL. All right. So maybe we should move to a top, which I think is going to be easy because I think it's largely the same as Jot, bind, like so. So we can just borrow the use from Jot. And this is not monadic. This is dyadic. Dyadic. So that should all be the same as far as I know. Okay. I think it's Shift J. Different. Okay. Let's find out why. F G Y equals F of G of Y. Oh, this is the wrong version. I need to find one. Yes, that's the same. And then this one is the same. It looks like for Jot, we. Now that's interesting. There's some difference between them. I thought in the dyadic. Oh, okay. Only two. Okay. Whoops. I forgot to change it. Cool. That's the same. And this one's different. Okay. So the monadic one's the same. The dyadic one's different. Let's have a look. I think there's some nice pictures. Okay. Here's the difference. So beside, which is the one we've learned before. First of all, applies the right hand function. The way Adam describes it is it pre-processes the right hand side. And then the left hand function applies to the left hand side and that pre-processed right hand side. Oh, and a top's doing the opposite. Basically, it's applying the right hand side dyadically. And then post-processing with the left hand side. See the difference? Okay. So that means that this one here should be 2 divided by 3 first. 2 divided by 3 first. And then it's going to do e to the power of that, which means we basically don't need any parentheses. Does that make sense? It did for me. All right. Great. Thanks, Molly. Still getting my eye in with all the symbols. Yeah, tell me about it. Eddie, in particular, you want to explain or review? No, it's just having the time to process. So this is e to the power of 2 to the power of 2 thirds. Which makes me think we should do this last one now. Over. Probably makes sense, right? So over is here. Shift O. Over. A little bit confusing because it looks a bit the same. Just in those three diagrams, can you, in the notebook, can you break down which is x and which is y? So y is always the right hand side and x is always the left hand side. And you can tell in the documentation because if you look at a particular example, like here, over here, it shows you here. So r is the result. x is the left hand side, y is the right hand side and f and g and the left and right arguments to the operator. Yeah, I just in the example, I just want to concretely point it, which is which. So in the example, this is x, this is x. Yep. And y. Yep. And g is inside the f function. And g is, yeah, f is f and g. Yep. Got it. And if you define your own operator, they have different names. I kind of wish I used these names in the documentation. They're called, f is called alpha alpha. G is called omega omega, which we don't have for this one. x is called alpha and y is called omega. So over is. OK, same thing, monetically. That's pretty easy. I guess we don't need quite so many samples for the ones that are identical. I guess it's all right. Copy that, paste that. So shift o, the symbols called circle dioresis. And. Diadic version. That. Over. I should do this one. Over. OK, so over. That should be exactly the same. It is now the. Diadic version is different. It's going to apply g. It's got a preproce both left and right. So I'm going to try to predict what it's going to do. So here. It's going to apply divide to both sides. So we're going to get. That. I think should be the answer. It is. So it's applying divide to the left, it's applying divide to the right, and then it's applying power of to that result. That is what this useful picture is showing. OK, and then it's showing when any of these applied monadically, the dotted branch disappears. Which means in every case you're left with fgy, fgy, fgy. Right. It's nice to see all these different types of function composition. Yeah, you know, it's something that we're not used to from other languages, are we really? But the idea. Comes from combinatorial logic. And there is the Haskell-Carrie kind of, I don't know if he invented it, but he certainly developed it. There's the Cary combinators. It basically defines these different ways of combining or I guess we'd say in computer science composing functions. And so, yeah, all the. All the these ways of doing things in APL, I believe, are directly aligned with different Cary combinators. I am not at all an expert on that though. Is that where the term Cary comes from? It is. Yeah. Carrying a function. I thought that was a disk thing that predated Haskell. Haskell is named after Haskell-Carrie. Haskell-Carrie predates Haskell by a long way. Ah, gotcha. Yes, good. And that's what we would call partial functions in Python. Great. Another thing I wanted to mention actually, which is to go back a bit to the Boolean stuff. I feel like we should have covered a couple of other things. One is I think we should have covered slash as a function. Because we've covered slash as an operator, but not slash as a function. And the reason I want to put it with Boolean is because. Oh, in fact, there's quite a few monadic versions, like quite a few. Let's check this. There's equals. Okay, it doesn't have a monadic. Not equals. Ah, yeah, okay. Do you guys remember monadic not equal to, which tells you have we seen this number before in the list? And so it's going to end up giving you a one for unique values. Where this is interesting is we can combine it with slash. Can you guys still hear me? My headphones. Yeah, that's good. Okay, I think they're running out of batteries. What should I do? I got a bit more fancy. Hi, can you guys hear me? Yep, can do. Great. It's a bit louder. Bit louder, okay. But okay. Cool. See if I can adjust it here. Alright. Alright, so paste. So we're going to do slash as a function. And it's called replicate. And what it does is it, let's put this in V. And then not equal to is eight. What it does is repeats whatever's on the right by the number of things that's on the left. So if we say on the left is a boolean array and on the right is the array itself, then that returns a unique list of the elements of V because it's repeating, it's basically element-wise repeat. So one copy of 22, one copy of 10, zero copies of 22, zero copies of 22. Does that make sense? One copy of 21. And so that's the result. So you don't need a separate unique function in APL. You know, we can just combine this idea of replicate with unique mask and it behaves as a mask. Is this where they might use that X Y swap thing to get rid of the brackets? Yeah, could try that. Add it as a second line output to quadruple. Oh, yeah, we could do that. Yeah, but it was the second line. Okay. So actually, I have a general question for everyone. With the keyboards, I find that actually, I haven't tried to hunt this down myself much, but I find I'm hitting control and shift keys often to do things and it changes my keyboard every time. And then my control Zs don't work. Does anyone else experiencing that? Yeah, so you can just hold down windows and press space to switch keyboards. It does, but it's also switching keyboards every time I hold control and shift together. Oh, you can change that in your language settings. Okay, I'll go looking for it. Cool. I'm on a Mac at the moment, so I don't see the same thing. Okay, so the swap was like this one. I think so. Shift T. So switch them around. And if we've done that yet. No, we haven't done that yet. And then, yeah, the other thing you can do, since it's replicate, you could say like three. So it's just going to repeat. Maybe we want to repeat the constant three times or something. There you go. I like this thing in APL, you know, this like, I feel like things are always just made more general than most other languages. So rather than just having a boolean mask operator, you know, it's called replicate. I like that. Very cool. Yeah. Yeah, very cool. All right, so then we need to revisit all of our operators and make sure we didn't miss any examples of what they can do, which is what Adam pointed out that probably that we definitely have. So we've got yes, we have not done expand, for example, which is, oh, that's used as a function. Okay, I've never seen this before. Hmm. So in the, in the, in the letters, wherever it had the minus, it gave spaces. It's got one and then two spaces and then a sub array of fill elements is replicated. Like in, well, in the matrix example, you've got a number one and then you've got two zeros because it's minus two. And then you've got two replicated. So that's replicating the second element to us. And then you have, yeah, so it's doing it kind of like across columns. I think you put it in your notebook and had a box around it may be easier to see. Oh, you think there's a boxing thing going on here. Yeah, I think the second one, the ace that may be definitely have some boxing around it. Okay. Not much to say. That's two spaces. Yes. Okay, this isn't really got anything to do with Boolean so we can probably come back to it. So I don't think we need that right now. As an operator. We've done. Okay, they don't. They got a dyadic. I don't think so. Okay, so I think we've done this operator fully. I think we've checked slash bars the same. And I think we checked these pretty carefully. So let's check star diarisis. Power operator. Okay, I don't think we've. Oh, I did want to talk about power operator some more because we missed a really interesting case of power operator, which is a negative number. Yeah. So, if you remember, here we're saying. Okay, this is sorry, this is the successor function okay so it adds one to things, and this here says, run the successor function three times to zero. So we get three. What's interesting though, is we can also say, we can also create subtraction. And the way we can create subtraction is to say, like subtract one, for example, check one. I guess that should be P predecessor and successor predecessor. We can define as successor, star diarisis. Sorry. Oh, I'm notice. I don't know if it's only me but it looks like you're typing off the edge of the screen. Okay, thanks for letting me know. Okay now. I can see that. Yeah, I can see it now. Alright. Power, negative one. Now what power negative one does is it's the inverse function. So the inverse of adding one is subtracting one. The predecessor of three should be two. Isn't that amazing. So, it stands inverse functions, which is a pretty sophisticated mathematical concept, and it's even like doing inverse functions of functions that we have to find ourselves. And if you put a negative something other than one, I believe it applies it, the inverse function that many times. So I think we could say, apply this successor inverse function three times to the number five, for example. There you go. That's the equivalent of five minus three. So you could also do a square root. So if you wanted square root, you could do I think so that's going to be, let's say square is the power of two. So then we should be able to get the square root of nine by doing square inverse, the inverse function of square, which is square root. There you go. Cool. Cool. Very cool. So it's like solving an equation. Yeah. Okay. So I'm glad we revisited that one. I think that's pretty amazing. Tilt a dioresis. Okay, yeah, we missed one of these. So this is dyadic. And there's also this one's called, this one's called constant. All right. All right. And then dioresis. Okay. And we've got each with Okay. And he had a particular example of something we missed. Oh, that's interesting. So Aram says many APLs frown on bracket axis as anomalous. And there's no general rule. Yeah. The modern alternative is rank operator. Often together with transpose. Okay. We haven't done come to that yet, but I guess we can guess what that means, which is general. Cool. So you don't often need bracket axis. Ah, that's good to know. So transpose should be one we could do reasonably early. Wouldn't rely on Yeah. Other ones. Absolutely. I'm just trying to find this one with About what we got to fix. Ah, here it is. Okay. Systematic problem of terminology. So for functions, yes, they're monadic or dyadic. But for operators, there's monadic and dyadic operators, and then these can derive monadic and dyadic functions. For this one, we've got dyadic commute. So we've missed the fact that this derives a monadic function. Okay, let's check that one. So this to order dioresis derives a monadic function. Which I guess is this here. Oh, look at that. If the left argument x is omitted and you can tell that you can because it's in curly brackets here. Then the right argument is duplicated. Okay. I'm not sure the APL docs really laid that out as nicely as Adam has done either. It's not really showing us that as clearly. Yeah, I can see that now. So we need to check when we look at the documentation for these x curly brackets to see things where there's an optional left hand side. That's interesting. So it's going to duplicate it. What would be an example of where you might want to do that. I think maybe our So let's do it the other way around. The slash. Oh, I have a feeling this is going to work. The slash. Well, not quite. So we've got this. Which has got V on both sides. So I wonder, I don't feel that confident, but I wonder if you can do that. Oh, I've got it in the wrong place. Yeah, no, the problem is that's going to put this on each side. No. All right, that's not a good example. Okay, so does anybody have an example of something. Oh, I know a simple example. We could define power as being as being multiply on either side. That should be power right. Yeah, there you go. Well, if anybody comes across any other ones where we didn't notice a monadic version. Let me know. Just back in that previous cell, did you want to lose that previous example. Which previous example. The one you overwrote to in this cell 223. Was there something there. Oh, this one. Maybe you meant to override it, but it was a good example before that. No, this is. Oh yeah, because we can use it. I said to say we can use it for the. Yeah, yeah, yeah, that makes sense. Okay. Thanks for the idea. Okay. All right. Thanks, gang. She's.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 2.06, "text": " you", "tokens": [50364, 291, 50467], "temperature": 0.0, "avg_logprob": -0.5969773530960083, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.9394457340240479}, {"id": 1, "seek": 3000, "start": 30.0, "end": 52.0, "text": " me", "tokens": [385], "temperature": 1.0, "avg_logprob": -1.991147232055664, "compression_ratio": 0.2, "no_speech_prob": 0.14393667876720428}, {"id": 2, "seek": 5200, "start": 52.0, "end": 60.0, "text": " How about now?", "tokens": [1012, 466, 586, 30], "temperature": 0.0, "avg_logprob": -0.5582651811487535, "compression_ratio": 0.7948717948717948, "no_speech_prob": 0.01689658872783184}, {"id": 3, "seek": 5200, "start": 60.0, "end": 61.0, "text": " Good.", "tokens": [2205, 13], "temperature": 0.0, "avg_logprob": -0.5582651811487535, "compression_ratio": 0.7948717948717948, "no_speech_prob": 0.01689658872783184}, {"id": 4, "seek": 5200, "start": 61.0, "end": 66.0, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.5582651811487535, "compression_ratio": 0.7948717948717948, "no_speech_prob": 0.01689658872783184}, {"id": 5, "seek": 6600, "start": 66.0, "end": 87.0, "text": " I think that's a weird thing where I just have to turn the volume up and down for no particular reason.", "tokens": [286, 519, 300, 311, 257, 3657, 551, 689, 286, 445, 362, 281, 1261, 264, 5523, 493, 293, 760, 337, 572, 1729, 1778, 13], "temperature": 0.0, "avg_logprob": -0.2559992748758067, "compression_ratio": 1.24, "no_speech_prob": 4.9793616199167445e-05}, {"id": 6, "seek": 6600, "start": 87.0, "end": 91.0, "text": " Oh look, Ben's joining us. Hello Ben.", "tokens": [876, 574, 11, 3964, 311, 5549, 505, 13, 2425, 3964, 13], "temperature": 0.0, "avg_logprob": -0.2559992748758067, "compression_ratio": 1.24, "no_speech_prob": 4.9793616199167445e-05}, {"id": 7, "seek": 6600, "start": 91.0, "end": 95.0, "text": " You're muted.", "tokens": [509, 434, 32808, 13], "temperature": 0.0, "avg_logprob": -0.2559992748758067, "compression_ratio": 1.24, "no_speech_prob": 4.9793616199167445e-05}, {"id": 8, "seek": 9500, "start": 95.0, "end": 99.0, "text": " It's like you've got a halo around you there.", "tokens": [467, 311, 411, 291, 600, 658, 257, 46268, 926, 291, 456, 13], "temperature": 0.0, "avg_logprob": -0.2606712909454995, "compression_ratio": 1.4123222748815165, "no_speech_prob": 0.0005951052298769355}, {"id": 9, "seek": 9500, "start": 99.0, "end": 104.0, "text": " Very elegant. I put it there especially.", "tokens": [4372, 21117, 13, 286, 829, 309, 456, 2318, 13], "temperature": 0.0, "avg_logprob": -0.2606712909454995, "compression_ratio": 1.4123222748815165, "no_speech_prob": 0.0005951052298769355}, {"id": 10, "seek": 9500, "start": 104.0, "end": 111.0, "text": " Nice to meet you. Hi. Hey, Sarada. Yeah, yeah. Sarada and I live on the same side of the country.", "tokens": [5490, 281, 1677, 291, 13, 2421, 13, 1911, 11, 6894, 1538, 13, 865, 11, 1338, 13, 6894, 1538, 293, 286, 1621, 322, 264, 912, 1252, 295, 264, 1941, 13], "temperature": 0.0, "avg_logprob": -0.2606712909454995, "compression_ratio": 1.4123222748815165, "no_speech_prob": 0.0005951052298769355}, {"id": 11, "seek": 9500, "start": 111.0, "end": 115.0, "text": " We should catch up sometime. Oh, you're in Perth Ben?", "tokens": [492, 820, 3745, 493, 15053, 13, 876, 11, 291, 434, 294, 3026, 392, 3964, 30], "temperature": 0.0, "avg_logprob": -0.2606712909454995, "compression_ratio": 1.4123222748815165, "no_speech_prob": 0.0005951052298769355}, {"id": 12, "seek": 9500, "start": 115.0, "end": 121.0, "text": " I'm in Colley which is 40 minutes up the hill from Bumbury.", "tokens": [286, 478, 294, 4586, 2030, 597, 307, 3356, 2077, 493, 264, 10997, 490, 363, 2860, 2598, 13], "temperature": 0.0, "avg_logprob": -0.2606712909454995, "compression_ratio": 1.4123222748815165, "no_speech_prob": 0.0005951052298769355}, {"id": 13, "seek": 12100, "start": 121.0, "end": 126.0, "text": " It's another two hours. It took two in Bumbury's two hours south of Perth.", "tokens": [467, 311, 1071, 732, 2496, 13, 467, 1890, 732, 294, 363, 2860, 2598, 311, 732, 2496, 7377, 295, 3026, 392, 13], "temperature": 0.0, "avg_logprob": -0.19208506041882084, "compression_ratio": 1.403755868544601, "no_speech_prob": 0.00034513528225943446}, {"id": 14, "seek": 12100, "start": 126.0, "end": 128.0, "text": " How do you spell Colley?", "tokens": [1012, 360, 291, 9827, 4586, 2030, 30], "temperature": 0.0, "avg_logprob": -0.19208506041882084, "compression_ratio": 1.403755868544601, "no_speech_prob": 0.00034513528225943446}, {"id": 15, "seek": 12100, "start": 128.0, "end": 132.0, "text": " C-O-L-L-I-E like the dog.", "tokens": [383, 12, 46, 12, 43, 12, 43, 12, 40, 12, 36, 411, 264, 3000, 13], "temperature": 0.0, "avg_logprob": -0.19208506041882084, "compression_ratio": 1.403755868544601, "no_speech_prob": 0.00034513528225943446}, {"id": 16, "seek": 12100, "start": 132.0, "end": 134.0, "text": " Colley, Western Australia.", "tokens": [4586, 2030, 11, 8724, 7060, 13], "temperature": 0.0, "avg_logprob": -0.19208506041882084, "compression_ratio": 1.403755868544601, "no_speech_prob": 0.00034513528225943446}, {"id": 17, "seek": 12100, "start": 134.0, "end": 141.0, "text": " It's the power generation centre of the state prior to renewables.", "tokens": [467, 311, 264, 1347, 5125, 10093, 295, 264, 1785, 4059, 281, 10162, 2965, 13], "temperature": 0.0, "avg_logprob": -0.19208506041882084, "compression_ratio": 1.403755868544601, "no_speech_prob": 0.00034513528225943446}, {"id": 18, "seek": 12100, "start": 141.0, "end": 144.0, "text": " Okay. I see. You're inland.", "tokens": [1033, 13, 286, 536, 13, 509, 434, 47009, 13], "temperature": 0.0, "avg_logprob": -0.19208506041882084, "compression_ratio": 1.403755868544601, "no_speech_prob": 0.00034513528225943446}, {"id": 19, "seek": 12100, "start": 144.0, "end": 147.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.19208506041882084, "compression_ratio": 1.403755868544601, "no_speech_prob": 0.00034513528225943446}, {"id": 20, "seek": 12100, "start": 147.0, "end": 149.0, "text": " Lots of forests around you. That sounds nice.", "tokens": [15908, 295, 21700, 926, 291, 13, 663, 3263, 1481, 13], "temperature": 0.0, "avg_logprob": -0.19208506041882084, "compression_ratio": 1.403755868544601, "no_speech_prob": 0.00034513528225943446}, {"id": 21, "seek": 14900, "start": 149.0, "end": 151.0, "text": " It is. Yeah.", "tokens": [467, 307, 13, 865, 13], "temperature": 0.0, "avg_logprob": -0.17022281803496897, "compression_ratio": 1.484375, "no_speech_prob": 0.0004624605644494295}, {"id": 22, "seek": 14900, "start": 151.0, "end": 159.0, "text": " Yeah. Actually in my introduction at the course, I showed a few videos of the place.", "tokens": [865, 13, 5135, 294, 452, 9339, 412, 264, 1164, 11, 286, 4712, 257, 1326, 2145, 295, 264, 1081, 13], "temperature": 0.0, "avg_logprob": -0.17022281803496897, "compression_ratio": 1.484375, "no_speech_prob": 0.0004624605644494295}, {"id": 23, "seek": 14900, "start": 159.0, "end": 167.0, "text": " We were transitioning from coal powered to something else.", "tokens": [492, 645, 33777, 490, 10209, 17786, 281, 746, 1646, 13], "temperature": 0.0, "avg_logprob": -0.17022281803496897, "compression_ratio": 1.484375, "no_speech_prob": 0.0004624605644494295}, {"id": 24, "seek": 14900, "start": 167.0, "end": 178.0, "text": " So I'm not quite sure yet, but the government's putting a lot of money into the town to help it get started in other industries.", "tokens": [407, 286, 478, 406, 1596, 988, 1939, 11, 457, 264, 2463, 311, 3372, 257, 688, 295, 1460, 666, 264, 3954, 281, 854, 309, 483, 1409, 294, 661, 13284, 13], "temperature": 0.0, "avg_logprob": -0.17022281803496897, "compression_ratio": 1.484375, "no_speech_prob": 0.0004624605644494295}, {"id": 25, "seek": 17800, "start": 178.0, "end": 181.0, "text": " That's good. Okay.", "tokens": [663, 311, 665, 13, 1033, 13], "temperature": 0.0, "avg_logprob": -0.1822086635388826, "compression_ratio": 1.4137931034482758, "no_speech_prob": 0.00022723336587660015}, {"id": 26, "seek": 17800, "start": 181.0, "end": 188.0, "text": " Yeah. So usually this is right in the middle of my drive to work.", "tokens": [865, 13, 407, 2673, 341, 307, 558, 294, 264, 2808, 295, 452, 3332, 281, 589, 13], "temperature": 0.0, "avg_logprob": -0.1822086635388826, "compression_ratio": 1.4137931034482758, "no_speech_prob": 0.00022723336587660015}, {"id": 27, "seek": 17800, "start": 188.0, "end": 194.0, "text": " But I've got a little cough developing, so I thought I'd stay home and have an opportunity to tune in.", "tokens": [583, 286, 600, 658, 257, 707, 22777, 6416, 11, 370, 286, 1194, 286, 1116, 1754, 1280, 293, 362, 364, 2650, 281, 10864, 294, 13], "temperature": 0.0, "avg_logprob": -0.1822086635388826, "compression_ratio": 1.4137931034482758, "no_speech_prob": 0.00022723336587660015}, {"id": 28, "seek": 17800, "start": 194.0, "end": 196.0, "text": " I hope you're all right.", "tokens": [286, 1454, 291, 434, 439, 558, 13], "temperature": 0.0, "avg_logprob": -0.1822086635388826, "compression_ratio": 1.4137931034482758, "no_speech_prob": 0.00022723336587660015}, {"id": 29, "seek": 17800, "start": 196.0, "end": 201.0, "text": " Yeah. Yeah, I'll see how it goes.", "tokens": [865, 13, 865, 11, 286, 603, 536, 577, 309, 1709, 13], "temperature": 0.0, "avg_logprob": -0.1822086635388826, "compression_ratio": 1.4137931034482758, "no_speech_prob": 0.00022723336587660015}, {"id": 30, "seek": 20100, "start": 201.0, "end": 213.0, "text": " All right. Any news since yesterday?", "tokens": [1057, 558, 13, 2639, 2583, 1670, 5186, 30], "temperature": 0.0, "avg_logprob": -0.21570417357654106, "compression_ratio": 1.1794871794871795, "no_speech_prob": 5.9119109209859744e-05}, {"id": 31, "seek": 20100, "start": 213.0, "end": 218.0, "text": " Okay. The forum.", "tokens": [1033, 13, 440, 17542, 13], "temperature": 0.0, "avg_logprob": -0.21570417357654106, "compression_ratio": 1.1794871794871795, "no_speech_prob": 5.9119109209859744e-05}, {"id": 32, "seek": 20100, "start": 218.0, "end": 229.0, "text": " I was just looking at one thing that just happened to do a poll on the APL notebook.", "tokens": [286, 390, 445, 1237, 412, 472, 551, 300, 445, 2011, 281, 360, 257, 6418, 322, 264, 5372, 43, 21060, 13], "temperature": 0.0, "avg_logprob": -0.21570417357654106, "compression_ratio": 1.1794871794871795, "no_speech_prob": 5.9119109209859744e-05}, {"id": 33, "seek": 22900, "start": 229.0, "end": 237.0, "text": " And I was just looking at the 9-11-1, which is monadic and it's called rank.", "tokens": [400, 286, 390, 445, 1237, 412, 264, 1722, 12, 5348, 12, 16, 11, 597, 307, 1108, 43341, 293, 309, 311, 1219, 6181, 13], "temperature": 0.0, "avg_logprob": -0.20143491991104617, "compression_ratio": 1.579646017699115, "no_speech_prob": 0.0001088451681425795}, {"id": 34, "seek": 22900, "start": 237.0, "end": 239.0, "text": " Are you looking at what?", "tokens": [2014, 291, 1237, 412, 437, 30], "temperature": 0.0, "avg_logprob": -0.20143491991104617, "compression_ratio": 1.579646017699115, "no_speech_prob": 0.0001088451681425795}, {"id": 35, "seek": 22900, "start": 239.0, "end": 241.0, "text": " I'm looking at the notebook.", "tokens": [286, 478, 1237, 412, 264, 21060, 13], "temperature": 0.0, "avg_logprob": -0.20143491991104617, "compression_ratio": 1.579646017699115, "no_speech_prob": 0.0001088451681425795}, {"id": 36, "seek": 22900, "start": 241.0, "end": 243.0, "text": " The notebook. Yep. All right. I've got it open here.", "tokens": [440, 21060, 13, 7010, 13, 1057, 558, 13, 286, 600, 658, 309, 1269, 510, 13], "temperature": 0.0, "avg_logprob": -0.20143491991104617, "compression_ratio": 1.579646017699115, "no_speech_prob": 0.0001088451681425795}, {"id": 37, "seek": 22900, "start": 243.0, "end": 246.0, "text": " So I just gave that a pull a few minutes ago.", "tokens": [407, 286, 445, 2729, 300, 257, 2235, 257, 1326, 2077, 2057, 13], "temperature": 0.0, "avg_logprob": -0.20143491991104617, "compression_ratio": 1.579646017699115, "no_speech_prob": 0.0001088451681425795}, {"id": 38, "seek": 22900, "start": 246.0, "end": 249.0, "text": " Yeah. So it should be 9-11-1.", "tokens": [865, 13, 407, 309, 820, 312, 1722, 12, 5348, 12, 16, 13], "temperature": 0.0, "avg_logprob": -0.20143491991104617, "compression_ratio": 1.579646017699115, "no_speech_prob": 0.0001088451681425795}, {"id": 39, "seek": 22900, "start": 249.0, "end": 251.0, "text": " What does that mean? 9-11-1?", "tokens": [708, 775, 300, 914, 30, 1722, 12, 5348, 12, 16, 30], "temperature": 0.0, "avg_logprob": -0.20143491991104617, "compression_ratio": 1.579646017699115, "no_speech_prob": 0.0001088451681425795}, {"id": 40, "seek": 22900, "start": 251.0, "end": 253.0, "text": " They're all numbered. Each thing.", "tokens": [814, 434, 439, 40936, 13, 6947, 551, 13], "temperature": 0.0, "avg_logprob": -0.20143491991104617, "compression_ratio": 1.579646017699115, "no_speech_prob": 0.0001088451681425795}, {"id": 41, "seek": 22900, "start": 253.0, "end": 255.0, "text": " So I don't have numbering on mine.", "tokens": [407, 286, 500, 380, 362, 1230, 278, 322, 3892, 13], "temperature": 0.0, "avg_logprob": -0.20143491991104617, "compression_ratio": 1.579646017699115, "no_speech_prob": 0.0001088451681425795}, {"id": 42, "seek": 25500, "start": 255.0, "end": 259.0, "text": " No? Okay. It's interesting why mine's different.", "tokens": [883, 30, 1033, 13, 467, 311, 1880, 983, 3892, 311, 819, 13], "temperature": 0.0, "avg_logprob": -0.19148924544050888, "compression_ratio": 1.5130434782608695, "no_speech_prob": 4.264248127583414e-05}, {"id": 43, "seek": 25500, "start": 259.0, "end": 262.0, "text": " That's because you'll have the table of contents extension installed.", "tokens": [663, 311, 570, 291, 603, 362, 264, 3199, 295, 15768, 10320, 8899, 13], "temperature": 0.0, "avg_logprob": -0.19148924544050888, "compression_ratio": 1.5130434782608695, "no_speech_prob": 4.264248127583414e-05}, {"id": 44, "seek": 25500, "start": 262.0, "end": 265.0, "text": " Ah, gotcha. I could say jot dioresis.", "tokens": [2438, 11, 658, 4413, 13, 286, 727, 584, 27873, 1026, 2706, 271, 13], "temperature": 0.0, "avg_logprob": -0.19148924544050888, "compression_ratio": 1.5130434782608695, "no_speech_prob": 4.264248127583414e-05}, {"id": 45, "seek": 25500, "start": 265.0, "end": 266.0, "text": " Okay. The monadic.", "tokens": [1033, 13, 440, 1108, 43341, 13], "temperature": 0.0, "avg_logprob": -0.19148924544050888, "compression_ratio": 1.5130434782608695, "no_speech_prob": 4.264248127583414e-05}, {"id": 46, "seek": 25500, "start": 266.0, "end": 270.0, "text": " Go down to operators.", "tokens": [1037, 760, 281, 19077, 13], "temperature": 0.0, "avg_logprob": -0.19148924544050888, "compression_ratio": 1.5130434782608695, "no_speech_prob": 4.264248127583414e-05}, {"id": 47, "seek": 25500, "start": 270.0, "end": 275.0, "text": " And yeah, towards the end.", "tokens": [400, 1338, 11, 3030, 264, 917, 13], "temperature": 0.0, "avg_logprob": -0.19148924544050888, "compression_ratio": 1.5130434782608695, "no_speech_prob": 4.264248127583414e-05}, {"id": 48, "seek": 25500, "start": 275.0, "end": 276.0, "text": " Jot dioresis. Yep.", "tokens": [508, 310, 1026, 2706, 271, 13, 7010, 13], "temperature": 0.0, "avg_logprob": -0.19148924544050888, "compression_ratio": 1.5130434782608695, "no_speech_prob": 4.264248127583414e-05}, {"id": 49, "seek": 25500, "start": 276.0, "end": 279.0, "text": " Yeah. It says in brackets, it says rank.", "tokens": [865, 13, 467, 1619, 294, 26179, 11, 309, 1619, 6181, 13], "temperature": 0.0, "avg_logprob": -0.19148924544050888, "compression_ratio": 1.5130434782608695, "no_speech_prob": 4.264248127583414e-05}, {"id": 50, "seek": 25500, "start": 279.0, "end": 284.0, "text": " And that's what it's doing is not what I understood rank to be.", "tokens": [400, 300, 311, 437, 309, 311, 884, 307, 406, 437, 286, 7320, 6181, 281, 312, 13], "temperature": 0.0, "avg_logprob": -0.19148924544050888, "compression_ratio": 1.5130434782608695, "no_speech_prob": 4.264248127583414e-05}, {"id": 51, "seek": 28400, "start": 284.0, "end": 286.0, "text": " That seems to be incorrect.", "tokens": [663, 2544, 281, 312, 18424, 13], "temperature": 0.0, "avg_logprob": -0.25285543714250835, "compression_ratio": 1.256, "no_speech_prob": 6.107536319177598e-05}, {"id": 52, "seek": 28400, "start": 286.0, "end": 288.0, "text": " So, um.", "tokens": [407, 11, 1105, 13], "temperature": 0.0, "avg_logprob": -0.25285543714250835, "compression_ratio": 1.256, "no_speech_prob": 6.107536319177598e-05}, {"id": 53, "seek": 28400, "start": 288.0, "end": 291.0, "text": " Jeremy, do you want to share the screen?", "tokens": [17809, 11, 360, 291, 528, 281, 2073, 264, 2568, 30], "temperature": 0.0, "avg_logprob": -0.25285543714250835, "compression_ratio": 1.256, "no_speech_prob": 6.107536319177598e-05}, {"id": 54, "seek": 28400, "start": 291.0, "end": 294.0, "text": " Yes.", "tokens": [1079, 13], "temperature": 0.0, "avg_logprob": -0.25285543714250835, "compression_ratio": 1.256, "no_speech_prob": 6.107536319177598e-05}, {"id": 55, "seek": 28400, "start": 294.0, "end": 301.0, "text": " Just looking up the correct name for jot dioresis.", "tokens": [1449, 1237, 493, 264, 3006, 1315, 337, 27873, 1026, 2706, 271, 13], "temperature": 0.0, "avg_logprob": -0.25285543714250835, "compression_ratio": 1.256, "no_speech_prob": 6.107536319177598e-05}, {"id": 56, "seek": 28400, "start": 301.0, "end": 310.0, "text": " Oh, it does say rank on.", "tokens": [876, 11, 309, 775, 584, 6181, 322, 13], "temperature": 0.0, "avg_logprob": -0.25285543714250835, "compression_ratio": 1.256, "no_speech_prob": 6.107536319177598e-05}, {"id": 57, "seek": 31000, "start": 310.0, "end": 315.0, "text": " For a different meaning of rank.", "tokens": [1171, 257, 819, 3620, 295, 6181, 13], "temperature": 0.0, "avg_logprob": -0.1558410223428305, "compression_ratio": 1.375, "no_speech_prob": 2.7106500056106597e-05}, {"id": 58, "seek": 31000, "start": 315.0, "end": 316.0, "text": " Yeah. Okay.", "tokens": [865, 13, 1033, 13], "temperature": 0.0, "avg_logprob": -0.1558410223428305, "compression_ratio": 1.375, "no_speech_prob": 2.7106500056106597e-05}, {"id": 59, "seek": 31000, "start": 316.0, "end": 317.0, "text": " No, it is.", "tokens": [883, 11, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.1558410223428305, "compression_ratio": 1.375, "no_speech_prob": 2.7106500056106597e-05}, {"id": 60, "seek": 31000, "start": 317.0, "end": 319.0, "text": " Oh, yeah, it is rank.", "tokens": [876, 11, 1338, 11, 309, 307, 6181, 13], "temperature": 0.0, "avg_logprob": -0.1558410223428305, "compression_ratio": 1.375, "no_speech_prob": 2.7106500056106597e-05}, {"id": 61, "seek": 31000, "start": 319.0, "end": 323.0, "text": " And we haven't really fully investigated this one yet.", "tokens": [400, 321, 2378, 380, 534, 4498, 30070, 341, 472, 1939, 13], "temperature": 0.0, "avg_logprob": -0.1558410223428305, "compression_ratio": 1.375, "no_speech_prob": 2.7106500056106597e-05}, {"id": 62, "seek": 31000, "start": 323.0, "end": 326.0, "text": " So, yeah, let's come back to that.", "tokens": [407, 11, 1338, 11, 718, 311, 808, 646, 281, 300, 13], "temperature": 0.0, "avg_logprob": -0.1558410223428305, "compression_ratio": 1.375, "no_speech_prob": 2.7106500056106597e-05}, {"id": 63, "seek": 31000, "start": 326.0, "end": 328.0, "text": " Maybe even today.", "tokens": [2704, 754, 965, 13], "temperature": 0.0, "avg_logprob": -0.1558410223428305, "compression_ratio": 1.375, "no_speech_prob": 2.7106500056106597e-05}, {"id": 64, "seek": 31000, "start": 328.0, "end": 335.0, "text": " All right. Let me share my screen.", "tokens": [1057, 558, 13, 961, 385, 2073, 452, 2568, 13], "temperature": 0.0, "avg_logprob": -0.1558410223428305, "compression_ratio": 1.375, "no_speech_prob": 2.7106500056106597e-05}, {"id": 65, "seek": 33500, "start": 335.0, "end": 340.0, "text": " Hi, Wasim. How are you?", "tokens": [2421, 11, 3027, 332, 13, 1012, 366, 291, 30], "temperature": 0.0, "avg_logprob": -0.3019277315873366, "compression_ratio": 0.8620689655172413, "no_speech_prob": 6.499704613815993e-05}, {"id": 66, "seek": 33500, "start": 340.0, "end": 343.0, "text": " I'm good, thanks.", "tokens": [286, 478, 665, 11, 3231, 13], "temperature": 0.0, "avg_logprob": -0.3019277315873366, "compression_ratio": 0.8620689655172413, "no_speech_prob": 6.499704613815993e-05}, {"id": 67, "seek": 33500, "start": 343.0, "end": 348.0, "text": " Not bad.", "tokens": [1726, 1578, 13], "temperature": 0.0, "avg_logprob": -0.3019277315873366, "compression_ratio": 0.8620689655172413, "no_speech_prob": 6.499704613815993e-05}, {"id": 68, "seek": 34800, "start": 348.0, "end": 367.0, "text": " All right. So yesterday we were doing access with a comma, we did comma bar. Is that basically where we got to?", "tokens": [1057, 558, 13, 407, 5186, 321, 645, 884, 2105, 365, 257, 22117, 11, 321, 630, 22117, 2159, 13, 1119, 300, 1936, 689, 321, 658, 281, 30], "temperature": 0.0, "avg_logprob": -0.21011127309596284, "compression_ratio": 1.3389830508474576, "no_speech_prob": 2.0143395886407234e-05}, {"id": 69, "seek": 34800, "start": 367.0, "end": 370.0, "text": " I guess so.", "tokens": [286, 2041, 370, 13], "temperature": 0.0, "avg_logprob": -0.21011127309596284, "compression_ratio": 1.3389830508474576, "no_speech_prob": 2.0143395886407234e-05}, {"id": 70, "seek": 34800, "start": 370.0, "end": 375.0, "text": " Oh, and then we were doing access.", "tokens": [876, 11, 293, 550, 321, 645, 884, 2105, 13], "temperature": 0.0, "avg_logprob": -0.21011127309596284, "compression_ratio": 1.3389830508474576, "no_speech_prob": 2.0143395886407234e-05}, {"id": 71, "seek": 37500, "start": 375.0, "end": 384.0, "text": " With my notic operand. Okay.", "tokens": [2022, 452, 406, 299, 2208, 474, 13, 1033, 13], "temperature": 0.0, "avg_logprob": -0.23883285522460937, "compression_ratio": 1.1682242990654206, "no_speech_prob": 7.0715236688556615e-06}, {"id": 72, "seek": 37500, "start": 384.0, "end": 390.0, "text": " Yeah, well, that's actually", "tokens": [865, 11, 731, 11, 300, 311, 767], "temperature": 0.0, "avg_logprob": -0.23883285522460937, "compression_ratio": 1.1682242990654206, "no_speech_prob": 7.0715236688556615e-06}, {"id": 73, "seek": 37500, "start": 390.0, "end": 393.0, "text": " not a bad time actually to look at jot dioresis.", "tokens": [406, 257, 1578, 565, 767, 281, 574, 412, 27873, 1026, 2706, 271, 13], "temperature": 0.0, "avg_logprob": -0.23883285522460937, "compression_ratio": 1.1682242990654206, "no_speech_prob": 7.0715236688556615e-06}, {"id": 74, "seek": 37500, "start": 393.0, "end": 397.0, "text": " So what if we move?", "tokens": [407, 437, 498, 321, 1286, 30], "temperature": 0.0, "avg_logprob": -0.23883285522460937, "compression_ratio": 1.1682242990654206, "no_speech_prob": 7.0715236688556615e-06}, {"id": 75, "seek": 39700, "start": 397.0, "end": 407.0, "text": " I guess the first thing I'd say is slope and slope probably deserve to be moved up anyway.", "tokens": [286, 2041, 264, 700, 551, 286, 1116, 584, 307, 13525, 293, 13525, 1391, 9948, 281, 312, 4259, 493, 4033, 13], "temperature": 0.0, "avg_logprob": -0.13730242445662216, "compression_ratio": 1.2095238095238094, "no_speech_prob": 7.646131052752025e-06}, {"id": 76, "seek": 39700, "start": 407.0, "end": 415.0, "text": " And then let's move jot dioresis up.", "tokens": [400, 550, 718, 311, 1286, 27873, 1026, 2706, 271, 493, 13], "temperature": 0.0, "avg_logprob": -0.13730242445662216, "compression_ratio": 1.2095238095238094, "no_speech_prob": 7.646131052752025e-06}, {"id": 77, "seek": 41500, "start": 415.0, "end": 427.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.2605894695628773, "compression_ratio": 0.6521739130434783, "no_speech_prob": 7.527290108555462e-06}, {"id": 78, "seek": 41500, "start": 427.0, "end": 430.0, "text": " This one.", "tokens": [639, 472, 13], "temperature": 0.0, "avg_logprob": -0.2605894695628773, "compression_ratio": 0.6521739130434783, "no_speech_prob": 7.527290108555462e-06}, {"id": 79, "seek": 43000, "start": 430.0, "end": 446.0, "text": " Okay, this one's got a monadic as well.", "tokens": [1033, 11, 341, 472, 311, 658, 257, 1108, 43341, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.16426844894886017, "compression_ratio": 0.8297872340425532, "no_speech_prob": 5.68216592000681e-06}, {"id": 80, "seek": 44600, "start": 446.0, "end": 462.0, "text": " All the possible versions. So there's both rank and a top.", "tokens": [1057, 264, 1944, 9606, 13, 407, 456, 311, 1293, 6181, 293, 257, 1192, 13], "temperature": 0.0, "avg_logprob": -0.20809273842053536, "compression_ratio": 1.3229166666666667, "no_speech_prob": 1.4968743016652297e-05}, {"id": 81, "seek": 44600, "start": 462.0, "end": 466.0, "text": " So rank is not its meaning.", "tokens": [407, 6181, 307, 406, 1080, 3620, 13], "temperature": 0.0, "avg_logprob": -0.20809273842053536, "compression_ratio": 1.3229166666666667, "no_speech_prob": 1.4968743016652297e-05}, {"id": 82, "seek": 44600, "start": 466.0, "end": 471.0, "text": " This is the type of rank is its meaning.", "tokens": [639, 307, 264, 2010, 295, 6181, 307, 1080, 3620, 13], "temperature": 0.0, "avg_logprob": -0.20809273842053536, "compression_ratio": 1.3229166666666667, "no_speech_prob": 1.4968743016652297e-05}, {"id": 83, "seek": 47100, "start": 471.0, "end": 494.0, "text": " Yep. I know what it is now. It is the rank operator. So, okay. So it's quite similar to access and in fact, okay. So slope bar and slash bar are basically identical, I think, to using the access", "tokens": [7010, 13, 286, 458, 437, 309, 307, 586, 13, 467, 307, 264, 6181, 12973, 13, 407, 11, 1392, 13, 407, 309, 311, 1596, 2531, 281, 2105, 293, 294, 1186, 11, 1392, 13, 407, 13525, 2159, 293, 17330, 2159, 366, 1936, 14800, 11, 286, 519, 11, 281, 1228, 264, 2105], "temperature": 0.0, "avg_logprob": -0.2265768385770028, "compression_ratio": 1.4676258992805755, "no_speech_prob": 8.397488272748888e-06}, {"id": 84, "seek": 47100, "start": 494.0, "end": 497.0, "text": " operator.", "tokens": [12973, 13], "temperature": 0.0, "avg_logprob": -0.2265768385770028, "compression_ratio": 1.4676258992805755, "no_speech_prob": 8.397488272748888e-06}, {"id": 85, "seek": 49700, "start": 497.0, "end": 501.0, "text": " Yes. As you can see.", "tokens": [1079, 13, 1018, 291, 393, 536, 13], "temperature": 0.0, "avg_logprob": -0.19066790172031947, "compression_ratio": 1.2098765432098766, "no_speech_prob": 1.147848252003314e-05}, {"id": 86, "seek": 49700, "start": 501.0, "end": 515.0, "text": " And then rank is also the same. Yes. As you see here. So the rank operator", "tokens": [400, 550, 6181, 307, 611, 264, 912, 13, 1079, 13, 1018, 291, 536, 510, 13, 407, 264, 6181, 12973], "temperature": 0.0, "avg_logprob": -0.19066790172031947, "compression_ratio": 1.2098765432098766, "no_speech_prob": 1.147848252003314e-05}, {"id": 87, "seek": 49700, "start": 515.0, "end": 518.0, "text": " is", "tokens": [307], "temperature": 0.0, "avg_logprob": -0.19066790172031947, "compression_ratio": 1.2098765432098766, "no_speech_prob": 1.147848252003314e-05}, {"id": 88, "seek": 51800, "start": 518.0, "end": 545.0, "text": " takes a function on the left and a scalar on the right. Is it always a scalar?", "tokens": [2516, 257, 2445, 322, 264, 1411, 293, 257, 39684, 322, 264, 558, 13, 1119, 309, 1009, 257, 39684, 30], "temperature": 0.0, "avg_logprob": -0.15111177900563116, "compression_ratio": 1.1304347826086956, "no_speech_prob": 8.34730890346691e-05}, {"id": 89, "seek": 54500, "start": 545.0, "end": 553.0, "text": " Wrong one.", "tokens": [28150, 472, 13], "temperature": 0.0, "avg_logprob": -0.2935415691799588, "compression_ratio": 1.3666666666666667, "no_speech_prob": 6.540242793562356e-06}, {"id": 90, "seek": 54500, "start": 553.0, "end": 560.0, "text": " Okay, it can be a scalar. Okay, sorry, a scalar or it can be a vector. Ah, yes, yes, yes. Okay. I knew that too.", "tokens": [1033, 11, 309, 393, 312, 257, 39684, 13, 1033, 11, 2597, 11, 257, 39684, 420, 309, 393, 312, 257, 8062, 13, 2438, 11, 2086, 11, 2086, 11, 2086, 13, 1033, 13, 286, 2586, 300, 886, 13], "temperature": 0.0, "avg_logprob": -0.2935415691799588, "compression_ratio": 1.3666666666666667, "no_speech_prob": 6.540242793562356e-06}, {"id": 91, "seek": 56000, "start": 560.0, "end": 574.0, "text": " All right. So what this is going to do is it's going to take the plus slash function and it's going to apply it over this axis.", "tokens": [1057, 558, 13, 407, 437, 341, 307, 516, 281, 360, 307, 309, 311, 516, 281, 747, 264, 1804, 17330, 2445, 293, 309, 311, 516, 281, 3079, 309, 670, 341, 10298, 13], "temperature": 0.0, "avg_logprob": -0.12204607009887695, "compression_ratio": 1.4471544715447155, "no_speech_prob": 4.356788394943578e-06}, {"id": 92, "seek": 56000, "start": 574.0, "end": 580.0, "text": " So", "tokens": [407], "temperature": 0.0, "avg_logprob": -0.12204607009887695, "compression_ratio": 1.4471544715447155, "no_speech_prob": 4.356788394943578e-06}, {"id": 93, "seek": 56000, "start": 580.0, "end": 586.0, "text": " which it's very similar to the access operator.", "tokens": [597, 309, 311, 588, 2531, 281, 264, 2105, 12973, 13], "temperature": 0.0, "avg_logprob": -0.12204607009887695, "compression_ratio": 1.4471544715447155, "no_speech_prob": 4.356788394943578e-06}, {"id": 94, "seek": 58600, "start": 586.0, "end": 595.0, "text": " Just to clarify, it's not rank in the way that we learned through the course, where it's the number of dimensions.", "tokens": [1449, 281, 17594, 11, 309, 311, 406, 6181, 294, 264, 636, 300, 321, 3264, 807, 264, 1164, 11, 689, 309, 311, 264, 1230, 295, 12819, 13], "temperature": 0.0, "avg_logprob": -0.2306647104759739, "compression_ratio": 1.521978021978022, "no_speech_prob": 2.0781350031029433e-05}, {"id": 95, "seek": 58600, "start": 595.0, "end": 603.0, "text": " Correct. It is not that. So that rank is row row. So you can always get the rank by calling row.", "tokens": [12753, 13, 467, 307, 406, 300, 13, 407, 300, 6181, 307, 5386, 5386, 13, 407, 291, 393, 1009, 483, 264, 6181, 538, 5141, 5386, 13], "temperature": 0.0, "avg_logprob": -0.2306647104759739, "compression_ratio": 1.521978021978022, "no_speech_prob": 2.0781350031029433e-05}, {"id": 96, "seek": 58600, "start": 603.0, "end": 608.0, "text": " Maybe just an extra comment there, just because when I read rank.", "tokens": [2704, 445, 364, 2857, 2871, 456, 11, 445, 570, 562, 286, 1401, 6181, 13], "temperature": 0.0, "avg_logprob": -0.2306647104759739, "compression_ratio": 1.521978021978022, "no_speech_prob": 2.0781350031029433e-05}, {"id": 97, "seek": 60800, "start": 608.0, "end": 621.0, "text": " Yeah, I mean, I haven't added any pros to this yet. So I'm not going to add it just yet. But yeah, when we do that.", "tokens": [865, 11, 286, 914, 11, 286, 2378, 380, 3869, 604, 6267, 281, 341, 1939, 13, 407, 286, 478, 406, 516, 281, 909, 309, 445, 1939, 13, 583, 1338, 11, 562, 321, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.24659771668283562, "compression_ratio": 1.1855670103092784, "no_speech_prob": 1.6186284483410418e-05}, {"id": 98, "seek": 62100, "start": 621.0, "end": 638.0, "text": " So if we've got here. So the first dimension, the first axis is this one. So this is going to apply some over the first axis.", "tokens": [407, 498, 321, 600, 658, 510, 13, 407, 264, 700, 10139, 11, 264, 700, 10298, 307, 341, 472, 13, 407, 341, 307, 516, 281, 3079, 512, 670, 264, 700, 10298, 13], "temperature": 0.0, "avg_logprob": -0.12762923674149948, "compression_ratio": 1.4107142857142858, "no_speech_prob": 6.540355116158025e-06}, {"id": 99, "seek": 62100, "start": 638.0, "end": 643.0, "text": " Which is identical to slash bar.", "tokens": [3013, 307, 14800, 281, 17330, 2159, 13], "temperature": 0.0, "avg_logprob": -0.12762923674149948, "compression_ratio": 1.4107142857142858, "no_speech_prob": 6.540355116158025e-06}, {"id": 100, "seek": 64300, "start": 643.0, "end": 656.0, "text": " No, it's not slash bar. It's slash bar would be doing it over the second axis.", "tokens": [883, 11, 309, 311, 406, 17330, 2159, 13, 467, 311, 17330, 2159, 576, 312, 884, 309, 670, 264, 1150, 10298, 13], "temperature": 0.0, "avg_logprob": -0.27712833404541015, "compression_ratio": 1.2622950819672132, "no_speech_prob": 1.2605929441633634e-05}, {"id": 101, "seek": 64300, "start": 656.0, "end": 659.0, "text": " What am I like?", "tokens": [708, 669, 286, 411, 30], "temperature": 0.0, "avg_logprob": -0.27712833404541015, "compression_ratio": 1.2622950819672132, "no_speech_prob": 1.2605929441633634e-05}, {"id": 102, "seek": 64300, "start": 659.0, "end": 663.0, "text": " Something interesting going on here.", "tokens": [6595, 1880, 516, 322, 510, 13], "temperature": 0.0, "avg_logprob": -0.27712833404541015, "compression_ratio": 1.2622950819672132, "no_speech_prob": 1.2605929441633634e-05}, {"id": 103, "seek": 64300, "start": 663.0, "end": 671.0, "text": " Ah, so, so there's any", "tokens": [2438, 11, 370, 11, 370, 456, 311, 604], "temperature": 0.0, "avg_logprob": -0.27712833404541015, "compression_ratio": 1.2622950819672132, "no_speech_prob": 1.2605929441633634e-05}, {"id": 104, "seek": 67100, "start": 671.0, "end": 677.0, "text": " Okay, it's different to axes because if we did axes.", "tokens": [1033, 11, 309, 311, 819, 281, 35387, 570, 498, 321, 630, 35387, 13], "temperature": 0.0, "avg_logprob": -0.23602028993459848, "compression_ratio": 1.3821138211382114, "no_speech_prob": 3.6475561500992626e-05}, {"id": 105, "seek": 67100, "start": 677.0, "end": 682.0, "text": " To use a cube for an example to see the difference.", "tokens": [1407, 764, 257, 13728, 337, 364, 1365, 281, 536, 264, 2649, 13], "temperature": 0.0, "avg_logprob": -0.23602028993459848, "compression_ratio": 1.3821138211382114, "no_speech_prob": 3.6475561500992626e-05}, {"id": 106, "seek": 67100, "start": 682.0, "end": 691.0, "text": " Okay, so axes works this way.", "tokens": [1033, 11, 370, 35387, 1985, 341, 636, 13], "temperature": 0.0, "avg_logprob": -0.23602028993459848, "compression_ratio": 1.3821138211382114, "no_speech_prob": 3.6475561500992626e-05}, {"id": 107, "seek": 67100, "start": 691.0, "end": 697.0, "text": " It specifies the rank of the cells.", "tokens": [467, 1608, 11221, 264, 6181, 295, 264, 5438, 13], "temperature": 0.0, "avg_logprob": -0.23602028993459848, "compression_ratio": 1.3821138211382114, "no_speech_prob": 3.6475561500992626e-05}, {"id": 108, "seek": 69700, "start": 697.0, "end": 705.0, "text": " Okay, so it selects K cells of the corresponding argument.", "tokens": [1033, 11, 370, 309, 3048, 82, 591, 5438, 295, 264, 11760, 6770, 13], "temperature": 0.0, "avg_logprob": -0.1418281430783479, "compression_ratio": 0.9722222222222222, "no_speech_prob": 3.6687986266770167e-06}, {"id": 109, "seek": 69700, "start": 705.0, "end": 710.0, "text": " So K cells.", "tokens": [407, 591, 5438, 13], "temperature": 0.0, "avg_logprob": -0.1418281430783479, "compression_ratio": 0.9722222222222222, "no_speech_prob": 3.6687986266770167e-06}, {"id": 110, "seek": 71000, "start": 710.0, "end": 728.0, "text": " So, okay, so the, the one cells of this are the cells which are vectors. I see. So, rank isn't able to like transpose it or anything, I guess, using this approach.", "tokens": [407, 11, 1392, 11, 370, 264, 11, 264, 472, 5438, 295, 341, 366, 264, 5438, 597, 366, 18875, 13, 286, 536, 13, 407, 11, 6181, 1943, 380, 1075, 281, 411, 25167, 309, 420, 1340, 11, 286, 2041, 11, 1228, 341, 3109, 13], "temperature": 0.0, "avg_logprob": -0.15587352303897634, "compression_ratio": 1.5157232704402517, "no_speech_prob": 3.844824732368579e-06}, {"id": 111, "seek": 71000, "start": 728.0, "end": 739.0, "text": " I don't know if there's something if it's negative here. Yeah, it's negative.", "tokens": [286, 500, 380, 458, 498, 456, 311, 746, 498, 309, 311, 3671, 510, 13, 865, 11, 309, 311, 3671, 13], "temperature": 0.0, "avg_logprob": -0.15587352303897634, "compression_ratio": 1.5157232704402517, "no_speech_prob": 3.844824732368579e-06}, {"id": 112, "seek": 73900, "start": 739.0, "end": 742.0, "text": " Minus one selects major cells.", "tokens": [2829, 301, 472, 3048, 82, 2563, 5438, 13], "temperature": 0.0, "avg_logprob": -0.2038373790803503, "compression_ratio": 1.3333333333333333, "no_speech_prob": 3.6477715184446424e-05}, {"id": 113, "seek": 73900, "start": 742.0, "end": 746.0, "text": " Okay, so there's a whole thing about cells and subarrays here that's useful.", "tokens": [1033, 11, 370, 456, 311, 257, 1379, 551, 466, 5438, 293, 1422, 2284, 3772, 510, 300, 311, 4420, 13], "temperature": 0.0, "avg_logprob": -0.2038373790803503, "compression_ratio": 1.3333333333333333, "no_speech_prob": 3.6477715184446424e-05}, {"id": 114, "seek": 73900, "start": 746.0, "end": 750.0, "text": " A rank K cell.", "tokens": [316, 6181, 591, 2815, 13], "temperature": 0.0, "avg_logprob": -0.2038373790803503, "compression_ratio": 1.3333333333333333, "no_speech_prob": 3.6477715184446424e-05}, {"id": 115, "seek": 73900, "start": 750.0, "end": 756.0, "text": " Describes a subarray on the last K axis. Okay.", "tokens": [3885, 1142, 6446, 257, 1422, 2284, 320, 322, 264, 1036, 591, 10298, 13, 1033, 13], "temperature": 0.0, "avg_logprob": -0.2038373790803503, "compression_ratio": 1.3333333333333333, "no_speech_prob": 3.6477715184446424e-05}, {"id": 116, "seek": 73900, "start": 756.0, "end": 764.0, "text": " Negative K", "tokens": [43230, 591], "temperature": 0.0, "avg_logprob": -0.2038373790803503, "compression_ratio": 1.3333333333333333, "no_speech_prob": 3.6477715184446424e-05}, {"id": 117, "seek": 76400, "start": 764.0, "end": 772.0, "text": " describes a subarray on the leading K axis of an array.", "tokens": [15626, 257, 1422, 2284, 320, 322, 264, 5775, 591, 10298, 295, 364, 10225, 13], "temperature": 0.0, "avg_logprob": -0.15870808446130089, "compression_ratio": 1.2095238095238094, "no_speech_prob": 7.411224487441359e-06}, {"id": 118, "seek": 76400, "start": 772.0, "end": 777.0, "text": " R plus K.", "tokens": [497, 1804, 591, 13], "temperature": 0.0, "avg_logprob": -0.15870808446130089, "compression_ratio": 1.2095238095238094, "no_speech_prob": 7.411224487441359e-06}, {"id": 119, "seek": 76400, "start": 777.0, "end": 785.0, "text": " What does that mean?", "tokens": [708, 775, 300, 914, 30], "temperature": 0.0, "avg_logprob": -0.15870808446130089, "compression_ratio": 1.2095238095238094, "no_speech_prob": 7.411224487441359e-06}, {"id": 120, "seek": 76400, "start": 785.0, "end": 789.0, "text": " Because like R is the rank of the array.", "tokens": [1436, 411, 497, 307, 264, 6181, 295, 264, 10225, 13], "temperature": 0.0, "avg_logprob": -0.15870808446130089, "compression_ratio": 1.2095238095238094, "no_speech_prob": 7.411224487441359e-06}, {"id": 121, "seek": 78900, "start": 789.0, "end": 798.0, "text": " Okay, so now that's two. So a negative K would be, oh, R plus minus one. I see. That's why.", "tokens": [1033, 11, 370, 586, 300, 311, 732, 13, 407, 257, 3671, 591, 576, 312, 11, 1954, 11, 497, 1804, 3175, 472, 13, 286, 536, 13, 663, 311, 983, 13], "temperature": 0.0, "avg_logprob": -0.22000033168469446, "compression_ratio": 1.4122137404580153, "no_speech_prob": 4.860419267060934e-06}, {"id": 122, "seek": 78900, "start": 798.0, "end": 810.0, "text": " So, got it. R plus minus one would be would be the last axis. Okay, that makes perfect sense.", "tokens": [407, 11, 658, 309, 13, 497, 1804, 3175, 472, 576, 312, 576, 312, 264, 1036, 10298, 13, 1033, 11, 300, 1669, 2176, 2020, 13], "temperature": 0.0, "avg_logprob": -0.22000033168469446, "compression_ratio": 1.4122137404580153, "no_speech_prob": 4.860419267060934e-06}, {"id": 123, "seek": 81000, "start": 810.0, "end": 839.0, "text": " Yeah, so this is different to the axis operator you can't change the axis you can just say what cells to do this over. So, I like this idea of using a cube.", "tokens": [865, 11, 370, 341, 307, 819, 281, 264, 10298, 12973, 291, 393, 380, 1319, 264, 10298, 291, 393, 445, 584, 437, 5438, 281, 360, 341, 670, 13, 407, 11, 286, 411, 341, 1558, 295, 1228, 257, 13728, 13], "temperature": 0.0, "avg_logprob": -0.16431499662853422, "compression_ratio": 1.3333333333333333, "no_speech_prob": 5.422100912255701e-06}, {"id": 124, "seek": 83900, "start": 839.0, "end": 844.0, "text": " And that would be cube.", "tokens": [400, 300, 576, 312, 13728, 13], "temperature": 0.0, "avg_logprob": -0.1269071318886497, "compression_ratio": 1.5092592592592593, "no_speech_prob": 1.7502470655017532e-05}, {"id": 125, "seek": 83900, "start": 844.0, "end": 850.0, "text": " Okay, so that's doing it over", "tokens": [1033, 11, 370, 300, 311, 884, 309, 670], "temperature": 0.0, "avg_logprob": -0.1269071318886497, "compression_ratio": 1.5092592592592593, "no_speech_prob": 1.7502470655017532e-05}, {"id": 126, "seek": 83900, "start": 850.0, "end": 856.0, "text": " the one cells. So these are the one cells.", "tokens": [264, 472, 5438, 13, 407, 613, 366, 264, 472, 5438, 13], "temperature": 0.0, "avg_logprob": -0.1269071318886497, "compression_ratio": 1.5092592592592593, "no_speech_prob": 1.7502470655017532e-05}, {"id": 127, "seek": 83900, "start": 856.0, "end": 859.0, "text": " And here are the sums of the one cells.", "tokens": [400, 510, 366, 264, 34499, 295, 264, 472, 5438, 13], "temperature": 0.0, "avg_logprob": -0.1269071318886497, "compression_ratio": 1.5092592592592593, "no_speech_prob": 1.7502470655017532e-05}, {"id": 128, "seek": 83900, "start": 859.0, "end": 865.0, "text": " Okay, so then if we do two", "tokens": [1033, 11, 370, 550, 498, 321, 360, 732], "temperature": 0.0, "avg_logprob": -0.1269071318886497, "compression_ratio": 1.5092592592592593, "no_speech_prob": 1.7502470655017532e-05}, {"id": 129, "seek": 86500, "start": 865.0, "end": 875.0, "text": " should be over the two cells, which are", "tokens": [820, 312, 670, 264, 732, 5438, 11, 597, 366], "temperature": 0.0, "avg_logprob": -0.17129101472742417, "compression_ratio": 1.456896551724138, "no_speech_prob": 3.591250424506143e-05}, {"id": 130, "seek": 86500, "start": 875.0, "end": 878.0, "text": " interesting.", "tokens": [1880, 13], "temperature": 0.0, "avg_logprob": -0.17129101472742417, "compression_ratio": 1.456896551724138, "no_speech_prob": 3.591250424506143e-05}, {"id": 131, "seek": 86500, "start": 878.0, "end": 883.0, "text": " Two cells would be, I see, I thought a two cell would be this whole thing.", "tokens": [4453, 5438, 576, 312, 11, 286, 536, 11, 286, 1194, 257, 732, 2815, 576, 312, 341, 1379, 551, 13], "temperature": 0.0, "avg_logprob": -0.17129101472742417, "compression_ratio": 1.456896551724138, "no_speech_prob": 3.591250424506143e-05}, {"id": 132, "seek": 86500, "start": 883.0, "end": 888.0, "text": " So I was expecting it to add that all up.", "tokens": [407, 286, 390, 9650, 309, 281, 909, 300, 439, 493, 13], "temperature": 0.0, "avg_logprob": -0.17129101472742417, "compression_ratio": 1.456896551724138, "no_speech_prob": 3.591250424506143e-05}, {"id": 133, "seek": 88800, "start": 888.0, "end": 902.0, "text": " Okay, so they have some examples.", "tokens": [1033, 11, 370, 436, 362, 512, 5110, 13], "temperature": 0.0, "avg_logprob": -0.25063841683523996, "compression_ratio": 1.0898876404494382, "no_speech_prob": 2.5863917471724562e-05}, {"id": 134, "seek": 88800, "start": 902.0, "end": 904.0, "text": " Gosh, this is confusing.", "tokens": [19185, 11, 341, 307, 13181, 13], "temperature": 0.0, "avg_logprob": -0.25063841683523996, "compression_ratio": 1.0898876404494382, "no_speech_prob": 2.5863917471724562e-05}, {"id": 135, "seek": 88800, "start": 904.0, "end": 908.0, "text": " I posted a link in the chat.", "tokens": [286, 9437, 257, 2113, 294, 264, 5081, 13], "temperature": 0.0, "avg_logprob": -0.25063841683523996, "compression_ratio": 1.0898876404494382, "no_speech_prob": 2.5863917471724562e-05}, {"id": 136, "seek": 88800, "start": 908.0, "end": 911.0, "text": " Go ahead.", "tokens": [1037, 2286, 13], "temperature": 0.0, "avg_logprob": -0.25063841683523996, "compression_ratio": 1.0898876404494382, "no_speech_prob": 2.5863917471724562e-05}, {"id": 137, "seek": 91100, "start": 911.0, "end": 921.0, "text": " I posted a link in the chat to the wiki which shows strength versus access like some examples, how to get the same.", "tokens": [286, 9437, 257, 2113, 294, 264, 5081, 281, 264, 261, 9850, 597, 3110, 3800, 5717, 2105, 411, 512, 5110, 11, 577, 281, 483, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.23625013102655826, "compression_ratio": 1.248, "no_speech_prob": 1.2605002666532528e-05}, {"id": 138, "seek": 91100, "start": 921.0, "end": 926.0, "text": " Okay, forgetting to use APL wiki.", "tokens": [1033, 11, 25428, 281, 764, 5372, 43, 261, 9850, 13], "temperature": 0.0, "avg_logprob": -0.23625013102655826, "compression_ratio": 1.248, "no_speech_prob": 1.2605002666532528e-05}, {"id": 139, "seek": 91100, "start": 926.0, "end": 933.0, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.23625013102655826, "compression_ratio": 1.248, "no_speech_prob": 1.2605002666532528e-05}, {"id": 140, "seek": 93300, "start": 933.0, "end": 948.0, "text": " And what's an anomalous axis operator.", "tokens": [400, 437, 311, 364, 24769, 11553, 10298, 12973, 13], "temperature": 0.0, "avg_logprob": -0.2433467094714825, "compression_ratio": 0.8837209302325582, "no_speech_prob": 1.59350638568867e-05}, {"id": 141, "seek": 94800, "start": 948.0, "end": 967.0, "text": " One negative right operand that's what we have specifies the number of final axes to which the function applies.", "tokens": [1485, 3671, 558, 2208, 474, 300, 311, 437, 321, 362, 1608, 11221, 264, 1230, 295, 2572, 35387, 281, 597, 264, 2445, 13165, 13], "temperature": 0.0, "avg_logprob": -0.26650483519942675, "compression_ratio": 1.2043010752688172, "no_speech_prob": 4.222638835926773e-06}, {"id": 142, "seek": 96700, "start": 967.0, "end": 991.0, "text": " Oh, that shouldn't make any difference, should it, when you've got a rank with it.", "tokens": [876, 11, 300, 4659, 380, 652, 604, 2649, 11, 820, 309, 11, 562, 291, 600, 658, 257, 6181, 365, 309, 13], "temperature": 0.0, "avg_logprob": -0.29377639770507813, "compression_ratio": 1.0512820512820513, "no_speech_prob": 5.506653451448074e-06}, {"id": 143, "seek": 99100, "start": 991.0, "end": 1009.0, "text": " Try it.", "tokens": [6526, 309, 13], "temperature": 0.0, "avg_logprob": -0.20032129568212173, "compression_ratio": 0.9090909090909091, "no_speech_prob": 3.070970342378132e-05}, {"id": 144, "seek": 99100, "start": 1009.0, "end": 1015.0, "text": " I think this should be the same.", "tokens": [286, 519, 341, 820, 312, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.20032129568212173, "compression_ratio": 0.9090909090909091, "no_speech_prob": 3.070970342378132e-05}, {"id": 145, "seek": 101500, "start": 1015.0, "end": 1023.0, "text": " Is the round brackets causing something to change how it's applied.", "tokens": [1119, 264, 3098, 26179, 9853, 746, 281, 1319, 577, 309, 311, 6456, 13], "temperature": 0.0, "avg_logprob": -0.2364934150208818, "compression_ratio": 1.4609375, "no_speech_prob": 2.4678382033016533e-05}, {"id": 146, "seek": 101500, "start": 1023.0, "end": 1027.0, "text": " The round brackets.", "tokens": [440, 3098, 26179, 13], "temperature": 0.0, "avg_logprob": -0.2364934150208818, "compression_ratio": 1.4609375, "no_speech_prob": 2.4678382033016533e-05}, {"id": 147, "seek": 101500, "start": 1027.0, "end": 1033.0, "text": " I think would be necessary, because otherwise because of precedence without it.", "tokens": [286, 519, 576, 312, 4818, 11, 570, 5911, 570, 295, 16969, 655, 1553, 309, 13], "temperature": 0.0, "avg_logprob": -0.2364934150208818, "compression_ratio": 1.4609375, "no_speech_prob": 2.4678382033016533e-05}, {"id": 148, "seek": 101500, "start": 1033.0, "end": 1036.0, "text": " It would be paused.", "tokens": [467, 576, 312, 46860, 13], "temperature": 0.0, "avg_logprob": -0.2364934150208818, "compression_ratio": 1.4609375, "no_speech_prob": 2.4678382033016533e-05}, {"id": 149, "seek": 103600, "start": 1036.0, "end": 1048.0, "text": " Like that, I believe.", "tokens": [1743, 300, 11, 286, 1697, 13], "temperature": 0.0, "avg_logprob": -0.0759708046913147, "compression_ratio": 0.7241379310344828, "no_speech_prob": 1.0950634532491677e-05}, {"id": 150, "seek": 104800, "start": 1048.0, "end": 1077.0, "text": " Okay, so this is different, somehow.", "tokens": [1033, 11, 370, 341, 307, 819, 11, 6063, 13], "temperature": 0.0, "avg_logprob": -0.10267931681412917, "compression_ratio": 0.9, "no_speech_prob": 3.590463165892288e-05}, {"id": 151, "seek": 107700, "start": 1077.0, "end": 1085.0, "text": " Monadic, okay, dietic slash bar as an operator.", "tokens": [4713, 43341, 11, 1392, 11, 6339, 299, 17330, 2159, 382, 364, 12973, 13], "temperature": 0.0, "avg_logprob": -0.33897801240285236, "compression_ratio": 1.328125, "no_speech_prob": 1.0782743629533798e-05}, {"id": 152, "seek": 107700, "start": 1085.0, "end": 1096.0, "text": " So the sense of arrays documentation says that two cells are like two matrices of 2d shape.", "tokens": [407, 264, 2020, 295, 41011, 14333, 1619, 300, 732, 5438, 366, 411, 732, 32284, 295, 568, 67, 3909, 13], "temperature": 0.0, "avg_logprob": -0.33897801240285236, "compression_ratio": 1.328125, "no_speech_prob": 1.0782743629533798e-05}, {"id": 153, "seek": 107700, "start": 1096.0, "end": 1099.0, "text": " So if we look at the notebook.", "tokens": [407, 498, 321, 574, 412, 264, 21060, 13], "temperature": 0.0, "avg_logprob": -0.33897801240285236, "compression_ratio": 1.328125, "no_speech_prob": 1.0782743629533798e-05}, {"id": 154, "seek": 109900, "start": 1099.0, "end": 1108.0, "text": " Just before we do, I just want to mention this, this is what I thought it says it just implies reduction among a particular axis.", "tokens": [1449, 949, 321, 360, 11, 286, 445, 528, 281, 2152, 341, 11, 341, 307, 437, 286, 1194, 309, 1619, 309, 445, 18779, 11004, 3654, 257, 1729, 10298, 13], "temperature": 0.0, "avg_logprob": -0.14337486174048447, "compression_ratio": 1.271186440677966, "no_speech_prob": 1.5688128769397736e-05}, {"id": 155, "seek": 109900, "start": 1108.0, "end": 1113.0, "text": " So I'm not sure why.", "tokens": [407, 286, 478, 406, 988, 983, 13], "temperature": 0.0, "avg_logprob": -0.14337486174048447, "compression_ratio": 1.271186440677966, "no_speech_prob": 1.5688128769397736e-05}, {"id": 156, "seek": 111300, "start": 1113.0, "end": 1129.0, "text": " These two are giving slightly different answers.", "tokens": [1981, 732, 366, 2902, 4748, 819, 6338, 13], "temperature": 0.0, "avg_logprob": -0.118693341811498, "compression_ratio": 0.8727272727272727, "no_speech_prob": 1.0451165508129634e-05}, {"id": 157, "seek": 112900, "start": 1129.0, "end": 1147.0, "text": " Oh, I see why. So, cube is reducing down.", "tokens": [876, 11, 286, 536, 983, 13, 407, 11, 13728, 307, 12245, 760, 13], "temperature": 0.0, "avg_logprob": -0.24297293494729436, "compression_ratio": 0.8367346938775511, "no_speech_prob": 1.260649696632754e-05}, {"id": 158, "seek": 114700, "start": 1147.0, "end": 1164.0, "text": " So it's doing matrices, and it's summing up each lot of thing in each of those matrices. Okay, yeah, sorry, go ahead. So what were you saying about notebook.", "tokens": [407, 309, 311, 884, 32284, 11, 293, 309, 311, 2408, 2810, 493, 1184, 688, 295, 551, 294, 1184, 295, 729, 32284, 13, 1033, 11, 1338, 11, 2597, 11, 352, 2286, 13, 407, 437, 645, 291, 1566, 466, 21060, 13], "temperature": 0.0, "avg_logprob": -0.1878464277400527, "compression_ratio": 1.353448275862069, "no_speech_prob": 6.1433634073182475e-06}, {"id": 159, "seek": 116400, "start": 1164.0, "end": 1180.0, "text": " I think you, you're on the right track. So the documentation says if x is the three dimensional matrix of shape 234 the two cells are two matrices of shape 34. So in our case it is two matrices of shape two by two.", "tokens": [286, 519, 291, 11, 291, 434, 322, 264, 558, 2837, 13, 407, 264, 14333, 1619, 498, 2031, 307, 264, 1045, 18795, 8141, 295, 3909, 6673, 19, 264, 732, 5438, 366, 732, 32284, 295, 3909, 12790, 13, 407, 294, 527, 1389, 309, 307, 732, 32284, 295, 3909, 732, 538, 732, 13], "temperature": 0.0, "avg_logprob": -0.29967517852783204, "compression_ratio": 1.55625, "no_speech_prob": 3.590976484701969e-05}, {"id": 160, "seek": 116400, "start": 1180.0, "end": 1186.0, "text": " One, two, three, four, okay.", "tokens": [1485, 11, 732, 11, 1045, 11, 1451, 11, 1392, 13], "temperature": 0.0, "avg_logprob": -0.29967517852783204, "compression_ratio": 1.55625, "no_speech_prob": 3.590976484701969e-05}, {"id": 161, "seek": 116400, "start": 1186.0, "end": 1188.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.29967517852783204, "compression_ratio": 1.55625, "no_speech_prob": 3.590976484701969e-05}, {"id": 162, "seek": 118800, "start": 1188.0, "end": 1197.0, "text": " And so, two cells rank two cells are the matrices of shapes three by four.", "tokens": [400, 370, 11, 732, 5438, 6181, 732, 5438, 366, 264, 32284, 295, 10854, 1045, 538, 1451, 13], "temperature": 0.0, "avg_logprob": -0.16610588346208846, "compression_ratio": 1.4814814814814814, "no_speech_prob": 9.514465091342572e-06}, {"id": 163, "seek": 118800, "start": 1197.0, "end": 1204.0, "text": " And we are applying the slash to that whole matrix, the each matrix.", "tokens": [400, 321, 366, 9275, 264, 17330, 281, 300, 1379, 8141, 11, 264, 1184, 8141, 13], "temperature": 0.0, "avg_logprob": -0.16610588346208846, "compression_ratio": 1.4814814814814814, "no_speech_prob": 9.514465091342572e-06}, {"id": 164, "seek": 118800, "start": 1204.0, "end": 1216.0, "text": " So, slash bar, I guess, is applying it to the last axis.", "tokens": [407, 11, 17330, 2159, 11, 286, 2041, 11, 307, 9275, 309, 281, 264, 1036, 10298, 13], "temperature": 0.0, "avg_logprob": -0.16610588346208846, "compression_ratio": 1.4814814814814814, "no_speech_prob": 9.514465091342572e-06}, {"id": 165, "seek": 121600, "start": 1216.0, "end": 1223.0, "text": " So one plus five plus nine is 15 to six stand is 18.", "tokens": [407, 472, 1804, 1732, 1804, 4949, 307, 2119, 281, 2309, 1463, 307, 2443, 13], "temperature": 0.0, "avg_logprob": -0.23134274709792363, "compression_ratio": 1.201834862385321, "no_speech_prob": 1.4735929653397761e-05}, {"id": 166, "seek": 121600, "start": 1223.0, "end": 1229.0, "text": " And 131721 is 15.", "tokens": [400, 3705, 7773, 4436, 307, 2119, 13], "temperature": 0.0, "avg_logprob": -0.23134274709792363, "compression_ratio": 1.201834862385321, "no_speech_prob": 1.4735929653397761e-05}, {"id": 167, "seek": 121600, "start": 1229.0, "end": 1238.0, "text": " So the operator is applied for each matrix of three by four.", "tokens": [407, 264, 12973, 307, 6456, 337, 1184, 8141, 295, 1045, 538, 1451, 13], "temperature": 0.0, "avg_logprob": -0.23134274709792363, "compression_ratio": 1.201834862385321, "no_speech_prob": 1.4735929653397761e-05}, {"id": 168, "seek": 123800, "start": 1238.0, "end": 1246.0, "text": " So,", "tokens": [407, 11], "temperature": 0.0, "avg_logprob": -0.1337309413486057, "compression_ratio": 0.8723404255319149, "no_speech_prob": 6.539556125062518e-06}, {"id": 169, "seek": 123800, "start": 1246.0, "end": 1266.0, "text": " if we went matrix is a three by four.", "tokens": [498, 321, 1437, 8141, 307, 257, 1045, 538, 1451, 13], "temperature": 0.0, "avg_logprob": -0.1337309413486057, "compression_ratio": 0.8723404255319149, "no_speech_prob": 6.539556125062518e-06}, {"id": 170, "seek": 126600, "start": 1266.0, "end": 1278.0, "text": " Yeah, so that's that is the first row of that.", "tokens": [865, 11, 370, 300, 311, 300, 307, 264, 700, 5386, 295, 300, 13], "temperature": 0.0, "avg_logprob": -0.13084888458251953, "compression_ratio": 1.0886075949367089, "no_speech_prob": 3.500661023281282e-06}, {"id": 171, "seek": 126600, "start": 1278.0, "end": 1285.0, "text": " Because it's being applied to matrices.", "tokens": [1436, 309, 311, 885, 6456, 281, 32284, 13], "temperature": 0.0, "avg_logprob": -0.13084888458251953, "compression_ratio": 1.0886075949367089, "no_speech_prob": 3.500661023281282e-06}, {"id": 172, "seek": 128500, "start": 1285.0, "end": 1296.0, "text": " Is that the idea. And then this one is being applied to vectors.", "tokens": [1119, 300, 264, 1558, 13, 400, 550, 341, 472, 307, 885, 6456, 281, 18875, 13], "temperature": 0.0, "avg_logprob": -0.20555498600006103, "compression_ratio": 1.3035714285714286, "no_speech_prob": 3.7265110677253688e-06}, {"id": 173, "seek": 128500, "start": 1296.0, "end": 1303.0, "text": " One is the rank of the sub matrix.", "tokens": [1485, 307, 264, 6181, 295, 264, 1422, 8141, 13], "temperature": 0.0, "avg_logprob": -0.20555498600006103, "compression_ratio": 1.3035714285714286, "no_speech_prob": 3.7265110677253688e-06}, {"id": 174, "seek": 128500, "start": 1303.0, "end": 1306.0, "text": " documentation you showed you before case else.", "tokens": [14333, 291, 4712, 291, 949, 1389, 1646, 13], "temperature": 0.0, "avg_logprob": -0.20555498600006103, "compression_ratio": 1.3035714285714286, "no_speech_prob": 3.7265110677253688e-06}, {"id": 175, "seek": 130600, "start": 1306.0, "end": 1315.0, "text": " So that's, I believe, is a case sells so I'd expect to get 710. Yes, which you do.", "tokens": [407, 300, 311, 11, 286, 1697, 11, 307, 257, 1389, 20897, 370, 286, 1116, 2066, 281, 483, 1614, 3279, 13, 1079, 11, 597, 291, 360, 13], "temperature": 0.0, "avg_logprob": -0.2284965293351994, "compression_ratio": 1.0849056603773586, "no_speech_prob": 5.3379098972072825e-06}, {"id": 176, "seek": 130600, "start": 1315.0, "end": 1318.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.2284965293351994, "compression_ratio": 1.0849056603773586, "no_speech_prob": 5.3379098972072825e-06}, {"id": 177, "seek": 130600, "start": 1318.0, "end": 1324.0, "text": " That makes sense, kind of.", "tokens": [663, 1669, 2020, 11, 733, 295, 13], "temperature": 0.0, "avg_logprob": -0.2284965293351994, "compression_ratio": 1.0849056603773586, "no_speech_prob": 5.3379098972072825e-06}, {"id": 178, "seek": 132400, "start": 1324.0, "end": 1338.0, "text": " The one I think is particularly helpful is the version where you pass a two element array on the right hand side.", "tokens": [440, 472, 286, 519, 307, 4098, 4961, 307, 264, 3037, 689, 291, 1320, 257, 732, 4478, 10225, 322, 264, 558, 1011, 1252, 13], "temperature": 0.0, "avg_logprob": -0.1341573807501024, "compression_ratio": 1.2115384615384615, "no_speech_prob": 8.397914825764019e-06}, {"id": 179, "seek": 132400, "start": 1338.0, "end": 1351.0, "text": " Because then", "tokens": [1436, 550], "temperature": 0.0, "avg_logprob": -0.1341573807501024, "compression_ratio": 1.2115384615384615, "no_speech_prob": 8.397914825764019e-06}, {"id": 180, "seek": 135100, "start": 1351.0, "end": 1354.0, "text": " we should be able to add.", "tokens": [321, 820, 312, 1075, 281, 909, 13], "temperature": 0.0, "avg_logprob": -0.13013174594976964, "compression_ratio": 1.6149068322981366, "no_speech_prob": 8.530211744073313e-06}, {"id": 181, "seek": 135100, "start": 1354.0, "end": 1363.0, "text": " Let's say we wanted to add one to each row or add one, two, three to the first, second and third rows. We'd go one, two, three.", "tokens": [961, 311, 584, 321, 1415, 281, 909, 472, 281, 1184, 5386, 420, 909, 472, 11, 732, 11, 1045, 281, 264, 700, 11, 1150, 293, 2636, 13241, 13, 492, 1116, 352, 472, 11, 732, 11, 1045, 13], "temperature": 0.0, "avg_logprob": -0.13013174594976964, "compression_ratio": 1.6149068322981366, "no_speech_prob": 8.530211744073313e-06}, {"id": 182, "seek": 135100, "start": 1363.0, "end": 1369.0, "text": " Now you can't just add that to the matrix because they don't match.", "tokens": [823, 291, 393, 380, 445, 909, 300, 281, 264, 8141, 570, 436, 500, 380, 2995, 13], "temperature": 0.0, "avg_logprob": -0.13013174594976964, "compression_ratio": 1.6149068322981366, "no_speech_prob": 8.530211744073313e-06}, {"id": 183, "seek": 135100, "start": 1369.0, "end": 1374.0, "text": " But what you could do is you could say", "tokens": [583, 437, 291, 727, 360, 307, 291, 727, 584], "temperature": 0.0, "avg_logprob": -0.13013174594976964, "compression_ratio": 1.6149068322981366, "no_speech_prob": 8.530211744073313e-06}, {"id": 184, "seek": 137400, "start": 1374.0, "end": 1387.0, "text": " so the keyboard shortcut for this is shift J.", "tokens": [370, 264, 10186, 24822, 337, 341, 307, 5513, 508, 13], "temperature": 0.0, "avg_logprob": -0.20115788777669272, "compression_ratio": 1.4339622641509433, "no_speech_prob": 2.840856359398458e-05}, {"id": 185, "seek": 137400, "start": 1387.0, "end": 1392.0, "text": " So we're going to go through each cell on the left.", "tokens": [407, 321, 434, 516, 281, 352, 807, 1184, 2815, 322, 264, 1411, 13], "temperature": 0.0, "avg_logprob": -0.20115788777669272, "compression_ratio": 1.4339622641509433, "no_speech_prob": 2.840856359398458e-05}, {"id": 186, "seek": 137400, "start": 1392.0, "end": 1401.0, "text": " And then on the right, we're going to go through each.", "tokens": [400, 550, 322, 264, 558, 11, 321, 434, 516, 281, 352, 807, 1184, 13], "temperature": 0.0, "avg_logprob": -0.20115788777669272, "compression_ratio": 1.4339622641509433, "no_speech_prob": 2.840856359398458e-05}, {"id": 187, "seek": 140100, "start": 1401.0, "end": 1416.0, "text": " Each vector on the right.", "tokens": [6947, 8062, 322, 264, 558, 13], "temperature": 0.0, "avg_logprob": -0.18633740598505194, "compression_ratio": 1.4791666666666667, "no_speech_prob": 2.2826863641967066e-05}, {"id": 188, "seek": 140100, "start": 1416.0, "end": 1423.0, "text": " Yes, okay. Scalar on the left. So this is going to go through each scalar on the left.", "tokens": [1079, 11, 1392, 13, 2747, 12031, 322, 264, 1411, 13, 407, 341, 307, 516, 281, 352, 807, 1184, 39684, 322, 264, 1411, 13], "temperature": 0.0, "avg_logprob": -0.18633740598505194, "compression_ratio": 1.4791666666666667, "no_speech_prob": 2.2826863641967066e-05}, {"id": 189, "seek": 140100, "start": 1423.0, "end": 1426.0, "text": " And each vector on the right.", "tokens": [400, 1184, 8062, 322, 264, 558, 13], "temperature": 0.0, "avg_logprob": -0.18633740598505194, "compression_ratio": 1.4791666666666667, "no_speech_prob": 2.2826863641967066e-05}, {"id": 190, "seek": 142600, "start": 1426.0, "end": 1433.0, "text": " And so the vectors on the right are the first one, one, two, three, four.", "tokens": [400, 370, 264, 18875, 322, 264, 558, 366, 264, 700, 472, 11, 472, 11, 732, 11, 1045, 11, 1451, 13], "temperature": 0.0, "avg_logprob": -0.11109327547477954, "compression_ratio": 1.6692307692307693, "no_speech_prob": 5.771822998212883e-06}, {"id": 191, "seek": 142600, "start": 1433.0, "end": 1439.0, "text": " And the first scalar on the left is one. So the first result is one plus one, two, three, four.", "tokens": [400, 264, 700, 39684, 322, 264, 1411, 307, 472, 13, 407, 264, 700, 1874, 307, 472, 1804, 472, 11, 732, 11, 1045, 11, 1451, 13], "temperature": 0.0, "avg_logprob": -0.11109327547477954, "compression_ratio": 1.6692307692307693, "no_speech_prob": 5.771822998212883e-06}, {"id": 192, "seek": 142600, "start": 1439.0, "end": 1447.0, "text": " The second is two plus five, six, seven, eight.", "tokens": [440, 1150, 307, 732, 1804, 1732, 11, 2309, 11, 3407, 11, 3180, 13], "temperature": 0.0, "avg_logprob": -0.11109327547477954, "compression_ratio": 1.6692307692307693, "no_speech_prob": 5.771822998212883e-06}, {"id": 193, "seek": 144700, "start": 1447.0, "end": 1461.0, "text": " So that's how we can do quick loops between two different things.", "tokens": [407, 300, 311, 577, 321, 393, 360, 1702, 16121, 1296, 732, 819, 721, 13], "temperature": 0.0, "avg_logprob": -0.10711595841816493, "compression_ratio": 1.1818181818181819, "no_speech_prob": 1.0615946848702151e-05}, {"id": 194, "seek": 144700, "start": 1461.0, "end": 1466.0, "text": " So that's a pretty important operator.", "tokens": [407, 300, 311, 257, 1238, 1021, 12973, 13], "temperature": 0.0, "avg_logprob": -0.10711595841816493, "compression_ratio": 1.1818181818181819, "no_speech_prob": 1.0615946848702151e-05}, {"id": 195, "seek": 146600, "start": 1466.0, "end": 1477.0, "text": " And Adam mentioned that as well on the forums.", "tokens": [400, 7938, 2835, 300, 382, 731, 322, 264, 26998, 13], "temperature": 0.0, "avg_logprob": -0.0683300256729126, "compression_ratio": 1.1397849462365592, "no_speech_prob": 3.2694977562641725e-05}, {"id": 196, "seek": 146600, "start": 1477.0, "end": 1483.0, "text": " Does anybody have any questions about that? It's a bit odd.", "tokens": [4402, 4472, 362, 604, 1651, 466, 300, 30, 467, 311, 257, 857, 7401, 13], "temperature": 0.0, "avg_logprob": -0.0683300256729126, "compression_ratio": 1.1397849462365592, "no_speech_prob": 3.2694977562641725e-05}, {"id": 197, "seek": 148300, "start": 1483.0, "end": 1498.0, "text": " I think a key thing is to look at this", "tokens": [286, 519, 257, 2141, 551, 307, 281, 574, 412, 341], "temperature": 0.0, "avg_logprob": -0.1089353084564209, "compression_ratio": 1.2924528301886793, "no_speech_prob": 6.4388918872282375e-06}, {"id": 198, "seek": 148300, "start": 1498.0, "end": 1502.0, "text": " idea about cells and salaries.", "tokens": [1558, 466, 5438, 293, 35057, 13], "temperature": 0.0, "avg_logprob": -0.1089353084564209, "compression_ratio": 1.2924528301886793, "no_speech_prob": 6.4388918872282375e-06}, {"id": 199, "seek": 148300, "start": 1502.0, "end": 1508.0, "text": " I've come across this before because they talk about it in J a lot.", "tokens": [286, 600, 808, 2108, 341, 949, 570, 436, 751, 466, 309, 294, 508, 257, 688, 13], "temperature": 0.0, "avg_logprob": -0.1089353084564209, "compression_ratio": 1.2924528301886793, "no_speech_prob": 6.4388918872282375e-06}, {"id": 200, "seek": 150800, "start": 1508.0, "end": 1522.0, "text": " J being the language that I have built after he built APL.", "tokens": [508, 885, 264, 2856, 300, 286, 362, 3094, 934, 415, 3094, 5372, 43, 13], "temperature": 0.0, "avg_logprob": -0.24688193377326517, "compression_ratio": 1.0957446808510638, "no_speech_prob": 3.5008133636438288e-06}, {"id": 201, "seek": 150800, "start": 1522.0, "end": 1525.0, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.24688193377326517, "compression_ratio": 1.0957446808510638, "no_speech_prob": 3.5008133636438288e-06}, {"id": 202, "seek": 150800, "start": 1525.0, "end": 1529.0, "text": " So maybe we should move to a top,", "tokens": [407, 1310, 321, 820, 1286, 281, 257, 1192, 11], "temperature": 0.0, "avg_logprob": -0.24688193377326517, "compression_ratio": 1.0957446808510638, "no_speech_prob": 3.5008133636438288e-06}, {"id": 203, "seek": 152900, "start": 1529.0, "end": 1539.0, "text": " which I think is going to be easy because I think it's largely the same as", "tokens": [597, 286, 519, 307, 516, 281, 312, 1858, 570, 286, 519, 309, 311, 11611, 264, 912, 382], "temperature": 0.0, "avg_logprob": -0.18442093453756192, "compression_ratio": 1.205607476635514, "no_speech_prob": 2.60159868048504e-06}, {"id": 204, "seek": 152900, "start": 1539.0, "end": 1545.0, "text": " Jot, bind,", "tokens": [508, 310, 11, 14786, 11], "temperature": 0.0, "avg_logprob": -0.18442093453756192, "compression_ratio": 1.205607476635514, "no_speech_prob": 2.60159868048504e-06}, {"id": 205, "seek": 152900, "start": 1545.0, "end": 1552.0, "text": " like so. So we can just borrow the use from", "tokens": [411, 370, 13, 407, 321, 393, 445, 11172, 264, 764, 490], "temperature": 0.0, "avg_logprob": -0.18442093453756192, "compression_ratio": 1.205607476635514, "no_speech_prob": 2.60159868048504e-06}, {"id": 206, "seek": 155200, "start": 1552.0, "end": 1560.0, "text": " Jot.", "tokens": [508, 310, 13], "temperature": 0.0, "avg_logprob": -0.16822438973646897, "compression_ratio": 1.1777777777777778, "no_speech_prob": 3.0239087209338322e-05}, {"id": 207, "seek": 155200, "start": 1560.0, "end": 1568.0, "text": " And this is not monadic. This is dyadic.", "tokens": [400, 341, 307, 406, 1108, 43341, 13, 639, 307, 14584, 43341, 13], "temperature": 0.0, "avg_logprob": -0.16822438973646897, "compression_ratio": 1.1777777777777778, "no_speech_prob": 3.0239087209338322e-05}, {"id": 208, "seek": 155200, "start": 1568.0, "end": 1576.0, "text": " Dyadic.", "tokens": [31193, 43341, 13], "temperature": 0.0, "avg_logprob": -0.16822438973646897, "compression_ratio": 1.1777777777777778, "no_speech_prob": 3.0239087209338322e-05}, {"id": 209, "seek": 157600, "start": 1576.0, "end": 1584.0, "text": " So that should all be the same as far as I know.", "tokens": [407, 300, 820, 439, 312, 264, 912, 382, 1400, 382, 286, 458, 13], "temperature": 0.0, "avg_logprob": -0.29651025363377165, "compression_ratio": 0.9743589743589743, "no_speech_prob": 1.1124954653496388e-05}, {"id": 210, "seek": 157600, "start": 1584.0, "end": 1590.0, "text": " Okay. I think it's Shift J.", "tokens": [1033, 13, 286, 519, 309, 311, 28304, 508, 13], "temperature": 0.0, "avg_logprob": -0.29651025363377165, "compression_ratio": 0.9743589743589743, "no_speech_prob": 1.1124954653496388e-05}, {"id": 211, "seek": 159000, "start": 1590.0, "end": 1606.0, "text": " Different. Okay. Let's find out why.", "tokens": [20825, 13, 1033, 13, 961, 311, 915, 484, 983, 13], "temperature": 0.0, "avg_logprob": -0.247757355372111, "compression_ratio": 1.0333333333333334, "no_speech_prob": 6.962050065340009e-06}, {"id": 212, "seek": 159000, "start": 1606.0, "end": 1612.0, "text": " F G Y equals F of G of Y.", "tokens": [479, 460, 398, 6915, 479, 295, 460, 295, 398, 13], "temperature": 0.0, "avg_logprob": -0.247757355372111, "compression_ratio": 1.0333333333333334, "no_speech_prob": 6.962050065340009e-06}, {"id": 213, "seek": 159000, "start": 1612.0, "end": 1615.0, "text": " Oh, this is the wrong version.", "tokens": [876, 11, 341, 307, 264, 2085, 3037, 13], "temperature": 0.0, "avg_logprob": -0.247757355372111, "compression_ratio": 1.0333333333333334, "no_speech_prob": 6.962050065340009e-06}, {"id": 214, "seek": 161500, "start": 1615.0, "end": 1633.0, "text": " I need to find one.", "tokens": [286, 643, 281, 915, 472, 13], "temperature": 0.0, "avg_logprob": -0.25370858844957855, "compression_ratio": 0.8723404255319149, "no_speech_prob": 4.60968331026379e-05}, {"id": 215, "seek": 161500, "start": 1633.0, "end": 1640.0, "text": " Yes, that's the same.", "tokens": [1079, 11, 300, 311, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.25370858844957855, "compression_ratio": 0.8723404255319149, "no_speech_prob": 4.60968331026379e-05}, {"id": 216, "seek": 164000, "start": 1640.0, "end": 1650.0, "text": " And then this one is the same.", "tokens": [400, 550, 341, 472, 307, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.20223902142237102, "compression_ratio": 1.348993288590604, "no_speech_prob": 4.565906237985473e-06}, {"id": 217, "seek": 164000, "start": 1650.0, "end": 1656.0, "text": " It looks like for Jot, we.", "tokens": [467, 1542, 411, 337, 508, 310, 11, 321, 13], "temperature": 0.0, "avg_logprob": -0.20223902142237102, "compression_ratio": 1.348993288590604, "no_speech_prob": 4.565906237985473e-06}, {"id": 218, "seek": 164000, "start": 1656.0, "end": 1663.0, "text": " Now that's interesting. There's some difference between them. I thought in the dyadic. Oh, okay. Only two.", "tokens": [823, 300, 311, 1880, 13, 821, 311, 512, 2649, 1296, 552, 13, 286, 1194, 294, 264, 14584, 43341, 13, 876, 11, 1392, 13, 5686, 732, 13], "temperature": 0.0, "avg_logprob": -0.20223902142237102, "compression_ratio": 1.348993288590604, "no_speech_prob": 4.565906237985473e-06}, {"id": 219, "seek": 164000, "start": 1663.0, "end": 1668.0, "text": " Okay. Whoops. I forgot to change it.", "tokens": [1033, 13, 45263, 13, 286, 5298, 281, 1319, 309, 13], "temperature": 0.0, "avg_logprob": -0.20223902142237102, "compression_ratio": 1.348993288590604, "no_speech_prob": 4.565906237985473e-06}, {"id": 220, "seek": 166800, "start": 1668.0, "end": 1673.0, "text": " Cool. That's the same.", "tokens": [8561, 13, 663, 311, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.09879717928297976, "compression_ratio": 1.3333333333333333, "no_speech_prob": 1.3419446986517869e-05}, {"id": 221, "seek": 166800, "start": 1673.0, "end": 1679.0, "text": " And this one's different.", "tokens": [400, 341, 472, 311, 819, 13], "temperature": 0.0, "avg_logprob": -0.09879717928297976, "compression_ratio": 1.3333333333333333, "no_speech_prob": 1.3419446986517869e-05}, {"id": 222, "seek": 166800, "start": 1679.0, "end": 1687.0, "text": " Okay. So the monadic one's the same. The dyadic one's different.", "tokens": [1033, 13, 407, 264, 1108, 43341, 472, 311, 264, 912, 13, 440, 14584, 43341, 472, 311, 819, 13], "temperature": 0.0, "avg_logprob": -0.09879717928297976, "compression_ratio": 1.3333333333333333, "no_speech_prob": 1.3419446986517869e-05}, {"id": 223, "seek": 166800, "start": 1687.0, "end": 1695.0, "text": " Let's have a look.", "tokens": [961, 311, 362, 257, 574, 13], "temperature": 0.0, "avg_logprob": -0.09879717928297976, "compression_ratio": 1.3333333333333333, "no_speech_prob": 1.3419446986517869e-05}, {"id": 224, "seek": 169500, "start": 1695.0, "end": 1699.0, "text": " I think there's some nice pictures.", "tokens": [286, 519, 456, 311, 512, 1481, 5242, 13], "temperature": 0.0, "avg_logprob": -0.1473690481746898, "compression_ratio": 1.7553191489361701, "no_speech_prob": 1.1842601452372037e-05}, {"id": 225, "seek": 169500, "start": 1699.0, "end": 1708.0, "text": " Okay. Here's the difference. So beside, which is the one we've learned before. First of all, applies the right hand function.", "tokens": [1033, 13, 1692, 311, 264, 2649, 13, 407, 15726, 11, 597, 307, 264, 472, 321, 600, 3264, 949, 13, 2386, 295, 439, 11, 13165, 264, 558, 1011, 2445, 13], "temperature": 0.0, "avg_logprob": -0.1473690481746898, "compression_ratio": 1.7553191489361701, "no_speech_prob": 1.1842601452372037e-05}, {"id": 226, "seek": 169500, "start": 1708.0, "end": 1712.0, "text": " The way Adam describes it is it pre-processes the right hand side.", "tokens": [440, 636, 7938, 15626, 309, 307, 309, 659, 12, 41075, 279, 264, 558, 1011, 1252, 13], "temperature": 0.0, "avg_logprob": -0.1473690481746898, "compression_ratio": 1.7553191489361701, "no_speech_prob": 1.1842601452372037e-05}, {"id": 227, "seek": 169500, "start": 1712.0, "end": 1720.0, "text": " And then the left hand function applies to the left hand side and that pre-processed right hand side.", "tokens": [400, 550, 264, 1411, 1011, 2445, 13165, 281, 264, 1411, 1011, 1252, 293, 300, 659, 12, 41075, 292, 558, 1011, 1252, 13], "temperature": 0.0, "avg_logprob": -0.1473690481746898, "compression_ratio": 1.7553191489361701, "no_speech_prob": 1.1842601452372037e-05}, {"id": 228, "seek": 172000, "start": 1720.0, "end": 1728.0, "text": " Oh, and a top's doing the opposite. Basically, it's applying the right hand side dyadically.", "tokens": [876, 11, 293, 257, 1192, 311, 884, 264, 6182, 13, 8537, 11, 309, 311, 9275, 264, 558, 1011, 1252, 14584, 345, 984, 13], "temperature": 0.0, "avg_logprob": -0.14793333094170752, "compression_ratio": 1.3388429752066116, "no_speech_prob": 3.2377427032770356e-06}, {"id": 229, "seek": 172000, "start": 1728.0, "end": 1733.0, "text": " And then post-processing with the left hand side.", "tokens": [400, 550, 2183, 12, 41075, 278, 365, 264, 1411, 1011, 1252, 13], "temperature": 0.0, "avg_logprob": -0.14793333094170752, "compression_ratio": 1.3388429752066116, "no_speech_prob": 3.2377427032770356e-06}, {"id": 230, "seek": 172000, "start": 1733.0, "end": 1739.0, "text": " See the difference?", "tokens": [3008, 264, 2649, 30], "temperature": 0.0, "avg_logprob": -0.14793333094170752, "compression_ratio": 1.3388429752066116, "no_speech_prob": 3.2377427032770356e-06}, {"id": 231, "seek": 173900, "start": 1739.0, "end": 1755.0, "text": " Okay. So that means that this one here should be 2 divided by 3 first.", "tokens": [1033, 13, 407, 300, 1355, 300, 341, 472, 510, 820, 312, 568, 6666, 538, 805, 700, 13], "temperature": 0.0, "avg_logprob": -0.10492178179183097, "compression_ratio": 1.4130434782608696, "no_speech_prob": 3.90545528716757e-06}, {"id": 232, "seek": 173900, "start": 1755.0, "end": 1764.0, "text": " 2 divided by 3 first. And then it's going to do e to the power of that, which means we basically don't need any parentheses.", "tokens": [568, 6666, 538, 805, 700, 13, 400, 550, 309, 311, 516, 281, 360, 308, 281, 264, 1347, 295, 300, 11, 597, 1355, 321, 1936, 500, 380, 643, 604, 34153, 13], "temperature": 0.0, "avg_logprob": -0.10492178179183097, "compression_ratio": 1.4130434782608696, "no_speech_prob": 3.90545528716757e-06}, {"id": 233, "seek": 176400, "start": 1764.0, "end": 1773.0, "text": " Does that make sense?", "tokens": [4402, 300, 652, 2020, 30], "temperature": 0.0, "avg_logprob": -0.1912051631558326, "compression_ratio": 1.2549019607843137, "no_speech_prob": 1.593490014784038e-05}, {"id": 234, "seek": 176400, "start": 1773.0, "end": 1775.0, "text": " It did for me.", "tokens": [467, 630, 337, 385, 13], "temperature": 0.0, "avg_logprob": -0.1912051631558326, "compression_ratio": 1.2549019607843137, "no_speech_prob": 1.593490014784038e-05}, {"id": 235, "seek": 176400, "start": 1775.0, "end": 1778.0, "text": " All right. Great. Thanks, Molly.", "tokens": [1057, 558, 13, 3769, 13, 2561, 11, 26665, 13], "temperature": 0.0, "avg_logprob": -0.1912051631558326, "compression_ratio": 1.2549019607843137, "no_speech_prob": 1.593490014784038e-05}, {"id": 236, "seek": 176400, "start": 1778.0, "end": 1782.0, "text": " Still getting my eye in with all the symbols.", "tokens": [8291, 1242, 452, 3313, 294, 365, 439, 264, 16944, 13], "temperature": 0.0, "avg_logprob": -0.1912051631558326, "compression_ratio": 1.2549019607843137, "no_speech_prob": 1.593490014784038e-05}, {"id": 237, "seek": 176400, "start": 1782.0, "end": 1785.0, "text": " Yeah, tell me about it.", "tokens": [865, 11, 980, 385, 466, 309, 13], "temperature": 0.0, "avg_logprob": -0.1912051631558326, "compression_ratio": 1.2549019607843137, "no_speech_prob": 1.593490014784038e-05}, {"id": 238, "seek": 176400, "start": 1785.0, "end": 1792.0, "text": " Eddie, in particular, you want to explain or review?", "tokens": [23911, 11, 294, 1729, 11, 291, 528, 281, 2903, 420, 3131, 30], "temperature": 0.0, "avg_logprob": -0.1912051631558326, "compression_ratio": 1.2549019607843137, "no_speech_prob": 1.593490014784038e-05}, {"id": 239, "seek": 179200, "start": 1792.0, "end": 1797.0, "text": " No, it's just having the time to process.", "tokens": [883, 11, 309, 311, 445, 1419, 264, 565, 281, 1399, 13], "temperature": 0.0, "avg_logprob": -0.20668633130131936, "compression_ratio": 1.353448275862069, "no_speech_prob": 3.169167393934913e-05}, {"id": 240, "seek": 179200, "start": 1797.0, "end": 1805.0, "text": " So this is e to the power of 2 to the power of 2 thirds.", "tokens": [407, 341, 307, 308, 281, 264, 1347, 295, 568, 281, 264, 1347, 295, 568, 34552, 13], "temperature": 0.0, "avg_logprob": -0.20668633130131936, "compression_ratio": 1.353448275862069, "no_speech_prob": 3.169167393934913e-05}, {"id": 241, "seek": 179200, "start": 1805.0, "end": 1813.0, "text": " Which makes me think we should do this last one now. Over.", "tokens": [3013, 1669, 385, 519, 321, 820, 360, 341, 1036, 472, 586, 13, 4886, 13], "temperature": 0.0, "avg_logprob": -0.20668633130131936, "compression_ratio": 1.353448275862069, "no_speech_prob": 3.169167393934913e-05}, {"id": 242, "seek": 181300, "start": 1813.0, "end": 1822.0, "text": " Probably makes sense, right? So over is here. Shift O. Over.", "tokens": [9210, 1669, 2020, 11, 558, 30, 407, 670, 307, 510, 13, 28304, 422, 13, 4886, 13], "temperature": 0.0, "avg_logprob": -0.15275150048928182, "compression_ratio": 1.3885350318471337, "no_speech_prob": 1.095286279451102e-05}, {"id": 243, "seek": 181300, "start": 1822.0, "end": 1831.0, "text": " A little bit confusing because it looks a bit the same.", "tokens": [316, 707, 857, 13181, 570, 309, 1542, 257, 857, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.15275150048928182, "compression_ratio": 1.3885350318471337, "no_speech_prob": 1.095286279451102e-05}, {"id": 244, "seek": 181300, "start": 1831.0, "end": 1839.0, "text": " Just in those three diagrams, can you, in the notebook, can you break down which is x and which is y?", "tokens": [1449, 294, 729, 1045, 36709, 11, 393, 291, 11, 294, 264, 21060, 11, 393, 291, 1821, 760, 597, 307, 2031, 293, 597, 307, 288, 30], "temperature": 0.0, "avg_logprob": -0.15275150048928182, "compression_ratio": 1.3885350318471337, "no_speech_prob": 1.095286279451102e-05}, {"id": 245, "seek": 183900, "start": 1839.0, "end": 1844.0, "text": " So y is always the right hand side and x is always the left hand side.", "tokens": [407, 288, 307, 1009, 264, 558, 1011, 1252, 293, 2031, 307, 1009, 264, 1411, 1011, 1252, 13], "temperature": 0.0, "avg_logprob": -0.14612495104471843, "compression_ratio": 1.5177304964539007, "no_speech_prob": 1.2028672244923655e-05}, {"id": 246, "seek": 183900, "start": 1844.0, "end": 1850.0, "text": " And you can tell in the documentation", "tokens": [400, 291, 393, 980, 294, 264, 14333], "temperature": 0.0, "avg_logprob": -0.14612495104471843, "compression_ratio": 1.5177304964539007, "no_speech_prob": 1.2028672244923655e-05}, {"id": 247, "seek": 183900, "start": 1850.0, "end": 1858.0, "text": " because if you look at a particular example, like here,", "tokens": [570, 498, 291, 574, 412, 257, 1729, 1365, 11, 411, 510, 11], "temperature": 0.0, "avg_logprob": -0.14612495104471843, "compression_ratio": 1.5177304964539007, "no_speech_prob": 1.2028672244923655e-05}, {"id": 248, "seek": 183900, "start": 1858.0, "end": 1864.0, "text": " over here, it shows you here. So r is the result.", "tokens": [670, 510, 11, 309, 3110, 291, 510, 13, 407, 367, 307, 264, 1874, 13], "temperature": 0.0, "avg_logprob": -0.14612495104471843, "compression_ratio": 1.5177304964539007, "no_speech_prob": 1.2028672244923655e-05}, {"id": 249, "seek": 186400, "start": 1864.0, "end": 1871.0, "text": " x is the left hand side, y is the right hand side and f and g and the left and right arguments to the operator.", "tokens": [2031, 307, 264, 1411, 1011, 1252, 11, 288, 307, 264, 558, 1011, 1252, 293, 283, 293, 290, 293, 264, 1411, 293, 558, 12869, 281, 264, 12973, 13], "temperature": 0.0, "avg_logprob": -0.20220647360149183, "compression_ratio": 1.7006802721088434, "no_speech_prob": 3.5353754356037825e-05}, {"id": 250, "seek": 186400, "start": 1871.0, "end": 1878.0, "text": " Yeah, I just in the example, I just want to concretely point it, which is which.", "tokens": [865, 11, 286, 445, 294, 264, 1365, 11, 286, 445, 528, 281, 39481, 736, 935, 309, 11, 597, 307, 597, 13], "temperature": 0.0, "avg_logprob": -0.20220647360149183, "compression_ratio": 1.7006802721088434, "no_speech_prob": 3.5353754356037825e-05}, {"id": 251, "seek": 186400, "start": 1878.0, "end": 1887.0, "text": " So in the example, this is x, this is x. Yep. And y. Yep.", "tokens": [407, 294, 264, 1365, 11, 341, 307, 2031, 11, 341, 307, 2031, 13, 7010, 13, 400, 288, 13, 7010, 13], "temperature": 0.0, "avg_logprob": -0.20220647360149183, "compression_ratio": 1.7006802721088434, "no_speech_prob": 3.5353754356037825e-05}, {"id": 252, "seek": 188700, "start": 1887.0, "end": 1897.0, "text": " And g is inside the f function. And g is, yeah, f is f and g. Yep. Got it.", "tokens": [400, 290, 307, 1854, 264, 283, 2445, 13, 400, 290, 307, 11, 1338, 11, 283, 307, 283, 293, 290, 13, 7010, 13, 5803, 309, 13], "temperature": 0.0, "avg_logprob": -0.15482665510738597, "compression_ratio": 1.4779874213836477, "no_speech_prob": 1.777792022039648e-05}, {"id": 253, "seek": 188700, "start": 1897.0, "end": 1905.0, "text": " And if you define your own operator, they have different names. I kind of wish I used these names in the documentation.", "tokens": [400, 498, 291, 6964, 428, 1065, 12973, 11, 436, 362, 819, 5288, 13, 286, 733, 295, 3172, 286, 1143, 613, 5288, 294, 264, 14333, 13], "temperature": 0.0, "avg_logprob": -0.15482665510738597, "compression_ratio": 1.4779874213836477, "no_speech_prob": 1.777792022039648e-05}, {"id": 254, "seek": 188700, "start": 1905.0, "end": 1909.0, "text": " They're called, f is called alpha alpha.", "tokens": [814, 434, 1219, 11, 283, 307, 1219, 8961, 8961, 13], "temperature": 0.0, "avg_logprob": -0.15482665510738597, "compression_ratio": 1.4779874213836477, "no_speech_prob": 1.777792022039648e-05}, {"id": 255, "seek": 190900, "start": 1909.0, "end": 1918.0, "text": " G is called omega omega, which we don't have for this one. x is called alpha and y is called omega.", "tokens": [460, 307, 1219, 10498, 10498, 11, 597, 321, 500, 380, 362, 337, 341, 472, 13, 2031, 307, 1219, 8961, 293, 288, 307, 1219, 10498, 13], "temperature": 0.0, "avg_logprob": -0.1989931651524135, "compression_ratio": 1.2613636363636365, "no_speech_prob": 3.120115798083134e-05}, {"id": 256, "seek": 190900, "start": 1918.0, "end": 1930.0, "text": " So over is.", "tokens": [407, 670, 307, 13], "temperature": 0.0, "avg_logprob": -0.1989931651524135, "compression_ratio": 1.2613636363636365, "no_speech_prob": 3.120115798083134e-05}, {"id": 257, "seek": 193000, "start": 1930.0, "end": 1955.0, "text": " OK, same thing, monetically. That's pretty easy. I guess we don't need quite so many samples for the ones that are identical.", "tokens": [2264, 11, 912, 551, 11, 1108, 22652, 13, 663, 311, 1238, 1858, 13, 286, 2041, 321, 500, 380, 643, 1596, 370, 867, 10938, 337, 264, 2306, 300, 366, 14800, 13], "temperature": 0.0, "avg_logprob": -0.18499032188864314, "compression_ratio": 1.1574074074074074, "no_speech_prob": 0.00018810162146110088}, {"id": 258, "seek": 195500, "start": 1955.0, "end": 1965.0, "text": " I guess it's all right.", "tokens": [286, 2041, 309, 311, 439, 558, 13], "temperature": 0.0, "avg_logprob": -0.2624086580778423, "compression_ratio": 0.92, "no_speech_prob": 5.827151835546829e-05}, {"id": 259, "seek": 195500, "start": 1965.0, "end": 1969.0, "text": " Copy that, paste that.", "tokens": [25653, 300, 11, 9163, 300, 13], "temperature": 0.0, "avg_logprob": -0.2624086580778423, "compression_ratio": 0.92, "no_speech_prob": 5.827151835546829e-05}, {"id": 260, "seek": 196900, "start": 1969.0, "end": 1990.0, "text": " So shift o, the symbols called circle dioresis.", "tokens": [407, 5513, 277, 11, 264, 16944, 1219, 6329, 1026, 2706, 271, 13], "temperature": 0.0, "avg_logprob": -0.4488050937652588, "compression_ratio": 0.8545454545454545, "no_speech_prob": 4.9080190365202725e-05}, {"id": 261, "seek": 199000, "start": 1990.0, "end": 1993.0, "text": " And.", "tokens": [400, 13], "temperature": 0.0, "avg_logprob": -0.6629391113917033, "compression_ratio": 0.3333333333333333, "no_speech_prob": 5.6474102166248485e-05}, {"id": 262, "seek": 199300, "start": 1993.0, "end": 2022.0, "text": " Diadic version. That. Over.", "tokens": [8789, 43341, 3037, 13, 663, 13, 4886, 13], "temperature": 0.0, "avg_logprob": -0.523104747136434, "compression_ratio": 0.8181818181818182, "no_speech_prob": 0.0002609386283438653}, {"id": 263, "seek": 202200, "start": 2022.0, "end": 2030.0, "text": " I should do this one.", "tokens": [286, 820, 360, 341, 472, 13], "temperature": 0.0, "avg_logprob": -0.2453319822038923, "compression_ratio": 1.1, "no_speech_prob": 2.6841564704227494e-06}, {"id": 264, "seek": 202200, "start": 2030.0, "end": 2037.0, "text": " Over. OK, so over.", "tokens": [4886, 13, 2264, 11, 370, 670, 13], "temperature": 0.0, "avg_logprob": -0.2453319822038923, "compression_ratio": 1.1, "no_speech_prob": 2.6841564704227494e-06}, {"id": 265, "seek": 202200, "start": 2037.0, "end": 2040.0, "text": " That should be exactly the same.", "tokens": [663, 820, 312, 2293, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.2453319822038923, "compression_ratio": 1.1, "no_speech_prob": 2.6841564704227494e-06}, {"id": 266, "seek": 202200, "start": 2040.0, "end": 2045.0, "text": " It is now the.", "tokens": [467, 307, 586, 264, 13], "temperature": 0.0, "avg_logprob": -0.2453319822038923, "compression_ratio": 1.1, "no_speech_prob": 2.6841564704227494e-06}, {"id": 267, "seek": 204500, "start": 2045.0, "end": 2053.0, "text": " Diadic version is different. It's going to apply g.", "tokens": [8789, 43341, 3037, 307, 819, 13, 467, 311, 516, 281, 3079, 290, 13], "temperature": 0.0, "avg_logprob": -0.16710008893694198, "compression_ratio": 1.6296296296296295, "no_speech_prob": 3.2887312499951804e-06}, {"id": 268, "seek": 204500, "start": 2053.0, "end": 2058.0, "text": " It's got a preproce both left and right.", "tokens": [467, 311, 658, 257, 2666, 340, 384, 1293, 1411, 293, 558, 13], "temperature": 0.0, "avg_logprob": -0.16710008893694198, "compression_ratio": 1.6296296296296295, "no_speech_prob": 3.2887312499951804e-06}, {"id": 269, "seek": 204500, "start": 2058.0, "end": 2062.0, "text": " So I'm going to try to predict what it's going to do. So here.", "tokens": [407, 286, 478, 516, 281, 853, 281, 6069, 437, 309, 311, 516, 281, 360, 13, 407, 510, 13], "temperature": 0.0, "avg_logprob": -0.16710008893694198, "compression_ratio": 1.6296296296296295, "no_speech_prob": 3.2887312499951804e-06}, {"id": 270, "seek": 204500, "start": 2062.0, "end": 2074.0, "text": " It's going to apply divide to both sides. So we're going to get.", "tokens": [467, 311, 516, 281, 3079, 9845, 281, 1293, 4881, 13, 407, 321, 434, 516, 281, 483, 13], "temperature": 0.0, "avg_logprob": -0.16710008893694198, "compression_ratio": 1.6296296296296295, "no_speech_prob": 3.2887312499951804e-06}, {"id": 271, "seek": 207400, "start": 2074.0, "end": 2077.0, "text": " That.", "tokens": [663, 13], "temperature": 0.0, "avg_logprob": -0.08837007522583008, "compression_ratio": 1.514018691588785, "no_speech_prob": 6.048827344784513e-06}, {"id": 272, "seek": 207400, "start": 2077.0, "end": 2083.0, "text": " I think should be the answer.", "tokens": [286, 519, 820, 312, 264, 1867, 13], "temperature": 0.0, "avg_logprob": -0.08837007522583008, "compression_ratio": 1.514018691588785, "no_speech_prob": 6.048827344784513e-06}, {"id": 273, "seek": 207400, "start": 2083.0, "end": 2086.0, "text": " It is.", "tokens": [467, 307, 13], "temperature": 0.0, "avg_logprob": -0.08837007522583008, "compression_ratio": 1.514018691588785, "no_speech_prob": 6.048827344784513e-06}, {"id": 274, "seek": 207400, "start": 2086.0, "end": 2097.0, "text": " So it's applying divide to the left, it's applying divide to the right, and then it's applying power of to that result.", "tokens": [407, 309, 311, 9275, 9845, 281, 264, 1411, 11, 309, 311, 9275, 9845, 281, 264, 558, 11, 293, 550, 309, 311, 9275, 1347, 295, 281, 300, 1874, 13], "temperature": 0.0, "avg_logprob": -0.08837007522583008, "compression_ratio": 1.514018691588785, "no_speech_prob": 6.048827344784513e-06}, {"id": 275, "seek": 209700, "start": 2097.0, "end": 2105.0, "text": " That is what this useful picture is showing.", "tokens": [663, 307, 437, 341, 4420, 3036, 307, 4099, 13], "temperature": 0.0, "avg_logprob": -0.13269942998886108, "compression_ratio": 1.3680555555555556, "no_speech_prob": 1.4063638445804827e-05}, {"id": 276, "seek": 209700, "start": 2105.0, "end": 2111.0, "text": " OK, and then it's showing when any of these applied monadically, the dotted branch disappears.", "tokens": [2264, 11, 293, 550, 309, 311, 4099, 562, 604, 295, 613, 6456, 1108, 345, 984, 11, 264, 37459, 9819, 25527, 13], "temperature": 0.0, "avg_logprob": -0.13269942998886108, "compression_ratio": 1.3680555555555556, "no_speech_prob": 1.4063638445804827e-05}, {"id": 277, "seek": 209700, "start": 2111.0, "end": 2122.0, "text": " Which means in every case you're left with fgy, fgy, fgy.", "tokens": [3013, 1355, 294, 633, 1389, 291, 434, 1411, 365, 283, 1480, 11, 283, 1480, 11, 283, 1480, 13], "temperature": 0.0, "avg_logprob": -0.13269942998886108, "compression_ratio": 1.3680555555555556, "no_speech_prob": 1.4063638445804827e-05}, {"id": 278, "seek": 212200, "start": 2122.0, "end": 2127.0, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.11532841523488363, "compression_ratio": 1.3354430379746836, "no_speech_prob": 7.88904435466975e-06}, {"id": 279, "seek": 212200, "start": 2127.0, "end": 2132.0, "text": " It's nice to see all these different types of function composition.", "tokens": [467, 311, 1481, 281, 536, 439, 613, 819, 3467, 295, 2445, 12686, 13], "temperature": 0.0, "avg_logprob": -0.11532841523488363, "compression_ratio": 1.3354430379746836, "no_speech_prob": 7.88904435466975e-06}, {"id": 280, "seek": 212200, "start": 2132.0, "end": 2138.0, "text": " Yeah, you know, it's something that we're not used to from other languages, are we really?", "tokens": [865, 11, 291, 458, 11, 309, 311, 746, 300, 321, 434, 406, 1143, 281, 490, 661, 8650, 11, 366, 321, 534, 30], "temperature": 0.0, "avg_logprob": -0.11532841523488363, "compression_ratio": 1.3354430379746836, "no_speech_prob": 7.88904435466975e-06}, {"id": 281, "seek": 212200, "start": 2138.0, "end": 2141.0, "text": " But the idea.", "tokens": [583, 264, 1558, 13], "temperature": 0.0, "avg_logprob": -0.11532841523488363, "compression_ratio": 1.3354430379746836, "no_speech_prob": 7.88904435466975e-06}, {"id": 282, "seek": 212200, "start": 2141.0, "end": 2145.0, "text": " Comes from combinatorial logic.", "tokens": [47290, 490, 2512, 31927, 831, 9952, 13], "temperature": 0.0, "avg_logprob": -0.11532841523488363, "compression_ratio": 1.3354430379746836, "no_speech_prob": 7.88904435466975e-06}, {"id": 283, "seek": 214500, "start": 2145.0, "end": 2152.0, "text": " And there is the Haskell-Carrie kind of, I don't know if he invented it, but he certainly developed it.", "tokens": [400, 456, 307, 264, 8646, 43723, 12, 34, 2284, 414, 733, 295, 11, 286, 500, 380, 458, 498, 415, 14479, 309, 11, 457, 415, 3297, 4743, 309, 13], "temperature": 0.0, "avg_logprob": -0.26447389239356633, "compression_ratio": 1.176991150442478, "no_speech_prob": 1.4284761164162774e-05}, {"id": 284, "seek": 214500, "start": 2152.0, "end": 2166.0, "text": " There's the Cary combinators.", "tokens": [821, 311, 264, 383, 822, 38514, 3391, 13], "temperature": 0.0, "avg_logprob": -0.26447389239356633, "compression_ratio": 1.176991150442478, "no_speech_prob": 1.4284761164162774e-05}, {"id": 285, "seek": 216600, "start": 2166.0, "end": 2178.0, "text": " It basically defines these different ways of combining or I guess we'd say in computer science composing functions.", "tokens": [467, 1936, 23122, 613, 819, 2098, 295, 21928, 420, 286, 2041, 321, 1116, 584, 294, 3820, 3497, 715, 6110, 6828, 13], "temperature": 0.0, "avg_logprob": -0.1568865541551934, "compression_ratio": 1.455621301775148, "no_speech_prob": 3.785042736126343e-06}, {"id": 286, "seek": 216600, "start": 2178.0, "end": 2183.0, "text": " And so, yeah, all the.", "tokens": [400, 370, 11, 1338, 11, 439, 264, 13], "temperature": 0.0, "avg_logprob": -0.1568865541551934, "compression_ratio": 1.455621301775148, "no_speech_prob": 3.785042736126343e-06}, {"id": 287, "seek": 216600, "start": 2183.0, "end": 2195.0, "text": " All the these ways of doing things in APL, I believe, are directly aligned with different Cary combinators.", "tokens": [1057, 264, 613, 2098, 295, 884, 721, 294, 5372, 43, 11, 286, 1697, 11, 366, 3838, 17962, 365, 819, 383, 822, 38514, 3391, 13], "temperature": 0.0, "avg_logprob": -0.1568865541551934, "compression_ratio": 1.455621301775148, "no_speech_prob": 3.785042736126343e-06}, {"id": 288, "seek": 219500, "start": 2195.0, "end": 2201.0, "text": " I am not at all an expert on that though.", "tokens": [286, 669, 406, 412, 439, 364, 5844, 322, 300, 1673, 13], "temperature": 0.0, "avg_logprob": -0.1976972222328186, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.00010547065176069736}, {"id": 289, "seek": 219500, "start": 2201.0, "end": 2204.0, "text": " Is that where the term Cary comes from?", "tokens": [1119, 300, 689, 264, 1433, 383, 822, 1487, 490, 30], "temperature": 0.0, "avg_logprob": -0.1976972222328186, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.00010547065176069736}, {"id": 290, "seek": 219500, "start": 2204.0, "end": 2208.0, "text": " It is. Yeah. Carrying a function.", "tokens": [467, 307, 13, 865, 13, 2741, 19076, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.1976972222328186, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.00010547065176069736}, {"id": 291, "seek": 219500, "start": 2208.0, "end": 2212.0, "text": " I thought that was a disk thing that predated Haskell.", "tokens": [286, 1194, 300, 390, 257, 12355, 551, 300, 3852, 770, 8646, 43723, 13], "temperature": 0.0, "avg_logprob": -0.1976972222328186, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.00010547065176069736}, {"id": 292, "seek": 219500, "start": 2212.0, "end": 2216.0, "text": " Haskell is named after Haskell-Carrie. Haskell-Carrie predates Haskell by a long way.", "tokens": [8646, 43723, 307, 4926, 934, 8646, 43723, 12, 34, 2284, 414, 13, 8646, 43723, 12, 34, 2284, 414, 3852, 1024, 8646, 43723, 538, 257, 938, 636, 13], "temperature": 0.0, "avg_logprob": -0.1976972222328186, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.00010547065176069736}, {"id": 293, "seek": 219500, "start": 2216.0, "end": 2220.0, "text": " Ah, gotcha.", "tokens": [2438, 11, 658, 4413, 13], "temperature": 0.0, "avg_logprob": -0.1976972222328186, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.00010547065176069736}, {"id": 294, "seek": 219500, "start": 2220.0, "end": 2224.0, "text": " Yes, good.", "tokens": [1079, 11, 665, 13], "temperature": 0.0, "avg_logprob": -0.1976972222328186, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.00010547065176069736}, {"id": 295, "seek": 222400, "start": 2224.0, "end": 2234.0, "text": " And that's what we would call partial functions in Python.", "tokens": [400, 300, 311, 437, 321, 576, 818, 14641, 6828, 294, 15329, 13], "temperature": 0.0, "avg_logprob": -0.13249953957491142, "compression_ratio": 1.236220472440945, "no_speech_prob": 2.8854337870143354e-05}, {"id": 296, "seek": 222400, "start": 2234.0, "end": 2239.0, "text": " Great.", "tokens": [3769, 13], "temperature": 0.0, "avg_logprob": -0.13249953957491142, "compression_ratio": 1.236220472440945, "no_speech_prob": 2.8854337870143354e-05}, {"id": 297, "seek": 222400, "start": 2239.0, "end": 2245.0, "text": " Another thing I wanted to mention actually, which is to go back a bit to the Boolean stuff.", "tokens": [3996, 551, 286, 1415, 281, 2152, 767, 11, 597, 307, 281, 352, 646, 257, 857, 281, 264, 23351, 28499, 1507, 13], "temperature": 0.0, "avg_logprob": -0.13249953957491142, "compression_ratio": 1.236220472440945, "no_speech_prob": 2.8854337870143354e-05}, {"id": 298, "seek": 224500, "start": 2245.0, "end": 2258.0, "text": " I feel like we should have covered a couple of other things. One is I think we should have covered slash as a function.", "tokens": [286, 841, 411, 321, 820, 362, 5343, 257, 1916, 295, 661, 721, 13, 1485, 307, 286, 519, 321, 820, 362, 5343, 17330, 382, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.05857271452744802, "compression_ratio": 1.6551724137931034, "no_speech_prob": 3.2376347007812e-06}, {"id": 299, "seek": 224500, "start": 2258.0, "end": 2269.0, "text": " Because we've covered slash as an operator, but not slash as a function.", "tokens": [1436, 321, 600, 5343, 17330, 382, 364, 12973, 11, 457, 406, 17330, 382, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.05857271452744802, "compression_ratio": 1.6551724137931034, "no_speech_prob": 3.2376347007812e-06}, {"id": 300, "seek": 226900, "start": 2269.0, "end": 2278.0, "text": " And the reason I want to put it with Boolean is because.", "tokens": [400, 264, 1778, 286, 528, 281, 829, 309, 365, 23351, 28499, 307, 570, 13], "temperature": 0.0, "avg_logprob": -0.1479124164581299, "compression_ratio": 1.282258064516129, "no_speech_prob": 5.338080882211216e-06}, {"id": 301, "seek": 226900, "start": 2278.0, "end": 2283.0, "text": " Oh, in fact, there's quite a few monadic versions, like quite a few.", "tokens": [876, 11, 294, 1186, 11, 456, 311, 1596, 257, 1326, 1108, 43341, 9606, 11, 411, 1596, 257, 1326, 13], "temperature": 0.0, "avg_logprob": -0.1479124164581299, "compression_ratio": 1.282258064516129, "no_speech_prob": 5.338080882211216e-06}, {"id": 302, "seek": 226900, "start": 2283.0, "end": 2292.0, "text": " Let's check this. There's equals.", "tokens": [961, 311, 1520, 341, 13, 821, 311, 6915, 13], "temperature": 0.0, "avg_logprob": -0.1479124164581299, "compression_ratio": 1.282258064516129, "no_speech_prob": 5.338080882211216e-06}, {"id": 303, "seek": 229200, "start": 2292.0, "end": 2299.0, "text": " Okay, it doesn't have a monadic. Not equals. Ah, yeah, okay.", "tokens": [1033, 11, 309, 1177, 380, 362, 257, 1108, 43341, 13, 1726, 6915, 13, 2438, 11, 1338, 11, 1392, 13], "temperature": 0.0, "avg_logprob": -0.1552022165722317, "compression_ratio": 1.4597701149425288, "no_speech_prob": 2.4060784653556766e-06}, {"id": 304, "seek": 229200, "start": 2299.0, "end": 2308.0, "text": " Do you guys remember monadic not equal to, which tells you have we seen this number before in the list?", "tokens": [1144, 291, 1074, 1604, 1108, 43341, 406, 2681, 281, 11, 597, 5112, 291, 362, 321, 1612, 341, 1230, 949, 294, 264, 1329, 30], "temperature": 0.0, "avg_logprob": -0.1552022165722317, "compression_ratio": 1.4597701149425288, "no_speech_prob": 2.4060784653556766e-06}, {"id": 305, "seek": 229200, "start": 2308.0, "end": 2315.0, "text": " And so it's going to end up giving you a one for unique values.", "tokens": [400, 370, 309, 311, 516, 281, 917, 493, 2902, 291, 257, 472, 337, 3845, 4190, 13], "temperature": 0.0, "avg_logprob": -0.1552022165722317, "compression_ratio": 1.4597701149425288, "no_speech_prob": 2.4060784653556766e-06}, {"id": 306, "seek": 229200, "start": 2315.0, "end": 2319.0, "text": " Where this is interesting", "tokens": [2305, 341, 307, 1880], "temperature": 0.0, "avg_logprob": -0.1552022165722317, "compression_ratio": 1.4597701149425288, "no_speech_prob": 2.4060784653556766e-06}, {"id": 307, "seek": 231900, "start": 2319.0, "end": 2326.0, "text": " is we can combine it with slash.", "tokens": [307, 321, 393, 10432, 309, 365, 17330, 13], "temperature": 0.0, "avg_logprob": -0.15079343583848742, "compression_ratio": 1.1639344262295082, "no_speech_prob": 3.4265256545040756e-05}, {"id": 308, "seek": 231900, "start": 2326.0, "end": 2328.0, "text": " Can you guys still hear me? My headphones.", "tokens": [1664, 291, 1074, 920, 1568, 385, 30, 1222, 16278, 13], "temperature": 0.0, "avg_logprob": -0.15079343583848742, "compression_ratio": 1.1639344262295082, "no_speech_prob": 3.4265256545040756e-05}, {"id": 309, "seek": 231900, "start": 2328.0, "end": 2329.0, "text": " Yeah, that's good.", "tokens": [865, 11, 300, 311, 665, 13], "temperature": 0.0, "avg_logprob": -0.15079343583848742, "compression_ratio": 1.1639344262295082, "no_speech_prob": 3.4265256545040756e-05}, {"id": 310, "seek": 231900, "start": 2329.0, "end": 2336.0, "text": " Okay, I think they're running out of batteries.", "tokens": [1033, 11, 286, 519, 436, 434, 2614, 484, 295, 13070, 13], "temperature": 0.0, "avg_logprob": -0.15079343583848742, "compression_ratio": 1.1639344262295082, "no_speech_prob": 3.4265256545040756e-05}, {"id": 311, "seek": 233600, "start": 2336.0, "end": 2349.0, "text": " What should I do?", "tokens": [708, 820, 286, 360, 30], "temperature": 0.0, "avg_logprob": -0.1197179290983412, "compression_ratio": 0.68, "no_speech_prob": 0.00017941914848051965}, {"id": 312, "seek": 234900, "start": 2349.0, "end": 2378.0, "text": " I got a bit more fancy.", "tokens": [286, 658, 257, 857, 544, 10247, 13], "temperature": 0.0, "avg_logprob": -0.36564571207219904, "compression_ratio": 0.7419354838709677, "no_speech_prob": 0.000339417572831735}, {"id": 313, "seek": 237800, "start": 2378.0, "end": 2386.0, "text": " Hi, can you guys hear me?", "tokens": [2421, 11, 393, 291, 1074, 1568, 385, 30], "temperature": 0.0, "avg_logprob": -0.2516310373942057, "compression_ratio": 1.1136363636363635, "no_speech_prob": 1.749383045535069e-05}, {"id": 314, "seek": 237800, "start": 2386.0, "end": 2390.0, "text": " Yep, can do. Great.", "tokens": [7010, 11, 393, 360, 13, 3769, 13], "temperature": 0.0, "avg_logprob": -0.2516310373942057, "compression_ratio": 1.1136363636363635, "no_speech_prob": 1.749383045535069e-05}, {"id": 315, "seek": 237800, "start": 2390.0, "end": 2392.0, "text": " It's a bit louder.", "tokens": [467, 311, 257, 857, 22717, 13], "temperature": 0.0, "avg_logprob": -0.2516310373942057, "compression_ratio": 1.1136363636363635, "no_speech_prob": 1.749383045535069e-05}, {"id": 316, "seek": 237800, "start": 2392.0, "end": 2396.0, "text": " Bit louder, okay.", "tokens": [9101, 22717, 11, 1392, 13], "temperature": 0.0, "avg_logprob": -0.2516310373942057, "compression_ratio": 1.1136363636363635, "no_speech_prob": 1.749383045535069e-05}, {"id": 317, "seek": 237800, "start": 2396.0, "end": 2398.0, "text": " But okay.", "tokens": [583, 1392, 13], "temperature": 0.0, "avg_logprob": -0.2516310373942057, "compression_ratio": 1.1136363636363635, "no_speech_prob": 1.749383045535069e-05}, {"id": 318, "seek": 237800, "start": 2398.0, "end": 2402.0, "text": " Cool.", "tokens": [8561, 13], "temperature": 0.0, "avg_logprob": -0.2516310373942057, "compression_ratio": 1.1136363636363635, "no_speech_prob": 1.749383045535069e-05}, {"id": 319, "seek": 240200, "start": 2402.0, "end": 2409.0, "text": " See if I can adjust it here.", "tokens": [3008, 498, 286, 393, 4369, 309, 510, 13], "temperature": 0.0, "avg_logprob": -0.2837463047193444, "compression_ratio": 1.0, "no_speech_prob": 2.0458755898289382e-05}, {"id": 320, "seek": 240200, "start": 2409.0, "end": 2425.0, "text": " Alright.", "tokens": [2798, 13], "temperature": 0.0, "avg_logprob": -0.2837463047193444, "compression_ratio": 1.0, "no_speech_prob": 2.0458755898289382e-05}, {"id": 321, "seek": 240200, "start": 2425.0, "end": 2430.0, "text": " Alright, so paste.", "tokens": [2798, 11, 370, 9163, 13], "temperature": 0.0, "avg_logprob": -0.2837463047193444, "compression_ratio": 1.0, "no_speech_prob": 2.0458755898289382e-05}, {"id": 322, "seek": 243000, "start": 2430.0, "end": 2441.0, "text": " So we're going to do slash as a function.", "tokens": [407, 321, 434, 516, 281, 360, 17330, 382, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.11632342338562011, "compression_ratio": 0.8367346938775511, "no_speech_prob": 1.0614604434522334e-05}, {"id": 323, "seek": 244100, "start": 2441.0, "end": 2459.0, "text": " And it's called replicate.", "tokens": [400, 309, 311, 1219, 25356, 13], "temperature": 0.0, "avg_logprob": -0.13540030717849733, "compression_ratio": 0.7647058823529411, "no_speech_prob": 4.0292961784871295e-06}, {"id": 324, "seek": 245900, "start": 2459.0, "end": 2472.0, "text": " And what it does is it, let's put this in V.", "tokens": [400, 437, 309, 775, 307, 309, 11, 718, 311, 829, 341, 294, 691, 13], "temperature": 0.0, "avg_logprob": -0.15102630503037395, "compression_ratio": 1.411764705882353, "no_speech_prob": 3.844857928925194e-06}, {"id": 325, "seek": 245900, "start": 2472.0, "end": 2480.0, "text": " And then not equal to is eight.", "tokens": [400, 550, 406, 2681, 281, 307, 3180, 13], "temperature": 0.0, "avg_logprob": -0.15102630503037395, "compression_ratio": 1.411764705882353, "no_speech_prob": 3.844857928925194e-06}, {"id": 326, "seek": 245900, "start": 2480.0, "end": 2487.0, "text": " What it does is repeats whatever's on the right by the number of things that's on the left.", "tokens": [708, 309, 775, 307, 35038, 2035, 311, 322, 264, 558, 538, 264, 1230, 295, 721, 300, 311, 322, 264, 1411, 13], "temperature": 0.0, "avg_logprob": -0.15102630503037395, "compression_ratio": 1.411764705882353, "no_speech_prob": 3.844857928925194e-06}, {"id": 327, "seek": 248700, "start": 2487.0, "end": 2493.0, "text": " So if we say on the left is a boolean array", "tokens": [407, 498, 321, 584, 322, 264, 1411, 307, 257, 748, 4812, 282, 10225], "temperature": 0.0, "avg_logprob": -0.09997701644897461, "compression_ratio": 1.488888888888889, "no_speech_prob": 2.6425504984217696e-06}, {"id": 328, "seek": 248700, "start": 2493.0, "end": 2498.0, "text": " and on the right", "tokens": [293, 322, 264, 558], "temperature": 0.0, "avg_logprob": -0.09997701644897461, "compression_ratio": 1.488888888888889, "no_speech_prob": 2.6425504984217696e-06}, {"id": 329, "seek": 248700, "start": 2498.0, "end": 2503.0, "text": " is the array itself,", "tokens": [307, 264, 10225, 2564, 11], "temperature": 0.0, "avg_logprob": -0.09997701644897461, "compression_ratio": 1.488888888888889, "no_speech_prob": 2.6425504984217696e-06}, {"id": 330, "seek": 248700, "start": 2503.0, "end": 2507.0, "text": " then that returns a unique list of the elements of V", "tokens": [550, 300, 11247, 257, 3845, 1329, 295, 264, 4959, 295, 691], "temperature": 0.0, "avg_logprob": -0.09997701644897461, "compression_ratio": 1.488888888888889, "no_speech_prob": 2.6425504984217696e-06}, {"id": 331, "seek": 248700, "start": 2507.0, "end": 2513.0, "text": " because it's repeating, it's basically element-wise repeat. So one", "tokens": [570, 309, 311, 18617, 11, 309, 311, 1936, 4478, 12, 3711, 7149, 13, 407, 472], "temperature": 0.0, "avg_logprob": -0.09997701644897461, "compression_ratio": 1.488888888888889, "no_speech_prob": 2.6425504984217696e-06}, {"id": 332, "seek": 251300, "start": 2513.0, "end": 2518.0, "text": " copy of 22, one copy of 10,", "tokens": [5055, 295, 5853, 11, 472, 5055, 295, 1266, 11], "temperature": 0.0, "avg_logprob": -0.10273208902842963, "compression_ratio": 1.4090909090909092, "no_speech_prob": 8.397786587011069e-06}, {"id": 333, "seek": 251300, "start": 2518.0, "end": 2525.0, "text": " zero copies of 22, zero copies of 22. Does that make sense? One copy of 21.", "tokens": [4018, 14341, 295, 5853, 11, 4018, 14341, 295, 5853, 13, 4402, 300, 652, 2020, 30, 1485, 5055, 295, 5080, 13], "temperature": 0.0, "avg_logprob": -0.10273208902842963, "compression_ratio": 1.4090909090909092, "no_speech_prob": 8.397786587011069e-06}, {"id": 334, "seek": 251300, "start": 2525.0, "end": 2531.0, "text": " And so that's the result. So you don't need a separate", "tokens": [400, 370, 300, 311, 264, 1874, 13, 407, 291, 500, 380, 643, 257, 4994], "temperature": 0.0, "avg_logprob": -0.10273208902842963, "compression_ratio": 1.4090909090909092, "no_speech_prob": 8.397786587011069e-06}, {"id": 335, "seek": 251300, "start": 2531.0, "end": 2536.0, "text": " unique function in APL. You know, we can just combine this", "tokens": [3845, 2445, 294, 5372, 43, 13, 509, 458, 11, 321, 393, 445, 10432, 341], "temperature": 0.0, "avg_logprob": -0.10273208902842963, "compression_ratio": 1.4090909090909092, "no_speech_prob": 8.397786587011069e-06}, {"id": 336, "seek": 253600, "start": 2536.0, "end": 2543.0, "text": " idea of replicate with", "tokens": [1558, 295, 25356, 365], "temperature": 0.0, "avg_logprob": -0.20581106279717118, "compression_ratio": 1.36, "no_speech_prob": 1.7501450201962143e-05}, {"id": 337, "seek": 253600, "start": 2543.0, "end": 2548.0, "text": " unique mask and it behaves as a mask.", "tokens": [3845, 6094, 293, 309, 36896, 382, 257, 6094, 13], "temperature": 0.0, "avg_logprob": -0.20581106279717118, "compression_ratio": 1.36, "no_speech_prob": 1.7501450201962143e-05}, {"id": 338, "seek": 253600, "start": 2548.0, "end": 2553.0, "text": " Is this where they might use that X Y swap thing to get rid of the", "tokens": [1119, 341, 689, 436, 1062, 764, 300, 1783, 398, 18135, 551, 281, 483, 3973, 295, 264], "temperature": 0.0, "avg_logprob": -0.20581106279717118, "compression_ratio": 1.36, "no_speech_prob": 1.7501450201962143e-05}, {"id": 339, "seek": 253600, "start": 2553.0, "end": 2557.0, "text": " brackets? Yeah, could try that.", "tokens": [26179, 30, 865, 11, 727, 853, 300, 13], "temperature": 0.0, "avg_logprob": -0.20581106279717118, "compression_ratio": 1.36, "no_speech_prob": 1.7501450201962143e-05}, {"id": 340, "seek": 253600, "start": 2557.0, "end": 2562.0, "text": " Add it as a second line output to quadruple.", "tokens": [5349, 309, 382, 257, 1150, 1622, 5598, 281, 10787, 894, 781, 13], "temperature": 0.0, "avg_logprob": -0.20581106279717118, "compression_ratio": 1.36, "no_speech_prob": 1.7501450201962143e-05}, {"id": 341, "seek": 256200, "start": 2562.0, "end": 2567.0, "text": " Oh, yeah, we could do that.", "tokens": [876, 11, 1338, 11, 321, 727, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.2128850411677706, "compression_ratio": 1.4409937888198758, "no_speech_prob": 0.00016597578360233456}, {"id": 342, "seek": 256200, "start": 2567.0, "end": 2572.0, "text": " Yeah, but it was the second line. Okay. So", "tokens": [865, 11, 457, 309, 390, 264, 1150, 1622, 13, 1033, 13, 407], "temperature": 0.0, "avg_logprob": -0.2128850411677706, "compression_ratio": 1.4409937888198758, "no_speech_prob": 0.00016597578360233456}, {"id": 343, "seek": 256200, "start": 2572.0, "end": 2577.0, "text": " actually, I have a general question for everyone. With the keyboards,", "tokens": [767, 11, 286, 362, 257, 2674, 1168, 337, 1518, 13, 2022, 264, 47808, 11], "temperature": 0.0, "avg_logprob": -0.2128850411677706, "compression_ratio": 1.4409937888198758, "no_speech_prob": 0.00016597578360233456}, {"id": 344, "seek": 256200, "start": 2577.0, "end": 2582.0, "text": " I find that actually,", "tokens": [286, 915, 300, 767, 11], "temperature": 0.0, "avg_logprob": -0.2128850411677706, "compression_ratio": 1.4409937888198758, "no_speech_prob": 0.00016597578360233456}, {"id": 345, "seek": 256200, "start": 2582.0, "end": 2587.0, "text": " I haven't tried to hunt this down myself much, but I find I'm hitting", "tokens": [286, 2378, 380, 3031, 281, 12454, 341, 760, 2059, 709, 11, 457, 286, 915, 286, 478, 8850], "temperature": 0.0, "avg_logprob": -0.2128850411677706, "compression_ratio": 1.4409937888198758, "no_speech_prob": 0.00016597578360233456}, {"id": 346, "seek": 258700, "start": 2587.0, "end": 2593.0, "text": " control and shift keys often to do things and it changes my keyboard", "tokens": [1969, 293, 5513, 9317, 2049, 281, 360, 721, 293, 309, 2962, 452, 10186], "temperature": 0.0, "avg_logprob": -0.1623288058163075, "compression_ratio": 1.634703196347032, "no_speech_prob": 6.203437078511342e-05}, {"id": 347, "seek": 258700, "start": 2593.0, "end": 2596.0, "text": " every time.", "tokens": [633, 565, 13], "temperature": 0.0, "avg_logprob": -0.1623288058163075, "compression_ratio": 1.634703196347032, "no_speech_prob": 6.203437078511342e-05}, {"id": 348, "seek": 258700, "start": 2596.0, "end": 2601.0, "text": " And then my control Zs don't work. Does anyone else experiencing that?", "tokens": [400, 550, 452, 1969, 1176, 82, 500, 380, 589, 13, 4402, 2878, 1646, 11139, 300, 30], "temperature": 0.0, "avg_logprob": -0.1623288058163075, "compression_ratio": 1.634703196347032, "no_speech_prob": 6.203437078511342e-05}, {"id": 349, "seek": 258700, "start": 2601.0, "end": 2605.0, "text": " Yeah, so you can just hold down windows and press space to switch", "tokens": [865, 11, 370, 291, 393, 445, 1797, 760, 9309, 293, 1886, 1901, 281, 3679], "temperature": 0.0, "avg_logprob": -0.1623288058163075, "compression_ratio": 1.634703196347032, "no_speech_prob": 6.203437078511342e-05}, {"id": 350, "seek": 258700, "start": 2605.0, "end": 2609.0, "text": " keyboards. It does, but it's also switching keyboards every time I hold", "tokens": [47808, 13, 467, 775, 11, 457, 309, 311, 611, 16493, 47808, 633, 565, 286, 1797], "temperature": 0.0, "avg_logprob": -0.1623288058163075, "compression_ratio": 1.634703196347032, "no_speech_prob": 6.203437078511342e-05}, {"id": 351, "seek": 258700, "start": 2609.0, "end": 2614.0, "text": " control and shift together. Oh, you can change that in your language", "tokens": [1969, 293, 5513, 1214, 13, 876, 11, 291, 393, 1319, 300, 294, 428, 2856], "temperature": 0.0, "avg_logprob": -0.1623288058163075, "compression_ratio": 1.634703196347032, "no_speech_prob": 6.203437078511342e-05}, {"id": 352, "seek": 261400, "start": 2614.0, "end": 2619.0, "text": " settings. Okay, I'll go looking for it.", "tokens": [6257, 13, 1033, 11, 286, 603, 352, 1237, 337, 309, 13], "temperature": 0.0, "avg_logprob": -0.1860006877354213, "compression_ratio": 1.2702702702702702, "no_speech_prob": 4.6074113924987614e-05}, {"id": 353, "seek": 261400, "start": 2619.0, "end": 2633.0, "text": " Cool. I'm on a Mac at the moment, so I don't see the same thing.", "tokens": [8561, 13, 286, 478, 322, 257, 5707, 412, 264, 1623, 11, 370, 286, 500, 380, 536, 264, 912, 551, 13], "temperature": 0.0, "avg_logprob": -0.1860006877354213, "compression_ratio": 1.2702702702702702, "no_speech_prob": 4.6074113924987614e-05}, {"id": 354, "seek": 261400, "start": 2633.0, "end": 2642.0, "text": " Okay, so the swap was like this one.", "tokens": [1033, 11, 370, 264, 18135, 390, 411, 341, 472, 13], "temperature": 0.0, "avg_logprob": -0.1860006877354213, "compression_ratio": 1.2702702702702702, "no_speech_prob": 4.6074113924987614e-05}, {"id": 355, "seek": 264200, "start": 2642.0, "end": 2648.0, "text": " I think so.", "tokens": [286, 519, 370, 13], "temperature": 0.0, "avg_logprob": -0.2113406499226888, "compression_ratio": 0.9594594594594594, "no_speech_prob": 2.6269210138707422e-05}, {"id": 356, "seek": 264200, "start": 2648.0, "end": 2655.0, "text": " Shift T.", "tokens": [28304, 314, 13], "temperature": 0.0, "avg_logprob": -0.2113406499226888, "compression_ratio": 0.9594594594594594, "no_speech_prob": 2.6269210138707422e-05}, {"id": 357, "seek": 264200, "start": 2655.0, "end": 2660.0, "text": " So switch them around.", "tokens": [407, 3679, 552, 926, 13], "temperature": 0.0, "avg_logprob": -0.2113406499226888, "compression_ratio": 0.9594594594594594, "no_speech_prob": 2.6269210138707422e-05}, {"id": 358, "seek": 264200, "start": 2660.0, "end": 2663.0, "text": " And if we've done that yet.", "tokens": [400, 498, 321, 600, 1096, 300, 1939, 13], "temperature": 0.0, "avg_logprob": -0.2113406499226888, "compression_ratio": 0.9594594594594594, "no_speech_prob": 2.6269210138707422e-05}, {"id": 359, "seek": 266300, "start": 2663.0, "end": 2672.0, "text": " No, we haven't done that yet.", "tokens": [883, 11, 321, 2378, 380, 1096, 300, 1939, 13], "temperature": 0.0, "avg_logprob": -0.16364574432373047, "compression_ratio": 1.1862745098039216, "no_speech_prob": 8.800522664387245e-06}, {"id": 360, "seek": 266300, "start": 2672.0, "end": 2678.0, "text": " And then, yeah, the other thing you can do, since it's replicate,", "tokens": [400, 550, 11, 1338, 11, 264, 661, 551, 291, 393, 360, 11, 1670, 309, 311, 25356, 11], "temperature": 0.0, "avg_logprob": -0.16364574432373047, "compression_ratio": 1.1862745098039216, "no_speech_prob": 8.800522664387245e-06}, {"id": 361, "seek": 266300, "start": 2678.0, "end": 2683.0, "text": " you could say like", "tokens": [291, 727, 584, 411], "temperature": 0.0, "avg_logprob": -0.16364574432373047, "compression_ratio": 1.1862745098039216, "no_speech_prob": 8.800522664387245e-06}, {"id": 362, "seek": 266300, "start": 2683.0, "end": 2688.0, "text": " three.", "tokens": [1045, 13], "temperature": 0.0, "avg_logprob": -0.16364574432373047, "compression_ratio": 1.1862745098039216, "no_speech_prob": 8.800522664387245e-06}, {"id": 363, "seek": 268800, "start": 2688.0, "end": 2693.0, "text": " So it's just going to repeat. Maybe we want to repeat the constant three", "tokens": [407, 309, 311, 445, 516, 281, 7149, 13, 2704, 321, 528, 281, 7149, 264, 5754, 1045], "temperature": 0.0, "avg_logprob": -0.13236754281180246, "compression_ratio": 1.5204678362573099, "no_speech_prob": 1.1478156920929905e-05}, {"id": 364, "seek": 268800, "start": 2693.0, "end": 2698.0, "text": " times or something.", "tokens": [1413, 420, 746, 13], "temperature": 0.0, "avg_logprob": -0.13236754281180246, "compression_ratio": 1.5204678362573099, "no_speech_prob": 1.1478156920929905e-05}, {"id": 365, "seek": 268800, "start": 2698.0, "end": 2702.0, "text": " There you go.", "tokens": [821, 291, 352, 13], "temperature": 0.0, "avg_logprob": -0.13236754281180246, "compression_ratio": 1.5204678362573099, "no_speech_prob": 1.1478156920929905e-05}, {"id": 366, "seek": 268800, "start": 2702.0, "end": 2706.0, "text": " I like this thing in APL, you know, this like, I feel like things are always", "tokens": [286, 411, 341, 551, 294, 5372, 43, 11, 291, 458, 11, 341, 411, 11, 286, 841, 411, 721, 366, 1009], "temperature": 0.0, "avg_logprob": -0.13236754281180246, "compression_ratio": 1.5204678362573099, "no_speech_prob": 1.1478156920929905e-05}, {"id": 367, "seek": 268800, "start": 2706.0, "end": 2710.0, "text": " just made more general than most other languages. So rather than just having", "tokens": [445, 1027, 544, 2674, 813, 881, 661, 8650, 13, 407, 2831, 813, 445, 1419], "temperature": 0.0, "avg_logprob": -0.13236754281180246, "compression_ratio": 1.5204678362573099, "no_speech_prob": 1.1478156920929905e-05}, {"id": 368, "seek": 271000, "start": 2710.0, "end": 2718.0, "text": " a boolean mask operator, you know, it's called replicate. I like that.", "tokens": [257, 748, 4812, 282, 6094, 12973, 11, 291, 458, 11, 309, 311, 1219, 25356, 13, 286, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.11453422904014587, "compression_ratio": 1.3611111111111112, "no_speech_prob": 1.2804470316041261e-05}, {"id": 369, "seek": 271000, "start": 2718.0, "end": 2720.0, "text": " Very cool.", "tokens": [4372, 1627, 13], "temperature": 0.0, "avg_logprob": -0.11453422904014587, "compression_ratio": 1.3611111111111112, "no_speech_prob": 1.2804470316041261e-05}, {"id": 370, "seek": 271000, "start": 2720.0, "end": 2722.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.11453422904014587, "compression_ratio": 1.3611111111111112, "no_speech_prob": 1.2804470316041261e-05}, {"id": 371, "seek": 271000, "start": 2722.0, "end": 2724.0, "text": " Yeah, very cool.", "tokens": [865, 11, 588, 1627, 13], "temperature": 0.0, "avg_logprob": -0.11453422904014587, "compression_ratio": 1.3611111111111112, "no_speech_prob": 1.2804470316041261e-05}, {"id": 372, "seek": 271000, "start": 2724.0, "end": 2729.0, "text": " All right, so then", "tokens": [1057, 558, 11, 370, 550], "temperature": 0.0, "avg_logprob": -0.11453422904014587, "compression_ratio": 1.3611111111111112, "no_speech_prob": 1.2804470316041261e-05}, {"id": 373, "seek": 271000, "start": 2729.0, "end": 2735.0, "text": " we need to revisit all of our operators and make sure we didn't miss any", "tokens": [321, 643, 281, 32676, 439, 295, 527, 19077, 293, 652, 988, 321, 994, 380, 1713, 604], "temperature": 0.0, "avg_logprob": -0.11453422904014587, "compression_ratio": 1.3611111111111112, "no_speech_prob": 1.2804470316041261e-05}, {"id": 374, "seek": 273500, "start": 2735.0, "end": 2741.0, "text": " examples of what they can do, which is what Adam pointed out that probably", "tokens": [5110, 295, 437, 436, 393, 360, 11, 597, 307, 437, 7938, 10932, 484, 300, 1391], "temperature": 0.0, "avg_logprob": -0.21928880925764116, "compression_ratio": 1.3880597014925373, "no_speech_prob": 5.7717179515748285e-06}, {"id": 375, "seek": 273500, "start": 2741.0, "end": 2746.0, "text": " that we definitely have.", "tokens": [300, 321, 2138, 362, 13], "temperature": 0.0, "avg_logprob": -0.21928880925764116, "compression_ratio": 1.3880597014925373, "no_speech_prob": 5.7717179515748285e-06}, {"id": 376, "seek": 273500, "start": 2746.0, "end": 2752.0, "text": " So", "tokens": [407], "temperature": 0.0, "avg_logprob": -0.21928880925764116, "compression_ratio": 1.3880597014925373, "no_speech_prob": 5.7717179515748285e-06}, {"id": 377, "seek": 273500, "start": 2752.0, "end": 2755.0, "text": " we've got", "tokens": [321, 600, 658], "temperature": 0.0, "avg_logprob": -0.21928880925764116, "compression_ratio": 1.3880597014925373, "no_speech_prob": 5.7717179515748285e-06}, {"id": 378, "seek": 273500, "start": 2755.0, "end": 2761.0, "text": " yes, we have not done expand, for example, which is, oh, that's used as a", "tokens": [2086, 11, 321, 362, 406, 1096, 5268, 11, 337, 1365, 11, 597, 307, 11, 1954, 11, 300, 311, 1143, 382, 257], "temperature": 0.0, "avg_logprob": -0.21928880925764116, "compression_ratio": 1.3880597014925373, "no_speech_prob": 5.7717179515748285e-06}, {"id": 379, "seek": 276100, "start": 2761.0, "end": 2766.0, "text": " function.", "tokens": [2445, 13], "temperature": 0.0, "avg_logprob": -0.08301352461179097, "compression_ratio": 0.5294117647058824, "no_speech_prob": 0.00026495143538340926}, {"id": 380, "seek": 276600, "start": 2766.0, "end": 2794.0, "text": " Okay, I've never seen this before.", "tokens": [1033, 11, 286, 600, 1128, 1612, 341, 949, 13], "temperature": 0.0, "avg_logprob": -0.13419220997737005, "compression_ratio": 0.8095238095238095, "no_speech_prob": 0.00021257625485304743}, {"id": 381, "seek": 279400, "start": 2794.0, "end": 2814.0, "text": " Hmm.", "tokens": [8239, 13], "temperature": 0.0, "avg_logprob": -0.21307547339077654, "compression_ratio": 1.1549295774647887, "no_speech_prob": 0.0002337277983315289}, {"id": 382, "seek": 279400, "start": 2814.0, "end": 2822.0, "text": " So in the, in the, in the letters, wherever it had the minus, it gave spaces.", "tokens": [407, 294, 264, 11, 294, 264, 11, 294, 264, 7825, 11, 8660, 309, 632, 264, 3175, 11, 309, 2729, 7673, 13], "temperature": 0.0, "avg_logprob": -0.21307547339077654, "compression_ratio": 1.1549295774647887, "no_speech_prob": 0.0002337277983315289}, {"id": 383, "seek": 282200, "start": 2822.0, "end": 2826.0, "text": " It's got one and then two spaces and then", "tokens": [467, 311, 658, 472, 293, 550, 732, 7673, 293, 550], "temperature": 0.0, "avg_logprob": -0.1747599910287296, "compression_ratio": 1.6232876712328768, "no_speech_prob": 5.7372173614567146e-05}, {"id": 384, "seek": 282200, "start": 2826.0, "end": 2834.0, "text": " a sub array of fill elements is replicated.", "tokens": [257, 1422, 10225, 295, 2836, 4959, 307, 46365, 13], "temperature": 0.0, "avg_logprob": -0.1747599910287296, "compression_ratio": 1.6232876712328768, "no_speech_prob": 5.7372173614567146e-05}, {"id": 385, "seek": 282200, "start": 2834.0, "end": 2837.0, "text": " Like in, well, in the matrix example, you've got a number one and then you've", "tokens": [1743, 294, 11, 731, 11, 294, 264, 8141, 1365, 11, 291, 600, 658, 257, 1230, 472, 293, 550, 291, 600], "temperature": 0.0, "avg_logprob": -0.1747599910287296, "compression_ratio": 1.6232876712328768, "no_speech_prob": 5.7372173614567146e-05}, {"id": 386, "seek": 282200, "start": 2837.0, "end": 2841.0, "text": " got two zeros because it's minus two.", "tokens": [658, 732, 35193, 570, 309, 311, 3175, 732, 13], "temperature": 0.0, "avg_logprob": -0.1747599910287296, "compression_ratio": 1.6232876712328768, "no_speech_prob": 5.7372173614567146e-05}, {"id": 387, "seek": 282200, "start": 2841.0, "end": 2846.0, "text": " And then you've got two replicated.", "tokens": [400, 550, 291, 600, 658, 732, 46365, 13], "temperature": 0.0, "avg_logprob": -0.1747599910287296, "compression_ratio": 1.6232876712328768, "no_speech_prob": 5.7372173614567146e-05}, {"id": 388, "seek": 284600, "start": 2846.0, "end": 2852.0, "text": " So that's replicating the second element to us.", "tokens": [407, 300, 311, 3248, 30541, 264, 1150, 4478, 281, 505, 13], "temperature": 0.0, "avg_logprob": -0.21152100320589745, "compression_ratio": 1.3793103448275863, "no_speech_prob": 6.501383177237585e-05}, {"id": 389, "seek": 284600, "start": 2852.0, "end": 2864.0, "text": " And then you have, yeah, so it's doing it kind of like across columns.", "tokens": [400, 550, 291, 362, 11, 1338, 11, 370, 309, 311, 884, 309, 733, 295, 411, 2108, 13766, 13], "temperature": 0.0, "avg_logprob": -0.21152100320589745, "compression_ratio": 1.3793103448275863, "no_speech_prob": 6.501383177237585e-05}, {"id": 390, "seek": 284600, "start": 2864.0, "end": 2868.0, "text": " I think you put it in your notebook and had a box around it may be easier to", "tokens": [286, 519, 291, 829, 309, 294, 428, 21060, 293, 632, 257, 2424, 926, 309, 815, 312, 3571, 281], "temperature": 0.0, "avg_logprob": -0.21152100320589745, "compression_ratio": 1.3793103448275863, "no_speech_prob": 6.501383177237585e-05}, {"id": 391, "seek": 284600, "start": 2868.0, "end": 2871.0, "text": " see.", "tokens": [536, 13], "temperature": 0.0, "avg_logprob": -0.21152100320589745, "compression_ratio": 1.3793103448275863, "no_speech_prob": 6.501383177237585e-05}, {"id": 392, "seek": 287100, "start": 2871.0, "end": 2876.0, "text": " Oh, you think there's a boxing thing going on here.", "tokens": [876, 11, 291, 519, 456, 311, 257, 24424, 551, 516, 322, 510, 13], "temperature": 0.0, "avg_logprob": -0.24557949775873228, "compression_ratio": 1.3035714285714286, "no_speech_prob": 3.424664100748487e-05}, {"id": 393, "seek": 287100, "start": 2876.0, "end": 2881.0, "text": " Yeah, I think the second one, the ace that may be definitely have some boxing", "tokens": [865, 11, 286, 519, 264, 1150, 472, 11, 264, 17117, 300, 815, 312, 2138, 362, 512, 24424], "temperature": 0.0, "avg_logprob": -0.24557949775873228, "compression_ratio": 1.3035714285714286, "no_speech_prob": 3.424664100748487e-05}, {"id": 394, "seek": 287100, "start": 2881.0, "end": 2896.0, "text": " around it. Okay.", "tokens": [926, 309, 13, 1033, 13], "temperature": 0.0, "avg_logprob": -0.24557949775873228, "compression_ratio": 1.3035714285714286, "no_speech_prob": 3.424664100748487e-05}, {"id": 395, "seek": 289600, "start": 2896.0, "end": 2902.0, "text": " Not much to say.", "tokens": [1726, 709, 281, 584, 13], "temperature": 0.0, "avg_logprob": -0.17967617700970362, "compression_ratio": 1.303448275862069, "no_speech_prob": 4.565659310173942e-06}, {"id": 396, "seek": 289600, "start": 2902.0, "end": 2907.0, "text": " That's two spaces. Yes.", "tokens": [663, 311, 732, 7673, 13, 1079, 13], "temperature": 0.0, "avg_logprob": -0.17967617700970362, "compression_ratio": 1.303448275862069, "no_speech_prob": 4.565659310173942e-06}, {"id": 397, "seek": 289600, "start": 2907.0, "end": 2910.0, "text": " Okay, this isn't really got anything to do with Boolean so we can probably come", "tokens": [1033, 11, 341, 1943, 380, 534, 658, 1340, 281, 360, 365, 23351, 28499, 370, 321, 393, 1391, 808], "temperature": 0.0, "avg_logprob": -0.17967617700970362, "compression_ratio": 1.303448275862069, "no_speech_prob": 4.565659310173942e-06}, {"id": 398, "seek": 289600, "start": 2910.0, "end": 2914.0, "text": " back to it.", "tokens": [646, 281, 309, 13], "temperature": 0.0, "avg_logprob": -0.17967617700970362, "compression_ratio": 1.303448275862069, "no_speech_prob": 4.565659310173942e-06}, {"id": 399, "seek": 289600, "start": 2914.0, "end": 2918.0, "text": " So I don't think we need that right now.", "tokens": [407, 286, 500, 380, 519, 321, 643, 300, 558, 586, 13], "temperature": 0.0, "avg_logprob": -0.17967617700970362, "compression_ratio": 1.303448275862069, "no_speech_prob": 4.565659310173942e-06}, {"id": 400, "seek": 289600, "start": 2918.0, "end": 2923.0, "text": " As an operator.", "tokens": [1018, 364, 12973, 13], "temperature": 0.0, "avg_logprob": -0.17967617700970362, "compression_ratio": 1.303448275862069, "no_speech_prob": 4.565659310173942e-06}, {"id": 401, "seek": 292300, "start": 2923.0, "end": 2927.0, "text": " We've done.", "tokens": [492, 600, 1096, 13], "temperature": 0.0, "avg_logprob": -0.1814586032520641, "compression_ratio": 1.2365591397849462, "no_speech_prob": 7.646399353689048e-06}, {"id": 402, "seek": 292300, "start": 2927.0, "end": 2929.0, "text": " Okay, they don't.", "tokens": [1033, 11, 436, 500, 380, 13], "temperature": 0.0, "avg_logprob": -0.1814586032520641, "compression_ratio": 1.2365591397849462, "no_speech_prob": 7.646399353689048e-06}, {"id": 403, "seek": 292300, "start": 2929.0, "end": 2937.0, "text": " They got a dyadic.", "tokens": [814, 658, 257, 14584, 43341, 13], "temperature": 0.0, "avg_logprob": -0.1814586032520641, "compression_ratio": 1.2365591397849462, "no_speech_prob": 7.646399353689048e-06}, {"id": 404, "seek": 292300, "start": 2937.0, "end": 2950.0, "text": " I don't think so. Okay, so I think we've done this operator fully.", "tokens": [286, 500, 380, 519, 370, 13, 1033, 11, 370, 286, 519, 321, 600, 1096, 341, 12973, 4498, 13], "temperature": 0.0, "avg_logprob": -0.1814586032520641, "compression_ratio": 1.2365591397849462, "no_speech_prob": 7.646399353689048e-06}, {"id": 405, "seek": 295000, "start": 2950.0, "end": 2954.0, "text": " I think we've checked slash bars the same.", "tokens": [286, 519, 321, 600, 10033, 17330, 10228, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.3167752486008864, "compression_ratio": 1.601123595505618, "no_speech_prob": 7.64638480177382e-06}, {"id": 406, "seek": 295000, "start": 2954.0, "end": 2959.0, "text": " And I think we checked these pretty carefully.", "tokens": [400, 286, 519, 321, 10033, 613, 1238, 7500, 13], "temperature": 0.0, "avg_logprob": -0.3167752486008864, "compression_ratio": 1.601123595505618, "no_speech_prob": 7.64638480177382e-06}, {"id": 407, "seek": 295000, "start": 2959.0, "end": 2963.0, "text": " So let's check star diarisis.", "tokens": [407, 718, 311, 1520, 3543, 1026, 289, 28436, 13], "temperature": 0.0, "avg_logprob": -0.3167752486008864, "compression_ratio": 1.601123595505618, "no_speech_prob": 7.64638480177382e-06}, {"id": 408, "seek": 295000, "start": 2963.0, "end": 2970.0, "text": " Power operator.", "tokens": [7086, 12973, 13], "temperature": 0.0, "avg_logprob": -0.3167752486008864, "compression_ratio": 1.601123595505618, "no_speech_prob": 7.64638480177382e-06}, {"id": 409, "seek": 295000, "start": 2970.0, "end": 2974.0, "text": " Okay, I don't think we've. Oh, I did want to talk about power operator some", "tokens": [1033, 11, 286, 500, 380, 519, 321, 600, 13, 876, 11, 286, 630, 528, 281, 751, 466, 1347, 12973, 512], "temperature": 0.0, "avg_logprob": -0.3167752486008864, "compression_ratio": 1.601123595505618, "no_speech_prob": 7.64638480177382e-06}, {"id": 410, "seek": 295000, "start": 2974.0, "end": 2978.0, "text": " more because we missed a really interesting case of power operator, which", "tokens": [544, 570, 321, 6721, 257, 534, 1880, 1389, 295, 1347, 12973, 11, 597], "temperature": 0.0, "avg_logprob": -0.3167752486008864, "compression_ratio": 1.601123595505618, "no_speech_prob": 7.64638480177382e-06}, {"id": 411, "seek": 297800, "start": 2978.0, "end": 2983.0, "text": " is a negative number.", "tokens": [307, 257, 3671, 1230, 13], "temperature": 0.0, "avg_logprob": -0.37262824865487904, "compression_ratio": 0.9436619718309859, "no_speech_prob": 2.014443089137785e-05}, {"id": 412, "seek": 297800, "start": 2983.0, "end": 2994.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.37262824865487904, "compression_ratio": 0.9436619718309859, "no_speech_prob": 2.014443089137785e-05}, {"id": 413, "seek": 297800, "start": 2994.0, "end": 3000.0, "text": " So, if you remember, here we're saying.", "tokens": [407, 11, 498, 291, 1604, 11, 510, 321, 434, 1566, 13], "temperature": 0.0, "avg_logprob": -0.37262824865487904, "compression_ratio": 0.9436619718309859, "no_speech_prob": 2.014443089137785e-05}, {"id": 414, "seek": 300000, "start": 3000.0, "end": 3014.0, "text": " Okay, this is sorry, this is the successor function okay so it adds one to things, and this here says, run the successor function three times to zero. So we get three.", "tokens": [1033, 11, 341, 307, 2597, 11, 341, 307, 264, 31864, 2445, 1392, 370, 309, 10860, 472, 281, 721, 11, 293, 341, 510, 1619, 11, 1190, 264, 31864, 2445, 1045, 1413, 281, 4018, 13, 407, 321, 483, 1045, 13], "temperature": 0.0, "avg_logprob": -0.1555559441849992, "compression_ratio": 1.7423312883435582, "no_speech_prob": 8.800850082479883e-06}, {"id": 415, "seek": 300000, "start": 3014.0, "end": 3021.0, "text": " What's interesting though, is we can also say,", "tokens": [708, 311, 1880, 1673, 11, 307, 321, 393, 611, 584, 11], "temperature": 0.0, "avg_logprob": -0.1555559441849992, "compression_ratio": 1.7423312883435582, "no_speech_prob": 8.800850082479883e-06}, {"id": 416, "seek": 300000, "start": 3021.0, "end": 3024.0, "text": " we can also create subtraction.", "tokens": [321, 393, 611, 1884, 16390, 313, 13], "temperature": 0.0, "avg_logprob": -0.1555559441849992, "compression_ratio": 1.7423312883435582, "no_speech_prob": 8.800850082479883e-06}, {"id": 417, "seek": 300000, "start": 3024.0, "end": 3028.0, "text": " And the way we can create subtraction", "tokens": [400, 264, 636, 321, 393, 1884, 16390, 313], "temperature": 0.0, "avg_logprob": -0.1555559441849992, "compression_ratio": 1.7423312883435582, "no_speech_prob": 8.800850082479883e-06}, {"id": 418, "seek": 302800, "start": 3028.0, "end": 3035.0, "text": " is to say, like subtract one, for example, check one.", "tokens": [307, 281, 584, 11, 411, 16390, 472, 11, 337, 1365, 11, 1520, 472, 13], "temperature": 0.0, "avg_logprob": -0.270902042388916, "compression_ratio": 1.3577235772357723, "no_speech_prob": 9.22286471904954e-06}, {"id": 419, "seek": 302800, "start": 3035.0, "end": 3043.0, "text": " I guess that should be P predecessor and successor predecessor. We can define as", "tokens": [286, 2041, 300, 820, 312, 430, 34991, 293, 31864, 34991, 13, 492, 393, 6964, 382], "temperature": 0.0, "avg_logprob": -0.270902042388916, "compression_ratio": 1.3577235772357723, "no_speech_prob": 9.22286471904954e-06}, {"id": 420, "seek": 302800, "start": 3043.0, "end": 3046.0, "text": " successor,", "tokens": [31864, 11], "temperature": 0.0, "avg_logprob": -0.270902042388916, "compression_ratio": 1.3577235772357723, "no_speech_prob": 9.22286471904954e-06}, {"id": 421, "seek": 302800, "start": 3046.0, "end": 3049.0, "text": " star diarisis.", "tokens": [3543, 1026, 289, 28436, 13], "temperature": 0.0, "avg_logprob": -0.270902042388916, "compression_ratio": 1.3577235772357723, "no_speech_prob": 9.22286471904954e-06}, {"id": 422, "seek": 302800, "start": 3049.0, "end": 3050.0, "text": " Sorry.", "tokens": [4919, 13], "temperature": 0.0, "avg_logprob": -0.270902042388916, "compression_ratio": 1.3577235772357723, "no_speech_prob": 9.22286471904954e-06}, {"id": 423, "seek": 305000, "start": 3050.0, "end": 3058.0, "text": " Oh, I'm notice. I don't know if it's only me but it looks like you're typing off the edge of the screen. Okay, thanks for letting me know.", "tokens": [876, 11, 286, 478, 3449, 13, 286, 500, 380, 458, 498, 309, 311, 787, 385, 457, 309, 1542, 411, 291, 434, 18444, 766, 264, 4691, 295, 264, 2568, 13, 1033, 11, 3231, 337, 8295, 385, 458, 13], "temperature": 0.0, "avg_logprob": -0.17958775688620174, "compression_ratio": 1.510752688172043, "no_speech_prob": 1.4509711945720483e-05}, {"id": 424, "seek": 305000, "start": 3058.0, "end": 3063.0, "text": " Okay now. I can see that. Yeah, I can see it now.", "tokens": [1033, 586, 13, 286, 393, 536, 300, 13, 865, 11, 286, 393, 536, 309, 586, 13], "temperature": 0.0, "avg_logprob": -0.17958775688620174, "compression_ratio": 1.510752688172043, "no_speech_prob": 1.4509711945720483e-05}, {"id": 425, "seek": 305000, "start": 3063.0, "end": 3066.0, "text": " Alright.", "tokens": [2798, 13], "temperature": 0.0, "avg_logprob": -0.17958775688620174, "compression_ratio": 1.510752688172043, "no_speech_prob": 1.4509711945720483e-05}, {"id": 426, "seek": 305000, "start": 3066.0, "end": 3069.0, "text": " Power, negative one.", "tokens": [7086, 11, 3671, 472, 13], "temperature": 0.0, "avg_logprob": -0.17958775688620174, "compression_ratio": 1.510752688172043, "no_speech_prob": 1.4509711945720483e-05}, {"id": 427, "seek": 305000, "start": 3069.0, "end": 3074.0, "text": " Now what power negative one does is it's the inverse function.", "tokens": [823, 437, 1347, 3671, 472, 775, 307, 309, 311, 264, 17340, 2445, 13], "temperature": 0.0, "avg_logprob": -0.17958775688620174, "compression_ratio": 1.510752688172043, "no_speech_prob": 1.4509711945720483e-05}, {"id": 428, "seek": 307400, "start": 3074.0, "end": 3080.0, "text": " So the inverse of adding one is subtracting one.", "tokens": [407, 264, 17340, 295, 5127, 472, 307, 16390, 278, 472, 13], "temperature": 0.0, "avg_logprob": -0.16663661268022326, "compression_ratio": 1.1546391752577319, "no_speech_prob": 9.570750307830167e-07}, {"id": 429, "seek": 307400, "start": 3080.0, "end": 3084.0, "text": " The predecessor of three should be two.", "tokens": [440, 34991, 295, 1045, 820, 312, 732, 13], "temperature": 0.0, "avg_logprob": -0.16663661268022326, "compression_ratio": 1.1546391752577319, "no_speech_prob": 9.570750307830167e-07}, {"id": 430, "seek": 307400, "start": 3084.0, "end": 3086.0, "text": " Isn't that amazing.", "tokens": [6998, 380, 300, 2243, 13], "temperature": 0.0, "avg_logprob": -0.16663661268022326, "compression_ratio": 1.1546391752577319, "no_speech_prob": 9.570750307830167e-07}, {"id": 431, "seek": 307400, "start": 3086.0, "end": 3091.0, "text": " So,", "tokens": [407, 11], "temperature": 0.0, "avg_logprob": -0.16663661268022326, "compression_ratio": 1.1546391752577319, "no_speech_prob": 9.570750307830167e-07}, {"id": 432, "seek": 309100, "start": 3091.0, "end": 3107.0, "text": " it stands inverse functions, which is a pretty sophisticated mathematical concept, and it's even like doing inverse functions of functions that we have to find ourselves.", "tokens": [309, 7382, 17340, 6828, 11, 597, 307, 257, 1238, 16950, 18894, 3410, 11, 293, 309, 311, 754, 411, 884, 17340, 6828, 295, 6828, 300, 321, 362, 281, 915, 4175, 13], "temperature": 0.0, "avg_logprob": -0.15859723091125488, "compression_ratio": 1.452991452991453, "no_speech_prob": 3.844791535811964e-06}, {"id": 433, "seek": 310700, "start": 3107.0, "end": 3127.0, "text": " And if you put a negative something other than one, I believe it applies it, the inverse function that many times.", "tokens": [400, 498, 291, 829, 257, 3671, 746, 661, 813, 472, 11, 286, 1697, 309, 13165, 309, 11, 264, 17340, 2445, 300, 867, 1413, 13], "temperature": 0.0, "avg_logprob": -0.14935956682477677, "compression_ratio": 1.175257731958763, "no_speech_prob": 4.9368854888598435e-06}, {"id": 434, "seek": 312700, "start": 3127.0, "end": 3140.0, "text": " So I think we could say, apply this successor inverse function three times to the number five, for example.", "tokens": [407, 286, 519, 321, 727, 584, 11, 3079, 341, 31864, 17340, 2445, 1045, 1413, 281, 264, 1230, 1732, 11, 337, 1365, 13], "temperature": 0.0, "avg_logprob": -0.0894426946286802, "compression_ratio": 1.3888888888888888, "no_speech_prob": 2.5215529149136273e-06}, {"id": 435, "seek": 312700, "start": 3140.0, "end": 3142.0, "text": " There you go.", "tokens": [821, 291, 352, 13], "temperature": 0.0, "avg_logprob": -0.0894426946286802, "compression_ratio": 1.3888888888888888, "no_speech_prob": 2.5215529149136273e-06}, {"id": 436, "seek": 312700, "start": 3142.0, "end": 3149.0, "text": " That's the equivalent of five minus three.", "tokens": [663, 311, 264, 10344, 295, 1732, 3175, 1045, 13], "temperature": 0.0, "avg_logprob": -0.0894426946286802, "compression_ratio": 1.3888888888888888, "no_speech_prob": 2.5215529149136273e-06}, {"id": 437, "seek": 312700, "start": 3149.0, "end": 3153.0, "text": " So you could also do a square root.", "tokens": [407, 291, 727, 611, 360, 257, 3732, 5593, 13], "temperature": 0.0, "avg_logprob": -0.0894426946286802, "compression_ratio": 1.3888888888888888, "no_speech_prob": 2.5215529149136273e-06}, {"id": 438, "seek": 315300, "start": 3153.0, "end": 3158.0, "text": " So if you wanted square root,", "tokens": [407, 498, 291, 1415, 3732, 5593, 11], "temperature": 0.0, "avg_logprob": -0.17623955011367798, "compression_ratio": 0.8936170212765957, "no_speech_prob": 9.516041245660745e-06}, {"id": 439, "seek": 315300, "start": 3158.0, "end": 3172.0, "text": " you could do", "tokens": [291, 727, 360], "temperature": 0.0, "avg_logprob": -0.17623955011367798, "compression_ratio": 0.8936170212765957, "no_speech_prob": 9.516041245660745e-06}, {"id": 440, "seek": 317200, "start": 3172.0, "end": 3184.0, "text": " I think so that's going to be, let's say square is", "tokens": [286, 519, 370, 300, 311, 516, 281, 312, 11, 718, 311, 584, 3732, 307], "temperature": 0.0, "avg_logprob": -0.2478044551351796, "compression_ratio": 0.9545454545454546, "no_speech_prob": 1.078312925528735e-05}, {"id": 441, "seek": 317200, "start": 3184.0, "end": 3188.0, "text": " the power of", "tokens": [264, 1347, 295], "temperature": 0.0, "avg_logprob": -0.2478044551351796, "compression_ratio": 0.9545454545454546, "no_speech_prob": 1.078312925528735e-05}, {"id": 442, "seek": 318800, "start": 3188.0, "end": 3209.0, "text": " two. So then we should be able to get the square root of nine by doing square", "tokens": [732, 13, 407, 550, 321, 820, 312, 1075, 281, 483, 264, 3732, 5593, 295, 4949, 538, 884, 3732], "temperature": 0.0, "avg_logprob": -0.13426121798428622, "compression_ratio": 1.0845070422535212, "no_speech_prob": 9.08040237845853e-06}, {"id": 443, "seek": 320900, "start": 3209.0, "end": 3218.0, "text": " inverse, the inverse function of square, which is square root.", "tokens": [17340, 11, 264, 17340, 2445, 295, 3732, 11, 597, 307, 3732, 5593, 13], "temperature": 0.0, "avg_logprob": -0.18117069161456564, "compression_ratio": 1.0857142857142856, "no_speech_prob": 2.4060830128291855e-06}, {"id": 444, "seek": 320900, "start": 3218.0, "end": 3225.0, "text": " There you go.", "tokens": [821, 291, 352, 13], "temperature": 0.0, "avg_logprob": -0.18117069161456564, "compression_ratio": 1.0857142857142856, "no_speech_prob": 2.4060830128291855e-06}, {"id": 445, "seek": 322500, "start": 3225.0, "end": 3251.0, "text": " Cool. Cool. Very cool. So it's like solving an equation.", "tokens": [8561, 13, 8561, 13, 4372, 1627, 13, 407, 309, 311, 411, 12606, 364, 5367, 13], "temperature": 0.0, "avg_logprob": -0.19453903248435572, "compression_ratio": 0.9824561403508771, "no_speech_prob": 3.6117453419137746e-06}, {"id": 446, "seek": 325100, "start": 3251.0, "end": 3267.0, "text": " Yeah. Okay. So I'm glad we revisited that one.", "tokens": [865, 13, 1033, 13, 407, 286, 478, 5404, 321, 20767, 1226, 300, 472, 13], "temperature": 0.0, "avg_logprob": -0.13618116908603245, "compression_ratio": 0.8518518518518519, "no_speech_prob": 1.2804665857402142e-05}, {"id": 447, "seek": 326700, "start": 3267.0, "end": 3281.0, "text": " I think that's pretty amazing. Tilt a dioresis.", "tokens": [286, 519, 300, 311, 1238, 2243, 13, 314, 2352, 257, 1026, 2706, 271, 13], "temperature": 0.0, "avg_logprob": -0.2924949645996094, "compression_ratio": 1.0, "no_speech_prob": 1.428516952728387e-05}, {"id": 448, "seek": 326700, "start": 3281.0, "end": 3284.0, "text": " Okay, yeah, we missed one of these.", "tokens": [1033, 11, 1338, 11, 321, 6721, 472, 295, 613, 13], "temperature": 0.0, "avg_logprob": -0.2924949645996094, "compression_ratio": 1.0, "no_speech_prob": 1.428516952728387e-05}, {"id": 449, "seek": 328400, "start": 3284.0, "end": 3297.0, "text": " So this is dyadic.", "tokens": [407, 341, 307, 14584, 43341, 13], "temperature": 0.0, "avg_logprob": -0.2917152404785156, "compression_ratio": 0.75, "no_speech_prob": 9.665872312325519e-06}, {"id": 450, "seek": 329700, "start": 3297.0, "end": 3316.0, "text": " And there's also this one's called, this one's called constant.", "tokens": [400, 456, 311, 611, 341, 472, 311, 1219, 11, 341, 472, 311, 1219, 5754, 13], "temperature": 0.0, "avg_logprob": -0.2540992686623021, "compression_ratio": 1.2352941176470589, "no_speech_prob": 1.9524321032804437e-05}, {"id": 451, "seek": 331600, "start": 3316.0, "end": 3333.0, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.2852750301361084, "compression_ratio": 1.0256410256410255, "no_speech_prob": 1.7493459381512366e-05}, {"id": 452, "seek": 331600, "start": 3333.0, "end": 3340.0, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.2852750301361084, "compression_ratio": 1.0256410256410255, "no_speech_prob": 1.7493459381512366e-05}, {"id": 453, "seek": 331600, "start": 3340.0, "end": 3344.0, "text": " And then dioresis.", "tokens": [400, 550, 1026, 2706, 271, 13], "temperature": 0.0, "avg_logprob": -0.2852750301361084, "compression_ratio": 1.0256410256410255, "no_speech_prob": 1.7493459381512366e-05}, {"id": 454, "seek": 334400, "start": 3344.0, "end": 3349.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.3140036719185965, "compression_ratio": 0.7837837837837838, "no_speech_prob": 6.747913630533731e-06}, {"id": 455, "seek": 334400, "start": 3349.0, "end": 3353.0, "text": " And we've got each with", "tokens": [400, 321, 600, 658, 1184, 365], "temperature": 0.0, "avg_logprob": -0.3140036719185965, "compression_ratio": 0.7837837837837838, "no_speech_prob": 6.747913630533731e-06}, {"id": 456, "seek": 335300, "start": 3353.0, "end": 3374.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.663995623588562, "compression_ratio": 0.38461538461538464, "no_speech_prob": 7.071786512824474e-06}, {"id": 457, "seek": 337400, "start": 3374.0, "end": 3395.0, "text": " And he had a particular example of something we missed.", "tokens": [400, 415, 632, 257, 1729, 1365, 295, 746, 321, 6721, 13], "temperature": 0.0, "avg_logprob": -0.14160014788309733, "compression_ratio": 0.9016393442622951, "no_speech_prob": 1.9523951777955517e-05}, {"id": 458, "seek": 339500, "start": 3395.0, "end": 3409.0, "text": " Oh, that's interesting.", "tokens": [876, 11, 300, 311, 1880, 13], "temperature": 0.0, "avg_logprob": -0.38175579597210063, "compression_ratio": 1.0, "no_speech_prob": 3.237667897337815e-06}, {"id": 459, "seek": 339500, "start": 3409.0, "end": 3419.0, "text": " So Aram says many APLs frown on bracket axis as anomalous.", "tokens": [407, 1587, 335, 1619, 867, 5372, 43, 82, 431, 648, 322, 16904, 10298, 382, 24769, 11553, 13], "temperature": 0.0, "avg_logprob": -0.38175579597210063, "compression_ratio": 1.0, "no_speech_prob": 3.237667897337815e-06}, {"id": 460, "seek": 341900, "start": 3419.0, "end": 3426.0, "text": " And there's no general rule. Yeah. The modern alternative is rank operator.", "tokens": [400, 456, 311, 572, 2674, 4978, 13, 865, 13, 440, 4363, 8535, 307, 6181, 12973, 13], "temperature": 0.0, "avg_logprob": -0.10775033315022786, "compression_ratio": 1.4248704663212435, "no_speech_prob": 1.1842309504572768e-05}, {"id": 461, "seek": 341900, "start": 3426.0, "end": 3435.0, "text": " Often together with transpose. Okay. We haven't done come to that yet, but I guess we can guess what that means, which is general. Cool.", "tokens": [20043, 1214, 365, 25167, 13, 1033, 13, 492, 2378, 380, 1096, 808, 281, 300, 1939, 11, 457, 286, 2041, 321, 393, 2041, 437, 300, 1355, 11, 597, 307, 2674, 13, 8561, 13], "temperature": 0.0, "avg_logprob": -0.10775033315022786, "compression_ratio": 1.4248704663212435, "no_speech_prob": 1.1842309504572768e-05}, {"id": 462, "seek": 341900, "start": 3435.0, "end": 3439.0, "text": " So you don't often need bracket axis.", "tokens": [407, 291, 500, 380, 2049, 643, 16904, 10298, 13], "temperature": 0.0, "avg_logprob": -0.10775033315022786, "compression_ratio": 1.4248704663212435, "no_speech_prob": 1.1842309504572768e-05}, {"id": 463, "seek": 341900, "start": 3439.0, "end": 3448.0, "text": " Ah, that's good to know.", "tokens": [2438, 11, 300, 311, 665, 281, 458, 13], "temperature": 0.0, "avg_logprob": -0.10775033315022786, "compression_ratio": 1.4248704663212435, "no_speech_prob": 1.1842309504572768e-05}, {"id": 464, "seek": 344800, "start": 3448.0, "end": 3454.0, "text": " So transpose should be one we could do reasonably early. Wouldn't rely on", "tokens": [407, 25167, 820, 312, 472, 321, 727, 360, 23551, 2440, 13, 26291, 380, 10687, 322], "temperature": 0.0, "avg_logprob": -0.23232669365115283, "compression_ratio": 1.2155172413793103, "no_speech_prob": 2.0458659491850995e-05}, {"id": 465, "seek": 344800, "start": 3454.0, "end": 3456.0, "text": " Yeah. Other ones.", "tokens": [865, 13, 5358, 2306, 13], "temperature": 0.0, "avg_logprob": -0.23232669365115283, "compression_ratio": 1.2155172413793103, "no_speech_prob": 2.0458659491850995e-05}, {"id": 466, "seek": 344800, "start": 3456.0, "end": 3461.0, "text": " Absolutely.", "tokens": [7021, 13], "temperature": 0.0, "avg_logprob": -0.23232669365115283, "compression_ratio": 1.2155172413793103, "no_speech_prob": 2.0458659491850995e-05}, {"id": 467, "seek": 344800, "start": 3461.0, "end": 3469.0, "text": " I'm just trying to find this one with", "tokens": [286, 478, 445, 1382, 281, 915, 341, 472, 365], "temperature": 0.0, "avg_logprob": -0.23232669365115283, "compression_ratio": 1.2155172413793103, "no_speech_prob": 2.0458659491850995e-05}, {"id": 468, "seek": 346900, "start": 3469.0, "end": 3489.0, "text": " About what we got to fix.", "tokens": [7769, 437, 321, 658, 281, 3191, 13], "temperature": 0.0, "avg_logprob": -0.21874041306345085, "compression_ratio": 0.8723404255319149, "no_speech_prob": 8.530038940079976e-06}, {"id": 469, "seek": 346900, "start": 3489.0, "end": 3491.0, "text": " Ah, here it is.", "tokens": [2438, 11, 510, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.21874041306345085, "compression_ratio": 0.8723404255319149, "no_speech_prob": 8.530038940079976e-06}, {"id": 470, "seek": 349100, "start": 3491.0, "end": 3507.0, "text": " Okay. Systematic problem of terminology. So for functions, yes, they're monadic or dyadic. But for operators, there's monadic and dyadic operators, and then these can derive monadic and dyadic functions.", "tokens": [1033, 13, 8910, 2399, 1154, 295, 27575, 13, 407, 337, 6828, 11, 2086, 11, 436, 434, 1108, 43341, 420, 14584, 43341, 13, 583, 337, 19077, 11, 456, 311, 1108, 43341, 293, 14584, 43341, 19077, 11, 293, 550, 613, 393, 28446, 1108, 43341, 293, 14584, 43341, 6828, 13], "temperature": 0.0, "avg_logprob": -0.13923588395118713, "compression_ratio": 1.5986842105263157, "no_speech_prob": 5.682325991074322e-06}, {"id": 471, "seek": 349100, "start": 3507.0, "end": 3514.0, "text": " For this one, we've got dyadic commute.", "tokens": [1171, 341, 472, 11, 321, 600, 658, 14584, 43341, 36750, 13], "temperature": 0.0, "avg_logprob": -0.13923588395118713, "compression_ratio": 1.5986842105263157, "no_speech_prob": 5.682325991074322e-06}, {"id": 472, "seek": 351400, "start": 3514.0, "end": 3531.0, "text": " So we've missed the fact that this derives a monadic function. Okay, let's check that one.", "tokens": [407, 321, 600, 6721, 264, 1186, 300, 341, 1163, 1539, 257, 1108, 43341, 2445, 13, 1033, 11, 718, 311, 1520, 300, 472, 13], "temperature": 0.0, "avg_logprob": -0.09566365347968207, "compression_ratio": 1.0588235294117647, "no_speech_prob": 7.52719643060118e-06}, {"id": 473, "seek": 353100, "start": 3531.0, "end": 3545.0, "text": " So this to order dioresis derives a monadic function.", "tokens": [407, 341, 281, 1668, 1026, 2706, 271, 1163, 1539, 257, 1108, 43341, 2445, 13], "temperature": 0.0, "avg_logprob": -0.20869121880366884, "compression_ratio": 1.3793103448275863, "no_speech_prob": 5.014693215343868e-06}, {"id": 474, "seek": 353100, "start": 3545.0, "end": 3548.0, "text": " Which I guess is this here.", "tokens": [3013, 286, 2041, 307, 341, 510, 13], "temperature": 0.0, "avg_logprob": -0.20869121880366884, "compression_ratio": 1.3793103448275863, "no_speech_prob": 5.014693215343868e-06}, {"id": 475, "seek": 353100, "start": 3548.0, "end": 3556.0, "text": " Oh, look at that. If the left argument x is omitted and you can tell that you can because it's in curly brackets here.", "tokens": [876, 11, 574, 412, 300, 13, 759, 264, 1411, 6770, 2031, 307, 3406, 3944, 293, 291, 393, 980, 300, 291, 393, 570, 309, 311, 294, 32066, 26179, 510, 13], "temperature": 0.0, "avg_logprob": -0.20869121880366884, "compression_ratio": 1.3793103448275863, "no_speech_prob": 5.014693215343868e-06}, {"id": 476, "seek": 355600, "start": 3556.0, "end": 3561.0, "text": " Then the right argument is duplicated.", "tokens": [1396, 264, 558, 6770, 307, 1581, 564, 3587, 13], "temperature": 0.0, "avg_logprob": -0.11726914919339694, "compression_ratio": 1.1559633027522935, "no_speech_prob": 3.844864295388106e-06}, {"id": 477, "seek": 355600, "start": 3561.0, "end": 3562.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.11726914919339694, "compression_ratio": 1.1559633027522935, "no_speech_prob": 3.844864295388106e-06}, {"id": 478, "seek": 355600, "start": 3562.0, "end": 3572.0, "text": " I'm not sure the APL docs really laid that out as nicely as Adam has done either.", "tokens": [286, 478, 406, 988, 264, 5372, 43, 45623, 534, 9897, 300, 484, 382, 9594, 382, 7938, 575, 1096, 2139, 13], "temperature": 0.0, "avg_logprob": -0.11726914919339694, "compression_ratio": 1.1559633027522935, "no_speech_prob": 3.844864295388106e-06}, {"id": 479, "seek": 357200, "start": 3572.0, "end": 3587.0, "text": " It's not really showing us that as clearly. Yeah, I can see that now. So we need to check when we look at the documentation for these x curly brackets to see things where there's an optional", "tokens": [467, 311, 406, 534, 4099, 505, 300, 382, 4448, 13, 865, 11, 286, 393, 536, 300, 586, 13, 407, 321, 643, 281, 1520, 562, 321, 574, 412, 264, 14333, 337, 613, 2031, 32066, 26179, 281, 536, 721, 689, 456, 311, 364, 17312], "temperature": 0.0, "avg_logprob": -0.09306172891096635, "compression_ratio": 1.4602272727272727, "no_speech_prob": 1.9947017335653072e-06}, {"id": 480, "seek": 357200, "start": 3587.0, "end": 3592.0, "text": " left hand side.", "tokens": [1411, 1011, 1252, 13], "temperature": 0.0, "avg_logprob": -0.09306172891096635, "compression_ratio": 1.4602272727272727, "no_speech_prob": 1.9947017335653072e-06}, {"id": 481, "seek": 357200, "start": 3592.0, "end": 3601.0, "text": " That's interesting. So it's going to duplicate it.", "tokens": [663, 311, 1880, 13, 407, 309, 311, 516, 281, 23976, 309, 13], "temperature": 0.0, "avg_logprob": -0.09306172891096635, "compression_ratio": 1.4602272727272727, "no_speech_prob": 1.9947017335653072e-06}, {"id": 482, "seek": 360100, "start": 3601.0, "end": 3610.0, "text": " What would be an example of where you might want to do that.", "tokens": [708, 576, 312, 364, 1365, 295, 689, 291, 1062, 528, 281, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.0981413655810886, "compression_ratio": 0.9375, "no_speech_prob": 0.00010215293150395155}, {"id": 483, "seek": 361000, "start": 3610.0, "end": 3633.0, "text": " I think maybe our", "tokens": [286, 519, 1310, 527], "temperature": 0.0, "avg_logprob": -0.19255754351615906, "compression_ratio": 0.68, "no_speech_prob": 3.212596493540332e-05}, {"id": 484, "seek": 363300, "start": 3633.0, "end": 3660.0, "text": " So let's do it the other way around.", "tokens": [407, 718, 311, 360, 309, 264, 661, 636, 926, 13], "temperature": 0.0, "avg_logprob": -0.33476996421813965, "compression_ratio": 0.8571428571428571, "no_speech_prob": 3.371191269252449e-05}, {"id": 485, "seek": 366000, "start": 3660.0, "end": 3663.0, "text": " The slash.", "tokens": [440, 17330, 13], "temperature": 0.0, "avg_logprob": -0.14752589634486607, "compression_ratio": 1.0649350649350648, "no_speech_prob": 5.173688805371057e-06}, {"id": 486, "seek": 366000, "start": 3663.0, "end": 3666.0, "text": " Oh, I have a feeling this is going to work.", "tokens": [876, 11, 286, 362, 257, 2633, 341, 307, 516, 281, 589, 13], "temperature": 0.0, "avg_logprob": -0.14752589634486607, "compression_ratio": 1.0649350649350648, "no_speech_prob": 5.173688805371057e-06}, {"id": 487, "seek": 366000, "start": 3666.0, "end": 3672.0, "text": " The slash.", "tokens": [440, 17330, 13], "temperature": 0.0, "avg_logprob": -0.14752589634486607, "compression_ratio": 1.0649350649350648, "no_speech_prob": 5.173688805371057e-06}, {"id": 488, "seek": 366000, "start": 3672.0, "end": 3680.0, "text": " Well,", "tokens": [1042, 11], "temperature": 0.0, "avg_logprob": -0.14752589634486607, "compression_ratio": 1.0649350649350648, "no_speech_prob": 5.173688805371057e-06}, {"id": 489, "seek": 366000, "start": 3680.0, "end": 3683.0, "text": " not quite.", "tokens": [406, 1596, 13], "temperature": 0.0, "avg_logprob": -0.14752589634486607, "compression_ratio": 1.0649350649350648, "no_speech_prob": 5.173688805371057e-06}, {"id": 490, "seek": 368300, "start": 3683.0, "end": 3690.0, "text": " So we've got this.", "tokens": [407, 321, 600, 658, 341, 13], "temperature": 0.0, "avg_logprob": -0.13641459412044948, "compression_ratio": 1.1428571428571428, "no_speech_prob": 7.411046226479812e-06}, {"id": 491, "seek": 368300, "start": 3690.0, "end": 3701.0, "text": " Which has got V on both sides.", "tokens": [3013, 575, 658, 691, 322, 1293, 4881, 13], "temperature": 0.0, "avg_logprob": -0.13641459412044948, "compression_ratio": 1.1428571428571428, "no_speech_prob": 7.411046226479812e-06}, {"id": 492, "seek": 368300, "start": 3701.0, "end": 3709.0, "text": " So I wonder, I don't feel that confident, but I wonder", "tokens": [407, 286, 2441, 11, 286, 500, 380, 841, 300, 6679, 11, 457, 286, 2441], "temperature": 0.0, "avg_logprob": -0.13641459412044948, "compression_ratio": 1.1428571428571428, "no_speech_prob": 7.411046226479812e-06}, {"id": 493, "seek": 370900, "start": 3709.0, "end": 3719.0, "text": " if you can do that.", "tokens": [498, 291, 393, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.10682011687237283, "compression_ratio": 0.9166666666666666, "no_speech_prob": 2.045931432803627e-05}, {"id": 494, "seek": 370900, "start": 3719.0, "end": 3726.0, "text": " Oh, I've got it in the wrong place.", "tokens": [876, 11, 286, 600, 658, 309, 294, 264, 2085, 1081, 13], "temperature": 0.0, "avg_logprob": -0.10682011687237283, "compression_ratio": 0.9166666666666666, "no_speech_prob": 2.045931432803627e-05}, {"id": 495, "seek": 372600, "start": 3726.0, "end": 3747.0, "text": " Yeah, no, the problem is that's going to put this on each side.", "tokens": [865, 11, 572, 11, 264, 1154, 307, 300, 311, 516, 281, 829, 341, 322, 1184, 1252, 13], "temperature": 0.0, "avg_logprob": -0.17645457812717982, "compression_ratio": 0.9545454545454546, "no_speech_prob": 4.860072749579558e-06}, {"id": 496, "seek": 374700, "start": 3747.0, "end": 3749.0, "text": " No.", "tokens": [883, 13], "temperature": 0.0, "avg_logprob": -0.14559823639538824, "compression_ratio": 1.2644628099173554, "no_speech_prob": 5.954947027930757e-06}, {"id": 497, "seek": 374700, "start": 3749.0, "end": 3756.0, "text": " All right, that's not a good example. Okay, so does anybody have an example of something.", "tokens": [1057, 558, 11, 300, 311, 406, 257, 665, 1365, 13, 1033, 11, 370, 775, 4472, 362, 364, 1365, 295, 746, 13], "temperature": 0.0, "avg_logprob": -0.14559823639538824, "compression_ratio": 1.2644628099173554, "no_speech_prob": 5.954947027930757e-06}, {"id": 498, "seek": 374700, "start": 3756.0, "end": 3759.0, "text": " Oh, I know a simple example.", "tokens": [876, 11, 286, 458, 257, 2199, 1365, 13], "temperature": 0.0, "avg_logprob": -0.14559823639538824, "compression_ratio": 1.2644628099173554, "no_speech_prob": 5.954947027930757e-06}, {"id": 499, "seek": 374700, "start": 3759.0, "end": 3763.0, "text": " We could define power", "tokens": [492, 727, 6964, 1347], "temperature": 0.0, "avg_logprob": -0.14559823639538824, "compression_ratio": 1.2644628099173554, "no_speech_prob": 5.954947027930757e-06}, {"id": 500, "seek": 374700, "start": 3763.0, "end": 3769.0, "text": " as being", "tokens": [382, 885], "temperature": 0.0, "avg_logprob": -0.14559823639538824, "compression_ratio": 1.2644628099173554, "no_speech_prob": 5.954947027930757e-06}, {"id": 501, "seek": 376900, "start": 3769.0, "end": 3782.0, "text": " as being multiply on either side.", "tokens": [382, 885, 12972, 322, 2139, 1252, 13], "temperature": 0.0, "avg_logprob": -0.20948200476797005, "compression_ratio": 0.9242424242424242, "no_speech_prob": 3.905191078956705e-06}, {"id": 502, "seek": 376900, "start": 3782.0, "end": 3788.0, "text": " That should be power right.", "tokens": [663, 820, 312, 1347, 558, 13], "temperature": 0.0, "avg_logprob": -0.20948200476797005, "compression_ratio": 0.9242424242424242, "no_speech_prob": 3.905191078956705e-06}, {"id": 503, "seek": 378800, "start": 3788.0, "end": 3799.0, "text": " Yeah, there you go.", "tokens": [865, 11, 456, 291, 352, 13], "temperature": 0.0, "avg_logprob": -0.15153661934105125, "compression_ratio": 1.1782178217821782, "no_speech_prob": 4.637777692551026e-06}, {"id": 504, "seek": 378800, "start": 3799.0, "end": 3805.0, "text": " Well, if anybody comes across any other ones where we didn't notice a monadic version.", "tokens": [1042, 11, 498, 4472, 1487, 2108, 604, 661, 2306, 689, 321, 994, 380, 3449, 257, 1108, 43341, 3037, 13], "temperature": 0.0, "avg_logprob": -0.15153661934105125, "compression_ratio": 1.1782178217821782, "no_speech_prob": 4.637777692551026e-06}, {"id": 505, "seek": 378800, "start": 3805.0, "end": 3811.0, "text": " Let me know.", "tokens": [961, 385, 458, 13], "temperature": 0.0, "avg_logprob": -0.15153661934105125, "compression_ratio": 1.1782178217821782, "no_speech_prob": 4.637777692551026e-06}, {"id": 506, "seek": 381100, "start": 3811.0, "end": 3818.0, "text": " Just back in that previous cell, did you want to lose that previous example.", "tokens": [1449, 646, 294, 300, 3894, 2815, 11, 630, 291, 528, 281, 3624, 300, 3894, 1365, 13], "temperature": 0.0, "avg_logprob": -0.24524434407552084, "compression_ratio": 1.375, "no_speech_prob": 2.9765325962216593e-05}, {"id": 507, "seek": 381100, "start": 3818.0, "end": 3824.0, "text": " Which previous example. The one you overwrote to in this cell 223.", "tokens": [3013, 3894, 1365, 13, 440, 472, 291, 670, 7449, 1370, 281, 294, 341, 2815, 5853, 18, 13], "temperature": 0.0, "avg_logprob": -0.24524434407552084, "compression_ratio": 1.375, "no_speech_prob": 2.9765325962216593e-05}, {"id": 508, "seek": 382400, "start": 3824.0, "end": 3845.0, "text": " Was there something there.", "tokens": [3027, 456, 746, 456, 13], "temperature": 0.0, "avg_logprob": -0.3100806607140435, "compression_ratio": 0.896551724137931, "no_speech_prob": 3.320737960166298e-05}, {"id": 509, "seek": 384500, "start": 3845.0, "end": 3855.0, "text": " Oh, this one.", "tokens": [876, 11, 341, 472, 13], "temperature": 0.0, "avg_logprob": -0.3417516990944191, "compression_ratio": 1.05, "no_speech_prob": 1.8630489648785442e-05}, {"id": 510, "seek": 384500, "start": 3855.0, "end": 3865.0, "text": " Maybe you meant to override it, but it was a good example before that.", "tokens": [2704, 291, 4140, 281, 42321, 309, 11, 457, 309, 390, 257, 665, 1365, 949, 300, 13], "temperature": 0.0, "avg_logprob": -0.3417516990944191, "compression_ratio": 1.05, "no_speech_prob": 1.8630489648785442e-05}, {"id": 511, "seek": 386500, "start": 3865.0, "end": 3875.0, "text": " No, this is. Oh yeah, because we can use it. I said to say we can use it for the.", "tokens": [883, 11, 341, 307, 13, 876, 1338, 11, 570, 321, 393, 764, 309, 13, 286, 848, 281, 584, 321, 393, 764, 309, 337, 264, 13], "temperature": 0.0, "avg_logprob": -0.3535477168976314, "compression_ratio": 1.4344262295081966, "no_speech_prob": 1.6175088603631593e-05}, {"id": 512, "seek": 386500, "start": 3875.0, "end": 3881.0, "text": " Yeah, yeah, yeah, that makes sense. Okay. Thanks for the idea.", "tokens": [865, 11, 1338, 11, 1338, 11, 300, 1669, 2020, 13, 1033, 13, 2561, 337, 264, 1558, 13], "temperature": 0.0, "avg_logprob": -0.3535477168976314, "compression_ratio": 1.4344262295081966, "no_speech_prob": 1.6175088603631593e-05}, {"id": 513, "seek": 386500, "start": 3881.0, "end": 3888.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.3535477168976314, "compression_ratio": 1.4344262295081966, "no_speech_prob": 1.6175088603631593e-05}, {"id": 514, "seek": 386500, "start": 3888.0, "end": 3889.0, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.3535477168976314, "compression_ratio": 1.4344262295081966, "no_speech_prob": 1.6175088603631593e-05}, {"id": 515, "seek": 386500, "start": 3889.0, "end": 3890.0, "text": " Thanks, gang.", "tokens": [2561, 11, 10145, 13], "temperature": 0.0, "avg_logprob": -0.3535477168976314, "compression_ratio": 1.4344262295081966, "no_speech_prob": 1.6175088603631593e-05}, {"id": 516, "seek": 389000, "start": 3890.0, "end": 3895.0, "text": " She's.", "tokens": [50364, 1240, 311, 13, 50614], "temperature": 0.0, "avg_logprob": -0.6963624159495035, "compression_ratio": 0.42857142857142855, "no_speech_prob": 0.0004970147856511176}], "language": "en"}