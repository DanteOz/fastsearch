{"text": " Basically, every time Sylvain and I found something that didn't quite work the way we wanted it at any part of the stack, we wrote our own. So it's kind of like building something with no particular deadline and trying to do everything the very, very best we can. So the layered API of Fast.ai V2 starts at the applications layer which is where most beginners will start. And it looks a lot like Fast.ai V1 which is the released version of the software that people have seen before. But V2 everything is rewritten from scratch. It's totally new, there's no code borrowed. But the top level API looks quite similar. The idea is that in one, two, three, four lines of code you can create a state of the art computer vision classifier including transfer learning. With nearly the same one, two, three, four lines of code, oh, five lines of code in this case because we're also displaying, you can create a state of the art segmentation model. And actually, when I say state of the art, for example, this segmentation model is to the best of my knowledge still better than any published result on this particular Canvit data set. So these five lines of code are super good five lines of code. And as you can see, it includes a line of code which if you say show batch, it will display your data in an appropriate format. In this case, showing you segmentation, a picture, and the color coded pixels overlaid on top of the picture. The same basic four lines of code will do text classification. So here's the basis of ULM fit which is a system that we developed and wrote up along with Sebastian Ruda for transfer learning in natural language processing. And as you can see in here, this is working on IMDB on a single epoch in four minutes. The accuracy here is basically what was the state of the art as of a couple of years ago. Time series analysis, same deal. Basically, a few lines of code, nearly exactly the same lines of code and you'll get a great result from your tabular data. And ditto for collaborative filtering. So the high level API for fast AIV2 is designed to be something where regardless of what application you're working on, you can get a great result from it using sensible defaults and carefully selected hyperparameters automatically largely done for you for the most common kinds of problems that people look at. And that bit doesn't look that different to V1, but understanding how we get to that is kind of interesting and involves getting deeper and deeper. This approach though does work super well and partly it's because this is based on quite a few years of research to figure out what are the best ways to solve various problems along the way and when people actually try using fast AI, they're often surprised. So this person posted on our forum that they've been working in TF2 for a while and for some reason they couldn't figure out all of their models are suddenly working much better. And the answer is basically they're getting all these nice kind of curated best practices. And somebody else on Twitter saw that and said, yep, we found the same thing. We were trying TensorFlow, spent months tweaking and then we switched to fast AI. A couple of days later we were getting better results. So these kind of carefully curated defaults and algorithms and high level APIs that do things right for you the first time, even for experienced practitioners can give you better results faster. But it's actually the other pieces that are more I think interesting for a Swift conversation because as the deeper we go into how we make that work, the more stuff you'll see which will be a great fit I think with Swift. So the mid layer API is something which is largely new to fast to actually I guess the foundation layer is new. So the mid layer I guess I'd say is more rewritten for V1 and it contains some of the things that make those high level APIs easy. One of the bits which is the most interesting is the training loop itself. And I thank Sylvia for the set of slides we have for the training loop. This is what a training loop looks like in PyTorch. We calculate some predictions, we get a loss, we do a backwards pass to get the gradients, we do an optimizer step and then optionally we run time to time we'll zero the gradients based on if we're doing when we're accumulating. So this is what that loop looks like. Run the model, get the loss, do the gradients, step the optimizer, do that a bunch of times. But you want to do something interesting, you'll need to add something to the loop to do keeping track of your training statistics in TensorBoard or in fast progress or whatever. You might want to schedule various hyperparameters in various different ways. You might want to add various different types of categorization. You may want to do mixed precision training. You may want to do GANs. So this is a problem because either you have to write a new training loop for every time you want to add a different tweak. Making all those tweaks work together then becomes incredibly complicated. Or you try and write one training loop which does everything you can think of. This is the training loop for fast AI 0.7 which only did a tiny subset of the things I just said but was still getting ridiculous. Or you can add callbacks at each step. Now the idea of callbacks has been around in deep learning for a long time, APIs. But what's very different about fast AI is that every callback is actually a two-way callback. It can read absolutely everything. It can read gradients, parameters, data, so forth. And it can write them. So it can actually change anything at any time. So the callbacks, we say infinitely flexible, we feel pretty confident in that because the training loop in fast AI has not needed to be modified to do any of the tweaks that I showed you before. So even the entirety of training GANs can be done in a callback. So basically we switch out a basic training loop and replace it with one with the same five steps but callbacks between every step. So that means, for example, if you want to do a scheduler, you can define a batch begin that sets the optimizer's learning rate to some function. Or if you want to do early stopping, you can write an on epoch end that checks the metrics and stops training. Or you can do parallel training, set up data parallel, and if you're happy at the end of training, take data parallel off again. Gradient clipping, you have access to the parameters themselves, so you can click the gradient norms at the end of the backward step. And so forth. So all of these different things are all things that have been written with fast AI callbacks, including, for example, mixed precision, all of NVIDIA's recommendations, mixed precision training, will be added automatically if you just add a 2FP16 at the end of your learn call. And really importantly, you know, for example, all of those mixed precision things can be combined with multi-GPU and one cycle training and gradient accumulation and so forth. So trying to create a state of the art model which involves combining state of the art regularization and mixed precision and distributed training and so forth is a really, really, really hard job. But with this approach, it's actually just a single extra line of code to add each feature and they all explicitly are designed to work with each other and are tested to work with each other. So for instance, here is mixup data augmentation, which is an incredibly powerful data augmentation method that has powered lots of state of the art results. And as you can see, it's well under a screen of code. By comparison, here is the version of mixup from the paper. Not only is it far longer, but it only works with one particular data set and one particular optimizer and is full of all kinds of assumptions and only one particular kind of metric and so forth. So that's an example of these mid-tier APIs. Another one is the optimizer. It turns out that, you know, it looks like there's been lots and lots of different optimizers appearing in the last year or two. But actually it turns out that they're all minor tweaks on each other. Most libraries don't write them this way. So for example, AdamW, also known as decoupled weight decay Adam, was added to PyTorch quite recently in the last month or two. And it required writing a whole new class and a whole new step to implement. And it took, you know, it was like two or three years after the paper was released. On the other hand, FastAI's implementation, as you can see, involves a single extra function containing two lines of code and this little bit of gray here. So it's kind of like two and a half, three lines of code to implement the same thing. Because what we did was we realized let's refactor the idea of an optimizer, see what's different for each of these, you know, state-of-the-art optimizers that have appeared recently, and make it so that each of those things can be added and removed by just changing two things, stats and steppers. A stat is something that you measure during training, such as the gradients or the gradient squared, or you might use dampening or momentum or whatever. And then a stepper is something that uses those stats to change the weights in some way. And you can combine those things together. And by combining these, we've been able to implement all these different optimizers. So, for instance, the LAM optimizer, which came out of Google and was super cool at reducing BERT pre-training time from three days to 76 minutes, we were able to implement that in this tiny piece of code. And one of the nice things is that when you compare it to the math, it really looks almost line-for-line identical, except ours is a little bit nicer because we refactored some of the math. So it makes it really easy to do research as well, because you can kind of quite directly bring the equations across into your code. Then the last of the mid-tier APIs is the DataBlock API, which is something we had in version one as well. But when we were porting that to Swift, we had an opportunity to rethink it. And actually, Alexis Gallagher in particular helped us to rethink it in a more idiomatically Swift-y way. And it came out really nicely. And so then we took the result of that and kind of ported it back into Python, and we ended up with something that was quite a bit nicer. So there's been a kind of a nice interaction and interplay between Fast.ai in Python and Swift.ai in Swift in terms of helping each other's APIs. But basically, the DataBlock API is something where you define each of the key things that the program needs to know to flexibly get your data into a form you can put in a model. So it needs to know what type of data do you have, how do you get that data, how do you split it into a training set and a validation set, and then put that all together into a data bunch, which is just a simple little class. It's literally, I think, four lines of code, which just has the validation set and the training set in one place. So with a DataBlock, you just say, okay, my types, I want to create a black and white pillow image for my X and a category for my Y. And to get the list of files for those, I need to use this function. And to split those files into training and validation, use this function, which is looking at the grandparent path directory name. And to get the labels, use this function, which is use the parent's path name. And so with that, that's enough to give you MNIST, for instance. And so once you've done this, you end up with a data bunch. And as I mentioned before, everything has a show batch. So one of the nice things is it makes it very easy for you to look at your data, regardless of whether it's tabular or collaborative filtering or vision or text or even audio. If it was audio, it would show you a spectrogram and let you play the sound. So you can do custom labeling with data blocks by using, for example, a regular expression labeler. You can get your labels from an external file or data frame, and they could be multi-labels. So this thing here knows it's a multi-label classification task, so it's automatically put a semicolon between each label. Again, it's still basically just three lines of code to define the data block. So here's a data block for segmentation. And you can see, really, the only thing I had to change here was that my dependent variable has been changed from category to pillow mask. And again, automatically, I show batch works, and we can train a model from that straight away as well. You could do key points. So here I've just changed my dependent variable to tensor point, and so now it knows how to behave with that. Object detection. So now I changed my dependent variable to bounding box. And you can see I've got my bounding boxes here. Text. And so forth. So actually going back, I have a couple questions if it's a good idea. So the code, you've got the Xs and Ys, and these both, it sounds like these different data types roughly conform to a protocol. Yep. We're going to get to that in a moment. Absolutely. That's an excellent way to think of it. And actually, this is the way it looked about three weeks ago. Now it looks even more like a protocol. So, yes, this is where it all comes from, which is the foundation APIs. And this is the bit that I think is the most relevant to Swift. A lot of this, I think, would be a lot easier to write in Swift. So the first thing that we added to PyTorch was object oriented tenses. For too long, we've all been satisfied with a data type called tensor, which has no semantics to it. And so those tenses actually represent something like a sentence or a picture of a cat or a recording of somebody saying something. So why can't I take one of those tenses and say dot flip or dot rotate or dot resample or dot translate to German? Well, the answer is you can't because it's just a tensor without a type. So we have added types to tenses. So you can now have a tensor image, tensor point, tensor bounding box, and you can define a flip left right for each. And so this is some of the source code from we've written our own computer vision library. So that now you can say flip LR and it flips the puppy. And if it was a key point, it would flip the key point. If it was a bounding box, it would flip the bounding boxes. And so forth. So this is an example of how tenses which carry around semantics are nice. It's also nice that I didn't just say dot show, right? So dot show is something that's defined for all fast AIV to tensor types. And it will just display that tensor. It could even be a tuple containing a tensor and some bounding boxes and some bounding box classes. Whatever it is, it will be able to display it. It will be able to convert it into batches for modeling and so forth. So, you know, with that, we can now create, for example, a random transformation called flip item. And we can say that the encoding of that random transformation is defined for a pillow image or any tensor type. And in each case, the implementation is simply to call X dot flip LR. Or we could do the dihedral symmetry transforms in the same way. Before we call, grab a random number between zero and seven to decide which of the eight transposes to do. And then encode score X dot what's dihedral with that thing we just got. And so now we can call that transform a bunch of times and each time we'll get back a different random augmentation. So a lot of these things become nice and easy. Hey Jeremy, Maxim asked, why isn't tensor backing data structure for an image type? I think tensor image is a tensor which is an image type. Why isn't, he says, why isn't tensor a backing why not have a different type named image, I guess, that has a tensor inside of it? Do you mean why inherit rather than compose? Apparently yes that. Yeah. So inheritance I mean, you can do both and you can create identical APIs. Inheritance just has the benefit that all the normal stuff you can do with the tensor, you can do with a tensor that happens to be an image. So just because a tensor is an image doesn't mean you now don't want to be able to do fancy indexing to it or do an LUD composition of it or stack it with other tensors across some axis. So basically a tensor image ought to have all the behavior of a tensor plus additional behavior. So that's why we used inheritance. We have a version that uses composition as well and it uses Python's nice get atria functionality to pass on all of the behavior of tensor but it comes up more nicely in Python when you do inheritance and actually the PyTorch team has decided to officially implement semantic tensor subtypes now and so hopefully in the next version of PyTorch you won't have to use the extremely ugly hacks that we had to use to make this work. You'll be able to use the real ones. And hopefully you'll see in TorchVision some of these ideas will be brought over there. Can I ask you, so how does the type propagate? So if you do arithmetic on image tensor do you get an image tensor back? So Chris and I had a conversation about this a few months ago and I said I'm banging my head around this issue of types not carrying around their behavior and Chris casually mentioned oh yes that thing is called higher kind of types. So I went home and that was one of these phrases that I thought only functional programming dweebs talked about and I would never care about. Because it actually matters a lot and it's basically the idea that if you have a tensor image and you add one to it you want to get back a tensor image because it should be an image that's a bit brighter rather than something that loses its type. So we implemented our own again hacky partial higher kind of type implementation in Fast.ai V2. So any of these things that you do to a tensor of a subtype you will nearly always get back the correctly subtyped tensor. I mean I saw that PyTorch recently started talking about their named indexing extensions for their tensors as well and I see that the similar kind of challenge there where when you start doing arithmetic and other things like that on a tensor that has named dimensions you want to propagate those along. Yeah so we haven't started using that yet because it hasn't quite landed it's stable. But yeah it's we talked to the PyTorch team at the DevCon and we certainly are planning to bring these ideas together. They're all thought on orbit related concerns. Yeah I just mean that I assume that that feature has the same problem, the same challenge. I assume so. It would be interesting to see what they do. Yeah. Yeah it would. Yeah so you know it's kind of nice not only do we get to be able to say.show batch but you can even go.show results. And in this case it knows what the independent variables type is, it knows what the dependent variables type is and it even knows things like hey for a classification task those two things should be the same and if they're not by default I will highlight them in the report. So these lower level foundations are the things that drive our ability to easily add this level functionality. So you know this is the kind of ugly stuff we wouldn't have to do in Swift. We had to write our own type dispatch system. So that we can annotate things with types and those type annotations are actually semantic and so we now have joyfully modern idea of function overloading in Python which has made life a lot easier and we already have a lot of that. Do you have many users that are using this yet? It's still pre-released, it's not even alpha. But there is a enthusiastic early adopter community who is using it. So for example the user contributed audio library has already been ported to it. I've also built a medical imaging library on top of it and have written a series of five notebooks showing how to do CT scan analysis with it. So it's kind of like it works and I was curious what your users think of it because there's this very strongly held conception that Python folks hate types and you're kind of providing a little bit of typing and I'm curious how they react to that. The extremely biased subset of early adopter fast AI enthusiasts who are using it love it. They tend to be people who have gone pretty deep in the past. So for example my friend Andrew Shaw who wrote something called Music Autobot which is one of the coolest things in the world in case you haven't seen it yet which is something where you can generate music using a neural network, you can put in some melodies and some chords and it will auto complete some additional melodies and chords or you can put in a melody and it will automatically add chords or you can add chords or create melody and so he had to write his own MIDI library fast AI.MIDI. He rewrote it in V2 and he said it's just like so much easier thanks to those mid tier APIs. So yeah at this stage I was just going to jump in quick. I've been helping with some of the audio stuff and it's been really awesome so it makes things a lot more flexible than version one so that's probably my favorite thing about it is everything can be interchanged. Nothing is like well it's got to be this way because that's how it is. Thanks. Another piece of the transform of the foundation is the partially reversible composed function pipeline dispatched over collections which really rolls off the tongue if we call them transform and pipeline. Basically the idea is that the way you kind of want function dispatch to work and function composition to work in deep learning is a little different to other places. There's a couple of things. The first is you often want to dispatch over tuples and what I mean by that is if you have a function called flip left right and you have a tuple representing a mini batch where your independent variable is a picture and your dependent variable is a set of bounding boxes if you say flip left right on that tuple you would expect both the X and the Y to be flipped and to be flipped with the type appropriate method. So our transforms will automatically send each element of a tuple to the function separately and will dispatch according to their types automatically. We've mentioned type retention so the kind of basic type stuff we need. One interesting thing is not only encoding so in other words applying the function you often need to be able to decode which is to de-apply the function. So for example a categorization transform would take the word dog and convert it to the number one perhaps which is what you need for modeling but then when your predictions come back you need to know what one represents so you need to reverse that transform and turn one back into dog. Often those transforms also need data driven setup for example in that example of dog becoming one there needs to be something that actually creates that vocab automatically recognizing what are all the possible classes so it can create a different index for each one and then apply that to the validation set. And quite often these transforms also have some kind of state such as the vocab. So we built this bunch of stuff that builds on top of each other at the lowest level is a class called transform which is a callable which also has a decode does the type retention higher kind of type thing and does the dispatch over tuples by default. So then a pipeline is something that does function composition over transforms and it knows about for example setting up transforms and like setting up transforms in a pipeline is a bit tricky because you have to make sure that at each level of the pipeline only the previous steps have been applied before you set up the next step so it does little things like that. And then we have something that applies a pipeline to a collection to give you an indexable lazily transformed collection. And then you can do those in parallel to get back an independent variable for instance. And then finally we've built a data loader which will apply these things in parallel and create collated batches. So in the end all this stuff makes a lot of things much easier. For example the language model data loader in fast.ai v1 was like pages of code in tensorflow it's pages of code in fast.ai v2 it's less than a screen of code by leveraging these powerful abstractions and foundations. So then finally and again this is something I think Swift will be great for we worked really hard to make everything extremely well optimized. So for example preprocessing and natural language processing we created a parallel generator in Python which you can then basically pass a class to that finds some setup and a call and it can automatically parallelize that. So for example tokenization is done in parallel in a pretty memory efficient way. But perhaps the thing I'm most excited about both in Python and Swift is the optimized pipeline running on the GPU. So all of the pretty much all of the transforms we've done can and by default do run on the GPU. So for example when you do the flip left right I showed you earlier will actually run on the GPU. As well warp as well zoom as well even things like crop. So one of the basics of this is the affine coordinate transform which uses affine grid and grid sample which are very powerful PyTorch functions which would be great things to actually write in Swift for tensorflow's new meta programming because they don't exist in tensorflow or at least not in any very complete way. But with these basic ideas we can create this affine coordinate transform that lets us do a very wide range of data augmentations in parallel on the GPU. For those of you that know about the Dali library that we created this provides a lot of the same benefits as Dali it's pretty similar in terms of its performance but the nice thing is all the stuff you write you write it in Python not in CUDA. So with Dali if they don't have the exact transformation you want and there's a pretty high chance that they won't then you're stuck. Or else with fast AIV2 you can write your own in a few lines of Python you can test it out in a Jupyter notebook it makes life super easy. So this kind of stuff you know I feel like because Swift is a much faster more hackable language than Python or at least hackable in the sense of performance I guess not as hackable in terms of its type system necessarily. I feel like we can kind of build even more powerful foundations and pipelines and you know like a real Swift for TensorFlow computer vision library you know leveraging the metaprogramming and leveraging Swift numerics stuff like that I think would be super cool.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 4.0, "text": " Basically, every time Sylvain and I found something that", "tokens": [8537, 11, 633, 565, 3902, 14574, 491, 293, 286, 1352, 746, 300], "temperature": 0.0, "avg_logprob": -0.1573103973545979, "compression_ratio": 1.5720338983050848, "no_speech_prob": 0.028405264019966125}, {"id": 1, "seek": 0, "start": 4.0, "end": 8.0, "text": " didn't quite work the way we wanted it at any part of the stack,", "tokens": [994, 380, 1596, 589, 264, 636, 321, 1415, 309, 412, 604, 644, 295, 264, 8630, 11], "temperature": 0.0, "avg_logprob": -0.1573103973545979, "compression_ratio": 1.5720338983050848, "no_speech_prob": 0.028405264019966125}, {"id": 2, "seek": 0, "start": 8.0, "end": 12.0, "text": " we wrote our own. So it's kind of like building something with no particular", "tokens": [321, 4114, 527, 1065, 13, 407, 309, 311, 733, 295, 411, 2390, 746, 365, 572, 1729], "temperature": 0.0, "avg_logprob": -0.1573103973545979, "compression_ratio": 1.5720338983050848, "no_speech_prob": 0.028405264019966125}, {"id": 3, "seek": 0, "start": 12.0, "end": 16.0, "text": " deadline and trying to do everything the very, very best we can.", "tokens": [20615, 293, 1382, 281, 360, 1203, 264, 588, 11, 588, 1151, 321, 393, 13], "temperature": 0.0, "avg_logprob": -0.1573103973545979, "compression_ratio": 1.5720338983050848, "no_speech_prob": 0.028405264019966125}, {"id": 4, "seek": 0, "start": 16.0, "end": 20.0, "text": " So the layered API of Fast.ai V2", "tokens": [407, 264, 34666, 9362, 295, 15968, 13, 1301, 691, 17], "temperature": 0.0, "avg_logprob": -0.1573103973545979, "compression_ratio": 1.5720338983050848, "no_speech_prob": 0.028405264019966125}, {"id": 5, "seek": 0, "start": 20.0, "end": 24.0, "text": " starts at the applications layer", "tokens": [3719, 412, 264, 5821, 4583], "temperature": 0.0, "avg_logprob": -0.1573103973545979, "compression_ratio": 1.5720338983050848, "no_speech_prob": 0.028405264019966125}, {"id": 6, "seek": 0, "start": 24.0, "end": 28.0, "text": " which is where most beginners will start.", "tokens": [597, 307, 689, 881, 26992, 486, 722, 13], "temperature": 0.0, "avg_logprob": -0.1573103973545979, "compression_ratio": 1.5720338983050848, "no_speech_prob": 0.028405264019966125}, {"id": 7, "seek": 2800, "start": 28.0, "end": 32.0, "text": " And it looks a lot like Fast.ai V1", "tokens": [400, 309, 1542, 257, 688, 411, 15968, 13, 1301, 691, 16], "temperature": 0.0, "avg_logprob": -0.06354107108770632, "compression_ratio": 1.5275590551181102, "no_speech_prob": 5.8254823670722544e-05}, {"id": 8, "seek": 2800, "start": 32.0, "end": 36.0, "text": " which is the released version of the software that people have seen before. But V2", "tokens": [597, 307, 264, 4736, 3037, 295, 264, 4722, 300, 561, 362, 1612, 949, 13, 583, 691, 17], "temperature": 0.0, "avg_logprob": -0.06354107108770632, "compression_ratio": 1.5275590551181102, "no_speech_prob": 5.8254823670722544e-05}, {"id": 9, "seek": 2800, "start": 36.0, "end": 40.0, "text": " everything is rewritten from scratch. It's totally new, there's no code borrowed.", "tokens": [1203, 307, 319, 26859, 490, 8459, 13, 467, 311, 3879, 777, 11, 456, 311, 572, 3089, 26805, 13], "temperature": 0.0, "avg_logprob": -0.06354107108770632, "compression_ratio": 1.5275590551181102, "no_speech_prob": 5.8254823670722544e-05}, {"id": 10, "seek": 2800, "start": 40.0, "end": 44.0, "text": " But the top level API looks quite similar. The idea is that in", "tokens": [583, 264, 1192, 1496, 9362, 1542, 1596, 2531, 13, 440, 1558, 307, 300, 294], "temperature": 0.0, "avg_logprob": -0.06354107108770632, "compression_ratio": 1.5275590551181102, "no_speech_prob": 5.8254823670722544e-05}, {"id": 11, "seek": 2800, "start": 44.0, "end": 48.0, "text": " one, two, three, four lines of code", "tokens": [472, 11, 732, 11, 1045, 11, 1451, 3876, 295, 3089], "temperature": 0.0, "avg_logprob": -0.06354107108770632, "compression_ratio": 1.5275590551181102, "no_speech_prob": 5.8254823670722544e-05}, {"id": 12, "seek": 2800, "start": 48.0, "end": 52.0, "text": " you can create a state of the art computer vision", "tokens": [291, 393, 1884, 257, 1785, 295, 264, 1523, 3820, 5201], "temperature": 0.0, "avg_logprob": -0.06354107108770632, "compression_ratio": 1.5275590551181102, "no_speech_prob": 5.8254823670722544e-05}, {"id": 13, "seek": 2800, "start": 52.0, "end": 56.0, "text": " classifier including transfer learning.", "tokens": [1508, 9902, 3009, 5003, 2539, 13], "temperature": 0.0, "avg_logprob": -0.06354107108770632, "compression_ratio": 1.5275590551181102, "no_speech_prob": 5.8254823670722544e-05}, {"id": 14, "seek": 5600, "start": 56.0, "end": 60.0, "text": " With nearly the same one, two,", "tokens": [2022, 6217, 264, 912, 472, 11, 732, 11], "temperature": 0.0, "avg_logprob": -0.102503704423664, "compression_ratio": 1.79296875, "no_speech_prob": 1.2605088159034494e-05}, {"id": 15, "seek": 5600, "start": 60.0, "end": 64.0, "text": " three, four lines of code, oh, five lines of code in this case", "tokens": [1045, 11, 1451, 3876, 295, 3089, 11, 1954, 11, 1732, 3876, 295, 3089, 294, 341, 1389], "temperature": 0.0, "avg_logprob": -0.102503704423664, "compression_ratio": 1.79296875, "no_speech_prob": 1.2605088159034494e-05}, {"id": 16, "seek": 5600, "start": 64.0, "end": 68.0, "text": " because we're also displaying, you can create a state of the art", "tokens": [570, 321, 434, 611, 36834, 11, 291, 393, 1884, 257, 1785, 295, 264, 1523], "temperature": 0.0, "avg_logprob": -0.102503704423664, "compression_ratio": 1.79296875, "no_speech_prob": 1.2605088159034494e-05}, {"id": 17, "seek": 5600, "start": 68.0, "end": 72.0, "text": " segmentation model. And actually, when I say state of the art, for example, this segmentation", "tokens": [9469, 399, 2316, 13, 400, 767, 11, 562, 286, 584, 1785, 295, 264, 1523, 11, 337, 1365, 11, 341, 9469, 399], "temperature": 0.0, "avg_logprob": -0.102503704423664, "compression_ratio": 1.79296875, "no_speech_prob": 1.2605088159034494e-05}, {"id": 18, "seek": 5600, "start": 72.0, "end": 76.0, "text": " model is to the best of my knowledge still better than any published result", "tokens": [2316, 307, 281, 264, 1151, 295, 452, 3601, 920, 1101, 813, 604, 6572, 1874], "temperature": 0.0, "avg_logprob": -0.102503704423664, "compression_ratio": 1.79296875, "no_speech_prob": 1.2605088159034494e-05}, {"id": 19, "seek": 5600, "start": 76.0, "end": 80.0, "text": " on this particular Canvit data set. So these five lines of code are super", "tokens": [322, 341, 1729, 1664, 10398, 1412, 992, 13, 407, 613, 1732, 3876, 295, 3089, 366, 1687], "temperature": 0.0, "avg_logprob": -0.102503704423664, "compression_ratio": 1.79296875, "no_speech_prob": 1.2605088159034494e-05}, {"id": 20, "seek": 5600, "start": 80.0, "end": 84.0, "text": " good five lines of code. And as you can see, it includes", "tokens": [665, 1732, 3876, 295, 3089, 13, 400, 382, 291, 393, 536, 11, 309, 5974], "temperature": 0.0, "avg_logprob": -0.102503704423664, "compression_ratio": 1.79296875, "no_speech_prob": 1.2605088159034494e-05}, {"id": 21, "seek": 8400, "start": 84.0, "end": 88.0, "text": " a line of code which if you say show batch, it will display", "tokens": [257, 1622, 295, 3089, 597, 498, 291, 584, 855, 15245, 11, 309, 486, 4674], "temperature": 0.0, "avg_logprob": -0.0863219928741455, "compression_ratio": 1.5583333333333333, "no_speech_prob": 6.603995279874653e-05}, {"id": 22, "seek": 8400, "start": 88.0, "end": 92.0, "text": " your data in an appropriate format. In this case, showing", "tokens": [428, 1412, 294, 364, 6854, 7877, 13, 682, 341, 1389, 11, 4099], "temperature": 0.0, "avg_logprob": -0.0863219928741455, "compression_ratio": 1.5583333333333333, "no_speech_prob": 6.603995279874653e-05}, {"id": 23, "seek": 8400, "start": 92.0, "end": 96.0, "text": " you segmentation, a picture, and the color coded pixels", "tokens": [291, 9469, 399, 11, 257, 3036, 11, 293, 264, 2017, 34874, 18668], "temperature": 0.0, "avg_logprob": -0.0863219928741455, "compression_ratio": 1.5583333333333333, "no_speech_prob": 6.603995279874653e-05}, {"id": 24, "seek": 8400, "start": 96.0, "end": 100.0, "text": " overlaid on top of the picture.", "tokens": [670, 875, 327, 322, 1192, 295, 264, 3036, 13], "temperature": 0.0, "avg_logprob": -0.0863219928741455, "compression_ratio": 1.5583333333333333, "no_speech_prob": 6.603995279874653e-05}, {"id": 25, "seek": 8400, "start": 100.0, "end": 104.0, "text": " The same basic four lines of code will do text classification.", "tokens": [440, 912, 3875, 1451, 3876, 295, 3089, 486, 360, 2487, 21538, 13], "temperature": 0.0, "avg_logprob": -0.0863219928741455, "compression_ratio": 1.5583333333333333, "no_speech_prob": 6.603995279874653e-05}, {"id": 26, "seek": 8400, "start": 104.0, "end": 108.0, "text": " So here's the basis of ULM fit", "tokens": [407, 510, 311, 264, 5143, 295, 624, 43, 44, 3318], "temperature": 0.0, "avg_logprob": -0.0863219928741455, "compression_ratio": 1.5583333333333333, "no_speech_prob": 6.603995279874653e-05}, {"id": 27, "seek": 8400, "start": 108.0, "end": 112.0, "text": " which is a system that we developed and wrote up along with Sebastian Ruda", "tokens": [597, 307, 257, 1185, 300, 321, 4743, 293, 4114, 493, 2051, 365, 31102, 497, 11152], "temperature": 0.0, "avg_logprob": -0.0863219928741455, "compression_ratio": 1.5583333333333333, "no_speech_prob": 6.603995279874653e-05}, {"id": 28, "seek": 11200, "start": 112.0, "end": 116.0, "text": " for transfer learning in natural language processing.", "tokens": [337, 5003, 2539, 294, 3303, 2856, 9007, 13], "temperature": 0.0, "avg_logprob": -0.07597876062580183, "compression_ratio": 1.5731707317073171, "no_speech_prob": 3.320803079986945e-05}, {"id": 29, "seek": 11200, "start": 116.0, "end": 120.0, "text": " And as you can see in here, this is working on IMDB on a single", "tokens": [400, 382, 291, 393, 536, 294, 510, 11, 341, 307, 1364, 322, 21463, 27735, 322, 257, 2167], "temperature": 0.0, "avg_logprob": -0.07597876062580183, "compression_ratio": 1.5731707317073171, "no_speech_prob": 3.320803079986945e-05}, {"id": 30, "seek": 11200, "start": 120.0, "end": 124.0, "text": " epoch in four minutes. The accuracy here is basically", "tokens": [30992, 339, 294, 1451, 2077, 13, 440, 14170, 510, 307, 1936], "temperature": 0.0, "avg_logprob": -0.07597876062580183, "compression_ratio": 1.5731707317073171, "no_speech_prob": 3.320803079986945e-05}, {"id": 31, "seek": 11200, "start": 124.0, "end": 128.0, "text": " what was the state of the art as of a couple of years ago.", "tokens": [437, 390, 264, 1785, 295, 264, 1523, 382, 295, 257, 1916, 295, 924, 2057, 13], "temperature": 0.0, "avg_logprob": -0.07597876062580183, "compression_ratio": 1.5731707317073171, "no_speech_prob": 3.320803079986945e-05}, {"id": 32, "seek": 11200, "start": 128.0, "end": 132.0, "text": " Time series analysis, same deal.", "tokens": [6161, 2638, 5215, 11, 912, 2028, 13], "temperature": 0.0, "avg_logprob": -0.07597876062580183, "compression_ratio": 1.5731707317073171, "no_speech_prob": 3.320803079986945e-05}, {"id": 33, "seek": 11200, "start": 132.0, "end": 136.0, "text": " Basically, a few lines of code, nearly exactly the same lines of code", "tokens": [8537, 11, 257, 1326, 3876, 295, 3089, 11, 6217, 2293, 264, 912, 3876, 295, 3089], "temperature": 0.0, "avg_logprob": -0.07597876062580183, "compression_ratio": 1.5731707317073171, "no_speech_prob": 3.320803079986945e-05}, {"id": 34, "seek": 11200, "start": 136.0, "end": 140.0, "text": " and you'll get a great result from your tabular data.", "tokens": [293, 291, 603, 483, 257, 869, 1874, 490, 428, 4421, 1040, 1412, 13], "temperature": 0.0, "avg_logprob": -0.07597876062580183, "compression_ratio": 1.5731707317073171, "no_speech_prob": 3.320803079986945e-05}, {"id": 35, "seek": 14000, "start": 140.0, "end": 144.0, "text": " And ditto for collaborative filtering. So the high", "tokens": [400, 274, 34924, 337, 16555, 30822, 13, 407, 264, 1090], "temperature": 0.0, "avg_logprob": -0.06075868152436756, "compression_ratio": 1.4957264957264957, "no_speech_prob": 3.168769399053417e-05}, {"id": 36, "seek": 14000, "start": 144.0, "end": 148.0, "text": " level API for fast AIV2", "tokens": [1496, 9362, 337, 2370, 7318, 53, 17], "temperature": 0.0, "avg_logprob": -0.06075868152436756, "compression_ratio": 1.4957264957264957, "no_speech_prob": 3.168769399053417e-05}, {"id": 37, "seek": 14000, "start": 148.0, "end": 152.0, "text": " is designed to be something where regardless of what application", "tokens": [307, 4761, 281, 312, 746, 689, 10060, 295, 437, 3861], "temperature": 0.0, "avg_logprob": -0.06075868152436756, "compression_ratio": 1.4957264957264957, "no_speech_prob": 3.168769399053417e-05}, {"id": 38, "seek": 14000, "start": 152.0, "end": 156.0, "text": " you're working on, you can get a great result from it using", "tokens": [291, 434, 1364, 322, 11, 291, 393, 483, 257, 869, 1874, 490, 309, 1228], "temperature": 0.0, "avg_logprob": -0.06075868152436756, "compression_ratio": 1.4957264957264957, "no_speech_prob": 3.168769399053417e-05}, {"id": 39, "seek": 14000, "start": 156.0, "end": 160.0, "text": " sensible defaults and carefully selected hyperparameters", "tokens": [25380, 7576, 82, 293, 7500, 8209, 9848, 2181, 335, 6202], "temperature": 0.0, "avg_logprob": -0.06075868152436756, "compression_ratio": 1.4957264957264957, "no_speech_prob": 3.168769399053417e-05}, {"id": 40, "seek": 14000, "start": 160.0, "end": 164.0, "text": " automatically largely done for you", "tokens": [6772, 11611, 1096, 337, 291], "temperature": 0.0, "avg_logprob": -0.06075868152436756, "compression_ratio": 1.4957264957264957, "no_speech_prob": 3.168769399053417e-05}, {"id": 41, "seek": 14000, "start": 164.0, "end": 168.0, "text": " for the most common kinds of problems that people look at.", "tokens": [337, 264, 881, 2689, 3685, 295, 2740, 300, 561, 574, 412, 13], "temperature": 0.0, "avg_logprob": -0.06075868152436756, "compression_ratio": 1.4957264957264957, "no_speech_prob": 3.168769399053417e-05}, {"id": 42, "seek": 16800, "start": 168.0, "end": 172.0, "text": " And that bit doesn't look that different to V1, but", "tokens": [400, 300, 857, 1177, 380, 574, 300, 819, 281, 691, 16, 11, 457], "temperature": 0.0, "avg_logprob": -0.046256404562094774, "compression_ratio": 1.592156862745098, "no_speech_prob": 4.0045521018328145e-05}, {"id": 43, "seek": 16800, "start": 172.0, "end": 176.0, "text": " understanding how we get to that is kind of interesting", "tokens": [3701, 577, 321, 483, 281, 300, 307, 733, 295, 1880], "temperature": 0.0, "avg_logprob": -0.046256404562094774, "compression_ratio": 1.592156862745098, "no_speech_prob": 4.0045521018328145e-05}, {"id": 44, "seek": 16800, "start": 176.0, "end": 180.0, "text": " and involves getting deeper and deeper.", "tokens": [293, 11626, 1242, 7731, 293, 7731, 13], "temperature": 0.0, "avg_logprob": -0.046256404562094774, "compression_ratio": 1.592156862745098, "no_speech_prob": 4.0045521018328145e-05}, {"id": 45, "seek": 16800, "start": 180.0, "end": 184.0, "text": " This approach though does work super well", "tokens": [639, 3109, 1673, 775, 589, 1687, 731], "temperature": 0.0, "avg_logprob": -0.046256404562094774, "compression_ratio": 1.592156862745098, "no_speech_prob": 4.0045521018328145e-05}, {"id": 46, "seek": 16800, "start": 184.0, "end": 188.0, "text": " and partly it's because this is based on quite a few years of research", "tokens": [293, 17031, 309, 311, 570, 341, 307, 2361, 322, 1596, 257, 1326, 924, 295, 2132], "temperature": 0.0, "avg_logprob": -0.046256404562094774, "compression_ratio": 1.592156862745098, "no_speech_prob": 4.0045521018328145e-05}, {"id": 47, "seek": 16800, "start": 188.0, "end": 192.0, "text": " to figure out what are the best ways to solve various problems along the way", "tokens": [281, 2573, 484, 437, 366, 264, 1151, 2098, 281, 5039, 3683, 2740, 2051, 264, 636], "temperature": 0.0, "avg_logprob": -0.046256404562094774, "compression_ratio": 1.592156862745098, "no_speech_prob": 4.0045521018328145e-05}, {"id": 48, "seek": 16800, "start": 192.0, "end": 196.0, "text": " and when people actually try using fast AI, they're often surprised.", "tokens": [293, 562, 561, 767, 853, 1228, 2370, 7318, 11, 436, 434, 2049, 6100, 13], "temperature": 0.0, "avg_logprob": -0.046256404562094774, "compression_ratio": 1.592156862745098, "no_speech_prob": 4.0045521018328145e-05}, {"id": 49, "seek": 19600, "start": 196.0, "end": 200.0, "text": " So this person posted on our forum that they've been working in TF2 for a", "tokens": [407, 341, 954, 9437, 322, 527, 17542, 300, 436, 600, 668, 1364, 294, 40964, 17, 337, 257], "temperature": 0.0, "avg_logprob": -0.07629620733339924, "compression_ratio": 1.6699346405228759, "no_speech_prob": 2.177715941797942e-05}, {"id": 50, "seek": 19600, "start": 200.0, "end": 204.0, "text": " while and for some reason they couldn't figure out all of their models", "tokens": [1339, 293, 337, 512, 1778, 436, 2809, 380, 2573, 484, 439, 295, 641, 5245], "temperature": 0.0, "avg_logprob": -0.07629620733339924, "compression_ratio": 1.6699346405228759, "no_speech_prob": 2.177715941797942e-05}, {"id": 51, "seek": 19600, "start": 204.0, "end": 208.0, "text": " are suddenly working much better. And the answer is basically they're getting", "tokens": [366, 5800, 1364, 709, 1101, 13, 400, 264, 1867, 307, 1936, 436, 434, 1242], "temperature": 0.0, "avg_logprob": -0.07629620733339924, "compression_ratio": 1.6699346405228759, "no_speech_prob": 2.177715941797942e-05}, {"id": 52, "seek": 19600, "start": 208.0, "end": 212.0, "text": " all these nice kind of curated best practices.", "tokens": [439, 613, 1481, 733, 295, 47851, 1151, 7525, 13], "temperature": 0.0, "avg_logprob": -0.07629620733339924, "compression_ratio": 1.6699346405228759, "no_speech_prob": 2.177715941797942e-05}, {"id": 53, "seek": 19600, "start": 212.0, "end": 216.0, "text": " And somebody else on Twitter saw that and said, yep, we found the same thing.", "tokens": [400, 2618, 1646, 322, 5794, 1866, 300, 293, 848, 11, 18633, 11, 321, 1352, 264, 912, 551, 13], "temperature": 0.0, "avg_logprob": -0.07629620733339924, "compression_ratio": 1.6699346405228759, "no_speech_prob": 2.177715941797942e-05}, {"id": 54, "seek": 19600, "start": 216.0, "end": 220.0, "text": " We were trying TensorFlow, spent months tweaking and then we switched to fast AI.", "tokens": [492, 645, 1382, 37624, 11, 4418, 2493, 6986, 2456, 293, 550, 321, 16858, 281, 2370, 7318, 13], "temperature": 0.0, "avg_logprob": -0.07629620733339924, "compression_ratio": 1.6699346405228759, "no_speech_prob": 2.177715941797942e-05}, {"id": 55, "seek": 19600, "start": 220.0, "end": 224.0, "text": " A couple of days later we were getting better results. So these kind of carefully", "tokens": [316, 1916, 295, 1708, 1780, 321, 645, 1242, 1101, 3542, 13, 407, 613, 733, 295, 7500], "temperature": 0.0, "avg_logprob": -0.07629620733339924, "compression_ratio": 1.6699346405228759, "no_speech_prob": 2.177715941797942e-05}, {"id": 56, "seek": 22400, "start": 224.0, "end": 228.0, "text": " curated defaults and algorithms and high level", "tokens": [47851, 7576, 82, 293, 14642, 293, 1090, 1496], "temperature": 0.0, "avg_logprob": -0.08249929899810463, "compression_ratio": 1.6074380165289257, "no_speech_prob": 3.2691161322873086e-05}, {"id": 57, "seek": 22400, "start": 228.0, "end": 232.0, "text": " APIs that do things right for you the first time, even for", "tokens": [21445, 300, 360, 721, 558, 337, 291, 264, 700, 565, 11, 754, 337], "temperature": 0.0, "avg_logprob": -0.08249929899810463, "compression_ratio": 1.6074380165289257, "no_speech_prob": 3.2691161322873086e-05}, {"id": 58, "seek": 22400, "start": 232.0, "end": 236.0, "text": " experienced practitioners can give you better results faster.", "tokens": [6751, 25742, 393, 976, 291, 1101, 3542, 4663, 13], "temperature": 0.0, "avg_logprob": -0.08249929899810463, "compression_ratio": 1.6074380165289257, "no_speech_prob": 3.2691161322873086e-05}, {"id": 59, "seek": 22400, "start": 236.0, "end": 240.0, "text": " But it's actually the other pieces that are more", "tokens": [583, 309, 311, 767, 264, 661, 3755, 300, 366, 544], "temperature": 0.0, "avg_logprob": -0.08249929899810463, "compression_ratio": 1.6074380165289257, "no_speech_prob": 3.2691161322873086e-05}, {"id": 60, "seek": 22400, "start": 240.0, "end": 244.0, "text": " I think interesting for a Swift conversation because as the", "tokens": [286, 519, 1880, 337, 257, 25539, 3761, 570, 382, 264], "temperature": 0.0, "avg_logprob": -0.08249929899810463, "compression_ratio": 1.6074380165289257, "no_speech_prob": 3.2691161322873086e-05}, {"id": 61, "seek": 22400, "start": 244.0, "end": 248.0, "text": " deeper we go into how we make that work, the more", "tokens": [7731, 321, 352, 666, 577, 321, 652, 300, 589, 11, 264, 544], "temperature": 0.0, "avg_logprob": -0.08249929899810463, "compression_ratio": 1.6074380165289257, "no_speech_prob": 3.2691161322873086e-05}, {"id": 62, "seek": 22400, "start": 248.0, "end": 252.0, "text": " stuff you'll see which will be a great fit I think with Swift.", "tokens": [1507, 291, 603, 536, 597, 486, 312, 257, 869, 3318, 286, 519, 365, 25539, 13], "temperature": 0.0, "avg_logprob": -0.08249929899810463, "compression_ratio": 1.6074380165289257, "no_speech_prob": 3.2691161322873086e-05}, {"id": 63, "seek": 25200, "start": 252.0, "end": 256.0, "text": " So the mid layer", "tokens": [407, 264, 2062, 4583], "temperature": 0.0, "avg_logprob": -0.08747176002053654, "compression_ratio": 1.6091370558375635, "no_speech_prob": 4.3287254811730236e-05}, {"id": 64, "seek": 25200, "start": 256.0, "end": 260.0, "text": " API is something which is largely new to fast", "tokens": [9362, 307, 746, 597, 307, 11611, 777, 281, 2370], "temperature": 0.0, "avg_logprob": -0.08747176002053654, "compression_ratio": 1.6091370558375635, "no_speech_prob": 4.3287254811730236e-05}, {"id": 65, "seek": 25200, "start": 260.0, "end": 264.0, "text": " to actually I guess the foundation layer is new. So the mid layer", "tokens": [281, 767, 286, 2041, 264, 7030, 4583, 307, 777, 13, 407, 264, 2062, 4583], "temperature": 0.0, "avg_logprob": -0.08747176002053654, "compression_ratio": 1.6091370558375635, "no_speech_prob": 4.3287254811730236e-05}, {"id": 66, "seek": 25200, "start": 264.0, "end": 268.0, "text": " I guess I'd say is more rewritten for V1 and it contains", "tokens": [286, 2041, 286, 1116, 584, 307, 544, 319, 26859, 337, 691, 16, 293, 309, 8306], "temperature": 0.0, "avg_logprob": -0.08747176002053654, "compression_ratio": 1.6091370558375635, "no_speech_prob": 4.3287254811730236e-05}, {"id": 67, "seek": 25200, "start": 268.0, "end": 272.0, "text": " some of the things that make those high level APIs easy.", "tokens": [512, 295, 264, 721, 300, 652, 729, 1090, 1496, 21445, 1858, 13], "temperature": 0.0, "avg_logprob": -0.08747176002053654, "compression_ratio": 1.6091370558375635, "no_speech_prob": 4.3287254811730236e-05}, {"id": 68, "seek": 25200, "start": 272.0, "end": 276.0, "text": " One of the bits which is the most interesting", "tokens": [1485, 295, 264, 9239, 597, 307, 264, 881, 1880], "temperature": 0.0, "avg_logprob": -0.08747176002053654, "compression_ratio": 1.6091370558375635, "no_speech_prob": 4.3287254811730236e-05}, {"id": 69, "seek": 25200, "start": 276.0, "end": 280.0, "text": " is the training loop itself.", "tokens": [307, 264, 3097, 6367, 2564, 13], "temperature": 0.0, "avg_logprob": -0.08747176002053654, "compression_ratio": 1.6091370558375635, "no_speech_prob": 4.3287254811730236e-05}, {"id": 70, "seek": 28000, "start": 280.0, "end": 284.0, "text": " And I thank Sylvia for the set of slides we have for the training loop.", "tokens": [400, 286, 1309, 33349, 11617, 337, 264, 992, 295, 9788, 321, 362, 337, 264, 3097, 6367, 13], "temperature": 0.0, "avg_logprob": -0.08961176020758492, "compression_ratio": 1.737991266375546, "no_speech_prob": 3.8221009162953123e-05}, {"id": 71, "seek": 28000, "start": 284.0, "end": 288.0, "text": " This is what a training loop looks like in PyTorch.", "tokens": [639, 307, 437, 257, 3097, 6367, 1542, 411, 294, 9953, 51, 284, 339, 13], "temperature": 0.0, "avg_logprob": -0.08961176020758492, "compression_ratio": 1.737991266375546, "no_speech_prob": 3.8221009162953123e-05}, {"id": 72, "seek": 28000, "start": 288.0, "end": 292.0, "text": " We calculate some predictions, we get a loss,", "tokens": [492, 8873, 512, 21264, 11, 321, 483, 257, 4470, 11], "temperature": 0.0, "avg_logprob": -0.08961176020758492, "compression_ratio": 1.737991266375546, "no_speech_prob": 3.8221009162953123e-05}, {"id": 73, "seek": 28000, "start": 292.0, "end": 296.0, "text": " we do a backwards pass to get the gradients, we do an optimizer", "tokens": [321, 360, 257, 12204, 1320, 281, 483, 264, 2771, 2448, 11, 321, 360, 364, 5028, 6545], "temperature": 0.0, "avg_logprob": -0.08961176020758492, "compression_ratio": 1.737991266375546, "no_speech_prob": 3.8221009162953123e-05}, {"id": 74, "seek": 28000, "start": 296.0, "end": 300.0, "text": " step and then optionally we run time to time we'll zero the gradients", "tokens": [1823, 293, 550, 3614, 379, 321, 1190, 565, 281, 565, 321, 603, 4018, 264, 2771, 2448], "temperature": 0.0, "avg_logprob": -0.08961176020758492, "compression_ratio": 1.737991266375546, "no_speech_prob": 3.8221009162953123e-05}, {"id": 75, "seek": 28000, "start": 300.0, "end": 304.0, "text": " based on if we're doing when we're accumulating.", "tokens": [2361, 322, 498, 321, 434, 884, 562, 321, 434, 12989, 12162, 13], "temperature": 0.0, "avg_logprob": -0.08961176020758492, "compression_ratio": 1.737991266375546, "no_speech_prob": 3.8221009162953123e-05}, {"id": 76, "seek": 28000, "start": 304.0, "end": 308.0, "text": " So this is what that loop looks like. Run the", "tokens": [407, 341, 307, 437, 300, 6367, 1542, 411, 13, 8950, 264], "temperature": 0.0, "avg_logprob": -0.08961176020758492, "compression_ratio": 1.737991266375546, "no_speech_prob": 3.8221009162953123e-05}, {"id": 77, "seek": 30800, "start": 308.0, "end": 312.0, "text": " model, get the loss, do the gradients, step the optimizer, do that", "tokens": [2316, 11, 483, 264, 4470, 11, 360, 264, 2771, 2448, 11, 1823, 264, 5028, 6545, 11, 360, 300], "temperature": 0.0, "avg_logprob": -0.0798035789938534, "compression_ratio": 1.7652173913043478, "no_speech_prob": 1.593592605786398e-05}, {"id": 78, "seek": 30800, "start": 312.0, "end": 316.0, "text": " a bunch of times. But", "tokens": [257, 3840, 295, 1413, 13, 583], "temperature": 0.0, "avg_logprob": -0.0798035789938534, "compression_ratio": 1.7652173913043478, "no_speech_prob": 1.593592605786398e-05}, {"id": 79, "seek": 30800, "start": 316.0, "end": 320.0, "text": " you want to do something interesting, you'll need to add something to the loop", "tokens": [291, 528, 281, 360, 746, 1880, 11, 291, 603, 643, 281, 909, 746, 281, 264, 6367], "temperature": 0.0, "avg_logprob": -0.0798035789938534, "compression_ratio": 1.7652173913043478, "no_speech_prob": 1.593592605786398e-05}, {"id": 80, "seek": 30800, "start": 320.0, "end": 324.0, "text": " to do keeping track of your training statistics in", "tokens": [281, 360, 5145, 2837, 295, 428, 3097, 12523, 294], "temperature": 0.0, "avg_logprob": -0.0798035789938534, "compression_ratio": 1.7652173913043478, "no_speech_prob": 1.593592605786398e-05}, {"id": 81, "seek": 30800, "start": 324.0, "end": 328.0, "text": " TensorBoard or in fast progress or whatever. You might want", "tokens": [34306, 22493, 515, 420, 294, 2370, 4205, 420, 2035, 13, 509, 1062, 528], "temperature": 0.0, "avg_logprob": -0.0798035789938534, "compression_ratio": 1.7652173913043478, "no_speech_prob": 1.593592605786398e-05}, {"id": 82, "seek": 30800, "start": 328.0, "end": 332.0, "text": " to schedule various hyperparameters in various different ways.", "tokens": [281, 7567, 3683, 9848, 2181, 335, 6202, 294, 3683, 819, 2098, 13], "temperature": 0.0, "avg_logprob": -0.0798035789938534, "compression_ratio": 1.7652173913043478, "no_speech_prob": 1.593592605786398e-05}, {"id": 83, "seek": 30800, "start": 332.0, "end": 336.0, "text": " You might want to add various different types of categorization.", "tokens": [509, 1062, 528, 281, 909, 3683, 819, 3467, 295, 19250, 2144, 13], "temperature": 0.0, "avg_logprob": -0.0798035789938534, "compression_ratio": 1.7652173913043478, "no_speech_prob": 1.593592605786398e-05}, {"id": 84, "seek": 33600, "start": 336.0, "end": 340.0, "text": " You may want to do mixed precision training. You may want to do", "tokens": [509, 815, 528, 281, 360, 7467, 18356, 3097, 13, 509, 815, 528, 281, 360], "temperature": 0.0, "avg_logprob": -0.08817972720248028, "compression_ratio": 1.6983471074380165, "no_speech_prob": 5.862522812094539e-06}, {"id": 85, "seek": 33600, "start": 340.0, "end": 344.0, "text": " GANs. So this is a problem because either", "tokens": [460, 1770, 82, 13, 407, 341, 307, 257, 1154, 570, 2139], "temperature": 0.0, "avg_logprob": -0.08817972720248028, "compression_ratio": 1.6983471074380165, "no_speech_prob": 5.862522812094539e-06}, {"id": 86, "seek": 33600, "start": 344.0, "end": 348.0, "text": " you have to write a new training loop for every", "tokens": [291, 362, 281, 2464, 257, 777, 3097, 6367, 337, 633], "temperature": 0.0, "avg_logprob": -0.08817972720248028, "compression_ratio": 1.6983471074380165, "no_speech_prob": 5.862522812094539e-06}, {"id": 87, "seek": 33600, "start": 348.0, "end": 352.0, "text": " time you want to add a different tweak. Making all those tweaks work together then", "tokens": [565, 291, 528, 281, 909, 257, 819, 29879, 13, 14595, 439, 729, 46664, 589, 1214, 550], "temperature": 0.0, "avg_logprob": -0.08817972720248028, "compression_ratio": 1.6983471074380165, "no_speech_prob": 5.862522812094539e-06}, {"id": 88, "seek": 33600, "start": 352.0, "end": 356.0, "text": " becomes incredibly complicated.", "tokens": [3643, 6252, 6179, 13], "temperature": 0.0, "avg_logprob": -0.08817972720248028, "compression_ratio": 1.6983471074380165, "no_speech_prob": 5.862522812094539e-06}, {"id": 89, "seek": 33600, "start": 356.0, "end": 360.0, "text": " Or you try and write one training loop which does everything you can think of.", "tokens": [1610, 291, 853, 293, 2464, 472, 3097, 6367, 597, 775, 1203, 291, 393, 519, 295, 13], "temperature": 0.0, "avg_logprob": -0.08817972720248028, "compression_ratio": 1.6983471074380165, "no_speech_prob": 5.862522812094539e-06}, {"id": 90, "seek": 33600, "start": 360.0, "end": 364.0, "text": " This is the training loop for fast AI 0.7 which only did a tiny", "tokens": [639, 307, 264, 3097, 6367, 337, 2370, 7318, 1958, 13, 22, 597, 787, 630, 257, 5870], "temperature": 0.0, "avg_logprob": -0.08817972720248028, "compression_ratio": 1.6983471074380165, "no_speech_prob": 5.862522812094539e-06}, {"id": 91, "seek": 36400, "start": 364.0, "end": 368.0, "text": " subset of the things I just said but was still getting ridiculous.", "tokens": [25993, 295, 264, 721, 286, 445, 848, 457, 390, 920, 1242, 11083, 13], "temperature": 0.0, "avg_logprob": -0.07522885004679362, "compression_ratio": 1.6224066390041494, "no_speech_prob": 1.16589317258331e-05}, {"id": 92, "seek": 36400, "start": 368.0, "end": 372.0, "text": " Or you can add callbacks at each step.", "tokens": [1610, 291, 393, 909, 818, 17758, 412, 1184, 1823, 13], "temperature": 0.0, "avg_logprob": -0.07522885004679362, "compression_ratio": 1.6224066390041494, "no_speech_prob": 1.16589317258331e-05}, {"id": 93, "seek": 36400, "start": 372.0, "end": 376.0, "text": " Now the idea of callbacks has been around in deep learning for", "tokens": [823, 264, 1558, 295, 818, 17758, 575, 668, 926, 294, 2452, 2539, 337], "temperature": 0.0, "avg_logprob": -0.07522885004679362, "compression_ratio": 1.6224066390041494, "no_speech_prob": 1.16589317258331e-05}, {"id": 94, "seek": 36400, "start": 376.0, "end": 380.0, "text": " a long time, APIs. But what's very different about fast AI", "tokens": [257, 938, 565, 11, 21445, 13, 583, 437, 311, 588, 819, 466, 2370, 7318], "temperature": 0.0, "avg_logprob": -0.07522885004679362, "compression_ratio": 1.6224066390041494, "no_speech_prob": 1.16589317258331e-05}, {"id": 95, "seek": 36400, "start": 380.0, "end": 384.0, "text": " is that every callback is actually a two-way callback.", "tokens": [307, 300, 633, 818, 3207, 307, 767, 257, 732, 12, 676, 818, 3207, 13], "temperature": 0.0, "avg_logprob": -0.07522885004679362, "compression_ratio": 1.6224066390041494, "no_speech_prob": 1.16589317258331e-05}, {"id": 96, "seek": 36400, "start": 384.0, "end": 388.0, "text": " It can read absolutely everything. It can read gradients, parameters,", "tokens": [467, 393, 1401, 3122, 1203, 13, 467, 393, 1401, 2771, 2448, 11, 9834, 11], "temperature": 0.0, "avg_logprob": -0.07522885004679362, "compression_ratio": 1.6224066390041494, "no_speech_prob": 1.16589317258331e-05}, {"id": 97, "seek": 36400, "start": 388.0, "end": 392.0, "text": " data, so forth. And it can write them.", "tokens": [1412, 11, 370, 5220, 13, 400, 309, 393, 2464, 552, 13], "temperature": 0.0, "avg_logprob": -0.07522885004679362, "compression_ratio": 1.6224066390041494, "no_speech_prob": 1.16589317258331e-05}, {"id": 98, "seek": 39200, "start": 392.0, "end": 396.0, "text": " So it can actually change anything at any time.", "tokens": [407, 309, 393, 767, 1319, 1340, 412, 604, 565, 13], "temperature": 0.0, "avg_logprob": -0.05440631989509829, "compression_ratio": 1.6451612903225807, "no_speech_prob": 3.1874583328317385e-06}, {"id": 99, "seek": 39200, "start": 396.0, "end": 400.0, "text": " So the callbacks, we say infinitely flexible,", "tokens": [407, 264, 818, 17758, 11, 321, 584, 36227, 11358, 11], "temperature": 0.0, "avg_logprob": -0.05440631989509829, "compression_ratio": 1.6451612903225807, "no_speech_prob": 3.1874583328317385e-06}, {"id": 100, "seek": 39200, "start": 400.0, "end": 404.0, "text": " we feel pretty confident in that because the", "tokens": [321, 841, 1238, 6679, 294, 300, 570, 264], "temperature": 0.0, "avg_logprob": -0.05440631989509829, "compression_ratio": 1.6451612903225807, "no_speech_prob": 3.1874583328317385e-06}, {"id": 101, "seek": 39200, "start": 404.0, "end": 408.0, "text": " training loop in fast AI has not needed to be modified", "tokens": [3097, 6367, 294, 2370, 7318, 575, 406, 2978, 281, 312, 15873], "temperature": 0.0, "avg_logprob": -0.05440631989509829, "compression_ratio": 1.6451612903225807, "no_speech_prob": 3.1874583328317385e-06}, {"id": 102, "seek": 39200, "start": 408.0, "end": 412.0, "text": " to do any of the tweaks that I showed you before.", "tokens": [281, 360, 604, 295, 264, 46664, 300, 286, 4712, 291, 949, 13], "temperature": 0.0, "avg_logprob": -0.05440631989509829, "compression_ratio": 1.6451612903225807, "no_speech_prob": 3.1874583328317385e-06}, {"id": 103, "seek": 39200, "start": 412.0, "end": 416.0, "text": " So even the entirety of training GANs can be done", "tokens": [407, 754, 264, 31557, 295, 3097, 460, 1770, 82, 393, 312, 1096], "temperature": 0.0, "avg_logprob": -0.05440631989509829, "compression_ratio": 1.6451612903225807, "no_speech_prob": 3.1874583328317385e-06}, {"id": 104, "seek": 39200, "start": 416.0, "end": 420.0, "text": " in a callback. So basically we switch out a basic training loop", "tokens": [294, 257, 818, 3207, 13, 407, 1936, 321, 3679, 484, 257, 3875, 3097, 6367], "temperature": 0.0, "avg_logprob": -0.05440631989509829, "compression_ratio": 1.6451612903225807, "no_speech_prob": 3.1874583328317385e-06}, {"id": 105, "seek": 42000, "start": 420.0, "end": 424.0, "text": " and replace it with one with the same five steps", "tokens": [293, 7406, 309, 365, 472, 365, 264, 912, 1732, 4439], "temperature": 0.0, "avg_logprob": -0.05796450192166358, "compression_ratio": 1.6454545454545455, "no_speech_prob": 9.817594218475278e-06}, {"id": 106, "seek": 42000, "start": 424.0, "end": 428.0, "text": " but callbacks between every step.", "tokens": [457, 818, 17758, 1296, 633, 1823, 13], "temperature": 0.0, "avg_logprob": -0.05796450192166358, "compression_ratio": 1.6454545454545455, "no_speech_prob": 9.817594218475278e-06}, {"id": 107, "seek": 42000, "start": 428.0, "end": 432.0, "text": " So that means, for example, if you want to do", "tokens": [407, 300, 1355, 11, 337, 1365, 11, 498, 291, 528, 281, 360], "temperature": 0.0, "avg_logprob": -0.05796450192166358, "compression_ratio": 1.6454545454545455, "no_speech_prob": 9.817594218475278e-06}, {"id": 108, "seek": 42000, "start": 432.0, "end": 436.0, "text": " a scheduler, you can define a batch begin that sets the optimizer's", "tokens": [257, 12000, 260, 11, 291, 393, 6964, 257, 15245, 1841, 300, 6352, 264, 5028, 6545, 311], "temperature": 0.0, "avg_logprob": -0.05796450192166358, "compression_ratio": 1.6454545454545455, "no_speech_prob": 9.817594218475278e-06}, {"id": 109, "seek": 42000, "start": 436.0, "end": 440.0, "text": " learning rate to some function. Or if you want to do early stopping,", "tokens": [2539, 3314, 281, 512, 2445, 13, 1610, 498, 291, 528, 281, 360, 2440, 12767, 11], "temperature": 0.0, "avg_logprob": -0.05796450192166358, "compression_ratio": 1.6454545454545455, "no_speech_prob": 9.817594218475278e-06}, {"id": 110, "seek": 42000, "start": 440.0, "end": 444.0, "text": " you can write an on epoch end that checks the metrics", "tokens": [291, 393, 2464, 364, 322, 30992, 339, 917, 300, 13834, 264, 16367], "temperature": 0.0, "avg_logprob": -0.05796450192166358, "compression_ratio": 1.6454545454545455, "no_speech_prob": 9.817594218475278e-06}, {"id": 111, "seek": 42000, "start": 444.0, "end": 448.0, "text": " and stops training. Or you can do parallel", "tokens": [293, 10094, 3097, 13, 1610, 291, 393, 360, 8952], "temperature": 0.0, "avg_logprob": -0.05796450192166358, "compression_ratio": 1.6454545454545455, "no_speech_prob": 9.817594218475278e-06}, {"id": 112, "seek": 44800, "start": 448.0, "end": 452.0, "text": " training, set up data parallel, and if you're happy", "tokens": [3097, 11, 992, 493, 1412, 8952, 11, 293, 498, 291, 434, 2055], "temperature": 0.0, "avg_logprob": -0.09171386640899036, "compression_ratio": 1.6767241379310345, "no_speech_prob": 3.119950270047411e-05}, {"id": 113, "seek": 44800, "start": 452.0, "end": 456.0, "text": " at the end of training, take data parallel off again.", "tokens": [412, 264, 917, 295, 3097, 11, 747, 1412, 8952, 766, 797, 13], "temperature": 0.0, "avg_logprob": -0.09171386640899036, "compression_ratio": 1.6767241379310345, "no_speech_prob": 3.119950270047411e-05}, {"id": 114, "seek": 44800, "start": 456.0, "end": 460.0, "text": " Gradient clipping, you have access to the parameters themselves,", "tokens": [16710, 1196, 49320, 11, 291, 362, 2105, 281, 264, 9834, 2969, 11], "temperature": 0.0, "avg_logprob": -0.09171386640899036, "compression_ratio": 1.6767241379310345, "no_speech_prob": 3.119950270047411e-05}, {"id": 115, "seek": 44800, "start": 460.0, "end": 464.0, "text": " so you can click the gradient norms at the end of the backward step.", "tokens": [370, 291, 393, 2052, 264, 16235, 24357, 412, 264, 917, 295, 264, 23897, 1823, 13], "temperature": 0.0, "avg_logprob": -0.09171386640899036, "compression_ratio": 1.6767241379310345, "no_speech_prob": 3.119950270047411e-05}, {"id": 116, "seek": 44800, "start": 464.0, "end": 468.0, "text": " And so forth. So all of these different", "tokens": [400, 370, 5220, 13, 407, 439, 295, 613, 819], "temperature": 0.0, "avg_logprob": -0.09171386640899036, "compression_ratio": 1.6767241379310345, "no_speech_prob": 3.119950270047411e-05}, {"id": 117, "seek": 44800, "start": 468.0, "end": 472.0, "text": " things are all things that have been written with", "tokens": [721, 366, 439, 721, 300, 362, 668, 3720, 365], "temperature": 0.0, "avg_logprob": -0.09171386640899036, "compression_ratio": 1.6767241379310345, "no_speech_prob": 3.119950270047411e-05}, {"id": 118, "seek": 44800, "start": 472.0, "end": 476.0, "text": " fast AI callbacks, including, for example, mixed precision,", "tokens": [2370, 7318, 818, 17758, 11, 3009, 11, 337, 1365, 11, 7467, 18356, 11], "temperature": 0.0, "avg_logprob": -0.09171386640899036, "compression_ratio": 1.6767241379310345, "no_speech_prob": 3.119950270047411e-05}, {"id": 119, "seek": 47600, "start": 476.0, "end": 480.0, "text": " all of NVIDIA's", "tokens": [439, 295, 426, 3958, 6914, 311], "temperature": 0.0, "avg_logprob": -0.1250547271176993, "compression_ratio": 1.485981308411215, "no_speech_prob": 2.9308463126653805e-05}, {"id": 120, "seek": 47600, "start": 480.0, "end": 484.0, "text": " recommendations, mixed precision training, will be added automatically if you just add a", "tokens": [10434, 11, 7467, 18356, 3097, 11, 486, 312, 3869, 6772, 498, 291, 445, 909, 257], "temperature": 0.0, "avg_logprob": -0.1250547271176993, "compression_ratio": 1.485981308411215, "no_speech_prob": 2.9308463126653805e-05}, {"id": 121, "seek": 47600, "start": 484.0, "end": 488.0, "text": " 2FP16 at the end of your learn call.", "tokens": [568, 45882, 6866, 412, 264, 917, 295, 428, 1466, 818, 13], "temperature": 0.0, "avg_logprob": -0.1250547271176993, "compression_ratio": 1.485981308411215, "no_speech_prob": 2.9308463126653805e-05}, {"id": 122, "seek": 47600, "start": 488.0, "end": 492.0, "text": " And really importantly, you know, for example,", "tokens": [400, 534, 8906, 11, 291, 458, 11, 337, 1365, 11], "temperature": 0.0, "avg_logprob": -0.1250547271176993, "compression_ratio": 1.485981308411215, "no_speech_prob": 2.9308463126653805e-05}, {"id": 123, "seek": 47600, "start": 492.0, "end": 496.0, "text": " all of those mixed precision things can be combined with", "tokens": [439, 295, 729, 7467, 18356, 721, 393, 312, 9354, 365], "temperature": 0.0, "avg_logprob": -0.1250547271176993, "compression_ratio": 1.485981308411215, "no_speech_prob": 2.9308463126653805e-05}, {"id": 124, "seek": 47600, "start": 496.0, "end": 500.0, "text": " multi-GPU and one cycle training and", "tokens": [4825, 12, 38, 8115, 293, 472, 6586, 3097, 293], "temperature": 0.0, "avg_logprob": -0.1250547271176993, "compression_ratio": 1.485981308411215, "no_speech_prob": 2.9308463126653805e-05}, {"id": 125, "seek": 47600, "start": 500.0, "end": 504.0, "text": " gradient accumulation and so forth.", "tokens": [16235, 35647, 293, 370, 5220, 13], "temperature": 0.0, "avg_logprob": -0.1250547271176993, "compression_ratio": 1.485981308411215, "no_speech_prob": 2.9308463126653805e-05}, {"id": 126, "seek": 50400, "start": 504.0, "end": 508.0, "text": " So trying to create a state of the art", "tokens": [407, 1382, 281, 1884, 257, 1785, 295, 264, 1523], "temperature": 0.0, "avg_logprob": -0.07855563211922693, "compression_ratio": 1.7617021276595746, "no_speech_prob": 2.8571712391567416e-06}, {"id": 127, "seek": 50400, "start": 508.0, "end": 512.0, "text": " model which involves combining state of the art regularization and", "tokens": [2316, 597, 11626, 21928, 1785, 295, 264, 1523, 3890, 2144, 293], "temperature": 0.0, "avg_logprob": -0.07855563211922693, "compression_ratio": 1.7617021276595746, "no_speech_prob": 2.8571712391567416e-06}, {"id": 128, "seek": 50400, "start": 512.0, "end": 516.0, "text": " mixed precision and distributed training and so forth is a", "tokens": [7467, 18356, 293, 12631, 3097, 293, 370, 5220, 307, 257], "temperature": 0.0, "avg_logprob": -0.07855563211922693, "compression_ratio": 1.7617021276595746, "no_speech_prob": 2.8571712391567416e-06}, {"id": 129, "seek": 50400, "start": 516.0, "end": 520.0, "text": " really, really, really hard job. But with this approach,", "tokens": [534, 11, 534, 11, 534, 1152, 1691, 13, 583, 365, 341, 3109, 11], "temperature": 0.0, "avg_logprob": -0.07855563211922693, "compression_ratio": 1.7617021276595746, "no_speech_prob": 2.8571712391567416e-06}, {"id": 130, "seek": 50400, "start": 520.0, "end": 524.0, "text": " it's actually just a single extra line of code to add each feature", "tokens": [309, 311, 767, 445, 257, 2167, 2857, 1622, 295, 3089, 281, 909, 1184, 4111], "temperature": 0.0, "avg_logprob": -0.07855563211922693, "compression_ratio": 1.7617021276595746, "no_speech_prob": 2.8571712391567416e-06}, {"id": 131, "seek": 50400, "start": 524.0, "end": 528.0, "text": " and they all explicitly are designed to work with each other and are tested to work with each", "tokens": [293, 436, 439, 20803, 366, 4761, 281, 589, 365, 1184, 661, 293, 366, 8246, 281, 589, 365, 1184], "temperature": 0.0, "avg_logprob": -0.07855563211922693, "compression_ratio": 1.7617021276595746, "no_speech_prob": 2.8571712391567416e-06}, {"id": 132, "seek": 50400, "start": 528.0, "end": 532.0, "text": " other. So for instance, here is", "tokens": [661, 13, 407, 337, 5197, 11, 510, 307], "temperature": 0.0, "avg_logprob": -0.07855563211922693, "compression_ratio": 1.7617021276595746, "no_speech_prob": 2.8571712391567416e-06}, {"id": 133, "seek": 53200, "start": 532.0, "end": 536.0, "text": " mixup data augmentation, which is an incredibly powerful data", "tokens": [2890, 1010, 1412, 14501, 19631, 11, 597, 307, 364, 6252, 4005, 1412], "temperature": 0.0, "avg_logprob": -0.05845262402686003, "compression_ratio": 1.7188755020080322, "no_speech_prob": 2.2818279830971733e-05}, {"id": 134, "seek": 53200, "start": 536.0, "end": 540.0, "text": " augmentation method that has powered lots of state of the", "tokens": [14501, 19631, 3170, 300, 575, 17786, 3195, 295, 1785, 295, 264], "temperature": 0.0, "avg_logprob": -0.05845262402686003, "compression_ratio": 1.7188755020080322, "no_speech_prob": 2.2818279830971733e-05}, {"id": 135, "seek": 53200, "start": 540.0, "end": 544.0, "text": " art results. And as you can see, it's well under a screen of code.", "tokens": [1523, 3542, 13, 400, 382, 291, 393, 536, 11, 309, 311, 731, 833, 257, 2568, 295, 3089, 13], "temperature": 0.0, "avg_logprob": -0.05845262402686003, "compression_ratio": 1.7188755020080322, "no_speech_prob": 2.2818279830971733e-05}, {"id": 136, "seek": 53200, "start": 544.0, "end": 548.0, "text": " By comparison, here is the version of mixup", "tokens": [3146, 9660, 11, 510, 307, 264, 3037, 295, 2890, 1010], "temperature": 0.0, "avg_logprob": -0.05845262402686003, "compression_ratio": 1.7188755020080322, "no_speech_prob": 2.2818279830971733e-05}, {"id": 137, "seek": 53200, "start": 548.0, "end": 552.0, "text": " from the paper. Not only is it far longer, but it only works", "tokens": [490, 264, 3035, 13, 1726, 787, 307, 309, 1400, 2854, 11, 457, 309, 787, 1985], "temperature": 0.0, "avg_logprob": -0.05845262402686003, "compression_ratio": 1.7188755020080322, "no_speech_prob": 2.2818279830971733e-05}, {"id": 138, "seek": 53200, "start": 552.0, "end": 556.0, "text": " with one particular data set and one particular optimizer", "tokens": [365, 472, 1729, 1412, 992, 293, 472, 1729, 5028, 6545], "temperature": 0.0, "avg_logprob": -0.05845262402686003, "compression_ratio": 1.7188755020080322, "no_speech_prob": 2.2818279830971733e-05}, {"id": 139, "seek": 53200, "start": 556.0, "end": 560.0, "text": " and is full of all kinds of assumptions and only one particular kind of metric", "tokens": [293, 307, 1577, 295, 439, 3685, 295, 17695, 293, 787, 472, 1729, 733, 295, 20678], "temperature": 0.0, "avg_logprob": -0.05845262402686003, "compression_ratio": 1.7188755020080322, "no_speech_prob": 2.2818279830971733e-05}, {"id": 140, "seek": 56000, "start": 560.0, "end": 564.0, "text": " and so forth. So that's an", "tokens": [293, 370, 5220, 13, 407, 300, 311, 364], "temperature": 0.0, "avg_logprob": -0.06504838881285294, "compression_ratio": 1.5348837209302326, "no_speech_prob": 2.5069624825846404e-05}, {"id": 141, "seek": 56000, "start": 564.0, "end": 568.0, "text": " example of these mid-tier APIs. Another one", "tokens": [1365, 295, 613, 2062, 12, 25402, 21445, 13, 3996, 472], "temperature": 0.0, "avg_logprob": -0.06504838881285294, "compression_ratio": 1.5348837209302326, "no_speech_prob": 2.5069624825846404e-05}, {"id": 142, "seek": 56000, "start": 568.0, "end": 572.0, "text": " is the optimizer. It turns", "tokens": [307, 264, 5028, 6545, 13, 467, 4523], "temperature": 0.0, "avg_logprob": -0.06504838881285294, "compression_ratio": 1.5348837209302326, "no_speech_prob": 2.5069624825846404e-05}, {"id": 143, "seek": 56000, "start": 572.0, "end": 576.0, "text": " out that, you know, it looks like there's been lots and lots", "tokens": [484, 300, 11, 291, 458, 11, 309, 1542, 411, 456, 311, 668, 3195, 293, 3195], "temperature": 0.0, "avg_logprob": -0.06504838881285294, "compression_ratio": 1.5348837209302326, "no_speech_prob": 2.5069624825846404e-05}, {"id": 144, "seek": 56000, "start": 576.0, "end": 580.0, "text": " of different optimizers appearing in the last", "tokens": [295, 819, 5028, 22525, 19870, 294, 264, 1036], "temperature": 0.0, "avg_logprob": -0.06504838881285294, "compression_ratio": 1.5348837209302326, "no_speech_prob": 2.5069624825846404e-05}, {"id": 145, "seek": 56000, "start": 580.0, "end": 584.0, "text": " year or two. But actually it turns out that they're all minor", "tokens": [1064, 420, 732, 13, 583, 767, 309, 4523, 484, 300, 436, 434, 439, 6696], "temperature": 0.0, "avg_logprob": -0.06504838881285294, "compression_ratio": 1.5348837209302326, "no_speech_prob": 2.5069624825846404e-05}, {"id": 146, "seek": 56000, "start": 584.0, "end": 588.0, "text": " tweaks on each other. Most libraries don't write them this way.", "tokens": [46664, 322, 1184, 661, 13, 4534, 15148, 500, 380, 2464, 552, 341, 636, 13], "temperature": 0.0, "avg_logprob": -0.06504838881285294, "compression_ratio": 1.5348837209302326, "no_speech_prob": 2.5069624825846404e-05}, {"id": 147, "seek": 58800, "start": 588.0, "end": 592.0, "text": " So for example, AdamW, also known as decoupled", "tokens": [407, 337, 1365, 11, 7938, 54, 11, 611, 2570, 382, 979, 263, 15551], "temperature": 0.0, "avg_logprob": -0.09442218657462828, "compression_ratio": 1.5119617224880382, "no_speech_prob": 4.753803659696132e-05}, {"id": 148, "seek": 58800, "start": 592.0, "end": 596.0, "text": " weight decay Adam, was added to", "tokens": [3364, 21039, 7938, 11, 390, 3869, 281], "temperature": 0.0, "avg_logprob": -0.09442218657462828, "compression_ratio": 1.5119617224880382, "no_speech_prob": 4.753803659696132e-05}, {"id": 149, "seek": 58800, "start": 596.0, "end": 600.0, "text": " PyTorch quite recently in the last", "tokens": [9953, 51, 284, 339, 1596, 3938, 294, 264, 1036], "temperature": 0.0, "avg_logprob": -0.09442218657462828, "compression_ratio": 1.5119617224880382, "no_speech_prob": 4.753803659696132e-05}, {"id": 150, "seek": 58800, "start": 600.0, "end": 604.0, "text": " month or two. And it required writing a whole new", "tokens": [1618, 420, 732, 13, 400, 309, 4739, 3579, 257, 1379, 777], "temperature": 0.0, "avg_logprob": -0.09442218657462828, "compression_ratio": 1.5119617224880382, "no_speech_prob": 4.753803659696132e-05}, {"id": 151, "seek": 58800, "start": 604.0, "end": 608.0, "text": " class and a whole new step", "tokens": [1508, 293, 257, 1379, 777, 1823], "temperature": 0.0, "avg_logprob": -0.09442218657462828, "compression_ratio": 1.5119617224880382, "no_speech_prob": 4.753803659696132e-05}, {"id": 152, "seek": 58800, "start": 608.0, "end": 612.0, "text": " to implement. And it took, you know, it was like two or three years after the paper was", "tokens": [281, 4445, 13, 400, 309, 1890, 11, 291, 458, 11, 309, 390, 411, 732, 420, 1045, 924, 934, 264, 3035, 390], "temperature": 0.0, "avg_logprob": -0.09442218657462828, "compression_ratio": 1.5119617224880382, "no_speech_prob": 4.753803659696132e-05}, {"id": 153, "seek": 58800, "start": 612.0, "end": 616.0, "text": " released. On the other hand, FastAI's", "tokens": [4736, 13, 1282, 264, 661, 1011, 11, 15968, 48698, 311], "temperature": 0.0, "avg_logprob": -0.09442218657462828, "compression_ratio": 1.5119617224880382, "no_speech_prob": 4.753803659696132e-05}, {"id": 154, "seek": 61600, "start": 616.0, "end": 620.0, "text": " implementation, as you can see, involves a single extra function", "tokens": [11420, 11, 382, 291, 393, 536, 11, 11626, 257, 2167, 2857, 2445], "temperature": 0.0, "avg_logprob": -0.0527553389557695, "compression_ratio": 1.6666666666666667, "no_speech_prob": 1.1658372386591509e-05}, {"id": 155, "seek": 61600, "start": 620.0, "end": 624.0, "text": " containing two lines of code and this little bit of gray", "tokens": [19273, 732, 3876, 295, 3089, 293, 341, 707, 857, 295, 10855], "temperature": 0.0, "avg_logprob": -0.0527553389557695, "compression_ratio": 1.6666666666666667, "no_speech_prob": 1.1658372386591509e-05}, {"id": 156, "seek": 61600, "start": 624.0, "end": 628.0, "text": " here. So it's kind of like two and a half, three lines of code to implement", "tokens": [510, 13, 407, 309, 311, 733, 295, 411, 732, 293, 257, 1922, 11, 1045, 3876, 295, 3089, 281, 4445], "temperature": 0.0, "avg_logprob": -0.0527553389557695, "compression_ratio": 1.6666666666666667, "no_speech_prob": 1.1658372386591509e-05}, {"id": 157, "seek": 61600, "start": 628.0, "end": 632.0, "text": " the same thing. Because what we did was we realized", "tokens": [264, 912, 551, 13, 1436, 437, 321, 630, 390, 321, 5334], "temperature": 0.0, "avg_logprob": -0.0527553389557695, "compression_ratio": 1.6666666666666667, "no_speech_prob": 1.1658372386591509e-05}, {"id": 158, "seek": 61600, "start": 632.0, "end": 636.0, "text": " let's refactor the idea of an optimizer,", "tokens": [718, 311, 1895, 15104, 264, 1558, 295, 364, 5028, 6545, 11], "temperature": 0.0, "avg_logprob": -0.0527553389557695, "compression_ratio": 1.6666666666666667, "no_speech_prob": 1.1658372386591509e-05}, {"id": 159, "seek": 61600, "start": 636.0, "end": 640.0, "text": " see what's different for each of these, you know,", "tokens": [536, 437, 311, 819, 337, 1184, 295, 613, 11, 291, 458, 11], "temperature": 0.0, "avg_logprob": -0.0527553389557695, "compression_ratio": 1.6666666666666667, "no_speech_prob": 1.1658372386591509e-05}, {"id": 160, "seek": 61600, "start": 640.0, "end": 644.0, "text": " state-of-the-art optimizers that have appeared recently, and make it so that each of", "tokens": [1785, 12, 2670, 12, 3322, 12, 446, 5028, 22525, 300, 362, 8516, 3938, 11, 293, 652, 309, 370, 300, 1184, 295], "temperature": 0.0, "avg_logprob": -0.0527553389557695, "compression_ratio": 1.6666666666666667, "no_speech_prob": 1.1658372386591509e-05}, {"id": 161, "seek": 64400, "start": 644.0, "end": 648.0, "text": " those things can be added and removed by just", "tokens": [729, 721, 393, 312, 3869, 293, 7261, 538, 445], "temperature": 0.0, "avg_logprob": -0.05776174690412438, "compression_ratio": 1.7836538461538463, "no_speech_prob": 1.5205343515845016e-05}, {"id": 162, "seek": 64400, "start": 648.0, "end": 652.0, "text": " changing two things, stats and steppers.", "tokens": [4473, 732, 721, 11, 18152, 293, 2126, 15226, 13], "temperature": 0.0, "avg_logprob": -0.05776174690412438, "compression_ratio": 1.7836538461538463, "no_speech_prob": 1.5205343515845016e-05}, {"id": 163, "seek": 64400, "start": 652.0, "end": 656.0, "text": " A stat is", "tokens": [316, 2219, 307], "temperature": 0.0, "avg_logprob": -0.05776174690412438, "compression_ratio": 1.7836538461538463, "no_speech_prob": 1.5205343515845016e-05}, {"id": 164, "seek": 64400, "start": 656.0, "end": 660.0, "text": " something that you measure during training, such as the gradients or the gradient", "tokens": [746, 300, 291, 3481, 1830, 3097, 11, 1270, 382, 264, 2771, 2448, 420, 264, 16235], "temperature": 0.0, "avg_logprob": -0.05776174690412438, "compression_ratio": 1.7836538461538463, "no_speech_prob": 1.5205343515845016e-05}, {"id": 165, "seek": 64400, "start": 660.0, "end": 664.0, "text": " squared, or you might use dampening or momentum or whatever. And then a", "tokens": [8889, 11, 420, 291, 1062, 764, 19498, 4559, 420, 11244, 420, 2035, 13, 400, 550, 257], "temperature": 0.0, "avg_logprob": -0.05776174690412438, "compression_ratio": 1.7836538461538463, "no_speech_prob": 1.5205343515845016e-05}, {"id": 166, "seek": 64400, "start": 664.0, "end": 668.0, "text": " stepper is something that uses those stats to", "tokens": [2126, 3717, 307, 746, 300, 4960, 729, 18152, 281], "temperature": 0.0, "avg_logprob": -0.05776174690412438, "compression_ratio": 1.7836538461538463, "no_speech_prob": 1.5205343515845016e-05}, {"id": 167, "seek": 64400, "start": 668.0, "end": 672.0, "text": " change the weights in some way. And you can combine those things together.", "tokens": [1319, 264, 17443, 294, 512, 636, 13, 400, 291, 393, 10432, 729, 721, 1214, 13], "temperature": 0.0, "avg_logprob": -0.05776174690412438, "compression_ratio": 1.7836538461538463, "no_speech_prob": 1.5205343515845016e-05}, {"id": 168, "seek": 67200, "start": 672.0, "end": 676.0, "text": " And by combining these, we've been able to implement all these", "tokens": [400, 538, 21928, 613, 11, 321, 600, 668, 1075, 281, 4445, 439, 613], "temperature": 0.0, "avg_logprob": -0.07814930844050581, "compression_ratio": 1.5132743362831858, "no_speech_prob": 1.6186730135814287e-05}, {"id": 169, "seek": 67200, "start": 676.0, "end": 680.0, "text": " different optimizers.", "tokens": [819, 5028, 22525, 13], "temperature": 0.0, "avg_logprob": -0.07814930844050581, "compression_ratio": 1.5132743362831858, "no_speech_prob": 1.6186730135814287e-05}, {"id": 170, "seek": 67200, "start": 680.0, "end": 684.0, "text": " So, for instance, the LAM optimizer,", "tokens": [407, 11, 337, 5197, 11, 264, 441, 2865, 5028, 6545, 11], "temperature": 0.0, "avg_logprob": -0.07814930844050581, "compression_ratio": 1.5132743362831858, "no_speech_prob": 1.6186730135814287e-05}, {"id": 171, "seek": 67200, "start": 684.0, "end": 688.0, "text": " which came out of Google and was super", "tokens": [597, 1361, 484, 295, 3329, 293, 390, 1687], "temperature": 0.0, "avg_logprob": -0.07814930844050581, "compression_ratio": 1.5132743362831858, "no_speech_prob": 1.6186730135814287e-05}, {"id": 172, "seek": 67200, "start": 688.0, "end": 692.0, "text": " cool at reducing BERT pre-training time from three days to 76 minutes,", "tokens": [1627, 412, 12245, 363, 31479, 659, 12, 17227, 1760, 565, 490, 1045, 1708, 281, 24733, 2077, 11], "temperature": 0.0, "avg_logprob": -0.07814930844050581, "compression_ratio": 1.5132743362831858, "no_speech_prob": 1.6186730135814287e-05}, {"id": 173, "seek": 67200, "start": 692.0, "end": 696.0, "text": " we were able to implement that in this", "tokens": [321, 645, 1075, 281, 4445, 300, 294, 341], "temperature": 0.0, "avg_logprob": -0.07814930844050581, "compression_ratio": 1.5132743362831858, "no_speech_prob": 1.6186730135814287e-05}, {"id": 174, "seek": 67200, "start": 696.0, "end": 700.0, "text": " tiny piece of code. And one of the nice things is that when you compare", "tokens": [5870, 2522, 295, 3089, 13, 400, 472, 295, 264, 1481, 721, 307, 300, 562, 291, 6794], "temperature": 0.0, "avg_logprob": -0.07814930844050581, "compression_ratio": 1.5132743362831858, "no_speech_prob": 1.6186730135814287e-05}, {"id": 175, "seek": 70000, "start": 700.0, "end": 704.0, "text": " it to the math, it really looks almost line-for-line", "tokens": [309, 281, 264, 5221, 11, 309, 534, 1542, 1920, 1622, 12, 2994, 12, 1889], "temperature": 0.0, "avg_logprob": -0.08437887151190575, "compression_ratio": 1.5412844036697249, "no_speech_prob": 1.362967577733798e-05}, {"id": 176, "seek": 70000, "start": 704.0, "end": 708.0, "text": " identical, except ours is a little bit nicer because we refactored", "tokens": [14800, 11, 3993, 11896, 307, 257, 707, 857, 22842, 570, 321, 1895, 578, 2769], "temperature": 0.0, "avg_logprob": -0.08437887151190575, "compression_ratio": 1.5412844036697249, "no_speech_prob": 1.362967577733798e-05}, {"id": 177, "seek": 70000, "start": 708.0, "end": 712.0, "text": " some of the math. So it makes it really easy to do research", "tokens": [512, 295, 264, 5221, 13, 407, 309, 1669, 309, 534, 1858, 281, 360, 2132], "temperature": 0.0, "avg_logprob": -0.08437887151190575, "compression_ratio": 1.5412844036697249, "no_speech_prob": 1.362967577733798e-05}, {"id": 178, "seek": 70000, "start": 712.0, "end": 716.0, "text": " as well, because you can kind of quite directly bring", "tokens": [382, 731, 11, 570, 291, 393, 733, 295, 1596, 3838, 1565], "temperature": 0.0, "avg_logprob": -0.08437887151190575, "compression_ratio": 1.5412844036697249, "no_speech_prob": 1.362967577733798e-05}, {"id": 179, "seek": 70000, "start": 716.0, "end": 720.0, "text": " the equations across into your code.", "tokens": [264, 11787, 2108, 666, 428, 3089, 13], "temperature": 0.0, "avg_logprob": -0.08437887151190575, "compression_ratio": 1.5412844036697249, "no_speech_prob": 1.362967577733798e-05}, {"id": 180, "seek": 70000, "start": 720.0, "end": 724.0, "text": " Then the last of the mid-tier APIs is the DataBlock API,", "tokens": [1396, 264, 1036, 295, 264, 2062, 12, 25402, 21445, 307, 264, 11888, 33, 4102, 9362, 11], "temperature": 0.0, "avg_logprob": -0.08437887151190575, "compression_ratio": 1.5412844036697249, "no_speech_prob": 1.362967577733798e-05}, {"id": 181, "seek": 70000, "start": 724.0, "end": 728.0, "text": " which is", "tokens": [597, 307], "temperature": 0.0, "avg_logprob": -0.08437887151190575, "compression_ratio": 1.5412844036697249, "no_speech_prob": 1.362967577733798e-05}, {"id": 182, "seek": 72800, "start": 728.0, "end": 732.0, "text": " something we had in version one as well. But when we", "tokens": [746, 321, 632, 294, 3037, 472, 382, 731, 13, 583, 562, 321], "temperature": 0.0, "avg_logprob": -0.09983073671658833, "compression_ratio": 1.6113744075829384, "no_speech_prob": 7.139987428672612e-05}, {"id": 183, "seek": 72800, "start": 732.0, "end": 736.0, "text": " were porting that", "tokens": [645, 2436, 278, 300], "temperature": 0.0, "avg_logprob": -0.09983073671658833, "compression_ratio": 1.6113744075829384, "no_speech_prob": 7.139987428672612e-05}, {"id": 184, "seek": 72800, "start": 736.0, "end": 740.0, "text": " to Swift, we had", "tokens": [281, 25539, 11, 321, 632], "temperature": 0.0, "avg_logprob": -0.09983073671658833, "compression_ratio": 1.6113744075829384, "no_speech_prob": 7.139987428672612e-05}, {"id": 185, "seek": 72800, "start": 740.0, "end": 744.0, "text": " an opportunity to rethink it. And actually, Alexis Gallagher", "tokens": [364, 2650, 281, 34595, 309, 13, 400, 767, 11, 39826, 14588, 559, 511], "temperature": 0.0, "avg_logprob": -0.09983073671658833, "compression_ratio": 1.6113744075829384, "no_speech_prob": 7.139987428672612e-05}, {"id": 186, "seek": 72800, "start": 744.0, "end": 748.0, "text": " in particular helped us to rethink it in a more idiomatically", "tokens": [294, 1729, 4254, 505, 281, 34595, 309, 294, 257, 544, 18014, 298, 5030], "temperature": 0.0, "avg_logprob": -0.09983073671658833, "compression_ratio": 1.6113744075829384, "no_speech_prob": 7.139987428672612e-05}, {"id": 187, "seek": 72800, "start": 748.0, "end": 752.0, "text": " Swift-y way. And it came out really nicely. And so", "tokens": [25539, 12, 88, 636, 13, 400, 309, 1361, 484, 534, 9594, 13, 400, 370], "temperature": 0.0, "avg_logprob": -0.09983073671658833, "compression_ratio": 1.6113744075829384, "no_speech_prob": 7.139987428672612e-05}, {"id": 188, "seek": 72800, "start": 752.0, "end": 756.0, "text": " then we took the result of that and kind of ported it back into Python, and we", "tokens": [550, 321, 1890, 264, 1874, 295, 300, 293, 733, 295, 2436, 292, 309, 646, 666, 15329, 11, 293, 321], "temperature": 0.0, "avg_logprob": -0.09983073671658833, "compression_ratio": 1.6113744075829384, "no_speech_prob": 7.139987428672612e-05}, {"id": 189, "seek": 75600, "start": 756.0, "end": 760.0, "text": " ended up with something that was quite a bit nicer. So there's been a kind of a nice", "tokens": [4590, 493, 365, 746, 300, 390, 1596, 257, 857, 22842, 13, 407, 456, 311, 668, 257, 733, 295, 257, 1481], "temperature": 0.0, "avg_logprob": -0.0683470663623275, "compression_ratio": 1.636734693877551, "no_speech_prob": 2.546299401728902e-05}, {"id": 190, "seek": 75600, "start": 760.0, "end": 764.0, "text": " interaction and interplay between Fast.ai in Python", "tokens": [9285, 293, 728, 2858, 1296, 15968, 13, 1301, 294, 15329], "temperature": 0.0, "avg_logprob": -0.0683470663623275, "compression_ratio": 1.636734693877551, "no_speech_prob": 2.546299401728902e-05}, {"id": 191, "seek": 75600, "start": 764.0, "end": 768.0, "text": " and Swift.ai in Swift in terms of helping each other's", "tokens": [293, 25539, 13, 1301, 294, 25539, 294, 2115, 295, 4315, 1184, 661, 311], "temperature": 0.0, "avg_logprob": -0.0683470663623275, "compression_ratio": 1.636734693877551, "no_speech_prob": 2.546299401728902e-05}, {"id": 192, "seek": 75600, "start": 768.0, "end": 772.0, "text": " APIs. But basically, the DataBlock API is something where", "tokens": [21445, 13, 583, 1936, 11, 264, 11888, 33, 4102, 9362, 307, 746, 689], "temperature": 0.0, "avg_logprob": -0.0683470663623275, "compression_ratio": 1.636734693877551, "no_speech_prob": 2.546299401728902e-05}, {"id": 193, "seek": 75600, "start": 772.0, "end": 776.0, "text": " you define each of the key things that the", "tokens": [291, 6964, 1184, 295, 264, 2141, 721, 300, 264], "temperature": 0.0, "avg_logprob": -0.0683470663623275, "compression_ratio": 1.636734693877551, "no_speech_prob": 2.546299401728902e-05}, {"id": 194, "seek": 75600, "start": 776.0, "end": 780.0, "text": " program needs to know to flexibly get your data into", "tokens": [1461, 2203, 281, 458, 281, 5896, 3545, 483, 428, 1412, 666], "temperature": 0.0, "avg_logprob": -0.0683470663623275, "compression_ratio": 1.636734693877551, "no_speech_prob": 2.546299401728902e-05}, {"id": 195, "seek": 75600, "start": 780.0, "end": 784.0, "text": " a form you can put in a model. So it needs to know what", "tokens": [257, 1254, 291, 393, 829, 294, 257, 2316, 13, 407, 309, 2203, 281, 458, 437], "temperature": 0.0, "avg_logprob": -0.0683470663623275, "compression_ratio": 1.636734693877551, "no_speech_prob": 2.546299401728902e-05}, {"id": 196, "seek": 78400, "start": 784.0, "end": 788.0, "text": " type of data do you have, how do you get that data,", "tokens": [2010, 295, 1412, 360, 291, 362, 11, 577, 360, 291, 483, 300, 1412, 11], "temperature": 0.0, "avg_logprob": -0.05700043028434821, "compression_ratio": 1.7241379310344827, "no_speech_prob": 4.331232776166871e-05}, {"id": 197, "seek": 78400, "start": 788.0, "end": 792.0, "text": " how do you split it into a training set and a validation set,", "tokens": [577, 360, 291, 7472, 309, 666, 257, 3097, 992, 293, 257, 24071, 992, 11], "temperature": 0.0, "avg_logprob": -0.05700043028434821, "compression_ratio": 1.7241379310344827, "no_speech_prob": 4.331232776166871e-05}, {"id": 198, "seek": 78400, "start": 792.0, "end": 796.0, "text": " and then put that all together into a data bunch, which is just a simple little class.", "tokens": [293, 550, 829, 300, 439, 1214, 666, 257, 1412, 3840, 11, 597, 307, 445, 257, 2199, 707, 1508, 13], "temperature": 0.0, "avg_logprob": -0.05700043028434821, "compression_ratio": 1.7241379310344827, "no_speech_prob": 4.331232776166871e-05}, {"id": 199, "seek": 78400, "start": 796.0, "end": 800.0, "text": " It's literally, I think, four lines of code, which just has", "tokens": [467, 311, 3736, 11, 286, 519, 11, 1451, 3876, 295, 3089, 11, 597, 445, 575], "temperature": 0.0, "avg_logprob": -0.05700043028434821, "compression_ratio": 1.7241379310344827, "no_speech_prob": 4.331232776166871e-05}, {"id": 200, "seek": 78400, "start": 800.0, "end": 804.0, "text": " the validation set and the training set in one place.", "tokens": [264, 24071, 992, 293, 264, 3097, 992, 294, 472, 1081, 13], "temperature": 0.0, "avg_logprob": -0.05700043028434821, "compression_ratio": 1.7241379310344827, "no_speech_prob": 4.331232776166871e-05}, {"id": 201, "seek": 78400, "start": 804.0, "end": 808.0, "text": " So with a DataBlock,", "tokens": [407, 365, 257, 11888, 33, 4102, 11], "temperature": 0.0, "avg_logprob": -0.05700043028434821, "compression_ratio": 1.7241379310344827, "no_speech_prob": 4.331232776166871e-05}, {"id": 202, "seek": 78400, "start": 808.0, "end": 812.0, "text": " you just say, okay, my types, I want to create a black and white", "tokens": [291, 445, 584, 11, 1392, 11, 452, 3467, 11, 286, 528, 281, 1884, 257, 2211, 293, 2418], "temperature": 0.0, "avg_logprob": -0.05700043028434821, "compression_ratio": 1.7241379310344827, "no_speech_prob": 4.331232776166871e-05}, {"id": 203, "seek": 81200, "start": 812.0, "end": 816.0, "text": " pillow image for my X and a category for", "tokens": [18581, 3256, 337, 452, 1783, 293, 257, 7719, 337], "temperature": 0.0, "avg_logprob": -0.06657607555389404, "compression_ratio": 1.8826530612244898, "no_speech_prob": 2.7106771085527726e-05}, {"id": 204, "seek": 81200, "start": 816.0, "end": 820.0, "text": " my Y. And to get the list of files for those, I need to", "tokens": [452, 398, 13, 400, 281, 483, 264, 1329, 295, 7098, 337, 729, 11, 286, 643, 281], "temperature": 0.0, "avg_logprob": -0.06657607555389404, "compression_ratio": 1.8826530612244898, "no_speech_prob": 2.7106771085527726e-05}, {"id": 205, "seek": 81200, "start": 820.0, "end": 824.0, "text": " use this function. And to split those files into training and validation,", "tokens": [764, 341, 2445, 13, 400, 281, 7472, 729, 7098, 666, 3097, 293, 24071, 11], "temperature": 0.0, "avg_logprob": -0.06657607555389404, "compression_ratio": 1.8826530612244898, "no_speech_prob": 2.7106771085527726e-05}, {"id": 206, "seek": 81200, "start": 824.0, "end": 828.0, "text": " use this function, which is looking at the grandparent", "tokens": [764, 341, 2445, 11, 597, 307, 1237, 412, 264, 2697, 38321], "temperature": 0.0, "avg_logprob": -0.06657607555389404, "compression_ratio": 1.8826530612244898, "no_speech_prob": 2.7106771085527726e-05}, {"id": 207, "seek": 81200, "start": 828.0, "end": 832.0, "text": " path directory name. And to get the", "tokens": [3100, 21120, 1315, 13, 400, 281, 483, 264], "temperature": 0.0, "avg_logprob": -0.06657607555389404, "compression_ratio": 1.8826530612244898, "no_speech_prob": 2.7106771085527726e-05}, {"id": 208, "seek": 81200, "start": 832.0, "end": 836.0, "text": " labels, use this function, which is use the parent's path", "tokens": [16949, 11, 764, 341, 2445, 11, 597, 307, 764, 264, 2596, 311, 3100], "temperature": 0.0, "avg_logprob": -0.06657607555389404, "compression_ratio": 1.8826530612244898, "no_speech_prob": 2.7106771085527726e-05}, {"id": 209, "seek": 81200, "start": 836.0, "end": 840.0, "text": " name. And so with that, that's enough to give you", "tokens": [1315, 13, 400, 370, 365, 300, 11, 300, 311, 1547, 281, 976, 291], "temperature": 0.0, "avg_logprob": -0.06657607555389404, "compression_ratio": 1.8826530612244898, "no_speech_prob": 2.7106771085527726e-05}, {"id": 210, "seek": 84000, "start": 840.0, "end": 844.0, "text": " MNIST, for instance. And so", "tokens": [376, 45, 19756, 11, 337, 5197, 13, 400, 370], "temperature": 0.0, "avg_logprob": -0.04182415442033247, "compression_ratio": 1.5742971887550201, "no_speech_prob": 3.9439273677999154e-05}, {"id": 211, "seek": 84000, "start": 844.0, "end": 848.0, "text": " once you've done this, you end up with a data bunch. And as I mentioned", "tokens": [1564, 291, 600, 1096, 341, 11, 291, 917, 493, 365, 257, 1412, 3840, 13, 400, 382, 286, 2835], "temperature": 0.0, "avg_logprob": -0.04182415442033247, "compression_ratio": 1.5742971887550201, "no_speech_prob": 3.9439273677999154e-05}, {"id": 212, "seek": 84000, "start": 848.0, "end": 852.0, "text": " before, everything has a show batch. So one of the nice", "tokens": [949, 11, 1203, 575, 257, 855, 15245, 13, 407, 472, 295, 264, 1481], "temperature": 0.0, "avg_logprob": -0.04182415442033247, "compression_ratio": 1.5742971887550201, "no_speech_prob": 3.9439273677999154e-05}, {"id": 213, "seek": 84000, "start": 852.0, "end": 856.0, "text": " things is it makes it very easy for you to look at your data, regardless of whether it's tabular", "tokens": [721, 307, 309, 1669, 309, 588, 1858, 337, 291, 281, 574, 412, 428, 1412, 11, 10060, 295, 1968, 309, 311, 4421, 1040], "temperature": 0.0, "avg_logprob": -0.04182415442033247, "compression_ratio": 1.5742971887550201, "no_speech_prob": 3.9439273677999154e-05}, {"id": 214, "seek": 84000, "start": 856.0, "end": 860.0, "text": " or collaborative filtering or vision or text or even audio.", "tokens": [420, 16555, 30822, 420, 5201, 420, 2487, 420, 754, 6278, 13], "temperature": 0.0, "avg_logprob": -0.04182415442033247, "compression_ratio": 1.5742971887550201, "no_speech_prob": 3.9439273677999154e-05}, {"id": 215, "seek": 84000, "start": 860.0, "end": 864.0, "text": " If it was audio, it would show you a spectrogram and let you play", "tokens": [759, 309, 390, 6278, 11, 309, 576, 855, 291, 257, 6177, 340, 1342, 293, 718, 291, 862], "temperature": 0.0, "avg_logprob": -0.04182415442033247, "compression_ratio": 1.5742971887550201, "no_speech_prob": 3.9439273677999154e-05}, {"id": 216, "seek": 84000, "start": 864.0, "end": 868.0, "text": " the sound. So", "tokens": [264, 1626, 13, 407], "temperature": 0.0, "avg_logprob": -0.04182415442033247, "compression_ratio": 1.5742971887550201, "no_speech_prob": 3.9439273677999154e-05}, {"id": 217, "seek": 86800, "start": 868.0, "end": 872.0, "text": " you can do custom labeling with data blocks by using, for", "tokens": [291, 393, 360, 2375, 40244, 365, 1412, 8474, 538, 1228, 11, 337], "temperature": 0.0, "avg_logprob": -0.07471081322314692, "compression_ratio": 1.6359832635983265, "no_speech_prob": 3.426351759117097e-05}, {"id": 218, "seek": 86800, "start": 872.0, "end": 876.0, "text": " example, a regular expression labeler.", "tokens": [1365, 11, 257, 3890, 6114, 2715, 6185, 13], "temperature": 0.0, "avg_logprob": -0.07471081322314692, "compression_ratio": 1.6359832635983265, "no_speech_prob": 3.426351759117097e-05}, {"id": 219, "seek": 86800, "start": 876.0, "end": 880.0, "text": " You can get your labels from an external file", "tokens": [509, 393, 483, 428, 16949, 490, 364, 8320, 3991], "temperature": 0.0, "avg_logprob": -0.07471081322314692, "compression_ratio": 1.6359832635983265, "no_speech_prob": 3.426351759117097e-05}, {"id": 220, "seek": 86800, "start": 880.0, "end": 884.0, "text": " or data frame, and they could be multi-labels. So this thing here knows", "tokens": [420, 1412, 3920, 11, 293, 436, 727, 312, 4825, 12, 44990, 1625, 13, 407, 341, 551, 510, 3255], "temperature": 0.0, "avg_logprob": -0.07471081322314692, "compression_ratio": 1.6359832635983265, "no_speech_prob": 3.426351759117097e-05}, {"id": 221, "seek": 86800, "start": 884.0, "end": 888.0, "text": " it's a multi-label classification task, so it's automatically put a semicolon", "tokens": [309, 311, 257, 4825, 12, 75, 18657, 21538, 5633, 11, 370, 309, 311, 6772, 829, 257, 27515, 38780], "temperature": 0.0, "avg_logprob": -0.07471081322314692, "compression_ratio": 1.6359832635983265, "no_speech_prob": 3.426351759117097e-05}, {"id": 222, "seek": 86800, "start": 888.0, "end": 892.0, "text": " between each label. Again, it's still basically just", "tokens": [1296, 1184, 7645, 13, 3764, 11, 309, 311, 920, 1936, 445], "temperature": 0.0, "avg_logprob": -0.07471081322314692, "compression_ratio": 1.6359832635983265, "no_speech_prob": 3.426351759117097e-05}, {"id": 223, "seek": 86800, "start": 892.0, "end": 896.0, "text": " three lines of code to define the data block.", "tokens": [1045, 3876, 295, 3089, 281, 6964, 264, 1412, 3461, 13], "temperature": 0.0, "avg_logprob": -0.07471081322314692, "compression_ratio": 1.6359832635983265, "no_speech_prob": 3.426351759117097e-05}, {"id": 224, "seek": 89600, "start": 896.0, "end": 900.0, "text": " So here's a data block for segmentation. And you can see, really, the only thing I had", "tokens": [407, 510, 311, 257, 1412, 3461, 337, 9469, 399, 13, 400, 291, 393, 536, 11, 534, 11, 264, 787, 551, 286, 632], "temperature": 0.0, "avg_logprob": -0.09368984256170493, "compression_ratio": 1.6591760299625469, "no_speech_prob": 2.506935015844647e-05}, {"id": 225, "seek": 89600, "start": 900.0, "end": 904.0, "text": " to change here was that my dependent variable has been changed from category", "tokens": [281, 1319, 510, 390, 300, 452, 12334, 7006, 575, 668, 3105, 490, 7719], "temperature": 0.0, "avg_logprob": -0.09368984256170493, "compression_ratio": 1.6591760299625469, "no_speech_prob": 2.506935015844647e-05}, {"id": 226, "seek": 89600, "start": 904.0, "end": 908.0, "text": " to pillow mask. And", "tokens": [281, 18581, 6094, 13, 400], "temperature": 0.0, "avg_logprob": -0.09368984256170493, "compression_ratio": 1.6591760299625469, "no_speech_prob": 2.506935015844647e-05}, {"id": 227, "seek": 89600, "start": 908.0, "end": 912.0, "text": " again, automatically, I show batch works, and we can train a model from that straight", "tokens": [797, 11, 6772, 11, 286, 855, 15245, 1985, 11, 293, 321, 393, 3847, 257, 2316, 490, 300, 2997], "temperature": 0.0, "avg_logprob": -0.09368984256170493, "compression_ratio": 1.6591760299625469, "no_speech_prob": 2.506935015844647e-05}, {"id": 228, "seek": 89600, "start": 912.0, "end": 916.0, "text": " away as well. You could do key points.", "tokens": [1314, 382, 731, 13, 509, 727, 360, 2141, 2793, 13], "temperature": 0.0, "avg_logprob": -0.09368984256170493, "compression_ratio": 1.6591760299625469, "no_speech_prob": 2.506935015844647e-05}, {"id": 229, "seek": 89600, "start": 916.0, "end": 920.0, "text": " So here I've just changed my dependent variable to tensor point, and so now it knows", "tokens": [407, 510, 286, 600, 445, 3105, 452, 12334, 7006, 281, 40863, 935, 11, 293, 370, 586, 309, 3255], "temperature": 0.0, "avg_logprob": -0.09368984256170493, "compression_ratio": 1.6591760299625469, "no_speech_prob": 2.506935015844647e-05}, {"id": 230, "seek": 89600, "start": 920.0, "end": 924.0, "text": " how to behave with that. Object detection. So now", "tokens": [577, 281, 15158, 365, 300, 13, 24753, 17784, 13, 407, 586], "temperature": 0.0, "avg_logprob": -0.09368984256170493, "compression_ratio": 1.6591760299625469, "no_speech_prob": 2.506935015844647e-05}, {"id": 231, "seek": 92400, "start": 924.0, "end": 928.0, "text": " I changed my dependent variable to bounding box. And you can see I've got my bounding boxes", "tokens": [286, 3105, 452, 12334, 7006, 281, 5472, 278, 2424, 13, 400, 291, 393, 536, 286, 600, 658, 452, 5472, 278, 9002], "temperature": 0.0, "avg_logprob": -0.17474408303537675, "compression_ratio": 1.4976303317535544, "no_speech_prob": 3.8227812183322385e-05}, {"id": 232, "seek": 92400, "start": 928.0, "end": 932.0, "text": " here. Text.", "tokens": [510, 13, 18643, 13], "temperature": 0.0, "avg_logprob": -0.17474408303537675, "compression_ratio": 1.4976303317535544, "no_speech_prob": 3.8227812183322385e-05}, {"id": 233, "seek": 92400, "start": 932.0, "end": 936.0, "text": " And so forth.", "tokens": [400, 370, 5220, 13], "temperature": 0.0, "avg_logprob": -0.17474408303537675, "compression_ratio": 1.4976303317535544, "no_speech_prob": 3.8227812183322385e-05}, {"id": 234, "seek": 92400, "start": 936.0, "end": 940.0, "text": " So actually going back, I have a couple questions if it's a good idea.", "tokens": [407, 767, 516, 646, 11, 286, 362, 257, 1916, 1651, 498, 309, 311, 257, 665, 1558, 13], "temperature": 0.0, "avg_logprob": -0.17474408303537675, "compression_ratio": 1.4976303317535544, "no_speech_prob": 3.8227812183322385e-05}, {"id": 235, "seek": 92400, "start": 940.0, "end": 944.0, "text": " So the code, you've got", "tokens": [407, 264, 3089, 11, 291, 600, 658], "temperature": 0.0, "avg_logprob": -0.17474408303537675, "compression_ratio": 1.4976303317535544, "no_speech_prob": 3.8227812183322385e-05}, {"id": 236, "seek": 92400, "start": 944.0, "end": 948.0, "text": " the Xs and Ys, and these both, it sounds like", "tokens": [264, 1783, 82, 293, 398, 82, 11, 293, 613, 1293, 11, 309, 3263, 411], "temperature": 0.0, "avg_logprob": -0.17474408303537675, "compression_ratio": 1.4976303317535544, "no_speech_prob": 3.8227812183322385e-05}, {"id": 237, "seek": 92400, "start": 948.0, "end": 952.0, "text": " these different data types roughly conform to a protocol.", "tokens": [613, 819, 1412, 3467, 9810, 18975, 281, 257, 10336, 13], "temperature": 0.0, "avg_logprob": -0.17474408303537675, "compression_ratio": 1.4976303317535544, "no_speech_prob": 3.8227812183322385e-05}, {"id": 238, "seek": 95200, "start": 952.0, "end": 956.0, "text": " Yep. We're going to get to that in a moment. Absolutely.", "tokens": [7010, 13, 492, 434, 516, 281, 483, 281, 300, 294, 257, 1623, 13, 7021, 13], "temperature": 0.0, "avg_logprob": -0.07939138827116593, "compression_ratio": 1.6260162601626016, "no_speech_prob": 4.1326242353534326e-05}, {"id": 239, "seek": 95200, "start": 956.0, "end": 960.0, "text": " That's an excellent way to think of it. And actually, this is the way", "tokens": [663, 311, 364, 7103, 636, 281, 519, 295, 309, 13, 400, 767, 11, 341, 307, 264, 636], "temperature": 0.0, "avg_logprob": -0.07939138827116593, "compression_ratio": 1.6260162601626016, "no_speech_prob": 4.1326242353534326e-05}, {"id": 240, "seek": 95200, "start": 960.0, "end": 964.0, "text": " it looked about three weeks ago. Now it looks even more like a protocol.", "tokens": [309, 2956, 466, 1045, 3259, 2057, 13, 823, 309, 1542, 754, 544, 411, 257, 10336, 13], "temperature": 0.0, "avg_logprob": -0.07939138827116593, "compression_ratio": 1.6260162601626016, "no_speech_prob": 4.1326242353534326e-05}, {"id": 241, "seek": 95200, "start": 964.0, "end": 968.0, "text": " So, yes, this is where it all", "tokens": [407, 11, 2086, 11, 341, 307, 689, 309, 439], "temperature": 0.0, "avg_logprob": -0.07939138827116593, "compression_ratio": 1.6260162601626016, "no_speech_prob": 4.1326242353534326e-05}, {"id": 242, "seek": 95200, "start": 968.0, "end": 972.0, "text": " comes from, which is the foundation APIs. And this is the bit that I think is the", "tokens": [1487, 490, 11, 597, 307, 264, 7030, 21445, 13, 400, 341, 307, 264, 857, 300, 286, 519, 307, 264], "temperature": 0.0, "avg_logprob": -0.07939138827116593, "compression_ratio": 1.6260162601626016, "no_speech_prob": 4.1326242353534326e-05}, {"id": 243, "seek": 95200, "start": 972.0, "end": 976.0, "text": " most relevant to Swift.", "tokens": [881, 7340, 281, 25539, 13], "temperature": 0.0, "avg_logprob": -0.07939138827116593, "compression_ratio": 1.6260162601626016, "no_speech_prob": 4.1326242353534326e-05}, {"id": 244, "seek": 95200, "start": 976.0, "end": 980.0, "text": " A lot of this, I think, would be a lot easier to write in Swift.", "tokens": [316, 688, 295, 341, 11, 286, 519, 11, 576, 312, 257, 688, 3571, 281, 2464, 294, 25539, 13], "temperature": 0.0, "avg_logprob": -0.07939138827116593, "compression_ratio": 1.6260162601626016, "no_speech_prob": 4.1326242353534326e-05}, {"id": 245, "seek": 98000, "start": 980.0, "end": 984.0, "text": " So the first thing that we added to PyTorch", "tokens": [407, 264, 700, 551, 300, 321, 3869, 281, 9953, 51, 284, 339], "temperature": 0.0, "avg_logprob": -0.08535463108735926, "compression_ratio": 1.5320197044334976, "no_speech_prob": 1.670002893661149e-05}, {"id": 246, "seek": 98000, "start": 984.0, "end": 988.0, "text": " was object oriented tenses. For", "tokens": [390, 2657, 21841, 256, 9085, 13, 1171], "temperature": 0.0, "avg_logprob": -0.08535463108735926, "compression_ratio": 1.5320197044334976, "no_speech_prob": 1.670002893661149e-05}, {"id": 247, "seek": 98000, "start": 988.0, "end": 992.0, "text": " too long, we've all been satisfied with a data type called", "tokens": [886, 938, 11, 321, 600, 439, 668, 11239, 365, 257, 1412, 2010, 1219], "temperature": 0.0, "avg_logprob": -0.08535463108735926, "compression_ratio": 1.5320197044334976, "no_speech_prob": 1.670002893661149e-05}, {"id": 248, "seek": 98000, "start": 992.0, "end": 996.0, "text": " tensor, which has no semantics to it.", "tokens": [40863, 11, 597, 575, 572, 4361, 45298, 281, 309, 13], "temperature": 0.0, "avg_logprob": -0.08535463108735926, "compression_ratio": 1.5320197044334976, "no_speech_prob": 1.670002893661149e-05}, {"id": 249, "seek": 98000, "start": 996.0, "end": 1000.0, "text": " And so those tenses actually represent something like", "tokens": [400, 370, 729, 256, 9085, 767, 2906, 746, 411], "temperature": 0.0, "avg_logprob": -0.08535463108735926, "compression_ratio": 1.5320197044334976, "no_speech_prob": 1.670002893661149e-05}, {"id": 250, "seek": 98000, "start": 1000.0, "end": 1004.0, "text": " a sentence or a picture of a cat or", "tokens": [257, 8174, 420, 257, 3036, 295, 257, 3857, 420], "temperature": 0.0, "avg_logprob": -0.08535463108735926, "compression_ratio": 1.5320197044334976, "no_speech_prob": 1.670002893661149e-05}, {"id": 251, "seek": 98000, "start": 1004.0, "end": 1008.0, "text": " a recording of somebody saying something. So why", "tokens": [257, 6613, 295, 2618, 1566, 746, 13, 407, 983], "temperature": 0.0, "avg_logprob": -0.08535463108735926, "compression_ratio": 1.5320197044334976, "no_speech_prob": 1.670002893661149e-05}, {"id": 252, "seek": 100800, "start": 1008.0, "end": 1012.0, "text": " can't I take one of those tenses and say dot flip or dot", "tokens": [393, 380, 286, 747, 472, 295, 729, 256, 9085, 293, 584, 5893, 7929, 420, 5893], "temperature": 0.0, "avg_logprob": -0.055997240777109186, "compression_ratio": 1.6445497630331753, "no_speech_prob": 7.646201993338764e-06}, {"id": 253, "seek": 100800, "start": 1012.0, "end": 1016.0, "text": " rotate or dot resample or dot translate to German?", "tokens": [13121, 420, 5893, 725, 335, 781, 420, 5893, 13799, 281, 6521, 30], "temperature": 0.0, "avg_logprob": -0.055997240777109186, "compression_ratio": 1.6445497630331753, "no_speech_prob": 7.646201993338764e-06}, {"id": 254, "seek": 100800, "start": 1016.0, "end": 1020.0, "text": " Well, the answer is you can't because", "tokens": [1042, 11, 264, 1867, 307, 291, 393, 380, 570], "temperature": 0.0, "avg_logprob": -0.055997240777109186, "compression_ratio": 1.6445497630331753, "no_speech_prob": 7.646201993338764e-06}, {"id": 255, "seek": 100800, "start": 1020.0, "end": 1024.0, "text": " it's just a tensor without a type. So we have added", "tokens": [309, 311, 445, 257, 40863, 1553, 257, 2010, 13, 407, 321, 362, 3869], "temperature": 0.0, "avg_logprob": -0.055997240777109186, "compression_ratio": 1.6445497630331753, "no_speech_prob": 7.646201993338764e-06}, {"id": 256, "seek": 100800, "start": 1024.0, "end": 1028.0, "text": " types to tenses. So you can now", "tokens": [3467, 281, 256, 9085, 13, 407, 291, 393, 586], "temperature": 0.0, "avg_logprob": -0.055997240777109186, "compression_ratio": 1.6445497630331753, "no_speech_prob": 7.646201993338764e-06}, {"id": 257, "seek": 100800, "start": 1028.0, "end": 1032.0, "text": " have a tensor image, tensor point, tensor bounding box,", "tokens": [362, 257, 40863, 3256, 11, 40863, 935, 11, 40863, 5472, 278, 2424, 11], "temperature": 0.0, "avg_logprob": -0.055997240777109186, "compression_ratio": 1.6445497630331753, "no_speech_prob": 7.646201993338764e-06}, {"id": 258, "seek": 100800, "start": 1032.0, "end": 1036.0, "text": " and you can define a flip left right for each. And so this is", "tokens": [293, 291, 393, 6964, 257, 7929, 1411, 558, 337, 1184, 13, 400, 370, 341, 307], "temperature": 0.0, "avg_logprob": -0.055997240777109186, "compression_ratio": 1.6445497630331753, "no_speech_prob": 7.646201993338764e-06}, {"id": 259, "seek": 103600, "start": 1036.0, "end": 1040.0, "text": " some of the source code from we've written our own computer vision library. So that", "tokens": [512, 295, 264, 4009, 3089, 490, 321, 600, 3720, 527, 1065, 3820, 5201, 6405, 13, 407, 300], "temperature": 0.0, "avg_logprob": -0.09768370277861245, "compression_ratio": 1.6846473029045643, "no_speech_prob": 6.747865427314537e-06}, {"id": 260, "seek": 103600, "start": 1040.0, "end": 1044.0, "text": " now you can say flip LR and it", "tokens": [586, 291, 393, 584, 7929, 441, 49, 293, 309], "temperature": 0.0, "avg_logprob": -0.09768370277861245, "compression_ratio": 1.6846473029045643, "no_speech_prob": 6.747865427314537e-06}, {"id": 261, "seek": 103600, "start": 1044.0, "end": 1048.0, "text": " flips the puppy. And if it was a key", "tokens": [40249, 264, 18196, 13, 400, 498, 309, 390, 257, 2141], "temperature": 0.0, "avg_logprob": -0.09768370277861245, "compression_ratio": 1.6846473029045643, "no_speech_prob": 6.747865427314537e-06}, {"id": 262, "seek": 103600, "start": 1048.0, "end": 1052.0, "text": " point, it would flip the key point. If it was a bounding box, it would flip the bounding boxes.", "tokens": [935, 11, 309, 576, 7929, 264, 2141, 935, 13, 759, 309, 390, 257, 5472, 278, 2424, 11, 309, 576, 7929, 264, 5472, 278, 9002, 13], "temperature": 0.0, "avg_logprob": -0.09768370277861245, "compression_ratio": 1.6846473029045643, "no_speech_prob": 6.747865427314537e-06}, {"id": 263, "seek": 103600, "start": 1052.0, "end": 1056.0, "text": " And so forth. So this is an example of how", "tokens": [400, 370, 5220, 13, 407, 341, 307, 364, 1365, 295, 577], "temperature": 0.0, "avg_logprob": -0.09768370277861245, "compression_ratio": 1.6846473029045643, "no_speech_prob": 6.747865427314537e-06}, {"id": 264, "seek": 103600, "start": 1056.0, "end": 1060.0, "text": " tenses which carry around semantics are nice. It's also nice that I didn't", "tokens": [256, 9085, 597, 3985, 926, 4361, 45298, 366, 1481, 13, 467, 311, 611, 1481, 300, 286, 994, 380], "temperature": 0.0, "avg_logprob": -0.09768370277861245, "compression_ratio": 1.6846473029045643, "no_speech_prob": 6.747865427314537e-06}, {"id": 265, "seek": 103600, "start": 1060.0, "end": 1064.0, "text": " just say dot show, right? So dot show is", "tokens": [445, 584, 5893, 855, 11, 558, 30, 407, 5893, 855, 307], "temperature": 0.0, "avg_logprob": -0.09768370277861245, "compression_ratio": 1.6846473029045643, "no_speech_prob": 6.747865427314537e-06}, {"id": 266, "seek": 106400, "start": 1064.0, "end": 1068.0, "text": " something that's defined for all fast AIV to tensor types.", "tokens": [746, 300, 311, 7642, 337, 439, 2370, 7318, 53, 281, 40863, 3467, 13], "temperature": 0.0, "avg_logprob": -0.07062294608668278, "compression_ratio": 1.69, "no_speech_prob": 1.1658845323836431e-05}, {"id": 267, "seek": 106400, "start": 1068.0, "end": 1072.0, "text": " And it will just display that tensor.", "tokens": [400, 309, 486, 445, 4674, 300, 40863, 13], "temperature": 0.0, "avg_logprob": -0.07062294608668278, "compression_ratio": 1.69, "no_speech_prob": 1.1658845323836431e-05}, {"id": 268, "seek": 106400, "start": 1072.0, "end": 1076.0, "text": " It could even be a tuple containing a tensor and some bounding", "tokens": [467, 727, 754, 312, 257, 2604, 781, 19273, 257, 40863, 293, 512, 5472, 278], "temperature": 0.0, "avg_logprob": -0.07062294608668278, "compression_ratio": 1.69, "no_speech_prob": 1.1658845323836431e-05}, {"id": 269, "seek": 106400, "start": 1076.0, "end": 1080.0, "text": " boxes and some bounding box classes. Whatever it is, it will be able to", "tokens": [9002, 293, 512, 5472, 278, 2424, 5359, 13, 8541, 309, 307, 11, 309, 486, 312, 1075, 281], "temperature": 0.0, "avg_logprob": -0.07062294608668278, "compression_ratio": 1.69, "no_speech_prob": 1.1658845323836431e-05}, {"id": 270, "seek": 106400, "start": 1080.0, "end": 1084.0, "text": " display it. It will be able to convert it into", "tokens": [4674, 309, 13, 467, 486, 312, 1075, 281, 7620, 309, 666], "temperature": 0.0, "avg_logprob": -0.07062294608668278, "compression_ratio": 1.69, "no_speech_prob": 1.1658845323836431e-05}, {"id": 271, "seek": 106400, "start": 1084.0, "end": 1088.0, "text": " batches for modeling and so forth.", "tokens": [15245, 279, 337, 15983, 293, 370, 5220, 13], "temperature": 0.0, "avg_logprob": -0.07062294608668278, "compression_ratio": 1.69, "no_speech_prob": 1.1658845323836431e-05}, {"id": 272, "seek": 106400, "start": 1088.0, "end": 1092.0, "text": " So, you know, with that,", "tokens": [407, 11, 291, 458, 11, 365, 300, 11], "temperature": 0.0, "avg_logprob": -0.07062294608668278, "compression_ratio": 1.69, "no_speech_prob": 1.1658845323836431e-05}, {"id": 273, "seek": 109200, "start": 1092.0, "end": 1096.0, "text": " we can now create, for example, a random transformation called flip", "tokens": [321, 393, 586, 1884, 11, 337, 1365, 11, 257, 4974, 9887, 1219, 7929], "temperature": 0.0, "avg_logprob": -0.06923938732521207, "compression_ratio": 1.6903765690376569, "no_speech_prob": 2.144255631719716e-05}, {"id": 274, "seek": 109200, "start": 1096.0, "end": 1100.0, "text": " item. And we can say that the encoding of that random transformation", "tokens": [3174, 13, 400, 321, 393, 584, 300, 264, 43430, 295, 300, 4974, 9887], "temperature": 0.0, "avg_logprob": -0.06923938732521207, "compression_ratio": 1.6903765690376569, "no_speech_prob": 2.144255631719716e-05}, {"id": 275, "seek": 109200, "start": 1100.0, "end": 1104.0, "text": " is defined for a pillow image or", "tokens": [307, 7642, 337, 257, 18581, 3256, 420], "temperature": 0.0, "avg_logprob": -0.06923938732521207, "compression_ratio": 1.6903765690376569, "no_speech_prob": 2.144255631719716e-05}, {"id": 276, "seek": 109200, "start": 1104.0, "end": 1108.0, "text": " any tensor type. And in each case, the implementation is simply", "tokens": [604, 40863, 2010, 13, 400, 294, 1184, 1389, 11, 264, 11420, 307, 2935], "temperature": 0.0, "avg_logprob": -0.06923938732521207, "compression_ratio": 1.6903765690376569, "no_speech_prob": 2.144255631719716e-05}, {"id": 277, "seek": 109200, "start": 1108.0, "end": 1112.0, "text": " to call X dot flip LR. Or we could do the", "tokens": [281, 818, 1783, 5893, 7929, 441, 49, 13, 1610, 321, 727, 360, 264], "temperature": 0.0, "avg_logprob": -0.06923938732521207, "compression_ratio": 1.6903765690376569, "no_speech_prob": 2.144255631719716e-05}, {"id": 278, "seek": 109200, "start": 1112.0, "end": 1116.0, "text": " dihedral symmetry transforms in the same way. Before we call,", "tokens": [1026, 71, 24764, 25440, 35592, 294, 264, 912, 636, 13, 4546, 321, 818, 11], "temperature": 0.0, "avg_logprob": -0.06923938732521207, "compression_ratio": 1.6903765690376569, "no_speech_prob": 2.144255631719716e-05}, {"id": 279, "seek": 109200, "start": 1116.0, "end": 1120.0, "text": " grab a random number between zero and seven to decide which of the", "tokens": [4444, 257, 4974, 1230, 1296, 4018, 293, 3407, 281, 4536, 597, 295, 264], "temperature": 0.0, "avg_logprob": -0.06923938732521207, "compression_ratio": 1.6903765690376569, "no_speech_prob": 2.144255631719716e-05}, {"id": 280, "seek": 112000, "start": 1120.0, "end": 1124.0, "text": " eight transposes to do.", "tokens": [3180, 7132, 4201, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.1467708386872944, "compression_ratio": 1.4956521739130435, "no_speech_prob": 1.77775200427277e-05}, {"id": 281, "seek": 112000, "start": 1124.0, "end": 1128.0, "text": " And then encode score X dot what's dihedral with that", "tokens": [400, 550, 2058, 1429, 6175, 1783, 5893, 437, 311, 1026, 71, 24764, 365, 300], "temperature": 0.0, "avg_logprob": -0.1467708386872944, "compression_ratio": 1.4956521739130435, "no_speech_prob": 1.77775200427277e-05}, {"id": 282, "seek": 112000, "start": 1128.0, "end": 1132.0, "text": " thing we just got. And so now we can", "tokens": [551, 321, 445, 658, 13, 400, 370, 586, 321, 393], "temperature": 0.0, "avg_logprob": -0.1467708386872944, "compression_ratio": 1.4956521739130435, "no_speech_prob": 1.77775200427277e-05}, {"id": 283, "seek": 112000, "start": 1132.0, "end": 1136.0, "text": " call that transform a bunch of times and each time we'll get back a different", "tokens": [818, 300, 4088, 257, 3840, 295, 1413, 293, 1184, 565, 321, 603, 483, 646, 257, 819], "temperature": 0.0, "avg_logprob": -0.1467708386872944, "compression_ratio": 1.4956521739130435, "no_speech_prob": 1.77775200427277e-05}, {"id": 284, "seek": 112000, "start": 1136.0, "end": 1140.0, "text": " random augmentation. So a lot of these things become nice and easy.", "tokens": [4974, 14501, 19631, 13, 407, 257, 688, 295, 613, 721, 1813, 1481, 293, 1858, 13], "temperature": 0.0, "avg_logprob": -0.1467708386872944, "compression_ratio": 1.4956521739130435, "no_speech_prob": 1.77775200427277e-05}, {"id": 285, "seek": 112000, "start": 1140.0, "end": 1144.0, "text": " Hey Jeremy, Maxim asked, why isn't tensor backing data structure", "tokens": [1911, 17809, 11, 29076, 2351, 11, 983, 1943, 380, 40863, 19373, 1412, 3877], "temperature": 0.0, "avg_logprob": -0.1467708386872944, "compression_ratio": 1.4956521739130435, "no_speech_prob": 1.77775200427277e-05}, {"id": 286, "seek": 112000, "start": 1144.0, "end": 1148.0, "text": " for an image type?", "tokens": [337, 364, 3256, 2010, 30], "temperature": 0.0, "avg_logprob": -0.1467708386872944, "compression_ratio": 1.4956521739130435, "no_speech_prob": 1.77775200427277e-05}, {"id": 287, "seek": 114800, "start": 1148.0, "end": 1152.0, "text": " I think tensor image is a tensor which is an image type.", "tokens": [286, 519, 40863, 3256, 307, 257, 40863, 597, 307, 364, 3256, 2010, 13], "temperature": 0.0, "avg_logprob": -0.13893677638127253, "compression_ratio": 1.6108374384236452, "no_speech_prob": 1.7777199900592677e-05}, {"id": 288, "seek": 114800, "start": 1152.0, "end": 1156.0, "text": " Why isn't, he says, why isn't tensor a backing", "tokens": [1545, 1943, 380, 11, 415, 1619, 11, 983, 1943, 380, 40863, 257, 19373], "temperature": 0.0, "avg_logprob": -0.13893677638127253, "compression_ratio": 1.6108374384236452, "no_speech_prob": 1.7777199900592677e-05}, {"id": 289, "seek": 114800, "start": 1156.0, "end": 1160.0, "text": " why not have a different type named image, I guess, that has a tensor", "tokens": [983, 406, 362, 257, 819, 2010, 4926, 3256, 11, 286, 2041, 11, 300, 575, 257, 40863], "temperature": 0.0, "avg_logprob": -0.13893677638127253, "compression_ratio": 1.6108374384236452, "no_speech_prob": 1.7777199900592677e-05}, {"id": 290, "seek": 114800, "start": 1160.0, "end": 1164.0, "text": " inside of it? Do you mean why inherit rather than", "tokens": [1854, 295, 309, 30, 1144, 291, 914, 983, 21389, 2831, 813], "temperature": 0.0, "avg_logprob": -0.13893677638127253, "compression_ratio": 1.6108374384236452, "no_speech_prob": 1.7777199900592677e-05}, {"id": 291, "seek": 114800, "start": 1164.0, "end": 1168.0, "text": " compose? Apparently yes that.", "tokens": [35925, 30, 16755, 2086, 300, 13], "temperature": 0.0, "avg_logprob": -0.13893677638127253, "compression_ratio": 1.6108374384236452, "no_speech_prob": 1.7777199900592677e-05}, {"id": 292, "seek": 114800, "start": 1168.0, "end": 1172.0, "text": " Yeah. So inheritance", "tokens": [865, 13, 407, 32122], "temperature": 0.0, "avg_logprob": -0.13893677638127253, "compression_ratio": 1.6108374384236452, "no_speech_prob": 1.7777199900592677e-05}, {"id": 293, "seek": 114800, "start": 1172.0, "end": 1176.0, "text": " I mean, you can do both and you can create identical", "tokens": [286, 914, 11, 291, 393, 360, 1293, 293, 291, 393, 1884, 14800], "temperature": 0.0, "avg_logprob": -0.13893677638127253, "compression_ratio": 1.6108374384236452, "no_speech_prob": 1.7777199900592677e-05}, {"id": 294, "seek": 117600, "start": 1176.0, "end": 1180.0, "text": " APIs. Inheritance just has the benefit that all the normal", "tokens": [21445, 13, 682, 511, 270, 719, 445, 575, 264, 5121, 300, 439, 264, 2710], "temperature": 0.0, "avg_logprob": -0.08511165272105824, "compression_ratio": 1.7339055793991416, "no_speech_prob": 8.397133569815196e-06}, {"id": 295, "seek": 117600, "start": 1180.0, "end": 1184.0, "text": " stuff you can do with the tensor, you can do with a tensor that happens to be an image.", "tokens": [1507, 291, 393, 360, 365, 264, 40863, 11, 291, 393, 360, 365, 257, 40863, 300, 2314, 281, 312, 364, 3256, 13], "temperature": 0.0, "avg_logprob": -0.08511165272105824, "compression_ratio": 1.7339055793991416, "no_speech_prob": 8.397133569815196e-06}, {"id": 296, "seek": 117600, "start": 1184.0, "end": 1188.0, "text": " So just because a tensor is an image doesn't mean you now don't want to be able to do fancy", "tokens": [407, 445, 570, 257, 40863, 307, 364, 3256, 1177, 380, 914, 291, 586, 500, 380, 528, 281, 312, 1075, 281, 360, 10247], "temperature": 0.0, "avg_logprob": -0.08511165272105824, "compression_ratio": 1.7339055793991416, "no_speech_prob": 8.397133569815196e-06}, {"id": 297, "seek": 117600, "start": 1188.0, "end": 1192.0, "text": " indexing to it or do an LUD composition of it", "tokens": [8186, 278, 281, 309, 420, 360, 364, 441, 9438, 12686, 295, 309], "temperature": 0.0, "avg_logprob": -0.08511165272105824, "compression_ratio": 1.7339055793991416, "no_speech_prob": 8.397133569815196e-06}, {"id": 298, "seek": 117600, "start": 1192.0, "end": 1196.0, "text": " or stack it with other tensors across some", "tokens": [420, 8630, 309, 365, 661, 10688, 830, 2108, 512], "temperature": 0.0, "avg_logprob": -0.08511165272105824, "compression_ratio": 1.7339055793991416, "no_speech_prob": 8.397133569815196e-06}, {"id": 299, "seek": 117600, "start": 1196.0, "end": 1200.0, "text": " axis. So basically a", "tokens": [10298, 13, 407, 1936, 257], "temperature": 0.0, "avg_logprob": -0.08511165272105824, "compression_ratio": 1.7339055793991416, "no_speech_prob": 8.397133569815196e-06}, {"id": 300, "seek": 117600, "start": 1200.0, "end": 1204.0, "text": " tensor image ought to have all the behavior of a tensor", "tokens": [40863, 3256, 13416, 281, 362, 439, 264, 5223, 295, 257, 40863], "temperature": 0.0, "avg_logprob": -0.08511165272105824, "compression_ratio": 1.7339055793991416, "no_speech_prob": 8.397133569815196e-06}, {"id": 301, "seek": 120400, "start": 1204.0, "end": 1208.0, "text": " plus additional behavior. So that's why we used inheritance.", "tokens": [1804, 4497, 5223, 13, 407, 300, 311, 983, 321, 1143, 32122, 13], "temperature": 0.0, "avg_logprob": -0.11824579936702077, "compression_ratio": 1.6231884057971016, "no_speech_prob": 4.331318996264599e-05}, {"id": 302, "seek": 120400, "start": 1208.0, "end": 1212.0, "text": " We have a version that uses composition as well and it uses", "tokens": [492, 362, 257, 3037, 300, 4960, 12686, 382, 731, 293, 309, 4960], "temperature": 0.0, "avg_logprob": -0.11824579936702077, "compression_ratio": 1.6231884057971016, "no_speech_prob": 4.331318996264599e-05}, {"id": 303, "seek": 120400, "start": 1212.0, "end": 1216.0, "text": " Python's nice get atria functionality to", "tokens": [15329, 311, 1481, 483, 412, 4668, 14980, 281], "temperature": 0.0, "avg_logprob": -0.11824579936702077, "compression_ratio": 1.6231884057971016, "no_speech_prob": 4.331318996264599e-05}, {"id": 304, "seek": 120400, "start": 1216.0, "end": 1220.0, "text": " pass on all of the", "tokens": [1320, 322, 439, 295, 264], "temperature": 0.0, "avg_logprob": -0.11824579936702077, "compression_ratio": 1.6231884057971016, "no_speech_prob": 4.331318996264599e-05}, {"id": 305, "seek": 120400, "start": 1220.0, "end": 1224.0, "text": " behavior of tensor but it comes up more nicely in Python", "tokens": [5223, 295, 40863, 457, 309, 1487, 493, 544, 9594, 294, 15329], "temperature": 0.0, "avg_logprob": -0.11824579936702077, "compression_ratio": 1.6231884057971016, "no_speech_prob": 4.331318996264599e-05}, {"id": 306, "seek": 120400, "start": 1224.0, "end": 1228.0, "text": " when you do inheritance and actually the PyTorch team has", "tokens": [562, 291, 360, 32122, 293, 767, 264, 9953, 51, 284, 339, 1469, 575], "temperature": 0.0, "avg_logprob": -0.11824579936702077, "compression_ratio": 1.6231884057971016, "no_speech_prob": 4.331318996264599e-05}, {"id": 307, "seek": 120400, "start": 1228.0, "end": 1232.0, "text": " decided to officially implement semantic", "tokens": [3047, 281, 12053, 4445, 47982], "temperature": 0.0, "avg_logprob": -0.11824579936702077, "compression_ratio": 1.6231884057971016, "no_speech_prob": 4.331318996264599e-05}, {"id": 308, "seek": 123200, "start": 1232.0, "end": 1236.0, "text": " tensor subtypes now and so hopefully in the next version of PyTorch", "tokens": [40863, 1422, 874, 5190, 586, 293, 370, 4696, 294, 264, 958, 3037, 295, 9953, 51, 284, 339], "temperature": 0.0, "avg_logprob": -0.11777489464562219, "compression_ratio": 1.6270491803278688, "no_speech_prob": 0.00011589758651098236}, {"id": 309, "seek": 123200, "start": 1236.0, "end": 1240.0, "text": " you won't have to use the extremely ugly hacks that we had to use to", "tokens": [291, 1582, 380, 362, 281, 764, 264, 4664, 12246, 33617, 300, 321, 632, 281, 764, 281], "temperature": 0.0, "avg_logprob": -0.11777489464562219, "compression_ratio": 1.6270491803278688, "no_speech_prob": 0.00011589758651098236}, {"id": 310, "seek": 123200, "start": 1240.0, "end": 1244.0, "text": " make this work. You'll be able to use the real ones.", "tokens": [652, 341, 589, 13, 509, 603, 312, 1075, 281, 764, 264, 957, 2306, 13], "temperature": 0.0, "avg_logprob": -0.11777489464562219, "compression_ratio": 1.6270491803278688, "no_speech_prob": 0.00011589758651098236}, {"id": 311, "seek": 123200, "start": 1244.0, "end": 1248.0, "text": " And hopefully you'll see in TorchVision some of these ideas", "tokens": [400, 4696, 291, 603, 536, 294, 7160, 339, 53, 1991, 512, 295, 613, 3487], "temperature": 0.0, "avg_logprob": -0.11777489464562219, "compression_ratio": 1.6270491803278688, "no_speech_prob": 0.00011589758651098236}, {"id": 312, "seek": 123200, "start": 1248.0, "end": 1252.0, "text": " will be brought over there. Can I ask you, so how does", "tokens": [486, 312, 3038, 670, 456, 13, 1664, 286, 1029, 291, 11, 370, 577, 775], "temperature": 0.0, "avg_logprob": -0.11777489464562219, "compression_ratio": 1.6270491803278688, "no_speech_prob": 0.00011589758651098236}, {"id": 313, "seek": 123200, "start": 1252.0, "end": 1256.0, "text": " the type propagate? So if you do arithmetic on", "tokens": [264, 2010, 48256, 30, 407, 498, 291, 360, 42973, 322], "temperature": 0.0, "avg_logprob": -0.11777489464562219, "compression_ratio": 1.6270491803278688, "no_speech_prob": 0.00011589758651098236}, {"id": 314, "seek": 123200, "start": 1256.0, "end": 1260.0, "text": " image tensor do you get an image tensor back?", "tokens": [3256, 40863, 360, 291, 483, 364, 3256, 40863, 646, 30], "temperature": 0.0, "avg_logprob": -0.11777489464562219, "compression_ratio": 1.6270491803278688, "no_speech_prob": 0.00011589758651098236}, {"id": 315, "seek": 126000, "start": 1260.0, "end": 1264.0, "text": " So Chris and I had a conversation about this a few months ago", "tokens": [407, 6688, 293, 286, 632, 257, 3761, 466, 341, 257, 1326, 2493, 2057], "temperature": 0.0, "avg_logprob": -0.08682164278897372, "compression_ratio": 1.7022058823529411, "no_speech_prob": 6.70694571454078e-05}, {"id": 316, "seek": 126000, "start": 1264.0, "end": 1268.0, "text": " and I said I'm banging my head around this issue of", "tokens": [293, 286, 848, 286, 478, 36982, 452, 1378, 926, 341, 2734, 295], "temperature": 0.0, "avg_logprob": -0.08682164278897372, "compression_ratio": 1.7022058823529411, "no_speech_prob": 6.70694571454078e-05}, {"id": 317, "seek": 126000, "start": 1268.0, "end": 1272.0, "text": " types not carrying around their behavior and Chris casually mentioned", "tokens": [3467, 406, 9792, 926, 641, 5223, 293, 6688, 34872, 2835], "temperature": 0.0, "avg_logprob": -0.08682164278897372, "compression_ratio": 1.7022058823529411, "no_speech_prob": 6.70694571454078e-05}, {"id": 318, "seek": 126000, "start": 1272.0, "end": 1276.0, "text": " oh yes that thing is called higher kind of types. So I went home", "tokens": [1954, 2086, 300, 551, 307, 1219, 2946, 733, 295, 3467, 13, 407, 286, 1437, 1280], "temperature": 0.0, "avg_logprob": -0.08682164278897372, "compression_ratio": 1.7022058823529411, "no_speech_prob": 6.70694571454078e-05}, {"id": 319, "seek": 126000, "start": 1276.0, "end": 1280.0, "text": " and that was one of these phrases that I thought only functional programming", "tokens": [293, 300, 390, 472, 295, 613, 20312, 300, 286, 1194, 787, 11745, 9410], "temperature": 0.0, "avg_logprob": -0.08682164278897372, "compression_ratio": 1.7022058823529411, "no_speech_prob": 6.70694571454078e-05}, {"id": 320, "seek": 126000, "start": 1280.0, "end": 1284.0, "text": " dweebs talked about and I would never care about.", "tokens": [274, 826, 68, 929, 2825, 466, 293, 286, 576, 1128, 1127, 466, 13], "temperature": 0.0, "avg_logprob": -0.08682164278897372, "compression_ratio": 1.7022058823529411, "no_speech_prob": 6.70694571454078e-05}, {"id": 321, "seek": 126000, "start": 1284.0, "end": 1288.0, "text": " Because it actually matters a lot and it's basically the idea that if you have a tensor", "tokens": [1436, 309, 767, 7001, 257, 688, 293, 309, 311, 1936, 264, 1558, 300, 498, 291, 362, 257, 40863], "temperature": 0.0, "avg_logprob": -0.08682164278897372, "compression_ratio": 1.7022058823529411, "no_speech_prob": 6.70694571454078e-05}, {"id": 322, "seek": 128800, "start": 1288.0, "end": 1292.0, "text": " image and you add one to it you want to get back a tensor", "tokens": [3256, 293, 291, 909, 472, 281, 309, 291, 528, 281, 483, 646, 257, 40863], "temperature": 0.0, "avg_logprob": -0.07729018103216112, "compression_ratio": 1.654708520179372, "no_speech_prob": 1.9220608010073192e-05}, {"id": 323, "seek": 128800, "start": 1292.0, "end": 1296.0, "text": " image because it should be an image that's a bit brighter rather than something that loses", "tokens": [3256, 570, 309, 820, 312, 364, 3256, 300, 311, 257, 857, 19764, 2831, 813, 746, 300, 18293], "temperature": 0.0, "avg_logprob": -0.07729018103216112, "compression_ratio": 1.654708520179372, "no_speech_prob": 1.9220608010073192e-05}, {"id": 324, "seek": 128800, "start": 1296.0, "end": 1300.0, "text": " its type. So we implemented our own", "tokens": [1080, 2010, 13, 407, 321, 12270, 527, 1065], "temperature": 0.0, "avg_logprob": -0.07729018103216112, "compression_ratio": 1.654708520179372, "no_speech_prob": 1.9220608010073192e-05}, {"id": 325, "seek": 128800, "start": 1300.0, "end": 1304.0, "text": " again hacky partial higher kind of type implementation", "tokens": [797, 10339, 88, 14641, 2946, 733, 295, 2010, 11420], "temperature": 0.0, "avg_logprob": -0.07729018103216112, "compression_ratio": 1.654708520179372, "no_speech_prob": 1.9220608010073192e-05}, {"id": 326, "seek": 128800, "start": 1304.0, "end": 1308.0, "text": " in Fast.ai V2. So any of these things that you do", "tokens": [294, 15968, 13, 1301, 691, 17, 13, 407, 604, 295, 613, 721, 300, 291, 360], "temperature": 0.0, "avg_logprob": -0.07729018103216112, "compression_ratio": 1.654708520179372, "no_speech_prob": 1.9220608010073192e-05}, {"id": 327, "seek": 128800, "start": 1308.0, "end": 1312.0, "text": " to a tensor of a subtype", "tokens": [281, 257, 40863, 295, 257, 1422, 20467], "temperature": 0.0, "avg_logprob": -0.07729018103216112, "compression_ratio": 1.654708520179372, "no_speech_prob": 1.9220608010073192e-05}, {"id": 328, "seek": 128800, "start": 1312.0, "end": 1316.0, "text": " you will nearly always get back the correctly subtyped", "tokens": [291, 486, 6217, 1009, 483, 646, 264, 8944, 1422, 874, 3452], "temperature": 0.0, "avg_logprob": -0.07729018103216112, "compression_ratio": 1.654708520179372, "no_speech_prob": 1.9220608010073192e-05}, {"id": 329, "seek": 131600, "start": 1316.0, "end": 1320.0, "text": " tensor. I mean I saw that PyTorch recently", "tokens": [40863, 13, 286, 914, 286, 1866, 300, 9953, 51, 284, 339, 3938], "temperature": 0.0, "avg_logprob": -0.13993902007738748, "compression_ratio": 1.6822033898305084, "no_speech_prob": 9.026872430695221e-05}, {"id": 330, "seek": 131600, "start": 1320.0, "end": 1324.0, "text": " started talking about their named indexing", "tokens": [1409, 1417, 466, 641, 4926, 8186, 278], "temperature": 0.0, "avg_logprob": -0.13993902007738748, "compression_ratio": 1.6822033898305084, "no_speech_prob": 9.026872430695221e-05}, {"id": 331, "seek": 131600, "start": 1324.0, "end": 1328.0, "text": " extensions for their tensors as well and I see that the similar kind of challenge", "tokens": [25129, 337, 641, 10688, 830, 382, 731, 293, 286, 536, 300, 264, 2531, 733, 295, 3430], "temperature": 0.0, "avg_logprob": -0.13993902007738748, "compression_ratio": 1.6822033898305084, "no_speech_prob": 9.026872430695221e-05}, {"id": 332, "seek": 131600, "start": 1328.0, "end": 1332.0, "text": " there where when you start doing arithmetic and other things like that on", "tokens": [456, 689, 562, 291, 722, 884, 42973, 293, 661, 721, 411, 300, 322], "temperature": 0.0, "avg_logprob": -0.13993902007738748, "compression_ratio": 1.6822033898305084, "no_speech_prob": 9.026872430695221e-05}, {"id": 333, "seek": 131600, "start": 1332.0, "end": 1336.0, "text": " a tensor that has named dimensions you want to propagate those", "tokens": [257, 40863, 300, 575, 4926, 12819, 291, 528, 281, 48256, 729], "temperature": 0.0, "avg_logprob": -0.13993902007738748, "compression_ratio": 1.6822033898305084, "no_speech_prob": 9.026872430695221e-05}, {"id": 334, "seek": 131600, "start": 1336.0, "end": 1340.0, "text": " along. Yeah so we haven't started", "tokens": [2051, 13, 865, 370, 321, 2378, 380, 1409], "temperature": 0.0, "avg_logprob": -0.13993902007738748, "compression_ratio": 1.6822033898305084, "no_speech_prob": 9.026872430695221e-05}, {"id": 335, "seek": 131600, "start": 1340.0, "end": 1344.0, "text": " using that yet because it hasn't quite landed it's stable.", "tokens": [1228, 300, 1939, 570, 309, 6132, 380, 1596, 15336, 309, 311, 8351, 13], "temperature": 0.0, "avg_logprob": -0.13993902007738748, "compression_ratio": 1.6822033898305084, "no_speech_prob": 9.026872430695221e-05}, {"id": 336, "seek": 134400, "start": 1344.0, "end": 1348.0, "text": " But yeah it's we talked to the PyTorch", "tokens": [583, 1338, 309, 311, 321, 2825, 281, 264, 9953, 51, 284, 339], "temperature": 0.0, "avg_logprob": -0.18574018063752548, "compression_ratio": 1.5727699530516432, "no_speech_prob": 8.21892826934345e-05}, {"id": 337, "seek": 134400, "start": 1348.0, "end": 1352.0, "text": " team at the DevCon and we certainly are planning to", "tokens": [1469, 412, 264, 9096, 9838, 293, 321, 3297, 366, 5038, 281], "temperature": 0.0, "avg_logprob": -0.18574018063752548, "compression_ratio": 1.5727699530516432, "no_speech_prob": 8.21892826934345e-05}, {"id": 338, "seek": 134400, "start": 1352.0, "end": 1356.0, "text": " bring these ideas together. They're all thought on orbit related concerns.", "tokens": [1565, 613, 3487, 1214, 13, 814, 434, 439, 1194, 322, 13991, 4077, 7389, 13], "temperature": 0.0, "avg_logprob": -0.18574018063752548, "compression_ratio": 1.5727699530516432, "no_speech_prob": 8.21892826934345e-05}, {"id": 339, "seek": 134400, "start": 1356.0, "end": 1360.0, "text": " Yeah I just mean that I assume that that feature", "tokens": [865, 286, 445, 914, 300, 286, 6552, 300, 300, 4111], "temperature": 0.0, "avg_logprob": -0.18574018063752548, "compression_ratio": 1.5727699530516432, "no_speech_prob": 8.21892826934345e-05}, {"id": 340, "seek": 134400, "start": 1360.0, "end": 1364.0, "text": " has the same problem, the same challenge. I assume so.", "tokens": [575, 264, 912, 1154, 11, 264, 912, 3430, 13, 286, 6552, 370, 13], "temperature": 0.0, "avg_logprob": -0.18574018063752548, "compression_ratio": 1.5727699530516432, "no_speech_prob": 8.21892826934345e-05}, {"id": 341, "seek": 134400, "start": 1364.0, "end": 1368.0, "text": " It would be interesting to see what they do. Yeah.", "tokens": [467, 576, 312, 1880, 281, 536, 437, 436, 360, 13, 865, 13], "temperature": 0.0, "avg_logprob": -0.18574018063752548, "compression_ratio": 1.5727699530516432, "no_speech_prob": 8.21892826934345e-05}, {"id": 342, "seek": 134400, "start": 1368.0, "end": 1372.0, "text": " Yeah it would.", "tokens": [865, 309, 576, 13], "temperature": 0.0, "avg_logprob": -0.18574018063752548, "compression_ratio": 1.5727699530516432, "no_speech_prob": 8.21892826934345e-05}, {"id": 343, "seek": 137200, "start": 1372.0, "end": 1376.0, "text": " Yeah so you know it's kind of nice not only do we get to be able to say", "tokens": [865, 370, 291, 458, 309, 311, 733, 295, 1481, 406, 787, 360, 321, 483, 281, 312, 1075, 281, 584], "temperature": 0.0, "avg_logprob": -0.11963905432285407, "compression_ratio": 1.7619047619047619, "no_speech_prob": 2.7963362299487926e-05}, {"id": 344, "seek": 137200, "start": 1376.0, "end": 1380.0, "text": ".show batch but you can even go.show results.", "tokens": [2411, 34436, 15245, 457, 291, 393, 754, 352, 2411, 34436, 3542, 13], "temperature": 0.0, "avg_logprob": -0.11963905432285407, "compression_ratio": 1.7619047619047619, "no_speech_prob": 2.7963362299487926e-05}, {"id": 345, "seek": 137200, "start": 1380.0, "end": 1384.0, "text": " And in this case it knows what the independent variables type", "tokens": [400, 294, 341, 1389, 309, 3255, 437, 264, 6695, 9102, 2010], "temperature": 0.0, "avg_logprob": -0.11963905432285407, "compression_ratio": 1.7619047619047619, "no_speech_prob": 2.7963362299487926e-05}, {"id": 346, "seek": 137200, "start": 1384.0, "end": 1388.0, "text": " is, it knows what the dependent variables type is and it even knows things like hey", "tokens": [307, 11, 309, 3255, 437, 264, 12334, 9102, 2010, 307, 293, 309, 754, 3255, 721, 411, 4177], "temperature": 0.0, "avg_logprob": -0.11963905432285407, "compression_ratio": 1.7619047619047619, "no_speech_prob": 2.7963362299487926e-05}, {"id": 347, "seek": 137200, "start": 1388.0, "end": 1392.0, "text": " for a classification task those two things should be the same and if they're not by", "tokens": [337, 257, 21538, 5633, 729, 732, 721, 820, 312, 264, 912, 293, 498, 436, 434, 406, 538], "temperature": 0.0, "avg_logprob": -0.11963905432285407, "compression_ratio": 1.7619047619047619, "no_speech_prob": 2.7963362299487926e-05}, {"id": 348, "seek": 137200, "start": 1392.0, "end": 1396.0, "text": " default I will highlight them in the report. So these lower level", "tokens": [7576, 286, 486, 5078, 552, 294, 264, 2275, 13, 407, 613, 3126, 1496], "temperature": 0.0, "avg_logprob": -0.11963905432285407, "compression_ratio": 1.7619047619047619, "no_speech_prob": 2.7963362299487926e-05}, {"id": 349, "seek": 137200, "start": 1396.0, "end": 1400.0, "text": " foundations are the things that drive our ability to easily add this", "tokens": [22467, 366, 264, 721, 300, 3332, 527, 3485, 281, 3612, 909, 341], "temperature": 0.0, "avg_logprob": -0.11963905432285407, "compression_ratio": 1.7619047619047619, "no_speech_prob": 2.7963362299487926e-05}, {"id": 350, "seek": 140000, "start": 1400.0, "end": 1404.0, "text": " level functionality.", "tokens": [1496, 14980, 13], "temperature": 0.0, "avg_logprob": -0.09019154768723708, "compression_ratio": 1.592920353982301, "no_speech_prob": 4.2629708332242444e-05}, {"id": 351, "seek": 140000, "start": 1404.0, "end": 1408.0, "text": " So you know this is the kind of ugly stuff we wouldn't have to do in", "tokens": [407, 291, 458, 341, 307, 264, 733, 295, 12246, 1507, 321, 2759, 380, 362, 281, 360, 294], "temperature": 0.0, "avg_logprob": -0.09019154768723708, "compression_ratio": 1.592920353982301, "no_speech_prob": 4.2629708332242444e-05}, {"id": 352, "seek": 140000, "start": 1408.0, "end": 1412.0, "text": " Swift. We had to write our own type dispatch system.", "tokens": [25539, 13, 492, 632, 281, 2464, 527, 1065, 2010, 36729, 1185, 13], "temperature": 0.0, "avg_logprob": -0.09019154768723708, "compression_ratio": 1.592920353982301, "no_speech_prob": 4.2629708332242444e-05}, {"id": 353, "seek": 140000, "start": 1412.0, "end": 1416.0, "text": " So that we can annotate things with types and those type annotations", "tokens": [407, 300, 321, 393, 25339, 473, 721, 365, 3467, 293, 729, 2010, 25339, 763], "temperature": 0.0, "avg_logprob": -0.09019154768723708, "compression_ratio": 1.592920353982301, "no_speech_prob": 4.2629708332242444e-05}, {"id": 354, "seek": 140000, "start": 1416.0, "end": 1420.0, "text": " are actually semantic and so we now have", "tokens": [366, 767, 47982, 293, 370, 321, 586, 362], "temperature": 0.0, "avg_logprob": -0.09019154768723708, "compression_ratio": 1.592920353982301, "no_speech_prob": 4.2629708332242444e-05}, {"id": 355, "seek": 140000, "start": 1420.0, "end": 1424.0, "text": " joyfully modern idea of function overloading", "tokens": [6258, 2277, 4363, 1558, 295, 2445, 28777, 278], "temperature": 0.0, "avg_logprob": -0.09019154768723708, "compression_ratio": 1.592920353982301, "no_speech_prob": 4.2629708332242444e-05}, {"id": 356, "seek": 140000, "start": 1424.0, "end": 1428.0, "text": " in Python which has made life a lot easier and we already have", "tokens": [294, 15329, 597, 575, 1027, 993, 257, 688, 3571, 293, 321, 1217, 362], "temperature": 0.0, "avg_logprob": -0.09019154768723708, "compression_ratio": 1.592920353982301, "no_speech_prob": 4.2629708332242444e-05}, {"id": 357, "seek": 142800, "start": 1428.0, "end": 1432.0, "text": " a lot of that.", "tokens": [257, 688, 295, 300, 13], "temperature": 0.0, "avg_logprob": -0.17542311278256503, "compression_ratio": 1.4904761904761905, "no_speech_prob": 3.942854891647585e-05}, {"id": 358, "seek": 142800, "start": 1432.0, "end": 1436.0, "text": " Do you have many users that are using this yet?", "tokens": [1144, 291, 362, 867, 5022, 300, 366, 1228, 341, 1939, 30], "temperature": 0.0, "avg_logprob": -0.17542311278256503, "compression_ratio": 1.4904761904761905, "no_speech_prob": 3.942854891647585e-05}, {"id": 359, "seek": 142800, "start": 1436.0, "end": 1440.0, "text": " It's still pre-released, it's not even alpha. But there is a", "tokens": [467, 311, 920, 659, 12, 265, 41087, 11, 309, 311, 406, 754, 8961, 13, 583, 456, 307, 257], "temperature": 0.0, "avg_logprob": -0.17542311278256503, "compression_ratio": 1.4904761904761905, "no_speech_prob": 3.942854891647585e-05}, {"id": 360, "seek": 142800, "start": 1440.0, "end": 1444.0, "text": " enthusiastic early adopter", "tokens": [28574, 2440, 22486, 391], "temperature": 0.0, "avg_logprob": -0.17542311278256503, "compression_ratio": 1.4904761904761905, "no_speech_prob": 3.942854891647585e-05}, {"id": 361, "seek": 142800, "start": 1444.0, "end": 1448.0, "text": " community who is using it. So for example", "tokens": [1768, 567, 307, 1228, 309, 13, 407, 337, 1365], "temperature": 0.0, "avg_logprob": -0.17542311278256503, "compression_ratio": 1.4904761904761905, "no_speech_prob": 3.942854891647585e-05}, {"id": 362, "seek": 142800, "start": 1448.0, "end": 1452.0, "text": " the user contributed audio library has already been ported", "tokens": [264, 4195, 18434, 6278, 6405, 575, 1217, 668, 2436, 292], "temperature": 0.0, "avg_logprob": -0.17542311278256503, "compression_ratio": 1.4904761904761905, "no_speech_prob": 3.942854891647585e-05}, {"id": 363, "seek": 142800, "start": 1452.0, "end": 1456.0, "text": " to it. I've also built a medical imaging library on top of it", "tokens": [281, 309, 13, 286, 600, 611, 3094, 257, 4625, 25036, 6405, 322, 1192, 295, 309], "temperature": 0.0, "avg_logprob": -0.17542311278256503, "compression_ratio": 1.4904761904761905, "no_speech_prob": 3.942854891647585e-05}, {"id": 364, "seek": 145600, "start": 1456.0, "end": 1460.0, "text": " and have written a series of five notebooks showing how to do CT scan analysis", "tokens": [293, 362, 3720, 257, 2638, 295, 1732, 43782, 4099, 577, 281, 360, 19529, 11049, 5215], "temperature": 0.0, "avg_logprob": -0.07715663799019747, "compression_ratio": 1.5509259259259258, "no_speech_prob": 2.7103460524813272e-05}, {"id": 365, "seek": 145600, "start": 1460.0, "end": 1464.0, "text": " with it. So it's kind of like", "tokens": [365, 309, 13, 407, 309, 311, 733, 295, 411], "temperature": 0.0, "avg_logprob": -0.07715663799019747, "compression_ratio": 1.5509259259259258, "no_speech_prob": 2.7103460524813272e-05}, {"id": 366, "seek": 145600, "start": 1464.0, "end": 1468.0, "text": " it works and", "tokens": [309, 1985, 293], "temperature": 0.0, "avg_logprob": -0.07715663799019747, "compression_ratio": 1.5509259259259258, "no_speech_prob": 2.7103460524813272e-05}, {"id": 367, "seek": 145600, "start": 1468.0, "end": 1472.0, "text": " I was curious what your users think of it", "tokens": [286, 390, 6369, 437, 428, 5022, 519, 295, 309], "temperature": 0.0, "avg_logprob": -0.07715663799019747, "compression_ratio": 1.5509259259259258, "no_speech_prob": 2.7103460524813272e-05}, {"id": 368, "seek": 145600, "start": 1472.0, "end": 1476.0, "text": " because there's this very strongly held conception that Python", "tokens": [570, 456, 311, 341, 588, 10613, 5167, 30698, 300, 15329], "temperature": 0.0, "avg_logprob": -0.07715663799019747, "compression_ratio": 1.5509259259259258, "no_speech_prob": 2.7103460524813272e-05}, {"id": 369, "seek": 145600, "start": 1476.0, "end": 1480.0, "text": " folks hate types and you're kind of providing", "tokens": [4024, 4700, 3467, 293, 291, 434, 733, 295, 6530], "temperature": 0.0, "avg_logprob": -0.07715663799019747, "compression_ratio": 1.5509259259259258, "no_speech_prob": 2.7103460524813272e-05}, {"id": 370, "seek": 145600, "start": 1480.0, "end": 1484.0, "text": " a little bit of typing and I'm curious how they react to that.", "tokens": [257, 707, 857, 295, 18444, 293, 286, 478, 6369, 577, 436, 4515, 281, 300, 13], "temperature": 0.0, "avg_logprob": -0.07715663799019747, "compression_ratio": 1.5509259259259258, "no_speech_prob": 2.7103460524813272e-05}, {"id": 371, "seek": 148400, "start": 1484.0, "end": 1488.0, "text": " The extremely biased subset of early adopter", "tokens": [440, 4664, 28035, 25993, 295, 2440, 22486, 391], "temperature": 0.0, "avg_logprob": -0.08410471560908299, "compression_ratio": 1.6550387596899225, "no_speech_prob": 4.983525650459342e-05}, {"id": 372, "seek": 148400, "start": 1488.0, "end": 1492.0, "text": " fast AI enthusiasts who are using it love it.", "tokens": [2370, 7318, 45873, 567, 366, 1228, 309, 959, 309, 13], "temperature": 0.0, "avg_logprob": -0.08410471560908299, "compression_ratio": 1.6550387596899225, "no_speech_prob": 4.983525650459342e-05}, {"id": 373, "seek": 148400, "start": 1492.0, "end": 1496.0, "text": " They tend to be people who have gone pretty deep in the past. So for", "tokens": [814, 3928, 281, 312, 561, 567, 362, 2780, 1238, 2452, 294, 264, 1791, 13, 407, 337], "temperature": 0.0, "avg_logprob": -0.08410471560908299, "compression_ratio": 1.6550387596899225, "no_speech_prob": 4.983525650459342e-05}, {"id": 374, "seek": 148400, "start": 1496.0, "end": 1500.0, "text": " example my friend Andrew Shaw who wrote something called Music", "tokens": [1365, 452, 1277, 10110, 27132, 567, 4114, 746, 1219, 7609], "temperature": 0.0, "avg_logprob": -0.08410471560908299, "compression_ratio": 1.6550387596899225, "no_speech_prob": 4.983525650459342e-05}, {"id": 375, "seek": 148400, "start": 1500.0, "end": 1504.0, "text": " Autobot which is one of the coolest things in the world in case", "tokens": [49909, 310, 597, 307, 472, 295, 264, 22013, 721, 294, 264, 1002, 294, 1389], "temperature": 0.0, "avg_logprob": -0.08410471560908299, "compression_ratio": 1.6550387596899225, "no_speech_prob": 4.983525650459342e-05}, {"id": 376, "seek": 148400, "start": 1504.0, "end": 1508.0, "text": " you haven't seen it yet which is something where you can generate", "tokens": [291, 2378, 380, 1612, 309, 1939, 597, 307, 746, 689, 291, 393, 8460], "temperature": 0.0, "avg_logprob": -0.08410471560908299, "compression_ratio": 1.6550387596899225, "no_speech_prob": 4.983525650459342e-05}, {"id": 377, "seek": 148400, "start": 1508.0, "end": 1512.0, "text": " music using a neural network, you can put in some melodies and some chords", "tokens": [1318, 1228, 257, 18161, 3209, 11, 291, 393, 829, 294, 512, 47085, 293, 512, 21733], "temperature": 0.0, "avg_logprob": -0.08410471560908299, "compression_ratio": 1.6550387596899225, "no_speech_prob": 4.983525650459342e-05}, {"id": 378, "seek": 151200, "start": 1512.0, "end": 1516.0, "text": " and it will auto complete some additional melodies and chords or you can put in a", "tokens": [293, 309, 486, 8399, 3566, 512, 4497, 47085, 293, 21733, 420, 291, 393, 829, 294, 257], "temperature": 0.0, "avg_logprob": -0.16795671747085897, "compression_ratio": 1.6280193236714975, "no_speech_prob": 6.3005143601913e-05}, {"id": 379, "seek": 151200, "start": 1516.0, "end": 1520.0, "text": " melody and it will automatically add chords or you can", "tokens": [17997, 293, 309, 486, 6772, 909, 21733, 420, 291, 393], "temperature": 0.0, "avg_logprob": -0.16795671747085897, "compression_ratio": 1.6280193236714975, "no_speech_prob": 6.3005143601913e-05}, {"id": 380, "seek": 151200, "start": 1520.0, "end": 1524.0, "text": " add chords or create melody and so he had to write his own", "tokens": [909, 21733, 420, 1884, 17997, 293, 370, 415, 632, 281, 2464, 702, 1065], "temperature": 0.0, "avg_logprob": -0.16795671747085897, "compression_ratio": 1.6280193236714975, "no_speech_prob": 6.3005143601913e-05}, {"id": 381, "seek": 151200, "start": 1524.0, "end": 1528.0, "text": " MIDI library fast AI.MIDI. He rewrote it", "tokens": [41474, 6405, 2370, 7318, 13, 44, 2777, 40, 13, 634, 319, 7449, 1370, 309], "temperature": 0.0, "avg_logprob": -0.16795671747085897, "compression_ratio": 1.6280193236714975, "no_speech_prob": 6.3005143601913e-05}, {"id": 382, "seek": 151200, "start": 1528.0, "end": 1532.0, "text": " in V2 and he said it's just like", "tokens": [294, 691, 17, 293, 415, 848, 309, 311, 445, 411], "temperature": 0.0, "avg_logprob": -0.16795671747085897, "compression_ratio": 1.6280193236714975, "no_speech_prob": 6.3005143601913e-05}, {"id": 383, "seek": 151200, "start": 1532.0, "end": 1536.0, "text": " so much easier thanks to those mid tier APIs.", "tokens": [370, 709, 3571, 3231, 281, 729, 2062, 12362, 21445, 13], "temperature": 0.0, "avg_logprob": -0.16795671747085897, "compression_ratio": 1.6280193236714975, "no_speech_prob": 6.3005143601913e-05}, {"id": 384, "seek": 151200, "start": 1536.0, "end": 1540.0, "text": " So yeah at this stage", "tokens": [407, 1338, 412, 341, 3233], "temperature": 0.0, "avg_logprob": -0.16795671747085897, "compression_ratio": 1.6280193236714975, "no_speech_prob": 6.3005143601913e-05}, {"id": 385, "seek": 154000, "start": 1540.0, "end": 1544.0, "text": " I was just going to jump in quick. I've been", "tokens": [286, 390, 445, 516, 281, 3012, 294, 1702, 13, 286, 600, 668], "temperature": 0.0, "avg_logprob": -0.09000357814218807, "compression_ratio": 1.5742574257425743, "no_speech_prob": 0.00013549247523769736}, {"id": 386, "seek": 154000, "start": 1544.0, "end": 1548.0, "text": " helping with some of the audio stuff and it's been", "tokens": [4315, 365, 512, 295, 264, 6278, 1507, 293, 309, 311, 668], "temperature": 0.0, "avg_logprob": -0.09000357814218807, "compression_ratio": 1.5742574257425743, "no_speech_prob": 0.00013549247523769736}, {"id": 387, "seek": 154000, "start": 1548.0, "end": 1552.0, "text": " really awesome so it makes things", "tokens": [534, 3476, 370, 309, 1669, 721], "temperature": 0.0, "avg_logprob": -0.09000357814218807, "compression_ratio": 1.5742574257425743, "no_speech_prob": 0.00013549247523769736}, {"id": 388, "seek": 154000, "start": 1552.0, "end": 1556.0, "text": " a lot more flexible than version one so that's", "tokens": [257, 688, 544, 11358, 813, 3037, 472, 370, 300, 311], "temperature": 0.0, "avg_logprob": -0.09000357814218807, "compression_ratio": 1.5742574257425743, "no_speech_prob": 0.00013549247523769736}, {"id": 389, "seek": 154000, "start": 1556.0, "end": 1560.0, "text": " probably my favorite thing about it is everything can be", "tokens": [1391, 452, 2954, 551, 466, 309, 307, 1203, 393, 312], "temperature": 0.0, "avg_logprob": -0.09000357814218807, "compression_ratio": 1.5742574257425743, "no_speech_prob": 0.00013549247523769736}, {"id": 390, "seek": 154000, "start": 1560.0, "end": 1564.0, "text": " interchanged. Nothing is like well it's got to be this way because that's how it", "tokens": [728, 339, 10296, 13, 6693, 307, 411, 731, 309, 311, 658, 281, 312, 341, 636, 570, 300, 311, 577, 309], "temperature": 0.0, "avg_logprob": -0.09000357814218807, "compression_ratio": 1.5742574257425743, "no_speech_prob": 0.00013549247523769736}, {"id": 391, "seek": 154000, "start": 1564.0, "end": 1568.0, "text": " is.", "tokens": [307, 13], "temperature": 0.0, "avg_logprob": -0.09000357814218807, "compression_ratio": 1.5742574257425743, "no_speech_prob": 0.00013549247523769736}, {"id": 392, "seek": 156800, "start": 1568.0, "end": 1572.0, "text": " Thanks. Another piece of the transform", "tokens": [2561, 13, 3996, 2522, 295, 264, 4088], "temperature": 0.0, "avg_logprob": -0.09686644648162412, "compression_ratio": 1.7608695652173914, "no_speech_prob": 1.891463944048155e-05}, {"id": 393, "seek": 156800, "start": 1572.0, "end": 1576.0, "text": " of the foundation is the partially reversible", "tokens": [295, 264, 7030, 307, 264, 18886, 44788], "temperature": 0.0, "avg_logprob": -0.09686644648162412, "compression_ratio": 1.7608695652173914, "no_speech_prob": 1.891463944048155e-05}, {"id": 394, "seek": 156800, "start": 1576.0, "end": 1580.0, "text": " composed function pipeline dispatched over collections which really", "tokens": [18204, 2445, 15517, 4920, 24102, 670, 16641, 597, 534], "temperature": 0.0, "avg_logprob": -0.09686644648162412, "compression_ratio": 1.7608695652173914, "no_speech_prob": 1.891463944048155e-05}, {"id": 395, "seek": 156800, "start": 1580.0, "end": 1584.0, "text": " rolls off the tongue if we call them transform and pipeline.", "tokens": [15767, 766, 264, 10601, 498, 321, 818, 552, 4088, 293, 15517, 13], "temperature": 0.0, "avg_logprob": -0.09686644648162412, "compression_ratio": 1.7608695652173914, "no_speech_prob": 1.891463944048155e-05}, {"id": 396, "seek": 156800, "start": 1584.0, "end": 1588.0, "text": " Basically the idea is that", "tokens": [8537, 264, 1558, 307, 300], "temperature": 0.0, "avg_logprob": -0.09686644648162412, "compression_ratio": 1.7608695652173914, "no_speech_prob": 1.891463944048155e-05}, {"id": 397, "seek": 156800, "start": 1588.0, "end": 1592.0, "text": " the way you kind of want function dispatch", "tokens": [264, 636, 291, 733, 295, 528, 2445, 36729], "temperature": 0.0, "avg_logprob": -0.09686644648162412, "compression_ratio": 1.7608695652173914, "no_speech_prob": 1.891463944048155e-05}, {"id": 398, "seek": 156800, "start": 1592.0, "end": 1596.0, "text": " to work and function composition to work", "tokens": [281, 589, 293, 2445, 12686, 281, 589], "temperature": 0.0, "avg_logprob": -0.09686644648162412, "compression_ratio": 1.7608695652173914, "no_speech_prob": 1.891463944048155e-05}, {"id": 399, "seek": 159600, "start": 1596.0, "end": 1600.0, "text": " in deep learning is a little different to other places.", "tokens": [294, 2452, 2539, 307, 257, 707, 819, 281, 661, 3190, 13], "temperature": 0.0, "avg_logprob": -0.05548967404311962, "compression_ratio": 1.6985645933014355, "no_speech_prob": 4.132684989599511e-05}, {"id": 400, "seek": 159600, "start": 1600.0, "end": 1604.0, "text": " There's a couple of things. The first is you often", "tokens": [821, 311, 257, 1916, 295, 721, 13, 440, 700, 307, 291, 2049], "temperature": 0.0, "avg_logprob": -0.05548967404311962, "compression_ratio": 1.6985645933014355, "no_speech_prob": 4.132684989599511e-05}, {"id": 401, "seek": 159600, "start": 1604.0, "end": 1608.0, "text": " want to dispatch over tuples and what I mean by that is if", "tokens": [528, 281, 36729, 670, 2604, 2622, 293, 437, 286, 914, 538, 300, 307, 498], "temperature": 0.0, "avg_logprob": -0.05548967404311962, "compression_ratio": 1.6985645933014355, "no_speech_prob": 4.132684989599511e-05}, {"id": 402, "seek": 159600, "start": 1608.0, "end": 1612.0, "text": " you have a function called flip left", "tokens": [291, 362, 257, 2445, 1219, 7929, 1411], "temperature": 0.0, "avg_logprob": -0.05548967404311962, "compression_ratio": 1.6985645933014355, "no_speech_prob": 4.132684989599511e-05}, {"id": 403, "seek": 159600, "start": 1612.0, "end": 1616.0, "text": " right and you have a", "tokens": [558, 293, 291, 362, 257], "temperature": 0.0, "avg_logprob": -0.05548967404311962, "compression_ratio": 1.6985645933014355, "no_speech_prob": 4.132684989599511e-05}, {"id": 404, "seek": 159600, "start": 1616.0, "end": 1620.0, "text": " tuple representing a mini batch where your independent variable", "tokens": [2604, 781, 13460, 257, 8382, 15245, 689, 428, 6695, 7006], "temperature": 0.0, "avg_logprob": -0.05548967404311962, "compression_ratio": 1.6985645933014355, "no_speech_prob": 4.132684989599511e-05}, {"id": 405, "seek": 159600, "start": 1620.0, "end": 1624.0, "text": " is a picture and your dependent variable is a set of bounding boxes", "tokens": [307, 257, 3036, 293, 428, 12334, 7006, 307, 257, 992, 295, 5472, 278, 9002], "temperature": 0.0, "avg_logprob": -0.05548967404311962, "compression_ratio": 1.6985645933014355, "no_speech_prob": 4.132684989599511e-05}, {"id": 406, "seek": 162400, "start": 1624.0, "end": 1628.0, "text": " if you say flip left right on that tuple you would", "tokens": [498, 291, 584, 7929, 1411, 558, 322, 300, 2604, 781, 291, 576], "temperature": 0.0, "avg_logprob": -0.07457811286650508, "compression_ratio": 1.6844660194174756, "no_speech_prob": 6.853992090327665e-06}, {"id": 407, "seek": 162400, "start": 1628.0, "end": 1632.0, "text": " expect both the X and the Y to be flipped and to be", "tokens": [2066, 1293, 264, 1783, 293, 264, 398, 281, 312, 26273, 293, 281, 312], "temperature": 0.0, "avg_logprob": -0.07457811286650508, "compression_ratio": 1.6844660194174756, "no_speech_prob": 6.853992090327665e-06}, {"id": 408, "seek": 162400, "start": 1632.0, "end": 1636.0, "text": " flipped with the type appropriate method.", "tokens": [26273, 365, 264, 2010, 6854, 3170, 13], "temperature": 0.0, "avg_logprob": -0.07457811286650508, "compression_ratio": 1.6844660194174756, "no_speech_prob": 6.853992090327665e-06}, {"id": 409, "seek": 162400, "start": 1636.0, "end": 1640.0, "text": " So our transforms will automatically", "tokens": [407, 527, 35592, 486, 6772], "temperature": 0.0, "avg_logprob": -0.07457811286650508, "compression_ratio": 1.6844660194174756, "no_speech_prob": 6.853992090327665e-06}, {"id": 410, "seek": 162400, "start": 1640.0, "end": 1644.0, "text": " send each element of a tuple to the function", "tokens": [2845, 1184, 4478, 295, 257, 2604, 781, 281, 264, 2445], "temperature": 0.0, "avg_logprob": -0.07457811286650508, "compression_ratio": 1.6844660194174756, "no_speech_prob": 6.853992090327665e-06}, {"id": 411, "seek": 162400, "start": 1644.0, "end": 1648.0, "text": " separately and will dispatch according to their types automatically.", "tokens": [14759, 293, 486, 36729, 4650, 281, 641, 3467, 6772, 13], "temperature": 0.0, "avg_logprob": -0.07457811286650508, "compression_ratio": 1.6844660194174756, "no_speech_prob": 6.853992090327665e-06}, {"id": 412, "seek": 162400, "start": 1648.0, "end": 1652.0, "text": " We've mentioned type retention so the kind of basic", "tokens": [492, 600, 2835, 2010, 22871, 370, 264, 733, 295, 3875], "temperature": 0.0, "avg_logprob": -0.07457811286650508, "compression_ratio": 1.6844660194174756, "no_speech_prob": 6.853992090327665e-06}, {"id": 413, "seek": 165200, "start": 1652.0, "end": 1656.0, "text": " type stuff we need.", "tokens": [2010, 1507, 321, 643, 13], "temperature": 0.0, "avg_logprob": -0.07285245259602864, "compression_ratio": 1.6844444444444444, "no_speech_prob": 8.013000297069084e-06}, {"id": 414, "seek": 165200, "start": 1656.0, "end": 1660.0, "text": " One interesting thing is not only encoding so in other words", "tokens": [1485, 1880, 551, 307, 406, 787, 43430, 370, 294, 661, 2283], "temperature": 0.0, "avg_logprob": -0.07285245259602864, "compression_ratio": 1.6844444444444444, "no_speech_prob": 8.013000297069084e-06}, {"id": 415, "seek": 165200, "start": 1660.0, "end": 1664.0, "text": " applying the function you often need to be able to decode", "tokens": [9275, 264, 2445, 291, 2049, 643, 281, 312, 1075, 281, 979, 1429], "temperature": 0.0, "avg_logprob": -0.07285245259602864, "compression_ratio": 1.6844444444444444, "no_speech_prob": 8.013000297069084e-06}, {"id": 416, "seek": 165200, "start": 1664.0, "end": 1668.0, "text": " which is to de-apply the function. So for example", "tokens": [597, 307, 281, 368, 12, 1746, 356, 264, 2445, 13, 407, 337, 1365], "temperature": 0.0, "avg_logprob": -0.07285245259602864, "compression_ratio": 1.6844444444444444, "no_speech_prob": 8.013000297069084e-06}, {"id": 417, "seek": 165200, "start": 1668.0, "end": 1672.0, "text": " a categorization transform would take the word dog", "tokens": [257, 19250, 2144, 4088, 576, 747, 264, 1349, 3000], "temperature": 0.0, "avg_logprob": -0.07285245259602864, "compression_ratio": 1.6844444444444444, "no_speech_prob": 8.013000297069084e-06}, {"id": 418, "seek": 165200, "start": 1672.0, "end": 1676.0, "text": " and convert it to the number one perhaps which is what", "tokens": [293, 7620, 309, 281, 264, 1230, 472, 4317, 597, 307, 437], "temperature": 0.0, "avg_logprob": -0.07285245259602864, "compression_ratio": 1.6844444444444444, "no_speech_prob": 8.013000297069084e-06}, {"id": 419, "seek": 165200, "start": 1676.0, "end": 1680.0, "text": " you need for modeling but then when your predictions come back you need to know what", "tokens": [291, 643, 337, 15983, 457, 550, 562, 428, 21264, 808, 646, 291, 643, 281, 458, 437], "temperature": 0.0, "avg_logprob": -0.07285245259602864, "compression_ratio": 1.6844444444444444, "no_speech_prob": 8.013000297069084e-06}, {"id": 420, "seek": 168000, "start": 1680.0, "end": 1684.0, "text": " one represents so you need to reverse that transform", "tokens": [472, 8855, 370, 291, 643, 281, 9943, 300, 4088], "temperature": 0.0, "avg_logprob": -0.05227863395607078, "compression_ratio": 1.7066115702479339, "no_speech_prob": 1.3419145943771582e-05}, {"id": 421, "seek": 168000, "start": 1684.0, "end": 1688.0, "text": " and turn one back into dog. Often those transforms", "tokens": [293, 1261, 472, 646, 666, 3000, 13, 20043, 729, 35592], "temperature": 0.0, "avg_logprob": -0.05227863395607078, "compression_ratio": 1.7066115702479339, "no_speech_prob": 1.3419145943771582e-05}, {"id": 422, "seek": 168000, "start": 1688.0, "end": 1692.0, "text": " also need data driven setup for example in that", "tokens": [611, 643, 1412, 9555, 8657, 337, 1365, 294, 300], "temperature": 0.0, "avg_logprob": -0.05227863395607078, "compression_ratio": 1.7066115702479339, "no_speech_prob": 1.3419145943771582e-05}, {"id": 423, "seek": 168000, "start": 1692.0, "end": 1696.0, "text": " example of dog becoming one there needs to be something that actually", "tokens": [1365, 295, 3000, 5617, 472, 456, 2203, 281, 312, 746, 300, 767], "temperature": 0.0, "avg_logprob": -0.05227863395607078, "compression_ratio": 1.7066115702479339, "no_speech_prob": 1.3419145943771582e-05}, {"id": 424, "seek": 168000, "start": 1696.0, "end": 1700.0, "text": " creates that vocab automatically recognizing what are all the possible classes", "tokens": [7829, 300, 2329, 455, 6772, 18538, 437, 366, 439, 264, 1944, 5359], "temperature": 0.0, "avg_logprob": -0.05227863395607078, "compression_ratio": 1.7066115702479339, "no_speech_prob": 1.3419145943771582e-05}, {"id": 425, "seek": 168000, "start": 1700.0, "end": 1704.0, "text": " so it can create a different index for each one and then apply", "tokens": [370, 309, 393, 1884, 257, 819, 8186, 337, 1184, 472, 293, 550, 3079], "temperature": 0.0, "avg_logprob": -0.05227863395607078, "compression_ratio": 1.7066115702479339, "no_speech_prob": 1.3419145943771582e-05}, {"id": 426, "seek": 168000, "start": 1704.0, "end": 1708.0, "text": " that to the validation set. And quite often these", "tokens": [300, 281, 264, 24071, 992, 13, 400, 1596, 2049, 613], "temperature": 0.0, "avg_logprob": -0.05227863395607078, "compression_ratio": 1.7066115702479339, "no_speech_prob": 1.3419145943771582e-05}, {"id": 427, "seek": 170800, "start": 1708.0, "end": 1712.0, "text": " transforms also have some kind of state such as", "tokens": [35592, 611, 362, 512, 733, 295, 1785, 1270, 382], "temperature": 0.0, "avg_logprob": -0.055739278378693954, "compression_ratio": 1.755868544600939, "no_speech_prob": 2.3551056074211374e-05}, {"id": 428, "seek": 170800, "start": 1712.0, "end": 1716.0, "text": " the vocab. So we built this bunch of", "tokens": [264, 2329, 455, 13, 407, 321, 3094, 341, 3840, 295], "temperature": 0.0, "avg_logprob": -0.055739278378693954, "compression_ratio": 1.755868544600939, "no_speech_prob": 2.3551056074211374e-05}, {"id": 429, "seek": 170800, "start": 1716.0, "end": 1720.0, "text": " stuff that builds on top of each other at the lowest level is a class called transform", "tokens": [1507, 300, 15182, 322, 1192, 295, 1184, 661, 412, 264, 12437, 1496, 307, 257, 1508, 1219, 4088], "temperature": 0.0, "avg_logprob": -0.055739278378693954, "compression_ratio": 1.755868544600939, "no_speech_prob": 2.3551056074211374e-05}, {"id": 430, "seek": 170800, "start": 1720.0, "end": 1724.0, "text": " which is a callable", "tokens": [597, 307, 257, 818, 712], "temperature": 0.0, "avg_logprob": -0.055739278378693954, "compression_ratio": 1.755868544600939, "no_speech_prob": 2.3551056074211374e-05}, {"id": 431, "seek": 170800, "start": 1724.0, "end": 1728.0, "text": " which also has a decode does the", "tokens": [597, 611, 575, 257, 979, 1429, 775, 264], "temperature": 0.0, "avg_logprob": -0.055739278378693954, "compression_ratio": 1.755868544600939, "no_speech_prob": 2.3551056074211374e-05}, {"id": 432, "seek": 170800, "start": 1728.0, "end": 1732.0, "text": " type retention higher kind of type thing and does the dispatch over tuples", "tokens": [2010, 22871, 2946, 733, 295, 2010, 551, 293, 775, 264, 36729, 670, 2604, 2622], "temperature": 0.0, "avg_logprob": -0.055739278378693954, "compression_ratio": 1.755868544600939, "no_speech_prob": 2.3551056074211374e-05}, {"id": 433, "seek": 170800, "start": 1732.0, "end": 1736.0, "text": " by default. So then a pipeline is something that does function composition", "tokens": [538, 7576, 13, 407, 550, 257, 15517, 307, 746, 300, 775, 2445, 12686], "temperature": 0.0, "avg_logprob": -0.055739278378693954, "compression_ratio": 1.755868544600939, "no_speech_prob": 2.3551056074211374e-05}, {"id": 434, "seek": 173600, "start": 1736.0, "end": 1740.0, "text": " over transforms and it", "tokens": [670, 35592, 293, 309], "temperature": 0.0, "avg_logprob": -0.041667892691794405, "compression_ratio": 1.8238095238095238, "no_speech_prob": 1.3845037756254897e-05}, {"id": 435, "seek": 173600, "start": 1740.0, "end": 1744.0, "text": " knows about for example setting up transforms", "tokens": [3255, 466, 337, 1365, 3287, 493, 35592], "temperature": 0.0, "avg_logprob": -0.041667892691794405, "compression_ratio": 1.8238095238095238, "no_speech_prob": 1.3845037756254897e-05}, {"id": 436, "seek": 173600, "start": 1744.0, "end": 1748.0, "text": " and like setting up transforms in a pipeline is a bit", "tokens": [293, 411, 3287, 493, 35592, 294, 257, 15517, 307, 257, 857], "temperature": 0.0, "avg_logprob": -0.041667892691794405, "compression_ratio": 1.8238095238095238, "no_speech_prob": 1.3845037756254897e-05}, {"id": 437, "seek": 173600, "start": 1748.0, "end": 1752.0, "text": " tricky because you have to make sure that at each level of the pipeline", "tokens": [12414, 570, 291, 362, 281, 652, 988, 300, 412, 1184, 1496, 295, 264, 15517], "temperature": 0.0, "avg_logprob": -0.041667892691794405, "compression_ratio": 1.8238095238095238, "no_speech_prob": 1.3845037756254897e-05}, {"id": 438, "seek": 173600, "start": 1752.0, "end": 1756.0, "text": " only the previous steps have been applied before", "tokens": [787, 264, 3894, 4439, 362, 668, 6456, 949], "temperature": 0.0, "avg_logprob": -0.041667892691794405, "compression_ratio": 1.8238095238095238, "no_speech_prob": 1.3845037756254897e-05}, {"id": 439, "seek": 173600, "start": 1756.0, "end": 1760.0, "text": " you set up the next step so it does little things like that.", "tokens": [291, 992, 493, 264, 958, 1823, 370, 309, 775, 707, 721, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.041667892691794405, "compression_ratio": 1.8238095238095238, "no_speech_prob": 1.3845037756254897e-05}, {"id": 440, "seek": 173600, "start": 1760.0, "end": 1764.0, "text": " And then we have something that applies a pipeline to a collection to give you", "tokens": [400, 550, 321, 362, 746, 300, 13165, 257, 15517, 281, 257, 5765, 281, 976, 291], "temperature": 0.0, "avg_logprob": -0.041667892691794405, "compression_ratio": 1.8238095238095238, "no_speech_prob": 1.3845037756254897e-05}, {"id": 441, "seek": 176400, "start": 1764.0, "end": 1768.0, "text": " an indexable lazily transformed collection.", "tokens": [364, 8186, 712, 19320, 953, 16894, 5765, 13], "temperature": 0.0, "avg_logprob": -0.06343247493108113, "compression_ratio": 1.5222222222222221, "no_speech_prob": 1.3843077795172576e-05}, {"id": 442, "seek": 176400, "start": 1768.0, "end": 1772.0, "text": " And then you can do those in parallel to get back an independent", "tokens": [400, 550, 291, 393, 360, 729, 294, 8952, 281, 483, 646, 364, 6695], "temperature": 0.0, "avg_logprob": -0.06343247493108113, "compression_ratio": 1.5222222222222221, "no_speech_prob": 1.3843077795172576e-05}, {"id": 443, "seek": 176400, "start": 1772.0, "end": 1776.0, "text": " variable for instance. And then finally we've built", "tokens": [7006, 337, 5197, 13, 400, 550, 2721, 321, 600, 3094], "temperature": 0.0, "avg_logprob": -0.06343247493108113, "compression_ratio": 1.5222222222222221, "no_speech_prob": 1.3843077795172576e-05}, {"id": 444, "seek": 176400, "start": 1776.0, "end": 1780.0, "text": " a data loader which", "tokens": [257, 1412, 3677, 260, 597], "temperature": 0.0, "avg_logprob": -0.06343247493108113, "compression_ratio": 1.5222222222222221, "no_speech_prob": 1.3843077795172576e-05}, {"id": 445, "seek": 176400, "start": 1780.0, "end": 1784.0, "text": " will apply these things in parallel", "tokens": [486, 3079, 613, 721, 294, 8952], "temperature": 0.0, "avg_logprob": -0.06343247493108113, "compression_ratio": 1.5222222222222221, "no_speech_prob": 1.3843077795172576e-05}, {"id": 446, "seek": 176400, "start": 1784.0, "end": 1788.0, "text": " and create collated batches.", "tokens": [293, 1884, 1263, 770, 15245, 279, 13], "temperature": 0.0, "avg_logprob": -0.06343247493108113, "compression_ratio": 1.5222222222222221, "no_speech_prob": 1.3843077795172576e-05}, {"id": 447, "seek": 176400, "start": 1788.0, "end": 1792.0, "text": " So in the end all this stuff", "tokens": [407, 294, 264, 917, 439, 341, 1507], "temperature": 0.0, "avg_logprob": -0.06343247493108113, "compression_ratio": 1.5222222222222221, "no_speech_prob": 1.3843077795172576e-05}, {"id": 448, "seek": 179200, "start": 1792.0, "end": 1796.0, "text": " makes a lot of things much easier. For example the language model", "tokens": [1669, 257, 688, 295, 721, 709, 3571, 13, 1171, 1365, 264, 2856, 2316], "temperature": 0.0, "avg_logprob": -0.114114675629005, "compression_ratio": 1.5769230769230769, "no_speech_prob": 2.7104242690256797e-05}, {"id": 449, "seek": 179200, "start": 1796.0, "end": 1800.0, "text": " data loader in fast.ai v1 was like", "tokens": [1412, 3677, 260, 294, 2370, 13, 1301, 371, 16, 390, 411], "temperature": 0.0, "avg_logprob": -0.114114675629005, "compression_ratio": 1.5769230769230769, "no_speech_prob": 2.7104242690256797e-05}, {"id": 450, "seek": 179200, "start": 1800.0, "end": 1804.0, "text": " pages of code in tensorflow it's pages of code", "tokens": [7183, 295, 3089, 294, 40863, 10565, 309, 311, 7183, 295, 3089], "temperature": 0.0, "avg_logprob": -0.114114675629005, "compression_ratio": 1.5769230769230769, "no_speech_prob": 2.7104242690256797e-05}, {"id": 451, "seek": 179200, "start": 1804.0, "end": 1808.0, "text": " in fast.ai v2 it's less than a screen of code by leveraging", "tokens": [294, 2370, 13, 1301, 371, 17, 309, 311, 1570, 813, 257, 2568, 295, 3089, 538, 32666], "temperature": 0.0, "avg_logprob": -0.114114675629005, "compression_ratio": 1.5769230769230769, "no_speech_prob": 2.7104242690256797e-05}, {"id": 452, "seek": 179200, "start": 1808.0, "end": 1812.0, "text": " these powerful abstractions", "tokens": [613, 4005, 12649, 626], "temperature": 0.0, "avg_logprob": -0.114114675629005, "compression_ratio": 1.5769230769230769, "no_speech_prob": 2.7104242690256797e-05}, {"id": 453, "seek": 179200, "start": 1812.0, "end": 1816.0, "text": " and foundations. So then finally", "tokens": [293, 22467, 13, 407, 550, 2721], "temperature": 0.0, "avg_logprob": -0.114114675629005, "compression_ratio": 1.5769230769230769, "no_speech_prob": 2.7104242690256797e-05}, {"id": 454, "seek": 179200, "start": 1816.0, "end": 1820.0, "text": " and again this is something I think Swift will be great for", "tokens": [293, 797, 341, 307, 746, 286, 519, 25539, 486, 312, 869, 337], "temperature": 0.0, "avg_logprob": -0.114114675629005, "compression_ratio": 1.5769230769230769, "no_speech_prob": 2.7104242690256797e-05}, {"id": 455, "seek": 182000, "start": 1820.0, "end": 1824.0, "text": " we worked really hard to make everything extremely well", "tokens": [321, 2732, 534, 1152, 281, 652, 1203, 4664, 731], "temperature": 0.0, "avg_logprob": -0.08239626302951719, "compression_ratio": 1.6604651162790698, "no_speech_prob": 4.98481749673374e-05}, {"id": 456, "seek": 182000, "start": 1824.0, "end": 1828.0, "text": " optimized. So for example preprocessing and natural language processing", "tokens": [26941, 13, 407, 337, 1365, 2666, 340, 780, 278, 293, 3303, 2856, 9007], "temperature": 0.0, "avg_logprob": -0.08239626302951719, "compression_ratio": 1.6604651162790698, "no_speech_prob": 4.98481749673374e-05}, {"id": 457, "seek": 182000, "start": 1828.0, "end": 1832.0, "text": " we created a parallel generator", "tokens": [321, 2942, 257, 8952, 19265], "temperature": 0.0, "avg_logprob": -0.08239626302951719, "compression_ratio": 1.6604651162790698, "no_speech_prob": 4.98481749673374e-05}, {"id": 458, "seek": 182000, "start": 1832.0, "end": 1836.0, "text": " in Python which you can then basically pass a class to", "tokens": [294, 15329, 597, 291, 393, 550, 1936, 1320, 257, 1508, 281], "temperature": 0.0, "avg_logprob": -0.08239626302951719, "compression_ratio": 1.6604651162790698, "no_speech_prob": 4.98481749673374e-05}, {"id": 459, "seek": 182000, "start": 1836.0, "end": 1840.0, "text": " that finds some setup and a call and it can automatically", "tokens": [300, 10704, 512, 8657, 293, 257, 818, 293, 309, 393, 6772], "temperature": 0.0, "avg_logprob": -0.08239626302951719, "compression_ratio": 1.6604651162790698, "no_speech_prob": 4.98481749673374e-05}, {"id": 460, "seek": 182000, "start": 1840.0, "end": 1844.0, "text": " parallelize that. So for example tokenization", "tokens": [8952, 1125, 300, 13, 407, 337, 1365, 14862, 2144], "temperature": 0.0, "avg_logprob": -0.08239626302951719, "compression_ratio": 1.6604651162790698, "no_speech_prob": 4.98481749673374e-05}, {"id": 461, "seek": 182000, "start": 1844.0, "end": 1848.0, "text": " is done in parallel in a pretty memory", "tokens": [307, 1096, 294, 8952, 294, 257, 1238, 4675], "temperature": 0.0, "avg_logprob": -0.08239626302951719, "compression_ratio": 1.6604651162790698, "no_speech_prob": 4.98481749673374e-05}, {"id": 462, "seek": 184800, "start": 1848.0, "end": 1852.0, "text": " efficient way.", "tokens": [7148, 636, 13], "temperature": 0.0, "avg_logprob": -0.0630734868951746, "compression_ratio": 1.488888888888889, "no_speech_prob": 3.3730335417203605e-05}, {"id": 463, "seek": 184800, "start": 1852.0, "end": 1856.0, "text": " But perhaps the thing I'm most excited about", "tokens": [583, 4317, 264, 551, 286, 478, 881, 2919, 466], "temperature": 0.0, "avg_logprob": -0.0630734868951746, "compression_ratio": 1.488888888888889, "no_speech_prob": 3.3730335417203605e-05}, {"id": 464, "seek": 184800, "start": 1856.0, "end": 1860.0, "text": " both in Python and Swift is the", "tokens": [1293, 294, 15329, 293, 25539, 307, 264], "temperature": 0.0, "avg_logprob": -0.0630734868951746, "compression_ratio": 1.488888888888889, "no_speech_prob": 3.3730335417203605e-05}, {"id": 465, "seek": 184800, "start": 1860.0, "end": 1864.0, "text": " optimized pipeline running on the GPU. So", "tokens": [26941, 15517, 2614, 322, 264, 18407, 13, 407], "temperature": 0.0, "avg_logprob": -0.0630734868951746, "compression_ratio": 1.488888888888889, "no_speech_prob": 3.3730335417203605e-05}, {"id": 466, "seek": 184800, "start": 1864.0, "end": 1868.0, "text": " all of the pretty much all of the transforms we've", "tokens": [439, 295, 264, 1238, 709, 439, 295, 264, 35592, 321, 600], "temperature": 0.0, "avg_logprob": -0.0630734868951746, "compression_ratio": 1.488888888888889, "no_speech_prob": 3.3730335417203605e-05}, {"id": 467, "seek": 184800, "start": 1868.0, "end": 1872.0, "text": " done can and by default do run", "tokens": [1096, 393, 293, 538, 7576, 360, 1190], "temperature": 0.0, "avg_logprob": -0.0630734868951746, "compression_ratio": 1.488888888888889, "no_speech_prob": 3.3730335417203605e-05}, {"id": 468, "seek": 184800, "start": 1872.0, "end": 1876.0, "text": " on the GPU. So for example when you do the flip left", "tokens": [322, 264, 18407, 13, 407, 337, 1365, 562, 291, 360, 264, 7929, 1411], "temperature": 0.0, "avg_logprob": -0.0630734868951746, "compression_ratio": 1.488888888888889, "no_speech_prob": 3.3730335417203605e-05}, {"id": 469, "seek": 187600, "start": 1876.0, "end": 1880.0, "text": " right I showed you earlier will actually run on the GPU.", "tokens": [558, 286, 4712, 291, 3071, 486, 767, 1190, 322, 264, 18407, 13], "temperature": 0.0, "avg_logprob": -0.10307187812272893, "compression_ratio": 1.568075117370892, "no_speech_prob": 1.7230628145625815e-05}, {"id": 470, "seek": 187600, "start": 1880.0, "end": 1884.0, "text": " As well warp as well zoom as well even things like crop.", "tokens": [1018, 731, 36030, 382, 731, 8863, 382, 731, 754, 721, 411, 9086, 13], "temperature": 0.0, "avg_logprob": -0.10307187812272893, "compression_ratio": 1.568075117370892, "no_speech_prob": 1.7230628145625815e-05}, {"id": 471, "seek": 187600, "start": 1884.0, "end": 1888.0, "text": " So one of the basics of this is", "tokens": [407, 472, 295, 264, 14688, 295, 341, 307], "temperature": 0.0, "avg_logprob": -0.10307187812272893, "compression_ratio": 1.568075117370892, "no_speech_prob": 1.7230628145625815e-05}, {"id": 472, "seek": 187600, "start": 1888.0, "end": 1892.0, "text": " the affine coordinate transform", "tokens": [264, 2096, 533, 15670, 4088], "temperature": 0.0, "avg_logprob": -0.10307187812272893, "compression_ratio": 1.568075117370892, "no_speech_prob": 1.7230628145625815e-05}, {"id": 473, "seek": 187600, "start": 1892.0, "end": 1896.0, "text": " which uses affine grid and grid sample which are very powerful", "tokens": [597, 4960, 2096, 533, 10748, 293, 10748, 6889, 597, 366, 588, 4005], "temperature": 0.0, "avg_logprob": -0.10307187812272893, "compression_ratio": 1.568075117370892, "no_speech_prob": 1.7230628145625815e-05}, {"id": 474, "seek": 187600, "start": 1896.0, "end": 1900.0, "text": " PyTorch functions which would be", "tokens": [9953, 51, 284, 339, 6828, 597, 576, 312], "temperature": 0.0, "avg_logprob": -0.10307187812272893, "compression_ratio": 1.568075117370892, "no_speech_prob": 1.7230628145625815e-05}, {"id": 475, "seek": 187600, "start": 1900.0, "end": 1904.0, "text": " great things to actually write in Swift for tensorflow's new", "tokens": [869, 721, 281, 767, 2464, 294, 25539, 337, 40863, 10565, 311, 777], "temperature": 0.0, "avg_logprob": -0.10307187812272893, "compression_ratio": 1.568075117370892, "no_speech_prob": 1.7230628145625815e-05}, {"id": 476, "seek": 190400, "start": 1904.0, "end": 1908.0, "text": " meta programming because they don't exist in", "tokens": [19616, 9410, 570, 436, 500, 380, 2514, 294], "temperature": 0.0, "avg_logprob": -0.09016026600752727, "compression_ratio": 1.6171875, "no_speech_prob": 7.600859680678695e-05}, {"id": 477, "seek": 190400, "start": 1908.0, "end": 1912.0, "text": " tensorflow or at least not in any very complete way.", "tokens": [40863, 10565, 420, 412, 1935, 406, 294, 604, 588, 3566, 636, 13], "temperature": 0.0, "avg_logprob": -0.09016026600752727, "compression_ratio": 1.6171875, "no_speech_prob": 7.600859680678695e-05}, {"id": 478, "seek": 190400, "start": 1912.0, "end": 1916.0, "text": " But with these basic ideas we can create this affine coordinate transform", "tokens": [583, 365, 613, 3875, 3487, 321, 393, 1884, 341, 2096, 533, 15670, 4088], "temperature": 0.0, "avg_logprob": -0.09016026600752727, "compression_ratio": 1.6171875, "no_speech_prob": 7.600859680678695e-05}, {"id": 479, "seek": 190400, "start": 1916.0, "end": 1920.0, "text": " that lets us do a very wide range of data augmentations", "tokens": [300, 6653, 505, 360, 257, 588, 4874, 3613, 295, 1412, 29919, 763], "temperature": 0.0, "avg_logprob": -0.09016026600752727, "compression_ratio": 1.6171875, "no_speech_prob": 7.600859680678695e-05}, {"id": 480, "seek": 190400, "start": 1920.0, "end": 1924.0, "text": " in parallel on the GPU. For those of you that know about the Dali", "tokens": [294, 8952, 322, 264, 18407, 13, 1171, 729, 295, 291, 300, 458, 466, 264, 413, 5103], "temperature": 0.0, "avg_logprob": -0.09016026600752727, "compression_ratio": 1.6171875, "no_speech_prob": 7.600859680678695e-05}, {"id": 481, "seek": 190400, "start": 1924.0, "end": 1928.0, "text": " library that we created this provides a lot of the same", "tokens": [6405, 300, 321, 2942, 341, 6417, 257, 688, 295, 264, 912], "temperature": 0.0, "avg_logprob": -0.09016026600752727, "compression_ratio": 1.6171875, "no_speech_prob": 7.600859680678695e-05}, {"id": 482, "seek": 190400, "start": 1928.0, "end": 1932.0, "text": " benefits as Dali it's pretty similar in terms of its performance", "tokens": [5311, 382, 413, 5103, 309, 311, 1238, 2531, 294, 2115, 295, 1080, 3389], "temperature": 0.0, "avg_logprob": -0.09016026600752727, "compression_ratio": 1.6171875, "no_speech_prob": 7.600859680678695e-05}, {"id": 483, "seek": 193200, "start": 1932.0, "end": 1936.0, "text": " but the nice thing is all the stuff you write you write it in", "tokens": [457, 264, 1481, 551, 307, 439, 264, 1507, 291, 2464, 291, 2464, 309, 294], "temperature": 0.0, "avg_logprob": -0.12095823382387066, "compression_ratio": 1.5945945945945945, "no_speech_prob": 2.8854739866801538e-05}, {"id": 484, "seek": 193200, "start": 1936.0, "end": 1940.0, "text": " Python not in CUDA. So with Dali if they don't have", "tokens": [15329, 406, 294, 29777, 7509, 13, 407, 365, 413, 5103, 498, 436, 500, 380, 362], "temperature": 0.0, "avg_logprob": -0.12095823382387066, "compression_ratio": 1.5945945945945945, "no_speech_prob": 2.8854739866801538e-05}, {"id": 485, "seek": 193200, "start": 1940.0, "end": 1944.0, "text": " the exact transformation you want and there's a pretty", "tokens": [264, 1900, 9887, 291, 528, 293, 456, 311, 257, 1238], "temperature": 0.0, "avg_logprob": -0.12095823382387066, "compression_ratio": 1.5945945945945945, "no_speech_prob": 2.8854739866801538e-05}, {"id": 486, "seek": 193200, "start": 1944.0, "end": 1948.0, "text": " high chance that they won't then you're stuck.", "tokens": [1090, 2931, 300, 436, 1582, 380, 550, 291, 434, 5541, 13], "temperature": 0.0, "avg_logprob": -0.12095823382387066, "compression_ratio": 1.5945945945945945, "no_speech_prob": 2.8854739866801538e-05}, {"id": 487, "seek": 193200, "start": 1948.0, "end": 1952.0, "text": " Or else with fast AIV2 you can write your own in a few", "tokens": [1610, 1646, 365, 2370, 7318, 53, 17, 291, 393, 2464, 428, 1065, 294, 257, 1326], "temperature": 0.0, "avg_logprob": -0.12095823382387066, "compression_ratio": 1.5945945945945945, "no_speech_prob": 2.8854739866801538e-05}, {"id": 488, "seek": 193200, "start": 1952.0, "end": 1956.0, "text": " lines of Python you can test it out in a Jupyter notebook", "tokens": [3876, 295, 15329, 291, 393, 1500, 309, 484, 294, 257, 22125, 88, 391, 21060], "temperature": 0.0, "avg_logprob": -0.12095823382387066, "compression_ratio": 1.5945945945945945, "no_speech_prob": 2.8854739866801538e-05}, {"id": 489, "seek": 193200, "start": 1956.0, "end": 1960.0, "text": " it makes life super easy.", "tokens": [309, 1669, 993, 1687, 1858, 13], "temperature": 0.0, "avg_logprob": -0.12095823382387066, "compression_ratio": 1.5945945945945945, "no_speech_prob": 2.8854739866801538e-05}, {"id": 490, "seek": 196000, "start": 1960.0, "end": 1964.0, "text": " So this kind of stuff you know I feel", "tokens": [407, 341, 733, 295, 1507, 291, 458, 286, 841], "temperature": 0.0, "avg_logprob": -0.10303871631622315, "compression_ratio": 1.6307692307692307, "no_speech_prob": 2.045998007815797e-05}, {"id": 491, "seek": 196000, "start": 1964.0, "end": 1968.0, "text": " like because Swift is a much", "tokens": [411, 570, 25539, 307, 257, 709], "temperature": 0.0, "avg_logprob": -0.10303871631622315, "compression_ratio": 1.6307692307692307, "no_speech_prob": 2.045998007815797e-05}, {"id": 492, "seek": 196000, "start": 1968.0, "end": 1972.0, "text": " faster more hackable language than Python or at least", "tokens": [4663, 544, 10339, 712, 2856, 813, 15329, 420, 412, 1935], "temperature": 0.0, "avg_logprob": -0.10303871631622315, "compression_ratio": 1.6307692307692307, "no_speech_prob": 2.045998007815797e-05}, {"id": 493, "seek": 196000, "start": 1972.0, "end": 1976.0, "text": " hackable in the sense of performance I guess not as hackable in terms of its type", "tokens": [10339, 712, 294, 264, 2020, 295, 3389, 286, 2041, 406, 382, 10339, 712, 294, 2115, 295, 1080, 2010], "temperature": 0.0, "avg_logprob": -0.10303871631622315, "compression_ratio": 1.6307692307692307, "no_speech_prob": 2.045998007815797e-05}, {"id": 494, "seek": 196000, "start": 1976.0, "end": 1980.0, "text": " system necessarily. I feel like we can", "tokens": [1185, 4725, 13, 286, 841, 411, 321, 393], "temperature": 0.0, "avg_logprob": -0.10303871631622315, "compression_ratio": 1.6307692307692307, "no_speech_prob": 2.045998007815797e-05}, {"id": 495, "seek": 196000, "start": 1980.0, "end": 1984.0, "text": " kind of build even more powerful", "tokens": [733, 295, 1322, 754, 544, 4005], "temperature": 0.0, "avg_logprob": -0.10303871631622315, "compression_ratio": 1.6307692307692307, "no_speech_prob": 2.045998007815797e-05}, {"id": 496, "seek": 196000, "start": 1984.0, "end": 1988.0, "text": " foundations and pipelines and you know like", "tokens": [22467, 293, 40168, 293, 291, 458, 411], "temperature": 0.0, "avg_logprob": -0.10303871631622315, "compression_ratio": 1.6307692307692307, "no_speech_prob": 2.045998007815797e-05}, {"id": 497, "seek": 198800, "start": 1988.0, "end": 1992.0, "text": " a real Swift for TensorFlow computer vision", "tokens": [257, 957, 25539, 337, 37624, 3820, 5201], "temperature": 0.0, "avg_logprob": -0.1160575122368045, "compression_ratio": 1.296875, "no_speech_prob": 0.0001252178190043196}, {"id": 498, "seek": 198800, "start": 1992.0, "end": 1996.0, "text": " library you know leveraging the metaprogramming and", "tokens": [6405, 291, 458, 32666, 264, 1131, 569, 340, 1342, 2810, 293], "temperature": 0.0, "avg_logprob": -0.1160575122368045, "compression_ratio": 1.296875, "no_speech_prob": 0.0001252178190043196}, {"id": 499, "seek": 198800, "start": 1996.0, "end": 2000.0, "text": " leveraging Swift numerics stuff like that I think would be", "tokens": [32666, 25539, 7866, 1167, 1507, 411, 300, 286, 519, 576, 312], "temperature": 0.0, "avg_logprob": -0.1160575122368045, "compression_ratio": 1.296875, "no_speech_prob": 0.0001252178190043196}, {"id": 500, "seek": 200000, "start": 2000.0, "end": 2018.0, "text": " super cool.", "tokens": [50364, 1687, 1627, 13, 51264], "temperature": 0.0, "avg_logprob": -0.2761337359746297, "compression_ratio": 0.5789473684210527, "no_speech_prob": 0.0005429809098131955}], "language": "en"}