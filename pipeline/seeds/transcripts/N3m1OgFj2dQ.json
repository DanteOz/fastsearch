{"text": " Hi there. Hello. Hello. Hi. Hi. Hello. Hello. Yeah, I actually live in Sacramento, but yes, I go to UC Davis. Yeah, I'm in Placerville right now. I don't know if you know what that is. Oh, okay. Yeah. Pleasantville. What are you doing there to make sure. Placerville. It's. My wife's grandma's house. Sorry. I guess I misheard what you said originally. I guess. I guess I'm just a little bit of a family. So you're in the same time zone as me. Yes. Yes. Yeah. I know Davis pretty well. Spent some time. Okay. Yeah, I've been there. Well, yeah. I mean, my, my, my dad works in Davis as well. And of course I go to. Been going to school with Davis and so. So you commute. Yeah. Yeah. But I don't, I mostly work from home anyway. Now that I'm focused on my research and given my research, it's all deep learning stuff. So I can, I can do most of that from home. So I mostly work from home, but yeah. Anybody got any. APL news or anything else. Interesting happening. Well, I was able to get. A simple CSV file loaded and. I can see the graph of moving average. That was exciting. That is exciting. I'm going to share my screen so I can. Show people. Oh, there's quite a lot here. Actually. Where was that? Is that in study group three? That was in tabular data. That's. That was a cool. Assignment thing that was very helpful about developing though. I mean, the assignment. Yeah. I was able to kind of assign things to. To the display, the special character. And then that let me. Print out different. Parts of the formula. In order to. Oh. That's right. And yeah, I got it printed whenever it runs, but six will get assigned. That was pretty handy. So quad doesn't have to be the far left thing. I mean, of course it doesn't. When you think about it, but I hadn't. Thought about it. So it's basically like a print statement. You can check it anywhere you like. Yeah. Which is really nice that you're trying to debug what you're doing. But. And I love that you're using the quarter thing to publish it too. So, okay. So you've got an end of day quote data CSV file. So I noticed. Dialogue has okay. So you said dialogue has a CSV thing built in. So do they have built in. Functions tend to start with quad. Is that like how they spell them? I think for a lot of the IO ones, I think. I don't really know for sure, but I know they've got like a CSV. I think they've got an XML and a JSON as well. Unfortunately, they don't have anything for like JPEGs or. And these are images, but they've, they've got a few starting with quad. Got it. The way that you exit out of a dialogue here, full is using quad or as well. Like capital letters off. Oh, FF. Got it. And I guess this is like indexing the first five by three. That's right. Yeah. Okay. Looks like you need to make this a markdown. So. Oh. Then you're doing some masking. Anyway, I don't understand all this stuff yet, but I guess we'll get there. I can walk through it. There's, there's some security like, or we can. Yeah. Yeah, I'd rather walk through it once we know all the glyphs. Cool. But look at that. You've got a plot. So that's great. And right square brackets seems to be another thing that's used for kind of like, I don't know, I think they'd like be not APL functions, but their dialogue commands or something. These right square bracket things. Yeah, I'm not really clear. I don't know all the conventions for what all those, you know, mean and and when to look for something and right square bracket versus there's some that are right parentheses and others, but I'm not really sure what the difference between them all is. Yeah. And is this some is this basically indexing into the indexing the third column and all the rows. Yes. Okay. So that would be the same as colon comma three in pie torture numpy. Yeah. And I guess this is just printing out the fact that it didn't return anything which is via a null array. Well, that's awesome. So yeah, I'm hoping to build up more complexity over time and this and eventually, I'd like to get a random for going but that seems like a cross, not a good first step so no I mean I know trees or something which like, people say, people say, a PL is really well suited to but it doesn't feel well suited to and you have to kind of learn the tree techniques for a PL which is something I would be fascinated to learn about as well so. Yeah, one day. I wanted to have a quick diversion. If you guys don't mind into something I just thought is a great value, which is I've mentioned Anki before 20 of you guys use Anki your super memo or any other repetitive space learning things. Okay. For learning vocabulary right. For remembering literally anything. Yeah. So, all right, I guess, let me explain, because like this is not exactly a PL, but it's also like the most important single thing I know of learning things. So, including a PL. So, so there was this guy called Ebbinghaus who developed this idea, or discovered really this idea called the forgetting curve. And, as it says here, it's been through the 1880s. And basically what he did was he set up this really boring experiment where he had to try to remember a list of random sets of letters, like, look at them and then remember them the next day. And then he tracked over time like each day how many he remembered. So, this is like the percent that he remembered and this would be like the day. And, yeah, it like followed this kind of shape right where she's trying to redraw that this kind of shape. So like he discovered he forgot a lot of them really quickly. But some of them stuck around. And I mean it doesn't asymptote of course it goes to zero. This is actually already interesting in itself, because like a lot of people, particularly adults, I find, feel disheartened and frustrated when they forget things and they think it shows that they have a bad memory. But that's not true. Actually, all humans rapidly forget new things that we learn. And so then what he tried doing was saying well what would happen if I, if he restudies his random sets of letters one day later. And to restudy them he basically gave himself a quiz to try to remember them. Right. And then if you didn't know the answer, you check it. And so of course immediately after that, he was back to 100% well you know 100% or whatever his kind of base recall level is. And of course after that he started forgetting it. But interestingly he didn't forget it as quickly. And then if a couple of days later, he gave himself a quiz again, and then followed to see how long he remembered things for. It was flatter still. And if he did it again a week or two later, it really hardly started, you know, found that it's hardly forgetting things at all. And so this is the key to remembering things. Basically forever. And there's a absolutely amazing website that nobody knows about called SuperMemo. And so SuperMemo is software, but it's also this, there's heaps of research. Basically it's by a guy who's dedicated his whole life to using this technique to remember as many things as possible and to basically organize his whole life. And got all these rules of knowledge formulation. So the guy's name is Peter Wozniak and he's absolutely amazing. So he actually rediscovered this stuff from Ebbinghaus independently, but that has greatly developed it over the last few decades. So there's this piece of software called Anki, which you can just say, OK, I want to learn, I want to remember something. So you give yourself a quiz question. Right. So, for example, if you want to remember what monadic plus is on a complex number, you can like, you know, type in some something like that. And obviously I should use a proper negative, but I'm not using an APL keyboard here. And then you put in the correct answer. Here or whatever. And so then you'd say add and it creates a question. And so what then happens is next time you open Anki and you say, and you say study, and it will start showing you your questions. And if you get it right, you can say it was, you know, basically either hit one, two, three or four to say I got it wrong or I got it right, but it was hard. I got it right. It was OK. I got it right. It was easy. And you can see here, if I say I got it right and it was easy, it's going to be about 10 minutes before it shows it to me again. That's because this is new. Right. And then the next time I do it, if I get it right again, it'll give it'll be a day. And then if I get it right again, it'll be like four days. If I get it right again, it'll be like two weeks. But once you get it right, like five or six times in a row, it'll be a month or two before you see it again, because it's because the thing about the forgetting curve is that the better you know something, the less often you have to revise it. So this deck is actually my daughter's and her friend. So Claire and Gabe's deck. I've just got a little bit of it here. And so you can browse it. You can see like, you know, we've got things like fractions and we've got things like the successor function. And we've got things like bind and out of product because they're doing both math and APL at the same time. I guess a bit like us, but they haven't done lots of things before. So, yeah, so I've got something here saying, oh, what happens if you do divide, dot, divide, call that F and you call F of that. And that's where we learn that basically you actually get back the same thing because that means reciprocal or reciprocal. So I try to cut up with questions that force them to like both remember the technique, but also, you know, utilize some thinking. So, yeah, so Gabe and Claire, if they remember or if their parents managed to convince them, they try to do their Anki every day. And at first it was like a bit of a struggle to get them to do it. But now that like we've been doing it for a month or two, probably more like two, there are things they learned a couple of months ago now and that gets popping up on Anki and they press good and they can see that they won't see it again for like three months. And they're like, oh, this is awesome, you know, so it's gradually getting easier and easier. Anyway, so I just wanted to mention this because given we're all learning something new. This is a good way to remember, you know, the alphabet of glyphs. And so I actually use this for Chinese. 10 years ago or something. Yeah, and the reason it's impossible to forget something is if you say I got this wrong, it resets back the forgetting curve back to showing you again tomorrow and then three days and then five days or whatever, you know, so. So as long as you do Anki regularly it's impossible to forget the things that are there. It does mean that's important to only put in things there that you really do want to remember forever. Because, you know, otherwise, you're going to be spending all this time quizzing yourself and stuff that you actually don't care about, and you can always go back and delete things but, you know. Tell me things vocally rather than putting in the chat. Okay, so in the chat to niche conventions that redact has this nice thing called AI quizzes, which is really cool and Mr. Dec on the call, how did you, if he is, how did you get this space repetition going is there a Python module for this. I implemented it in Ruby on, I think, might be on the super memo website. I'm not sure. Yeah, but the algorithm is there. So, lots of algorithms right like super memo algorithm version whatever SM 17. So, there is, yes, there is, I think, some commercial product. From what I remember. And they use some version of the algorithm there that is not published. But the earlier version had published and I made some tiny modifications to simplify it. I see so he put it in Jeremy can you hear me. Yes, I can. Okay, okay. So, can you click on the first link that I sent on the chat. Absolutely. That is the best thing I have yet found on the topic of space repetition. Great. Thank you. And Hello by the way, ratio is it. Yeah, it's nice to see you. Thanks for joining. Where are you joining us from from India, it's 530 in the morning here. All right, whereabouts in India, are you. Polkata. And I know Koreans in India as well. And India's all one time zone is that right. Yes, yes. So it's it's somewhat impractical because the time. It is almost like mid day in some parts in some parts it's barely daylight. Yeah. Yeah, Australia is like, God, so many time zones. This is the first time I am actually adjusting to Australian time zone because before I adjusted to American and European. Yeah, yeah. Yeah, we do that too. So like a lot of the stuff we do is in the US so we have an early start and early end to our day. That reason. All right, thanks for the tip. Thanks. Have you seen. There's like some work by Michael Nielsen, I think, like there's a, I think like a quantum computing book, but it was like all with space repetition. Yeah, it's called quantum country. Yeah. Yeah. And yeah, I think he has a lot of discussion about about space repetition and things like that as well. Yeah. Yeah. Yeah, he came to a pretty late. But he. One time country that will open the site. Just one time country. Yeah, yeah Michael came to space repetition pretty recently but he tends to get into things deeply when he gets into things which is great so yeah him and Andy so Andy used to be at Khan Academy. Nice. Have you been using this for a deal. Yeah, and he said, only kind of yes indirectly, because I help my daughter with her cards, sometimes. So, therefore I ended up doing it as well, which seems to be enough because I haven't forgotten any glyphs yet. If I do find I start forgetting some glyphs I will do my own. I just want to point out like when I was working with Jeremy. In the beginning, I used to complain that, hey, like, I can't remember stuff like Jeremy would also tell me sometimes hey you don't remember stuff. And then I would also say hey I feel like I don't remember any, maybe I'm just dumb. And he actually sent me some, some books. There was one by Barbara Oakley, for example, who also does the Coursera course like that he's the most popular Coursera course learning how to learn. But it's, it's really interesting. And then you send me another one by like their guides like a professional memory. In that one. Yeah. And then I think Cook was the world memory champion. And he actually created a startup called memorize, which actually adds an additional thing, which is if you want to really remember things well. You need a mnemonic for them, something to make it click in your head, you know, and preferably connections to other things, which actually for a PL is easy because most of the APL glyphs have their own mnemonic already, you know they're, they're, they're drawn that way for a reason. But he actually is particularly to this for Chinese to make sure that each of the characters had some kind of mnemonic picture and stuff. And then yeah so Ed Cook also was the topic of a book. Moonwalking with Einstein, which is a really nice book. It's one of those books that might help you change your understanding of yourself, because Josh is a guy who's think a journalist at the time, who thought of himself as somebody who had a bad memory. And he teamed up with Ed Cook to learn memory techniques and. Yeah, so the whole book is kind of all about his journey. And interestingly, Josh actually went on to create something you might have come across. Which is Atlas Obscura. If you've seen that it's a very cool, very cool website full of interesting things. Cool. Thanks for letting me have a bit of a diversion. So I had one question about maybe a little bit more about the history and terminology of APL. For example, like, I was, you know, I think yesterday you, we had gone over the zilde symbol. Yeah, but like it technically looks like a theta symbol. Right. So not quite it's got a squiggle it's a squiggly theta. Yeah. So like I guess I'm just generally wondering where did these names come from. Like, it's kind of completely like unlike what it should be called like if you're looking at the Greek letters or whatever. So I'm kind of confused from that. Well, okay. So, I mean, this is not the Greek letters. It's not wrong. The ones that are Greek letters are correct. So alpha is called alpha, iota is called iota, and omega is called omega. So there, there is a thought that even those shouldn't be there because like, they give preferential treatment to people of kind of European backgrounds who might recognize Greek letters. You know, but generally, so they were all created by Ken Iverson and his wife. And I think like his wife like drew them or something. They're designed to be designed to be mnemonic. Right. So for example equals is the equals we recognize, and it means that 123 equals 223 will do a element wise equality return of all in. And like this one here is like, extremely. I'm not sure what's doing sorry, I always get share screen. Share screen, share screen. Okay, so 123 equals 223 gives 001 because it's element wise equals. And yes, I was just showing you on the Zillow here that it's actually not a tilde. And so, this one here I kind of think of is like extremely equal to, because it checks whether two things are exactly the same items and exactly the same shape. I believe something like that. Yes, it checks whether, as you can see, so exactly so that example one. Oh, I should change, I got the wrong symbol here. So is it. There we go. Okay, so these are equal. And, alright, one equals is extremely equal to, is false because they're different lengths. Where else is normal equals two is like broadcasted element wise. So there's these kind of like mnemonics you know and then obviously this is the like not version of that. And then some of them are kind of like borrowed from other areas. A lot of them just draw drawings of things. This is the thing on the left hand side of a function. This is on the right hand side of a function. This is the biggest thing and the littlest thing. So yeah, they made them up, basically. And then somebody I think in the chat, was him says, Zelda is a potmanteau of zero, Tilda, which is exactly what it is. It's a zero with a Tilda through it. So, was they, I guess when these were created, because like these are all Unicode characters right so they are now when they are now okay so before they were not really not coding. So one of the things that really helped a lot was there are these things called golf ball typewriters I don't know if you've ever seen them, but they're just, they're like normal typewriters. But instead of like lots of little different things that bang there's a single thing that spins around and goes up and down to bang. And there was a APL. One of those that was created. And apparently that helped a lot because then people could like easily type set things but until that time my understanding is that Ken and his wife, I can't quite remember her name, Jeanette or something. Yeah, they basically would like draw them and then stick them in the right place and, you know, type set in that rather old fashioned way so yeah it must have been a lot of work. But I think like most math was probably done that way anyway. So yeah, they ended up becoming part of Unicode. So, you know, fonts. Most fonts don't have all Unicode characters in. And so if you're wondering why it is that you can look at like a web page or something with APL characters, even if you don't have an APL font installed. Your computer operating system behind the scenes tries to find any font that contains a character that's that's needed, and will generally show it to you using that font. If it, if it can, and it only falls back to the kind of like question mark or box if it can't find it at all. There's a really actually a really great font. It's kind of like my favorite coding font in some ways anyway, which is just SEVCA. And just SEVCA extended contains all of APL in quite a nice way and pretty much everything else, and it's a really nice font. So if you're ever wondering what font to use for your terminal, picking this one is not a bad choice. I don't know how they created so many characters and variants. Quite amazing. Okay. How did you learn about that font? I know. You know, I tend to learn about everything, mainly from Twitter, and then some things from like Hacker News, and some things from like following links from one of those places and finding things. Okay, so, alright so we've got a kernel running. I don't think there's probably anything to pull. Do you know if there's a way to like ignore a branch? Like, I never need GH pages locally, right? And that's going to update a lot more. I only really want to pull master. I don't know if that's possible. Alright. I thought we could do like some Boolean stuff today. If that sounds alright for everybody. So these are all pretty straightforward I think, unless some of the monadic ones are weird. Looks like equals doesn't have a monadic version. Dialogue language elements. Oh, if anybody's interested. Oh, okay, I've got a couple of ideas for coding projects, if anybody's interested. The first is this here, when rendered, is, you know, an APL character in Backticks. I think ideally we'd want it to automatically hyperlink to the dialogue documentation. Wouldn't that be cool? So, if we went to here, here. Yeah, it'd be nice if these were all automatic hyperlinks to the documentation. So if anybody's interested in trying that, the way you would implement it is you would, we're using, well I think Isaac's about to change this to use MB process. And in MB process, which is going to become MB dev 2 in a couple of weeks, we've got basically a list of like processes, which are like all the things we do to change cells, and you can see each one is normally just two or three lines of code. That's one piece. And then another piece is doc links, which is the thing that does this in Python. So in Python I've got something, I guess it'd be better to look at the notebook actually. Doc links. So you've probably noticed that in MB dev websites, we automatically hyperlink anything that's in backticks. So here's an example. So in the source, this just said backtick numpy.array and it's automatically been hyperlinked. And the way that's done is we use linkify. So that splits the lines up, it goes to each line, checks whether or not we're in a fenced area or not. And then once we find the right lines, we create links in them, which is done using this class. So yeah, there might be somewhere to do that in APL. That's one idea for a project. Another idea for a project is Anki is really useful for me as a teacher, but I have to use this kind of hacky approach to use it as a teacher. So I've created a deck for Gabe and Claire called SuperSchool, and they both also have decks called SuperSchool. And each time I do a lesson with them, I add some cards to the deck. And then I go file, export, and I then make this a collection package, sorry, a deck package containing just that deck, and I export it to a file. And then I send them that file, they click on it, it opens and it imports that into their decks. So it means that I can create cards for my students, in this case it's Claire and Gabe, and they can import them. But we each have our own independent decks, so it means they can add stuff to their deck that I don't have in mind or study other topics or whatever. So this project idea is make this all much simpler. So Anki does actually have an online version. Anki Web. So there must be, so there's an API for syncing with it. And there's quite a few versions of Anki that are open source, so I guess it's all documented in API. Yeah, it'd be nice if there was some way maybe through some online interface to add cards and it would automatically like send them off to each person or something. Yeah, some easier way for teachers to send cards off to their students. And there's lots of stuff you could add to that, right? You could then like add some way for then teachers to actually check how the students are going, make sure that they're actually not behind. Because what happens is if you don't study your cards, then this learning number will go up and up and up. And then the other thing I have to do is after each time I export, I then have to go and browse and delete all the cards that are there so that the next time I export, I'm only exporting the new cards. So there's definitely room to create some kind of cool system for a more, you know, collaborative learning approach with spaced repetition, which I think could leverage Anki. And Anki is written in Python, by the way. Anyway, that was a little aside. Okay. So equals. And my guess was that this was equals. Yeah, is that it? Yeah. It gets confusing with the underline. Okay, so there's no monadic equals. I might just make this into a little template that I can copy and paste. Okay. It'll save me some time. Equals. And it's called equal sign. Monadic doesn't exist. Okay. Diatic equals means equal to. Alright, so what equals one? Oops. One equals one, two. One equals one, one. Any other interesting examples? Oh, yeah, strings. So probably useful to think about why this works. So this is, remember, is a special case. It's a character. You know, it's a single character. Where else, there's more than one, it becomes an array of characters. So this is a single character, so it'll be broadcast over all these characters. And so it'll end up being the same as banana equals. It'll be the same as that. Every second. Banana is an A. Banana consists. I think if you do this equals A, and you have a list of words, so like banana and apple, I think it will still go element wise through each one, rather than looking at that higher level, I think. Sorry, I meant the banana and apple on the left hand side. Okay. Equals A. I think. Oh, okay. So you're not saying, you're not saying this. You're saying this. Okay. And so I can tell you why that is. That's because a scalar can broadcast over a matrix. And I think that that creates. I think that's like internally a matrix. And so then if you do equals apple, it will not find apple, I think. Hang on. Let me just get my thing going here. That's interesting. That's three things. Okay. I'm a bit confused about strings. Sorry. What were you saying we could do? Yes, I think now if you do like the same banana apple candy is equal to apple. I think it will not. It'll also do element wise. And so, right. I, I had a lot of problems with this and the moving. Yeah. Yeah. So numpy broadcasts vectors over matrices, where else APL doesn't. So at some point we'll come across something called the each operator, which will work around that problem. All right. Cool. And actually to make this more consistent, I should run everything above. I can't quite see because this is in the way. So run all above. You know, we can almost generate a, we can almost generate an ANKI deck automatically from this notebook figure writing Jeremy. Oh, wow. That would be another interesting exercise. Love it. Yeah, that would be sweet. I will try to continue to write it in a way that would be that would that would make sense to do that. I certainly think so far it does. Okay, that's interesting. So not equals does have a monadic version. Not equals. And I think it's going to be helpful during the Booleans quite early because you use Booleans a lot. And when we say Boolean, we mean arrays containing zeros and ones. Oh, wait, how did I get to that? Not equals. I don't see them. Mon. Wait, monadic not equal to not defined. Monadic not equal is unique mask. Whoa. Okay, that's crazy. Oh, look, this is 17.1. What if I type 18.2 up here? Huh. Okay. Oh, that's a bit tricky. Let's see if they also now have a monadic equals. Things are changing. That's cool. They don't. Okay. Monadic not equal means unique mask. This is one of the things that happens when you search for documentation using Google. It often returns the older version. Yeah, exactly. Yeah, so it looks like you can use you can use close with right square bracket help followed by a glyph and then it opens the doc. Okay, great. And does that even work here? Sorry, tell me what to type again. Help. Help with a capital H. What does it matter? I don't think it matters. And then the glyph. Oh, love it. Okay, that's that's a winning trick. Let's put that up here. All lowercase works as well. And I think with this train, the broadcasting only happens for only one character, I think. Can you say that at this point? Well, I want to learn more about exactly what's going on. And we actually haven't talked about broadcasting at all yet. Yes. So like numpy, they do whenever it is compatible. Yes, doesn't matter. That's right. Numpy does what we would call trailing access. So numpy as long as the last axes are matched, it will broadcast over the leading axes. Exactly. J and BQN do the opposite. So they will as long as the leading axes match, it will broadcast over the trailing axes. APL does neither. APL only broadcasts scalars or does element wise of matching shapes. So otherwise you have to use this thing we will come across called each. So I think we'll leave broadcasting maybe until we get to each. I think I used to close for that. So now I'm questioning if I did it the right way. Oh well, I'm not. Yeah, because I haven't gotten to it yet. I don't actually know the fully correct answer to this. So I'm sure you know more about it than I do. Well, I don't know that each operator. So I think I'm just. So there's this. Yeah. They call it each on that. Yeah, Jay has a more. Oh, I've used that. Yes, I need Enki. Quite right. And then there's also rank. I don't remember which one is rank. Anyway, let's let's get to that when we get to it. Okay, so we've got to figure out what not equals does. Unique mask. Let's start with their examples. Now that we know about strings, their examples are going to make more sense. And so control shift dash is very useful for splitting a cell and then control or Apple left square bracket to unindent. Okay, I can already see what this is. It tells you whether or not the thing in this position, whether we've seen it before in this list. So that's unique. So far that's unique. So far that's unique. So far. I've seen that before. So it's a zero. And so presumably at some point we're going to learn how to use this to access just the elements of this, which are true. And then that'll be how we would create a unique list of elements. Yep. If it's a first occurrence. Got it. Yeah, I think it's nice to have a numeric example as well. Okay, we're happy with that. Okay, these all look fine, I guess. So dyadic eight not equal to. Oh, I suppose I should have unindent all of those at once would have been faster, but never mind. Okay. I'm not sure this one adds much. Let's keep it simple as possible, shall we? Okay. Zipping along with the easy ones. So these are presumably going to be easy as well, although the monadic versions may be odd. We will find out. Oh, okay. That's easy. That's then. Okay, so what I should do actually is do that and then that and then that. Cool. And I assume greater than is going to be the same. All right. Is the broadcasting supposed to work just like characters even here? Yeah, yeah, this is just a one element. This is just a sorry this is just a scalar, you know, strings, not there, not there below. Yeah, yeah, for less than yes should be exactly the same. So I've got a scalar here and unless and an array here so the scalar will broadcast over the array. Okay, so if we have a matrix and a vector done. Correct. Without using each. All right. But we will get to it. So let's look at the greater than. I guess it's fine. We've got some which are a bit trivially easy because. Just go fast. All right. So what are the greater than equal to? Are they all? Cool. All right. So we may as well just copy this. And we could just say less than or equal to. Less than. Not worked at all. Then are equal to. Greater than or equal to. Then are equal to. And how do we type these? Six and four. I see. So we've got four. Six. Eight. Is this one four because it's the smallest? Yes, it is. That's good. This will be six. And then we'll need that here as well. Four. And six. Okay. All right. I guess we're up to this one. Okay. Yeah. So when a character is the same as another character, but with an extra underline, they use the word underbar. So, for example, there's an iota underbar. And there's an epsilon underbar. What other ones are there? Equal underbar. There's one. Left shoe underbar. I think that's it. And this is comma bar because it's not underneath it. Okay. So equals underbar is colon. Equal underbar. And the monadic version of that is depth. And the dyadic version of that is match. Okay. Depth. Let's see if we can guess first. So can anybody figure it out? Depth is seven zero. You can see. Is it the same as rank? Not quite. Oh, this is like not consistent. What does that do? And what about this? What does this do? Okay. We're going to have to introduce something new first then. Which is arrays and arrays. Let's see, where's a good place to put that? We have a complex object section or something next to basic objects. Maybe just fixing these heading levels wrong. Basic objects here. I was going to say some objects. Then we can say arrays in arrays. Yes, because we don't need to know about matrices to be able to do this. And I think single characters and multi-linked characters are handled differently and nest differently. If they're mixed with numbers. Okay, let's get some examples I could use. So if we've got like one, two, three, four, AB. You mean something like this? I think if you just do like even without the parentheses, like one, two, three, four, AB. I think it will nest the A and the AB. I think it does something a little bit different if you just do one, two, three, four, and then just write. That sounds right because it wouldn't be a list. Okay, so the reason is actually is that this one here is identical to this. And that this is actually an array. And so this is actually an array. So this is an array containing array. This is also an array containing an array. And so let's move this one up here. All right. Great. Seems like a good place to stop, I think. And we can look at match tomorrow. All right. Thanks all. Well, this was fun as usual. Thank you for hosting Jeremy. My pleasure. Thank you for joining. I have something to add. So when you said like those characters are in Greek and they actually benefit Europeans, not quite. I mean, if you have taken math in high school, you know all the Greek alphabet. Yeah, physics, chemistry, everything has to do with it. But I mean, I've forgotten it all. I have a hard time remembering all the characters and I always mean to go back and learn them and I just never do. I mean, they can get really confusing if you know other languages like Russian, because like the R in Russian comes from the Greek row, but their character is just a P. So that's a huge pet peeve of mine is you have a lot of like redundant characters when you're using those Greek letters. So there's this one of the guys that wrote a lot of the stuff in dialog APL left and created a new language called BQN. And one of the things he did in his simple set was not to have any, any characters from an alphabet. Full stop. This is better. Which, yeah, it was a decision I mean I guess these are letters I don't know why he can justify these exactly but I guess they're kind of not because they've got an extra dash on them or something. Anyway. All right. Bye. Have a good day. Yeah, bye.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 11.0, "text": " Hi there.", "tokens": [2421, 456, 13], "temperature": 0.0, "avg_logprob": -0.7026622169896176, "compression_ratio": 1.0384615384615385, "no_speech_prob": 0.08169575780630112}, {"id": 1, "seek": 0, "start": 11.0, "end": 16.0, "text": " Hello.", "tokens": [2425, 13], "temperature": 0.0, "avg_logprob": -0.7026622169896176, "compression_ratio": 1.0384615384615385, "no_speech_prob": 0.08169575780630112}, {"id": 2, "seek": 0, "start": 16.0, "end": 18.0, "text": " Hello.", "tokens": [2425, 13], "temperature": 0.0, "avg_logprob": -0.7026622169896176, "compression_ratio": 1.0384615384615385, "no_speech_prob": 0.08169575780630112}, {"id": 3, "seek": 0, "start": 18.0, "end": 20.0, "text": " Hi.", "tokens": [2421, 13], "temperature": 0.0, "avg_logprob": -0.7026622169896176, "compression_ratio": 1.0384615384615385, "no_speech_prob": 0.08169575780630112}, {"id": 4, "seek": 2000, "start": 20.0, "end": 47.0, "text": " Hi.", "tokens": [2421, 13], "temperature": 0.0, "avg_logprob": -0.3184367815653483, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.0015660440549254417}, {"id": 5, "seek": 4700, "start": 47.0, "end": 51.0, "text": " Hello.", "tokens": [2425, 13], "temperature": 0.2, "avg_logprob": -0.31486349190230917, "compression_ratio": 1.5231481481481481, "no_speech_prob": 0.0004560200613923371}, {"id": 6, "seek": 4700, "start": 51.0, "end": 53.0, "text": " Hello.", "tokens": [2425, 13], "temperature": 0.2, "avg_logprob": -0.31486349190230917, "compression_ratio": 1.5231481481481481, "no_speech_prob": 0.0004560200613923371}, {"id": 7, "seek": 4700, "start": 53.0, "end": 57.0, "text": " Yeah, I actually live in Sacramento, but yes, I go to UC Davis.", "tokens": [865, 11, 286, 767, 1621, 294, 38360, 11, 457, 2086, 11, 286, 352, 281, 14079, 15658, 13], "temperature": 0.2, "avg_logprob": -0.31486349190230917, "compression_ratio": 1.5231481481481481, "no_speech_prob": 0.0004560200613923371}, {"id": 8, "seek": 4700, "start": 57.0, "end": 61.0, "text": " Yeah, I'm in Placerville right now. I don't know if you know what that is.", "tokens": [865, 11, 286, 478, 294, 2149, 12858, 8386, 558, 586, 13, 286, 500, 380, 458, 498, 291, 458, 437, 300, 307, 13], "temperature": 0.2, "avg_logprob": -0.31486349190230917, "compression_ratio": 1.5231481481481481, "no_speech_prob": 0.0004560200613923371}, {"id": 9, "seek": 4700, "start": 61.0, "end": 63.0, "text": " Oh, okay.", "tokens": [876, 11, 1392, 13], "temperature": 0.2, "avg_logprob": -0.31486349190230917, "compression_ratio": 1.5231481481481481, "no_speech_prob": 0.0004560200613923371}, {"id": 10, "seek": 4700, "start": 63.0, "end": 64.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.2, "avg_logprob": -0.31486349190230917, "compression_ratio": 1.5231481481481481, "no_speech_prob": 0.0004560200613923371}, {"id": 11, "seek": 4700, "start": 64.0, "end": 66.0, "text": " Pleasantville. What are you doing there to make sure.", "tokens": [25658, 10633, 8386, 13, 708, 366, 291, 884, 456, 281, 652, 988, 13], "temperature": 0.2, "avg_logprob": -0.31486349190230917, "compression_ratio": 1.5231481481481481, "no_speech_prob": 0.0004560200613923371}, {"id": 12, "seek": 4700, "start": 66.0, "end": 69.0, "text": " Placerville. It's.", "tokens": [2149, 12858, 8386, 13, 467, 311, 13], "temperature": 0.2, "avg_logprob": -0.31486349190230917, "compression_ratio": 1.5231481481481481, "no_speech_prob": 0.0004560200613923371}, {"id": 13, "seek": 4700, "start": 69.0, "end": 71.0, "text": " My wife's grandma's house.", "tokens": [1222, 3836, 311, 15766, 311, 1782, 13], "temperature": 0.2, "avg_logprob": -0.31486349190230917, "compression_ratio": 1.5231481481481481, "no_speech_prob": 0.0004560200613923371}, {"id": 14, "seek": 4700, "start": 71.0, "end": 75.0, "text": " Sorry. I guess I misheard what you said originally. I guess.", "tokens": [4919, 13, 286, 2041, 286, 3346, 42915, 437, 291, 848, 7993, 13, 286, 2041, 13], "temperature": 0.2, "avg_logprob": -0.31486349190230917, "compression_ratio": 1.5231481481481481, "no_speech_prob": 0.0004560200613923371}, {"id": 15, "seek": 7500, "start": 75.0, "end": 77.0, "text": " I guess I'm just a little bit of a family.", "tokens": [286, 2041, 286, 478, 445, 257, 707, 857, 295, 257, 1605, 13], "temperature": 0.0, "avg_logprob": -0.4744066454700588, "compression_ratio": 1.4508670520231215, "no_speech_prob": 0.00018509403162170202}, {"id": 16, "seek": 7500, "start": 77.0, "end": 79.0, "text": " So you're in the same time zone as me.", "tokens": [407, 291, 434, 294, 264, 912, 565, 6668, 382, 385, 13], "temperature": 0.0, "avg_logprob": -0.4744066454700588, "compression_ratio": 1.4508670520231215, "no_speech_prob": 0.00018509403162170202}, {"id": 17, "seek": 7500, "start": 79.0, "end": 80.0, "text": " Yes.", "tokens": [1079, 13], "temperature": 0.0, "avg_logprob": -0.4744066454700588, "compression_ratio": 1.4508670520231215, "no_speech_prob": 0.00018509403162170202}, {"id": 18, "seek": 7500, "start": 80.0, "end": 81.0, "text": " Yes.", "tokens": [1079, 13], "temperature": 0.0, "avg_logprob": -0.4744066454700588, "compression_ratio": 1.4508670520231215, "no_speech_prob": 0.00018509403162170202}, {"id": 19, "seek": 7500, "start": 81.0, "end": 82.0, "text": " Yeah. I know Davis pretty well.", "tokens": [865, 13, 286, 458, 15658, 1238, 731, 13], "temperature": 0.0, "avg_logprob": -0.4744066454700588, "compression_ratio": 1.4508670520231215, "no_speech_prob": 0.00018509403162170202}, {"id": 20, "seek": 7500, "start": 82.0, "end": 83.0, "text": " Spent some time.", "tokens": [1738, 317, 512, 565, 13], "temperature": 0.0, "avg_logprob": -0.4744066454700588, "compression_ratio": 1.4508670520231215, "no_speech_prob": 0.00018509403162170202}, {"id": 21, "seek": 7500, "start": 83.0, "end": 87.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.4744066454700588, "compression_ratio": 1.4508670520231215, "no_speech_prob": 0.00018509403162170202}, {"id": 22, "seek": 7500, "start": 87.0, "end": 89.0, "text": " Yeah, I've been there. Well, yeah.", "tokens": [865, 11, 286, 600, 668, 456, 13, 1042, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.4744066454700588, "compression_ratio": 1.4508670520231215, "no_speech_prob": 0.00018509403162170202}, {"id": 23, "seek": 7500, "start": 89.0, "end": 92.0, "text": " I mean, my, my, my dad works in Davis as well.", "tokens": [286, 914, 11, 452, 11, 452, 11, 452, 3546, 1985, 294, 15658, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.4744066454700588, "compression_ratio": 1.4508670520231215, "no_speech_prob": 0.00018509403162170202}, {"id": 24, "seek": 7500, "start": 92.0, "end": 93.0, "text": " And of course I go to.", "tokens": [400, 295, 1164, 286, 352, 281, 13], "temperature": 0.0, "avg_logprob": -0.4744066454700588, "compression_ratio": 1.4508670520231215, "no_speech_prob": 0.00018509403162170202}, {"id": 25, "seek": 9300, "start": 93.0, "end": 106.0, "text": " Been going to school with Davis and so.", "tokens": [32839, 516, 281, 1395, 365, 15658, 293, 370, 13], "temperature": 0.0, "avg_logprob": -0.22098038688538565, "compression_ratio": 1.34, "no_speech_prob": 7.962804374983534e-05}, {"id": 26, "seek": 9300, "start": 106.0, "end": 108.0, "text": " So you commute.", "tokens": [407, 291, 36750, 13], "temperature": 0.0, "avg_logprob": -0.22098038688538565, "compression_ratio": 1.34, "no_speech_prob": 7.962804374983534e-05}, {"id": 27, "seek": 9300, "start": 108.0, "end": 109.0, "text": " Yeah. Yeah.", "tokens": [865, 13, 865, 13], "temperature": 0.0, "avg_logprob": -0.22098038688538565, "compression_ratio": 1.34, "no_speech_prob": 7.962804374983534e-05}, {"id": 28, "seek": 9300, "start": 109.0, "end": 112.0, "text": " But I don't, I mostly work from home anyway.", "tokens": [583, 286, 500, 380, 11, 286, 5240, 589, 490, 1280, 4033, 13], "temperature": 0.0, "avg_logprob": -0.22098038688538565, "compression_ratio": 1.34, "no_speech_prob": 7.962804374983534e-05}, {"id": 29, "seek": 9300, "start": 112.0, "end": 115.0, "text": " Now that I'm focused on my research and given my research,", "tokens": [823, 300, 286, 478, 5178, 322, 452, 2132, 293, 2212, 452, 2132, 11], "temperature": 0.0, "avg_logprob": -0.22098038688538565, "compression_ratio": 1.34, "no_speech_prob": 7.962804374983534e-05}, {"id": 30, "seek": 9300, "start": 115.0, "end": 117.0, "text": " it's all deep learning stuff.", "tokens": [309, 311, 439, 2452, 2539, 1507, 13], "temperature": 0.0, "avg_logprob": -0.22098038688538565, "compression_ratio": 1.34, "no_speech_prob": 7.962804374983534e-05}, {"id": 31, "seek": 11700, "start": 117.0, "end": 128.0, "text": " So I can, I can do most of that from home. So I mostly work from home, but yeah.", "tokens": [407, 286, 393, 11, 286, 393, 360, 881, 295, 300, 490, 1280, 13, 407, 286, 5240, 589, 490, 1280, 11, 457, 1338, 13], "temperature": 0.0, "avg_logprob": -0.25653145530007104, "compression_ratio": 1.3466666666666667, "no_speech_prob": 1.221784987137653e-05}, {"id": 32, "seek": 11700, "start": 128.0, "end": 131.0, "text": " Anybody got any.", "tokens": [19082, 658, 604, 13], "temperature": 0.0, "avg_logprob": -0.25653145530007104, "compression_ratio": 1.3466666666666667, "no_speech_prob": 1.221784987137653e-05}, {"id": 33, "seek": 11700, "start": 131.0, "end": 134.0, "text": " APL news or anything else.", "tokens": [5372, 43, 2583, 420, 1340, 1646, 13], "temperature": 0.0, "avg_logprob": -0.25653145530007104, "compression_ratio": 1.3466666666666667, "no_speech_prob": 1.221784987137653e-05}, {"id": 34, "seek": 11700, "start": 134.0, "end": 137.0, "text": " Interesting happening.", "tokens": [14711, 2737, 13], "temperature": 0.0, "avg_logprob": -0.25653145530007104, "compression_ratio": 1.3466666666666667, "no_speech_prob": 1.221784987137653e-05}, {"id": 35, "seek": 11700, "start": 137.0, "end": 140.0, "text": " Well, I was able to get.", "tokens": [1042, 11, 286, 390, 1075, 281, 483, 13], "temperature": 0.0, "avg_logprob": -0.25653145530007104, "compression_ratio": 1.3466666666666667, "no_speech_prob": 1.221784987137653e-05}, {"id": 36, "seek": 11700, "start": 140.0, "end": 143.0, "text": " A simple CSV file loaded and.", "tokens": [316, 2199, 48814, 3991, 13210, 293, 13], "temperature": 0.0, "avg_logprob": -0.25653145530007104, "compression_ratio": 1.3466666666666667, "no_speech_prob": 1.221784987137653e-05}, {"id": 37, "seek": 14300, "start": 143.0, "end": 148.0, "text": " I can see the graph of moving average.", "tokens": [286, 393, 536, 264, 4295, 295, 2684, 4274, 13], "temperature": 0.0, "avg_logprob": -0.29671321528972966, "compression_ratio": 1.569377990430622, "no_speech_prob": 4.710787834483199e-06}, {"id": 38, "seek": 14300, "start": 148.0, "end": 150.0, "text": " That was exciting. That is exciting.", "tokens": [663, 390, 4670, 13, 663, 307, 4670, 13], "temperature": 0.0, "avg_logprob": -0.29671321528972966, "compression_ratio": 1.569377990430622, "no_speech_prob": 4.710787834483199e-06}, {"id": 39, "seek": 14300, "start": 150.0, "end": 152.0, "text": " I'm going to share my screen so I can.", "tokens": [286, 478, 516, 281, 2073, 452, 2568, 370, 286, 393, 13], "temperature": 0.0, "avg_logprob": -0.29671321528972966, "compression_ratio": 1.569377990430622, "no_speech_prob": 4.710787834483199e-06}, {"id": 40, "seek": 14300, "start": 152.0, "end": 156.0, "text": " Show people.", "tokens": [6895, 561, 13], "temperature": 0.0, "avg_logprob": -0.29671321528972966, "compression_ratio": 1.569377990430622, "no_speech_prob": 4.710787834483199e-06}, {"id": 41, "seek": 14300, "start": 156.0, "end": 158.0, "text": " Oh, there's quite a lot here.", "tokens": [876, 11, 456, 311, 1596, 257, 688, 510, 13], "temperature": 0.0, "avg_logprob": -0.29671321528972966, "compression_ratio": 1.569377990430622, "no_speech_prob": 4.710787834483199e-06}, {"id": 42, "seek": 14300, "start": 158.0, "end": 162.0, "text": " Actually.", "tokens": [5135, 13], "temperature": 0.0, "avg_logprob": -0.29671321528972966, "compression_ratio": 1.569377990430622, "no_speech_prob": 4.710787834483199e-06}, {"id": 43, "seek": 14300, "start": 162.0, "end": 165.0, "text": " Where was that? Is that in study group three?", "tokens": [2305, 390, 300, 30, 1119, 300, 294, 2979, 1594, 1045, 30], "temperature": 0.0, "avg_logprob": -0.29671321528972966, "compression_ratio": 1.569377990430622, "no_speech_prob": 4.710787834483199e-06}, {"id": 44, "seek": 14300, "start": 165.0, "end": 167.0, "text": " That was in tabular data. That's.", "tokens": [663, 390, 294, 4421, 1040, 1412, 13, 663, 311, 13], "temperature": 0.0, "avg_logprob": -0.29671321528972966, "compression_ratio": 1.569377990430622, "no_speech_prob": 4.710787834483199e-06}, {"id": 45, "seek": 14300, "start": 167.0, "end": 169.0, "text": " That was a cool.", "tokens": [663, 390, 257, 1627, 13], "temperature": 0.0, "avg_logprob": -0.29671321528972966, "compression_ratio": 1.569377990430622, "no_speech_prob": 4.710787834483199e-06}, {"id": 46, "seek": 14300, "start": 169.0, "end": 172.0, "text": " Assignment thing that was very helpful about developing though.", "tokens": [6281, 41134, 551, 300, 390, 588, 4961, 466, 6416, 1673, 13], "temperature": 0.0, "avg_logprob": -0.29671321528972966, "compression_ratio": 1.569377990430622, "no_speech_prob": 4.710787834483199e-06}, {"id": 47, "seek": 17200, "start": 172.0, "end": 174.0, "text": " I mean, the assignment.", "tokens": [286, 914, 11, 264, 15187, 13], "temperature": 0.0, "avg_logprob": -0.32125578121263154, "compression_ratio": 1.495, "no_speech_prob": 1.0951425792882219e-05}, {"id": 48, "seek": 17200, "start": 174.0, "end": 175.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.32125578121263154, "compression_ratio": 1.495, "no_speech_prob": 1.0951425792882219e-05}, {"id": 49, "seek": 17200, "start": 175.0, "end": 178.0, "text": " I was able to kind of assign things to.", "tokens": [286, 390, 1075, 281, 733, 295, 6269, 721, 281, 13], "temperature": 0.0, "avg_logprob": -0.32125578121263154, "compression_ratio": 1.495, "no_speech_prob": 1.0951425792882219e-05}, {"id": 50, "seek": 17200, "start": 178.0, "end": 182.0, "text": " To the display, the special character. And then that let me.", "tokens": [1407, 264, 4674, 11, 264, 2121, 2517, 13, 400, 550, 300, 718, 385, 13], "temperature": 0.0, "avg_logprob": -0.32125578121263154, "compression_ratio": 1.495, "no_speech_prob": 1.0951425792882219e-05}, {"id": 51, "seek": 17200, "start": 182.0, "end": 184.0, "text": " Print out different.", "tokens": [34439, 484, 819, 13], "temperature": 0.0, "avg_logprob": -0.32125578121263154, "compression_ratio": 1.495, "no_speech_prob": 1.0951425792882219e-05}, {"id": 52, "seek": 17200, "start": 184.0, "end": 186.0, "text": " Parts of the formula.", "tokens": [4100, 82, 295, 264, 8513, 13], "temperature": 0.0, "avg_logprob": -0.32125578121263154, "compression_ratio": 1.495, "no_speech_prob": 1.0951425792882219e-05}, {"id": 53, "seek": 17200, "start": 186.0, "end": 188.0, "text": " In order to.", "tokens": [682, 1668, 281, 13], "temperature": 0.0, "avg_logprob": -0.32125578121263154, "compression_ratio": 1.495, "no_speech_prob": 1.0951425792882219e-05}, {"id": 54, "seek": 17200, "start": 188.0, "end": 189.0, "text": " Oh.", "tokens": [876, 13], "temperature": 0.0, "avg_logprob": -0.32125578121263154, "compression_ratio": 1.495, "no_speech_prob": 1.0951425792882219e-05}, {"id": 55, "seek": 17200, "start": 189.0, "end": 193.0, "text": " That's right.", "tokens": [663, 311, 558, 13], "temperature": 0.0, "avg_logprob": -0.32125578121263154, "compression_ratio": 1.495, "no_speech_prob": 1.0951425792882219e-05}, {"id": 56, "seek": 17200, "start": 193.0, "end": 197.0, "text": " And yeah, I got it printed whenever it runs, but six will get assigned.", "tokens": [400, 1338, 11, 286, 658, 309, 13567, 5699, 309, 6676, 11, 457, 2309, 486, 483, 13279, 13], "temperature": 0.0, "avg_logprob": -0.32125578121263154, "compression_ratio": 1.495, "no_speech_prob": 1.0951425792882219e-05}, {"id": 57, "seek": 17200, "start": 197.0, "end": 200.0, "text": " That was pretty handy.", "tokens": [663, 390, 1238, 13239, 13], "temperature": 0.0, "avg_logprob": -0.32125578121263154, "compression_ratio": 1.495, "no_speech_prob": 1.0951425792882219e-05}, {"id": 58, "seek": 20000, "start": 200.0, "end": 203.0, "text": " So quad doesn't have to be the far left thing. I mean, of course it doesn't.", "tokens": [407, 10787, 1177, 380, 362, 281, 312, 264, 1400, 1411, 551, 13, 286, 914, 11, 295, 1164, 309, 1177, 380, 13], "temperature": 0.0, "avg_logprob": -0.16936202482743698, "compression_ratio": 1.5025906735751295, "no_speech_prob": 3.04146465168742e-06}, {"id": 59, "seek": 20000, "start": 203.0, "end": 205.0, "text": " When you think about it, but I hadn't.", "tokens": [1133, 291, 519, 466, 309, 11, 457, 286, 8782, 380, 13], "temperature": 0.0, "avg_logprob": -0.16936202482743698, "compression_ratio": 1.5025906735751295, "no_speech_prob": 3.04146465168742e-06}, {"id": 60, "seek": 20000, "start": 205.0, "end": 208.0, "text": " Thought about it. So it's basically like a print statement.", "tokens": [23058, 466, 309, 13, 407, 309, 311, 1936, 411, 257, 4482, 5629, 13], "temperature": 0.0, "avg_logprob": -0.16936202482743698, "compression_ratio": 1.5025906735751295, "no_speech_prob": 3.04146465168742e-06}, {"id": 61, "seek": 20000, "start": 208.0, "end": 210.0, "text": " You can check it anywhere you like.", "tokens": [509, 393, 1520, 309, 4992, 291, 411, 13], "temperature": 0.0, "avg_logprob": -0.16936202482743698, "compression_ratio": 1.5025906735751295, "no_speech_prob": 3.04146465168742e-06}, {"id": 62, "seek": 20000, "start": 210.0, "end": 211.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.16936202482743698, "compression_ratio": 1.5025906735751295, "no_speech_prob": 3.04146465168742e-06}, {"id": 63, "seek": 20000, "start": 211.0, "end": 217.0, "text": " Which is really nice that you're trying to debug what you're doing.", "tokens": [3013, 307, 534, 1481, 300, 291, 434, 1382, 281, 24083, 437, 291, 434, 884, 13], "temperature": 0.0, "avg_logprob": -0.16936202482743698, "compression_ratio": 1.5025906735751295, "no_speech_prob": 3.04146465168742e-06}, {"id": 64, "seek": 20000, "start": 217.0, "end": 223.0, "text": " But.", "tokens": [583, 13], "temperature": 0.0, "avg_logprob": -0.16936202482743698, "compression_ratio": 1.5025906735751295, "no_speech_prob": 3.04146465168742e-06}, {"id": 65, "seek": 22300, "start": 223.0, "end": 230.0, "text": " And I love that you're using the quarter thing to publish it too.", "tokens": [400, 286, 959, 300, 291, 434, 1228, 264, 6555, 551, 281, 11374, 309, 886, 13], "temperature": 0.2, "avg_logprob": -0.19302595138549805, "compression_ratio": 1.6056338028169015, "no_speech_prob": 6.048530394764384e-06}, {"id": 66, "seek": 22300, "start": 230.0, "end": 238.0, "text": " So, okay. So you've got an end of day quote data CSV file. So I noticed.", "tokens": [407, 11, 1392, 13, 407, 291, 600, 658, 364, 917, 295, 786, 6513, 1412, 48814, 3991, 13, 407, 286, 5694, 13], "temperature": 0.2, "avg_logprob": -0.19302595138549805, "compression_ratio": 1.6056338028169015, "no_speech_prob": 6.048530394764384e-06}, {"id": 67, "seek": 22300, "start": 238.0, "end": 243.0, "text": " Dialogue has okay. So you said dialogue has a CSV thing built in. So do they have built in.", "tokens": [29658, 7213, 575, 1392, 13, 407, 291, 848, 10221, 575, 257, 48814, 551, 3094, 294, 13, 407, 360, 436, 362, 3094, 294, 13], "temperature": 0.2, "avg_logprob": -0.19302595138549805, "compression_ratio": 1.6056338028169015, "no_speech_prob": 6.048530394764384e-06}, {"id": 68, "seek": 22300, "start": 243.0, "end": 248.0, "text": " Functions tend to start with quad. Is that like how they spell them?", "tokens": [11166, 3916, 3928, 281, 722, 365, 10787, 13, 1119, 300, 411, 577, 436, 9827, 552, 30], "temperature": 0.2, "avg_logprob": -0.19302595138549805, "compression_ratio": 1.6056338028169015, "no_speech_prob": 6.048530394764384e-06}, {"id": 69, "seek": 22300, "start": 248.0, "end": 251.0, "text": " I think for a lot of the IO ones, I think.", "tokens": [286, 519, 337, 257, 688, 295, 264, 39839, 2306, 11, 286, 519, 13], "temperature": 0.2, "avg_logprob": -0.19302595138549805, "compression_ratio": 1.6056338028169015, "no_speech_prob": 6.048530394764384e-06}, {"id": 70, "seek": 25100, "start": 251.0, "end": 254.0, "text": " I don't really know for sure, but I know they've got like a CSV.", "tokens": [286, 500, 380, 534, 458, 337, 988, 11, 457, 286, 458, 436, 600, 658, 411, 257, 48814, 13], "temperature": 0.0, "avg_logprob": -0.2307869689633148, "compression_ratio": 1.5255813953488373, "no_speech_prob": 2.1427595129352994e-05}, {"id": 71, "seek": 25100, "start": 254.0, "end": 257.0, "text": " I think they've got an XML and a JSON as well.", "tokens": [286, 519, 436, 600, 658, 364, 43484, 293, 257, 31828, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.2307869689633148, "compression_ratio": 1.5255813953488373, "no_speech_prob": 2.1427595129352994e-05}, {"id": 72, "seek": 25100, "start": 257.0, "end": 260.0, "text": " Unfortunately, they don't have anything for like JPEGs or.", "tokens": [8590, 11, 436, 500, 380, 362, 1340, 337, 411, 508, 5208, 33715, 420, 13], "temperature": 0.0, "avg_logprob": -0.2307869689633148, "compression_ratio": 1.5255813953488373, "no_speech_prob": 2.1427595129352994e-05}, {"id": 73, "seek": 25100, "start": 260.0, "end": 265.0, "text": " And these are images, but they've, they've got a few starting with quad.", "tokens": [400, 613, 366, 5267, 11, 457, 436, 600, 11, 436, 600, 658, 257, 1326, 2891, 365, 10787, 13], "temperature": 0.0, "avg_logprob": -0.2307869689633148, "compression_ratio": 1.5255813953488373, "no_speech_prob": 2.1427595129352994e-05}, {"id": 74, "seek": 25100, "start": 265.0, "end": 268.0, "text": " Got it.", "tokens": [5803, 309, 13], "temperature": 0.0, "avg_logprob": -0.2307869689633148, "compression_ratio": 1.5255813953488373, "no_speech_prob": 2.1427595129352994e-05}, {"id": 75, "seek": 25100, "start": 268.0, "end": 275.0, "text": " The way that you exit out of a dialogue here, full is using quad or as well.", "tokens": [440, 636, 300, 291, 11043, 484, 295, 257, 10221, 510, 11, 1577, 307, 1228, 10787, 420, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.2307869689633148, "compression_ratio": 1.5255813953488373, "no_speech_prob": 2.1427595129352994e-05}, {"id": 76, "seek": 27500, "start": 275.0, "end": 282.0, "text": " Like capital letters off.", "tokens": [1743, 4238, 7825, 766, 13], "temperature": 0.0, "avg_logprob": -0.24027338894930753, "compression_ratio": 1.2430555555555556, "no_speech_prob": 8.39582753542345e-06}, {"id": 77, "seek": 27500, "start": 282.0, "end": 286.0, "text": " Oh, FF. Got it.", "tokens": [876, 11, 479, 37, 13, 5803, 309, 13], "temperature": 0.0, "avg_logprob": -0.24027338894930753, "compression_ratio": 1.2430555555555556, "no_speech_prob": 8.39582753542345e-06}, {"id": 78, "seek": 27500, "start": 286.0, "end": 291.0, "text": " And I guess this is like indexing the first five by three.", "tokens": [400, 286, 2041, 341, 307, 411, 8186, 278, 264, 700, 1732, 538, 1045, 13], "temperature": 0.0, "avg_logprob": -0.24027338894930753, "compression_ratio": 1.2430555555555556, "no_speech_prob": 8.39582753542345e-06}, {"id": 79, "seek": 27500, "start": 291.0, "end": 293.0, "text": " That's right. Yeah.", "tokens": [663, 311, 558, 13, 865, 13], "temperature": 0.0, "avg_logprob": -0.24027338894930753, "compression_ratio": 1.2430555555555556, "no_speech_prob": 8.39582753542345e-06}, {"id": 80, "seek": 27500, "start": 293.0, "end": 296.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.24027338894930753, "compression_ratio": 1.2430555555555556, "no_speech_prob": 8.39582753542345e-06}, {"id": 81, "seek": 27500, "start": 296.0, "end": 300.0, "text": " Looks like you need to make this a markdown. So.", "tokens": [10027, 411, 291, 643, 281, 652, 341, 257, 1491, 5093, 13, 407, 13], "temperature": 0.0, "avg_logprob": -0.24027338894930753, "compression_ratio": 1.2430555555555556, "no_speech_prob": 8.39582753542345e-06}, {"id": 82, "seek": 27500, "start": 300.0, "end": 303.0, "text": " Oh.", "tokens": [876, 13], "temperature": 0.0, "avg_logprob": -0.24027338894930753, "compression_ratio": 1.2430555555555556, "no_speech_prob": 8.39582753542345e-06}, {"id": 83, "seek": 30300, "start": 303.0, "end": 308.0, "text": " Then you're doing some masking.", "tokens": [1396, 291, 434, 884, 512, 31226, 13], "temperature": 0.0, "avg_logprob": -0.23560042259020683, "compression_ratio": 1.4651162790697674, "no_speech_prob": 9.817978025239427e-06}, {"id": 84, "seek": 30300, "start": 308.0, "end": 314.0, "text": " Anyway, I don't understand all this stuff yet, but I guess we'll get there.", "tokens": [5684, 11, 286, 500, 380, 1223, 439, 341, 1507, 1939, 11, 457, 286, 2041, 321, 603, 483, 456, 13], "temperature": 0.0, "avg_logprob": -0.23560042259020683, "compression_ratio": 1.4651162790697674, "no_speech_prob": 9.817978025239427e-06}, {"id": 85, "seek": 30300, "start": 314.0, "end": 320.0, "text": " I can walk through it. There's, there's some security like, or we can. Yeah.", "tokens": [286, 393, 1792, 807, 309, 13, 821, 311, 11, 456, 311, 512, 3825, 411, 11, 420, 321, 393, 13, 865, 13], "temperature": 0.0, "avg_logprob": -0.23560042259020683, "compression_ratio": 1.4651162790697674, "no_speech_prob": 9.817978025239427e-06}, {"id": 86, "seek": 30300, "start": 320.0, "end": 326.0, "text": " Yeah, I'd rather walk through it once we know all the glyphs.", "tokens": [865, 11, 286, 1116, 2831, 1792, 807, 309, 1564, 321, 458, 439, 264, 22633, 950, 82, 13], "temperature": 0.0, "avg_logprob": -0.23560042259020683, "compression_ratio": 1.4651162790697674, "no_speech_prob": 9.817978025239427e-06}, {"id": 87, "seek": 30300, "start": 326.0, "end": 329.0, "text": " Cool.", "tokens": [8561, 13], "temperature": 0.0, "avg_logprob": -0.23560042259020683, "compression_ratio": 1.4651162790697674, "no_speech_prob": 9.817978025239427e-06}, {"id": 88, "seek": 32900, "start": 329.0, "end": 333.0, "text": " But look at that. You've got a plot. So that's great.", "tokens": [583, 574, 412, 300, 13, 509, 600, 658, 257, 7542, 13, 407, 300, 311, 869, 13], "temperature": 0.0, "avg_logprob": -0.19542375802993775, "compression_ratio": 1.510204081632653, "no_speech_prob": 2.4439541448373348e-06}, {"id": 89, "seek": 32900, "start": 333.0, "end": 342.0, "text": " And right square brackets seems to be another thing that's used for kind of like, I don't know, I think they'd like be not APL functions, but their dialogue commands or something.", "tokens": [400, 558, 3732, 26179, 2544, 281, 312, 1071, 551, 300, 311, 1143, 337, 733, 295, 411, 11, 286, 500, 380, 458, 11, 286, 519, 436, 1116, 411, 312, 406, 5372, 43, 6828, 11, 457, 641, 10221, 16901, 420, 746, 13], "temperature": 0.0, "avg_logprob": -0.19542375802993775, "compression_ratio": 1.510204081632653, "no_speech_prob": 2.4439541448373348e-06}, {"id": 90, "seek": 32900, "start": 342.0, "end": 344.0, "text": " These right square bracket things.", "tokens": [1981, 558, 3732, 16904, 721, 13], "temperature": 0.0, "avg_logprob": -0.19542375802993775, "compression_ratio": 1.510204081632653, "no_speech_prob": 2.4439541448373348e-06}, {"id": 91, "seek": 32900, "start": 344.0, "end": 347.0, "text": " Yeah, I'm not really clear.", "tokens": [865, 11, 286, 478, 406, 534, 1850, 13], "temperature": 0.0, "avg_logprob": -0.19542375802993775, "compression_ratio": 1.510204081632653, "no_speech_prob": 2.4439541448373348e-06}, {"id": 92, "seek": 34700, "start": 347.0, "end": 362.0, "text": " I don't know all the conventions for what all those, you know, mean and and when to look for something and right square bracket versus there's some that are right parentheses and others, but I'm not really sure what the difference between them all is.", "tokens": [286, 500, 380, 458, 439, 264, 33520, 337, 437, 439, 729, 11, 291, 458, 11, 914, 293, 293, 562, 281, 574, 337, 746, 293, 558, 3732, 16904, 5717, 456, 311, 512, 300, 366, 558, 34153, 293, 2357, 11, 457, 286, 478, 406, 534, 988, 437, 264, 2649, 1296, 552, 439, 307, 13], "temperature": 0.0, "avg_logprob": -0.25538373674665177, "compression_ratio": 1.6953125, "no_speech_prob": 1.4823147012066329e-06}, {"id": 93, "seek": 34700, "start": 362.0, "end": 363.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.25538373674665177, "compression_ratio": 1.6953125, "no_speech_prob": 1.4823147012066329e-06}, {"id": 94, "seek": 34700, "start": 363.0, "end": 369.0, "text": " And is this some is this basically indexing into the indexing the third column and all the rows.", "tokens": [400, 307, 341, 512, 307, 341, 1936, 8186, 278, 666, 264, 8186, 278, 264, 2636, 7738, 293, 439, 264, 13241, 13], "temperature": 0.0, "avg_logprob": -0.25538373674665177, "compression_ratio": 1.6953125, "no_speech_prob": 1.4823147012066329e-06}, {"id": 95, "seek": 34700, "start": 369.0, "end": 376.0, "text": " Yes. Okay. So that would be the same as colon comma three in pie torture numpy.", "tokens": [1079, 13, 1033, 13, 407, 300, 576, 312, 264, 912, 382, 8255, 22117, 1045, 294, 1730, 20711, 1031, 8200, 13], "temperature": 0.0, "avg_logprob": -0.25538373674665177, "compression_ratio": 1.6953125, "no_speech_prob": 1.4823147012066329e-06}, {"id": 96, "seek": 37600, "start": 376.0, "end": 378.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.18657716449938322, "compression_ratio": 1.5294117647058822, "no_speech_prob": 3.72656040781294e-06}, {"id": 97, "seek": 37600, "start": 378.0, "end": 386.0, "text": " And I guess this is just printing out the fact that it didn't return anything which is via a null array.", "tokens": [400, 286, 2041, 341, 307, 445, 14699, 484, 264, 1186, 300, 309, 994, 380, 2736, 1340, 597, 307, 5766, 257, 18184, 10225, 13], "temperature": 0.0, "avg_logprob": -0.18657716449938322, "compression_ratio": 1.5294117647058822, "no_speech_prob": 3.72656040781294e-06}, {"id": 98, "seek": 37600, "start": 386.0, "end": 391.0, "text": " Well, that's awesome.", "tokens": [1042, 11, 300, 311, 3476, 13], "temperature": 0.0, "avg_logprob": -0.18657716449938322, "compression_ratio": 1.5294117647058822, "no_speech_prob": 3.72656040781294e-06}, {"id": 99, "seek": 37600, "start": 391.0, "end": 405.0, "text": " So yeah, I'm hoping to build up more complexity over time and this and eventually, I'd like to get a random for going but that seems like a cross, not a good first step so no I mean I know trees or something which like, people say,", "tokens": [407, 1338, 11, 286, 478, 7159, 281, 1322, 493, 544, 14024, 670, 565, 293, 341, 293, 4728, 11, 286, 1116, 411, 281, 483, 257, 4974, 337, 516, 457, 300, 2544, 411, 257, 3278, 11, 406, 257, 665, 700, 1823, 370, 572, 286, 914, 286, 458, 5852, 420, 746, 597, 411, 11, 561, 584, 11], "temperature": 0.0, "avg_logprob": -0.18657716449938322, "compression_ratio": 1.5294117647058822, "no_speech_prob": 3.72656040781294e-06}, {"id": 100, "seek": 40500, "start": 405.0, "end": 418.0, "text": " people say, a PL is really well suited to but it doesn't feel well suited to and you have to kind of learn the tree techniques for a PL which is something I would be fascinated to learn about as well so.", "tokens": [561, 584, 11, 257, 6999, 307, 534, 731, 24736, 281, 457, 309, 1177, 380, 841, 731, 24736, 281, 293, 291, 362, 281, 733, 295, 1466, 264, 4230, 7512, 337, 257, 6999, 597, 307, 746, 286, 576, 312, 24597, 281, 1466, 466, 382, 731, 370, 13], "temperature": 0.0, "avg_logprob": -0.1997572353907994, "compression_ratio": 1.4533333333333334, "no_speech_prob": 7.295774139493005e-06}, {"id": 101, "seek": 40500, "start": 418.0, "end": 422.0, "text": " Yeah, one day.", "tokens": [865, 11, 472, 786, 13], "temperature": 0.0, "avg_logprob": -0.1997572353907994, "compression_ratio": 1.4533333333333334, "no_speech_prob": 7.295774139493005e-06}, {"id": 102, "seek": 42200, "start": 422.0, "end": 436.0, "text": " I wanted to have a quick diversion. If you guys don't mind into something I just thought is a great value,", "tokens": [286, 1415, 281, 362, 257, 1702, 49422, 13, 759, 291, 1074, 500, 380, 1575, 666, 746, 286, 445, 1194, 307, 257, 869, 2158, 11], "temperature": 0.0, "avg_logprob": -0.16830861568450928, "compression_ratio": 1.4049079754601228, "no_speech_prob": 1.3003435924474616e-05}, {"id": 103, "seek": 42200, "start": 436.0, "end": 448.0, "text": " which is I've mentioned Anki before 20 of you guys use Anki your super memo or any other repetitive space learning things.", "tokens": [597, 307, 286, 600, 2835, 1107, 2984, 949, 945, 295, 291, 1074, 764, 1107, 2984, 428, 1687, 35900, 420, 604, 661, 29404, 1901, 2539, 721, 13], "temperature": 0.0, "avg_logprob": -0.16830861568450928, "compression_ratio": 1.4049079754601228, "no_speech_prob": 1.3003435924474616e-05}, {"id": 104, "seek": 44800, "start": 448.0, "end": 454.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.2432712515195211, "compression_ratio": 1.0129870129870129, "no_speech_prob": 1.3413317901722621e-05}, {"id": 105, "seek": 44800, "start": 454.0, "end": 457.0, "text": " For learning vocabulary right.", "tokens": [1171, 2539, 19864, 558, 13], "temperature": 0.0, "avg_logprob": -0.2432712515195211, "compression_ratio": 1.0129870129870129, "no_speech_prob": 1.3413317901722621e-05}, {"id": 106, "seek": 44800, "start": 457.0, "end": 460.0, "text": " For remembering literally anything.", "tokens": [1171, 20719, 3736, 1340, 13], "temperature": 0.0, "avg_logprob": -0.2432712515195211, "compression_ratio": 1.0129870129870129, "no_speech_prob": 1.3413317901722621e-05}, {"id": 107, "seek": 44800, "start": 460.0, "end": 465.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.2432712515195211, "compression_ratio": 1.0129870129870129, "no_speech_prob": 1.3413317901722621e-05}, {"id": 108, "seek": 46500, "start": 465.0, "end": 481.0, "text": " So, all right, I guess, let me explain, because like this is not exactly a PL, but it's also like the most important single thing I know of", "tokens": [407, 11, 439, 558, 11, 286, 2041, 11, 718, 385, 2903, 11, 570, 411, 341, 307, 406, 2293, 257, 6999, 11, 457, 309, 311, 611, 411, 264, 881, 1021, 2167, 551, 286, 458, 295], "temperature": 0.0, "avg_logprob": -0.13395373326427532, "compression_ratio": 1.3432835820895523, "no_speech_prob": 8.137047188938595e-06}, {"id": 109, "seek": 46500, "start": 481.0, "end": 487.0, "text": " learning things. So, including a PL.", "tokens": [2539, 721, 13, 407, 11, 3009, 257, 6999, 13], "temperature": 0.0, "avg_logprob": -0.13395373326427532, "compression_ratio": 1.3432835820895523, "no_speech_prob": 8.137047188938595e-06}, {"id": 110, "seek": 46500, "start": 487.0, "end": 489.0, "text": " So,", "tokens": [407, 11], "temperature": 0.0, "avg_logprob": -0.13395373326427532, "compression_ratio": 1.3432835820895523, "no_speech_prob": 8.137047188938595e-06}, {"id": 111, "seek": 48900, "start": 489.0, "end": 500.0, "text": " so there was this guy called Ebbinghaus who", "tokens": [370, 456, 390, 341, 2146, 1219, 20418, 4324, 23321, 567], "temperature": 0.0, "avg_logprob": -0.2398824691772461, "compression_ratio": 1.2524271844660195, "no_speech_prob": 1.7225487681571394e-05}, {"id": 112, "seek": 48900, "start": 500.0, "end": 509.0, "text": " developed this idea, or discovered really this idea called the forgetting curve.", "tokens": [4743, 341, 1558, 11, 420, 6941, 534, 341, 1558, 1219, 264, 25428, 7605, 13], "temperature": 0.0, "avg_logprob": -0.2398824691772461, "compression_ratio": 1.2524271844660195, "no_speech_prob": 1.7225487681571394e-05}, {"id": 113, "seek": 48900, "start": 509.0, "end": 512.0, "text": " And,", "tokens": [400, 11], "temperature": 0.0, "avg_logprob": -0.2398824691772461, "compression_ratio": 1.2524271844660195, "no_speech_prob": 1.7225487681571394e-05}, {"id": 114, "seek": 51200, "start": 512.0, "end": 520.0, "text": " as it says here, it's been through the 1880s. And basically what he did was", "tokens": [382, 309, 1619, 510, 11, 309, 311, 668, 807, 264, 2443, 4702, 82, 13, 400, 1936, 437, 415, 630, 390], "temperature": 0.0, "avg_logprob": -0.126740849207318, "compression_ratio": 1.4720496894409938, "no_speech_prob": 6.961475719435839e-06}, {"id": 115, "seek": 51200, "start": 520.0, "end": 523.0, "text": " he", "tokens": [415], "temperature": 0.0, "avg_logprob": -0.126740849207318, "compression_ratio": 1.4720496894409938, "no_speech_prob": 6.961475719435839e-06}, {"id": 116, "seek": 51200, "start": 523.0, "end": 536.0, "text": " set up this really boring experiment where he had to try to remember a list of random sets of letters, like, look at them and then remember them the next day.", "tokens": [992, 493, 341, 534, 9989, 5120, 689, 415, 632, 281, 853, 281, 1604, 257, 1329, 295, 4974, 6352, 295, 7825, 11, 411, 11, 574, 412, 552, 293, 550, 1604, 552, 264, 958, 786, 13], "temperature": 0.0, "avg_logprob": -0.126740849207318, "compression_ratio": 1.4720496894409938, "no_speech_prob": 6.961475719435839e-06}, {"id": 117, "seek": 53600, "start": 536.0, "end": 542.0, "text": " And then he tracked over time like each day how many he remembered.", "tokens": [400, 550, 415, 31703, 670, 565, 411, 1184, 786, 577, 867, 415, 13745, 13], "temperature": 0.0, "avg_logprob": -0.11698298270885761, "compression_ratio": 1.4573643410852712, "no_speech_prob": 3.500213324514334e-06}, {"id": 118, "seek": 53600, "start": 542.0, "end": 545.0, "text": " So,", "tokens": [407, 11], "temperature": 0.0, "avg_logprob": -0.11698298270885761, "compression_ratio": 1.4573643410852712, "no_speech_prob": 3.500213324514334e-06}, {"id": 119, "seek": 53600, "start": 545.0, "end": 551.0, "text": " this is like the percent that he remembered and this would be like the day.", "tokens": [341, 307, 411, 264, 3043, 300, 415, 13745, 293, 341, 576, 312, 411, 264, 786, 13], "temperature": 0.0, "avg_logprob": -0.11698298270885761, "compression_ratio": 1.4573643410852712, "no_speech_prob": 3.500213324514334e-06}, {"id": 120, "seek": 53600, "start": 551.0, "end": 558.0, "text": " And, yeah, it like followed this kind of", "tokens": [400, 11, 1338, 11, 309, 411, 6263, 341, 733, 295], "temperature": 0.0, "avg_logprob": -0.11698298270885761, "compression_ratio": 1.4573643410852712, "no_speech_prob": 3.500213324514334e-06}, {"id": 121, "seek": 55800, "start": 558.0, "end": 567.0, "text": " shape right where she's trying to redraw that", "tokens": [3909, 558, 689, 750, 311, 1382, 281, 2182, 5131, 300], "temperature": 0.0, "avg_logprob": -0.2203329881032308, "compression_ratio": 1.3734177215189873, "no_speech_prob": 8.012365469767246e-06}, {"id": 122, "seek": 55800, "start": 567.0, "end": 573.0, "text": " this kind of shape. So like he discovered he forgot a lot of them really quickly.", "tokens": [341, 733, 295, 3909, 13, 407, 411, 415, 6941, 415, 5298, 257, 688, 295, 552, 534, 2661, 13], "temperature": 0.0, "avg_logprob": -0.2203329881032308, "compression_ratio": 1.3734177215189873, "no_speech_prob": 8.012365469767246e-06}, {"id": 123, "seek": 55800, "start": 573.0, "end": 576.0, "text": " But some of them stuck around.", "tokens": [583, 512, 295, 552, 5541, 926, 13], "temperature": 0.0, "avg_logprob": -0.2203329881032308, "compression_ratio": 1.3734177215189873, "no_speech_prob": 8.012365469767246e-06}, {"id": 124, "seek": 55800, "start": 576.0, "end": 583.0, "text": " And I mean it doesn't asymptote of course it goes to zero.", "tokens": [400, 286, 914, 309, 1177, 380, 35114, 1370, 295, 1164, 309, 1709, 281, 4018, 13], "temperature": 0.0, "avg_logprob": -0.2203329881032308, "compression_ratio": 1.3734177215189873, "no_speech_prob": 8.012365469767246e-06}, {"id": 125, "seek": 58300, "start": 583.0, "end": 592.0, "text": " This is actually already interesting in itself, because like a lot of people, particularly adults, I find,", "tokens": [639, 307, 767, 1217, 1880, 294, 2564, 11, 570, 411, 257, 688, 295, 561, 11, 4098, 8865, 11, 286, 915, 11], "temperature": 0.0, "avg_logprob": -0.10848537651268211, "compression_ratio": 1.5245098039215685, "no_speech_prob": 1.8056751287076622e-05}, {"id": 126, "seek": 58300, "start": 592.0, "end": 599.0, "text": " feel disheartened and frustrated when they forget things and they think it shows that they have a bad memory.", "tokens": [841, 717, 12864, 5320, 293, 15751, 562, 436, 2870, 721, 293, 436, 519, 309, 3110, 300, 436, 362, 257, 1578, 4675, 13], "temperature": 0.0, "avg_logprob": -0.10848537651268211, "compression_ratio": 1.5245098039215685, "no_speech_prob": 1.8056751287076622e-05}, {"id": 127, "seek": 58300, "start": 599.0, "end": 606.0, "text": " But that's not true. Actually, all humans rapidly forget new things that we learn.", "tokens": [583, 300, 311, 406, 2074, 13, 5135, 11, 439, 6255, 12910, 2870, 777, 721, 300, 321, 1466, 13], "temperature": 0.0, "avg_logprob": -0.10848537651268211, "compression_ratio": 1.5245098039215685, "no_speech_prob": 1.8056751287076622e-05}, {"id": 128, "seek": 58300, "start": 606.0, "end": 609.0, "text": " And so then", "tokens": [400, 370, 550], "temperature": 0.0, "avg_logprob": -0.10848537651268211, "compression_ratio": 1.5245098039215685, "no_speech_prob": 1.8056751287076622e-05}, {"id": 129, "seek": 60900, "start": 609.0, "end": 620.0, "text": " what he tried doing was saying well what would happen if I, if he restudies his", "tokens": [437, 415, 3031, 884, 390, 1566, 731, 437, 576, 1051, 498, 286, 11, 498, 415, 1472, 532, 530, 702], "temperature": 0.0, "avg_logprob": -0.18615339804386746, "compression_ratio": 1.4883720930232558, "no_speech_prob": 1.3629851309815422e-05}, {"id": 130, "seek": 60900, "start": 620.0, "end": 624.0, "text": " random sets of letters one day later.", "tokens": [4974, 6352, 295, 7825, 472, 786, 1780, 13], "temperature": 0.0, "avg_logprob": -0.18615339804386746, "compression_ratio": 1.4883720930232558, "no_speech_prob": 1.3629851309815422e-05}, {"id": 131, "seek": 60900, "start": 624.0, "end": 632.0, "text": " And to restudy them he basically gave himself a quiz to try to remember them. Right. And then if you didn't know the answer, you check it.", "tokens": [400, 281, 1472, 532, 88, 552, 415, 1936, 2729, 3647, 257, 15450, 281, 853, 281, 1604, 552, 13, 1779, 13, 400, 550, 498, 291, 994, 380, 458, 264, 1867, 11, 291, 1520, 309, 13], "temperature": 0.0, "avg_logprob": -0.18615339804386746, "compression_ratio": 1.4883720930232558, "no_speech_prob": 1.3629851309815422e-05}, {"id": 132, "seek": 63200, "start": 632.0, "end": 640.0, "text": " And so of course immediately after that,", "tokens": [400, 370, 295, 1164, 4258, 934, 300, 11], "temperature": 0.0, "avg_logprob": -0.18574036916097006, "compression_ratio": 1.5208333333333333, "no_speech_prob": 9.664912795415148e-06}, {"id": 133, "seek": 63200, "start": 640.0, "end": 648.0, "text": " he was back to 100% well you know 100% or whatever his kind of base recall level is. And of course after that he started forgetting it.", "tokens": [415, 390, 646, 281, 2319, 4, 731, 291, 458, 2319, 4, 420, 2035, 702, 733, 295, 3096, 9901, 1496, 307, 13, 400, 295, 1164, 934, 300, 415, 1409, 25428, 309, 13], "temperature": 0.0, "avg_logprob": -0.18574036916097006, "compression_ratio": 1.5208333333333333, "no_speech_prob": 9.664912795415148e-06}, {"id": 134, "seek": 63200, "start": 648.0, "end": 652.0, "text": " But interestingly he didn't forget it as quickly.", "tokens": [583, 25873, 415, 994, 380, 2870, 309, 382, 2661, 13], "temperature": 0.0, "avg_logprob": -0.18574036916097006, "compression_ratio": 1.5208333333333333, "no_speech_prob": 9.664912795415148e-06}, {"id": 135, "seek": 63200, "start": 652.0, "end": 657.0, "text": " And then if a couple of days later, he gave himself a quiz again,", "tokens": [400, 550, 498, 257, 1916, 295, 1708, 1780, 11, 415, 2729, 3647, 257, 15450, 797, 11], "temperature": 0.0, "avg_logprob": -0.18574036916097006, "compression_ratio": 1.5208333333333333, "no_speech_prob": 9.664912795415148e-06}, {"id": 136, "seek": 65700, "start": 657.0, "end": 663.0, "text": " and then followed to see how long he remembered things for. It was flatter still.", "tokens": [293, 550, 6263, 281, 536, 577, 938, 415, 13745, 721, 337, 13, 467, 390, 41247, 920, 13], "temperature": 0.0, "avg_logprob": -0.13389068179660374, "compression_ratio": 1.5714285714285714, "no_speech_prob": 2.2467169401352294e-05}, {"id": 137, "seek": 65700, "start": 663.0, "end": 669.0, "text": " And if he did it again a week or two later,", "tokens": [400, 498, 415, 630, 309, 797, 257, 1243, 420, 732, 1780, 11], "temperature": 0.0, "avg_logprob": -0.13389068179660374, "compression_ratio": 1.5714285714285714, "no_speech_prob": 2.2467169401352294e-05}, {"id": 138, "seek": 65700, "start": 669.0, "end": 674.0, "text": " it really hardly started, you know, found that it's hardly forgetting things at all.", "tokens": [309, 534, 13572, 1409, 11, 291, 458, 11, 1352, 300, 309, 311, 13572, 25428, 721, 412, 439, 13], "temperature": 0.0, "avg_logprob": -0.13389068179660374, "compression_ratio": 1.5714285714285714, "no_speech_prob": 2.2467169401352294e-05}, {"id": 139, "seek": 65700, "start": 674.0, "end": 679.0, "text": " And so this is the key to remembering things.", "tokens": [400, 370, 341, 307, 264, 2141, 281, 20719, 721, 13], "temperature": 0.0, "avg_logprob": -0.13389068179660374, "compression_ratio": 1.5714285714285714, "no_speech_prob": 2.2467169401352294e-05}, {"id": 140, "seek": 65700, "start": 679.0, "end": 683.0, "text": " Basically forever.", "tokens": [8537, 5680, 13], "temperature": 0.0, "avg_logprob": -0.13389068179660374, "compression_ratio": 1.5714285714285714, "no_speech_prob": 2.2467169401352294e-05}, {"id": 141, "seek": 68300, "start": 683.0, "end": 690.0, "text": " And there's a absolutely amazing website that nobody knows about", "tokens": [400, 456, 311, 257, 3122, 2243, 3144, 300, 5079, 3255, 466], "temperature": 0.0, "avg_logprob": -0.15497796102003616, "compression_ratio": 1.0, "no_speech_prob": 9.024846804095432e-05}, {"id": 142, "seek": 68300, "start": 690.0, "end": 708.0, "text": " called SuperMemo.", "tokens": [1219, 4548, 44, 36221, 13], "temperature": 0.0, "avg_logprob": -0.15497796102003616, "compression_ratio": 1.0, "no_speech_prob": 9.024846804095432e-05}, {"id": 143, "seek": 70800, "start": 708.0, "end": 715.0, "text": " And so SuperMemo is software, but it's also this,", "tokens": [400, 370, 4548, 44, 36221, 307, 4722, 11, 457, 309, 311, 611, 341, 11], "temperature": 0.0, "avg_logprob": -0.10170467694600423, "compression_ratio": 1.4567901234567902, "no_speech_prob": 3.26847039104905e-05}, {"id": 144, "seek": 70800, "start": 715.0, "end": 723.0, "text": " there's heaps of research. Basically it's by a guy who's dedicated his whole life to", "tokens": [456, 311, 415, 2382, 295, 2132, 13, 8537, 309, 311, 538, 257, 2146, 567, 311, 8374, 702, 1379, 993, 281], "temperature": 0.0, "avg_logprob": -0.10170467694600423, "compression_ratio": 1.4567901234567902, "no_speech_prob": 3.26847039104905e-05}, {"id": 145, "seek": 70800, "start": 723.0, "end": 737.0, "text": " using this technique to remember as many things as possible and to basically organize his whole life.", "tokens": [1228, 341, 6532, 281, 1604, 382, 867, 721, 382, 1944, 293, 281, 1936, 13859, 702, 1379, 993, 13], "temperature": 0.0, "avg_logprob": -0.10170467694600423, "compression_ratio": 1.4567901234567902, "no_speech_prob": 3.26847039104905e-05}, {"id": 146, "seek": 73700, "start": 737.0, "end": 745.0, "text": " And got all these rules of knowledge formulation. So the guy's name is Peter Wozniak and he's absolutely amazing.", "tokens": [400, 658, 439, 613, 4474, 295, 3601, 37642, 13, 407, 264, 2146, 311, 1315, 307, 6508, 6622, 89, 3722, 514, 293, 415, 311, 3122, 2243, 13], "temperature": 0.0, "avg_logprob": -0.13566934245906465, "compression_ratio": 1.4334975369458127, "no_speech_prob": 3.269115404691547e-05}, {"id": 147, "seek": 73700, "start": 745.0, "end": 749.0, "text": " So he actually rediscovered this stuff from Ebbinghaus independently,", "tokens": [407, 415, 767, 2182, 40080, 292, 341, 1507, 490, 20418, 4324, 23321, 21761, 11], "temperature": 0.0, "avg_logprob": -0.13566934245906465, "compression_ratio": 1.4334975369458127, "no_speech_prob": 3.269115404691547e-05}, {"id": 148, "seek": 73700, "start": 749.0, "end": 758.0, "text": " but that has greatly developed it over the last few decades.", "tokens": [457, 300, 575, 14147, 4743, 309, 670, 264, 1036, 1326, 7878, 13], "temperature": 0.0, "avg_logprob": -0.13566934245906465, "compression_ratio": 1.4334975369458127, "no_speech_prob": 3.269115404691547e-05}, {"id": 149, "seek": 73700, "start": 758.0, "end": 761.0, "text": " So there's this piece of software called Anki,", "tokens": [407, 456, 311, 341, 2522, 295, 4722, 1219, 1107, 2984, 11], "temperature": 0.0, "avg_logprob": -0.13566934245906465, "compression_ratio": 1.4334975369458127, "no_speech_prob": 3.269115404691547e-05}, {"id": 150, "seek": 76100, "start": 761.0, "end": 768.0, "text": " which you can just say, OK, I want to learn, I want to remember something. So you give yourself a quiz question.", "tokens": [597, 291, 393, 445, 584, 11, 2264, 11, 286, 528, 281, 1466, 11, 286, 528, 281, 1604, 746, 13, 407, 291, 976, 1803, 257, 15450, 1168, 13], "temperature": 0.0, "avg_logprob": -0.11216483187319627, "compression_ratio": 1.5031446540880504, "no_speech_prob": 1.7499343812232837e-05}, {"id": 151, "seek": 76100, "start": 768.0, "end": 778.0, "text": " Right. So, for example, if you want to remember what monadic plus is on a complex number,", "tokens": [1779, 13, 407, 11, 337, 1365, 11, 498, 291, 528, 281, 1604, 437, 1108, 43341, 1804, 307, 322, 257, 3997, 1230, 11], "temperature": 0.0, "avg_logprob": -0.11216483187319627, "compression_ratio": 1.5031446540880504, "no_speech_prob": 1.7499343812232837e-05}, {"id": 152, "seek": 76100, "start": 778.0, "end": 786.0, "text": " you can like, you know, type in some", "tokens": [291, 393, 411, 11, 291, 458, 11, 2010, 294, 512], "temperature": 0.0, "avg_logprob": -0.11216483187319627, "compression_ratio": 1.5031446540880504, "no_speech_prob": 1.7499343812232837e-05}, {"id": 153, "seek": 78600, "start": 786.0, "end": 794.0, "text": " something like that. And obviously I should use a proper negative, but I'm not using an APL keyboard here. And then you put in the correct answer.", "tokens": [746, 411, 300, 13, 400, 2745, 286, 820, 764, 257, 2296, 3671, 11, 457, 286, 478, 406, 1228, 364, 5372, 43, 10186, 510, 13, 400, 550, 291, 829, 294, 264, 3006, 1867, 13], "temperature": 0.0, "avg_logprob": -0.18716885771932482, "compression_ratio": 1.5435897435897437, "no_speech_prob": 1.2408757356752176e-05}, {"id": 154, "seek": 78600, "start": 794.0, "end": 798.0, "text": " Here or whatever. And so then you'd say add and it creates a question.", "tokens": [1692, 420, 2035, 13, 400, 370, 550, 291, 1116, 584, 909, 293, 309, 7829, 257, 1168, 13], "temperature": 0.0, "avg_logprob": -0.18716885771932482, "compression_ratio": 1.5435897435897437, "no_speech_prob": 1.2408757356752176e-05}, {"id": 155, "seek": 78600, "start": 798.0, "end": 807.0, "text": " And so what then happens is next time you open Anki and you say, and you say study,", "tokens": [400, 370, 437, 550, 2314, 307, 958, 565, 291, 1269, 1107, 2984, 293, 291, 584, 11, 293, 291, 584, 2979, 11], "temperature": 0.0, "avg_logprob": -0.18716885771932482, "compression_ratio": 1.5435897435897437, "no_speech_prob": 1.2408757356752176e-05}, {"id": 156, "seek": 80700, "start": 807.0, "end": 817.0, "text": " and it will start showing you your questions. And if you get it right, you can say it was, you know,", "tokens": [293, 309, 486, 722, 4099, 291, 428, 1651, 13, 400, 498, 291, 483, 309, 558, 11, 291, 393, 584, 309, 390, 11, 291, 458, 11], "temperature": 0.0, "avg_logprob": -0.10885452868333503, "compression_ratio": 1.82, "no_speech_prob": 8.26742598292185e-06}, {"id": 157, "seek": 80700, "start": 817.0, "end": 822.0, "text": " basically either hit one, two, three or four to say I got it wrong or I got it right, but it was hard.", "tokens": [1936, 2139, 2045, 472, 11, 732, 11, 1045, 420, 1451, 281, 584, 286, 658, 309, 2085, 420, 286, 658, 309, 558, 11, 457, 309, 390, 1152, 13], "temperature": 0.0, "avg_logprob": -0.10885452868333503, "compression_ratio": 1.82, "no_speech_prob": 8.26742598292185e-06}, {"id": 158, "seek": 80700, "start": 822.0, "end": 825.0, "text": " I got it right. It was OK. I got it right. It was easy.", "tokens": [286, 658, 309, 558, 13, 467, 390, 2264, 13, 286, 658, 309, 558, 13, 467, 390, 1858, 13], "temperature": 0.0, "avg_logprob": -0.10885452868333503, "compression_ratio": 1.82, "no_speech_prob": 8.26742598292185e-06}, {"id": 159, "seek": 80700, "start": 825.0, "end": 831.0, "text": " And you can see here, if I say I got it right and it was easy, it's going to be about 10 minutes before it shows it to me again.", "tokens": [400, 291, 393, 536, 510, 11, 498, 286, 584, 286, 658, 309, 558, 293, 309, 390, 1858, 11, 309, 311, 516, 281, 312, 466, 1266, 2077, 949, 309, 3110, 309, 281, 385, 797, 13], "temperature": 0.0, "avg_logprob": -0.10885452868333503, "compression_ratio": 1.82, "no_speech_prob": 8.26742598292185e-06}, {"id": 160, "seek": 80700, "start": 831.0, "end": 835.0, "text": " That's because this is new. Right. And then the next time I do it,", "tokens": [663, 311, 570, 341, 307, 777, 13, 1779, 13, 400, 550, 264, 958, 565, 286, 360, 309, 11], "temperature": 0.0, "avg_logprob": -0.10885452868333503, "compression_ratio": 1.82, "no_speech_prob": 8.26742598292185e-06}, {"id": 161, "seek": 83500, "start": 835.0, "end": 841.0, "text": " if I get it right again, it'll give it'll be a day. And then if I get it right again, it'll be like four days.", "tokens": [498, 286, 483, 309, 558, 797, 11, 309, 603, 976, 309, 603, 312, 257, 786, 13, 400, 550, 498, 286, 483, 309, 558, 797, 11, 309, 603, 312, 411, 1451, 1708, 13], "temperature": 0.0, "avg_logprob": -0.07000958493777684, "compression_ratio": 1.9423076923076923, "no_speech_prob": 5.862551461177645e-06}, {"id": 162, "seek": 83500, "start": 841.0, "end": 844.0, "text": " If I get it right again, it'll be like two weeks.", "tokens": [759, 286, 483, 309, 558, 797, 11, 309, 603, 312, 411, 732, 3259, 13], "temperature": 0.0, "avg_logprob": -0.07000958493777684, "compression_ratio": 1.9423076923076923, "no_speech_prob": 5.862551461177645e-06}, {"id": 163, "seek": 83500, "start": 844.0, "end": 850.0, "text": " But once you get it right, like five or six times in a row, it'll be a month or two before you see it again,", "tokens": [583, 1564, 291, 483, 309, 558, 11, 411, 1732, 420, 2309, 1413, 294, 257, 5386, 11, 309, 603, 312, 257, 1618, 420, 732, 949, 291, 536, 309, 797, 11], "temperature": 0.0, "avg_logprob": -0.07000958493777684, "compression_ratio": 1.9423076923076923, "no_speech_prob": 5.862551461177645e-06}, {"id": 164, "seek": 83500, "start": 850.0, "end": 858.0, "text": " because it's because the thing about the forgetting curve is that the better you know something, the less often you have to revise it.", "tokens": [570, 309, 311, 570, 264, 551, 466, 264, 25428, 7605, 307, 300, 264, 1101, 291, 458, 746, 11, 264, 1570, 2049, 291, 362, 281, 44252, 309, 13], "temperature": 0.0, "avg_logprob": -0.07000958493777684, "compression_ratio": 1.9423076923076923, "no_speech_prob": 5.862551461177645e-06}, {"id": 165, "seek": 85800, "start": 858.0, "end": 866.0, "text": " So this deck is actually my daughter's and her friend. So Claire and Gabe's deck.", "tokens": [407, 341, 9341, 307, 767, 452, 4653, 311, 293, 720, 1277, 13, 407, 22605, 293, 39524, 311, 9341, 13], "temperature": 0.0, "avg_logprob": -0.09627706278925356, "compression_ratio": 1.7075098814229248, "no_speech_prob": 3.5557097817218164e-06}, {"id": 166, "seek": 85800, "start": 866.0, "end": 869.0, "text": " I've just got a little bit of it here. And so you can browse it.", "tokens": [286, 600, 445, 658, 257, 707, 857, 295, 309, 510, 13, 400, 370, 291, 393, 31442, 309, 13], "temperature": 0.0, "avg_logprob": -0.09627706278925356, "compression_ratio": 1.7075098814229248, "no_speech_prob": 3.5557097817218164e-06}, {"id": 167, "seek": 85800, "start": 869.0, "end": 876.0, "text": " You can see like, you know, we've got things like fractions and we've got things like the successor function.", "tokens": [509, 393, 536, 411, 11, 291, 458, 11, 321, 600, 658, 721, 411, 36058, 293, 321, 600, 658, 721, 411, 264, 31864, 2445, 13], "temperature": 0.0, "avg_logprob": -0.09627706278925356, "compression_ratio": 1.7075098814229248, "no_speech_prob": 3.5557097817218164e-06}, {"id": 168, "seek": 85800, "start": 876.0, "end": 882.0, "text": " And we've got things like bind and out of product because they're doing both math and APL at the same time.", "tokens": [400, 321, 600, 658, 721, 411, 14786, 293, 484, 295, 1674, 570, 436, 434, 884, 1293, 5221, 293, 5372, 43, 412, 264, 912, 565, 13], "temperature": 0.0, "avg_logprob": -0.09627706278925356, "compression_ratio": 1.7075098814229248, "no_speech_prob": 3.5557097817218164e-06}, {"id": 169, "seek": 85800, "start": 882.0, "end": 887.0, "text": " I guess a bit like us, but they haven't done lots of things before.", "tokens": [286, 2041, 257, 857, 411, 505, 11, 457, 436, 2378, 380, 1096, 3195, 295, 721, 949, 13], "temperature": 0.0, "avg_logprob": -0.09627706278925356, "compression_ratio": 1.7075098814229248, "no_speech_prob": 3.5557097817218164e-06}, {"id": 170, "seek": 88700, "start": 887.0, "end": 895.0, "text": " So, yeah, so I've got something here saying, oh, what happens if you do divide, dot, divide, call that F and you call F of that.", "tokens": [407, 11, 1338, 11, 370, 286, 600, 658, 746, 510, 1566, 11, 1954, 11, 437, 2314, 498, 291, 360, 9845, 11, 5893, 11, 9845, 11, 818, 300, 479, 293, 291, 818, 479, 295, 300, 13], "temperature": 0.0, "avg_logprob": -0.17036389791837303, "compression_ratio": 1.6282051282051282, "no_speech_prob": 2.586543996585533e-05}, {"id": 171, "seek": 88700, "start": 895.0, "end": 901.0, "text": " And that's where we learn that basically you actually get back the same thing because that means reciprocal or reciprocal.", "tokens": [400, 300, 311, 689, 321, 1466, 300, 1936, 291, 767, 483, 646, 264, 912, 551, 570, 300, 1355, 46948, 420, 46948, 13], "temperature": 0.0, "avg_logprob": -0.17036389791837303, "compression_ratio": 1.6282051282051282, "no_speech_prob": 2.586543996585533e-05}, {"id": 172, "seek": 88700, "start": 901.0, "end": 912.0, "text": " So I try to cut up with questions that force them to like both remember the technique, but also, you know, utilize some thinking.", "tokens": [407, 286, 853, 281, 1723, 493, 365, 1651, 300, 3464, 552, 281, 411, 1293, 1604, 264, 6532, 11, 457, 611, 11, 291, 458, 11, 16117, 512, 1953, 13], "temperature": 0.0, "avg_logprob": -0.17036389791837303, "compression_ratio": 1.6282051282051282, "no_speech_prob": 2.586543996585533e-05}, {"id": 173, "seek": 91200, "start": 912.0, "end": 920.0, "text": " So, yeah, so Gabe and Claire, if they remember or if their parents managed to convince them, they try to do their Anki every day.", "tokens": [407, 11, 1338, 11, 370, 39524, 293, 22605, 11, 498, 436, 1604, 420, 498, 641, 3152, 6453, 281, 13447, 552, 11, 436, 853, 281, 360, 641, 1107, 2984, 633, 786, 13], "temperature": 0.0, "avg_logprob": -0.12199762771869528, "compression_ratio": 1.718045112781955, "no_speech_prob": 1.078287277778145e-05}, {"id": 174, "seek": 91200, "start": 920.0, "end": 926.0, "text": " And at first it was like a bit of a struggle to get them to do it.", "tokens": [400, 412, 700, 309, 390, 411, 257, 857, 295, 257, 7799, 281, 483, 552, 281, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.12199762771869528, "compression_ratio": 1.718045112781955, "no_speech_prob": 1.078287277778145e-05}, {"id": 175, "seek": 91200, "start": 926.0, "end": 939.0, "text": " But now that like we've been doing it for a month or two, probably more like two, there are things they learned a couple of months ago now and that gets popping up on Anki and they press good and they can see that they won't see it again for like three months.", "tokens": [583, 586, 300, 411, 321, 600, 668, 884, 309, 337, 257, 1618, 420, 732, 11, 1391, 544, 411, 732, 11, 456, 366, 721, 436, 3264, 257, 1916, 295, 2493, 2057, 586, 293, 300, 2170, 18374, 493, 322, 1107, 2984, 293, 436, 1886, 665, 293, 436, 393, 536, 300, 436, 1582, 380, 536, 309, 797, 337, 411, 1045, 2493, 13], "temperature": 0.0, "avg_logprob": -0.12199762771869528, "compression_ratio": 1.718045112781955, "no_speech_prob": 1.078287277778145e-05}, {"id": 176, "seek": 93900, "start": 939.0, "end": 944.0, "text": " And they're like, oh, this is awesome, you know, so it's gradually getting easier and easier.", "tokens": [400, 436, 434, 411, 11, 1954, 11, 341, 307, 3476, 11, 291, 458, 11, 370, 309, 311, 13145, 1242, 3571, 293, 3571, 13], "temperature": 0.0, "avg_logprob": -0.09890182813008626, "compression_ratio": 1.5157894736842106, "no_speech_prob": 8.3974437075085e-06}, {"id": 177, "seek": 93900, "start": 944.0, "end": 950.0, "text": " Anyway, so I just wanted to mention this because given we're all learning something new.", "tokens": [5684, 11, 370, 286, 445, 1415, 281, 2152, 341, 570, 2212, 321, 434, 439, 2539, 746, 777, 13], "temperature": 0.0, "avg_logprob": -0.09890182813008626, "compression_ratio": 1.5157894736842106, "no_speech_prob": 8.3974437075085e-06}, {"id": 178, "seek": 93900, "start": 950.0, "end": 959.0, "text": " This is a good way to remember, you know, the alphabet of glyphs.", "tokens": [639, 307, 257, 665, 636, 281, 1604, 11, 291, 458, 11, 264, 23339, 295, 22633, 950, 82, 13], "temperature": 0.0, "avg_logprob": -0.09890182813008626, "compression_ratio": 1.5157894736842106, "no_speech_prob": 8.3974437075085e-06}, {"id": 179, "seek": 93900, "start": 959.0, "end": 964.0, "text": " And so I actually use this for Chinese.", "tokens": [400, 370, 286, 767, 764, 341, 337, 4649, 13], "temperature": 0.0, "avg_logprob": -0.09890182813008626, "compression_ratio": 1.5157894736842106, "no_speech_prob": 8.3974437075085e-06}, {"id": 180, "seek": 96400, "start": 964.0, "end": 969.0, "text": " 10 years ago or something.", "tokens": [1266, 924, 2057, 420, 746, 13], "temperature": 0.0, "avg_logprob": -0.10477201622652721, "compression_ratio": 1.688118811881188, "no_speech_prob": 1.777435863914434e-05}, {"id": 181, "seek": 96400, "start": 969.0, "end": 984.0, "text": " Yeah, and the reason it's impossible to forget something is if you say I got this wrong, it resets back the forgetting curve back to showing you again tomorrow and then three days and then five days or whatever, you know, so.", "tokens": [865, 11, 293, 264, 1778, 309, 311, 6243, 281, 2870, 746, 307, 498, 291, 584, 286, 658, 341, 2085, 11, 309, 725, 1385, 646, 264, 25428, 7605, 646, 281, 4099, 291, 797, 4153, 293, 550, 1045, 1708, 293, 550, 1732, 1708, 420, 2035, 11, 291, 458, 11, 370, 13], "temperature": 0.0, "avg_logprob": -0.10477201622652721, "compression_ratio": 1.688118811881188, "no_speech_prob": 1.777435863914434e-05}, {"id": 182, "seek": 96400, "start": 984.0, "end": 990.0, "text": " So as long as you do Anki regularly it's impossible to forget the things that are there.", "tokens": [407, 382, 938, 382, 291, 360, 1107, 2984, 11672, 309, 311, 6243, 281, 2870, 264, 721, 300, 366, 456, 13], "temperature": 0.0, "avg_logprob": -0.10477201622652721, "compression_ratio": 1.688118811881188, "no_speech_prob": 1.777435863914434e-05}, {"id": 183, "seek": 99000, "start": 990.0, "end": 995.0, "text": " It does mean that's important to only put in things there that you really do want to remember forever.", "tokens": [467, 775, 914, 300, 311, 1021, 281, 787, 829, 294, 721, 456, 300, 291, 534, 360, 528, 281, 1604, 5680, 13], "temperature": 0.0, "avg_logprob": -0.1387094497680664, "compression_ratio": 1.5935828877005347, "no_speech_prob": 2.1439969714265317e-05}, {"id": 184, "seek": 99000, "start": 995.0, "end": 1012.0, "text": " Because, you know, otherwise, you're going to be spending all this time quizzing yourself and stuff that you actually don't care about, and you can always go back and delete things but, you know.", "tokens": [1436, 11, 291, 458, 11, 5911, 11, 291, 434, 516, 281, 312, 6434, 439, 341, 565, 43425, 278, 1803, 293, 1507, 300, 291, 767, 500, 380, 1127, 466, 11, 293, 291, 393, 1009, 352, 646, 293, 12097, 721, 457, 11, 291, 458, 13], "temperature": 0.0, "avg_logprob": -0.1387094497680664, "compression_ratio": 1.5935828877005347, "no_speech_prob": 2.1439969714265317e-05}, {"id": 185, "seek": 101200, "start": 1012.0, "end": 1022.0, "text": " Tell me things vocally rather than putting in the chat. Okay, so in the chat to niche conventions that redact has this nice thing called AI quizzes, which is really cool and Mr.", "tokens": [5115, 385, 721, 2329, 379, 2831, 813, 3372, 294, 264, 5081, 13, 1033, 11, 370, 294, 264, 5081, 281, 19956, 33520, 300, 2182, 578, 575, 341, 1481, 551, 1219, 7318, 48955, 11, 597, 307, 534, 1627, 293, 2221, 13], "temperature": 0.0, "avg_logprob": -0.2838281339353269, "compression_ratio": 1.6264591439688716, "no_speech_prob": 0.00012921819870825857}, {"id": 186, "seek": 101200, "start": 1022.0, "end": 1030.0, "text": " Dec on the call, how did you, if he is, how did you get this space repetition going is there a Python module for this.", "tokens": [12427, 322, 264, 818, 11, 577, 630, 291, 11, 498, 415, 307, 11, 577, 630, 291, 483, 341, 1901, 30432, 516, 307, 456, 257, 15329, 10088, 337, 341, 13], "temperature": 0.0, "avg_logprob": -0.2838281339353269, "compression_ratio": 1.6264591439688716, "no_speech_prob": 0.00012921819870825857}, {"id": 187, "seek": 101200, "start": 1030.0, "end": 1035.0, "text": " I implemented it in Ruby on, I think, might be on the super memo website.", "tokens": [286, 12270, 309, 294, 19907, 322, 11, 286, 519, 11, 1062, 312, 322, 264, 1687, 35900, 3144, 13], "temperature": 0.0, "avg_logprob": -0.2838281339353269, "compression_ratio": 1.6264591439688716, "no_speech_prob": 0.00012921819870825857}, {"id": 188, "seek": 101200, "start": 1035.0, "end": 1036.0, "text": " I'm not sure.", "tokens": [286, 478, 406, 988, 13], "temperature": 0.0, "avg_logprob": -0.2838281339353269, "compression_ratio": 1.6264591439688716, "no_speech_prob": 0.00012921819870825857}, {"id": 189, "seek": 101200, "start": 1036.0, "end": 1039.0, "text": " Yeah, but the algorithm is there.", "tokens": [865, 11, 457, 264, 9284, 307, 456, 13], "temperature": 0.0, "avg_logprob": -0.2838281339353269, "compression_ratio": 1.6264591439688716, "no_speech_prob": 0.00012921819870825857}, {"id": 190, "seek": 103900, "start": 1039.0, "end": 1047.0, "text": " So, lots of algorithms right like super memo algorithm version whatever SM 17.", "tokens": [407, 11, 3195, 295, 14642, 558, 411, 1687, 35900, 9284, 3037, 2035, 13115, 3282, 13], "temperature": 0.0, "avg_logprob": -0.1976329382363852, "compression_ratio": 1.603960396039604, "no_speech_prob": 3.480362647678703e-05}, {"id": 191, "seek": 103900, "start": 1047.0, "end": 1054.0, "text": " So, there is, yes, there is, I think, some commercial product. From what I remember.", "tokens": [407, 11, 456, 307, 11, 2086, 11, 456, 307, 11, 286, 519, 11, 512, 6841, 1674, 13, 3358, 437, 286, 1604, 13], "temperature": 0.0, "avg_logprob": -0.1976329382363852, "compression_ratio": 1.603960396039604, "no_speech_prob": 3.480362647678703e-05}, {"id": 192, "seek": 103900, "start": 1054.0, "end": 1059.0, "text": " And they use some version of the algorithm there that is not published.", "tokens": [400, 436, 764, 512, 3037, 295, 264, 9284, 456, 300, 307, 406, 6572, 13], "temperature": 0.0, "avg_logprob": -0.1976329382363852, "compression_ratio": 1.603960396039604, "no_speech_prob": 3.480362647678703e-05}, {"id": 193, "seek": 103900, "start": 1059.0, "end": 1068.0, "text": " But the earlier version had published and I made some tiny modifications to simplify it.", "tokens": [583, 264, 3071, 3037, 632, 6572, 293, 286, 1027, 512, 5870, 26881, 281, 20460, 309, 13], "temperature": 0.0, "avg_logprob": -0.1976329382363852, "compression_ratio": 1.603960396039604, "no_speech_prob": 3.480362647678703e-05}, {"id": 194, "seek": 106800, "start": 1068.0, "end": 1079.0, "text": " I see so he put it in Jeremy can you hear me. Yes, I can. Okay, okay. So, can you click on the first link that I sent on the chat. Absolutely.", "tokens": [286, 536, 370, 415, 829, 309, 294, 17809, 393, 291, 1568, 385, 13, 1079, 11, 286, 393, 13, 1033, 11, 1392, 13, 407, 11, 393, 291, 2052, 322, 264, 700, 2113, 300, 286, 2279, 322, 264, 5081, 13, 7021, 13], "temperature": 0.0, "avg_logprob": -0.16559730966885886, "compression_ratio": 1.5095238095238095, "no_speech_prob": 2.3541988412034698e-05}, {"id": 195, "seek": 106800, "start": 1079.0, "end": 1087.0, "text": " That is the best thing I have yet found on the topic of space repetition.", "tokens": [663, 307, 264, 1151, 551, 286, 362, 1939, 1352, 322, 264, 4829, 295, 1901, 30432, 13], "temperature": 0.0, "avg_logprob": -0.16559730966885886, "compression_ratio": 1.5095238095238095, "no_speech_prob": 2.3541988412034698e-05}, {"id": 196, "seek": 106800, "start": 1087.0, "end": 1090.0, "text": " Great. Thank you.", "tokens": [3769, 13, 1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.16559730966885886, "compression_ratio": 1.5095238095238095, "no_speech_prob": 2.3541988412034698e-05}, {"id": 197, "seek": 106800, "start": 1090.0, "end": 1093.0, "text": " And Hello by the way, ratio is it.", "tokens": [400, 2425, 538, 264, 636, 11, 8509, 307, 309, 13], "temperature": 0.0, "avg_logprob": -0.16559730966885886, "compression_ratio": 1.5095238095238095, "no_speech_prob": 2.3541988412034698e-05}, {"id": 198, "seek": 106800, "start": 1093.0, "end": 1097.0, "text": " Yeah, it's nice to see you. Thanks for joining.", "tokens": [865, 11, 309, 311, 1481, 281, 536, 291, 13, 2561, 337, 5549, 13], "temperature": 0.0, "avg_logprob": -0.16559730966885886, "compression_ratio": 1.5095238095238095, "no_speech_prob": 2.3541988412034698e-05}, {"id": 199, "seek": 109700, "start": 1097.0, "end": 1105.0, "text": " Where are you joining us from from India, it's 530 in the morning here. All right, whereabouts in India, are you.", "tokens": [2305, 366, 291, 5549, 505, 490, 490, 5282, 11, 309, 311, 1025, 3446, 294, 264, 2446, 510, 13, 1057, 558, 11, 689, 41620, 294, 5282, 11, 366, 291, 13], "temperature": 0.0, "avg_logprob": -0.2796176910400391, "compression_ratio": 1.282258064516129, "no_speech_prob": 7.249189366120845e-05}, {"id": 200, "seek": 109700, "start": 1105.0, "end": 1110.0, "text": " Polkata.", "tokens": [3635, 74, 3274, 13], "temperature": 0.0, "avg_logprob": -0.2796176910400391, "compression_ratio": 1.282258064516129, "no_speech_prob": 7.249189366120845e-05}, {"id": 201, "seek": 109700, "start": 1110.0, "end": 1116.0, "text": " And I know Koreans in India as well.", "tokens": [400, 286, 458, 32130, 294, 5282, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.2796176910400391, "compression_ratio": 1.282258064516129, "no_speech_prob": 7.249189366120845e-05}, {"id": 202, "seek": 111600, "start": 1116.0, "end": 1131.0, "text": " And India's all one time zone is that right. Yes, yes. So it's it's somewhat impractical because the time. It is almost like mid day in some parts in some parts it's barely daylight.", "tokens": [400, 5282, 311, 439, 472, 565, 6668, 307, 300, 558, 13, 1079, 11, 2086, 13, 407, 309, 311, 309, 311, 8344, 704, 1897, 804, 570, 264, 565, 13, 467, 307, 1920, 411, 2062, 786, 294, 512, 3166, 294, 512, 3166, 309, 311, 10268, 29964, 13], "temperature": 0.0, "avg_logprob": -0.15874625654781566, "compression_ratio": 1.515923566878981, "no_speech_prob": 1.917718691402115e-05}, {"id": 203, "seek": 111600, "start": 1131.0, "end": 1133.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.15874625654781566, "compression_ratio": 1.515923566878981, "no_speech_prob": 1.917718691402115e-05}, {"id": 204, "seek": 111600, "start": 1133.0, "end": 1138.0, "text": " Yeah, Australia is like, God, so many time zones.", "tokens": [865, 11, 7060, 307, 411, 11, 1265, 11, 370, 867, 565, 16025, 13], "temperature": 0.0, "avg_logprob": -0.15874625654781566, "compression_ratio": 1.515923566878981, "no_speech_prob": 1.917718691402115e-05}, {"id": 205, "seek": 113800, "start": 1138.0, "end": 1147.0, "text": " This is the first time I am actually adjusting to Australian time zone because before I adjusted to American and European. Yeah, yeah.", "tokens": [639, 307, 264, 700, 565, 286, 669, 767, 23559, 281, 13337, 565, 6668, 570, 949, 286, 19871, 281, 2665, 293, 6473, 13, 865, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.13609451055526733, "compression_ratio": 1.5204081632653061, "no_speech_prob": 4.129827721044421e-05}, {"id": 206, "seek": 113800, "start": 1147.0, "end": 1156.0, "text": " Yeah, we do that too. So like a lot of the stuff we do is in the US so we have an early start and early end to our day.", "tokens": [865, 11, 321, 360, 300, 886, 13, 407, 411, 257, 688, 295, 264, 1507, 321, 360, 307, 294, 264, 2546, 370, 321, 362, 364, 2440, 722, 293, 2440, 917, 281, 527, 786, 13], "temperature": 0.0, "avg_logprob": -0.13609451055526733, "compression_ratio": 1.5204081632653061, "no_speech_prob": 4.129827721044421e-05}, {"id": 207, "seek": 113800, "start": 1156.0, "end": 1159.0, "text": " That reason.", "tokens": [663, 1778, 13], "temperature": 0.0, "avg_logprob": -0.13609451055526733, "compression_ratio": 1.5204081632653061, "no_speech_prob": 4.129827721044421e-05}, {"id": 208, "seek": 113800, "start": 1159.0, "end": 1162.0, "text": " All right, thanks for the tip.", "tokens": [1057, 558, 11, 3231, 337, 264, 4125, 13], "temperature": 0.0, "avg_logprob": -0.13609451055526733, "compression_ratio": 1.5204081632653061, "no_speech_prob": 4.129827721044421e-05}, {"id": 209, "seek": 116200, "start": 1162.0, "end": 1174.0, "text": " Thanks. Have you seen. There's like some work by Michael Nielsen, I think, like there's a, I think like a quantum computing book, but it was like all with space repetition.", "tokens": [2561, 13, 3560, 291, 1612, 13, 821, 311, 411, 512, 589, 538, 5116, 426, 1187, 6748, 11, 286, 519, 11, 411, 456, 311, 257, 11, 286, 519, 411, 257, 13018, 15866, 1446, 11, 457, 309, 390, 411, 439, 365, 1901, 30432, 13], "temperature": 0.0, "avg_logprob": -0.18821761534386075, "compression_ratio": 1.7069767441860466, "no_speech_prob": 9.013004455482587e-05}, {"id": 210, "seek": 116200, "start": 1174.0, "end": 1179.0, "text": " Yeah, it's called quantum country. Yeah. Yeah.", "tokens": [865, 11, 309, 311, 1219, 13018, 1941, 13, 865, 13, 865, 13], "temperature": 0.0, "avg_logprob": -0.18821761534386075, "compression_ratio": 1.7069767441860466, "no_speech_prob": 9.013004455482587e-05}, {"id": 211, "seek": 116200, "start": 1179.0, "end": 1187.0, "text": " And yeah, I think he has a lot of discussion about about space repetition and things like that as well. Yeah. Yeah. Yeah, he came to a pretty late.", "tokens": [400, 1338, 11, 286, 519, 415, 575, 257, 688, 295, 5017, 466, 466, 1901, 30432, 293, 721, 411, 300, 382, 731, 13, 865, 13, 865, 13, 865, 11, 415, 1361, 281, 257, 1238, 3469, 13], "temperature": 0.0, "avg_logprob": -0.18821761534386075, "compression_ratio": 1.7069767441860466, "no_speech_prob": 9.013004455482587e-05}, {"id": 212, "seek": 118700, "start": 1187.0, "end": 1192.0, "text": " But he.", "tokens": [583, 415, 13], "temperature": 0.0, "avg_logprob": -0.2140776933129154, "compression_ratio": 1.5314285714285714, "no_speech_prob": 1.861890996224247e-05}, {"id": 213, "seek": 118700, "start": 1192.0, "end": 1196.0, "text": " One time country that will open the site.", "tokens": [1485, 565, 1941, 300, 486, 1269, 264, 3621, 13], "temperature": 0.0, "avg_logprob": -0.2140776933129154, "compression_ratio": 1.5314285714285714, "no_speech_prob": 1.861890996224247e-05}, {"id": 214, "seek": 118700, "start": 1196.0, "end": 1199.0, "text": " Just one time country.", "tokens": [1449, 472, 565, 1941, 13], "temperature": 0.0, "avg_logprob": -0.2140776933129154, "compression_ratio": 1.5314285714285714, "no_speech_prob": 1.861890996224247e-05}, {"id": 215, "seek": 118700, "start": 1199.0, "end": 1216.0, "text": " Yeah, yeah Michael came to space repetition pretty recently but he tends to get into things deeply when he gets into things which is great so yeah him and Andy so Andy used to be at Khan Academy.", "tokens": [865, 11, 1338, 5116, 1361, 281, 1901, 30432, 1238, 3938, 457, 415, 12258, 281, 483, 666, 721, 8760, 562, 415, 2170, 666, 721, 597, 307, 869, 370, 1338, 796, 293, 13285, 370, 13285, 1143, 281, 312, 412, 18136, 11735, 13], "temperature": 0.0, "avg_logprob": -0.2140776933129154, "compression_ratio": 1.5314285714285714, "no_speech_prob": 1.861890996224247e-05}, {"id": 216, "seek": 121600, "start": 1216.0, "end": 1219.0, "text": " Nice.", "tokens": [5490, 13], "temperature": 0.0, "avg_logprob": -0.29694984328578894, "compression_ratio": 1.4222222222222223, "no_speech_prob": 3.5879609640687704e-05}, {"id": 217, "seek": 121600, "start": 1219.0, "end": 1223.0, "text": " Have you been using this for a deal.", "tokens": [3560, 291, 668, 1228, 341, 337, 257, 2028, 13], "temperature": 0.0, "avg_logprob": -0.29694984328578894, "compression_ratio": 1.4222222222222223, "no_speech_prob": 3.5879609640687704e-05}, {"id": 218, "seek": 121600, "start": 1223.0, "end": 1226.0, "text": " Yeah, and he said,", "tokens": [865, 11, 293, 415, 848, 11], "temperature": 0.0, "avg_logprob": -0.29694984328578894, "compression_ratio": 1.4222222222222223, "no_speech_prob": 3.5879609640687704e-05}, {"id": 219, "seek": 121600, "start": 1226.0, "end": 1240.0, "text": " only kind of yes indirectly, because I help my daughter with her cards, sometimes. So, therefore I ended up doing it as well, which seems to be enough because I haven't forgotten any glyphs yet.", "tokens": [787, 733, 295, 2086, 37779, 11, 570, 286, 854, 452, 4653, 365, 720, 5632, 11, 2171, 13, 407, 11, 4412, 286, 4590, 493, 884, 309, 382, 731, 11, 597, 2544, 281, 312, 1547, 570, 286, 2378, 380, 11832, 604, 22633, 950, 82, 1939, 13], "temperature": 0.0, "avg_logprob": -0.29694984328578894, "compression_ratio": 1.4222222222222223, "no_speech_prob": 3.5879609640687704e-05}, {"id": 220, "seek": 124000, "start": 1240.0, "end": 1248.0, "text": " If I do find I start forgetting some glyphs I will do my own.", "tokens": [759, 286, 360, 915, 286, 722, 25428, 512, 22633, 950, 82, 286, 486, 360, 452, 1065, 13], "temperature": 0.0, "avg_logprob": -0.1655268852527325, "compression_ratio": 1.7008547008547008, "no_speech_prob": 2.8379636205499992e-05}, {"id": 221, "seek": 124000, "start": 1248.0, "end": 1259.0, "text": " I just want to point out like when I was working with Jeremy. In the beginning, I used to complain that, hey, like, I can't remember stuff like Jeremy would also tell me sometimes hey you don't remember stuff.", "tokens": [286, 445, 528, 281, 935, 484, 411, 562, 286, 390, 1364, 365, 17809, 13, 682, 264, 2863, 11, 286, 1143, 281, 11024, 300, 11, 4177, 11, 411, 11, 286, 393, 380, 1604, 1507, 411, 17809, 576, 611, 980, 385, 2171, 4177, 291, 500, 380, 1604, 1507, 13], "temperature": 0.0, "avg_logprob": -0.1655268852527325, "compression_ratio": 1.7008547008547008, "no_speech_prob": 2.8379636205499992e-05}, {"id": 222, "seek": 124000, "start": 1259.0, "end": 1267.0, "text": " And then I would also say hey I feel like I don't remember any, maybe I'm just dumb. And he actually sent me some, some books.", "tokens": [400, 550, 286, 576, 611, 584, 4177, 286, 841, 411, 286, 500, 380, 1604, 604, 11, 1310, 286, 478, 445, 10316, 13, 400, 415, 767, 2279, 385, 512, 11, 512, 3642, 13], "temperature": 0.0, "avg_logprob": -0.1655268852527325, "compression_ratio": 1.7008547008547008, "no_speech_prob": 2.8379636205499992e-05}, {"id": 223, "seek": 126700, "start": 1267.0, "end": 1276.0, "text": " There was one by Barbara Oakley, for example, who also does the Coursera course like that he's the most popular Coursera course learning how to learn.", "tokens": [821, 390, 472, 538, 19214, 19692, 3420, 11, 337, 1365, 11, 567, 611, 775, 264, 383, 5067, 1663, 1164, 411, 300, 415, 311, 264, 881, 3743, 383, 5067, 1663, 1164, 2539, 577, 281, 1466, 13], "temperature": 0.0, "avg_logprob": -0.24300629053360376, "compression_ratio": 1.5212765957446808, "no_speech_prob": 2.6271192837157287e-05}, {"id": 224, "seek": 126700, "start": 1276.0, "end": 1279.0, "text": " But it's, it's really interesting.", "tokens": [583, 309, 311, 11, 309, 311, 534, 1880, 13], "temperature": 0.0, "avg_logprob": -0.24300629053360376, "compression_ratio": 1.5212765957446808, "no_speech_prob": 2.6271192837157287e-05}, {"id": 225, "seek": 126700, "start": 1279.0, "end": 1286.0, "text": " And then you send me another one by like their guides like a professional memory.", "tokens": [400, 550, 291, 2845, 385, 1071, 472, 538, 411, 641, 17007, 411, 257, 4843, 4675, 13], "temperature": 0.0, "avg_logprob": -0.24300629053360376, "compression_ratio": 1.5212765957446808, "no_speech_prob": 2.6271192837157287e-05}, {"id": 226, "seek": 126700, "start": 1286.0, "end": 1289.0, "text": " In that one.", "tokens": [682, 300, 472, 13], "temperature": 0.0, "avg_logprob": -0.24300629053360376, "compression_ratio": 1.5212765957446808, "no_speech_prob": 2.6271192837157287e-05}, {"id": 227, "seek": 126700, "start": 1289.0, "end": 1294.0, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.24300629053360376, "compression_ratio": 1.5212765957446808, "no_speech_prob": 2.6271192837157287e-05}, {"id": 228, "seek": 129400, "start": 1294.0, "end": 1300.0, "text": " And then I think Cook was the world memory champion.", "tokens": [400, 550, 286, 519, 12259, 390, 264, 1002, 4675, 10971, 13], "temperature": 0.4, "avg_logprob": -0.32115010781721637, "compression_ratio": 1.4275362318840579, "no_speech_prob": 1.3208573363954201e-05}, {"id": 229, "seek": 129400, "start": 1300.0, "end": 1314.0, "text": " And he actually created a startup called memorize, which actually adds an additional thing, which is if you want to really remember things well.", "tokens": [400, 415, 767, 2942, 257, 18578, 1219, 27478, 11, 597, 767, 10860, 364, 4497, 551, 11, 597, 307, 498, 291, 528, 281, 534, 1604, 721, 731, 13], "temperature": 0.4, "avg_logprob": -0.32115010781721637, "compression_ratio": 1.4275362318840579, "no_speech_prob": 1.3208573363954201e-05}, {"id": 230, "seek": 131400, "start": 1314.0, "end": 1331.0, "text": " You need a mnemonic for them, something to make it click in your head, you know, and preferably connections to other things, which actually for a PL is easy because most of the APL glyphs have their own mnemonic already, you know they're, they're, they're drawn that way for a reason.", "tokens": [509, 643, 257, 275, 25989, 11630, 337, 552, 11, 746, 281, 652, 309, 2052, 294, 428, 1378, 11, 291, 458, 11, 293, 45916, 9271, 281, 661, 721, 11, 597, 767, 337, 257, 6999, 307, 1858, 570, 881, 295, 264, 5372, 43, 22633, 950, 82, 362, 641, 1065, 275, 25989, 11630, 1217, 11, 291, 458, 436, 434, 11, 436, 434, 11, 436, 434, 10117, 300, 636, 337, 257, 1778, 13], "temperature": 0.0, "avg_logprob": -0.18425442622258112, "compression_ratio": 1.6486486486486487, "no_speech_prob": 7.295332579815295e-06}, {"id": 231, "seek": 131400, "start": 1331.0, "end": 1338.0, "text": " But he actually is particularly to this for Chinese to make sure that each of the", "tokens": [583, 415, 767, 307, 4098, 281, 341, 337, 4649, 281, 652, 988, 300, 1184, 295, 264], "temperature": 0.0, "avg_logprob": -0.18425442622258112, "compression_ratio": 1.6486486486486487, "no_speech_prob": 7.295332579815295e-06}, {"id": 232, "seek": 133800, "start": 1338.0, "end": 1344.0, "text": " characters had some kind of mnemonic picture and stuff.", "tokens": [4342, 632, 512, 733, 295, 275, 25989, 11630, 3036, 293, 1507, 13], "temperature": 0.0, "avg_logprob": -0.11455762132685235, "compression_ratio": 1.296875, "no_speech_prob": 9.817249519983307e-06}, {"id": 233, "seek": 133800, "start": 1344.0, "end": 1350.0, "text": " And then yeah so Ed Cook also was the topic of a book.", "tokens": [400, 550, 1338, 370, 3977, 12259, 611, 390, 264, 4829, 295, 257, 1446, 13], "temperature": 0.0, "avg_logprob": -0.11455762132685235, "compression_ratio": 1.296875, "no_speech_prob": 9.817249519983307e-06}, {"id": 234, "seek": 133800, "start": 1350.0, "end": 1354.0, "text": " Moonwalking with Einstein, which is a really nice book.", "tokens": [10714, 12490, 278, 365, 23486, 11, 597, 307, 257, 534, 1481, 1446, 13], "temperature": 0.0, "avg_logprob": -0.11455762132685235, "compression_ratio": 1.296875, "no_speech_prob": 9.817249519983307e-06}, {"id": 235, "seek": 135400, "start": 1354.0, "end": 1369.0, "text": " It's one of those books that might help you change your understanding of yourself, because Josh is a guy who's think a journalist at the time, who thought of himself as somebody who had a bad memory.", "tokens": [467, 311, 472, 295, 729, 3642, 300, 1062, 854, 291, 1319, 428, 3701, 295, 1803, 11, 570, 9785, 307, 257, 2146, 567, 311, 519, 257, 17277, 412, 264, 565, 11, 567, 1194, 295, 3647, 382, 2618, 567, 632, 257, 1578, 4675, 13], "temperature": 0.0, "avg_logprob": -0.14678952601048853, "compression_ratio": 1.4906542056074767, "no_speech_prob": 1.8057220586342737e-05}, {"id": 236, "seek": 135400, "start": 1369.0, "end": 1374.0, "text": " And he teamed up with Ed Cook to learn memory techniques and.", "tokens": [400, 415, 47426, 493, 365, 3977, 12259, 281, 1466, 4675, 7512, 293, 13], "temperature": 0.0, "avg_logprob": -0.14678952601048853, "compression_ratio": 1.4906542056074767, "no_speech_prob": 1.8057220586342737e-05}, {"id": 237, "seek": 135400, "start": 1374.0, "end": 1377.0, "text": " Yeah, so the whole book is kind of all about his journey.", "tokens": [865, 11, 370, 264, 1379, 1446, 307, 733, 295, 439, 466, 702, 4671, 13], "temperature": 0.0, "avg_logprob": -0.14678952601048853, "compression_ratio": 1.4906542056074767, "no_speech_prob": 1.8057220586342737e-05}, {"id": 238, "seek": 137700, "start": 1377.0, "end": 1392.0, "text": " And interestingly, Josh actually went on to create something you might have come across.", "tokens": [400, 25873, 11, 9785, 767, 1437, 322, 281, 1884, 746, 291, 1062, 362, 808, 2108, 13], "temperature": 0.0, "avg_logprob": -0.12503814697265625, "compression_ratio": 1.0602409638554218, "no_speech_prob": 3.041463060071692e-06}, {"id": 239, "seek": 139200, "start": 1392.0, "end": 1410.0, "text": " Which is Atlas Obscura. If you've seen that it's a very cool, very cool website full of interesting things.", "tokens": [3013, 307, 32485, 20707, 66, 2991, 13, 759, 291, 600, 1612, 300, 309, 311, 257, 588, 1627, 11, 588, 1627, 3144, 1577, 295, 1880, 721, 13], "temperature": 0.0, "avg_logprob": -0.12121093019526055, "compression_ratio": 1.255813953488372, "no_speech_prob": 3.533079507178627e-05}, {"id": 240, "seek": 139200, "start": 1410.0, "end": 1415.0, "text": " Cool.", "tokens": [8561, 13], "temperature": 0.0, "avg_logprob": -0.12121093019526055, "compression_ratio": 1.255813953488372, "no_speech_prob": 3.533079507178627e-05}, {"id": 241, "seek": 139200, "start": 1415.0, "end": 1421.0, "text": " Thanks for letting me have a bit of a diversion.", "tokens": [2561, 337, 8295, 385, 362, 257, 857, 295, 257, 49422, 13], "temperature": 0.0, "avg_logprob": -0.12121093019526055, "compression_ratio": 1.255813953488372, "no_speech_prob": 3.533079507178627e-05}, {"id": 242, "seek": 142100, "start": 1421.0, "end": 1434.0, "text": " So I had one question about maybe a little bit more about the history and terminology of APL. For example, like, I was, you know, I think yesterday you, we had gone over the zilde symbol.", "tokens": [407, 286, 632, 472, 1168, 466, 1310, 257, 707, 857, 544, 466, 264, 2503, 293, 27575, 295, 5372, 43, 13, 1171, 1365, 11, 411, 11, 286, 390, 11, 291, 458, 11, 286, 519, 5186, 291, 11, 321, 632, 2780, 670, 264, 710, 15956, 5986, 13], "temperature": 0.0, "avg_logprob": -0.14072063051421066, "compression_ratio": 1.5120772946859904, "no_speech_prob": 6.20155333308503e-05}, {"id": 243, "seek": 142100, "start": 1434.0, "end": 1439.0, "text": " Yeah, but like it technically looks like a theta symbol.", "tokens": [865, 11, 457, 411, 309, 12120, 1542, 411, 257, 9725, 5986, 13], "temperature": 0.0, "avg_logprob": -0.14072063051421066, "compression_ratio": 1.5120772946859904, "no_speech_prob": 6.20155333308503e-05}, {"id": 244, "seek": 142100, "start": 1439.0, "end": 1440.0, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.14072063051421066, "compression_ratio": 1.5120772946859904, "no_speech_prob": 6.20155333308503e-05}, {"id": 245, "seek": 142100, "start": 1440.0, "end": 1445.0, "text": " So not quite it's got a squiggle it's a squiggly theta. Yeah.", "tokens": [407, 406, 1596, 309, 311, 658, 257, 2339, 19694, 309, 311, 257, 2339, 46737, 9725, 13, 865, 13], "temperature": 0.0, "avg_logprob": -0.14072063051421066, "compression_ratio": 1.5120772946859904, "no_speech_prob": 6.20155333308503e-05}, {"id": 246, "seek": 144500, "start": 1445.0, "end": 1456.0, "text": " So like I guess I'm just generally wondering where did these names come from. Like, it's kind of completely like unlike what it should be called like if you're looking at the Greek letters or whatever.", "tokens": [407, 411, 286, 2041, 286, 478, 445, 5101, 6359, 689, 630, 613, 5288, 808, 490, 13, 1743, 11, 309, 311, 733, 295, 2584, 411, 8343, 437, 309, 820, 312, 1219, 411, 498, 291, 434, 1237, 412, 264, 10281, 7825, 420, 2035, 13], "temperature": 0.0, "avg_logprob": -0.19807520452535377, "compression_ratio": 1.7530864197530864, "no_speech_prob": 2.110690184053965e-05}, {"id": 247, "seek": 144500, "start": 1456.0, "end": 1469.0, "text": " So I'm kind of confused from that. Well, okay. So, I mean, this is not the Greek letters. It's not wrong. The ones that are Greek letters are correct. So alpha is called alpha, iota is called iota, and omega is called omega.", "tokens": [407, 286, 478, 733, 295, 9019, 490, 300, 13, 1042, 11, 1392, 13, 407, 11, 286, 914, 11, 341, 307, 406, 264, 10281, 7825, 13, 467, 311, 406, 2085, 13, 440, 2306, 300, 366, 10281, 7825, 366, 3006, 13, 407, 8961, 307, 1219, 8961, 11, 741, 5377, 307, 1219, 741, 5377, 11, 293, 10498, 307, 1219, 10498, 13], "temperature": 0.0, "avg_logprob": -0.19807520452535377, "compression_ratio": 1.7530864197530864, "no_speech_prob": 2.110690184053965e-05}, {"id": 248, "seek": 146900, "start": 1469.0, "end": 1483.0, "text": " So there, there is a thought that even those shouldn't be there because like, they give preferential treatment to people of kind of European backgrounds who might recognize Greek letters.", "tokens": [407, 456, 11, 456, 307, 257, 1194, 300, 754, 729, 4659, 380, 312, 456, 570, 411, 11, 436, 976, 4382, 2549, 5032, 281, 561, 295, 733, 295, 6473, 17336, 567, 1062, 5521, 10281, 7825, 13], "temperature": 0.0, "avg_logprob": -0.14307847340901692, "compression_ratio": 1.5213270142180095, "no_speech_prob": 1.921777584357187e-05}, {"id": 249, "seek": 146900, "start": 1483.0, "end": 1490.0, "text": " You know, but generally, so they were all created by Ken Iverson and his wife.", "tokens": [509, 458, 11, 457, 5101, 11, 370, 436, 645, 439, 2942, 538, 8273, 286, 840, 266, 293, 702, 3836, 13], "temperature": 0.0, "avg_logprob": -0.14307847340901692, "compression_ratio": 1.5213270142180095, "no_speech_prob": 1.921777584357187e-05}, {"id": 250, "seek": 146900, "start": 1490.0, "end": 1495.0, "text": " And I think like his wife like drew them or something.", "tokens": [400, 286, 519, 411, 702, 3836, 411, 12804, 552, 420, 746, 13], "temperature": 0.0, "avg_logprob": -0.14307847340901692, "compression_ratio": 1.5213270142180095, "no_speech_prob": 1.921777584357187e-05}, {"id": 251, "seek": 149500, "start": 1495.0, "end": 1516.0, "text": " They're designed to be designed to be mnemonic. Right. So for example equals is the equals we recognize, and it means that 123 equals 223 will do a element wise equality return of all in.", "tokens": [814, 434, 4761, 281, 312, 4761, 281, 312, 275, 25989, 11630, 13, 1779, 13, 407, 337, 1365, 6915, 307, 264, 6915, 321, 5521, 11, 293, 309, 1355, 300, 34466, 6915, 5853, 18, 486, 360, 257, 4478, 10829, 14949, 2736, 295, 439, 294, 13], "temperature": 0.0, "avg_logprob": -0.2798572475627317, "compression_ratio": 1.4556962025316456, "no_speech_prob": 1.4063254639040679e-05}, {"id": 252, "seek": 149500, "start": 1516.0, "end": 1521.0, "text": " And like this one here is like, extremely.", "tokens": [400, 411, 341, 472, 510, 307, 411, 11, 4664, 13], "temperature": 0.0, "avg_logprob": -0.2798572475627317, "compression_ratio": 1.4556962025316456, "no_speech_prob": 1.4063254639040679e-05}, {"id": 253, "seek": 152100, "start": 1521.0, "end": 1530.0, "text": " I'm not sure what's doing sorry, I always get share screen.", "tokens": [286, 478, 406, 988, 437, 311, 884, 2597, 11, 286, 1009, 483, 2073, 2568, 13], "temperature": 0.0, "avg_logprob": -0.36417198181152344, "compression_ratio": 1.4337349397590362, "no_speech_prob": 1.38451932798489e-05}, {"id": 254, "seek": 152100, "start": 1530.0, "end": 1533.0, "text": " Share screen, share screen.", "tokens": [14945, 2568, 11, 2073, 2568, 13], "temperature": 0.0, "avg_logprob": -0.36417198181152344, "compression_ratio": 1.4337349397590362, "no_speech_prob": 1.38451932798489e-05}, {"id": 255, "seek": 152100, "start": 1533.0, "end": 1540.0, "text": " Okay, so 123 equals 223 gives 001 because it's element wise equals.", "tokens": [1033, 11, 370, 34466, 6915, 5853, 18, 2709, 7143, 16, 570, 309, 311, 4478, 10829, 6915, 13], "temperature": 0.0, "avg_logprob": -0.36417198181152344, "compression_ratio": 1.4337349397590362, "no_speech_prob": 1.38451932798489e-05}, {"id": 256, "seek": 152100, "start": 1540.0, "end": 1546.0, "text": " And yes, I was just showing you on the Zillow here that it's actually", "tokens": [400, 2086, 11, 286, 390, 445, 4099, 291, 322, 264, 1176, 373, 305, 510, 300, 309, 311, 767], "temperature": 0.0, "avg_logprob": -0.36417198181152344, "compression_ratio": 1.4337349397590362, "no_speech_prob": 1.38451932798489e-05}, {"id": 257, "seek": 152100, "start": 1546.0, "end": 1549.0, "text": " not a tilde.", "tokens": [406, 257, 45046, 13], "temperature": 0.0, "avg_logprob": -0.36417198181152344, "compression_ratio": 1.4337349397590362, "no_speech_prob": 1.38451932798489e-05}, {"id": 258, "seek": 154900, "start": 1549.0, "end": 1562.0, "text": " And so, this one here I kind of think of is like extremely equal to, because it checks whether two things are exactly the same items and exactly the same shape.", "tokens": [400, 370, 11, 341, 472, 510, 286, 733, 295, 519, 295, 307, 411, 4664, 2681, 281, 11, 570, 309, 13834, 1968, 732, 721, 366, 2293, 264, 912, 4754, 293, 2293, 264, 912, 3909, 13], "temperature": 0.0, "avg_logprob": -0.13314781766949277, "compression_ratio": 1.64375, "no_speech_prob": 1.3844707609678153e-05}, {"id": 259, "seek": 154900, "start": 1562.0, "end": 1565.0, "text": " I believe something like that.", "tokens": [286, 1697, 746, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.13314781766949277, "compression_ratio": 1.64375, "no_speech_prob": 1.3844707609678153e-05}, {"id": 260, "seek": 154900, "start": 1565.0, "end": 1572.0, "text": " Yes, it checks whether, as you can see, so exactly so that example one.", "tokens": [1079, 11, 309, 13834, 1968, 11, 382, 291, 393, 536, 11, 370, 2293, 370, 300, 1365, 472, 13], "temperature": 0.0, "avg_logprob": -0.13314781766949277, "compression_ratio": 1.64375, "no_speech_prob": 1.3844707609678153e-05}, {"id": 261, "seek": 157200, "start": 1572.0, "end": 1580.0, "text": " Oh, I should change, I got the wrong symbol here. So is it.", "tokens": [876, 11, 286, 820, 1319, 11, 286, 658, 264, 2085, 5986, 510, 13, 407, 307, 309, 13], "temperature": 0.0, "avg_logprob": -0.2615584825214587, "compression_ratio": 1.3380281690140845, "no_speech_prob": 5.255374617263442e-06}, {"id": 262, "seek": 157200, "start": 1580.0, "end": 1584.0, "text": " There we go. Okay, so these are equal.", "tokens": [821, 321, 352, 13, 1033, 11, 370, 613, 366, 2681, 13], "temperature": 0.0, "avg_logprob": -0.2615584825214587, "compression_ratio": 1.3380281690140845, "no_speech_prob": 5.255374617263442e-06}, {"id": 263, "seek": 157200, "start": 1584.0, "end": 1594.0, "text": " And, alright, one equals", "tokens": [400, 11, 5845, 11, 472, 6915], "temperature": 0.0, "avg_logprob": -0.2615584825214587, "compression_ratio": 1.3380281690140845, "no_speech_prob": 5.255374617263442e-06}, {"id": 264, "seek": 157200, "start": 1594.0, "end": 1601.0, "text": " is extremely equal to, is false because they're different lengths.", "tokens": [307, 4664, 2681, 281, 11, 307, 7908, 570, 436, 434, 819, 26329, 13], "temperature": 0.0, "avg_logprob": -0.2615584825214587, "compression_ratio": 1.3380281690140845, "no_speech_prob": 5.255374617263442e-06}, {"id": 265, "seek": 160100, "start": 1601.0, "end": 1613.0, "text": " Where else is normal equals two is like broadcasted element wise. So there's these kind of like mnemonics you know and then obviously this is the like not version of that.", "tokens": [2305, 1646, 307, 2710, 6915, 732, 307, 411, 9975, 292, 4478, 10829, 13, 407, 456, 311, 613, 733, 295, 411, 275, 25989, 266, 1167, 291, 458, 293, 550, 2745, 341, 307, 264, 411, 406, 3037, 295, 300, 13], "temperature": 0.0, "avg_logprob": -0.1487336701984647, "compression_ratio": 1.663265306122449, "no_speech_prob": 1.0615953215165064e-05}, {"id": 266, "seek": 160100, "start": 1613.0, "end": 1624.0, "text": " And then some of them are kind of like borrowed from other areas. A lot of them just draw drawings of things. This is the thing on the left hand side of a", "tokens": [400, 550, 512, 295, 552, 366, 733, 295, 411, 26805, 490, 661, 3179, 13, 316, 688, 295, 552, 445, 2642, 18618, 295, 721, 13, 639, 307, 264, 551, 322, 264, 1411, 1011, 1252, 295, 257], "temperature": 0.0, "avg_logprob": -0.1487336701984647, "compression_ratio": 1.663265306122449, "no_speech_prob": 1.0615953215165064e-05}, {"id": 267, "seek": 162400, "start": 1624.0, "end": 1636.0, "text": " function. This is on the right hand side of a function. This is the biggest thing and the littlest thing. So yeah, they made them up, basically.", "tokens": [2445, 13, 639, 307, 322, 264, 558, 1011, 1252, 295, 257, 2445, 13, 639, 307, 264, 3880, 551, 293, 264, 30267, 35745, 551, 13, 407, 1338, 11, 436, 1027, 552, 493, 11, 1936, 13], "temperature": 0.0, "avg_logprob": -0.15769473873839088, "compression_ratio": 1.464, "no_speech_prob": 3.6688436466647545e-06}, {"id": 268, "seek": 162400, "start": 1636.0, "end": 1639.0, "text": " And then somebody I think in the chat,", "tokens": [400, 550, 2618, 286, 519, 294, 264, 5081, 11], "temperature": 0.0, "avg_logprob": -0.15769473873839088, "compression_ratio": 1.464, "no_speech_prob": 3.6688436466647545e-06}, {"id": 269, "seek": 163900, "start": 1639.0, "end": 1654.0, "text": " was him says, Zelda is a potmanteau of zero, Tilda, which is exactly what it is. It's a zero with a Tilda through it.", "tokens": [390, 796, 1619, 11, 25298, 307, 257, 1847, 76, 2879, 1459, 295, 4018, 11, 314, 34121, 11, 597, 307, 2293, 437, 309, 307, 13, 467, 311, 257, 4018, 365, 257, 314, 34121, 807, 309, 13], "temperature": 0.0, "avg_logprob": -0.279369142320421, "compression_ratio": 1.5520833333333333, "no_speech_prob": 5.173766567168059e-06}, {"id": 270, "seek": 163900, "start": 1654.0, "end": 1665.0, "text": " So, was they, I guess when these were created, because like these are all Unicode characters right so they are now when they are now okay so before they were not really not coding.", "tokens": [407, 11, 390, 436, 11, 286, 2041, 562, 613, 645, 2942, 11, 570, 411, 613, 366, 439, 1156, 299, 1429, 4342, 558, 370, 436, 366, 586, 562, 436, 366, 586, 1392, 370, 949, 436, 645, 406, 534, 406, 17720, 13], "temperature": 0.0, "avg_logprob": -0.279369142320421, "compression_ratio": 1.5520833333333333, "no_speech_prob": 5.173766567168059e-06}, {"id": 271, "seek": 166500, "start": 1665.0, "end": 1680.0, "text": " So one of the things that really helped a lot was there are these things called golf ball typewriters I don't know if you've ever seen them, but they're just, they're like normal typewriters.", "tokens": [407, 472, 295, 264, 721, 300, 534, 4254, 257, 688, 390, 456, 366, 613, 721, 1219, 12880, 2594, 2010, 86, 39335, 286, 500, 380, 458, 498, 291, 600, 1562, 1612, 552, 11, 457, 436, 434, 445, 11, 436, 434, 411, 2710, 2010, 86, 39335, 13], "temperature": 0.0, "avg_logprob": -0.10706577301025391, "compression_ratio": 1.6273584905660377, "no_speech_prob": 1.6699970728950575e-05}, {"id": 272, "seek": 166500, "start": 1680.0, "end": 1694.0, "text": " But instead of like lots of little different things that bang there's a single thing that spins around and goes up and down to bang. And there was a APL.", "tokens": [583, 2602, 295, 411, 3195, 295, 707, 819, 721, 300, 8550, 456, 311, 257, 2167, 551, 300, 31587, 926, 293, 1709, 493, 293, 760, 281, 8550, 13, 400, 456, 390, 257, 5372, 43, 13], "temperature": 0.0, "avg_logprob": -0.10706577301025391, "compression_ratio": 1.6273584905660377, "no_speech_prob": 1.6699970728950575e-05}, {"id": 273, "seek": 169400, "start": 1694.0, "end": 1700.0, "text": " One of those that was created.", "tokens": [1485, 295, 729, 300, 390, 2942, 13], "temperature": 0.0, "avg_logprob": -0.1224064826965332, "compression_ratio": 1.4478527607361964, "no_speech_prob": 8.800415344012436e-06}, {"id": 274, "seek": 169400, "start": 1700.0, "end": 1714.0, "text": " And apparently that helped a lot because then people could like easily type set things but until that time my understanding is that Ken and his wife, I can't quite remember her name, Jeanette or something.", "tokens": [400, 7970, 300, 4254, 257, 688, 570, 550, 561, 727, 411, 3612, 2010, 992, 721, 457, 1826, 300, 565, 452, 3701, 307, 300, 8273, 293, 702, 3836, 11, 286, 393, 380, 1596, 1604, 720, 1315, 11, 13854, 3007, 420, 746, 13], "temperature": 0.0, "avg_logprob": -0.1224064826965332, "compression_ratio": 1.4478527607361964, "no_speech_prob": 8.800415344012436e-06}, {"id": 275, "seek": 171400, "start": 1714.0, "end": 1725.0, "text": " Yeah, they basically would like draw them and then stick them in the right place and, you know, type set in that rather old fashioned way so yeah it must have been a lot of work.", "tokens": [865, 11, 436, 1936, 576, 411, 2642, 552, 293, 550, 2897, 552, 294, 264, 558, 1081, 293, 11, 291, 458, 11, 2010, 992, 294, 300, 2831, 1331, 40646, 636, 370, 1338, 309, 1633, 362, 668, 257, 688, 295, 589, 13], "temperature": 0.0, "avg_logprob": -0.07672904633186958, "compression_ratio": 1.5052083333333333, "no_speech_prob": 1.8161680372941191e-06}, {"id": 276, "seek": 171400, "start": 1725.0, "end": 1735.0, "text": " But I think like most math was probably done that way anyway.", "tokens": [583, 286, 519, 411, 881, 5221, 390, 1391, 1096, 300, 636, 4033, 13], "temperature": 0.0, "avg_logprob": -0.07672904633186958, "compression_ratio": 1.5052083333333333, "no_speech_prob": 1.8161680372941191e-06}, {"id": 277, "seek": 171400, "start": 1735.0, "end": 1740.0, "text": " So yeah, they ended up becoming part of Unicode.", "tokens": [407, 1338, 11, 436, 4590, 493, 5617, 644, 295, 1156, 299, 1429, 13], "temperature": 0.0, "avg_logprob": -0.07672904633186958, "compression_ratio": 1.5052083333333333, "no_speech_prob": 1.8161680372941191e-06}, {"id": 278, "seek": 174000, "start": 1740.0, "end": 1746.0, "text": " So, you know, fonts. Most fonts don't have all Unicode characters in.", "tokens": [407, 11, 291, 458, 11, 35316, 13, 4534, 35316, 500, 380, 362, 439, 1156, 299, 1429, 4342, 294, 13], "temperature": 0.0, "avg_logprob": -0.1816647744947864, "compression_ratio": 1.448051948051948, "no_speech_prob": 1.2804981452063657e-05}, {"id": 279, "seek": 174000, "start": 1746.0, "end": 1755.0, "text": " And so if you're wondering why it is that you can look at like a web page or something with APL characters, even if you don't have an APL font installed.", "tokens": [400, 370, 498, 291, 434, 6359, 983, 309, 307, 300, 291, 393, 574, 412, 411, 257, 3670, 3028, 420, 746, 365, 5372, 43, 4342, 11, 754, 498, 291, 500, 380, 362, 364, 5372, 43, 10703, 8899, 13], "temperature": 0.0, "avg_logprob": -0.1816647744947864, "compression_ratio": 1.448051948051948, "no_speech_prob": 1.2804981452063657e-05}, {"id": 280, "seek": 175500, "start": 1755.0, "end": 1774.0, "text": " Your computer operating system behind the scenes tries to find any font that contains a character that's that's needed, and will generally show it to you using that font. If it, if it can, and it only falls back to the kind of like question mark or box if it can't find it at all.", "tokens": [2260, 3820, 7447, 1185, 2261, 264, 8026, 9898, 281, 915, 604, 10703, 300, 8306, 257, 2517, 300, 311, 300, 311, 2978, 11, 293, 486, 5101, 855, 309, 281, 291, 1228, 300, 10703, 13, 759, 309, 11, 498, 309, 393, 11, 293, 309, 787, 8804, 646, 281, 264, 733, 295, 411, 1168, 1491, 420, 2424, 498, 309, 393, 380, 915, 309, 412, 439, 13], "temperature": 0.0, "avg_logprob": -0.14937519073486327, "compression_ratio": 1.644, "no_speech_prob": 4.425391125550959e-06}, {"id": 281, "seek": 175500, "start": 1774.0, "end": 1782.0, "text": " There's a really actually a really great font. It's kind of like my favorite coding font in some ways anyway, which is just SEVCA.", "tokens": [821, 311, 257, 534, 767, 257, 534, 869, 10703, 13, 467, 311, 733, 295, 411, 452, 2954, 17720, 10703, 294, 512, 2098, 4033, 11, 597, 307, 445, 10269, 53, 15515, 13], "temperature": 0.0, "avg_logprob": -0.14937519073486327, "compression_ratio": 1.644, "no_speech_prob": 4.425391125550959e-06}, {"id": 282, "seek": 178200, "start": 1782.0, "end": 1792.0, "text": " And just SEVCA extended contains all of APL in quite a nice way and pretty much everything else, and it's a really nice font.", "tokens": [400, 445, 10269, 53, 15515, 10913, 8306, 439, 295, 5372, 43, 294, 1596, 257, 1481, 636, 293, 1238, 709, 1203, 1646, 11, 293, 309, 311, 257, 534, 1481, 10703, 13], "temperature": 0.0, "avg_logprob": -0.08334540512602208, "compression_ratio": 1.3757575757575757, "no_speech_prob": 3.5558903164201183e-06}, {"id": 283, "seek": 178200, "start": 1792.0, "end": 1802.0, "text": " So if you're ever wondering what font to use for your terminal, picking this one is not a bad choice.", "tokens": [407, 498, 291, 434, 1562, 6359, 437, 10703, 281, 764, 337, 428, 14709, 11, 8867, 341, 472, 307, 406, 257, 1578, 3922, 13], "temperature": 0.0, "avg_logprob": -0.08334540512602208, "compression_ratio": 1.3757575757575757, "no_speech_prob": 3.5558903164201183e-06}, {"id": 284, "seek": 180200, "start": 1802.0, "end": 1817.0, "text": " I don't know how they created so many characters and variants. Quite amazing.", "tokens": [286, 500, 380, 458, 577, 436, 2942, 370, 867, 4342, 293, 21669, 13, 20464, 2243, 13], "temperature": 0.0, "avg_logprob": -0.19339656829833984, "compression_ratio": 1.1346153846153846, "no_speech_prob": 8.266935765277594e-06}, {"id": 285, "seek": 180200, "start": 1817.0, "end": 1820.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.19339656829833984, "compression_ratio": 1.1346153846153846, "no_speech_prob": 8.266935765277594e-06}, {"id": 286, "seek": 180200, "start": 1820.0, "end": 1822.0, "text": " How did you learn about that font?", "tokens": [1012, 630, 291, 1466, 466, 300, 10703, 30], "temperature": 0.0, "avg_logprob": -0.19339656829833984, "compression_ratio": 1.1346153846153846, "no_speech_prob": 8.266935765277594e-06}, {"id": 287, "seek": 182200, "start": 1822.0, "end": 1850.0, "text": " I know. You know, I tend to learn about everything, mainly from Twitter, and then some things from like Hacker News, and some things from like following links from one of those places and finding things.", "tokens": [286, 458, 13, 509, 458, 11, 286, 3928, 281, 1466, 466, 1203, 11, 8704, 490, 5794, 11, 293, 550, 512, 721, 490, 411, 389, 23599, 7987, 11, 293, 512, 721, 490, 411, 3480, 6123, 490, 472, 295, 729, 3190, 293, 5006, 721, 13], "temperature": 0.0, "avg_logprob": -0.17820601767682015, "compression_ratio": 1.5149253731343284, "no_speech_prob": 1.7221731468453072e-05}, {"id": 288, "seek": 185000, "start": 1850.0, "end": 1856.0, "text": " Okay, so,", "tokens": [1033, 11, 370, 11], "temperature": 0.0, "avg_logprob": -0.2638719876607259, "compression_ratio": 1.058139534883721, "no_speech_prob": 2.7103847969556227e-05}, {"id": 289, "seek": 185000, "start": 1856.0, "end": 1865.0, "text": " alright so we've got a kernel running.", "tokens": [5845, 370, 321, 600, 658, 257, 28256, 2614, 13], "temperature": 0.0, "avg_logprob": -0.2638719876607259, "compression_ratio": 1.058139534883721, "no_speech_prob": 2.7103847969556227e-05}, {"id": 290, "seek": 185000, "start": 1865.0, "end": 1869.0, "text": " I don't think there's probably anything to", "tokens": [286, 500, 380, 519, 456, 311, 1391, 1340, 281], "temperature": 0.0, "avg_logprob": -0.2638719876607259, "compression_ratio": 1.058139534883721, "no_speech_prob": 2.7103847969556227e-05}, {"id": 291, "seek": 186900, "start": 1869.0, "end": 1881.0, "text": " pull.", "tokens": [2235, 13], "temperature": 0.0, "avg_logprob": -0.24600868225097655, "compression_ratio": 1.1639344262295082, "no_speech_prob": 5.255273663351545e-06}, {"id": 292, "seek": 186900, "start": 1881.0, "end": 1889.0, "text": " Do you know if there's a way to like ignore a branch? Like, I never need GH pages locally, right?", "tokens": [1144, 291, 458, 498, 456, 311, 257, 636, 281, 411, 11200, 257, 9819, 30, 1743, 11, 286, 1128, 643, 40690, 7183, 16143, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.24600868225097655, "compression_ratio": 1.1639344262295082, "no_speech_prob": 5.255273663351545e-06}, {"id": 293, "seek": 186900, "start": 1889.0, "end": 1893.0, "text": " And that's going to update a lot more.", "tokens": [400, 300, 311, 516, 281, 5623, 257, 688, 544, 13], "temperature": 0.0, "avg_logprob": -0.24600868225097655, "compression_ratio": 1.1639344262295082, "no_speech_prob": 5.255273663351545e-06}, {"id": 294, "seek": 189300, "start": 1893.0, "end": 1916.0, "text": " I only really want to pull master. I don't know if that's possible.", "tokens": [286, 787, 534, 528, 281, 2235, 4505, 13, 286, 500, 380, 458, 498, 300, 311, 1944, 13], "temperature": 0.0, "avg_logprob": -0.10820107232956659, "compression_ratio": 0.9571428571428572, "no_speech_prob": 2.2122600057628006e-05}, {"id": 295, "seek": 191600, "start": 1916.0, "end": 1932.0, "text": " Alright.", "tokens": [2798, 13], "temperature": 0.0, "avg_logprob": -0.17714862823486327, "compression_ratio": 0.9104477611940298, "no_speech_prob": 7.765371265122667e-06}, {"id": 296, "seek": 191600, "start": 1932.0, "end": 1942.0, "text": " I thought we could do like some Boolean stuff today.", "tokens": [286, 1194, 321, 727, 360, 411, 512, 23351, 28499, 1507, 965, 13], "temperature": 0.0, "avg_logprob": -0.17714862823486327, "compression_ratio": 0.9104477611940298, "no_speech_prob": 7.765371265122667e-06}, {"id": 297, "seek": 194200, "start": 1942.0, "end": 1951.0, "text": " If that sounds alright for everybody.", "tokens": [759, 300, 3263, 5845, 337, 2201, 13], "temperature": 0.0, "avg_logprob": -0.14287094116210938, "compression_ratio": 1.3529411764705883, "no_speech_prob": 9.665645848144777e-06}, {"id": 298, "seek": 194200, "start": 1951.0, "end": 1962.0, "text": " So these are all pretty straightforward I think, unless some of the monadic ones are weird. Looks like equals doesn't have a monadic version.", "tokens": [407, 613, 366, 439, 1238, 15325, 286, 519, 11, 5969, 512, 295, 264, 1108, 43341, 2306, 366, 3657, 13, 10027, 411, 6915, 1177, 380, 362, 257, 1108, 43341, 3037, 13], "temperature": 0.0, "avg_logprob": -0.14287094116210938, "compression_ratio": 1.3529411764705883, "no_speech_prob": 9.665645848144777e-06}, {"id": 299, "seek": 194200, "start": 1962.0, "end": 1969.0, "text": " Dialogue language elements.", "tokens": [29658, 7213, 2856, 4959, 13], "temperature": 0.0, "avg_logprob": -0.14287094116210938, "compression_ratio": 1.3529411764705883, "no_speech_prob": 9.665645848144777e-06}, {"id": 300, "seek": 196900, "start": 1969.0, "end": 1977.0, "text": " Oh, if anybody's interested. Oh, okay, I've got a couple of ideas for coding projects, if anybody's interested.", "tokens": [876, 11, 498, 4472, 311, 3102, 13, 876, 11, 1392, 11, 286, 600, 658, 257, 1916, 295, 3487, 337, 17720, 4455, 11, 498, 4472, 311, 3102, 13], "temperature": 0.0, "avg_logprob": -0.1708207130432129, "compression_ratio": 1.3732394366197183, "no_speech_prob": 9.079642040887848e-06}, {"id": 301, "seek": 196900, "start": 1977.0, "end": 1981.0, "text": " The first is", "tokens": [440, 700, 307], "temperature": 0.0, "avg_logprob": -0.1708207130432129, "compression_ratio": 1.3732394366197183, "no_speech_prob": 9.079642040887848e-06}, {"id": 302, "seek": 196900, "start": 1981.0, "end": 1988.0, "text": " this here, when rendered, is, you know, an APL character in Backticks.", "tokens": [341, 510, 11, 562, 28748, 11, 307, 11, 291, 458, 11, 364, 5372, 43, 2517, 294, 5833, 83, 7663, 13], "temperature": 0.0, "avg_logprob": -0.1708207130432129, "compression_ratio": 1.3732394366197183, "no_speech_prob": 9.079642040887848e-06}, {"id": 303, "seek": 198800, "start": 1988.0, "end": 1999.0, "text": " I think ideally we'd want it to automatically hyperlink to the dialogue documentation.", "tokens": [286, 519, 22915, 321, 1116, 528, 309, 281, 6772, 9848, 22473, 281, 264, 10221, 14333, 13], "temperature": 0.0, "avg_logprob": -0.13730516800513634, "compression_ratio": 1.3037037037037038, "no_speech_prob": 8.267383236670867e-06}, {"id": 304, "seek": 198800, "start": 1999.0, "end": 2006.0, "text": " Wouldn't that be cool? So, if we went to", "tokens": [26291, 380, 300, 312, 1627, 30, 407, 11, 498, 321, 1437, 281], "temperature": 0.0, "avg_logprob": -0.13730516800513634, "compression_ratio": 1.3037037037037038, "no_speech_prob": 8.267383236670867e-06}, {"id": 305, "seek": 198800, "start": 2006.0, "end": 2011.0, "text": " here, here.", "tokens": [510, 11, 510, 13], "temperature": 0.0, "avg_logprob": -0.13730516800513634, "compression_ratio": 1.3037037037037038, "no_speech_prob": 8.267383236670867e-06}, {"id": 306, "seek": 198800, "start": 2011.0, "end": 2015.0, "text": " Yeah, it'd be nice if these were all", "tokens": [865, 11, 309, 1116, 312, 1481, 498, 613, 645, 439], "temperature": 0.0, "avg_logprob": -0.13730516800513634, "compression_ratio": 1.3037037037037038, "no_speech_prob": 8.267383236670867e-06}, {"id": 307, "seek": 201500, "start": 2015.0, "end": 2021.0, "text": " automatic hyperlinks to the documentation. So if anybody's interested in trying that,", "tokens": [12509, 9848, 75, 16431, 281, 264, 14333, 13, 407, 498, 4472, 311, 3102, 294, 1382, 300, 11], "temperature": 0.0, "avg_logprob": -0.1790888889415844, "compression_ratio": 1.4840425531914894, "no_speech_prob": 9.665553079685196e-06}, {"id": 308, "seek": 201500, "start": 2021.0, "end": 2026.0, "text": " the way you would implement it is", "tokens": [264, 636, 291, 576, 4445, 309, 307], "temperature": 0.0, "avg_logprob": -0.1790888889415844, "compression_ratio": 1.4840425531914894, "no_speech_prob": 9.665553079685196e-06}, {"id": 309, "seek": 201500, "start": 2026.0, "end": 2032.0, "text": " you would, we're using, well I think Isaac's about to change this to use MB process.", "tokens": [291, 576, 11, 321, 434, 1228, 11, 731, 286, 519, 22505, 311, 466, 281, 1319, 341, 281, 764, 28866, 1399, 13], "temperature": 0.0, "avg_logprob": -0.1790888889415844, "compression_ratio": 1.4840425531914894, "no_speech_prob": 9.665553079685196e-06}, {"id": 310, "seek": 201500, "start": 2032.0, "end": 2040.0, "text": " And in MB process, which is going to become MB dev 2 in a couple of weeks,", "tokens": [400, 294, 28866, 1399, 11, 597, 307, 516, 281, 1813, 28866, 1905, 568, 294, 257, 1916, 295, 3259, 11], "temperature": 0.0, "avg_logprob": -0.1790888889415844, "compression_ratio": 1.4840425531914894, "no_speech_prob": 9.665553079685196e-06}, {"id": 311, "seek": 204000, "start": 2040.0, "end": 2046.0, "text": " we've got basically a list of like processes,", "tokens": [321, 600, 658, 1936, 257, 1329, 295, 411, 7555, 11], "temperature": 0.0, "avg_logprob": -0.20997953414916992, "compression_ratio": 1.4228187919463087, "no_speech_prob": 3.726539489434799e-06}, {"id": 312, "seek": 204000, "start": 2046.0, "end": 2055.0, "text": " which are like all the things we do to change cells, and you can see each one is normally just two or three lines of code.", "tokens": [597, 366, 411, 439, 264, 721, 321, 360, 281, 1319, 5438, 11, 293, 291, 393, 536, 1184, 472, 307, 5646, 445, 732, 420, 1045, 3876, 295, 3089, 13], "temperature": 0.0, "avg_logprob": -0.20997953414916992, "compression_ratio": 1.4228187919463087, "no_speech_prob": 3.726539489434799e-06}, {"id": 313, "seek": 204000, "start": 2055.0, "end": 2061.0, "text": " That's one piece. And then another piece is", "tokens": [663, 311, 472, 2522, 13, 400, 550, 1071, 2522, 307], "temperature": 0.0, "avg_logprob": -0.20997953414916992, "compression_ratio": 1.4228187919463087, "no_speech_prob": 3.726539489434799e-06}, {"id": 314, "seek": 206100, "start": 2061.0, "end": 2071.0, "text": " doc links, which is the thing that does this in Python. So in Python I've got something, I guess it'd be better to look at the notebook actually.", "tokens": [3211, 6123, 11, 597, 307, 264, 551, 300, 775, 341, 294, 15329, 13, 407, 294, 15329, 286, 600, 658, 746, 11, 286, 2041, 309, 1116, 312, 1101, 281, 574, 412, 264, 21060, 767, 13], "temperature": 0.0, "avg_logprob": -0.16413841247558594, "compression_ratio": 1.4417177914110428, "no_speech_prob": 8.013288606889546e-06}, {"id": 315, "seek": 206100, "start": 2071.0, "end": 2075.0, "text": " Doc links.", "tokens": [16024, 6123, 13], "temperature": 0.0, "avg_logprob": -0.16413841247558594, "compression_ratio": 1.4417177914110428, "no_speech_prob": 8.013288606889546e-06}, {"id": 316, "seek": 206100, "start": 2075.0, "end": 2083.0, "text": " So you've probably noticed that in MB dev websites, we automatically hyperlink", "tokens": [407, 291, 600, 1391, 5694, 300, 294, 28866, 1905, 12891, 11, 321, 6772, 9848, 22473], "temperature": 0.0, "avg_logprob": -0.16413841247558594, "compression_ratio": 1.4417177914110428, "no_speech_prob": 8.013288606889546e-06}, {"id": 317, "seek": 208300, "start": 2083.0, "end": 2092.0, "text": " anything that's in backticks. So here's an example. So in the source, this just said backtick numpy.array and it's automatically been hyperlinked.", "tokens": [1340, 300, 311, 294, 646, 83, 7663, 13, 407, 510, 311, 364, 1365, 13, 407, 294, 264, 4009, 11, 341, 445, 848, 646, 83, 618, 1031, 8200, 13, 2284, 320, 293, 309, 311, 6772, 668, 9848, 22473, 292, 13], "temperature": 0.0, "avg_logprob": -0.10973618247292259, "compression_ratio": 1.6208530805687205, "no_speech_prob": 6.962119641684694e-06}, {"id": 318, "seek": 208300, "start": 2092.0, "end": 2097.0, "text": " And the way that's done is we use linkify.", "tokens": [400, 264, 636, 300, 311, 1096, 307, 321, 764, 2113, 2505, 13], "temperature": 0.0, "avg_logprob": -0.10973618247292259, "compression_ratio": 1.6208530805687205, "no_speech_prob": 6.962119641684694e-06}, {"id": 319, "seek": 208300, "start": 2097.0, "end": 2105.0, "text": " So that splits the lines up, it goes to each line, checks whether or not we're in a fenced area or not.", "tokens": [407, 300, 37741, 264, 3876, 493, 11, 309, 1709, 281, 1184, 1622, 11, 13834, 1968, 420, 406, 321, 434, 294, 257, 283, 14672, 1859, 420, 406, 13], "temperature": 0.0, "avg_logprob": -0.10973618247292259, "compression_ratio": 1.6208530805687205, "no_speech_prob": 6.962119641684694e-06}, {"id": 320, "seek": 208300, "start": 2105.0, "end": 2110.0, "text": " And then once we find the right lines, we create", "tokens": [400, 550, 1564, 321, 915, 264, 558, 3876, 11, 321, 1884], "temperature": 0.0, "avg_logprob": -0.10973618247292259, "compression_ratio": 1.6208530805687205, "no_speech_prob": 6.962119641684694e-06}, {"id": 321, "seek": 211000, "start": 2110.0, "end": 2117.0, "text": " links in them, which is done using", "tokens": [6123, 294, 552, 11, 597, 307, 1096, 1228], "temperature": 0.0, "avg_logprob": -0.11424408753712972, "compression_ratio": 1.4195804195804196, "no_speech_prob": 1.3630861758429091e-05}, {"id": 322, "seek": 211000, "start": 2117.0, "end": 2125.0, "text": " this class. So yeah, there might be somewhere to do that in APL. That's one idea for a project.", "tokens": [341, 1508, 13, 407, 1338, 11, 456, 1062, 312, 4079, 281, 360, 300, 294, 5372, 43, 13, 663, 311, 472, 1558, 337, 257, 1716, 13], "temperature": 0.0, "avg_logprob": -0.11424408753712972, "compression_ratio": 1.4195804195804196, "no_speech_prob": 1.3630861758429091e-05}, {"id": 323, "seek": 211000, "start": 2125.0, "end": 2131.0, "text": " Another idea for a project is", "tokens": [3996, 1558, 337, 257, 1716, 307], "temperature": 0.0, "avg_logprob": -0.11424408753712972, "compression_ratio": 1.4195804195804196, "no_speech_prob": 1.3630861758429091e-05}, {"id": 324, "seek": 211000, "start": 2131.0, "end": 2137.0, "text": " Anki is really useful for me as a teacher,", "tokens": [1107, 2984, 307, 534, 4420, 337, 385, 382, 257, 5027, 11], "temperature": 0.0, "avg_logprob": -0.11424408753712972, "compression_ratio": 1.4195804195804196, "no_speech_prob": 1.3630861758429091e-05}, {"id": 325, "seek": 213700, "start": 2137.0, "end": 2141.0, "text": " but I have to use this kind of hacky approach to use it as a teacher.", "tokens": [457, 286, 362, 281, 764, 341, 733, 295, 10339, 88, 3109, 281, 764, 309, 382, 257, 5027, 13], "temperature": 0.0, "avg_logprob": -0.08447476023251248, "compression_ratio": 1.628440366972477, "no_speech_prob": 5.255151336314157e-06}, {"id": 326, "seek": 213700, "start": 2141.0, "end": 2148.0, "text": " So I've created a deck for Gabe and Claire called SuperSchool, and they both also have decks called SuperSchool.", "tokens": [407, 286, 600, 2942, 257, 9341, 337, 39524, 293, 22605, 1219, 4548, 50, 21856, 11, 293, 436, 1293, 611, 362, 32607, 1219, 4548, 50, 21856, 13], "temperature": 0.0, "avg_logprob": -0.08447476023251248, "compression_ratio": 1.628440366972477, "no_speech_prob": 5.255151336314157e-06}, {"id": 327, "seek": 213700, "start": 2148.0, "end": 2153.0, "text": " And each time I do a lesson with them, I add some cards to the deck.", "tokens": [400, 1184, 565, 286, 360, 257, 6898, 365, 552, 11, 286, 909, 512, 5632, 281, 264, 9341, 13], "temperature": 0.0, "avg_logprob": -0.08447476023251248, "compression_ratio": 1.628440366972477, "no_speech_prob": 5.255151336314157e-06}, {"id": 328, "seek": 213700, "start": 2153.0, "end": 2157.0, "text": " And then I go file, export,", "tokens": [400, 550, 286, 352, 3991, 11, 10725, 11], "temperature": 0.0, "avg_logprob": -0.08447476023251248, "compression_ratio": 1.628440366972477, "no_speech_prob": 5.255151336314157e-06}, {"id": 329, "seek": 213700, "start": 2157.0, "end": 2164.0, "text": " and I then make this a collection package, sorry, a deck package containing", "tokens": [293, 286, 550, 652, 341, 257, 5765, 7372, 11, 2597, 11, 257, 9341, 7372, 19273], "temperature": 0.0, "avg_logprob": -0.08447476023251248, "compression_ratio": 1.628440366972477, "no_speech_prob": 5.255151336314157e-06}, {"id": 330, "seek": 216400, "start": 2164.0, "end": 2170.0, "text": " just that deck, and I export it to a file. And then I send them that file,", "tokens": [445, 300, 9341, 11, 293, 286, 10725, 309, 281, 257, 3991, 13, 400, 550, 286, 2845, 552, 300, 3991, 11], "temperature": 0.0, "avg_logprob": -0.125423616833157, "compression_ratio": 1.5426829268292683, "no_speech_prob": 1.1842409548989963e-05}, {"id": 331, "seek": 216400, "start": 2170.0, "end": 2175.0, "text": " they click on it, it opens and it imports that", "tokens": [436, 2052, 322, 309, 11, 309, 9870, 293, 309, 41596, 300], "temperature": 0.0, "avg_logprob": -0.125423616833157, "compression_ratio": 1.5426829268292683, "no_speech_prob": 1.1842409548989963e-05}, {"id": 332, "seek": 216400, "start": 2175.0, "end": 2180.0, "text": " into their decks. So it means that I can create", "tokens": [666, 641, 32607, 13, 407, 309, 1355, 300, 286, 393, 1884], "temperature": 0.0, "avg_logprob": -0.125423616833157, "compression_ratio": 1.5426829268292683, "no_speech_prob": 1.1842409548989963e-05}, {"id": 333, "seek": 216400, "start": 2180.0, "end": 2187.0, "text": " cards for my students, in this case it's Claire and Gabe, and they can import them.", "tokens": [5632, 337, 452, 1731, 11, 294, 341, 1389, 309, 311, 22605, 293, 39524, 11, 293, 436, 393, 974, 552, 13], "temperature": 0.0, "avg_logprob": -0.125423616833157, "compression_ratio": 1.5426829268292683, "no_speech_prob": 1.1842409548989963e-05}, {"id": 334, "seek": 218700, "start": 2187.0, "end": 2194.0, "text": " But we each have our own independent decks, so it means they can add stuff to their deck that I don't have in mind or study other topics or whatever.", "tokens": [583, 321, 1184, 362, 527, 1065, 6695, 32607, 11, 370, 309, 1355, 436, 393, 909, 1507, 281, 641, 9341, 300, 286, 500, 380, 362, 294, 1575, 420, 2979, 661, 8378, 420, 2035, 13], "temperature": 0.0, "avg_logprob": -0.13934284032777297, "compression_ratio": 1.5317073170731708, "no_speech_prob": 1.428182986273896e-05}, {"id": 335, "seek": 218700, "start": 2194.0, "end": 2200.0, "text": " So this project idea is make this all much simpler.", "tokens": [407, 341, 1716, 1558, 307, 652, 341, 439, 709, 18587, 13], "temperature": 0.0, "avg_logprob": -0.13934284032777297, "compression_ratio": 1.5317073170731708, "no_speech_prob": 1.428182986273896e-05}, {"id": 336, "seek": 218700, "start": 2200.0, "end": 2207.0, "text": " So Anki does actually have an online version.", "tokens": [407, 1107, 2984, 775, 767, 362, 364, 2950, 3037, 13], "temperature": 0.0, "avg_logprob": -0.13934284032777297, "compression_ratio": 1.5317073170731708, "no_speech_prob": 1.428182986273896e-05}, {"id": 337, "seek": 218700, "start": 2207.0, "end": 2211.0, "text": " Anki Web.", "tokens": [1107, 2984, 9573, 13], "temperature": 0.0, "avg_logprob": -0.13934284032777297, "compression_ratio": 1.5317073170731708, "no_speech_prob": 1.428182986273896e-05}, {"id": 338, "seek": 218700, "start": 2211.0, "end": 2215.0, "text": " So there must be, so there's an API for syncing with it.", "tokens": [407, 456, 1633, 312, 11, 370, 456, 311, 364, 9362, 337, 5451, 2175, 365, 309, 13], "temperature": 0.0, "avg_logprob": -0.13934284032777297, "compression_ratio": 1.5317073170731708, "no_speech_prob": 1.428182986273896e-05}, {"id": 339, "seek": 221500, "start": 2215.0, "end": 2221.0, "text": " And there's quite a few versions of Anki that are open source, so I guess it's all documented in API.", "tokens": [400, 456, 311, 1596, 257, 1326, 9606, 295, 1107, 2984, 300, 366, 1269, 4009, 11, 370, 286, 2041, 309, 311, 439, 23007, 294, 9362, 13], "temperature": 0.0, "avg_logprob": -0.10673676039043226, "compression_ratio": 1.5124378109452736, "no_speech_prob": 2.0141589629929513e-05}, {"id": 340, "seek": 221500, "start": 2221.0, "end": 2229.0, "text": " Yeah, it'd be nice if there was some way maybe through some online interface to add cards and it would automatically like send them off to", "tokens": [865, 11, 309, 1116, 312, 1481, 498, 456, 390, 512, 636, 1310, 807, 512, 2950, 9226, 281, 909, 5632, 293, 309, 576, 6772, 411, 2845, 552, 766, 281], "temperature": 0.0, "avg_logprob": -0.10673676039043226, "compression_ratio": 1.5124378109452736, "no_speech_prob": 2.0141589629929513e-05}, {"id": 341, "seek": 221500, "start": 2229.0, "end": 2234.0, "text": " each person or something.", "tokens": [1184, 954, 420, 746, 13], "temperature": 0.0, "avg_logprob": -0.10673676039043226, "compression_ratio": 1.5124378109452736, "no_speech_prob": 2.0141589629929513e-05}, {"id": 342, "seek": 221500, "start": 2234.0, "end": 2240.0, "text": " Yeah, some easier way for teachers to", "tokens": [865, 11, 512, 3571, 636, 337, 6023, 281], "temperature": 0.0, "avg_logprob": -0.10673676039043226, "compression_ratio": 1.5124378109452736, "no_speech_prob": 2.0141589629929513e-05}, {"id": 343, "seek": 224000, "start": 2240.0, "end": 2247.0, "text": " send cards off to their students.", "tokens": [2845, 5632, 766, 281, 641, 1731, 13], "temperature": 0.0, "avg_logprob": -0.10383762547999252, "compression_ratio": 1.6359223300970873, "no_speech_prob": 2.2471480406238697e-05}, {"id": 344, "seek": 224000, "start": 2247.0, "end": 2256.0, "text": " And there's lots of stuff you could add to that, right? You could then like add some way for then teachers to actually check how the students are going, make sure that they're actually not behind.", "tokens": [400, 456, 311, 3195, 295, 1507, 291, 727, 909, 281, 300, 11, 558, 30, 509, 727, 550, 411, 909, 512, 636, 337, 550, 6023, 281, 767, 1520, 577, 264, 1731, 366, 516, 11, 652, 988, 300, 436, 434, 767, 406, 2261, 13], "temperature": 0.0, "avg_logprob": -0.10383762547999252, "compression_ratio": 1.6359223300970873, "no_speech_prob": 2.2471480406238697e-05}, {"id": 345, "seek": 224000, "start": 2256.0, "end": 2263.0, "text": " Because what happens is if you don't study your cards, then this learning number will go up and up and up.", "tokens": [1436, 437, 2314, 307, 498, 291, 500, 380, 2979, 428, 5632, 11, 550, 341, 2539, 1230, 486, 352, 493, 293, 493, 293, 493, 13], "temperature": 0.0, "avg_logprob": -0.10383762547999252, "compression_ratio": 1.6359223300970873, "no_speech_prob": 2.2471480406238697e-05}, {"id": 346, "seek": 226300, "start": 2263.0, "end": 2274.0, "text": " And then the other thing I have to do is after each time I export, I then have to go and browse and delete all the cards that are there so that the next time I export, I'm only exporting the new cards.", "tokens": [400, 550, 264, 661, 551, 286, 362, 281, 360, 307, 934, 1184, 565, 286, 10725, 11, 286, 550, 362, 281, 352, 293, 31442, 293, 12097, 439, 264, 5632, 300, 366, 456, 370, 300, 264, 958, 565, 286, 10725, 11, 286, 478, 787, 44686, 264, 777, 5632, 13], "temperature": 0.0, "avg_logprob": -0.11715832463017216, "compression_ratio": 1.6473429951690821, "no_speech_prob": 1.7329573438473744e-06}, {"id": 347, "seek": 226300, "start": 2274.0, "end": 2278.0, "text": " So there's definitely room to create some kind of cool", "tokens": [407, 456, 311, 2138, 1808, 281, 1884, 512, 733, 295, 1627], "temperature": 0.0, "avg_logprob": -0.11715832463017216, "compression_ratio": 1.6473429951690821, "no_speech_prob": 1.7329573438473744e-06}, {"id": 348, "seek": 226300, "start": 2278.0, "end": 2287.0, "text": " system for a more, you know, collaborative learning approach with spaced repetition,", "tokens": [1185, 337, 257, 544, 11, 291, 458, 11, 16555, 2539, 3109, 365, 43766, 30432, 11], "temperature": 0.0, "avg_logprob": -0.11715832463017216, "compression_ratio": 1.6473429951690821, "no_speech_prob": 1.7329573438473744e-06}, {"id": 349, "seek": 228700, "start": 2287.0, "end": 2294.0, "text": " which I think could leverage Anki. And Anki is written in Python, by the way.", "tokens": [597, 286, 519, 727, 13982, 1107, 2984, 13, 400, 1107, 2984, 307, 3720, 294, 15329, 11, 538, 264, 636, 13], "temperature": 0.0, "avg_logprob": -0.12325973259775262, "compression_ratio": 1.1717171717171717, "no_speech_prob": 8.138787961797789e-06}, {"id": 350, "seek": 228700, "start": 2294.0, "end": 2303.0, "text": " Anyway, that was a little aside.", "tokens": [5684, 11, 300, 390, 257, 707, 7359, 13], "temperature": 0.0, "avg_logprob": -0.12325973259775262, "compression_ratio": 1.1717171717171717, "no_speech_prob": 8.138787961797789e-06}, {"id": 351, "seek": 228700, "start": 2303.0, "end": 2314.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.12325973259775262, "compression_ratio": 1.1717171717171717, "no_speech_prob": 8.138787961797789e-06}, {"id": 352, "seek": 231400, "start": 2314.0, "end": 2318.0, "text": " So equals.", "tokens": [407, 6915, 13], "temperature": 0.0, "avg_logprob": -0.17409162521362304, "compression_ratio": 1.2672413793103448, "no_speech_prob": 4.637788606487447e-06}, {"id": 353, "seek": 231400, "start": 2318.0, "end": 2325.0, "text": " And my guess was that this", "tokens": [400, 452, 2041, 390, 300, 341], "temperature": 0.0, "avg_logprob": -0.17409162521362304, "compression_ratio": 1.2672413793103448, "no_speech_prob": 4.637788606487447e-06}, {"id": 354, "seek": 231400, "start": 2325.0, "end": 2328.0, "text": " was equals.", "tokens": [390, 6915, 13], "temperature": 0.0, "avg_logprob": -0.17409162521362304, "compression_ratio": 1.2672413793103448, "no_speech_prob": 4.637788606487447e-06}, {"id": 355, "seek": 231400, "start": 2328.0, "end": 2330.0, "text": " Yeah, is that it? Yeah.", "tokens": [865, 11, 307, 300, 309, 30, 865, 13], "temperature": 0.0, "avg_logprob": -0.17409162521362304, "compression_ratio": 1.2672413793103448, "no_speech_prob": 4.637788606487447e-06}, {"id": 356, "seek": 231400, "start": 2330.0, "end": 2343.0, "text": " It gets confusing with the underline. Okay, so there's no monadic equals.", "tokens": [467, 2170, 13181, 365, 264, 833, 1889, 13, 1033, 11, 370, 456, 311, 572, 1108, 43341, 6915, 13], "temperature": 0.0, "avg_logprob": -0.17409162521362304, "compression_ratio": 1.2672413793103448, "no_speech_prob": 4.637788606487447e-06}, {"id": 357, "seek": 234300, "start": 2343.0, "end": 2361.0, "text": " I might just make this into a little template that I can copy and paste.", "tokens": [286, 1062, 445, 652, 341, 666, 257, 707, 12379, 300, 286, 393, 5055, 293, 9163, 13], "temperature": 0.0, "avg_logprob": -0.13316813111305237, "compression_ratio": 1.054054054054054, "no_speech_prob": 9.368355676997453e-06}, {"id": 358, "seek": 234300, "start": 2361.0, "end": 2363.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.13316813111305237, "compression_ratio": 1.054054054054054, "no_speech_prob": 9.368355676997453e-06}, {"id": 359, "seek": 236300, "start": 2363.0, "end": 2375.0, "text": " It'll save me some time. Equals. And it's called equal sign.", "tokens": [467, 603, 3155, 385, 512, 565, 13, 15624, 1124, 13, 400, 309, 311, 1219, 2681, 1465, 13], "temperature": 0.0, "avg_logprob": -0.2788124656677246, "compression_ratio": 1.2231404958677685, "no_speech_prob": 2.8129620659456123e-06}, {"id": 360, "seek": 236300, "start": 2375.0, "end": 2378.0, "text": " Monadic doesn't exist.", "tokens": [4713, 43341, 1177, 380, 2514, 13], "temperature": 0.0, "avg_logprob": -0.2788124656677246, "compression_ratio": 1.2231404958677685, "no_speech_prob": 2.8129620659456123e-06}, {"id": 361, "seek": 236300, "start": 2378.0, "end": 2385.0, "text": " Okay. Diatic equals means equal to.", "tokens": [1033, 13, 413, 7676, 299, 6915, 1355, 2681, 281, 13], "temperature": 0.0, "avg_logprob": -0.2788124656677246, "compression_ratio": 1.2231404958677685, "no_speech_prob": 2.8129620659456123e-06}, {"id": 362, "seek": 236300, "start": 2385.0, "end": 2388.0, "text": " Alright, so what equals one?", "tokens": [2798, 11, 370, 437, 6915, 472, 30], "temperature": 0.0, "avg_logprob": -0.2788124656677246, "compression_ratio": 1.2231404958677685, "no_speech_prob": 2.8129620659456123e-06}, {"id": 363, "seek": 238800, "start": 2388.0, "end": 2394.0, "text": " Oops. One equals one, two.", "tokens": [21726, 13, 1485, 6915, 472, 11, 732, 13], "temperature": 0.0, "avg_logprob": -0.1652832137213813, "compression_ratio": 1.2982456140350878, "no_speech_prob": 4.029375304526184e-06}, {"id": 364, "seek": 238800, "start": 2394.0, "end": 2398.0, "text": " One equals one, one.", "tokens": [1485, 6915, 472, 11, 472, 13], "temperature": 0.0, "avg_logprob": -0.1652832137213813, "compression_ratio": 1.2982456140350878, "no_speech_prob": 4.029375304526184e-06}, {"id": 365, "seek": 238800, "start": 2398.0, "end": 2405.0, "text": " Any other interesting examples? Oh, yeah, strings.", "tokens": [2639, 661, 1880, 5110, 30, 876, 11, 1338, 11, 13985, 13], "temperature": 0.0, "avg_logprob": -0.1652832137213813, "compression_ratio": 1.2982456140350878, "no_speech_prob": 4.029375304526184e-06}, {"id": 366, "seek": 238800, "start": 2405.0, "end": 2411.0, "text": " So probably useful to think about why this works.", "tokens": [407, 1391, 4420, 281, 519, 466, 983, 341, 1985, 13], "temperature": 0.0, "avg_logprob": -0.1652832137213813, "compression_ratio": 1.2982456140350878, "no_speech_prob": 4.029375304526184e-06}, {"id": 367, "seek": 241100, "start": 2411.0, "end": 2418.0, "text": " So this is, remember, is a special case. It's a character.", "tokens": [407, 341, 307, 11, 1604, 11, 307, 257, 2121, 1389, 13, 467, 311, 257, 2517, 13], "temperature": 0.0, "avg_logprob": -0.20189904577938128, "compression_ratio": 1.7011494252873562, "no_speech_prob": 9.368154678668361e-06}, {"id": 368, "seek": 241100, "start": 2418.0, "end": 2424.0, "text": " You know, it's a single character. Where else, there's more than one, it becomes an array of characters.", "tokens": [509, 458, 11, 309, 311, 257, 2167, 2517, 13, 2305, 1646, 11, 456, 311, 544, 813, 472, 11, 309, 3643, 364, 10225, 295, 4342, 13], "temperature": 0.0, "avg_logprob": -0.20189904577938128, "compression_ratio": 1.7011494252873562, "no_speech_prob": 9.368154678668361e-06}, {"id": 369, "seek": 241100, "start": 2424.0, "end": 2428.0, "text": " So this is a single character, so it'll be broadcast over all these characters.", "tokens": [407, 341, 307, 257, 2167, 2517, 11, 370, 309, 603, 312, 9975, 670, 439, 613, 4342, 13], "temperature": 0.0, "avg_logprob": -0.20189904577938128, "compression_ratio": 1.7011494252873562, "no_speech_prob": 9.368154678668361e-06}, {"id": 370, "seek": 241100, "start": 2428.0, "end": 2438.0, "text": " And so it'll end up being the same as banana equals.", "tokens": [400, 370, 309, 603, 917, 493, 885, 264, 912, 382, 14194, 6915, 13], "temperature": 0.0, "avg_logprob": -0.20189904577938128, "compression_ratio": 1.7011494252873562, "no_speech_prob": 9.368154678668361e-06}, {"id": 371, "seek": 243800, "start": 2438.0, "end": 2443.0, "text": " It'll be the same as that.", "tokens": [467, 603, 312, 264, 912, 382, 300, 13], "temperature": 0.0, "avg_logprob": -0.458853294109476, "compression_ratio": 1.042857142857143, "no_speech_prob": 4.067481495440006e-05}, {"id": 372, "seek": 243800, "start": 2443.0, "end": 2446.0, "text": " Every second.", "tokens": [2048, 1150, 13], "temperature": 0.0, "avg_logprob": -0.458853294109476, "compression_ratio": 1.042857142857143, "no_speech_prob": 4.067481495440006e-05}, {"id": 373, "seek": 243800, "start": 2446.0, "end": 2449.0, "text": " Banana is an A.", "tokens": [39588, 307, 364, 316, 13], "temperature": 0.0, "avg_logprob": -0.458853294109476, "compression_ratio": 1.042857142857143, "no_speech_prob": 4.067481495440006e-05}, {"id": 374, "seek": 243800, "start": 2449.0, "end": 2456.0, "text": " Banana consists.", "tokens": [39588, 14689, 13], "temperature": 0.0, "avg_logprob": -0.458853294109476, "compression_ratio": 1.042857142857143, "no_speech_prob": 4.067481495440006e-05}, {"id": 375, "seek": 245600, "start": 2456.0, "end": 2476.0, "text": " I think if you do this equals A, and you have a list of words, so like banana and apple, I think it will still go", "tokens": [286, 519, 498, 291, 360, 341, 6915, 316, 11, 293, 291, 362, 257, 1329, 295, 2283, 11, 370, 411, 14194, 293, 10606, 11, 286, 519, 309, 486, 920, 352], "temperature": 0.0, "avg_logprob": -0.17765408295851487, "compression_ratio": 1.4338235294117647, "no_speech_prob": 1.6961903384071775e-05}, {"id": 376, "seek": 245600, "start": 2476.0, "end": 2485.0, "text": " element wise through each one, rather than looking at that higher level, I think.", "tokens": [4478, 10829, 807, 1184, 472, 11, 2831, 813, 1237, 412, 300, 2946, 1496, 11, 286, 519, 13], "temperature": 0.0, "avg_logprob": -0.17765408295851487, "compression_ratio": 1.4338235294117647, "no_speech_prob": 1.6961903384071775e-05}, {"id": 377, "seek": 248500, "start": 2485.0, "end": 2488.0, "text": " Sorry, I meant the banana and apple on the left hand side.", "tokens": [4919, 11, 286, 4140, 264, 14194, 293, 10606, 322, 264, 1411, 1011, 1252, 13], "temperature": 0.0, "avg_logprob": -0.19052811672813014, "compression_ratio": 1.5093167701863355, "no_speech_prob": 4.637652637029532e-06}, {"id": 378, "seek": 248500, "start": 2488.0, "end": 2492.0, "text": " Okay. Equals A.", "tokens": [1033, 13, 15624, 1124, 316, 13], "temperature": 0.0, "avg_logprob": -0.19052811672813014, "compression_ratio": 1.5093167701863355, "no_speech_prob": 4.637652637029532e-06}, {"id": 379, "seek": 248500, "start": 2492.0, "end": 2498.0, "text": " I think. Oh, okay. So you're not saying, you're not saying this.", "tokens": [286, 519, 13, 876, 11, 1392, 13, 407, 291, 434, 406, 1566, 11, 291, 434, 406, 1566, 341, 13], "temperature": 0.0, "avg_logprob": -0.19052811672813014, "compression_ratio": 1.5093167701863355, "no_speech_prob": 4.637652637029532e-06}, {"id": 380, "seek": 248500, "start": 2498.0, "end": 2501.0, "text": " You're saying this.", "tokens": [509, 434, 1566, 341, 13], "temperature": 0.0, "avg_logprob": -0.19052811672813014, "compression_ratio": 1.5093167701863355, "no_speech_prob": 4.637652637029532e-06}, {"id": 381, "seek": 248500, "start": 2501.0, "end": 2508.0, "text": " Okay. And so I can tell you why that is. That's because a scalar can broadcast over", "tokens": [1033, 13, 400, 370, 286, 393, 980, 291, 983, 300, 307, 13, 663, 311, 570, 257, 39684, 393, 9975, 670], "temperature": 0.0, "avg_logprob": -0.19052811672813014, "compression_ratio": 1.5093167701863355, "no_speech_prob": 4.637652637029532e-06}, {"id": 382, "seek": 250800, "start": 2508.0, "end": 2516.0, "text": " a matrix. And I think that that creates.", "tokens": [257, 8141, 13, 400, 286, 519, 300, 300, 7829, 13], "temperature": 0.0, "avg_logprob": -0.15993904537624784, "compression_ratio": 1.4563106796116505, "no_speech_prob": 3.138067995678284e-06}, {"id": 383, "seek": 250800, "start": 2516.0, "end": 2522.0, "text": " I think that's like internally a matrix.", "tokens": [286, 519, 300, 311, 411, 19501, 257, 8141, 13], "temperature": 0.0, "avg_logprob": -0.15993904537624784, "compression_ratio": 1.4563106796116505, "no_speech_prob": 3.138067995678284e-06}, {"id": 384, "seek": 250800, "start": 2522.0, "end": 2529.0, "text": " And so then if you do equals apple, it will not find apple, I think.", "tokens": [400, 370, 550, 498, 291, 360, 6915, 10606, 11, 309, 486, 406, 915, 10606, 11, 286, 519, 13], "temperature": 0.0, "avg_logprob": -0.15993904537624784, "compression_ratio": 1.4563106796116505, "no_speech_prob": 3.138067995678284e-06}, {"id": 385, "seek": 252900, "start": 2529.0, "end": 2538.0, "text": " Hang on. Let me just get my thing going here.", "tokens": [14070, 322, 13, 961, 385, 445, 483, 452, 551, 516, 510, 13], "temperature": 0.0, "avg_logprob": -0.13192670891083866, "compression_ratio": 1.4824120603015076, "no_speech_prob": 7.295962859643623e-06}, {"id": 386, "seek": 252900, "start": 2538.0, "end": 2544.0, "text": " That's interesting. That's three things. Okay. I'm a bit confused about strings. Sorry. What were you saying we could do?", "tokens": [663, 311, 1880, 13, 663, 311, 1045, 721, 13, 1033, 13, 286, 478, 257, 857, 9019, 466, 13985, 13, 4919, 13, 708, 645, 291, 1566, 321, 727, 360, 30], "temperature": 0.0, "avg_logprob": -0.13192670891083866, "compression_ratio": 1.4824120603015076, "no_speech_prob": 7.295962859643623e-06}, {"id": 387, "seek": 252900, "start": 2544.0, "end": 2550.0, "text": " Yes, I think now if you do like the same banana apple candy is equal to apple.", "tokens": [1079, 11, 286, 519, 586, 498, 291, 360, 411, 264, 912, 14194, 10606, 11237, 307, 2681, 281, 10606, 13], "temperature": 0.0, "avg_logprob": -0.13192670891083866, "compression_ratio": 1.4824120603015076, "no_speech_prob": 7.295962859643623e-06}, {"id": 388, "seek": 252900, "start": 2550.0, "end": 2554.0, "text": " I think it will not. It'll also do element wise.", "tokens": [286, 519, 309, 486, 406, 13, 467, 603, 611, 360, 4478, 10829, 13], "temperature": 0.0, "avg_logprob": -0.13192670891083866, "compression_ratio": 1.4824120603015076, "no_speech_prob": 7.295962859643623e-06}, {"id": 389, "seek": 255400, "start": 2554.0, "end": 2562.0, "text": " And so, right. I, I had a lot of problems with this and the moving. Yeah.", "tokens": [400, 370, 11, 558, 13, 286, 11, 286, 632, 257, 688, 295, 2740, 365, 341, 293, 264, 2684, 13, 865, 13], "temperature": 0.0, "avg_logprob": -0.20625191576340618, "compression_ratio": 1.4189944134078212, "no_speech_prob": 5.594055892288452e-06}, {"id": 390, "seek": 255400, "start": 2562.0, "end": 2572.0, "text": " Yeah. So numpy broadcasts vectors over matrices, where else APL doesn't.", "tokens": [865, 13, 407, 1031, 8200, 9975, 82, 18875, 670, 32284, 11, 689, 1646, 5372, 43, 1177, 380, 13], "temperature": 0.0, "avg_logprob": -0.20625191576340618, "compression_ratio": 1.4189944134078212, "no_speech_prob": 5.594055892288452e-06}, {"id": 391, "seek": 255400, "start": 2572.0, "end": 2580.0, "text": " So at some point we'll come across something called the each operator, which will work around that problem.", "tokens": [407, 412, 512, 935, 321, 603, 808, 2108, 746, 1219, 264, 1184, 12973, 11, 597, 486, 589, 926, 300, 1154, 13], "temperature": 0.0, "avg_logprob": -0.20625191576340618, "compression_ratio": 1.4189944134078212, "no_speech_prob": 5.594055892288452e-06}, {"id": 392, "seek": 258000, "start": 2580.0, "end": 2584.0, "text": " All right. Cool.", "tokens": [1057, 558, 13, 8561, 13], "temperature": 0.0, "avg_logprob": -0.19892109524119983, "compression_ratio": 1.2520325203252032, "no_speech_prob": 3.0894295832695207e-06}, {"id": 393, "seek": 258000, "start": 2584.0, "end": 2592.0, "text": " And actually to make this more consistent, I should run everything above.", "tokens": [400, 767, 281, 652, 341, 544, 8398, 11, 286, 820, 1190, 1203, 3673, 13], "temperature": 0.0, "avg_logprob": -0.19892109524119983, "compression_ratio": 1.2520325203252032, "no_speech_prob": 3.0894295832695207e-06}, {"id": 394, "seek": 258000, "start": 2592.0, "end": 2602.0, "text": " I can't quite see because this is in the way. So run all above.", "tokens": [286, 393, 380, 1596, 536, 570, 341, 307, 294, 264, 636, 13, 407, 1190, 439, 3673, 13], "temperature": 0.0, "avg_logprob": -0.19892109524119983, "compression_ratio": 1.2520325203252032, "no_speech_prob": 3.0894295832695207e-06}, {"id": 395, "seek": 260200, "start": 2602.0, "end": 2613.0, "text": " You know, we can almost generate a, we can almost generate an ANKI deck automatically from this notebook figure writing Jeremy. Oh, wow.", "tokens": [509, 458, 11, 321, 393, 1920, 8460, 257, 11, 321, 393, 1920, 8460, 364, 5252, 27731, 9341, 6772, 490, 341, 21060, 2573, 3579, 17809, 13, 876, 11, 6076, 13], "temperature": 0.0, "avg_logprob": -0.2647030694144113, "compression_ratio": 1.4594594594594594, "no_speech_prob": 4.63762580693583e-06}, {"id": 396, "seek": 260200, "start": 2613.0, "end": 2617.0, "text": " That would be another interesting exercise.", "tokens": [663, 576, 312, 1071, 1880, 5380, 13], "temperature": 0.0, "avg_logprob": -0.2647030694144113, "compression_ratio": 1.4594594594594594, "no_speech_prob": 4.63762580693583e-06}, {"id": 397, "seek": 260200, "start": 2617.0, "end": 2619.0, "text": " Love it.", "tokens": [5956, 309, 13], "temperature": 0.0, "avg_logprob": -0.2647030694144113, "compression_ratio": 1.4594594594594594, "no_speech_prob": 4.63762580693583e-06}, {"id": 398, "seek": 260200, "start": 2619.0, "end": 2624.0, "text": " Yeah, that would be sweet.", "tokens": [865, 11, 300, 576, 312, 3844, 13], "temperature": 0.0, "avg_logprob": -0.2647030694144113, "compression_ratio": 1.4594594594594594, "no_speech_prob": 4.63762580693583e-06}, {"id": 399, "seek": 262400, "start": 2624.0, "end": 2633.0, "text": " I will try to continue to write it in a way that would be that would that would make sense to do that. I certainly think so far it does.", "tokens": [286, 486, 853, 281, 2354, 281, 2464, 309, 294, 257, 636, 300, 576, 312, 300, 576, 300, 576, 652, 2020, 281, 360, 300, 13, 286, 3297, 519, 370, 1400, 309, 775, 13], "temperature": 0.0, "avg_logprob": -0.15192687069928204, "compression_ratio": 1.4539007092198581, "no_speech_prob": 2.902273536165012e-06}, {"id": 400, "seek": 262400, "start": 2633.0, "end": 2648.0, "text": " Okay, that's interesting. So not equals does have a monadic version.", "tokens": [1033, 11, 300, 311, 1880, 13, 407, 406, 6915, 775, 362, 257, 1108, 43341, 3037, 13], "temperature": 0.0, "avg_logprob": -0.15192687069928204, "compression_ratio": 1.4539007092198581, "no_speech_prob": 2.902273536165012e-06}, {"id": 401, "seek": 264800, "start": 2648.0, "end": 2657.0, "text": " Not equals. And I think it's going to be helpful during the Booleans quite early because you use Booleans a lot.", "tokens": [1726, 6915, 13, 400, 286, 519, 309, 311, 516, 281, 312, 4961, 1830, 264, 23351, 24008, 1596, 2440, 570, 291, 764, 23351, 24008, 257, 688, 13], "temperature": 0.0, "avg_logprob": -0.19625102939890393, "compression_ratio": 1.4451612903225806, "no_speech_prob": 2.947988605228602e-06}, {"id": 402, "seek": 264800, "start": 2657.0, "end": 2662.0, "text": " And when we say Boolean, we mean", "tokens": [400, 562, 321, 584, 23351, 28499, 11, 321, 914], "temperature": 0.0, "avg_logprob": -0.19625102939890393, "compression_ratio": 1.4451612903225806, "no_speech_prob": 2.947988605228602e-06}, {"id": 403, "seek": 264800, "start": 2662.0, "end": 2667.0, "text": " arrays containing zeros and ones.", "tokens": [41011, 19273, 35193, 293, 2306, 13], "temperature": 0.0, "avg_logprob": -0.19625102939890393, "compression_ratio": 1.4451612903225806, "no_speech_prob": 2.947988605228602e-06}, {"id": 404, "seek": 264800, "start": 2667.0, "end": 2671.0, "text": " Oh, wait, how did I", "tokens": [876, 11, 1699, 11, 577, 630, 286], "temperature": 0.0, "avg_logprob": -0.19625102939890393, "compression_ratio": 1.4451612903225806, "no_speech_prob": 2.947988605228602e-06}, {"id": 405, "seek": 264800, "start": 2671.0, "end": 2674.0, "text": " get to that? Not equals.", "tokens": [483, 281, 300, 30, 1726, 6915, 13], "temperature": 0.0, "avg_logprob": -0.19625102939890393, "compression_ratio": 1.4451612903225806, "no_speech_prob": 2.947988605228602e-06}, {"id": 406, "seek": 267400, "start": 2674.0, "end": 2680.0, "text": " I don't see them. Mon. Wait, monadic not equal to not defined.", "tokens": [286, 500, 380, 536, 552, 13, 4713, 13, 3802, 11, 1108, 43341, 406, 2681, 281, 406, 7642, 13], "temperature": 0.0, "avg_logprob": -0.22262663590280632, "compression_ratio": 1.3790849673202614, "no_speech_prob": 1.497041648690356e-05}, {"id": 407, "seek": 267400, "start": 2680.0, "end": 2688.0, "text": " Monadic not equal is unique mask. Whoa. Okay, that's crazy.", "tokens": [4713, 43341, 406, 2681, 307, 3845, 6094, 13, 7521, 13, 1033, 11, 300, 311, 3219, 13], "temperature": 0.0, "avg_logprob": -0.22262663590280632, "compression_ratio": 1.3790849673202614, "no_speech_prob": 1.497041648690356e-05}, {"id": 408, "seek": 267400, "start": 2688.0, "end": 2697.0, "text": " Oh, look, this is 17.1. What if I type 18.2 up here?", "tokens": [876, 11, 574, 11, 341, 307, 3282, 13, 16, 13, 708, 498, 286, 2010, 2443, 13, 17, 493, 510, 30], "temperature": 0.0, "avg_logprob": -0.22262663590280632, "compression_ratio": 1.3790849673202614, "no_speech_prob": 1.497041648690356e-05}, {"id": 409, "seek": 267400, "start": 2697.0, "end": 2702.0, "text": " Huh. Okay. Oh, that's a bit tricky.", "tokens": [8063, 13, 1033, 13, 876, 11, 300, 311, 257, 857, 12414, 13], "temperature": 0.0, "avg_logprob": -0.22262663590280632, "compression_ratio": 1.3790849673202614, "no_speech_prob": 1.497041648690356e-05}, {"id": 410, "seek": 270200, "start": 2702.0, "end": 2708.0, "text": " Let's see if they also now have a", "tokens": [961, 311, 536, 498, 436, 611, 586, 362, 257], "temperature": 0.0, "avg_logprob": -0.10483445347966375, "compression_ratio": 1.1222222222222222, "no_speech_prob": 4.35680476584821e-06}, {"id": 411, "seek": 270200, "start": 2708.0, "end": 2710.0, "text": " monadic equals.", "tokens": [1108, 43341, 6915, 13], "temperature": 0.0, "avg_logprob": -0.10483445347966375, "compression_ratio": 1.1222222222222222, "no_speech_prob": 4.35680476584821e-06}, {"id": 412, "seek": 270200, "start": 2710.0, "end": 2715.0, "text": " Things are changing. That's cool.", "tokens": [9514, 366, 4473, 13, 663, 311, 1627, 13], "temperature": 0.0, "avg_logprob": -0.10483445347966375, "compression_ratio": 1.1222222222222222, "no_speech_prob": 4.35680476584821e-06}, {"id": 413, "seek": 270200, "start": 2715.0, "end": 2721.0, "text": " They don't. Okay.", "tokens": [814, 500, 380, 13, 1033, 13], "temperature": 0.0, "avg_logprob": -0.10483445347966375, "compression_ratio": 1.1222222222222222, "no_speech_prob": 4.35680476584821e-06}, {"id": 414, "seek": 272100, "start": 2721.0, "end": 2734.0, "text": " Monadic not equal means unique mask.", "tokens": [4713, 43341, 406, 2681, 1355, 3845, 6094, 13], "temperature": 0.0, "avg_logprob": -0.10195094888860529, "compression_ratio": 1.316546762589928, "no_speech_prob": 1.8617805835674517e-05}, {"id": 415, "seek": 272100, "start": 2734.0, "end": 2745.0, "text": " This is one of the things that happens when you search for documentation using Google. It often returns the older version. Yeah, exactly. Yeah, so", "tokens": [639, 307, 472, 295, 264, 721, 300, 2314, 562, 291, 3164, 337, 14333, 1228, 3329, 13, 467, 2049, 11247, 264, 4906, 3037, 13, 865, 11, 2293, 13, 865, 11, 370], "temperature": 0.0, "avg_logprob": -0.10195094888860529, "compression_ratio": 1.316546762589928, "no_speech_prob": 1.8617805835674517e-05}, {"id": 416, "seek": 274500, "start": 2745.0, "end": 2755.0, "text": " it looks like you can use you can use close with right square bracket help followed by a glyph and then it opens the doc.", "tokens": [309, 1542, 411, 291, 393, 764, 291, 393, 764, 1998, 365, 558, 3732, 16904, 854, 6263, 538, 257, 22633, 950, 293, 550, 309, 9870, 264, 3211, 13], "temperature": 0.0, "avg_logprob": -0.23987360353823062, "compression_ratio": 1.5128205128205128, "no_speech_prob": 3.069796002819203e-05}, {"id": 417, "seek": 274500, "start": 2755.0, "end": 2761.0, "text": " Okay, great. And does that even work here?", "tokens": [1033, 11, 869, 13, 400, 775, 300, 754, 589, 510, 30], "temperature": 0.0, "avg_logprob": -0.23987360353823062, "compression_ratio": 1.5128205128205128, "no_speech_prob": 3.069796002819203e-05}, {"id": 418, "seek": 274500, "start": 2761.0, "end": 2770.0, "text": " Sorry, tell me what to type again. Help. Help with a capital H. What does it matter? I don't think it matters. And then the glyph.", "tokens": [4919, 11, 980, 385, 437, 281, 2010, 797, 13, 10773, 13, 10773, 365, 257, 4238, 389, 13, 708, 775, 309, 1871, 30, 286, 500, 380, 519, 309, 7001, 13, 400, 550, 264, 22633, 950, 13], "temperature": 0.0, "avg_logprob": -0.23987360353823062, "compression_ratio": 1.5128205128205128, "no_speech_prob": 3.069796002819203e-05}, {"id": 419, "seek": 277000, "start": 2770.0, "end": 2782.0, "text": " Oh, love it. Okay, that's that's a winning trick. Let's put that", "tokens": [876, 11, 959, 309, 13, 1033, 11, 300, 311, 300, 311, 257, 8224, 4282, 13, 961, 311, 829, 300], "temperature": 0.0, "avg_logprob": -0.17180284432002477, "compression_ratio": 1.0579710144927537, "no_speech_prob": 2.5859235392999835e-05}, {"id": 420, "seek": 277000, "start": 2782.0, "end": 2784.0, "text": " up here.", "tokens": [493, 510, 13], "temperature": 0.0, "avg_logprob": -0.17180284432002477, "compression_ratio": 1.0579710144927537, "no_speech_prob": 2.5859235392999835e-05}, {"id": 421, "seek": 278400, "start": 2784.0, "end": 2804.0, "text": " All lowercase works as well.", "tokens": [1057, 3126, 9765, 1985, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.1848723671653054, "compression_ratio": 0.7777777777777778, "no_speech_prob": 6.8522808760462794e-06}, {"id": 422, "seek": 280400, "start": 2804.0, "end": 2818.0, "text": " And I think with this train, the broadcasting only happens for only one character, I think. Can you say that at this point? Well, I want to learn more about exactly what's going on.", "tokens": [400, 286, 519, 365, 341, 3847, 11, 264, 30024, 787, 2314, 337, 787, 472, 2517, 11, 286, 519, 13, 1664, 291, 584, 300, 412, 341, 935, 30, 1042, 11, 286, 528, 281, 1466, 544, 466, 2293, 437, 311, 516, 322, 13], "temperature": 0.0, "avg_logprob": -0.15479717515919306, "compression_ratio": 1.4825870646766168, "no_speech_prob": 1.2408823749865405e-05}, {"id": 423, "seek": 280400, "start": 2818.0, "end": 2826.0, "text": " And we actually haven't talked about broadcasting at all yet. Yes. So like numpy, they do whenever it is compatible.", "tokens": [400, 321, 767, 2378, 380, 2825, 466, 30024, 412, 439, 1939, 13, 1079, 13, 407, 411, 1031, 8200, 11, 436, 360, 5699, 309, 307, 18218, 13], "temperature": 0.0, "avg_logprob": -0.15479717515919306, "compression_ratio": 1.4825870646766168, "no_speech_prob": 1.2408823749865405e-05}, {"id": 424, "seek": 282600, "start": 2826.0, "end": 2843.0, "text": " Yes, doesn't matter. That's right. Numpy does what we would call trailing access. So numpy as long as the last axes are matched, it will broadcast over the leading axes.", "tokens": [1079, 11, 1177, 380, 1871, 13, 663, 311, 558, 13, 426, 36142, 775, 437, 321, 576, 818, 944, 4883, 2105, 13, 407, 1031, 8200, 382, 938, 382, 264, 1036, 35387, 366, 21447, 11, 309, 486, 9975, 670, 264, 5775, 35387, 13], "temperature": 0.0, "avg_logprob": -0.26142088572184247, "compression_ratio": 1.330708661417323, "no_speech_prob": 9.51370475377189e-06}, {"id": 425, "seek": 284300, "start": 2843.0, "end": 2860.0, "text": " Exactly. J and BQN do the opposite. So they will as long as the leading axes match, it will broadcast over the trailing axes. APL does neither. APL only broadcasts scalars or does element wise of matching shapes.", "tokens": [7587, 13, 508, 293, 363, 48, 45, 360, 264, 6182, 13, 407, 436, 486, 382, 938, 382, 264, 5775, 35387, 2995, 11, 309, 486, 9975, 670, 264, 944, 4883, 35387, 13, 5372, 43, 775, 9662, 13, 5372, 43, 787, 9975, 82, 15664, 685, 420, 775, 4478, 10829, 295, 14324, 10854, 13], "temperature": 0.0, "avg_logprob": -0.12318600055783294, "compression_ratio": 1.6232558139534883, "no_speech_prob": 6.539843525388278e-06}, {"id": 426, "seek": 284300, "start": 2860.0, "end": 2871.0, "text": " So otherwise you have to use this thing we will come across called each. So I think we'll leave broadcasting maybe until we get to each.", "tokens": [407, 5911, 291, 362, 281, 764, 341, 551, 321, 486, 808, 2108, 1219, 1184, 13, 407, 286, 519, 321, 603, 1856, 30024, 1310, 1826, 321, 483, 281, 1184, 13], "temperature": 0.0, "avg_logprob": -0.12318600055783294, "compression_ratio": 1.6232558139534883, "no_speech_prob": 6.539843525388278e-06}, {"id": 427, "seek": 287100, "start": 2871.0, "end": 2877.0, "text": " I think I used to close for that. So now I'm questioning if I did it the right way.", "tokens": [286, 519, 286, 1143, 281, 1998, 337, 300, 13, 407, 586, 286, 478, 21257, 498, 286, 630, 309, 264, 558, 636, 13], "temperature": 0.0, "avg_logprob": -0.20078895461391394, "compression_ratio": 1.4583333333333333, "no_speech_prob": 2.6268915462424047e-05}, {"id": 428, "seek": 287100, "start": 2877.0, "end": 2897.0, "text": " Oh well, I'm not. Yeah, because I haven't gotten to it yet. I don't actually know the fully correct answer to this. So I'm sure you know more about it than I do.", "tokens": [876, 731, 11, 286, 478, 406, 13, 865, 11, 570, 286, 2378, 380, 5768, 281, 309, 1939, 13, 286, 500, 380, 767, 458, 264, 4498, 3006, 1867, 281, 341, 13, 407, 286, 478, 988, 291, 458, 544, 466, 309, 813, 286, 360, 13], "temperature": 0.0, "avg_logprob": -0.20078895461391394, "compression_ratio": 1.4583333333333333, "no_speech_prob": 2.6268915462424047e-05}, {"id": 429, "seek": 289700, "start": 2897.0, "end": 2906.0, "text": " Well, I don't know that each operator. So I think I'm just.", "tokens": [1042, 11, 286, 500, 380, 458, 300, 1184, 12973, 13, 407, 286, 519, 286, 478, 445, 13], "temperature": 0.0, "avg_logprob": -0.2894334157307943, "compression_ratio": 1.3, "no_speech_prob": 2.246774783998262e-05}, {"id": 430, "seek": 289700, "start": 2906.0, "end": 2910.0, "text": " So there's this. Yeah.", "tokens": [407, 456, 311, 341, 13, 865, 13], "temperature": 0.0, "avg_logprob": -0.2894334157307943, "compression_ratio": 1.3, "no_speech_prob": 2.246774783998262e-05}, {"id": 431, "seek": 289700, "start": 2910.0, "end": 2921.0, "text": " They call it each on that. Yeah, Jay has a more. Oh, I've used that. Yes, I need Enki.", "tokens": [814, 818, 309, 1184, 322, 300, 13, 865, 11, 11146, 575, 257, 544, 13, 876, 11, 286, 600, 1143, 300, 13, 1079, 11, 286, 643, 2193, 2984, 13], "temperature": 0.0, "avg_logprob": -0.2894334157307943, "compression_ratio": 1.3, "no_speech_prob": 2.246774783998262e-05}, {"id": 432, "seek": 292100, "start": 2921.0, "end": 2933.0, "text": " Quite right. And then there's also rank. I don't remember which one is rank.", "tokens": [20464, 558, 13, 400, 550, 456, 311, 611, 6181, 13, 286, 500, 380, 1604, 597, 472, 307, 6181, 13], "temperature": 0.0, "avg_logprob": -0.12702460289001466, "compression_ratio": 1.3541666666666667, "no_speech_prob": 1.130018245021347e-05}, {"id": 433, "seek": 292100, "start": 2933.0, "end": 2942.0, "text": " Anyway, let's let's get to that when we get to it.", "tokens": [5684, 11, 718, 311, 718, 311, 483, 281, 300, 562, 321, 483, 281, 309, 13], "temperature": 0.0, "avg_logprob": -0.12702460289001466, "compression_ratio": 1.3541666666666667, "no_speech_prob": 1.130018245021347e-05}, {"id": 434, "seek": 292100, "start": 2942.0, "end": 2948.0, "text": " Okay, so we've got to figure out what not equals does. Unique mask.", "tokens": [1033, 11, 370, 321, 600, 658, 281, 2573, 484, 437, 406, 6915, 775, 13, 1156, 1925, 6094, 13], "temperature": 0.0, "avg_logprob": -0.12702460289001466, "compression_ratio": 1.3541666666666667, "no_speech_prob": 1.130018245021347e-05}, {"id": 435, "seek": 294800, "start": 2948.0, "end": 2959.0, "text": " Let's start with their examples. Now that we know about strings, their examples are going to make more sense.", "tokens": [961, 311, 722, 365, 641, 5110, 13, 823, 300, 321, 458, 466, 13985, 11, 641, 5110, 366, 516, 281, 652, 544, 2020, 13], "temperature": 0.0, "avg_logprob": -0.10934728622436524, "compression_ratio": 1.4666666666666666, "no_speech_prob": 1.9832559701171704e-05}, {"id": 436, "seek": 294800, "start": 2959.0, "end": 2971.0, "text": " And so control shift dash is very useful for splitting a cell and then control or Apple left square bracket to", "tokens": [400, 370, 1969, 5513, 8240, 307, 588, 4420, 337, 30348, 257, 2815, 293, 550, 1969, 420, 6373, 1411, 3732, 16904, 281], "temperature": 0.0, "avg_logprob": -0.10934728622436524, "compression_ratio": 1.4666666666666666, "no_speech_prob": 1.9832559701171704e-05}, {"id": 437, "seek": 297100, "start": 2971.0, "end": 2978.0, "text": " unindent.", "tokens": [517, 471, 317, 13], "temperature": 0.0, "avg_logprob": -0.14189474284648895, "compression_ratio": 1.6615384615384616, "no_speech_prob": 7.2962543526955415e-06}, {"id": 438, "seek": 297100, "start": 2978.0, "end": 2986.0, "text": " Okay, I can already see what this is. It tells you whether or not the thing in this position, whether we've seen it before in this list.", "tokens": [1033, 11, 286, 393, 1217, 536, 437, 341, 307, 13, 467, 5112, 291, 1968, 420, 406, 264, 551, 294, 341, 2535, 11, 1968, 321, 600, 1612, 309, 949, 294, 341, 1329, 13], "temperature": 0.0, "avg_logprob": -0.14189474284648895, "compression_ratio": 1.6615384615384616, "no_speech_prob": 7.2962543526955415e-06}, {"id": 439, "seek": 297100, "start": 2986.0, "end": 2991.0, "text": " So that's unique. So far that's unique. So far that's unique. So far.", "tokens": [407, 300, 311, 3845, 13, 407, 1400, 300, 311, 3845, 13, 407, 1400, 300, 311, 3845, 13, 407, 1400, 13], "temperature": 0.0, "avg_logprob": -0.14189474284648895, "compression_ratio": 1.6615384615384616, "no_speech_prob": 7.2962543526955415e-06}, {"id": 440, "seek": 299100, "start": 2991.0, "end": 3002.0, "text": " I've seen that before. So it's a zero. And so presumably at some point we're going to learn how to use this to access just the elements of this, which are true.", "tokens": [286, 600, 1612, 300, 949, 13, 407, 309, 311, 257, 4018, 13, 400, 370, 26742, 412, 512, 935, 321, 434, 516, 281, 1466, 577, 281, 764, 341, 281, 2105, 445, 264, 4959, 295, 341, 11, 597, 366, 2074, 13], "temperature": 0.0, "avg_logprob": -0.09533477624257405, "compression_ratio": 1.4367088607594938, "no_speech_prob": 4.356845238362439e-06}, {"id": 441, "seek": 299100, "start": 3002.0, "end": 3017.0, "text": " And then that'll be how we would create a unique list of elements.", "tokens": [400, 550, 300, 603, 312, 577, 321, 576, 1884, 257, 3845, 1329, 295, 4959, 13], "temperature": 0.0, "avg_logprob": -0.09533477624257405, "compression_ratio": 1.4367088607594938, "no_speech_prob": 4.356845238362439e-06}, {"id": 442, "seek": 301700, "start": 3017.0, "end": 3024.0, "text": " Yep. If it's a first occurrence. Got it.", "tokens": [7010, 13, 759, 309, 311, 257, 700, 36122, 13, 5803, 309, 13], "temperature": 0.0, "avg_logprob": -0.14092542143429027, "compression_ratio": 1.1123595505617978, "no_speech_prob": 2.4298189600813203e-05}, {"id": 443, "seek": 301700, "start": 3024.0, "end": 3033.0, "text": " Yeah, I think it's nice to have a numeric example as well.", "tokens": [865, 11, 286, 519, 309, 311, 1481, 281, 362, 257, 7866, 299, 1365, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.14092542143429027, "compression_ratio": 1.1123595505617978, "no_speech_prob": 2.4298189600813203e-05}, {"id": 444, "seek": 303300, "start": 3033.0, "end": 3048.0, "text": " Okay, we're happy with that.", "tokens": [1033, 11, 321, 434, 2055, 365, 300, 13], "temperature": 0.0, "avg_logprob": -0.23683412869771323, "compression_ratio": 0.927536231884058, "no_speech_prob": 4.133385300519876e-05}, {"id": 445, "seek": 303300, "start": 3048.0, "end": 3054.0, "text": " Okay, these all look fine, I guess.", "tokens": [1033, 11, 613, 439, 574, 2489, 11, 286, 2041, 13], "temperature": 0.0, "avg_logprob": -0.23683412869771323, "compression_ratio": 0.927536231884058, "no_speech_prob": 4.133385300519876e-05}, {"id": 446, "seek": 305400, "start": 3054.0, "end": 3078.0, "text": " So dyadic eight not equal to.", "tokens": [407, 14584, 43341, 3180, 406, 2681, 281, 13], "temperature": 0.0, "avg_logprob": -0.36397703488667804, "compression_ratio": 0.7837837837837838, "no_speech_prob": 5.862684702151455e-06}, {"id": 447, "seek": 307800, "start": 3078.0, "end": 3085.0, "text": " Oh, I suppose I should have unindent all of those at once would have been faster, but never mind.", "tokens": [876, 11, 286, 7297, 286, 820, 362, 517, 471, 317, 439, 295, 729, 412, 1564, 576, 362, 668, 4663, 11, 457, 1128, 1575, 13], "temperature": 0.0, "avg_logprob": -0.24979150018026663, "compression_ratio": 1.2363636363636363, "no_speech_prob": 1.696291656116955e-05}, {"id": 448, "seek": 307800, "start": 3085.0, "end": 3092.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.24979150018026663, "compression_ratio": 1.2363636363636363, "no_speech_prob": 1.696291656116955e-05}, {"id": 449, "seek": 307800, "start": 3092.0, "end": 3104.0, "text": " I'm not sure this one adds much.", "tokens": [286, 478, 406, 988, 341, 472, 10860, 709, 13], "temperature": 0.0, "avg_logprob": -0.24979150018026663, "compression_ratio": 1.2363636363636363, "no_speech_prob": 1.696291656116955e-05}, {"id": 450, "seek": 310400, "start": 3104.0, "end": 3110.0, "text": " Let's keep it simple as possible, shall we? Okay.", "tokens": [961, 311, 1066, 309, 2199, 382, 1944, 11, 4393, 321, 30, 1033, 13], "temperature": 0.0, "avg_logprob": -0.1802312433719635, "compression_ratio": 1.3333333333333333, "no_speech_prob": 2.5070183255593292e-05}, {"id": 451, "seek": 310400, "start": 3110.0, "end": 3113.0, "text": " Zipping along with the easy ones.", "tokens": [1176, 6297, 2051, 365, 264, 1858, 2306, 13], "temperature": 0.0, "avg_logprob": -0.1802312433719635, "compression_ratio": 1.3333333333333333, "no_speech_prob": 2.5070183255593292e-05}, {"id": 452, "seek": 310400, "start": 3113.0, "end": 3119.0, "text": " So these are presumably going to be easy as well, although the monadic versions may be odd. We will find out.", "tokens": [407, 613, 366, 26742, 516, 281, 312, 1858, 382, 731, 11, 4878, 264, 1108, 43341, 9606, 815, 312, 7401, 13, 492, 486, 915, 484, 13], "temperature": 0.0, "avg_logprob": -0.1802312433719635, "compression_ratio": 1.3333333333333333, "no_speech_prob": 2.5070183255593292e-05}, {"id": 453, "seek": 310400, "start": 3119.0, "end": 3123.0, "text": " Oh, okay. That's easy.", "tokens": [876, 11, 1392, 13, 663, 311, 1858, 13], "temperature": 0.0, "avg_logprob": -0.1802312433719635, "compression_ratio": 1.3333333333333333, "no_speech_prob": 2.5070183255593292e-05}, {"id": 454, "seek": 312300, "start": 3123.0, "end": 3138.0, "text": " That's then.", "tokens": [663, 311, 550, 13], "temperature": 0.0, "avg_logprob": -0.529334306716919, "compression_ratio": 0.6, "no_speech_prob": 2.546153700677678e-05}, {"id": 455, "seek": 313800, "start": 3138.0, "end": 3157.0, "text": " Okay, so what I should do actually is do that and then that and then that.", "tokens": [1033, 11, 370, 437, 286, 820, 360, 767, 307, 360, 300, 293, 550, 300, 293, 550, 300, 13], "temperature": 0.0, "avg_logprob": -0.16481837034225463, "compression_ratio": 1.3232323232323233, "no_speech_prob": 6.240627044462599e-06}, {"id": 456, "seek": 313800, "start": 3157.0, "end": 3162.0, "text": " Cool.", "tokens": [8561, 13], "temperature": 0.0, "avg_logprob": -0.16481837034225463, "compression_ratio": 1.3232323232323233, "no_speech_prob": 6.240627044462599e-06}, {"id": 457, "seek": 313800, "start": 3162.0, "end": 3166.0, "text": " And I assume greater than is going to be the same.", "tokens": [400, 286, 6552, 5044, 813, 307, 516, 281, 312, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.16481837034225463, "compression_ratio": 1.3232323232323233, "no_speech_prob": 6.240627044462599e-06}, {"id": 458, "seek": 316600, "start": 3166.0, "end": 3174.0, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.23252018427444718, "compression_ratio": 1.5, "no_speech_prob": 1.3629784916702192e-05}, {"id": 459, "seek": 316600, "start": 3174.0, "end": 3180.0, "text": " Is the broadcasting supposed to work just like characters even here?", "tokens": [1119, 264, 30024, 3442, 281, 589, 445, 411, 4342, 754, 510, 30], "temperature": 0.0, "avg_logprob": -0.23252018427444718, "compression_ratio": 1.5, "no_speech_prob": 1.3629784916702192e-05}, {"id": 460, "seek": 316600, "start": 3180.0, "end": 3183.0, "text": " Yeah, yeah, this is just a one element.", "tokens": [865, 11, 1338, 11, 341, 307, 445, 257, 472, 4478, 13], "temperature": 0.0, "avg_logprob": -0.23252018427444718, "compression_ratio": 1.5, "no_speech_prob": 1.3629784916702192e-05}, {"id": 461, "seek": 316600, "start": 3183.0, "end": 3191.0, "text": " This is just a sorry this is just a scalar, you know, strings, not there, not there below.", "tokens": [639, 307, 445, 257, 2597, 341, 307, 445, 257, 39684, 11, 291, 458, 11, 13985, 11, 406, 456, 11, 406, 456, 2507, 13], "temperature": 0.0, "avg_logprob": -0.23252018427444718, "compression_ratio": 1.5, "no_speech_prob": 1.3629784916702192e-05}, {"id": 462, "seek": 319100, "start": 3191.0, "end": 3198.0, "text": " Yeah, yeah, for less than yes should be exactly the same. So I've got a scalar here and unless and an array here so the scalar will broadcast over the array.", "tokens": [865, 11, 1338, 11, 337, 1570, 813, 2086, 820, 312, 2293, 264, 912, 13, 407, 286, 600, 658, 257, 39684, 510, 293, 5969, 293, 364, 10225, 510, 370, 264, 39684, 486, 9975, 670, 264, 10225, 13], "temperature": 0.0, "avg_logprob": -0.2841021946498326, "compression_ratio": 1.432748538011696, "no_speech_prob": 5.25459881828283e-06}, {"id": 463, "seek": 319100, "start": 3198.0, "end": 3202.0, "text": " Okay, so if we have a matrix and a vector done.", "tokens": [1033, 11, 370, 498, 321, 362, 257, 8141, 293, 257, 8062, 1096, 13], "temperature": 0.0, "avg_logprob": -0.2841021946498326, "compression_ratio": 1.432748538011696, "no_speech_prob": 5.25459881828283e-06}, {"id": 464, "seek": 319100, "start": 3202.0, "end": 3205.0, "text": " Correct.", "tokens": [12753, 13], "temperature": 0.0, "avg_logprob": -0.2841021946498326, "compression_ratio": 1.432748538011696, "no_speech_prob": 5.25459881828283e-06}, {"id": 465, "seek": 319100, "start": 3205.0, "end": 3208.0, "text": " Without using each.", "tokens": [9129, 1228, 1184, 13], "temperature": 0.0, "avg_logprob": -0.2841021946498326, "compression_ratio": 1.432748538011696, "no_speech_prob": 5.25459881828283e-06}, {"id": 466, "seek": 319100, "start": 3208.0, "end": 3210.0, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.2841021946498326, "compression_ratio": 1.432748538011696, "no_speech_prob": 5.25459881828283e-06}, {"id": 467, "seek": 321000, "start": 3210.0, "end": 3223.0, "text": " But we will get to it. So let's look at the greater than.", "tokens": [583, 321, 486, 483, 281, 309, 13, 407, 718, 311, 574, 412, 264, 5044, 813, 13], "temperature": 0.0, "avg_logprob": -0.23088011145591736, "compression_ratio": 1.412162162162162, "no_speech_prob": 4.2644242057576776e-05}, {"id": 468, "seek": 321000, "start": 3223.0, "end": 3228.0, "text": " I guess it's fine. We've got some which are a bit trivially easy because.", "tokens": [286, 2041, 309, 311, 2489, 13, 492, 600, 658, 512, 597, 366, 257, 857, 1376, 85, 2270, 1858, 570, 13], "temperature": 0.0, "avg_logprob": -0.23088011145591736, "compression_ratio": 1.412162162162162, "no_speech_prob": 4.2644242057576776e-05}, {"id": 469, "seek": 321000, "start": 3228.0, "end": 3238.0, "text": " Just go fast. All right. So what are the greater than equal to? Are they all?", "tokens": [1449, 352, 2370, 13, 1057, 558, 13, 407, 437, 366, 264, 5044, 813, 2681, 281, 30, 2014, 436, 439, 30], "temperature": 0.0, "avg_logprob": -0.23088011145591736, "compression_ratio": 1.412162162162162, "no_speech_prob": 4.2644242057576776e-05}, {"id": 470, "seek": 323800, "start": 3238.0, "end": 3241.0, "text": " Cool.", "tokens": [8561, 13], "temperature": 0.0, "avg_logprob": -0.207191987471147, "compression_ratio": 1.1176470588235294, "no_speech_prob": 6.204516103025526e-05}, {"id": 471, "seek": 323800, "start": 3241.0, "end": 3251.0, "text": " All right. So we may as well just copy this.", "tokens": [1057, 558, 13, 407, 321, 815, 382, 731, 445, 5055, 341, 13], "temperature": 0.0, "avg_logprob": -0.207191987471147, "compression_ratio": 1.1176470588235294, "no_speech_prob": 6.204516103025526e-05}, {"id": 472, "seek": 323800, "start": 3251.0, "end": 3263.0, "text": " And we could just say less than or equal to.", "tokens": [400, 321, 727, 445, 584, 1570, 813, 420, 2681, 281, 13], "temperature": 0.0, "avg_logprob": -0.207191987471147, "compression_ratio": 1.1176470588235294, "no_speech_prob": 6.204516103025526e-05}, {"id": 473, "seek": 326300, "start": 3263.0, "end": 3269.0, "text": " Less than.", "tokens": [18649, 813, 13], "temperature": 0.0, "avg_logprob": -0.3768666585286458, "compression_ratio": 1.3222222222222222, "no_speech_prob": 2.668639899638947e-05}, {"id": 474, "seek": 326300, "start": 3269.0, "end": 3274.0, "text": " Not worked at all.", "tokens": [1726, 2732, 412, 439, 13], "temperature": 0.0, "avg_logprob": -0.3768666585286458, "compression_ratio": 1.3222222222222222, "no_speech_prob": 2.668639899638947e-05}, {"id": 475, "seek": 326300, "start": 3274.0, "end": 3277.0, "text": " Then are equal to.", "tokens": [1396, 366, 2681, 281, 13], "temperature": 0.0, "avg_logprob": -0.3768666585286458, "compression_ratio": 1.3222222222222222, "no_speech_prob": 2.668639899638947e-05}, {"id": 476, "seek": 326300, "start": 3277.0, "end": 3281.0, "text": " Greater than or equal to.", "tokens": [38410, 813, 420, 2681, 281, 13], "temperature": 0.0, "avg_logprob": -0.3768666585286458, "compression_ratio": 1.3222222222222222, "no_speech_prob": 2.668639899638947e-05}, {"id": 477, "seek": 326300, "start": 3281.0, "end": 3283.0, "text": " Then are equal to.", "tokens": [1396, 366, 2681, 281, 13], "temperature": 0.0, "avg_logprob": -0.3768666585286458, "compression_ratio": 1.3222222222222222, "no_speech_prob": 2.668639899638947e-05}, {"id": 478, "seek": 326300, "start": 3283.0, "end": 3287.0, "text": " And how do we type these?", "tokens": [400, 577, 360, 321, 2010, 613, 30], "temperature": 0.0, "avg_logprob": -0.3768666585286458, "compression_ratio": 1.3222222222222222, "no_speech_prob": 2.668639899638947e-05}, {"id": 479, "seek": 328700, "start": 3287.0, "end": 3298.0, "text": " Six and four. I see. So we've got four. Six. Eight.", "tokens": [11678, 293, 1451, 13, 286, 536, 13, 407, 321, 600, 658, 1451, 13, 11678, 13, 17708, 13], "temperature": 0.0, "avg_logprob": -0.17204917560924182, "compression_ratio": 1.1650485436893203, "no_speech_prob": 2.546508221712429e-05}, {"id": 480, "seek": 328700, "start": 3298.0, "end": 3303.0, "text": " Is this one four because it's the smallest?", "tokens": [1119, 341, 472, 1451, 570, 309, 311, 264, 16998, 30], "temperature": 0.0, "avg_logprob": -0.17204917560924182, "compression_ratio": 1.1650485436893203, "no_speech_prob": 2.546508221712429e-05}, {"id": 481, "seek": 328700, "start": 3303.0, "end": 3312.0, "text": " Yes, it is. That's good.", "tokens": [1079, 11, 309, 307, 13, 663, 311, 665, 13], "temperature": 0.0, "avg_logprob": -0.17204917560924182, "compression_ratio": 1.1650485436893203, "no_speech_prob": 2.546508221712429e-05}, {"id": 482, "seek": 331200, "start": 3312.0, "end": 3322.0, "text": " This will be six.", "tokens": [639, 486, 312, 2309, 13], "temperature": 0.0, "avg_logprob": -0.19498538970947266, "compression_ratio": 0.9538461538461539, "no_speech_prob": 5.649074591929093e-05}, {"id": 483, "seek": 331200, "start": 3322.0, "end": 3326.0, "text": " And then we'll need that here as well.", "tokens": [400, 550, 321, 603, 643, 300, 510, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.19498538970947266, "compression_ratio": 0.9538461538461539, "no_speech_prob": 5.649074591929093e-05}, {"id": 484, "seek": 331200, "start": 3326.0, "end": 3334.0, "text": " Four.", "tokens": [7451, 13], "temperature": 0.0, "avg_logprob": -0.19498538970947266, "compression_ratio": 0.9538461538461539, "no_speech_prob": 5.649074591929093e-05}, {"id": 485, "seek": 333400, "start": 3334.0, "end": 3342.0, "text": " And six.", "tokens": [400, 2309, 13], "temperature": 0.0, "avg_logprob": -0.1444431940714518, "compression_ratio": 0.873015873015873, "no_speech_prob": 3.5344146454008296e-05}, {"id": 486, "seek": 333400, "start": 3342.0, "end": 3350.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.1444431940714518, "compression_ratio": 0.873015873015873, "no_speech_prob": 3.5344146454008296e-05}, {"id": 487, "seek": 333400, "start": 3350.0, "end": 3352.0, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.1444431940714518, "compression_ratio": 0.873015873015873, "no_speech_prob": 3.5344146454008296e-05}, {"id": 488, "seek": 333400, "start": 3352.0, "end": 3359.0, "text": " I guess we're up to this one.", "tokens": [286, 2041, 321, 434, 493, 281, 341, 472, 13], "temperature": 0.0, "avg_logprob": -0.1444431940714518, "compression_ratio": 0.873015873015873, "no_speech_prob": 3.5344146454008296e-05}, {"id": 489, "seek": 335900, "start": 3359.0, "end": 3368.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.15129203012544815, "compression_ratio": 1.6066666666666667, "no_speech_prob": 1.4970212760090362e-05}, {"id": 490, "seek": 335900, "start": 3368.0, "end": 3375.0, "text": " Yeah. So when a character is the same as another character, but with an extra underline, they use the word underbar.", "tokens": [865, 13, 407, 562, 257, 2517, 307, 264, 912, 382, 1071, 2517, 11, 457, 365, 364, 2857, 833, 1889, 11, 436, 764, 264, 1349, 833, 5356, 13], "temperature": 0.0, "avg_logprob": -0.15129203012544815, "compression_ratio": 1.6066666666666667, "no_speech_prob": 1.4970212760090362e-05}, {"id": 491, "seek": 335900, "start": 3375.0, "end": 3379.0, "text": " So, for example, there's an iota underbar.", "tokens": [407, 11, 337, 1365, 11, 456, 311, 364, 741, 5377, 833, 5356, 13], "temperature": 0.0, "avg_logprob": -0.15129203012544815, "compression_ratio": 1.6066666666666667, "no_speech_prob": 1.4970212760090362e-05}, {"id": 492, "seek": 335900, "start": 3379.0, "end": 3382.0, "text": " And there's an epsilon underbar.", "tokens": [400, 456, 311, 364, 17889, 833, 5356, 13], "temperature": 0.0, "avg_logprob": -0.15129203012544815, "compression_ratio": 1.6066666666666667, "no_speech_prob": 1.4970212760090362e-05}, {"id": 493, "seek": 335900, "start": 3382.0, "end": 3386.0, "text": " What other ones are there? Equal underbar.", "tokens": [708, 661, 2306, 366, 456, 30, 15624, 304, 833, 5356, 13], "temperature": 0.0, "avg_logprob": -0.15129203012544815, "compression_ratio": 1.6066666666666667, "no_speech_prob": 1.4970212760090362e-05}, {"id": 494, "seek": 338600, "start": 3386.0, "end": 3390.0, "text": " There's one. Left shoe underbar.", "tokens": [821, 311, 472, 13, 16405, 12796, 833, 5356, 13], "temperature": 0.0, "avg_logprob": -0.12362635653951894, "compression_ratio": 1.238938053097345, "no_speech_prob": 1.1659400115604512e-05}, {"id": 495, "seek": 338600, "start": 3390.0, "end": 3393.0, "text": " I think that's it.", "tokens": [286, 519, 300, 311, 309, 13], "temperature": 0.0, "avg_logprob": -0.12362635653951894, "compression_ratio": 1.238938053097345, "no_speech_prob": 1.1659400115604512e-05}, {"id": 496, "seek": 338600, "start": 3393.0, "end": 3401.0, "text": " And this is comma bar because it's not underneath it.", "tokens": [400, 341, 307, 22117, 2159, 570, 309, 311, 406, 7223, 309, 13], "temperature": 0.0, "avg_logprob": -0.12362635653951894, "compression_ratio": 1.238938053097345, "no_speech_prob": 1.1659400115604512e-05}, {"id": 497, "seek": 338600, "start": 3401.0, "end": 3413.0, "text": " Okay. So equals underbar is colon.", "tokens": [1033, 13, 407, 6915, 833, 5356, 307, 8255, 13], "temperature": 0.0, "avg_logprob": -0.12362635653951894, "compression_ratio": 1.238938053097345, "no_speech_prob": 1.1659400115604512e-05}, {"id": 498, "seek": 341300, "start": 3413.0, "end": 3417.0, "text": " Equal underbar.", "tokens": [15624, 304, 833, 5356, 13], "temperature": 0.0, "avg_logprob": -0.05994253808801824, "compression_ratio": 1.3066666666666666, "no_speech_prob": 2.026111587838386e-06}, {"id": 499, "seek": 341300, "start": 3417.0, "end": 3423.0, "text": " And the monadic version of that is depth.", "tokens": [400, 264, 1108, 43341, 3037, 295, 300, 307, 7161, 13], "temperature": 0.0, "avg_logprob": -0.05994253808801824, "compression_ratio": 1.3066666666666666, "no_speech_prob": 2.026111587838386e-06}, {"id": 500, "seek": 341300, "start": 3423.0, "end": 3431.0, "text": " And the dyadic version of that is match.", "tokens": [400, 264, 14584, 43341, 3037, 295, 300, 307, 2995, 13], "temperature": 0.0, "avg_logprob": -0.05994253808801824, "compression_ratio": 1.3066666666666666, "no_speech_prob": 2.026111587838386e-06}, {"id": 501, "seek": 343100, "start": 3431.0, "end": 3454.0, "text": " Okay. Depth.", "tokens": [1033, 13, 4056, 392, 13], "temperature": 0.0, "avg_logprob": -0.1863044261932373, "compression_ratio": 0.8490566037735849, "no_speech_prob": 7.64634387451224e-06}, {"id": 502, "seek": 343100, "start": 3454.0, "end": 3456.0, "text": " Let's see if we can guess first.", "tokens": [961, 311, 536, 498, 321, 393, 2041, 700, 13], "temperature": 0.0, "avg_logprob": -0.1863044261932373, "compression_ratio": 0.8490566037735849, "no_speech_prob": 7.64634387451224e-06}, {"id": 503, "seek": 345600, "start": 3456.0, "end": 3463.0, "text": " So can anybody figure it out? Depth is seven zero. You can see. Is it the same as rank?", "tokens": [407, 393, 4472, 2573, 309, 484, 30, 4056, 392, 307, 3407, 4018, 13, 509, 393, 536, 13, 1119, 309, 264, 912, 382, 6181, 30], "temperature": 0.0, "avg_logprob": -0.14375223652009042, "compression_ratio": 1.3380281690140845, "no_speech_prob": 5.771861651737709e-06}, {"id": 504, "seek": 345600, "start": 3463.0, "end": 3465.0, "text": " Not quite.", "tokens": [1726, 1596, 13], "temperature": 0.0, "avg_logprob": -0.14375223652009042, "compression_ratio": 1.3380281690140845, "no_speech_prob": 5.771861651737709e-06}, {"id": 505, "seek": 345600, "start": 3465.0, "end": 3471.0, "text": " Oh, this is like not consistent.", "tokens": [876, 11, 341, 307, 411, 406, 8398, 13], "temperature": 0.0, "avg_logprob": -0.14375223652009042, "compression_ratio": 1.3380281690140845, "no_speech_prob": 5.771861651737709e-06}, {"id": 506, "seek": 345600, "start": 3471.0, "end": 3480.0, "text": " What does that do?", "tokens": [708, 775, 300, 360, 30], "temperature": 0.0, "avg_logprob": -0.14375223652009042, "compression_ratio": 1.3380281690140845, "no_speech_prob": 5.771861651737709e-06}, {"id": 507, "seek": 345600, "start": 3480.0, "end": 3485.0, "text": " And what about this? What does this do?", "tokens": [400, 437, 466, 341, 30, 708, 775, 341, 360, 30], "temperature": 0.0, "avg_logprob": -0.14375223652009042, "compression_ratio": 1.3380281690140845, "no_speech_prob": 5.771861651737709e-06}, {"id": 508, "seek": 348500, "start": 3485.0, "end": 3487.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.11862505313962005, "compression_ratio": 1.2017543859649122, "no_speech_prob": 1.8923712559626438e-05}, {"id": 509, "seek": 348500, "start": 3487.0, "end": 3492.0, "text": " We're going to have to introduce something new first then.", "tokens": [492, 434, 516, 281, 362, 281, 5366, 746, 777, 700, 550, 13], "temperature": 0.0, "avg_logprob": -0.11862505313962005, "compression_ratio": 1.2017543859649122, "no_speech_prob": 1.8923712559626438e-05}, {"id": 510, "seek": 348500, "start": 3492.0, "end": 3500.0, "text": " Which is arrays and arrays.", "tokens": [3013, 307, 41011, 293, 41011, 13], "temperature": 0.0, "avg_logprob": -0.11862505313962005, "compression_ratio": 1.2017543859649122, "no_speech_prob": 1.8923712559626438e-05}, {"id": 511, "seek": 348500, "start": 3500.0, "end": 3513.0, "text": " Let's see, where's a good place to put that?", "tokens": [961, 311, 536, 11, 689, 311, 257, 665, 1081, 281, 829, 300, 30], "temperature": 0.0, "avg_logprob": -0.11862505313962005, "compression_ratio": 1.2017543859649122, "no_speech_prob": 1.8923712559626438e-05}, {"id": 512, "seek": 351300, "start": 3513.0, "end": 3523.0, "text": " We have a complex object section or something next to basic objects.", "tokens": [492, 362, 257, 3997, 2657, 3541, 420, 746, 958, 281, 3875, 6565, 13], "temperature": 0.0, "avg_logprob": -0.4159351984659831, "compression_ratio": 1.1875, "no_speech_prob": 1.5445079043274745e-05}, {"id": 513, "seek": 351300, "start": 3523.0, "end": 3535.0, "text": " Maybe just fixing these heading levels wrong.", "tokens": [2704, 445, 19442, 613, 9864, 4358, 2085, 13], "temperature": 0.0, "avg_logprob": -0.4159351984659831, "compression_ratio": 1.1875, "no_speech_prob": 1.5445079043274745e-05}, {"id": 514, "seek": 353500, "start": 3535.0, "end": 3543.0, "text": " Basic objects here.", "tokens": [31598, 6565, 510, 13], "temperature": 0.0, "avg_logprob": -0.14380359649658203, "compression_ratio": 1.1168831168831168, "no_speech_prob": 7.182444733189186e-06}, {"id": 515, "seek": 353500, "start": 3543.0, "end": 3550.0, "text": " I was going to say some objects.", "tokens": [286, 390, 516, 281, 584, 512, 6565, 13], "temperature": 0.0, "avg_logprob": -0.14380359649658203, "compression_ratio": 1.1168831168831168, "no_speech_prob": 7.182444733189186e-06}, {"id": 516, "seek": 353500, "start": 3550.0, "end": 3559.0, "text": " Then we can say arrays in arrays.", "tokens": [1396, 321, 393, 584, 41011, 294, 41011, 13], "temperature": 0.0, "avg_logprob": -0.14380359649658203, "compression_ratio": 1.1168831168831168, "no_speech_prob": 7.182444733189186e-06}, {"id": 517, "seek": 355900, "start": 3559.0, "end": 3574.0, "text": " Yes, because we don't need to know about matrices to be able to do this.", "tokens": [1079, 11, 570, 321, 500, 380, 643, 281, 458, 466, 32284, 281, 312, 1075, 281, 360, 341, 13], "temperature": 0.0, "avg_logprob": -0.171872475567986, "compression_ratio": 1.4475524475524475, "no_speech_prob": 1.892381624202244e-05}, {"id": 518, "seek": 355900, "start": 3574.0, "end": 3583.0, "text": " And I think single characters and multi-linked characters are handled differently and nest differently.", "tokens": [400, 286, 519, 2167, 4342, 293, 4825, 12, 22473, 292, 4342, 366, 18033, 7614, 293, 15646, 7614, 13], "temperature": 0.0, "avg_logprob": -0.171872475567986, "compression_ratio": 1.4475524475524475, "no_speech_prob": 1.892381624202244e-05}, {"id": 519, "seek": 355900, "start": 3583.0, "end": 3587.0, "text": " If they're mixed with numbers.", "tokens": [759, 436, 434, 7467, 365, 3547, 13], "temperature": 0.0, "avg_logprob": -0.171872475567986, "compression_ratio": 1.4475524475524475, "no_speech_prob": 1.892381624202244e-05}, {"id": 520, "seek": 358700, "start": 3587.0, "end": 3592.0, "text": " Okay, let's get some examples I could use.", "tokens": [1033, 11, 718, 311, 483, 512, 5110, 286, 727, 764, 13], "temperature": 0.0, "avg_logprob": -0.20837406158447266, "compression_ratio": 1.5759493670886076, "no_speech_prob": 2.3185642930911854e-05}, {"id": 521, "seek": 358700, "start": 3592.0, "end": 3601.0, "text": " So if we've got like one, two, three, four, AB. You mean something like this?", "tokens": [407, 498, 321, 600, 658, 411, 472, 11, 732, 11, 1045, 11, 1451, 11, 13838, 13, 509, 914, 746, 411, 341, 30], "temperature": 0.0, "avg_logprob": -0.20837406158447266, "compression_ratio": 1.5759493670886076, "no_speech_prob": 2.3185642930911854e-05}, {"id": 522, "seek": 358700, "start": 3601.0, "end": 3616.0, "text": " I think if you just do like even without the parentheses, like one, two, three, four, AB. I think it will nest the A and the AB.", "tokens": [286, 519, 498, 291, 445, 360, 411, 754, 1553, 264, 34153, 11, 411, 472, 11, 732, 11, 1045, 11, 1451, 11, 13838, 13, 286, 519, 309, 486, 15646, 264, 316, 293, 264, 13838, 13], "temperature": 0.0, "avg_logprob": -0.20837406158447266, "compression_ratio": 1.5759493670886076, "no_speech_prob": 2.3185642930911854e-05}, {"id": 523, "seek": 361600, "start": 3616.0, "end": 3624.0, "text": " I think it does something a little bit different if you just do one, two, three, four, and then just write.", "tokens": [286, 519, 309, 775, 746, 257, 707, 857, 819, 498, 291, 445, 360, 472, 11, 732, 11, 1045, 11, 1451, 11, 293, 550, 445, 2464, 13], "temperature": 0.0, "avg_logprob": -0.17172006766001383, "compression_ratio": 1.5056179775280898, "no_speech_prob": 2.014456913457252e-05}, {"id": 524, "seek": 361600, "start": 3624.0, "end": 3629.0, "text": " That sounds right because it wouldn't be a list.", "tokens": [663, 3263, 558, 570, 309, 2759, 380, 312, 257, 1329, 13], "temperature": 0.0, "avg_logprob": -0.17172006766001383, "compression_ratio": 1.5056179775280898, "no_speech_prob": 2.014456913457252e-05}, {"id": 525, "seek": 361600, "start": 3629.0, "end": 3637.0, "text": " Okay, so the reason is actually is that this one here is identical to this.", "tokens": [1033, 11, 370, 264, 1778, 307, 767, 307, 300, 341, 472, 510, 307, 14800, 281, 341, 13], "temperature": 0.0, "avg_logprob": -0.17172006766001383, "compression_ratio": 1.5056179775280898, "no_speech_prob": 2.014456913457252e-05}, {"id": 526, "seek": 361600, "start": 3637.0, "end": 3640.0, "text": " And that this is actually an array.", "tokens": [400, 300, 341, 307, 767, 364, 10225, 13], "temperature": 0.0, "avg_logprob": -0.17172006766001383, "compression_ratio": 1.5056179775280898, "no_speech_prob": 2.014456913457252e-05}, {"id": 527, "seek": 364000, "start": 3640.0, "end": 3648.0, "text": " And so this is actually an array. So this is an array containing array. This is also an array containing an array.", "tokens": [400, 370, 341, 307, 767, 364, 10225, 13, 407, 341, 307, 364, 10225, 19273, 10225, 13, 639, 307, 611, 364, 10225, 19273, 364, 10225, 13], "temperature": 0.0, "avg_logprob": -0.09231396972155961, "compression_ratio": 1.5671641791044777, "no_speech_prob": 2.9022733087913366e-06}, {"id": 528, "seek": 364000, "start": 3648.0, "end": 3655.0, "text": " And so let's move this one up here.", "tokens": [400, 370, 718, 311, 1286, 341, 472, 493, 510, 13], "temperature": 0.0, "avg_logprob": -0.09231396972155961, "compression_ratio": 1.5671641791044777, "no_speech_prob": 2.9022733087913366e-06}, {"id": 529, "seek": 364000, "start": 3655.0, "end": 3659.0, "text": " All right. Great.", "tokens": [1057, 558, 13, 3769, 13], "temperature": 0.0, "avg_logprob": -0.09231396972155961, "compression_ratio": 1.5671641791044777, "no_speech_prob": 2.9022733087913366e-06}, {"id": 530, "seek": 364000, "start": 3659.0, "end": 3668.0, "text": " Seems like a good place to stop, I think.", "tokens": [22524, 411, 257, 665, 1081, 281, 1590, 11, 286, 519, 13], "temperature": 0.0, "avg_logprob": -0.09231396972155961, "compression_ratio": 1.5671641791044777, "no_speech_prob": 2.9022733087913366e-06}, {"id": 531, "seek": 366800, "start": 3668.0, "end": 3674.0, "text": " And we can look at match tomorrow.", "tokens": [400, 321, 393, 574, 412, 2995, 4153, 13], "temperature": 0.0, "avg_logprob": -0.18598260050234589, "compression_ratio": 1.2991452991452992, "no_speech_prob": 6.397479592124e-05}, {"id": 532, "seek": 366800, "start": 3674.0, "end": 3676.0, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.18598260050234589, "compression_ratio": 1.2991452991452992, "no_speech_prob": 6.397479592124e-05}, {"id": 533, "seek": 366800, "start": 3676.0, "end": 3678.0, "text": " Thanks all.", "tokens": [2561, 439, 13], "temperature": 0.0, "avg_logprob": -0.18598260050234589, "compression_ratio": 1.2991452991452992, "no_speech_prob": 6.397479592124e-05}, {"id": 534, "seek": 366800, "start": 3678.0, "end": 3685.0, "text": " Well, this was fun as usual. Thank you for hosting Jeremy. My pleasure. Thank you for joining.", "tokens": [1042, 11, 341, 390, 1019, 382, 7713, 13, 1044, 291, 337, 16058, 17809, 13, 1222, 6834, 13, 1044, 291, 337, 5549, 13], "temperature": 0.0, "avg_logprob": -0.18598260050234589, "compression_ratio": 1.2991452991452992, "no_speech_prob": 6.397479592124e-05}, {"id": 535, "seek": 368500, "start": 3685.0, "end": 3699.0, "text": " I have something to add. So when you said like those characters are in Greek and they actually benefit Europeans, not quite. I mean, if you have taken math in high school, you know all the Greek alphabet.", "tokens": [286, 362, 746, 281, 909, 13, 407, 562, 291, 848, 411, 729, 4342, 366, 294, 10281, 293, 436, 767, 5121, 29746, 11, 406, 1596, 13, 286, 914, 11, 498, 291, 362, 2726, 5221, 294, 1090, 1395, 11, 291, 458, 439, 264, 10281, 23339, 13], "temperature": 0.0, "avg_logprob": -0.16772909164428712, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.00015574594726786017}, {"id": 536, "seek": 368500, "start": 3699.0, "end": 3702.0, "text": " Yeah, physics, chemistry, everything has to do with it.", "tokens": [865, 11, 10649, 11, 12558, 11, 1203, 575, 281, 360, 365, 309, 13], "temperature": 0.0, "avg_logprob": -0.16772909164428712, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.00015574594726786017}, {"id": 537, "seek": 368500, "start": 3702.0, "end": 3712.0, "text": " But I mean, I've forgotten it all. I have a hard time remembering all the characters and I always mean to go back and learn them and I just never do.", "tokens": [583, 286, 914, 11, 286, 600, 11832, 309, 439, 13, 286, 362, 257, 1152, 565, 20719, 439, 264, 4342, 293, 286, 1009, 914, 281, 352, 646, 293, 1466, 552, 293, 286, 445, 1128, 360, 13], "temperature": 0.0, "avg_logprob": -0.16772909164428712, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.00015574594726786017}, {"id": 538, "seek": 371200, "start": 3712.0, "end": 3722.0, "text": " I mean, they can get really confusing if you know other languages like Russian, because like the R in Russian comes from the Greek row, but their character is just a P.", "tokens": [286, 914, 11, 436, 393, 483, 534, 13181, 498, 291, 458, 661, 8650, 411, 7220, 11, 570, 411, 264, 497, 294, 7220, 1487, 490, 264, 10281, 5386, 11, 457, 641, 2517, 307, 445, 257, 430, 13], "temperature": 0.0, "avg_logprob": -0.16935551684835684, "compression_ratio": 1.553763440860215, "no_speech_prob": 3.94194430555217e-05}, {"id": 539, "seek": 371200, "start": 3722.0, "end": 3729.0, "text": " So that's a huge pet peeve of mine is you have a lot of like redundant characters when you're using those Greek letters.", "tokens": [407, 300, 311, 257, 2603, 3817, 21343, 303, 295, 3892, 307, 291, 362, 257, 688, 295, 411, 40997, 4342, 562, 291, 434, 1228, 729, 10281, 7825, 13], "temperature": 0.0, "avg_logprob": -0.16935551684835684, "compression_ratio": 1.553763440860215, "no_speech_prob": 3.94194430555217e-05}, {"id": 540, "seek": 372900, "start": 3729.0, "end": 3744.0, "text": " So there's this one of the guys that wrote a lot of the stuff in dialog APL left and created a new language called BQN. And one of the things he did in his simple set was not to have any, any characters from an alphabet.", "tokens": [407, 456, 311, 341, 472, 295, 264, 1074, 300, 4114, 257, 688, 295, 264, 1507, 294, 19308, 5372, 43, 1411, 293, 2942, 257, 777, 2856, 1219, 363, 48, 45, 13, 400, 472, 295, 264, 721, 415, 630, 294, 702, 2199, 992, 390, 406, 281, 362, 604, 11, 604, 4342, 490, 364, 23339, 13], "temperature": 0.0, "avg_logprob": -0.14941895709318273, "compression_ratio": 1.4195402298850575, "no_speech_prob": 5.1343951781746e-05}, {"id": 541, "seek": 372900, "start": 3744.0, "end": 3746.0, "text": " Full stop.", "tokens": [13841, 1590, 13], "temperature": 0.0, "avg_logprob": -0.14941895709318273, "compression_ratio": 1.4195402298850575, "no_speech_prob": 5.1343951781746e-05}, {"id": 542, "seek": 372900, "start": 3746.0, "end": 3748.0, "text": " This is better.", "tokens": [639, 307, 1101, 13], "temperature": 0.0, "avg_logprob": -0.14941895709318273, "compression_ratio": 1.4195402298850575, "no_speech_prob": 5.1343951781746e-05}, {"id": 543, "seek": 374800, "start": 3748.0, "end": 3759.0, "text": " Which, yeah, it was a decision I mean I guess these are letters I don't know why he can justify these exactly but I guess they're kind of not because they've got an extra dash on them or something.", "tokens": [3013, 11, 1338, 11, 309, 390, 257, 3537, 286, 914, 286, 2041, 613, 366, 7825, 286, 500, 380, 458, 983, 415, 393, 20833, 613, 2293, 457, 286, 2041, 436, 434, 733, 295, 406, 570, 436, 600, 658, 364, 2857, 8240, 322, 552, 420, 746, 13], "temperature": 0.0, "avg_logprob": -0.1808132057759299, "compression_ratio": 1.4166666666666667, "no_speech_prob": 4.393856943352148e-05}, {"id": 544, "seek": 374800, "start": 3759.0, "end": 3760.0, "text": " Anyway.", "tokens": [5684, 13], "temperature": 0.0, "avg_logprob": -0.1808132057759299, "compression_ratio": 1.4166666666666667, "no_speech_prob": 4.393856943352148e-05}, {"id": 545, "seek": 374800, "start": 3760.0, "end": 3762.0, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.1808132057759299, "compression_ratio": 1.4166666666666667, "no_speech_prob": 4.393856943352148e-05}, {"id": 546, "seek": 374800, "start": 3762.0, "end": 3764.0, "text": " Bye. Have a good day.", "tokens": [4621, 13, 3560, 257, 665, 786, 13], "temperature": 0.0, "avg_logprob": -0.1808132057759299, "compression_ratio": 1.4166666666666667, "no_speech_prob": 4.393856943352148e-05}, {"id": 547, "seek": 376400, "start": 3764.0, "end": 3779.0, "text": " Yeah, bye.", "tokens": [50364, 865, 11, 6543, 13, 51114], "temperature": 0.0, "avg_logprob": -0.5516659532274518, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.0006024573231115937}], "language": "en"}