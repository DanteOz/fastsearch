{"text": " Hi, can you all see me and hear me okay? Great. Great. What is 5x5 mean Fred? And does anybody have any requests for stuff they would like to see today? Feel free to ask. No, good. I think 5x5 is being the weightlifting I do. Five reps. Five plots of five reps. Okay. So in the absence of requests, I will show you something that's changed. We've renamed things a little bit, as you can see. Transform now has some more stuff in it. Specifically, it has pipeline. The pipeline's been moved into Transform. Transform and pipeline are not specifically to do with data. They're just ways of doing functions and dispatch, basically. And then data core. No, we don't have a tentative release date. Data core contains transformed data loader, data bunch, transformed list, and data source. So there's not a transformed DS anymore. And then six is a new module called data.transforms, which is where, you know, standard, some standard transforms live, basically. And not just standard transforms, but also some stuff you would use in standard transforms like get files and split and stuff like that. So those are those three things. If you're interested, I can tell you a bit about what happened with data source and transformed DS because it's kind of an interesting design question. And I'm not sure I have a simple rule of thumb for it. But basically, we like to kind of have layers that each thing does one thing and one thing separately to other things. But if you have too many layers, then debugging gets confusing. And so I kind of find my approach to designing is extremely iterative. In fact, it's entirely iterative. I don't really design much up front at all. And I found that we were getting weird bugs in data source, which I was having, you know, weird bugs mean that something's not clear enough. Or, you know, the things that you think are in your head aren't really in your head the way you thought they are. And I kind of I realized that. A data source without any filters, without any subsets, basically, was the same as a two firm DS. And then that made me think having two separate classes for those things kind of seemed weird. And I wondered if we put them all in the same class, what would it look like? And as you can see, data source doing both data source and MDS now is, if anything shorter than data source that was inheriting, it's ended up clearer, which is interesting. The only thing it inherits from is something called filtered base, which is super tiny. It's basically just something which you have to define subset and then it's going to define train and valid properties for each of your two subsets. That's and the other thing it does is it adds a data bunch, which will create a data bunch containing a default to Fmdl for each of your subsets. And one of the nice things is that means that to Fm list can also inherit from filtered base, which means that you can create a data bunch from a to Fm list or you can create training or validating. So yeah, if you don't need the multiple independent pipelines creating a couple thing, then this might be an easy way to create really simple data sources. So yeah, that's so the the tests that were in to Fmdls are still here. All the same tests are still here, but now they all say data source. So here's an example of a data source test without any splits being applied. So it's just acting. So there's no use of train or valid or whatever. And here's sorry I should say filts and here's one that does have filts applied so we can check train and valid, as you can see. And then the actual use of the creating of the filters is done in to Fm list. So that's part of why data sources so simple now, because data source is simply something that contains a to Fm list for each transform that you pass in. Okay, so that's a change. And our code ended up much simpler. And it's easier to debug and the weird bugs we had went away. So that was all good. Another change, which is less substantive, is tabular. So now that we have this filtered base subclass tabular doesn't really need to use data sources anymore. It can just inherit from filtered base. And they will get a train and validation set automatically. So it just has to define subset, because that's, that's wrong. That is the one not implemented thing that that subclasses have to define. And so now there's no, so as you can see tabular is actually a bit smaller and simpler now. It doesn't have to have a data source method anymore. If you want to create a train invalid set, you can just pass in filts. So if we have a look, here's an example of creating a tabular without passing in filts. And so it just acts like a normal data frame type thing. And here is a processed one with categorify, just like before. And then here is one with splits. Which that's going to be confusing because we call it splits in one place and filts in the other. We should change that. We'll add a note. Okay. How do I navigate code? I mainly use Vim. So I don't have to too much because my code is pretty small and self-contained. But if I do need to jump around, I just use Vim using its tags functionality. And the other thing is the get NBSourceLink. Actually, there's a... what's the one that gives it to us? NBSourceLink. There we go. So you can do it this way. You get something you can click on. And it will take you to the right spot. Yep, there it is. Pipeline. So that's another option. Quite often I just want to see how something is defined, in which case I'll just do the question marks just to double check. But yeah, we have, you know, you can attach VS code to a remote terminal easily enough. And so you can always explore it through VS code or whatever. But yeah, it works fine in Vim. So I could go colon tag PIP tab, enter it to tab complete to pipeline. And there is the class, as you can see. And then if I go to... oh, I want to know what transform is. So control right square bracket, and that will take me straight to the definition of transform, so forth. Yeah, I guess most editors do the same stuff. But just remember in local, you've got a full browser ball set of modules. What kind of weird bugs did I have? Oh, you know how it is after you've fixed a bug, you kind of throw it out of your head. One of the big challenges is around setup. Setup is actually quite tricky. So what we do in pipeline with setup is we first of all make a copy of our transforms and we then clear our transforms. And then we go through the copy of the transforms and add them back one at a time. And after adding each one back, well, before adding each one back, we call setup and then we add. If you don't do this, if you just call setup on all of them after adding them all, you kind of have this weird thing where all of your transforms are being called even before they're set up. So you kind of have to add checks inside your transforms to make sure whether they're set up yet or not. And if they're not, then you like do nothing. It's super awkward. And so like one of the problems was in the train and valid subsets, they both had their own kind of copy of the same pipeline. And previously I wasn't going to firms equals I wasn't clearing it out like this in place, but instead I was going like self dot to firms. Sorry, self dot fs comma to firms equals nothing comma. Oops, come out. Self dot to firms. So before I was doing it like that, which kind of looks like it's doing the same thing, right? It's setting self dot fs to to be empty and it's setting to firms to be my previous set. It looks the same. But the problem is that if there are other pipelines that are pointing at the same list of transforms, they're not being emptied out by this. Where else self dot fs dot clear does empty them out. So like that was an example of a weird bug was before it was with the old version. Subsets weren't setting up properly. And it was kind of hard to debug because there was just a few too many layers. OK. So, yes, on tabular now. We don't have to call tabular object dot data source anymore. We can just pass splits, which I think I'll rename into filts or maybe I'll call them all filts. Maybe I'll call them off bits. Anyway, we'll make it more consistent. We can just pass that into our. Constructor. And so the other thing about this is we don't have to call set up anymore. We have all the information we need to set up as soon as we dance here at this. So we just call set up directly in it. Another example of kind of weird bugs to avoid again, it's the subset functionality. When we subset, we want to create a new tabular object with a slice, the split, you know, the sliced the split of what we want. But we had to make sure that in new we do to set up equals false. Otherwise, when you create the subset, it's going to rerun set up, which would be annoying. So we found the bug because we added some tests and found they weren't passing. So we always try to think of, you know, tests that we can we can add. So, yeah, tabular reports, you can check out. It's in forty two. It's missing an underscore from the front. So that suggests that I haven't been working on that. That's been surveillance, baby. But that suggests that it should be more or less working. So you could certainly try it out. It certainly hasn't been much used, though. So it might be a bit buggy still. But, yeah, hopefully you'll find that's working. I believe it's a lot faster than the pandas one. OK, so those are those changes. So everything else here is basically the same. Oh, and then the other thing I do is I added data bunch. So that was nice and easy because data bunch is now in filtered base. So we get that for free. Sorry, Marlon, I don't know what you mean by probabilistic inference. OK, so that's that. So maybe we can go back and look at. Oh, and oh, one a little bit. That'd be fun. And actually, I don't know if you remember that. Oh, oh, and oh, one aren't quite the start. There's there's all the ones that start with nine, which is the notebook stuff, which I don't know that we're looking at. But there's also a special one, which is imports, PY, and that is not generated by a notebook. And so we actually start with imports to PY. So that's got all the imports, as you can see. These types here, I think, are only in Python three point seven. So we patch them in if they're missing. And then we have. A tiny number of people functions just for checking your quality or doing nothing and checking if something's an iterator or a collection. I think these are probably things we needed in the notebook. The notebook notebooks. So that's why they're here. So that one's not created by a notebook. So, yes, so going all the way back to zero zero. I kind of the first thing I wanted to write was something which would test whether A and B could successfully be compared using some comparator. For example, test whether one comma two and one comma two are equal. The problem is that if this this could pass and be wrong, because what if test always return true? So I actually did a way to test whether it's successfully fails. But my tests, the idea is that they always throw an exception if they fail, specifically an assertion exception. The reason for that is that if you like run a notebook that causes an exception, you'll get a nice stack trace and all that kind of a thing. So it's a good way to show a test failure, in my opinion. So that means I needed to have a way to test for failures. You can't test for failures by like just passing the code directly in like that, because that would actually run this code. It would cause an exception. And that's it. The exception already happens. So you always have to put a lambda there so it doesn't actually run it. So the first thing I actually needed to do was create a test fail function, which will try to call the function. And if there is an exception, then if you passed in contains, and that says I want you to make sure that the string of the exception contains something. So I make sure they didn't pass that or that it was here and then return. So if you didn't end up in the exception clause, then I failed. I didn't get an exception. So that's test fail. So that was kind of step one is something that would allow us to test for failures. And so here's something that checks that we actually get a failure. And so then we can test our test equals and not equals for both failing and succeeding. So all equal was one of the things that was defined in local imports. But we can still display it here. And then we can create not equals. And yeah, so then we can start using the fact that we have a general purpose test A and B in some comparator to start defining things like test, which is the one we normally use for testing that A and B are equals. And then this is just what's printed. If there's a failure, it'll tell us what the failure was. So the. Equals. Tries to kind of do the right thing. So if. Either of them have an array equals method, then we should use that to test your quality. That's kind of the Python or at least a numpy protocol for checking for a quality. If one of them is an empty array, we can use numpy. If one of them is a string or a dictarist set, we can just use operated equals. If one of them is an iterator, we can use all equal, which, as you can see, checks whether everything. In each one is equal. Yeah, otherwise, we'll just use operator equality. So we try to kind of make equals work across a variety of types. And that's why you can see test equal being checked with all kinds of things like arrays and dictionaries and data frames, series, so forth. So that's the main one we use all the time in our tests. Sometimes we use test type, which tests whether A and B are equal and also tests whether their types equal. And if you pass a list or a couple, then we'll also check that the types of all of its contents equal. So test for not equals, test whether the two things are close. OK, so that's OO. All right. I'm not going to look at meta classes just yet. So here is O1 core. So quite often we use patch. For example, we use it for not LS. For example, we have here define LS self colon path. And it has at patch. So what that does is if we say P equals path. You can go P. L.S. So how does that work? Well, remember, a decorator in Python is simply passed its function as an argument. So in this particular case for patch def func, patch will be passed func. And so then that function, we want to find out what to patch. So we want to patch this parameters type. And so to find that parameters types, we go through all of the annotations and just find the first one, which means this is like in some ways. I mean, it won't tell you if you do something dumb like that. It'll still end up being patched to T3. But that's fine. I don't always check for every dumb thing you might do. This is long as the behavior works correctly when used correctly and the really obvious mistakes checked for. So that's going to tell us what the type repatching. And then it will patch to that type with this function. And so here's patch two, which there's really not much to tell you about that. It just goes through and uses the func tools stuff to make sure all of the metadata is correct. And it will set in this class with this name, the function that we asked for. Which is better, Win or Ubuntu? Oh, it's up to you. I use Ubuntu in my server here, as you see. And I use Windows on my computer because I do a lot of I like to draw things a lot when I'm talking. So I like to use something with a stylus. And I yeah, there's a lot I like about Windows on my desktop. OK, so that's patch. So then we've got a different thing, which is patch property. And patch property does the same thing as patch, but it passes as prop equals true, which, as you can see, simply turns a function into a property. Because remember, when you say at property in Python, property is just a decorator. So you can use it as a function. So here it is being used as a property. So why not use wraps? The what was it? Oh, yeah. This is obviously the comment that was telling me something about pipeline. This is basically doing the same thing as functools.update wrapper or whatever it's called. And it's setting the function with this name to the attribute. I don't remember anymore. Maybe this is now obsolete because I added a comment to here to remind myself why I did it. But now I don't understand the comment, so I'm not sure. functools.update wrapper. Let's see what it looks like. So it uses wrapper assignments as assigned. Goes through each one and it grabs it and it sets it to the value. So I'm not doing this bit, and I don't remember what that is, but maybe there was some reason why we do that. Although, yeah, I'm not sure. I'm not sure. Maybe we can now. Okay. Yeah, sorry, Elliot. I know you meant wraps, but wraps just calls update wrapper. So that's all wraps is. As you can see, functools.wraps. Yeah, so that's all it is. Okay. So delegates we've kind of looked at before. So that's the thing that allows us to, you can either delegate passing in nothing at all, in which case it will delegate your init to your base classes in it. So you can see here how I'm testing it, right? I've added a little thing called test sig, which checks that the signature stringified is equal to whatever you pass it. So here you can see we've got a foo and we've got a, b equals one and quags. And then quags is being delegated to base foo, which has e and c equals two. And so that's not a quag. That is a quag. So it's going to therefore end up as a, b equals one and c equals two. So we can see the signature is grabbing that stuff from base foo. Actually, the other thing we could test. Actually, that's not the right place to test it. That's fine. We should get rid of this. This one, use quags, is mainly used by other functions. We don't normally use it directly, but this is like something where you can basically say, I want you to replace quags with y and z. So you can see here I've got a, b equals one, quags. And then I said, please add y and z. And so as you can see here, it's added y and z. We don't normally use it directly. And you can see it's just grabbing the signature and replacing stuff in the signature. But it is used in that very important funcs quags thing that we use all the time. That's the thing where we say, oh, these methods, this list of methods, are things that you could pass in as quags. And if you do, it will replace the method here. And so as you can see there, I use quags to replace the signature with the correct signature. And here you can see I am using func tools to update wrapper, which I could also have done it by saying at wraps, hold in it, I guess would have worked just as well. OK. I'm trying to remember why this is here, and I now don't. What am I doing with that? Ah, yes. So, yes, yes, yes. All right. So when we. So we've got funcs quags here. We said B is our methods. So if I create something of that type and B is going to return 2, because that's the method, but then I can pass in something and say, no, replace B with a method that returns 3 and make sure that's what happened. And then what you can do instead of passing in a function or a lambda, you can pass in a method. If you pass in a method, it's going to get self as well. So to tell it that something should be a method, you put at method above it. And the way that is done is using this little trick here, which is to replace F with a types dot method type wrapper. And that's what's checked here. Check to see whether something's a method. OK, so that's what that does. I added this little decorator that uses a external thing called type checked. Which basically does runtime type checking part of this thing called type guard. Although honestly, I haven't actually used it since I added it, so I might remove it or we might decide to use it more widely. But basically what it does is if you add a annotation and then you try to call it with the wrong type, then it'll fail. It's an interesting idea. I just haven't found myself wanting it much yet. OK. What else is there to show you here? Add docs we've seen plenty of times. So here's an example. We've got some class with some functions. And if we say then say add docs, then we can say these are my doc strings for each function. And so I can then just check that it does in fact get those doc strings. OK. So that's that. And then get atra. I guess we've pretty much seen now. So get atra is the thing that we inherit from in order to get done to get atra for free. And specifically what it's going to do is it's going to try and find the unknown attribute in self default. So here's an example where we set self default to whatever you pass in. So we passed in high. So we would expect to be able to do dot lower. That would make a lot more sense if this was capitalized. There we go. And it fails if we try to say upper because underscore extra is the list of things that we are allowed to delegate. Although by default it will delegate everything. So dir in Python gives you back a list of all of the attributes. So to give you we can use anything by default that's in self default as long as it doesn't start with underscore because that would be private. So done to dir is a thing that Python calls when you call dir. So when you do like tab completion that's how it does tab completion. So we then do custom dir which is looking at everything in the type and everything in the object and anything else that you add manually. So here we check that lower has been added to our dir. Sometimes you don't want to inherit from get atra. But instead you want to kind of do it manually so you can also instead define your own done to get atra and simply return this delegate atra which will basically do exactly the same thing except you don't get the done to dir thing. Oh, one more thing. Set state. When you override done to get atra in Python, it often kills pickle. And so we just, I think we just looked it up on Stack Overflow and found a few so pickle will use done to set state to decide what to pickle, basically. And I don't quite remember why but somehow doing this fixes pickling. That's why that's there. Okay. So, last one for today is L, this is the main one. So L is a collection base, which also has get atra. And also uses new check meta to make sure that we don't, that if you pass in an L, then it just gives you back what you started with rather than creating another one. A collection base is just something which contains, composes some items. And basically everything is just delegated down to that so delegates down length and get item set item del item repra and it. So you don't know what any of these things are check the Python data model docs. So then L adds a lot of behavior, which is best understood by looking at the tests, I think. So you can pass in pretty much anything to an L that you could otherwise pass into the normal Python list. So list range 12. Would return that L range 12. So we try to make it behave as much like a Python list as possible. And if you pass in the same things, in fact, you can see we actually test check that that's the same as. Rest range range 12. But then we have another nice little thing so we can do reverse, for example. As you can see now. Reverse. Is actually not listed anywhere here. As you can see, and the reason for that is that we inherited from Gadatra and that. Default is set to self dot items and list has a reverse. So actually all we were doing is we were delegating to list. As you can see. OK. We have a. Thunder said item, as you can see. So we can set something. T3 equals H. And then some of the nice stuff that we're adding is being able to kind of more NumPy style set multiple things to multiple values. And retrieve multiple things. Yeah, so that's some basic functionality and L. You can create an empty one should be the match match to an empty list, of course, the pen, just like a list can plus equals to it like a list can. You can add things onto the left of it instead of the right, which a list can't. You can multiply just like a list can. Unlike a list, you can negate. So this is the negation operation. So true false false becomes false true true. So then here's an interesting one cycle. So cycle. Simply calls it a tools cycle. So that's a useful thing to know about basically it a tools cycle. Simply let's try it. It a tools dot cycle. One, two, three. And then we'll need to just grab the first little bit of that. Otherwise, it'll be infinitely long. And I don't have an infinite amount of RAM. It a tools dot I sliced, grab the first bit, come out 12. And then we'll need to listify that. You can see it. OK. So as you can see what cycle does one, two, three, one, two, three, one, two, three. So to do that forever. And then we sliced in the first 12. So we can say L dot cycle. One, two, three, for example. And then we can do the same thing. It a tools dot I slice that. And then list that. And then slice by how much. There we go. Same thing. All right. So questions. How do I handle multiple indices? So we handle multiple indices by defining get item. So get item is going to check whether the index that's passed in is an indexer or not. What's an indexer? An indexer is something that is either an int or is something that has an end in property, which is zero. Why is that? Because of this. T equals one, two, three. T one. That's an indexer. But here's something else that's an indexer. Import torch. That's an indexer, too. Okay. And that's because torch dot tensor. Dot end in is zero. But you can't do that. Okay. So that's what indexer is checking for. So if it's an indexer, then we call underscore get, which, as you can see, checks if it's an indexer. And if it is, it simply tries to find out whether self dot items has an ILOC. In this case, it doesn't. So it's just going to give us self dot items and I. So it's just going to be self dot items I. But your question is what happens if it's a list? In that case, we're going to end up over here. So we're going to create a new L containing self dot get IDX, which in this case, it's not an indexer. So we're going to convert a mask to indexes. So if it's Boolean, it'll convert into indexes. And then it'll check, does it have ILOC? Which ours doesn't? Does it have DUNDA array? Which ours doesn't? So then it's going to return a list comprehension. And so that's how come that works. Okay. Yeah. So how does none plus done work? As I mentioned, it's in DUNDA add. And specifically here, you can see we create a new L containing all of the items in A plus B listified. And listify none is an empty list. So that's why that works. Okay. So here you can see we've got an infinite number of ones. And if we zip that with T, where T is L range four, that should be the same as zipping range four with four ones. So that works there. L.range is almost the same as normal range, except it returns an L. Shuffled does what it sounds like. And we actually have a test shuffled now, I think, so we can do that instead. Looks like a bit easier. So mapped is basically the same as calling map underscore f comma t. Except that there's a few differences. One is that that returns a map object, whereas our mapped actually does the mapping. So t.mapped, as you can see. And you can pass in arguments, as you can see. Or keyword arguments. So we use that quite a lot. Okay. So in terms of things you can construct an L with, you can construct it with a list, you can construct it with another L. You can construct it with a string, in which case it'll stay as a string, with a range. You can construct it with a generator. Now this is different to how Python lists work. If I go list array 0, like this. Then as you can see, that gets converted into a list containing 0 or 0 comma 1, would be a list 0 or 1. Whereas L doesn't do that by default. L will create a single item containing the array. Because like most of the time, particularly with tenses, you don't want to unwrap them into a list. You want to actually put the tensor or the array into the list. Is there any way to know how L is shuffled? Not with the shuffled. You would have to use indexes or something for that. Okay. So that's important difference. If you want the same behavior that list does, then you can pass use list equals true to give you the same behavior as list. So instead of having an array with 0, 1 in, that will actually create two items now, 0 and 1. So that does exactly the same thing as list would do. If you say use list equals true. Okay. You can pass the match parameter to the constructor to get the same behavior as listify had in version 1, which is basically to say make this list as long as this list. That's why that will create 1, 1, 1. Here's the test that confirms that L of t is t. Not that is means they're identical objects. They're the same reference. Okay. And so then you can see some of the methods. So here's checking get item. As you can see here, we've got using an array of masks instead. So that's just like NumPy. The mask array has to be the same number of Booleans as the length of the list. It has a dot unique, as you can see. This is basically telling you the reverse mapping. So it's a mapping from where is the 3, for example, and it's in location 0, 1, 2. Where is the 1? It's in location 0. So it's a dictionary. So that val2ydx and unique are the kind of two things you need to create a vocab. We can filter. This is basically the same as the filter function in Python. But it's going to return an L. It's mapped. Mapped dict is kind of handy. It does exactly the same as mapped. But rather than returning a list, it returns a dictionary from the original value of the list to the value of the function. That's pretty handy. Zipped is basically the same as zipping lists, as you can see. It returns an L. One nice thing you can add to zipped, though, is if the lists are different lengths, then you can say cycled equals true. And it will replicate the shorter one, as you can see. And it'll cycle through it again to make it the same length as the longer one. Or else cycled equals false behaves the same way as the normal zip. And then mapped zip basically takes the result of that zipped and puts it into a map. So, for example, if we do mapped zip multiplication, then it's going to zip 1, 2, 3 with 2, 3, 4, and then apply a multiplication to each one to give us element-wise multiplication. It won't be fast like NumPy. So don't use this instead of NumPy, but it's quite handy sometimes. Zip with will take this L and zip it with this list, as you can see. And here's the same thing with the map as well. That's the same thing as before. Item got is just going to apply... Which one is it? Item getter. Oh, it's an operator. Of course it is. So this will apply operator.itemgetter to every item of a list. So our... So our t is 1, 0, 2, 1, 3, 2, 2. So t.itemgot1 will return the 1th element from each of those. So it'll be 0, 1, 2, 2. I use that a lot actually. Attribute got is basically the same thing, but it's going to return this attribute from each thing. So here we've got a3, b4, a1, b2. So this will be the b from each. So 4, 2. We use that quite a lot too. Sorted is pretty obvious. Range is pretty obvious. All right. So there's a little guided tour of the first half of O1 Core. Thanks for seeing and turning in. And I'll see you all next time.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 7.0, "text": " Hi, can you all see me and hear me okay?", "tokens": [2421, 11, 393, 291, 439, 536, 385, 293, 1568, 385, 1392, 30], "temperature": 0.0, "avg_logprob": -0.6622255726864463, "compression_ratio": 0.9038461538461539, "no_speech_prob": 0.19596092402935028}, {"id": 1, "seek": 700, "start": 7.0, "end": 17.0, "text": " Great.", "tokens": [3769, 13], "temperature": 0.0, "avg_logprob": -0.9428892135620117, "compression_ratio": 0.42857142857142855, "no_speech_prob": 0.001796735799871385}, {"id": 2, "seek": 1700, "start": 17.0, "end": 27.0, "text": " Great.", "tokens": [3769, 13], "temperature": 0.0, "avg_logprob": -0.5092251300811768, "compression_ratio": 0.7837837837837838, "no_speech_prob": 0.00028555537573993206}, {"id": 3, "seek": 1700, "start": 27.0, "end": 40.0, "text": " What is 5x5 mean Fred?", "tokens": [708, 307, 1025, 87, 20, 914, 10112, 30], "temperature": 0.0, "avg_logprob": -0.5092251300811768, "compression_ratio": 0.7837837837837838, "no_speech_prob": 0.00028555537573993206}, {"id": 4, "seek": 4000, "start": 40.0, "end": 50.0, "text": " And does anybody have any requests for stuff they would like to see today? Feel free to ask.", "tokens": [400, 775, 4472, 362, 604, 12475, 337, 1507, 436, 576, 411, 281, 536, 965, 30, 14113, 1737, 281, 1029, 13], "temperature": 0.0, "avg_logprob": -0.23239009324894394, "compression_ratio": 1.2049180327868851, "no_speech_prob": 0.0001069772697519511}, {"id": 5, "seek": 4000, "start": 50.0, "end": 62.0, "text": " No, good. I think 5x5 is being the weightlifting I do.", "tokens": [883, 11, 665, 13, 286, 519, 1025, 87, 20, 307, 885, 264, 3364, 34724, 286, 360, 13], "temperature": 0.0, "avg_logprob": -0.23239009324894394, "compression_ratio": 1.2049180327868851, "no_speech_prob": 0.0001069772697519511}, {"id": 6, "seek": 6200, "start": 62.0, "end": 72.0, "text": " Five reps. Five plots of five reps. Okay.", "tokens": [9436, 27007, 13, 9436, 28609, 295, 1732, 27007, 13, 1033, 13], "temperature": 0.0, "avg_logprob": -0.1537146270275116, "compression_ratio": 1.2992125984251968, "no_speech_prob": 6.297325307969004e-05}, {"id": 7, "seek": 6200, "start": 72.0, "end": 80.0, "text": " So in the absence of requests, I will show you something that's changed.", "tokens": [407, 294, 264, 17145, 295, 12475, 11, 286, 486, 855, 291, 746, 300, 311, 3105, 13], "temperature": 0.0, "avg_logprob": -0.1537146270275116, "compression_ratio": 1.2992125984251968, "no_speech_prob": 6.297325307969004e-05}, {"id": 8, "seek": 6200, "start": 80.0, "end": 84.0, "text": " We've renamed things a little bit, as you can see.", "tokens": [492, 600, 40949, 721, 257, 707, 857, 11, 382, 291, 393, 536, 13], "temperature": 0.0, "avg_logprob": -0.1537146270275116, "compression_ratio": 1.2992125984251968, "no_speech_prob": 6.297325307969004e-05}, {"id": 9, "seek": 8400, "start": 84.0, "end": 96.0, "text": " Transform", "tokens": [27938], "temperature": 0.0, "avg_logprob": -0.20536161238147366, "compression_ratio": 1.1770833333333333, "no_speech_prob": 1.669828634476289e-05}, {"id": 10, "seek": 8400, "start": 96.0, "end": 99.0, "text": " now has some more stuff in it.", "tokens": [586, 575, 512, 544, 1507, 294, 309, 13], "temperature": 0.0, "avg_logprob": -0.20536161238147366, "compression_ratio": 1.1770833333333333, "no_speech_prob": 1.669828634476289e-05}, {"id": 11, "seek": 8400, "start": 99.0, "end": 103.0, "text": " Specifically, it has pipeline. The pipeline's been moved into Transform.", "tokens": [26058, 11, 309, 575, 15517, 13, 440, 15517, 311, 668, 4259, 666, 27938, 13], "temperature": 0.0, "avg_logprob": -0.20536161238147366, "compression_ratio": 1.1770833333333333, "no_speech_prob": 1.669828634476289e-05}, {"id": 12, "seek": 10300, "start": 103.0, "end": 115.0, "text": " Transform and pipeline are not specifically to do with data. They're just ways of doing functions and dispatch, basically.", "tokens": [27938, 293, 15517, 366, 406, 4682, 281, 360, 365, 1412, 13, 814, 434, 445, 2098, 295, 884, 6828, 293, 36729, 11, 1936, 13], "temperature": 0.0, "avg_logprob": -0.16674067576726279, "compression_ratio": 1.3191489361702127, "no_speech_prob": 1.4061749425309245e-05}, {"id": 13, "seek": 10300, "start": 115.0, "end": 126.0, "text": " And then data core.", "tokens": [400, 550, 1412, 4965, 13], "temperature": 0.0, "avg_logprob": -0.16674067576726279, "compression_ratio": 1.3191489361702127, "no_speech_prob": 1.4061749425309245e-05}, {"id": 14, "seek": 10300, "start": 126.0, "end": 129.0, "text": " No, we don't have a tentative release date.", "tokens": [883, 11, 321, 500, 380, 362, 257, 7054, 1166, 4374, 4002, 13], "temperature": 0.0, "avg_logprob": -0.16674067576726279, "compression_ratio": 1.3191489361702127, "no_speech_prob": 1.4061749425309245e-05}, {"id": 15, "seek": 12900, "start": 129.0, "end": 138.0, "text": " Data core contains transformed data loader, data bunch, transformed list, and data source.", "tokens": [11888, 4965, 8306, 16894, 1412, 3677, 260, 11, 1412, 3840, 11, 16894, 1329, 11, 293, 1412, 4009, 13], "temperature": 0.0, "avg_logprob": -0.18045437092683753, "compression_ratio": 1.472, "no_speech_prob": 1.300552048633108e-05}, {"id": 16, "seek": 12900, "start": 138.0, "end": 145.0, "text": " So there's not a transformed DS anymore.", "tokens": [407, 456, 311, 406, 257, 16894, 15816, 3602, 13], "temperature": 0.0, "avg_logprob": -0.18045437092683753, "compression_ratio": 1.472, "no_speech_prob": 1.300552048633108e-05}, {"id": 17, "seek": 12900, "start": 145.0, "end": 154.0, "text": " And then six is a new module called data.transforms,", "tokens": [400, 550, 2309, 307, 257, 777, 10088, 1219, 1412, 13, 24999, 837, 82, 11], "temperature": 0.0, "avg_logprob": -0.18045437092683753, "compression_ratio": 1.472, "no_speech_prob": 1.300552048633108e-05}, {"id": 18, "seek": 15400, "start": 154.0, "end": 161.0, "text": " which is where, you know, standard, some standard transforms live, basically.", "tokens": [597, 307, 689, 11, 291, 458, 11, 3832, 11, 512, 3832, 35592, 1621, 11, 1936, 13], "temperature": 0.0, "avg_logprob": -0.12722044660334, "compression_ratio": 1.6802721088435375, "no_speech_prob": 7.646193807886448e-06}, {"id": 19, "seek": 15400, "start": 161.0, "end": 170.0, "text": " And not just standard transforms, but also some stuff you would use in standard transforms like get files and split and stuff like that.", "tokens": [400, 406, 445, 3832, 35592, 11, 457, 611, 512, 1507, 291, 576, 764, 294, 3832, 35592, 411, 483, 7098, 293, 7472, 293, 1507, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.12722044660334, "compression_ratio": 1.6802721088435375, "no_speech_prob": 7.646193807886448e-06}, {"id": 20, "seek": 15400, "start": 170.0, "end": 176.0, "text": " So those are those three things.", "tokens": [407, 729, 366, 729, 1045, 721, 13], "temperature": 0.0, "avg_logprob": -0.12722044660334, "compression_ratio": 1.6802721088435375, "no_speech_prob": 7.646193807886448e-06}, {"id": 21, "seek": 17600, "start": 176.0, "end": 184.0, "text": " If you're interested, I can tell you a bit about what happened with data source and transformed DS", "tokens": [759, 291, 434, 3102, 11, 286, 393, 980, 291, 257, 857, 466, 437, 2011, 365, 1412, 4009, 293, 16894, 15816], "temperature": 0.0, "avg_logprob": -0.04324921475181097, "compression_ratio": 1.5330188679245282, "no_speech_prob": 5.422053163783858e-06}, {"id": 22, "seek": 17600, "start": 184.0, "end": 189.0, "text": " because it's kind of an interesting design question.", "tokens": [570, 309, 311, 733, 295, 364, 1880, 1715, 1168, 13], "temperature": 0.0, "avg_logprob": -0.04324921475181097, "compression_ratio": 1.5330188679245282, "no_speech_prob": 5.422053163783858e-06}, {"id": 23, "seek": 17600, "start": 189.0, "end": 193.0, "text": " And I'm not sure I have a simple rule of thumb for it.", "tokens": [400, 286, 478, 406, 988, 286, 362, 257, 2199, 4978, 295, 9298, 337, 309, 13], "temperature": 0.0, "avg_logprob": -0.04324921475181097, "compression_ratio": 1.5330188679245282, "no_speech_prob": 5.422053163783858e-06}, {"id": 24, "seek": 17600, "start": 193.0, "end": 204.0, "text": " But basically, we like to kind of have layers that each thing does one thing and one thing separately to other things.", "tokens": [583, 1936, 11, 321, 411, 281, 733, 295, 362, 7914, 300, 1184, 551, 775, 472, 551, 293, 472, 551, 14759, 281, 661, 721, 13], "temperature": 0.0, "avg_logprob": -0.04324921475181097, "compression_ratio": 1.5330188679245282, "no_speech_prob": 5.422053163783858e-06}, {"id": 25, "seek": 20400, "start": 204.0, "end": 208.0, "text": " But if you have too many layers, then debugging gets confusing.", "tokens": [583, 498, 291, 362, 886, 867, 7914, 11, 550, 45592, 2170, 13181, 13], "temperature": 0.0, "avg_logprob": -0.06248693787649776, "compression_ratio": 1.5758928571428572, "no_speech_prob": 3.844693310384173e-06}, {"id": 26, "seek": 20400, "start": 208.0, "end": 214.0, "text": " And so I kind of find my approach to designing is extremely iterative. In fact, it's entirely iterative.", "tokens": [400, 370, 286, 733, 295, 915, 452, 3109, 281, 14685, 307, 4664, 17138, 1166, 13, 682, 1186, 11, 309, 311, 7696, 17138, 1166, 13], "temperature": 0.0, "avg_logprob": -0.06248693787649776, "compression_ratio": 1.5758928571428572, "no_speech_prob": 3.844693310384173e-06}, {"id": 27, "seek": 20400, "start": 214.0, "end": 217.0, "text": " I don't really design much up front at all.", "tokens": [286, 500, 380, 534, 1715, 709, 493, 1868, 412, 439, 13], "temperature": 0.0, "avg_logprob": -0.06248693787649776, "compression_ratio": 1.5758928571428572, "no_speech_prob": 3.844693310384173e-06}, {"id": 28, "seek": 20400, "start": 217.0, "end": 228.0, "text": " And I found that we were getting weird bugs in data source, which I was having, you know, weird bugs mean that something's not clear enough.", "tokens": [400, 286, 1352, 300, 321, 645, 1242, 3657, 15120, 294, 1412, 4009, 11, 597, 286, 390, 1419, 11, 291, 458, 11, 3657, 15120, 914, 300, 746, 311, 406, 1850, 1547, 13], "temperature": 0.0, "avg_logprob": -0.06248693787649776, "compression_ratio": 1.5758928571428572, "no_speech_prob": 3.844693310384173e-06}, {"id": 29, "seek": 22800, "start": 228.0, "end": 236.0, "text": " Or, you know, the things that you think are in your head aren't really in your head the way you thought they are.", "tokens": [1610, 11, 291, 458, 11, 264, 721, 300, 291, 519, 366, 294, 428, 1378, 3212, 380, 534, 294, 428, 1378, 264, 636, 291, 1194, 436, 366, 13], "temperature": 0.0, "avg_logprob": -0.14676078160603842, "compression_ratio": 1.5414012738853504, "no_speech_prob": 2.0903385120618623e-06}, {"id": 30, "seek": 22800, "start": 236.0, "end": 241.0, "text": " And I kind of I realized that.", "tokens": [400, 286, 733, 295, 286, 5334, 300, 13], "temperature": 0.0, "avg_logprob": -0.14676078160603842, "compression_ratio": 1.5414012738853504, "no_speech_prob": 2.0903385120618623e-06}, {"id": 31, "seek": 22800, "start": 241.0, "end": 254.0, "text": " A data source without any filters, without any subsets, basically, was the same as a two firm DS.", "tokens": [316, 1412, 4009, 1553, 604, 15995, 11, 1553, 604, 2090, 1385, 11, 1936, 11, 390, 264, 912, 382, 257, 732, 6174, 15816, 13], "temperature": 0.0, "avg_logprob": -0.14676078160603842, "compression_ratio": 1.5414012738853504, "no_speech_prob": 2.0903385120618623e-06}, {"id": 32, "seek": 25400, "start": 254.0, "end": 258.0, "text": " And then that made me think having two separate classes for those things kind of seemed weird.", "tokens": [400, 550, 300, 1027, 385, 519, 1419, 732, 4994, 5359, 337, 729, 721, 733, 295, 6576, 3657, 13], "temperature": 0.0, "avg_logprob": -0.10172135489327568, "compression_ratio": 1.5656108597285068, "no_speech_prob": 4.860190529143438e-06}, {"id": 33, "seek": 25400, "start": 258.0, "end": 262.0, "text": " And I wondered if we put them all in the same class, what would it look like?", "tokens": [400, 286, 17055, 498, 321, 829, 552, 439, 294, 264, 912, 1508, 11, 437, 576, 309, 574, 411, 30], "temperature": 0.0, "avg_logprob": -0.10172135489327568, "compression_ratio": 1.5656108597285068, "no_speech_prob": 4.860190529143438e-06}, {"id": 34, "seek": 25400, "start": 262.0, "end": 279.0, "text": " And as you can see, data source doing both data source and MDS now is, if anything shorter than data source that was inheriting, it's ended up clearer, which is interesting.", "tokens": [400, 382, 291, 393, 536, 11, 1412, 4009, 884, 1293, 1412, 4009, 293, 376, 11844, 586, 307, 11, 498, 1340, 11639, 813, 1412, 4009, 300, 390, 9484, 1748, 11, 309, 311, 4590, 493, 26131, 11, 597, 307, 1880, 13], "temperature": 0.0, "avg_logprob": -0.10172135489327568, "compression_ratio": 1.5656108597285068, "no_speech_prob": 4.860190529143438e-06}, {"id": 35, "seek": 27900, "start": 279.0, "end": 284.0, "text": " The only thing it inherits from is something called filtered base, which is super tiny.", "tokens": [440, 787, 551, 309, 9484, 1208, 490, 307, 746, 1219, 37111, 3096, 11, 597, 307, 1687, 5870, 13], "temperature": 0.0, "avg_logprob": -0.0675384380199291, "compression_ratio": 1.5128205128205128, "no_speech_prob": 3.555859393600258e-06}, {"id": 36, "seek": 27900, "start": 284.0, "end": 299.0, "text": " It's basically just something which you have to define subset and then it's going to define train and valid properties for each of your two subsets.", "tokens": [467, 311, 1936, 445, 746, 597, 291, 362, 281, 6964, 25993, 293, 550, 309, 311, 516, 281, 6964, 3847, 293, 7363, 7221, 337, 1184, 295, 428, 732, 2090, 1385, 13], "temperature": 0.0, "avg_logprob": -0.0675384380199291, "compression_ratio": 1.5128205128205128, "no_speech_prob": 3.555859393600258e-06}, {"id": 37, "seek": 29900, "start": 299.0, "end": 316.0, "text": " That's and the other thing it does is it adds a data bunch, which will create a data bunch containing a default to Fmdl for each of your subsets.", "tokens": [663, 311, 293, 264, 661, 551, 309, 775, 307, 309, 10860, 257, 1412, 3840, 11, 597, 486, 1884, 257, 1412, 3840, 19273, 257, 7576, 281, 479, 76, 67, 75, 337, 1184, 295, 428, 2090, 1385, 13], "temperature": 0.0, "avg_logprob": -0.2903033508651558, "compression_ratio": 1.7916666666666667, "no_speech_prob": 1.0511344044061843e-06}, {"id": 38, "seek": 29900, "start": 316.0, "end": 328.0, "text": " And one of the nice things is that means that to Fm list can also inherit from filtered base, which means that you can create a data bunch from a to Fm list or you can create training or validating.", "tokens": [400, 472, 295, 264, 1481, 721, 307, 300, 1355, 300, 281, 479, 76, 1329, 393, 611, 21389, 490, 37111, 3096, 11, 597, 1355, 300, 291, 393, 1884, 257, 1412, 3840, 490, 257, 281, 479, 76, 1329, 420, 291, 393, 1884, 3097, 420, 7363, 990, 13], "temperature": 0.0, "avg_logprob": -0.2903033508651558, "compression_ratio": 1.7916666666666667, "no_speech_prob": 1.0511344044061843e-06}, {"id": 39, "seek": 32800, "start": 328.0, "end": 345.0, "text": " So yeah, if you don't need the multiple independent pipelines creating a couple thing, then this might be an easy way to create really simple data sources.", "tokens": [407, 1338, 11, 498, 291, 500, 380, 643, 264, 3866, 6695, 40168, 4084, 257, 1916, 551, 11, 550, 341, 1062, 312, 364, 1858, 636, 281, 1884, 534, 2199, 1412, 7139, 13], "temperature": 0.0, "avg_logprob": -0.26303604670933317, "compression_ratio": 1.3362068965517242, "no_speech_prob": 5.093318122817436e-06}, {"id": 40, "seek": 34500, "start": 345.0, "end": 359.0, "text": " So yeah, that's so the the tests that were in to Fmdls are still here.", "tokens": [407, 1338, 11, 300, 311, 370, 264, 264, 6921, 300, 645, 294, 281, 479, 76, 67, 11784, 366, 920, 510, 13], "temperature": 0.0, "avg_logprob": -0.17089501365286405, "compression_ratio": 1.5211267605633803, "no_speech_prob": 2.9942714263597736e-06}, {"id": 41, "seek": 34500, "start": 359.0, "end": 363.0, "text": " All the same tests are still here, but now they all say data source.", "tokens": [1057, 264, 912, 6921, 366, 920, 510, 11, 457, 586, 436, 439, 584, 1412, 4009, 13], "temperature": 0.0, "avg_logprob": -0.17089501365286405, "compression_ratio": 1.5211267605633803, "no_speech_prob": 2.9942714263597736e-06}, {"id": 42, "seek": 34500, "start": 363.0, "end": 371.0, "text": " So here's an example of a data source test without any splits being applied.", "tokens": [407, 510, 311, 364, 1365, 295, 257, 1412, 4009, 1500, 1553, 604, 37741, 885, 6456, 13], "temperature": 0.0, "avg_logprob": -0.17089501365286405, "compression_ratio": 1.5211267605633803, "no_speech_prob": 2.9942714263597736e-06}, {"id": 43, "seek": 37100, "start": 371.0, "end": 378.0, "text": " So it's just acting. So there's no use of train or valid or whatever.", "tokens": [407, 309, 311, 445, 6577, 13, 407, 456, 311, 572, 764, 295, 3847, 420, 7363, 420, 2035, 13], "temperature": 0.0, "avg_logprob": -0.15254504340035574, "compression_ratio": 1.434782608695652, "no_speech_prob": 1.0288552402926143e-05}, {"id": 44, "seek": 37100, "start": 378.0, "end": 390.0, "text": " And here's sorry I should say filts and here's one that does have filts applied so we can check train and valid, as you can see.", "tokens": [400, 510, 311, 2597, 286, 820, 584, 1387, 1373, 293, 510, 311, 472, 300, 775, 362, 1387, 1373, 6456, 370, 321, 393, 1520, 3847, 293, 7363, 11, 382, 291, 393, 536, 13], "temperature": 0.0, "avg_logprob": -0.15254504340035574, "compression_ratio": 1.434782608695652, "no_speech_prob": 1.0288552402926143e-05}, {"id": 45, "seek": 39000, "start": 390.0, "end": 402.0, "text": " And then the actual use of the creating of the filters is done in to Fm list.", "tokens": [400, 550, 264, 3539, 764, 295, 264, 4084, 295, 264, 15995, 307, 1096, 294, 281, 479, 76, 1329, 13], "temperature": 0.0, "avg_logprob": -0.10540930156050057, "compression_ratio": 1.5298013245033113, "no_speech_prob": 2.3320026230067015e-06}, {"id": 46, "seek": 39000, "start": 402.0, "end": 418.0, "text": " So that's part of why data sources so simple now, because data source is simply something that contains a to Fm list for each transform that you pass in.", "tokens": [407, 300, 311, 644, 295, 983, 1412, 7139, 370, 2199, 586, 11, 570, 1412, 4009, 307, 2935, 746, 300, 8306, 257, 281, 479, 76, 1329, 337, 1184, 4088, 300, 291, 1320, 294, 13], "temperature": 0.0, "avg_logprob": -0.10540930156050057, "compression_ratio": 1.5298013245033113, "no_speech_prob": 2.3320026230067015e-06}, {"id": 47, "seek": 41800, "start": 418.0, "end": 424.0, "text": " Okay, so that's a change.", "tokens": [1033, 11, 370, 300, 311, 257, 1319, 13], "temperature": 0.0, "avg_logprob": -0.10869174892619504, "compression_ratio": 1.36986301369863, "no_speech_prob": 4.637686288333498e-06}, {"id": 48, "seek": 41800, "start": 424.0, "end": 428.0, "text": " And our code ended up much simpler.", "tokens": [400, 527, 3089, 4590, 493, 709, 18587, 13], "temperature": 0.0, "avg_logprob": -0.10869174892619504, "compression_ratio": 1.36986301369863, "no_speech_prob": 4.637686288333498e-06}, {"id": 49, "seek": 41800, "start": 428.0, "end": 436.0, "text": " And it's easier to debug and the weird bugs we had went away. So that was all good.", "tokens": [400, 309, 311, 3571, 281, 24083, 293, 264, 3657, 15120, 321, 632, 1437, 1314, 13, 407, 300, 390, 439, 665, 13], "temperature": 0.0, "avg_logprob": -0.10869174892619504, "compression_ratio": 1.36986301369863, "no_speech_prob": 4.637686288333498e-06}, {"id": 50, "seek": 41800, "start": 436.0, "end": 444.0, "text": " Another change, which is less substantive, is tabular.", "tokens": [3996, 1319, 11, 597, 307, 1570, 47113, 11, 307, 4421, 1040, 13], "temperature": 0.0, "avg_logprob": -0.10869174892619504, "compression_ratio": 1.36986301369863, "no_speech_prob": 4.637686288333498e-06}, {"id": 51, "seek": 44400, "start": 444.0, "end": 451.0, "text": " So now that we have this filtered base subclass tabular doesn't really need to use data sources anymore.", "tokens": [407, 586, 300, 321, 362, 341, 37111, 3096, 1422, 11665, 4421, 1040, 1177, 380, 534, 643, 281, 764, 1412, 7139, 3602, 13], "temperature": 0.0, "avg_logprob": -0.14120018671429346, "compression_ratio": 1.4709302325581395, "no_speech_prob": 3.96691166315577e-06}, {"id": 52, "seek": 44400, "start": 451.0, "end": 457.0, "text": " It can just inherit from filtered base.", "tokens": [467, 393, 445, 21389, 490, 37111, 3096, 13], "temperature": 0.0, "avg_logprob": -0.14120018671429346, "compression_ratio": 1.4709302325581395, "no_speech_prob": 3.96691166315577e-06}, {"id": 53, "seek": 44400, "start": 457.0, "end": 461.0, "text": " And they will get a train and validation set automatically.", "tokens": [400, 436, 486, 483, 257, 3847, 293, 24071, 992, 6772, 13], "temperature": 0.0, "avg_logprob": -0.14120018671429346, "compression_ratio": 1.4709302325581395, "no_speech_prob": 3.96691166315577e-06}, {"id": 54, "seek": 44400, "start": 461.0, "end": 468.0, "text": " So it just has to define subset, because that's,", "tokens": [407, 309, 445, 575, 281, 6964, 25993, 11, 570, 300, 311, 11], "temperature": 0.0, "avg_logprob": -0.14120018671429346, "compression_ratio": 1.4709302325581395, "no_speech_prob": 3.96691166315577e-06}, {"id": 55, "seek": 46800, "start": 468.0, "end": 479.0, "text": " that's wrong. That is the one not implemented thing that that subclasses have to define.", "tokens": [300, 311, 2085, 13, 663, 307, 264, 472, 406, 12270, 551, 300, 300, 1422, 11665, 279, 362, 281, 6964, 13], "temperature": 0.0, "avg_logprob": -0.12962562318832155, "compression_ratio": 1.4625, "no_speech_prob": 4.092798008059617e-06}, {"id": 56, "seek": 46800, "start": 479.0, "end": 486.0, "text": " And so now there's no, so as you can see tabular is actually a bit smaller and simpler now.", "tokens": [400, 370, 586, 456, 311, 572, 11, 370, 382, 291, 393, 536, 4421, 1040, 307, 767, 257, 857, 4356, 293, 18587, 586, 13], "temperature": 0.0, "avg_logprob": -0.12962562318832155, "compression_ratio": 1.4625, "no_speech_prob": 4.092798008059617e-06}, {"id": 57, "seek": 46800, "start": 486.0, "end": 490.0, "text": " It doesn't have to have a data source method anymore.", "tokens": [467, 1177, 380, 362, 281, 362, 257, 1412, 4009, 3170, 3602, 13], "temperature": 0.0, "avg_logprob": -0.12962562318832155, "compression_ratio": 1.4625, "no_speech_prob": 4.092798008059617e-06}, {"id": 58, "seek": 49000, "start": 490.0, "end": 501.0, "text": " If you want to create a train invalid set, you can just pass in filts. So if we have a look, here's an example of creating a tabular without passing in filts.", "tokens": [759, 291, 528, 281, 1884, 257, 3847, 34702, 992, 11, 291, 393, 445, 1320, 294, 1387, 1373, 13, 407, 498, 321, 362, 257, 574, 11, 510, 311, 364, 1365, 295, 4084, 257, 4421, 1040, 1553, 8437, 294, 1387, 1373, 13], "temperature": 0.0, "avg_logprob": -0.10232276916503906, "compression_ratio": 1.5359116022099448, "no_speech_prob": 6.540295544255059e-06}, {"id": 59, "seek": 49000, "start": 501.0, "end": 507.0, "text": " And so it just acts like a normal data frame type thing.", "tokens": [400, 370, 309, 445, 10672, 411, 257, 2710, 1412, 3920, 2010, 551, 13], "temperature": 0.0, "avg_logprob": -0.10232276916503906, "compression_ratio": 1.5359116022099448, "no_speech_prob": 6.540295544255059e-06}, {"id": 60, "seek": 49000, "start": 507.0, "end": 514.0, "text": " And here is a processed one with categorify, just like before.", "tokens": [400, 510, 307, 257, 18846, 472, 365, 19250, 2505, 11, 445, 411, 949, 13], "temperature": 0.0, "avg_logprob": -0.10232276916503906, "compression_ratio": 1.5359116022099448, "no_speech_prob": 6.540295544255059e-06}, {"id": 61, "seek": 51400, "start": 514.0, "end": 521.0, "text": " And then here is one with splits.", "tokens": [400, 550, 510, 307, 472, 365, 37741, 13], "temperature": 0.0, "avg_logprob": -0.10360423908677212, "compression_ratio": 1.3508771929824561, "no_speech_prob": 3.373508661752567e-05}, {"id": 62, "seek": 51400, "start": 521.0, "end": 527.0, "text": " Which that's going to be confusing because we call it splits in one place and filts in the other.", "tokens": [3013, 300, 311, 516, 281, 312, 13181, 570, 321, 818, 309, 37741, 294, 472, 1081, 293, 1387, 1373, 294, 264, 661, 13], "temperature": 0.0, "avg_logprob": -0.10360423908677212, "compression_ratio": 1.3508771929824561, "no_speech_prob": 3.373508661752567e-05}, {"id": 63, "seek": 51400, "start": 527.0, "end": 531.0, "text": " We should change that.", "tokens": [492, 820, 1319, 300, 13], "temperature": 0.0, "avg_logprob": -0.10360423908677212, "compression_ratio": 1.3508771929824561, "no_speech_prob": 3.373508661752567e-05}, {"id": 64, "seek": 53100, "start": 531.0, "end": 544.0, "text": " We'll add a note.", "tokens": [492, 603, 909, 257, 3637, 13], "temperature": 0.0, "avg_logprob": -0.21139453138623918, "compression_ratio": 0.9027777777777778, "no_speech_prob": 2.521473334127222e-06}, {"id": 65, "seek": 53100, "start": 544.0, "end": 546.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.21139453138623918, "compression_ratio": 0.9027777777777778, "no_speech_prob": 2.521473334127222e-06}, {"id": 66, "seek": 53100, "start": 546.0, "end": 552.0, "text": " How do I navigate code? I mainly use Vim.", "tokens": [1012, 360, 286, 12350, 3089, 30, 286, 8704, 764, 691, 332, 13], "temperature": 0.0, "avg_logprob": -0.21139453138623918, "compression_ratio": 0.9027777777777778, "no_speech_prob": 2.521473334127222e-06}, {"id": 67, "seek": 55200, "start": 552.0, "end": 567.0, "text": " So I don't have to too much because my code is pretty small and self-contained. But if I do need to jump around, I just use Vim using its tags functionality.", "tokens": [407, 286, 500, 380, 362, 281, 886, 709, 570, 452, 3089, 307, 1238, 1359, 293, 2698, 12, 9000, 3563, 13, 583, 498, 286, 360, 643, 281, 3012, 926, 11, 286, 445, 764, 691, 332, 1228, 1080, 18632, 14980, 13], "temperature": 0.0, "avg_logprob": -0.13254537769392424, "compression_ratio": 1.3049645390070923, "no_speech_prob": 7.001908670645207e-07}, {"id": 68, "seek": 55200, "start": 567.0, "end": 576.0, "text": " And the other thing is the", "tokens": [400, 264, 661, 551, 307, 264], "temperature": 0.0, "avg_logprob": -0.13254537769392424, "compression_ratio": 1.3049645390070923, "no_speech_prob": 7.001908670645207e-07}, {"id": 69, "seek": 57600, "start": 576.0, "end": 582.0, "text": " get NBSourceLink.", "tokens": [483, 426, 8176, 2948, 26822, 13], "temperature": 0.0, "avg_logprob": -0.23077990792014383, "compression_ratio": 1.355072463768116, "no_speech_prob": 1.8057544366456568e-05}, {"id": 70, "seek": 57600, "start": 582.0, "end": 590.0, "text": " Actually, there's a... what's the one that gives it to us?", "tokens": [5135, 11, 456, 311, 257, 485, 437, 311, 264, 472, 300, 2709, 309, 281, 505, 30], "temperature": 0.0, "avg_logprob": -0.23077990792014383, "compression_ratio": 1.355072463768116, "no_speech_prob": 1.8057544366456568e-05}, {"id": 71, "seek": 57600, "start": 590.0, "end": 592.0, "text": " NBSourceLink.", "tokens": [426, 8176, 2948, 26822, 13], "temperature": 0.0, "avg_logprob": -0.23077990792014383, "compression_ratio": 1.355072463768116, "no_speech_prob": 1.8057544366456568e-05}, {"id": 72, "seek": 57600, "start": 592.0, "end": 595.0, "text": " There we go. So you can do it this way.", "tokens": [821, 321, 352, 13, 407, 291, 393, 360, 309, 341, 636, 13], "temperature": 0.0, "avg_logprob": -0.23077990792014383, "compression_ratio": 1.355072463768116, "no_speech_prob": 1.8057544366456568e-05}, {"id": 73, "seek": 57600, "start": 595.0, "end": 598.0, "text": " You get something you can click on.", "tokens": [509, 483, 746, 291, 393, 2052, 322, 13], "temperature": 0.0, "avg_logprob": -0.23077990792014383, "compression_ratio": 1.355072463768116, "no_speech_prob": 1.8057544366456568e-05}, {"id": 74, "seek": 57600, "start": 598.0, "end": 603.0, "text": " And it will take you", "tokens": [400, 309, 486, 747, 291], "temperature": 0.0, "avg_logprob": -0.23077990792014383, "compression_ratio": 1.355072463768116, "no_speech_prob": 1.8057544366456568e-05}, {"id": 75, "seek": 60300, "start": 603.0, "end": 606.0, "text": " to the right spot.", "tokens": [281, 264, 558, 4008, 13], "temperature": 0.0, "avg_logprob": -0.16183578361899165, "compression_ratio": 1.3776223776223777, "no_speech_prob": 7.295974228327395e-06}, {"id": 76, "seek": 60300, "start": 606.0, "end": 611.0, "text": " Yep, there it is. Pipeline.", "tokens": [7010, 11, 456, 309, 307, 13, 35396, 5440, 13], "temperature": 0.0, "avg_logprob": -0.16183578361899165, "compression_ratio": 1.3776223776223777, "no_speech_prob": 7.295974228327395e-06}, {"id": 77, "seek": 60300, "start": 611.0, "end": 616.0, "text": " So that's another option.", "tokens": [407, 300, 311, 1071, 3614, 13], "temperature": 0.0, "avg_logprob": -0.16183578361899165, "compression_ratio": 1.3776223776223777, "no_speech_prob": 7.295974228327395e-06}, {"id": 78, "seek": 60300, "start": 616.0, "end": 621.0, "text": " Quite often I just want to see how something is defined, in which case I'll just", "tokens": [20464, 2049, 286, 445, 528, 281, 536, 577, 746, 307, 7642, 11, 294, 597, 1389, 286, 603, 445], "temperature": 0.0, "avg_logprob": -0.16183578361899165, "compression_ratio": 1.3776223776223777, "no_speech_prob": 7.295974228327395e-06}, {"id": 79, "seek": 60300, "start": 621.0, "end": 626.0, "text": " do the question marks just to double check.", "tokens": [360, 264, 1168, 10640, 445, 281, 3834, 1520, 13], "temperature": 0.0, "avg_logprob": -0.16183578361899165, "compression_ratio": 1.3776223776223777, "no_speech_prob": 7.295974228327395e-06}, {"id": 80, "seek": 62600, "start": 626.0, "end": 635.0, "text": " But yeah, we have, you know, you can attach VS code to a remote terminal easily enough.", "tokens": [583, 1338, 11, 321, 362, 11, 291, 458, 11, 291, 393, 5085, 25091, 3089, 281, 257, 8607, 14709, 3612, 1547, 13], "temperature": 0.0, "avg_logprob": -0.19191153844197592, "compression_ratio": 1.4651162790697674, "no_speech_prob": 9.275837555833277e-07}, {"id": 81, "seek": 62600, "start": 635.0, "end": 641.0, "text": " And so you can always explore it through VS code or whatever.", "tokens": [400, 370, 291, 393, 1009, 6839, 309, 807, 25091, 3089, 420, 2035, 13], "temperature": 0.0, "avg_logprob": -0.19191153844197592, "compression_ratio": 1.4651162790697674, "no_speech_prob": 9.275837555833277e-07}, {"id": 82, "seek": 62600, "start": 641.0, "end": 645.0, "text": " But yeah, it works fine", "tokens": [583, 1338, 11, 309, 1985, 2489], "temperature": 0.0, "avg_logprob": -0.19191153844197592, "compression_ratio": 1.4651162790697674, "no_speech_prob": 9.275837555833277e-07}, {"id": 83, "seek": 62600, "start": 645.0, "end": 654.0, "text": " in Vim. So I could go colon tag PIP tab, enter it to tab complete to pipeline.", "tokens": [294, 691, 332, 13, 407, 286, 727, 352, 8255, 6162, 430, 9139, 4421, 11, 3242, 309, 281, 4421, 3566, 281, 15517, 13], "temperature": 0.0, "avg_logprob": -0.19191153844197592, "compression_ratio": 1.4651162790697674, "no_speech_prob": 9.275837555833277e-07}, {"id": 84, "seek": 65400, "start": 654.0, "end": 659.0, "text": " And there is the class, as you can see.", "tokens": [400, 456, 307, 264, 1508, 11, 382, 291, 393, 536, 13], "temperature": 0.0, "avg_logprob": -0.17196271660622586, "compression_ratio": 1.52803738317757, "no_speech_prob": 6.144090093584964e-06}, {"id": 85, "seek": 65400, "start": 659.0, "end": 664.0, "text": " And then if I go to... oh, I want to know what transform is.", "tokens": [400, 550, 498, 286, 352, 281, 485, 1954, 11, 286, 528, 281, 458, 437, 4088, 307, 13], "temperature": 0.0, "avg_logprob": -0.17196271660622586, "compression_ratio": 1.52803738317757, "no_speech_prob": 6.144090093584964e-06}, {"id": 86, "seek": 65400, "start": 664.0, "end": 670.0, "text": " So control right square bracket, and that will take me straight to the definition of transform, so forth.", "tokens": [407, 1969, 558, 3732, 16904, 11, 293, 300, 486, 747, 385, 2997, 281, 264, 7123, 295, 4088, 11, 370, 5220, 13], "temperature": 0.0, "avg_logprob": -0.17196271660622586, "compression_ratio": 1.52803738317757, "no_speech_prob": 6.144090093584964e-06}, {"id": 87, "seek": 65400, "start": 670.0, "end": 673.0, "text": " Yeah, I guess most editors do the same stuff.", "tokens": [865, 11, 286, 2041, 881, 31446, 360, 264, 912, 1507, 13], "temperature": 0.0, "avg_logprob": -0.17196271660622586, "compression_ratio": 1.52803738317757, "no_speech_prob": 6.144090093584964e-06}, {"id": 88, "seek": 65400, "start": 673.0, "end": 680.0, "text": " But just remember in local, you've got a full browser ball set of modules.", "tokens": [583, 445, 1604, 294, 2654, 11, 291, 600, 658, 257, 1577, 11185, 2594, 992, 295, 16679, 13], "temperature": 0.0, "avg_logprob": -0.17196271660622586, "compression_ratio": 1.52803738317757, "no_speech_prob": 6.144090093584964e-06}, {"id": 89, "seek": 68000, "start": 680.0, "end": 690.0, "text": " What kind of weird bugs did I have? Oh, you know how it is after you've fixed a bug, you kind of throw it out of your head.", "tokens": [708, 733, 295, 3657, 15120, 630, 286, 362, 30, 876, 11, 291, 458, 577, 309, 307, 934, 291, 600, 6806, 257, 7426, 11, 291, 733, 295, 3507, 309, 484, 295, 428, 1378, 13], "temperature": 0.0, "avg_logprob": -0.12463255662184496, "compression_ratio": 1.4177215189873418, "no_speech_prob": 4.425356110004941e-06}, {"id": 90, "seek": 68000, "start": 690.0, "end": 695.0, "text": " One of the big challenges is around", "tokens": [1485, 295, 264, 955, 4759, 307, 926], "temperature": 0.0, "avg_logprob": -0.12463255662184496, "compression_ratio": 1.4177215189873418, "no_speech_prob": 4.425356110004941e-06}, {"id": 91, "seek": 68000, "start": 695.0, "end": 700.0, "text": " setup. Setup is actually quite tricky.", "tokens": [8657, 13, 8928, 1010, 307, 767, 1596, 12414, 13], "temperature": 0.0, "avg_logprob": -0.12463255662184496, "compression_ratio": 1.4177215189873418, "no_speech_prob": 4.425356110004941e-06}, {"id": 92, "seek": 68000, "start": 700.0, "end": 705.0, "text": " So what we do in pipeline", "tokens": [407, 437, 321, 360, 294, 15517], "temperature": 0.0, "avg_logprob": -0.12463255662184496, "compression_ratio": 1.4177215189873418, "no_speech_prob": 4.425356110004941e-06}, {"id": 93, "seek": 70500, "start": 705.0, "end": 710.0, "text": " with setup", "tokens": [365, 8657], "temperature": 0.0, "avg_logprob": -0.09359570139462185, "compression_ratio": 1.9090909090909092, "no_speech_prob": 9.079979463422205e-06}, {"id": 94, "seek": 70500, "start": 710.0, "end": 714.0, "text": " is we first of all make a copy of our transforms", "tokens": [307, 321, 700, 295, 439, 652, 257, 5055, 295, 527, 35592], "temperature": 0.0, "avg_logprob": -0.09359570139462185, "compression_ratio": 1.9090909090909092, "no_speech_prob": 9.079979463422205e-06}, {"id": 95, "seek": 70500, "start": 714.0, "end": 717.0, "text": " and we then clear our transforms.", "tokens": [293, 321, 550, 1850, 527, 35592, 13], "temperature": 0.0, "avg_logprob": -0.09359570139462185, "compression_ratio": 1.9090909090909092, "no_speech_prob": 9.079979463422205e-06}, {"id": 96, "seek": 70500, "start": 717.0, "end": 722.0, "text": " And then we go through the copy of the transforms and add them back one at a time.", "tokens": [400, 550, 321, 352, 807, 264, 5055, 295, 264, 35592, 293, 909, 552, 646, 472, 412, 257, 565, 13], "temperature": 0.0, "avg_logprob": -0.09359570139462185, "compression_ratio": 1.9090909090909092, "no_speech_prob": 9.079979463422205e-06}, {"id": 97, "seek": 70500, "start": 722.0, "end": 728.0, "text": " And after adding each one back, well, before adding each one back, we call setup and then we add.", "tokens": [400, 934, 5127, 1184, 472, 646, 11, 731, 11, 949, 5127, 1184, 472, 646, 11, 321, 818, 8657, 293, 550, 321, 909, 13], "temperature": 0.0, "avg_logprob": -0.09359570139462185, "compression_ratio": 1.9090909090909092, "no_speech_prob": 9.079979463422205e-06}, {"id": 98, "seek": 70500, "start": 728.0, "end": 734.0, "text": " If you don't do this, if you just call setup on all of them after adding them all,", "tokens": [759, 291, 500, 380, 360, 341, 11, 498, 291, 445, 818, 8657, 322, 439, 295, 552, 934, 5127, 552, 439, 11], "temperature": 0.0, "avg_logprob": -0.09359570139462185, "compression_ratio": 1.9090909090909092, "no_speech_prob": 9.079979463422205e-06}, {"id": 99, "seek": 73400, "start": 734.0, "end": 741.0, "text": " you kind of have this weird thing where all of your transforms are being called even before they're set up.", "tokens": [291, 733, 295, 362, 341, 3657, 551, 689, 439, 295, 428, 35592, 366, 885, 1219, 754, 949, 436, 434, 992, 493, 13], "temperature": 0.0, "avg_logprob": -0.10182874099068019, "compression_ratio": 1.7198067632850242, "no_speech_prob": 2.295806780239218e-06}, {"id": 100, "seek": 73400, "start": 741.0, "end": 746.0, "text": " So you kind of have to add checks inside your transforms to make sure whether they're set up yet or not.", "tokens": [407, 291, 733, 295, 362, 281, 909, 13834, 1854, 428, 35592, 281, 652, 988, 1968, 436, 434, 992, 493, 1939, 420, 406, 13], "temperature": 0.0, "avg_logprob": -0.10182874099068019, "compression_ratio": 1.7198067632850242, "no_speech_prob": 2.295806780239218e-06}, {"id": 101, "seek": 73400, "start": 746.0, "end": 750.0, "text": " And if they're not, then you like do nothing. It's super awkward.", "tokens": [400, 498, 436, 434, 406, 11, 550, 291, 411, 360, 1825, 13, 467, 311, 1687, 11411, 13], "temperature": 0.0, "avg_logprob": -0.10182874099068019, "compression_ratio": 1.7198067632850242, "no_speech_prob": 2.295806780239218e-06}, {"id": 102, "seek": 73400, "start": 750.0, "end": 754.0, "text": " And so like one of the problems was", "tokens": [400, 370, 411, 472, 295, 264, 2740, 390], "temperature": 0.0, "avg_logprob": -0.10182874099068019, "compression_ratio": 1.7198067632850242, "no_speech_prob": 2.295806780239218e-06}, {"id": 103, "seek": 73400, "start": 754.0, "end": 760.0, "text": " in the train and valid subsets, they both", "tokens": [294, 264, 3847, 293, 7363, 2090, 1385, 11, 436, 1293], "temperature": 0.0, "avg_logprob": -0.10182874099068019, "compression_ratio": 1.7198067632850242, "no_speech_prob": 2.295806780239218e-06}, {"id": 104, "seek": 76000, "start": 760.0, "end": 765.0, "text": " had their own kind of copy of the same pipeline. And previously I wasn't going", "tokens": [632, 641, 1065, 733, 295, 5055, 295, 264, 912, 15517, 13, 400, 8046, 286, 2067, 380, 516], "temperature": 0.0, "avg_logprob": -0.26216484183695776, "compression_ratio": 1.5677419354838709, "no_speech_prob": 2.5068931790883653e-05}, {"id": 105, "seek": 76000, "start": 765.0, "end": 769.0, "text": " to firms equals I wasn't clearing it out like this in place,", "tokens": [281, 18055, 6915, 286, 2067, 380, 23937, 309, 484, 411, 341, 294, 1081, 11], "temperature": 0.0, "avg_logprob": -0.26216484183695776, "compression_ratio": 1.5677419354838709, "no_speech_prob": 2.5068931790883653e-05}, {"id": 106, "seek": 76000, "start": 769.0, "end": 774.0, "text": " but instead I was going like self dot to firms.", "tokens": [457, 2602, 286, 390, 516, 411, 2698, 5893, 281, 18055, 13], "temperature": 0.0, "avg_logprob": -0.26216484183695776, "compression_ratio": 1.5677419354838709, "no_speech_prob": 2.5068931790883653e-05}, {"id": 107, "seek": 76000, "start": 774.0, "end": 781.0, "text": " Sorry, self dot fs comma to firms equals", "tokens": [4919, 11, 2698, 5893, 283, 82, 22117, 281, 18055, 6915], "temperature": 0.0, "avg_logprob": -0.26216484183695776, "compression_ratio": 1.5677419354838709, "no_speech_prob": 2.5068931790883653e-05}, {"id": 108, "seek": 76000, "start": 781.0, "end": 784.0, "text": " nothing comma.", "tokens": [1825, 22117, 13], "temperature": 0.0, "avg_logprob": -0.26216484183695776, "compression_ratio": 1.5677419354838709, "no_speech_prob": 2.5068931790883653e-05}, {"id": 109, "seek": 78400, "start": 784.0, "end": 790.0, "text": " Oops, come out.", "tokens": [21726, 11, 808, 484, 13], "temperature": 0.0, "avg_logprob": -0.21840653052696815, "compression_ratio": 1.5914634146341464, "no_speech_prob": 1.8738219296210445e-06}, {"id": 110, "seek": 78400, "start": 790.0, "end": 793.0, "text": " Self dot to firms.", "tokens": [16348, 5893, 281, 18055, 13], "temperature": 0.0, "avg_logprob": -0.21840653052696815, "compression_ratio": 1.5914634146341464, "no_speech_prob": 1.8738219296210445e-06}, {"id": 111, "seek": 78400, "start": 793.0, "end": 798.0, "text": " So before I was doing it like that, which kind of looks like it's doing the same thing, right?", "tokens": [407, 949, 286, 390, 884, 309, 411, 300, 11, 597, 733, 295, 1542, 411, 309, 311, 884, 264, 912, 551, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.21840653052696815, "compression_ratio": 1.5914634146341464, "no_speech_prob": 1.8738219296210445e-06}, {"id": 112, "seek": 78400, "start": 798.0, "end": 804.0, "text": " It's setting self dot fs to to be empty and it's setting to firms to be", "tokens": [467, 311, 3287, 2698, 5893, 283, 82, 281, 281, 312, 6707, 293, 309, 311, 3287, 281, 18055, 281, 312], "temperature": 0.0, "avg_logprob": -0.21840653052696815, "compression_ratio": 1.5914634146341464, "no_speech_prob": 1.8738219296210445e-06}, {"id": 113, "seek": 78400, "start": 804.0, "end": 809.0, "text": " my previous set. It looks the same. But the problem is that", "tokens": [452, 3894, 992, 13, 467, 1542, 264, 912, 13, 583, 264, 1154, 307, 300], "temperature": 0.0, "avg_logprob": -0.21840653052696815, "compression_ratio": 1.5914634146341464, "no_speech_prob": 1.8738219296210445e-06}, {"id": 114, "seek": 80900, "start": 809.0, "end": 815.0, "text": " if there are other pipelines that are pointing at the same list of transforms, they're not being emptied out by this.", "tokens": [498, 456, 366, 661, 40168, 300, 366, 12166, 412, 264, 912, 1329, 295, 35592, 11, 436, 434, 406, 885, 6113, 1091, 484, 538, 341, 13], "temperature": 0.0, "avg_logprob": -0.16131334940592448, "compression_ratio": 1.547872340425532, "no_speech_prob": 3.905367066181498e-06}, {"id": 115, "seek": 80900, "start": 815.0, "end": 820.0, "text": " Where else self dot fs dot clear does empty them out.", "tokens": [2305, 1646, 2698, 5893, 283, 82, 5893, 1850, 775, 6707, 552, 484, 13], "temperature": 0.0, "avg_logprob": -0.16131334940592448, "compression_ratio": 1.547872340425532, "no_speech_prob": 3.905367066181498e-06}, {"id": 116, "seek": 80900, "start": 820.0, "end": 827.0, "text": " So like that was an example of a weird bug was before it was with the old version.", "tokens": [407, 411, 300, 390, 364, 1365, 295, 257, 3657, 7426, 390, 949, 309, 390, 365, 264, 1331, 3037, 13], "temperature": 0.0, "avg_logprob": -0.16131334940592448, "compression_ratio": 1.547872340425532, "no_speech_prob": 3.905367066181498e-06}, {"id": 117, "seek": 80900, "start": 827.0, "end": 836.0, "text": " Subsets weren't setting up properly.", "tokens": [37471, 1385, 4999, 380, 3287, 493, 6108, 13], "temperature": 0.0, "avg_logprob": -0.16131334940592448, "compression_ratio": 1.547872340425532, "no_speech_prob": 3.905367066181498e-06}, {"id": 118, "seek": 83600, "start": 836.0, "end": 846.0, "text": " And it was kind of hard to debug because there was just a few too many layers.", "tokens": [400, 309, 390, 733, 295, 1152, 281, 24083, 570, 456, 390, 445, 257, 1326, 886, 867, 7914, 13], "temperature": 0.0, "avg_logprob": -0.1817419333536117, "compression_ratio": 1.3287671232876712, "no_speech_prob": 9.514236808172427e-06}, {"id": 119, "seek": 83600, "start": 846.0, "end": 849.0, "text": " OK.", "tokens": [2264, 13], "temperature": 0.0, "avg_logprob": -0.1817419333536117, "compression_ratio": 1.3287671232876712, "no_speech_prob": 9.514236808172427e-06}, {"id": 120, "seek": 83600, "start": 849.0, "end": 853.0, "text": " So, yes, on tabular now.", "tokens": [407, 11, 2086, 11, 322, 4421, 1040, 586, 13], "temperature": 0.0, "avg_logprob": -0.1817419333536117, "compression_ratio": 1.3287671232876712, "no_speech_prob": 9.514236808172427e-06}, {"id": 121, "seek": 83600, "start": 853.0, "end": 860.0, "text": " We don't have to call tabular object dot", "tokens": [492, 500, 380, 362, 281, 818, 4421, 1040, 2657, 5893], "temperature": 0.0, "avg_logprob": -0.1817419333536117, "compression_ratio": 1.3287671232876712, "no_speech_prob": 9.514236808172427e-06}, {"id": 122, "seek": 83600, "start": 860.0, "end": 864.0, "text": " data source anymore. We can just pass splits,", "tokens": [1412, 4009, 3602, 13, 492, 393, 445, 1320, 37741, 11], "temperature": 0.0, "avg_logprob": -0.1817419333536117, "compression_ratio": 1.3287671232876712, "no_speech_prob": 9.514236808172427e-06}, {"id": 123, "seek": 86400, "start": 864.0, "end": 868.0, "text": " which I think I'll rename into filts or maybe I'll call them all filts.", "tokens": [597, 286, 519, 286, 603, 36741, 666, 1387, 1373, 420, 1310, 286, 603, 818, 552, 439, 1387, 1373, 13], "temperature": 0.0, "avg_logprob": -0.17980093426174587, "compression_ratio": 1.6888888888888889, "no_speech_prob": 8.139235433191061e-06}, {"id": 124, "seek": 86400, "start": 868.0, "end": 871.0, "text": " Maybe I'll call them off bits. Anyway, we'll make it more consistent.", "tokens": [2704, 286, 603, 818, 552, 766, 9239, 13, 5684, 11, 321, 603, 652, 309, 544, 8398, 13], "temperature": 0.0, "avg_logprob": -0.17980093426174587, "compression_ratio": 1.6888888888888889, "no_speech_prob": 8.139235433191061e-06}, {"id": 125, "seek": 86400, "start": 871.0, "end": 875.0, "text": " We can just pass that into our.", "tokens": [492, 393, 445, 1320, 300, 666, 527, 13], "temperature": 0.0, "avg_logprob": -0.17980093426174587, "compression_ratio": 1.6888888888888889, "no_speech_prob": 8.139235433191061e-06}, {"id": 126, "seek": 86400, "start": 875.0, "end": 880.0, "text": " Constructor. And so the other thing about this is we don't have to call set up anymore.", "tokens": [8574, 14535, 13, 400, 370, 264, 661, 551, 466, 341, 307, 321, 500, 380, 362, 281, 818, 992, 493, 3602, 13], "temperature": 0.0, "avg_logprob": -0.17980093426174587, "compression_ratio": 1.6888888888888889, "no_speech_prob": 8.139235433191061e-06}, {"id": 127, "seek": 86400, "start": 880.0, "end": 884.0, "text": " We have all the information we need to set up as soon as we dance here at this.", "tokens": [492, 362, 439, 264, 1589, 321, 643, 281, 992, 493, 382, 2321, 382, 321, 4489, 510, 412, 341, 13], "temperature": 0.0, "avg_logprob": -0.17980093426174587, "compression_ratio": 1.6888888888888889, "no_speech_prob": 8.139235433191061e-06}, {"id": 128, "seek": 86400, "start": 884.0, "end": 890.0, "text": " So we just call set up directly in it.", "tokens": [407, 321, 445, 818, 992, 493, 3838, 294, 309, 13], "temperature": 0.0, "avg_logprob": -0.17980093426174587, "compression_ratio": 1.6888888888888889, "no_speech_prob": 8.139235433191061e-06}, {"id": 129, "seek": 89000, "start": 890.0, "end": 895.0, "text": " Another example of kind of weird bugs to avoid again, it's the subset functionality.", "tokens": [3996, 1365, 295, 733, 295, 3657, 15120, 281, 5042, 797, 11, 309, 311, 264, 25993, 14980, 13], "temperature": 0.0, "avg_logprob": -0.13253789901733398, "compression_ratio": 1.6591928251121075, "no_speech_prob": 2.5612157514842693e-06}, {"id": 130, "seek": 89000, "start": 895.0, "end": 901.0, "text": " When we subset, we want to create a new tabular object with a slice,", "tokens": [1133, 321, 25993, 11, 321, 528, 281, 1884, 257, 777, 4421, 1040, 2657, 365, 257, 13153, 11], "temperature": 0.0, "avg_logprob": -0.13253789901733398, "compression_ratio": 1.6591928251121075, "no_speech_prob": 2.5612157514842693e-06}, {"id": 131, "seek": 89000, "start": 901.0, "end": 908.0, "text": " the split, you know, the sliced the split of what we want.", "tokens": [264, 7472, 11, 291, 458, 11, 264, 27098, 264, 7472, 295, 437, 321, 528, 13], "temperature": 0.0, "avg_logprob": -0.13253789901733398, "compression_ratio": 1.6591928251121075, "no_speech_prob": 2.5612157514842693e-06}, {"id": 132, "seek": 89000, "start": 908.0, "end": 913.0, "text": " But we had to make sure that in new we do to set up equals false.", "tokens": [583, 321, 632, 281, 652, 988, 300, 294, 777, 321, 360, 281, 992, 493, 6915, 7908, 13], "temperature": 0.0, "avg_logprob": -0.13253789901733398, "compression_ratio": 1.6591928251121075, "no_speech_prob": 2.5612157514842693e-06}, {"id": 133, "seek": 89000, "start": 913.0, "end": 919.0, "text": " Otherwise, when you create the subset, it's going to rerun set up, which would be annoying.", "tokens": [10328, 11, 562, 291, 1884, 264, 25993, 11, 309, 311, 516, 281, 43819, 409, 992, 493, 11, 597, 576, 312, 11304, 13], "temperature": 0.0, "avg_logprob": -0.13253789901733398, "compression_ratio": 1.6591928251121075, "no_speech_prob": 2.5612157514842693e-06}, {"id": 134, "seek": 91900, "start": 919.0, "end": 926.0, "text": " So we found the bug because we added some tests and found they weren't passing.", "tokens": [407, 321, 1352, 264, 7426, 570, 321, 3869, 512, 6921, 293, 1352, 436, 4999, 380, 8437, 13], "temperature": 0.0, "avg_logprob": -0.1196968389111896, "compression_ratio": 1.6282722513089005, "no_speech_prob": 1.4737885976501275e-05}, {"id": 135, "seek": 91900, "start": 926.0, "end": 933.0, "text": " So we always try to think of, you know, tests that we can we can add.", "tokens": [407, 321, 1009, 853, 281, 519, 295, 11, 291, 458, 11, 6921, 300, 321, 393, 321, 393, 909, 13], "temperature": 0.0, "avg_logprob": -0.1196968389111896, "compression_ratio": 1.6282722513089005, "no_speech_prob": 1.4737885976501275e-05}, {"id": 136, "seek": 91900, "start": 933.0, "end": 940.0, "text": " So, yeah, tabular reports, you can check out. It's in forty two.", "tokens": [407, 11, 1338, 11, 4421, 1040, 7122, 11, 291, 393, 1520, 484, 13, 467, 311, 294, 15815, 732, 13], "temperature": 0.0, "avg_logprob": -0.1196968389111896, "compression_ratio": 1.6282722513089005, "no_speech_prob": 1.4737885976501275e-05}, {"id": 137, "seek": 91900, "start": 940.0, "end": 944.0, "text": " It's missing an underscore from the front. So that suggests that I haven't been working on that.", "tokens": [467, 311, 5361, 364, 37556, 490, 264, 1868, 13, 407, 300, 13409, 300, 286, 2378, 380, 668, 1364, 322, 300, 13], "temperature": 0.0, "avg_logprob": -0.1196968389111896, "compression_ratio": 1.6282722513089005, "no_speech_prob": 1.4737885976501275e-05}, {"id": 138, "seek": 94400, "start": 944.0, "end": 949.0, "text": " That's been surveillance, baby. But that suggests that it should be more or less working.", "tokens": [663, 311, 668, 18475, 11, 3186, 13, 583, 300, 13409, 300, 309, 820, 312, 544, 420, 1570, 1364, 13], "temperature": 0.0, "avg_logprob": -0.11856224478744878, "compression_ratio": 1.530612244897959, "no_speech_prob": 8.800877367320936e-06}, {"id": 139, "seek": 94400, "start": 949.0, "end": 953.0, "text": " So you could certainly try it out. It certainly hasn't been much used, though.", "tokens": [407, 291, 727, 3297, 853, 309, 484, 13, 467, 3297, 6132, 380, 668, 709, 1143, 11, 1673, 13], "temperature": 0.0, "avg_logprob": -0.11856224478744878, "compression_ratio": 1.530612244897959, "no_speech_prob": 8.800877367320936e-06}, {"id": 140, "seek": 94400, "start": 953.0, "end": 960.0, "text": " So it might be a bit buggy still. But, yeah, hopefully you'll find that's working.", "tokens": [407, 309, 1062, 312, 257, 857, 7426, 1480, 920, 13, 583, 11, 1338, 11, 4696, 291, 603, 915, 300, 311, 1364, 13], "temperature": 0.0, "avg_logprob": -0.11856224478744878, "compression_ratio": 1.530612244897959, "no_speech_prob": 8.800877367320936e-06}, {"id": 141, "seek": 94400, "start": 960.0, "end": 969.0, "text": " I believe it's a lot faster than the pandas one.", "tokens": [286, 1697, 309, 311, 257, 688, 4663, 813, 264, 4565, 296, 472, 13], "temperature": 0.0, "avg_logprob": -0.11856224478744878, "compression_ratio": 1.530612244897959, "no_speech_prob": 8.800877367320936e-06}, {"id": 142, "seek": 96900, "start": 969.0, "end": 976.0, "text": " OK, so those are those changes. So everything else here is basically the same.", "tokens": [2264, 11, 370, 729, 366, 729, 2962, 13, 407, 1203, 1646, 510, 307, 1936, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.12658747920283564, "compression_ratio": 1.530612244897959, "no_speech_prob": 1.0615601240715478e-05}, {"id": 143, "seek": 96900, "start": 976.0, "end": 984.0, "text": " Oh, and then the other thing I do is I added data bunch.", "tokens": [876, 11, 293, 550, 264, 661, 551, 286, 360, 307, 286, 3869, 1412, 3840, 13], "temperature": 0.0, "avg_logprob": -0.12658747920283564, "compression_ratio": 1.530612244897959, "no_speech_prob": 1.0615601240715478e-05}, {"id": 144, "seek": 96900, "start": 984.0, "end": 989.0, "text": " So that was nice and easy because data bunch is now in filtered base.", "tokens": [407, 300, 390, 1481, 293, 1858, 570, 1412, 3840, 307, 586, 294, 37111, 3096, 13], "temperature": 0.0, "avg_logprob": -0.12658747920283564, "compression_ratio": 1.530612244897959, "no_speech_prob": 1.0615601240715478e-05}, {"id": 145, "seek": 96900, "start": 989.0, "end": 997.0, "text": " So we get that for free. Sorry, Marlon, I don't know what you mean by probabilistic inference.", "tokens": [407, 321, 483, 300, 337, 1737, 13, 4919, 11, 2039, 14864, 11, 286, 500, 380, 458, 437, 291, 914, 538, 31959, 3142, 38253, 13], "temperature": 0.0, "avg_logprob": -0.12658747920283564, "compression_ratio": 1.530612244897959, "no_speech_prob": 1.0615601240715478e-05}, {"id": 146, "seek": 99700, "start": 997.0, "end": 1005.0, "text": " OK, so that's that.", "tokens": [2264, 11, 370, 300, 311, 300, 13], "temperature": 0.0, "avg_logprob": -0.2145906857081822, "compression_ratio": 1.075, "no_speech_prob": 5.862527814315399e-06}, {"id": 147, "seek": 99700, "start": 1005.0, "end": 1013.0, "text": " So maybe we can go back and look at.", "tokens": [407, 1310, 321, 393, 352, 646, 293, 574, 412, 13], "temperature": 0.0, "avg_logprob": -0.2145906857081822, "compression_ratio": 1.075, "no_speech_prob": 5.862527814315399e-06}, {"id": 148, "seek": 99700, "start": 1013.0, "end": 1020.0, "text": " Oh, and oh, one a little bit.", "tokens": [876, 11, 293, 1954, 11, 472, 257, 707, 857, 13], "temperature": 0.0, "avg_logprob": -0.2145906857081822, "compression_ratio": 1.075, "no_speech_prob": 5.862527814315399e-06}, {"id": 149, "seek": 102000, "start": 1020.0, "end": 1030.0, "text": " That'd be fun. And actually, I don't know if you remember that.", "tokens": [663, 1116, 312, 1019, 13, 400, 767, 11, 286, 500, 380, 458, 498, 291, 1604, 300, 13], "temperature": 0.0, "avg_logprob": -0.1506787027631487, "compression_ratio": 1.4774193548387098, "no_speech_prob": 8.445915113952651e-07}, {"id": 150, "seek": 102000, "start": 1030.0, "end": 1034.0, "text": " Oh, oh, and oh, one aren't quite the start.", "tokens": [876, 11, 1954, 11, 293, 1954, 11, 472, 3212, 380, 1596, 264, 722, 13], "temperature": 0.0, "avg_logprob": -0.1506787027631487, "compression_ratio": 1.4774193548387098, "no_speech_prob": 8.445915113952651e-07}, {"id": 151, "seek": 102000, "start": 1034.0, "end": 1041.0, "text": " There's there's all the ones that start with nine, which is the notebook stuff,", "tokens": [821, 311, 456, 311, 439, 264, 2306, 300, 722, 365, 4949, 11, 597, 307, 264, 21060, 1507, 11], "temperature": 0.0, "avg_logprob": -0.1506787027631487, "compression_ratio": 1.4774193548387098, "no_speech_prob": 8.445915113952651e-07}, {"id": 152, "seek": 102000, "start": 1041.0, "end": 1043.0, "text": " which I don't know that we're looking at.", "tokens": [597, 286, 500, 380, 458, 300, 321, 434, 1237, 412, 13], "temperature": 0.0, "avg_logprob": -0.1506787027631487, "compression_ratio": 1.4774193548387098, "no_speech_prob": 8.445915113952651e-07}, {"id": 153, "seek": 104300, "start": 1043.0, "end": 1052.0, "text": " But there's also a special one, which is imports, PY, and that is not generated by a notebook.", "tokens": [583, 456, 311, 611, 257, 2121, 472, 11, 597, 307, 41596, 11, 430, 56, 11, 293, 300, 307, 406, 10833, 538, 257, 21060, 13], "temperature": 0.0, "avg_logprob": -0.17729905533463988, "compression_ratio": 1.4261363636363635, "no_speech_prob": 9.275976253775298e-07}, {"id": 154, "seek": 104300, "start": 1052.0, "end": 1055.0, "text": " And so we actually start with imports to PY.", "tokens": [400, 370, 321, 767, 722, 365, 41596, 281, 430, 56, 13], "temperature": 0.0, "avg_logprob": -0.17729905533463988, "compression_ratio": 1.4261363636363635, "no_speech_prob": 9.275976253775298e-07}, {"id": 155, "seek": 104300, "start": 1055.0, "end": 1061.0, "text": " So that's got all the imports, as you can see.", "tokens": [407, 300, 311, 658, 439, 264, 41596, 11, 382, 291, 393, 536, 13], "temperature": 0.0, "avg_logprob": -0.17729905533463988, "compression_ratio": 1.4261363636363635, "no_speech_prob": 9.275976253775298e-07}, {"id": 156, "seek": 104300, "start": 1061.0, "end": 1064.0, "text": " These types here, I think, are only in Python three point seven.", "tokens": [1981, 3467, 510, 11, 286, 519, 11, 366, 787, 294, 15329, 1045, 935, 3407, 13], "temperature": 0.0, "avg_logprob": -0.17729905533463988, "compression_ratio": 1.4261363636363635, "no_speech_prob": 9.275976253775298e-07}, {"id": 157, "seek": 106400, "start": 1064.0, "end": 1073.0, "text": " So we patch them in if they're missing.", "tokens": [407, 321, 9972, 552, 294, 498, 436, 434, 5361, 13], "temperature": 0.0, "avg_logprob": -0.13013753157395583, "compression_ratio": 1.4855491329479769, "no_speech_prob": 5.804914167129027e-07}, {"id": 158, "seek": 106400, "start": 1073.0, "end": 1076.0, "text": " And then we have.", "tokens": [400, 550, 321, 362, 13], "temperature": 0.0, "avg_logprob": -0.13013753157395583, "compression_ratio": 1.4855491329479769, "no_speech_prob": 5.804914167129027e-07}, {"id": 159, "seek": 106400, "start": 1076.0, "end": 1081.0, "text": " A tiny number of people functions just for checking your quality or doing nothing", "tokens": [316, 5870, 1230, 295, 561, 6828, 445, 337, 8568, 428, 3125, 420, 884, 1825], "temperature": 0.0, "avg_logprob": -0.13013753157395583, "compression_ratio": 1.4855491329479769, "no_speech_prob": 5.804914167129027e-07}, {"id": 160, "seek": 106400, "start": 1081.0, "end": 1084.0, "text": " and checking if something's an iterator or a collection.", "tokens": [293, 8568, 498, 746, 311, 364, 17138, 1639, 420, 257, 5765, 13], "temperature": 0.0, "avg_logprob": -0.13013753157395583, "compression_ratio": 1.4855491329479769, "no_speech_prob": 5.804914167129027e-07}, {"id": 161, "seek": 106400, "start": 1084.0, "end": 1090.0, "text": " I think these are probably things we needed in the notebook.", "tokens": [286, 519, 613, 366, 1391, 721, 321, 2978, 294, 264, 21060, 13], "temperature": 0.0, "avg_logprob": -0.13013753157395583, "compression_ratio": 1.4855491329479769, "no_speech_prob": 5.804914167129027e-07}, {"id": 162, "seek": 109000, "start": 1090.0, "end": 1096.0, "text": " The notebook notebooks. So that's why they're here.", "tokens": [440, 21060, 43782, 13, 407, 300, 311, 983, 436, 434, 510, 13], "temperature": 0.0, "avg_logprob": -0.13705692916619974, "compression_ratio": 1.5104895104895104, "no_speech_prob": 7.527544767071959e-06}, {"id": 163, "seek": 109000, "start": 1096.0, "end": 1104.0, "text": " So that one's not created by a notebook.", "tokens": [407, 300, 472, 311, 406, 2942, 538, 257, 21060, 13], "temperature": 0.0, "avg_logprob": -0.13705692916619974, "compression_ratio": 1.5104895104895104, "no_speech_prob": 7.527544767071959e-06}, {"id": 164, "seek": 109000, "start": 1104.0, "end": 1112.0, "text": " So, yes, so going all the way back to zero zero.", "tokens": [407, 11, 2086, 11, 370, 516, 439, 264, 636, 646, 281, 4018, 4018, 13], "temperature": 0.0, "avg_logprob": -0.13705692916619974, "compression_ratio": 1.5104895104895104, "no_speech_prob": 7.527544767071959e-06}, {"id": 165, "seek": 109000, "start": 1112.0, "end": 1115.0, "text": " I kind of the first thing I wanted to write was something which would test", "tokens": [286, 733, 295, 264, 700, 551, 286, 1415, 281, 2464, 390, 746, 597, 576, 1500], "temperature": 0.0, "avg_logprob": -0.13705692916619974, "compression_ratio": 1.5104895104895104, "no_speech_prob": 7.527544767071959e-06}, {"id": 166, "seek": 111500, "start": 1115.0, "end": 1122.0, "text": " whether A and B could successfully be compared using some comparator.", "tokens": [1968, 316, 293, 363, 727, 10727, 312, 5347, 1228, 512, 6311, 1639, 13], "temperature": 0.0, "avg_logprob": -0.11661967186078634, "compression_ratio": 1.6149732620320856, "no_speech_prob": 2.7693724860000657e-06}, {"id": 167, "seek": 111500, "start": 1122.0, "end": 1131.0, "text": " For example, test whether one comma two and one comma two are equal.", "tokens": [1171, 1365, 11, 1500, 1968, 472, 22117, 732, 293, 472, 22117, 732, 366, 2681, 13], "temperature": 0.0, "avg_logprob": -0.11661967186078634, "compression_ratio": 1.6149732620320856, "no_speech_prob": 2.7693724860000657e-06}, {"id": 168, "seek": 111500, "start": 1131.0, "end": 1138.0, "text": " The problem is that if this this could pass and be wrong, because what if test always return true?", "tokens": [440, 1154, 307, 300, 498, 341, 341, 727, 1320, 293, 312, 2085, 11, 570, 437, 498, 1500, 1009, 2736, 2074, 30], "temperature": 0.0, "avg_logprob": -0.11661967186078634, "compression_ratio": 1.6149732620320856, "no_speech_prob": 2.7693724860000657e-06}, {"id": 169, "seek": 111500, "start": 1138.0, "end": 1143.0, "text": " So I actually did a way to test whether it's successfully fails.", "tokens": [407, 286, 767, 630, 257, 636, 281, 1500, 1968, 309, 311, 10727, 18199, 13], "temperature": 0.0, "avg_logprob": -0.11661967186078634, "compression_ratio": 1.6149732620320856, "no_speech_prob": 2.7693724860000657e-06}, {"id": 170, "seek": 114300, "start": 1143.0, "end": 1151.0, "text": " But my tests, the idea is that they always throw an exception if they fail, specifically an assertion exception.", "tokens": [583, 452, 6921, 11, 264, 1558, 307, 300, 436, 1009, 3507, 364, 11183, 498, 436, 3061, 11, 4682, 364, 19810, 313, 11183, 13], "temperature": 0.0, "avg_logprob": -0.12458090531198603, "compression_ratio": 1.6818181818181819, "no_speech_prob": 1.0511101891097496e-06}, {"id": 171, "seek": 114300, "start": 1151.0, "end": 1158.0, "text": " The reason for that is that if you like run a notebook that causes an exception, you'll get a nice stack trace and all that kind of a thing.", "tokens": [440, 1778, 337, 300, 307, 300, 498, 291, 411, 1190, 257, 21060, 300, 7700, 364, 11183, 11, 291, 603, 483, 257, 1481, 8630, 13508, 293, 439, 300, 733, 295, 257, 551, 13], "temperature": 0.0, "avg_logprob": -0.12458090531198603, "compression_ratio": 1.6818181818181819, "no_speech_prob": 1.0511101891097496e-06}, {"id": 172, "seek": 114300, "start": 1158.0, "end": 1161.0, "text": " So it's a good way to show a test failure, in my opinion.", "tokens": [407, 309, 311, 257, 665, 636, 281, 855, 257, 1500, 7763, 11, 294, 452, 4800, 13], "temperature": 0.0, "avg_logprob": -0.12458090531198603, "compression_ratio": 1.6818181818181819, "no_speech_prob": 1.0511101891097496e-06}, {"id": 173, "seek": 114300, "start": 1161.0, "end": 1165.0, "text": " So that means I needed to have a way to test for failures.", "tokens": [407, 300, 1355, 286, 2978, 281, 362, 257, 636, 281, 1500, 337, 20774, 13], "temperature": 0.0, "avg_logprob": -0.12458090531198603, "compression_ratio": 1.6818181818181819, "no_speech_prob": 1.0511101891097496e-06}, {"id": 174, "seek": 116500, "start": 1165.0, "end": 1181.0, "text": " You can't test for failures by like just passing the code directly in like that, because that would actually run this code.", "tokens": [509, 393, 380, 1500, 337, 20774, 538, 411, 445, 8437, 264, 3089, 3838, 294, 411, 300, 11, 570, 300, 576, 767, 1190, 341, 3089, 13], "temperature": 0.0, "avg_logprob": -0.09261061206008449, "compression_ratio": 1.5083798882681565, "no_speech_prob": 1.235950577438416e-07}, {"id": 175, "seek": 116500, "start": 1181.0, "end": 1185.0, "text": " It would cause an exception. And that's it.", "tokens": [467, 576, 3082, 364, 11183, 13, 400, 300, 311, 309, 13], "temperature": 0.0, "avg_logprob": -0.09261061206008449, "compression_ratio": 1.5083798882681565, "no_speech_prob": 1.235950577438416e-07}, {"id": 176, "seek": 116500, "start": 1185.0, "end": 1191.0, "text": " The exception already happens. So you always have to put a lambda there so it doesn't actually run it.", "tokens": [440, 11183, 1217, 2314, 13, 407, 291, 1009, 362, 281, 829, 257, 13607, 456, 370, 309, 1177, 380, 767, 1190, 309, 13], "temperature": 0.0, "avg_logprob": -0.09261061206008449, "compression_ratio": 1.5083798882681565, "no_speech_prob": 1.235950577438416e-07}, {"id": 177, "seek": 119100, "start": 1191.0, "end": 1200.0, "text": " So the first thing I actually needed to do was create a test fail function, which will try to call the function.", "tokens": [407, 264, 700, 551, 286, 767, 2978, 281, 360, 390, 1884, 257, 1500, 3061, 2445, 11, 597, 486, 853, 281, 818, 264, 2445, 13], "temperature": 0.0, "avg_logprob": -0.11129482781014792, "compression_ratio": 1.6782178217821782, "no_speech_prob": 8.800882824289147e-06}, {"id": 178, "seek": 119100, "start": 1200.0, "end": 1211.0, "text": " And if there is an exception, then if you passed in contains, and that says I want you to make sure that the string of the exception contains something.", "tokens": [400, 498, 456, 307, 364, 11183, 11, 550, 498, 291, 4678, 294, 8306, 11, 293, 300, 1619, 286, 528, 291, 281, 652, 988, 300, 264, 6798, 295, 264, 11183, 8306, 746, 13], "temperature": 0.0, "avg_logprob": -0.11129482781014792, "compression_ratio": 1.6782178217821782, "no_speech_prob": 8.800882824289147e-06}, {"id": 179, "seek": 119100, "start": 1211.0, "end": 1216.0, "text": " So I make sure they didn't pass that or that it was here and then return.", "tokens": [407, 286, 652, 988, 436, 994, 380, 1320, 300, 420, 300, 309, 390, 510, 293, 550, 2736, 13], "temperature": 0.0, "avg_logprob": -0.11129482781014792, "compression_ratio": 1.6782178217821782, "no_speech_prob": 8.800882824289147e-06}, {"id": 180, "seek": 121600, "start": 1216.0, "end": 1222.0, "text": " So if you didn't end up in the exception clause, then I failed. I didn't get an exception. So that's test fail.", "tokens": [407, 498, 291, 994, 380, 917, 493, 294, 264, 11183, 25925, 11, 550, 286, 7612, 13, 286, 994, 380, 483, 364, 11183, 13, 407, 300, 311, 1500, 3061, 13], "temperature": 0.0, "avg_logprob": -0.058838574782661766, "compression_ratio": 1.64375, "no_speech_prob": 8.800864634395111e-06}, {"id": 181, "seek": 121600, "start": 1222.0, "end": 1226.0, "text": " So that was kind of step one is something that would allow us to test for failures.", "tokens": [407, 300, 390, 733, 295, 1823, 472, 307, 746, 300, 576, 2089, 505, 281, 1500, 337, 20774, 13], "temperature": 0.0, "avg_logprob": -0.058838574782661766, "compression_ratio": 1.64375, "no_speech_prob": 8.800864634395111e-06}, {"id": 182, "seek": 121600, "start": 1226.0, "end": 1235.0, "text": " And so here's something that checks that we actually get a failure.", "tokens": [400, 370, 510, 311, 746, 300, 13834, 300, 321, 767, 483, 257, 7763, 13], "temperature": 0.0, "avg_logprob": -0.058838574782661766, "compression_ratio": 1.64375, "no_speech_prob": 8.800864634395111e-06}, {"id": 183, "seek": 123500, "start": 1235.0, "end": 1246.0, "text": " And so then we can test our test equals and not equals for both failing and succeeding.", "tokens": [400, 370, 550, 321, 393, 1500, 527, 1500, 6915, 293, 406, 6915, 337, 1293, 18223, 293, 47912, 13], "temperature": 0.0, "avg_logprob": -0.08557416954819037, "compression_ratio": 1.446969696969697, "no_speech_prob": 4.495121174841188e-06}, {"id": 184, "seek": 123500, "start": 1246.0, "end": 1252.0, "text": " So all equal was one of the things that was defined in local imports.", "tokens": [407, 439, 2681, 390, 472, 295, 264, 721, 300, 390, 7642, 294, 2654, 41596, 13], "temperature": 0.0, "avg_logprob": -0.08557416954819037, "compression_ratio": 1.446969696969697, "no_speech_prob": 4.495121174841188e-06}, {"id": 185, "seek": 123500, "start": 1252.0, "end": 1261.0, "text": " But we can still display it here.", "tokens": [583, 321, 393, 920, 4674, 309, 510, 13], "temperature": 0.0, "avg_logprob": -0.08557416954819037, "compression_ratio": 1.446969696969697, "no_speech_prob": 4.495121174841188e-06}, {"id": 186, "seek": 126100, "start": 1261.0, "end": 1272.0, "text": " And then we can create not equals.", "tokens": [400, 550, 321, 393, 1884, 406, 6915, 13], "temperature": 0.0, "avg_logprob": -0.1305791288614273, "compression_ratio": 1.585987261146497, "no_speech_prob": 4.637803158402676e-06}, {"id": 187, "seek": 126100, "start": 1272.0, "end": 1283.0, "text": " And yeah, so then we can start using the fact that we have a general purpose test A and B in some comparator", "tokens": [400, 1338, 11, 370, 550, 321, 393, 722, 1228, 264, 1186, 300, 321, 362, 257, 2674, 4334, 1500, 316, 293, 363, 294, 512, 6311, 1639], "temperature": 0.0, "avg_logprob": -0.1305791288614273, "compression_ratio": 1.585987261146497, "no_speech_prob": 4.637803158402676e-06}, {"id": 188, "seek": 126100, "start": 1283.0, "end": 1290.0, "text": " to start defining things like test, which is the one we normally use for testing that A and B are equals.", "tokens": [281, 722, 17827, 721, 411, 1500, 11, 597, 307, 264, 472, 321, 5646, 764, 337, 4997, 300, 316, 293, 363, 366, 6915, 13], "temperature": 0.0, "avg_logprob": -0.1305791288614273, "compression_ratio": 1.585987261146497, "no_speech_prob": 4.637803158402676e-06}, {"id": 189, "seek": 129000, "start": 1290.0, "end": 1299.0, "text": " And then this is just what's printed. If there's a failure, it'll tell us what the failure was.", "tokens": [400, 550, 341, 307, 445, 437, 311, 13567, 13, 759, 456, 311, 257, 7763, 11, 309, 603, 980, 505, 437, 264, 7763, 390, 13], "temperature": 0.0, "avg_logprob": -0.11905988894010845, "compression_ratio": 1.168421052631579, "no_speech_prob": 1.2028298442601226e-05}, {"id": 190, "seek": 129000, "start": 1299.0, "end": 1306.0, "text": " So the.", "tokens": [407, 264, 13], "temperature": 0.0, "avg_logprob": -0.11905988894010845, "compression_ratio": 1.168421052631579, "no_speech_prob": 1.2028298442601226e-05}, {"id": 191, "seek": 129000, "start": 1306.0, "end": 1314.0, "text": " Equals.", "tokens": [15624, 1124, 13], "temperature": 0.0, "avg_logprob": -0.11905988894010845, "compression_ratio": 1.168421052631579, "no_speech_prob": 1.2028298442601226e-05}, {"id": 192, "seek": 131400, "start": 1314.0, "end": 1320.0, "text": " Tries to kind of do the right thing. So if.", "tokens": [314, 2244, 281, 733, 295, 360, 264, 558, 551, 13, 407, 498, 13], "temperature": 0.0, "avg_logprob": -0.19876329826586175, "compression_ratio": 1.681159420289855, "no_speech_prob": 2.769369984889636e-06}, {"id": 193, "seek": 131400, "start": 1320.0, "end": 1324.0, "text": " Either of them have an array equals method, then we should use that to test your quality.", "tokens": [13746, 295, 552, 362, 364, 10225, 6915, 3170, 11, 550, 321, 820, 764, 300, 281, 1500, 428, 3125, 13], "temperature": 0.0, "avg_logprob": -0.19876329826586175, "compression_ratio": 1.681159420289855, "no_speech_prob": 2.769369984889636e-06}, {"id": 194, "seek": 131400, "start": 1324.0, "end": 1330.0, "text": " That's kind of the Python or at least a numpy protocol for checking for a quality.", "tokens": [663, 311, 733, 295, 264, 15329, 420, 412, 1935, 257, 1031, 8200, 10336, 337, 8568, 337, 257, 3125, 13], "temperature": 0.0, "avg_logprob": -0.19876329826586175, "compression_ratio": 1.681159420289855, "no_speech_prob": 2.769369984889636e-06}, {"id": 195, "seek": 131400, "start": 1330.0, "end": 1334.0, "text": " If one of them is an empty array, we can use numpy.", "tokens": [759, 472, 295, 552, 307, 364, 6707, 10225, 11, 321, 393, 764, 1031, 8200, 13], "temperature": 0.0, "avg_logprob": -0.19876329826586175, "compression_ratio": 1.681159420289855, "no_speech_prob": 2.769369984889636e-06}, {"id": 196, "seek": 131400, "start": 1334.0, "end": 1341.0, "text": " If one of them is a string or a dictarist set, we can just use operated equals.", "tokens": [759, 472, 295, 552, 307, 257, 6798, 420, 257, 12569, 289, 468, 992, 11, 321, 393, 445, 764, 20826, 6915, 13], "temperature": 0.0, "avg_logprob": -0.19876329826586175, "compression_ratio": 1.681159420289855, "no_speech_prob": 2.769369984889636e-06}, {"id": 197, "seek": 134100, "start": 1341.0, "end": 1349.0, "text": " If one of them is an iterator, we can use all equal, which, as you can see, checks whether everything.", "tokens": [759, 472, 295, 552, 307, 364, 17138, 1639, 11, 321, 393, 764, 439, 2681, 11, 597, 11, 382, 291, 393, 536, 11, 13834, 1968, 1203, 13], "temperature": 0.0, "avg_logprob": -0.10826329623951632, "compression_ratio": 1.3888888888888888, "no_speech_prob": 3.555917828634847e-06}, {"id": 198, "seek": 134100, "start": 1349.0, "end": 1354.0, "text": " In each one is equal.", "tokens": [682, 1184, 472, 307, 2681, 13], "temperature": 0.0, "avg_logprob": -0.10826329623951632, "compression_ratio": 1.3888888888888888, "no_speech_prob": 3.555917828634847e-06}, {"id": 199, "seek": 134100, "start": 1354.0, "end": 1357.0, "text": " Yeah, otherwise, we'll just use operator equality.", "tokens": [865, 11, 5911, 11, 321, 603, 445, 764, 12973, 14949, 13], "temperature": 0.0, "avg_logprob": -0.10826329623951632, "compression_ratio": 1.3888888888888888, "no_speech_prob": 3.555917828634847e-06}, {"id": 200, "seek": 135700, "start": 1357.0, "end": 1377.0, "text": " So we try to kind of make equals work across a variety of types.", "tokens": [407, 321, 853, 281, 733, 295, 652, 6915, 589, 2108, 257, 5673, 295, 3467, 13], "temperature": 0.0, "avg_logprob": -0.06019572835219534, "compression_ratio": 0.9696969696969697, "no_speech_prob": 9.570674137648894e-07}, {"id": 201, "seek": 137700, "start": 1377.0, "end": 1390.0, "text": " And that's why you can see test equal being checked with all kinds of things like arrays and dictionaries and data frames, series, so forth.", "tokens": [400, 300, 311, 983, 291, 393, 536, 1500, 2681, 885, 10033, 365, 439, 3685, 295, 721, 411, 41011, 293, 22352, 4889, 293, 1412, 12083, 11, 2638, 11, 370, 5220, 13], "temperature": 0.0, "avg_logprob": -0.0901168374454274, "compression_ratio": 1.3971631205673758, "no_speech_prob": 7.690260872550425e-07}, {"id": 202, "seek": 137700, "start": 1390.0, "end": 1394.0, "text": " So that's the main one we use all the time in our tests.", "tokens": [407, 300, 311, 264, 2135, 472, 321, 764, 439, 264, 565, 294, 527, 6921, 13], "temperature": 0.0, "avg_logprob": -0.0901168374454274, "compression_ratio": 1.3971631205673758, "no_speech_prob": 7.690260872550425e-07}, {"id": 203, "seek": 139400, "start": 1394.0, "end": 1411.0, "text": " Sometimes we use test type, which tests whether A and B are equal and also tests whether their types equal.", "tokens": [4803, 321, 764, 1500, 2010, 11, 597, 6921, 1968, 316, 293, 363, 366, 2681, 293, 611, 6921, 1968, 641, 3467, 2681, 13], "temperature": 0.0, "avg_logprob": -0.11071582110422962, "compression_ratio": 1.5107913669064748, "no_speech_prob": 6.643120741500752e-06}, {"id": 204, "seek": 139400, "start": 1411.0, "end": 1421.0, "text": " And if you pass a list or a couple, then we'll also check that the types of all of its contents equal.", "tokens": [400, 498, 291, 1320, 257, 1329, 420, 257, 1916, 11, 550, 321, 603, 611, 1520, 300, 264, 3467, 295, 439, 295, 1080, 15768, 2681, 13], "temperature": 0.0, "avg_logprob": -0.11071582110422962, "compression_ratio": 1.5107913669064748, "no_speech_prob": 6.643120741500752e-06}, {"id": 205, "seek": 142100, "start": 1421.0, "end": 1432.0, "text": " So test for not equals, test whether the two things are close.", "tokens": [407, 1500, 337, 406, 6915, 11, 1500, 1968, 264, 732, 721, 366, 1998, 13], "temperature": 0.0, "avg_logprob": -0.19552916668831033, "compression_ratio": 1.1982758620689655, "no_speech_prob": 2.468182719894685e-05}, {"id": 206, "seek": 142100, "start": 1432.0, "end": 1441.0, "text": " OK, so that's OO.", "tokens": [2264, 11, 370, 300, 311, 422, 46, 13], "temperature": 0.0, "avg_logprob": -0.19552916668831033, "compression_ratio": 1.1982758620689655, "no_speech_prob": 2.468182719894685e-05}, {"id": 207, "seek": 142100, "start": 1441.0, "end": 1445.0, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.19552916668831033, "compression_ratio": 1.1982758620689655, "no_speech_prob": 2.468182719894685e-05}, {"id": 208, "seek": 142100, "start": 1445.0, "end": 1449.0, "text": " I'm not going to look at meta classes just yet.", "tokens": [286, 478, 406, 516, 281, 574, 412, 19616, 5359, 445, 1939, 13], "temperature": 0.0, "avg_logprob": -0.19552916668831033, "compression_ratio": 1.1982758620689655, "no_speech_prob": 2.468182719894685e-05}, {"id": 209, "seek": 144900, "start": 1449.0, "end": 1457.0, "text": " So here is O1 core.", "tokens": [407, 510, 307, 422, 16, 4965, 13], "temperature": 0.0, "avg_logprob": -0.1553605836013268, "compression_ratio": 1.0, "no_speech_prob": 5.014571343053831e-06}, {"id": 210, "seek": 144900, "start": 1457.0, "end": 1461.0, "text": " So quite often we use patch.", "tokens": [407, 1596, 2049, 321, 764, 9972, 13], "temperature": 0.0, "avg_logprob": -0.1553605836013268, "compression_ratio": 1.0, "no_speech_prob": 5.014571343053831e-06}, {"id": 211, "seek": 144900, "start": 1461.0, "end": 1473.0, "text": " For example, we use it for", "tokens": [1171, 1365, 11, 321, 764, 309, 337], "temperature": 0.0, "avg_logprob": -0.1553605836013268, "compression_ratio": 1.0, "no_speech_prob": 5.014571343053831e-06}, {"id": 212, "seek": 147300, "start": 1473.0, "end": 1486.0, "text": " not LS.", "tokens": [406, 36657, 13], "temperature": 0.0, "avg_logprob": -0.4222604488504344, "compression_ratio": 0.9878048780487805, "no_speech_prob": 4.9367213250661734e-06}, {"id": 213, "seek": 147300, "start": 1486.0, "end": 1492.0, "text": " For example, we have here define LS self colon path.", "tokens": [1171, 1365, 11, 321, 362, 510, 6964, 36657, 2698, 8255, 3100, 13], "temperature": 0.0, "avg_logprob": -0.4222604488504344, "compression_ratio": 0.9878048780487805, "no_speech_prob": 4.9367213250661734e-06}, {"id": 214, "seek": 147300, "start": 1492.0, "end": 1495.0, "text": " And it has at patch.", "tokens": [400, 309, 575, 412, 9972, 13], "temperature": 0.0, "avg_logprob": -0.4222604488504344, "compression_ratio": 0.9878048780487805, "no_speech_prob": 4.9367213250661734e-06}, {"id": 215, "seek": 149500, "start": 1495.0, "end": 1507.0, "text": " So what that does is if we say P equals path.", "tokens": [407, 437, 300, 775, 307, 498, 321, 584, 430, 6915, 3100, 13], "temperature": 0.0, "avg_logprob": -0.3001049586704799, "compression_ratio": 1.0609756097560976, "no_speech_prob": 6.375478278641822e-07}, {"id": 216, "seek": 149500, "start": 1507.0, "end": 1511.0, "text": " You can go P. L.S.", "tokens": [509, 393, 352, 430, 13, 441, 13, 50, 13], "temperature": 0.0, "avg_logprob": -0.3001049586704799, "compression_ratio": 1.0609756097560976, "no_speech_prob": 6.375478278641822e-07}, {"id": 217, "seek": 149500, "start": 1511.0, "end": 1515.0, "text": " So how does that work?", "tokens": [407, 577, 775, 300, 589, 30], "temperature": 0.0, "avg_logprob": -0.3001049586704799, "compression_ratio": 1.0609756097560976, "no_speech_prob": 6.375478278641822e-07}, {"id": 218, "seek": 151500, "start": 1515.0, "end": 1525.0, "text": " Well, remember, a decorator in Python is simply passed its function as an argument.", "tokens": [1042, 11, 1604, 11, 257, 7919, 1639, 294, 15329, 307, 2935, 4678, 1080, 2445, 382, 364, 6770, 13], "temperature": 0.0, "avg_logprob": -0.12018661271958124, "compression_ratio": 1.3083333333333333, "no_speech_prob": 2.6425166197441285e-06}, {"id": 219, "seek": 151500, "start": 1525.0, "end": 1538.0, "text": " So in this particular case for patch def func, patch will be passed func.", "tokens": [407, 294, 341, 1729, 1389, 337, 9972, 1060, 1019, 66, 11, 9972, 486, 312, 4678, 1019, 66, 13], "temperature": 0.0, "avg_logprob": -0.12018661271958124, "compression_ratio": 1.3083333333333333, "no_speech_prob": 2.6425166197441285e-06}, {"id": 220, "seek": 153800, "start": 1538.0, "end": 1545.0, "text": " And so then that function, we want to find out what to patch.", "tokens": [400, 370, 550, 300, 2445, 11, 321, 528, 281, 915, 484, 437, 281, 9972, 13], "temperature": 0.0, "avg_logprob": -0.08751995861530304, "compression_ratio": 1.6291390728476822, "no_speech_prob": 3.1071701300788845e-07}, {"id": 221, "seek": 153800, "start": 1545.0, "end": 1553.0, "text": " So we want to patch this parameters type.", "tokens": [407, 321, 528, 281, 9972, 341, 9834, 2010, 13], "temperature": 0.0, "avg_logprob": -0.08751995861530304, "compression_ratio": 1.6291390728476822, "no_speech_prob": 3.1071701300788845e-07}, {"id": 222, "seek": 153800, "start": 1553.0, "end": 1565.0, "text": " And so to find that parameters types, we go through all of the annotations and just find the first one, which means this is like in some ways.", "tokens": [400, 370, 281, 915, 300, 9834, 3467, 11, 321, 352, 807, 439, 295, 264, 25339, 763, 293, 445, 915, 264, 700, 472, 11, 597, 1355, 341, 307, 411, 294, 512, 2098, 13], "temperature": 0.0, "avg_logprob": -0.08751995861530304, "compression_ratio": 1.6291390728476822, "no_speech_prob": 3.1071701300788845e-07}, {"id": 223, "seek": 156500, "start": 1565.0, "end": 1570.0, "text": " I mean, it won't tell you if you do something dumb like that.", "tokens": [286, 914, 11, 309, 1582, 380, 980, 291, 498, 291, 360, 746, 10316, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.14535960943802542, "compression_ratio": 1.5529953917050692, "no_speech_prob": 8.530083505320363e-06}, {"id": 224, "seek": 156500, "start": 1570.0, "end": 1575.0, "text": " It'll still end up being patched to T3.", "tokens": [467, 603, 920, 917, 493, 885, 9972, 292, 281, 314, 18, 13], "temperature": 0.0, "avg_logprob": -0.14535960943802542, "compression_ratio": 1.5529953917050692, "no_speech_prob": 8.530083505320363e-06}, {"id": 225, "seek": 156500, "start": 1575.0, "end": 1577.0, "text": " But that's fine.", "tokens": [583, 300, 311, 2489, 13], "temperature": 0.0, "avg_logprob": -0.14535960943802542, "compression_ratio": 1.5529953917050692, "no_speech_prob": 8.530083505320363e-06}, {"id": 226, "seek": 156500, "start": 1577.0, "end": 1583.0, "text": " I don't always check for every dumb thing you might do.", "tokens": [286, 500, 380, 1009, 1520, 337, 633, 10316, 551, 291, 1062, 360, 13], "temperature": 0.0, "avg_logprob": -0.14535960943802542, "compression_ratio": 1.5529953917050692, "no_speech_prob": 8.530083505320363e-06}, {"id": 227, "seek": 156500, "start": 1583.0, "end": 1590.0, "text": " This is long as the behavior works correctly when used correctly and the really obvious mistakes checked for.", "tokens": [639, 307, 938, 382, 264, 5223, 1985, 8944, 562, 1143, 8944, 293, 264, 534, 6322, 8038, 10033, 337, 13], "temperature": 0.0, "avg_logprob": -0.14535960943802542, "compression_ratio": 1.5529953917050692, "no_speech_prob": 8.530083505320363e-06}, {"id": 228, "seek": 156500, "start": 1590.0, "end": 1594.0, "text": " So that's going to tell us what the type repatching.", "tokens": [407, 300, 311, 516, 281, 980, 505, 437, 264, 2010, 1085, 29569, 13], "temperature": 0.0, "avg_logprob": -0.14535960943802542, "compression_ratio": 1.5529953917050692, "no_speech_prob": 8.530083505320363e-06}, {"id": 229, "seek": 159400, "start": 1594.0, "end": 1600.0, "text": " And then it will patch to that type with this function.", "tokens": [400, 550, 309, 486, 9972, 281, 300, 2010, 365, 341, 2445, 13], "temperature": 0.0, "avg_logprob": -0.11112390359242758, "compression_ratio": 1.4935064935064934, "no_speech_prob": 1.1365563068466145e-06}, {"id": 230, "seek": 159400, "start": 1600.0, "end": 1609.0, "text": " And so here's patch two, which there's really not much to tell you about that.", "tokens": [400, 370, 510, 311, 9972, 732, 11, 597, 456, 311, 534, 406, 709, 281, 980, 291, 466, 300, 13], "temperature": 0.0, "avg_logprob": -0.11112390359242758, "compression_ratio": 1.4935064935064934, "no_speech_prob": 1.1365563068466145e-06}, {"id": 231, "seek": 159400, "start": 1609.0, "end": 1615.0, "text": " It just goes through and uses the func tools stuff to make sure all of the metadata is correct.", "tokens": [467, 445, 1709, 807, 293, 4960, 264, 1019, 66, 3873, 1507, 281, 652, 988, 439, 295, 264, 26603, 307, 3006, 13], "temperature": 0.0, "avg_logprob": -0.11112390359242758, "compression_ratio": 1.4935064935064934, "no_speech_prob": 1.1365563068466145e-06}, {"id": 232, "seek": 161500, "start": 1615.0, "end": 1628.0, "text": " And it will set in this class with this name, the function that we asked for.", "tokens": [400, 309, 486, 992, 294, 341, 1508, 365, 341, 1315, 11, 264, 2445, 300, 321, 2351, 337, 13], "temperature": 0.0, "avg_logprob": -0.1090866762049058, "compression_ratio": 1.4574468085106382, "no_speech_prob": 2.7693108677340206e-06}, {"id": 233, "seek": 161500, "start": 1628.0, "end": 1631.0, "text": " Which is better, Win or Ubuntu?", "tokens": [3013, 307, 1101, 11, 10427, 420, 30230, 45605, 30], "temperature": 0.0, "avg_logprob": -0.1090866762049058, "compression_ratio": 1.4574468085106382, "no_speech_prob": 2.7693108677340206e-06}, {"id": 234, "seek": 161500, "start": 1631.0, "end": 1632.0, "text": " Oh, it's up to you.", "tokens": [876, 11, 309, 311, 493, 281, 291, 13], "temperature": 0.0, "avg_logprob": -0.1090866762049058, "compression_ratio": 1.4574468085106382, "no_speech_prob": 2.7693108677340206e-06}, {"id": 235, "seek": 161500, "start": 1632.0, "end": 1637.0, "text": " I use Ubuntu in my server here, as you see.", "tokens": [286, 764, 30230, 45605, 294, 452, 7154, 510, 11, 382, 291, 536, 13], "temperature": 0.0, "avg_logprob": -0.1090866762049058, "compression_ratio": 1.4574468085106382, "no_speech_prob": 2.7693108677340206e-06}, {"id": 236, "seek": 161500, "start": 1637.0, "end": 1642.0, "text": " And I use Windows on my computer because I do a lot of I like to draw things a lot when I'm talking.", "tokens": [400, 286, 764, 8591, 322, 452, 3820, 570, 286, 360, 257, 688, 295, 286, 411, 281, 2642, 721, 257, 688, 562, 286, 478, 1417, 13], "temperature": 0.0, "avg_logprob": -0.1090866762049058, "compression_ratio": 1.4574468085106382, "no_speech_prob": 2.7693108677340206e-06}, {"id": 237, "seek": 164200, "start": 1642.0, "end": 1648.0, "text": " So I like to use something with a stylus.", "tokens": [407, 286, 411, 281, 764, 746, 365, 257, 7952, 3063, 13], "temperature": 0.0, "avg_logprob": -0.10940304295770054, "compression_ratio": 1.3006993006993006, "no_speech_prob": 5.1738120419031475e-06}, {"id": 238, "seek": 164200, "start": 1648.0, "end": 1655.0, "text": " And I yeah, there's a lot I like about Windows on my desktop.", "tokens": [400, 286, 1338, 11, 456, 311, 257, 688, 286, 411, 466, 8591, 322, 452, 14502, 13], "temperature": 0.0, "avg_logprob": -0.10940304295770054, "compression_ratio": 1.3006993006993006, "no_speech_prob": 5.1738120419031475e-06}, {"id": 239, "seek": 164200, "start": 1655.0, "end": 1659.0, "text": " OK, so that's patch.", "tokens": [2264, 11, 370, 300, 311, 9972, 13], "temperature": 0.0, "avg_logprob": -0.10940304295770054, "compression_ratio": 1.3006993006993006, "no_speech_prob": 5.1738120419031475e-06}, {"id": 240, "seek": 164200, "start": 1659.0, "end": 1664.0, "text": " So then we've got a different thing, which is patch property.", "tokens": [407, 550, 321, 600, 658, 257, 819, 551, 11, 597, 307, 9972, 4707, 13], "temperature": 0.0, "avg_logprob": -0.10940304295770054, "compression_ratio": 1.3006993006993006, "no_speech_prob": 5.1738120419031475e-06}, {"id": 241, "seek": 166400, "start": 1664.0, "end": 1672.0, "text": " And patch property does the same thing as patch, but it passes as prop equals true,", "tokens": [400, 9972, 4707, 775, 264, 912, 551, 382, 9972, 11, 457, 309, 11335, 382, 2365, 6915, 2074, 11], "temperature": 0.0, "avg_logprob": -0.07872107823689779, "compression_ratio": 1.6717948717948719, "no_speech_prob": 1.4593596233680728e-06}, {"id": 242, "seek": 166400, "start": 1672.0, "end": 1677.0, "text": " which, as you can see, simply turns a function into a property.", "tokens": [597, 11, 382, 291, 393, 536, 11, 2935, 4523, 257, 2445, 666, 257, 4707, 13], "temperature": 0.0, "avg_logprob": -0.07872107823689779, "compression_ratio": 1.6717948717948719, "no_speech_prob": 1.4593596233680728e-06}, {"id": 243, "seek": 166400, "start": 1677.0, "end": 1681.0, "text": " Because remember, when you say at property in Python, property is just a decorator.", "tokens": [1436, 1604, 11, 562, 291, 584, 412, 4707, 294, 15329, 11, 4707, 307, 445, 257, 7919, 1639, 13], "temperature": 0.0, "avg_logprob": -0.07872107823689779, "compression_ratio": 1.6717948717948719, "no_speech_prob": 1.4593596233680728e-06}, {"id": 244, "seek": 166400, "start": 1681.0, "end": 1683.0, "text": " So you can use it as a function.", "tokens": [407, 291, 393, 764, 309, 382, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.07872107823689779, "compression_ratio": 1.6717948717948719, "no_speech_prob": 1.4593596233680728e-06}, {"id": 245, "seek": 166400, "start": 1683.0, "end": 1687.0, "text": " So here it is being used as a property.", "tokens": [407, 510, 309, 307, 885, 1143, 382, 257, 4707, 13], "temperature": 0.0, "avg_logprob": -0.07872107823689779, "compression_ratio": 1.6717948717948719, "no_speech_prob": 1.4593596233680728e-06}, {"id": 246, "seek": 166400, "start": 1687.0, "end": 1692.0, "text": " So why not use wraps?", "tokens": [407, 983, 406, 764, 25831, 30], "temperature": 0.0, "avg_logprob": -0.07872107823689779, "compression_ratio": 1.6717948717948719, "no_speech_prob": 1.4593596233680728e-06}, {"id": 247, "seek": 169200, "start": 1692.0, "end": 1699.0, "text": " The what was it?", "tokens": [440, 437, 390, 309, 30], "temperature": 0.0, "avg_logprob": -0.13819580078125, "compression_ratio": 1.120879120879121, "no_speech_prob": 1.1842489584523719e-05}, {"id": 248, "seek": 169200, "start": 1699.0, "end": 1706.0, "text": " Oh, yeah.", "tokens": [876, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.13819580078125, "compression_ratio": 1.120879120879121, "no_speech_prob": 1.1842489584523719e-05}, {"id": 249, "seek": 169200, "start": 1706.0, "end": 1713.0, "text": " This is obviously the comment that was telling me something about pipeline.", "tokens": [639, 307, 2745, 264, 2871, 300, 390, 3585, 385, 746, 466, 15517, 13], "temperature": 0.0, "avg_logprob": -0.13819580078125, "compression_ratio": 1.120879120879121, "no_speech_prob": 1.1842489584523719e-05}, {"id": 250, "seek": 171300, "start": 1713.0, "end": 1722.0, "text": " This is basically doing the same thing as functools.update wrapper or whatever it's called.", "tokens": [639, 307, 1936, 884, 264, 912, 551, 382, 1019, 349, 29298, 13, 1010, 17393, 46906, 420, 2035, 309, 311, 1219, 13], "temperature": 0.0, "avg_logprob": -0.1053182942526681, "compression_ratio": 1.4863387978142077, "no_speech_prob": 8.059311085162335e-07}, {"id": 251, "seek": 171300, "start": 1722.0, "end": 1729.0, "text": " And it's setting the function with this name to the attribute.", "tokens": [400, 309, 311, 3287, 264, 2445, 365, 341, 1315, 281, 264, 19667, 13], "temperature": 0.0, "avg_logprob": -0.1053182942526681, "compression_ratio": 1.4863387978142077, "no_speech_prob": 8.059311085162335e-07}, {"id": 252, "seek": 171300, "start": 1729.0, "end": 1731.0, "text": " I don't remember anymore.", "tokens": [286, 500, 380, 1604, 3602, 13], "temperature": 0.0, "avg_logprob": -0.1053182942526681, "compression_ratio": 1.4863387978142077, "no_speech_prob": 8.059311085162335e-07}, {"id": 253, "seek": 171300, "start": 1731.0, "end": 1737.0, "text": " Maybe this is now obsolete because I added a comment to here to remind myself why I did it.", "tokens": [2704, 341, 307, 586, 46333, 570, 286, 3869, 257, 2871, 281, 510, 281, 4160, 2059, 983, 286, 630, 309, 13], "temperature": 0.0, "avg_logprob": -0.1053182942526681, "compression_ratio": 1.4863387978142077, "no_speech_prob": 8.059311085162335e-07}, {"id": 254, "seek": 173700, "start": 1737.0, "end": 1744.0, "text": " But now I don't understand the comment, so I'm not sure.", "tokens": [583, 586, 286, 500, 380, 1223, 264, 2871, 11, 370, 286, 478, 406, 988, 13], "temperature": 0.0, "avg_logprob": -0.09538230117486447, "compression_ratio": 1.2892561983471074, "no_speech_prob": 3.844887032755651e-06}, {"id": 255, "seek": 173700, "start": 1744.0, "end": 1749.0, "text": " functools.update wrapper.", "tokens": [1019, 349, 29298, 13, 1010, 17393, 46906, 13], "temperature": 0.0, "avg_logprob": -0.09538230117486447, "compression_ratio": 1.2892561983471074, "no_speech_prob": 3.844887032755651e-06}, {"id": 256, "seek": 173700, "start": 1749.0, "end": 1753.0, "text": " Let's see what it looks like.", "tokens": [961, 311, 536, 437, 309, 1542, 411, 13], "temperature": 0.0, "avg_logprob": -0.09538230117486447, "compression_ratio": 1.2892561983471074, "no_speech_prob": 3.844887032755651e-06}, {"id": 257, "seek": 173700, "start": 1753.0, "end": 1761.0, "text": " So it uses wrapper assignments as assigned.", "tokens": [407, 309, 4960, 46906, 22546, 382, 13279, 13], "temperature": 0.0, "avg_logprob": -0.09538230117486447, "compression_ratio": 1.2892561983471074, "no_speech_prob": 3.844887032755651e-06}, {"id": 258, "seek": 176100, "start": 1761.0, "end": 1788.0, "text": " Goes through each one and it grabs it and it sets it to the value.", "tokens": [44471, 807, 1184, 472, 293, 309, 30028, 309, 293, 309, 6352, 309, 281, 264, 2158, 13], "temperature": 0.0, "avg_logprob": -0.22271208763122557, "compression_ratio": 1.064516129032258, "no_speech_prob": 1.1478542546683457e-05}, {"id": 259, "seek": 178800, "start": 1788.0, "end": 1798.0, "text": " So I'm not doing this bit, and I don't remember what that is, but maybe there was some reason why we do that.", "tokens": [407, 286, 478, 406, 884, 341, 857, 11, 293, 286, 500, 380, 1604, 437, 300, 307, 11, 457, 1310, 456, 390, 512, 1778, 983, 321, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.15674990938420882, "compression_ratio": 1.368, "no_speech_prob": 1.28047468024306e-05}, {"id": 260, "seek": 178800, "start": 1798.0, "end": 1802.0, "text": " Although, yeah, I'm not sure.", "tokens": [5780, 11, 1338, 11, 286, 478, 406, 988, 13], "temperature": 0.0, "avg_logprob": -0.15674990938420882, "compression_ratio": 1.368, "no_speech_prob": 1.28047468024306e-05}, {"id": 261, "seek": 178800, "start": 1802.0, "end": 1806.0, "text": " I'm not sure.", "tokens": [286, 478, 406, 988, 13], "temperature": 0.0, "avg_logprob": -0.15674990938420882, "compression_ratio": 1.368, "no_speech_prob": 1.28047468024306e-05}, {"id": 262, "seek": 178800, "start": 1806.0, "end": 1814.0, "text": " Maybe we can now.", "tokens": [2704, 321, 393, 586, 13], "temperature": 0.0, "avg_logprob": -0.15674990938420882, "compression_ratio": 1.368, "no_speech_prob": 1.28047468024306e-05}, {"id": 263, "seek": 181400, "start": 1814.0, "end": 1822.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.2334771606157411, "compression_ratio": 1.2413793103448276, "no_speech_prob": 3.905312496499391e-06}, {"id": 264, "seek": 181400, "start": 1822.0, "end": 1823.0, "text": " Yeah, sorry, Elliot.", "tokens": [865, 11, 2597, 11, 38986, 13], "temperature": 0.0, "avg_logprob": -0.2334771606157411, "compression_ratio": 1.2413793103448276, "no_speech_prob": 3.905312496499391e-06}, {"id": 265, "seek": 181400, "start": 1823.0, "end": 1827.0, "text": " I know you meant wraps, but wraps just calls update wrapper.", "tokens": [286, 458, 291, 4140, 25831, 11, 457, 25831, 445, 5498, 5623, 46906, 13], "temperature": 0.0, "avg_logprob": -0.2334771606157411, "compression_ratio": 1.2413793103448276, "no_speech_prob": 3.905312496499391e-06}, {"id": 266, "seek": 181400, "start": 1827.0, "end": 1831.0, "text": " So that's all wraps is.", "tokens": [407, 300, 311, 439, 25831, 307, 13], "temperature": 0.0, "avg_logprob": -0.2334771606157411, "compression_ratio": 1.2413793103448276, "no_speech_prob": 3.905312496499391e-06}, {"id": 267, "seek": 181400, "start": 1831.0, "end": 1840.0, "text": " As you can see, functools.wraps.", "tokens": [1018, 291, 393, 536, 11, 1019, 349, 29298, 13, 86, 424, 1878, 13], "temperature": 0.0, "avg_logprob": -0.2334771606157411, "compression_ratio": 1.2413793103448276, "no_speech_prob": 3.905312496499391e-06}, {"id": 268, "seek": 184000, "start": 1840.0, "end": 1847.0, "text": " Yeah, so that's all it is.", "tokens": [865, 11, 370, 300, 311, 439, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.1604899059642445, "compression_ratio": 1.542483660130719, "no_speech_prob": 1.1478377018647734e-05}, {"id": 269, "seek": 184000, "start": 1847.0, "end": 1848.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.1604899059642445, "compression_ratio": 1.542483660130719, "no_speech_prob": 1.1478377018647734e-05}, {"id": 270, "seek": 184000, "start": 1848.0, "end": 1856.0, "text": " So delegates we've kind of looked at before.", "tokens": [407, 45756, 321, 600, 733, 295, 2956, 412, 949, 13], "temperature": 0.0, "avg_logprob": -0.1604899059642445, "compression_ratio": 1.542483660130719, "no_speech_prob": 1.1478377018647734e-05}, {"id": 271, "seek": 184000, "start": 1856.0, "end": 1868.0, "text": " So that's the thing that allows us to, you can either delegate passing in nothing at all, in which case it will delegate your init to your base classes in it.", "tokens": [407, 300, 311, 264, 551, 300, 4045, 505, 281, 11, 291, 393, 2139, 40999, 8437, 294, 1825, 412, 439, 11, 294, 597, 1389, 309, 486, 40999, 428, 3157, 281, 428, 3096, 5359, 294, 309, 13], "temperature": 0.0, "avg_logprob": -0.1604899059642445, "compression_ratio": 1.542483660130719, "no_speech_prob": 1.1478377018647734e-05}, {"id": 272, "seek": 186800, "start": 1868.0, "end": 1870.0, "text": " So you can see here how I'm testing it, right?", "tokens": [407, 291, 393, 536, 510, 577, 286, 478, 4997, 309, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.14912756511143277, "compression_ratio": 1.525, "no_speech_prob": 2.144430618500337e-05}, {"id": 273, "seek": 186800, "start": 1870.0, "end": 1882.0, "text": " I've added a little thing called test sig, which checks that the signature stringified is equal to whatever you pass it.", "tokens": [286, 600, 3869, 257, 707, 551, 1219, 1500, 4556, 11, 597, 13834, 300, 264, 13397, 6798, 2587, 307, 2681, 281, 2035, 291, 1320, 309, 13], "temperature": 0.0, "avg_logprob": -0.14912756511143277, "compression_ratio": 1.525, "no_speech_prob": 2.144430618500337e-05}, {"id": 274, "seek": 186800, "start": 1882.0, "end": 1890.0, "text": " So here you can see we've got a foo and we've got a, b equals one and quags.", "tokens": [407, 510, 291, 393, 536, 321, 600, 658, 257, 726, 78, 293, 321, 600, 658, 257, 11, 272, 6915, 472, 293, 421, 12109, 13], "temperature": 0.0, "avg_logprob": -0.14912756511143277, "compression_ratio": 1.525, "no_speech_prob": 2.144430618500337e-05}, {"id": 275, "seek": 189000, "start": 1890.0, "end": 1899.0, "text": " And then quags is being delegated to base foo, which has e and c equals two.", "tokens": [400, 550, 421, 12109, 307, 885, 15824, 770, 281, 3096, 726, 78, 11, 597, 575, 308, 293, 269, 6915, 732, 13], "temperature": 0.0, "avg_logprob": -0.06916431682865794, "compression_ratio": 1.6139240506329113, "no_speech_prob": 1.0129853762919083e-05}, {"id": 276, "seek": 189000, "start": 1899.0, "end": 1901.0, "text": " And so that's not a quag.", "tokens": [400, 370, 300, 311, 406, 257, 421, 559, 13], "temperature": 0.0, "avg_logprob": -0.06916431682865794, "compression_ratio": 1.6139240506329113, "no_speech_prob": 1.0129853762919083e-05}, {"id": 277, "seek": 189000, "start": 1901.0, "end": 1902.0, "text": " That is a quag.", "tokens": [663, 307, 257, 421, 559, 13], "temperature": 0.0, "avg_logprob": -0.06916431682865794, "compression_ratio": 1.6139240506329113, "no_speech_prob": 1.0129853762919083e-05}, {"id": 278, "seek": 189000, "start": 1902.0, "end": 1908.0, "text": " So it's going to therefore end up as a, b equals one and c equals two.", "tokens": [407, 309, 311, 516, 281, 4412, 917, 493, 382, 257, 11, 272, 6915, 472, 293, 269, 6915, 732, 13], "temperature": 0.0, "avg_logprob": -0.06916431682865794, "compression_ratio": 1.6139240506329113, "no_speech_prob": 1.0129853762919083e-05}, {"id": 279, "seek": 189000, "start": 1908.0, "end": 1915.0, "text": " So we can see the signature is grabbing that stuff from base foo.", "tokens": [407, 321, 393, 536, 264, 13397, 307, 23771, 300, 1507, 490, 3096, 726, 78, 13], "temperature": 0.0, "avg_logprob": -0.06916431682865794, "compression_ratio": 1.6139240506329113, "no_speech_prob": 1.0129853762919083e-05}, {"id": 280, "seek": 191500, "start": 1915.0, "end": 1927.0, "text": " Actually, the other thing we could test.", "tokens": [5135, 11, 264, 661, 551, 321, 727, 1500, 13], "temperature": 0.0, "avg_logprob": -0.14957499504089355, "compression_ratio": 1.2772277227722773, "no_speech_prob": 1.8058177374769002e-05}, {"id": 281, "seek": 191500, "start": 1927.0, "end": 1929.0, "text": " Actually, that's not the right place to test it.", "tokens": [5135, 11, 300, 311, 406, 264, 558, 1081, 281, 1500, 309, 13], "temperature": 0.0, "avg_logprob": -0.14957499504089355, "compression_ratio": 1.2772277227722773, "no_speech_prob": 1.8058177374769002e-05}, {"id": 282, "seek": 191500, "start": 1929.0, "end": 1932.0, "text": " That's fine.", "tokens": [663, 311, 2489, 13], "temperature": 0.0, "avg_logprob": -0.14957499504089355, "compression_ratio": 1.2772277227722773, "no_speech_prob": 1.8058177374769002e-05}, {"id": 283, "seek": 191500, "start": 1932.0, "end": 1942.0, "text": " We should get rid of this.", "tokens": [492, 820, 483, 3973, 295, 341, 13], "temperature": 0.0, "avg_logprob": -0.14957499504089355, "compression_ratio": 1.2772277227722773, "no_speech_prob": 1.8058177374769002e-05}, {"id": 284, "seek": 194200, "start": 1942.0, "end": 1946.0, "text": " This one, use quags, is mainly used by other functions.", "tokens": [639, 472, 11, 764, 421, 12109, 11, 307, 8704, 1143, 538, 661, 6828, 13], "temperature": 0.0, "avg_logprob": -0.0803093569619315, "compression_ratio": 1.7524271844660195, "no_speech_prob": 3.1692368793301284e-05}, {"id": 285, "seek": 194200, "start": 1946.0, "end": 1950.0, "text": " We don't normally use it directly, but this is like something where you can basically say,", "tokens": [492, 500, 380, 5646, 764, 309, 3838, 11, 457, 341, 307, 411, 746, 689, 291, 393, 1936, 584, 11], "temperature": 0.0, "avg_logprob": -0.0803093569619315, "compression_ratio": 1.7524271844660195, "no_speech_prob": 3.1692368793301284e-05}, {"id": 286, "seek": 194200, "start": 1950.0, "end": 1954.0, "text": " I want you to replace quags with y and z.", "tokens": [286, 528, 291, 281, 7406, 421, 12109, 365, 288, 293, 710, 13], "temperature": 0.0, "avg_logprob": -0.0803093569619315, "compression_ratio": 1.7524271844660195, "no_speech_prob": 3.1692368793301284e-05}, {"id": 287, "seek": 194200, "start": 1954.0, "end": 1958.0, "text": " So you can see here I've got a, b equals one, quags.", "tokens": [407, 291, 393, 536, 510, 286, 600, 658, 257, 11, 272, 6915, 472, 11, 421, 12109, 13], "temperature": 0.0, "avg_logprob": -0.0803093569619315, "compression_ratio": 1.7524271844660195, "no_speech_prob": 3.1692368793301284e-05}, {"id": 288, "seek": 194200, "start": 1958.0, "end": 1960.0, "text": " And then I said, please add y and z.", "tokens": [400, 550, 286, 848, 11, 1767, 909, 288, 293, 710, 13], "temperature": 0.0, "avg_logprob": -0.0803093569619315, "compression_ratio": 1.7524271844660195, "no_speech_prob": 3.1692368793301284e-05}, {"id": 289, "seek": 194200, "start": 1960.0, "end": 1963.0, "text": " And so as you can see here, it's added y and z.", "tokens": [400, 370, 382, 291, 393, 536, 510, 11, 309, 311, 3869, 288, 293, 710, 13], "temperature": 0.0, "avg_logprob": -0.0803093569619315, "compression_ratio": 1.7524271844660195, "no_speech_prob": 3.1692368793301284e-05}, {"id": 290, "seek": 194200, "start": 1963.0, "end": 1966.0, "text": " We don't normally use it directly.", "tokens": [492, 500, 380, 5646, 764, 309, 3838, 13], "temperature": 0.0, "avg_logprob": -0.0803093569619315, "compression_ratio": 1.7524271844660195, "no_speech_prob": 3.1692368793301284e-05}, {"id": 291, "seek": 196600, "start": 1966.0, "end": 1972.0, "text": " And you can see it's just grabbing the signature and replacing stuff in the signature.", "tokens": [400, 291, 393, 536, 309, 311, 445, 23771, 264, 13397, 293, 19139, 1507, 294, 264, 13397, 13], "temperature": 0.0, "avg_logprob": -0.08274713429537686, "compression_ratio": 1.6938775510204083, "no_speech_prob": 4.092886229045689e-06}, {"id": 292, "seek": 196600, "start": 1972.0, "end": 1981.0, "text": " But it is used in that very important funcs quags thing that we use all the time.", "tokens": [583, 309, 307, 1143, 294, 300, 588, 1021, 1019, 14368, 421, 12109, 551, 300, 321, 764, 439, 264, 565, 13], "temperature": 0.0, "avg_logprob": -0.08274713429537686, "compression_ratio": 1.6938775510204083, "no_speech_prob": 4.092886229045689e-06}, {"id": 293, "seek": 196600, "start": 1981.0, "end": 1989.0, "text": " That's the thing where we say, oh, these methods, this list of methods, are things that you could pass in as quags.", "tokens": [663, 311, 264, 551, 689, 321, 584, 11, 1954, 11, 613, 7150, 11, 341, 1329, 295, 7150, 11, 366, 721, 300, 291, 727, 1320, 294, 382, 421, 12109, 13], "temperature": 0.0, "avg_logprob": -0.08274713429537686, "compression_ratio": 1.6938775510204083, "no_speech_prob": 4.092886229045689e-06}, {"id": 294, "seek": 196600, "start": 1989.0, "end": 1993.0, "text": " And if you do, it will replace the method here.", "tokens": [400, 498, 291, 360, 11, 309, 486, 7406, 264, 3170, 510, 13], "temperature": 0.0, "avg_logprob": -0.08274713429537686, "compression_ratio": 1.6938775510204083, "no_speech_prob": 4.092886229045689e-06}, {"id": 295, "seek": 199300, "start": 1993.0, "end": 2005.0, "text": " And so as you can see there, I use quags to replace the signature with the correct signature.", "tokens": [400, 370, 382, 291, 393, 536, 456, 11, 286, 764, 421, 12109, 281, 7406, 264, 13397, 365, 264, 3006, 13397, 13], "temperature": 0.0, "avg_logprob": -0.13516595250084287, "compression_ratio": 1.3963963963963963, "no_speech_prob": 4.710830125986831e-06}, {"id": 296, "seek": 199300, "start": 2005.0, "end": 2014.0, "text": " And here you can see I am using func tools to update wrapper,", "tokens": [400, 510, 291, 393, 536, 286, 669, 1228, 1019, 66, 3873, 281, 5623, 46906, 11], "temperature": 0.0, "avg_logprob": -0.13516595250084287, "compression_ratio": 1.3963963963963963, "no_speech_prob": 4.710830125986831e-06}, {"id": 297, "seek": 201400, "start": 2014.0, "end": 2034.0, "text": " which I could also have done it by saying at wraps, hold in it, I guess would have worked just as well.", "tokens": [597, 286, 727, 611, 362, 1096, 309, 538, 1566, 412, 25831, 11, 1797, 294, 309, 11, 286, 2041, 576, 362, 2732, 445, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.29295003825220567, "compression_ratio": 1.1704545454545454, "no_speech_prob": 9.36775904847309e-06}, {"id": 298, "seek": 203400, "start": 2034.0, "end": 2047.0, "text": " OK.", "tokens": [2264, 13], "temperature": 0.0, "avg_logprob": -0.1165307729672163, "compression_ratio": 1.0543478260869565, "no_speech_prob": 3.119861867162399e-05}, {"id": 299, "seek": 203400, "start": 2047.0, "end": 2054.0, "text": " I'm trying to remember why this is here, and I now don't.", "tokens": [286, 478, 1382, 281, 1604, 983, 341, 307, 510, 11, 293, 286, 586, 500, 380, 13], "temperature": 0.0, "avg_logprob": -0.1165307729672163, "compression_ratio": 1.0543478260869565, "no_speech_prob": 3.119861867162399e-05}, {"id": 300, "seek": 203400, "start": 2054.0, "end": 2059.0, "text": " What am I doing with that?", "tokens": [708, 669, 286, 884, 365, 300, 30], "temperature": 0.0, "avg_logprob": -0.1165307729672163, "compression_ratio": 1.0543478260869565, "no_speech_prob": 3.119861867162399e-05}, {"id": 301, "seek": 203400, "start": 2059.0, "end": 2061.0, "text": " Ah, yes.", "tokens": [2438, 11, 2086, 13], "temperature": 0.0, "avg_logprob": -0.1165307729672163, "compression_ratio": 1.0543478260869565, "no_speech_prob": 3.119861867162399e-05}, {"id": 302, "seek": 206100, "start": 2061.0, "end": 2065.0, "text": " So, yes, yes, yes.", "tokens": [407, 11, 2086, 11, 2086, 11, 2086, 13], "temperature": 0.0, "avg_logprob": -0.1928645028008355, "compression_ratio": 1.5771428571428572, "no_speech_prob": 2.840656270564068e-05}, {"id": 303, "seek": 206100, "start": 2065.0, "end": 2066.0, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.1928645028008355, "compression_ratio": 1.5771428571428572, "no_speech_prob": 2.840656270564068e-05}, {"id": 304, "seek": 206100, "start": 2066.0, "end": 2074.0, "text": " So when we.", "tokens": [407, 562, 321, 13], "temperature": 0.0, "avg_logprob": -0.1928645028008355, "compression_ratio": 1.5771428571428572, "no_speech_prob": 2.840656270564068e-05}, {"id": 305, "seek": 206100, "start": 2074.0, "end": 2076.0, "text": " So we've got funcs quags here.", "tokens": [407, 321, 600, 658, 1019, 14368, 421, 12109, 510, 13], "temperature": 0.0, "avg_logprob": -0.1928645028008355, "compression_ratio": 1.5771428571428572, "no_speech_prob": 2.840656270564068e-05}, {"id": 306, "seek": 206100, "start": 2076.0, "end": 2078.0, "text": " We said B is our methods.", "tokens": [492, 848, 363, 307, 527, 7150, 13], "temperature": 0.0, "avg_logprob": -0.1928645028008355, "compression_ratio": 1.5771428571428572, "no_speech_prob": 2.840656270564068e-05}, {"id": 307, "seek": 206100, "start": 2078.0, "end": 2084.0, "text": " So if I create something of that type and B is going to return 2, because that's the method,", "tokens": [407, 498, 286, 1884, 746, 295, 300, 2010, 293, 363, 307, 516, 281, 2736, 568, 11, 570, 300, 311, 264, 3170, 11], "temperature": 0.0, "avg_logprob": -0.1928645028008355, "compression_ratio": 1.5771428571428572, "no_speech_prob": 2.840656270564068e-05}, {"id": 308, "seek": 206100, "start": 2084.0, "end": 2089.0, "text": " but then I can pass in something and say, no, replace B with a method that returns 3", "tokens": [457, 550, 286, 393, 1320, 294, 746, 293, 584, 11, 572, 11, 7406, 363, 365, 257, 3170, 300, 11247, 805], "temperature": 0.0, "avg_logprob": -0.1928645028008355, "compression_ratio": 1.5771428571428572, "no_speech_prob": 2.840656270564068e-05}, {"id": 309, "seek": 208900, "start": 2089.0, "end": 2096.0, "text": " and make sure that's what happened.", "tokens": [293, 652, 988, 300, 311, 437, 2011, 13], "temperature": 0.0, "avg_logprob": -0.059888394673665364, "compression_ratio": 1.612121212121212, "no_speech_prob": 9.665856850915588e-06}, {"id": 310, "seek": 208900, "start": 2096.0, "end": 2103.0, "text": " And then what you can do instead of passing in a function or a lambda, you can pass in a method.", "tokens": [400, 550, 437, 291, 393, 360, 2602, 295, 8437, 294, 257, 2445, 420, 257, 13607, 11, 291, 393, 1320, 294, 257, 3170, 13], "temperature": 0.0, "avg_logprob": -0.059888394673665364, "compression_ratio": 1.612121212121212, "no_speech_prob": 9.665856850915588e-06}, {"id": 311, "seek": 208900, "start": 2103.0, "end": 2106.0, "text": " If you pass in a method, it's going to get self as well.", "tokens": [759, 291, 1320, 294, 257, 3170, 11, 309, 311, 516, 281, 483, 2698, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.059888394673665364, "compression_ratio": 1.612121212121212, "no_speech_prob": 9.665856850915588e-06}, {"id": 312, "seek": 208900, "start": 2106.0, "end": 2111.0, "text": " So to tell it that something should be a method, you put at method above it.", "tokens": [407, 281, 980, 309, 300, 746, 820, 312, 257, 3170, 11, 291, 829, 412, 3170, 3673, 309, 13], "temperature": 0.0, "avg_logprob": -0.059888394673665364, "compression_ratio": 1.612121212121212, "no_speech_prob": 9.665856850915588e-06}, {"id": 313, "seek": 211100, "start": 2111.0, "end": 2126.0, "text": " And the way that is done is using this little trick here, which is to replace F with a types dot method type wrapper.", "tokens": [400, 264, 636, 300, 307, 1096, 307, 1228, 341, 707, 4282, 510, 11, 597, 307, 281, 7406, 479, 365, 257, 3467, 5893, 3170, 2010, 46906, 13], "temperature": 0.0, "avg_logprob": -0.12575453402949313, "compression_ratio": 1.4328358208955223, "no_speech_prob": 1.5534430986008374e-06}, {"id": 314, "seek": 211100, "start": 2126.0, "end": 2128.0, "text": " And that's what's checked here.", "tokens": [400, 300, 311, 437, 311, 10033, 510, 13], "temperature": 0.0, "avg_logprob": -0.12575453402949313, "compression_ratio": 1.4328358208955223, "no_speech_prob": 1.5534430986008374e-06}, {"id": 315, "seek": 211100, "start": 2128.0, "end": 2136.0, "text": " Check to see whether something's a method.", "tokens": [6881, 281, 536, 1968, 746, 311, 257, 3170, 13], "temperature": 0.0, "avg_logprob": -0.12575453402949313, "compression_ratio": 1.4328358208955223, "no_speech_prob": 1.5534430986008374e-06}, {"id": 316, "seek": 213600, "start": 2136.0, "end": 2145.0, "text": " OK, so that's what that does.", "tokens": [2264, 11, 370, 300, 311, 437, 300, 775, 13], "temperature": 0.0, "avg_logprob": -0.12456321716308594, "compression_ratio": 1.4573643410852712, "no_speech_prob": 1.4823450555923046e-06}, {"id": 317, "seek": 213600, "start": 2145.0, "end": 2156.0, "text": " I added this little decorator that uses a external thing called type checked.", "tokens": [286, 3869, 341, 707, 7919, 1639, 300, 4960, 257, 8320, 551, 1219, 2010, 10033, 13], "temperature": 0.0, "avg_logprob": -0.12456321716308594, "compression_ratio": 1.4573643410852712, "no_speech_prob": 1.4823450555923046e-06}, {"id": 318, "seek": 213600, "start": 2156.0, "end": 2162.0, "text": " Which basically does runtime type checking part of this thing called type guard.", "tokens": [3013, 1936, 775, 34474, 2010, 8568, 644, 295, 341, 551, 1219, 2010, 6290, 13], "temperature": 0.0, "avg_logprob": -0.12456321716308594, "compression_ratio": 1.4573643410852712, "no_speech_prob": 1.4823450555923046e-06}, {"id": 319, "seek": 216200, "start": 2162.0, "end": 2169.0, "text": " Although honestly, I haven't actually used it since I added it, so I might remove it or we might decide to use it more widely.", "tokens": [5780, 6095, 11, 286, 2378, 380, 767, 1143, 309, 1670, 286, 3869, 309, 11, 370, 286, 1062, 4159, 309, 420, 321, 1062, 4536, 281, 764, 309, 544, 13371, 13], "temperature": 0.0, "avg_logprob": -0.0769854465001066, "compression_ratio": 1.5027624309392265, "no_speech_prob": 2.40606232182472e-06}, {"id": 320, "seek": 216200, "start": 2169.0, "end": 2184.0, "text": " But basically what it does is if you add a annotation and then you try to call it with the wrong type, then it'll fail.", "tokens": [583, 1936, 437, 309, 775, 307, 498, 291, 909, 257, 48654, 293, 550, 291, 853, 281, 818, 309, 365, 264, 2085, 2010, 11, 550, 309, 603, 3061, 13], "temperature": 0.0, "avg_logprob": -0.0769854465001066, "compression_ratio": 1.5027624309392265, "no_speech_prob": 2.40606232182472e-06}, {"id": 321, "seek": 216200, "start": 2184.0, "end": 2185.0, "text": " It's an interesting idea.", "tokens": [467, 311, 364, 1880, 1558, 13], "temperature": 0.0, "avg_logprob": -0.0769854465001066, "compression_ratio": 1.5027624309392265, "no_speech_prob": 2.40606232182472e-06}, {"id": 322, "seek": 218500, "start": 2185.0, "end": 2194.0, "text": " I just haven't found myself wanting it much yet.", "tokens": [286, 445, 2378, 380, 1352, 2059, 7935, 309, 709, 1939, 13], "temperature": 0.0, "avg_logprob": -0.07135841846466065, "compression_ratio": 1.0470588235294118, "no_speech_prob": 9.222742846759502e-06}, {"id": 323, "seek": 218500, "start": 2194.0, "end": 2207.0, "text": " OK.", "tokens": [2264, 13], "temperature": 0.0, "avg_logprob": -0.07135841846466065, "compression_ratio": 1.0470588235294118, "no_speech_prob": 9.222742846759502e-06}, {"id": 324, "seek": 218500, "start": 2207.0, "end": 2212.0, "text": " What else is there to show you here?", "tokens": [708, 1646, 307, 456, 281, 855, 291, 510, 30], "temperature": 0.0, "avg_logprob": -0.07135841846466065, "compression_ratio": 1.0470588235294118, "no_speech_prob": 9.222742846759502e-06}, {"id": 325, "seek": 221200, "start": 2212.0, "end": 2216.0, "text": " Add docs we've seen plenty of times.", "tokens": [5349, 45623, 321, 600, 1612, 7140, 295, 1413, 13], "temperature": 0.0, "avg_logprob": -0.1295025378842897, "compression_ratio": 1.560693641618497, "no_speech_prob": 1.9524668459780514e-05}, {"id": 326, "seek": 221200, "start": 2216.0, "end": 2218.0, "text": " So here's an example.", "tokens": [407, 510, 311, 364, 1365, 13], "temperature": 0.0, "avg_logprob": -0.1295025378842897, "compression_ratio": 1.560693641618497, "no_speech_prob": 1.9524668459780514e-05}, {"id": 327, "seek": 221200, "start": 2218.0, "end": 2221.0, "text": " We've got some class with some functions.", "tokens": [492, 600, 658, 512, 1508, 365, 512, 6828, 13], "temperature": 0.0, "avg_logprob": -0.1295025378842897, "compression_ratio": 1.560693641618497, "no_speech_prob": 1.9524668459780514e-05}, {"id": 328, "seek": 221200, "start": 2221.0, "end": 2228.0, "text": " And if we say then say add docs, then we can say these are my doc strings for each function.", "tokens": [400, 498, 321, 584, 550, 584, 909, 45623, 11, 550, 321, 393, 584, 613, 366, 452, 3211, 13985, 337, 1184, 2445, 13], "temperature": 0.0, "avg_logprob": -0.1295025378842897, "compression_ratio": 1.560693641618497, "no_speech_prob": 1.9524668459780514e-05}, {"id": 329, "seek": 221200, "start": 2228.0, "end": 2235.0, "text": " And so I can then just check that it does in fact get those doc strings.", "tokens": [400, 370, 286, 393, 550, 445, 1520, 300, 309, 775, 294, 1186, 483, 729, 3211, 13985, 13], "temperature": 0.0, "avg_logprob": -0.1295025378842897, "compression_ratio": 1.560693641618497, "no_speech_prob": 1.9524668459780514e-05}, {"id": 330, "seek": 221200, "start": 2235.0, "end": 2238.0, "text": " OK.", "tokens": [2264, 13], "temperature": 0.0, "avg_logprob": -0.1295025378842897, "compression_ratio": 1.560693641618497, "no_speech_prob": 1.9524668459780514e-05}, {"id": 331, "seek": 223800, "start": 2238.0, "end": 2243.0, "text": " So that's that. And then get atra.", "tokens": [407, 300, 311, 300, 13, 400, 550, 483, 412, 424, 13], "temperature": 0.0, "avg_logprob": -0.11812403327540348, "compression_ratio": 1.5798816568047338, "no_speech_prob": 3.089430265390547e-06}, {"id": 332, "seek": 223800, "start": 2243.0, "end": 2247.0, "text": " I guess we've pretty much seen now.", "tokens": [286, 2041, 321, 600, 1238, 709, 1612, 586, 13], "temperature": 0.0, "avg_logprob": -0.11812403327540348, "compression_ratio": 1.5798816568047338, "no_speech_prob": 3.089430265390547e-06}, {"id": 333, "seek": 223800, "start": 2247.0, "end": 2256.0, "text": " So get atra is the thing that we inherit from in order to get done to get atra for free.", "tokens": [407, 483, 412, 424, 307, 264, 551, 300, 321, 21389, 490, 294, 1668, 281, 483, 1096, 281, 483, 412, 424, 337, 1737, 13], "temperature": 0.0, "avg_logprob": -0.11812403327540348, "compression_ratio": 1.5798816568047338, "no_speech_prob": 3.089430265390547e-06}, {"id": 334, "seek": 223800, "start": 2256.0, "end": 2265.0, "text": " And specifically what it's going to do is it's going to try and find the unknown attribute in self default.", "tokens": [400, 4682, 437, 309, 311, 516, 281, 360, 307, 309, 311, 516, 281, 853, 293, 915, 264, 9841, 19667, 294, 2698, 7576, 13], "temperature": 0.0, "avg_logprob": -0.11812403327540348, "compression_ratio": 1.5798816568047338, "no_speech_prob": 3.089430265390547e-06}, {"id": 335, "seek": 226500, "start": 2265.0, "end": 2271.0, "text": " So here's an example where we set self default to whatever you pass in.", "tokens": [407, 510, 311, 364, 1365, 689, 321, 992, 2698, 7576, 281, 2035, 291, 1320, 294, 13], "temperature": 0.0, "avg_logprob": -0.10938173627096509, "compression_ratio": 1.4652777777777777, "no_speech_prob": 2.2473450371762738e-05}, {"id": 336, "seek": 226500, "start": 2271.0, "end": 2274.0, "text": " So we passed in high.", "tokens": [407, 321, 4678, 294, 1090, 13], "temperature": 0.0, "avg_logprob": -0.10938173627096509, "compression_ratio": 1.4652777777777777, "no_speech_prob": 2.2473450371762738e-05}, {"id": 337, "seek": 226500, "start": 2274.0, "end": 2280.0, "text": " So we would expect to be able to do dot lower.", "tokens": [407, 321, 576, 2066, 281, 312, 1075, 281, 360, 5893, 3126, 13], "temperature": 0.0, "avg_logprob": -0.10938173627096509, "compression_ratio": 1.4652777777777777, "no_speech_prob": 2.2473450371762738e-05}, {"id": 338, "seek": 226500, "start": 2280.0, "end": 2291.0, "text": " That would make a lot more sense if this was capitalized.", "tokens": [663, 576, 652, 257, 688, 544, 2020, 498, 341, 390, 4238, 1602, 13], "temperature": 0.0, "avg_logprob": -0.10938173627096509, "compression_ratio": 1.4652777777777777, "no_speech_prob": 2.2473450371762738e-05}, {"id": 339, "seek": 226500, "start": 2291.0, "end": 2293.0, "text": " There we go.", "tokens": [821, 321, 352, 13], "temperature": 0.0, "avg_logprob": -0.10938173627096509, "compression_ratio": 1.4652777777777777, "no_speech_prob": 2.2473450371762738e-05}, {"id": 340, "seek": 229300, "start": 2293.0, "end": 2303.0, "text": " And it fails if we try to say upper because underscore extra is the list of things that we are allowed to delegate.", "tokens": [400, 309, 18199, 498, 321, 853, 281, 584, 6597, 570, 37556, 2857, 307, 264, 1329, 295, 721, 300, 321, 366, 4350, 281, 40999, 13], "temperature": 0.0, "avg_logprob": -0.09698267092649963, "compression_ratio": 1.7031963470319635, "no_speech_prob": 2.2473481294582598e-05}, {"id": 341, "seek": 229300, "start": 2303.0, "end": 2307.0, "text": " Although by default it will delegate everything.", "tokens": [5780, 538, 7576, 309, 486, 40999, 1203, 13], "temperature": 0.0, "avg_logprob": -0.09698267092649963, "compression_ratio": 1.7031963470319635, "no_speech_prob": 2.2473481294582598e-05}, {"id": 342, "seek": 229300, "start": 2307.0, "end": 2310.0, "text": " So dir in Python gives you back a list of all of the attributes.", "tokens": [407, 4746, 294, 15329, 2709, 291, 646, 257, 1329, 295, 439, 295, 264, 17212, 13], "temperature": 0.0, "avg_logprob": -0.09698267092649963, "compression_ratio": 1.7031963470319635, "no_speech_prob": 2.2473481294582598e-05}, {"id": 343, "seek": 229300, "start": 2310.0, "end": 2319.0, "text": " So to give you we can use anything by default that's in self default as long as it doesn't start with underscore because that would be private.", "tokens": [407, 281, 976, 291, 321, 393, 764, 1340, 538, 7576, 300, 311, 294, 2698, 7576, 382, 938, 382, 309, 1177, 380, 722, 365, 37556, 570, 300, 576, 312, 4551, 13], "temperature": 0.0, "avg_logprob": -0.09698267092649963, "compression_ratio": 1.7031963470319635, "no_speech_prob": 2.2473481294582598e-05}, {"id": 344, "seek": 231900, "start": 2319.0, "end": 2323.0, "text": " So done to dir is a thing that Python calls when you call dir.", "tokens": [407, 1096, 281, 4746, 307, 257, 551, 300, 15329, 5498, 562, 291, 818, 4746, 13], "temperature": 0.0, "avg_logprob": -0.11365029445061317, "compression_ratio": 1.5151515151515151, "no_speech_prob": 2.3320553736994043e-06}, {"id": 345, "seek": 231900, "start": 2323.0, "end": 2327.0, "text": " So when you do like tab completion that's how it does tab completion.", "tokens": [407, 562, 291, 360, 411, 4421, 19372, 300, 311, 577, 309, 775, 4421, 19372, 13], "temperature": 0.0, "avg_logprob": -0.11365029445061317, "compression_ratio": 1.5151515151515151, "no_speech_prob": 2.3320553736994043e-06}, {"id": 346, "seek": 231900, "start": 2327.0, "end": 2340.0, "text": " So we then do custom dir which is looking at everything in the type", "tokens": [407, 321, 550, 360, 2375, 4746, 597, 307, 1237, 412, 1203, 294, 264, 2010], "temperature": 0.0, "avg_logprob": -0.11365029445061317, "compression_ratio": 1.5151515151515151, "no_speech_prob": 2.3320553736994043e-06}, {"id": 347, "seek": 234000, "start": 2340.0, "end": 2351.0, "text": " and everything in the object and anything else that you add manually.", "tokens": [293, 1203, 294, 264, 2657, 293, 1340, 1646, 300, 291, 909, 16945, 13], "temperature": 0.0, "avg_logprob": -0.19848703301471213, "compression_ratio": 1.3888888888888888, "no_speech_prob": 2.994415353896329e-06}, {"id": 348, "seek": 234000, "start": 2351.0, "end": 2359.0, "text": " So here we check that lower has been added to our dir.", "tokens": [407, 510, 321, 1520, 300, 3126, 575, 668, 3869, 281, 527, 4746, 13], "temperature": 0.0, "avg_logprob": -0.19848703301471213, "compression_ratio": 1.3888888888888888, "no_speech_prob": 2.994415353896329e-06}, {"id": 349, "seek": 234000, "start": 2359.0, "end": 2364.0, "text": " Sometimes you don't want to inherit from get atra.", "tokens": [4803, 291, 500, 380, 528, 281, 21389, 490, 483, 412, 424, 13], "temperature": 0.0, "avg_logprob": -0.19848703301471213, "compression_ratio": 1.3888888888888888, "no_speech_prob": 2.994415353896329e-06}, {"id": 350, "seek": 236400, "start": 2364.0, "end": 2384.0, "text": " But instead you want to kind of do it manually so you can also instead define your own done to get atra and simply return this delegate atra which will basically do exactly the same thing except you don't get the done to dir thing.", "tokens": [583, 2602, 291, 528, 281, 733, 295, 360, 309, 16945, 370, 291, 393, 611, 2602, 6964, 428, 1065, 1096, 281, 483, 412, 424, 293, 2935, 2736, 341, 40999, 412, 424, 597, 486, 1936, 360, 2293, 264, 912, 551, 3993, 291, 500, 380, 483, 264, 1096, 281, 4746, 551, 13], "temperature": 0.0, "avg_logprob": -0.12560623342340643, "compression_ratio": 1.5502958579881656, "no_speech_prob": 1.8161712205255753e-06}, {"id": 351, "seek": 236400, "start": 2384.0, "end": 2387.0, "text": " Oh, one more thing.", "tokens": [876, 11, 472, 544, 551, 13], "temperature": 0.0, "avg_logprob": -0.12560623342340643, "compression_ratio": 1.5502958579881656, "no_speech_prob": 1.8161712205255753e-06}, {"id": 352, "seek": 236400, "start": 2387.0, "end": 2391.0, "text": " Set state.", "tokens": [8928, 1785, 13], "temperature": 0.0, "avg_logprob": -0.12560623342340643, "compression_ratio": 1.5502958579881656, "no_speech_prob": 1.8161712205255753e-06}, {"id": 353, "seek": 239100, "start": 2391.0, "end": 2397.0, "text": " When you override done to get atra in Python, it often kills pickle.", "tokens": [1133, 291, 42321, 1096, 281, 483, 412, 424, 294, 15329, 11, 309, 2049, 14563, 31433, 13], "temperature": 0.0, "avg_logprob": -0.10077734691340749, "compression_ratio": 1.5265700483091786, "no_speech_prob": 5.014615908294218e-06}, {"id": 354, "seek": 239100, "start": 2397.0, "end": 2411.0, "text": " And so we just, I think we just looked it up on Stack Overflow and found a few so pickle will use done to set state to decide what to pickle, basically.", "tokens": [400, 370, 321, 445, 11, 286, 519, 321, 445, 2956, 309, 493, 322, 37649, 4886, 10565, 293, 1352, 257, 1326, 370, 31433, 486, 764, 1096, 281, 992, 1785, 281, 4536, 437, 281, 31433, 11, 1936, 13], "temperature": 0.0, "avg_logprob": -0.10077734691340749, "compression_ratio": 1.5265700483091786, "no_speech_prob": 5.014615908294218e-06}, {"id": 355, "seek": 239100, "start": 2411.0, "end": 2420.0, "text": " And I don't quite remember why but somehow doing this fixes pickling. That's why that's there.", "tokens": [400, 286, 500, 380, 1596, 1604, 983, 457, 6063, 884, 341, 32539, 1888, 1688, 13, 663, 311, 983, 300, 311, 456, 13], "temperature": 0.0, "avg_logprob": -0.10077734691340749, "compression_ratio": 1.5265700483091786, "no_speech_prob": 5.014615908294218e-06}, {"id": 356, "seek": 242000, "start": 2420.0, "end": 2422.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.15215368968684498, "compression_ratio": 1.1612903225806452, "no_speech_prob": 2.014426172536332e-05}, {"id": 357, "seek": 242000, "start": 2422.0, "end": 2429.0, "text": " So, last one for today is L, this is the main one.", "tokens": [407, 11, 1036, 472, 337, 965, 307, 441, 11, 341, 307, 264, 2135, 472, 13], "temperature": 0.0, "avg_logprob": -0.15215368968684498, "compression_ratio": 1.1612903225806452, "no_speech_prob": 2.014426172536332e-05}, {"id": 358, "seek": 242000, "start": 2429.0, "end": 2439.0, "text": " So", "tokens": [407], "temperature": 0.0, "avg_logprob": -0.15215368968684498, "compression_ratio": 1.1612903225806452, "no_speech_prob": 2.014426172536332e-05}, {"id": 359, "seek": 242000, "start": 2439.0, "end": 2444.0, "text": " L is a collection base, which also has get atra.", "tokens": [441, 307, 257, 5765, 3096, 11, 597, 611, 575, 483, 412, 424, 13], "temperature": 0.0, "avg_logprob": -0.15215368968684498, "compression_ratio": 1.1612903225806452, "no_speech_prob": 2.014426172536332e-05}, {"id": 360, "seek": 244400, "start": 2444.0, "end": 2454.0, "text": " And also uses new check meta to make sure that we don't, that if you pass in an L, then it just gives you back what you started with rather than creating another one.", "tokens": [400, 611, 4960, 777, 1520, 19616, 281, 652, 988, 300, 321, 500, 380, 11, 300, 498, 291, 1320, 294, 364, 441, 11, 550, 309, 445, 2709, 291, 646, 437, 291, 1409, 365, 2831, 813, 4084, 1071, 472, 13], "temperature": 0.0, "avg_logprob": -0.14583447922107784, "compression_ratio": 1.6743119266055047, "no_speech_prob": 5.8626583268051036e-06}, {"id": 361, "seek": 244400, "start": 2454.0, "end": 2462.0, "text": " A collection base is just something which contains, composes some items.", "tokens": [316, 5765, 3096, 307, 445, 746, 597, 8306, 11, 715, 4201, 512, 4754, 13], "temperature": 0.0, "avg_logprob": -0.14583447922107784, "compression_ratio": 1.6743119266055047, "no_speech_prob": 5.8626583268051036e-06}, {"id": 362, "seek": 244400, "start": 2462.0, "end": 2472.0, "text": " And basically everything is just delegated down to that so delegates down length and get item set item del item repra and it.", "tokens": [400, 1936, 1203, 307, 445, 15824, 770, 760, 281, 300, 370, 45756, 760, 4641, 293, 483, 3174, 992, 3174, 1103, 3174, 1085, 424, 293, 309, 13], "temperature": 0.0, "avg_logprob": -0.14583447922107784, "compression_ratio": 1.6743119266055047, "no_speech_prob": 5.8626583268051036e-06}, {"id": 363, "seek": 247200, "start": 2472.0, "end": 2482.0, "text": " So you don't know what any of these things are check the Python data model docs.", "tokens": [407, 291, 500, 380, 458, 437, 604, 295, 613, 721, 366, 1520, 264, 15329, 1412, 2316, 45623, 13], "temperature": 0.0, "avg_logprob": -0.1721009689828624, "compression_ratio": 1.291044776119403, "no_speech_prob": 8.939250619732775e-06}, {"id": 364, "seek": 247200, "start": 2482.0, "end": 2491.0, "text": " So then L adds a lot of behavior, which is best understood by looking at the tests, I think.", "tokens": [407, 550, 441, 10860, 257, 688, 295, 5223, 11, 597, 307, 1151, 7320, 538, 1237, 412, 264, 6921, 11, 286, 519, 13], "temperature": 0.0, "avg_logprob": -0.1721009689828624, "compression_ratio": 1.291044776119403, "no_speech_prob": 8.939250619732775e-06}, {"id": 365, "seek": 249100, "start": 2491.0, "end": 2502.0, "text": " So you can pass in pretty much anything to an L that you could otherwise pass into the normal Python list. So list range 12.", "tokens": [407, 291, 393, 1320, 294, 1238, 709, 1340, 281, 364, 441, 300, 291, 727, 5911, 1320, 666, 264, 2710, 15329, 1329, 13, 407, 1329, 3613, 2272, 13], "temperature": 0.0, "avg_logprob": -0.13746399538857595, "compression_ratio": 1.5310344827586206, "no_speech_prob": 6.540303729707375e-06}, {"id": 366, "seek": 249100, "start": 2502.0, "end": 2515.0, "text": " Would return that L range 12. So we try to make it behave as much like a Python list as possible.", "tokens": [6068, 2736, 300, 441, 3613, 2272, 13, 407, 321, 853, 281, 652, 309, 15158, 382, 709, 411, 257, 15329, 1329, 382, 1944, 13], "temperature": 0.0, "avg_logprob": -0.13746399538857595, "compression_ratio": 1.5310344827586206, "no_speech_prob": 6.540303729707375e-06}, {"id": 367, "seek": 251500, "start": 2515.0, "end": 2521.0, "text": " And if you pass in the same things, in fact, you can see we actually test check that that's the same as.", "tokens": [400, 498, 291, 1320, 294, 264, 912, 721, 11, 294, 1186, 11, 291, 393, 536, 321, 767, 1500, 1520, 300, 300, 311, 264, 912, 382, 13], "temperature": 0.0, "avg_logprob": -0.1914346836231373, "compression_ratio": 1.4195804195804196, "no_speech_prob": 8.267560588137712e-06}, {"id": 368, "seek": 251500, "start": 2521.0, "end": 2543.0, "text": " Rest range range 12. But then we have another nice little thing so we can do reverse, for example.", "tokens": [13094, 3613, 3613, 2272, 13, 583, 550, 321, 362, 1071, 1481, 707, 551, 370, 321, 393, 360, 9943, 11, 337, 1365, 13], "temperature": 0.0, "avg_logprob": -0.1914346836231373, "compression_ratio": 1.4195804195804196, "no_speech_prob": 8.267560588137712e-06}, {"id": 369, "seek": 254300, "start": 2543.0, "end": 2549.0, "text": " As you can see now. Reverse.", "tokens": [1018, 291, 393, 536, 586, 13, 26314, 405, 13], "temperature": 0.0, "avg_logprob": -0.20605628216852906, "compression_ratio": 1.4577464788732395, "no_speech_prob": 1.3419487913779449e-05}, {"id": 370, "seek": 254300, "start": 2549.0, "end": 2554.0, "text": " Is actually not listed anywhere here.", "tokens": [1119, 767, 406, 10052, 4992, 510, 13], "temperature": 0.0, "avg_logprob": -0.20605628216852906, "compression_ratio": 1.4577464788732395, "no_speech_prob": 1.3419487913779449e-05}, {"id": 371, "seek": 254300, "start": 2554.0, "end": 2562.0, "text": " As you can see, and the reason for that is that we inherited from Gadatra and that.", "tokens": [1018, 291, 393, 536, 11, 293, 264, 1778, 337, 300, 307, 300, 321, 27091, 490, 37171, 267, 424, 293, 300, 13], "temperature": 0.0, "avg_logprob": -0.20605628216852906, "compression_ratio": 1.4577464788732395, "no_speech_prob": 1.3419487913779449e-05}, {"id": 372, "seek": 254300, "start": 2562.0, "end": 2572.0, "text": " Default is set to self dot items and list has a reverse.", "tokens": [9548, 5107, 307, 992, 281, 2698, 5893, 4754, 293, 1329, 575, 257, 9943, 13], "temperature": 0.0, "avg_logprob": -0.20605628216852906, "compression_ratio": 1.4577464788732395, "no_speech_prob": 1.3419487913779449e-05}, {"id": 373, "seek": 257200, "start": 2572.0, "end": 2581.0, "text": " So actually all we were doing is we were delegating to list.", "tokens": [407, 767, 439, 321, 645, 884, 307, 321, 645, 15824, 990, 281, 1329, 13], "temperature": 0.0, "avg_logprob": -0.11352228164672852, "compression_ratio": 1.0704225352112675, "no_speech_prob": 3.48000721714925e-05}, {"id": 374, "seek": 257200, "start": 2581.0, "end": 2597.0, "text": " As you can see.", "tokens": [1018, 291, 393, 536, 13], "temperature": 0.0, "avg_logprob": -0.11352228164672852, "compression_ratio": 1.0704225352112675, "no_speech_prob": 3.48000721714925e-05}, {"id": 375, "seek": 259700, "start": 2597.0, "end": 2609.0, "text": " OK.", "tokens": [2264, 13], "temperature": 0.0, "avg_logprob": -0.2054430130989321, "compression_ratio": 0.9866666666666667, "no_speech_prob": 1.3630263310915325e-05}, {"id": 376, "seek": 259700, "start": 2609.0, "end": 2613.0, "text": " We have a.", "tokens": [492, 362, 257, 13], "temperature": 0.0, "avg_logprob": -0.2054430130989321, "compression_ratio": 0.9866666666666667, "no_speech_prob": 1.3630263310915325e-05}, {"id": 377, "seek": 259700, "start": 2613.0, "end": 2617.0, "text": " Thunder said item, as you can see.", "tokens": [21023, 848, 3174, 11, 382, 291, 393, 536, 13], "temperature": 0.0, "avg_logprob": -0.2054430130989321, "compression_ratio": 0.9866666666666667, "no_speech_prob": 1.3630263310915325e-05}, {"id": 378, "seek": 259700, "start": 2617.0, "end": 2619.0, "text": " So we can set something.", "tokens": [407, 321, 393, 992, 746, 13], "temperature": 0.0, "avg_logprob": -0.2054430130989321, "compression_ratio": 0.9866666666666667, "no_speech_prob": 1.3630263310915325e-05}, {"id": 379, "seek": 261900, "start": 2619.0, "end": 2631.0, "text": " T3 equals H. And then some of the nice stuff that we're adding is being able to kind of more NumPy style set multiple things to multiple values.", "tokens": [314, 18, 6915, 389, 13, 400, 550, 512, 295, 264, 1481, 1507, 300, 321, 434, 5127, 307, 885, 1075, 281, 733, 295, 544, 22592, 47, 88, 3758, 992, 3866, 721, 281, 3866, 4190, 13], "temperature": 0.0, "avg_logprob": -0.17160913679334852, "compression_ratio": 1.3700787401574803, "no_speech_prob": 3.446351456659613e-06}, {"id": 380, "seek": 261900, "start": 2631.0, "end": 2640.0, "text": " And retrieve multiple things.", "tokens": [400, 30254, 3866, 721, 13], "temperature": 0.0, "avg_logprob": -0.17160913679334852, "compression_ratio": 1.3700787401574803, "no_speech_prob": 3.446351456659613e-06}, {"id": 381, "seek": 264000, "start": 2640.0, "end": 2649.0, "text": " Yeah, so that's some basic functionality and L.", "tokens": [865, 11, 370, 300, 311, 512, 3875, 14980, 293, 441, 13], "temperature": 0.0, "avg_logprob": -0.14347373962402343, "compression_ratio": 1.6235294117647059, "no_speech_prob": 2.726399998209672e-06}, {"id": 382, "seek": 264000, "start": 2649.0, "end": 2662.0, "text": " You can create an empty one should be the match match to an empty list, of course, the pen, just like a list can plus equals to it like a list can.", "tokens": [509, 393, 1884, 364, 6707, 472, 820, 312, 264, 2995, 2995, 281, 364, 6707, 1329, 11, 295, 1164, 11, 264, 3435, 11, 445, 411, 257, 1329, 393, 1804, 6915, 281, 309, 411, 257, 1329, 393, 13], "temperature": 0.0, "avg_logprob": -0.14347373962402343, "compression_ratio": 1.6235294117647059, "no_speech_prob": 2.726399998209672e-06}, {"id": 383, "seek": 264000, "start": 2662.0, "end": 2668.0, "text": " You can add things onto the left of it instead of the right, which a list can't.", "tokens": [509, 393, 909, 721, 3911, 264, 1411, 295, 309, 2602, 295, 264, 558, 11, 597, 257, 1329, 393, 380, 13], "temperature": 0.0, "avg_logprob": -0.14347373962402343, "compression_ratio": 1.6235294117647059, "no_speech_prob": 2.726399998209672e-06}, {"id": 384, "seek": 266800, "start": 2668.0, "end": 2675.0, "text": " You can multiply just like a list can.", "tokens": [509, 393, 12972, 445, 411, 257, 1329, 393, 13], "temperature": 0.0, "avg_logprob": -0.12034943898518881, "compression_ratio": 1.4752475247524752, "no_speech_prob": 2.8855565687990747e-05}, {"id": 385, "seek": 266800, "start": 2675.0, "end": 2678.0, "text": " Unlike a list, you can negate.", "tokens": [17657, 257, 1329, 11, 291, 393, 2485, 473, 13], "temperature": 0.0, "avg_logprob": -0.12034943898518881, "compression_ratio": 1.4752475247524752, "no_speech_prob": 2.8855565687990747e-05}, {"id": 386, "seek": 266800, "start": 2678.0, "end": 2680.0, "text": " So this is the negation operation.", "tokens": [407, 341, 307, 264, 2485, 399, 6916, 13], "temperature": 0.0, "avg_logprob": -0.12034943898518881, "compression_ratio": 1.4752475247524752, "no_speech_prob": 2.8855565687990747e-05}, {"id": 387, "seek": 266800, "start": 2680.0, "end": 2692.0, "text": " So true false false becomes false true true.", "tokens": [407, 2074, 7908, 7908, 3643, 7908, 2074, 2074, 13], "temperature": 0.0, "avg_logprob": -0.12034943898518881, "compression_ratio": 1.4752475247524752, "no_speech_prob": 2.8855565687990747e-05}, {"id": 388, "seek": 269200, "start": 2692.0, "end": 2698.0, "text": " So then here's an interesting one cycle.", "tokens": [407, 550, 510, 311, 364, 1880, 472, 6586, 13], "temperature": 0.0, "avg_logprob": -0.212995399128307, "compression_ratio": 1.4509803921568627, "no_speech_prob": 7.411172646243358e-06}, {"id": 389, "seek": 269200, "start": 2698.0, "end": 2707.0, "text": " So cycle.", "tokens": [407, 6586, 13], "temperature": 0.0, "avg_logprob": -0.212995399128307, "compression_ratio": 1.4509803921568627, "no_speech_prob": 7.411172646243358e-06}, {"id": 390, "seek": 269200, "start": 2707.0, "end": 2712.0, "text": " Simply calls it a tools cycle.", "tokens": [19596, 5498, 309, 257, 3873, 6586, 13], "temperature": 0.0, "avg_logprob": -0.212995399128307, "compression_ratio": 1.4509803921568627, "no_speech_prob": 7.411172646243358e-06}, {"id": 391, "seek": 269200, "start": 2712.0, "end": 2716.0, "text": " So that's a useful thing to know about basically it a tools cycle.", "tokens": [407, 300, 311, 257, 4420, 551, 281, 458, 466, 1936, 309, 257, 3873, 6586, 13], "temperature": 0.0, "avg_logprob": -0.212995399128307, "compression_ratio": 1.4509803921568627, "no_speech_prob": 7.411172646243358e-06}, {"id": 392, "seek": 271600, "start": 2716.0, "end": 2723.0, "text": " Simply let's try it. It a tools dot cycle.", "tokens": [19596, 718, 311, 853, 309, 13, 467, 257, 3873, 5893, 6586, 13], "temperature": 0.0, "avg_logprob": -0.20487751066684723, "compression_ratio": 1.3624161073825503, "no_speech_prob": 3.7051788240205497e-05}, {"id": 393, "seek": 271600, "start": 2723.0, "end": 2726.0, "text": " One, two, three.", "tokens": [1485, 11, 732, 11, 1045, 13], "temperature": 0.0, "avg_logprob": -0.20487751066684723, "compression_ratio": 1.3624161073825503, "no_speech_prob": 3.7051788240205497e-05}, {"id": 394, "seek": 271600, "start": 2726.0, "end": 2728.0, "text": " And then we'll need to just grab the first little bit of that.", "tokens": [400, 550, 321, 603, 643, 281, 445, 4444, 264, 700, 707, 857, 295, 300, 13], "temperature": 0.0, "avg_logprob": -0.20487751066684723, "compression_ratio": 1.3624161073825503, "no_speech_prob": 3.7051788240205497e-05}, {"id": 395, "seek": 271600, "start": 2728.0, "end": 2731.0, "text": " Otherwise, it'll be infinitely long.", "tokens": [10328, 11, 309, 603, 312, 36227, 938, 13], "temperature": 0.0, "avg_logprob": -0.20487751066684723, "compression_ratio": 1.3624161073825503, "no_speech_prob": 3.7051788240205497e-05}, {"id": 396, "seek": 271600, "start": 2731.0, "end": 2738.0, "text": " And I don't have an infinite amount of RAM.", "tokens": [400, 286, 500, 380, 362, 364, 13785, 2372, 295, 14561, 13], "temperature": 0.0, "avg_logprob": -0.20487751066684723, "compression_ratio": 1.3624161073825503, "no_speech_prob": 3.7051788240205497e-05}, {"id": 397, "seek": 273800, "start": 2738.0, "end": 2746.0, "text": " It a tools dot I sliced, grab the first bit, come out 12.", "tokens": [467, 257, 3873, 5893, 286, 27098, 11, 4444, 264, 700, 857, 11, 808, 484, 2272, 13], "temperature": 0.0, "avg_logprob": -0.22525980255820535, "compression_ratio": 1.643312101910828, "no_speech_prob": 7.646412086614873e-06}, {"id": 398, "seek": 273800, "start": 2746.0, "end": 2749.0, "text": " And then we'll need to listify that.", "tokens": [400, 550, 321, 603, 643, 281, 1329, 2505, 300, 13], "temperature": 0.0, "avg_logprob": -0.22525980255820535, "compression_ratio": 1.643312101910828, "no_speech_prob": 7.646412086614873e-06}, {"id": 399, "seek": 273800, "start": 2749.0, "end": 2750.0, "text": " You can see it. OK.", "tokens": [509, 393, 536, 309, 13, 2264, 13], "temperature": 0.0, "avg_logprob": -0.22525980255820535, "compression_ratio": 1.643312101910828, "no_speech_prob": 7.646412086614873e-06}, {"id": 400, "seek": 273800, "start": 2750.0, "end": 2753.0, "text": " So as you can see what cycle does one, two, three, one, two, three, one, two, three.", "tokens": [407, 382, 291, 393, 536, 437, 6586, 775, 472, 11, 732, 11, 1045, 11, 472, 11, 732, 11, 1045, 11, 472, 11, 732, 11, 1045, 13], "temperature": 0.0, "avg_logprob": -0.22525980255820535, "compression_ratio": 1.643312101910828, "no_speech_prob": 7.646412086614873e-06}, {"id": 401, "seek": 273800, "start": 2753.0, "end": 2755.0, "text": " So to do that forever.", "tokens": [407, 281, 360, 300, 5680, 13], "temperature": 0.0, "avg_logprob": -0.22525980255820535, "compression_ratio": 1.643312101910828, "no_speech_prob": 7.646412086614873e-06}, {"id": 402, "seek": 273800, "start": 2755.0, "end": 2758.0, "text": " And then we sliced in the first 12.", "tokens": [400, 550, 321, 27098, 294, 264, 700, 2272, 13], "temperature": 0.0, "avg_logprob": -0.22525980255820535, "compression_ratio": 1.643312101910828, "no_speech_prob": 7.646412086614873e-06}, {"id": 403, "seek": 275800, "start": 2758.0, "end": 2770.0, "text": " So we can say L dot cycle.", "tokens": [407, 321, 393, 584, 441, 5893, 6586, 13], "temperature": 0.0, "avg_logprob": -0.1368369952492092, "compression_ratio": 0.9333333333333333, "no_speech_prob": 2.9943910249130568e-06}, {"id": 404, "seek": 275800, "start": 2770.0, "end": 2783.0, "text": " One, two, three, for example.", "tokens": [1485, 11, 732, 11, 1045, 11, 337, 1365, 13], "temperature": 0.0, "avg_logprob": -0.1368369952492092, "compression_ratio": 0.9333333333333333, "no_speech_prob": 2.9943910249130568e-06}, {"id": 405, "seek": 278300, "start": 2783.0, "end": 2795.0, "text": " And then we can do the same thing. It a tools dot I slice that.", "tokens": [400, 550, 321, 393, 360, 264, 912, 551, 13, 467, 257, 3873, 5893, 286, 13153, 300, 13], "temperature": 0.0, "avg_logprob": -0.22068098317021909, "compression_ratio": 1.3877551020408163, "no_speech_prob": 6.438914169848431e-06}, {"id": 406, "seek": 278300, "start": 2795.0, "end": 2801.0, "text": " And then list that.", "tokens": [400, 550, 1329, 300, 13], "temperature": 0.0, "avg_logprob": -0.22068098317021909, "compression_ratio": 1.3877551020408163, "no_speech_prob": 6.438914169848431e-06}, {"id": 407, "seek": 278300, "start": 2801.0, "end": 2805.0, "text": " And then slice by how much.", "tokens": [400, 550, 13153, 538, 577, 709, 13], "temperature": 0.0, "avg_logprob": -0.22068098317021909, "compression_ratio": 1.3877551020408163, "no_speech_prob": 6.438914169848431e-06}, {"id": 408, "seek": 278300, "start": 2805.0, "end": 2809.0, "text": " There we go. Same thing.", "tokens": [821, 321, 352, 13, 10635, 551, 13], "temperature": 0.0, "avg_logprob": -0.22068098317021909, "compression_ratio": 1.3877551020408163, "no_speech_prob": 6.438914169848431e-06}, {"id": 409, "seek": 280900, "start": 2809.0, "end": 2813.0, "text": " All right. So questions. How do I handle multiple indices?", "tokens": [1057, 558, 13, 407, 1651, 13, 1012, 360, 286, 4813, 3866, 43840, 30], "temperature": 0.0, "avg_logprob": -0.09579157034556071, "compression_ratio": 1.5319148936170213, "no_speech_prob": 3.59114637831226e-05}, {"id": 410, "seek": 280900, "start": 2813.0, "end": 2822.0, "text": " So we handle multiple indices by defining get item.", "tokens": [407, 321, 4813, 3866, 43840, 538, 17827, 483, 3174, 13], "temperature": 0.0, "avg_logprob": -0.09579157034556071, "compression_ratio": 1.5319148936170213, "no_speech_prob": 3.59114637831226e-05}, {"id": 411, "seek": 280900, "start": 2822.0, "end": 2828.0, "text": " So get item is going to check whether the index that's passed in is an indexer or not.", "tokens": [407, 483, 3174, 307, 516, 281, 1520, 1968, 264, 8186, 300, 311, 4678, 294, 307, 364, 8186, 260, 420, 406, 13], "temperature": 0.0, "avg_logprob": -0.09579157034556071, "compression_ratio": 1.5319148936170213, "no_speech_prob": 3.59114637831226e-05}, {"id": 412, "seek": 280900, "start": 2828.0, "end": 2830.0, "text": " What's an indexer?", "tokens": [708, 311, 364, 8186, 260, 30], "temperature": 0.0, "avg_logprob": -0.09579157034556071, "compression_ratio": 1.5319148936170213, "no_speech_prob": 3.59114637831226e-05}, {"id": 413, "seek": 283000, "start": 2830.0, "end": 2842.0, "text": " An indexer is something that is either an int or is something that has an end in property, which is zero.", "tokens": [1107, 8186, 260, 307, 746, 300, 307, 2139, 364, 560, 420, 307, 746, 300, 575, 364, 917, 294, 4707, 11, 597, 307, 4018, 13], "temperature": 0.0, "avg_logprob": -0.13937632696969168, "compression_ratio": 1.5890410958904109, "no_speech_prob": 9.972679436032195e-06}, {"id": 414, "seek": 283000, "start": 2842.0, "end": 2848.0, "text": " Why is that? Because of this. T equals one, two, three.", "tokens": [1545, 307, 300, 30, 1436, 295, 341, 13, 314, 6915, 472, 11, 732, 11, 1045, 13], "temperature": 0.0, "avg_logprob": -0.13937632696969168, "compression_ratio": 1.5890410958904109, "no_speech_prob": 9.972679436032195e-06}, {"id": 415, "seek": 283000, "start": 2848.0, "end": 2852.0, "text": " T one. That's an indexer.", "tokens": [314, 472, 13, 663, 311, 364, 8186, 260, 13], "temperature": 0.0, "avg_logprob": -0.13937632696969168, "compression_ratio": 1.5890410958904109, "no_speech_prob": 9.972679436032195e-06}, {"id": 416, "seek": 283000, "start": 2852.0, "end": 2859.0, "text": " But here's something else that's an indexer.", "tokens": [583, 510, 311, 746, 1646, 300, 311, 364, 8186, 260, 13], "temperature": 0.0, "avg_logprob": -0.13937632696969168, "compression_ratio": 1.5890410958904109, "no_speech_prob": 9.972679436032195e-06}, {"id": 417, "seek": 285900, "start": 2859.0, "end": 2865.0, "text": " Import torch.", "tokens": [26391, 27822, 13], "temperature": 0.0, "avg_logprob": -0.328638540731894, "compression_ratio": 1.075268817204301, "no_speech_prob": 6.540120466524968e-06}, {"id": 418, "seek": 285900, "start": 2865.0, "end": 2867.0, "text": " That's an indexer, too.", "tokens": [663, 311, 364, 8186, 260, 11, 886, 13], "temperature": 0.0, "avg_logprob": -0.328638540731894, "compression_ratio": 1.075268817204301, "no_speech_prob": 6.540120466524968e-06}, {"id": 419, "seek": 285900, "start": 2867.0, "end": 2873.0, "text": " Okay. And that's because torch dot tensor.", "tokens": [1033, 13, 400, 300, 311, 570, 27822, 5893, 40863, 13], "temperature": 0.0, "avg_logprob": -0.328638540731894, "compression_ratio": 1.075268817204301, "no_speech_prob": 6.540120466524968e-06}, {"id": 420, "seek": 285900, "start": 2873.0, "end": 2882.0, "text": " Dot end in is zero.", "tokens": [38753, 917, 294, 307, 4018, 13], "temperature": 0.0, "avg_logprob": -0.328638540731894, "compression_ratio": 1.075268817204301, "no_speech_prob": 6.540120466524968e-06}, {"id": 421, "seek": 288200, "start": 2882.0, "end": 2889.0, "text": " But you can't do that.", "tokens": [583, 291, 393, 380, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.12079740422112602, "compression_ratio": 1.4285714285714286, "no_speech_prob": 2.026127503995667e-06}, {"id": 422, "seek": 288200, "start": 2889.0, "end": 2895.0, "text": " Okay. So that's what indexer is checking for.", "tokens": [1033, 13, 407, 300, 311, 437, 8186, 260, 307, 8568, 337, 13], "temperature": 0.0, "avg_logprob": -0.12079740422112602, "compression_ratio": 1.4285714285714286, "no_speech_prob": 2.026127503995667e-06}, {"id": 423, "seek": 288200, "start": 2895.0, "end": 2906.0, "text": " So if it's an indexer, then we call underscore get, which, as you can see, checks if it's an indexer.", "tokens": [407, 498, 309, 311, 364, 8186, 260, 11, 550, 321, 818, 37556, 483, 11, 597, 11, 382, 291, 393, 536, 11, 13834, 498, 309, 311, 364, 8186, 260, 13], "temperature": 0.0, "avg_logprob": -0.12079740422112602, "compression_ratio": 1.4285714285714286, "no_speech_prob": 2.026127503995667e-06}, {"id": 424, "seek": 290600, "start": 2906.0, "end": 2912.0, "text": " And if it is, it simply tries to find out whether self dot items has an ILOC.", "tokens": [400, 498, 309, 307, 11, 309, 2935, 9898, 281, 915, 484, 1968, 2698, 5893, 4754, 575, 364, 286, 20184, 34, 13], "temperature": 0.0, "avg_logprob": -0.08815182772549716, "compression_ratio": 1.7163461538461537, "no_speech_prob": 3.2377481602452463e-06}, {"id": 425, "seek": 290600, "start": 2912.0, "end": 2916.0, "text": " In this case, it doesn't. So it's just going to give us self dot items and I.", "tokens": [682, 341, 1389, 11, 309, 1177, 380, 13, 407, 309, 311, 445, 516, 281, 976, 505, 2698, 5893, 4754, 293, 286, 13], "temperature": 0.0, "avg_logprob": -0.08815182772549716, "compression_ratio": 1.7163461538461537, "no_speech_prob": 3.2377481602452463e-06}, {"id": 426, "seek": 290600, "start": 2916.0, "end": 2919.0, "text": " So it's just going to be self dot items I.", "tokens": [407, 309, 311, 445, 516, 281, 312, 2698, 5893, 4754, 286, 13], "temperature": 0.0, "avg_logprob": -0.08815182772549716, "compression_ratio": 1.7163461538461537, "no_speech_prob": 3.2377481602452463e-06}, {"id": 427, "seek": 290600, "start": 2919.0, "end": 2923.0, "text": " But your question is what happens if it's a list?", "tokens": [583, 428, 1168, 307, 437, 2314, 498, 309, 311, 257, 1329, 30], "temperature": 0.0, "avg_logprob": -0.08815182772549716, "compression_ratio": 1.7163461538461537, "no_speech_prob": 3.2377481602452463e-06}, {"id": 428, "seek": 290600, "start": 2923.0, "end": 2928.0, "text": " In that case, we're going to end up over here.", "tokens": [682, 300, 1389, 11, 321, 434, 516, 281, 917, 493, 670, 510, 13], "temperature": 0.0, "avg_logprob": -0.08815182772549716, "compression_ratio": 1.7163461538461537, "no_speech_prob": 3.2377481602452463e-06}, {"id": 429, "seek": 290600, "start": 2928.0, "end": 2934.0, "text": " So we're going to create a new L containing self dot get IDX,", "tokens": [407, 321, 434, 516, 281, 1884, 257, 777, 441, 19273, 2698, 5893, 483, 7348, 55, 11], "temperature": 0.0, "avg_logprob": -0.08815182772549716, "compression_ratio": 1.7163461538461537, "no_speech_prob": 3.2377481602452463e-06}, {"id": 430, "seek": 293400, "start": 2934.0, "end": 2937.0, "text": " which in this case, it's not an indexer.", "tokens": [597, 294, 341, 1389, 11, 309, 311, 406, 364, 8186, 260, 13], "temperature": 0.0, "avg_logprob": -0.141207279303135, "compression_ratio": 1.701834862385321, "no_speech_prob": 4.860397893935442e-06}, {"id": 431, "seek": 293400, "start": 2937.0, "end": 2939.0, "text": " So we're going to convert a mask to indexes.", "tokens": [407, 321, 434, 516, 281, 7620, 257, 6094, 281, 8186, 279, 13], "temperature": 0.0, "avg_logprob": -0.141207279303135, "compression_ratio": 1.701834862385321, "no_speech_prob": 4.860397893935442e-06}, {"id": 432, "seek": 293400, "start": 2939.0, "end": 2942.0, "text": " So if it's Boolean, it'll convert into indexes.", "tokens": [407, 498, 309, 311, 23351, 28499, 11, 309, 603, 7620, 666, 8186, 279, 13], "temperature": 0.0, "avg_logprob": -0.141207279303135, "compression_ratio": 1.701834862385321, "no_speech_prob": 4.860397893935442e-06}, {"id": 433, "seek": 293400, "start": 2942.0, "end": 2948.0, "text": " And then it'll check, does it have ILOC? Which ours doesn't? Does it have DUNDA array? Which ours doesn't?", "tokens": [400, 550, 309, 603, 1520, 11, 775, 309, 362, 286, 20184, 34, 30, 3013, 11896, 1177, 380, 30, 4402, 309, 362, 413, 3979, 7509, 10225, 30, 3013, 11896, 1177, 380, 30], "temperature": 0.0, "avg_logprob": -0.141207279303135, "compression_ratio": 1.701834862385321, "no_speech_prob": 4.860397893935442e-06}, {"id": 434, "seek": 293400, "start": 2948.0, "end": 2951.0, "text": " So then it's going to return a list comprehension.", "tokens": [407, 550, 309, 311, 516, 281, 2736, 257, 1329, 44991, 13], "temperature": 0.0, "avg_logprob": -0.141207279303135, "compression_ratio": 1.701834862385321, "no_speech_prob": 4.860397893935442e-06}, {"id": 435, "seek": 293400, "start": 2951.0, "end": 2958.0, "text": " And so that's how come that works.", "tokens": [400, 370, 300, 311, 577, 808, 300, 1985, 13], "temperature": 0.0, "avg_logprob": -0.141207279303135, "compression_ratio": 1.701834862385321, "no_speech_prob": 4.860397893935442e-06}, {"id": 436, "seek": 293400, "start": 2958.0, "end": 2962.0, "text": " Okay. Yeah. So how does none plus done work?", "tokens": [1033, 13, 865, 13, 407, 577, 775, 6022, 1804, 1096, 589, 30], "temperature": 0.0, "avg_logprob": -0.141207279303135, "compression_ratio": 1.701834862385321, "no_speech_prob": 4.860397893935442e-06}, {"id": 437, "seek": 296200, "start": 2962.0, "end": 2966.0, "text": " As I mentioned, it's in DUNDA add.", "tokens": [1018, 286, 2835, 11, 309, 311, 294, 413, 3979, 7509, 909, 13], "temperature": 0.0, "avg_logprob": -0.16824491674249822, "compression_ratio": 1.291044776119403, "no_speech_prob": 3.3931205507542472e-06}, {"id": 438, "seek": 296200, "start": 2966.0, "end": 2971.0, "text": " And specifically here, you can see we create a new L", "tokens": [400, 4682, 510, 11, 291, 393, 536, 321, 1884, 257, 777, 441], "temperature": 0.0, "avg_logprob": -0.16824491674249822, "compression_ratio": 1.291044776119403, "no_speech_prob": 3.3931205507542472e-06}, {"id": 439, "seek": 296200, "start": 2971.0, "end": 2980.0, "text": " containing all of the items in A plus B listified.", "tokens": [19273, 439, 295, 264, 4754, 294, 316, 1804, 363, 1329, 2587, 13], "temperature": 0.0, "avg_logprob": -0.16824491674249822, "compression_ratio": 1.291044776119403, "no_speech_prob": 3.3931205507542472e-06}, {"id": 440, "seek": 296200, "start": 2980.0, "end": 2986.0, "text": " And listify none is an empty list.", "tokens": [400, 1329, 2505, 6022, 307, 364, 6707, 1329, 13], "temperature": 0.0, "avg_logprob": -0.16824491674249822, "compression_ratio": 1.291044776119403, "no_speech_prob": 3.3931205507542472e-06}, {"id": 441, "seek": 298600, "start": 2986.0, "end": 2992.0, "text": " So that's why that works.", "tokens": [407, 300, 311, 983, 300, 1985, 13], "temperature": 0.0, "avg_logprob": -0.08838381305817634, "compression_ratio": 1.4097222222222223, "no_speech_prob": 8.939573490351904e-06}, {"id": 442, "seek": 298600, "start": 2992.0, "end": 3000.0, "text": " Okay. So here you can see we've got an infinite number of ones.", "tokens": [1033, 13, 407, 510, 291, 393, 536, 321, 600, 658, 364, 13785, 1230, 295, 2306, 13], "temperature": 0.0, "avg_logprob": -0.08838381305817634, "compression_ratio": 1.4097222222222223, "no_speech_prob": 8.939573490351904e-06}, {"id": 443, "seek": 298600, "start": 3000.0, "end": 3007.0, "text": " And if we zip that with T, where T is L range four,", "tokens": [400, 498, 321, 20730, 300, 365, 314, 11, 689, 314, 307, 441, 3613, 1451, 11], "temperature": 0.0, "avg_logprob": -0.08838381305817634, "compression_ratio": 1.4097222222222223, "no_speech_prob": 8.939573490351904e-06}, {"id": 444, "seek": 298600, "start": 3007.0, "end": 3012.0, "text": " that should be the same as zipping range four with four ones.", "tokens": [300, 820, 312, 264, 912, 382, 710, 6297, 3613, 1451, 365, 1451, 2306, 13], "temperature": 0.0, "avg_logprob": -0.08838381305817634, "compression_ratio": 1.4097222222222223, "no_speech_prob": 8.939573490351904e-06}, {"id": 445, "seek": 301200, "start": 3012.0, "end": 3019.0, "text": " So that works there. L.range is almost the same as normal range,", "tokens": [407, 300, 1985, 456, 13, 441, 13, 14521, 307, 1920, 264, 912, 382, 2710, 3613, 11], "temperature": 0.0, "avg_logprob": -0.14136650602696305, "compression_ratio": 1.3767123287671232, "no_speech_prob": 3.2377361094404478e-06}, {"id": 446, "seek": 301200, "start": 3019.0, "end": 3025.0, "text": " except it returns an L.", "tokens": [3993, 309, 11247, 364, 441, 13], "temperature": 0.0, "avg_logprob": -0.14136650602696305, "compression_ratio": 1.3767123287671232, "no_speech_prob": 3.2377361094404478e-06}, {"id": 447, "seek": 301200, "start": 3025.0, "end": 3029.0, "text": " Shuffled does what it sounds like.", "tokens": [1160, 33974, 775, 437, 309, 3263, 411, 13], "temperature": 0.0, "avg_logprob": -0.14136650602696305, "compression_ratio": 1.3767123287671232, "no_speech_prob": 3.2377361094404478e-06}, {"id": 448, "seek": 302900, "start": 3029.0, "end": 3043.0, "text": " And we actually have a test shuffled now, I think, so we can do that instead.", "tokens": [400, 321, 767, 362, 257, 1500, 402, 33974, 586, 11, 286, 519, 11, 370, 321, 393, 360, 300, 2602, 13], "temperature": 0.0, "avg_logprob": -0.10926999151706696, "compression_ratio": 1.120879120879121, "no_speech_prob": 1.112529935198836e-05}, {"id": 449, "seek": 302900, "start": 3043.0, "end": 3048.0, "text": " Looks like a bit easier.", "tokens": [10027, 411, 257, 857, 3571, 13], "temperature": 0.0, "avg_logprob": -0.10926999151706696, "compression_ratio": 1.120879120879121, "no_speech_prob": 1.112529935198836e-05}, {"id": 450, "seek": 304800, "start": 3048.0, "end": 3059.0, "text": " So mapped is basically the same as calling map underscore f comma t.", "tokens": [407, 33318, 307, 1936, 264, 912, 382, 5141, 4471, 37556, 283, 22117, 256, 13], "temperature": 0.0, "avg_logprob": -0.16476763211763823, "compression_ratio": 1.2586206896551724, "no_speech_prob": 1.248254534402804e-06}, {"id": 451, "seek": 304800, "start": 3059.0, "end": 3061.0, "text": " Except that there's a few differences.", "tokens": [16192, 300, 456, 311, 257, 1326, 7300, 13], "temperature": 0.0, "avg_logprob": -0.16476763211763823, "compression_ratio": 1.2586206896551724, "no_speech_prob": 1.248254534402804e-06}, {"id": 452, "seek": 304800, "start": 3061.0, "end": 3066.0, "text": " One is that that returns a map object,", "tokens": [1485, 307, 300, 300, 11247, 257, 4471, 2657, 11], "temperature": 0.0, "avg_logprob": -0.16476763211763823, "compression_ratio": 1.2586206896551724, "no_speech_prob": 1.248254534402804e-06}, {"id": 453, "seek": 306600, "start": 3066.0, "end": 3087.0, "text": " whereas our mapped actually does the mapping. So t.mapped, as you can see.", "tokens": [9735, 527, 33318, 767, 775, 264, 18350, 13, 407, 256, 13, 1696, 3320, 11, 382, 291, 393, 536, 13], "temperature": 0.0, "avg_logprob": -0.17374577729598337, "compression_ratio": 1.0277777777777777, "no_speech_prob": 4.784988050232641e-06}, {"id": 454, "seek": 308700, "start": 3087.0, "end": 3098.0, "text": " And you can pass in arguments, as you can see.", "tokens": [400, 291, 393, 1320, 294, 12869, 11, 382, 291, 393, 536, 13], "temperature": 0.0, "avg_logprob": -0.09096279740333557, "compression_ratio": 1.3421052631578947, "no_speech_prob": 4.425453425938031e-06}, {"id": 455, "seek": 308700, "start": 3098.0, "end": 3102.0, "text": " Or keyword arguments.", "tokens": [1610, 20428, 12869, 13], "temperature": 0.0, "avg_logprob": -0.09096279740333557, "compression_ratio": 1.3421052631578947, "no_speech_prob": 4.425453425938031e-06}, {"id": 456, "seek": 308700, "start": 3102.0, "end": 3109.0, "text": " So we use that quite a lot.", "tokens": [407, 321, 764, 300, 1596, 257, 688, 13], "temperature": 0.0, "avg_logprob": -0.09096279740333557, "compression_ratio": 1.3421052631578947, "no_speech_prob": 4.425453425938031e-06}, {"id": 457, "seek": 308700, "start": 3109.0, "end": 3113.0, "text": " Okay. So in terms of things you can construct an L with,", "tokens": [1033, 13, 407, 294, 2115, 295, 721, 291, 393, 7690, 364, 441, 365, 11], "temperature": 0.0, "avg_logprob": -0.09096279740333557, "compression_ratio": 1.3421052631578947, "no_speech_prob": 4.425453425938031e-06}, {"id": 458, "seek": 311300, "start": 3113.0, "end": 3122.0, "text": " you can construct it with a list, you can construct it with another L.", "tokens": [291, 393, 7690, 309, 365, 257, 1329, 11, 291, 393, 7690, 309, 365, 1071, 441, 13], "temperature": 0.0, "avg_logprob": -0.11264516368056789, "compression_ratio": 1.8702290076335877, "no_speech_prob": 5.093679646961391e-06}, {"id": 459, "seek": 311300, "start": 3122.0, "end": 3128.0, "text": " You can construct it with a string, in which case it'll stay as a string,", "tokens": [509, 393, 7690, 309, 365, 257, 6798, 11, 294, 597, 1389, 309, 603, 1754, 382, 257, 6798, 11], "temperature": 0.0, "avg_logprob": -0.11264516368056789, "compression_ratio": 1.8702290076335877, "no_speech_prob": 5.093679646961391e-06}, {"id": 460, "seek": 311300, "start": 3128.0, "end": 3134.0, "text": " with a range. You can construct it with a generator.", "tokens": [365, 257, 3613, 13, 509, 393, 7690, 309, 365, 257, 19265, 13], "temperature": 0.0, "avg_logprob": -0.11264516368056789, "compression_ratio": 1.8702290076335877, "no_speech_prob": 5.093679646961391e-06}, {"id": 461, "seek": 311300, "start": 3134.0, "end": 3138.0, "text": " Now this is different to how Python lists work.", "tokens": [823, 341, 307, 819, 281, 577, 15329, 14511, 589, 13], "temperature": 0.0, "avg_logprob": -0.11264516368056789, "compression_ratio": 1.8702290076335877, "no_speech_prob": 5.093679646961391e-06}, {"id": 462, "seek": 313800, "start": 3138.0, "end": 3147.0, "text": " If I go list array 0, like this.", "tokens": [759, 286, 352, 1329, 10225, 1958, 11, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.16160634668861948, "compression_ratio": 1.4789473684210526, "no_speech_prob": 2.9023019578744425e-06}, {"id": 463, "seek": 313800, "start": 3147.0, "end": 3156.0, "text": " Then as you can see, that gets converted into a list containing 0 or 0 comma 1,", "tokens": [1396, 382, 291, 393, 536, 11, 300, 2170, 16424, 666, 257, 1329, 19273, 1958, 420, 1958, 22117, 502, 11], "temperature": 0.0, "avg_logprob": -0.16160634668861948, "compression_ratio": 1.4789473684210526, "no_speech_prob": 2.9023019578744425e-06}, {"id": 464, "seek": 313800, "start": 3156.0, "end": 3158.0, "text": " would be a list 0 or 1.", "tokens": [576, 312, 257, 1329, 1958, 420, 502, 13], "temperature": 0.0, "avg_logprob": -0.16160634668861948, "compression_ratio": 1.4789473684210526, "no_speech_prob": 2.9023019578744425e-06}, {"id": 465, "seek": 313800, "start": 3158.0, "end": 3161.0, "text": " Whereas L doesn't do that by default.", "tokens": [13813, 441, 1177, 380, 360, 300, 538, 7576, 13], "temperature": 0.0, "avg_logprob": -0.16160634668861948, "compression_ratio": 1.4789473684210526, "no_speech_prob": 2.9023019578744425e-06}, {"id": 466, "seek": 313800, "start": 3161.0, "end": 3165.0, "text": " L will create a single item containing the array.", "tokens": [441, 486, 1884, 257, 2167, 3174, 19273, 264, 10225, 13], "temperature": 0.0, "avg_logprob": -0.16160634668861948, "compression_ratio": 1.4789473684210526, "no_speech_prob": 2.9023019578744425e-06}, {"id": 467, "seek": 313800, "start": 3165.0, "end": 3167.0, "text": " Because like most of the time, particularly with tenses,", "tokens": [1436, 411, 881, 295, 264, 565, 11, 4098, 365, 256, 9085, 11], "temperature": 0.0, "avg_logprob": -0.16160634668861948, "compression_ratio": 1.4789473684210526, "no_speech_prob": 2.9023019578744425e-06}, {"id": 468, "seek": 316700, "start": 3167.0, "end": 3169.0, "text": " you don't want to unwrap them into a list.", "tokens": [291, 500, 380, 528, 281, 14853, 4007, 552, 666, 257, 1329, 13], "temperature": 0.0, "avg_logprob": -0.05258730229209451, "compression_ratio": 1.5066666666666666, "no_speech_prob": 1.1842810636153445e-05}, {"id": 469, "seek": 316700, "start": 3169.0, "end": 3176.0, "text": " You want to actually put the tensor or the array into the list.", "tokens": [509, 528, 281, 767, 829, 264, 40863, 420, 264, 10225, 666, 264, 1329, 13], "temperature": 0.0, "avg_logprob": -0.05258730229209451, "compression_ratio": 1.5066666666666666, "no_speech_prob": 1.1842810636153445e-05}, {"id": 470, "seek": 316700, "start": 3176.0, "end": 3180.0, "text": " Is there any way to know how L is shuffled?", "tokens": [1119, 456, 604, 636, 281, 458, 577, 441, 307, 402, 33974, 30], "temperature": 0.0, "avg_logprob": -0.05258730229209451, "compression_ratio": 1.5066666666666666, "no_speech_prob": 1.1842810636153445e-05}, {"id": 471, "seek": 316700, "start": 3180.0, "end": 3181.0, "text": " Not with the shuffled.", "tokens": [1726, 365, 264, 402, 33974, 13], "temperature": 0.0, "avg_logprob": -0.05258730229209451, "compression_ratio": 1.5066666666666666, "no_speech_prob": 1.1842810636153445e-05}, {"id": 472, "seek": 316700, "start": 3181.0, "end": 3190.0, "text": " You would have to use indexes or something for that.", "tokens": [509, 576, 362, 281, 764, 8186, 279, 420, 746, 337, 300, 13], "temperature": 0.0, "avg_logprob": -0.05258730229209451, "compression_ratio": 1.5066666666666666, "no_speech_prob": 1.1842810636153445e-05}, {"id": 473, "seek": 319000, "start": 3190.0, "end": 3201.0, "text": " Okay. So that's important difference.", "tokens": [1033, 13, 407, 300, 311, 1021, 2649, 13], "temperature": 0.0, "avg_logprob": -0.1281885598835192, "compression_ratio": 1.4539007092198581, "no_speech_prob": 2.947978373413207e-06}, {"id": 474, "seek": 319000, "start": 3201.0, "end": 3207.0, "text": " If you want the same behavior that list does,", "tokens": [759, 291, 528, 264, 912, 5223, 300, 1329, 775, 11], "temperature": 0.0, "avg_logprob": -0.1281885598835192, "compression_ratio": 1.4539007092198581, "no_speech_prob": 2.947978373413207e-06}, {"id": 475, "seek": 319000, "start": 3207.0, "end": 3213.0, "text": " then you can pass use list equals true to give you the same behavior as list.", "tokens": [550, 291, 393, 1320, 764, 1329, 6915, 2074, 281, 976, 291, 264, 912, 5223, 382, 1329, 13], "temperature": 0.0, "avg_logprob": -0.1281885598835192, "compression_ratio": 1.4539007092198581, "no_speech_prob": 2.947978373413207e-06}, {"id": 476, "seek": 319000, "start": 3213.0, "end": 3217.0, "text": " So instead of having an array with 0, 1 in,", "tokens": [407, 2602, 295, 1419, 364, 10225, 365, 1958, 11, 502, 294, 11], "temperature": 0.0, "avg_logprob": -0.1281885598835192, "compression_ratio": 1.4539007092198581, "no_speech_prob": 2.947978373413207e-06}, {"id": 477, "seek": 321700, "start": 3217.0, "end": 3220.0, "text": " that will actually create two items now, 0 and 1.", "tokens": [300, 486, 767, 1884, 732, 4754, 586, 11, 1958, 293, 502, 13], "temperature": 0.0, "avg_logprob": -0.09175206339636514, "compression_ratio": 1.5628140703517588, "no_speech_prob": 1.0783172911033034e-05}, {"id": 478, "seek": 321700, "start": 3220.0, "end": 3222.0, "text": " So that does exactly the same thing as list would do.", "tokens": [407, 300, 775, 2293, 264, 912, 551, 382, 1329, 576, 360, 13], "temperature": 0.0, "avg_logprob": -0.09175206339636514, "compression_ratio": 1.5628140703517588, "no_speech_prob": 1.0783172911033034e-05}, {"id": 479, "seek": 321700, "start": 3222.0, "end": 3228.0, "text": " If you say use list equals true.", "tokens": [759, 291, 584, 764, 1329, 6915, 2074, 13], "temperature": 0.0, "avg_logprob": -0.09175206339636514, "compression_ratio": 1.5628140703517588, "no_speech_prob": 1.0783172911033034e-05}, {"id": 480, "seek": 321700, "start": 3228.0, "end": 3231.0, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.09175206339636514, "compression_ratio": 1.5628140703517588, "no_speech_prob": 1.0783172911033034e-05}, {"id": 481, "seek": 321700, "start": 3231.0, "end": 3236.0, "text": " You can pass the match parameter to the constructor to get the same behavior", "tokens": [509, 393, 1320, 264, 2995, 13075, 281, 264, 47479, 281, 483, 264, 912, 5223], "temperature": 0.0, "avg_logprob": -0.09175206339636514, "compression_ratio": 1.5628140703517588, "no_speech_prob": 1.0783172911033034e-05}, {"id": 482, "seek": 321700, "start": 3236.0, "end": 3239.0, "text": " as listify had in version 1,", "tokens": [382, 1329, 2505, 632, 294, 3037, 502, 11], "temperature": 0.0, "avg_logprob": -0.09175206339636514, "compression_ratio": 1.5628140703517588, "no_speech_prob": 1.0783172911033034e-05}, {"id": 483, "seek": 321700, "start": 3239.0, "end": 3244.0, "text": " which is basically to say make this list as long as this list.", "tokens": [597, 307, 1936, 281, 584, 652, 341, 1329, 382, 938, 382, 341, 1329, 13], "temperature": 0.0, "avg_logprob": -0.09175206339636514, "compression_ratio": 1.5628140703517588, "no_speech_prob": 1.0783172911033034e-05}, {"id": 484, "seek": 324400, "start": 3244.0, "end": 3251.0, "text": " That's why that will create 1, 1, 1.", "tokens": [663, 311, 983, 300, 486, 1884, 502, 11, 502, 11, 502, 13], "temperature": 0.0, "avg_logprob": -0.10650357684573612, "compression_ratio": 1.4363636363636363, "no_speech_prob": 6.962203315197257e-06}, {"id": 485, "seek": 324400, "start": 3251.0, "end": 3257.0, "text": " Here's the test that confirms that L of t is t.", "tokens": [1692, 311, 264, 1500, 300, 39982, 300, 441, 295, 256, 307, 256, 13], "temperature": 0.0, "avg_logprob": -0.10650357684573612, "compression_ratio": 1.4363636363636363, "no_speech_prob": 6.962203315197257e-06}, {"id": 486, "seek": 324400, "start": 3257.0, "end": 3259.0, "text": " Not that is means they're identical objects.", "tokens": [1726, 300, 307, 1355, 436, 434, 14800, 6565, 13], "temperature": 0.0, "avg_logprob": -0.10650357684573612, "compression_ratio": 1.4363636363636363, "no_speech_prob": 6.962203315197257e-06}, {"id": 487, "seek": 324400, "start": 3259.0, "end": 3263.0, "text": " They're the same reference.", "tokens": [814, 434, 264, 912, 6408, 13], "temperature": 0.0, "avg_logprob": -0.10650357684573612, "compression_ratio": 1.4363636363636363, "no_speech_prob": 6.962203315197257e-06}, {"id": 488, "seek": 324400, "start": 3263.0, "end": 3270.0, "text": " Okay. And so then you can see some of the methods.", "tokens": [1033, 13, 400, 370, 550, 291, 393, 536, 512, 295, 264, 7150, 13], "temperature": 0.0, "avg_logprob": -0.10650357684573612, "compression_ratio": 1.4363636363636363, "no_speech_prob": 6.962203315197257e-06}, {"id": 489, "seek": 324400, "start": 3270.0, "end": 3273.0, "text": " So here's checking get item.", "tokens": [407, 510, 311, 8568, 483, 3174, 13], "temperature": 0.0, "avg_logprob": -0.10650357684573612, "compression_ratio": 1.4363636363636363, "no_speech_prob": 6.962203315197257e-06}, {"id": 490, "seek": 327300, "start": 3273.0, "end": 3280.0, "text": " As you can see here, we've got using an array of masks instead.", "tokens": [1018, 291, 393, 536, 510, 11, 321, 600, 658, 1228, 364, 10225, 295, 11830, 2602, 13], "temperature": 0.0, "avg_logprob": -0.12008770429171049, "compression_ratio": 1.4081632653061225, "no_speech_prob": 1.1478485248517245e-05}, {"id": 491, "seek": 327300, "start": 3280.0, "end": 3281.0, "text": " So that's just like NumPy.", "tokens": [407, 300, 311, 445, 411, 22592, 47, 88, 13], "temperature": 0.0, "avg_logprob": -0.12008770429171049, "compression_ratio": 1.4081632653061225, "no_speech_prob": 1.1478485248517245e-05}, {"id": 492, "seek": 327300, "start": 3281.0, "end": 3290.0, "text": " The mask array has to be the same number of Booleans as the length of the list.", "tokens": [440, 6094, 10225, 575, 281, 312, 264, 912, 1230, 295, 23351, 24008, 382, 264, 4641, 295, 264, 1329, 13], "temperature": 0.0, "avg_logprob": -0.12008770429171049, "compression_ratio": 1.4081632653061225, "no_speech_prob": 1.1478485248517245e-05}, {"id": 493, "seek": 327300, "start": 3290.0, "end": 3299.0, "text": " It has a dot unique, as you can see.", "tokens": [467, 575, 257, 5893, 3845, 11, 382, 291, 393, 536, 13], "temperature": 0.0, "avg_logprob": -0.12008770429171049, "compression_ratio": 1.4081632653061225, "no_speech_prob": 1.1478485248517245e-05}, {"id": 494, "seek": 329900, "start": 3299.0, "end": 3303.0, "text": " This is basically telling you the reverse mapping.", "tokens": [639, 307, 1936, 3585, 291, 264, 9943, 18350, 13], "temperature": 0.0, "avg_logprob": -0.14990917841593424, "compression_ratio": 1.6492890995260663, "no_speech_prob": 6.643340839218581e-06}, {"id": 495, "seek": 329900, "start": 3303.0, "end": 3311.0, "text": " So it's a mapping from where is the 3, for example, and it's in location 0, 1, 2.", "tokens": [407, 309, 311, 257, 18350, 490, 689, 307, 264, 805, 11, 337, 1365, 11, 293, 309, 311, 294, 4914, 1958, 11, 502, 11, 568, 13], "temperature": 0.0, "avg_logprob": -0.14990917841593424, "compression_ratio": 1.6492890995260663, "no_speech_prob": 6.643340839218581e-06}, {"id": 496, "seek": 329900, "start": 3311.0, "end": 3313.0, "text": " Where is the 1?", "tokens": [2305, 307, 264, 502, 30], "temperature": 0.0, "avg_logprob": -0.14990917841593424, "compression_ratio": 1.6492890995260663, "no_speech_prob": 6.643340839218581e-06}, {"id": 497, "seek": 329900, "start": 3313.0, "end": 3314.0, "text": " It's in location 0.", "tokens": [467, 311, 294, 4914, 1958, 13], "temperature": 0.0, "avg_logprob": -0.14990917841593424, "compression_ratio": 1.6492890995260663, "no_speech_prob": 6.643340839218581e-06}, {"id": 498, "seek": 329900, "start": 3314.0, "end": 3316.0, "text": " So it's a dictionary.", "tokens": [407, 309, 311, 257, 25890, 13], "temperature": 0.0, "avg_logprob": -0.14990917841593424, "compression_ratio": 1.6492890995260663, "no_speech_prob": 6.643340839218581e-06}, {"id": 499, "seek": 329900, "start": 3316.0, "end": 3322.0, "text": " So that val2ydx and unique are the kind of two things you need to create a vocab.", "tokens": [407, 300, 1323, 17, 88, 67, 87, 293, 3845, 366, 264, 733, 295, 732, 721, 291, 643, 281, 1884, 257, 2329, 455, 13], "temperature": 0.0, "avg_logprob": -0.14990917841593424, "compression_ratio": 1.6492890995260663, "no_speech_prob": 6.643340839218581e-06}, {"id": 500, "seek": 329900, "start": 3322.0, "end": 3324.0, "text": " We can filter.", "tokens": [492, 393, 6608, 13], "temperature": 0.0, "avg_logprob": -0.14990917841593424, "compression_ratio": 1.6492890995260663, "no_speech_prob": 6.643340839218581e-06}, {"id": 501, "seek": 329900, "start": 3324.0, "end": 3327.0, "text": " This is basically the same as the filter function in Python.", "tokens": [639, 307, 1936, 264, 912, 382, 264, 6608, 2445, 294, 15329, 13], "temperature": 0.0, "avg_logprob": -0.14990917841593424, "compression_ratio": 1.6492890995260663, "no_speech_prob": 6.643340839218581e-06}, {"id": 502, "seek": 332700, "start": 3327.0, "end": 3330.0, "text": " But it's going to return an L.", "tokens": [583, 309, 311, 516, 281, 2736, 364, 441, 13], "temperature": 0.0, "avg_logprob": -0.11185652345091432, "compression_ratio": 1.634020618556701, "no_speech_prob": 1.3419889910437632e-05}, {"id": 503, "seek": 332700, "start": 3330.0, "end": 3334.0, "text": " It's mapped.", "tokens": [467, 311, 33318, 13], "temperature": 0.0, "avg_logprob": -0.11185652345091432, "compression_ratio": 1.634020618556701, "no_speech_prob": 1.3419889910437632e-05}, {"id": 504, "seek": 332700, "start": 3334.0, "end": 3336.0, "text": " Mapped dict is kind of handy.", "tokens": [376, 20780, 12569, 307, 733, 295, 13239, 13], "temperature": 0.0, "avg_logprob": -0.11185652345091432, "compression_ratio": 1.634020618556701, "no_speech_prob": 1.3419889910437632e-05}, {"id": 505, "seek": 332700, "start": 3336.0, "end": 3338.0, "text": " It does exactly the same as mapped.", "tokens": [467, 775, 2293, 264, 912, 382, 33318, 13], "temperature": 0.0, "avg_logprob": -0.11185652345091432, "compression_ratio": 1.634020618556701, "no_speech_prob": 1.3419889910437632e-05}, {"id": 506, "seek": 332700, "start": 3338.0, "end": 3347.0, "text": " But rather than returning a list, it returns a dictionary from the original value of the list to the value of the function.", "tokens": [583, 2831, 813, 12678, 257, 1329, 11, 309, 11247, 257, 25890, 490, 264, 3380, 2158, 295, 264, 1329, 281, 264, 2158, 295, 264, 2445, 13], "temperature": 0.0, "avg_logprob": -0.11185652345091432, "compression_ratio": 1.634020618556701, "no_speech_prob": 1.3419889910437632e-05}, {"id": 507, "seek": 332700, "start": 3347.0, "end": 3350.0, "text": " That's pretty handy.", "tokens": [663, 311, 1238, 13239, 13], "temperature": 0.0, "avg_logprob": -0.11185652345091432, "compression_ratio": 1.634020618556701, "no_speech_prob": 1.3419889910437632e-05}, {"id": 508, "seek": 332700, "start": 3350.0, "end": 3354.0, "text": " Zipped is basically the same as zipping lists, as you can see.", "tokens": [1176, 5529, 307, 1936, 264, 912, 382, 710, 6297, 14511, 11, 382, 291, 393, 536, 13], "temperature": 0.0, "avg_logprob": -0.11185652345091432, "compression_ratio": 1.634020618556701, "no_speech_prob": 1.3419889910437632e-05}, {"id": 509, "seek": 335400, "start": 3354.0, "end": 3357.0, "text": " It returns an L.", "tokens": [467, 11247, 364, 441, 13], "temperature": 0.0, "avg_logprob": -0.08871586426444676, "compression_ratio": 1.6666666666666667, "no_speech_prob": 5.771868927695323e-06}, {"id": 510, "seek": 335400, "start": 3357.0, "end": 3364.0, "text": " One nice thing you can add to zipped, though, is if the lists are different lengths, then you can say cycled equals true.", "tokens": [1485, 1481, 551, 291, 393, 909, 281, 710, 5529, 11, 1673, 11, 307, 498, 264, 14511, 366, 819, 26329, 11, 550, 291, 393, 584, 3185, 24804, 6915, 2074, 13], "temperature": 0.0, "avg_logprob": -0.08871586426444676, "compression_ratio": 1.6666666666666667, "no_speech_prob": 5.771868927695323e-06}, {"id": 511, "seek": 335400, "start": 3364.0, "end": 3369.0, "text": " And it will replicate the shorter one, as you can see.", "tokens": [400, 309, 486, 25356, 264, 11639, 472, 11, 382, 291, 393, 536, 13], "temperature": 0.0, "avg_logprob": -0.08871586426444676, "compression_ratio": 1.6666666666666667, "no_speech_prob": 5.771868927695323e-06}, {"id": 512, "seek": 335400, "start": 3369.0, "end": 3374.0, "text": " And it'll cycle through it again to make it the same length as the longer one.", "tokens": [400, 309, 603, 6586, 807, 309, 797, 281, 652, 309, 264, 912, 4641, 382, 264, 2854, 472, 13], "temperature": 0.0, "avg_logprob": -0.08871586426444676, "compression_ratio": 1.6666666666666667, "no_speech_prob": 5.771868927695323e-06}, {"id": 513, "seek": 335400, "start": 3374.0, "end": 3381.0, "text": " Or else cycled equals false behaves the same way as the normal zip.", "tokens": [1610, 1646, 3185, 24804, 6915, 7908, 36896, 264, 912, 636, 382, 264, 2710, 20730, 13], "temperature": 0.0, "avg_logprob": -0.08871586426444676, "compression_ratio": 1.6666666666666667, "no_speech_prob": 5.771868927695323e-06}, {"id": 514, "seek": 338100, "start": 3381.0, "end": 3387.0, "text": " And then mapped zip basically takes the result of that zipped and puts it into a map.", "tokens": [400, 550, 33318, 20730, 1936, 2516, 264, 1874, 295, 300, 710, 5529, 293, 8137, 309, 666, 257, 4471, 13], "temperature": 0.0, "avg_logprob": -0.09896181891946232, "compression_ratio": 1.5578947368421052, "no_speech_prob": 1.5206262105493806e-05}, {"id": 515, "seek": 338100, "start": 3387.0, "end": 3396.0, "text": " So, for example, if we do mapped zip multiplication, then it's going to zip 1, 2, 3 with 2, 3, 4,", "tokens": [407, 11, 337, 1365, 11, 498, 321, 360, 33318, 20730, 27290, 11, 550, 309, 311, 516, 281, 20730, 502, 11, 568, 11, 805, 365, 568, 11, 805, 11, 1017, 11], "temperature": 0.0, "avg_logprob": -0.09896181891946232, "compression_ratio": 1.5578947368421052, "no_speech_prob": 1.5206262105493806e-05}, {"id": 516, "seek": 338100, "start": 3396.0, "end": 3402.0, "text": " and then apply a multiplication to each one to give us element-wise multiplication.", "tokens": [293, 550, 3079, 257, 27290, 281, 1184, 472, 281, 976, 505, 4478, 12, 3711, 27290, 13], "temperature": 0.0, "avg_logprob": -0.09896181891946232, "compression_ratio": 1.5578947368421052, "no_speech_prob": 1.5206262105493806e-05}, {"id": 517, "seek": 338100, "start": 3402.0, "end": 3404.0, "text": " It won't be fast like NumPy.", "tokens": [467, 1582, 380, 312, 2370, 411, 22592, 47, 88, 13], "temperature": 0.0, "avg_logprob": -0.09896181891946232, "compression_ratio": 1.5578947368421052, "no_speech_prob": 1.5206262105493806e-05}, {"id": 518, "seek": 340400, "start": 3404.0, "end": 3412.0, "text": " So don't use this instead of NumPy, but it's quite handy sometimes.", "tokens": [407, 500, 380, 764, 341, 2602, 295, 22592, 47, 88, 11, 457, 309, 311, 1596, 13239, 2171, 13], "temperature": 0.0, "avg_logprob": -0.0732053642842307, "compression_ratio": 1.4466666666666668, "no_speech_prob": 3.7852548757655313e-06}, {"id": 519, "seek": 340400, "start": 3412.0, "end": 3422.0, "text": " Zip with will take this L and zip it with this list, as you can see.", "tokens": [1176, 647, 365, 486, 747, 341, 441, 293, 20730, 309, 365, 341, 1329, 11, 382, 291, 393, 536, 13], "temperature": 0.0, "avg_logprob": -0.0732053642842307, "compression_ratio": 1.4466666666666668, "no_speech_prob": 3.7852548757655313e-06}, {"id": 520, "seek": 340400, "start": 3422.0, "end": 3426.0, "text": " And here's the same thing with the map as well.", "tokens": [400, 510, 311, 264, 912, 551, 365, 264, 4471, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.0732053642842307, "compression_ratio": 1.4466666666666668, "no_speech_prob": 3.7852548757655313e-06}, {"id": 521, "seek": 340400, "start": 3426.0, "end": 3431.0, "text": " That's the same thing as before.", "tokens": [663, 311, 264, 912, 551, 382, 949, 13], "temperature": 0.0, "avg_logprob": -0.0732053642842307, "compression_ratio": 1.4466666666666668, "no_speech_prob": 3.7852548757655313e-06}, {"id": 522, "seek": 343100, "start": 3431.0, "end": 3443.0, "text": " Item got is just going to apply...", "tokens": [31066, 658, 307, 445, 516, 281, 3079, 485], "temperature": 0.0, "avg_logprob": -0.17327663226005358, "compression_ratio": 1.1195652173913044, "no_speech_prob": 2.5070585252251476e-05}, {"id": 523, "seek": 343100, "start": 3443.0, "end": 3446.0, "text": " Which one is it?", "tokens": [3013, 472, 307, 309, 30], "temperature": 0.0, "avg_logprob": -0.17327663226005358, "compression_ratio": 1.1195652173913044, "no_speech_prob": 2.5070585252251476e-05}, {"id": 524, "seek": 343100, "start": 3446.0, "end": 3454.0, "text": " Item getter.", "tokens": [31066, 483, 391, 13], "temperature": 0.0, "avg_logprob": -0.17327663226005358, "compression_ratio": 1.1195652173913044, "no_speech_prob": 2.5070585252251476e-05}, {"id": 525, "seek": 343100, "start": 3454.0, "end": 3456.0, "text": " Oh, it's an operator. Of course it is.", "tokens": [876, 11, 309, 311, 364, 12973, 13, 2720, 1164, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.17327663226005358, "compression_ratio": 1.1195652173913044, "no_speech_prob": 2.5070585252251476e-05}, {"id": 526, "seek": 345600, "start": 3456.0, "end": 3461.0, "text": " So this will apply operator.itemgetter to every item of a list.", "tokens": [407, 341, 486, 3079, 12973, 13, 270, 443, 847, 391, 281, 633, 3174, 295, 257, 1329, 13], "temperature": 0.0, "avg_logprob": -0.14781743829900568, "compression_ratio": 1.3884297520661157, "no_speech_prob": 9.818052603804972e-06}, {"id": 527, "seek": 345600, "start": 3461.0, "end": 3468.0, "text": " So our...", "tokens": [407, 527, 485], "temperature": 0.0, "avg_logprob": -0.14781743829900568, "compression_ratio": 1.3884297520661157, "no_speech_prob": 9.818052603804972e-06}, {"id": 528, "seek": 345600, "start": 3468.0, "end": 3476.0, "text": " So our t is 1, 0, 2, 1, 3, 2, 2.", "tokens": [407, 527, 256, 307, 502, 11, 1958, 11, 568, 11, 502, 11, 805, 11, 568, 11, 568, 13], "temperature": 0.0, "avg_logprob": -0.14781743829900568, "compression_ratio": 1.3884297520661157, "no_speech_prob": 9.818052603804972e-06}, {"id": 529, "seek": 345600, "start": 3476.0, "end": 3485.0, "text": " So t.itemgot1 will return the 1th element from each of those.", "tokens": [407, 256, 13, 270, 443, 13178, 16, 486, 2736, 264, 502, 392, 4478, 490, 1184, 295, 729, 13], "temperature": 0.0, "avg_logprob": -0.14781743829900568, "compression_ratio": 1.3884297520661157, "no_speech_prob": 9.818052603804972e-06}, {"id": 530, "seek": 348500, "start": 3485.0, "end": 3491.0, "text": " So it'll be 0, 1, 2, 2.", "tokens": [407, 309, 603, 312, 1958, 11, 502, 11, 568, 11, 568, 13], "temperature": 0.0, "avg_logprob": -0.1007250522045379, "compression_ratio": 1.526946107784431, "no_speech_prob": 1.1125444871140644e-05}, {"id": 531, "seek": 348500, "start": 3491.0, "end": 3493.0, "text": " I use that a lot actually.", "tokens": [286, 764, 300, 257, 688, 767, 13], "temperature": 0.0, "avg_logprob": -0.1007250522045379, "compression_ratio": 1.526946107784431, "no_speech_prob": 1.1125444871140644e-05}, {"id": 532, "seek": 348500, "start": 3493.0, "end": 3500.0, "text": " Attribute got is basically the same thing, but it's going to return this attribute from each thing.", "tokens": [7298, 2024, 1169, 658, 307, 1936, 264, 912, 551, 11, 457, 309, 311, 516, 281, 2736, 341, 19667, 490, 1184, 551, 13], "temperature": 0.0, "avg_logprob": -0.1007250522045379, "compression_ratio": 1.526946107784431, "no_speech_prob": 1.1125444871140644e-05}, {"id": 533, "seek": 348500, "start": 3500.0, "end": 3504.0, "text": " So here we've got a3, b4, a1, b2.", "tokens": [407, 510, 321, 600, 658, 257, 18, 11, 272, 19, 11, 257, 16, 11, 272, 17, 13], "temperature": 0.0, "avg_logprob": -0.1007250522045379, "compression_ratio": 1.526946107784431, "no_speech_prob": 1.1125444871140644e-05}, {"id": 534, "seek": 348500, "start": 3504.0, "end": 3508.0, "text": " So this will be the b from each. So 4, 2.", "tokens": [407, 341, 486, 312, 264, 272, 490, 1184, 13, 407, 1017, 11, 568, 13], "temperature": 0.0, "avg_logprob": -0.1007250522045379, "compression_ratio": 1.526946107784431, "no_speech_prob": 1.1125444871140644e-05}, {"id": 535, "seek": 348500, "start": 3508.0, "end": 3510.0, "text": " We use that quite a lot too.", "tokens": [492, 764, 300, 1596, 257, 688, 886, 13], "temperature": 0.0, "avg_logprob": -0.1007250522045379, "compression_ratio": 1.526946107784431, "no_speech_prob": 1.1125444871140644e-05}, {"id": 536, "seek": 351000, "start": 3510.0, "end": 3517.0, "text": " Sorted is pretty obvious. Range is pretty obvious.", "tokens": [318, 14813, 307, 1238, 6322, 13, 33778, 307, 1238, 6322, 13], "temperature": 0.0, "avg_logprob": -0.1714092470564932, "compression_ratio": 1.3409090909090908, "no_speech_prob": 2.3548198441858403e-05}, {"id": 537, "seek": 351000, "start": 3517.0, "end": 3519.0, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.1714092470564932, "compression_ratio": 1.3409090909090908, "no_speech_prob": 2.3548198441858403e-05}, {"id": 538, "seek": 351000, "start": 3519.0, "end": 3527.0, "text": " So there's a little guided tour of the first half of O1 Core.", "tokens": [407, 456, 311, 257, 707, 19663, 3512, 295, 264, 700, 1922, 295, 422, 16, 14798, 13], "temperature": 0.0, "avg_logprob": -0.1714092470564932, "compression_ratio": 1.3409090909090908, "no_speech_prob": 2.3548198441858403e-05}, {"id": 539, "seek": 352700, "start": 3527.0, "end": 3543.0, "text": " Thanks for seeing and turning in. And I'll see you all next time.", "tokens": [50364, 2561, 337, 2577, 293, 6246, 294, 13, 400, 286, 603, 536, 291, 439, 958, 565, 13, 51164], "temperature": 0.0, "avg_logprob": -0.29216174075478, "compression_ratio": 0.9848484848484849, "no_speech_prob": 0.00026365151279605925}], "language": "en"}