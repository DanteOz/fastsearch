{"text": " Welcome to lesson seven, the penultimate lesson of Practical Deep Learning for Coders, part one. And today we're going to be digging into what's inside a neural net. We've already seen what's inside the most basic possible neural net, which is a sandwich of fully connected layers or linear layers and relues. And so we built that from scratch. But there's a lot of tweaks that we can do. And so most of the tweaks actually that we probably care about are the tweaking the very first layer or the very last layer. So that's where we'll focus. But over the next couple of weeks we'll look at some of the tricks we can do inside as well. So I'm going to do this through the lens of the patty, rice patty competition we've been talking about. And we got to a point where, let's have a look. So we created a conv-next model. We tried a few different types of basic preprocessing. We added test time augmentation, and then we scaled that up to larger images and rectangular images. And that got us into the top 25% of the competition. So that's part two of the so-called road to the top series, which is increasingly misnamed since we've been presenting these notebooks. More and more of our students have been passing me on the leaderboard. So currently first and second place are both people from this class, Kurian and Nick. Go to hell. You're in my target. And leave my class immediately. And congratulations. Good luck to you. So in part three, I'm going to show you a really interesting trick, a very simple trick for scaling up these models further. What you'll discover if you've tried to use larger models, so you can replace the word small with the word large in those architectures and try to train a larger model. A larger model has more parameters. More parameters means it can find more tricky little features. And broadly speaking, models with more parameters therefore ought to be more accurate. Problem is that those activations, or more specifically the gradients that have to be calculated choose up memory on your GPU. And your GPU is not as clever as your CPU at kind of sticking stuff it doesn't need right now into virtual memory on the hard drive. When it runs out of memory, it runs out of memory. And it also doesn't do such a good job as your CPU at kind of shuffling things around to try and find memory. It just allocates blocks of memory and it stays allocated until you remove them. So if you try to scale up your models to bigger models, unless you have very expensive GPUs, you will run out of space. And you'll get an error. Something like CUDA out of memory error. So if that happens, first thing I mentioned is it's not a bad idea to restart your notebook because that can be a bit tricky to recover from otherwise. And then I'll show you how you can use as large a model as you like. Almost as you know, basically you'll be able to use a X large model on Kaggle. So let me explain. Now when you run something on Kaggle, like actually on Kaggle, you're generally going to be on a 16 gig GPU. And you don't have to run stuff on Kaggle. You can run stuff on your home computer or paper space or whatever. But sometimes if you want to do Kaggle competitions, sometimes you have to run stuff on Kaggle because a lot of competitions are what they call code competitions, which is where the only way to submit is from a notebook that you're running on Kaggle. And then a second reason to run stuff on Kaggle is that your notebooks will appear with the leaderboard score on them. And so people can see which notebooks are actually good. And I kind of like, even in things that aren't code competitions, I love trying to be the person who's number one on the notebook score leaderboard because that's something which, you know, you can't just work at Nvidia and use a thousand GPUs and win a competition through a combination of skill and brute force. Everybody has the same nine hour timeout to work with. So I think it's a good way of keeping the things a bit more fair. Now, so my home GPU has 24 gig. So I wanted to find out what can I get away with in 16 gig. And the way I did that is I think a useful thing to discuss because again, it's all about fast iteration. So I wanted to really quickly find out how much memory will a model use. So there's a really quick hacky way I can do that, which is to say, okay, for the training set, let's not use, so here's the value counts of labels or the number of each disease. Let's not look at all the diseases. Let's just pick one, the smallest one, right? And let's make that our training set. Our training set is the bacterial, panicle, blight images. And now I can train a model with just 337 images without changing anything else. Not that I care about that model, but then I can see how much memory it used. It's important to realize that each image you pass through is the same size, each batch size is the same size, so training for longer won't use more memory. So that'll tell us how much memory we're going to need. So what I then did was I then tried training different models to see how much memory they used up. Now, what happens if we train a model, so obviously ConvNext Small doesn't use too much memory, so here's something that reports the amount of GPU memory just by basically printing out CUDA's GPU processes, and you can see ConvNext Small took up 4 gig. And also, this might be interesting to you, if you then call Python's garbage collection, gc.collect, and then call PyTorch's empty cache, that should basically get your GPU back to a clean state of not using any more memory than it needs to when you can start training the next model without restarting the kernel. So what would happen if we tried to train this little model and it crashed with a CUDA out of memory error? What do we do? We can use a cool little trick called gradient accumulation. What's gradient accumulation? So what's gradient accumulation? Well, I added this parameter to my train method here. That's my train method, creates my data loaders, creates my learner, and then, depending on whether I'm fine-tuning or not, either fits or fine-tunes it. But there's one other thing it does. It does this gradient accumulation thing. What's that about? Well, the key step is here. I set my batch size, so that's the number of images that I pass through to the GPU all at once, to 64, which is my default, divided by, slash slash means integer divide in Python, divided by this number. So if I pass 2, it's going to use a batch size of 32. If I pass 4, it'll use a batch size of 16. Now that obviously should let me cure any memory problems, use a smaller batch size, but the problem is that now the dynamics of my training are different, right? The smaller your batch size, the more volatility there is from batch to batch, so now your learning rates are all messed up. You don't want to be messing around with trying to find a different set of optimal parameters for every batch size for every architecture. So what we want to do is find a way to run just, let's say accum is 2, accumulate equals 2. Let's say we just want to run 32 images at a time through. How do we make it behave as if it was 64 images? Well, the solution to that problem is to consider our training loop. This is basically the training loop we used from a couple of lessons ago, the one we created manually. We go through each xy pair in the data loader. We calculate the loss using some coefficients based on that xy pair, and then we call backward on that loss to calculate the gradients, and then we subtract from the coefficients the gradients times the learning rate, and then we zero out the gradients. I've skipped a bit of stuff like the with torch.nograd thing. Actually, no, I don't need that because I've got.data. No, that's it. That should all work fine. I've skipped out printing the loss. That's about it. So here is a variation of that loop where I do not always subtract the gradient times the learning rate. Instead, I go through each xy pair in the data loader. I calculate the loss. I look at how many images are in this batch. So initially, I start at zero, and this count is going to be 32, say, if I've divided the batch size by two. And then if count is greater than 64, I do my gradient, my coefficients update. Well, it's not. So I skip back to here, and I do this again. And if you remember, there was this interesting subtlety in PyTorch, which is if you call backward again without zeroing out the gradients, then it adds this set of gradients to the old gradients. So by doing these two half-sized batches without zeroing out the gradients between them, it's adding them up. So I'm going to end up with the total gradient of a 64-image batch size, but passing only 32 at a time. If I used accumulate equals 4, it would go through this four times, adding them up before it subtracted out the coefficients dot grad times learning rate and zeroed it out. If I put in accumulate equals 64, it would go through into a single image one at a time. And after 64 passes through, eventually count would be greater than 64, and we would do the update. So that's gradient accumulation. It's a very simple idea, which is that you don't have to actually update your weights every loop through for every mini-batch. You can just do it from time to time. But it has quite significant implications, which I find most people seem not to realize, which is if you look on Twitter or Reddit or whatever, people can say, oh, I need to buy a bigger GPU to train bigger models. But they don't. They could just use gradient accumulation. And so given the huge price differential between, say, a RTX 3080 and an RTX 3090 Ti, huge price differential, the performance is not that different. The big difference is the memory. So what? Just put in a bit smaller batch size and do gradient accumulation. So there's actually not that much reason to buy giant GPUs. John? Other results with gradient accumulation, numerically identical? They're numerically identical for this particular architecture. There is something called batch normalization, which we will look at in part two of the course, which keeps track of the moving average of standard deviations and averages and does it in a mathematically slightly incorrect way, as a result of which if you've got batch normalization, then it basically will introduce more volatility, which is not necessarily a bad thing. But because it's not mathematically identical, you won't necessarily get the same results. NNVnext doesn't use batch normalization, so it is the same. And in fact, a lot of the models people want to use really big versions of, which is NLP ones, transformers, tend not to use batch normalization, but instead they use something called layer normalization, which doesn't have the same issue. I think that's probably fair to say. I haven't thought about it that deeply. In practice, I found adding gradient accumulation for NNVnext has not caused any issues for me. I don't have to change any parameters when I do it. Any other questions on the forum, John? Tamori asking, shouldn't it be count greater than equal to 64 if BS equals 64? I haven't... No, I don't think so. Oh, yeah. So we start at zero, then it's going to be 32, then it's going to be... Yeah, yeah, probably. It's a greater than equal, yeah. Yeah, probably. You can probably tell I didn't actually run this code. Madhav is asking, does this mean that LRFind is based on the batch size set during the data block? Yeah. So LRFind just uses your data loaders batch size. Edward is asking, why do we need gradient accumulation rather than just using a smaller batch size and follows up with how would we pick a good batch size? Well, just if you use a smaller batch size, here's the thing, right? Different architectures have different amounts of memory, which they take up. And so you'll end up with different batch sizes for different architectures, which is not necessarily a bad thing, but each of them is going to then need a different learning rate and maybe even different weight decay or whatever. Like the kind of the settings that's working really well for batch size 64 won't necessarily work really well for batch size 32. And you want to be able to experiment as easily and quickly as possible. I think the second part of your question was how do you pick an optimal batch size? Honestly, the standard approach is to pick the largest one you can, just because it's faster that way, you're getting more parallel processing going on. Although to be honest, I quite often use batch sizes that are quite a bit smaller than I need because quite often it doesn't make that much difference. But yeah, the rule of thumb would be, you know, pick a batch size that fits in your GPU. And for performance reasons, I think it's generally a good idea to have it be a multiple of eight. Everybody seems to always use powers of two. I don't know, like I don't think it actually matters. And look, there's one other just a clarification or a check if the learning rate should be scaled according to the batch size. Yeah, so generally speaking, the rule of thumb is that if you divide the batch size by two, you divide the learning rate by two. But unfortunately, it's not quite perfect. Did you have a question, Nick? If you do, you can. Okay, cool. Yeah. Now that's us all caught up. Thanks, Jimmy. Good questions. Thank you. So gradient accumulation in fast AI is very straightforward. You just divide the batch size by however much you want to divide it by. And then add a you got something called a callback. And a callback is something which changes the way the model trains. This callback is called gradient accumulation. And you pass in the effective batch size you want. And then you say when you create the learner, you say these are the callbacks I want. And so it's going to pass in gradient accumulation callback. So it's going to only update the weights once it's got 64 images. So if we pass in a QM equals one, it won't do any gradient accumulation. And that uses four gig. If we use QM equals two, about three gig. QM equals four, about two and a half gig. And generally the bigger the model, the closer you'll get to a kind of a linear scaling. Because models have a kind of a bit of overhead that they have anyway. So what I then did was I just went through all the different models I wanted to try. So I wanted to try ConvNext Large, add a 320 by 240, VIT Large, Swin V2 Large, Swin Large. And each of these I just tried running it with a QM equals one and actually every single time for all of these I got a memory error and then I tried each of them independently with a QM equals two. And it turns out that all of these worked with a QM equals two. And it only took me 12 seconds each time. So that was a very quick thing for me then to know, okay, I now know how to train all of these models on a 16 gigabyte card. So I can check here they're all in less than 16 gig. So then I just created a little dictionary of all the architectures I wanted. And for each architecture all of the resize methods I wanted and final sizes I wanted. Now these models, VIT, Swin V2 and Swin are all transformers models, which means that well, most transformers models, nearly all of them have a fixed size. This one's 224, this one's 192, this one's 224. So I have to make sure that my final size is a square of the size required. Otherwise I get an error. There is a way of working around this, but I haven't experimented with it enough to know when it works well and when it doesn't. So we'll probably come back to that in part two. So for now we're just going to use the size that they ask us to use. So with this dictionary of architectures and for each architecture, kind of preprocessing details, we switch the training path back to using all of our images and then we can loop through each architecture and loop through each item transforms and sizes and train the model. And then the training script, if you're fine tuning, returns the TTA predictions. So I append all those TTA predictions for each model, for each type into a list. But after each one it's a good idea to do this garbage collection and empty cache, because otherwise I find what happens is your GPU memory kind of, I don't know, I think it gets fragmented or something and after a while it runs out of memory even when you thought it wouldn't. So this way you can really do as much as you like without running out of memory. So they all train, train, train, train. And one key thing to note here is that in my train script my data loaders does not have the seed equals parameter. So I'm using a different training set every time. So that means that for each of these different runs they're using also different validation sets. So they're not directly comparable, but you can kind of see they're all doing pretty well, 2.1%, 2.3%, 1.7% and so forth. So why am I using different training and validation sets for each of these? That's because I want to ensemble them. So I'm going to use bagging, which is I am going to take the average of their predictions. Now I mean really when we talked about random forest bagging we were taking the average of intentionally weak models. These are not intentionally weak models. They're meant to be good models, but they're all different. They're using different architectures and different pre-processing approaches. And so in general we would hope that these different approaches, some might work well for some images and some might work well for other images. And so when we average them out hopefully we'll get a good blend of kind of different ideas, which is kind of what you want in bagging. So we can stack up that list of all the different probabilities and take their mean. And so that's going to give us 3,469 predictions. That's our test set size. And each one has 10 probabilities, the probability of each disease. And so then we can use argmax to find which probability index is the highest. So that's going to give us our list of indexes. So this is basically the same steps as we used before to create our CSV submission file. So at the time of creating this analysis that got me to the top of the leaderboard. And in fact these are my four submissions. And you can see each one got better. Now you're not always going to get this nice monotonic improvement, right, but you want to be trying to submit something every day to kind of like try out something new. And the more you practice the more you'll get a good intuition of what's going to help. So partly I'm showing you this to say it's not like purely random as to whether things work or don't. Once you've been doing this for a while you know you will generally be improving things most of the time. So as you can see from the descriptions my first submission was our CONVNEXT small, the 12 epochs with TTA. And then an ensemble of CONVNEXT. So it's basically this exact same thing but just retraining a few with different training subsets. And then this is the same thing again. This is the thing we just saw basically. The ensemble of large bottles with TTA. And then the last one was something I skipped over which was I, the VIT models were the best in my testing. So I basically weighted them as double in the ensemble. I'm pretty unscientific but again it gave it another boost. And so that was it. Alright, John. Yes, thanks Jeremy. So in no particular order, Kurian is asking would trying out cross validation with k-folds with the same architecture make sense to do the same ensembling of models? Yes, so a popular thing is to do k-fold cross validation. So k-fold cross validation is something very, very similar to what I've done here. So what I've done here is I've trained a bunch of models with different training sets. Each one is a different random 80% of the data. Five-fold cross validation does something similar but what it says is rather than picking say five samples out with different random subsets, in fact instead first do all except for the first 20% of the data and then all but the second 20% and then all but the third and so forth. So you start with five subsets, each of which have non-overlapping validation sets and then you'll ensemble those. You know in theory maybe that could be slightly better because you're kind of guaranteed that every row appears four times, you know, effectively. It also has a benefit that you could average those five validation sets because there's no kind of overlap between them to get a cross validation. Personally I generally don't bother and the reason I don't is because this way I can add and remove models very easily. I don't, you know, I can just, you know, add another architecture and whatever to my ensemble without trying to find a different overlapping non-overlapping subset. So yeah, cross validation is therefore something that I use probably less than most people or almost never. Awesome, thank you. Are there any, just coming back to gradient accumulation, any other kind of drawbacks or potential gotchas with gradient accumulation? No, not really. Yeah, like amazingly, it doesn't even really slow things down much, you know, going from a batch size of 64 to a batch size of 32. By definition you had to do it because you're GPUs full so you're obviously getting a lot of data so it's probably going to be using its processing speed pretty effectively. So yeah, no, it's just a good technique that we should all be buying cheaper graphics cards with less memory in them and using, you know, have, like I don't know the prices, I suspect like you could probably buy like two 3080s to the price of one 3090 Ti or something. That would be a very good deal. Yes, clearly you're not on the Nvidia payroll. So look, this is a good segue then we did have a question about sort of GPU recommendations and there's been a bit of chat on that as well. So any, you know, commentary, any additional commentary around GPU recommendations? No, not really. I mean, obviously, at the moment, Nvidia is the only game in town, you know, if you buy, if you trying to use a, you know, Apple M1 or M2 or an AMD card, you're basically in for a world of pain in terms of compatibility and stuff and unoptimized libraries and whatever. The Nvidia consumer cards, so the ones that start with RTX are much cheaper, but are just as good as the expensive enterprise cards. So you might be wondering why anybody would buy the expensive enterprise cards. And the reason is that there's a licensing issue that Nvidia will not allow you to use an RTX consumer card in a data center, which is also why cloud computing is more expensive than it kind of ought to be because everybody selling cloud computing GPUs is selling these cards that are like, I can't remember, I think they're like three times more expensive for kind of the same features. So yeah, if you do get serious about deep learning to the point that you're prepared to invest, you know, a few days in administering a box and, you know, I guess depending on prices hopefully will start to come down, but currently a thousand or two dollars, a thousand or $2,000 and buying a GPU then, you know, that'll probably pay you back pretty quickly. Great. Thank you. Let's see, another one's come in. If you have a back on models, not hardware, if you have a well functioning, but large model, can it make sense to train a smaller model to produce the same final activations as the larger model? Oh yeah, absolutely. I'm not sure we'll get into that this time around, but yeah, we'll cover that in part two, I think, but yeah, basically there's a kind of teacher student models and model distillation, which broadly speaking there, there are ways to make inference faster by training small models that work the same way as large models. Great. Thank you. All right. So that is the actual real end of road to the top because beyond that, we don't actually cover how to get closer to the top. You'd have to ask Kurian to share his techniques to find out that or Nick to get the second place in the top. Part four is actually something that I think is very useful to know about for learning and it's going to teach us a whole lot about how the last layer of a neural networks. And specifically what we're going to try to do is we're going to try to build a model that doesn't just predict the disease, but also predicts the type of rice. So how would you do that? So here's the data loader we're going to try to build. It's going to be something that for each image, it tells us the disease and the type of rice. I say disease, sometimes normal, I guess some of them are not diseased. So to build a model that can predict two things, the first thing is going to need data loaders that have two dependent variables. And that is shockingly easy to do in fast AI thanks to the data block. So we've seen the data block before. We haven't been using it for the patty competition so far because we haven't needed it. We could just use image data loader from folder. So that's like the highest level API, the simplest API. If we go down a level deeper into the data block, we have a lot more flexibility. So if you've been following the walkthroughs, you'll know that as I built this, the first thing I actually did was to simply replicate the previous notebook, but replace the image data loader from folders with a data block to try to do first of all, exactly the same thing. And then I added the second dependent variable. So if we look at the previous image data loader from folders thingy, here it is. We are passing in some item transforms and some batch transforms. And we had something saying what percentage should be the validation set. So in a data block, if you remember, we have to pass in a blocks argument saying what kind of data is the independent variable and what is the dependent variable. So to replicate what we had before, we would just pass in image block, comma, category block because we've got an image as our independent variable and a category, one type of rice, is the dependent variable. So the new thing I'm going to show you here is that you don't have to only put in two things. You can put in as many as you like. So if you put in three things, we're going to generate one image and two categories. Now FastAI, if you're saying I want three things, FastAI doesn't know which of those is the independent variable and which is the dependent variable. So the next thing you have to tell it is how many inputs are there, number of inputs. And so here I've said there's one input. So that means this is the input and therefore by definition, two categories will be the output. Because remember, we're trying to predict two things, the type of rice and the disease. Okay, this is the same as what we've seen before. To find out, to get our list of items, we'll call get image files. Now here's something we haven't seen before. Get y is our labeling function. Normally we pass to get y a single thing such as the parent label function, which looks at the name of the parent directory, which remembers how these images are structured. And that would tell us the label. But get y can also take an array. And in this case, we want two different labels. One is the name of the parent directory, because that's the disease. The second is the variety. So what's get variety? Get variety is a function. So let me explain how this function works. So we can create a data frame containing our training data that came from Kaggle. So for each image, it tells us the disease and the variety. And what I did is something I haven't shown before. In pandas, you can set one column to be the index. And when you do that, in this case, image ID, it makes this series, this data frame, kind of like a dictionary. I can index into it by saying, tell me the row for this image. And to do that, you use the lock attribute, the location. So we want in the data frame the location of this image. And then you can also say optionally what column you want, this column. And so here's this image and here's this column. And as you can see, it returns that thing. So hopefully now you can see it's pretty easy for us to create a function that takes a path and returns the location in the data frame of the name of that file, because remember these are the names of files, for the variety column. So that's our second getaway. And then we've seen this before, randomly split the data into the 20% and 80%. And so we could just squish them all to 192 just for this example. And then use data augmentation to get us down to 128 square images just for this example. And so that's what we get. When we say show batch, we get what we just discussed. So now we need a model that predicts two things. How do we create a model that predicts two things? Well the key thing to realize is we never actually had a model that predicts two things. We had a model that predicts 10 things before. The 10 things we predicted is the probability of each disease. So we don't actually now want a model that predicts two things. We want a model that predicts 20 things. The probability of each of the 10 diseases and the probability of each of the 10 varieties. So how could we do that? Well let's first of all try to just create the same disease model we had before with our new data loader. So this is going to be reasonably straightforward. The key thing to know is that since we told Fast.ai that there's one input and therefore by definition there's two outputs, it's going to pass to our metrics and to our loss functions three things instead of two, the predictions from the model and the disease and the variety. So we can't just use error rate as our metric anymore because error rate takes two things. Instead we have to create a function that takes three things and return error rate on the two things we want which is the predictions from the model and the disease. So the predictions from the model, this is the target. So that's actually all we need to do to define a metric that's going to work with our new data set, with our new data loader. This is not going to actually tell us anything about variety. First it's going to try to replicate something that can do just disease. So when we create our learner we'll pass in this new disease error function. So we're halfway there. The other thing we're going to need is to change our loss function. Now we never actually talked about what loss function to use and that's because Vision Learner guessed what loss function to use. Vision Learner saw that our dependent variable was a single category and it knows the best loss function that's probably going to be the case for things with a single category and it knows how big the category is so it just didn't bother us at all. It just said, okay, I'll figure it out for you. So the only time we've provided our own loss function is when we were kind of doing linear models and neural nets from scratch and we did I think mean squared error, we might also have done mean absolute error. Neither of those work when the dependent variable is a category. How would you use mean squared error or mean absolute error to say how close were these ten probability predictions to this one correct answer? So in this case we have to use a different loss function. We have to use something called cross entropy loss and this is actually the loss function that Fast.ai picked for us before without us knowing. But now that we are having to pick it out manually I'm going to explain to you exactly what cross entropy loss does. And you know these details are very important indeed. Remember I said at the start of this class the stuff that happens in the middle of the model you're not going to have to care about much in your life if ever but the stuff that happens in the first layer and the last layer including the loss function that sits between the last layer and the loss you're going to have to care about a lot. This stuff comes up all the time. So you definitely want to know about cross entropy loss. And so I'm going to explain it using a spreadsheet. This spreadsheet is in the course repo. And so let's say you are predicting something like a kind of a mini image net thing where you're trying to predict whether something an image is a cat, a dog, a plane, a fish or a building. So you set up some model whatever it is a ConvNext model or just a big bunch of linear layers connected up or whatever. And initially you've got some random weights and it spits out at the end five predictions. So remember to predict something with five categories your model will spit out five probabilities. Now it doesn't initially spit out probabilities there's nothing making them probabilities it just spits out five numbers. Could be negative, could be positive. So here's the output of the model. So what we want to do is we want to convert these into probabilities. And so we do that in two steps. The first thing we do is we go exp that's e to the power of we go e to the power of each of those things like so. And so here's the mathematical formula we're using this is called the softmax what we're working through. We're going to go through each of the categories. So these are our five categories. So here k is five. We're going to go through each of our categories and we're going to go e to the power of the output so zj is the output for the jth category. So here's that. And then we're going to sum them all together. Here it is sum up together. So this is the denominator. And then the numerator is just e to the power of the thing we care about so this row. So the numerator is e to the power of cat on this row. e to the power of dog on this row and so forth. Now if you think about it since the denominator adds up all the e to the power ofs then when we do each one divided by the sum that means the sum of these will equal one by definition. Right? And so now we have things that can be treated as probabilities. They're all numbers between zero and one. Numbers that were bigger in the output will be bigger here. But there's something else interesting which is because we did e to the power of it means that the bigger numbers will be like pushed up to numbers closer to one. Like we're saying like oh really try to pick one thing as having most of the probability because we are trying to predict you know one thing. We're trying to predict which one is it. And so this is called softmax. So sometimes you'll see people complaining about the fact that their model which they said let's say is it a teddy bear or a grizzly bear or a black bear and they feed it a picture of the cat and they say oh the model's wrong because it predicted grizzly bear but it's not a grizzly bear. As you can see there's no way for this to predict anything other than the categories we're giving it. We're forcing it to that. Now we don't if you want like it's something else you could do which is you could actually have them not add up to one. Right? You could instead have something which simply says what's the probability it's a cat, what's the probability it's a dog, what's the probability it's playing totally separately and they could add up to less than one. And in that situation you can you know or more than one in which case you could have like more than one thing being true or zero things being true. But in this particular case where we want to predict one and one thing only we use softmax. The first part of the cross entropy formula, the first part of the cross entropy formula, in fact let's look it up and end cross entropy loss. The first part of what cross entropy loss in PyTorch does is to calculate the softmax. It's actually the log of the softmax but don't worry about that too much. It's just slightly faster to do the log. Okay so now for each one of our five things we've got a probability. The next step is the actual cross entropy calculation which is we take our five things, we've got our five probabilities and then we've got our actuals. Now the truth is the actual, you know the five things would have indices right, 0, 1, 2, 3 or 4 and the actual turned out to be the number 1. But what we tend to do is we think of it as being one-hot encoded which is we put a 1 next to the thing for which it's true and a 0 everywhere else. And so now we can compare these five numbers to these five numbers and we would expect to have a smaller loss if the softmax was high where the actual is high. And so here's how we calculate, this is the formula, the cross entropy loss. We sum up, so we switched to m this time for some reason but it's the same thing, we sum up across the five categories, so m is 5, and for each one we multiply the actual target value, so that's 0, so here it is here, the actual target value, and we multiply that by the log of the predicted probability, the log of red, the predicted probability. And so of course for four of these that value is 0, because see here, yj equals 0 by definition for all but one of them because it's one-hot encoded. So for the one that it's not, we've got our actual times the log softmax. And so now actually you can see why PyTorch prefers to use log softmax because it kind of skips over having to do this log at all. So this equation looks slightly frightening but when you think about it, all it's actually doing is it's finding the probability for the one that is 1 and taking its log. It's kind of weird doing it as a sum but in math it can be a little bit tricky to kind of say oh look this up in an array which is basically all it's doing. But yeah, basically at least in this case for a single result with softmax this is all it's doing, it's finding the 0.87 where it's 1 for and taking the log and then finally negative. So that is what cross entropy loss does. We add that together for every row. So here's what it looks like if we add it together over every row. So n is the number of rows. And here's a special case. This is called binary cross entropy. What happens if we're not predicting which of five things it is but we're just predicting is it a cat? So in that case if you look at this approach you end up with this formula which is identical to this formula but in just two cases which is you either are a cat or you're not a cat. And so if you're not a cat it's 1 minus you are a cat. And same with the probability. You've got the probability you are a cat and then not a cat is 1 minus that. So here's this special case of binary cross entropy and now our rows represent rows of data. So each one of these is a different image, a different prediction and so for each one I'm just predicting are you a cat? And this is the actual. And so the actual are you not a cat is just 1 minus that. And so then these are the predictions that came out of the model. Again we can use softmax or its binary equivalent and so that will give you a prediction that you're a cat and the prediction that it's not a cat is 1 minus that. And so here is each of the parts. Y i times log of p y i and here is, why did I subtract? That was weird. Oh because I've got minus of both so I just do it this way. Avoids parentheses. Yeah minus the are you not a cat times the log of the prediction of are you not a cat? And then we can add those together and so that would be the binary cross entropy loss of this data set of 5 cat or not cat images. Now if you've got an eagle eye you may have noticed that I am currently looking at the documentation for something called nn.crossentropyloss but over here I had something called nn.crossentropyloss f.crossentropy. Basically it turns out that all of the loss functions in PyTorch have two versions. There's a version which is a class, this is a class which you can instantiate passing in various tweaks you might want and there's also a version which is just a function and so if you don't need any of these tweaks you can just use the function. The functions live in a, I can't remember what the sub module called, I think it might be like torch.nn.functional but everybody including the PyTorch official docs just calls it capital F. So that's what this capital F refers to. So our loss if we just care about disease we're going to be past the three things but just going to calculate cross entropy on our input versus disease. So that's all fine. So now when we create a vision learner you can't rely on fastai to know what loss function to use because we've got multiple targets. So you have to say this is the loss function I want to use, this is the metrics I want to use and the other thing you can't rely on is that fastai no longer knows how many activations to create because again there's more than one target. So you have to say the number of outputs to create at the last layer is 10. So this is just saying what's the size of the last matrix? And once we've done that we can train it and we get you know basically the same kind of result as we always get because this model at this point is identical to our previous convex small model. We've just done it in a slightly more roundabout way. So finally before our break I'll show you how to expand this now into a multi-target model and the trick is actually very simple and you might have almost got the idea of it when I talked about it earlier. Our vision learner now requires 20 outputs. We now need that last matrix to have to produce 20 activations not 10. 10 of those activations are going to predict the disease and 10 of the activations are going to predict the variety. So you might be then asking like well how does the model know what it's meant to be predicting and the answer is with the loss function you're going to have to tell it. So for example disease loss remember it's going to get the input the disease and the variety this is now going to have 20 columns in. So we're just going to decide all right we're just going to decide the first 10 columns we're going to decide are the prediction of what the disease is which of the probability of each disease. So we can now pass to cross entropy the first 10 columns and the disease target. So the way you read this colon means every row and then colon 10 means every column up to the 10th. So these are the first 10 columns and that's a loss function that just works on predicting disease using the first 10 columns. For variety we'll use cross entropy loss with the target of variety and this time we'll use the second 10 columns. So here's column 10 onwards. So then the overall loss function is the sum of those two things disease loss plus variety loss and that's actually it. That's all the model needs to basically it's now going to if you kind of think through the manual neural nets we've created this loss function will be reduced when the first 10 columns are doing good job of predicting the disease probabilities and the second 10 columns are doing a good job of predicting the variety probabilities and therefore the gradients will point in an appropriate direction that the coefficients will get better and better at using those columns for those purposes. So it'd be nice to see the error rate as well for each of disease and variety so we can call error rate passing in the first 10 columns and disease and then variety the second 10 columns and variety and we may as well also add to the metrics the losses and so now when we create our learner we're going to pass in as the loss function the combined loss and as the metrics our list of all the metrics and n out equals 20 and now look what happens when we train as well as telling us the overall train invalid loss it also tells us the disease and variety error and the disease and variety loss and you can see our disease error is getting down to similar levels it was before. It's slightly less good but it's similar. It's not surprising it's slightly less good because we've only given it the same number of epochs and we're now asking it to try to do more stuff which is to learn to recognize what the rice variety looks like and also learns to recognize what the disease looks like. Here's the counterintuitive thing though if we train it for longer it may well turn out that this model which is trying to predict two things actually gets better at predicting disease than our disease specific model. Why is that? Like that sounds weird right because we're trying to have to do more stuff as a same size model. Well the reason is that quite often it'll turn out that the kinds of features that help you recognize a variety of rice are also useful for recognizing the disease you know maybe there are certain textures or maybe some diseases impact different varieties different ways. So it'd be really helpful to know what variety it was. So I haven't tried training this for a long time and I don't know the answer is in this particular case does a multi-target model do better than a single target model at predicting disease but I just wanted to let you know sometimes it does. So for example a few years ago there was a Kaggle competition for recognizing the kinds of fish on a boat and I remember we ended up doing a multi-target model where we tried to predict a second thing I can't even remember what it was maybe it was a type of boat or something and it definitely turned out in that Kaggle competition that predicting two things helped you predict the type of fish better than predicting just the type of fish. So there's at least you know there's two reasons to learn about multi-target models one is that sometimes you just want to be able to predict more than one thing so this is useful and the second is sometimes this will actually be better at predicting just one thing than a just one thing model. And of course the third reason is it really forced us to dig quite deeply into these loss functions and activations in a way we haven't quite done before. So it's okay it's absolutely okay if this is confusing. The way to make it not confusing is well the first thing I do is like go back to our earlier models where we did stuff by hand on like the Titanic data set and built our own architectures and maybe you could try to build a model that predicts two things in the Titanic data set maybe you could try to predict both sex and survival or something like that or class and survival because that's kind of kind of forced you to look at it on very small data sets and then the other thing I'd say is run this notebook and really experiment at trying to see what kind of outputs you get like actually look at the inputs and look at the outputs and look at the data loaders and so forth. All right let's have a six minute break so I'll see you back here at ten past seven. Okay welcome back. Oh before I continue I very rudely forgot to mention this very nice equation image here is from an article by Chris Sedd called Things That Confused Me About Cross-Entropy. It's a very good article so I recommend you check it out if you want to go a bit deeper there there's a link to it inside the spreadsheet. So the next notebook we're going to be looking at is this one called Collaborative Filtering Deep Dive and this is going to cover our last of the four major application areas, collaborative filtering. And this is actually the first time I'm going to be presenting a chapter of the book largely without variation because this is one where I looked back at the chapter and I was like oh I can't think of any way to improve this so I thought I'll just leave it as is. But we have put the whole chapter up on Kaggle so that's for the way I'm going to be showing it to you. And so we're going to be looking at a data set called the Movie Lens data set which is a data set of movie ratings and we're going to grab a smaller version of it, 100,000 record version of it and it comes as a CSV file which we can read in. It's not really a CSV file, it's a TSV file. This here means a tab in Python. These are the names of the columns. So here's what it looks like. It's got a user, a movie, a rating and a timestamp. We're not going to use the timestamp at all. So basically three columns we care about. This is a user ID, so maybe 196 is Jeremy and maybe 186 is Rachel and 22 is John, I don't know. Maybe this movie is Return of the Jedi and this one's Casablanca, this one's LA Confidential and then this rating says how did Jeremy feel about Return of the Jedi, he gave it a 3 out of 5. That's how we can read this data set. This kind of data is very common. Anytime you've got a user and a product or service and you might not even have ratings, maybe just the fact that they bought that product, you could have a similar table with zeros and ones. So for example, Radik who's in the audience here is now at NVIDIA doing basically just this right, recommendation systems. It's a huge industry. So what we're learning today is a really key foundation of it. So these are the first heroes. This is not a particularly great way to see it. I prefer to cross tabulate it like this. This is the same information. So for each movie, for each user, here's the rating. So user 212 never watched movie 49. Now if you're wondering why there's so few empty cells here, I actually grabbed the most watched movies and the most movie watching users for this particular sample matrix. That's why it's particularly full. So this is what kind of a collaborative filtering data set looks like when we cross tabulate it. So how do we fill in this gap? So maybe user 212 is Nick and movie 49, what's a movie you haven't seen Nick and you'd quite like to maybe not sure about it? The New Elvis movie, Baz Luhrmann, good choice, Australian director, filmed in Queensland. Yeah. Okay. So that's movie number 49. So is Nick going to like the New Elvis movie? Well to figure this out, what we could do, ideally we'd like to know for each movie, what kind of movie is it? What are the kind of features of it? Is it like actiony, science fictiony, dialogue driven, critical acclaimed? So let's say for example, we were trying to look at The Last Skywalker, maybe that was the movie that Nick's wondering about watching. And so if we had three categories being science fiction, action, or classic old movies, we'd say The Last Skywalker is very science fiction. Let's see this is from like negative one to one. Pretty action, definitely not an old classic, or at least not yet. And so then maybe we then could say like, okay, well maybe like Nick's tastes in movies are that he really likes science fiction, quite likes action movies and doesn't really like old classics, right? So then we could kind of like match these up to see how much we think this user might like this movie. To calculate the match, we could just multiply the corresponding values, use a one times Last Skywalker and add them up. Point nine times point nine eight plus point eight times point nine plus negative point six times negative point nine. That's going to give us a pretty high number, right? With a maximum of three. So that would suggest Nick probably would like The Last Skywalker. On the other hand, the movie Casablanca, we would say definitely not very science fiction, not really very action, definitely very old classic. So then we'd do exactly the same calculation and get this negative result here. So you probably wouldn't like Casablanca. This thing here, when we multiply the corresponding parts of a vector together and add them up is called a dot product in math. So this is the dot product of the user's preferences and the type of movie. Now the problem is we weren't given that information. We know nothing about these users or about the movies. So what are we going to do? We want to try to create these factors without knowing ahead of time what they are. We wouldn't even know what factors to create. What are the things that really matters when people decide what movies they want to watch? What we can do is we can create things called latent factors. Lantant factors is this weird idea that we can say, I don't know what things about movies matter to people, but there's probably something. And let's just try using SGD to find them. And we can do it in everybody's favorite mathematical optimization software, Microsoft Excel. So here is that table. And what we can do, let's head over here actually, here's that table. So what we could do is we could say for each of those movies, so let's say for movie 27, let's assume there are five latent factors. I don't know what they're for. They're just five latent factors. We'll figure them out later. And for now, I certainly don't know what the value of those five latent factors for movie 27. So we're going to just chuck a little random numbers in them. And we're going to do the same thing for movie 49. Pick another five random numbers. And the same thing for movie 57. Pick another five numbers. And you might not be surprised to hear, we're going to do the same thing for each user. So for user 14, we're going to pick five random numbers for them. And for user 29, we'll pick five random numbers for them. And so the idea is that this number here, 0.19, is saying if it was true that user ID 14 feels not very strongly about the fact that for movie 27 has a value of 0.71. So therefore in here, we do the dot product. The details of why don't matter too much. But well, actually, you can figure this out from what we've said so far. If you go back to our definition of matrix product, you might notice that the matrix product of a row with a column is the same thing as a dot product. And so here in Excel, I have a row and a column. So therefore I say matrix multiply that by that, that gives us the dot product. So here's the dot product of that by that, or the matrix multiply, given that they're row and column. The only other slight quirk here is that if the actual rating is empty, I'm just going to leave it blank. I'm going to set it to 0, actually. So here is everybody's predicted rating of movies. I say predicted. Of course, these are currently random numbers, so they are terrible predictions. But when we have some way to predict things, and we start with terrible random predictions, we know how to make them better, don't we? We use stochastic gradient descent. Now to do that, we're going to need a loss function. So that's easy enough. We can just calculate the sum of x minus y squared divided by the count. That is the mean squared error. And if we take the square root, that is the root mean squared error. So here is the root mean squared error in Excel between these predictions and these actuals. And so now that we have a loss function, we can optimize it, data solver, set objective, this one here, by changing cells, these ones here and these ones here, solve. And initially, our loss is 2.81. So we hope it's going to go down. And as it solves, not a great choice of background color, but it says 0.68. So this number is going down. So this is using, actually in Excel, it's not quite using stochastic gradient descent, because Excel doesn't know how to calculate gradients. There are actually optimization techniques that don't need gradients. They calculate them numerically as they go. But that's a minor quirk. One thing you'll notice is it's doing it very, very slowly. There's not much data here, and it's still going. One reason for that is that because it's not using gradients, it's much slower. And the second is Excel is much slower than PyTorch. Anyway, it's come up with an answer. And look at that. It's got to 0.42. So it's got a pretty good prediction. And so we can kind of get a sense of this, for example, looking at the last three. User 14 likes, dislikes, likes. Let's see somebody else like that. Here's somebody else. This person likes, dislikes, likes. So based on our kind of approach, we're saying, OK, since they have the same feeling about these three movies, maybe they'll feel the same about these three movies. So this person likes all three of those movies, and this person likes two out of three of them. So you know, you kind of this is the idea, right, is if somebody says to you, I like this movie, this movie, this movie, and you're like, oh, they like those movies, too. What other movies do you like? And they'll say, oh, how about this? There's a chance, good chance that you're going to like the same thing. That's the basis of collaborative filtering. OK, it's and mathematically, we call this matrix completion. So this matrix is missing values. We just want to complete them. So the core of collaborative filtering is it's a matrix completion exercise. Can you grab a microphone? My question was, is with the dot products, right, so if we think about the math of that for a minute, is if we think about the cosine of the angle between the two vectors, that's going to roughly approximate the correlation. Is that essentially what's going on here in one sense with the way that we're? So is the cosine of the angle between the vectors much the same thing as the dot product? The answer is yes. They're the same once you normalize them. So yeah, that's still on. It's correlation what we're doing here at scale as well. Yeah, you can think of it that way. Now this looks pretty different to how PyTorch looks. PyTorch has things in rows, right? We've got a user, a movie rating. User movie rating, right? So how do we do the same kind of thing in PyTorch? So let's do the same kind of thing in Excel, but using the table in the same format that PyTorch has it. So to do that in Excel, the first thing I'm going to do is I'm going to see, okay, I've got to look at user number 14, and I want to know what index, like how far down this list is 14. Okay, so we'll just match means find the index. So this is user index one. And then what I'm going to do is I'm going to say these five numbers is basically I want to find row one over here. And in Excel, that's called offset. So we're going to offset from here by one row. And so you can see here it is 0.19, 0.63, 0.19, 0.63, et cetera. So here's the second user, 0.25, 0.03, et cetera. And we can do the same thing for movies. So movie 417 is index 14. That's going to be 0.75, 0.47, et cetera. And so same thing, right? But now we're going to offset from here by 14 to get this row, which is 0.75, 0.47, et cetera. And so the prediction now is the dot product is called sum product in Excel. This is sum product of those two things. So this is exactly the same as we had before, right? But when we kind of put everything next to each other, we have to manually look up the index. And so then for each one, we can calculate the error squared, prediction minus rating squared. And then we could add those all up. And if you remember, this is actually the same root mean squared error we had before we optimized before, 2.81, because we've got the same numbers as before. And so this is mathematically identical. So what's this weird word up here? Embedding. You've probably heard it before, and you might have come across the impression it's some very complex, fancy mathematical thing. But actually, it turns out that it is just looking something up in an array. That is what an embedding is. So we call this an embedding matrix. And these are our user embeddings and our movie embeddings. So let's take a look at that in PyTorch. And at this point, if you've heard about embeddings before, you might be thinking that can't be it. And yeah, it's just as complex as the rectified linear unit, which turned out to be replaced negatives with zeros. Embedding actually means look something up in an array. So there's a lot of things that we use as deep learning practitioners to try to make you as intimidated as possible so that you don't wander into our territory and start winning our Kaggle competitions. And unfortunately, once you discover the simplicity of it, you might start to think that you can do it yourself. And then it turns out you can. So yeah, that's what basically it turns out pretty much all of this jargon turns out to be. So we're going to try to learn these latent factors, which is exactly what we just did in Excel. We just learned the latent factors. All right. So if we're going to learn things in PyTorch, we're going to need data loaders. One thing I did is there is actually a movies table as well with the names of the movies. So I merged that together with the ratings so that then we've now got the user ID and the actual name of the movie. We don't need that obviously for the model, but it's just going to make it a bit more fun to interpret later. So this is called ratings. We have something called collab data loaders, so collaborative filtering data loaders. And we can get that from a data frame by passing in the data frame. And it expects a user column and an item column. So the user column is what it sounds like, the person that is rating this thing. And the item column is the product or service that they're rating. In our case, the user column is called user, so we don't have to pass that in. And the item column is called title, so we do have to pass this in because by default the user column should be called user and the item column will be called item. Give it a batch size. And as usual, we can call show batch. And so here's our data loaders, a batch of data loaders, or at least a bit of it. And so now that since we talked about the names, we actually get to see the names, which is nice. All right. So now we're going to create the user factors and movie factors, i.e. this one and this one. So the number of rows of the movie factors will be equal to the number of movies and the number of rows of the user factors will be equal to the number of users. And the number of columns will be whatever we want, however many factors we want to create. John? This might be a pertinent time to jump in with a question. Any comments about choosing the number of factors? Not really. We have defaults that we use for embeddings in Fast AI. It's a very obscure formula and people often ask me for like the mathematical derivation of where it came from. But what actually happened is I wrote down how many factors I think is appropriate for different size categories on a piece of paper at a table, or actually an Excel, and then I fitted a function to that and that's the function. So it's basically a mathematical function that fits my intuition about what works well. But it seems to work pretty well. I've seen it used in lots of other places now. Lots of papers will be like, using Fast AI's rule of thumb for embedding sizes is the formula. Cool, thank you. It's pretty fast to train these things, so you can try a few. So we've got to create, so the number of users is just the length of how many users there are, number of movies is the length of how many titles there are. So create a matrix of random numbers of users by five and movies of movies by five. And now we need to look up the index of the movie in our movie latent factor matrix. The thing is, when we've learned about deep learning, we learned that we do matrix multiplications, not look something up in a matrix in an array. So in Excel we were saying offset, which is to say find element number 14 in the table, which that's not a matrix multiply. How does that work? Well actually it is. It actually is for the same reason that we talked about here, which is we can represent find the element number one thing in this list is actually the same as multiplying by a one-hot encoded matrix. So remember how if we, let's just take off the log for a moment. Look this is returned 0.87, and particularly if I take the negative off here if I add this up. This is 0.87, which is the result of finding the index number one thing in this list. But we didn't do it that way. We did this by taking the dot product of this and this. But that's actually the same thing. Taking the dot product of a one-hot encoded vector with something is the same as looking up this index in the vector. So that means that this exercise here of looking up the 14th thing is the same as doing a matrix multiply with a one-hot encoded vector. And we can see that here, this is how we create a one-hot encoded vector of length and users in which the third element is set to 1 and everything else is 0. And if we multiply that, so at means, do you remember, matrix multiply in Python. So if we multiply that by our user factors, we get back this answer. And if we just ask for user factors number three, we get back the exact same answer. They're the same thing. So you can think of an embedding as being a computational shortcut for multiplying something by a one-hot encoded vector. And so if you think back to what we did with dummy variables, this basically means embeddings are like a cool math trick for speeding up doing matrix multipliers with dummy variables. Not just speeding up, we never even have to create the dummy variables. We never have to create the one-hot encoded vectors. We can just look up in an array. All right. So we're now ready to build a collaborative filtering model. And we're going to create one from scratch. And as we've discussed before, in PyTorch, a model is a class. And so we briefly touched on this, but I've got to touch on it again. This is how we create a class in Python. You give it a name, and then you say how to initialize it, how to construct it. So in Python, remember they call these things Dunder, whatever, this is DunderEdit. These are magic methods that Python will call for you at certain times. The method called DunderEdit is called when you create an object of this class. So we could pass it a value. And so now we set the attribute called a equal to that value. And so then later on, we could call a method called say that will say hello to whatever you passed in here. And this is what it will say. So for example, if you construct an object of type example, passing in Sylvain, self.a now equals Sylvain. So if you use the dot method, the dot say method, nice to meet you, x is now nice to meet you. So it will say hello, Sylvain, nice to meet you. So that's kind of all you need to know about object oriented programming in PyTorch to create a model. Oh, there is one more thing we need to know, sorry, which is you can put something in parentheses after your class name. And that's called the superclass. It's basically going to give you some stuff for free, give you some functionality for free. And if you create a model in PyTorch, you have to make module your superclass. This is actually fast AI's version of module, but it's nearly the same as PyTorch's. So when we create this dot product object, it's going to call done to edit. And we have to say, well, how many users are going to be in our model and how many movies and how many factors? And so we can now create an embedding of users by factors for users and an embedding of movies by factors for movies. And so then PyTorch does something quite magic, which is that if you create a dot product object like so, then you can treat it like a function. You can call it and calculate values on it. And when you do that, it's really important to know PyTorch is going to call a method called forward in your class. So this is where you put your calculation of your model. It has to be called forward and it's going to be past the object itself and the thing you're calculating on. In this case, the user and movie for a batch. So this is your batch of data. Each row will be one user and movie combination and the columns will be users and movies. So we can grab the first column. This is every row of the first column and look it up in the user factors embedding to get our users embeddings. So that is the same as doing this. Let's say this is one mini-batch. And then we do exactly the same thing for the second column, passing it into our movie factors to look up the movie embeddings. And then take the dot product. Dem equals one because we're summing across the columns for each row, we're calculating a prediction for each row. So once we've got that, we can pass it to a learner passing in our data loaders and our model and our loss function mean squared error and we can call fit and away it goes. And this by the way is running on CPU. These are very fast to run. So this is doing a hundred thousand rows in 10 seconds, which is a whole lot faster than our few dozen rows in Excel. And so you can see the loss going down. And so we've trained a model. It's not going to be a great model. And one of the problems is that, let's see if we can see this in our Excel one. Look at this one here. This prediction is bigger than five, but nothing's bigger than five. So that seems like a problem. We're predicting things that are bigger than the highest possible number. And in fact, these are very much movie enthusiasts. Nobody gave anything a one. Yeah, nobody even gave anything a one here. So do you remember when we learned about sigmoid, the idea of squishing things between zero and one, we could do stuff still without a sigmoid, but when we added a sigmoid, it trained better because the model didn't have to work so hard to get it kind of into the right zone. Now, if you think about it, if you take something and put it through a sigmoid and then model play it by five, now you've got something that's going to be between zero and five. You used to have something which was between zero and one. So we could do that. In fact, we could do that in Excel. I'll leave that as an exercise to the reader. Let's do it over here in PyTorch. So if we take the exact same class as before, and this time we call sigmoid range. And so sigmoid range is something which will take our prediction and then squash it into our range. And by default, we'll use a range of zero through to 5.5. So it can't be smaller than zero, it can't be bigger than 5.5. Why didn't I use five? That's because a sigmoid can never hit one, right? And a sigmoid times five can never hit five. But some people do give things movies five. So you want to make it a bit bigger than our highest. So this one got a loss of 0.8628. Oh, it's not better. Isn't that always the way? All right. Didn't actually help. Doesn't always. So be it. Let's keep trying to improve it. Let me show you something I noticed. Some of the users like this one. This person here just loves movies. They give nearly everything a four or five. Their worst score is a three. This person, oh, here's a one. This person's got much more range. Some things are twos, some ones, some fives. This person doesn't seem to like movies very much considering how many they watch. Nothing gets a five. They've got discerning tastes, I guess. At the moment, we don't have any way in our kind of formulation of this model to say this user tends to give low scores and this user tends to give high scores. This is nothing like that. But that would be very easy to add. Let's add one more number to our five factors, just here, for each user. And now, rather than doing just the matrix multiply, let's add this number to it, H19. And so for this one, let's add I19 to it. So I've got it wrong. This one here, so this row here, we're going to add to each rating. And then we're going to do the same thing here. Each movie's now got an extra number here. So again, we're going to add A26. So it's our matrix multiplication plus, we call it the bias, the user bias plus the movie bias. So effectively, that's like making it so we don't have an intercept of zero anymore. And so if we now train this model, data, solver, solve. So previously, we got to 0.42. And so we're going to let that go along for a while. And then let's also go back and look at the PyTorch version. So for PyTorch now, we're going to have a user bias, which is an embedding of end users by one. Remember, there was just one number for each user. And movie bias is an embedding of end movies, also by one. And so we can now look up the user embedding, the movie embedding, do the dot product, and then look up the user bias and the movie bias and add them. Chuck that through the sigmoid. Let's train that, see if we beat 0.865. Wow, we're not training very well, are we? Still not too great, 0.894. I think Excel normally does do better though. Let's see. OK, Excel. Oh, Excel's done a lot better. It's gone from 0.42 to 0.35. OK, so what happened here? Why did it get worse? Well, look at this. The valid loss got better, and then it started getting worse again. So we think we might be overfitting, which we have got a lot of parameters in our embeddings. So how do we avoid overfitting? So a classic way to avoid overfitting is to use something called weight decay, also known as L2 regularization, which sounds much more fancy. What we're going to do is when we compute the gradients, we're going to first add to our loss function the sum of the weights squared. This is something you should go back and add to your Titanic model, not that it's overfitting, but just to try it. So previously, our gradients have just been, and our loss function has just been about the difference between our predictions and our actuals. And so our gradients were based on the derivative of that with respect to the coefficients. But we're saying now let's add the sum of the square of the weights times sum small number. So what would make that loss function go down? That loss function would go down if we reduce our weights. For example, if we reduce all of our weights to zero, I should say we reduce the magnitude of our weights. If we reduce them all to zero, that part of the loss function will be zero, because the sum of zero squared is zero. Now problem is, if our weights are all zero, our model doesn't do anything, right? So it would have crappy predictions. So it would want to increase the weights, so that's actually predicting something useful. But if it increases the weights too much, then it starts overfitting. So how is it going to actually get the lowest possible value of the loss function? By finding the right mix. Weights not too high, but high enough to be useful at predicting. If there's some parameter that's not useful, for example, say we asked for five factors and we only need four, it can just set the weights for the fifth factor to zero. And then problem solved. It won't be used to predict anything, but it also won't contribute to our weight decay part. So previously we had something calculating the loss function, so now we're going to do exactly the same thing, but we're going to square the parameters, we're going to sum them up, and we're going to multiply them by some small number, like 0.01 or 0.001. And in fact, we don't even need to do this, because remember, the whole purpose of the loss is to take its gradient, right? And to print it out. The gradient of parameters squared is two times parameters. It's okay if you don't remember that from high school, but you can take my word for it. The gradient of y equals x squared is 2x. So actually all we need to do is take our gradient and add the weight decay coefficient, 0.01 or whatever, times two times parameters. And given this is just some number we get to pick, we may as well fold the two into it and just get rid of it. So when you call fit, you can pass in a WD parameter, which does, adds this times the parameters to the gradient for you. And so that's going to ask the model, it's going to say to the model, please don't make the weights any bigger than they have to be. And yay, finally, our loss actually improved. Okay, you can see it getting better and better. In fast AI applications like vision, we try to set this for you appropriately. And we generally do a reasonably good job. Just the defaults are normally fine. But in things like tabular and collaborative filtering, we don't really know enough about your data to know what to use here. So you should just try a few things. Let's try a few multiples of 10. Start at 0.1 and then divide by 10 a few times, you know, and just see which one gives you the best result. So this is called regularization. So regularization is about making your model no more complex than it has to be, right? It has a lower capacity. And so the higher the weights, the more they're moving the model around, right? So we want to keep the weights down, but not so far down that they don't make good predictions. And so the value of this, if it's higher, will keep the weights down more, it will reduce overfitting, but it will also reduce the capacity of your model to make good predictions. And if it's lower, it increases the capacity of model and increases overfitting. All right, I'm going to take this bit for next time. Before we wrap up, John, are there any more questions? Yeah, there are some from back at the start of the collaborative filtering. So we had a bit of a conversation a while back about the size of the embedding vectors. And you talked about your fast AI rule of thumb. So there was a question if anyone has ever done the kind of a hyperparameter search and exploration for embeddings. I mean, people often will do a hyperparameter search for sure. People will often do a hyperparameter search for their model. But I haven't seen any other rules other than my rule of thumb. Right, so not productively to your knowledge. Oh, productively for an individual model that somebody's building. And then there's a question here from Zakiya, which I didn't quite wrap my head around. So Zakiya, if you want to maybe clarify in the chat as well, but can recommendation systems be built based on average ratings of users experience rather than collaborative filtering? Not really. Right. I mean, if you've got lots of metadata, you could. Right. So if you've got lots of information about demographic data about where the user is from and what loyalty scheme results they've had and blah, blah, blah. And then for products, there's metadata about that as well. Then sure, averages would be fine. But if all you've got is kind of purchasing history, then you really want the granular data. Otherwise, how could you say like, they like this movie, this movie and this movie. Therefore, they might also like that movie. Or you've got it's like, oh, they kind of like movies. There's just not enough information there. Yeah, great. That's about it. Thanks. Okay, great. All right. Thanks, everybody. We'll see you next time for our last lesson.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 9.28, "text": " Welcome to lesson seven, the penultimate lesson of Practical Deep Learning for Coders, part", "tokens": [4027, 281, 6898, 3407, 11, 264, 3435, 723, 2905, 6898, 295, 19170, 804, 14895, 15205, 337, 383, 378, 433, 11, 644], "temperature": 0.0, "avg_logprob": -0.21468353271484375, "compression_ratio": 1.4682080924855492, "no_speech_prob": 0.018253877758979797}, {"id": 1, "seek": 0, "start": 9.28, "end": 12.92, "text": " one.", "tokens": [472, 13], "temperature": 0.0, "avg_logprob": -0.21468353271484375, "compression_ratio": 1.4682080924855492, "no_speech_prob": 0.018253877758979797}, {"id": 2, "seek": 0, "start": 12.92, "end": 19.16, "text": " And today we're going to be digging into what's inside a neural net.", "tokens": [400, 965, 321, 434, 516, 281, 312, 17343, 666, 437, 311, 1854, 257, 18161, 2533, 13], "temperature": 0.0, "avg_logprob": -0.21468353271484375, "compression_ratio": 1.4682080924855492, "no_speech_prob": 0.018253877758979797}, {"id": 3, "seek": 0, "start": 19.16, "end": 27.12, "text": " We've already seen what's inside the most basic possible neural net, which is a sandwich", "tokens": [492, 600, 1217, 1612, 437, 311, 1854, 264, 881, 3875, 1944, 18161, 2533, 11, 597, 307, 257, 11141], "temperature": 0.0, "avg_logprob": -0.21468353271484375, "compression_ratio": 1.4682080924855492, "no_speech_prob": 0.018253877758979797}, {"id": 4, "seek": 2712, "start": 27.12, "end": 36.52, "text": " of fully connected layers or linear layers and relues.", "tokens": [295, 4498, 4582, 7914, 420, 8213, 7914, 293, 1039, 1247, 13], "temperature": 0.0, "avg_logprob": -0.141927567081175, "compression_ratio": 1.6862745098039216, "no_speech_prob": 0.00014648606884293258}, {"id": 5, "seek": 2712, "start": 36.52, "end": 39.52, "text": " And so we built that from scratch.", "tokens": [400, 370, 321, 3094, 300, 490, 8459, 13], "temperature": 0.0, "avg_logprob": -0.141927567081175, "compression_ratio": 1.6862745098039216, "no_speech_prob": 0.00014648606884293258}, {"id": 6, "seek": 2712, "start": 39.52, "end": 43.6, "text": " But there's a lot of tweaks that we can do.", "tokens": [583, 456, 311, 257, 688, 295, 46664, 300, 321, 393, 360, 13], "temperature": 0.0, "avg_logprob": -0.141927567081175, "compression_ratio": 1.6862745098039216, "no_speech_prob": 0.00014648606884293258}, {"id": 7, "seek": 2712, "start": 43.6, "end": 48.82, "text": " And so most of the tweaks actually that we probably care about are the tweaking the very", "tokens": [400, 370, 881, 295, 264, 46664, 767, 300, 321, 1391, 1127, 466, 366, 264, 6986, 2456, 264, 588], "temperature": 0.0, "avg_logprob": -0.141927567081175, "compression_ratio": 1.6862745098039216, "no_speech_prob": 0.00014648606884293258}, {"id": 8, "seek": 2712, "start": 48.82, "end": 55.980000000000004, "text": " first layer or the very last layer.", "tokens": [700, 4583, 420, 264, 588, 1036, 4583, 13], "temperature": 0.0, "avg_logprob": -0.141927567081175, "compression_ratio": 1.6862745098039216, "no_speech_prob": 0.00014648606884293258}, {"id": 9, "seek": 5598, "start": 55.98, "end": 58.16, "text": " So that's where we'll focus.", "tokens": [407, 300, 311, 689, 321, 603, 1879, 13], "temperature": 0.0, "avg_logprob": -0.13160816591177413, "compression_ratio": 1.4516129032258065, "no_speech_prob": 3.3717551559675485e-05}, {"id": 10, "seek": 5598, "start": 58.16, "end": 62.72, "text": " But over the next couple of weeks we'll look at some of the tricks we can do inside as", "tokens": [583, 670, 264, 958, 1916, 295, 3259, 321, 603, 574, 412, 512, 295, 264, 11733, 321, 393, 360, 1854, 382], "temperature": 0.0, "avg_logprob": -0.13160816591177413, "compression_ratio": 1.4516129032258065, "no_speech_prob": 3.3717551559675485e-05}, {"id": 11, "seek": 5598, "start": 62.72, "end": 65.72, "text": " well.", "tokens": [731, 13], "temperature": 0.0, "avg_logprob": -0.13160816591177413, "compression_ratio": 1.4516129032258065, "no_speech_prob": 3.3717551559675485e-05}, {"id": 12, "seek": 5598, "start": 65.72, "end": 74.24, "text": " So I'm going to do this through the lens of the patty, rice patty competition we've been", "tokens": [407, 286, 478, 516, 281, 360, 341, 807, 264, 6765, 295, 264, 1947, 874, 11, 5090, 1947, 874, 6211, 321, 600, 668], "temperature": 0.0, "avg_logprob": -0.13160816591177413, "compression_ratio": 1.4516129032258065, "no_speech_prob": 3.3717551559675485e-05}, {"id": 13, "seek": 5598, "start": 74.24, "end": 77.44, "text": " talking about.", "tokens": [1417, 466, 13], "temperature": 0.0, "avg_logprob": -0.13160816591177413, "compression_ratio": 1.4516129032258065, "no_speech_prob": 3.3717551559675485e-05}, {"id": 14, "seek": 7744, "start": 77.44, "end": 90.92, "text": " And we got to a point where, let's have a look.", "tokens": [400, 321, 658, 281, 257, 935, 689, 11, 718, 311, 362, 257, 574, 13], "temperature": 0.0, "avg_logprob": -0.16481217278374566, "compression_ratio": 1.2053571428571428, "no_speech_prob": 1.678996000009647e-06}, {"id": 15, "seek": 7744, "start": 90.92, "end": 95.0, "text": " So we created a conv-next model.", "tokens": [407, 321, 2942, 257, 3754, 12, 716, 734, 2316, 13], "temperature": 0.0, "avg_logprob": -0.16481217278374566, "compression_ratio": 1.2053571428571428, "no_speech_prob": 1.678996000009647e-06}, {"id": 16, "seek": 7744, "start": 95.0, "end": 101.12, "text": " We tried a few different types of basic preprocessing.", "tokens": [492, 3031, 257, 1326, 819, 3467, 295, 3875, 2666, 340, 780, 278, 13], "temperature": 0.0, "avg_logprob": -0.16481217278374566, "compression_ratio": 1.2053571428571428, "no_speech_prob": 1.678996000009647e-06}, {"id": 17, "seek": 10112, "start": 101.12, "end": 110.92, "text": " We added test time augmentation, and then we scaled that up to larger images and rectangular", "tokens": [492, 3869, 1500, 565, 14501, 19631, 11, 293, 550, 321, 36039, 300, 493, 281, 4833, 5267, 293, 31167], "temperature": 0.0, "avg_logprob": -0.11632412235911299, "compression_ratio": 1.3076923076923077, "no_speech_prob": 2.4059943370957626e-06}, {"id": 18, "seek": 10112, "start": 110.92, "end": 116.44, "text": " images.", "tokens": [5267, 13], "temperature": 0.0, "avg_logprob": -0.11632412235911299, "compression_ratio": 1.3076923076923077, "no_speech_prob": 2.4059943370957626e-06}, {"id": 19, "seek": 10112, "start": 116.44, "end": 124.2, "text": " And that got us into the top 25% of the competition.", "tokens": [400, 300, 658, 505, 666, 264, 1192, 3552, 4, 295, 264, 6211, 13], "temperature": 0.0, "avg_logprob": -0.11632412235911299, "compression_ratio": 1.3076923076923077, "no_speech_prob": 2.4059943370957626e-06}, {"id": 20, "seek": 12420, "start": 124.2, "end": 132.64000000000001, "text": " So that's part two of the so-called road to the top series, which is increasingly misnamed", "tokens": [407, 300, 311, 644, 732, 295, 264, 370, 12, 11880, 3060, 281, 264, 1192, 2638, 11, 597, 307, 12980, 3346, 33465], "temperature": 0.0, "avg_logprob": -0.10903380467341496, "compression_ratio": 1.4206896551724137, "no_speech_prob": 3.288326297479216e-06}, {"id": 21, "seek": 12420, "start": 132.64000000000001, "end": 137.6, "text": " since we've been presenting these notebooks.", "tokens": [1670, 321, 600, 668, 15578, 613, 43782, 13], "temperature": 0.0, "avg_logprob": -0.10903380467341496, "compression_ratio": 1.4206896551724137, "no_speech_prob": 3.288326297479216e-06}, {"id": 22, "seek": 12420, "start": 137.6, "end": 142.52, "text": " More and more of our students have been passing me on the leaderboard.", "tokens": [5048, 293, 544, 295, 527, 1731, 362, 668, 8437, 385, 322, 264, 5263, 3787, 13], "temperature": 0.0, "avg_logprob": -0.10903380467341496, "compression_ratio": 1.4206896551724137, "no_speech_prob": 3.288326297479216e-06}, {"id": 23, "seek": 14252, "start": 142.52, "end": 155.20000000000002, "text": " So currently first and second place are both people from this class, Kurian and Nick.", "tokens": [407, 4362, 700, 293, 1150, 1081, 366, 1293, 561, 490, 341, 1508, 11, 16481, 952, 293, 9449, 13], "temperature": 0.0, "avg_logprob": -0.15116768223898752, "compression_ratio": 1.303448275862069, "no_speech_prob": 1.0608244338072836e-05}, {"id": 24, "seek": 14252, "start": 155.20000000000002, "end": 156.20000000000002, "text": " Go to hell.", "tokens": [1037, 281, 4921, 13], "temperature": 0.0, "avg_logprob": -0.15116768223898752, "compression_ratio": 1.303448275862069, "no_speech_prob": 1.0608244338072836e-05}, {"id": 25, "seek": 14252, "start": 156.20000000000002, "end": 159.52, "text": " You're in my target.", "tokens": [509, 434, 294, 452, 3779, 13], "temperature": 0.0, "avg_logprob": -0.15116768223898752, "compression_ratio": 1.303448275862069, "no_speech_prob": 1.0608244338072836e-05}, {"id": 26, "seek": 14252, "start": 159.52, "end": 163.86, "text": " And leave my class immediately.", "tokens": [400, 1856, 452, 1508, 4258, 13], "temperature": 0.0, "avg_logprob": -0.15116768223898752, "compression_ratio": 1.303448275862069, "no_speech_prob": 1.0608244338072836e-05}, {"id": 27, "seek": 14252, "start": 163.86, "end": 164.92000000000002, "text": " And congratulations.", "tokens": [400, 13568, 13], "temperature": 0.0, "avg_logprob": -0.15116768223898752, "compression_ratio": 1.303448275862069, "no_speech_prob": 1.0608244338072836e-05}, {"id": 28, "seek": 14252, "start": 164.92000000000002, "end": 167.28, "text": " Good luck to you.", "tokens": [2205, 3668, 281, 291, 13], "temperature": 0.0, "avg_logprob": -0.15116768223898752, "compression_ratio": 1.303448275862069, "no_speech_prob": 1.0608244338072836e-05}, {"id": 29, "seek": 16728, "start": 167.28, "end": 176.2, "text": " So in part three, I'm going to show you a really interesting trick, a very simple trick", "tokens": [407, 294, 644, 1045, 11, 286, 478, 516, 281, 855, 291, 257, 534, 1880, 4282, 11, 257, 588, 2199, 4282], "temperature": 0.0, "avg_logprob": -0.1338507100155479, "compression_ratio": 1.7117903930131004, "no_speech_prob": 4.831256956094876e-05}, {"id": 30, "seek": 16728, "start": 176.2, "end": 179.84, "text": " for scaling up these models further.", "tokens": [337, 21589, 493, 613, 5245, 3052, 13], "temperature": 0.0, "avg_logprob": -0.1338507100155479, "compression_ratio": 1.7117903930131004, "no_speech_prob": 4.831256956094876e-05}, {"id": 31, "seek": 16728, "start": 179.84, "end": 183.76, "text": " What you'll discover if you've tried to use larger models, so you can replace the word", "tokens": [708, 291, 603, 4411, 498, 291, 600, 3031, 281, 764, 4833, 5245, 11, 370, 291, 393, 7406, 264, 1349], "temperature": 0.0, "avg_logprob": -0.1338507100155479, "compression_ratio": 1.7117903930131004, "no_speech_prob": 4.831256956094876e-05}, {"id": 32, "seek": 16728, "start": 183.76, "end": 188.96, "text": " small with the word large in those architectures and try to train a larger model.", "tokens": [1359, 365, 264, 1349, 2416, 294, 729, 6331, 1303, 293, 853, 281, 3847, 257, 4833, 2316, 13], "temperature": 0.0, "avg_logprob": -0.1338507100155479, "compression_ratio": 1.7117903930131004, "no_speech_prob": 4.831256956094876e-05}, {"id": 33, "seek": 16728, "start": 188.96, "end": 191.32, "text": " A larger model has more parameters.", "tokens": [316, 4833, 2316, 575, 544, 9834, 13], "temperature": 0.0, "avg_logprob": -0.1338507100155479, "compression_ratio": 1.7117903930131004, "no_speech_prob": 4.831256956094876e-05}, {"id": 34, "seek": 16728, "start": 191.32, "end": 196.24, "text": " More parameters means it can find more tricky little features.", "tokens": [5048, 9834, 1355, 309, 393, 915, 544, 12414, 707, 4122, 13], "temperature": 0.0, "avg_logprob": -0.1338507100155479, "compression_ratio": 1.7117903930131004, "no_speech_prob": 4.831256956094876e-05}, {"id": 35, "seek": 19624, "start": 196.24, "end": 201.36, "text": " And broadly speaking, models with more parameters therefore ought to be more accurate.", "tokens": [400, 19511, 4124, 11, 5245, 365, 544, 9834, 4412, 13416, 281, 312, 544, 8559, 13], "temperature": 0.0, "avg_logprob": -0.12189072370529175, "compression_ratio": 1.6610878661087867, "no_speech_prob": 8.089934271993116e-05}, {"id": 36, "seek": 19624, "start": 201.36, "end": 209.12, "text": " Problem is that those activations, or more specifically the gradients that have to be", "tokens": [11676, 307, 300, 729, 2430, 763, 11, 420, 544, 4682, 264, 2771, 2448, 300, 362, 281, 312], "temperature": 0.0, "avg_logprob": -0.12189072370529175, "compression_ratio": 1.6610878661087867, "no_speech_prob": 8.089934271993116e-05}, {"id": 37, "seek": 19624, "start": 209.12, "end": 214.0, "text": " calculated choose up memory on your GPU.", "tokens": [15598, 2826, 493, 4675, 322, 428, 18407, 13], "temperature": 0.0, "avg_logprob": -0.12189072370529175, "compression_ratio": 1.6610878661087867, "no_speech_prob": 8.089934271993116e-05}, {"id": 38, "seek": 19624, "start": 214.0, "end": 220.28, "text": " And your GPU is not as clever as your CPU at kind of sticking stuff it doesn't need right", "tokens": [400, 428, 18407, 307, 406, 382, 13494, 382, 428, 13199, 412, 733, 295, 13465, 1507, 309, 1177, 380, 643, 558], "temperature": 0.0, "avg_logprob": -0.12189072370529175, "compression_ratio": 1.6610878661087867, "no_speech_prob": 8.089934271993116e-05}, {"id": 39, "seek": 19624, "start": 220.28, "end": 222.60000000000002, "text": " now into virtual memory on the hard drive.", "tokens": [586, 666, 6374, 4675, 322, 264, 1152, 3332, 13], "temperature": 0.0, "avg_logprob": -0.12189072370529175, "compression_ratio": 1.6610878661087867, "no_speech_prob": 8.089934271993116e-05}, {"id": 40, "seek": 19624, "start": 222.60000000000002, "end": 225.76000000000002, "text": " When it runs out of memory, it runs out of memory.", "tokens": [1133, 309, 6676, 484, 295, 4675, 11, 309, 6676, 484, 295, 4675, 13], "temperature": 0.0, "avg_logprob": -0.12189072370529175, "compression_ratio": 1.6610878661087867, "no_speech_prob": 8.089934271993116e-05}, {"id": 41, "seek": 22576, "start": 225.76, "end": 229.56, "text": " And it also doesn't do such a good job as your CPU at kind of shuffling things around", "tokens": [400, 309, 611, 1177, 380, 360, 1270, 257, 665, 1691, 382, 428, 13199, 412, 733, 295, 402, 1245, 1688, 721, 926], "temperature": 0.0, "avg_logprob": -0.10905931528332163, "compression_ratio": 1.5798319327731092, "no_speech_prob": 2.586461960163433e-05}, {"id": 42, "seek": 22576, "start": 229.56, "end": 230.56, "text": " to try and find memory.", "tokens": [281, 853, 293, 915, 4675, 13], "temperature": 0.0, "avg_logprob": -0.10905931528332163, "compression_ratio": 1.5798319327731092, "no_speech_prob": 2.586461960163433e-05}, {"id": 43, "seek": 22576, "start": 230.56, "end": 236.67999999999998, "text": " It just allocates blocks of memory and it stays allocated until you remove them.", "tokens": [467, 445, 12660, 1024, 8474, 295, 4675, 293, 309, 10834, 29772, 1826, 291, 4159, 552, 13], "temperature": 0.0, "avg_logprob": -0.10905931528332163, "compression_ratio": 1.5798319327731092, "no_speech_prob": 2.586461960163433e-05}, {"id": 44, "seek": 22576, "start": 236.67999999999998, "end": 244.0, "text": " So if you try to scale up your models to bigger models, unless you have very expensive GPUs,", "tokens": [407, 498, 291, 853, 281, 4373, 493, 428, 5245, 281, 3801, 5245, 11, 5969, 291, 362, 588, 5124, 18407, 82, 11], "temperature": 0.0, "avg_logprob": -0.10905931528332163, "compression_ratio": 1.5798319327731092, "no_speech_prob": 2.586461960163433e-05}, {"id": 45, "seek": 22576, "start": 244.0, "end": 247.84, "text": " you will run out of space.", "tokens": [291, 486, 1190, 484, 295, 1901, 13], "temperature": 0.0, "avg_logprob": -0.10905931528332163, "compression_ratio": 1.5798319327731092, "no_speech_prob": 2.586461960163433e-05}, {"id": 46, "seek": 22576, "start": 247.84, "end": 249.26, "text": " And you'll get an error.", "tokens": [400, 291, 603, 483, 364, 6713, 13], "temperature": 0.0, "avg_logprob": -0.10905931528332163, "compression_ratio": 1.5798319327731092, "no_speech_prob": 2.586461960163433e-05}, {"id": 47, "seek": 22576, "start": 249.26, "end": 252.12, "text": " Something like CUDA out of memory error.", "tokens": [6595, 411, 29777, 7509, 484, 295, 4675, 6713, 13], "temperature": 0.0, "avg_logprob": -0.10905931528332163, "compression_ratio": 1.5798319327731092, "no_speech_prob": 2.586461960163433e-05}, {"id": 48, "seek": 25212, "start": 252.12, "end": 258.12, "text": " So if that happens, first thing I mentioned is it's not a bad idea to restart your notebook", "tokens": [407, 498, 300, 2314, 11, 700, 551, 286, 2835, 307, 309, 311, 406, 257, 1578, 1558, 281, 21022, 428, 21060], "temperature": 0.0, "avg_logprob": -0.1696788743994702, "compression_ratio": 1.5588235294117647, "no_speech_prob": 1.2411090210662223e-05}, {"id": 49, "seek": 25212, "start": 258.12, "end": 262.32, "text": " because that can be a bit tricky to recover from otherwise.", "tokens": [570, 300, 393, 312, 257, 857, 12414, 281, 8114, 490, 5911, 13], "temperature": 0.0, "avg_logprob": -0.1696788743994702, "compression_ratio": 1.5588235294117647, "no_speech_prob": 1.2411090210662223e-05}, {"id": 50, "seek": 25212, "start": 262.32, "end": 267.64, "text": " And then I'll show you how you can use as large a model as you like.", "tokens": [400, 550, 286, 603, 855, 291, 577, 291, 393, 764, 382, 2416, 257, 2316, 382, 291, 411, 13], "temperature": 0.0, "avg_logprob": -0.1696788743994702, "compression_ratio": 1.5588235294117647, "no_speech_prob": 1.2411090210662223e-05}, {"id": 51, "seek": 25212, "start": 267.64, "end": 277.2, "text": " Almost as you know, basically you'll be able to use a X large model on Kaggle.", "tokens": [12627, 382, 291, 458, 11, 1936, 291, 603, 312, 1075, 281, 764, 257, 1783, 2416, 2316, 322, 48751, 22631, 13], "temperature": 0.0, "avg_logprob": -0.1696788743994702, "compression_ratio": 1.5588235294117647, "no_speech_prob": 1.2411090210662223e-05}, {"id": 52, "seek": 25212, "start": 277.2, "end": 280.96, "text": " So let me explain.", "tokens": [407, 718, 385, 2903, 13], "temperature": 0.0, "avg_logprob": -0.1696788743994702, "compression_ratio": 1.5588235294117647, "no_speech_prob": 1.2411090210662223e-05}, {"id": 53, "seek": 28096, "start": 280.96, "end": 288.08, "text": " Now when you run something on Kaggle, like actually on Kaggle, you're generally going", "tokens": [823, 562, 291, 1190, 746, 322, 48751, 22631, 11, 411, 767, 322, 48751, 22631, 11, 291, 434, 5101, 516], "temperature": 0.0, "avg_logprob": -0.14020258709064964, "compression_ratio": 1.7822222222222222, "no_speech_prob": 3.3733798773027956e-05}, {"id": 54, "seek": 28096, "start": 288.08, "end": 291.84, "text": " to be on a 16 gig GPU.", "tokens": [281, 312, 322, 257, 3165, 8741, 18407, 13], "temperature": 0.0, "avg_logprob": -0.14020258709064964, "compression_ratio": 1.7822222222222222, "no_speech_prob": 3.3733798773027956e-05}, {"id": 55, "seek": 28096, "start": 291.84, "end": 293.68, "text": " And you don't have to run stuff on Kaggle.", "tokens": [400, 291, 500, 380, 362, 281, 1190, 1507, 322, 48751, 22631, 13], "temperature": 0.0, "avg_logprob": -0.14020258709064964, "compression_ratio": 1.7822222222222222, "no_speech_prob": 3.3733798773027956e-05}, {"id": 56, "seek": 28096, "start": 293.68, "end": 298.12, "text": " You can run stuff on your home computer or paper space or whatever.", "tokens": [509, 393, 1190, 1507, 322, 428, 1280, 3820, 420, 3035, 1901, 420, 2035, 13], "temperature": 0.0, "avg_logprob": -0.14020258709064964, "compression_ratio": 1.7822222222222222, "no_speech_prob": 3.3733798773027956e-05}, {"id": 57, "seek": 28096, "start": 298.12, "end": 302.64, "text": " But sometimes if you want to do Kaggle competitions, sometimes you have to run stuff on Kaggle", "tokens": [583, 2171, 498, 291, 528, 281, 360, 48751, 22631, 26185, 11, 2171, 291, 362, 281, 1190, 1507, 322, 48751, 22631], "temperature": 0.0, "avg_logprob": -0.14020258709064964, "compression_ratio": 1.7822222222222222, "no_speech_prob": 3.3733798773027956e-05}, {"id": 58, "seek": 28096, "start": 302.64, "end": 306.64, "text": " because a lot of competitions are what they call code competitions, which is where the", "tokens": [570, 257, 688, 295, 26185, 366, 437, 436, 818, 3089, 26185, 11, 597, 307, 689, 264], "temperature": 0.0, "avg_logprob": -0.14020258709064964, "compression_ratio": 1.7822222222222222, "no_speech_prob": 3.3733798773027956e-05}, {"id": 59, "seek": 30664, "start": 306.64, "end": 311.0, "text": " only way to submit is from a notebook that you're running on Kaggle.", "tokens": [787, 636, 281, 10315, 307, 490, 257, 21060, 300, 291, 434, 2614, 322, 48751, 22631, 13], "temperature": 0.0, "avg_logprob": -0.10682861103731044, "compression_ratio": 1.5904761904761904, "no_speech_prob": 1.6963356756605208e-05}, {"id": 60, "seek": 30664, "start": 311.0, "end": 321.4, "text": " And then a second reason to run stuff on Kaggle is that your notebooks will appear with the", "tokens": [400, 550, 257, 1150, 1778, 281, 1190, 1507, 322, 48751, 22631, 307, 300, 428, 43782, 486, 4204, 365, 264], "temperature": 0.0, "avg_logprob": -0.10682861103731044, "compression_ratio": 1.5904761904761904, "no_speech_prob": 1.6963356756605208e-05}, {"id": 61, "seek": 30664, "start": 321.4, "end": 322.68, "text": " leaderboard score on them.", "tokens": [5263, 3787, 6175, 322, 552, 13], "temperature": 0.0, "avg_logprob": -0.10682861103731044, "compression_ratio": 1.5904761904761904, "no_speech_prob": 1.6963356756605208e-05}, {"id": 62, "seek": 30664, "start": 322.68, "end": 327.0, "text": " And so people can see which notebooks are actually good.", "tokens": [400, 370, 561, 393, 536, 597, 43782, 366, 767, 665, 13], "temperature": 0.0, "avg_logprob": -0.10682861103731044, "compression_ratio": 1.5904761904761904, "no_speech_prob": 1.6963356756605208e-05}, {"id": 63, "seek": 30664, "start": 327.0, "end": 330.88, "text": " And I kind of like, even in things that aren't code competitions, I love trying to be the", "tokens": [400, 286, 733, 295, 411, 11, 754, 294, 721, 300, 3212, 380, 3089, 26185, 11, 286, 959, 1382, 281, 312, 264], "temperature": 0.0, "avg_logprob": -0.10682861103731044, "compression_ratio": 1.5904761904761904, "no_speech_prob": 1.6963356756605208e-05}, {"id": 64, "seek": 33088, "start": 330.88, "end": 337.04, "text": " person who's number one on the notebook score leaderboard because that's something which,", "tokens": [954, 567, 311, 1230, 472, 322, 264, 21060, 6175, 5263, 3787, 570, 300, 311, 746, 597, 11], "temperature": 0.0, "avg_logprob": -0.16231491921961994, "compression_ratio": 1.5154185022026432, "no_speech_prob": 1.6699530533514917e-05}, {"id": 65, "seek": 33088, "start": 337.04, "end": 343.08, "text": " you know, you can't just work at Nvidia and use a thousand GPUs and win a competition", "tokens": [291, 458, 11, 291, 393, 380, 445, 589, 412, 46284, 293, 764, 257, 4714, 18407, 82, 293, 1942, 257, 6211], "temperature": 0.0, "avg_logprob": -0.16231491921961994, "compression_ratio": 1.5154185022026432, "no_speech_prob": 1.6699530533514917e-05}, {"id": 66, "seek": 33088, "start": 343.08, "end": 346.84, "text": " through a combination of skill and brute force.", "tokens": [807, 257, 6562, 295, 5389, 293, 47909, 3464, 13], "temperature": 0.0, "avg_logprob": -0.16231491921961994, "compression_ratio": 1.5154185022026432, "no_speech_prob": 1.6699530533514917e-05}, {"id": 67, "seek": 33088, "start": 346.84, "end": 351.76, "text": " Everybody has the same nine hour timeout to work with.", "tokens": [7646, 575, 264, 912, 4949, 1773, 565, 346, 281, 589, 365, 13], "temperature": 0.0, "avg_logprob": -0.16231491921961994, "compression_ratio": 1.5154185022026432, "no_speech_prob": 1.6699530533514917e-05}, {"id": 68, "seek": 33088, "start": 351.76, "end": 357.32, "text": " So I think it's a good way of keeping the things a bit more fair.", "tokens": [407, 286, 519, 309, 311, 257, 665, 636, 295, 5145, 264, 721, 257, 857, 544, 3143, 13], "temperature": 0.0, "avg_logprob": -0.16231491921961994, "compression_ratio": 1.5154185022026432, "no_speech_prob": 1.6699530533514917e-05}, {"id": 69, "seek": 35732, "start": 357.32, "end": 362.71999999999997, "text": " Now, so my home GPU has 24 gig.", "tokens": [823, 11, 370, 452, 1280, 18407, 575, 4022, 8741, 13], "temperature": 0.0, "avg_logprob": -0.11380069989424485, "compression_ratio": 1.5833333333333333, "no_speech_prob": 1.0951675903925207e-05}, {"id": 70, "seek": 35732, "start": 362.71999999999997, "end": 367.8, "text": " So I wanted to find out what can I get away with in 16 gig.", "tokens": [407, 286, 1415, 281, 915, 484, 437, 393, 286, 483, 1314, 365, 294, 3165, 8741, 13], "temperature": 0.0, "avg_logprob": -0.11380069989424485, "compression_ratio": 1.5833333333333333, "no_speech_prob": 1.0951675903925207e-05}, {"id": 71, "seek": 35732, "start": 367.8, "end": 372.84, "text": " And the way I did that is I think a useful thing to discuss because again, it's all about", "tokens": [400, 264, 636, 286, 630, 300, 307, 286, 519, 257, 4420, 551, 281, 2248, 570, 797, 11, 309, 311, 439, 466], "temperature": 0.0, "avg_logprob": -0.11380069989424485, "compression_ratio": 1.5833333333333333, "no_speech_prob": 1.0951675903925207e-05}, {"id": 72, "seek": 35732, "start": 372.84, "end": 374.8, "text": " fast iteration.", "tokens": [2370, 24784, 13], "temperature": 0.0, "avg_logprob": -0.11380069989424485, "compression_ratio": 1.5833333333333333, "no_speech_prob": 1.0951675903925207e-05}, {"id": 73, "seek": 35732, "start": 374.8, "end": 382.44, "text": " So I wanted to really quickly find out how much memory will a model use.", "tokens": [407, 286, 1415, 281, 534, 2661, 915, 484, 577, 709, 4675, 486, 257, 2316, 764, 13], "temperature": 0.0, "avg_logprob": -0.11380069989424485, "compression_ratio": 1.5833333333333333, "no_speech_prob": 1.0951675903925207e-05}, {"id": 74, "seek": 35732, "start": 382.44, "end": 386.24, "text": " So there's a really quick hacky way I can do that, which is to say, okay, for the training", "tokens": [407, 456, 311, 257, 534, 1702, 10339, 88, 636, 286, 393, 360, 300, 11, 597, 307, 281, 584, 11, 1392, 11, 337, 264, 3097], "temperature": 0.0, "avg_logprob": -0.11380069989424485, "compression_ratio": 1.5833333333333333, "no_speech_prob": 1.0951675903925207e-05}, {"id": 75, "seek": 38624, "start": 386.24, "end": 392.40000000000003, "text": " set, let's not use, so here's the value counts of labels or the number of each disease.", "tokens": [992, 11, 718, 311, 406, 764, 11, 370, 510, 311, 264, 2158, 14893, 295, 16949, 420, 264, 1230, 295, 1184, 4752, 13], "temperature": 0.0, "avg_logprob": -0.13125973232721877, "compression_ratio": 1.7, "no_speech_prob": 1.7502128685009666e-05}, {"id": 76, "seek": 38624, "start": 392.40000000000003, "end": 394.72, "text": " Let's not look at all the diseases.", "tokens": [961, 311, 406, 574, 412, 439, 264, 11044, 13], "temperature": 0.0, "avg_logprob": -0.13125973232721877, "compression_ratio": 1.7, "no_speech_prob": 1.7502128685009666e-05}, {"id": 77, "seek": 38624, "start": 394.72, "end": 397.96000000000004, "text": " Let's just pick one, the smallest one, right?", "tokens": [961, 311, 445, 1888, 472, 11, 264, 16998, 472, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.13125973232721877, "compression_ratio": 1.7, "no_speech_prob": 1.7502128685009666e-05}, {"id": 78, "seek": 38624, "start": 397.96000000000004, "end": 399.40000000000003, "text": " And let's make that our training set.", "tokens": [400, 718, 311, 652, 300, 527, 3097, 992, 13], "temperature": 0.0, "avg_logprob": -0.13125973232721877, "compression_ratio": 1.7, "no_speech_prob": 1.7502128685009666e-05}, {"id": 79, "seek": 38624, "start": 399.40000000000003, "end": 403.64, "text": " Our training set is the bacterial, panicle, blight images.", "tokens": [2621, 3097, 992, 307, 264, 35632, 11, 2462, 3520, 11, 888, 397, 5267, 13], "temperature": 0.0, "avg_logprob": -0.13125973232721877, "compression_ratio": 1.7, "no_speech_prob": 1.7502128685009666e-05}, {"id": 80, "seek": 38624, "start": 403.64, "end": 409.24, "text": " And now I can train a model with just 337 images without changing anything else.", "tokens": [400, 586, 286, 393, 3847, 257, 2316, 365, 445, 11816, 22, 5267, 1553, 4473, 1340, 1646, 13], "temperature": 0.0, "avg_logprob": -0.13125973232721877, "compression_ratio": 1.7, "no_speech_prob": 1.7502128685009666e-05}, {"id": 81, "seek": 38624, "start": 409.24, "end": 414.90000000000003, "text": " Not that I care about that model, but then I can see how much memory it used.", "tokens": [1726, 300, 286, 1127, 466, 300, 2316, 11, 457, 550, 286, 393, 536, 577, 709, 4675, 309, 1143, 13], "temperature": 0.0, "avg_logprob": -0.13125973232721877, "compression_ratio": 1.7, "no_speech_prob": 1.7502128685009666e-05}, {"id": 82, "seek": 41490, "start": 414.9, "end": 419.12, "text": " It's important to realize that each image you pass through is the same size, each batch", "tokens": [467, 311, 1021, 281, 4325, 300, 1184, 3256, 291, 1320, 807, 307, 264, 912, 2744, 11, 1184, 15245], "temperature": 0.0, "avg_logprob": -0.11507652423999927, "compression_ratio": 1.690217391304348, "no_speech_prob": 6.747938641638029e-06}, {"id": 83, "seek": 41490, "start": 419.12, "end": 423.64, "text": " size is the same size, so training for longer won't use more memory.", "tokens": [2744, 307, 264, 912, 2744, 11, 370, 3097, 337, 2854, 1582, 380, 764, 544, 4675, 13], "temperature": 0.0, "avg_logprob": -0.11507652423999927, "compression_ratio": 1.690217391304348, "no_speech_prob": 6.747938641638029e-06}, {"id": 84, "seek": 41490, "start": 423.64, "end": 429.67999999999995, "text": " So that'll tell us how much memory we're going to need.", "tokens": [407, 300, 603, 980, 505, 577, 709, 4675, 321, 434, 516, 281, 643, 13], "temperature": 0.0, "avg_logprob": -0.11507652423999927, "compression_ratio": 1.690217391304348, "no_speech_prob": 6.747938641638029e-06}, {"id": 85, "seek": 41490, "start": 429.67999999999995, "end": 440.08, "text": " So what I then did was I then tried training different models to see how much memory they", "tokens": [407, 437, 286, 550, 630, 390, 286, 550, 3031, 3097, 819, 5245, 281, 536, 577, 709, 4675, 436], "temperature": 0.0, "avg_logprob": -0.11507652423999927, "compression_ratio": 1.690217391304348, "no_speech_prob": 6.747938641638029e-06}, {"id": 86, "seek": 41490, "start": 440.08, "end": 441.08, "text": " used up.", "tokens": [1143, 493, 13], "temperature": 0.0, "avg_logprob": -0.11507652423999927, "compression_ratio": 1.690217391304348, "no_speech_prob": 6.747938641638029e-06}, {"id": 87, "seek": 44108, "start": 441.08, "end": 445.44, "text": " Now, what happens if we train a model, so obviously ConvNext Small doesn't use too much", "tokens": [823, 11, 437, 2314, 498, 321, 3847, 257, 2316, 11, 370, 2745, 2656, 85, 31002, 15287, 1177, 380, 764, 886, 709], "temperature": 0.0, "avg_logprob": -0.1713895578494017, "compression_ratio": 1.4805194805194806, "no_speech_prob": 7.766754606564064e-06}, {"id": 88, "seek": 44108, "start": 445.44, "end": 451.26, "text": " memory, so here's something that reports the amount of GPU memory just by basically printing", "tokens": [4675, 11, 370, 510, 311, 746, 300, 7122, 264, 2372, 295, 18407, 4675, 445, 538, 1936, 14699], "temperature": 0.0, "avg_logprob": -0.1713895578494017, "compression_ratio": 1.4805194805194806, "no_speech_prob": 7.766754606564064e-06}, {"id": 89, "seek": 44108, "start": 451.26, "end": 461.44, "text": " out CUDA's GPU processes, and you can see ConvNext Small took up 4 gig.", "tokens": [484, 29777, 7509, 311, 18407, 7555, 11, 293, 291, 393, 536, 2656, 85, 31002, 15287, 1890, 493, 1017, 8741, 13], "temperature": 0.0, "avg_logprob": -0.1713895578494017, "compression_ratio": 1.4805194805194806, "no_speech_prob": 7.766754606564064e-06}, {"id": 90, "seek": 44108, "start": 461.44, "end": 467.24, "text": " And also, this might be interesting to you, if you then call Python's garbage collection,", "tokens": [400, 611, 11, 341, 1062, 312, 1880, 281, 291, 11, 498, 291, 550, 818, 15329, 311, 14150, 5765, 11], "temperature": 0.0, "avg_logprob": -0.1713895578494017, "compression_ratio": 1.4805194805194806, "no_speech_prob": 7.766754606564064e-06}, {"id": 91, "seek": 46724, "start": 467.24, "end": 473.8, "text": " gc.collect, and then call PyTorch's empty cache, that should basically get your GPU", "tokens": [290, 66, 13, 33891, 557, 11, 293, 550, 818, 9953, 51, 284, 339, 311, 6707, 19459, 11, 300, 820, 1936, 483, 428, 18407], "temperature": 0.0, "avg_logprob": -0.11609461934942948, "compression_ratio": 1.5330396475770924, "no_speech_prob": 1.497066295996774e-05}, {"id": 92, "seek": 46724, "start": 473.8, "end": 479.12, "text": " back to a clean state of not using any more memory than it needs to when you can start", "tokens": [646, 281, 257, 2541, 1785, 295, 406, 1228, 604, 544, 4675, 813, 309, 2203, 281, 562, 291, 393, 722], "temperature": 0.0, "avg_logprob": -0.11609461934942948, "compression_ratio": 1.5330396475770924, "no_speech_prob": 1.497066295996774e-05}, {"id": 93, "seek": 46724, "start": 479.12, "end": 484.96000000000004, "text": " training the next model without restarting the kernel.", "tokens": [3097, 264, 958, 2316, 1553, 21022, 278, 264, 28256, 13], "temperature": 0.0, "avg_logprob": -0.11609461934942948, "compression_ratio": 1.5330396475770924, "no_speech_prob": 1.497066295996774e-05}, {"id": 94, "seek": 46724, "start": 484.96000000000004, "end": 489.64, "text": " So what would happen if we tried to train this little model and it crashed with a CUDA", "tokens": [407, 437, 576, 1051, 498, 321, 3031, 281, 3847, 341, 707, 2316, 293, 309, 24190, 365, 257, 29777, 7509], "temperature": 0.0, "avg_logprob": -0.11609461934942948, "compression_ratio": 1.5330396475770924, "no_speech_prob": 1.497066295996774e-05}, {"id": 95, "seek": 46724, "start": 489.64, "end": 490.64, "text": " out of memory error?", "tokens": [484, 295, 4675, 6713, 30], "temperature": 0.0, "avg_logprob": -0.11609461934942948, "compression_ratio": 1.5330396475770924, "no_speech_prob": 1.497066295996774e-05}, {"id": 96, "seek": 46724, "start": 490.64, "end": 493.24, "text": " What do we do?", "tokens": [708, 360, 321, 360, 30], "temperature": 0.0, "avg_logprob": -0.11609461934942948, "compression_ratio": 1.5330396475770924, "no_speech_prob": 1.497066295996774e-05}, {"id": 97, "seek": 49324, "start": 493.24, "end": 499.0, "text": " We can use a cool little trick called gradient accumulation.", "tokens": [492, 393, 764, 257, 1627, 707, 4282, 1219, 16235, 35647, 13], "temperature": 0.0, "avg_logprob": -0.17912451900652984, "compression_ratio": 1.769736842105263, "no_speech_prob": 1.0952685443044174e-05}, {"id": 98, "seek": 49324, "start": 499.0, "end": 501.6, "text": " What's gradient accumulation?", "tokens": [708, 311, 16235, 35647, 30], "temperature": 0.0, "avg_logprob": -0.17912451900652984, "compression_ratio": 1.769736842105263, "no_speech_prob": 1.0952685443044174e-05}, {"id": 99, "seek": 49324, "start": 501.6, "end": 503.16, "text": " So what's gradient accumulation?", "tokens": [407, 437, 311, 16235, 35647, 30], "temperature": 0.0, "avg_logprob": -0.17912451900652984, "compression_ratio": 1.769736842105263, "no_speech_prob": 1.0952685443044174e-05}, {"id": 100, "seek": 49324, "start": 503.16, "end": 508.36, "text": " Well, I added this parameter to my train method here.", "tokens": [1042, 11, 286, 3869, 341, 13075, 281, 452, 3847, 3170, 510, 13], "temperature": 0.0, "avg_logprob": -0.17912451900652984, "compression_ratio": 1.769736842105263, "no_speech_prob": 1.0952685443044174e-05}, {"id": 101, "seek": 49324, "start": 508.36, "end": 516.36, "text": " That's my train method, creates my data loaders, creates my learner, and then, depending on", "tokens": [663, 311, 452, 3847, 3170, 11, 7829, 452, 1412, 3677, 433, 11, 7829, 452, 33347, 11, 293, 550, 11, 5413, 322], "temperature": 0.0, "avg_logprob": -0.17912451900652984, "compression_ratio": 1.769736842105263, "no_speech_prob": 1.0952685443044174e-05}, {"id": 102, "seek": 51636, "start": 516.36, "end": 524.46, "text": " whether I'm fine-tuning or not, either fits or fine-tunes it.", "tokens": [1968, 286, 478, 2489, 12, 83, 37726, 420, 406, 11, 2139, 9001, 420, 2489, 12, 83, 15001, 309, 13], "temperature": 0.0, "avg_logprob": -0.13507621087760568, "compression_ratio": 1.5485232067510548, "no_speech_prob": 5.771833457401954e-06}, {"id": 103, "seek": 51636, "start": 524.46, "end": 525.46, "text": " But there's one other thing it does.", "tokens": [583, 456, 311, 472, 661, 551, 309, 775, 13], "temperature": 0.0, "avg_logprob": -0.13507621087760568, "compression_ratio": 1.5485232067510548, "no_speech_prob": 5.771833457401954e-06}, {"id": 104, "seek": 51636, "start": 525.46, "end": 527.28, "text": " It does this gradient accumulation thing.", "tokens": [467, 775, 341, 16235, 35647, 551, 13], "temperature": 0.0, "avg_logprob": -0.13507621087760568, "compression_ratio": 1.5485232067510548, "no_speech_prob": 5.771833457401954e-06}, {"id": 105, "seek": 51636, "start": 527.28, "end": 528.28, "text": " What's that about?", "tokens": [708, 311, 300, 466, 30], "temperature": 0.0, "avg_logprob": -0.13507621087760568, "compression_ratio": 1.5485232067510548, "no_speech_prob": 5.771833457401954e-06}, {"id": 106, "seek": 51636, "start": 528.28, "end": 530.6, "text": " Well, the key step is here.", "tokens": [1042, 11, 264, 2141, 1823, 307, 510, 13], "temperature": 0.0, "avg_logprob": -0.13507621087760568, "compression_ratio": 1.5485232067510548, "no_speech_prob": 5.771833457401954e-06}, {"id": 107, "seek": 51636, "start": 530.6, "end": 535.92, "text": " I set my batch size, so that's the number of images that I pass through to the GPU all", "tokens": [286, 992, 452, 15245, 2744, 11, 370, 300, 311, 264, 1230, 295, 5267, 300, 286, 1320, 807, 281, 264, 18407, 439], "temperature": 0.0, "avg_logprob": -0.13507621087760568, "compression_ratio": 1.5485232067510548, "no_speech_prob": 5.771833457401954e-06}, {"id": 108, "seek": 51636, "start": 535.92, "end": 544.48, "text": " at once, to 64, which is my default, divided by, slash slash means integer divide in Python,", "tokens": [412, 1564, 11, 281, 12145, 11, 597, 307, 452, 7576, 11, 6666, 538, 11, 17330, 17330, 1355, 24922, 9845, 294, 15329, 11], "temperature": 0.0, "avg_logprob": -0.13507621087760568, "compression_ratio": 1.5485232067510548, "no_speech_prob": 5.771833457401954e-06}, {"id": 109, "seek": 54448, "start": 544.48, "end": 546.88, "text": " divided by this number.", "tokens": [6666, 538, 341, 1230, 13], "temperature": 0.0, "avg_logprob": -0.13269036954587643, "compression_ratio": 1.6790123456790123, "no_speech_prob": 1.3006945664528757e-05}, {"id": 110, "seek": 54448, "start": 546.88, "end": 550.6800000000001, "text": " So if I pass 2, it's going to use a batch size of 32.", "tokens": [407, 498, 286, 1320, 568, 11, 309, 311, 516, 281, 764, 257, 15245, 2744, 295, 8858, 13], "temperature": 0.0, "avg_logprob": -0.13269036954587643, "compression_ratio": 1.6790123456790123, "no_speech_prob": 1.3006945664528757e-05}, {"id": 111, "seek": 54448, "start": 550.6800000000001, "end": 554.64, "text": " If I pass 4, it'll use a batch size of 16.", "tokens": [759, 286, 1320, 1017, 11, 309, 603, 764, 257, 15245, 2744, 295, 3165, 13], "temperature": 0.0, "avg_logprob": -0.13269036954587643, "compression_ratio": 1.6790123456790123, "no_speech_prob": 1.3006945664528757e-05}, {"id": 112, "seek": 54448, "start": 554.64, "end": 562.48, "text": " Now that obviously should let me cure any memory problems, use a smaller batch size,", "tokens": [823, 300, 2745, 820, 718, 385, 13698, 604, 4675, 2740, 11, 764, 257, 4356, 15245, 2744, 11], "temperature": 0.0, "avg_logprob": -0.13269036954587643, "compression_ratio": 1.6790123456790123, "no_speech_prob": 1.3006945664528757e-05}, {"id": 113, "seek": 54448, "start": 562.48, "end": 567.28, "text": " but the problem is that now the dynamics of my training are different, right?", "tokens": [457, 264, 1154, 307, 300, 586, 264, 15679, 295, 452, 3097, 366, 819, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.13269036954587643, "compression_ratio": 1.6790123456790123, "no_speech_prob": 1.3006945664528757e-05}, {"id": 114, "seek": 54448, "start": 567.28, "end": 571.6, "text": " The smaller your batch size, the more volatility there is from batch to batch, so now your", "tokens": [440, 4356, 428, 15245, 2744, 11, 264, 544, 25877, 456, 307, 490, 15245, 281, 15245, 11, 370, 586, 428], "temperature": 0.0, "avg_logprob": -0.13269036954587643, "compression_ratio": 1.6790123456790123, "no_speech_prob": 1.3006945664528757e-05}, {"id": 115, "seek": 54448, "start": 571.6, "end": 573.52, "text": " learning rates are all messed up.", "tokens": [2539, 6846, 366, 439, 16507, 493, 13], "temperature": 0.0, "avg_logprob": -0.13269036954587643, "compression_ratio": 1.6790123456790123, "no_speech_prob": 1.3006945664528757e-05}, {"id": 116, "seek": 57352, "start": 573.52, "end": 578.76, "text": " You don't want to be messing around with trying to find a different set of optimal parameters", "tokens": [509, 500, 380, 528, 281, 312, 23258, 926, 365, 1382, 281, 915, 257, 819, 992, 295, 16252, 9834], "temperature": 0.0, "avg_logprob": -0.15971348875312394, "compression_ratio": 1.5504587155963303, "no_speech_prob": 6.43890325591201e-06}, {"id": 117, "seek": 57352, "start": 578.76, "end": 584.1999999999999, "text": " for every batch size for every architecture.", "tokens": [337, 633, 15245, 2744, 337, 633, 9482, 13], "temperature": 0.0, "avg_logprob": -0.15971348875312394, "compression_ratio": 1.5504587155963303, "no_speech_prob": 6.43890325591201e-06}, {"id": 118, "seek": 57352, "start": 584.1999999999999, "end": 590.48, "text": " So what we want to do is find a way to run just, let's say accum is 2, accumulate equals", "tokens": [407, 437, 321, 528, 281, 360, 307, 915, 257, 636, 281, 1190, 445, 11, 718, 311, 584, 12989, 307, 568, 11, 33384, 6915], "temperature": 0.0, "avg_logprob": -0.15971348875312394, "compression_ratio": 1.5504587155963303, "no_speech_prob": 6.43890325591201e-06}, {"id": 119, "seek": 57352, "start": 590.48, "end": 591.48, "text": " 2.", "tokens": [568, 13], "temperature": 0.0, "avg_logprob": -0.15971348875312394, "compression_ratio": 1.5504587155963303, "no_speech_prob": 6.43890325591201e-06}, {"id": 120, "seek": 57352, "start": 591.48, "end": 595.76, "text": " Let's say we just want to run 32 images at a time through.", "tokens": [961, 311, 584, 321, 445, 528, 281, 1190, 8858, 5267, 412, 257, 565, 807, 13], "temperature": 0.0, "avg_logprob": -0.15971348875312394, "compression_ratio": 1.5504587155963303, "no_speech_prob": 6.43890325591201e-06}, {"id": 121, "seek": 57352, "start": 595.76, "end": 599.96, "text": " How do we make it behave as if it was 64 images?", "tokens": [1012, 360, 321, 652, 309, 15158, 382, 498, 309, 390, 12145, 5267, 30], "temperature": 0.0, "avg_logprob": -0.15971348875312394, "compression_ratio": 1.5504587155963303, "no_speech_prob": 6.43890325591201e-06}, {"id": 122, "seek": 59996, "start": 599.96, "end": 605.36, "text": " Well, the solution to that problem is to consider our training loop.", "tokens": [1042, 11, 264, 3827, 281, 300, 1154, 307, 281, 1949, 527, 3097, 6367, 13], "temperature": 0.0, "avg_logprob": -0.10170721521182936, "compression_ratio": 1.8063063063063063, "no_speech_prob": 4.565918061416596e-06}, {"id": 123, "seek": 59996, "start": 605.36, "end": 610.0, "text": " This is basically the training loop we used from a couple of lessons ago, the one we created", "tokens": [639, 307, 1936, 264, 3097, 6367, 321, 1143, 490, 257, 1916, 295, 8820, 2057, 11, 264, 472, 321, 2942], "temperature": 0.0, "avg_logprob": -0.10170721521182936, "compression_ratio": 1.8063063063063063, "no_speech_prob": 4.565918061416596e-06}, {"id": 124, "seek": 59996, "start": 610.0, "end": 611.0, "text": " manually.", "tokens": [16945, 13], "temperature": 0.0, "avg_logprob": -0.10170721521182936, "compression_ratio": 1.8063063063063063, "no_speech_prob": 4.565918061416596e-06}, {"id": 125, "seek": 59996, "start": 611.0, "end": 615.36, "text": " We go through each xy pair in the data loader.", "tokens": [492, 352, 807, 1184, 2031, 88, 6119, 294, 264, 1412, 3677, 260, 13], "temperature": 0.0, "avg_logprob": -0.10170721521182936, "compression_ratio": 1.8063063063063063, "no_speech_prob": 4.565918061416596e-06}, {"id": 126, "seek": 59996, "start": 615.36, "end": 621.84, "text": " We calculate the loss using some coefficients based on that xy pair, and then we call backward", "tokens": [492, 8873, 264, 4470, 1228, 512, 31994, 2361, 322, 300, 2031, 88, 6119, 11, 293, 550, 321, 818, 23897], "temperature": 0.0, "avg_logprob": -0.10170721521182936, "compression_ratio": 1.8063063063063063, "no_speech_prob": 4.565918061416596e-06}, {"id": 127, "seek": 59996, "start": 621.84, "end": 628.2, "text": " on that loss to calculate the gradients, and then we subtract from the coefficients the", "tokens": [322, 300, 4470, 281, 8873, 264, 2771, 2448, 11, 293, 550, 321, 16390, 490, 264, 31994, 264], "temperature": 0.0, "avg_logprob": -0.10170721521182936, "compression_ratio": 1.8063063063063063, "no_speech_prob": 4.565918061416596e-06}, {"id": 128, "seek": 62820, "start": 628.2, "end": 632.08, "text": " gradients times the learning rate, and then we zero out the gradients.", "tokens": [2771, 2448, 1413, 264, 2539, 3314, 11, 293, 550, 321, 4018, 484, 264, 2771, 2448, 13], "temperature": 0.0, "avg_logprob": -0.20646824967970542, "compression_ratio": 1.6355555555555557, "no_speech_prob": 7.182979061326478e-06}, {"id": 129, "seek": 62820, "start": 632.08, "end": 637.44, "text": " I've skipped a bit of stuff like the with torch.nograd thing.", "tokens": [286, 600, 30193, 257, 857, 295, 1507, 411, 264, 365, 27822, 13, 1771, 7165, 551, 13], "temperature": 0.0, "avg_logprob": -0.20646824967970542, "compression_ratio": 1.6355555555555557, "no_speech_prob": 7.182979061326478e-06}, {"id": 130, "seek": 62820, "start": 637.44, "end": 639.48, "text": " Actually, no, I don't need that because I've got.data.", "tokens": [5135, 11, 572, 11, 286, 500, 380, 643, 300, 570, 286, 600, 658, 2411, 67, 3274, 13], "temperature": 0.0, "avg_logprob": -0.20646824967970542, "compression_ratio": 1.6355555555555557, "no_speech_prob": 7.182979061326478e-06}, {"id": 131, "seek": 62820, "start": 639.48, "end": 640.48, "text": " No, that's it.", "tokens": [883, 11, 300, 311, 309, 13], "temperature": 0.0, "avg_logprob": -0.20646824967970542, "compression_ratio": 1.6355555555555557, "no_speech_prob": 7.182979061326478e-06}, {"id": 132, "seek": 62820, "start": 640.48, "end": 641.48, "text": " That should all work fine.", "tokens": [663, 820, 439, 589, 2489, 13], "temperature": 0.0, "avg_logprob": -0.20646824967970542, "compression_ratio": 1.6355555555555557, "no_speech_prob": 7.182979061326478e-06}, {"id": 133, "seek": 62820, "start": 641.48, "end": 643.1600000000001, "text": " I've skipped out printing the loss.", "tokens": [286, 600, 30193, 484, 14699, 264, 4470, 13], "temperature": 0.0, "avg_logprob": -0.20646824967970542, "compression_ratio": 1.6355555555555557, "no_speech_prob": 7.182979061326478e-06}, {"id": 134, "seek": 62820, "start": 643.1600000000001, "end": 646.6400000000001, "text": " That's about it.", "tokens": [663, 311, 466, 309, 13], "temperature": 0.0, "avg_logprob": -0.20646824967970542, "compression_ratio": 1.6355555555555557, "no_speech_prob": 7.182979061326478e-06}, {"id": 135, "seek": 62820, "start": 646.6400000000001, "end": 656.96, "text": " So here is a variation of that loop where I do not always subtract the gradient times", "tokens": [407, 510, 307, 257, 12990, 295, 300, 6367, 689, 286, 360, 406, 1009, 16390, 264, 16235, 1413], "temperature": 0.0, "avg_logprob": -0.20646824967970542, "compression_ratio": 1.6355555555555557, "no_speech_prob": 7.182979061326478e-06}, {"id": 136, "seek": 65696, "start": 656.96, "end": 658.5600000000001, "text": " the learning rate.", "tokens": [264, 2539, 3314, 13], "temperature": 0.0, "avg_logprob": -0.1628858098443949, "compression_ratio": 1.5265486725663717, "no_speech_prob": 6.240758011699654e-06}, {"id": 137, "seek": 65696, "start": 658.5600000000001, "end": 664.32, "text": " Instead, I go through each xy pair in the data loader.", "tokens": [7156, 11, 286, 352, 807, 1184, 2031, 88, 6119, 294, 264, 1412, 3677, 260, 13], "temperature": 0.0, "avg_logprob": -0.1628858098443949, "compression_ratio": 1.5265486725663717, "no_speech_prob": 6.240758011699654e-06}, {"id": 138, "seek": 65696, "start": 664.32, "end": 667.12, "text": " I calculate the loss.", "tokens": [286, 8873, 264, 4470, 13], "temperature": 0.0, "avg_logprob": -0.1628858098443949, "compression_ratio": 1.5265486725663717, "no_speech_prob": 6.240758011699654e-06}, {"id": 139, "seek": 65696, "start": 667.12, "end": 671.1600000000001, "text": " I look at how many images are in this batch.", "tokens": [286, 574, 412, 577, 867, 5267, 366, 294, 341, 15245, 13], "temperature": 0.0, "avg_logprob": -0.1628858098443949, "compression_ratio": 1.5265486725663717, "no_speech_prob": 6.240758011699654e-06}, {"id": 140, "seek": 65696, "start": 671.1600000000001, "end": 675.64, "text": " So initially, I start at zero, and this count is going to be 32, say, if I've divided the", "tokens": [407, 9105, 11, 286, 722, 412, 4018, 11, 293, 341, 1207, 307, 516, 281, 312, 8858, 11, 584, 11, 498, 286, 600, 6666, 264], "temperature": 0.0, "avg_logprob": -0.1628858098443949, "compression_ratio": 1.5265486725663717, "no_speech_prob": 6.240758011699654e-06}, {"id": 141, "seek": 65696, "start": 675.64, "end": 677.72, "text": " batch size by two.", "tokens": [15245, 2744, 538, 732, 13], "temperature": 0.0, "avg_logprob": -0.1628858098443949, "compression_ratio": 1.5265486725663717, "no_speech_prob": 6.240758011699654e-06}, {"id": 142, "seek": 65696, "start": 677.72, "end": 684.64, "text": " And then if count is greater than 64, I do my gradient, my coefficients update.", "tokens": [400, 550, 498, 1207, 307, 5044, 813, 12145, 11, 286, 360, 452, 16235, 11, 452, 31994, 5623, 13], "temperature": 0.0, "avg_logprob": -0.1628858098443949, "compression_ratio": 1.5265486725663717, "no_speech_prob": 6.240758011699654e-06}, {"id": 143, "seek": 65696, "start": 684.64, "end": 686.8000000000001, "text": " Well, it's not.", "tokens": [1042, 11, 309, 311, 406, 13], "temperature": 0.0, "avg_logprob": -0.1628858098443949, "compression_ratio": 1.5265486725663717, "no_speech_prob": 6.240758011699654e-06}, {"id": 144, "seek": 68680, "start": 686.8, "end": 692.56, "text": " So I skip back to here, and I do this again.", "tokens": [407, 286, 10023, 646, 281, 510, 11, 293, 286, 360, 341, 797, 13], "temperature": 0.0, "avg_logprob": -0.07003257629719187, "compression_ratio": 1.6834170854271358, "no_speech_prob": 7.29608927940717e-06}, {"id": 145, "seek": 68680, "start": 692.56, "end": 697.04, "text": " And if you remember, there was this interesting subtlety in PyTorch, which is if you call", "tokens": [400, 498, 291, 1604, 11, 456, 390, 341, 1880, 7257, 75, 2210, 294, 9953, 51, 284, 339, 11, 597, 307, 498, 291, 818], "temperature": 0.0, "avg_logprob": -0.07003257629719187, "compression_ratio": 1.6834170854271358, "no_speech_prob": 7.29608927940717e-06}, {"id": 146, "seek": 68680, "start": 697.04, "end": 706.64, "text": " backward again without zeroing out the gradients, then it adds this set of gradients to the", "tokens": [23897, 797, 1553, 4018, 278, 484, 264, 2771, 2448, 11, 550, 309, 10860, 341, 992, 295, 2771, 2448, 281, 264], "temperature": 0.0, "avg_logprob": -0.07003257629719187, "compression_ratio": 1.6834170854271358, "no_speech_prob": 7.29608927940717e-06}, {"id": 147, "seek": 68680, "start": 706.64, "end": 709.3599999999999, "text": " old gradients.", "tokens": [1331, 2771, 2448, 13], "temperature": 0.0, "avg_logprob": -0.07003257629719187, "compression_ratio": 1.6834170854271358, "no_speech_prob": 7.29608927940717e-06}, {"id": 148, "seek": 68680, "start": 709.3599999999999, "end": 715.76, "text": " So by doing these two half-sized batches without zeroing out the gradients between them, it's", "tokens": [407, 538, 884, 613, 732, 1922, 12, 20614, 15245, 279, 1553, 4018, 278, 484, 264, 2771, 2448, 1296, 552, 11, 309, 311], "temperature": 0.0, "avg_logprob": -0.07003257629719187, "compression_ratio": 1.6834170854271358, "no_speech_prob": 7.29608927940717e-06}, {"id": 149, "seek": 71576, "start": 715.76, "end": 716.92, "text": " adding them up.", "tokens": [5127, 552, 493, 13], "temperature": 0.0, "avg_logprob": -0.1309566980675806, "compression_ratio": 1.489795918367347, "no_speech_prob": 1.1300595360808074e-05}, {"id": 150, "seek": 71576, "start": 716.92, "end": 724.4399999999999, "text": " So I'm going to end up with the total gradient of a 64-image batch size, but passing only", "tokens": [407, 286, 478, 516, 281, 917, 493, 365, 264, 3217, 16235, 295, 257, 12145, 12, 26624, 15245, 2744, 11, 457, 8437, 787], "temperature": 0.0, "avg_logprob": -0.1309566980675806, "compression_ratio": 1.489795918367347, "no_speech_prob": 1.1300595360808074e-05}, {"id": 151, "seek": 71576, "start": 724.4399999999999, "end": 727.92, "text": " 32 at a time.", "tokens": [8858, 412, 257, 565, 13], "temperature": 0.0, "avg_logprob": -0.1309566980675806, "compression_ratio": 1.489795918367347, "no_speech_prob": 1.1300595360808074e-05}, {"id": 152, "seek": 71576, "start": 727.92, "end": 733.72, "text": " If I used accumulate equals 4, it would go through this four times, adding them up before", "tokens": [759, 286, 1143, 33384, 6915, 1017, 11, 309, 576, 352, 807, 341, 1451, 1413, 11, 5127, 552, 493, 949], "temperature": 0.0, "avg_logprob": -0.1309566980675806, "compression_ratio": 1.489795918367347, "no_speech_prob": 1.1300595360808074e-05}, {"id": 153, "seek": 71576, "start": 733.72, "end": 741.18, "text": " it subtracted out the coefficients dot grad times learning rate and zeroed it out.", "tokens": [309, 16390, 292, 484, 264, 31994, 5893, 2771, 1413, 2539, 3314, 293, 4018, 292, 309, 484, 13], "temperature": 0.0, "avg_logprob": -0.1309566980675806, "compression_ratio": 1.489795918367347, "no_speech_prob": 1.1300595360808074e-05}, {"id": 154, "seek": 74118, "start": 741.18, "end": 748.3599999999999, "text": " If I put in accumulate equals 64, it would go through into a single image one at a time.", "tokens": [759, 286, 829, 294, 33384, 6915, 12145, 11, 309, 576, 352, 807, 666, 257, 2167, 3256, 472, 412, 257, 565, 13], "temperature": 0.0, "avg_logprob": -0.11063840117635607, "compression_ratio": 1.5505050505050506, "no_speech_prob": 8.579215773352189e-07}, {"id": 155, "seek": 74118, "start": 748.3599999999999, "end": 754.04, "text": " And after 64 passes through, eventually count would be greater than 64, and we would do", "tokens": [400, 934, 12145, 11335, 807, 11, 4728, 1207, 576, 312, 5044, 813, 12145, 11, 293, 321, 576, 360], "temperature": 0.0, "avg_logprob": -0.11063840117635607, "compression_ratio": 1.5505050505050506, "no_speech_prob": 8.579215773352189e-07}, {"id": 156, "seek": 74118, "start": 754.04, "end": 755.04, "text": " the update.", "tokens": [264, 5623, 13], "temperature": 0.0, "avg_logprob": -0.11063840117635607, "compression_ratio": 1.5505050505050506, "no_speech_prob": 8.579215773352189e-07}, {"id": 157, "seek": 74118, "start": 755.04, "end": 757.5999999999999, "text": " So that's gradient accumulation.", "tokens": [407, 300, 311, 16235, 35647, 13], "temperature": 0.0, "avg_logprob": -0.11063840117635607, "compression_ratio": 1.5505050505050506, "no_speech_prob": 8.579215773352189e-07}, {"id": 158, "seek": 74118, "start": 757.5999999999999, "end": 767.02, "text": " It's a very simple idea, which is that you don't have to actually update your weights", "tokens": [467, 311, 257, 588, 2199, 1558, 11, 597, 307, 300, 291, 500, 380, 362, 281, 767, 5623, 428, 17443], "temperature": 0.0, "avg_logprob": -0.11063840117635607, "compression_ratio": 1.5505050505050506, "no_speech_prob": 8.579215773352189e-07}, {"id": 159, "seek": 76702, "start": 767.02, "end": 771.28, "text": " every loop through for every mini-batch.", "tokens": [633, 6367, 807, 337, 633, 8382, 12, 65, 852, 13], "temperature": 0.0, "avg_logprob": -0.12112577337967723, "compression_ratio": 1.5107296137339057, "no_speech_prob": 5.594275080511579e-06}, {"id": 160, "seek": 76702, "start": 771.28, "end": 775.18, "text": " You can just do it from time to time.", "tokens": [509, 393, 445, 360, 309, 490, 565, 281, 565, 13], "temperature": 0.0, "avg_logprob": -0.12112577337967723, "compression_ratio": 1.5107296137339057, "no_speech_prob": 5.594275080511579e-06}, {"id": 161, "seek": 76702, "start": 775.18, "end": 782.4399999999999, "text": " But it has quite significant implications, which I find most people seem not to realize,", "tokens": [583, 309, 575, 1596, 4776, 16602, 11, 597, 286, 915, 881, 561, 1643, 406, 281, 4325, 11], "temperature": 0.0, "avg_logprob": -0.12112577337967723, "compression_ratio": 1.5107296137339057, "no_speech_prob": 5.594275080511579e-06}, {"id": 162, "seek": 76702, "start": 782.4399999999999, "end": 788.0, "text": " which is if you look on Twitter or Reddit or whatever, people can say, oh, I need to", "tokens": [597, 307, 498, 291, 574, 322, 5794, 420, 32210, 420, 2035, 11, 561, 393, 584, 11, 1954, 11, 286, 643, 281], "temperature": 0.0, "avg_logprob": -0.12112577337967723, "compression_ratio": 1.5107296137339057, "no_speech_prob": 5.594275080511579e-06}, {"id": 163, "seek": 76702, "start": 788.0, "end": 791.96, "text": " buy a bigger GPU to train bigger models.", "tokens": [2256, 257, 3801, 18407, 281, 3847, 3801, 5245, 13], "temperature": 0.0, "avg_logprob": -0.12112577337967723, "compression_ratio": 1.5107296137339057, "no_speech_prob": 5.594275080511579e-06}, {"id": 164, "seek": 76702, "start": 791.96, "end": 792.96, "text": " But they don't.", "tokens": [583, 436, 500, 380, 13], "temperature": 0.0, "avg_logprob": -0.12112577337967723, "compression_ratio": 1.5107296137339057, "no_speech_prob": 5.594275080511579e-06}, {"id": 165, "seek": 76702, "start": 792.96, "end": 796.04, "text": " They could just use gradient accumulation.", "tokens": [814, 727, 445, 764, 16235, 35647, 13], "temperature": 0.0, "avg_logprob": -0.12112577337967723, "compression_ratio": 1.5107296137339057, "no_speech_prob": 5.594275080511579e-06}, {"id": 166, "seek": 79604, "start": 796.04, "end": 807.12, "text": " And so given the huge price differential between, say, a RTX 3080 and an RTX 3090 Ti, huge price", "tokens": [400, 370, 2212, 264, 2603, 3218, 15756, 1296, 11, 584, 11, 257, 44573, 2217, 4702, 293, 364, 44573, 2217, 7771, 20456, 11, 2603, 3218], "temperature": 0.0, "avg_logprob": -0.1394266514551072, "compression_ratio": 1.5263157894736843, "no_speech_prob": 2.482440777384909e-06}, {"id": 167, "seek": 79604, "start": 807.12, "end": 810.88, "text": " differential, the performance is not that different.", "tokens": [15756, 11, 264, 3389, 307, 406, 300, 819, 13], "temperature": 0.0, "avg_logprob": -0.1394266514551072, "compression_ratio": 1.5263157894736843, "no_speech_prob": 2.482440777384909e-06}, {"id": 168, "seek": 79604, "start": 810.88, "end": 813.8399999999999, "text": " The big difference is the memory.", "tokens": [440, 955, 2649, 307, 264, 4675, 13], "temperature": 0.0, "avg_logprob": -0.1394266514551072, "compression_ratio": 1.5263157894736843, "no_speech_prob": 2.482440777384909e-06}, {"id": 169, "seek": 79604, "start": 813.8399999999999, "end": 815.02, "text": " So what?", "tokens": [407, 437, 30], "temperature": 0.0, "avg_logprob": -0.1394266514551072, "compression_ratio": 1.5263157894736843, "no_speech_prob": 2.482440777384909e-06}, {"id": 170, "seek": 79604, "start": 815.02, "end": 817.9599999999999, "text": " Just put in a bit smaller batch size and do gradient accumulation.", "tokens": [1449, 829, 294, 257, 857, 4356, 15245, 2744, 293, 360, 16235, 35647, 13], "temperature": 0.0, "avg_logprob": -0.1394266514551072, "compression_ratio": 1.5263157894736843, "no_speech_prob": 2.482440777384909e-06}, {"id": 171, "seek": 79604, "start": 817.9599999999999, "end": 823.8399999999999, "text": " So there's actually not that much reason to buy giant GPUs.", "tokens": [407, 456, 311, 767, 406, 300, 709, 1778, 281, 2256, 7410, 18407, 82, 13], "temperature": 0.0, "avg_logprob": -0.1394266514551072, "compression_ratio": 1.5263157894736843, "no_speech_prob": 2.482440777384909e-06}, {"id": 172, "seek": 82384, "start": 823.84, "end": 827.1600000000001, "text": " John?", "tokens": [2619, 30], "temperature": 0.0, "avg_logprob": -0.17131398274348333, "compression_ratio": 1.4838709677419355, "no_speech_prob": 1.1124472621304449e-05}, {"id": 173, "seek": 82384, "start": 827.1600000000001, "end": 831.48, "text": " Other results with gradient accumulation, numerically identical?", "tokens": [5358, 3542, 365, 16235, 35647, 11, 7866, 984, 14800, 30], "temperature": 0.0, "avg_logprob": -0.17131398274348333, "compression_ratio": 1.4838709677419355, "no_speech_prob": 1.1124472621304449e-05}, {"id": 174, "seek": 82384, "start": 831.48, "end": 839.2, "text": " They're numerically identical for this particular architecture.", "tokens": [814, 434, 7866, 984, 14800, 337, 341, 1729, 9482, 13], "temperature": 0.0, "avg_logprob": -0.17131398274348333, "compression_ratio": 1.4838709677419355, "no_speech_prob": 1.1124472621304449e-05}, {"id": 175, "seek": 82384, "start": 839.2, "end": 846.88, "text": " There is something called batch normalization, which we will look at in part two of the course,", "tokens": [821, 307, 746, 1219, 15245, 2710, 2144, 11, 597, 321, 486, 574, 412, 294, 644, 732, 295, 264, 1164, 11], "temperature": 0.0, "avg_logprob": -0.17131398274348333, "compression_ratio": 1.4838709677419355, "no_speech_prob": 1.1124472621304449e-05}, {"id": 176, "seek": 84688, "start": 846.88, "end": 859.84, "text": " which keeps track of the moving average of standard deviations and averages and does", "tokens": [597, 5965, 2837, 295, 264, 2684, 4274, 295, 3832, 31219, 763, 293, 42257, 293, 775], "temperature": 0.0, "avg_logprob": -0.10371121065116223, "compression_ratio": 1.6788990825688073, "no_speech_prob": 1.3845282410329673e-05}, {"id": 177, "seek": 84688, "start": 859.84, "end": 864.6, "text": " it in a mathematically slightly incorrect way, as a result of which if you've got batch", "tokens": [309, 294, 257, 44003, 4748, 18424, 636, 11, 382, 257, 1874, 295, 597, 498, 291, 600, 658, 15245], "temperature": 0.0, "avg_logprob": -0.10371121065116223, "compression_ratio": 1.6788990825688073, "no_speech_prob": 1.3845282410329673e-05}, {"id": 178, "seek": 84688, "start": 864.6, "end": 870.24, "text": " normalization, then it basically will introduce more volatility, which is not necessarily", "tokens": [2710, 2144, 11, 550, 309, 1936, 486, 5366, 544, 25877, 11, 597, 307, 406, 4725], "temperature": 0.0, "avg_logprob": -0.10371121065116223, "compression_ratio": 1.6788990825688073, "no_speech_prob": 1.3845282410329673e-05}, {"id": 179, "seek": 84688, "start": 870.24, "end": 871.24, "text": " a bad thing.", "tokens": [257, 1578, 551, 13], "temperature": 0.0, "avg_logprob": -0.10371121065116223, "compression_ratio": 1.6788990825688073, "no_speech_prob": 1.3845282410329673e-05}, {"id": 180, "seek": 84688, "start": 871.24, "end": 875.36, "text": " But because it's not mathematically identical, you won't necessarily get the same results.", "tokens": [583, 570, 309, 311, 406, 44003, 14800, 11, 291, 1582, 380, 4725, 483, 264, 912, 3542, 13], "temperature": 0.0, "avg_logprob": -0.10371121065116223, "compression_ratio": 1.6788990825688073, "no_speech_prob": 1.3845282410329673e-05}, {"id": 181, "seek": 87536, "start": 875.36, "end": 880.6800000000001, "text": " NNVnext doesn't use batch normalization, so it is the same.", "tokens": [426, 45, 53, 716, 734, 1177, 380, 764, 15245, 2710, 2144, 11, 370, 309, 307, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.1604030016556527, "compression_ratio": 1.6419213973799127, "no_speech_prob": 1.2606496056832839e-05}, {"id": 182, "seek": 87536, "start": 880.6800000000001, "end": 886.08, "text": " And in fact, a lot of the models people want to use really big versions of, which is NLP", "tokens": [400, 294, 1186, 11, 257, 688, 295, 264, 5245, 561, 528, 281, 764, 534, 955, 9606, 295, 11, 597, 307, 426, 45196], "temperature": 0.0, "avg_logprob": -0.1604030016556527, "compression_ratio": 1.6419213973799127, "no_speech_prob": 1.2606496056832839e-05}, {"id": 183, "seek": 87536, "start": 886.08, "end": 891.36, "text": " ones, transformers, tend not to use batch normalization, but instead they use something", "tokens": [2306, 11, 4088, 433, 11, 3928, 406, 281, 764, 15245, 2710, 2144, 11, 457, 2602, 436, 764, 746], "temperature": 0.0, "avg_logprob": -0.1604030016556527, "compression_ratio": 1.6419213973799127, "no_speech_prob": 1.2606496056832839e-05}, {"id": 184, "seek": 87536, "start": 891.36, "end": 897.44, "text": " called layer normalization, which doesn't have the same issue.", "tokens": [1219, 4583, 2710, 2144, 11, 597, 1177, 380, 362, 264, 912, 2734, 13], "temperature": 0.0, "avg_logprob": -0.1604030016556527, "compression_ratio": 1.6419213973799127, "no_speech_prob": 1.2606496056832839e-05}, {"id": 185, "seek": 87536, "start": 897.44, "end": 898.64, "text": " I think that's probably fair to say.", "tokens": [286, 519, 300, 311, 1391, 3143, 281, 584, 13], "temperature": 0.0, "avg_logprob": -0.1604030016556527, "compression_ratio": 1.6419213973799127, "no_speech_prob": 1.2606496056832839e-05}, {"id": 186, "seek": 87536, "start": 898.64, "end": 901.36, "text": " I haven't thought about it that deeply.", "tokens": [286, 2378, 380, 1194, 466, 309, 300, 8760, 13], "temperature": 0.0, "avg_logprob": -0.1604030016556527, "compression_ratio": 1.6419213973799127, "no_speech_prob": 1.2606496056832839e-05}, {"id": 187, "seek": 90136, "start": 901.36, "end": 909.36, "text": " In practice, I found adding gradient accumulation for NNVnext has not caused any issues for", "tokens": [682, 3124, 11, 286, 1352, 5127, 16235, 35647, 337, 426, 45, 53, 716, 734, 575, 406, 7008, 604, 2663, 337], "temperature": 0.0, "avg_logprob": -0.26774610932340326, "compression_ratio": 1.4398148148148149, "no_speech_prob": 4.005308073828928e-05}, {"id": 188, "seek": 90136, "start": 909.36, "end": 910.36, "text": " me.", "tokens": [385, 13], "temperature": 0.0, "avg_logprob": -0.26774610932340326, "compression_ratio": 1.4398148148148149, "no_speech_prob": 4.005308073828928e-05}, {"id": 189, "seek": 90136, "start": 910.36, "end": 914.54, "text": " I don't have to change any parameters when I do it.", "tokens": [286, 500, 380, 362, 281, 1319, 604, 9834, 562, 286, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.26774610932340326, "compression_ratio": 1.4398148148148149, "no_speech_prob": 4.005308073828928e-05}, {"id": 190, "seek": 90136, "start": 914.54, "end": 918.5600000000001, "text": " Any other questions on the forum, John?", "tokens": [2639, 661, 1651, 322, 264, 17542, 11, 2619, 30], "temperature": 0.0, "avg_logprob": -0.26774610932340326, "compression_ratio": 1.4398148148148149, "no_speech_prob": 4.005308073828928e-05}, {"id": 191, "seek": 90136, "start": 918.5600000000001, "end": 924.32, "text": " Tamori asking, shouldn't it be count greater than equal to 64 if BS equals 64?", "tokens": [8540, 7386, 3365, 11, 4659, 380, 309, 312, 1207, 5044, 813, 2681, 281, 12145, 498, 27253, 6915, 12145, 30], "temperature": 0.0, "avg_logprob": -0.26774610932340326, "compression_ratio": 1.4398148148148149, "no_speech_prob": 4.005308073828928e-05}, {"id": 192, "seek": 90136, "start": 924.32, "end": 925.32, "text": " I haven't...", "tokens": [286, 2378, 380, 485], "temperature": 0.0, "avg_logprob": -0.26774610932340326, "compression_ratio": 1.4398148148148149, "no_speech_prob": 4.005308073828928e-05}, {"id": 193, "seek": 90136, "start": 925.32, "end": 928.32, "text": " No, I don't think so.", "tokens": [883, 11, 286, 500, 380, 519, 370, 13], "temperature": 0.0, "avg_logprob": -0.26774610932340326, "compression_ratio": 1.4398148148148149, "no_speech_prob": 4.005308073828928e-05}, {"id": 194, "seek": 90136, "start": 928.32, "end": 929.32, "text": " Oh, yeah.", "tokens": [876, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.26774610932340326, "compression_ratio": 1.4398148148148149, "no_speech_prob": 4.005308073828928e-05}, {"id": 195, "seek": 92932, "start": 929.32, "end": 934.32, "text": " So we start at zero, then it's going to be 32, then it's going to be...", "tokens": [407, 321, 722, 412, 4018, 11, 550, 309, 311, 516, 281, 312, 8858, 11, 550, 309, 311, 516, 281, 312, 485], "temperature": 0.0, "avg_logprob": -0.29622917844538105, "compression_ratio": 1.6221198156682028, "no_speech_prob": 1.221804541273741e-05}, {"id": 196, "seek": 92932, "start": 934.32, "end": 935.32, "text": " Yeah, yeah, probably.", "tokens": [865, 11, 1338, 11, 1391, 13], "temperature": 0.0, "avg_logprob": -0.29622917844538105, "compression_ratio": 1.6221198156682028, "no_speech_prob": 1.221804541273741e-05}, {"id": 197, "seek": 92932, "start": 935.32, "end": 936.32, "text": " It's a greater than equal, yeah.", "tokens": [467, 311, 257, 5044, 813, 2681, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.29622917844538105, "compression_ratio": 1.6221198156682028, "no_speech_prob": 1.221804541273741e-05}, {"id": 198, "seek": 92932, "start": 936.32, "end": 937.32, "text": " Yeah, probably.", "tokens": [865, 11, 1391, 13], "temperature": 0.0, "avg_logprob": -0.29622917844538105, "compression_ratio": 1.6221198156682028, "no_speech_prob": 1.221804541273741e-05}, {"id": 199, "seek": 92932, "start": 937.32, "end": 938.9200000000001, "text": " You can probably tell I didn't actually run this code.", "tokens": [509, 393, 1391, 980, 286, 994, 380, 767, 1190, 341, 3089, 13], "temperature": 0.0, "avg_logprob": -0.29622917844538105, "compression_ratio": 1.6221198156682028, "no_speech_prob": 1.221804541273741e-05}, {"id": 200, "seek": 92932, "start": 938.9200000000001, "end": 946.2800000000001, "text": " Madhav is asking, does this mean that LRFind is based on the batch size set during the", "tokens": [5326, 71, 706, 307, 3365, 11, 775, 341, 914, 300, 441, 49, 37, 471, 307, 2361, 322, 264, 15245, 2744, 992, 1830, 264], "temperature": 0.0, "avg_logprob": -0.29622917844538105, "compression_ratio": 1.6221198156682028, "no_speech_prob": 1.221804541273741e-05}, {"id": 201, "seek": 92932, "start": 946.2800000000001, "end": 947.2800000000001, "text": " data block?", "tokens": [1412, 3461, 30], "temperature": 0.0, "avg_logprob": -0.29622917844538105, "compression_ratio": 1.6221198156682028, "no_speech_prob": 1.221804541273741e-05}, {"id": 202, "seek": 92932, "start": 947.2800000000001, "end": 948.2800000000001, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.29622917844538105, "compression_ratio": 1.6221198156682028, "no_speech_prob": 1.221804541273741e-05}, {"id": 203, "seek": 92932, "start": 948.2800000000001, "end": 955.4000000000001, "text": " So LRFind just uses your data loaders batch size.", "tokens": [407, 441, 49, 37, 471, 445, 4960, 428, 1412, 3677, 433, 15245, 2744, 13], "temperature": 0.0, "avg_logprob": -0.29622917844538105, "compression_ratio": 1.6221198156682028, "no_speech_prob": 1.221804541273741e-05}, {"id": 204, "seek": 95540, "start": 955.4, "end": 960.88, "text": " Edward is asking, why do we need gradient accumulation rather than just using a smaller", "tokens": [18456, 307, 3365, 11, 983, 360, 321, 643, 16235, 35647, 2831, 813, 445, 1228, 257, 4356], "temperature": 0.0, "avg_logprob": -0.14239909550915025, "compression_ratio": 1.5487179487179488, "no_speech_prob": 1.1658938092296012e-05}, {"id": 205, "seek": 95540, "start": 960.88, "end": 965.04, "text": " batch size and follows up with how would we pick a good batch size?", "tokens": [15245, 2744, 293, 10002, 493, 365, 577, 576, 321, 1888, 257, 665, 15245, 2744, 30], "temperature": 0.0, "avg_logprob": -0.14239909550915025, "compression_ratio": 1.5487179487179488, "no_speech_prob": 1.1658938092296012e-05}, {"id": 206, "seek": 95540, "start": 965.04, "end": 969.76, "text": " Well, just if you use a smaller batch size, here's the thing, right?", "tokens": [1042, 11, 445, 498, 291, 764, 257, 4356, 15245, 2744, 11, 510, 311, 264, 551, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.14239909550915025, "compression_ratio": 1.5487179487179488, "no_speech_prob": 1.1658938092296012e-05}, {"id": 207, "seek": 95540, "start": 969.76, "end": 979.0, "text": " Different architectures have different amounts of memory, which they take up.", "tokens": [20825, 6331, 1303, 362, 819, 11663, 295, 4675, 11, 597, 436, 747, 493, 13], "temperature": 0.0, "avg_logprob": -0.14239909550915025, "compression_ratio": 1.5487179487179488, "no_speech_prob": 1.1658938092296012e-05}, {"id": 208, "seek": 97900, "start": 979.0, "end": 986.48, "text": " And so you'll end up with different batch sizes for different architectures, which is", "tokens": [400, 370, 291, 603, 917, 493, 365, 819, 15245, 11602, 337, 819, 6331, 1303, 11, 597, 307], "temperature": 0.0, "avg_logprob": -0.13416876792907714, "compression_ratio": 1.7349397590361446, "no_speech_prob": 7.410924354189774e-06}, {"id": 209, "seek": 97900, "start": 986.48, "end": 989.68, "text": " not necessarily a bad thing, but each of them is going to then need a different learning", "tokens": [406, 4725, 257, 1578, 551, 11, 457, 1184, 295, 552, 307, 516, 281, 550, 643, 257, 819, 2539], "temperature": 0.0, "avg_logprob": -0.13416876792907714, "compression_ratio": 1.7349397590361446, "no_speech_prob": 7.410924354189774e-06}, {"id": 210, "seek": 97900, "start": 989.68, "end": 993.64, "text": " rate and maybe even different weight decay or whatever.", "tokens": [3314, 293, 1310, 754, 819, 3364, 21039, 420, 2035, 13], "temperature": 0.0, "avg_logprob": -0.13416876792907714, "compression_ratio": 1.7349397590361446, "no_speech_prob": 7.410924354189774e-06}, {"id": 211, "seek": 97900, "start": 993.64, "end": 998.1, "text": " Like the kind of the settings that's working really well for batch size 64 won't necessarily", "tokens": [1743, 264, 733, 295, 264, 6257, 300, 311, 1364, 534, 731, 337, 15245, 2744, 12145, 1582, 380, 4725], "temperature": 0.0, "avg_logprob": -0.13416876792907714, "compression_ratio": 1.7349397590361446, "no_speech_prob": 7.410924354189774e-06}, {"id": 212, "seek": 97900, "start": 998.1, "end": 1000.92, "text": " work really well for batch size 32.", "tokens": [589, 534, 731, 337, 15245, 2744, 8858, 13], "temperature": 0.0, "avg_logprob": -0.13416876792907714, "compression_ratio": 1.7349397590361446, "no_speech_prob": 7.410924354189774e-06}, {"id": 213, "seek": 97900, "start": 1000.92, "end": 1006.76, "text": " And you want to be able to experiment as easily and quickly as possible.", "tokens": [400, 291, 528, 281, 312, 1075, 281, 5120, 382, 3612, 293, 2661, 382, 1944, 13], "temperature": 0.0, "avg_logprob": -0.13416876792907714, "compression_ratio": 1.7349397590361446, "no_speech_prob": 7.410924354189774e-06}, {"id": 214, "seek": 100676, "start": 1006.76, "end": 1011.2, "text": " I think the second part of your question was how do you pick an optimal batch size?", "tokens": [286, 519, 264, 1150, 644, 295, 428, 1168, 390, 577, 360, 291, 1888, 364, 16252, 15245, 2744, 30], "temperature": 0.0, "avg_logprob": -0.19452605040177054, "compression_ratio": 1.6371308016877637, "no_speech_prob": 7.888913387432694e-06}, {"id": 215, "seek": 100676, "start": 1011.2, "end": 1017.76, "text": " Honestly, the standard approach is to pick the largest one you can, just because it's", "tokens": [12348, 11, 264, 3832, 3109, 307, 281, 1888, 264, 6443, 472, 291, 393, 11, 445, 570, 309, 311], "temperature": 0.0, "avg_logprob": -0.19452605040177054, "compression_ratio": 1.6371308016877637, "no_speech_prob": 7.888913387432694e-06}, {"id": 216, "seek": 100676, "start": 1017.76, "end": 1023.64, "text": " faster that way, you're getting more parallel processing going on.", "tokens": [4663, 300, 636, 11, 291, 434, 1242, 544, 8952, 9007, 516, 322, 13], "temperature": 0.0, "avg_logprob": -0.19452605040177054, "compression_ratio": 1.6371308016877637, "no_speech_prob": 7.888913387432694e-06}, {"id": 217, "seek": 100676, "start": 1023.64, "end": 1029.52, "text": " Although to be honest, I quite often use batch sizes that are quite a bit smaller than I", "tokens": [5780, 281, 312, 3245, 11, 286, 1596, 2049, 764, 15245, 11602, 300, 366, 1596, 257, 857, 4356, 813, 286], "temperature": 0.0, "avg_logprob": -0.19452605040177054, "compression_ratio": 1.6371308016877637, "no_speech_prob": 7.888913387432694e-06}, {"id": 218, "seek": 100676, "start": 1029.52, "end": 1034.04, "text": " need because quite often it doesn't make that much difference.", "tokens": [643, 570, 1596, 2049, 309, 1177, 380, 652, 300, 709, 2649, 13], "temperature": 0.0, "avg_logprob": -0.19452605040177054, "compression_ratio": 1.6371308016877637, "no_speech_prob": 7.888913387432694e-06}, {"id": 219, "seek": 103404, "start": 1034.04, "end": 1040.72, "text": " But yeah, the rule of thumb would be, you know, pick a batch size that fits in your", "tokens": [583, 1338, 11, 264, 4978, 295, 9298, 576, 312, 11, 291, 458, 11, 1888, 257, 15245, 2744, 300, 9001, 294, 428], "temperature": 0.0, "avg_logprob": -0.1835923876081194, "compression_ratio": 1.5763358778625953, "no_speech_prob": 8.530149898433592e-06}, {"id": 220, "seek": 103404, "start": 1040.72, "end": 1042.36, "text": " GPU.", "tokens": [18407, 13], "temperature": 0.0, "avg_logprob": -0.1835923876081194, "compression_ratio": 1.5763358778625953, "no_speech_prob": 8.530149898433592e-06}, {"id": 221, "seek": 103404, "start": 1042.36, "end": 1045.52, "text": " And for performance reasons, I think it's generally a good idea to have it be a multiple", "tokens": [400, 337, 3389, 4112, 11, 286, 519, 309, 311, 5101, 257, 665, 1558, 281, 362, 309, 312, 257, 3866], "temperature": 0.0, "avg_logprob": -0.1835923876081194, "compression_ratio": 1.5763358778625953, "no_speech_prob": 8.530149898433592e-06}, {"id": 222, "seek": 103404, "start": 1045.52, "end": 1048.72, "text": " of eight.", "tokens": [295, 3180, 13], "temperature": 0.0, "avg_logprob": -0.1835923876081194, "compression_ratio": 1.5763358778625953, "no_speech_prob": 8.530149898433592e-06}, {"id": 223, "seek": 103404, "start": 1048.72, "end": 1050.2, "text": " Everybody seems to always use powers of two.", "tokens": [7646, 2544, 281, 1009, 764, 8674, 295, 732, 13], "temperature": 0.0, "avg_logprob": -0.1835923876081194, "compression_ratio": 1.5763358778625953, "no_speech_prob": 8.530149898433592e-06}, {"id": 224, "seek": 103404, "start": 1050.2, "end": 1053.6399999999999, "text": " I don't know, like I don't think it actually matters.", "tokens": [286, 500, 380, 458, 11, 411, 286, 500, 380, 519, 309, 767, 7001, 13], "temperature": 0.0, "avg_logprob": -0.1835923876081194, "compression_ratio": 1.5763358778625953, "no_speech_prob": 8.530149898433592e-06}, {"id": 225, "seek": 103404, "start": 1053.6399999999999, "end": 1057.8, "text": " And look, there's one other just a clarification or a check if the learning rate should be", "tokens": [400, 574, 11, 456, 311, 472, 661, 445, 257, 34449, 420, 257, 1520, 498, 264, 2539, 3314, 820, 312], "temperature": 0.0, "avg_logprob": -0.1835923876081194, "compression_ratio": 1.5763358778625953, "no_speech_prob": 8.530149898433592e-06}, {"id": 226, "seek": 103404, "start": 1057.8, "end": 1060.28, "text": " scaled according to the batch size.", "tokens": [36039, 4650, 281, 264, 15245, 2744, 13], "temperature": 0.0, "avg_logprob": -0.1835923876081194, "compression_ratio": 1.5763358778625953, "no_speech_prob": 8.530149898433592e-06}, {"id": 227, "seek": 106028, "start": 1060.28, "end": 1064.8799999999999, "text": " Yeah, so generally speaking, the rule of thumb is that if you divide the batch size by two,", "tokens": [865, 11, 370, 5101, 4124, 11, 264, 4978, 295, 9298, 307, 300, 498, 291, 9845, 264, 15245, 2744, 538, 732, 11], "temperature": 0.0, "avg_logprob": -0.17994173438148162, "compression_ratio": 1.5183673469387755, "no_speech_prob": 1.3629564818984363e-05}, {"id": 228, "seek": 106028, "start": 1064.8799999999999, "end": 1066.72, "text": " you divide the learning rate by two.", "tokens": [291, 9845, 264, 2539, 3314, 538, 732, 13], "temperature": 0.0, "avg_logprob": -0.17994173438148162, "compression_ratio": 1.5183673469387755, "no_speech_prob": 1.3629564818984363e-05}, {"id": 229, "seek": 106028, "start": 1066.72, "end": 1070.32, "text": " But unfortunately, it's not quite perfect.", "tokens": [583, 7015, 11, 309, 311, 406, 1596, 2176, 13], "temperature": 0.0, "avg_logprob": -0.17994173438148162, "compression_ratio": 1.5183673469387755, "no_speech_prob": 1.3629564818984363e-05}, {"id": 230, "seek": 106028, "start": 1070.32, "end": 1071.32, "text": " Did you have a question, Nick?", "tokens": [2589, 291, 362, 257, 1168, 11, 9449, 30], "temperature": 0.0, "avg_logprob": -0.17994173438148162, "compression_ratio": 1.5183673469387755, "no_speech_prob": 1.3629564818984363e-05}, {"id": 231, "seek": 106028, "start": 1071.32, "end": 1072.32, "text": " If you do, you can.", "tokens": [759, 291, 360, 11, 291, 393, 13], "temperature": 0.0, "avg_logprob": -0.17994173438148162, "compression_ratio": 1.5183673469387755, "no_speech_prob": 1.3629564818984363e-05}, {"id": 232, "seek": 106028, "start": 1072.32, "end": 1073.32, "text": " Okay, cool.", "tokens": [1033, 11, 1627, 13], "temperature": 0.0, "avg_logprob": -0.17994173438148162, "compression_ratio": 1.5183673469387755, "no_speech_prob": 1.3629564818984363e-05}, {"id": 233, "seek": 106028, "start": 1073.32, "end": 1074.32, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.17994173438148162, "compression_ratio": 1.5183673469387755, "no_speech_prob": 1.3629564818984363e-05}, {"id": 234, "seek": 106028, "start": 1074.32, "end": 1076.6399999999999, "text": " Now that's us all caught up.", "tokens": [823, 300, 311, 505, 439, 5415, 493, 13], "temperature": 0.0, "avg_logprob": -0.17994173438148162, "compression_ratio": 1.5183673469387755, "no_speech_prob": 1.3629564818984363e-05}, {"id": 235, "seek": 106028, "start": 1076.6399999999999, "end": 1077.6399999999999, "text": " Thanks, Jimmy.", "tokens": [2561, 11, 15709, 13], "temperature": 0.0, "avg_logprob": -0.17994173438148162, "compression_ratio": 1.5183673469387755, "no_speech_prob": 1.3629564818984363e-05}, {"id": 236, "seek": 106028, "start": 1077.6399999999999, "end": 1078.6399999999999, "text": " Good questions.", "tokens": [2205, 1651, 13], "temperature": 0.0, "avg_logprob": -0.17994173438148162, "compression_ratio": 1.5183673469387755, "no_speech_prob": 1.3629564818984363e-05}, {"id": 237, "seek": 106028, "start": 1078.6399999999999, "end": 1082.68, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.17994173438148162, "compression_ratio": 1.5183673469387755, "no_speech_prob": 1.3629564818984363e-05}, {"id": 238, "seek": 106028, "start": 1082.68, "end": 1088.84, "text": " So gradient accumulation in fast AI is very straightforward.", "tokens": [407, 16235, 35647, 294, 2370, 7318, 307, 588, 15325, 13], "temperature": 0.0, "avg_logprob": -0.17994173438148162, "compression_ratio": 1.5183673469387755, "no_speech_prob": 1.3629564818984363e-05}, {"id": 239, "seek": 108884, "start": 1088.84, "end": 1094.26, "text": " You just divide the batch size by however much you want to divide it by.", "tokens": [509, 445, 9845, 264, 15245, 2744, 538, 4461, 709, 291, 528, 281, 9845, 309, 538, 13], "temperature": 0.0, "avg_logprob": -0.14317061684348367, "compression_ratio": 1.9508928571428572, "no_speech_prob": 1.6186197171919048e-05}, {"id": 240, "seek": 108884, "start": 1094.26, "end": 1096.12, "text": " And then add a you got something called a callback.", "tokens": [400, 550, 909, 257, 291, 658, 746, 1219, 257, 818, 3207, 13], "temperature": 0.0, "avg_logprob": -0.14317061684348367, "compression_ratio": 1.9508928571428572, "no_speech_prob": 1.6186197171919048e-05}, {"id": 241, "seek": 108884, "start": 1096.12, "end": 1100.58, "text": " And a callback is something which changes the way the model trains.", "tokens": [400, 257, 818, 3207, 307, 746, 597, 2962, 264, 636, 264, 2316, 16329, 13], "temperature": 0.0, "avg_logprob": -0.14317061684348367, "compression_ratio": 1.9508928571428572, "no_speech_prob": 1.6186197171919048e-05}, {"id": 242, "seek": 108884, "start": 1100.58, "end": 1103.1599999999999, "text": " This callback is called gradient accumulation.", "tokens": [639, 818, 3207, 307, 1219, 16235, 35647, 13], "temperature": 0.0, "avg_logprob": -0.14317061684348367, "compression_ratio": 1.9508928571428572, "no_speech_prob": 1.6186197171919048e-05}, {"id": 243, "seek": 108884, "start": 1103.1599999999999, "end": 1106.52, "text": " And you pass in the effective batch size you want.", "tokens": [400, 291, 1320, 294, 264, 4942, 15245, 2744, 291, 528, 13], "temperature": 0.0, "avg_logprob": -0.14317061684348367, "compression_ratio": 1.9508928571428572, "no_speech_prob": 1.6186197171919048e-05}, {"id": 244, "seek": 108884, "start": 1106.52, "end": 1111.36, "text": " And then you say when you create the learner, you say these are the callbacks I want.", "tokens": [400, 550, 291, 584, 562, 291, 1884, 264, 33347, 11, 291, 584, 613, 366, 264, 818, 17758, 286, 528, 13], "temperature": 0.0, "avg_logprob": -0.14317061684348367, "compression_ratio": 1.9508928571428572, "no_speech_prob": 1.6186197171919048e-05}, {"id": 245, "seek": 108884, "start": 1111.36, "end": 1114.22, "text": " And so it's going to pass in gradient accumulation callback.", "tokens": [400, 370, 309, 311, 516, 281, 1320, 294, 16235, 35647, 818, 3207, 13], "temperature": 0.0, "avg_logprob": -0.14317061684348367, "compression_ratio": 1.9508928571428572, "no_speech_prob": 1.6186197171919048e-05}, {"id": 246, "seek": 111422, "start": 1114.22, "end": 1125.32, "text": " So it's going to only update the weights once it's got 64 images.", "tokens": [407, 309, 311, 516, 281, 787, 5623, 264, 17443, 1564, 309, 311, 658, 12145, 5267, 13], "temperature": 0.0, "avg_logprob": -0.15770774692684025, "compression_ratio": 1.490909090909091, "no_speech_prob": 1.9333092495799065e-06}, {"id": 247, "seek": 111422, "start": 1125.32, "end": 1129.96, "text": " So if we pass in a QM equals one, it won't do any gradient accumulation.", "tokens": [407, 498, 321, 1320, 294, 257, 1249, 44, 6915, 472, 11, 309, 1582, 380, 360, 604, 16235, 35647, 13], "temperature": 0.0, "avg_logprob": -0.15770774692684025, "compression_ratio": 1.490909090909091, "no_speech_prob": 1.9333092495799065e-06}, {"id": 248, "seek": 111422, "start": 1129.96, "end": 1132.88, "text": " And that uses four gig.", "tokens": [400, 300, 4960, 1451, 8741, 13], "temperature": 0.0, "avg_logprob": -0.15770774692684025, "compression_ratio": 1.490909090909091, "no_speech_prob": 1.9333092495799065e-06}, {"id": 249, "seek": 111422, "start": 1132.88, "end": 1137.4, "text": " If we use QM equals two, about three gig.", "tokens": [759, 321, 764, 1249, 44, 6915, 732, 11, 466, 1045, 8741, 13], "temperature": 0.0, "avg_logprob": -0.15770774692684025, "compression_ratio": 1.490909090909091, "no_speech_prob": 1.9333092495799065e-06}, {"id": 250, "seek": 111422, "start": 1137.4, "end": 1141.64, "text": " QM equals four, about two and a half gig.", "tokens": [1249, 44, 6915, 1451, 11, 466, 732, 293, 257, 1922, 8741, 13], "temperature": 0.0, "avg_logprob": -0.15770774692684025, "compression_ratio": 1.490909090909091, "no_speech_prob": 1.9333092495799065e-06}, {"id": 251, "seek": 114164, "start": 1141.64, "end": 1145.76, "text": " And generally the bigger the model, the closer you'll get to a kind of a linear scaling.", "tokens": [400, 5101, 264, 3801, 264, 2316, 11, 264, 4966, 291, 603, 483, 281, 257, 733, 295, 257, 8213, 21589, 13], "temperature": 0.0, "avg_logprob": -0.16126755450634248, "compression_ratio": 1.5952380952380953, "no_speech_prob": 1.3419184142549057e-05}, {"id": 252, "seek": 114164, "start": 1145.76, "end": 1153.3200000000002, "text": " Because models have a kind of a bit of overhead that they have anyway.", "tokens": [1436, 5245, 362, 257, 733, 295, 257, 857, 295, 19922, 300, 436, 362, 4033, 13], "temperature": 0.0, "avg_logprob": -0.16126755450634248, "compression_ratio": 1.5952380952380953, "no_speech_prob": 1.3419184142549057e-05}, {"id": 253, "seek": 114164, "start": 1153.3200000000002, "end": 1156.68, "text": " So what I then did was I just went through all the different models I wanted to try.", "tokens": [407, 437, 286, 550, 630, 390, 286, 445, 1437, 807, 439, 264, 819, 5245, 286, 1415, 281, 853, 13], "temperature": 0.0, "avg_logprob": -0.16126755450634248, "compression_ratio": 1.5952380952380953, "no_speech_prob": 1.3419184142549057e-05}, {"id": 254, "seek": 114164, "start": 1156.68, "end": 1167.24, "text": " So I wanted to try ConvNext Large, add a 320 by 240, VIT Large, Swin V2 Large, Swin Large.", "tokens": [407, 286, 1415, 281, 853, 2656, 85, 31002, 33092, 11, 909, 257, 42429, 538, 26837, 11, 691, 3927, 33092, 11, 3926, 259, 691, 17, 33092, 11, 3926, 259, 33092, 13], "temperature": 0.0, "avg_logprob": -0.16126755450634248, "compression_ratio": 1.5952380952380953, "no_speech_prob": 1.3419184142549057e-05}, {"id": 255, "seek": 116724, "start": 1167.24, "end": 1171.88, "text": " And each of these I just tried running it with a QM equals one and actually every single", "tokens": [400, 1184, 295, 613, 286, 445, 3031, 2614, 309, 365, 257, 1249, 44, 6915, 472, 293, 767, 633, 2167], "temperature": 0.0, "avg_logprob": -0.17718893022679572, "compression_ratio": 1.8150943396226416, "no_speech_prob": 8.664243068778887e-06}, {"id": 256, "seek": 116724, "start": 1171.88, "end": 1176.28, "text": " time for all of these I got a memory error and then I tried each of them independently", "tokens": [565, 337, 439, 295, 613, 286, 658, 257, 4675, 6713, 293, 550, 286, 3031, 1184, 295, 552, 21761], "temperature": 0.0, "avg_logprob": -0.17718893022679572, "compression_ratio": 1.8150943396226416, "no_speech_prob": 8.664243068778887e-06}, {"id": 257, "seek": 116724, "start": 1176.28, "end": 1177.28, "text": " with a QM equals two.", "tokens": [365, 257, 1249, 44, 6915, 732, 13], "temperature": 0.0, "avg_logprob": -0.17718893022679572, "compression_ratio": 1.8150943396226416, "no_speech_prob": 8.664243068778887e-06}, {"id": 258, "seek": 116724, "start": 1177.28, "end": 1181.28, "text": " And it turns out that all of these worked with a QM equals two.", "tokens": [400, 309, 4523, 484, 300, 439, 295, 613, 2732, 365, 257, 1249, 44, 6915, 732, 13], "temperature": 0.0, "avg_logprob": -0.17718893022679572, "compression_ratio": 1.8150943396226416, "no_speech_prob": 8.664243068778887e-06}, {"id": 259, "seek": 116724, "start": 1181.28, "end": 1183.46, "text": " And it only took me 12 seconds each time.", "tokens": [400, 309, 787, 1890, 385, 2272, 3949, 1184, 565, 13], "temperature": 0.0, "avg_logprob": -0.17718893022679572, "compression_ratio": 1.8150943396226416, "no_speech_prob": 8.664243068778887e-06}, {"id": 260, "seek": 116724, "start": 1183.46, "end": 1187.36, "text": " So that was a very quick thing for me then to know, okay, I now know how to train all", "tokens": [407, 300, 390, 257, 588, 1702, 551, 337, 385, 550, 281, 458, 11, 1392, 11, 286, 586, 458, 577, 281, 3847, 439], "temperature": 0.0, "avg_logprob": -0.17718893022679572, "compression_ratio": 1.8150943396226416, "no_speech_prob": 8.664243068778887e-06}, {"id": 261, "seek": 116724, "start": 1187.36, "end": 1190.72, "text": " of these models on a 16 gigabyte card.", "tokens": [295, 613, 5245, 322, 257, 3165, 8741, 34529, 2920, 13], "temperature": 0.0, "avg_logprob": -0.17718893022679572, "compression_ratio": 1.8150943396226416, "no_speech_prob": 8.664243068778887e-06}, {"id": 262, "seek": 116724, "start": 1190.72, "end": 1196.4, "text": " So I can check here they're all in less than 16 gig.", "tokens": [407, 286, 393, 1520, 510, 436, 434, 439, 294, 1570, 813, 3165, 8741, 13], "temperature": 0.0, "avg_logprob": -0.17718893022679572, "compression_ratio": 1.8150943396226416, "no_speech_prob": 8.664243068778887e-06}, {"id": 263, "seek": 119640, "start": 1196.4, "end": 1203.8400000000001, "text": " So then I just created a little dictionary of all the architectures I wanted.", "tokens": [407, 550, 286, 445, 2942, 257, 707, 25890, 295, 439, 264, 6331, 1303, 286, 1415, 13], "temperature": 0.0, "avg_logprob": -0.14917156100273132, "compression_ratio": 1.5723270440251573, "no_speech_prob": 6.747630322934128e-06}, {"id": 264, "seek": 119640, "start": 1203.8400000000001, "end": 1211.6000000000001, "text": " And for each architecture all of the resize methods I wanted and final sizes I wanted.", "tokens": [400, 337, 1184, 9482, 439, 295, 264, 50069, 7150, 286, 1415, 293, 2572, 11602, 286, 1415, 13], "temperature": 0.0, "avg_logprob": -0.14917156100273132, "compression_ratio": 1.5723270440251573, "no_speech_prob": 6.747630322934128e-06}, {"id": 265, "seek": 119640, "start": 1211.6000000000001, "end": 1220.48, "text": " Now these models, VIT, Swin V2 and Swin are all transformers models, which means that", "tokens": [823, 613, 5245, 11, 691, 3927, 11, 3926, 259, 691, 17, 293, 3926, 259, 366, 439, 4088, 433, 5245, 11, 597, 1355, 300], "temperature": 0.0, "avg_logprob": -0.14917156100273132, "compression_ratio": 1.5723270440251573, "no_speech_prob": 6.747630322934128e-06}, {"id": 266, "seek": 122048, "start": 1220.48, "end": 1226.68, "text": " well, most transformers models, nearly all of them have a fixed size.", "tokens": [731, 11, 881, 4088, 433, 5245, 11, 6217, 439, 295, 552, 362, 257, 6806, 2744, 13], "temperature": 0.0, "avg_logprob": -0.13042574915392646, "compression_ratio": 1.588, "no_speech_prob": 4.936791810905561e-06}, {"id": 267, "seek": 122048, "start": 1226.68, "end": 1230.2, "text": " This one's 224, this one's 192, this one's 224.", "tokens": [639, 472, 311, 5853, 19, 11, 341, 472, 311, 1294, 17, 11, 341, 472, 311, 5853, 19, 13], "temperature": 0.0, "avg_logprob": -0.13042574915392646, "compression_ratio": 1.588, "no_speech_prob": 4.936791810905561e-06}, {"id": 268, "seek": 122048, "start": 1230.2, "end": 1235.1200000000001, "text": " So I have to make sure that my final size is a square of the size required.", "tokens": [407, 286, 362, 281, 652, 988, 300, 452, 2572, 2744, 307, 257, 3732, 295, 264, 2744, 4739, 13], "temperature": 0.0, "avg_logprob": -0.13042574915392646, "compression_ratio": 1.588, "no_speech_prob": 4.936791810905561e-06}, {"id": 269, "seek": 122048, "start": 1235.1200000000001, "end": 1239.3600000000001, "text": " Otherwise I get an error.", "tokens": [10328, 286, 483, 364, 6713, 13], "temperature": 0.0, "avg_logprob": -0.13042574915392646, "compression_ratio": 1.588, "no_speech_prob": 4.936791810905561e-06}, {"id": 270, "seek": 122048, "start": 1239.3600000000001, "end": 1244.48, "text": " There is a way of working around this, but I haven't experimented with it enough to know", "tokens": [821, 307, 257, 636, 295, 1364, 926, 341, 11, 457, 286, 2378, 380, 5120, 292, 365, 309, 1547, 281, 458], "temperature": 0.0, "avg_logprob": -0.13042574915392646, "compression_ratio": 1.588, "no_speech_prob": 4.936791810905561e-06}, {"id": 271, "seek": 122048, "start": 1244.48, "end": 1246.32, "text": " when it works well and when it doesn't.", "tokens": [562, 309, 1985, 731, 293, 562, 309, 1177, 380, 13], "temperature": 0.0, "avg_logprob": -0.13042574915392646, "compression_ratio": 1.588, "no_speech_prob": 4.936791810905561e-06}, {"id": 272, "seek": 122048, "start": 1246.32, "end": 1249.68, "text": " So we'll probably come back to that in part two.", "tokens": [407, 321, 603, 1391, 808, 646, 281, 300, 294, 644, 732, 13], "temperature": 0.0, "avg_logprob": -0.13042574915392646, "compression_ratio": 1.588, "no_speech_prob": 4.936791810905561e-06}, {"id": 273, "seek": 124968, "start": 1249.68, "end": 1253.6000000000001, "text": " So for now we're just going to use the size that they ask us to use.", "tokens": [407, 337, 586, 321, 434, 445, 516, 281, 764, 264, 2744, 300, 436, 1029, 505, 281, 764, 13], "temperature": 0.0, "avg_logprob": -0.13548453457384224, "compression_ratio": 1.75, "no_speech_prob": 6.540111826325301e-06}, {"id": 274, "seek": 124968, "start": 1253.6000000000001, "end": 1258.16, "text": " So with this dictionary of architectures and for each architecture, kind of preprocessing", "tokens": [407, 365, 341, 25890, 295, 6331, 1303, 293, 337, 1184, 9482, 11, 733, 295, 2666, 340, 780, 278], "temperature": 0.0, "avg_logprob": -0.13548453457384224, "compression_ratio": 1.75, "no_speech_prob": 6.540111826325301e-06}, {"id": 275, "seek": 124968, "start": 1258.16, "end": 1263.88, "text": " details, we switch the training path back to using all of our images and then we can", "tokens": [4365, 11, 321, 3679, 264, 3097, 3100, 646, 281, 1228, 439, 295, 527, 5267, 293, 550, 321, 393], "temperature": 0.0, "avg_logprob": -0.13548453457384224, "compression_ratio": 1.75, "no_speech_prob": 6.540111826325301e-06}, {"id": 276, "seek": 124968, "start": 1263.88, "end": 1274.24, "text": " loop through each architecture and loop through each item transforms and sizes and train the", "tokens": [6367, 807, 1184, 9482, 293, 6367, 807, 1184, 3174, 35592, 293, 11602, 293, 3847, 264], "temperature": 0.0, "avg_logprob": -0.13548453457384224, "compression_ratio": 1.75, "no_speech_prob": 6.540111826325301e-06}, {"id": 277, "seek": 124968, "start": 1274.24, "end": 1276.76, "text": " model.", "tokens": [2316, 13], "temperature": 0.0, "avg_logprob": -0.13548453457384224, "compression_ratio": 1.75, "no_speech_prob": 6.540111826325301e-06}, {"id": 278, "seek": 127676, "start": 1276.76, "end": 1298.6, "text": " And then the training script, if you're fine tuning, returns the TTA predictions.", "tokens": [400, 550, 264, 3097, 5755, 11, 498, 291, 434, 2489, 15164, 11, 11247, 264, 314, 8241, 21264, 13], "temperature": 0.0, "avg_logprob": -0.10674214917559956, "compression_ratio": 1.361344537815126, "no_speech_prob": 3.1863553431321634e-06}, {"id": 279, "seek": 127676, "start": 1298.6, "end": 1304.66, "text": " So I append all those TTA predictions for each model, for each type into a list.", "tokens": [407, 286, 34116, 439, 729, 314, 8241, 21264, 337, 1184, 2316, 11, 337, 1184, 2010, 666, 257, 1329, 13], "temperature": 0.0, "avg_logprob": -0.10674214917559956, "compression_ratio": 1.361344537815126, "no_speech_prob": 3.1863553431321634e-06}, {"id": 280, "seek": 130466, "start": 1304.66, "end": 1309.52, "text": " But after each one it's a good idea to do this garbage collection and empty cache, because", "tokens": [583, 934, 1184, 472, 309, 311, 257, 665, 1558, 281, 360, 341, 14150, 5765, 293, 6707, 19459, 11, 570], "temperature": 0.0, "avg_logprob": -0.11356208874629094, "compression_ratio": 1.6378600823045268, "no_speech_prob": 1.321126092079794e-05}, {"id": 281, "seek": 130466, "start": 1309.52, "end": 1315.38, "text": " otherwise I find what happens is your GPU memory kind of, I don't know, I think it gets", "tokens": [5911, 286, 915, 437, 2314, 307, 428, 18407, 4675, 733, 295, 11, 286, 500, 380, 458, 11, 286, 519, 309, 2170], "temperature": 0.0, "avg_logprob": -0.11356208874629094, "compression_ratio": 1.6378600823045268, "no_speech_prob": 1.321126092079794e-05}, {"id": 282, "seek": 130466, "start": 1315.38, "end": 1319.0400000000002, "text": " fragmented or something and after a while it runs out of memory even when you thought", "tokens": [9241, 14684, 420, 746, 293, 934, 257, 1339, 309, 6676, 484, 295, 4675, 754, 562, 291, 1194], "temperature": 0.0, "avg_logprob": -0.11356208874629094, "compression_ratio": 1.6378600823045268, "no_speech_prob": 1.321126092079794e-05}, {"id": 283, "seek": 130466, "start": 1319.0400000000002, "end": 1320.0400000000002, "text": " it wouldn't.", "tokens": [309, 2759, 380, 13], "temperature": 0.0, "avg_logprob": -0.11356208874629094, "compression_ratio": 1.6378600823045268, "no_speech_prob": 1.321126092079794e-05}, {"id": 284, "seek": 130466, "start": 1320.0400000000002, "end": 1324.0400000000002, "text": " So this way you can really do as much as you like without running out of memory.", "tokens": [407, 341, 636, 291, 393, 534, 360, 382, 709, 382, 291, 411, 1553, 2614, 484, 295, 4675, 13], "temperature": 0.0, "avg_logprob": -0.11356208874629094, "compression_ratio": 1.6378600823045268, "no_speech_prob": 1.321126092079794e-05}, {"id": 285, "seek": 130466, "start": 1324.0400000000002, "end": 1328.88, "text": " So they all train, train, train, train.", "tokens": [407, 436, 439, 3847, 11, 3847, 11, 3847, 11, 3847, 13], "temperature": 0.0, "avg_logprob": -0.11356208874629094, "compression_ratio": 1.6378600823045268, "no_speech_prob": 1.321126092079794e-05}, {"id": 286, "seek": 132888, "start": 1328.88, "end": 1338.16, "text": " And one key thing to note here is that in my train script my data loaders does not have", "tokens": [400, 472, 2141, 551, 281, 3637, 510, 307, 300, 294, 452, 3847, 5755, 452, 1412, 3677, 433, 775, 406, 362], "temperature": 0.0, "avg_logprob": -0.11356890562808875, "compression_ratio": 1.587878787878788, "no_speech_prob": 6.74721059112926e-06}, {"id": 287, "seek": 132888, "start": 1338.16, "end": 1343.16, "text": " the seed equals parameter.", "tokens": [264, 8871, 6915, 13075, 13], "temperature": 0.0, "avg_logprob": -0.11356890562808875, "compression_ratio": 1.587878787878788, "no_speech_prob": 6.74721059112926e-06}, {"id": 288, "seek": 132888, "start": 1343.16, "end": 1347.5200000000002, "text": " So I'm using a different training set every time.", "tokens": [407, 286, 478, 1228, 257, 819, 3097, 992, 633, 565, 13], "temperature": 0.0, "avg_logprob": -0.11356890562808875, "compression_ratio": 1.587878787878788, "no_speech_prob": 6.74721059112926e-06}, {"id": 289, "seek": 132888, "start": 1347.5200000000002, "end": 1355.5800000000002, "text": " So that means that for each of these different runs they're using", "tokens": [407, 300, 1355, 300, 337, 1184, 295, 613, 819, 6676, 436, 434, 1228], "temperature": 0.0, "avg_logprob": -0.11356890562808875, "compression_ratio": 1.587878787878788, "no_speech_prob": 6.74721059112926e-06}, {"id": 290, "seek": 132888, "start": 1355.5800000000002, "end": 1357.0400000000002, "text": " also different validation sets.", "tokens": [611, 819, 24071, 6352, 13], "temperature": 0.0, "avg_logprob": -0.11356890562808875, "compression_ratio": 1.587878787878788, "no_speech_prob": 6.74721059112926e-06}, {"id": 291, "seek": 135704, "start": 1357.04, "end": 1361.32, "text": " So they're not directly comparable, but you can kind of see they're all doing pretty well,", "tokens": [407, 436, 434, 406, 3838, 25323, 11, 457, 291, 393, 733, 295, 536, 436, 434, 439, 884, 1238, 731, 11], "temperature": 0.0, "avg_logprob": -0.11612992591046273, "compression_ratio": 1.490909090909091, "no_speech_prob": 1.0288938938174397e-05}, {"id": 292, "seek": 135704, "start": 1361.32, "end": 1367.44, "text": " 2.1%, 2.3%, 1.7% and so forth.", "tokens": [568, 13, 16, 8923, 568, 13, 18, 8923, 502, 13, 22, 4, 293, 370, 5220, 13], "temperature": 0.0, "avg_logprob": -0.11612992591046273, "compression_ratio": 1.490909090909091, "no_speech_prob": 1.0288938938174397e-05}, {"id": 293, "seek": 135704, "start": 1367.44, "end": 1371.8999999999999, "text": " So why am I using different training and validation sets for each of these?", "tokens": [407, 983, 669, 286, 1228, 819, 3097, 293, 24071, 6352, 337, 1184, 295, 613, 30], "temperature": 0.0, "avg_logprob": -0.11612992591046273, "compression_ratio": 1.490909090909091, "no_speech_prob": 1.0288938938174397e-05}, {"id": 294, "seek": 135704, "start": 1371.8999999999999, "end": 1375.94, "text": " That's because I want to ensemble them.", "tokens": [663, 311, 570, 286, 528, 281, 19492, 552, 13], "temperature": 0.0, "avg_logprob": -0.11612992591046273, "compression_ratio": 1.490909090909091, "no_speech_prob": 1.0288938938174397e-05}, {"id": 295, "seek": 135704, "start": 1375.94, "end": 1386.8799999999999, "text": " So I'm going to use bagging, which is I am going to take the average of their predictions.", "tokens": [407, 286, 478, 516, 281, 764, 3411, 3249, 11, 597, 307, 286, 669, 516, 281, 747, 264, 4274, 295, 641, 21264, 13], "temperature": 0.0, "avg_logprob": -0.11612992591046273, "compression_ratio": 1.490909090909091, "no_speech_prob": 1.0288938938174397e-05}, {"id": 296, "seek": 138688, "start": 1386.88, "end": 1391.44, "text": " Now I mean really when we talked about random forest bagging we were taking the average", "tokens": [823, 286, 914, 534, 562, 321, 2825, 466, 4974, 6719, 3411, 3249, 321, 645, 1940, 264, 4274], "temperature": 0.0, "avg_logprob": -0.14388133497799144, "compression_ratio": 1.9794520547945205, "no_speech_prob": 1.4063122762308922e-05}, {"id": 297, "seek": 138688, "start": 1391.44, "end": 1393.8400000000001, "text": " of intentionally weak models.", "tokens": [295, 22062, 5336, 5245, 13], "temperature": 0.0, "avg_logprob": -0.14388133497799144, "compression_ratio": 1.9794520547945205, "no_speech_prob": 1.4063122762308922e-05}, {"id": 298, "seek": 138688, "start": 1393.8400000000001, "end": 1395.1200000000001, "text": " These are not intentionally weak models.", "tokens": [1981, 366, 406, 22062, 5336, 5245, 13], "temperature": 0.0, "avg_logprob": -0.14388133497799144, "compression_ratio": 1.9794520547945205, "no_speech_prob": 1.4063122762308922e-05}, {"id": 299, "seek": 138688, "start": 1395.1200000000001, "end": 1397.64, "text": " They're meant to be good models, but they're all different.", "tokens": [814, 434, 4140, 281, 312, 665, 5245, 11, 457, 436, 434, 439, 819, 13], "temperature": 0.0, "avg_logprob": -0.14388133497799144, "compression_ratio": 1.9794520547945205, "no_speech_prob": 1.4063122762308922e-05}, {"id": 300, "seek": 138688, "start": 1397.64, "end": 1400.5600000000002, "text": " They're using different architectures and different pre-processing approaches.", "tokens": [814, 434, 1228, 819, 6331, 1303, 293, 819, 659, 12, 41075, 278, 11587, 13], "temperature": 0.0, "avg_logprob": -0.14388133497799144, "compression_ratio": 1.9794520547945205, "no_speech_prob": 1.4063122762308922e-05}, {"id": 301, "seek": 138688, "start": 1400.5600000000002, "end": 1404.72, "text": " And so in general we would hope that these different approaches, some might work well", "tokens": [400, 370, 294, 2674, 321, 576, 1454, 300, 613, 819, 11587, 11, 512, 1062, 589, 731], "temperature": 0.0, "avg_logprob": -0.14388133497799144, "compression_ratio": 1.9794520547945205, "no_speech_prob": 1.4063122762308922e-05}, {"id": 302, "seek": 138688, "start": 1404.72, "end": 1408.16, "text": " for some images and some might work well for other images.", "tokens": [337, 512, 5267, 293, 512, 1062, 589, 731, 337, 661, 5267, 13], "temperature": 0.0, "avg_logprob": -0.14388133497799144, "compression_ratio": 1.9794520547945205, "no_speech_prob": 1.4063122762308922e-05}, {"id": 303, "seek": 138688, "start": 1408.16, "end": 1413.0400000000002, "text": " And so when we average them out hopefully we'll get a good blend of kind of different ideas,", "tokens": [400, 370, 562, 321, 4274, 552, 484, 4696, 321, 603, 483, 257, 665, 10628, 295, 733, 295, 819, 3487, 11], "temperature": 0.0, "avg_logprob": -0.14388133497799144, "compression_ratio": 1.9794520547945205, "no_speech_prob": 1.4063122762308922e-05}, {"id": 304, "seek": 138688, "start": 1413.0400000000002, "end": 1416.64, "text": " which is kind of what you want in bagging.", "tokens": [597, 307, 733, 295, 437, 291, 528, 294, 3411, 3249, 13], "temperature": 0.0, "avg_logprob": -0.14388133497799144, "compression_ratio": 1.9794520547945205, "no_speech_prob": 1.4063122762308922e-05}, {"id": 305, "seek": 141664, "start": 1416.64, "end": 1425.8400000000001, "text": " So we can stack up that list of all the different probabilities and take their mean.", "tokens": [407, 321, 393, 8630, 493, 300, 1329, 295, 439, 264, 819, 33783, 293, 747, 641, 914, 13], "temperature": 0.0, "avg_logprob": -0.13102599382400512, "compression_ratio": 1.5854922279792747, "no_speech_prob": 2.1442903744173236e-05}, {"id": 306, "seek": 141664, "start": 1425.8400000000001, "end": 1429.44, "text": " And so that's going to give us 3,469 predictions.", "tokens": [400, 370, 300, 311, 516, 281, 976, 505, 805, 11, 16169, 24, 21264, 13], "temperature": 0.0, "avg_logprob": -0.13102599382400512, "compression_ratio": 1.5854922279792747, "no_speech_prob": 2.1442903744173236e-05}, {"id": 307, "seek": 141664, "start": 1429.44, "end": 1431.64, "text": " That's our test set size.", "tokens": [663, 311, 527, 1500, 992, 2744, 13], "temperature": 0.0, "avg_logprob": -0.13102599382400512, "compression_ratio": 1.5854922279792747, "no_speech_prob": 2.1442903744173236e-05}, {"id": 308, "seek": 141664, "start": 1431.64, "end": 1440.98, "text": " And each one has 10 probabilities, the probability of each disease.", "tokens": [400, 1184, 472, 575, 1266, 33783, 11, 264, 8482, 295, 1184, 4752, 13], "temperature": 0.0, "avg_logprob": -0.13102599382400512, "compression_ratio": 1.5854922279792747, "no_speech_prob": 2.1442903744173236e-05}, {"id": 309, "seek": 141664, "start": 1440.98, "end": 1445.3200000000002, "text": " And so then we can use argmax to find which probability index is the highest.", "tokens": [400, 370, 550, 321, 393, 764, 3882, 41167, 281, 915, 597, 8482, 8186, 307, 264, 6343, 13], "temperature": 0.0, "avg_logprob": -0.13102599382400512, "compression_ratio": 1.5854922279792747, "no_speech_prob": 2.1442903744173236e-05}, {"id": 310, "seek": 144532, "start": 1445.32, "end": 1448.6, "text": " So that's going to give us our list of indexes.", "tokens": [407, 300, 311, 516, 281, 976, 505, 527, 1329, 295, 8186, 279, 13], "temperature": 0.0, "avg_logprob": -0.13767207837572285, "compression_ratio": 1.6440677966101696, "no_speech_prob": 7.64615924708778e-06}, {"id": 311, "seek": 144532, "start": 1448.6, "end": 1457.6, "text": " So this is basically the same steps as we used before to create our CSV submission file.", "tokens": [407, 341, 307, 1936, 264, 912, 4439, 382, 321, 1143, 949, 281, 1884, 527, 48814, 23689, 3991, 13], "temperature": 0.0, "avg_logprob": -0.13767207837572285, "compression_ratio": 1.6440677966101696, "no_speech_prob": 7.64615924708778e-06}, {"id": 312, "seek": 144532, "start": 1457.6, "end": 1462.48, "text": " So at the time of creating this analysis that got me to the top of the leaderboard.", "tokens": [407, 412, 264, 565, 295, 4084, 341, 5215, 300, 658, 385, 281, 264, 1192, 295, 264, 5263, 3787, 13], "temperature": 0.0, "avg_logprob": -0.13767207837572285, "compression_ratio": 1.6440677966101696, "no_speech_prob": 7.64615924708778e-06}, {"id": 313, "seek": 144532, "start": 1462.48, "end": 1466.3999999999999, "text": " And in fact these are my four submissions.", "tokens": [400, 294, 1186, 613, 366, 452, 1451, 40429, 13], "temperature": 0.0, "avg_logprob": -0.13767207837572285, "compression_ratio": 1.6440677966101696, "no_speech_prob": 7.64615924708778e-06}, {"id": 314, "seek": 144532, "start": 1466.3999999999999, "end": 1469.24, "text": " And you can see each one got better.", "tokens": [400, 291, 393, 536, 1184, 472, 658, 1101, 13], "temperature": 0.0, "avg_logprob": -0.13767207837572285, "compression_ratio": 1.6440677966101696, "no_speech_prob": 7.64615924708778e-06}, {"id": 315, "seek": 144532, "start": 1469.24, "end": 1472.72, "text": " Now you're not always going to get this nice monotonic improvement, right, but you want", "tokens": [823, 291, 434, 406, 1009, 516, 281, 483, 341, 1481, 1108, 310, 11630, 10444, 11, 558, 11, 457, 291, 528], "temperature": 0.0, "avg_logprob": -0.13767207837572285, "compression_ratio": 1.6440677966101696, "no_speech_prob": 7.64615924708778e-06}, {"id": 316, "seek": 147272, "start": 1472.72, "end": 1480.6000000000001, "text": " to be trying to submit something every day to kind of like try out something new.", "tokens": [281, 312, 1382, 281, 10315, 746, 633, 786, 281, 733, 295, 411, 853, 484, 746, 777, 13], "temperature": 0.0, "avg_logprob": -0.10652686640159371, "compression_ratio": 1.6607929515418502, "no_speech_prob": 8.663845619594213e-06}, {"id": 317, "seek": 147272, "start": 1480.6000000000001, "end": 1485.92, "text": " And the more you practice the more you'll get a good intuition of what's going to help.", "tokens": [400, 264, 544, 291, 3124, 264, 544, 291, 603, 483, 257, 665, 24002, 295, 437, 311, 516, 281, 854, 13], "temperature": 0.0, "avg_logprob": -0.10652686640159371, "compression_ratio": 1.6607929515418502, "no_speech_prob": 8.663845619594213e-06}, {"id": 318, "seek": 147272, "start": 1485.92, "end": 1491.56, "text": " So partly I'm showing you this to say it's not like purely random as to whether things", "tokens": [407, 17031, 286, 478, 4099, 291, 341, 281, 584, 309, 311, 406, 411, 17491, 4974, 382, 281, 1968, 721], "temperature": 0.0, "avg_logprob": -0.10652686640159371, "compression_ratio": 1.6607929515418502, "no_speech_prob": 8.663845619594213e-06}, {"id": 319, "seek": 147272, "start": 1491.56, "end": 1492.56, "text": " work or don't.", "tokens": [589, 420, 500, 380, 13], "temperature": 0.0, "avg_logprob": -0.10652686640159371, "compression_ratio": 1.6607929515418502, "no_speech_prob": 8.663845619594213e-06}, {"id": 320, "seek": 147272, "start": 1492.56, "end": 1498.44, "text": " Once you've been doing this for a while you know you will generally be improving things", "tokens": [3443, 291, 600, 668, 884, 341, 337, 257, 1339, 291, 458, 291, 486, 5101, 312, 11470, 721], "temperature": 0.0, "avg_logprob": -0.10652686640159371, "compression_ratio": 1.6607929515418502, "no_speech_prob": 8.663845619594213e-06}, {"id": 321, "seek": 147272, "start": 1498.44, "end": 1500.76, "text": " most of the time.", "tokens": [881, 295, 264, 565, 13], "temperature": 0.0, "avg_logprob": -0.10652686640159371, "compression_ratio": 1.6607929515418502, "no_speech_prob": 8.663845619594213e-06}, {"id": 322, "seek": 150076, "start": 1500.76, "end": 1505.96, "text": " So as you can see from the descriptions my first submission was our CONVNEXT small, the", "tokens": [407, 382, 291, 393, 536, 490, 264, 24406, 452, 700, 23689, 390, 527, 16596, 53, 15988, 20542, 1359, 11, 264], "temperature": 0.0, "avg_logprob": -0.19652538673550474, "compression_ratio": 1.6666666666666667, "no_speech_prob": 4.6102759370114654e-05}, {"id": 323, "seek": 150076, "start": 1505.96, "end": 1508.96, "text": " 12 epochs with TTA.", "tokens": [2272, 30992, 28346, 365, 314, 8241, 13], "temperature": 0.0, "avg_logprob": -0.19652538673550474, "compression_ratio": 1.6666666666666667, "no_speech_prob": 4.6102759370114654e-05}, {"id": 324, "seek": 150076, "start": 1508.96, "end": 1511.8799999999999, "text": " And then an ensemble of CONVNEXT.", "tokens": [400, 550, 364, 19492, 295, 16596, 53, 15988, 20542, 13], "temperature": 0.0, "avg_logprob": -0.19652538673550474, "compression_ratio": 1.6666666666666667, "no_speech_prob": 4.6102759370114654e-05}, {"id": 325, "seek": 150076, "start": 1511.8799999999999, "end": 1516.92, "text": " So it's basically this exact same thing but just retraining a few with different training", "tokens": [407, 309, 311, 1936, 341, 1900, 912, 551, 457, 445, 49356, 1760, 257, 1326, 365, 819, 3097], "temperature": 0.0, "avg_logprob": -0.19652538673550474, "compression_ratio": 1.6666666666666667, "no_speech_prob": 4.6102759370114654e-05}, {"id": 326, "seek": 150076, "start": 1516.92, "end": 1518.84, "text": " subsets.", "tokens": [2090, 1385, 13], "temperature": 0.0, "avg_logprob": -0.19652538673550474, "compression_ratio": 1.6666666666666667, "no_speech_prob": 4.6102759370114654e-05}, {"id": 327, "seek": 150076, "start": 1518.84, "end": 1520.4, "text": " And then this is the same thing again.", "tokens": [400, 550, 341, 307, 264, 912, 551, 797, 13], "temperature": 0.0, "avg_logprob": -0.19652538673550474, "compression_ratio": 1.6666666666666667, "no_speech_prob": 4.6102759370114654e-05}, {"id": 328, "seek": 150076, "start": 1520.4, "end": 1523.52, "text": " This is the thing we just saw basically.", "tokens": [639, 307, 264, 551, 321, 445, 1866, 1936, 13], "temperature": 0.0, "avg_logprob": -0.19652538673550474, "compression_ratio": 1.6666666666666667, "no_speech_prob": 4.6102759370114654e-05}, {"id": 329, "seek": 150076, "start": 1523.52, "end": 1527.24, "text": " The ensemble of large bottles with TTA.", "tokens": [440, 19492, 295, 2416, 15923, 365, 314, 8241, 13], "temperature": 0.0, "avg_logprob": -0.19652538673550474, "compression_ratio": 1.6666666666666667, "no_speech_prob": 4.6102759370114654e-05}, {"id": 330, "seek": 152724, "start": 1527.24, "end": 1534.4, "text": " And then the last one was something I skipped over which was I, the VIT models were the", "tokens": [400, 550, 264, 1036, 472, 390, 746, 286, 30193, 670, 597, 390, 286, 11, 264, 691, 3927, 5245, 645, 264], "temperature": 0.0, "avg_logprob": -0.2706485324435764, "compression_ratio": 1.4329896907216495, "no_speech_prob": 1.5203429938992485e-05}, {"id": 331, "seek": 152724, "start": 1534.4, "end": 1536.96, "text": " best in my testing.", "tokens": [1151, 294, 452, 4997, 13], "temperature": 0.0, "avg_logprob": -0.2706485324435764, "compression_ratio": 1.4329896907216495, "no_speech_prob": 1.5203429938992485e-05}, {"id": 332, "seek": 152724, "start": 1536.96, "end": 1540.52, "text": " So I basically weighted them as double in the ensemble.", "tokens": [407, 286, 1936, 32807, 552, 382, 3834, 294, 264, 19492, 13], "temperature": 0.0, "avg_logprob": -0.2706485324435764, "compression_ratio": 1.4329896907216495, "no_speech_prob": 1.5203429938992485e-05}, {"id": 333, "seek": 152724, "start": 1540.52, "end": 1545.58, "text": " I'm pretty unscientific but again it gave it another boost.", "tokens": [286, 478, 1238, 2693, 5412, 1089, 457, 797, 309, 2729, 309, 1071, 9194, 13], "temperature": 0.0, "avg_logprob": -0.2706485324435764, "compression_ratio": 1.4329896907216495, "no_speech_prob": 1.5203429938992485e-05}, {"id": 334, "seek": 152724, "start": 1545.58, "end": 1549.36, "text": " And so that was it.", "tokens": [400, 370, 300, 390, 309, 13], "temperature": 0.0, "avg_logprob": -0.2706485324435764, "compression_ratio": 1.4329896907216495, "no_speech_prob": 1.5203429938992485e-05}, {"id": 335, "seek": 152724, "start": 1549.36, "end": 1552.84, "text": " Alright, John.", "tokens": [2798, 11, 2619, 13], "temperature": 0.0, "avg_logprob": -0.2706485324435764, "compression_ratio": 1.4329896907216495, "no_speech_prob": 1.5203429938992485e-05}, {"id": 336, "seek": 152724, "start": 1552.84, "end": 1556.56, "text": " Yes, thanks Jeremy.", "tokens": [1079, 11, 3231, 17809, 13], "temperature": 0.0, "avg_logprob": -0.2706485324435764, "compression_ratio": 1.4329896907216495, "no_speech_prob": 1.5203429938992485e-05}, {"id": 337, "seek": 155656, "start": 1556.56, "end": 1562.12, "text": " So in no particular order, Kurian is asking would trying out cross validation with k-folds", "tokens": [407, 294, 572, 1729, 1668, 11, 16481, 952, 307, 3365, 576, 1382, 484, 3278, 24071, 365, 350, 12, 18353, 82], "temperature": 0.0, "avg_logprob": -0.15990183613087872, "compression_ratio": 1.8110599078341014, "no_speech_prob": 2.280137596244458e-05}, {"id": 338, "seek": 155656, "start": 1562.12, "end": 1566.72, "text": " with the same architecture make sense to do the same ensembling of models?", "tokens": [365, 264, 912, 9482, 652, 2020, 281, 360, 264, 912, 12567, 2504, 1688, 295, 5245, 30], "temperature": 0.0, "avg_logprob": -0.15990183613087872, "compression_ratio": 1.8110599078341014, "no_speech_prob": 2.280137596244458e-05}, {"id": 339, "seek": 155656, "start": 1566.72, "end": 1572.08, "text": " Yes, so a popular thing is to do k-fold cross validation.", "tokens": [1079, 11, 370, 257, 3743, 551, 307, 281, 360, 350, 12, 18353, 3278, 24071, 13], "temperature": 0.0, "avg_logprob": -0.15990183613087872, "compression_ratio": 1.8110599078341014, "no_speech_prob": 2.280137596244458e-05}, {"id": 340, "seek": 155656, "start": 1572.08, "end": 1576.08, "text": " So k-fold cross validation is something very, very similar to what I've done here.", "tokens": [407, 350, 12, 18353, 3278, 24071, 307, 746, 588, 11, 588, 2531, 281, 437, 286, 600, 1096, 510, 13], "temperature": 0.0, "avg_logprob": -0.15990183613087872, "compression_ratio": 1.8110599078341014, "no_speech_prob": 2.280137596244458e-05}, {"id": 341, "seek": 155656, "start": 1576.08, "end": 1584.84, "text": " So what I've done here is I've trained a bunch of models with different training sets.", "tokens": [407, 437, 286, 600, 1096, 510, 307, 286, 600, 8895, 257, 3840, 295, 5245, 365, 819, 3097, 6352, 13], "temperature": 0.0, "avg_logprob": -0.15990183613087872, "compression_ratio": 1.8110599078341014, "no_speech_prob": 2.280137596244458e-05}, {"id": 342, "seek": 158484, "start": 1584.84, "end": 1590.04, "text": " Each one is a different random 80% of the data.", "tokens": [6947, 472, 307, 257, 819, 4974, 4688, 4, 295, 264, 1412, 13], "temperature": 0.0, "avg_logprob": -0.16456044438373613, "compression_ratio": 1.690721649484536, "no_speech_prob": 4.132047251914628e-05}, {"id": 343, "seek": 158484, "start": 1590.04, "end": 1596.04, "text": " Five-fold cross validation does something similar but what it says is rather than picking", "tokens": [9436, 12, 18353, 3278, 24071, 775, 746, 2531, 457, 437, 309, 1619, 307, 2831, 813, 8867], "temperature": 0.0, "avg_logprob": -0.16456044438373613, "compression_ratio": 1.690721649484536, "no_speech_prob": 4.132047251914628e-05}, {"id": 344, "seek": 158484, "start": 1596.04, "end": 1606.1999999999998, "text": " say five samples out with different random subsets, in fact instead first do all except", "tokens": [584, 1732, 10938, 484, 365, 819, 4974, 2090, 1385, 11, 294, 1186, 2602, 700, 360, 439, 3993], "temperature": 0.0, "avg_logprob": -0.16456044438373613, "compression_ratio": 1.690721649484536, "no_speech_prob": 4.132047251914628e-05}, {"id": 345, "seek": 158484, "start": 1606.1999999999998, "end": 1610.6399999999999, "text": " for the first 20% of the data and then all but the second 20% and then all but the third", "tokens": [337, 264, 700, 945, 4, 295, 264, 1412, 293, 550, 439, 457, 264, 1150, 945, 4, 293, 550, 439, 457, 264, 2636], "temperature": 0.0, "avg_logprob": -0.16456044438373613, "compression_ratio": 1.690721649484536, "no_speech_prob": 4.132047251914628e-05}, {"id": 346, "seek": 158484, "start": 1610.6399999999999, "end": 1611.6399999999999, "text": " and so forth.", "tokens": [293, 370, 5220, 13], "temperature": 0.0, "avg_logprob": -0.16456044438373613, "compression_ratio": 1.690721649484536, "no_speech_prob": 4.132047251914628e-05}, {"id": 347, "seek": 161164, "start": 1611.64, "end": 1619.16, "text": " So you start with five subsets, each of which have non-overlapping validation sets and then", "tokens": [407, 291, 722, 365, 1732, 2090, 1385, 11, 1184, 295, 597, 362, 2107, 12, 3570, 15639, 24071, 6352, 293, 550], "temperature": 0.0, "avg_logprob": -0.2100914849175347, "compression_ratio": 1.458100558659218, "no_speech_prob": 2.5068136892514303e-05}, {"id": 348, "seek": 161164, "start": 1619.16, "end": 1623.68, "text": " you'll ensemble those.", "tokens": [291, 603, 19492, 729, 13], "temperature": 0.0, "avg_logprob": -0.2100914849175347, "compression_ratio": 1.458100558659218, "no_speech_prob": 2.5068136892514303e-05}, {"id": 349, "seek": 161164, "start": 1623.68, "end": 1630.3200000000002, "text": " You know in theory maybe that could be slightly better because you're kind of guaranteed that", "tokens": [509, 458, 294, 5261, 1310, 300, 727, 312, 4748, 1101, 570, 291, 434, 733, 295, 18031, 300], "temperature": 0.0, "avg_logprob": -0.2100914849175347, "compression_ratio": 1.458100558659218, "no_speech_prob": 2.5068136892514303e-05}, {"id": 350, "seek": 161164, "start": 1630.3200000000002, "end": 1636.46, "text": " every row appears four times, you know, effectively.", "tokens": [633, 5386, 7038, 1451, 1413, 11, 291, 458, 11, 8659, 13], "temperature": 0.0, "avg_logprob": -0.2100914849175347, "compression_ratio": 1.458100558659218, "no_speech_prob": 2.5068136892514303e-05}, {"id": 351, "seek": 163646, "start": 1636.46, "end": 1642.24, "text": " It also has a benefit that you could average those five validation sets because there's", "tokens": [467, 611, 575, 257, 5121, 300, 291, 727, 4274, 729, 1732, 24071, 6352, 570, 456, 311], "temperature": 0.0, "avg_logprob": -0.14792487265049725, "compression_ratio": 1.6822429906542056, "no_speech_prob": 4.494764652918093e-06}, {"id": 352, "seek": 163646, "start": 1642.24, "end": 1647.24, "text": " no kind of overlap between them to get a cross validation.", "tokens": [572, 733, 295, 19959, 1296, 552, 281, 483, 257, 3278, 24071, 13], "temperature": 0.0, "avg_logprob": -0.14792487265049725, "compression_ratio": 1.6822429906542056, "no_speech_prob": 4.494764652918093e-06}, {"id": 353, "seek": 163646, "start": 1647.24, "end": 1654.7, "text": " Personally I generally don't bother and the reason I don't is because this way I can add", "tokens": [21079, 286, 5101, 500, 380, 8677, 293, 264, 1778, 286, 500, 380, 307, 570, 341, 636, 286, 393, 909], "temperature": 0.0, "avg_logprob": -0.14792487265049725, "compression_ratio": 1.6822429906542056, "no_speech_prob": 4.494764652918093e-06}, {"id": 354, "seek": 163646, "start": 1654.7, "end": 1659.16, "text": " and remove models very easily.", "tokens": [293, 4159, 5245, 588, 3612, 13], "temperature": 0.0, "avg_logprob": -0.14792487265049725, "compression_ratio": 1.6822429906542056, "no_speech_prob": 4.494764652918093e-06}, {"id": 355, "seek": 163646, "start": 1659.16, "end": 1665.66, "text": " I don't, you know, I can just, you know, add another architecture and whatever to my ensemble", "tokens": [286, 500, 380, 11, 291, 458, 11, 286, 393, 445, 11, 291, 458, 11, 909, 1071, 9482, 293, 2035, 281, 452, 19492], "temperature": 0.0, "avg_logprob": -0.14792487265049725, "compression_ratio": 1.6822429906542056, "no_speech_prob": 4.494764652918093e-06}, {"id": 356, "seek": 166566, "start": 1665.66, "end": 1669.6000000000001, "text": " without trying to find a different overlapping non-overlapping subset.", "tokens": [1553, 1382, 281, 915, 257, 819, 33535, 2107, 12, 3570, 15639, 25993, 13], "temperature": 0.0, "avg_logprob": -0.2415445645650228, "compression_ratio": 1.6009174311926606, "no_speech_prob": 2.7966250854660757e-05}, {"id": 357, "seek": 166566, "start": 1669.6000000000001, "end": 1678.72, "text": " So yeah, cross validation is therefore something that I use probably less than most people", "tokens": [407, 1338, 11, 3278, 24071, 307, 4412, 746, 300, 286, 764, 1391, 1570, 813, 881, 561], "temperature": 0.0, "avg_logprob": -0.2415445645650228, "compression_ratio": 1.6009174311926606, "no_speech_prob": 2.7966250854660757e-05}, {"id": 358, "seek": 166566, "start": 1678.72, "end": 1679.72, "text": " or almost never.", "tokens": [420, 1920, 1128, 13], "temperature": 0.0, "avg_logprob": -0.2415445645650228, "compression_ratio": 1.6009174311926606, "no_speech_prob": 2.7966250854660757e-05}, {"id": 359, "seek": 166566, "start": 1679.72, "end": 1680.72, "text": " Awesome, thank you.", "tokens": [10391, 11, 1309, 291, 13], "temperature": 0.0, "avg_logprob": -0.2415445645650228, "compression_ratio": 1.6009174311926606, "no_speech_prob": 2.7966250854660757e-05}, {"id": 360, "seek": 166566, "start": 1680.72, "end": 1687.68, "text": " Are there any, just coming back to gradient accumulation, any other kind of drawbacks", "tokens": [2014, 456, 604, 11, 445, 1348, 646, 281, 16235, 35647, 11, 604, 661, 733, 295, 2642, 17758], "temperature": 0.0, "avg_logprob": -0.2415445645650228, "compression_ratio": 1.6009174311926606, "no_speech_prob": 2.7966250854660757e-05}, {"id": 361, "seek": 166566, "start": 1687.68, "end": 1690.24, "text": " or potential gotchas with gradient accumulation?", "tokens": [420, 3995, 658, 41299, 365, 16235, 35647, 30], "temperature": 0.0, "avg_logprob": -0.2415445645650228, "compression_ratio": 1.6009174311926606, "no_speech_prob": 2.7966250854660757e-05}, {"id": 362, "seek": 166566, "start": 1690.24, "end": 1692.24, "text": " No, not really.", "tokens": [883, 11, 406, 534, 13], "temperature": 0.0, "avg_logprob": -0.2415445645650228, "compression_ratio": 1.6009174311926606, "no_speech_prob": 2.7966250854660757e-05}, {"id": 363, "seek": 169224, "start": 1692.24, "end": 1700.4, "text": " Yeah, like amazingly, it doesn't even really slow things down much, you know, going from", "tokens": [865, 11, 411, 31762, 11, 309, 1177, 380, 754, 534, 2964, 721, 760, 709, 11, 291, 458, 11, 516, 490], "temperature": 0.0, "avg_logprob": -0.19150724166478866, "compression_ratio": 1.4829268292682927, "no_speech_prob": 2.429433516226709e-05}, {"id": 364, "seek": 169224, "start": 1700.4, "end": 1704.6, "text": " a batch size of 64 to a batch size of 32.", "tokens": [257, 15245, 2744, 295, 12145, 281, 257, 15245, 2744, 295, 8858, 13], "temperature": 0.0, "avg_logprob": -0.19150724166478866, "compression_ratio": 1.4829268292682927, "no_speech_prob": 2.429433516226709e-05}, {"id": 365, "seek": 169224, "start": 1704.6, "end": 1708.28, "text": " By definition you had to do it because you're GPUs full so you're obviously getting a lot", "tokens": [3146, 7123, 291, 632, 281, 360, 309, 570, 291, 434, 18407, 82, 1577, 370, 291, 434, 2745, 1242, 257, 688], "temperature": 0.0, "avg_logprob": -0.19150724166478866, "compression_ratio": 1.4829268292682927, "no_speech_prob": 2.429433516226709e-05}, {"id": 366, "seek": 169224, "start": 1708.28, "end": 1713.92, "text": " of data so it's probably going to be using its processing speed pretty effectively.", "tokens": [295, 1412, 370, 309, 311, 1391, 516, 281, 312, 1228, 1080, 9007, 3073, 1238, 8659, 13], "temperature": 0.0, "avg_logprob": -0.19150724166478866, "compression_ratio": 1.4829268292682927, "no_speech_prob": 2.429433516226709e-05}, {"id": 367, "seek": 171392, "start": 1713.92, "end": 1722.88, "text": " So yeah, no, it's just a good technique that we should all be buying cheaper graphics cards", "tokens": [407, 1338, 11, 572, 11, 309, 311, 445, 257, 665, 6532, 300, 321, 820, 439, 312, 6382, 12284, 11837, 5632], "temperature": 0.0, "avg_logprob": -0.20946121215820312, "compression_ratio": 1.4892703862660943, "no_speech_prob": 2.3544414943899028e-05}, {"id": 368, "seek": 171392, "start": 1722.88, "end": 1728.64, "text": " with less memory in them and using, you know, have, like I don't know the prices, I suspect", "tokens": [365, 1570, 4675, 294, 552, 293, 1228, 11, 291, 458, 11, 362, 11, 411, 286, 500, 380, 458, 264, 7901, 11, 286, 9091], "temperature": 0.0, "avg_logprob": -0.20946121215820312, "compression_ratio": 1.4892703862660943, "no_speech_prob": 2.3544414943899028e-05}, {"id": 369, "seek": 171392, "start": 1728.64, "end": 1734.68, "text": " like you could probably buy like two 3080s to the price of one 3090 Ti or something.", "tokens": [411, 291, 727, 1391, 2256, 411, 732, 2217, 4702, 82, 281, 264, 3218, 295, 472, 2217, 7771, 20456, 420, 746, 13], "temperature": 0.0, "avg_logprob": -0.20946121215820312, "compression_ratio": 1.4892703862660943, "no_speech_prob": 2.3544414943899028e-05}, {"id": 370, "seek": 171392, "start": 1734.68, "end": 1736.5600000000002, "text": " That would be a very good deal.", "tokens": [663, 576, 312, 257, 588, 665, 2028, 13], "temperature": 0.0, "avg_logprob": -0.20946121215820312, "compression_ratio": 1.4892703862660943, "no_speech_prob": 2.3544414943899028e-05}, {"id": 371, "seek": 171392, "start": 1736.5600000000002, "end": 1741.88, "text": " Yes, clearly you're not on the Nvidia payroll.", "tokens": [1079, 11, 4448, 291, 434, 406, 322, 264, 46284, 36873, 13], "temperature": 0.0, "avg_logprob": -0.20946121215820312, "compression_ratio": 1.4892703862660943, "no_speech_prob": 2.3544414943899028e-05}, {"id": 372, "seek": 174188, "start": 1741.88, "end": 1746.4, "text": " So look, this is a good segue then we did have a question about sort of GPU recommendations", "tokens": [407, 574, 11, 341, 307, 257, 665, 33850, 550, 321, 630, 362, 257, 1168, 466, 1333, 295, 18407, 10434], "temperature": 0.0, "avg_logprob": -0.1809648265009341, "compression_ratio": 1.625984251968504, "no_speech_prob": 2.883172783185728e-05}, {"id": 373, "seek": 174188, "start": 1746.4, "end": 1749.5600000000002, "text": " and there's been a bit of chat on that as well.", "tokens": [293, 456, 311, 668, 257, 857, 295, 5081, 322, 300, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.1809648265009341, "compression_ratio": 1.625984251968504, "no_speech_prob": 2.883172783185728e-05}, {"id": 374, "seek": 174188, "start": 1749.5600000000002, "end": 1754.7600000000002, "text": " So any, you know, commentary, any additional commentary around GPU recommendations?", "tokens": [407, 604, 11, 291, 458, 11, 23527, 11, 604, 4497, 23527, 926, 18407, 10434, 30], "temperature": 0.0, "avg_logprob": -0.1809648265009341, "compression_ratio": 1.625984251968504, "no_speech_prob": 2.883172783185728e-05}, {"id": 375, "seek": 174188, "start": 1754.7600000000002, "end": 1757.0800000000002, "text": " No, not really.", "tokens": [883, 11, 406, 534, 13], "temperature": 0.0, "avg_logprob": -0.1809648265009341, "compression_ratio": 1.625984251968504, "no_speech_prob": 2.883172783185728e-05}, {"id": 376, "seek": 174188, "start": 1757.0800000000002, "end": 1763.8400000000001, "text": " I mean, obviously, at the moment, Nvidia is the only game in town, you know, if you buy,", "tokens": [286, 914, 11, 2745, 11, 412, 264, 1623, 11, 46284, 307, 264, 787, 1216, 294, 3954, 11, 291, 458, 11, 498, 291, 2256, 11], "temperature": 0.0, "avg_logprob": -0.1809648265009341, "compression_ratio": 1.625984251968504, "no_speech_prob": 2.883172783185728e-05}, {"id": 377, "seek": 174188, "start": 1763.8400000000001, "end": 1771.0, "text": " if you trying to use a, you know, Apple M1 or M2 or an AMD card, you're basically in", "tokens": [498, 291, 1382, 281, 764, 257, 11, 291, 458, 11, 6373, 376, 16, 420, 376, 17, 420, 364, 34808, 2920, 11, 291, 434, 1936, 294], "temperature": 0.0, "avg_logprob": -0.1809648265009341, "compression_ratio": 1.625984251968504, "no_speech_prob": 2.883172783185728e-05}, {"id": 378, "seek": 177100, "start": 1771.0, "end": 1781.28, "text": " for a world of pain in terms of compatibility and stuff and unoptimized libraries and whatever.", "tokens": [337, 257, 1002, 295, 1822, 294, 2115, 295, 34237, 293, 1507, 293, 517, 5747, 332, 1602, 15148, 293, 2035, 13], "temperature": 0.0, "avg_logprob": -0.1398395215961295, "compression_ratio": 1.5634517766497462, "no_speech_prob": 2.0783367290277965e-05}, {"id": 379, "seek": 177100, "start": 1781.28, "end": 1791.8, "text": " The Nvidia consumer cards, so the ones that start with RTX are much cheaper, but are just", "tokens": [440, 46284, 9711, 5632, 11, 370, 264, 2306, 300, 722, 365, 44573, 366, 709, 12284, 11, 457, 366, 445], "temperature": 0.0, "avg_logprob": -0.1398395215961295, "compression_ratio": 1.5634517766497462, "no_speech_prob": 2.0783367290277965e-05}, {"id": 380, "seek": 177100, "start": 1791.8, "end": 1796.6, "text": " as good as the expensive enterprise cards.", "tokens": [382, 665, 382, 264, 5124, 14132, 5632, 13], "temperature": 0.0, "avg_logprob": -0.1398395215961295, "compression_ratio": 1.5634517766497462, "no_speech_prob": 2.0783367290277965e-05}, {"id": 381, "seek": 177100, "start": 1796.6, "end": 1800.72, "text": " So you might be wondering why anybody would buy the expensive enterprise cards.", "tokens": [407, 291, 1062, 312, 6359, 983, 4472, 576, 2256, 264, 5124, 14132, 5632, 13], "temperature": 0.0, "avg_logprob": -0.1398395215961295, "compression_ratio": 1.5634517766497462, "no_speech_prob": 2.0783367290277965e-05}, {"id": 382, "seek": 180072, "start": 1800.72, "end": 1806.2, "text": " And the reason is that there's a licensing issue that Nvidia will not allow you to use", "tokens": [400, 264, 1778, 307, 300, 456, 311, 257, 29759, 2734, 300, 46284, 486, 406, 2089, 291, 281, 764], "temperature": 0.0, "avg_logprob": -0.10707498906732915, "compression_ratio": 1.6260504201680672, "no_speech_prob": 1.6439069440821186e-05}, {"id": 383, "seek": 180072, "start": 1806.2, "end": 1814.16, "text": " an RTX consumer card in a data center, which is also why cloud computing is more expensive", "tokens": [364, 44573, 9711, 2920, 294, 257, 1412, 3056, 11, 597, 307, 611, 983, 4588, 15866, 307, 544, 5124], "temperature": 0.0, "avg_logprob": -0.10707498906732915, "compression_ratio": 1.6260504201680672, "no_speech_prob": 1.6439069440821186e-05}, {"id": 384, "seek": 180072, "start": 1814.16, "end": 1821.16, "text": " than it kind of ought to be because everybody selling cloud computing GPUs is selling these", "tokens": [813, 309, 733, 295, 13416, 281, 312, 570, 2201, 6511, 4588, 15866, 18407, 82, 307, 6511, 613], "temperature": 0.0, "avg_logprob": -0.10707498906732915, "compression_ratio": 1.6260504201680672, "no_speech_prob": 1.6439069440821186e-05}, {"id": 385, "seek": 180072, "start": 1821.16, "end": 1824.48, "text": " cards that are like, I can't remember, I think they're like three times more expensive for", "tokens": [5632, 300, 366, 411, 11, 286, 393, 380, 1604, 11, 286, 519, 436, 434, 411, 1045, 1413, 544, 5124, 337], "temperature": 0.0, "avg_logprob": -0.10707498906732915, "compression_ratio": 1.6260504201680672, "no_speech_prob": 1.6439069440821186e-05}, {"id": 386, "seek": 180072, "start": 1824.48, "end": 1827.1200000000001, "text": " kind of the same features.", "tokens": [733, 295, 264, 912, 4122, 13], "temperature": 0.0, "avg_logprob": -0.10707498906732915, "compression_ratio": 1.6260504201680672, "no_speech_prob": 1.6439069440821186e-05}, {"id": 387, "seek": 182712, "start": 1827.12, "end": 1831.4799999999998, "text": " So yeah, if you do get serious about deep learning to the point that you're prepared", "tokens": [407, 1338, 11, 498, 291, 360, 483, 3156, 466, 2452, 2539, 281, 264, 935, 300, 291, 434, 4927], "temperature": 0.0, "avg_logprob": -0.20871822523034136, "compression_ratio": 1.55893536121673, "no_speech_prob": 1.568777224747464e-05}, {"id": 388, "seek": 182712, "start": 1831.4799999999998, "end": 1840.12, "text": " to invest, you know, a few days in administering a box and, you know, I guess depending on", "tokens": [281, 1963, 11, 291, 458, 11, 257, 1326, 1708, 294, 22096, 278, 257, 2424, 293, 11, 291, 458, 11, 286, 2041, 5413, 322], "temperature": 0.0, "avg_logprob": -0.20871822523034136, "compression_ratio": 1.55893536121673, "no_speech_prob": 1.568777224747464e-05}, {"id": 389, "seek": 182712, "start": 1840.12, "end": 1842.9199999999998, "text": " prices hopefully will start to come down, but currently a thousand or two dollars, a", "tokens": [7901, 4696, 486, 722, 281, 808, 760, 11, 457, 4362, 257, 4714, 420, 732, 3808, 11, 257], "temperature": 0.0, "avg_logprob": -0.20871822523034136, "compression_ratio": 1.55893536121673, "no_speech_prob": 1.568777224747464e-05}, {"id": 390, "seek": 182712, "start": 1842.9199999999998, "end": 1848.6799999999998, "text": " thousand or $2,000 and buying a GPU then, you know, that'll probably pay you back pretty", "tokens": [4714, 420, 1848, 17, 11, 1360, 293, 6382, 257, 18407, 550, 11, 291, 458, 11, 300, 603, 1391, 1689, 291, 646, 1238], "temperature": 0.0, "avg_logprob": -0.20871822523034136, "compression_ratio": 1.55893536121673, "no_speech_prob": 1.568777224747464e-05}, {"id": 391, "seek": 182712, "start": 1848.6799999999998, "end": 1849.6799999999998, "text": " quickly.", "tokens": [2661, 13], "temperature": 0.0, "avg_logprob": -0.20871822523034136, "compression_ratio": 1.55893536121673, "no_speech_prob": 1.568777224747464e-05}, {"id": 392, "seek": 182712, "start": 1849.6799999999998, "end": 1850.6799999999998, "text": " Great.", "tokens": [3769, 13], "temperature": 0.0, "avg_logprob": -0.20871822523034136, "compression_ratio": 1.55893536121673, "no_speech_prob": 1.568777224747464e-05}, {"id": 393, "seek": 182712, "start": 1850.6799999999998, "end": 1851.6799999999998, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.20871822523034136, "compression_ratio": 1.55893536121673, "no_speech_prob": 1.568777224747464e-05}, {"id": 394, "seek": 182712, "start": 1851.6799999999998, "end": 1856.4599999999998, "text": " Let's see, another one's come in.", "tokens": [961, 311, 536, 11, 1071, 472, 311, 808, 294, 13], "temperature": 0.0, "avg_logprob": -0.20871822523034136, "compression_ratio": 1.55893536121673, "no_speech_prob": 1.568777224747464e-05}, {"id": 395, "seek": 185646, "start": 1856.46, "end": 1860.8400000000001, "text": " If you have a back on models, not hardware, if you have a well functioning, but large", "tokens": [759, 291, 362, 257, 646, 322, 5245, 11, 406, 8837, 11, 498, 291, 362, 257, 731, 18483, 11, 457, 2416], "temperature": 0.0, "avg_logprob": -0.19230514822654354, "compression_ratio": 1.6637931034482758, "no_speech_prob": 3.2695632398827e-05}, {"id": 396, "seek": 185646, "start": 1860.8400000000001, "end": 1867.32, "text": " model, can it make sense to train a smaller model to produce the same final activations", "tokens": [2316, 11, 393, 309, 652, 2020, 281, 3847, 257, 4356, 2316, 281, 5258, 264, 912, 2572, 2430, 763], "temperature": 0.0, "avg_logprob": -0.19230514822654354, "compression_ratio": 1.6637931034482758, "no_speech_prob": 3.2695632398827e-05}, {"id": 397, "seek": 185646, "start": 1867.32, "end": 1868.8, "text": " as the larger model?", "tokens": [382, 264, 4833, 2316, 30], "temperature": 0.0, "avg_logprob": -0.19230514822654354, "compression_ratio": 1.6637931034482758, "no_speech_prob": 3.2695632398827e-05}, {"id": 398, "seek": 185646, "start": 1868.8, "end": 1869.8, "text": " Oh yeah, absolutely.", "tokens": [876, 1338, 11, 3122, 13], "temperature": 0.0, "avg_logprob": -0.19230514822654354, "compression_ratio": 1.6637931034482758, "no_speech_prob": 3.2695632398827e-05}, {"id": 399, "seek": 185646, "start": 1869.8, "end": 1877.8, "text": " I'm not sure we'll get into that this time around, but yeah, we'll cover that in part", "tokens": [286, 478, 406, 988, 321, 603, 483, 666, 300, 341, 565, 926, 11, 457, 1338, 11, 321, 603, 2060, 300, 294, 644], "temperature": 0.0, "avg_logprob": -0.19230514822654354, "compression_ratio": 1.6637931034482758, "no_speech_prob": 3.2695632398827e-05}, {"id": 400, "seek": 185646, "start": 1877.8, "end": 1883.0, "text": " two, I think, but yeah, basically there's a kind of teacher student models and model", "tokens": [732, 11, 286, 519, 11, 457, 1338, 11, 1936, 456, 311, 257, 733, 295, 5027, 3107, 5245, 293, 2316], "temperature": 0.0, "avg_logprob": -0.19230514822654354, "compression_ratio": 1.6637931034482758, "no_speech_prob": 3.2695632398827e-05}, {"id": 401, "seek": 188300, "start": 1883.0, "end": 1889.68, "text": " distillation, which broadly speaking there, there are ways to make inference faster by", "tokens": [42923, 399, 11, 597, 19511, 4124, 456, 11, 456, 366, 2098, 281, 652, 38253, 4663, 538], "temperature": 0.0, "avg_logprob": -0.1529515523176927, "compression_ratio": 1.5887096774193548, "no_speech_prob": 1.593560773471836e-05}, {"id": 402, "seek": 188300, "start": 1889.68, "end": 1894.6, "text": " training small models that work the same way as large models.", "tokens": [3097, 1359, 5245, 300, 589, 264, 912, 636, 382, 2416, 5245, 13], "temperature": 0.0, "avg_logprob": -0.1529515523176927, "compression_ratio": 1.5887096774193548, "no_speech_prob": 1.593560773471836e-05}, {"id": 403, "seek": 188300, "start": 1894.6, "end": 1895.6, "text": " Great.", "tokens": [3769, 13], "temperature": 0.0, "avg_logprob": -0.1529515523176927, "compression_ratio": 1.5887096774193548, "no_speech_prob": 1.593560773471836e-05}, {"id": 404, "seek": 188300, "start": 1895.6, "end": 1896.6, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.1529515523176927, "compression_ratio": 1.5887096774193548, "no_speech_prob": 1.593560773471836e-05}, {"id": 405, "seek": 188300, "start": 1896.6, "end": 1897.6, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.1529515523176927, "compression_ratio": 1.5887096774193548, "no_speech_prob": 1.593560773471836e-05}, {"id": 406, "seek": 188300, "start": 1897.6, "end": 1905.12, "text": " So that is the actual real end of road to the top because beyond that, we don't actually", "tokens": [407, 300, 307, 264, 3539, 957, 917, 295, 3060, 281, 264, 1192, 570, 4399, 300, 11, 321, 500, 380, 767], "temperature": 0.0, "avg_logprob": -0.1529515523176927, "compression_ratio": 1.5887096774193548, "no_speech_prob": 1.593560773471836e-05}, {"id": 407, "seek": 188300, "start": 1905.12, "end": 1906.8, "text": " cover how to get closer to the top.", "tokens": [2060, 577, 281, 483, 4966, 281, 264, 1192, 13], "temperature": 0.0, "avg_logprob": -0.1529515523176927, "compression_ratio": 1.5887096774193548, "no_speech_prob": 1.593560773471836e-05}, {"id": 408, "seek": 188300, "start": 1906.8, "end": 1911.92, "text": " You'd have to ask Kurian to share his techniques to find out that or Nick to get the second", "tokens": [509, 1116, 362, 281, 1029, 16481, 952, 281, 2073, 702, 7512, 281, 915, 484, 300, 420, 9449, 281, 483, 264, 1150], "temperature": 0.0, "avg_logprob": -0.1529515523176927, "compression_ratio": 1.5887096774193548, "no_speech_prob": 1.593560773471836e-05}, {"id": 409, "seek": 191192, "start": 1911.92, "end": 1914.8400000000001, "text": " place in the top.", "tokens": [1081, 294, 264, 1192, 13], "temperature": 0.0, "avg_logprob": -0.13678076569463166, "compression_ratio": 1.5862068965517242, "no_speech_prob": 1.202735165861668e-05}, {"id": 410, "seek": 191192, "start": 1914.8400000000001, "end": 1921.3600000000001, "text": " Part four is actually something that I think is very useful to know about for learning", "tokens": [4100, 1451, 307, 767, 746, 300, 286, 519, 307, 588, 4420, 281, 458, 466, 337, 2539], "temperature": 0.0, "avg_logprob": -0.13678076569463166, "compression_ratio": 1.5862068965517242, "no_speech_prob": 1.202735165861668e-05}, {"id": 411, "seek": 191192, "start": 1921.3600000000001, "end": 1929.8000000000002, "text": " and it's going to teach us a whole lot about how the last layer of a neural networks.", "tokens": [293, 309, 311, 516, 281, 2924, 505, 257, 1379, 688, 466, 577, 264, 1036, 4583, 295, 257, 18161, 9590, 13], "temperature": 0.0, "avg_logprob": -0.13678076569463166, "compression_ratio": 1.5862068965517242, "no_speech_prob": 1.202735165861668e-05}, {"id": 412, "seek": 191192, "start": 1929.8000000000002, "end": 1934.5600000000002, "text": " And specifically what we're going to try to do is we're going to try to build a model", "tokens": [400, 4682, 437, 321, 434, 516, 281, 853, 281, 360, 307, 321, 434, 516, 281, 853, 281, 1322, 257, 2316], "temperature": 0.0, "avg_logprob": -0.13678076569463166, "compression_ratio": 1.5862068965517242, "no_speech_prob": 1.202735165861668e-05}, {"id": 413, "seek": 193456, "start": 1934.56, "end": 1942.04, "text": " that doesn't just predict the disease, but also predicts the type of rice.", "tokens": [300, 1177, 380, 445, 6069, 264, 4752, 11, 457, 611, 6069, 82, 264, 2010, 295, 5090, 13], "temperature": 0.0, "avg_logprob": -0.1238424089219835, "compression_ratio": 1.6806282722513088, "no_speech_prob": 1.4282256415754091e-05}, {"id": 414, "seek": 193456, "start": 1942.04, "end": 1944.32, "text": " So how would you do that?", "tokens": [407, 577, 576, 291, 360, 300, 30], "temperature": 0.0, "avg_logprob": -0.1238424089219835, "compression_ratio": 1.6806282722513088, "no_speech_prob": 1.4282256415754091e-05}, {"id": 415, "seek": 193456, "start": 1944.32, "end": 1950.6, "text": " So here's the data loader we're going to try to build.", "tokens": [407, 510, 311, 264, 1412, 3677, 260, 321, 434, 516, 281, 853, 281, 1322, 13], "temperature": 0.0, "avg_logprob": -0.1238424089219835, "compression_ratio": 1.6806282722513088, "no_speech_prob": 1.4282256415754091e-05}, {"id": 416, "seek": 193456, "start": 1950.6, "end": 1956.0, "text": " It's going to be something that for each image, it tells us the disease and the type of rice.", "tokens": [467, 311, 516, 281, 312, 746, 300, 337, 1184, 3256, 11, 309, 5112, 505, 264, 4752, 293, 264, 2010, 295, 5090, 13], "temperature": 0.0, "avg_logprob": -0.1238424089219835, "compression_ratio": 1.6806282722513088, "no_speech_prob": 1.4282256415754091e-05}, {"id": 417, "seek": 193456, "start": 1956.0, "end": 1962.3999999999999, "text": " I say disease, sometimes normal, I guess some of them are not diseased.", "tokens": [286, 584, 4752, 11, 2171, 2710, 11, 286, 2041, 512, 295, 552, 366, 406, 3814, 1937, 13], "temperature": 0.0, "avg_logprob": -0.1238424089219835, "compression_ratio": 1.6806282722513088, "no_speech_prob": 1.4282256415754091e-05}, {"id": 418, "seek": 196240, "start": 1962.4, "end": 1968.52, "text": " So to build a model that can predict two things, the first thing is going to need data loaders", "tokens": [407, 281, 1322, 257, 2316, 300, 393, 6069, 732, 721, 11, 264, 700, 551, 307, 516, 281, 643, 1412, 3677, 433], "temperature": 0.0, "avg_logprob": -0.1161186257187201, "compression_ratio": 1.6403508771929824, "no_speech_prob": 5.093241270515136e-06}, {"id": 419, "seek": 196240, "start": 1968.52, "end": 1971.6000000000001, "text": " that have two dependent variables.", "tokens": [300, 362, 732, 12334, 9102, 13], "temperature": 0.0, "avg_logprob": -0.1161186257187201, "compression_ratio": 1.6403508771929824, "no_speech_prob": 5.093241270515136e-06}, {"id": 420, "seek": 196240, "start": 1971.6000000000001, "end": 1979.8600000000001, "text": " And that is shockingly easy to do in fast AI thanks to the data block.", "tokens": [400, 300, 307, 5588, 12163, 1858, 281, 360, 294, 2370, 7318, 3231, 281, 264, 1412, 3461, 13], "temperature": 0.0, "avg_logprob": -0.1161186257187201, "compression_ratio": 1.6403508771929824, "no_speech_prob": 5.093241270515136e-06}, {"id": 421, "seek": 196240, "start": 1979.8600000000001, "end": 1982.6200000000001, "text": " So we've seen the data block before.", "tokens": [407, 321, 600, 1612, 264, 1412, 3461, 949, 13], "temperature": 0.0, "avg_logprob": -0.1161186257187201, "compression_ratio": 1.6403508771929824, "no_speech_prob": 5.093241270515136e-06}, {"id": 422, "seek": 196240, "start": 1982.6200000000001, "end": 1986.52, "text": " We haven't been using it for the patty competition so far because we haven't needed it.", "tokens": [492, 2378, 380, 668, 1228, 309, 337, 264, 1947, 874, 6211, 370, 1400, 570, 321, 2378, 380, 2978, 309, 13], "temperature": 0.0, "avg_logprob": -0.1161186257187201, "compression_ratio": 1.6403508771929824, "no_speech_prob": 5.093241270515136e-06}, {"id": 423, "seek": 196240, "start": 1986.52, "end": 1990.52, "text": " We could just use image data loader from folder.", "tokens": [492, 727, 445, 764, 3256, 1412, 3677, 260, 490, 10820, 13], "temperature": 0.0, "avg_logprob": -0.1161186257187201, "compression_ratio": 1.6403508771929824, "no_speech_prob": 5.093241270515136e-06}, {"id": 424, "seek": 199052, "start": 1990.52, "end": 1993.76, "text": " So that's like the highest level API, the simplest API.", "tokens": [407, 300, 311, 411, 264, 6343, 1496, 9362, 11, 264, 22811, 9362, 13], "temperature": 0.0, "avg_logprob": -0.12261605874086037, "compression_ratio": 1.6570397111913358, "no_speech_prob": 6.3389152273884974e-06}, {"id": 425, "seek": 199052, "start": 1993.76, "end": 2000.1399999999999, "text": " If we go down a level deeper into the data block, we have a lot more flexibility.", "tokens": [759, 321, 352, 760, 257, 1496, 7731, 666, 264, 1412, 3461, 11, 321, 362, 257, 688, 544, 12635, 13], "temperature": 0.0, "avg_logprob": -0.12261605874086037, "compression_ratio": 1.6570397111913358, "no_speech_prob": 6.3389152273884974e-06}, {"id": 426, "seek": 199052, "start": 2000.1399999999999, "end": 2004.72, "text": " So if you've been following the walkthroughs, you'll know that as I built this, the first", "tokens": [407, 498, 291, 600, 668, 3480, 264, 1792, 11529, 82, 11, 291, 603, 458, 300, 382, 286, 3094, 341, 11, 264, 700], "temperature": 0.0, "avg_logprob": -0.12261605874086037, "compression_ratio": 1.6570397111913358, "no_speech_prob": 6.3389152273884974e-06}, {"id": 427, "seek": 199052, "start": 2004.72, "end": 2011.04, "text": " thing I actually did was to simply replicate the previous notebook, but replace the image", "tokens": [551, 286, 767, 630, 390, 281, 2935, 25356, 264, 3894, 21060, 11, 457, 7406, 264, 3256], "temperature": 0.0, "avg_logprob": -0.12261605874086037, "compression_ratio": 1.6570397111913358, "no_speech_prob": 6.3389152273884974e-06}, {"id": 428, "seek": 199052, "start": 2011.04, "end": 2015.48, "text": " data loader from folders with a data block to try to do first of all, exactly the same", "tokens": [1412, 3677, 260, 490, 31082, 365, 257, 1412, 3461, 281, 853, 281, 360, 700, 295, 439, 11, 2293, 264, 912], "temperature": 0.0, "avg_logprob": -0.12261605874086037, "compression_ratio": 1.6570397111913358, "no_speech_prob": 6.3389152273884974e-06}, {"id": 429, "seek": 199052, "start": 2015.48, "end": 2016.68, "text": " thing.", "tokens": [551, 13], "temperature": 0.0, "avg_logprob": -0.12261605874086037, "compression_ratio": 1.6570397111913358, "no_speech_prob": 6.3389152273884974e-06}, {"id": 430, "seek": 199052, "start": 2016.68, "end": 2019.86, "text": " And then I added the second dependent variable.", "tokens": [400, 550, 286, 3869, 264, 1150, 12334, 7006, 13], "temperature": 0.0, "avg_logprob": -0.12261605874086037, "compression_ratio": 1.6570397111913358, "no_speech_prob": 6.3389152273884974e-06}, {"id": 431, "seek": 201986, "start": 2019.86, "end": 2032.24, "text": " So if we look at the previous image data loader from folders thingy, here it is.", "tokens": [407, 498, 321, 574, 412, 264, 3894, 3256, 1412, 3677, 260, 490, 31082, 551, 88, 11, 510, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.13726097682736954, "compression_ratio": 1.4569536423841059, "no_speech_prob": 7.64580545364879e-06}, {"id": 432, "seek": 201986, "start": 2032.24, "end": 2039.12, "text": " We are passing in some item transforms and some batch transforms.", "tokens": [492, 366, 8437, 294, 512, 3174, 35592, 293, 512, 15245, 35592, 13], "temperature": 0.0, "avg_logprob": -0.13726097682736954, "compression_ratio": 1.4569536423841059, "no_speech_prob": 7.64580545364879e-06}, {"id": 433, "seek": 201986, "start": 2039.12, "end": 2047.24, "text": " And we had something saying what percentage should be the validation set.", "tokens": [400, 321, 632, 746, 1566, 437, 9668, 820, 312, 264, 24071, 992, 13], "temperature": 0.0, "avg_logprob": -0.13726097682736954, "compression_ratio": 1.4569536423841059, "no_speech_prob": 7.64580545364879e-06}, {"id": 434, "seek": 204724, "start": 2047.24, "end": 2053.28, "text": " So in a data block, if you remember, we have to pass in a blocks argument saying what kind", "tokens": [407, 294, 257, 1412, 3461, 11, 498, 291, 1604, 11, 321, 362, 281, 1320, 294, 257, 8474, 6770, 1566, 437, 733], "temperature": 0.0, "avg_logprob": -0.12671998830942008, "compression_ratio": 1.9343629343629343, "no_speech_prob": 3.041520130864228e-06}, {"id": 435, "seek": 204724, "start": 2053.28, "end": 2056.98, "text": " of data is the independent variable and what is the dependent variable.", "tokens": [295, 1412, 307, 264, 6695, 7006, 293, 437, 307, 264, 12334, 7006, 13], "temperature": 0.0, "avg_logprob": -0.12671998830942008, "compression_ratio": 1.9343629343629343, "no_speech_prob": 3.041520130864228e-06}, {"id": 436, "seek": 204724, "start": 2056.98, "end": 2061.44, "text": " So to replicate what we had before, we would just pass in image block, comma, category", "tokens": [407, 281, 25356, 437, 321, 632, 949, 11, 321, 576, 445, 1320, 294, 3256, 3461, 11, 22117, 11, 7719], "temperature": 0.0, "avg_logprob": -0.12671998830942008, "compression_ratio": 1.9343629343629343, "no_speech_prob": 3.041520130864228e-06}, {"id": 437, "seek": 204724, "start": 2061.44, "end": 2066.96, "text": " block because we've got an image as our independent variable and a category, one type of rice,", "tokens": [3461, 570, 321, 600, 658, 364, 3256, 382, 527, 6695, 7006, 293, 257, 7719, 11, 472, 2010, 295, 5090, 11], "temperature": 0.0, "avg_logprob": -0.12671998830942008, "compression_ratio": 1.9343629343629343, "no_speech_prob": 3.041520130864228e-06}, {"id": 438, "seek": 204724, "start": 2066.96, "end": 2068.92, "text": " is the dependent variable.", "tokens": [307, 264, 12334, 7006, 13], "temperature": 0.0, "avg_logprob": -0.12671998830942008, "compression_ratio": 1.9343629343629343, "no_speech_prob": 3.041520130864228e-06}, {"id": 439, "seek": 204724, "start": 2068.92, "end": 2072.12, "text": " So the new thing I'm going to show you here is that you don't have to only put in two", "tokens": [407, 264, 777, 551, 286, 478, 516, 281, 855, 291, 510, 307, 300, 291, 500, 380, 362, 281, 787, 829, 294, 732], "temperature": 0.0, "avg_logprob": -0.12671998830942008, "compression_ratio": 1.9343629343629343, "no_speech_prob": 3.041520130864228e-06}, {"id": 440, "seek": 204724, "start": 2072.12, "end": 2073.12, "text": " things.", "tokens": [721, 13], "temperature": 0.0, "avg_logprob": -0.12671998830942008, "compression_ratio": 1.9343629343629343, "no_speech_prob": 3.041520130864228e-06}, {"id": 441, "seek": 204724, "start": 2073.12, "end": 2074.6, "text": " You can put in as many as you like.", "tokens": [509, 393, 829, 294, 382, 867, 382, 291, 411, 13], "temperature": 0.0, "avg_logprob": -0.12671998830942008, "compression_ratio": 1.9343629343629343, "no_speech_prob": 3.041520130864228e-06}, {"id": 442, "seek": 207460, "start": 2074.6, "end": 2082.12, "text": " So if you put in three things, we're going to generate one image and two categories.", "tokens": [407, 498, 291, 829, 294, 1045, 721, 11, 321, 434, 516, 281, 8460, 472, 3256, 293, 732, 10479, 13], "temperature": 0.0, "avg_logprob": -0.1382403577494825, "compression_ratio": 1.8063241106719368, "no_speech_prob": 1.5936318959575146e-05}, {"id": 443, "seek": 207460, "start": 2082.12, "end": 2086.2799999999997, "text": " Now FastAI, if you're saying I want three things, FastAI doesn't know which of those", "tokens": [823, 15968, 48698, 11, 498, 291, 434, 1566, 286, 528, 1045, 721, 11, 15968, 48698, 1177, 380, 458, 597, 295, 729], "temperature": 0.0, "avg_logprob": -0.1382403577494825, "compression_ratio": 1.8063241106719368, "no_speech_prob": 1.5936318959575146e-05}, {"id": 444, "seek": 207460, "start": 2086.2799999999997, "end": 2090.2, "text": " is the independent variable and which is the dependent variable.", "tokens": [307, 264, 6695, 7006, 293, 597, 307, 264, 12334, 7006, 13], "temperature": 0.0, "avg_logprob": -0.1382403577494825, "compression_ratio": 1.8063241106719368, "no_speech_prob": 1.5936318959575146e-05}, {"id": 445, "seek": 207460, "start": 2090.2, "end": 2094.2799999999997, "text": " So the next thing you have to tell it is how many inputs are there, number of inputs.", "tokens": [407, 264, 958, 551, 291, 362, 281, 980, 309, 307, 577, 867, 15743, 366, 456, 11, 1230, 295, 15743, 13], "temperature": 0.0, "avg_logprob": -0.1382403577494825, "compression_ratio": 1.8063241106719368, "no_speech_prob": 1.5936318959575146e-05}, {"id": 446, "seek": 207460, "start": 2094.2799999999997, "end": 2096.2, "text": " And so here I've said there's one input.", "tokens": [400, 370, 510, 286, 600, 848, 456, 311, 472, 4846, 13], "temperature": 0.0, "avg_logprob": -0.1382403577494825, "compression_ratio": 1.8063241106719368, "no_speech_prob": 1.5936318959575146e-05}, {"id": 447, "seek": 207460, "start": 2096.2, "end": 2100.8399999999997, "text": " So that means this is the input and therefore by definition, two categories will be the", "tokens": [407, 300, 1355, 341, 307, 264, 4846, 293, 4412, 538, 7123, 11, 732, 10479, 486, 312, 264], "temperature": 0.0, "avg_logprob": -0.1382403577494825, "compression_ratio": 1.8063241106719368, "no_speech_prob": 1.5936318959575146e-05}, {"id": 448, "seek": 207460, "start": 2100.8399999999997, "end": 2101.8399999999997, "text": " output.", "tokens": [5598, 13], "temperature": 0.0, "avg_logprob": -0.1382403577494825, "compression_ratio": 1.8063241106719368, "no_speech_prob": 1.5936318959575146e-05}, {"id": 449, "seek": 210184, "start": 2101.84, "end": 2106.1200000000003, "text": " Because remember, we're trying to predict two things, the type of rice and the disease.", "tokens": [1436, 1604, 11, 321, 434, 1382, 281, 6069, 732, 721, 11, 264, 2010, 295, 5090, 293, 264, 4752, 13], "temperature": 0.0, "avg_logprob": -0.17680965770374646, "compression_ratio": 1.618421052631579, "no_speech_prob": 6.048819614079548e-06}, {"id": 450, "seek": 210184, "start": 2106.1200000000003, "end": 2109.08, "text": " Okay, this is the same as what we've seen before.", "tokens": [1033, 11, 341, 307, 264, 912, 382, 437, 321, 600, 1612, 949, 13], "temperature": 0.0, "avg_logprob": -0.17680965770374646, "compression_ratio": 1.618421052631579, "no_speech_prob": 6.048819614079548e-06}, {"id": 451, "seek": 210184, "start": 2109.08, "end": 2113.88, "text": " To find out, to get our list of items, we'll call get image files.", "tokens": [1407, 915, 484, 11, 281, 483, 527, 1329, 295, 4754, 11, 321, 603, 818, 483, 3256, 7098, 13], "temperature": 0.0, "avg_logprob": -0.17680965770374646, "compression_ratio": 1.618421052631579, "no_speech_prob": 6.048819614079548e-06}, {"id": 452, "seek": 210184, "start": 2113.88, "end": 2116.08, "text": " Now here's something we haven't seen before.", "tokens": [823, 510, 311, 746, 321, 2378, 380, 1612, 949, 13], "temperature": 0.0, "avg_logprob": -0.17680965770374646, "compression_ratio": 1.618421052631579, "no_speech_prob": 6.048819614079548e-06}, {"id": 453, "seek": 210184, "start": 2116.08, "end": 2119.2400000000002, "text": " Get y is our labeling function.", "tokens": [3240, 288, 307, 527, 40244, 2445, 13], "temperature": 0.0, "avg_logprob": -0.17680965770374646, "compression_ratio": 1.618421052631579, "no_speech_prob": 6.048819614079548e-06}, {"id": 454, "seek": 210184, "start": 2119.2400000000002, "end": 2124.1200000000003, "text": " Normally we pass to get y a single thing such as the parent label function, which looks", "tokens": [17424, 321, 1320, 281, 483, 288, 257, 2167, 551, 1270, 382, 264, 2596, 7645, 2445, 11, 597, 1542], "temperature": 0.0, "avg_logprob": -0.17680965770374646, "compression_ratio": 1.618421052631579, "no_speech_prob": 6.048819614079548e-06}, {"id": 455, "seek": 212412, "start": 2124.12, "end": 2132.04, "text": " at the name of the parent directory, which remembers how these images are structured.", "tokens": [412, 264, 1315, 295, 264, 2596, 21120, 11, 597, 26228, 577, 613, 5267, 366, 18519, 13], "temperature": 0.0, "avg_logprob": -0.12359208558735095, "compression_ratio": 1.6763285024154588, "no_speech_prob": 4.710820576292463e-06}, {"id": 456, "seek": 212412, "start": 2132.04, "end": 2133.96, "text": " And that would tell us the label.", "tokens": [400, 300, 576, 980, 505, 264, 7645, 13], "temperature": 0.0, "avg_logprob": -0.12359208558735095, "compression_ratio": 1.6763285024154588, "no_speech_prob": 4.710820576292463e-06}, {"id": 457, "seek": 212412, "start": 2133.96, "end": 2135.88, "text": " But get y can also take an array.", "tokens": [583, 483, 288, 393, 611, 747, 364, 10225, 13], "temperature": 0.0, "avg_logprob": -0.12359208558735095, "compression_ratio": 1.6763285024154588, "no_speech_prob": 4.710820576292463e-06}, {"id": 458, "seek": 212412, "start": 2135.88, "end": 2140.2, "text": " And in this case, we want two different labels.", "tokens": [400, 294, 341, 1389, 11, 321, 528, 732, 819, 16949, 13], "temperature": 0.0, "avg_logprob": -0.12359208558735095, "compression_ratio": 1.6763285024154588, "no_speech_prob": 4.710820576292463e-06}, {"id": 459, "seek": 212412, "start": 2140.2, "end": 2144.16, "text": " One is the name of the parent directory, because that's the disease.", "tokens": [1485, 307, 264, 1315, 295, 264, 2596, 21120, 11, 570, 300, 311, 264, 4752, 13], "temperature": 0.0, "avg_logprob": -0.12359208558735095, "compression_ratio": 1.6763285024154588, "no_speech_prob": 4.710820576292463e-06}, {"id": 460, "seek": 212412, "start": 2144.16, "end": 2146.68, "text": " The second is the variety.", "tokens": [440, 1150, 307, 264, 5673, 13], "temperature": 0.0, "avg_logprob": -0.12359208558735095, "compression_ratio": 1.6763285024154588, "no_speech_prob": 4.710820576292463e-06}, {"id": 461, "seek": 212412, "start": 2146.68, "end": 2148.72, "text": " So what's get variety?", "tokens": [407, 437, 311, 483, 5673, 30], "temperature": 0.0, "avg_logprob": -0.12359208558735095, "compression_ratio": 1.6763285024154588, "no_speech_prob": 4.710820576292463e-06}, {"id": 462, "seek": 212412, "start": 2148.72, "end": 2150.6, "text": " Get variety is a function.", "tokens": [3240, 5673, 307, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.12359208558735095, "compression_ratio": 1.6763285024154588, "no_speech_prob": 4.710820576292463e-06}, {"id": 463, "seek": 215060, "start": 2150.6, "end": 2154.16, "text": " So let me explain how this function works.", "tokens": [407, 718, 385, 2903, 577, 341, 2445, 1985, 13], "temperature": 0.0, "avg_logprob": -0.12674152149873621, "compression_ratio": 1.603448275862069, "no_speech_prob": 5.173836598260095e-06}, {"id": 464, "seek": 215060, "start": 2154.16, "end": 2160.56, "text": " So we can create a data frame containing our training data that came from Kaggle.", "tokens": [407, 321, 393, 1884, 257, 1412, 3920, 19273, 527, 3097, 1412, 300, 1361, 490, 48751, 22631, 13], "temperature": 0.0, "avg_logprob": -0.12674152149873621, "compression_ratio": 1.603448275862069, "no_speech_prob": 5.173836598260095e-06}, {"id": 465, "seek": 215060, "start": 2160.56, "end": 2167.7, "text": " So for each image, it tells us the disease and the variety.", "tokens": [407, 337, 1184, 3256, 11, 309, 5112, 505, 264, 4752, 293, 264, 5673, 13], "temperature": 0.0, "avg_logprob": -0.12674152149873621, "compression_ratio": 1.603448275862069, "no_speech_prob": 5.173836598260095e-06}, {"id": 466, "seek": 215060, "start": 2167.7, "end": 2169.7999999999997, "text": " And what I did is something I haven't shown before.", "tokens": [400, 437, 286, 630, 307, 746, 286, 2378, 380, 4898, 949, 13], "temperature": 0.0, "avg_logprob": -0.12674152149873621, "compression_ratio": 1.603448275862069, "no_speech_prob": 5.173836598260095e-06}, {"id": 467, "seek": 215060, "start": 2169.7999999999997, "end": 2173.8199999999997, "text": " In pandas, you can set one column to be the index.", "tokens": [682, 4565, 296, 11, 291, 393, 992, 472, 7738, 281, 312, 264, 8186, 13], "temperature": 0.0, "avg_logprob": -0.12674152149873621, "compression_ratio": 1.603448275862069, "no_speech_prob": 5.173836598260095e-06}, {"id": 468, "seek": 215060, "start": 2173.8199999999997, "end": 2179.52, "text": " And when you do that, in this case, image ID, it makes this series, this data frame,", "tokens": [400, 562, 291, 360, 300, 11, 294, 341, 1389, 11, 3256, 7348, 11, 309, 1669, 341, 2638, 11, 341, 1412, 3920, 11], "temperature": 0.0, "avg_logprob": -0.12674152149873621, "compression_ratio": 1.603448275862069, "no_speech_prob": 5.173836598260095e-06}, {"id": 469, "seek": 217952, "start": 2179.52, "end": 2181.84, "text": " kind of like a dictionary.", "tokens": [733, 295, 411, 257, 25890, 13], "temperature": 0.0, "avg_logprob": -0.10074899484823038, "compression_ratio": 1.7759562841530054, "no_speech_prob": 2.4824232696118997e-06}, {"id": 470, "seek": 217952, "start": 2181.84, "end": 2187.52, "text": " I can index into it by saying, tell me the row for this image.", "tokens": [286, 393, 8186, 666, 309, 538, 1566, 11, 980, 385, 264, 5386, 337, 341, 3256, 13], "temperature": 0.0, "avg_logprob": -0.10074899484823038, "compression_ratio": 1.7759562841530054, "no_speech_prob": 2.4824232696118997e-06}, {"id": 471, "seek": 217952, "start": 2187.52, "end": 2192.34, "text": " And to do that, you use the lock attribute, the location.", "tokens": [400, 281, 360, 300, 11, 291, 764, 264, 4017, 19667, 11, 264, 4914, 13], "temperature": 0.0, "avg_logprob": -0.10074899484823038, "compression_ratio": 1.7759562841530054, "no_speech_prob": 2.4824232696118997e-06}, {"id": 472, "seek": 217952, "start": 2192.34, "end": 2199.2, "text": " So we want in the data frame the location of this image.", "tokens": [407, 321, 528, 294, 264, 1412, 3920, 264, 4914, 295, 341, 3256, 13], "temperature": 0.0, "avg_logprob": -0.10074899484823038, "compression_ratio": 1.7759562841530054, "no_speech_prob": 2.4824232696118997e-06}, {"id": 473, "seek": 217952, "start": 2199.2, "end": 2204.18, "text": " And then you can also say optionally what column you want, this column.", "tokens": [400, 550, 291, 393, 611, 584, 3614, 379, 437, 7738, 291, 528, 11, 341, 7738, 13], "temperature": 0.0, "avg_logprob": -0.10074899484823038, "compression_ratio": 1.7759562841530054, "no_speech_prob": 2.4824232696118997e-06}, {"id": 474, "seek": 217952, "start": 2204.18, "end": 2209.12, "text": " And so here's this image and here's this column.", "tokens": [400, 370, 510, 311, 341, 3256, 293, 510, 311, 341, 7738, 13], "temperature": 0.0, "avg_logprob": -0.10074899484823038, "compression_ratio": 1.7759562841530054, "no_speech_prob": 2.4824232696118997e-06}, {"id": 475, "seek": 220912, "start": 2209.12, "end": 2211.96, "text": " And as you can see, it returns that thing.", "tokens": [400, 382, 291, 393, 536, 11, 309, 11247, 300, 551, 13], "temperature": 0.0, "avg_logprob": -0.09000452586582729, "compression_ratio": 1.611764705882353, "no_speech_prob": 8.529178558092099e-06}, {"id": 476, "seek": 220912, "start": 2211.96, "end": 2225.2799999999997, "text": " So hopefully now you can see it's pretty easy for us to create a function that takes a path", "tokens": [407, 4696, 586, 291, 393, 536, 309, 311, 1238, 1858, 337, 505, 281, 1884, 257, 2445, 300, 2516, 257, 3100], "temperature": 0.0, "avg_logprob": -0.09000452586582729, "compression_ratio": 1.611764705882353, "no_speech_prob": 8.529178558092099e-06}, {"id": 477, "seek": 220912, "start": 2225.2799999999997, "end": 2231.0, "text": " and returns the location in the data frame of the name of that file, because remember", "tokens": [293, 11247, 264, 4914, 294, 264, 1412, 3920, 295, 264, 1315, 295, 300, 3991, 11, 570, 1604], "temperature": 0.0, "avg_logprob": -0.09000452586582729, "compression_ratio": 1.611764705882353, "no_speech_prob": 8.529178558092099e-06}, {"id": 478, "seek": 220912, "start": 2231.0, "end": 2238.24, "text": " these are the names of files, for the variety column.", "tokens": [613, 366, 264, 5288, 295, 7098, 11, 337, 264, 5673, 7738, 13], "temperature": 0.0, "avg_logprob": -0.09000452586582729, "compression_ratio": 1.611764705882353, "no_speech_prob": 8.529178558092099e-06}, {"id": 479, "seek": 223824, "start": 2238.24, "end": 2241.8399999999997, "text": " So that's our second getaway.", "tokens": [407, 300, 311, 527, 1150, 483, 10318, 13], "temperature": 0.0, "avg_logprob": -0.14916189705453267, "compression_ratio": 1.5956284153005464, "no_speech_prob": 5.063250137027353e-05}, {"id": 480, "seek": 223824, "start": 2241.8399999999997, "end": 2249.7999999999997, "text": " And then we've seen this before, randomly split the data into the 20% and 80%.", "tokens": [400, 550, 321, 600, 1612, 341, 949, 11, 16979, 7472, 264, 1412, 666, 264, 945, 4, 293, 4688, 6856], "temperature": 0.0, "avg_logprob": -0.14916189705453267, "compression_ratio": 1.5956284153005464, "no_speech_prob": 5.063250137027353e-05}, {"id": 481, "seek": 223824, "start": 2249.7999999999997, "end": 2254.2, "text": " And so we could just squish them all to 192 just for this example.", "tokens": [400, 370, 321, 727, 445, 31379, 552, 439, 281, 1294, 17, 445, 337, 341, 1365, 13], "temperature": 0.0, "avg_logprob": -0.14916189705453267, "compression_ratio": 1.5956284153005464, "no_speech_prob": 5.063250137027353e-05}, {"id": 482, "seek": 223824, "start": 2254.2, "end": 2263.3199999999997, "text": " And then use data augmentation to get us down to 128 square images just for this example.", "tokens": [400, 550, 764, 1412, 14501, 19631, 281, 483, 505, 760, 281, 29810, 3732, 5267, 445, 337, 341, 1365, 13], "temperature": 0.0, "avg_logprob": -0.14916189705453267, "compression_ratio": 1.5956284153005464, "no_speech_prob": 5.063250137027353e-05}, {"id": 483, "seek": 223824, "start": 2263.3199999999997, "end": 2264.4399999999996, "text": " And so that's what we get.", "tokens": [400, 370, 300, 311, 437, 321, 483, 13], "temperature": 0.0, "avg_logprob": -0.14916189705453267, "compression_ratio": 1.5956284153005464, "no_speech_prob": 5.063250137027353e-05}, {"id": 484, "seek": 226444, "start": 2264.44, "end": 2271.68, "text": " When we say show batch, we get what we just discussed.", "tokens": [1133, 321, 584, 855, 15245, 11, 321, 483, 437, 321, 445, 7152, 13], "temperature": 0.0, "avg_logprob": -0.14290218111834949, "compression_ratio": 1.9205298013245033, "no_speech_prob": 3.7852678360650316e-06}, {"id": 485, "seek": 226444, "start": 2271.68, "end": 2278.52, "text": " So now we need a model that predicts two things.", "tokens": [407, 586, 321, 643, 257, 2316, 300, 6069, 82, 732, 721, 13], "temperature": 0.0, "avg_logprob": -0.14290218111834949, "compression_ratio": 1.9205298013245033, "no_speech_prob": 3.7852678360650316e-06}, {"id": 486, "seek": 226444, "start": 2278.52, "end": 2283.08, "text": " How do we create a model that predicts two things?", "tokens": [1012, 360, 321, 1884, 257, 2316, 300, 6069, 82, 732, 721, 30], "temperature": 0.0, "avg_logprob": -0.14290218111834949, "compression_ratio": 1.9205298013245033, "no_speech_prob": 3.7852678360650316e-06}, {"id": 487, "seek": 226444, "start": 2283.08, "end": 2289.08, "text": " Well the key thing to realize is we never actually had a model that predicts two things.", "tokens": [1042, 264, 2141, 551, 281, 4325, 307, 321, 1128, 767, 632, 257, 2316, 300, 6069, 82, 732, 721, 13], "temperature": 0.0, "avg_logprob": -0.14290218111834949, "compression_ratio": 1.9205298013245033, "no_speech_prob": 3.7852678360650316e-06}, {"id": 488, "seek": 226444, "start": 2289.08, "end": 2292.92, "text": " We had a model that predicts 10 things before.", "tokens": [492, 632, 257, 2316, 300, 6069, 82, 1266, 721, 949, 13], "temperature": 0.0, "avg_logprob": -0.14290218111834949, "compression_ratio": 1.9205298013245033, "no_speech_prob": 3.7852678360650316e-06}, {"id": 489, "seek": 229292, "start": 2292.92, "end": 2298.48, "text": " The 10 things we predicted is the probability of each disease.", "tokens": [440, 1266, 721, 321, 19147, 307, 264, 8482, 295, 1184, 4752, 13], "temperature": 0.0, "avg_logprob": -0.08902681840432657, "compression_ratio": 1.880794701986755, "no_speech_prob": 3.5559392017603386e-06}, {"id": 490, "seek": 229292, "start": 2298.48, "end": 2301.04, "text": " So we don't actually now want a model that predicts two things.", "tokens": [407, 321, 500, 380, 767, 586, 528, 257, 2316, 300, 6069, 82, 732, 721, 13], "temperature": 0.0, "avg_logprob": -0.08902681840432657, "compression_ratio": 1.880794701986755, "no_speech_prob": 3.5559392017603386e-06}, {"id": 491, "seek": 229292, "start": 2301.04, "end": 2303.76, "text": " We want a model that predicts 20 things.", "tokens": [492, 528, 257, 2316, 300, 6069, 82, 945, 721, 13], "temperature": 0.0, "avg_logprob": -0.08902681840432657, "compression_ratio": 1.880794701986755, "no_speech_prob": 3.5559392017603386e-06}, {"id": 492, "seek": 229292, "start": 2303.76, "end": 2312.32, "text": " The probability of each of the 10 diseases and the probability of each of the 10 varieties.", "tokens": [440, 8482, 295, 1184, 295, 264, 1266, 11044, 293, 264, 8482, 295, 1184, 295, 264, 1266, 22092, 13], "temperature": 0.0, "avg_logprob": -0.08902681840432657, "compression_ratio": 1.880794701986755, "no_speech_prob": 3.5559392017603386e-06}, {"id": 493, "seek": 229292, "start": 2312.32, "end": 2317.28, "text": " So how could we do that?", "tokens": [407, 577, 727, 321, 360, 300, 30], "temperature": 0.0, "avg_logprob": -0.08902681840432657, "compression_ratio": 1.880794701986755, "no_speech_prob": 3.5559392017603386e-06}, {"id": 494, "seek": 231728, "start": 2317.28, "end": 2324.48, "text": " Well let's first of all try to just create the same disease model we had before with", "tokens": [1042, 718, 311, 700, 295, 439, 853, 281, 445, 1884, 264, 912, 4752, 2316, 321, 632, 949, 365], "temperature": 0.0, "avg_logprob": -0.12747232773724723, "compression_ratio": 1.588785046728972, "no_speech_prob": 5.862577381776646e-06}, {"id": 495, "seek": 231728, "start": 2324.48, "end": 2325.48, "text": " our new data loader.", "tokens": [527, 777, 1412, 3677, 260, 13], "temperature": 0.0, "avg_logprob": -0.12747232773724723, "compression_ratio": 1.588785046728972, "no_speech_prob": 5.862577381776646e-06}, {"id": 496, "seek": 231728, "start": 2325.48, "end": 2329.52, "text": " So this is going to be reasonably straightforward.", "tokens": [407, 341, 307, 516, 281, 312, 23551, 15325, 13], "temperature": 0.0, "avg_logprob": -0.12747232773724723, "compression_ratio": 1.588785046728972, "no_speech_prob": 5.862577381776646e-06}, {"id": 497, "seek": 231728, "start": 2329.52, "end": 2337.28, "text": " The key thing to know is that since we told Fast.ai that there's one input and therefore", "tokens": [440, 2141, 551, 281, 458, 307, 300, 1670, 321, 1907, 15968, 13, 1301, 300, 456, 311, 472, 4846, 293, 4412], "temperature": 0.0, "avg_logprob": -0.12747232773724723, "compression_ratio": 1.588785046728972, "no_speech_prob": 5.862577381776646e-06}, {"id": 498, "seek": 231728, "start": 2337.28, "end": 2345.88, "text": " by definition there's two outputs, it's going to pass to our metrics and to our loss functions", "tokens": [538, 7123, 456, 311, 732, 23930, 11, 309, 311, 516, 281, 1320, 281, 527, 16367, 293, 281, 527, 4470, 6828], "temperature": 0.0, "avg_logprob": -0.12747232773724723, "compression_ratio": 1.588785046728972, "no_speech_prob": 5.862577381776646e-06}, {"id": 499, "seek": 234588, "start": 2345.88, "end": 2355.92, "text": " three things instead of two, the predictions from the model and the disease and the variety.", "tokens": [1045, 721, 2602, 295, 732, 11, 264, 21264, 490, 264, 2316, 293, 264, 4752, 293, 264, 5673, 13], "temperature": 0.0, "avg_logprob": -0.14735842354689974, "compression_ratio": 1.9497206703910615, "no_speech_prob": 2.7107838832307607e-05}, {"id": 500, "seek": 234588, "start": 2355.92, "end": 2362.44, "text": " So we can't just use error rate as our metric anymore because error rate takes two things.", "tokens": [407, 321, 393, 380, 445, 764, 6713, 3314, 382, 527, 20678, 3602, 570, 6713, 3314, 2516, 732, 721, 13], "temperature": 0.0, "avg_logprob": -0.14735842354689974, "compression_ratio": 1.9497206703910615, "no_speech_prob": 2.7107838832307607e-05}, {"id": 501, "seek": 234588, "start": 2362.44, "end": 2369.32, "text": " Instead we have to create a function that takes three things and return error rate on", "tokens": [7156, 321, 362, 281, 1884, 257, 2445, 300, 2516, 1045, 721, 293, 2736, 6713, 3314, 322], "temperature": 0.0, "avg_logprob": -0.14735842354689974, "compression_ratio": 1.9497206703910615, "no_speech_prob": 2.7107838832307607e-05}, {"id": 502, "seek": 234588, "start": 2369.32, "end": 2373.6800000000003, "text": " the two things we want which is the predictions from the model and the disease.", "tokens": [264, 732, 721, 321, 528, 597, 307, 264, 21264, 490, 264, 2316, 293, 264, 4752, 13], "temperature": 0.0, "avg_logprob": -0.14735842354689974, "compression_ratio": 1.9497206703910615, "no_speech_prob": 2.7107838832307607e-05}, {"id": 503, "seek": 237368, "start": 2373.68, "end": 2377.8799999999997, "text": " So the predictions from the model, this is the target.", "tokens": [407, 264, 21264, 490, 264, 2316, 11, 341, 307, 264, 3779, 13], "temperature": 0.0, "avg_logprob": -0.18061929278903538, "compression_ratio": 1.7405857740585775, "no_speech_prob": 1.593575143488124e-05}, {"id": 504, "seek": 237368, "start": 2377.8799999999997, "end": 2383.2799999999997, "text": " So that's actually all we need to do to define a metric that's going to work with our new", "tokens": [407, 300, 311, 767, 439, 321, 643, 281, 360, 281, 6964, 257, 20678, 300, 311, 516, 281, 589, 365, 527, 777], "temperature": 0.0, "avg_logprob": -0.18061929278903538, "compression_ratio": 1.7405857740585775, "no_speech_prob": 1.593575143488124e-05}, {"id": 505, "seek": 237368, "start": 2383.2799999999997, "end": 2387.2, "text": " data set, with our new data loader.", "tokens": [1412, 992, 11, 365, 527, 777, 1412, 3677, 260, 13], "temperature": 0.0, "avg_logprob": -0.18061929278903538, "compression_ratio": 1.7405857740585775, "no_speech_prob": 1.593575143488124e-05}, {"id": 506, "seek": 237368, "start": 2387.2, "end": 2389.52, "text": " This is not going to actually tell us anything about variety.", "tokens": [639, 307, 406, 516, 281, 767, 980, 505, 1340, 466, 5673, 13], "temperature": 0.0, "avg_logprob": -0.18061929278903538, "compression_ratio": 1.7405857740585775, "no_speech_prob": 1.593575143488124e-05}, {"id": 507, "seek": 237368, "start": 2389.52, "end": 2393.3999999999996, "text": " First it's going to try to replicate something that can do just disease.", "tokens": [2386, 309, 311, 516, 281, 853, 281, 25356, 746, 300, 393, 360, 445, 4752, 13], "temperature": 0.0, "avg_logprob": -0.18061929278903538, "compression_ratio": 1.7405857740585775, "no_speech_prob": 1.593575143488124e-05}, {"id": 508, "seek": 237368, "start": 2393.3999999999996, "end": 2400.7599999999998, "text": " So when we create our learner we'll pass in this new disease error function.", "tokens": [407, 562, 321, 1884, 527, 33347, 321, 603, 1320, 294, 341, 777, 4752, 6713, 2445, 13], "temperature": 0.0, "avg_logprob": -0.18061929278903538, "compression_ratio": 1.7405857740585775, "no_speech_prob": 1.593575143488124e-05}, {"id": 509, "seek": 237368, "start": 2400.7599999999998, "end": 2403.04, "text": " So we're halfway there.", "tokens": [407, 321, 434, 15461, 456, 13], "temperature": 0.0, "avg_logprob": -0.18061929278903538, "compression_ratio": 1.7405857740585775, "no_speech_prob": 1.593575143488124e-05}, {"id": 510, "seek": 240304, "start": 2403.04, "end": 2407.88, "text": " The other thing we're going to need is to change our loss function.", "tokens": [440, 661, 551, 321, 434, 516, 281, 643, 307, 281, 1319, 527, 4470, 2445, 13], "temperature": 0.0, "avg_logprob": -0.10322996775309244, "compression_ratio": 1.9224137931034482, "no_speech_prob": 1.221887578140013e-05}, {"id": 511, "seek": 240304, "start": 2407.88, "end": 2414.32, "text": " Now we never actually talked about what loss function to use and that's because Vision", "tokens": [823, 321, 1128, 767, 2825, 466, 437, 4470, 2445, 281, 764, 293, 300, 311, 570, 25170], "temperature": 0.0, "avg_logprob": -0.10322996775309244, "compression_ratio": 1.9224137931034482, "no_speech_prob": 1.221887578140013e-05}, {"id": 512, "seek": 240304, "start": 2414.32, "end": 2418.36, "text": " Learner guessed what loss function to use.", "tokens": [17216, 260, 21852, 437, 4470, 2445, 281, 764, 13], "temperature": 0.0, "avg_logprob": -0.10322996775309244, "compression_ratio": 1.9224137931034482, "no_speech_prob": 1.221887578140013e-05}, {"id": 513, "seek": 240304, "start": 2418.36, "end": 2424.36, "text": " Vision Learner saw that our dependent variable was a single category and it knows the best", "tokens": [25170, 17216, 260, 1866, 300, 527, 12334, 7006, 390, 257, 2167, 7719, 293, 309, 3255, 264, 1151], "temperature": 0.0, "avg_logprob": -0.10322996775309244, "compression_ratio": 1.9224137931034482, "no_speech_prob": 1.221887578140013e-05}, {"id": 514, "seek": 240304, "start": 2424.36, "end": 2427.7599999999998, "text": " loss function that's probably going to be the case for things with a single category", "tokens": [4470, 2445, 300, 311, 1391, 516, 281, 312, 264, 1389, 337, 721, 365, 257, 2167, 7719], "temperature": 0.0, "avg_logprob": -0.10322996775309244, "compression_ratio": 1.9224137931034482, "no_speech_prob": 1.221887578140013e-05}, {"id": 515, "seek": 240304, "start": 2427.7599999999998, "end": 2432.2799999999997, "text": " and it knows how big the category is so it just didn't bother us at all.", "tokens": [293, 309, 3255, 577, 955, 264, 7719, 307, 370, 309, 445, 994, 380, 8677, 505, 412, 439, 13], "temperature": 0.0, "avg_logprob": -0.10322996775309244, "compression_ratio": 1.9224137931034482, "no_speech_prob": 1.221887578140013e-05}, {"id": 516, "seek": 243228, "start": 2432.28, "end": 2435.4, "text": " It just said, okay, I'll figure it out for you.", "tokens": [467, 445, 848, 11, 1392, 11, 286, 603, 2573, 309, 484, 337, 291, 13], "temperature": 0.0, "avg_logprob": -0.1524346551777404, "compression_ratio": 1.4953703703703705, "no_speech_prob": 1.1300569894956425e-05}, {"id": 517, "seek": 243228, "start": 2435.4, "end": 2442.1600000000003, "text": " So the only time we've provided our own loss function is when we were kind of doing linear", "tokens": [407, 264, 787, 565, 321, 600, 5649, 527, 1065, 4470, 2445, 307, 562, 321, 645, 733, 295, 884, 8213], "temperature": 0.0, "avg_logprob": -0.1524346551777404, "compression_ratio": 1.4953703703703705, "no_speech_prob": 1.1300569894956425e-05}, {"id": 518, "seek": 243228, "start": 2442.1600000000003, "end": 2447.36, "text": " models and neural nets from scratch and we did I think mean squared error, we might also", "tokens": [5245, 293, 18161, 36170, 490, 8459, 293, 321, 630, 286, 519, 914, 8889, 6713, 11, 321, 1062, 611], "temperature": 0.0, "avg_logprob": -0.1524346551777404, "compression_ratio": 1.4953703703703705, "no_speech_prob": 1.1300569894956425e-05}, {"id": 519, "seek": 243228, "start": 2447.36, "end": 2449.6000000000004, "text": " have done mean absolute error.", "tokens": [362, 1096, 914, 8236, 6713, 13], "temperature": 0.0, "avg_logprob": -0.1524346551777404, "compression_ratio": 1.4953703703703705, "no_speech_prob": 1.1300569894956425e-05}, {"id": 520, "seek": 243228, "start": 2449.6000000000004, "end": 2457.8, "text": " Neither of those work when the dependent variable is a category.", "tokens": [23956, 295, 729, 589, 562, 264, 12334, 7006, 307, 257, 7719, 13], "temperature": 0.0, "avg_logprob": -0.1524346551777404, "compression_ratio": 1.4953703703703705, "no_speech_prob": 1.1300569894956425e-05}, {"id": 521, "seek": 245780, "start": 2457.8, "end": 2463.2000000000003, "text": " How would you use mean squared error or mean absolute error to say how close were these", "tokens": [1012, 576, 291, 764, 914, 8889, 6713, 420, 914, 8236, 6713, 281, 584, 577, 1998, 645, 613], "temperature": 0.0, "avg_logprob": -0.113946533203125, "compression_ratio": 1.6875, "no_speech_prob": 1.028916631184984e-05}, {"id": 522, "seek": 245780, "start": 2463.2000000000003, "end": 2470.32, "text": " ten probability predictions to this one correct answer?", "tokens": [2064, 8482, 21264, 281, 341, 472, 3006, 1867, 30], "temperature": 0.0, "avg_logprob": -0.113946533203125, "compression_ratio": 1.6875, "no_speech_prob": 1.028916631184984e-05}, {"id": 523, "seek": 245780, "start": 2470.32, "end": 2472.6000000000004, "text": " So in this case we have to use a different loss function.", "tokens": [407, 294, 341, 1389, 321, 362, 281, 764, 257, 819, 4470, 2445, 13], "temperature": 0.0, "avg_logprob": -0.113946533203125, "compression_ratio": 1.6875, "no_speech_prob": 1.028916631184984e-05}, {"id": 524, "seek": 245780, "start": 2472.6000000000004, "end": 2476.8, "text": " We have to use something called cross entropy loss and this is actually the loss function", "tokens": [492, 362, 281, 764, 746, 1219, 3278, 30867, 4470, 293, 341, 307, 767, 264, 4470, 2445], "temperature": 0.0, "avg_logprob": -0.113946533203125, "compression_ratio": 1.6875, "no_speech_prob": 1.028916631184984e-05}, {"id": 525, "seek": 245780, "start": 2476.8, "end": 2481.84, "text": " that Fast.ai picked for us before without us knowing.", "tokens": [300, 15968, 13, 1301, 6183, 337, 505, 949, 1553, 505, 5276, 13], "temperature": 0.0, "avg_logprob": -0.113946533203125, "compression_ratio": 1.6875, "no_speech_prob": 1.028916631184984e-05}, {"id": 526, "seek": 245780, "start": 2481.84, "end": 2486.48, "text": " But now that we are having to pick it out manually I'm going to explain to you exactly", "tokens": [583, 586, 300, 321, 366, 1419, 281, 1888, 309, 484, 16945, 286, 478, 516, 281, 2903, 281, 291, 2293], "temperature": 0.0, "avg_logprob": -0.113946533203125, "compression_ratio": 1.6875, "no_speech_prob": 1.028916631184984e-05}, {"id": 527, "seek": 248648, "start": 2486.48, "end": 2493.0, "text": " what cross entropy loss does.", "tokens": [437, 3278, 30867, 4470, 775, 13], "temperature": 0.0, "avg_logprob": -0.14432254138293568, "compression_ratio": 1.884297520661157, "no_speech_prob": 6.240681159397354e-06}, {"id": 528, "seek": 248648, "start": 2493.0, "end": 2497.4, "text": " And you know these details are very important indeed.", "tokens": [400, 291, 458, 613, 4365, 366, 588, 1021, 6451, 13], "temperature": 0.0, "avg_logprob": -0.14432254138293568, "compression_ratio": 1.884297520661157, "no_speech_prob": 6.240681159397354e-06}, {"id": 529, "seek": 248648, "start": 2497.4, "end": 2501.4, "text": " Remember I said at the start of this class the stuff that happens in the middle of the", "tokens": [5459, 286, 848, 412, 264, 722, 295, 341, 1508, 264, 1507, 300, 2314, 294, 264, 2808, 295, 264], "temperature": 0.0, "avg_logprob": -0.14432254138293568, "compression_ratio": 1.884297520661157, "no_speech_prob": 6.240681159397354e-06}, {"id": 530, "seek": 248648, "start": 2501.4, "end": 2506.2, "text": " model you're not going to have to care about much in your life if ever but the stuff that", "tokens": [2316, 291, 434, 406, 516, 281, 362, 281, 1127, 466, 709, 294, 428, 993, 498, 1562, 457, 264, 1507, 300], "temperature": 0.0, "avg_logprob": -0.14432254138293568, "compression_ratio": 1.884297520661157, "no_speech_prob": 6.240681159397354e-06}, {"id": 531, "seek": 248648, "start": 2506.2, "end": 2510.72, "text": " happens in the first layer and the last layer including the loss function that sits between", "tokens": [2314, 294, 264, 700, 4583, 293, 264, 1036, 4583, 3009, 264, 4470, 2445, 300, 12696, 1296], "temperature": 0.0, "avg_logprob": -0.14432254138293568, "compression_ratio": 1.884297520661157, "no_speech_prob": 6.240681159397354e-06}, {"id": 532, "seek": 248648, "start": 2510.72, "end": 2514.32, "text": " the last layer and the loss you're going to have to care about a lot.", "tokens": [264, 1036, 4583, 293, 264, 4470, 291, 434, 516, 281, 362, 281, 1127, 466, 257, 688, 13], "temperature": 0.0, "avg_logprob": -0.14432254138293568, "compression_ratio": 1.884297520661157, "no_speech_prob": 6.240681159397354e-06}, {"id": 533, "seek": 248648, "start": 2514.32, "end": 2516.36, "text": " This stuff comes up all the time.", "tokens": [639, 1507, 1487, 493, 439, 264, 565, 13], "temperature": 0.0, "avg_logprob": -0.14432254138293568, "compression_ratio": 1.884297520661157, "no_speech_prob": 6.240681159397354e-06}, {"id": 534, "seek": 251636, "start": 2516.36, "end": 2520.6, "text": " So you definitely want to know about cross entropy loss.", "tokens": [407, 291, 2138, 528, 281, 458, 466, 3278, 30867, 4470, 13], "temperature": 0.0, "avg_logprob": -0.14236505915609637, "compression_ratio": 1.625, "no_speech_prob": 9.817714271775912e-06}, {"id": 535, "seek": 251636, "start": 2520.6, "end": 2527.1200000000003, "text": " And so I'm going to explain it using a spreadsheet.", "tokens": [400, 370, 286, 478, 516, 281, 2903, 309, 1228, 257, 27733, 13], "temperature": 0.0, "avg_logprob": -0.14236505915609637, "compression_ratio": 1.625, "no_speech_prob": 9.817714271775912e-06}, {"id": 536, "seek": 251636, "start": 2527.1200000000003, "end": 2529.4, "text": " This spreadsheet is in the course repo.", "tokens": [639, 27733, 307, 294, 264, 1164, 49040, 13], "temperature": 0.0, "avg_logprob": -0.14236505915609637, "compression_ratio": 1.625, "no_speech_prob": 9.817714271775912e-06}, {"id": 537, "seek": 251636, "start": 2529.4, "end": 2535.2400000000002, "text": " And so let's say you are predicting something like a kind of a mini image net thing where", "tokens": [400, 370, 718, 311, 584, 291, 366, 32884, 746, 411, 257, 733, 295, 257, 8382, 3256, 2533, 551, 689], "temperature": 0.0, "avg_logprob": -0.14236505915609637, "compression_ratio": 1.625, "no_speech_prob": 9.817714271775912e-06}, {"id": 538, "seek": 251636, "start": 2535.2400000000002, "end": 2538.56, "text": " you're trying to predict whether something an image is a cat, a dog, a plane, a fish", "tokens": [291, 434, 1382, 281, 6069, 1968, 746, 364, 3256, 307, 257, 3857, 11, 257, 3000, 11, 257, 5720, 11, 257, 3506], "temperature": 0.0, "avg_logprob": -0.14236505915609637, "compression_ratio": 1.625, "no_speech_prob": 9.817714271775912e-06}, {"id": 539, "seek": 251636, "start": 2538.56, "end": 2540.48, "text": " or a building.", "tokens": [420, 257, 2390, 13], "temperature": 0.0, "avg_logprob": -0.14236505915609637, "compression_ratio": 1.625, "no_speech_prob": 9.817714271775912e-06}, {"id": 540, "seek": 254048, "start": 2540.48, "end": 2547.32, "text": " So you set up some model whatever it is a ConvNext model or just a big bunch of linear", "tokens": [407, 291, 992, 493, 512, 2316, 2035, 309, 307, 257, 2656, 85, 31002, 2316, 420, 445, 257, 955, 3840, 295, 8213], "temperature": 0.0, "avg_logprob": -0.1461254900152033, "compression_ratio": 1.74235807860262, "no_speech_prob": 8.013223123271018e-06}, {"id": 541, "seek": 254048, "start": 2547.32, "end": 2550.2, "text": " layers connected up or whatever.", "tokens": [7914, 4582, 493, 420, 2035, 13], "temperature": 0.0, "avg_logprob": -0.1461254900152033, "compression_ratio": 1.74235807860262, "no_speech_prob": 8.013223123271018e-06}, {"id": 542, "seek": 254048, "start": 2550.2, "end": 2558.0, "text": " And initially you've got some random weights and it spits out at the end five predictions.", "tokens": [400, 9105, 291, 600, 658, 512, 4974, 17443, 293, 309, 637, 1208, 484, 412, 264, 917, 1732, 21264, 13], "temperature": 0.0, "avg_logprob": -0.1461254900152033, "compression_ratio": 1.74235807860262, "no_speech_prob": 8.013223123271018e-06}, {"id": 543, "seek": 254048, "start": 2558.0, "end": 2565.08, "text": " So remember to predict something with five categories your model will spit out five probabilities.", "tokens": [407, 1604, 281, 6069, 746, 365, 1732, 10479, 428, 2316, 486, 22127, 484, 1732, 33783, 13], "temperature": 0.0, "avg_logprob": -0.1461254900152033, "compression_ratio": 1.74235807860262, "no_speech_prob": 8.013223123271018e-06}, {"id": 544, "seek": 254048, "start": 2565.08, "end": 2569.16, "text": " Now it doesn't initially spit out probabilities there's nothing making them probabilities", "tokens": [823, 309, 1177, 380, 9105, 22127, 484, 33783, 456, 311, 1825, 1455, 552, 33783], "temperature": 0.0, "avg_logprob": -0.1461254900152033, "compression_ratio": 1.74235807860262, "no_speech_prob": 8.013223123271018e-06}, {"id": 545, "seek": 256916, "start": 2569.16, "end": 2572.16, "text": " it just spits out five numbers.", "tokens": [309, 445, 637, 1208, 484, 1732, 3547, 13], "temperature": 0.0, "avg_logprob": -0.11518400223528752, "compression_ratio": 1.4507042253521127, "no_speech_prob": 2.9022398848610464e-06}, {"id": 546, "seek": 256916, "start": 2572.16, "end": 2575.52, "text": " Could be negative, could be positive.", "tokens": [7497, 312, 3671, 11, 727, 312, 3353, 13], "temperature": 0.0, "avg_logprob": -0.11518400223528752, "compression_ratio": 1.4507042253521127, "no_speech_prob": 2.9022398848610464e-06}, {"id": 547, "seek": 256916, "start": 2575.52, "end": 2580.16, "text": " So here's the output of the model.", "tokens": [407, 510, 311, 264, 5598, 295, 264, 2316, 13], "temperature": 0.0, "avg_logprob": -0.11518400223528752, "compression_ratio": 1.4507042253521127, "no_speech_prob": 2.9022398848610464e-06}, {"id": 548, "seek": 256916, "start": 2580.16, "end": 2588.3599999999997, "text": " So what we want to do is we want to convert these into probabilities.", "tokens": [407, 437, 321, 528, 281, 360, 307, 321, 528, 281, 7620, 613, 666, 33783, 13], "temperature": 0.0, "avg_logprob": -0.11518400223528752, "compression_ratio": 1.4507042253521127, "no_speech_prob": 2.9022398848610464e-06}, {"id": 549, "seek": 256916, "start": 2588.3599999999997, "end": 2591.96, "text": " And so we do that in two steps.", "tokens": [400, 370, 321, 360, 300, 294, 732, 4439, 13], "temperature": 0.0, "avg_logprob": -0.11518400223528752, "compression_ratio": 1.4507042253521127, "no_speech_prob": 2.9022398848610464e-06}, {"id": 550, "seek": 259196, "start": 2591.96, "end": 2600.7200000000003, "text": " The first thing we do is we go exp that's e to the power of we go e to the power of", "tokens": [440, 700, 551, 321, 360, 307, 321, 352, 1278, 300, 311, 308, 281, 264, 1347, 295, 321, 352, 308, 281, 264, 1347, 295], "temperature": 0.0, "avg_logprob": -0.15649029482965884, "compression_ratio": 1.7595628415300546, "no_speech_prob": 9.07896628632443e-06}, {"id": 551, "seek": 259196, "start": 2600.7200000000003, "end": 2605.04, "text": " each of those things like so.", "tokens": [1184, 295, 729, 721, 411, 370, 13], "temperature": 0.0, "avg_logprob": -0.15649029482965884, "compression_ratio": 1.7595628415300546, "no_speech_prob": 9.07896628632443e-06}, {"id": 552, "seek": 259196, "start": 2605.04, "end": 2608.68, "text": " And so here's the mathematical formula we're using this is called the softmax what we're", "tokens": [400, 370, 510, 311, 264, 18894, 8513, 321, 434, 1228, 341, 307, 1219, 264, 2787, 41167, 437, 321, 434], "temperature": 0.0, "avg_logprob": -0.15649029482965884, "compression_ratio": 1.7595628415300546, "no_speech_prob": 9.07896628632443e-06}, {"id": 553, "seek": 259196, "start": 2608.68, "end": 2610.48, "text": " working through.", "tokens": [1364, 807, 13], "temperature": 0.0, "avg_logprob": -0.15649029482965884, "compression_ratio": 1.7595628415300546, "no_speech_prob": 9.07896628632443e-06}, {"id": 554, "seek": 259196, "start": 2610.48, "end": 2617.76, "text": " We're going to go through each of the categories.", "tokens": [492, 434, 516, 281, 352, 807, 1184, 295, 264, 10479, 13], "temperature": 0.0, "avg_logprob": -0.15649029482965884, "compression_ratio": 1.7595628415300546, "no_speech_prob": 9.07896628632443e-06}, {"id": 555, "seek": 259196, "start": 2617.76, "end": 2619.2, "text": " So these are our five categories.", "tokens": [407, 613, 366, 527, 1732, 10479, 13], "temperature": 0.0, "avg_logprob": -0.15649029482965884, "compression_ratio": 1.7595628415300546, "no_speech_prob": 9.07896628632443e-06}, {"id": 556, "seek": 259196, "start": 2619.2, "end": 2620.2, "text": " So here k is five.", "tokens": [407, 510, 350, 307, 1732, 13], "temperature": 0.0, "avg_logprob": -0.15649029482965884, "compression_ratio": 1.7595628415300546, "no_speech_prob": 9.07896628632443e-06}, {"id": 557, "seek": 262020, "start": 2620.2, "end": 2626.4399999999996, "text": " We're going to go through each of our categories and we're going to go e to the power of the", "tokens": [492, 434, 516, 281, 352, 807, 1184, 295, 527, 10479, 293, 321, 434, 516, 281, 352, 308, 281, 264, 1347, 295, 264], "temperature": 0.0, "avg_logprob": -0.14000158309936522, "compression_ratio": 1.8804347826086956, "no_speech_prob": 4.22272978539695e-06}, {"id": 558, "seek": 262020, "start": 2626.4399999999996, "end": 2631.0, "text": " output so zj is the output for the jth category.", "tokens": [5598, 370, 710, 73, 307, 264, 5598, 337, 264, 361, 392, 7719, 13], "temperature": 0.0, "avg_logprob": -0.14000158309936522, "compression_ratio": 1.8804347826086956, "no_speech_prob": 4.22272978539695e-06}, {"id": 559, "seek": 262020, "start": 2631.0, "end": 2632.96, "text": " So here's that.", "tokens": [407, 510, 311, 300, 13], "temperature": 0.0, "avg_logprob": -0.14000158309936522, "compression_ratio": 1.8804347826086956, "no_speech_prob": 4.22272978539695e-06}, {"id": 560, "seek": 262020, "start": 2632.96, "end": 2636.3199999999997, "text": " And then we're going to sum them all together.", "tokens": [400, 550, 321, 434, 516, 281, 2408, 552, 439, 1214, 13], "temperature": 0.0, "avg_logprob": -0.14000158309936522, "compression_ratio": 1.8804347826086956, "no_speech_prob": 4.22272978539695e-06}, {"id": 561, "seek": 262020, "start": 2636.3199999999997, "end": 2638.3999999999996, "text": " Here it is sum up together.", "tokens": [1692, 309, 307, 2408, 493, 1214, 13], "temperature": 0.0, "avg_logprob": -0.14000158309936522, "compression_ratio": 1.8804347826086956, "no_speech_prob": 4.22272978539695e-06}, {"id": 562, "seek": 262020, "start": 2638.3999999999996, "end": 2641.64, "text": " So this is the denominator.", "tokens": [407, 341, 307, 264, 20687, 13], "temperature": 0.0, "avg_logprob": -0.14000158309936522, "compression_ratio": 1.8804347826086956, "no_speech_prob": 4.22272978539695e-06}, {"id": 563, "seek": 262020, "start": 2641.64, "end": 2648.66, "text": " And then the numerator is just e to the power of the thing we care about so this row.", "tokens": [400, 550, 264, 30380, 307, 445, 308, 281, 264, 1347, 295, 264, 551, 321, 1127, 466, 370, 341, 5386, 13], "temperature": 0.0, "avg_logprob": -0.14000158309936522, "compression_ratio": 1.8804347826086956, "no_speech_prob": 4.22272978539695e-06}, {"id": 564, "seek": 264866, "start": 2648.66, "end": 2657.0, "text": " So the numerator is e to the power of cat on this row.", "tokens": [407, 264, 30380, 307, 308, 281, 264, 1347, 295, 3857, 322, 341, 5386, 13], "temperature": 0.0, "avg_logprob": -0.1853050818810096, "compression_ratio": 1.7289156626506024, "no_speech_prob": 1.8447614138494828e-06}, {"id": 565, "seek": 264866, "start": 2657.0, "end": 2661.68, "text": " e to the power of dog on this row and so forth.", "tokens": [308, 281, 264, 1347, 295, 3000, 322, 341, 5386, 293, 370, 5220, 13], "temperature": 0.0, "avg_logprob": -0.1853050818810096, "compression_ratio": 1.7289156626506024, "no_speech_prob": 1.8447614138494828e-06}, {"id": 566, "seek": 264866, "start": 2661.68, "end": 2669.98, "text": " Now if you think about it since the denominator adds up all the e to the power ofs then when", "tokens": [823, 498, 291, 519, 466, 309, 1670, 264, 20687, 10860, 493, 439, 264, 308, 281, 264, 1347, 295, 82, 550, 562], "temperature": 0.0, "avg_logprob": -0.1853050818810096, "compression_ratio": 1.7289156626506024, "no_speech_prob": 1.8447614138494828e-06}, {"id": 567, "seek": 264866, "start": 2669.98, "end": 2677.3199999999997, "text": " we do each one divided by the sum that means the sum of these will equal one by definition.", "tokens": [321, 360, 1184, 472, 6666, 538, 264, 2408, 300, 1355, 264, 2408, 295, 613, 486, 2681, 472, 538, 7123, 13], "temperature": 0.0, "avg_logprob": -0.1853050818810096, "compression_ratio": 1.7289156626506024, "no_speech_prob": 1.8447614138494828e-06}, {"id": 568, "seek": 267732, "start": 2677.32, "end": 2678.92, "text": " Right?", "tokens": [1779, 30], "temperature": 0.0, "avg_logprob": -0.12988008771623885, "compression_ratio": 1.6262135922330097, "no_speech_prob": 9.368382961838506e-06}, {"id": 569, "seek": 267732, "start": 2678.92, "end": 2683.44, "text": " And so now we have things that can be treated as probabilities.", "tokens": [400, 370, 586, 321, 362, 721, 300, 393, 312, 8668, 382, 33783, 13], "temperature": 0.0, "avg_logprob": -0.12988008771623885, "compression_ratio": 1.6262135922330097, "no_speech_prob": 9.368382961838506e-06}, {"id": 570, "seek": 267732, "start": 2683.44, "end": 2688.1400000000003, "text": " They're all numbers between zero and one.", "tokens": [814, 434, 439, 3547, 1296, 4018, 293, 472, 13], "temperature": 0.0, "avg_logprob": -0.12988008771623885, "compression_ratio": 1.6262135922330097, "no_speech_prob": 9.368382961838506e-06}, {"id": 571, "seek": 267732, "start": 2688.1400000000003, "end": 2691.56, "text": " Numbers that were bigger in the output will be bigger here.", "tokens": [22592, 1616, 300, 645, 3801, 294, 264, 5598, 486, 312, 3801, 510, 13], "temperature": 0.0, "avg_logprob": -0.12988008771623885, "compression_ratio": 1.6262135922330097, "no_speech_prob": 9.368382961838506e-06}, {"id": 572, "seek": 267732, "start": 2691.56, "end": 2696.52, "text": " But there's something else interesting which is because we did e to the power of it means", "tokens": [583, 456, 311, 746, 1646, 1880, 597, 307, 570, 321, 630, 308, 281, 264, 1347, 295, 309, 1355], "temperature": 0.0, "avg_logprob": -0.12988008771623885, "compression_ratio": 1.6262135922330097, "no_speech_prob": 9.368382961838506e-06}, {"id": 573, "seek": 267732, "start": 2696.52, "end": 2701.1600000000003, "text": " that the bigger numbers will be like pushed up to numbers closer to one.", "tokens": [300, 264, 3801, 3547, 486, 312, 411, 9152, 493, 281, 3547, 4966, 281, 472, 13], "temperature": 0.0, "avg_logprob": -0.12988008771623885, "compression_ratio": 1.6262135922330097, "no_speech_prob": 9.368382961838506e-06}, {"id": 574, "seek": 270116, "start": 2701.16, "end": 2707.2799999999997, "text": " Like we're saying like oh really try to pick one thing as having most of the probability", "tokens": [1743, 321, 434, 1566, 411, 1954, 534, 853, 281, 1888, 472, 551, 382, 1419, 881, 295, 264, 8482], "temperature": 0.0, "avg_logprob": -0.11654845322712813, "compression_ratio": 1.6982758620689655, "no_speech_prob": 7.411083970509935e-06}, {"id": 575, "seek": 270116, "start": 2707.2799999999997, "end": 2711.24, "text": " because we are trying to predict you know one thing.", "tokens": [570, 321, 366, 1382, 281, 6069, 291, 458, 472, 551, 13], "temperature": 0.0, "avg_logprob": -0.11654845322712813, "compression_ratio": 1.6982758620689655, "no_speech_prob": 7.411083970509935e-06}, {"id": 576, "seek": 270116, "start": 2711.24, "end": 2714.6, "text": " We're trying to predict which one is it.", "tokens": [492, 434, 1382, 281, 6069, 597, 472, 307, 309, 13], "temperature": 0.0, "avg_logprob": -0.11654845322712813, "compression_ratio": 1.6982758620689655, "no_speech_prob": 7.411083970509935e-06}, {"id": 577, "seek": 270116, "start": 2714.6, "end": 2718.7599999999998, "text": " And so this is called softmax.", "tokens": [400, 370, 341, 307, 1219, 2787, 41167, 13], "temperature": 0.0, "avg_logprob": -0.11654845322712813, "compression_ratio": 1.6982758620689655, "no_speech_prob": 7.411083970509935e-06}, {"id": 578, "seek": 270116, "start": 2718.7599999999998, "end": 2724.6, "text": " So sometimes you'll see people complaining about the fact that their model which they", "tokens": [407, 2171, 291, 603, 536, 561, 20740, 466, 264, 1186, 300, 641, 2316, 597, 436], "temperature": 0.0, "avg_logprob": -0.11654845322712813, "compression_ratio": 1.6982758620689655, "no_speech_prob": 7.411083970509935e-06}, {"id": 579, "seek": 270116, "start": 2724.6, "end": 2730.2799999999997, "text": " said let's say is it a teddy bear or a grizzly bear or a black bear and they feed it a picture", "tokens": [848, 718, 311, 584, 307, 309, 257, 45116, 6155, 420, 257, 17865, 4313, 356, 6155, 420, 257, 2211, 6155, 293, 436, 3154, 309, 257, 3036], "temperature": 0.0, "avg_logprob": -0.11654845322712813, "compression_ratio": 1.6982758620689655, "no_speech_prob": 7.411083970509935e-06}, {"id": 580, "seek": 273028, "start": 2730.28, "end": 2735.1200000000003, "text": " of the cat and they say oh the model's wrong because it predicted grizzly bear but it's", "tokens": [295, 264, 3857, 293, 436, 584, 1954, 264, 2316, 311, 2085, 570, 309, 19147, 17865, 4313, 356, 6155, 457, 309, 311], "temperature": 0.0, "avg_logprob": -0.1348750250680106, "compression_ratio": 1.7567567567567568, "no_speech_prob": 1.2805291589756962e-05}, {"id": 581, "seek": 273028, "start": 2735.1200000000003, "end": 2736.1200000000003, "text": " not a grizzly bear.", "tokens": [406, 257, 17865, 4313, 356, 6155, 13], "temperature": 0.0, "avg_logprob": -0.1348750250680106, "compression_ratio": 1.7567567567567568, "no_speech_prob": 1.2805291589756962e-05}, {"id": 582, "seek": 273028, "start": 2736.1200000000003, "end": 2740.6400000000003, "text": " As you can see there's no way for this to predict anything other than the categories", "tokens": [1018, 291, 393, 536, 456, 311, 572, 636, 337, 341, 281, 6069, 1340, 661, 813, 264, 10479], "temperature": 0.0, "avg_logprob": -0.1348750250680106, "compression_ratio": 1.7567567567567568, "no_speech_prob": 1.2805291589756962e-05}, {"id": 583, "seek": 273028, "start": 2740.6400000000003, "end": 2741.6400000000003, "text": " we're giving it.", "tokens": [321, 434, 2902, 309, 13], "temperature": 0.0, "avg_logprob": -0.1348750250680106, "compression_ratio": 1.7567567567567568, "no_speech_prob": 1.2805291589756962e-05}, {"id": 584, "seek": 273028, "start": 2741.6400000000003, "end": 2743.44, "text": " We're forcing it to that.", "tokens": [492, 434, 19030, 309, 281, 300, 13], "temperature": 0.0, "avg_logprob": -0.1348750250680106, "compression_ratio": 1.7567567567567568, "no_speech_prob": 1.2805291589756962e-05}, {"id": 585, "seek": 273028, "start": 2743.44, "end": 2749.44, "text": " Now we don't if you want like it's something else you could do which is you could actually", "tokens": [823, 321, 500, 380, 498, 291, 528, 411, 309, 311, 746, 1646, 291, 727, 360, 597, 307, 291, 727, 767], "temperature": 0.0, "avg_logprob": -0.1348750250680106, "compression_ratio": 1.7567567567567568, "no_speech_prob": 1.2805291589756962e-05}, {"id": 586, "seek": 273028, "start": 2749.44, "end": 2751.88, "text": " have them not add up to one.", "tokens": [362, 552, 406, 909, 493, 281, 472, 13], "temperature": 0.0, "avg_logprob": -0.1348750250680106, "compression_ratio": 1.7567567567567568, "no_speech_prob": 1.2805291589756962e-05}, {"id": 587, "seek": 273028, "start": 2751.88, "end": 2752.88, "text": " Right?", "tokens": [1779, 30], "temperature": 0.0, "avg_logprob": -0.1348750250680106, "compression_ratio": 1.7567567567567568, "no_speech_prob": 1.2805291589756962e-05}, {"id": 588, "seek": 273028, "start": 2752.88, "end": 2756.44, "text": " You could instead have something which simply says what's the probability it's a cat, what's", "tokens": [509, 727, 2602, 362, 746, 597, 2935, 1619, 437, 311, 264, 8482, 309, 311, 257, 3857, 11, 437, 311], "temperature": 0.0, "avg_logprob": -0.1348750250680106, "compression_ratio": 1.7567567567567568, "no_speech_prob": 1.2805291589756962e-05}, {"id": 589, "seek": 275644, "start": 2756.44, "end": 2761.64, "text": " the probability it's a dog, what's the probability it's playing totally separately and they could add up to less than one.", "tokens": [264, 8482, 309, 311, 257, 3000, 11, 437, 311, 264, 8482, 309, 311, 2433, 3879, 14759, 293, 436, 727, 909, 493, 281, 1570, 813, 472, 13], "temperature": 0.0, "avg_logprob": -0.16550720697161794, "compression_ratio": 1.7572815533980584, "no_speech_prob": 1.0615846804284956e-05}, {"id": 590, "seek": 275644, "start": 2761.64, "end": 2766.04, "text": " And in that situation you can you know or more than one in which case you could have", "tokens": [400, 294, 300, 2590, 291, 393, 291, 458, 420, 544, 813, 472, 294, 597, 1389, 291, 727, 362], "temperature": 0.0, "avg_logprob": -0.16550720697161794, "compression_ratio": 1.7572815533980584, "no_speech_prob": 1.0615846804284956e-05}, {"id": 591, "seek": 275644, "start": 2766.04, "end": 2770.4, "text": " like more than one thing being true or zero things being true.", "tokens": [411, 544, 813, 472, 551, 885, 2074, 420, 4018, 721, 885, 2074, 13], "temperature": 0.0, "avg_logprob": -0.16550720697161794, "compression_ratio": 1.7572815533980584, "no_speech_prob": 1.0615846804284956e-05}, {"id": 592, "seek": 275644, "start": 2770.4, "end": 2777.88, "text": " But in this particular case where we want to predict one and one thing only we use softmax.", "tokens": [583, 294, 341, 1729, 1389, 689, 321, 528, 281, 6069, 472, 293, 472, 551, 787, 321, 764, 2787, 41167, 13], "temperature": 0.0, "avg_logprob": -0.16550720697161794, "compression_ratio": 1.7572815533980584, "no_speech_prob": 1.0615846804284956e-05}, {"id": 593, "seek": 277788, "start": 2777.88, "end": 2787.0, "text": " The first part of the cross entropy formula, the first part of the cross entropy formula,", "tokens": [440, 700, 644, 295, 264, 3278, 30867, 8513, 11, 264, 700, 644, 295, 264, 3278, 30867, 8513, 11], "temperature": 0.0, "avg_logprob": -0.14145801862080892, "compression_ratio": 1.846774193548387, "no_speech_prob": 1.012957000057213e-05}, {"id": 594, "seek": 277788, "start": 2787.0, "end": 2794.82, "text": " in fact let's look it up and end cross entropy loss.", "tokens": [294, 1186, 718, 311, 574, 309, 493, 293, 917, 3278, 30867, 4470, 13], "temperature": 0.0, "avg_logprob": -0.14145801862080892, "compression_ratio": 1.846774193548387, "no_speech_prob": 1.012957000057213e-05}, {"id": 595, "seek": 277788, "start": 2794.82, "end": 2806.4, "text": " The first part of what cross entropy loss in PyTorch does is to calculate the softmax.", "tokens": [440, 700, 644, 295, 437, 3278, 30867, 4470, 294, 9953, 51, 284, 339, 775, 307, 281, 8873, 264, 2787, 41167, 13], "temperature": 0.0, "avg_logprob": -0.14145801862080892, "compression_ratio": 1.846774193548387, "no_speech_prob": 1.012957000057213e-05}, {"id": 596, "seek": 280640, "start": 2806.4, "end": 2809.1600000000003, "text": " It's actually the log of the softmax but don't worry about that too much.", "tokens": [467, 311, 767, 264, 3565, 295, 264, 2787, 41167, 457, 500, 380, 3292, 466, 300, 886, 709, 13], "temperature": 0.0, "avg_logprob": -0.15166611021215265, "compression_ratio": 1.6633663366336633, "no_speech_prob": 7.646234735148028e-06}, {"id": 597, "seek": 280640, "start": 2809.1600000000003, "end": 2814.1600000000003, "text": " It's just slightly faster to do the log.", "tokens": [467, 311, 445, 4748, 4663, 281, 360, 264, 3565, 13], "temperature": 0.0, "avg_logprob": -0.15166611021215265, "compression_ratio": 1.6633663366336633, "no_speech_prob": 7.646234735148028e-06}, {"id": 598, "seek": 280640, "start": 2814.1600000000003, "end": 2823.84, "text": " Okay so now for each one of our five things we've got a probability.", "tokens": [1033, 370, 586, 337, 1184, 472, 295, 527, 1732, 721, 321, 600, 658, 257, 8482, 13], "temperature": 0.0, "avg_logprob": -0.15166611021215265, "compression_ratio": 1.6633663366336633, "no_speech_prob": 7.646234735148028e-06}, {"id": 599, "seek": 280640, "start": 2823.84, "end": 2829.1600000000003, "text": " The next step is the actual cross entropy calculation which is we take our five things,", "tokens": [440, 958, 1823, 307, 264, 3539, 3278, 30867, 17108, 597, 307, 321, 747, 527, 1732, 721, 11], "temperature": 0.0, "avg_logprob": -0.15166611021215265, "compression_ratio": 1.6633663366336633, "no_speech_prob": 7.646234735148028e-06}, {"id": 600, "seek": 280640, "start": 2829.1600000000003, "end": 2834.52, "text": " we've got our five probabilities and then we've got our actuals.", "tokens": [321, 600, 658, 527, 1732, 33783, 293, 550, 321, 600, 658, 527, 3539, 82, 13], "temperature": 0.0, "avg_logprob": -0.15166611021215265, "compression_ratio": 1.6633663366336633, "no_speech_prob": 7.646234735148028e-06}, {"id": 601, "seek": 283452, "start": 2834.52, "end": 2839.6, "text": " Now the truth is the actual, you know the five things would have indices right, 0, 1,", "tokens": [823, 264, 3494, 307, 264, 3539, 11, 291, 458, 264, 1732, 721, 576, 362, 43840, 558, 11, 1958, 11, 502, 11], "temperature": 0.0, "avg_logprob": -0.1568839118594215, "compression_ratio": 1.6607929515418502, "no_speech_prob": 5.014681846660096e-06}, {"id": 602, "seek": 283452, "start": 2839.6, "end": 2844.24, "text": " 2, 3 or 4 and the actual turned out to be the number 1.", "tokens": [568, 11, 805, 420, 1017, 293, 264, 3539, 3574, 484, 281, 312, 264, 1230, 502, 13], "temperature": 0.0, "avg_logprob": -0.1568839118594215, "compression_ratio": 1.6607929515418502, "no_speech_prob": 5.014681846660096e-06}, {"id": 603, "seek": 283452, "start": 2844.24, "end": 2850.72, "text": " But what we tend to do is we think of it as being one-hot encoded which is we put a 1", "tokens": [583, 437, 321, 3928, 281, 360, 307, 321, 519, 295, 309, 382, 885, 472, 12, 12194, 2058, 12340, 597, 307, 321, 829, 257, 502], "temperature": 0.0, "avg_logprob": -0.1568839118594215, "compression_ratio": 1.6607929515418502, "no_speech_prob": 5.014681846660096e-06}, {"id": 604, "seek": 283452, "start": 2850.72, "end": 2856.04, "text": " next to the thing for which it's true and a 0 everywhere else.", "tokens": [958, 281, 264, 551, 337, 597, 309, 311, 2074, 293, 257, 1958, 5315, 1646, 13], "temperature": 0.0, "avg_logprob": -0.1568839118594215, "compression_ratio": 1.6607929515418502, "no_speech_prob": 5.014681846660096e-06}, {"id": 605, "seek": 283452, "start": 2856.04, "end": 2862.96, "text": " And so now we can compare these five numbers to these five numbers and we would expect", "tokens": [400, 370, 586, 321, 393, 6794, 613, 1732, 3547, 281, 613, 1732, 3547, 293, 321, 576, 2066], "temperature": 0.0, "avg_logprob": -0.1568839118594215, "compression_ratio": 1.6607929515418502, "no_speech_prob": 5.014681846660096e-06}, {"id": 606, "seek": 286296, "start": 2862.96, "end": 2873.2, "text": " to have a smaller loss if the softmax was high where the actual is high.", "tokens": [281, 362, 257, 4356, 4470, 498, 264, 2787, 41167, 390, 1090, 689, 264, 3539, 307, 1090, 13], "temperature": 0.0, "avg_logprob": -0.10245015404441139, "compression_ratio": 1.6029411764705883, "no_speech_prob": 3.966852546000155e-06}, {"id": 607, "seek": 286296, "start": 2873.2, "end": 2880.9, "text": " And so here's how we calculate, this is the formula, the cross entropy loss.", "tokens": [400, 370, 510, 311, 577, 321, 8873, 11, 341, 307, 264, 8513, 11, 264, 3278, 30867, 4470, 13], "temperature": 0.0, "avg_logprob": -0.10245015404441139, "compression_ratio": 1.6029411764705883, "no_speech_prob": 3.966852546000155e-06}, {"id": 608, "seek": 286296, "start": 2880.9, "end": 2884.78, "text": " We sum up, so we switched to m this time for some reason but it's the same thing, we sum", "tokens": [492, 2408, 493, 11, 370, 321, 16858, 281, 275, 341, 565, 337, 512, 1778, 457, 309, 311, 264, 912, 551, 11, 321, 2408], "temperature": 0.0, "avg_logprob": -0.10245015404441139, "compression_ratio": 1.6029411764705883, "no_speech_prob": 3.966852546000155e-06}, {"id": 609, "seek": 286296, "start": 2884.78, "end": 2891.7200000000003, "text": " up across the five categories, so m is 5, and for each one we multiply the actual target", "tokens": [493, 2108, 264, 1732, 10479, 11, 370, 275, 307, 1025, 11, 293, 337, 1184, 472, 321, 12972, 264, 3539, 3779], "temperature": 0.0, "avg_logprob": -0.10245015404441139, "compression_ratio": 1.6029411764705883, "no_speech_prob": 3.966852546000155e-06}, {"id": 610, "seek": 289172, "start": 2891.72, "end": 2905.06, "text": " value, so that's 0, so here it is here, the actual target value, and we multiply that", "tokens": [2158, 11, 370, 300, 311, 1958, 11, 370, 510, 309, 307, 510, 11, 264, 3539, 3779, 2158, 11, 293, 321, 12972, 300], "temperature": 0.0, "avg_logprob": -0.11204365624321831, "compression_ratio": 1.5794392523364487, "no_speech_prob": 1.963787326531019e-06}, {"id": 611, "seek": 289172, "start": 2905.06, "end": 2913.7599999999998, "text": " by the log of the predicted probability, the log of red, the predicted probability.", "tokens": [538, 264, 3565, 295, 264, 19147, 8482, 11, 264, 3565, 295, 2182, 11, 264, 19147, 8482, 13], "temperature": 0.0, "avg_logprob": -0.11204365624321831, "compression_ratio": 1.5794392523364487, "no_speech_prob": 1.963787326531019e-06}, {"id": 612, "seek": 291376, "start": 2913.76, "end": 2925.0, "text": " And so of course for four of these that value is 0, because see here, yj equals 0 by definition", "tokens": [400, 370, 295, 1164, 337, 1451, 295, 613, 300, 2158, 307, 1958, 11, 570, 536, 510, 11, 288, 73, 6915, 1958, 538, 7123], "temperature": 0.0, "avg_logprob": -0.15993473746559836, "compression_ratio": 1.4387096774193548, "no_speech_prob": 3.446508344495669e-06}, {"id": 613, "seek": 291376, "start": 2925.0, "end": 2929.1800000000003, "text": " for all but one of them because it's one-hot encoded.", "tokens": [337, 439, 457, 472, 295, 552, 570, 309, 311, 472, 12, 12194, 2058, 12340, 13], "temperature": 0.0, "avg_logprob": -0.15993473746559836, "compression_ratio": 1.4387096774193548, "no_speech_prob": 3.446508344495669e-06}, {"id": 614, "seek": 291376, "start": 2929.1800000000003, "end": 2940.6800000000003, "text": " So for the one that it's not, we've got our actual times the log softmax.", "tokens": [407, 337, 264, 472, 300, 309, 311, 406, 11, 321, 600, 658, 527, 3539, 1413, 264, 3565, 2787, 41167, 13], "temperature": 0.0, "avg_logprob": -0.15993473746559836, "compression_ratio": 1.4387096774193548, "no_speech_prob": 3.446508344495669e-06}, {"id": 615, "seek": 294068, "start": 2940.68, "end": 2946.8599999999997, "text": " And so now actually you can see why PyTorch prefers to use log softmax because it kind", "tokens": [400, 370, 586, 767, 291, 393, 536, 983, 9953, 51, 284, 339, 44334, 281, 764, 3565, 2787, 41167, 570, 309, 733], "temperature": 0.0, "avg_logprob": -0.09032978731043198, "compression_ratio": 1.6166666666666667, "no_speech_prob": 9.817705176828895e-06}, {"id": 616, "seek": 294068, "start": 2946.8599999999997, "end": 2951.6, "text": " of skips over having to do this log at all.", "tokens": [295, 1110, 2600, 670, 1419, 281, 360, 341, 3565, 412, 439, 13], "temperature": 0.0, "avg_logprob": -0.09032978731043198, "compression_ratio": 1.6166666666666667, "no_speech_prob": 9.817705176828895e-06}, {"id": 617, "seek": 294068, "start": 2951.6, "end": 2958.56, "text": " So this equation looks slightly frightening but when you think about it, all it's actually", "tokens": [407, 341, 5367, 1542, 4748, 31043, 457, 562, 291, 519, 466, 309, 11, 439, 309, 311, 767], "temperature": 0.0, "avg_logprob": -0.09032978731043198, "compression_ratio": 1.6166666666666667, "no_speech_prob": 9.817705176828895e-06}, {"id": 618, "seek": 294068, "start": 2958.56, "end": 2966.0, "text": " doing is it's finding the probability for the one that is 1 and taking its log.", "tokens": [884, 307, 309, 311, 5006, 264, 8482, 337, 264, 472, 300, 307, 502, 293, 1940, 1080, 3565, 13], "temperature": 0.0, "avg_logprob": -0.09032978731043198, "compression_ratio": 1.6166666666666667, "no_speech_prob": 9.817705176828895e-06}, {"id": 619, "seek": 294068, "start": 2966.0, "end": 2969.72, "text": " It's kind of weird doing it as a sum but in math it can be a little bit tricky to kind", "tokens": [467, 311, 733, 295, 3657, 884, 309, 382, 257, 2408, 457, 294, 5221, 309, 393, 312, 257, 707, 857, 12414, 281, 733], "temperature": 0.0, "avg_logprob": -0.09032978731043198, "compression_ratio": 1.6166666666666667, "no_speech_prob": 9.817705176828895e-06}, {"id": 620, "seek": 296972, "start": 2969.72, "end": 2973.3599999999997, "text": " of say oh look this up in an array which is basically all it's doing.", "tokens": [295, 584, 1954, 574, 341, 493, 294, 364, 10225, 597, 307, 1936, 439, 309, 311, 884, 13], "temperature": 0.0, "avg_logprob": -0.20208803037317788, "compression_ratio": 1.5978260869565217, "no_speech_prob": 3.237704504499561e-06}, {"id": 621, "seek": 296972, "start": 2973.3599999999997, "end": 2979.08, "text": " But yeah, basically at least in this case for a single result with softmax this is all", "tokens": [583, 1338, 11, 1936, 412, 1935, 294, 341, 1389, 337, 257, 2167, 1874, 365, 2787, 41167, 341, 307, 439], "temperature": 0.0, "avg_logprob": -0.20208803037317788, "compression_ratio": 1.5978260869565217, "no_speech_prob": 3.237704504499561e-06}, {"id": 622, "seek": 296972, "start": 2979.08, "end": 2984.3999999999996, "text": " it's doing, it's finding the 0.87 where it's 1 for and taking the log and then finally", "tokens": [309, 311, 884, 11, 309, 311, 5006, 264, 1958, 13, 23853, 689, 309, 311, 502, 337, 293, 1940, 264, 3565, 293, 550, 2721], "temperature": 0.0, "avg_logprob": -0.20208803037317788, "compression_ratio": 1.5978260869565217, "no_speech_prob": 3.237704504499561e-06}, {"id": 623, "seek": 296972, "start": 2984.3999999999996, "end": 2987.9599999999996, "text": " negative.", "tokens": [3671, 13], "temperature": 0.0, "avg_logprob": -0.20208803037317788, "compression_ratio": 1.5978260869565217, "no_speech_prob": 3.237704504499561e-06}, {"id": 624, "seek": 296972, "start": 2987.9599999999996, "end": 2997.2799999999997, "text": " So that is what cross entropy loss does.", "tokens": [407, 300, 307, 437, 3278, 30867, 4470, 775, 13], "temperature": 0.0, "avg_logprob": -0.20208803037317788, "compression_ratio": 1.5978260869565217, "no_speech_prob": 3.237704504499561e-06}, {"id": 625, "seek": 299728, "start": 2997.28, "end": 3003.5600000000004, "text": " We add that together for every row.", "tokens": [492, 909, 300, 1214, 337, 633, 5386, 13], "temperature": 0.0, "avg_logprob": -0.12403899922090418, "compression_ratio": 1.6054054054054054, "no_speech_prob": 1.7502277842140757e-05}, {"id": 626, "seek": 299728, "start": 3003.5600000000004, "end": 3007.96, "text": " So here's what it looks like if we add it together over every row.", "tokens": [407, 510, 311, 437, 309, 1542, 411, 498, 321, 909, 309, 1214, 670, 633, 5386, 13], "temperature": 0.0, "avg_logprob": -0.12403899922090418, "compression_ratio": 1.6054054054054054, "no_speech_prob": 1.7502277842140757e-05}, {"id": 627, "seek": 299728, "start": 3007.96, "end": 3010.52, "text": " So n is the number of rows.", "tokens": [407, 297, 307, 264, 1230, 295, 13241, 13], "temperature": 0.0, "avg_logprob": -0.12403899922090418, "compression_ratio": 1.6054054054054054, "no_speech_prob": 1.7502277842140757e-05}, {"id": 628, "seek": 299728, "start": 3010.52, "end": 3012.6800000000003, "text": " And here's a special case.", "tokens": [400, 510, 311, 257, 2121, 1389, 13], "temperature": 0.0, "avg_logprob": -0.12403899922090418, "compression_ratio": 1.6054054054054054, "no_speech_prob": 1.7502277842140757e-05}, {"id": 629, "seek": 299728, "start": 3012.6800000000003, "end": 3015.48, "text": " This is called binary cross entropy.", "tokens": [639, 307, 1219, 17434, 3278, 30867, 13], "temperature": 0.0, "avg_logprob": -0.12403899922090418, "compression_ratio": 1.6054054054054054, "no_speech_prob": 1.7502277842140757e-05}, {"id": 630, "seek": 299728, "start": 3015.48, "end": 3019.38, "text": " What happens if we're not predicting which of five things it is but we're just predicting", "tokens": [708, 2314, 498, 321, 434, 406, 32884, 597, 295, 1732, 721, 309, 307, 457, 321, 434, 445, 32884], "temperature": 0.0, "avg_logprob": -0.12403899922090418, "compression_ratio": 1.6054054054054054, "no_speech_prob": 1.7502277842140757e-05}, {"id": 631, "seek": 299728, "start": 3019.38, "end": 3021.7000000000003, "text": " is it a cat?", "tokens": [307, 309, 257, 3857, 30], "temperature": 0.0, "avg_logprob": -0.12403899922090418, "compression_ratio": 1.6054054054054054, "no_speech_prob": 1.7502277842140757e-05}, {"id": 632, "seek": 302170, "start": 3021.7, "end": 3031.0, "text": " So in that case if you look at this approach you end up with this formula which is identical", "tokens": [407, 294, 300, 1389, 498, 291, 574, 412, 341, 3109, 291, 917, 493, 365, 341, 8513, 597, 307, 14800], "temperature": 0.0, "avg_logprob": -0.14950941704414986, "compression_ratio": 1.7006369426751593, "no_speech_prob": 1.9222179616917856e-05}, {"id": 633, "seek": 302170, "start": 3031.0, "end": 3041.68, "text": " to this formula but in just two cases which is you either are a cat or you're not a cat.", "tokens": [281, 341, 8513, 457, 294, 445, 732, 3331, 597, 307, 291, 2139, 366, 257, 3857, 420, 291, 434, 406, 257, 3857, 13], "temperature": 0.0, "avg_logprob": -0.14950941704414986, "compression_ratio": 1.7006369426751593, "no_speech_prob": 1.9222179616917856e-05}, {"id": 634, "seek": 302170, "start": 3041.68, "end": 3044.9199999999996, "text": " And so if you're not a cat it's 1 minus you are a cat.", "tokens": [400, 370, 498, 291, 434, 406, 257, 3857, 309, 311, 502, 3175, 291, 366, 257, 3857, 13], "temperature": 0.0, "avg_logprob": -0.14950941704414986, "compression_ratio": 1.7006369426751593, "no_speech_prob": 1.9222179616917856e-05}, {"id": 635, "seek": 302170, "start": 3044.9199999999996, "end": 3045.9199999999996, "text": " And same with the probability.", "tokens": [400, 912, 365, 264, 8482, 13], "temperature": 0.0, "avg_logprob": -0.14950941704414986, "compression_ratio": 1.7006369426751593, "no_speech_prob": 1.9222179616917856e-05}, {"id": 636, "seek": 304592, "start": 3045.92, "end": 3052.14, "text": " You've got the probability you are a cat and then not a cat is 1 minus that.", "tokens": [509, 600, 658, 264, 8482, 291, 366, 257, 3857, 293, 550, 406, 257, 3857, 307, 502, 3175, 300, 13], "temperature": 0.0, "avg_logprob": -0.11699425005445294, "compression_ratio": 1.7630331753554502, "no_speech_prob": 1.2606455129571259e-05}, {"id": 637, "seek": 304592, "start": 3052.14, "end": 3057.52, "text": " So here's this special case of binary cross entropy and now our rows represent rows of", "tokens": [407, 510, 311, 341, 2121, 1389, 295, 17434, 3278, 30867, 293, 586, 527, 13241, 2906, 13241, 295], "temperature": 0.0, "avg_logprob": -0.11699425005445294, "compression_ratio": 1.7630331753554502, "no_speech_prob": 1.2606455129571259e-05}, {"id": 638, "seek": 304592, "start": 3057.52, "end": 3058.52, "text": " data.", "tokens": [1412, 13], "temperature": 0.0, "avg_logprob": -0.11699425005445294, "compression_ratio": 1.7630331753554502, "no_speech_prob": 1.2606455129571259e-05}, {"id": 639, "seek": 304592, "start": 3058.52, "end": 3064.2000000000003, "text": " So each one of these is a different image, a different prediction and so for each one", "tokens": [407, 1184, 472, 295, 613, 307, 257, 819, 3256, 11, 257, 819, 17630, 293, 370, 337, 1184, 472], "temperature": 0.0, "avg_logprob": -0.11699425005445294, "compression_ratio": 1.7630331753554502, "no_speech_prob": 1.2606455129571259e-05}, {"id": 640, "seek": 304592, "start": 3064.2000000000003, "end": 3066.52, "text": " I'm just predicting are you a cat?", "tokens": [286, 478, 445, 32884, 366, 291, 257, 3857, 30], "temperature": 0.0, "avg_logprob": -0.11699425005445294, "compression_ratio": 1.7630331753554502, "no_speech_prob": 1.2606455129571259e-05}, {"id": 641, "seek": 304592, "start": 3066.52, "end": 3067.76, "text": " And this is the actual.", "tokens": [400, 341, 307, 264, 3539, 13], "temperature": 0.0, "avg_logprob": -0.11699425005445294, "compression_ratio": 1.7630331753554502, "no_speech_prob": 1.2606455129571259e-05}, {"id": 642, "seek": 304592, "start": 3067.76, "end": 3073.12, "text": " And so the actual are you not a cat is just 1 minus that.", "tokens": [400, 370, 264, 3539, 366, 291, 406, 257, 3857, 307, 445, 502, 3175, 300, 13], "temperature": 0.0, "avg_logprob": -0.11699425005445294, "compression_ratio": 1.7630331753554502, "no_speech_prob": 1.2606455129571259e-05}, {"id": 643, "seek": 307312, "start": 3073.12, "end": 3077.48, "text": " And so then these are the predictions that came out of the model.", "tokens": [400, 370, 550, 613, 366, 264, 21264, 300, 1361, 484, 295, 264, 2316, 13], "temperature": 0.0, "avg_logprob": -0.1502361706324986, "compression_ratio": 1.6582278481012658, "no_speech_prob": 1.4738397112523671e-05}, {"id": 644, "seek": 307312, "start": 3077.48, "end": 3084.48, "text": " Again we can use softmax or its binary equivalent and so that will give you a prediction that", "tokens": [3764, 321, 393, 764, 2787, 41167, 420, 1080, 17434, 10344, 293, 370, 300, 486, 976, 291, 257, 17630, 300], "temperature": 0.0, "avg_logprob": -0.1502361706324986, "compression_ratio": 1.6582278481012658, "no_speech_prob": 1.4738397112523671e-05}, {"id": 645, "seek": 307312, "start": 3084.48, "end": 3091.6, "text": " you're a cat and the prediction that it's not a cat is 1 minus that.", "tokens": [291, 434, 257, 3857, 293, 264, 17630, 300, 309, 311, 406, 257, 3857, 307, 502, 3175, 300, 13], "temperature": 0.0, "avg_logprob": -0.1502361706324986, "compression_ratio": 1.6582278481012658, "no_speech_prob": 1.4738397112523671e-05}, {"id": 646, "seek": 307312, "start": 3091.6, "end": 3096.3199999999997, "text": " And so here is each of the parts.", "tokens": [400, 370, 510, 307, 1184, 295, 264, 3166, 13], "temperature": 0.0, "avg_logprob": -0.1502361706324986, "compression_ratio": 1.6582278481012658, "no_speech_prob": 1.4738397112523671e-05}, {"id": 647, "seek": 309632, "start": 3096.32, "end": 3104.32, "text": " Y i times log of p y i and here is, why did I subtract?", "tokens": [398, 741, 1413, 3565, 295, 280, 288, 741, 293, 510, 307, 11, 983, 630, 286, 16390, 30], "temperature": 0.0, "avg_logprob": -0.3001115450295069, "compression_ratio": 1.5502392344497609, "no_speech_prob": 1.321153285971377e-05}, {"id": 648, "seek": 309632, "start": 3104.32, "end": 3108.0, "text": " That was weird.", "tokens": [663, 390, 3657, 13], "temperature": 0.0, "avg_logprob": -0.3001115450295069, "compression_ratio": 1.5502392344497609, "no_speech_prob": 1.321153285971377e-05}, {"id": 649, "seek": 309632, "start": 3108.0, "end": 3112.44, "text": " Oh because I've got minus of both so I just do it this way.", "tokens": [876, 570, 286, 600, 658, 3175, 295, 1293, 370, 286, 445, 360, 309, 341, 636, 13], "temperature": 0.0, "avg_logprob": -0.3001115450295069, "compression_ratio": 1.5502392344497609, "no_speech_prob": 1.321153285971377e-05}, {"id": 650, "seek": 309632, "start": 3112.44, "end": 3114.04, "text": " Avoids parentheses.", "tokens": [36175, 3742, 34153, 13], "temperature": 0.0, "avg_logprob": -0.3001115450295069, "compression_ratio": 1.5502392344497609, "no_speech_prob": 1.321153285971377e-05}, {"id": 651, "seek": 309632, "start": 3114.04, "end": 3121.88, "text": " Yeah minus the are you not a cat times the log of the prediction of are you not a cat?", "tokens": [865, 3175, 264, 366, 291, 406, 257, 3857, 1413, 264, 3565, 295, 264, 17630, 295, 366, 291, 406, 257, 3857, 30], "temperature": 0.0, "avg_logprob": -0.3001115450295069, "compression_ratio": 1.5502392344497609, "no_speech_prob": 1.321153285971377e-05}, {"id": 652, "seek": 309632, "start": 3121.88, "end": 3125.84, "text": " And then we can add those together and so that would be the binary cross entropy loss", "tokens": [400, 550, 321, 393, 909, 729, 1214, 293, 370, 300, 576, 312, 264, 17434, 3278, 30867, 4470], "temperature": 0.0, "avg_logprob": -0.3001115450295069, "compression_ratio": 1.5502392344497609, "no_speech_prob": 1.321153285971377e-05}, {"id": 653, "seek": 312584, "start": 3125.84, "end": 3140.56, "text": " of this data set of 5 cat or not cat images.", "tokens": [295, 341, 1412, 992, 295, 1025, 3857, 420, 406, 3857, 5267, 13], "temperature": 0.0, "avg_logprob": -0.2135368115974195, "compression_ratio": 1.5986842105263157, "no_speech_prob": 1.920600698213093e-05}, {"id": 654, "seek": 312584, "start": 3140.56, "end": 3149.28, "text": " Now if you've got an eagle eye you may have noticed that I am currently looking at the", "tokens": [823, 498, 291, 600, 658, 364, 30745, 3313, 291, 815, 362, 5694, 300, 286, 669, 4362, 1237, 412, 264], "temperature": 0.0, "avg_logprob": -0.2135368115974195, "compression_ratio": 1.5986842105263157, "no_speech_prob": 1.920600698213093e-05}, {"id": 655, "seek": 312584, "start": 3149.28, "end": 3155.8, "text": " documentation for something called nn.crossentropyloss but over here I had something called nn.crossentropyloss", "tokens": [14333, 337, 746, 1219, 297, 77, 13, 35418, 317, 27514, 75, 772, 457, 670, 510, 286, 632, 746, 1219, 297, 77, 13, 35418, 317, 27514, 75, 772], "temperature": 0.0, "avg_logprob": -0.2135368115974195, "compression_ratio": 1.5986842105263157, "no_speech_prob": 1.920600698213093e-05}, {"id": 656, "seek": 315580, "start": 3155.8, "end": 3159.6400000000003, "text": " f.crossentropy.", "tokens": [283, 13, 35418, 317, 27514, 13], "temperature": 0.0, "avg_logprob": -0.11976631919106284, "compression_ratio": 1.7213930348258706, "no_speech_prob": 2.1107402062625624e-05}, {"id": 657, "seek": 315580, "start": 3159.6400000000003, "end": 3165.52, "text": " Basically it turns out that all of the loss functions in PyTorch have two versions.", "tokens": [8537, 309, 4523, 484, 300, 439, 295, 264, 4470, 6828, 294, 9953, 51, 284, 339, 362, 732, 9606, 13], "temperature": 0.0, "avg_logprob": -0.11976631919106284, "compression_ratio": 1.7213930348258706, "no_speech_prob": 2.1107402062625624e-05}, {"id": 658, "seek": 315580, "start": 3165.52, "end": 3172.2400000000002, "text": " There's a version which is a class, this is a class which you can instantiate passing", "tokens": [821, 311, 257, 3037, 597, 307, 257, 1508, 11, 341, 307, 257, 1508, 597, 291, 393, 9836, 13024, 8437], "temperature": 0.0, "avg_logprob": -0.11976631919106284, "compression_ratio": 1.7213930348258706, "no_speech_prob": 2.1107402062625624e-05}, {"id": 659, "seek": 315580, "start": 3172.2400000000002, "end": 3179.2400000000002, "text": " in various tweaks you might want and there's also a version which is just a function and", "tokens": [294, 3683, 46664, 291, 1062, 528, 293, 456, 311, 611, 257, 3037, 597, 307, 445, 257, 2445, 293], "temperature": 0.0, "avg_logprob": -0.11976631919106284, "compression_ratio": 1.7213930348258706, "no_speech_prob": 2.1107402062625624e-05}, {"id": 660, "seek": 315580, "start": 3179.2400000000002, "end": 3184.6000000000004, "text": " so if you don't need any of these tweaks you can just use the function.", "tokens": [370, 498, 291, 500, 380, 643, 604, 295, 613, 46664, 291, 393, 445, 764, 264, 2445, 13], "temperature": 0.0, "avg_logprob": -0.11976631919106284, "compression_ratio": 1.7213930348258706, "no_speech_prob": 2.1107402062625624e-05}, {"id": 661, "seek": 318460, "start": 3184.6, "end": 3190.68, "text": " The functions live in a, I can't remember what the sub module called, I think it might", "tokens": [440, 6828, 1621, 294, 257, 11, 286, 393, 380, 1604, 437, 264, 1422, 10088, 1219, 11, 286, 519, 309, 1062], "temperature": 0.0, "avg_logprob": -0.20672544499033504, "compression_ratio": 1.6367521367521367, "no_speech_prob": 1.5688876374042593e-05}, {"id": 662, "seek": 318460, "start": 3190.68, "end": 3196.2799999999997, "text": " be like torch.nn.functional but everybody including the PyTorch official docs just calls", "tokens": [312, 411, 27822, 13, 26384, 13, 22845, 304, 457, 2201, 3009, 264, 9953, 51, 284, 339, 4783, 45623, 445, 5498], "temperature": 0.0, "avg_logprob": -0.20672544499033504, "compression_ratio": 1.6367521367521367, "no_speech_prob": 1.5688876374042593e-05}, {"id": 663, "seek": 318460, "start": 3196.2799999999997, "end": 3202.08, "text": " it capital F. So that's what this capital F refers to.", "tokens": [309, 4238, 479, 13, 407, 300, 311, 437, 341, 4238, 479, 14942, 281, 13], "temperature": 0.0, "avg_logprob": -0.20672544499033504, "compression_ratio": 1.6367521367521367, "no_speech_prob": 1.5688876374042593e-05}, {"id": 664, "seek": 318460, "start": 3202.08, "end": 3206.12, "text": " So our loss if we just care about disease we're going to be past the three things but", "tokens": [407, 527, 4470, 498, 321, 445, 1127, 466, 4752, 321, 434, 516, 281, 312, 1791, 264, 1045, 721, 457], "temperature": 0.0, "avg_logprob": -0.20672544499033504, "compression_ratio": 1.6367521367521367, "no_speech_prob": 1.5688876374042593e-05}, {"id": 665, "seek": 318460, "start": 3206.12, "end": 3212.52, "text": " just going to calculate cross entropy on our input versus disease.", "tokens": [445, 516, 281, 8873, 3278, 30867, 322, 527, 4846, 5717, 4752, 13], "temperature": 0.0, "avg_logprob": -0.20672544499033504, "compression_ratio": 1.6367521367521367, "no_speech_prob": 1.5688876374042593e-05}, {"id": 666, "seek": 321252, "start": 3212.52, "end": 3214.68, "text": " So that's all fine.", "tokens": [407, 300, 311, 439, 2489, 13], "temperature": 0.0, "avg_logprob": -0.11271820998773342, "compression_ratio": 1.8983739837398375, "no_speech_prob": 2.1111620299052447e-05}, {"id": 667, "seek": 321252, "start": 3214.68, "end": 3219.4, "text": " So now when we create a vision learner you can't rely on fastai to know what loss function", "tokens": [407, 586, 562, 321, 1884, 257, 5201, 33347, 291, 393, 380, 10687, 322, 2370, 1301, 281, 458, 437, 4470, 2445], "temperature": 0.0, "avg_logprob": -0.11271820998773342, "compression_ratio": 1.8983739837398375, "no_speech_prob": 2.1111620299052447e-05}, {"id": 668, "seek": 321252, "start": 3219.4, "end": 3222.52, "text": " to use because we've got multiple targets.", "tokens": [281, 764, 570, 321, 600, 658, 3866, 12911, 13], "temperature": 0.0, "avg_logprob": -0.11271820998773342, "compression_ratio": 1.8983739837398375, "no_speech_prob": 2.1111620299052447e-05}, {"id": 669, "seek": 321252, "start": 3222.52, "end": 3226.08, "text": " So you have to say this is the loss function I want to use, this is the metrics I want", "tokens": [407, 291, 362, 281, 584, 341, 307, 264, 4470, 2445, 286, 528, 281, 764, 11, 341, 307, 264, 16367, 286, 528], "temperature": 0.0, "avg_logprob": -0.11271820998773342, "compression_ratio": 1.8983739837398375, "no_speech_prob": 2.1111620299052447e-05}, {"id": 670, "seek": 321252, "start": 3226.08, "end": 3230.92, "text": " to use and the other thing you can't rely on is that fastai no longer knows how many", "tokens": [281, 764, 293, 264, 661, 551, 291, 393, 380, 10687, 322, 307, 300, 2370, 1301, 572, 2854, 3255, 577, 867], "temperature": 0.0, "avg_logprob": -0.11271820998773342, "compression_ratio": 1.8983739837398375, "no_speech_prob": 2.1111620299052447e-05}, {"id": 671, "seek": 321252, "start": 3230.92, "end": 3236.12, "text": " activations to create because again there's more than one target.", "tokens": [2430, 763, 281, 1884, 570, 797, 456, 311, 544, 813, 472, 3779, 13], "temperature": 0.0, "avg_logprob": -0.11271820998773342, "compression_ratio": 1.8983739837398375, "no_speech_prob": 2.1111620299052447e-05}, {"id": 672, "seek": 321252, "start": 3236.12, "end": 3240.16, "text": " So you have to say the number of outputs to create at the last layer is 10.", "tokens": [407, 291, 362, 281, 584, 264, 1230, 295, 23930, 281, 1884, 412, 264, 1036, 4583, 307, 1266, 13], "temperature": 0.0, "avg_logprob": -0.11271820998773342, "compression_ratio": 1.8983739837398375, "no_speech_prob": 2.1111620299052447e-05}, {"id": 673, "seek": 324016, "start": 3240.16, "end": 3247.12, "text": " So this is just saying what's the size of the last matrix?", "tokens": [407, 341, 307, 445, 1566, 437, 311, 264, 2744, 295, 264, 1036, 8141, 30], "temperature": 0.0, "avg_logprob": -0.14722251892089844, "compression_ratio": 1.5073891625615763, "no_speech_prob": 9.223113011103123e-06}, {"id": 674, "seek": 324016, "start": 3247.12, "end": 3252.04, "text": " And once we've done that we can train it and we get you know basically the same kind of", "tokens": [400, 1564, 321, 600, 1096, 300, 321, 393, 3847, 309, 293, 321, 483, 291, 458, 1936, 264, 912, 733, 295], "temperature": 0.0, "avg_logprob": -0.14722251892089844, "compression_ratio": 1.5073891625615763, "no_speech_prob": 9.223113011103123e-06}, {"id": 675, "seek": 324016, "start": 3252.04, "end": 3258.08, "text": " result as we always get because this model at this point is identical to our previous", "tokens": [1874, 382, 321, 1009, 483, 570, 341, 2316, 412, 341, 935, 307, 14800, 281, 527, 3894], "temperature": 0.0, "avg_logprob": -0.14722251892089844, "compression_ratio": 1.5073891625615763, "no_speech_prob": 9.223113011103123e-06}, {"id": 676, "seek": 324016, "start": 3258.08, "end": 3260.72, "text": " convex small model.", "tokens": [42432, 1359, 2316, 13], "temperature": 0.0, "avg_logprob": -0.14722251892089844, "compression_ratio": 1.5073891625615763, "no_speech_prob": 9.223113011103123e-06}, {"id": 677, "seek": 324016, "start": 3260.72, "end": 3264.3999999999996, "text": " We've just done it in a slightly more roundabout way.", "tokens": [492, 600, 445, 1096, 309, 294, 257, 4748, 544, 3098, 21970, 636, 13], "temperature": 0.0, "avg_logprob": -0.14722251892089844, "compression_ratio": 1.5073891625615763, "no_speech_prob": 9.223113011103123e-06}, {"id": 678, "seek": 326440, "start": 3264.4, "end": 3271.04, "text": " So finally before our break I'll show you how to expand this now into a multi-target", "tokens": [407, 2721, 949, 527, 1821, 286, 603, 855, 291, 577, 281, 5268, 341, 586, 666, 257, 4825, 12, 23480, 847], "temperature": 0.0, "avg_logprob": -0.11870457213601948, "compression_ratio": 1.4953271028037383, "no_speech_prob": 4.289159733161796e-06}, {"id": 679, "seek": 326440, "start": 3271.04, "end": 3277.52, "text": " model and the trick is actually very simple and you might have almost got the idea of", "tokens": [2316, 293, 264, 4282, 307, 767, 588, 2199, 293, 291, 1062, 362, 1920, 658, 264, 1558, 295], "temperature": 0.0, "avg_logprob": -0.11870457213601948, "compression_ratio": 1.4953271028037383, "no_speech_prob": 4.289159733161796e-06}, {"id": 680, "seek": 326440, "start": 3277.52, "end": 3279.92, "text": " it when I talked about it earlier.", "tokens": [309, 562, 286, 2825, 466, 309, 3071, 13], "temperature": 0.0, "avg_logprob": -0.11870457213601948, "compression_ratio": 1.4953271028037383, "no_speech_prob": 4.289159733161796e-06}, {"id": 681, "seek": 326440, "start": 3279.92, "end": 3283.96, "text": " Our vision learner now requires 20 outputs.", "tokens": [2621, 5201, 33347, 586, 7029, 945, 23930, 13], "temperature": 0.0, "avg_logprob": -0.11870457213601948, "compression_ratio": 1.4953271028037383, "no_speech_prob": 4.289159733161796e-06}, {"id": 682, "seek": 326440, "start": 3283.96, "end": 3290.7200000000003, "text": " We now need that last matrix to have to produce 20 activations not 10.", "tokens": [492, 586, 643, 300, 1036, 8141, 281, 362, 281, 5258, 945, 2430, 763, 406, 1266, 13], "temperature": 0.0, "avg_logprob": -0.11870457213601948, "compression_ratio": 1.4953271028037383, "no_speech_prob": 4.289159733161796e-06}, {"id": 683, "seek": 329072, "start": 3290.72, "end": 3297.68, "text": " 10 of those activations are going to predict the disease and 10 of the activations are", "tokens": [1266, 295, 729, 2430, 763, 366, 516, 281, 6069, 264, 4752, 293, 1266, 295, 264, 2430, 763, 366], "temperature": 0.0, "avg_logprob": -0.11992548836602104, "compression_ratio": 1.8686868686868687, "no_speech_prob": 6.240815764613217e-06}, {"id": 684, "seek": 329072, "start": 3297.68, "end": 3300.9599999999996, "text": " going to predict the variety.", "tokens": [516, 281, 6069, 264, 5673, 13], "temperature": 0.0, "avg_logprob": -0.11992548836602104, "compression_ratio": 1.8686868686868687, "no_speech_prob": 6.240815764613217e-06}, {"id": 685, "seek": 329072, "start": 3300.9599999999996, "end": 3303.7999999999997, "text": " So you might be then asking like well how does the model know what it's meant to be", "tokens": [407, 291, 1062, 312, 550, 3365, 411, 731, 577, 775, 264, 2316, 458, 437, 309, 311, 4140, 281, 312], "temperature": 0.0, "avg_logprob": -0.11992548836602104, "compression_ratio": 1.8686868686868687, "no_speech_prob": 6.240815764613217e-06}, {"id": 686, "seek": 329072, "start": 3303.7999999999997, "end": 3313.7, "text": " predicting and the answer is with the loss function you're going to have to tell it.", "tokens": [32884, 293, 264, 1867, 307, 365, 264, 4470, 2445, 291, 434, 516, 281, 362, 281, 980, 309, 13], "temperature": 0.0, "avg_logprob": -0.11992548836602104, "compression_ratio": 1.8686868686868687, "no_speech_prob": 6.240815764613217e-06}, {"id": 687, "seek": 329072, "start": 3313.7, "end": 3318.2, "text": " So for example disease loss remember it's going to get the input the disease and the", "tokens": [407, 337, 1365, 4752, 4470, 1604, 309, 311, 516, 281, 483, 264, 4846, 264, 4752, 293, 264], "temperature": 0.0, "avg_logprob": -0.11992548836602104, "compression_ratio": 1.8686868686868687, "no_speech_prob": 6.240815764613217e-06}, {"id": 688, "seek": 331820, "start": 3318.2, "end": 3324.3199999999997, "text": " variety this is now going to have 20 columns in.", "tokens": [5673, 341, 307, 586, 516, 281, 362, 945, 13766, 294, 13], "temperature": 0.0, "avg_logprob": -0.1176651120185852, "compression_ratio": 1.9, "no_speech_prob": 5.173696536076022e-06}, {"id": 689, "seek": 331820, "start": 3324.3199999999997, "end": 3327.7999999999997, "text": " So we're just going to decide all right we're just going to decide the first 10 columns", "tokens": [407, 321, 434, 445, 516, 281, 4536, 439, 558, 321, 434, 445, 516, 281, 4536, 264, 700, 1266, 13766], "temperature": 0.0, "avg_logprob": -0.1176651120185852, "compression_ratio": 1.9, "no_speech_prob": 5.173696536076022e-06}, {"id": 690, "seek": 331820, "start": 3327.7999999999997, "end": 3332.08, "text": " we're going to decide are the prediction of what the disease is which of the probability", "tokens": [321, 434, 516, 281, 4536, 366, 264, 17630, 295, 437, 264, 4752, 307, 597, 295, 264, 8482], "temperature": 0.0, "avg_logprob": -0.1176651120185852, "compression_ratio": 1.9, "no_speech_prob": 5.173696536076022e-06}, {"id": 691, "seek": 331820, "start": 3332.08, "end": 3333.2999999999997, "text": " of each disease.", "tokens": [295, 1184, 4752, 13], "temperature": 0.0, "avg_logprob": -0.1176651120185852, "compression_ratio": 1.9, "no_speech_prob": 5.173696536076022e-06}, {"id": 692, "seek": 331820, "start": 3333.2999999999997, "end": 3341.8999999999996, "text": " So we can now pass to cross entropy the first 10 columns and the disease target.", "tokens": [407, 321, 393, 586, 1320, 281, 3278, 30867, 264, 700, 1266, 13766, 293, 264, 4752, 3779, 13], "temperature": 0.0, "avg_logprob": -0.1176651120185852, "compression_ratio": 1.9, "no_speech_prob": 5.173696536076022e-06}, {"id": 693, "seek": 334190, "start": 3341.9, "end": 3351.92, "text": " So the way you read this colon means every row and then colon 10 means every column up", "tokens": [407, 264, 636, 291, 1401, 341, 8255, 1355, 633, 5386, 293, 550, 8255, 1266, 1355, 633, 7738, 493], "temperature": 0.0, "avg_logprob": -0.09749016650887422, "compression_ratio": 1.766839378238342, "no_speech_prob": 2.260291012134985e-06}, {"id": 694, "seek": 334190, "start": 3351.92, "end": 3355.14, "text": " to the 10th.", "tokens": [281, 264, 1266, 392, 13], "temperature": 0.0, "avg_logprob": -0.09749016650887422, "compression_ratio": 1.766839378238342, "no_speech_prob": 2.260291012134985e-06}, {"id": 695, "seek": 334190, "start": 3355.14, "end": 3360.28, "text": " So these are the first 10 columns and that's a loss function that just works on predicting", "tokens": [407, 613, 366, 264, 700, 1266, 13766, 293, 300, 311, 257, 4470, 2445, 300, 445, 1985, 322, 32884], "temperature": 0.0, "avg_logprob": -0.09749016650887422, "compression_ratio": 1.766839378238342, "no_speech_prob": 2.260291012134985e-06}, {"id": 696, "seek": 334190, "start": 3360.28, "end": 3364.1600000000003, "text": " disease using the first 10 columns.", "tokens": [4752, 1228, 264, 700, 1266, 13766, 13], "temperature": 0.0, "avg_logprob": -0.09749016650887422, "compression_ratio": 1.766839378238342, "no_speech_prob": 2.260291012134985e-06}, {"id": 697, "seek": 334190, "start": 3364.1600000000003, "end": 3368.96, "text": " For variety we'll use cross entropy loss with the target of variety and this time we'll", "tokens": [1171, 5673, 321, 603, 764, 3278, 30867, 4470, 365, 264, 3779, 295, 5673, 293, 341, 565, 321, 603], "temperature": 0.0, "avg_logprob": -0.09749016650887422, "compression_ratio": 1.766839378238342, "no_speech_prob": 2.260291012134985e-06}, {"id": 698, "seek": 334190, "start": 3368.96, "end": 3371.44, "text": " use the second 10 columns.", "tokens": [764, 264, 1150, 1266, 13766, 13], "temperature": 0.0, "avg_logprob": -0.09749016650887422, "compression_ratio": 1.766839378238342, "no_speech_prob": 2.260291012134985e-06}, {"id": 699, "seek": 337144, "start": 3371.44, "end": 3375.4, "text": " So here's column 10 onwards.", "tokens": [407, 510, 311, 7738, 1266, 34230, 13], "temperature": 0.0, "avg_logprob": -0.08795607884724935, "compression_ratio": 1.4968152866242037, "no_speech_prob": 4.860357421421213e-06}, {"id": 700, "seek": 337144, "start": 3375.4, "end": 3381.92, "text": " So then the overall loss function is the sum of those two things disease loss plus variety", "tokens": [407, 550, 264, 4787, 4470, 2445, 307, 264, 2408, 295, 729, 732, 721, 4752, 4470, 1804, 5673], "temperature": 0.0, "avg_logprob": -0.08795607884724935, "compression_ratio": 1.4968152866242037, "no_speech_prob": 4.860357421421213e-06}, {"id": 701, "seek": 337144, "start": 3381.92, "end": 3388.8, "text": " loss and that's actually it.", "tokens": [4470, 293, 300, 311, 767, 309, 13], "temperature": 0.0, "avg_logprob": -0.08795607884724935, "compression_ratio": 1.4968152866242037, "no_speech_prob": 4.860357421421213e-06}, {"id": 702, "seek": 337144, "start": 3388.8, "end": 3396.36, "text": " That's all the model needs to basically it's now going to if you kind of think through", "tokens": [663, 311, 439, 264, 2316, 2203, 281, 1936, 309, 311, 586, 516, 281, 498, 291, 733, 295, 519, 807], "temperature": 0.0, "avg_logprob": -0.08795607884724935, "compression_ratio": 1.4968152866242037, "no_speech_prob": 4.860357421421213e-06}, {"id": 703, "seek": 339636, "start": 3396.36, "end": 3403.08, "text": " the manual neural nets we've created this loss function will be reduced when the first", "tokens": [264, 9688, 18161, 36170, 321, 600, 2942, 341, 4470, 2445, 486, 312, 9212, 562, 264, 700], "temperature": 0.0, "avg_logprob": -0.13146600605529032, "compression_ratio": 1.90521327014218, "no_speech_prob": 1.3845363355358131e-05}, {"id": 704, "seek": 339636, "start": 3403.08, "end": 3407.6800000000003, "text": " 10 columns are doing good job of predicting the disease probabilities and the second 10", "tokens": [1266, 13766, 366, 884, 665, 1691, 295, 32884, 264, 4752, 33783, 293, 264, 1150, 1266], "temperature": 0.0, "avg_logprob": -0.13146600605529032, "compression_ratio": 1.90521327014218, "no_speech_prob": 1.3845363355358131e-05}, {"id": 705, "seek": 339636, "start": 3407.6800000000003, "end": 3410.6400000000003, "text": " columns are doing a good job of predicting the variety probabilities and therefore the", "tokens": [13766, 366, 884, 257, 665, 1691, 295, 32884, 264, 5673, 33783, 293, 4412, 264], "temperature": 0.0, "avg_logprob": -0.13146600605529032, "compression_ratio": 1.90521327014218, "no_speech_prob": 1.3845363355358131e-05}, {"id": 706, "seek": 339636, "start": 3410.6400000000003, "end": 3416.36, "text": " gradients will point in an appropriate direction that the coefficients will get better and", "tokens": [2771, 2448, 486, 935, 294, 364, 6854, 3513, 300, 264, 31994, 486, 483, 1101, 293], "temperature": 0.0, "avg_logprob": -0.13146600605529032, "compression_ratio": 1.90521327014218, "no_speech_prob": 1.3845363355358131e-05}, {"id": 707, "seek": 339636, "start": 3416.36, "end": 3423.4, "text": " better at using those columns for those purposes.", "tokens": [1101, 412, 1228, 729, 13766, 337, 729, 9932, 13], "temperature": 0.0, "avg_logprob": -0.13146600605529032, "compression_ratio": 1.90521327014218, "no_speech_prob": 1.3845363355358131e-05}, {"id": 708, "seek": 342340, "start": 3423.4, "end": 3427.8, "text": " So it'd be nice to see the error rate as well for each of disease and variety so we can", "tokens": [407, 309, 1116, 312, 1481, 281, 536, 264, 6713, 3314, 382, 731, 337, 1184, 295, 4752, 293, 5673, 370, 321, 393], "temperature": 0.0, "avg_logprob": -0.13678761650534238, "compression_ratio": 1.8071065989847717, "no_speech_prob": 1.3211056284490041e-05}, {"id": 709, "seek": 342340, "start": 3427.8, "end": 3434.28, "text": " call error rate passing in the first 10 columns and disease and then variety the second 10", "tokens": [818, 6713, 3314, 8437, 294, 264, 700, 1266, 13766, 293, 4752, 293, 550, 5673, 264, 1150, 1266], "temperature": 0.0, "avg_logprob": -0.13678761650534238, "compression_ratio": 1.8071065989847717, "no_speech_prob": 1.3211056284490041e-05}, {"id": 710, "seek": 342340, "start": 3434.28, "end": 3443.08, "text": " columns and variety and we may as well also add to the metrics the losses and so now when", "tokens": [13766, 293, 5673, 293, 321, 815, 382, 731, 611, 909, 281, 264, 16367, 264, 15352, 293, 370, 586, 562], "temperature": 0.0, "avg_logprob": -0.13678761650534238, "compression_ratio": 1.8071065989847717, "no_speech_prob": 1.3211056284490041e-05}, {"id": 711, "seek": 342340, "start": 3443.08, "end": 3450.08, "text": " we create our learner we're going to pass in as the loss function the combined loss and", "tokens": [321, 1884, 527, 33347, 321, 434, 516, 281, 1320, 294, 382, 264, 4470, 2445, 264, 9354, 4470, 293], "temperature": 0.0, "avg_logprob": -0.13678761650534238, "compression_ratio": 1.8071065989847717, "no_speech_prob": 1.3211056284490041e-05}, {"id": 712, "seek": 345008, "start": 3450.08, "end": 3457.04, "text": " as the metrics our list of all the metrics and n out equals 20 and now look what happens", "tokens": [382, 264, 16367, 527, 1329, 295, 439, 264, 16367, 293, 297, 484, 6915, 945, 293, 586, 574, 437, 2314], "temperature": 0.0, "avg_logprob": -0.12347169255101403, "compression_ratio": 1.7733990147783252, "no_speech_prob": 8.013329534151126e-06}, {"id": 713, "seek": 345008, "start": 3457.04, "end": 3463.12, "text": " when we train as well as telling us the overall train invalid loss it also tells us the disease", "tokens": [562, 321, 3847, 382, 731, 382, 3585, 505, 264, 4787, 3847, 34702, 4470, 309, 611, 5112, 505, 264, 4752], "temperature": 0.0, "avg_logprob": -0.12347169255101403, "compression_ratio": 1.7733990147783252, "no_speech_prob": 8.013329534151126e-06}, {"id": 714, "seek": 345008, "start": 3463.12, "end": 3469.52, "text": " and variety error and the disease and variety loss and you can see our disease error is", "tokens": [293, 5673, 6713, 293, 264, 4752, 293, 5673, 4470, 293, 291, 393, 536, 527, 4752, 6713, 307], "temperature": 0.0, "avg_logprob": -0.12347169255101403, "compression_ratio": 1.7733990147783252, "no_speech_prob": 8.013329534151126e-06}, {"id": 715, "seek": 345008, "start": 3469.52, "end": 3472.64, "text": " getting down to similar levels it was before.", "tokens": [1242, 760, 281, 2531, 4358, 309, 390, 949, 13], "temperature": 0.0, "avg_logprob": -0.12347169255101403, "compression_ratio": 1.7733990147783252, "no_speech_prob": 8.013329534151126e-06}, {"id": 716, "seek": 345008, "start": 3472.64, "end": 3478.7999999999997, "text": " It's slightly less good but it's similar.", "tokens": [467, 311, 4748, 1570, 665, 457, 309, 311, 2531, 13], "temperature": 0.0, "avg_logprob": -0.12347169255101403, "compression_ratio": 1.7733990147783252, "no_speech_prob": 8.013329534151126e-06}, {"id": 717, "seek": 347880, "start": 3478.8, "end": 3483.6000000000004, "text": " It's not surprising it's slightly less good because we've only given it the same number", "tokens": [467, 311, 406, 8830, 309, 311, 4748, 1570, 665, 570, 321, 600, 787, 2212, 309, 264, 912, 1230], "temperature": 0.0, "avg_logprob": -0.08090622608478253, "compression_ratio": 1.7480314960629921, "no_speech_prob": 4.565813924273243e-06}, {"id": 718, "seek": 347880, "start": 3483.6000000000004, "end": 3488.6800000000003, "text": " of epochs and we're now asking it to try to do more stuff which is to learn to recognize", "tokens": [295, 30992, 28346, 293, 321, 434, 586, 3365, 309, 281, 853, 281, 360, 544, 1507, 597, 307, 281, 1466, 281, 5521], "temperature": 0.0, "avg_logprob": -0.08090622608478253, "compression_ratio": 1.7480314960629921, "no_speech_prob": 4.565813924273243e-06}, {"id": 719, "seek": 347880, "start": 3488.6800000000003, "end": 3493.04, "text": " what the rice variety looks like and also learns to recognize what the disease looks", "tokens": [437, 264, 5090, 5673, 1542, 411, 293, 611, 27152, 281, 5521, 437, 264, 4752, 1542], "temperature": 0.0, "avg_logprob": -0.08090622608478253, "compression_ratio": 1.7480314960629921, "no_speech_prob": 4.565813924273243e-06}, {"id": 720, "seek": 347880, "start": 3493.04, "end": 3495.5600000000004, "text": " like.", "tokens": [411, 13], "temperature": 0.0, "avg_logprob": -0.08090622608478253, "compression_ratio": 1.7480314960629921, "no_speech_prob": 4.565813924273243e-06}, {"id": 721, "seek": 347880, "start": 3495.5600000000004, "end": 3502.4, "text": " Here's the counterintuitive thing though if we train it for longer it may well turn out", "tokens": [1692, 311, 264, 5682, 686, 48314, 551, 1673, 498, 321, 3847, 309, 337, 2854, 309, 815, 731, 1261, 484], "temperature": 0.0, "avg_logprob": -0.08090622608478253, "compression_ratio": 1.7480314960629921, "no_speech_prob": 4.565813924273243e-06}, {"id": 722, "seek": 347880, "start": 3502.4, "end": 3507.5600000000004, "text": " that this model which is trying to predict two things actually gets better at predicting", "tokens": [300, 341, 2316, 597, 307, 1382, 281, 6069, 732, 721, 767, 2170, 1101, 412, 32884], "temperature": 0.0, "avg_logprob": -0.08090622608478253, "compression_ratio": 1.7480314960629921, "no_speech_prob": 4.565813924273243e-06}, {"id": 723, "seek": 350756, "start": 3507.56, "end": 3512.4, "text": " disease than our disease specific model.", "tokens": [4752, 813, 527, 4752, 2685, 2316, 13], "temperature": 0.0, "avg_logprob": -0.14092406034469604, "compression_ratio": 1.6287128712871286, "no_speech_prob": 1.6700478226994164e-05}, {"id": 724, "seek": 350756, "start": 3512.4, "end": 3513.4, "text": " Why is that?", "tokens": [1545, 307, 300, 30], "temperature": 0.0, "avg_logprob": -0.14092406034469604, "compression_ratio": 1.6287128712871286, "no_speech_prob": 1.6700478226994164e-05}, {"id": 725, "seek": 350756, "start": 3513.4, "end": 3517.64, "text": " Like that sounds weird right because we're trying to have to do more stuff as a same", "tokens": [1743, 300, 3263, 3657, 558, 570, 321, 434, 1382, 281, 362, 281, 360, 544, 1507, 382, 257, 912], "temperature": 0.0, "avg_logprob": -0.14092406034469604, "compression_ratio": 1.6287128712871286, "no_speech_prob": 1.6700478226994164e-05}, {"id": 726, "seek": 350756, "start": 3517.64, "end": 3520.16, "text": " size model.", "tokens": [2744, 2316, 13], "temperature": 0.0, "avg_logprob": -0.14092406034469604, "compression_ratio": 1.6287128712871286, "no_speech_prob": 1.6700478226994164e-05}, {"id": 727, "seek": 350756, "start": 3520.16, "end": 3525.96, "text": " Well the reason is that quite often it'll turn out that the kinds of features that help", "tokens": [1042, 264, 1778, 307, 300, 1596, 2049, 309, 603, 1261, 484, 300, 264, 3685, 295, 4122, 300, 854], "temperature": 0.0, "avg_logprob": -0.14092406034469604, "compression_ratio": 1.6287128712871286, "no_speech_prob": 1.6700478226994164e-05}, {"id": 728, "seek": 350756, "start": 3525.96, "end": 3533.72, "text": " you recognize a variety of rice are also useful for recognizing the disease you know maybe", "tokens": [291, 5521, 257, 5673, 295, 5090, 366, 611, 4420, 337, 18538, 264, 4752, 291, 458, 1310], "temperature": 0.0, "avg_logprob": -0.14092406034469604, "compression_ratio": 1.6287128712871286, "no_speech_prob": 1.6700478226994164e-05}, {"id": 729, "seek": 353372, "start": 3533.72, "end": 3542.12, "text": " there are certain textures or maybe some diseases impact different varieties different ways.", "tokens": [456, 366, 1629, 24501, 420, 1310, 512, 11044, 2712, 819, 22092, 819, 2098, 13], "temperature": 0.0, "avg_logprob": -0.13900315630566942, "compression_ratio": 1.6553191489361703, "no_speech_prob": 6.3389793467649724e-06}, {"id": 730, "seek": 353372, "start": 3542.12, "end": 3545.3199999999997, "text": " So it'd be really helpful to know what variety it was.", "tokens": [407, 309, 1116, 312, 534, 4961, 281, 458, 437, 5673, 309, 390, 13], "temperature": 0.0, "avg_logprob": -0.13900315630566942, "compression_ratio": 1.6553191489361703, "no_speech_prob": 6.3389793467649724e-06}, {"id": 731, "seek": 353372, "start": 3545.3199999999997, "end": 3550.4399999999996, "text": " So I haven't tried training this for a long time and I don't know the answer is in this", "tokens": [407, 286, 2378, 380, 3031, 3097, 341, 337, 257, 938, 565, 293, 286, 500, 380, 458, 264, 1867, 307, 294, 341], "temperature": 0.0, "avg_logprob": -0.13900315630566942, "compression_ratio": 1.6553191489361703, "no_speech_prob": 6.3389793467649724e-06}, {"id": 732, "seek": 353372, "start": 3550.4399999999996, "end": 3555.2, "text": " particular case does a multi-target model do better than a single target model at predicting", "tokens": [1729, 1389, 775, 257, 4825, 12, 23480, 847, 2316, 360, 1101, 813, 257, 2167, 3779, 2316, 412, 32884], "temperature": 0.0, "avg_logprob": -0.13900315630566942, "compression_ratio": 1.6553191489361703, "no_speech_prob": 6.3389793467649724e-06}, {"id": 733, "seek": 353372, "start": 3555.2, "end": 3559.12, "text": " disease but I just wanted to let you know sometimes it does.", "tokens": [4752, 457, 286, 445, 1415, 281, 718, 291, 458, 2171, 309, 775, 13], "temperature": 0.0, "avg_logprob": -0.13900315630566942, "compression_ratio": 1.6553191489361703, "no_speech_prob": 6.3389793467649724e-06}, {"id": 734, "seek": 355912, "start": 3559.12, "end": 3564.22, "text": " So for example a few years ago there was a Kaggle competition for recognizing the kinds", "tokens": [407, 337, 1365, 257, 1326, 924, 2057, 456, 390, 257, 48751, 22631, 6211, 337, 18538, 264, 3685], "temperature": 0.0, "avg_logprob": -0.07098300316754509, "compression_ratio": 1.8032786885245902, "no_speech_prob": 2.0779667465831153e-05}, {"id": 735, "seek": 355912, "start": 3564.22, "end": 3572.38, "text": " of fish on a boat and I remember we ended up doing a multi-target model where we tried", "tokens": [295, 3506, 322, 257, 6582, 293, 286, 1604, 321, 4590, 493, 884, 257, 4825, 12, 23480, 847, 2316, 689, 321, 3031], "temperature": 0.0, "avg_logprob": -0.07098300316754509, "compression_ratio": 1.8032786885245902, "no_speech_prob": 2.0779667465831153e-05}, {"id": 736, "seek": 355912, "start": 3572.38, "end": 3576.56, "text": " to predict a second thing I can't even remember what it was maybe it was a type of boat or", "tokens": [281, 6069, 257, 1150, 551, 286, 393, 380, 754, 1604, 437, 309, 390, 1310, 309, 390, 257, 2010, 295, 6582, 420], "temperature": 0.0, "avg_logprob": -0.07098300316754509, "compression_ratio": 1.8032786885245902, "no_speech_prob": 2.0779667465831153e-05}, {"id": 737, "seek": 355912, "start": 3576.56, "end": 3580.2799999999997, "text": " something and it definitely turned out in that Kaggle competition that predicting two", "tokens": [746, 293, 309, 2138, 3574, 484, 294, 300, 48751, 22631, 6211, 300, 32884, 732], "temperature": 0.0, "avg_logprob": -0.07098300316754509, "compression_ratio": 1.8032786885245902, "no_speech_prob": 2.0779667465831153e-05}, {"id": 738, "seek": 355912, "start": 3580.2799999999997, "end": 3586.62, "text": " things helped you predict the type of fish better than predicting just the type of fish.", "tokens": [721, 4254, 291, 6069, 264, 2010, 295, 3506, 1101, 813, 32884, 445, 264, 2010, 295, 3506, 13], "temperature": 0.0, "avg_logprob": -0.07098300316754509, "compression_ratio": 1.8032786885245902, "no_speech_prob": 2.0779667465831153e-05}, {"id": 739, "seek": 358662, "start": 3586.62, "end": 3592.2, "text": " So there's at least you know there's two reasons to learn about multi-target models one is", "tokens": [407, 456, 311, 412, 1935, 291, 458, 456, 311, 732, 4112, 281, 1466, 466, 4825, 12, 23480, 847, 5245, 472, 307], "temperature": 0.0, "avg_logprob": -0.11187980330993082, "compression_ratio": 1.8032128514056225, "no_speech_prob": 1.4283388736657798e-05}, {"id": 740, "seek": 358662, "start": 3592.2, "end": 3597.3199999999997, "text": " that sometimes you just want to be able to predict more than one thing so this is useful", "tokens": [300, 2171, 291, 445, 528, 281, 312, 1075, 281, 6069, 544, 813, 472, 551, 370, 341, 307, 4420], "temperature": 0.0, "avg_logprob": -0.11187980330993082, "compression_ratio": 1.8032128514056225, "no_speech_prob": 1.4283388736657798e-05}, {"id": 741, "seek": 358662, "start": 3597.3199999999997, "end": 3602.02, "text": " and the second is sometimes this will actually be better at predicting just one thing than", "tokens": [293, 264, 1150, 307, 2171, 341, 486, 767, 312, 1101, 412, 32884, 445, 472, 551, 813], "temperature": 0.0, "avg_logprob": -0.11187980330993082, "compression_ratio": 1.8032128514056225, "no_speech_prob": 1.4283388736657798e-05}, {"id": 742, "seek": 358662, "start": 3602.02, "end": 3603.2799999999997, "text": " a just one thing model.", "tokens": [257, 445, 472, 551, 2316, 13], "temperature": 0.0, "avg_logprob": -0.11187980330993082, "compression_ratio": 1.8032128514056225, "no_speech_prob": 1.4283388736657798e-05}, {"id": 743, "seek": 358662, "start": 3603.2799999999997, "end": 3609.88, "text": " And of course the third reason is it really forced us to dig quite deeply into these loss", "tokens": [400, 295, 1164, 264, 2636, 1778, 307, 309, 534, 7579, 505, 281, 2528, 1596, 8760, 666, 613, 4470], "temperature": 0.0, "avg_logprob": -0.11187980330993082, "compression_ratio": 1.8032128514056225, "no_speech_prob": 1.4283388736657798e-05}, {"id": 744, "seek": 358662, "start": 3609.88, "end": 3616.4, "text": " functions and activations in a way we haven't quite done before.", "tokens": [6828, 293, 2430, 763, 294, 257, 636, 321, 2378, 380, 1596, 1096, 949, 13], "temperature": 0.0, "avg_logprob": -0.11187980330993082, "compression_ratio": 1.8032128514056225, "no_speech_prob": 1.4283388736657798e-05}, {"id": 745, "seek": 361640, "start": 3616.4, "end": 3627.6600000000003, "text": " So it's okay it's absolutely okay if this is confusing.", "tokens": [407, 309, 311, 1392, 309, 311, 3122, 1392, 498, 341, 307, 13181, 13], "temperature": 0.0, "avg_logprob": -0.07703892777605754, "compression_ratio": 1.6485148514851484, "no_speech_prob": 1.4506924344459549e-05}, {"id": 746, "seek": 361640, "start": 3627.6600000000003, "end": 3632.6800000000003, "text": " The way to make it not confusing is well the first thing I do is like go back to our earlier", "tokens": [440, 636, 281, 652, 309, 406, 13181, 307, 731, 264, 700, 551, 286, 360, 307, 411, 352, 646, 281, 527, 3071], "temperature": 0.0, "avg_logprob": -0.07703892777605754, "compression_ratio": 1.6485148514851484, "no_speech_prob": 1.4506924344459549e-05}, {"id": 747, "seek": 361640, "start": 3632.6800000000003, "end": 3640.64, "text": " models where we did stuff by hand on like the Titanic data set and built our own architectures", "tokens": [5245, 689, 321, 630, 1507, 538, 1011, 322, 411, 264, 42183, 1412, 992, 293, 3094, 527, 1065, 6331, 1303], "temperature": 0.0, "avg_logprob": -0.07703892777605754, "compression_ratio": 1.6485148514851484, "no_speech_prob": 1.4506924344459549e-05}, {"id": 748, "seek": 361640, "start": 3640.64, "end": 3646.02, "text": " and maybe you could try to build a model that predicts two things in the Titanic data set", "tokens": [293, 1310, 291, 727, 853, 281, 1322, 257, 2316, 300, 6069, 82, 732, 721, 294, 264, 42183, 1412, 992], "temperature": 0.0, "avg_logprob": -0.07703892777605754, "compression_ratio": 1.6485148514851484, "no_speech_prob": 1.4506924344459549e-05}, {"id": 749, "seek": 364602, "start": 3646.02, "end": 3653.88, "text": " maybe you could try to predict both sex and survival or something like that or class and", "tokens": [1310, 291, 727, 853, 281, 6069, 1293, 3260, 293, 12559, 420, 746, 411, 300, 420, 1508, 293], "temperature": 0.0, "avg_logprob": -0.12845004232306229, "compression_ratio": 1.8136363636363637, "no_speech_prob": 3.966683379985625e-06}, {"id": 750, "seek": 364602, "start": 3653.88, "end": 3659.16, "text": " survival because that's kind of kind of forced you to look at it on very small data sets", "tokens": [12559, 570, 300, 311, 733, 295, 733, 295, 7579, 291, 281, 574, 412, 309, 322, 588, 1359, 1412, 6352], "temperature": 0.0, "avg_logprob": -0.12845004232306229, "compression_ratio": 1.8136363636363637, "no_speech_prob": 3.966683379985625e-06}, {"id": 751, "seek": 364602, "start": 3659.16, "end": 3665.08, "text": " and then the other thing I'd say is run this notebook and really experiment at trying to", "tokens": [293, 550, 264, 661, 551, 286, 1116, 584, 307, 1190, 341, 21060, 293, 534, 5120, 412, 1382, 281], "temperature": 0.0, "avg_logprob": -0.12845004232306229, "compression_ratio": 1.8136363636363637, "no_speech_prob": 3.966683379985625e-06}, {"id": 752, "seek": 364602, "start": 3665.08, "end": 3670.96, "text": " see what kind of outputs you get like actually look at the inputs and look at the outputs", "tokens": [536, 437, 733, 295, 23930, 291, 483, 411, 767, 574, 412, 264, 15743, 293, 574, 412, 264, 23930], "temperature": 0.0, "avg_logprob": -0.12845004232306229, "compression_ratio": 1.8136363636363637, "no_speech_prob": 3.966683379985625e-06}, {"id": 753, "seek": 364602, "start": 3670.96, "end": 3673.12, "text": " and look at the data loaders and so forth.", "tokens": [293, 574, 412, 264, 1412, 3677, 433, 293, 370, 5220, 13], "temperature": 0.0, "avg_logprob": -0.12845004232306229, "compression_ratio": 1.8136363636363637, "no_speech_prob": 3.966683379985625e-06}, {"id": 754, "seek": 367312, "start": 3673.12, "end": 3684.8399999999997, "text": " All right let's have a six minute break so I'll see you back here at ten past seven.", "tokens": [1057, 558, 718, 311, 362, 257, 2309, 3456, 1821, 370, 286, 603, 536, 291, 646, 510, 412, 2064, 1791, 3407, 13], "temperature": 0.0, "avg_logprob": -0.2131502628326416, "compression_ratio": 1.4081632653061225, "no_speech_prob": 1.8340502720093355e-05}, {"id": 755, "seek": 367312, "start": 3684.8399999999997, "end": 3686.3199999999997, "text": " Okay welcome back.", "tokens": [1033, 2928, 646, 13], "temperature": 0.0, "avg_logprob": -0.2131502628326416, "compression_ratio": 1.4081632653061225, "no_speech_prob": 1.8340502720093355e-05}, {"id": 756, "seek": 367312, "start": 3686.3199999999997, "end": 3695.12, "text": " Oh before I continue I very rudely forgot to mention this very nice equation image here", "tokens": [876, 949, 286, 2354, 286, 588, 32109, 736, 5298, 281, 2152, 341, 588, 1481, 5367, 3256, 510], "temperature": 0.0, "avg_logprob": -0.2131502628326416, "compression_ratio": 1.4081632653061225, "no_speech_prob": 1.8340502720093355e-05}, {"id": 757, "seek": 367312, "start": 3695.12, "end": 3701.24, "text": " is from an article by Chris Sedd called Things That Confused Me About Cross-Entropy.", "tokens": [307, 490, 364, 7222, 538, 6688, 31213, 67, 1219, 9514, 663, 11701, 4717, 1923, 7769, 11623, 12, 42837, 27514, 13], "temperature": 0.0, "avg_logprob": -0.2131502628326416, "compression_ratio": 1.4081632653061225, "no_speech_prob": 1.8340502720093355e-05}, {"id": 758, "seek": 370124, "start": 3701.24, "end": 3706.9599999999996, "text": " It's a very good article so I recommend you check it out if you want to go a bit deeper", "tokens": [467, 311, 257, 588, 665, 7222, 370, 286, 2748, 291, 1520, 309, 484, 498, 291, 528, 281, 352, 257, 857, 7731], "temperature": 0.0, "avg_logprob": -0.09744378924369812, "compression_ratio": 1.5545023696682465, "no_speech_prob": 4.784692919201916e-06}, {"id": 759, "seek": 370124, "start": 3706.9599999999996, "end": 3717.72, "text": " there there's a link to it inside the spreadsheet.", "tokens": [456, 456, 311, 257, 2113, 281, 309, 1854, 264, 27733, 13], "temperature": 0.0, "avg_logprob": -0.09744378924369812, "compression_ratio": 1.5545023696682465, "no_speech_prob": 4.784692919201916e-06}, {"id": 760, "seek": 370124, "start": 3717.72, "end": 3721.3599999999997, "text": " So the next notebook we're going to be looking at is this one called Collaborative Filtering", "tokens": [407, 264, 958, 21060, 321, 434, 516, 281, 312, 1237, 412, 307, 341, 472, 1219, 44483, 1166, 7905, 34200], "temperature": 0.0, "avg_logprob": -0.09744378924369812, "compression_ratio": 1.5545023696682465, "no_speech_prob": 4.784692919201916e-06}, {"id": 761, "seek": 370124, "start": 3721.3599999999997, "end": 3730.56, "text": " Deep Dive and this is going to cover our last of the four major application areas, collaborative", "tokens": [14895, 413, 488, 293, 341, 307, 516, 281, 2060, 527, 1036, 295, 264, 1451, 2563, 3861, 3179, 11, 16555], "temperature": 0.0, "avg_logprob": -0.09744378924369812, "compression_ratio": 1.5545023696682465, "no_speech_prob": 4.784692919201916e-06}, {"id": 762, "seek": 373056, "start": 3730.56, "end": 3735.6, "text": " filtering.", "tokens": [30822, 13], "temperature": 0.0, "avg_logprob": -0.12073362250077097, "compression_ratio": 1.6383928571428572, "no_speech_prob": 2.7957286874880083e-05}, {"id": 763, "seek": 373056, "start": 3735.6, "end": 3742.6, "text": " And this is actually the first time I'm going to be presenting a chapter of the book largely", "tokens": [400, 341, 307, 767, 264, 700, 565, 286, 478, 516, 281, 312, 15578, 257, 7187, 295, 264, 1446, 11611], "temperature": 0.0, "avg_logprob": -0.12073362250077097, "compression_ratio": 1.6383928571428572, "no_speech_prob": 2.7957286874880083e-05}, {"id": 764, "seek": 373056, "start": 3742.6, "end": 3748.08, "text": " without variation because this is one where I looked back at the chapter and I was like", "tokens": [1553, 12990, 570, 341, 307, 472, 689, 286, 2956, 646, 412, 264, 7187, 293, 286, 390, 411], "temperature": 0.0, "avg_logprob": -0.12073362250077097, "compression_ratio": 1.6383928571428572, "no_speech_prob": 2.7957286874880083e-05}, {"id": 765, "seek": 373056, "start": 3748.08, "end": 3754.72, "text": " oh I can't think of any way to improve this so I thought I'll just leave it as is.", "tokens": [1954, 286, 393, 380, 519, 295, 604, 636, 281, 3470, 341, 370, 286, 1194, 286, 603, 445, 1856, 309, 382, 307, 13], "temperature": 0.0, "avg_logprob": -0.12073362250077097, "compression_ratio": 1.6383928571428572, "no_speech_prob": 2.7957286874880083e-05}, {"id": 766, "seek": 373056, "start": 3754.72, "end": 3759.2799999999997, "text": " But we have put the whole chapter up on Kaggle so that's for the way I'm going to be showing", "tokens": [583, 321, 362, 829, 264, 1379, 7187, 493, 322, 48751, 22631, 370, 300, 311, 337, 264, 636, 286, 478, 516, 281, 312, 4099], "temperature": 0.0, "avg_logprob": -0.12073362250077097, "compression_ratio": 1.6383928571428572, "no_speech_prob": 2.7957286874880083e-05}, {"id": 767, "seek": 375928, "start": 3759.28, "end": 3763.36, "text": " it to you.", "tokens": [309, 281, 291, 13], "temperature": 0.0, "avg_logprob": -0.15275746175687607, "compression_ratio": 1.575, "no_speech_prob": 9.366193808091339e-06}, {"id": 768, "seek": 375928, "start": 3763.36, "end": 3770.1200000000003, "text": " And so we're going to be looking at a data set called the Movie Lens data set which is", "tokens": [400, 370, 321, 434, 516, 281, 312, 1237, 412, 257, 1412, 992, 1219, 264, 28766, 441, 694, 1412, 992, 597, 307], "temperature": 0.0, "avg_logprob": -0.15275746175687607, "compression_ratio": 1.575, "no_speech_prob": 9.366193808091339e-06}, {"id": 769, "seek": 375928, "start": 3770.1200000000003, "end": 3778.76, "text": " a data set of movie ratings and we're going to grab a smaller version of it, 100,000 record", "tokens": [257, 1412, 992, 295, 3169, 24603, 293, 321, 434, 516, 281, 4444, 257, 4356, 3037, 295, 309, 11, 2319, 11, 1360, 2136], "temperature": 0.0, "avg_logprob": -0.15275746175687607, "compression_ratio": 1.575, "no_speech_prob": 9.366193808091339e-06}, {"id": 770, "seek": 375928, "start": 3778.76, "end": 3787.52, "text": " version of it and it comes as a CSV file which we can read in.", "tokens": [3037, 295, 309, 293, 309, 1487, 382, 257, 48814, 3991, 597, 321, 393, 1401, 294, 13], "temperature": 0.0, "avg_logprob": -0.15275746175687607, "compression_ratio": 1.575, "no_speech_prob": 9.366193808091339e-06}, {"id": 771, "seek": 378752, "start": 3787.52, "end": 3790.12, "text": " It's not really a CSV file, it's a TSV file.", "tokens": [467, 311, 406, 534, 257, 48814, 3991, 11, 309, 311, 257, 37645, 53, 3991, 13], "temperature": 0.0, "avg_logprob": -0.1627914302951687, "compression_ratio": 1.540983606557377, "no_speech_prob": 9.664809113019146e-06}, {"id": 772, "seek": 378752, "start": 3790.12, "end": 3797.24, "text": " This here means a tab in Python.", "tokens": [639, 510, 1355, 257, 4421, 294, 15329, 13], "temperature": 0.0, "avg_logprob": -0.1627914302951687, "compression_ratio": 1.540983606557377, "no_speech_prob": 9.664809113019146e-06}, {"id": 773, "seek": 378752, "start": 3797.24, "end": 3800.84, "text": " These are the names of the columns.", "tokens": [1981, 366, 264, 5288, 295, 264, 13766, 13], "temperature": 0.0, "avg_logprob": -0.1627914302951687, "compression_ratio": 1.540983606557377, "no_speech_prob": 9.664809113019146e-06}, {"id": 774, "seek": 378752, "start": 3800.84, "end": 3801.84, "text": " So here's what it looks like.", "tokens": [407, 510, 311, 437, 309, 1542, 411, 13], "temperature": 0.0, "avg_logprob": -0.1627914302951687, "compression_ratio": 1.540983606557377, "no_speech_prob": 9.664809113019146e-06}, {"id": 775, "seek": 378752, "start": 3801.84, "end": 3805.24, "text": " It's got a user, a movie, a rating and a timestamp.", "tokens": [467, 311, 658, 257, 4195, 11, 257, 3169, 11, 257, 10990, 293, 257, 49108, 1215, 13], "temperature": 0.0, "avg_logprob": -0.1627914302951687, "compression_ratio": 1.540983606557377, "no_speech_prob": 9.664809113019146e-06}, {"id": 776, "seek": 378752, "start": 3805.24, "end": 3808.52, "text": " We're not going to use the timestamp at all.", "tokens": [492, 434, 406, 516, 281, 764, 264, 49108, 1215, 412, 439, 13], "temperature": 0.0, "avg_logprob": -0.1627914302951687, "compression_ratio": 1.540983606557377, "no_speech_prob": 9.664809113019146e-06}, {"id": 777, "seek": 378752, "start": 3808.52, "end": 3810.7599999999998, "text": " So basically three columns we care about.", "tokens": [407, 1936, 1045, 13766, 321, 1127, 466, 13], "temperature": 0.0, "avg_logprob": -0.1627914302951687, "compression_ratio": 1.540983606557377, "no_speech_prob": 9.664809113019146e-06}, {"id": 778, "seek": 381076, "start": 3810.76, "end": 3820.0400000000004, "text": " This is a user ID, so maybe 196 is Jeremy and maybe 186 is Rachel and 22 is John, I", "tokens": [639, 307, 257, 4195, 7348, 11, 370, 1310, 7998, 307, 17809, 293, 1310, 2443, 21, 307, 14246, 293, 5853, 307, 2619, 11, 286], "temperature": 0.0, "avg_logprob": -0.17289475720338146, "compression_ratio": 1.5603864734299517, "no_speech_prob": 3.7851509659958538e-06}, {"id": 779, "seek": 381076, "start": 3820.0400000000004, "end": 3821.2000000000003, "text": " don't know.", "tokens": [500, 380, 458, 13], "temperature": 0.0, "avg_logprob": -0.17289475720338146, "compression_ratio": 1.5603864734299517, "no_speech_prob": 3.7851509659958538e-06}, {"id": 780, "seek": 381076, "start": 3821.2000000000003, "end": 3827.5600000000004, "text": " Maybe this movie is Return of the Jedi and this one's Casablanca, this one's LA Confidential", "tokens": [2704, 341, 3169, 307, 24350, 295, 264, 21746, 293, 341, 472, 311, 16100, 455, 8658, 496, 11, 341, 472, 311, 9855, 11701, 1078, 831], "temperature": 0.0, "avg_logprob": -0.17289475720338146, "compression_ratio": 1.5603864734299517, "no_speech_prob": 3.7851509659958538e-06}, {"id": 781, "seek": 381076, "start": 3827.5600000000004, "end": 3832.6000000000004, "text": " and then this rating says how did Jeremy feel about Return of the Jedi, he gave it", "tokens": [293, 550, 341, 10990, 1619, 577, 630, 17809, 841, 466, 24350, 295, 264, 21746, 11, 415, 2729, 309], "temperature": 0.0, "avg_logprob": -0.17289475720338146, "compression_ratio": 1.5603864734299517, "no_speech_prob": 3.7851509659958538e-06}, {"id": 782, "seek": 381076, "start": 3832.6000000000004, "end": 3835.0200000000004, "text": " a 3 out of 5.", "tokens": [257, 805, 484, 295, 1025, 13], "temperature": 0.0, "avg_logprob": -0.17289475720338146, "compression_ratio": 1.5603864734299517, "no_speech_prob": 3.7851509659958538e-06}, {"id": 783, "seek": 381076, "start": 3835.0200000000004, "end": 3839.1000000000004, "text": " That's how we can read this data set.", "tokens": [663, 311, 577, 321, 393, 1401, 341, 1412, 992, 13], "temperature": 0.0, "avg_logprob": -0.17289475720338146, "compression_ratio": 1.5603864734299517, "no_speech_prob": 3.7851509659958538e-06}, {"id": 784, "seek": 383910, "start": 3839.1, "end": 3844.64, "text": " This kind of data is very common.", "tokens": [639, 733, 295, 1412, 307, 588, 2689, 13], "temperature": 0.0, "avg_logprob": -0.17710045237600067, "compression_ratio": 1.460093896713615, "no_speech_prob": 1.2606431482709013e-05}, {"id": 785, "seek": 383910, "start": 3844.64, "end": 3852.3399999999997, "text": " Anytime you've got a user and a product or service and you might not even have ratings,", "tokens": [39401, 291, 600, 658, 257, 4195, 293, 257, 1674, 420, 2643, 293, 291, 1062, 406, 754, 362, 24603, 11], "temperature": 0.0, "avg_logprob": -0.17710045237600067, "compression_ratio": 1.460093896713615, "no_speech_prob": 1.2606431482709013e-05}, {"id": 786, "seek": 383910, "start": 3852.3399999999997, "end": 3856.12, "text": " maybe just the fact that they bought that product, you could have a similar table with", "tokens": [1310, 445, 264, 1186, 300, 436, 4243, 300, 1674, 11, 291, 727, 362, 257, 2531, 3199, 365], "temperature": 0.0, "avg_logprob": -0.17710045237600067, "compression_ratio": 1.460093896713615, "no_speech_prob": 1.2606431482709013e-05}, {"id": 787, "seek": 383910, "start": 3856.12, "end": 3860.2, "text": " zeros and ones.", "tokens": [35193, 293, 2306, 13], "temperature": 0.0, "avg_logprob": -0.17710045237600067, "compression_ratio": 1.460093896713615, "no_speech_prob": 1.2606431482709013e-05}, {"id": 788, "seek": 383910, "start": 3860.2, "end": 3867.72, "text": " So for example, Radik who's in the audience here is now at NVIDIA doing basically just", "tokens": [407, 337, 1365, 11, 9654, 1035, 567, 311, 294, 264, 4034, 510, 307, 586, 412, 426, 3958, 6914, 884, 1936, 445], "temperature": 0.0, "avg_logprob": -0.17710045237600067, "compression_ratio": 1.460093896713615, "no_speech_prob": 1.2606431482709013e-05}, {"id": 789, "seek": 386772, "start": 3867.72, "end": 3871.48, "text": " this right, recommendation systems.", "tokens": [341, 558, 11, 11879, 3652, 13], "temperature": 0.0, "avg_logprob": -0.1783872479977815, "compression_ratio": 1.5833333333333333, "no_speech_prob": 1.3417962691164576e-05}, {"id": 790, "seek": 386772, "start": 3871.48, "end": 3874.52, "text": " It's a huge industry.", "tokens": [467, 311, 257, 2603, 3518, 13], "temperature": 0.0, "avg_logprob": -0.1783872479977815, "compression_ratio": 1.5833333333333333, "no_speech_prob": 1.3417962691164576e-05}, {"id": 791, "seek": 386772, "start": 3874.52, "end": 3882.56, "text": " So what we're learning today is a really key foundation of it.", "tokens": [407, 437, 321, 434, 2539, 965, 307, 257, 534, 2141, 7030, 295, 309, 13], "temperature": 0.0, "avg_logprob": -0.1783872479977815, "compression_ratio": 1.5833333333333333, "no_speech_prob": 1.3417962691164576e-05}, {"id": 792, "seek": 386772, "start": 3882.56, "end": 3884.0, "text": " So these are the first heroes.", "tokens": [407, 613, 366, 264, 700, 12332, 13], "temperature": 0.0, "avg_logprob": -0.1783872479977815, "compression_ratio": 1.5833333333333333, "no_speech_prob": 1.3417962691164576e-05}, {"id": 793, "seek": 386772, "start": 3884.0, "end": 3885.56, "text": " This is not a particularly great way to see it.", "tokens": [639, 307, 406, 257, 4098, 869, 636, 281, 536, 309, 13], "temperature": 0.0, "avg_logprob": -0.1783872479977815, "compression_ratio": 1.5833333333333333, "no_speech_prob": 1.3417962691164576e-05}, {"id": 794, "seek": 386772, "start": 3885.56, "end": 3889.2799999999997, "text": " I prefer to cross tabulate it like this.", "tokens": [286, 4382, 281, 3278, 4421, 5256, 309, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.1783872479977815, "compression_ratio": 1.5833333333333333, "no_speech_prob": 1.3417962691164576e-05}, {"id": 795, "seek": 386772, "start": 3889.2799999999997, "end": 3891.04, "text": " This is the same information.", "tokens": [639, 307, 264, 912, 1589, 13], "temperature": 0.0, "avg_logprob": -0.1783872479977815, "compression_ratio": 1.5833333333333333, "no_speech_prob": 1.3417962691164576e-05}, {"id": 796, "seek": 386772, "start": 3891.04, "end": 3897.2799999999997, "text": " So for each movie, for each user, here's the rating.", "tokens": [407, 337, 1184, 3169, 11, 337, 1184, 4195, 11, 510, 311, 264, 10990, 13], "temperature": 0.0, "avg_logprob": -0.1783872479977815, "compression_ratio": 1.5833333333333333, "no_speech_prob": 1.3417962691164576e-05}, {"id": 797, "seek": 389728, "start": 3897.28, "end": 3901.28, "text": " So user 212 never watched movie 49.", "tokens": [407, 4195, 568, 4762, 1128, 6337, 3169, 16513, 13], "temperature": 0.0, "avg_logprob": -0.15044700304667155, "compression_ratio": 1.463855421686747, "no_speech_prob": 4.0687995351618156e-05}, {"id": 798, "seek": 389728, "start": 3901.28, "end": 3912.26, "text": " Now if you're wondering why there's so few empty cells here, I actually grabbed the most", "tokens": [823, 498, 291, 434, 6359, 983, 456, 311, 370, 1326, 6707, 5438, 510, 11, 286, 767, 18607, 264, 881], "temperature": 0.0, "avg_logprob": -0.15044700304667155, "compression_ratio": 1.463855421686747, "no_speech_prob": 4.0687995351618156e-05}, {"id": 799, "seek": 389728, "start": 3912.26, "end": 3919.44, "text": " watched movies and the most movie watching users for this particular sample matrix.", "tokens": [6337, 6233, 293, 264, 881, 3169, 1976, 5022, 337, 341, 1729, 6889, 8141, 13], "temperature": 0.0, "avg_logprob": -0.15044700304667155, "compression_ratio": 1.463855421686747, "no_speech_prob": 4.0687995351618156e-05}, {"id": 800, "seek": 389728, "start": 3919.44, "end": 3922.88, "text": " That's why it's particularly full.", "tokens": [663, 311, 983, 309, 311, 4098, 1577, 13], "temperature": 0.0, "avg_logprob": -0.15044700304667155, "compression_ratio": 1.463855421686747, "no_speech_prob": 4.0687995351618156e-05}, {"id": 801, "seek": 392288, "start": 3922.88, "end": 3927.48, "text": " So this is what kind of a collaborative filtering data set looks like when we cross tabulate", "tokens": [407, 341, 307, 437, 733, 295, 257, 16555, 30822, 1412, 992, 1542, 411, 562, 321, 3278, 4421, 5256], "temperature": 0.0, "avg_logprob": -0.16970211185821116, "compression_ratio": 1.4293785310734464, "no_speech_prob": 9.817612408369314e-06}, {"id": 802, "seek": 392288, "start": 3927.48, "end": 3931.1600000000003, "text": " it.", "tokens": [309, 13], "temperature": 0.0, "avg_logprob": -0.16970211185821116, "compression_ratio": 1.4293785310734464, "no_speech_prob": 9.817612408369314e-06}, {"id": 803, "seek": 392288, "start": 3931.1600000000003, "end": 3936.26, "text": " So how do we fill in this gap?", "tokens": [407, 577, 360, 321, 2836, 294, 341, 7417, 30], "temperature": 0.0, "avg_logprob": -0.16970211185821116, "compression_ratio": 1.4293785310734464, "no_speech_prob": 9.817612408369314e-06}, {"id": 804, "seek": 392288, "start": 3936.26, "end": 3943.12, "text": " So maybe user 212 is Nick and movie 49, what's a movie you haven't seen Nick and you'd quite", "tokens": [407, 1310, 4195, 568, 4762, 307, 9449, 293, 3169, 16513, 11, 437, 311, 257, 3169, 291, 2378, 380, 1612, 9449, 293, 291, 1116, 1596], "temperature": 0.0, "avg_logprob": -0.16970211185821116, "compression_ratio": 1.4293785310734464, "no_speech_prob": 9.817612408369314e-06}, {"id": 805, "seek": 392288, "start": 3943.12, "end": 3947.54, "text": " like to maybe not sure about it?", "tokens": [411, 281, 1310, 406, 988, 466, 309, 30], "temperature": 0.0, "avg_logprob": -0.16970211185821116, "compression_ratio": 1.4293785310734464, "no_speech_prob": 9.817612408369314e-06}, {"id": 806, "seek": 394754, "start": 3947.54, "end": 3953.6, "text": " The New Elvis movie, Baz Luhrmann, good choice, Australian director, filmed in Queensland.", "tokens": [440, 1873, 39944, 3169, 11, 42220, 5047, 1703, 14912, 11, 665, 3922, 11, 13337, 5391, 11, 15133, 294, 36913, 13], "temperature": 0.0, "avg_logprob": -0.1998485466102501, "compression_ratio": 1.3903743315508021, "no_speech_prob": 4.637697202269919e-06}, {"id": 807, "seek": 394754, "start": 3953.6, "end": 3954.6, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.1998485466102501, "compression_ratio": 1.3903743315508021, "no_speech_prob": 4.637697202269919e-06}, {"id": 808, "seek": 394754, "start": 3954.6, "end": 3955.6, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.1998485466102501, "compression_ratio": 1.3903743315508021, "no_speech_prob": 4.637697202269919e-06}, {"id": 809, "seek": 394754, "start": 3955.6, "end": 3958.32, "text": " So that's movie number 49.", "tokens": [407, 300, 311, 3169, 1230, 16513, 13], "temperature": 0.0, "avg_logprob": -0.1998485466102501, "compression_ratio": 1.3903743315508021, "no_speech_prob": 4.637697202269919e-06}, {"id": 810, "seek": 394754, "start": 3958.32, "end": 3962.2, "text": " So is Nick going to like the New Elvis movie?", "tokens": [407, 307, 9449, 516, 281, 411, 264, 1873, 39944, 3169, 30], "temperature": 0.0, "avg_logprob": -0.1998485466102501, "compression_ratio": 1.3903743315508021, "no_speech_prob": 4.637697202269919e-06}, {"id": 811, "seek": 394754, "start": 3962.2, "end": 3975.96, "text": " Well to figure this out, what we could do, ideally we'd like to know for each movie,", "tokens": [1042, 281, 2573, 341, 484, 11, 437, 321, 727, 360, 11, 22915, 321, 1116, 411, 281, 458, 337, 1184, 3169, 11], "temperature": 0.0, "avg_logprob": -0.1998485466102501, "compression_ratio": 1.3903743315508021, "no_speech_prob": 4.637697202269919e-06}, {"id": 812, "seek": 397596, "start": 3975.96, "end": 3978.12, "text": " what kind of movie is it?", "tokens": [437, 733, 295, 3169, 307, 309, 30], "temperature": 0.0, "avg_logprob": -0.1911513408025106, "compression_ratio": 1.5598290598290598, "no_speech_prob": 3.450029544183053e-05}, {"id": 813, "seek": 397596, "start": 3978.12, "end": 3979.44, "text": " What are the kind of features of it?", "tokens": [708, 366, 264, 733, 295, 4122, 295, 309, 30], "temperature": 0.0, "avg_logprob": -0.1911513408025106, "compression_ratio": 1.5598290598290598, "no_speech_prob": 3.450029544183053e-05}, {"id": 814, "seek": 397596, "start": 3979.44, "end": 3987.28, "text": " Is it like actiony, science fictiony, dialogue driven, critical acclaimed?", "tokens": [1119, 309, 411, 3069, 88, 11, 3497, 13266, 88, 11, 10221, 9555, 11, 4924, 1317, 22642, 30], "temperature": 0.0, "avg_logprob": -0.1911513408025106, "compression_ratio": 1.5598290598290598, "no_speech_prob": 3.450029544183053e-05}, {"id": 815, "seek": 397596, "start": 3987.28, "end": 3992.36, "text": " So let's say for example, we were trying to look at The Last Skywalker, maybe that was", "tokens": [407, 718, 311, 584, 337, 1365, 11, 321, 645, 1382, 281, 574, 412, 440, 5264, 49220, 11, 1310, 300, 390], "temperature": 0.0, "avg_logprob": -0.1911513408025106, "compression_ratio": 1.5598290598290598, "no_speech_prob": 3.450029544183053e-05}, {"id": 816, "seek": 397596, "start": 3992.36, "end": 3995.32, "text": " the movie that Nick's wondering about watching.", "tokens": [264, 3169, 300, 9449, 311, 6359, 466, 1976, 13], "temperature": 0.0, "avg_logprob": -0.1911513408025106, "compression_ratio": 1.5598290598290598, "no_speech_prob": 3.450029544183053e-05}, {"id": 817, "seek": 397596, "start": 3995.32, "end": 4003.92, "text": " And so if we had three categories being science fiction, action, or classic old movies, we'd", "tokens": [400, 370, 498, 321, 632, 1045, 10479, 885, 3497, 13266, 11, 3069, 11, 420, 7230, 1331, 6233, 11, 321, 1116], "temperature": 0.0, "avg_logprob": -0.1911513408025106, "compression_ratio": 1.5598290598290598, "no_speech_prob": 3.450029544183053e-05}, {"id": 818, "seek": 400392, "start": 4003.92, "end": 4007.12, "text": " say The Last Skywalker is very science fiction.", "tokens": [584, 440, 5264, 49220, 307, 588, 3497, 13266, 13], "temperature": 0.0, "avg_logprob": -0.17142562639145625, "compression_ratio": 1.6018957345971565, "no_speech_prob": 2.752919499471318e-05}, {"id": 819, "seek": 400392, "start": 4007.12, "end": 4010.6, "text": " Let's see this is from like negative one to one.", "tokens": [961, 311, 536, 341, 307, 490, 411, 3671, 472, 281, 472, 13], "temperature": 0.0, "avg_logprob": -0.17142562639145625, "compression_ratio": 1.6018957345971565, "no_speech_prob": 2.752919499471318e-05}, {"id": 820, "seek": 400392, "start": 4010.6, "end": 4018.94, "text": " Pretty action, definitely not an old classic, or at least not yet.", "tokens": [10693, 3069, 11, 2138, 406, 364, 1331, 7230, 11, 420, 412, 1935, 406, 1939, 13], "temperature": 0.0, "avg_logprob": -0.17142562639145625, "compression_ratio": 1.6018957345971565, "no_speech_prob": 2.752919499471318e-05}, {"id": 821, "seek": 400392, "start": 4018.94, "end": 4025.48, "text": " And so then maybe we then could say like, okay, well maybe like Nick's tastes in movies", "tokens": [400, 370, 550, 1310, 321, 550, 727, 584, 411, 11, 1392, 11, 731, 1310, 411, 9449, 311, 8666, 294, 6233], "temperature": 0.0, "avg_logprob": -0.17142562639145625, "compression_ratio": 1.6018957345971565, "no_speech_prob": 2.752919499471318e-05}, {"id": 822, "seek": 400392, "start": 4025.48, "end": 4031.62, "text": " are that he really likes science fiction, quite likes action movies and doesn't really", "tokens": [366, 300, 415, 534, 5902, 3497, 13266, 11, 1596, 5902, 3069, 6233, 293, 1177, 380, 534], "temperature": 0.0, "avg_logprob": -0.17142562639145625, "compression_ratio": 1.6018957345971565, "no_speech_prob": 2.752919499471318e-05}, {"id": 823, "seek": 403162, "start": 4031.62, "end": 4034.0, "text": " like old classics, right?", "tokens": [411, 1331, 36110, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.18761961800711496, "compression_ratio": 1.76890756302521, "no_speech_prob": 4.860316948906984e-06}, {"id": 824, "seek": 403162, "start": 4034.0, "end": 4039.68, "text": " So then we could kind of like match these up to see how much we think this user might", "tokens": [407, 550, 321, 727, 733, 295, 411, 2995, 613, 493, 281, 536, 577, 709, 321, 519, 341, 4195, 1062], "temperature": 0.0, "avg_logprob": -0.18761961800711496, "compression_ratio": 1.76890756302521, "no_speech_prob": 4.860316948906984e-06}, {"id": 825, "seek": 403162, "start": 4039.68, "end": 4042.92, "text": " like this movie.", "tokens": [411, 341, 3169, 13], "temperature": 0.0, "avg_logprob": -0.18761961800711496, "compression_ratio": 1.76890756302521, "no_speech_prob": 4.860316948906984e-06}, {"id": 826, "seek": 403162, "start": 4042.92, "end": 4049.68, "text": " To calculate the match, we could just multiply the corresponding values, use a one times", "tokens": [1407, 8873, 264, 2995, 11, 321, 727, 445, 12972, 264, 11760, 4190, 11, 764, 257, 472, 1413], "temperature": 0.0, "avg_logprob": -0.18761961800711496, "compression_ratio": 1.76890756302521, "no_speech_prob": 4.860316948906984e-06}, {"id": 827, "seek": 403162, "start": 4049.68, "end": 4052.24, "text": " Last Skywalker and add them up.", "tokens": [5264, 49220, 293, 909, 552, 493, 13], "temperature": 0.0, "avg_logprob": -0.18761961800711496, "compression_ratio": 1.76890756302521, "no_speech_prob": 4.860316948906984e-06}, {"id": 828, "seek": 403162, "start": 4052.24, "end": 4055.7599999999998, "text": " Point nine times point nine eight plus point eight times point nine plus negative point", "tokens": [12387, 4949, 1413, 935, 4949, 3180, 1804, 935, 3180, 1413, 935, 4949, 1804, 3671, 935], "temperature": 0.0, "avg_logprob": -0.18761961800711496, "compression_ratio": 1.76890756302521, "no_speech_prob": 4.860316948906984e-06}, {"id": 829, "seek": 403162, "start": 4055.7599999999998, "end": 4057.7, "text": " six times negative point nine.", "tokens": [2309, 1413, 3671, 935, 4949, 13], "temperature": 0.0, "avg_logprob": -0.18761961800711496, "compression_ratio": 1.76890756302521, "no_speech_prob": 4.860316948906984e-06}, {"id": 830, "seek": 403162, "start": 4057.7, "end": 4059.92, "text": " That's going to give us a pretty high number, right?", "tokens": [663, 311, 516, 281, 976, 505, 257, 1238, 1090, 1230, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.18761961800711496, "compression_ratio": 1.76890756302521, "no_speech_prob": 4.860316948906984e-06}, {"id": 831, "seek": 405992, "start": 4059.92, "end": 4062.4, "text": " With a maximum of three.", "tokens": [2022, 257, 6674, 295, 1045, 13], "temperature": 0.0, "avg_logprob": -0.1266641616821289, "compression_ratio": 1.529126213592233, "no_speech_prob": 6.643102551606717e-06}, {"id": 832, "seek": 405992, "start": 4062.4, "end": 4067.28, "text": " So that would suggest Nick probably would like The Last Skywalker.", "tokens": [407, 300, 576, 3402, 9449, 1391, 576, 411, 440, 5264, 49220, 13], "temperature": 0.0, "avg_logprob": -0.1266641616821289, "compression_ratio": 1.529126213592233, "no_speech_prob": 6.643102551606717e-06}, {"id": 833, "seek": 405992, "start": 4067.28, "end": 4075.96, "text": " On the other hand, the movie Casablanca, we would say definitely not very science fiction,", "tokens": [1282, 264, 661, 1011, 11, 264, 3169, 16100, 455, 8658, 496, 11, 321, 576, 584, 2138, 406, 588, 3497, 13266, 11], "temperature": 0.0, "avg_logprob": -0.1266641616821289, "compression_ratio": 1.529126213592233, "no_speech_prob": 6.643102551606717e-06}, {"id": 834, "seek": 405992, "start": 4075.96, "end": 4079.32, "text": " not really very action, definitely very old classic.", "tokens": [406, 534, 588, 3069, 11, 2138, 588, 1331, 7230, 13], "temperature": 0.0, "avg_logprob": -0.1266641616821289, "compression_ratio": 1.529126213592233, "no_speech_prob": 6.643102551606717e-06}, {"id": 835, "seek": 405992, "start": 4079.32, "end": 4087.2400000000002, "text": " So then we'd do exactly the same calculation and get this negative result here.", "tokens": [407, 550, 321, 1116, 360, 2293, 264, 912, 17108, 293, 483, 341, 3671, 1874, 510, 13], "temperature": 0.0, "avg_logprob": -0.1266641616821289, "compression_ratio": 1.529126213592233, "no_speech_prob": 6.643102551606717e-06}, {"id": 836, "seek": 408724, "start": 4087.24, "end": 4090.16, "text": " So you probably wouldn't like Casablanca.", "tokens": [407, 291, 1391, 2759, 380, 411, 16100, 455, 8658, 496, 13], "temperature": 0.0, "avg_logprob": -0.09068336734524021, "compression_ratio": 1.517766497461929, "no_speech_prob": 8.795951544016134e-06}, {"id": 837, "seek": 408724, "start": 4090.16, "end": 4096.2, "text": " This thing here, when we multiply the corresponding parts of a vector together and add them up", "tokens": [639, 551, 510, 11, 562, 321, 12972, 264, 11760, 3166, 295, 257, 8062, 1214, 293, 909, 552, 493], "temperature": 0.0, "avg_logprob": -0.09068336734524021, "compression_ratio": 1.517766497461929, "no_speech_prob": 8.795951544016134e-06}, {"id": 838, "seek": 408724, "start": 4096.2, "end": 4099.179999999999, "text": " is called a dot product in math.", "tokens": [307, 1219, 257, 5893, 1674, 294, 5221, 13], "temperature": 0.0, "avg_logprob": -0.09068336734524021, "compression_ratio": 1.517766497461929, "no_speech_prob": 8.795951544016134e-06}, {"id": 839, "seek": 408724, "start": 4099.179999999999, "end": 4107.28, "text": " So this is the dot product of the user's preferences and the type of movie.", "tokens": [407, 341, 307, 264, 5893, 1674, 295, 264, 4195, 311, 21910, 293, 264, 2010, 295, 3169, 13], "temperature": 0.0, "avg_logprob": -0.09068336734524021, "compression_ratio": 1.517766497461929, "no_speech_prob": 8.795951544016134e-06}, {"id": 840, "seek": 408724, "start": 4107.28, "end": 4112.2, "text": " Now the problem is we weren't given that information.", "tokens": [823, 264, 1154, 307, 321, 4999, 380, 2212, 300, 1589, 13], "temperature": 0.0, "avg_logprob": -0.09068336734524021, "compression_ratio": 1.517766497461929, "no_speech_prob": 8.795951544016134e-06}, {"id": 841, "seek": 411220, "start": 4112.2, "end": 4117.4, "text": " We know nothing about these users or about the movies.", "tokens": [492, 458, 1825, 466, 613, 5022, 420, 466, 264, 6233, 13], "temperature": 0.0, "avg_logprob": -0.08757651646931966, "compression_ratio": 1.8159203980099503, "no_speech_prob": 2.1779931557830423e-05}, {"id": 842, "seek": 411220, "start": 4117.4, "end": 4120.5199999999995, "text": " So what are we going to do?", "tokens": [407, 437, 366, 321, 516, 281, 360, 30], "temperature": 0.0, "avg_logprob": -0.08757651646931966, "compression_ratio": 1.8159203980099503, "no_speech_prob": 2.1779931557830423e-05}, {"id": 843, "seek": 411220, "start": 4120.5199999999995, "end": 4127.88, "text": " We want to try to create these factors without knowing ahead of time what they are.", "tokens": [492, 528, 281, 853, 281, 1884, 613, 6771, 1553, 5276, 2286, 295, 565, 437, 436, 366, 13], "temperature": 0.0, "avg_logprob": -0.08757651646931966, "compression_ratio": 1.8159203980099503, "no_speech_prob": 2.1779931557830423e-05}, {"id": 844, "seek": 411220, "start": 4127.88, "end": 4129.72, "text": " We wouldn't even know what factors to create.", "tokens": [492, 2759, 380, 754, 458, 437, 6771, 281, 1884, 13], "temperature": 0.0, "avg_logprob": -0.08757651646931966, "compression_ratio": 1.8159203980099503, "no_speech_prob": 2.1779931557830423e-05}, {"id": 845, "seek": 411220, "start": 4129.72, "end": 4135.96, "text": " What are the things that really matters when people decide what movies they want to watch?", "tokens": [708, 366, 264, 721, 300, 534, 7001, 562, 561, 4536, 437, 6233, 436, 528, 281, 1159, 30], "temperature": 0.0, "avg_logprob": -0.08757651646931966, "compression_ratio": 1.8159203980099503, "no_speech_prob": 2.1779931557830423e-05}, {"id": 846, "seek": 411220, "start": 4135.96, "end": 4139.639999999999, "text": " What we can do is we can create things called latent factors.", "tokens": [708, 321, 393, 360, 307, 321, 393, 1884, 721, 1219, 48994, 6771, 13], "temperature": 0.0, "avg_logprob": -0.08757651646931966, "compression_ratio": 1.8159203980099503, "no_speech_prob": 2.1779931557830423e-05}, {"id": 847, "seek": 413964, "start": 4139.64, "end": 4145.68, "text": " Lantant factors is this weird idea that we can say, I don't know what things about movies", "tokens": [441, 394, 394, 6771, 307, 341, 3657, 1558, 300, 321, 393, 584, 11, 286, 500, 380, 458, 437, 721, 466, 6233], "temperature": 0.0, "avg_logprob": -0.09566758335500523, "compression_ratio": 1.422680412371134, "no_speech_prob": 4.710547727881931e-06}, {"id": 848, "seek": 413964, "start": 4145.68, "end": 4151.12, "text": " matter to people, but there's probably something.", "tokens": [1871, 281, 561, 11, 457, 456, 311, 1391, 746, 13], "temperature": 0.0, "avg_logprob": -0.09566758335500523, "compression_ratio": 1.422680412371134, "no_speech_prob": 4.710547727881931e-06}, {"id": 849, "seek": 413964, "start": 4151.12, "end": 4157.12, "text": " And let's just try using SGD to find them.", "tokens": [400, 718, 311, 445, 853, 1228, 34520, 35, 281, 915, 552, 13], "temperature": 0.0, "avg_logprob": -0.09566758335500523, "compression_ratio": 1.422680412371134, "no_speech_prob": 4.710547727881931e-06}, {"id": 850, "seek": 413964, "start": 4157.12, "end": 4167.96, "text": " And we can do it in everybody's favorite mathematical optimization software, Microsoft Excel.", "tokens": [400, 321, 393, 360, 309, 294, 2201, 311, 2954, 18894, 19618, 4722, 11, 8116, 19060, 13], "temperature": 0.0, "avg_logprob": -0.09566758335500523, "compression_ratio": 1.422680412371134, "no_speech_prob": 4.710547727881931e-06}, {"id": 851, "seek": 416796, "start": 4167.96, "end": 4175.68, "text": " So here is that table.", "tokens": [407, 510, 307, 300, 3199, 13], "temperature": 0.0, "avg_logprob": -0.15437612977138784, "compression_ratio": 1.7159763313609468, "no_speech_prob": 3.4462589155737078e-06}, {"id": 852, "seek": 416796, "start": 4175.68, "end": 4181.4800000000005, "text": " And what we can do, let's head over here actually, here's that table.", "tokens": [400, 437, 321, 393, 360, 11, 718, 311, 1378, 670, 510, 767, 11, 510, 311, 300, 3199, 13], "temperature": 0.0, "avg_logprob": -0.15437612977138784, "compression_ratio": 1.7159763313609468, "no_speech_prob": 3.4462589155737078e-06}, {"id": 853, "seek": 416796, "start": 4181.4800000000005, "end": 4188.76, "text": " So what we could do is we could say for each of those movies, so let's say for movie 27,", "tokens": [407, 437, 321, 727, 360, 307, 321, 727, 584, 337, 1184, 295, 729, 6233, 11, 370, 718, 311, 584, 337, 3169, 7634, 11], "temperature": 0.0, "avg_logprob": -0.15437612977138784, "compression_ratio": 1.7159763313609468, "no_speech_prob": 3.4462589155737078e-06}, {"id": 854, "seek": 416796, "start": 4188.76, "end": 4192.72, "text": " let's assume there are five latent factors.", "tokens": [718, 311, 6552, 456, 366, 1732, 48994, 6771, 13], "temperature": 0.0, "avg_logprob": -0.15437612977138784, "compression_ratio": 1.7159763313609468, "no_speech_prob": 3.4462589155737078e-06}, {"id": 855, "seek": 416796, "start": 4192.72, "end": 4194.56, "text": " I don't know what they're for.", "tokens": [286, 500, 380, 458, 437, 436, 434, 337, 13], "temperature": 0.0, "avg_logprob": -0.15437612977138784, "compression_ratio": 1.7159763313609468, "no_speech_prob": 3.4462589155737078e-06}, {"id": 856, "seek": 416796, "start": 4194.56, "end": 4197.6, "text": " They're just five latent factors.", "tokens": [814, 434, 445, 1732, 48994, 6771, 13], "temperature": 0.0, "avg_logprob": -0.15437612977138784, "compression_ratio": 1.7159763313609468, "no_speech_prob": 3.4462589155737078e-06}, {"id": 857, "seek": 419760, "start": 4197.6, "end": 4200.120000000001, "text": " We'll figure them out later.", "tokens": [492, 603, 2573, 552, 484, 1780, 13], "temperature": 0.0, "avg_logprob": -0.1248586074165676, "compression_ratio": 1.8868778280542986, "no_speech_prob": 1.1125242053822149e-05}, {"id": 858, "seek": 419760, "start": 4200.120000000001, "end": 4204.200000000001, "text": " And for now, I certainly don't know what the value of those five latent factors for movie", "tokens": [400, 337, 586, 11, 286, 3297, 500, 380, 458, 437, 264, 2158, 295, 729, 1732, 48994, 6771, 337, 3169], "temperature": 0.0, "avg_logprob": -0.1248586074165676, "compression_ratio": 1.8868778280542986, "no_speech_prob": 1.1125242053822149e-05}, {"id": 859, "seek": 419760, "start": 4204.200000000001, "end": 4205.320000000001, "text": " 27.", "tokens": [7634, 13], "temperature": 0.0, "avg_logprob": -0.1248586074165676, "compression_ratio": 1.8868778280542986, "no_speech_prob": 1.1125242053822149e-05}, {"id": 860, "seek": 419760, "start": 4205.320000000001, "end": 4211.52, "text": " So we're going to just chuck a little random numbers in them.", "tokens": [407, 321, 434, 516, 281, 445, 20870, 257, 707, 4974, 3547, 294, 552, 13], "temperature": 0.0, "avg_logprob": -0.1248586074165676, "compression_ratio": 1.8868778280542986, "no_speech_prob": 1.1125242053822149e-05}, {"id": 861, "seek": 419760, "start": 4211.52, "end": 4214.0, "text": " And we're going to do the same thing for movie 49.", "tokens": [400, 321, 434, 516, 281, 360, 264, 912, 551, 337, 3169, 16513, 13], "temperature": 0.0, "avg_logprob": -0.1248586074165676, "compression_ratio": 1.8868778280542986, "no_speech_prob": 1.1125242053822149e-05}, {"id": 862, "seek": 419760, "start": 4214.0, "end": 4215.8, "text": " Pick another five random numbers.", "tokens": [14129, 1071, 1732, 4974, 3547, 13], "temperature": 0.0, "avg_logprob": -0.1248586074165676, "compression_ratio": 1.8868778280542986, "no_speech_prob": 1.1125242053822149e-05}, {"id": 863, "seek": 419760, "start": 4215.8, "end": 4218.400000000001, "text": " And the same thing for movie 57.", "tokens": [400, 264, 912, 551, 337, 3169, 21423, 13], "temperature": 0.0, "avg_logprob": -0.1248586074165676, "compression_ratio": 1.8868778280542986, "no_speech_prob": 1.1125242053822149e-05}, {"id": 864, "seek": 419760, "start": 4218.400000000001, "end": 4219.96, "text": " Pick another five numbers.", "tokens": [14129, 1071, 1732, 3547, 13], "temperature": 0.0, "avg_logprob": -0.1248586074165676, "compression_ratio": 1.8868778280542986, "no_speech_prob": 1.1125242053822149e-05}, {"id": 865, "seek": 419760, "start": 4219.96, "end": 4224.88, "text": " And you might not be surprised to hear, we're going to do the same thing for each user.", "tokens": [400, 291, 1062, 406, 312, 6100, 281, 1568, 11, 321, 434, 516, 281, 360, 264, 912, 551, 337, 1184, 4195, 13], "temperature": 0.0, "avg_logprob": -0.1248586074165676, "compression_ratio": 1.8868778280542986, "no_speech_prob": 1.1125242053822149e-05}, {"id": 866, "seek": 422488, "start": 4224.88, "end": 4229.32, "text": " So for user 14, we're going to pick five random numbers for them.", "tokens": [407, 337, 4195, 3499, 11, 321, 434, 516, 281, 1888, 1732, 4974, 3547, 337, 552, 13], "temperature": 0.0, "avg_logprob": -0.12525827338896603, "compression_ratio": 1.6111111111111112, "no_speech_prob": 1.482315042267146e-06}, {"id": 867, "seek": 422488, "start": 4229.32, "end": 4232.54, "text": " And for user 29, we'll pick five random numbers for them.", "tokens": [400, 337, 4195, 9413, 11, 321, 603, 1888, 1732, 4974, 3547, 337, 552, 13], "temperature": 0.0, "avg_logprob": -0.12525827338896603, "compression_ratio": 1.6111111111111112, "no_speech_prob": 1.482315042267146e-06}, {"id": 868, "seek": 422488, "start": 4232.54, "end": 4239.4800000000005, "text": " And so the idea is that this number here, 0.19, is saying if it was true that user ID", "tokens": [400, 370, 264, 1558, 307, 300, 341, 1230, 510, 11, 1958, 13, 3405, 11, 307, 1566, 498, 309, 390, 2074, 300, 4195, 7348], "temperature": 0.0, "avg_logprob": -0.12525827338896603, "compression_ratio": 1.6111111111111112, "no_speech_prob": 1.482315042267146e-06}, {"id": 869, "seek": 422488, "start": 4239.4800000000005, "end": 4249.9800000000005, "text": " 14 feels not very strongly about the fact that for movie 27 has a value of 0.71.", "tokens": [3499, 3417, 406, 588, 10613, 466, 264, 1186, 300, 337, 3169, 7634, 575, 257, 2158, 295, 1958, 13, 29985, 13], "temperature": 0.0, "avg_logprob": -0.12525827338896603, "compression_ratio": 1.6111111111111112, "no_speech_prob": 1.482315042267146e-06}, {"id": 870, "seek": 424998, "start": 4249.98, "end": 4255.719999999999, "text": " So therefore in here, we do the dot product.", "tokens": [407, 4412, 294, 510, 11, 321, 360, 264, 5893, 1674, 13], "temperature": 0.0, "avg_logprob": -0.1182790184020996, "compression_ratio": 1.6363636363636365, "no_speech_prob": 5.338019491318846e-06}, {"id": 871, "seek": 424998, "start": 4255.719999999999, "end": 4257.719999999999, "text": " The details of why don't matter too much.", "tokens": [440, 4365, 295, 983, 500, 380, 1871, 886, 709, 13], "temperature": 0.0, "avg_logprob": -0.1182790184020996, "compression_ratio": 1.6363636363636365, "no_speech_prob": 5.338019491318846e-06}, {"id": 872, "seek": 424998, "start": 4257.719999999999, "end": 4261.679999999999, "text": " But well, actually, you can figure this out from what we've said so far.", "tokens": [583, 731, 11, 767, 11, 291, 393, 2573, 341, 484, 490, 437, 321, 600, 848, 370, 1400, 13], "temperature": 0.0, "avg_logprob": -0.1182790184020996, "compression_ratio": 1.6363636363636365, "no_speech_prob": 5.338019491318846e-06}, {"id": 873, "seek": 424998, "start": 4261.679999999999, "end": 4269.04, "text": " If you go back to our definition of matrix product, you might notice that the matrix", "tokens": [759, 291, 352, 646, 281, 527, 7123, 295, 8141, 1674, 11, 291, 1062, 3449, 300, 264, 8141], "temperature": 0.0, "avg_logprob": -0.1182790184020996, "compression_ratio": 1.6363636363636365, "no_speech_prob": 5.338019491318846e-06}, {"id": 874, "seek": 424998, "start": 4269.04, "end": 4274.66, "text": " product of a row with a column is the same thing as a dot product.", "tokens": [1674, 295, 257, 5386, 365, 257, 7738, 307, 264, 912, 551, 382, 257, 5893, 1674, 13], "temperature": 0.0, "avg_logprob": -0.1182790184020996, "compression_ratio": 1.6363636363636365, "no_speech_prob": 5.338019491318846e-06}, {"id": 875, "seek": 424998, "start": 4274.66, "end": 4277.32, "text": " And so here in Excel, I have a row and a column.", "tokens": [400, 370, 510, 294, 19060, 11, 286, 362, 257, 5386, 293, 257, 7738, 13], "temperature": 0.0, "avg_logprob": -0.1182790184020996, "compression_ratio": 1.6363636363636365, "no_speech_prob": 5.338019491318846e-06}, {"id": 876, "seek": 427732, "start": 4277.32, "end": 4282.44, "text": " So therefore I say matrix multiply that by that, that gives us the dot product.", "tokens": [407, 4412, 286, 584, 8141, 12972, 300, 538, 300, 11, 300, 2709, 505, 264, 5893, 1674, 13], "temperature": 0.0, "avg_logprob": -0.11171073703975468, "compression_ratio": 1.7365591397849462, "no_speech_prob": 6.2407489167526364e-06}, {"id": 877, "seek": 427732, "start": 4282.44, "end": 4287.799999999999, "text": " So here's the dot product of that by that, or the matrix multiply, given that they're", "tokens": [407, 510, 311, 264, 5893, 1674, 295, 300, 538, 300, 11, 420, 264, 8141, 12972, 11, 2212, 300, 436, 434], "temperature": 0.0, "avg_logprob": -0.11171073703975468, "compression_ratio": 1.7365591397849462, "no_speech_prob": 6.2407489167526364e-06}, {"id": 878, "seek": 427732, "start": 4287.799999999999, "end": 4290.0, "text": " row and column.", "tokens": [5386, 293, 7738, 13], "temperature": 0.0, "avg_logprob": -0.11171073703975468, "compression_ratio": 1.7365591397849462, "no_speech_prob": 6.2407489167526364e-06}, {"id": 879, "seek": 427732, "start": 4290.0, "end": 4301.4, "text": " The only other slight quirk here is that if the actual rating is empty, I'm just going", "tokens": [440, 787, 661, 4036, 421, 18610, 510, 307, 300, 498, 264, 3539, 10990, 307, 6707, 11, 286, 478, 445, 516], "temperature": 0.0, "avg_logprob": -0.11171073703975468, "compression_ratio": 1.7365591397849462, "no_speech_prob": 6.2407489167526364e-06}, {"id": 880, "seek": 427732, "start": 4301.4, "end": 4302.4, "text": " to leave it blank.", "tokens": [281, 1856, 309, 8247, 13], "temperature": 0.0, "avg_logprob": -0.11171073703975468, "compression_ratio": 1.7365591397849462, "no_speech_prob": 6.2407489167526364e-06}, {"id": 881, "seek": 427732, "start": 4302.4, "end": 4306.599999999999, "text": " I'm going to set it to 0, actually.", "tokens": [286, 478, 516, 281, 992, 309, 281, 1958, 11, 767, 13], "temperature": 0.0, "avg_logprob": -0.11171073703975468, "compression_ratio": 1.7365591397849462, "no_speech_prob": 6.2407489167526364e-06}, {"id": 882, "seek": 430660, "start": 4306.6, "end": 4313.88, "text": " So here is everybody's predicted rating of movies.", "tokens": [407, 510, 307, 2201, 311, 19147, 10990, 295, 6233, 13], "temperature": 0.0, "avg_logprob": -0.13415817079089937, "compression_ratio": 1.6122448979591837, "no_speech_prob": 7.071808795444667e-06}, {"id": 883, "seek": 430660, "start": 4313.88, "end": 4315.240000000001, "text": " I say predicted.", "tokens": [286, 584, 19147, 13], "temperature": 0.0, "avg_logprob": -0.13415817079089937, "compression_ratio": 1.6122448979591837, "no_speech_prob": 7.071808795444667e-06}, {"id": 884, "seek": 430660, "start": 4315.240000000001, "end": 4319.68, "text": " Of course, these are currently random numbers, so they are terrible predictions.", "tokens": [2720, 1164, 11, 613, 366, 4362, 4974, 3547, 11, 370, 436, 366, 6237, 21264, 13], "temperature": 0.0, "avg_logprob": -0.13415817079089937, "compression_ratio": 1.6122448979591837, "no_speech_prob": 7.071808795444667e-06}, {"id": 885, "seek": 430660, "start": 4319.68, "end": 4324.200000000001, "text": " But when we have some way to predict things, and we start with terrible random predictions,", "tokens": [583, 562, 321, 362, 512, 636, 281, 6069, 721, 11, 293, 321, 722, 365, 6237, 4974, 21264, 11], "temperature": 0.0, "avg_logprob": -0.13415817079089937, "compression_ratio": 1.6122448979591837, "no_speech_prob": 7.071808795444667e-06}, {"id": 886, "seek": 430660, "start": 4324.200000000001, "end": 4326.8, "text": " we know how to make them better, don't we?", "tokens": [321, 458, 577, 281, 652, 552, 1101, 11, 500, 380, 321, 30], "temperature": 0.0, "avg_logprob": -0.13415817079089937, "compression_ratio": 1.6122448979591837, "no_speech_prob": 7.071808795444667e-06}, {"id": 887, "seek": 430660, "start": 4326.8, "end": 4328.240000000001, "text": " We use stochastic gradient descent.", "tokens": [492, 764, 342, 8997, 2750, 16235, 23475, 13], "temperature": 0.0, "avg_logprob": -0.13415817079089937, "compression_ratio": 1.6122448979591837, "no_speech_prob": 7.071808795444667e-06}, {"id": 888, "seek": 430660, "start": 4328.240000000001, "end": 4332.52, "text": " Now to do that, we're going to need a loss function.", "tokens": [823, 281, 360, 300, 11, 321, 434, 516, 281, 643, 257, 4470, 2445, 13], "temperature": 0.0, "avg_logprob": -0.13415817079089937, "compression_ratio": 1.6122448979591837, "no_speech_prob": 7.071808795444667e-06}, {"id": 889, "seek": 430660, "start": 4332.52, "end": 4335.1, "text": " So that's easy enough.", "tokens": [407, 300, 311, 1858, 1547, 13], "temperature": 0.0, "avg_logprob": -0.13415817079089937, "compression_ratio": 1.6122448979591837, "no_speech_prob": 7.071808795444667e-06}, {"id": 890, "seek": 433510, "start": 4335.1, "end": 4341.72, "text": " We can just calculate the sum of x minus y squared divided by the count.", "tokens": [492, 393, 445, 8873, 264, 2408, 295, 2031, 3175, 288, 8889, 6666, 538, 264, 1207, 13], "temperature": 0.0, "avg_logprob": -0.11519580647565317, "compression_ratio": 1.7161290322580645, "no_speech_prob": 1.0782595381897409e-05}, {"id": 891, "seek": 433510, "start": 4341.72, "end": 4344.52, "text": " That is the mean squared error.", "tokens": [663, 307, 264, 914, 8889, 6713, 13], "temperature": 0.0, "avg_logprob": -0.11519580647565317, "compression_ratio": 1.7161290322580645, "no_speech_prob": 1.0782595381897409e-05}, {"id": 892, "seek": 433510, "start": 4344.52, "end": 4347.4800000000005, "text": " And if we take the square root, that is the root mean squared error.", "tokens": [400, 498, 321, 747, 264, 3732, 5593, 11, 300, 307, 264, 5593, 914, 8889, 6713, 13], "temperature": 0.0, "avg_logprob": -0.11519580647565317, "compression_ratio": 1.7161290322580645, "no_speech_prob": 1.0782595381897409e-05}, {"id": 893, "seek": 433510, "start": 4347.4800000000005, "end": 4355.6, "text": " So here is the root mean squared error in Excel between these predictions and these", "tokens": [407, 510, 307, 264, 5593, 914, 8889, 6713, 294, 19060, 1296, 613, 21264, 293, 613], "temperature": 0.0, "avg_logprob": -0.11519580647565317, "compression_ratio": 1.7161290322580645, "no_speech_prob": 1.0782595381897409e-05}, {"id": 894, "seek": 433510, "start": 4355.6, "end": 4358.4800000000005, "text": " actuals.", "tokens": [3539, 82, 13], "temperature": 0.0, "avg_logprob": -0.11519580647565317, "compression_ratio": 1.7161290322580645, "no_speech_prob": 1.0782595381897409e-05}, {"id": 895, "seek": 435848, "start": 4358.48, "end": 4366.759999999999, "text": " And so now that we have a loss function, we can optimize it, data solver, set objective,", "tokens": [400, 370, 586, 300, 321, 362, 257, 4470, 2445, 11, 321, 393, 19719, 309, 11, 1412, 1404, 331, 11, 992, 10024, 11], "temperature": 0.0, "avg_logprob": -0.17828211291082974, "compression_ratio": 1.4316546762589928, "no_speech_prob": 1.2878875850219629e-06}, {"id": 896, "seek": 435848, "start": 4366.759999999999, "end": 4381.679999999999, "text": " this one here, by changing cells, these ones here and these ones here, solve.", "tokens": [341, 472, 510, 11, 538, 4473, 5438, 11, 613, 2306, 510, 293, 613, 2306, 510, 11, 5039, 13], "temperature": 0.0, "avg_logprob": -0.17828211291082974, "compression_ratio": 1.4316546762589928, "no_speech_prob": 1.2878875850219629e-06}, {"id": 897, "seek": 435848, "start": 4381.679999999999, "end": 4386.639999999999, "text": " And initially, our loss is 2.81.", "tokens": [400, 9105, 11, 527, 4470, 307, 568, 13, 32875, 13], "temperature": 0.0, "avg_logprob": -0.17828211291082974, "compression_ratio": 1.4316546762589928, "no_speech_prob": 1.2878875850219629e-06}, {"id": 898, "seek": 438664, "start": 4386.64, "end": 4389.08, "text": " So we hope it's going to go down.", "tokens": [407, 321, 1454, 309, 311, 516, 281, 352, 760, 13], "temperature": 0.0, "avg_logprob": -0.11463140404742697, "compression_ratio": 1.6254826254826256, "no_speech_prob": 7.182734861999052e-06}, {"id": 899, "seek": 438664, "start": 4389.08, "end": 4394.04, "text": " And as it solves, not a great choice of background color, but it says 0.68.", "tokens": [400, 382, 309, 39890, 11, 406, 257, 869, 3922, 295, 3678, 2017, 11, 457, 309, 1619, 1958, 13, 27102, 13], "temperature": 0.0, "avg_logprob": -0.11463140404742697, "compression_ratio": 1.6254826254826256, "no_speech_prob": 7.182734861999052e-06}, {"id": 900, "seek": 438664, "start": 4394.04, "end": 4395.72, "text": " So this number is going down.", "tokens": [407, 341, 1230, 307, 516, 760, 13], "temperature": 0.0, "avg_logprob": -0.11463140404742697, "compression_ratio": 1.6254826254826256, "no_speech_prob": 7.182734861999052e-06}, {"id": 901, "seek": 438664, "start": 4395.72, "end": 4402.6, "text": " So this is using, actually in Excel, it's not quite using stochastic gradient descent,", "tokens": [407, 341, 307, 1228, 11, 767, 294, 19060, 11, 309, 311, 406, 1596, 1228, 342, 8997, 2750, 16235, 23475, 11], "temperature": 0.0, "avg_logprob": -0.11463140404742697, "compression_ratio": 1.6254826254826256, "no_speech_prob": 7.182734861999052e-06}, {"id": 902, "seek": 438664, "start": 4402.6, "end": 4405.4400000000005, "text": " because Excel doesn't know how to calculate gradients.", "tokens": [570, 19060, 1177, 380, 458, 577, 281, 8873, 2771, 2448, 13], "temperature": 0.0, "avg_logprob": -0.11463140404742697, "compression_ratio": 1.6254826254826256, "no_speech_prob": 7.182734861999052e-06}, {"id": 903, "seek": 438664, "start": 4405.4400000000005, "end": 4408.660000000001, "text": " There are actually optimization techniques that don't need gradients.", "tokens": [821, 366, 767, 19618, 7512, 300, 500, 380, 643, 2771, 2448, 13], "temperature": 0.0, "avg_logprob": -0.11463140404742697, "compression_ratio": 1.6254826254826256, "no_speech_prob": 7.182734861999052e-06}, {"id": 904, "seek": 438664, "start": 4408.660000000001, "end": 4411.56, "text": " They calculate them numerically as they go.", "tokens": [814, 8873, 552, 7866, 984, 382, 436, 352, 13], "temperature": 0.0, "avg_logprob": -0.11463140404742697, "compression_ratio": 1.6254826254826256, "no_speech_prob": 7.182734861999052e-06}, {"id": 905, "seek": 438664, "start": 4411.56, "end": 4414.64, "text": " But that's a minor quirk.", "tokens": [583, 300, 311, 257, 6696, 421, 18610, 13], "temperature": 0.0, "avg_logprob": -0.11463140404742697, "compression_ratio": 1.6254826254826256, "no_speech_prob": 7.182734861999052e-06}, {"id": 906, "seek": 441464, "start": 4414.64, "end": 4419.0, "text": " One thing you'll notice is it's doing it very, very slowly.", "tokens": [1485, 551, 291, 603, 3449, 307, 309, 311, 884, 309, 588, 11, 588, 5692, 13], "temperature": 0.0, "avg_logprob": -0.14077965848080748, "compression_ratio": 1.5758928571428572, "no_speech_prob": 8.664437700645067e-06}, {"id": 907, "seek": 441464, "start": 4419.0, "end": 4421.240000000001, "text": " There's not much data here, and it's still going.", "tokens": [821, 311, 406, 709, 1412, 510, 11, 293, 309, 311, 920, 516, 13], "temperature": 0.0, "avg_logprob": -0.14077965848080748, "compression_ratio": 1.5758928571428572, "no_speech_prob": 8.664437700645067e-06}, {"id": 908, "seek": 441464, "start": 4421.240000000001, "end": 4427.360000000001, "text": " One reason for that is that because it's not using gradients, it's much slower.", "tokens": [1485, 1778, 337, 300, 307, 300, 570, 309, 311, 406, 1228, 2771, 2448, 11, 309, 311, 709, 14009, 13], "temperature": 0.0, "avg_logprob": -0.14077965848080748, "compression_ratio": 1.5758928571428572, "no_speech_prob": 8.664437700645067e-06}, {"id": 909, "seek": 441464, "start": 4427.360000000001, "end": 4431.0, "text": " And the second is Excel is much slower than PyTorch.", "tokens": [400, 264, 1150, 307, 19060, 307, 709, 14009, 813, 9953, 51, 284, 339, 13], "temperature": 0.0, "avg_logprob": -0.14077965848080748, "compression_ratio": 1.5758928571428572, "no_speech_prob": 8.664437700645067e-06}, {"id": 910, "seek": 441464, "start": 4431.0, "end": 4433.4400000000005, "text": " Anyway, it's come up with an answer.", "tokens": [5684, 11, 309, 311, 808, 493, 365, 364, 1867, 13], "temperature": 0.0, "avg_logprob": -0.14077965848080748, "compression_ratio": 1.5758928571428572, "no_speech_prob": 8.664437700645067e-06}, {"id": 911, "seek": 441464, "start": 4433.4400000000005, "end": 4434.700000000001, "text": " And look at that.", "tokens": [400, 574, 412, 300, 13], "temperature": 0.0, "avg_logprob": -0.14077965848080748, "compression_ratio": 1.5758928571428572, "no_speech_prob": 8.664437700645067e-06}, {"id": 912, "seek": 441464, "start": 4434.700000000001, "end": 4437.5, "text": " It's got to 0.42.", "tokens": [467, 311, 658, 281, 1958, 13, 15628, 13], "temperature": 0.0, "avg_logprob": -0.14077965848080748, "compression_ratio": 1.5758928571428572, "no_speech_prob": 8.664437700645067e-06}, {"id": 913, "seek": 441464, "start": 4437.5, "end": 4439.88, "text": " So it's got a pretty good prediction.", "tokens": [407, 309, 311, 658, 257, 1238, 665, 17630, 13], "temperature": 0.0, "avg_logprob": -0.14077965848080748, "compression_ratio": 1.5758928571428572, "no_speech_prob": 8.664437700645067e-06}, {"id": 914, "seek": 443988, "start": 4439.88, "end": 4454.16, "text": " And so we can kind of get a sense of this, for example, looking at the last three.", "tokens": [400, 370, 321, 393, 733, 295, 483, 257, 2020, 295, 341, 11, 337, 1365, 11, 1237, 412, 264, 1036, 1045, 13], "temperature": 0.0, "avg_logprob": -0.13637692900909776, "compression_ratio": 1.5602094240837696, "no_speech_prob": 1.9637238892755704e-06}, {"id": 915, "seek": 443988, "start": 4454.16, "end": 4458.12, "text": " User 14 likes, dislikes, likes.", "tokens": [32127, 3499, 5902, 11, 43186, 8916, 11, 5902, 13], "temperature": 0.0, "avg_logprob": -0.13637692900909776, "compression_ratio": 1.5602094240837696, "no_speech_prob": 1.9637238892755704e-06}, {"id": 916, "seek": 443988, "start": 4458.12, "end": 4460.28, "text": " Let's see somebody else like that.", "tokens": [961, 311, 536, 2618, 1646, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.13637692900909776, "compression_ratio": 1.5602094240837696, "no_speech_prob": 1.9637238892755704e-06}, {"id": 917, "seek": 443988, "start": 4460.28, "end": 4461.4800000000005, "text": " Here's somebody else.", "tokens": [1692, 311, 2618, 1646, 13], "temperature": 0.0, "avg_logprob": -0.13637692900909776, "compression_ratio": 1.5602094240837696, "no_speech_prob": 1.9637238892755704e-06}, {"id": 918, "seek": 443988, "start": 4461.4800000000005, "end": 4464.4400000000005, "text": " This person likes, dislikes, likes.", "tokens": [639, 954, 5902, 11, 43186, 8916, 11, 5902, 13], "temperature": 0.0, "avg_logprob": -0.13637692900909776, "compression_ratio": 1.5602094240837696, "no_speech_prob": 1.9637238892755704e-06}, {"id": 919, "seek": 443988, "start": 4464.4400000000005, "end": 4468.28, "text": " So based on our kind of approach, we're saying, OK, since they have the same feeling about", "tokens": [407, 2361, 322, 527, 733, 295, 3109, 11, 321, 434, 1566, 11, 2264, 11, 1670, 436, 362, 264, 912, 2633, 466], "temperature": 0.0, "avg_logprob": -0.13637692900909776, "compression_ratio": 1.5602094240837696, "no_speech_prob": 1.9637238892755704e-06}, {"id": 920, "seek": 446828, "start": 4468.28, "end": 4472.8, "text": " these three movies, maybe they'll feel the same about these three movies.", "tokens": [613, 1045, 6233, 11, 1310, 436, 603, 841, 264, 912, 466, 613, 1045, 6233, 13], "temperature": 0.0, "avg_logprob": -0.14134487283640895, "compression_ratio": 1.9662921348314606, "no_speech_prob": 1.9832785255857743e-05}, {"id": 921, "seek": 446828, "start": 4472.8, "end": 4478.679999999999, "text": " So this person likes all three of those movies, and this person likes two out of three of", "tokens": [407, 341, 954, 5902, 439, 1045, 295, 729, 6233, 11, 293, 341, 954, 5902, 732, 484, 295, 1045, 295], "temperature": 0.0, "avg_logprob": -0.14134487283640895, "compression_ratio": 1.9662921348314606, "no_speech_prob": 1.9832785255857743e-05}, {"id": 922, "seek": 446828, "start": 4478.679999999999, "end": 4479.92, "text": " them.", "tokens": [552, 13], "temperature": 0.0, "avg_logprob": -0.14134487283640895, "compression_ratio": 1.9662921348314606, "no_speech_prob": 1.9832785255857743e-05}, {"id": 923, "seek": 446828, "start": 4479.92, "end": 4483.36, "text": " So you know, you kind of this is the idea, right, is if somebody says to you, I like", "tokens": [407, 291, 458, 11, 291, 733, 295, 341, 307, 264, 1558, 11, 558, 11, 307, 498, 2618, 1619, 281, 291, 11, 286, 411], "temperature": 0.0, "avg_logprob": -0.14134487283640895, "compression_ratio": 1.9662921348314606, "no_speech_prob": 1.9832785255857743e-05}, {"id": 924, "seek": 446828, "start": 4483.36, "end": 4488.08, "text": " this movie, this movie, this movie, and you're like, oh, they like those movies, too.", "tokens": [341, 3169, 11, 341, 3169, 11, 341, 3169, 11, 293, 291, 434, 411, 11, 1954, 11, 436, 411, 729, 6233, 11, 886, 13], "temperature": 0.0, "avg_logprob": -0.14134487283640895, "compression_ratio": 1.9662921348314606, "no_speech_prob": 1.9832785255857743e-05}, {"id": 925, "seek": 446828, "start": 4488.08, "end": 4489.08, "text": " What other movies do you like?", "tokens": [708, 661, 6233, 360, 291, 411, 30], "temperature": 0.0, "avg_logprob": -0.14134487283640895, "compression_ratio": 1.9662921348314606, "no_speech_prob": 1.9832785255857743e-05}, {"id": 926, "seek": 446828, "start": 4489.08, "end": 4491.28, "text": " And they'll say, oh, how about this?", "tokens": [400, 436, 603, 584, 11, 1954, 11, 577, 466, 341, 30], "temperature": 0.0, "avg_logprob": -0.14134487283640895, "compression_ratio": 1.9662921348314606, "no_speech_prob": 1.9832785255857743e-05}, {"id": 927, "seek": 446828, "start": 4491.28, "end": 4494.4, "text": " There's a chance, good chance that you're going to like the same thing.", "tokens": [821, 311, 257, 2931, 11, 665, 2931, 300, 291, 434, 516, 281, 411, 264, 912, 551, 13], "temperature": 0.0, "avg_logprob": -0.14134487283640895, "compression_ratio": 1.9662921348314606, "no_speech_prob": 1.9832785255857743e-05}, {"id": 928, "seek": 446828, "start": 4494.4, "end": 4497.0, "text": " That's the basis of collaborative filtering.", "tokens": [663, 311, 264, 5143, 295, 16555, 30822, 13], "temperature": 0.0, "avg_logprob": -0.14134487283640895, "compression_ratio": 1.9662921348314606, "no_speech_prob": 1.9832785255857743e-05}, {"id": 929, "seek": 449700, "start": 4497.0, "end": 4502.72, "text": " OK, it's and mathematically, we call this matrix completion.", "tokens": [2264, 11, 309, 311, 293, 44003, 11, 321, 818, 341, 8141, 19372, 13], "temperature": 0.0, "avg_logprob": -0.14681594654665156, "compression_ratio": 1.4870129870129871, "no_speech_prob": 4.4646334572462365e-05}, {"id": 930, "seek": 449700, "start": 4502.72, "end": 4504.84, "text": " So this matrix is missing values.", "tokens": [407, 341, 8141, 307, 5361, 4190, 13], "temperature": 0.0, "avg_logprob": -0.14681594654665156, "compression_ratio": 1.4870129870129871, "no_speech_prob": 4.4646334572462365e-05}, {"id": 931, "seek": 449700, "start": 4504.84, "end": 4507.08, "text": " We just want to complete them.", "tokens": [492, 445, 528, 281, 3566, 552, 13], "temperature": 0.0, "avg_logprob": -0.14681594654665156, "compression_ratio": 1.4870129870129871, "no_speech_prob": 4.4646334572462365e-05}, {"id": 932, "seek": 449700, "start": 4507.08, "end": 4515.28, "text": " So the core of collaborative filtering is it's a matrix completion exercise.", "tokens": [407, 264, 4965, 295, 16555, 30822, 307, 309, 311, 257, 8141, 19372, 5380, 13], "temperature": 0.0, "avg_logprob": -0.14681594654665156, "compression_ratio": 1.4870129870129871, "no_speech_prob": 4.4646334572462365e-05}, {"id": 933, "seek": 449700, "start": 4515.28, "end": 4523.0, "text": " Can you grab a microphone?", "tokens": [1664, 291, 4444, 257, 10952, 30], "temperature": 0.0, "avg_logprob": -0.14681594654665156, "compression_ratio": 1.4870129870129871, "no_speech_prob": 4.4646334572462365e-05}, {"id": 934, "seek": 452300, "start": 4523.0, "end": 4528.72, "text": " My question was, is with the dot products, right, so if we think about the math of that", "tokens": [1222, 1168, 390, 11, 307, 365, 264, 5893, 3383, 11, 558, 11, 370, 498, 321, 519, 466, 264, 5221, 295, 300], "temperature": 0.0, "avg_logprob": -0.17311443426670173, "compression_ratio": 1.8916666666666666, "no_speech_prob": 7.131700840545818e-05}, {"id": 935, "seek": 452300, "start": 4528.72, "end": 4533.36, "text": " for a minute, is if we think about the cosine of the angle between the two vectors, that's", "tokens": [337, 257, 3456, 11, 307, 498, 321, 519, 466, 264, 23565, 295, 264, 5802, 1296, 264, 732, 18875, 11, 300, 311], "temperature": 0.0, "avg_logprob": -0.17311443426670173, "compression_ratio": 1.8916666666666666, "no_speech_prob": 7.131700840545818e-05}, {"id": 936, "seek": 452300, "start": 4533.36, "end": 4536.08, "text": " going to roughly approximate the correlation.", "tokens": [516, 281, 9810, 30874, 264, 20009, 13], "temperature": 0.0, "avg_logprob": -0.17311443426670173, "compression_ratio": 1.8916666666666666, "no_speech_prob": 7.131700840545818e-05}, {"id": 937, "seek": 452300, "start": 4536.08, "end": 4539.84, "text": " Is that essentially what's going on here in one sense with the way that we're?", "tokens": [1119, 300, 4476, 437, 311, 516, 322, 510, 294, 472, 2020, 365, 264, 636, 300, 321, 434, 30], "temperature": 0.0, "avg_logprob": -0.17311443426670173, "compression_ratio": 1.8916666666666666, "no_speech_prob": 7.131700840545818e-05}, {"id": 938, "seek": 452300, "start": 4539.84, "end": 4545.68, "text": " So is the cosine of the angle between the vectors much the same thing as the dot product?", "tokens": [407, 307, 264, 23565, 295, 264, 5802, 1296, 264, 18875, 709, 264, 912, 551, 382, 264, 5893, 1674, 30], "temperature": 0.0, "avg_logprob": -0.17311443426670173, "compression_ratio": 1.8916666666666666, "no_speech_prob": 7.131700840545818e-05}, {"id": 939, "seek": 452300, "start": 4545.68, "end": 4546.68, "text": " The answer is yes.", "tokens": [440, 1867, 307, 2086, 13], "temperature": 0.0, "avg_logprob": -0.17311443426670173, "compression_ratio": 1.8916666666666666, "no_speech_prob": 7.131700840545818e-05}, {"id": 940, "seek": 452300, "start": 4546.68, "end": 4550.0, "text": " They're the same once you normalize them.", "tokens": [814, 434, 264, 912, 1564, 291, 2710, 1125, 552, 13], "temperature": 0.0, "avg_logprob": -0.17311443426670173, "compression_ratio": 1.8916666666666666, "no_speech_prob": 7.131700840545818e-05}, {"id": 941, "seek": 455000, "start": 4550.0, "end": 4558.04, "text": " So yeah, that's still on.", "tokens": [407, 1338, 11, 300, 311, 920, 322, 13], "temperature": 0.0, "avg_logprob": -0.2648257070512914, "compression_ratio": 1.38, "no_speech_prob": 5.255099495116156e-06}, {"id": 942, "seek": 455000, "start": 4558.04, "end": 4560.76, "text": " It's correlation what we're doing here at scale as well.", "tokens": [467, 311, 20009, 437, 321, 434, 884, 510, 412, 4373, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.2648257070512914, "compression_ratio": 1.38, "no_speech_prob": 5.255099495116156e-06}, {"id": 943, "seek": 455000, "start": 4560.76, "end": 4567.8, "text": " Yeah, you can think of it that way.", "tokens": [865, 11, 291, 393, 519, 295, 309, 300, 636, 13], "temperature": 0.0, "avg_logprob": -0.2648257070512914, "compression_ratio": 1.38, "no_speech_prob": 5.255099495116156e-06}, {"id": 944, "seek": 455000, "start": 4567.8, "end": 4576.08, "text": " Now this looks pretty different to how PyTorch looks.", "tokens": [823, 341, 1542, 1238, 819, 281, 577, 9953, 51, 284, 339, 1542, 13], "temperature": 0.0, "avg_logprob": -0.2648257070512914, "compression_ratio": 1.38, "no_speech_prob": 5.255099495116156e-06}, {"id": 945, "seek": 455000, "start": 4576.08, "end": 4578.8, "text": " PyTorch has things in rows, right?", "tokens": [9953, 51, 284, 339, 575, 721, 294, 13241, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.2648257070512914, "compression_ratio": 1.38, "no_speech_prob": 5.255099495116156e-06}, {"id": 946, "seek": 457880, "start": 4578.8, "end": 4581.64, "text": " We've got a user, a movie rating.", "tokens": [492, 600, 658, 257, 4195, 11, 257, 3169, 10990, 13], "temperature": 0.0, "avg_logprob": -0.16141817551250606, "compression_ratio": 1.7543859649122806, "no_speech_prob": 1.8340850147069432e-05}, {"id": 947, "seek": 457880, "start": 4581.64, "end": 4584.28, "text": " User movie rating, right?", "tokens": [32127, 3169, 10990, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.16141817551250606, "compression_ratio": 1.7543859649122806, "no_speech_prob": 1.8340850147069432e-05}, {"id": 948, "seek": 457880, "start": 4584.28, "end": 4588.0, "text": " So how do we do the same kind of thing in PyTorch?", "tokens": [407, 577, 360, 321, 360, 264, 912, 733, 295, 551, 294, 9953, 51, 284, 339, 30], "temperature": 0.0, "avg_logprob": -0.16141817551250606, "compression_ratio": 1.7543859649122806, "no_speech_prob": 1.8340850147069432e-05}, {"id": 949, "seek": 457880, "start": 4588.0, "end": 4592.88, "text": " So let's do the same kind of thing in Excel, but using the table in the same format that", "tokens": [407, 718, 311, 360, 264, 912, 733, 295, 551, 294, 19060, 11, 457, 1228, 264, 3199, 294, 264, 912, 7877, 300], "temperature": 0.0, "avg_logprob": -0.16141817551250606, "compression_ratio": 1.7543859649122806, "no_speech_prob": 1.8340850147069432e-05}, {"id": 950, "seek": 457880, "start": 4592.88, "end": 4596.12, "text": " PyTorch has it.", "tokens": [9953, 51, 284, 339, 575, 309, 13], "temperature": 0.0, "avg_logprob": -0.16141817551250606, "compression_ratio": 1.7543859649122806, "no_speech_prob": 1.8340850147069432e-05}, {"id": 951, "seek": 457880, "start": 4596.12, "end": 4600.12, "text": " So to do that in Excel, the first thing I'm going to do is I'm going to see, okay, I've", "tokens": [407, 281, 360, 300, 294, 19060, 11, 264, 700, 551, 286, 478, 516, 281, 360, 307, 286, 478, 516, 281, 536, 11, 1392, 11, 286, 600], "temperature": 0.0, "avg_logprob": -0.16141817551250606, "compression_ratio": 1.7543859649122806, "no_speech_prob": 1.8340850147069432e-05}, {"id": 952, "seek": 457880, "start": 4600.12, "end": 4606.76, "text": " got to look at user number 14, and I want to know what index, like how far down this", "tokens": [658, 281, 574, 412, 4195, 1230, 3499, 11, 293, 286, 528, 281, 458, 437, 8186, 11, 411, 577, 1400, 760, 341], "temperature": 0.0, "avg_logprob": -0.16141817551250606, "compression_ratio": 1.7543859649122806, "no_speech_prob": 1.8340850147069432e-05}, {"id": 953, "seek": 457880, "start": 4606.76, "end": 4607.76, "text": " list is 14.", "tokens": [1329, 307, 3499, 13], "temperature": 0.0, "avg_logprob": -0.16141817551250606, "compression_ratio": 1.7543859649122806, "no_speech_prob": 1.8340850147069432e-05}, {"id": 954, "seek": 460776, "start": 4607.76, "end": 4610.24, "text": " Okay, so we'll just match means find the index.", "tokens": [1033, 11, 370, 321, 603, 445, 2995, 1355, 915, 264, 8186, 13], "temperature": 0.0, "avg_logprob": -0.12452055768268865, "compression_ratio": 1.5251396648044693, "no_speech_prob": 1.0129747352038976e-05}, {"id": 955, "seek": 460776, "start": 4610.24, "end": 4614.04, "text": " So this is user index one.", "tokens": [407, 341, 307, 4195, 8186, 472, 13], "temperature": 0.0, "avg_logprob": -0.12452055768268865, "compression_ratio": 1.5251396648044693, "no_speech_prob": 1.0129747352038976e-05}, {"id": 956, "seek": 460776, "start": 4614.04, "end": 4621.8, "text": " And then what I'm going to do is I'm going to say these five numbers is basically I want", "tokens": [400, 550, 437, 286, 478, 516, 281, 360, 307, 286, 478, 516, 281, 584, 613, 1732, 3547, 307, 1936, 286, 528], "temperature": 0.0, "avg_logprob": -0.12452055768268865, "compression_ratio": 1.5251396648044693, "no_speech_prob": 1.0129747352038976e-05}, {"id": 957, "seek": 460776, "start": 4621.8, "end": 4626.12, "text": " to find row one over here.", "tokens": [281, 915, 5386, 472, 670, 510, 13], "temperature": 0.0, "avg_logprob": -0.12452055768268865, "compression_ratio": 1.5251396648044693, "no_speech_prob": 1.0129747352038976e-05}, {"id": 958, "seek": 460776, "start": 4626.12, "end": 4628.16, "text": " And in Excel, that's called offset.", "tokens": [400, 294, 19060, 11, 300, 311, 1219, 18687, 13], "temperature": 0.0, "avg_logprob": -0.12452055768268865, "compression_ratio": 1.5251396648044693, "no_speech_prob": 1.0129747352038976e-05}, {"id": 959, "seek": 460776, "start": 4628.16, "end": 4634.2, "text": " So we're going to offset from here by one row.", "tokens": [407, 321, 434, 516, 281, 18687, 490, 510, 538, 472, 5386, 13], "temperature": 0.0, "avg_logprob": -0.12452055768268865, "compression_ratio": 1.5251396648044693, "no_speech_prob": 1.0129747352038976e-05}, {"id": 960, "seek": 463420, "start": 4634.2, "end": 4639.44, "text": " And so you can see here it is 0.19, 0.63, 0.19, 0.63, et cetera.", "tokens": [400, 370, 291, 393, 536, 510, 309, 307, 1958, 13, 3405, 11, 1958, 13, 29491, 11, 1958, 13, 3405, 11, 1958, 13, 29491, 11, 1030, 11458, 13], "temperature": 0.0, "avg_logprob": -0.16559551239013673, "compression_ratio": 1.5759493670886076, "no_speech_prob": 8.530050763511099e-06}, {"id": 961, "seek": 463420, "start": 4639.44, "end": 4644.12, "text": " So here's the second user, 0.25, 0.03, et cetera.", "tokens": [407, 510, 311, 264, 1150, 4195, 11, 1958, 13, 6074, 11, 1958, 13, 11592, 11, 1030, 11458, 13], "temperature": 0.0, "avg_logprob": -0.16559551239013673, "compression_ratio": 1.5759493670886076, "no_speech_prob": 8.530050763511099e-06}, {"id": 962, "seek": 463420, "start": 4644.12, "end": 4647.4, "text": " And we can do the same thing for movies.", "tokens": [400, 321, 393, 360, 264, 912, 551, 337, 6233, 13], "temperature": 0.0, "avg_logprob": -0.16559551239013673, "compression_ratio": 1.5759493670886076, "no_speech_prob": 8.530050763511099e-06}, {"id": 963, "seek": 463420, "start": 4647.4, "end": 4654.639999999999, "text": " So movie 417 is index 14.", "tokens": [407, 3169, 1017, 7773, 307, 8186, 3499, 13], "temperature": 0.0, "avg_logprob": -0.16559551239013673, "compression_ratio": 1.5759493670886076, "no_speech_prob": 8.530050763511099e-06}, {"id": 964, "seek": 463420, "start": 4654.639999999999, "end": 4657.639999999999, "text": " That's going to be 0.75, 0.47, et cetera.", "tokens": [663, 311, 516, 281, 312, 1958, 13, 11901, 11, 1958, 13, 14060, 11, 1030, 11458, 13], "temperature": 0.0, "avg_logprob": -0.16559551239013673, "compression_ratio": 1.5759493670886076, "no_speech_prob": 8.530050763511099e-06}, {"id": 965, "seek": 463420, "start": 4657.639999999999, "end": 4658.84, "text": " And so same thing, right?", "tokens": [400, 370, 912, 551, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.16559551239013673, "compression_ratio": 1.5759493670886076, "no_speech_prob": 8.530050763511099e-06}, {"id": 966, "seek": 465884, "start": 4658.84, "end": 4671.400000000001, "text": " But now we're going to offset from here by 14 to get this row, which is 0.75, 0.47, et", "tokens": [583, 586, 321, 434, 516, 281, 18687, 490, 510, 538, 3499, 281, 483, 341, 5386, 11, 597, 307, 1958, 13, 11901, 11, 1958, 13, 14060, 11, 1030], "temperature": 0.0, "avg_logprob": -0.1547127132174335, "compression_ratio": 1.4480874316939891, "no_speech_prob": 2.156787559215445e-06}, {"id": 967, "seek": 465884, "start": 4671.400000000001, "end": 4672.400000000001, "text": " cetera.", "tokens": [11458, 13], "temperature": 0.0, "avg_logprob": -0.1547127132174335, "compression_ratio": 1.4480874316939891, "no_speech_prob": 2.156787559215445e-06}, {"id": 968, "seek": 465884, "start": 4672.400000000001, "end": 4679.28, "text": " And so the prediction now is the dot product is called sum product in Excel.", "tokens": [400, 370, 264, 17630, 586, 307, 264, 5893, 1674, 307, 1219, 2408, 1674, 294, 19060, 13], "temperature": 0.0, "avg_logprob": -0.1547127132174335, "compression_ratio": 1.4480874316939891, "no_speech_prob": 2.156787559215445e-06}, {"id": 969, "seek": 465884, "start": 4679.28, "end": 4681.76, "text": " This is sum product of those two things.", "tokens": [639, 307, 2408, 1674, 295, 729, 732, 721, 13], "temperature": 0.0, "avg_logprob": -0.1547127132174335, "compression_ratio": 1.4480874316939891, "no_speech_prob": 2.156787559215445e-06}, {"id": 970, "seek": 465884, "start": 4681.76, "end": 4686.88, "text": " So this is exactly the same as we had before, right?", "tokens": [407, 341, 307, 2293, 264, 912, 382, 321, 632, 949, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1547127132174335, "compression_ratio": 1.4480874316939891, "no_speech_prob": 2.156787559215445e-06}, {"id": 971, "seek": 468688, "start": 4686.88, "end": 4691.76, "text": " But when we kind of put everything next to each other, we have to manually look up the", "tokens": [583, 562, 321, 733, 295, 829, 1203, 958, 281, 1184, 661, 11, 321, 362, 281, 16945, 574, 493, 264], "temperature": 0.0, "avg_logprob": -0.09390373404966582, "compression_ratio": 1.7195121951219512, "no_speech_prob": 4.425299721333431e-06}, {"id": 972, "seek": 468688, "start": 4691.76, "end": 4694.76, "text": " index.", "tokens": [8186, 13], "temperature": 0.0, "avg_logprob": -0.09390373404966582, "compression_ratio": 1.7195121951219512, "no_speech_prob": 4.425299721333431e-06}, {"id": 973, "seek": 468688, "start": 4694.76, "end": 4699.36, "text": " And so then for each one, we can calculate the error squared, prediction minus rating", "tokens": [400, 370, 550, 337, 1184, 472, 11, 321, 393, 8873, 264, 6713, 8889, 11, 17630, 3175, 10990], "temperature": 0.0, "avg_logprob": -0.09390373404966582, "compression_ratio": 1.7195121951219512, "no_speech_prob": 4.425299721333431e-06}, {"id": 974, "seek": 468688, "start": 4699.36, "end": 4701.36, "text": " squared.", "tokens": [8889, 13], "temperature": 0.0, "avg_logprob": -0.09390373404966582, "compression_ratio": 1.7195121951219512, "no_speech_prob": 4.425299721333431e-06}, {"id": 975, "seek": 468688, "start": 4701.36, "end": 4703.32, "text": " And then we could add those all up.", "tokens": [400, 550, 321, 727, 909, 729, 439, 493, 13], "temperature": 0.0, "avg_logprob": -0.09390373404966582, "compression_ratio": 1.7195121951219512, "no_speech_prob": 4.425299721333431e-06}, {"id": 976, "seek": 468688, "start": 4703.32, "end": 4706.72, "text": " And if you remember, this is actually the same root mean squared error we had before", "tokens": [400, 498, 291, 1604, 11, 341, 307, 767, 264, 912, 5593, 914, 8889, 6713, 321, 632, 949], "temperature": 0.0, "avg_logprob": -0.09390373404966582, "compression_ratio": 1.7195121951219512, "no_speech_prob": 4.425299721333431e-06}, {"id": 977, "seek": 468688, "start": 4706.72, "end": 4711.08, "text": " we optimized before, 2.81, because we've got the same numbers as before.", "tokens": [321, 26941, 949, 11, 568, 13, 32875, 11, 570, 321, 600, 658, 264, 912, 3547, 382, 949, 13], "temperature": 0.0, "avg_logprob": -0.09390373404966582, "compression_ratio": 1.7195121951219512, "no_speech_prob": 4.425299721333431e-06}, {"id": 978, "seek": 468688, "start": 4711.08, "end": 4716.68, "text": " And so this is mathematically identical.", "tokens": [400, 370, 341, 307, 44003, 14800, 13], "temperature": 0.0, "avg_logprob": -0.09390373404966582, "compression_ratio": 1.7195121951219512, "no_speech_prob": 4.425299721333431e-06}, {"id": 979, "seek": 471668, "start": 4716.68, "end": 4718.88, "text": " So what's this weird word up here?", "tokens": [407, 437, 311, 341, 3657, 1349, 493, 510, 30], "temperature": 0.0, "avg_logprob": -0.14176012169231067, "compression_ratio": 1.5071090047393365, "no_speech_prob": 4.22273478761781e-06}, {"id": 980, "seek": 471668, "start": 4718.88, "end": 4719.88, "text": " Embedding.", "tokens": [24234, 292, 3584, 13], "temperature": 0.0, "avg_logprob": -0.14176012169231067, "compression_ratio": 1.5071090047393365, "no_speech_prob": 4.22273478761781e-06}, {"id": 981, "seek": 471668, "start": 4719.88, "end": 4724.06, "text": " You've probably heard it before, and you might have come across the impression it's some", "tokens": [509, 600, 1391, 2198, 309, 949, 11, 293, 291, 1062, 362, 808, 2108, 264, 9995, 309, 311, 512], "temperature": 0.0, "avg_logprob": -0.14176012169231067, "compression_ratio": 1.5071090047393365, "no_speech_prob": 4.22273478761781e-06}, {"id": 982, "seek": 471668, "start": 4724.06, "end": 4728.08, "text": " very complex, fancy mathematical thing.", "tokens": [588, 3997, 11, 10247, 18894, 551, 13], "temperature": 0.0, "avg_logprob": -0.14176012169231067, "compression_ratio": 1.5071090047393365, "no_speech_prob": 4.22273478761781e-06}, {"id": 983, "seek": 471668, "start": 4728.08, "end": 4733.72, "text": " But actually, it turns out that it is just looking something up in an array.", "tokens": [583, 767, 11, 309, 4523, 484, 300, 309, 307, 445, 1237, 746, 493, 294, 364, 10225, 13], "temperature": 0.0, "avg_logprob": -0.14176012169231067, "compression_ratio": 1.5071090047393365, "no_speech_prob": 4.22273478761781e-06}, {"id": 984, "seek": 471668, "start": 4733.72, "end": 4735.68, "text": " That is what an embedding is.", "tokens": [663, 307, 437, 364, 12240, 3584, 307, 13], "temperature": 0.0, "avg_logprob": -0.14176012169231067, "compression_ratio": 1.5071090047393365, "no_speech_prob": 4.22273478761781e-06}, {"id": 985, "seek": 471668, "start": 4735.68, "end": 4743.96, "text": " So we call this an embedding matrix.", "tokens": [407, 321, 818, 341, 364, 12240, 3584, 8141, 13], "temperature": 0.0, "avg_logprob": -0.14176012169231067, "compression_ratio": 1.5071090047393365, "no_speech_prob": 4.22273478761781e-06}, {"id": 986, "seek": 474396, "start": 4743.96, "end": 4751.68, "text": " And these are our user embeddings and our movie embeddings.", "tokens": [400, 613, 366, 527, 4195, 12240, 29432, 293, 527, 3169, 12240, 29432, 13], "temperature": 0.0, "avg_logprob": -0.09576139083275428, "compression_ratio": 1.5720338983050848, "no_speech_prob": 3.726571776496712e-06}, {"id": 987, "seek": 474396, "start": 4751.68, "end": 4755.8, "text": " So let's take a look at that in PyTorch.", "tokens": [407, 718, 311, 747, 257, 574, 412, 300, 294, 9953, 51, 284, 339, 13], "temperature": 0.0, "avg_logprob": -0.09576139083275428, "compression_ratio": 1.5720338983050848, "no_speech_prob": 3.726571776496712e-06}, {"id": 988, "seek": 474396, "start": 4755.8, "end": 4760.16, "text": " And at this point, if you've heard about embeddings before, you might be thinking that can't be", "tokens": [400, 412, 341, 935, 11, 498, 291, 600, 2198, 466, 12240, 29432, 949, 11, 291, 1062, 312, 1953, 300, 393, 380, 312], "temperature": 0.0, "avg_logprob": -0.09576139083275428, "compression_ratio": 1.5720338983050848, "no_speech_prob": 3.726571776496712e-06}, {"id": 989, "seek": 474396, "start": 4760.16, "end": 4762.56, "text": " it.", "tokens": [309, 13], "temperature": 0.0, "avg_logprob": -0.09576139083275428, "compression_ratio": 1.5720338983050848, "no_speech_prob": 3.726571776496712e-06}, {"id": 990, "seek": 474396, "start": 4762.56, "end": 4768.24, "text": " And yeah, it's just as complex as the rectified linear unit, which turned out to be replaced", "tokens": [400, 1338, 11, 309, 311, 445, 382, 3997, 382, 264, 11048, 2587, 8213, 4985, 11, 597, 3574, 484, 281, 312, 10772], "temperature": 0.0, "avg_logprob": -0.09576139083275428, "compression_ratio": 1.5720338983050848, "no_speech_prob": 3.726571776496712e-06}, {"id": 991, "seek": 474396, "start": 4768.24, "end": 4770.36, "text": " negatives with zeros.", "tokens": [40019, 365, 35193, 13], "temperature": 0.0, "avg_logprob": -0.09576139083275428, "compression_ratio": 1.5720338983050848, "no_speech_prob": 3.726571776496712e-06}, {"id": 992, "seek": 474396, "start": 4770.36, "end": 4773.84, "text": " Embedding actually means look something up in an array.", "tokens": [24234, 292, 3584, 767, 1355, 574, 746, 493, 294, 364, 10225, 13], "temperature": 0.0, "avg_logprob": -0.09576139083275428, "compression_ratio": 1.5720338983050848, "no_speech_prob": 3.726571776496712e-06}, {"id": 993, "seek": 477384, "start": 4773.84, "end": 4778.42, "text": " So there's a lot of things that we use as deep learning practitioners to try to make", "tokens": [407, 456, 311, 257, 688, 295, 721, 300, 321, 764, 382, 2452, 2539, 25742, 281, 853, 281, 652], "temperature": 0.0, "avg_logprob": -0.08252863841013866, "compression_ratio": 1.7109375, "no_speech_prob": 1.2606215022969991e-05}, {"id": 994, "seek": 477384, "start": 4778.42, "end": 4785.6, "text": " you as intimidated as possible so that you don't wander into our territory and start", "tokens": [291, 382, 40234, 382, 1944, 370, 300, 291, 500, 380, 27541, 666, 527, 11360, 293, 722], "temperature": 0.0, "avg_logprob": -0.08252863841013866, "compression_ratio": 1.7109375, "no_speech_prob": 1.2606215022969991e-05}, {"id": 995, "seek": 477384, "start": 4785.6, "end": 4787.56, "text": " winning our Kaggle competitions.", "tokens": [8224, 527, 48751, 22631, 26185, 13], "temperature": 0.0, "avg_logprob": -0.08252863841013866, "compression_ratio": 1.7109375, "no_speech_prob": 1.2606215022969991e-05}, {"id": 996, "seek": 477384, "start": 4787.56, "end": 4792.68, "text": " And unfortunately, once you discover the simplicity of it, you might start to think that you can", "tokens": [400, 7015, 11, 1564, 291, 4411, 264, 25632, 295, 309, 11, 291, 1062, 722, 281, 519, 300, 291, 393], "temperature": 0.0, "avg_logprob": -0.08252863841013866, "compression_ratio": 1.7109375, "no_speech_prob": 1.2606215022969991e-05}, {"id": 997, "seek": 477384, "start": 4792.68, "end": 4793.68, "text": " do it yourself.", "tokens": [360, 309, 1803, 13], "temperature": 0.0, "avg_logprob": -0.08252863841013866, "compression_ratio": 1.7109375, "no_speech_prob": 1.2606215022969991e-05}, {"id": 998, "seek": 477384, "start": 4793.68, "end": 4795.6, "text": " And then it turns out you can.", "tokens": [400, 550, 309, 4523, 484, 291, 393, 13], "temperature": 0.0, "avg_logprob": -0.08252863841013866, "compression_ratio": 1.7109375, "no_speech_prob": 1.2606215022969991e-05}, {"id": 999, "seek": 477384, "start": 4795.6, "end": 4800.52, "text": " So yeah, that's what basically it turns out pretty much all of this jargon turns out to", "tokens": [407, 1338, 11, 300, 311, 437, 1936, 309, 4523, 484, 1238, 709, 439, 295, 341, 15181, 10660, 4523, 484, 281], "temperature": 0.0, "avg_logprob": -0.08252863841013866, "compression_ratio": 1.7109375, "no_speech_prob": 1.2606215022969991e-05}, {"id": 1000, "seek": 477384, "start": 4800.52, "end": 4803.52, "text": " be.", "tokens": [312, 13], "temperature": 0.0, "avg_logprob": -0.08252863841013866, "compression_ratio": 1.7109375, "no_speech_prob": 1.2606215022969991e-05}, {"id": 1001, "seek": 480352, "start": 4803.52, "end": 4809.68, "text": " So we're going to try to learn these latent factors, which is exactly what we just did", "tokens": [407, 321, 434, 516, 281, 853, 281, 1466, 613, 48994, 6771, 11, 597, 307, 2293, 437, 321, 445, 630], "temperature": 0.0, "avg_logprob": -0.0880862062627619, "compression_ratio": 1.75, "no_speech_prob": 2.0783680156455375e-05}, {"id": 1002, "seek": 480352, "start": 4809.68, "end": 4810.68, "text": " in Excel.", "tokens": [294, 19060, 13], "temperature": 0.0, "avg_logprob": -0.0880862062627619, "compression_ratio": 1.75, "no_speech_prob": 2.0783680156455375e-05}, {"id": 1003, "seek": 480352, "start": 4810.68, "end": 4813.68, "text": " We just learned the latent factors.", "tokens": [492, 445, 3264, 264, 48994, 6771, 13], "temperature": 0.0, "avg_logprob": -0.0880862062627619, "compression_ratio": 1.75, "no_speech_prob": 2.0783680156455375e-05}, {"id": 1004, "seek": 480352, "start": 4813.68, "end": 4815.92, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.0880862062627619, "compression_ratio": 1.75, "no_speech_prob": 2.0783680156455375e-05}, {"id": 1005, "seek": 480352, "start": 4815.92, "end": 4821.4400000000005, "text": " So if we're going to learn things in PyTorch, we're going to need data loaders.", "tokens": [407, 498, 321, 434, 516, 281, 1466, 721, 294, 9953, 51, 284, 339, 11, 321, 434, 516, 281, 643, 1412, 3677, 433, 13], "temperature": 0.0, "avg_logprob": -0.0880862062627619, "compression_ratio": 1.75, "no_speech_prob": 2.0783680156455375e-05}, {"id": 1006, "seek": 480352, "start": 4821.4400000000005, "end": 4828.280000000001, "text": " One thing I did is there is actually a movies table as well with the names of the movies.", "tokens": [1485, 551, 286, 630, 307, 456, 307, 767, 257, 6233, 3199, 382, 731, 365, 264, 5288, 295, 264, 6233, 13], "temperature": 0.0, "avg_logprob": -0.0880862062627619, "compression_ratio": 1.75, "no_speech_prob": 2.0783680156455375e-05}, {"id": 1007, "seek": 480352, "start": 4828.280000000001, "end": 4833.240000000001, "text": " So I merged that together with the ratings so that then we've now got the user ID and", "tokens": [407, 286, 36427, 300, 1214, 365, 264, 24603, 370, 300, 550, 321, 600, 586, 658, 264, 4195, 7348, 293], "temperature": 0.0, "avg_logprob": -0.0880862062627619, "compression_ratio": 1.75, "no_speech_prob": 2.0783680156455375e-05}, {"id": 1008, "seek": 483324, "start": 4833.24, "end": 4834.8, "text": " the actual name of the movie.", "tokens": [264, 3539, 1315, 295, 264, 3169, 13], "temperature": 0.0, "avg_logprob": -0.12381588682836416, "compression_ratio": 1.6591928251121075, "no_speech_prob": 9.222758308169432e-06}, {"id": 1009, "seek": 483324, "start": 4834.8, "end": 4837.5199999999995, "text": " We don't need that obviously for the model, but it's just going to make it a bit more", "tokens": [492, 500, 380, 643, 300, 2745, 337, 264, 2316, 11, 457, 309, 311, 445, 516, 281, 652, 309, 257, 857, 544], "temperature": 0.0, "avg_logprob": -0.12381588682836416, "compression_ratio": 1.6591928251121075, "no_speech_prob": 9.222758308169432e-06}, {"id": 1010, "seek": 483324, "start": 4837.5199999999995, "end": 4840.76, "text": " fun to interpret later.", "tokens": [1019, 281, 7302, 1780, 13], "temperature": 0.0, "avg_logprob": -0.12381588682836416, "compression_ratio": 1.6591928251121075, "no_speech_prob": 9.222758308169432e-06}, {"id": 1011, "seek": 483324, "start": 4840.76, "end": 4845.44, "text": " So this is called ratings.", "tokens": [407, 341, 307, 1219, 24603, 13], "temperature": 0.0, "avg_logprob": -0.12381588682836416, "compression_ratio": 1.6591928251121075, "no_speech_prob": 9.222758308169432e-06}, {"id": 1012, "seek": 483324, "start": 4845.44, "end": 4849.8, "text": " We have something called collab data loaders, so collaborative filtering data loaders.", "tokens": [492, 362, 746, 1219, 44228, 1412, 3677, 433, 11, 370, 16555, 30822, 1412, 3677, 433, 13], "temperature": 0.0, "avg_logprob": -0.12381588682836416, "compression_ratio": 1.6591928251121075, "no_speech_prob": 9.222758308169432e-06}, {"id": 1013, "seek": 483324, "start": 4849.8, "end": 4854.36, "text": " And we can get that from a data frame by passing in the data frame.", "tokens": [400, 321, 393, 483, 300, 490, 257, 1412, 3920, 538, 8437, 294, 264, 1412, 3920, 13], "temperature": 0.0, "avg_logprob": -0.12381588682836416, "compression_ratio": 1.6591928251121075, "no_speech_prob": 9.222758308169432e-06}, {"id": 1014, "seek": 483324, "start": 4854.36, "end": 4858.599999999999, "text": " And it expects a user column and an item column.", "tokens": [400, 309, 33280, 257, 4195, 7738, 293, 364, 3174, 7738, 13], "temperature": 0.0, "avg_logprob": -0.12381588682836416, "compression_ratio": 1.6591928251121075, "no_speech_prob": 9.222758308169432e-06}, {"id": 1015, "seek": 485860, "start": 4858.6, "end": 4864.04, "text": " So the user column is what it sounds like, the person that is rating this thing.", "tokens": [407, 264, 4195, 7738, 307, 437, 309, 3263, 411, 11, 264, 954, 300, 307, 10990, 341, 551, 13], "temperature": 0.0, "avg_logprob": -0.10789617697397867, "compression_ratio": 2.022421524663677, "no_speech_prob": 5.255292762740282e-06}, {"id": 1016, "seek": 485860, "start": 4864.04, "end": 4867.6, "text": " And the item column is the product or service that they're rating.", "tokens": [400, 264, 3174, 7738, 307, 264, 1674, 420, 2643, 300, 436, 434, 10990, 13], "temperature": 0.0, "avg_logprob": -0.10789617697397867, "compression_ratio": 2.022421524663677, "no_speech_prob": 5.255292762740282e-06}, {"id": 1017, "seek": 485860, "start": 4867.6, "end": 4871.160000000001, "text": " In our case, the user column is called user, so we don't have to pass that in.", "tokens": [682, 527, 1389, 11, 264, 4195, 7738, 307, 1219, 4195, 11, 370, 321, 500, 380, 362, 281, 1320, 300, 294, 13], "temperature": 0.0, "avg_logprob": -0.10789617697397867, "compression_ratio": 2.022421524663677, "no_speech_prob": 5.255292762740282e-06}, {"id": 1018, "seek": 485860, "start": 4871.160000000001, "end": 4876.52, "text": " And the item column is called title, so we do have to pass this in because by default", "tokens": [400, 264, 3174, 7738, 307, 1219, 4876, 11, 370, 321, 360, 362, 281, 1320, 341, 294, 570, 538, 7576], "temperature": 0.0, "avg_logprob": -0.10789617697397867, "compression_ratio": 2.022421524663677, "no_speech_prob": 5.255292762740282e-06}, {"id": 1019, "seek": 485860, "start": 4876.52, "end": 4882.320000000001, "text": " the user column should be called user and the item column will be called item.", "tokens": [264, 4195, 7738, 820, 312, 1219, 4195, 293, 264, 3174, 7738, 486, 312, 1219, 3174, 13], "temperature": 0.0, "avg_logprob": -0.10789617697397867, "compression_ratio": 2.022421524663677, "no_speech_prob": 5.255292762740282e-06}, {"id": 1020, "seek": 485860, "start": 4882.320000000001, "end": 4884.72, "text": " Give it a batch size.", "tokens": [5303, 309, 257, 15245, 2744, 13], "temperature": 0.0, "avg_logprob": -0.10789617697397867, "compression_ratio": 2.022421524663677, "no_speech_prob": 5.255292762740282e-06}, {"id": 1021, "seek": 485860, "start": 4884.72, "end": 4887.280000000001, "text": " And as usual, we can call show batch.", "tokens": [400, 382, 7713, 11, 321, 393, 818, 855, 15245, 13], "temperature": 0.0, "avg_logprob": -0.10789617697397867, "compression_ratio": 2.022421524663677, "no_speech_prob": 5.255292762740282e-06}, {"id": 1022, "seek": 488728, "start": 4887.28, "end": 4895.639999999999, "text": " And so here's our data loaders, a batch of data loaders, or at least a bit of it.", "tokens": [400, 370, 510, 311, 527, 1412, 3677, 433, 11, 257, 15245, 295, 1412, 3677, 433, 11, 420, 412, 1935, 257, 857, 295, 309, 13], "temperature": 0.0, "avg_logprob": -0.22833614349365233, "compression_ratio": 1.507936507936508, "no_speech_prob": 1.593418164702598e-05}, {"id": 1023, "seek": 488728, "start": 4895.639999999999, "end": 4900.599999999999, "text": " And so now that since we talked about the names, we actually get to see the names, which", "tokens": [400, 370, 586, 300, 1670, 321, 2825, 466, 264, 5288, 11, 321, 767, 483, 281, 536, 264, 5288, 11, 597], "temperature": 0.0, "avg_logprob": -0.22833614349365233, "compression_ratio": 1.507936507936508, "no_speech_prob": 1.593418164702598e-05}, {"id": 1024, "seek": 488728, "start": 4900.599999999999, "end": 4903.04, "text": " is nice.", "tokens": [307, 1481, 13], "temperature": 0.0, "avg_logprob": -0.22833614349365233, "compression_ratio": 1.507936507936508, "no_speech_prob": 1.593418164702598e-05}, {"id": 1025, "seek": 488728, "start": 4903.04, "end": 4906.12, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.22833614349365233, "compression_ratio": 1.507936507936508, "no_speech_prob": 1.593418164702598e-05}, {"id": 1026, "seek": 490612, "start": 4906.12, "end": 4920.4, "text": " So now we're going to create the user factors and movie factors, i.e. this one and this", "tokens": [407, 586, 321, 434, 516, 281, 1884, 264, 4195, 6771, 293, 3169, 6771, 11, 741, 13, 68, 13, 341, 472, 293, 341], "temperature": 0.0, "avg_logprob": -0.11787226994832357, "compression_ratio": 2.1358024691358026, "no_speech_prob": 1.470458028052235e-05}, {"id": 1027, "seek": 490612, "start": 4920.4, "end": 4921.48, "text": " one.", "tokens": [472, 13], "temperature": 0.0, "avg_logprob": -0.11787226994832357, "compression_ratio": 2.1358024691358026, "no_speech_prob": 1.470458028052235e-05}, {"id": 1028, "seek": 490612, "start": 4921.48, "end": 4925.84, "text": " So the number of rows of the movie factors will be equal to the number of movies and", "tokens": [407, 264, 1230, 295, 13241, 295, 264, 3169, 6771, 486, 312, 2681, 281, 264, 1230, 295, 6233, 293], "temperature": 0.0, "avg_logprob": -0.11787226994832357, "compression_ratio": 2.1358024691358026, "no_speech_prob": 1.470458028052235e-05}, {"id": 1029, "seek": 490612, "start": 4925.84, "end": 4930.5199999999995, "text": " the number of rows of the user factors will be equal to the number of users.", "tokens": [264, 1230, 295, 13241, 295, 264, 4195, 6771, 486, 312, 2681, 281, 264, 1230, 295, 5022, 13], "temperature": 0.0, "avg_logprob": -0.11787226994832357, "compression_ratio": 2.1358024691358026, "no_speech_prob": 1.470458028052235e-05}, {"id": 1030, "seek": 490612, "start": 4930.5199999999995, "end": 4935.84, "text": " And the number of columns will be whatever we want, however many factors we want to create.", "tokens": [400, 264, 1230, 295, 13766, 486, 312, 2035, 321, 528, 11, 4461, 867, 6771, 321, 528, 281, 1884, 13], "temperature": 0.0, "avg_logprob": -0.11787226994832357, "compression_ratio": 2.1358024691358026, "no_speech_prob": 1.470458028052235e-05}, {"id": 1031, "seek": 493584, "start": 4935.84, "end": 4939.360000000001, "text": " John?", "tokens": [2619, 30], "temperature": 0.0, "avg_logprob": -0.20052251423874948, "compression_ratio": 1.3877551020408163, "no_speech_prob": 2.930778282461688e-05}, {"id": 1032, "seek": 493584, "start": 4939.360000000001, "end": 4941.96, "text": " This might be a pertinent time to jump in with a question.", "tokens": [639, 1062, 312, 257, 13269, 11058, 565, 281, 3012, 294, 365, 257, 1168, 13], "temperature": 0.0, "avg_logprob": -0.20052251423874948, "compression_ratio": 1.3877551020408163, "no_speech_prob": 2.930778282461688e-05}, {"id": 1033, "seek": 493584, "start": 4941.96, "end": 4947.12, "text": " Any comments about choosing the number of factors?", "tokens": [2639, 3053, 466, 10875, 264, 1230, 295, 6771, 30], "temperature": 0.0, "avg_logprob": -0.20052251423874948, "compression_ratio": 1.3877551020408163, "no_speech_prob": 2.930778282461688e-05}, {"id": 1034, "seek": 493584, "start": 4947.12, "end": 4954.16, "text": " Not really.", "tokens": [1726, 534, 13], "temperature": 0.0, "avg_logprob": -0.20052251423874948, "compression_ratio": 1.3877551020408163, "no_speech_prob": 2.930778282461688e-05}, {"id": 1035, "seek": 493584, "start": 4954.16, "end": 4960.8, "text": " We have defaults that we use for embeddings in Fast AI.", "tokens": [492, 362, 7576, 82, 300, 321, 764, 337, 12240, 29432, 294, 15968, 7318, 13], "temperature": 0.0, "avg_logprob": -0.20052251423874948, "compression_ratio": 1.3877551020408163, "no_speech_prob": 2.930778282461688e-05}, {"id": 1036, "seek": 493584, "start": 4960.8, "end": 4964.88, "text": " It's a very obscure formula and people often ask me for like the mathematical derivation", "tokens": [467, 311, 257, 588, 34443, 8513, 293, 561, 2049, 1029, 385, 337, 411, 264, 18894, 10151, 399], "temperature": 0.0, "avg_logprob": -0.20052251423874948, "compression_ratio": 1.3877551020408163, "no_speech_prob": 2.930778282461688e-05}, {"id": 1037, "seek": 496488, "start": 4964.88, "end": 4965.88, "text": " of where it came from.", "tokens": [295, 689, 309, 1361, 490, 13], "temperature": 0.0, "avg_logprob": -0.1665730439415274, "compression_ratio": 1.6666666666666667, "no_speech_prob": 9.459346620133147e-05}, {"id": 1038, "seek": 496488, "start": 4965.88, "end": 4970.96, "text": " But what actually happened is I wrote down how many factors I think is appropriate for", "tokens": [583, 437, 767, 2011, 307, 286, 4114, 760, 577, 867, 6771, 286, 519, 307, 6854, 337], "temperature": 0.0, "avg_logprob": -0.1665730439415274, "compression_ratio": 1.6666666666666667, "no_speech_prob": 9.459346620133147e-05}, {"id": 1039, "seek": 496488, "start": 4970.96, "end": 4975.88, "text": " different size categories on a piece of paper at a table, or actually an Excel, and then", "tokens": [819, 2744, 10479, 322, 257, 2522, 295, 3035, 412, 257, 3199, 11, 420, 767, 364, 19060, 11, 293, 550], "temperature": 0.0, "avg_logprob": -0.1665730439415274, "compression_ratio": 1.6666666666666667, "no_speech_prob": 9.459346620133147e-05}, {"id": 1040, "seek": 496488, "start": 4975.88, "end": 4979.36, "text": " I fitted a function to that and that's the function.", "tokens": [286, 26321, 257, 2445, 281, 300, 293, 300, 311, 264, 2445, 13], "temperature": 0.0, "avg_logprob": -0.1665730439415274, "compression_ratio": 1.6666666666666667, "no_speech_prob": 9.459346620133147e-05}, {"id": 1041, "seek": 496488, "start": 4979.36, "end": 4984.64, "text": " So it's basically a mathematical function that fits my intuition about what works well.", "tokens": [407, 309, 311, 1936, 257, 18894, 2445, 300, 9001, 452, 24002, 466, 437, 1985, 731, 13], "temperature": 0.0, "avg_logprob": -0.1665730439415274, "compression_ratio": 1.6666666666666667, "no_speech_prob": 9.459346620133147e-05}, {"id": 1042, "seek": 496488, "start": 4984.64, "end": 4985.64, "text": " But it seems to work pretty well.", "tokens": [583, 309, 2544, 281, 589, 1238, 731, 13], "temperature": 0.0, "avg_logprob": -0.1665730439415274, "compression_ratio": 1.6666666666666667, "no_speech_prob": 9.459346620133147e-05}, {"id": 1043, "seek": 496488, "start": 4985.64, "end": 4987.96, "text": " I've seen it used in lots of other places now.", "tokens": [286, 600, 1612, 309, 1143, 294, 3195, 295, 661, 3190, 586, 13], "temperature": 0.0, "avg_logprob": -0.1665730439415274, "compression_ratio": 1.6666666666666667, "no_speech_prob": 9.459346620133147e-05}, {"id": 1044, "seek": 496488, "start": 4987.96, "end": 4994.32, "text": " Lots of papers will be like, using Fast AI's rule of thumb for embedding sizes is the formula.", "tokens": [15908, 295, 10577, 486, 312, 411, 11, 1228, 15968, 7318, 311, 4978, 295, 9298, 337, 12240, 3584, 11602, 307, 264, 8513, 13], "temperature": 0.0, "avg_logprob": -0.1665730439415274, "compression_ratio": 1.6666666666666667, "no_speech_prob": 9.459346620133147e-05}, {"id": 1045, "seek": 499432, "start": 4994.32, "end": 4999.2, "text": " Cool, thank you.", "tokens": [8561, 11, 1309, 291, 13], "temperature": 0.0, "avg_logprob": -0.1630720379708827, "compression_ratio": 1.7966101694915255, "no_speech_prob": 0.00017346569802612066}, {"id": 1046, "seek": 499432, "start": 4999.2, "end": 5003.96, "text": " It's pretty fast to train these things, so you can try a few.", "tokens": [467, 311, 1238, 2370, 281, 3847, 613, 721, 11, 370, 291, 393, 853, 257, 1326, 13], "temperature": 0.0, "avg_logprob": -0.1630720379708827, "compression_ratio": 1.7966101694915255, "no_speech_prob": 0.00017346569802612066}, {"id": 1047, "seek": 499432, "start": 5003.96, "end": 5008.96, "text": " So we've got to create, so the number of users is just the length of how many users there", "tokens": [407, 321, 600, 658, 281, 1884, 11, 370, 264, 1230, 295, 5022, 307, 445, 264, 4641, 295, 577, 867, 5022, 456], "temperature": 0.0, "avg_logprob": -0.1630720379708827, "compression_ratio": 1.7966101694915255, "no_speech_prob": 0.00017346569802612066}, {"id": 1048, "seek": 499432, "start": 5008.96, "end": 5012.12, "text": " are, number of movies is the length of how many titles there are.", "tokens": [366, 11, 1230, 295, 6233, 307, 264, 4641, 295, 577, 867, 12992, 456, 366, 13], "temperature": 0.0, "avg_logprob": -0.1630720379708827, "compression_ratio": 1.7966101694915255, "no_speech_prob": 0.00017346569802612066}, {"id": 1049, "seek": 499432, "start": 5012.12, "end": 5023.32, "text": " So create a matrix of random numbers of users by five and movies of movies by five.", "tokens": [407, 1884, 257, 8141, 295, 4974, 3547, 295, 5022, 538, 1732, 293, 6233, 295, 6233, 538, 1732, 13], "temperature": 0.0, "avg_logprob": -0.1630720379708827, "compression_ratio": 1.7966101694915255, "no_speech_prob": 0.00017346569802612066}, {"id": 1050, "seek": 502332, "start": 5023.32, "end": 5030.0, "text": " And now we need to look up the index of the movie in our movie latent factor matrix.", "tokens": [400, 586, 321, 643, 281, 574, 493, 264, 8186, 295, 264, 3169, 294, 527, 3169, 48994, 5952, 8141, 13], "temperature": 0.0, "avg_logprob": -0.10334847337108548, "compression_ratio": 1.54, "no_speech_prob": 1.4494104107143357e-05}, {"id": 1051, "seek": 502332, "start": 5030.0, "end": 5038.5199999999995, "text": " The thing is, when we've learned about deep learning, we learned that we do matrix multiplications,", "tokens": [440, 551, 307, 11, 562, 321, 600, 3264, 466, 2452, 2539, 11, 321, 3264, 300, 321, 360, 8141, 17596, 763, 11], "temperature": 0.0, "avg_logprob": -0.10334847337108548, "compression_ratio": 1.54, "no_speech_prob": 1.4494104107143357e-05}, {"id": 1052, "seek": 502332, "start": 5038.5199999999995, "end": 5043.66, "text": " not look something up in a matrix in an array.", "tokens": [406, 574, 746, 493, 294, 257, 8141, 294, 364, 10225, 13], "temperature": 0.0, "avg_logprob": -0.10334847337108548, "compression_ratio": 1.54, "no_speech_prob": 1.4494104107143357e-05}, {"id": 1053, "seek": 504366, "start": 5043.66, "end": 5055.0, "text": " So in Excel we were saying offset, which is to say find element number 14 in the table,", "tokens": [407, 294, 19060, 321, 645, 1566, 18687, 11, 597, 307, 281, 584, 915, 4478, 1230, 3499, 294, 264, 3199, 11], "temperature": 0.0, "avg_logprob": -0.15577400724093118, "compression_ratio": 1.2330827067669172, "no_speech_prob": 4.221682047500508e-06}, {"id": 1054, "seek": 504366, "start": 5055.0, "end": 5059.12, "text": " which that's not a matrix multiply.", "tokens": [597, 300, 311, 406, 257, 8141, 12972, 13], "temperature": 0.0, "avg_logprob": -0.15577400724093118, "compression_ratio": 1.2330827067669172, "no_speech_prob": 4.221682047500508e-06}, {"id": 1055, "seek": 504366, "start": 5059.12, "end": 5061.12, "text": " How does that work?", "tokens": [1012, 775, 300, 589, 30], "temperature": 0.0, "avg_logprob": -0.15577400724093118, "compression_ratio": 1.2330827067669172, "no_speech_prob": 4.221682047500508e-06}, {"id": 1056, "seek": 504366, "start": 5061.12, "end": 5064.2, "text": " Well actually it is.", "tokens": [1042, 767, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.15577400724093118, "compression_ratio": 1.2330827067669172, "no_speech_prob": 4.221682047500508e-06}, {"id": 1057, "seek": 506420, "start": 5064.2, "end": 5076.179999999999, "text": " It actually is for the same reason that we talked about here, which is we can represent", "tokens": [467, 767, 307, 337, 264, 912, 1778, 300, 321, 2825, 466, 510, 11, 597, 307, 321, 393, 2906], "temperature": 0.0, "avg_logprob": -0.11952395439147949, "compression_ratio": 1.4525547445255473, "no_speech_prob": 7.182241006375989e-06}, {"id": 1058, "seek": 506420, "start": 5076.179999999999, "end": 5085.88, "text": " find the element number one thing in this list is actually the same as multiplying by", "tokens": [915, 264, 4478, 1230, 472, 551, 294, 341, 1329, 307, 767, 264, 912, 382, 30955, 538], "temperature": 0.0, "avg_logprob": -0.11952395439147949, "compression_ratio": 1.4525547445255473, "no_speech_prob": 7.182241006375989e-06}, {"id": 1059, "seek": 506420, "start": 5085.88, "end": 5088.3, "text": " a one-hot encoded matrix.", "tokens": [257, 472, 12, 12194, 2058, 12340, 8141, 13], "temperature": 0.0, "avg_logprob": -0.11952395439147949, "compression_ratio": 1.4525547445255473, "no_speech_prob": 7.182241006375989e-06}, {"id": 1060, "seek": 508830, "start": 5088.3, "end": 5099.64, "text": " So remember how if we, let's just take off the log for a moment.", "tokens": [407, 1604, 577, 498, 321, 11, 718, 311, 445, 747, 766, 264, 3565, 337, 257, 1623, 13], "temperature": 0.0, "avg_logprob": -0.1763160170578375, "compression_ratio": 1.4705882352941178, "no_speech_prob": 4.356766112323385e-06}, {"id": 1061, "seek": 508830, "start": 5099.64, "end": 5106.12, "text": " Look this is returned 0.87, and particularly if I take the negative off here if I add this", "tokens": [2053, 341, 307, 8752, 1958, 13, 23853, 11, 293, 4098, 498, 286, 747, 264, 3671, 766, 510, 498, 286, 909, 341], "temperature": 0.0, "avg_logprob": -0.1763160170578375, "compression_ratio": 1.4705882352941178, "no_speech_prob": 4.356766112323385e-06}, {"id": 1062, "seek": 508830, "start": 5106.12, "end": 5108.12, "text": " up.", "tokens": [493, 13], "temperature": 0.0, "avg_logprob": -0.1763160170578375, "compression_ratio": 1.4705882352941178, "no_speech_prob": 4.356766112323385e-06}, {"id": 1063, "seek": 508830, "start": 5108.12, "end": 5114.92, "text": " This is 0.87, which is the result of finding the index number one thing in this list.", "tokens": [639, 307, 1958, 13, 23853, 11, 597, 307, 264, 1874, 295, 5006, 264, 8186, 1230, 472, 551, 294, 341, 1329, 13], "temperature": 0.0, "avg_logprob": -0.1763160170578375, "compression_ratio": 1.4705882352941178, "no_speech_prob": 4.356766112323385e-06}, {"id": 1064, "seek": 508830, "start": 5114.92, "end": 5116.16, "text": " But we didn't do it that way.", "tokens": [583, 321, 994, 380, 360, 309, 300, 636, 13], "temperature": 0.0, "avg_logprob": -0.1763160170578375, "compression_ratio": 1.4705882352941178, "no_speech_prob": 4.356766112323385e-06}, {"id": 1065, "seek": 511616, "start": 5116.16, "end": 5124.84, "text": " We did this by taking the dot product of this and this.", "tokens": [492, 630, 341, 538, 1940, 264, 5893, 1674, 295, 341, 293, 341, 13], "temperature": 0.0, "avg_logprob": -0.10403289292988024, "compression_ratio": 1.5714285714285714, "no_speech_prob": 6.240646143851336e-06}, {"id": 1066, "seek": 511616, "start": 5124.84, "end": 5127.22, "text": " But that's actually the same thing.", "tokens": [583, 300, 311, 767, 264, 912, 551, 13], "temperature": 0.0, "avg_logprob": -0.10403289292988024, "compression_ratio": 1.5714285714285714, "no_speech_prob": 6.240646143851336e-06}, {"id": 1067, "seek": 511616, "start": 5127.22, "end": 5134.32, "text": " Taking the dot product of a one-hot encoded vector with something is the same as looking", "tokens": [17837, 264, 5893, 1674, 295, 257, 472, 12, 12194, 2058, 12340, 8062, 365, 746, 307, 264, 912, 382, 1237], "temperature": 0.0, "avg_logprob": -0.10403289292988024, "compression_ratio": 1.5714285714285714, "no_speech_prob": 6.240646143851336e-06}, {"id": 1068, "seek": 511616, "start": 5134.32, "end": 5138.5199999999995, "text": " up this index in the vector.", "tokens": [493, 341, 8186, 294, 264, 8062, 13], "temperature": 0.0, "avg_logprob": -0.10403289292988024, "compression_ratio": 1.5714285714285714, "no_speech_prob": 6.240646143851336e-06}, {"id": 1069, "seek": 513852, "start": 5138.52, "end": 5148.240000000001, "text": " So that means that this exercise here of looking up the 14th thing is the same as doing a matrix", "tokens": [407, 300, 1355, 300, 341, 5380, 510, 295, 1237, 493, 264, 3499, 392, 551, 307, 264, 912, 382, 884, 257, 8141], "temperature": 0.0, "avg_logprob": -0.0933238282988343, "compression_ratio": 1.6153846153846154, "no_speech_prob": 8.578903134548455e-07}, {"id": 1070, "seek": 513852, "start": 5148.240000000001, "end": 5151.820000000001, "text": " multiply with a one-hot encoded vector.", "tokens": [12972, 365, 257, 472, 12, 12194, 2058, 12340, 8062, 13], "temperature": 0.0, "avg_logprob": -0.0933238282988343, "compression_ratio": 1.6153846153846154, "no_speech_prob": 8.578903134548455e-07}, {"id": 1071, "seek": 513852, "start": 5151.820000000001, "end": 5162.580000000001, "text": " And we can see that here, this is how we create a one-hot encoded vector of length and users", "tokens": [400, 321, 393, 536, 300, 510, 11, 341, 307, 577, 321, 1884, 257, 472, 12, 12194, 2058, 12340, 8062, 295, 4641, 293, 5022], "temperature": 0.0, "avg_logprob": -0.0933238282988343, "compression_ratio": 1.6153846153846154, "no_speech_prob": 8.578903134548455e-07}, {"id": 1072, "seek": 513852, "start": 5162.580000000001, "end": 5168.040000000001, "text": " in which the third element is set to 1 and everything else is 0.", "tokens": [294, 597, 264, 2636, 4478, 307, 992, 281, 502, 293, 1203, 1646, 307, 1958, 13], "temperature": 0.0, "avg_logprob": -0.0933238282988343, "compression_ratio": 1.6153846153846154, "no_speech_prob": 8.578903134548455e-07}, {"id": 1073, "seek": 516804, "start": 5168.04, "end": 5172.8, "text": " And if we multiply that, so at means, do you remember, matrix multiply in Python.", "tokens": [400, 498, 321, 12972, 300, 11, 370, 412, 1355, 11, 360, 291, 1604, 11, 8141, 12972, 294, 15329, 13], "temperature": 0.0, "avg_logprob": -0.11994892900640314, "compression_ratio": 1.7777777777777777, "no_speech_prob": 9.972298357752152e-06}, {"id": 1074, "seek": 516804, "start": 5172.8, "end": 5178.88, "text": " So if we multiply that by our user factors, we get back this answer.", "tokens": [407, 498, 321, 12972, 300, 538, 527, 4195, 6771, 11, 321, 483, 646, 341, 1867, 13], "temperature": 0.0, "avg_logprob": -0.11994892900640314, "compression_ratio": 1.7777777777777777, "no_speech_prob": 9.972298357752152e-06}, {"id": 1075, "seek": 516804, "start": 5178.88, "end": 5184.32, "text": " And if we just ask for user factors number three, we get back the exact same answer.", "tokens": [400, 498, 321, 445, 1029, 337, 4195, 6771, 1230, 1045, 11, 321, 483, 646, 264, 1900, 912, 1867, 13], "temperature": 0.0, "avg_logprob": -0.11994892900640314, "compression_ratio": 1.7777777777777777, "no_speech_prob": 9.972298357752152e-06}, {"id": 1076, "seek": 516804, "start": 5184.32, "end": 5186.88, "text": " They're the same thing.", "tokens": [814, 434, 264, 912, 551, 13], "temperature": 0.0, "avg_logprob": -0.11994892900640314, "compression_ratio": 1.7777777777777777, "no_speech_prob": 9.972298357752152e-06}, {"id": 1077, "seek": 516804, "start": 5186.88, "end": 5196.04, "text": " So you can think of an embedding as being a computational shortcut for multiplying something", "tokens": [407, 291, 393, 519, 295, 364, 12240, 3584, 382, 885, 257, 28270, 24822, 337, 30955, 746], "temperature": 0.0, "avg_logprob": -0.11994892900640314, "compression_ratio": 1.7777777777777777, "no_speech_prob": 9.972298357752152e-06}, {"id": 1078, "seek": 519604, "start": 5196.04, "end": 5199.08, "text": " by a one-hot encoded vector.", "tokens": [538, 257, 472, 12, 12194, 2058, 12340, 8062, 13], "temperature": 0.0, "avg_logprob": -0.10089692508473116, "compression_ratio": 1.7736842105263158, "no_speech_prob": 6.339144420053344e-06}, {"id": 1079, "seek": 519604, "start": 5199.08, "end": 5205.48, "text": " And so if you think back to what we did with dummy variables, this basically means embeddings", "tokens": [400, 370, 498, 291, 519, 646, 281, 437, 321, 630, 365, 35064, 9102, 11, 341, 1936, 1355, 12240, 29432], "temperature": 0.0, "avg_logprob": -0.10089692508473116, "compression_ratio": 1.7736842105263158, "no_speech_prob": 6.339144420053344e-06}, {"id": 1080, "seek": 519604, "start": 5205.48, "end": 5213.24, "text": " are like a cool math trick for speeding up doing matrix multipliers with dummy variables.", "tokens": [366, 411, 257, 1627, 5221, 4282, 337, 35593, 493, 884, 8141, 12788, 4890, 365, 35064, 9102, 13], "temperature": 0.0, "avg_logprob": -0.10089692508473116, "compression_ratio": 1.7736842105263158, "no_speech_prob": 6.339144420053344e-06}, {"id": 1081, "seek": 519604, "start": 5213.24, "end": 5216.58, "text": " Not just speeding up, we never even have to create the dummy variables.", "tokens": [1726, 445, 35593, 493, 11, 321, 1128, 754, 362, 281, 1884, 264, 35064, 9102, 13], "temperature": 0.0, "avg_logprob": -0.10089692508473116, "compression_ratio": 1.7736842105263158, "no_speech_prob": 6.339144420053344e-06}, {"id": 1082, "seek": 519604, "start": 5216.58, "end": 5219.96, "text": " We never have to create the one-hot encoded vectors.", "tokens": [492, 1128, 362, 281, 1884, 264, 472, 12, 12194, 2058, 12340, 18875, 13], "temperature": 0.0, "avg_logprob": -0.10089692508473116, "compression_ratio": 1.7736842105263158, "no_speech_prob": 6.339144420053344e-06}, {"id": 1083, "seek": 521996, "start": 5219.96, "end": 5228.0, "text": " We can just look up in an array.", "tokens": [492, 393, 445, 574, 493, 294, 364, 10225, 13], "temperature": 0.0, "avg_logprob": -0.17446863651275635, "compression_ratio": 1.264957264957265, "no_speech_prob": 3.0894439078110736e-06}, {"id": 1084, "seek": 521996, "start": 5228.0, "end": 5233.04, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.17446863651275635, "compression_ratio": 1.264957264957265, "no_speech_prob": 3.0894439078110736e-06}, {"id": 1085, "seek": 521996, "start": 5233.04, "end": 5239.32, "text": " So we're now ready to build a collaborative filtering model.", "tokens": [407, 321, 434, 586, 1919, 281, 1322, 257, 16555, 30822, 2316, 13], "temperature": 0.0, "avg_logprob": -0.17446863651275635, "compression_ratio": 1.264957264957265, "no_speech_prob": 3.0894439078110736e-06}, {"id": 1086, "seek": 521996, "start": 5239.32, "end": 5244.88, "text": " And we're going to create one from scratch.", "tokens": [400, 321, 434, 516, 281, 1884, 472, 490, 8459, 13], "temperature": 0.0, "avg_logprob": -0.17446863651275635, "compression_ratio": 1.264957264957265, "no_speech_prob": 3.0894439078110736e-06}, {"id": 1087, "seek": 524488, "start": 5244.88, "end": 5257.0, "text": " And as we've discussed before, in PyTorch, a model is a class.", "tokens": [400, 382, 321, 600, 7152, 949, 11, 294, 9953, 51, 284, 339, 11, 257, 2316, 307, 257, 1508, 13], "temperature": 0.0, "avg_logprob": -0.12366233727870843, "compression_ratio": 1.4709302325581395, "no_speech_prob": 5.014649559598183e-06}, {"id": 1088, "seek": 524488, "start": 5257.0, "end": 5260.28, "text": " And so we briefly touched on this, but I've got to touch on it again.", "tokens": [400, 370, 321, 10515, 9828, 322, 341, 11, 457, 286, 600, 658, 281, 2557, 322, 309, 797, 13], "temperature": 0.0, "avg_logprob": -0.12366233727870843, "compression_ratio": 1.4709302325581395, "no_speech_prob": 5.014649559598183e-06}, {"id": 1089, "seek": 524488, "start": 5260.28, "end": 5265.52, "text": " This is how we create a class in Python.", "tokens": [639, 307, 577, 321, 1884, 257, 1508, 294, 15329, 13], "temperature": 0.0, "avg_logprob": -0.12366233727870843, "compression_ratio": 1.4709302325581395, "no_speech_prob": 5.014649559598183e-06}, {"id": 1090, "seek": 524488, "start": 5265.52, "end": 5271.9400000000005, "text": " You give it a name, and then you say how to initialize it, how to construct it.", "tokens": [509, 976, 309, 257, 1315, 11, 293, 550, 291, 584, 577, 281, 5883, 1125, 309, 11, 577, 281, 7690, 309, 13], "temperature": 0.0, "avg_logprob": -0.12366233727870843, "compression_ratio": 1.4709302325581395, "no_speech_prob": 5.014649559598183e-06}, {"id": 1091, "seek": 527194, "start": 5271.94, "end": 5277.16, "text": " So in Python, remember they call these things Dunder, whatever, this is DunderEdit.", "tokens": [407, 294, 15329, 11, 1604, 436, 818, 613, 721, 413, 6617, 11, 2035, 11, 341, 307, 413, 6617, 36, 17975, 13], "temperature": 0.0, "avg_logprob": -0.13152558776153916, "compression_ratio": 1.613861386138614, "no_speech_prob": 1.0129245310963597e-05}, {"id": 1092, "seek": 527194, "start": 5277.16, "end": 5283.599999999999, "text": " These are magic methods that Python will call for you at certain times.", "tokens": [1981, 366, 5585, 7150, 300, 15329, 486, 818, 337, 291, 412, 1629, 1413, 13], "temperature": 0.0, "avg_logprob": -0.13152558776153916, "compression_ratio": 1.613861386138614, "no_speech_prob": 1.0129245310963597e-05}, {"id": 1093, "seek": 527194, "start": 5283.599999999999, "end": 5291.839999999999, "text": " The method called DunderEdit is called when you create an object of this class.", "tokens": [440, 3170, 1219, 413, 6617, 36, 17975, 307, 1219, 562, 291, 1884, 364, 2657, 295, 341, 1508, 13], "temperature": 0.0, "avg_logprob": -0.13152558776153916, "compression_ratio": 1.613861386138614, "no_speech_prob": 1.0129245310963597e-05}, {"id": 1094, "seek": 527194, "start": 5291.839999999999, "end": 5294.98, "text": " So we could pass it a value.", "tokens": [407, 321, 727, 1320, 309, 257, 2158, 13], "temperature": 0.0, "avg_logprob": -0.13152558776153916, "compression_ratio": 1.613861386138614, "no_speech_prob": 1.0129245310963597e-05}, {"id": 1095, "seek": 527194, "start": 5294.98, "end": 5300.5599999999995, "text": " And so now we set the attribute called a equal to that value.", "tokens": [400, 370, 586, 321, 992, 264, 19667, 1219, 257, 2681, 281, 300, 2158, 13], "temperature": 0.0, "avg_logprob": -0.13152558776153916, "compression_ratio": 1.613861386138614, "no_speech_prob": 1.0129245310963597e-05}, {"id": 1096, "seek": 530056, "start": 5300.56, "end": 5307.0, "text": " And so then later on, we could call a method called say that will say hello to whatever", "tokens": [400, 370, 550, 1780, 322, 11, 321, 727, 818, 257, 3170, 1219, 584, 300, 486, 584, 7751, 281, 2035], "temperature": 0.0, "avg_logprob": -0.14531762927186256, "compression_ratio": 1.7208121827411167, "no_speech_prob": 8.013110345927998e-06}, {"id": 1097, "seek": 530056, "start": 5307.0, "end": 5309.04, "text": " you passed in here.", "tokens": [291, 4678, 294, 510, 13], "temperature": 0.0, "avg_logprob": -0.14531762927186256, "compression_ratio": 1.7208121827411167, "no_speech_prob": 8.013110345927998e-06}, {"id": 1098, "seek": 530056, "start": 5309.04, "end": 5311.280000000001, "text": " And this is what it will say.", "tokens": [400, 341, 307, 437, 309, 486, 584, 13], "temperature": 0.0, "avg_logprob": -0.14531762927186256, "compression_ratio": 1.7208121827411167, "no_speech_prob": 8.013110345927998e-06}, {"id": 1099, "seek": 530056, "start": 5311.280000000001, "end": 5318.4800000000005, "text": " So for example, if you construct an object of type example, passing in Sylvain, self.a", "tokens": [407, 337, 1365, 11, 498, 291, 7690, 364, 2657, 295, 2010, 1365, 11, 8437, 294, 3902, 14574, 491, 11, 2698, 13, 64], "temperature": 0.0, "avg_logprob": -0.14531762927186256, "compression_ratio": 1.7208121827411167, "no_speech_prob": 8.013110345927998e-06}, {"id": 1100, "seek": 530056, "start": 5318.4800000000005, "end": 5320.1, "text": " now equals Sylvain.", "tokens": [586, 6915, 3902, 14574, 491, 13], "temperature": 0.0, "avg_logprob": -0.14531762927186256, "compression_ratio": 1.7208121827411167, "no_speech_prob": 8.013110345927998e-06}, {"id": 1101, "seek": 530056, "start": 5320.1, "end": 5325.8, "text": " So if you use the dot method, the dot say method, nice to meet you, x is now nice to", "tokens": [407, 498, 291, 764, 264, 5893, 3170, 11, 264, 5893, 584, 3170, 11, 1481, 281, 1677, 291, 11, 2031, 307, 586, 1481, 281], "temperature": 0.0, "avg_logprob": -0.14531762927186256, "compression_ratio": 1.7208121827411167, "no_speech_prob": 8.013110345927998e-06}, {"id": 1102, "seek": 530056, "start": 5325.8, "end": 5326.8, "text": " meet you.", "tokens": [1677, 291, 13], "temperature": 0.0, "avg_logprob": -0.14531762927186256, "compression_ratio": 1.7208121827411167, "no_speech_prob": 8.013110345927998e-06}, {"id": 1103, "seek": 532680, "start": 5326.8, "end": 5333.0, "text": " So it will say hello, Sylvain, nice to meet you.", "tokens": [407, 309, 486, 584, 7751, 11, 3902, 14574, 491, 11, 1481, 281, 1677, 291, 13], "temperature": 0.0, "avg_logprob": -0.20496996966275302, "compression_ratio": 1.5073891625615763, "no_speech_prob": 8.397614692512434e-06}, {"id": 1104, "seek": 532680, "start": 5333.0, "end": 5339.08, "text": " So that's kind of all you need to know about object oriented programming in PyTorch to", "tokens": [407, 300, 311, 733, 295, 439, 291, 643, 281, 458, 466, 2657, 21841, 9410, 294, 9953, 51, 284, 339, 281], "temperature": 0.0, "avg_logprob": -0.20496996966275302, "compression_ratio": 1.5073891625615763, "no_speech_prob": 8.397614692512434e-06}, {"id": 1105, "seek": 532680, "start": 5339.08, "end": 5341.6, "text": " create a model.", "tokens": [1884, 257, 2316, 13], "temperature": 0.0, "avg_logprob": -0.20496996966275302, "compression_ratio": 1.5073891625615763, "no_speech_prob": 8.397614692512434e-06}, {"id": 1106, "seek": 532680, "start": 5341.6, "end": 5348.52, "text": " Oh, there is one more thing we need to know, sorry, which is you can put something in parentheses", "tokens": [876, 11, 456, 307, 472, 544, 551, 321, 643, 281, 458, 11, 2597, 11, 597, 307, 291, 393, 829, 746, 294, 34153], "temperature": 0.0, "avg_logprob": -0.20496996966275302, "compression_ratio": 1.5073891625615763, "no_speech_prob": 8.397614692512434e-06}, {"id": 1107, "seek": 532680, "start": 5348.52, "end": 5350.12, "text": " after your class name.", "tokens": [934, 428, 1508, 1315, 13], "temperature": 0.0, "avg_logprob": -0.20496996966275302, "compression_ratio": 1.5073891625615763, "no_speech_prob": 8.397614692512434e-06}, {"id": 1108, "seek": 532680, "start": 5350.12, "end": 5352.4400000000005, "text": " And that's called the superclass.", "tokens": [400, 300, 311, 1219, 264, 1687, 11665, 13], "temperature": 0.0, "avg_logprob": -0.20496996966275302, "compression_ratio": 1.5073891625615763, "no_speech_prob": 8.397614692512434e-06}, {"id": 1109, "seek": 535244, "start": 5352.44, "end": 5357.5599999999995, "text": " It's basically going to give you some stuff for free, give you some functionality for", "tokens": [467, 311, 1936, 516, 281, 976, 291, 512, 1507, 337, 1737, 11, 976, 291, 512, 14980, 337], "temperature": 0.0, "avg_logprob": -0.13457218293220766, "compression_ratio": 1.5913461538461537, "no_speech_prob": 8.528370926796924e-06}, {"id": 1110, "seek": 535244, "start": 5357.5599999999995, "end": 5358.5599999999995, "text": " free.", "tokens": [1737, 13], "temperature": 0.0, "avg_logprob": -0.13457218293220766, "compression_ratio": 1.5913461538461537, "no_speech_prob": 8.528370926796924e-06}, {"id": 1111, "seek": 535244, "start": 5358.5599999999995, "end": 5367.839999999999, "text": " And if you create a model in PyTorch, you have to make module your superclass.", "tokens": [400, 498, 291, 1884, 257, 2316, 294, 9953, 51, 284, 339, 11, 291, 362, 281, 652, 10088, 428, 1687, 11665, 13], "temperature": 0.0, "avg_logprob": -0.13457218293220766, "compression_ratio": 1.5913461538461537, "no_speech_prob": 8.528370926796924e-06}, {"id": 1112, "seek": 535244, "start": 5367.839999999999, "end": 5373.82, "text": " This is actually fast AI's version of module, but it's nearly the same as PyTorch's.", "tokens": [639, 307, 767, 2370, 7318, 311, 3037, 295, 10088, 11, 457, 309, 311, 6217, 264, 912, 382, 9953, 51, 284, 339, 311, 13], "temperature": 0.0, "avg_logprob": -0.13457218293220766, "compression_ratio": 1.5913461538461537, "no_speech_prob": 8.528370926796924e-06}, {"id": 1113, "seek": 535244, "start": 5373.82, "end": 5378.599999999999, "text": " So when we create this dot product object, it's going to call done to edit.", "tokens": [407, 562, 321, 1884, 341, 5893, 1674, 2657, 11, 309, 311, 516, 281, 818, 1096, 281, 8129, 13], "temperature": 0.0, "avg_logprob": -0.13457218293220766, "compression_ratio": 1.5913461538461537, "no_speech_prob": 8.528370926796924e-06}, {"id": 1114, "seek": 537860, "start": 5378.6, "end": 5383.6, "text": " And we have to say, well, how many users are going to be in our model and how many movies", "tokens": [400, 321, 362, 281, 584, 11, 731, 11, 577, 867, 5022, 366, 516, 281, 312, 294, 527, 2316, 293, 577, 867, 6233], "temperature": 0.0, "avg_logprob": -0.10471969427064408, "compression_ratio": 1.7624309392265194, "no_speech_prob": 4.637745860236464e-06}, {"id": 1115, "seek": 537860, "start": 5383.6, "end": 5385.620000000001, "text": " and how many factors?", "tokens": [293, 577, 867, 6771, 30], "temperature": 0.0, "avg_logprob": -0.10471969427064408, "compression_ratio": 1.7624309392265194, "no_speech_prob": 4.637745860236464e-06}, {"id": 1116, "seek": 537860, "start": 5385.620000000001, "end": 5392.120000000001, "text": " And so we can now create an embedding of users by factors for users and an embedding of movies", "tokens": [400, 370, 321, 393, 586, 1884, 364, 12240, 3584, 295, 5022, 538, 6771, 337, 5022, 293, 364, 12240, 3584, 295, 6233], "temperature": 0.0, "avg_logprob": -0.10471969427064408, "compression_ratio": 1.7624309392265194, "no_speech_prob": 4.637745860236464e-06}, {"id": 1117, "seek": 537860, "start": 5392.120000000001, "end": 5395.4400000000005, "text": " by factors for movies.", "tokens": [538, 6771, 337, 6233, 13], "temperature": 0.0, "avg_logprob": -0.10471969427064408, "compression_ratio": 1.7624309392265194, "no_speech_prob": 4.637745860236464e-06}, {"id": 1118, "seek": 537860, "start": 5395.4400000000005, "end": 5405.84, "text": " And so then PyTorch does something quite magic, which is that if you create a dot product", "tokens": [400, 370, 550, 9953, 51, 284, 339, 775, 746, 1596, 5585, 11, 597, 307, 300, 498, 291, 1884, 257, 5893, 1674], "temperature": 0.0, "avg_logprob": -0.10471969427064408, "compression_ratio": 1.7624309392265194, "no_speech_prob": 4.637745860236464e-06}, {"id": 1119, "seek": 540584, "start": 5405.84, "end": 5411.2, "text": " object like so, then you can treat it like a function.", "tokens": [2657, 411, 370, 11, 550, 291, 393, 2387, 309, 411, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.12843304235958358, "compression_ratio": 1.6964285714285714, "no_speech_prob": 3.6686969906440936e-06}, {"id": 1120, "seek": 540584, "start": 5411.2, "end": 5414.84, "text": " You can call it and calculate values on it.", "tokens": [509, 393, 818, 309, 293, 8873, 4190, 322, 309, 13], "temperature": 0.0, "avg_logprob": -0.12843304235958358, "compression_ratio": 1.6964285714285714, "no_speech_prob": 3.6686969906440936e-06}, {"id": 1121, "seek": 540584, "start": 5414.84, "end": 5420.92, "text": " And when you do that, it's really important to know PyTorch is going to call a method", "tokens": [400, 562, 291, 360, 300, 11, 309, 311, 534, 1021, 281, 458, 9953, 51, 284, 339, 307, 516, 281, 818, 257, 3170], "temperature": 0.0, "avg_logprob": -0.12843304235958358, "compression_ratio": 1.6964285714285714, "no_speech_prob": 3.6686969906440936e-06}, {"id": 1122, "seek": 540584, "start": 5420.92, "end": 5423.64, "text": " called forward in your class.", "tokens": [1219, 2128, 294, 428, 1508, 13], "temperature": 0.0, "avg_logprob": -0.12843304235958358, "compression_ratio": 1.6964285714285714, "no_speech_prob": 3.6686969906440936e-06}, {"id": 1123, "seek": 540584, "start": 5423.64, "end": 5425.84, "text": " So this is where you put your calculation of your model.", "tokens": [407, 341, 307, 689, 291, 829, 428, 17108, 295, 428, 2316, 13], "temperature": 0.0, "avg_logprob": -0.12843304235958358, "compression_ratio": 1.6964285714285714, "no_speech_prob": 3.6686969906440936e-06}, {"id": 1124, "seek": 540584, "start": 5425.84, "end": 5432.64, "text": " It has to be called forward and it's going to be past the object itself and the thing", "tokens": [467, 575, 281, 312, 1219, 2128, 293, 309, 311, 516, 281, 312, 1791, 264, 2657, 2564, 293, 264, 551], "temperature": 0.0, "avg_logprob": -0.12843304235958358, "compression_ratio": 1.6964285714285714, "no_speech_prob": 3.6686969906440936e-06}, {"id": 1125, "seek": 540584, "start": 5432.64, "end": 5434.16, "text": " you're calculating on.", "tokens": [291, 434, 28258, 322, 13], "temperature": 0.0, "avg_logprob": -0.12843304235958358, "compression_ratio": 1.6964285714285714, "no_speech_prob": 3.6686969906440936e-06}, {"id": 1126, "seek": 543416, "start": 5434.16, "end": 5443.76, "text": " In this case, the user and movie for a batch.", "tokens": [682, 341, 1389, 11, 264, 4195, 293, 3169, 337, 257, 15245, 13], "temperature": 0.0, "avg_logprob": -0.1499171257019043, "compression_ratio": 1.5426356589147288, "no_speech_prob": 5.337871698429808e-06}, {"id": 1127, "seek": 543416, "start": 5443.76, "end": 5446.08, "text": " So this is your batch of data.", "tokens": [407, 341, 307, 428, 15245, 295, 1412, 13], "temperature": 0.0, "avg_logprob": -0.1499171257019043, "compression_ratio": 1.5426356589147288, "no_speech_prob": 5.337871698429808e-06}, {"id": 1128, "seek": 543416, "start": 5446.08, "end": 5453.66, "text": " Each row will be one user and movie combination and the columns will be users and movies.", "tokens": [6947, 5386, 486, 312, 472, 4195, 293, 3169, 6562, 293, 264, 13766, 486, 312, 5022, 293, 6233, 13], "temperature": 0.0, "avg_logprob": -0.1499171257019043, "compression_ratio": 1.5426356589147288, "no_speech_prob": 5.337871698429808e-06}, {"id": 1129, "seek": 543416, "start": 5453.66, "end": 5458.4, "text": " So we can grab the first column.", "tokens": [407, 321, 393, 4444, 264, 700, 7738, 13], "temperature": 0.0, "avg_logprob": -0.1499171257019043, "compression_ratio": 1.5426356589147288, "no_speech_prob": 5.337871698429808e-06}, {"id": 1130, "seek": 545840, "start": 5458.4, "end": 5465.04, "text": " This is every row of the first column and look it up in the user factors embedding to", "tokens": [639, 307, 633, 5386, 295, 264, 700, 7738, 293, 574, 309, 493, 294, 264, 4195, 6771, 12240, 3584, 281], "temperature": 0.0, "avg_logprob": -0.12586178890494412, "compression_ratio": 1.6470588235294117, "no_speech_prob": 1.1726274351531174e-06}, {"id": 1131, "seek": 545840, "start": 5465.04, "end": 5468.179999999999, "text": " get our users embeddings.", "tokens": [483, 527, 5022, 12240, 29432, 13], "temperature": 0.0, "avg_logprob": -0.12586178890494412, "compression_ratio": 1.6470588235294117, "no_speech_prob": 1.1726274351531174e-06}, {"id": 1132, "seek": 545840, "start": 5468.179999999999, "end": 5472.0, "text": " So that is the same as doing this.", "tokens": [407, 300, 307, 264, 912, 382, 884, 341, 13], "temperature": 0.0, "avg_logprob": -0.12586178890494412, "compression_ratio": 1.6470588235294117, "no_speech_prob": 1.1726274351531174e-06}, {"id": 1133, "seek": 545840, "start": 5472.0, "end": 5475.5, "text": " Let's say this is one mini-batch.", "tokens": [961, 311, 584, 341, 307, 472, 8382, 12, 65, 852, 13], "temperature": 0.0, "avg_logprob": -0.12586178890494412, "compression_ratio": 1.6470588235294117, "no_speech_prob": 1.1726274351531174e-06}, {"id": 1134, "seek": 545840, "start": 5475.5, "end": 5481.12, "text": " And then we do exactly the same thing for the second column, passing it into our movie", "tokens": [400, 550, 321, 360, 2293, 264, 912, 551, 337, 264, 1150, 7738, 11, 8437, 309, 666, 527, 3169], "temperature": 0.0, "avg_logprob": -0.12586178890494412, "compression_ratio": 1.6470588235294117, "no_speech_prob": 1.1726274351531174e-06}, {"id": 1135, "seek": 545840, "start": 5481.12, "end": 5484.96, "text": " factors to look up the movie embeddings.", "tokens": [6771, 281, 574, 493, 264, 3169, 12240, 29432, 13], "temperature": 0.0, "avg_logprob": -0.12586178890494412, "compression_ratio": 1.6470588235294117, "no_speech_prob": 1.1726274351531174e-06}, {"id": 1136, "seek": 548496, "start": 5484.96, "end": 5489.4, "text": " And then take the dot product.", "tokens": [400, 550, 747, 264, 5893, 1674, 13], "temperature": 0.0, "avg_logprob": -0.13909026115171372, "compression_ratio": 1.4774193548387098, "no_speech_prob": 4.5655865505978e-06}, {"id": 1137, "seek": 548496, "start": 5489.4, "end": 5495.44, "text": " Dem equals one because we're summing across the columns for each row, we're calculating", "tokens": [4686, 6915, 472, 570, 321, 434, 2408, 2810, 2108, 264, 13766, 337, 1184, 5386, 11, 321, 434, 28258], "temperature": 0.0, "avg_logprob": -0.13909026115171372, "compression_ratio": 1.4774193548387098, "no_speech_prob": 4.5655865505978e-06}, {"id": 1138, "seek": 548496, "start": 5495.44, "end": 5499.64, "text": " a prediction for each row.", "tokens": [257, 17630, 337, 1184, 5386, 13], "temperature": 0.0, "avg_logprob": -0.13909026115171372, "compression_ratio": 1.4774193548387098, "no_speech_prob": 4.5655865505978e-06}, {"id": 1139, "seek": 548496, "start": 5499.64, "end": 5508.08, "text": " So once we've got that, we can pass it to a learner passing in our data loaders and", "tokens": [407, 1564, 321, 600, 658, 300, 11, 321, 393, 1320, 309, 281, 257, 33347, 8437, 294, 527, 1412, 3677, 433, 293], "temperature": 0.0, "avg_logprob": -0.13909026115171372, "compression_ratio": 1.4774193548387098, "no_speech_prob": 4.5655865505978e-06}, {"id": 1140, "seek": 550808, "start": 5508.08, "end": 5520.72, "text": " our model and our loss function mean squared error and we can call fit and away it goes.", "tokens": [527, 2316, 293, 527, 4470, 2445, 914, 8889, 6713, 293, 321, 393, 818, 3318, 293, 1314, 309, 1709, 13], "temperature": 0.0, "avg_logprob": -0.17593103555532602, "compression_ratio": 1.4352941176470588, "no_speech_prob": 7.071641903166892e-06}, {"id": 1141, "seek": 550808, "start": 5520.72, "end": 5525.08, "text": " And this by the way is running on CPU.", "tokens": [400, 341, 538, 264, 636, 307, 2614, 322, 13199, 13], "temperature": 0.0, "avg_logprob": -0.17593103555532602, "compression_ratio": 1.4352941176470588, "no_speech_prob": 7.071641903166892e-06}, {"id": 1142, "seek": 550808, "start": 5525.08, "end": 5527.5599999999995, "text": " These are very fast to run.", "tokens": [1981, 366, 588, 2370, 281, 1190, 13], "temperature": 0.0, "avg_logprob": -0.17593103555532602, "compression_ratio": 1.4352941176470588, "no_speech_prob": 7.071641903166892e-06}, {"id": 1143, "seek": 550808, "start": 5527.5599999999995, "end": 5532.72, "text": " So this is doing a hundred thousand rows in 10 seconds, which is a whole lot faster than", "tokens": [407, 341, 307, 884, 257, 3262, 4714, 13241, 294, 1266, 3949, 11, 597, 307, 257, 1379, 688, 4663, 813], "temperature": 0.0, "avg_logprob": -0.17593103555532602, "compression_ratio": 1.4352941176470588, "no_speech_prob": 7.071641903166892e-06}, {"id": 1144, "seek": 553272, "start": 5532.72, "end": 5538.56, "text": " our few dozen rows in Excel.", "tokens": [527, 1326, 16654, 13241, 294, 19060, 13], "temperature": 0.0, "avg_logprob": -0.1073915537665872, "compression_ratio": 1.4861111111111112, "no_speech_prob": 1.1124631782877259e-05}, {"id": 1145, "seek": 553272, "start": 5538.56, "end": 5540.92, "text": " And so you can see the loss going down.", "tokens": [400, 370, 291, 393, 536, 264, 4470, 516, 760, 13], "temperature": 0.0, "avg_logprob": -0.1073915537665872, "compression_ratio": 1.4861111111111112, "no_speech_prob": 1.1124631782877259e-05}, {"id": 1146, "seek": 553272, "start": 5540.92, "end": 5550.16, "text": " And so we've trained a model.", "tokens": [400, 370, 321, 600, 8895, 257, 2316, 13], "temperature": 0.0, "avg_logprob": -0.1073915537665872, "compression_ratio": 1.4861111111111112, "no_speech_prob": 1.1124631782877259e-05}, {"id": 1147, "seek": 553272, "start": 5550.16, "end": 5553.240000000001, "text": " It's not going to be a great model.", "tokens": [467, 311, 406, 516, 281, 312, 257, 869, 2316, 13], "temperature": 0.0, "avg_logprob": -0.1073915537665872, "compression_ratio": 1.4861111111111112, "no_speech_prob": 1.1124631782877259e-05}, {"id": 1148, "seek": 553272, "start": 5553.240000000001, "end": 5562.240000000001, "text": " And one of the problems is that, let's see if we can see this in our Excel one.", "tokens": [400, 472, 295, 264, 2740, 307, 300, 11, 718, 311, 536, 498, 321, 393, 536, 341, 294, 527, 19060, 472, 13], "temperature": 0.0, "avg_logprob": -0.1073915537665872, "compression_ratio": 1.4861111111111112, "no_speech_prob": 1.1124631782877259e-05}, {"id": 1149, "seek": 556224, "start": 5562.24, "end": 5564.0, "text": " Look at this one here.", "tokens": [2053, 412, 341, 472, 510, 13], "temperature": 0.0, "avg_logprob": -0.16219333280999976, "compression_ratio": 1.6358974358974359, "no_speech_prob": 8.664263077662326e-06}, {"id": 1150, "seek": 556224, "start": 5564.0, "end": 5570.44, "text": " This prediction is bigger than five, but nothing's bigger than five.", "tokens": [639, 17630, 307, 3801, 813, 1732, 11, 457, 1825, 311, 3801, 813, 1732, 13], "temperature": 0.0, "avg_logprob": -0.16219333280999976, "compression_ratio": 1.6358974358974359, "no_speech_prob": 8.664263077662326e-06}, {"id": 1151, "seek": 556224, "start": 5570.44, "end": 5571.92, "text": " So that seems like a problem.", "tokens": [407, 300, 2544, 411, 257, 1154, 13], "temperature": 0.0, "avg_logprob": -0.16219333280999976, "compression_ratio": 1.6358974358974359, "no_speech_prob": 8.664263077662326e-06}, {"id": 1152, "seek": 556224, "start": 5571.92, "end": 5577.08, "text": " We're predicting things that are bigger than the highest possible number.", "tokens": [492, 434, 32884, 721, 300, 366, 3801, 813, 264, 6343, 1944, 1230, 13], "temperature": 0.0, "avg_logprob": -0.16219333280999976, "compression_ratio": 1.6358974358974359, "no_speech_prob": 8.664263077662326e-06}, {"id": 1153, "seek": 556224, "start": 5577.08, "end": 5581.36, "text": " And in fact, these are very much movie enthusiasts.", "tokens": [400, 294, 1186, 11, 613, 366, 588, 709, 3169, 45873, 13], "temperature": 0.0, "avg_logprob": -0.16219333280999976, "compression_ratio": 1.6358974358974359, "no_speech_prob": 8.664263077662326e-06}, {"id": 1154, "seek": 556224, "start": 5581.36, "end": 5583.36, "text": " Nobody gave anything a one.", "tokens": [9297, 2729, 1340, 257, 472, 13], "temperature": 0.0, "avg_logprob": -0.16219333280999976, "compression_ratio": 1.6358974358974359, "no_speech_prob": 8.664263077662326e-06}, {"id": 1155, "seek": 556224, "start": 5583.36, "end": 5587.84, "text": " Yeah, nobody even gave anything a one here.", "tokens": [865, 11, 5079, 754, 2729, 1340, 257, 472, 510, 13], "temperature": 0.0, "avg_logprob": -0.16219333280999976, "compression_ratio": 1.6358974358974359, "no_speech_prob": 8.664263077662326e-06}, {"id": 1156, "seek": 558784, "start": 5587.84, "end": 5595.76, "text": " So do you remember when we learned about sigmoid, the idea of squishing things between zero", "tokens": [407, 360, 291, 1604, 562, 321, 3264, 466, 4556, 3280, 327, 11, 264, 1558, 295, 2339, 3807, 721, 1296, 4018], "temperature": 0.0, "avg_logprob": -0.13025737793977596, "compression_ratio": 1.776470588235294, "no_speech_prob": 9.515965757600497e-06}, {"id": 1157, "seek": 558784, "start": 5595.76, "end": 5601.2, "text": " and one, we could do stuff still without a sigmoid, but when we added a sigmoid, it trained", "tokens": [293, 472, 11, 321, 727, 360, 1507, 920, 1553, 257, 4556, 3280, 327, 11, 457, 562, 321, 3869, 257, 4556, 3280, 327, 11, 309, 8895], "temperature": 0.0, "avg_logprob": -0.13025737793977596, "compression_ratio": 1.776470588235294, "no_speech_prob": 9.515965757600497e-06}, {"id": 1158, "seek": 558784, "start": 5601.2, "end": 5605.64, "text": " better because the model didn't have to work so hard to get it kind of into the right zone.", "tokens": [1101, 570, 264, 2316, 994, 380, 362, 281, 589, 370, 1152, 281, 483, 309, 733, 295, 666, 264, 558, 6668, 13], "temperature": 0.0, "avg_logprob": -0.13025737793977596, "compression_ratio": 1.776470588235294, "no_speech_prob": 9.515965757600497e-06}, {"id": 1159, "seek": 558784, "start": 5605.64, "end": 5610.860000000001, "text": " Now, if you think about it, if you take something and put it through a sigmoid and then model", "tokens": [823, 11, 498, 291, 519, 466, 309, 11, 498, 291, 747, 746, 293, 829, 309, 807, 257, 4556, 3280, 327, 293, 550, 2316], "temperature": 0.0, "avg_logprob": -0.13025737793977596, "compression_ratio": 1.776470588235294, "no_speech_prob": 9.515965757600497e-06}, {"id": 1160, "seek": 558784, "start": 5610.860000000001, "end": 5615.28, "text": " play it by five, now you've got something that's going to be between zero and five.", "tokens": [862, 309, 538, 1732, 11, 586, 291, 600, 658, 746, 300, 311, 516, 281, 312, 1296, 4018, 293, 1732, 13], "temperature": 0.0, "avg_logprob": -0.13025737793977596, "compression_ratio": 1.776470588235294, "no_speech_prob": 9.515965757600497e-06}, {"id": 1161, "seek": 561528, "start": 5615.28, "end": 5618.5199999999995, "text": " You used to have something which was between zero and one.", "tokens": [509, 1143, 281, 362, 746, 597, 390, 1296, 4018, 293, 472, 13], "temperature": 0.0, "avg_logprob": -0.16116388453993685, "compression_ratio": 1.4946236559139785, "no_speech_prob": 7.76640899857739e-06}, {"id": 1162, "seek": 561528, "start": 5618.5199999999995, "end": 5619.5199999999995, "text": " So we could do that.", "tokens": [407, 321, 727, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.16116388453993685, "compression_ratio": 1.4946236559139785, "no_speech_prob": 7.76640899857739e-06}, {"id": 1163, "seek": 561528, "start": 5619.5199999999995, "end": 5622.48, "text": " In fact, we could do that in Excel.", "tokens": [682, 1186, 11, 321, 727, 360, 300, 294, 19060, 13], "temperature": 0.0, "avg_logprob": -0.16116388453993685, "compression_ratio": 1.4946236559139785, "no_speech_prob": 7.76640899857739e-06}, {"id": 1164, "seek": 561528, "start": 5622.48, "end": 5627.12, "text": " I'll leave that as an exercise to the reader.", "tokens": [286, 603, 1856, 300, 382, 364, 5380, 281, 264, 15149, 13], "temperature": 0.0, "avg_logprob": -0.16116388453993685, "compression_ratio": 1.4946236559139785, "no_speech_prob": 7.76640899857739e-06}, {"id": 1165, "seek": 561528, "start": 5627.12, "end": 5633.48, "text": " Let's do it over here in PyTorch.", "tokens": [961, 311, 360, 309, 670, 510, 294, 9953, 51, 284, 339, 13], "temperature": 0.0, "avg_logprob": -0.16116388453993685, "compression_ratio": 1.4946236559139785, "no_speech_prob": 7.76640899857739e-06}, {"id": 1166, "seek": 561528, "start": 5633.48, "end": 5639.4, "text": " So if we take the exact same class as before, and this time we call sigmoid range.", "tokens": [407, 498, 321, 747, 264, 1900, 912, 1508, 382, 949, 11, 293, 341, 565, 321, 818, 4556, 3280, 327, 3613, 13], "temperature": 0.0, "avg_logprob": -0.16116388453993685, "compression_ratio": 1.4946236559139785, "no_speech_prob": 7.76640899857739e-06}, {"id": 1167, "seek": 563940, "start": 5639.4, "end": 5647.679999999999, "text": " And so sigmoid range is something which will take our prediction and then squash it into", "tokens": [400, 370, 4556, 3280, 327, 3613, 307, 746, 597, 486, 747, 527, 17630, 293, 550, 30725, 309, 666], "temperature": 0.0, "avg_logprob": -0.1379707532051282, "compression_ratio": 1.6652173913043478, "no_speech_prob": 7.888969776104204e-06}, {"id": 1168, "seek": 563940, "start": 5647.679999999999, "end": 5648.679999999999, "text": " our range.", "tokens": [527, 3613, 13], "temperature": 0.0, "avg_logprob": -0.1379707532051282, "compression_ratio": 1.6652173913043478, "no_speech_prob": 7.888969776104204e-06}, {"id": 1169, "seek": 563940, "start": 5648.679999999999, "end": 5652.96, "text": " And by default, we'll use a range of zero through to 5.5.", "tokens": [400, 538, 7576, 11, 321, 603, 764, 257, 3613, 295, 4018, 807, 281, 1025, 13, 20, 13], "temperature": 0.0, "avg_logprob": -0.1379707532051282, "compression_ratio": 1.6652173913043478, "no_speech_prob": 7.888969776104204e-06}, {"id": 1170, "seek": 563940, "start": 5652.96, "end": 5656.28, "text": " So it can't be smaller than zero, it can't be bigger than 5.5.", "tokens": [407, 309, 393, 380, 312, 4356, 813, 4018, 11, 309, 393, 380, 312, 3801, 813, 1025, 13, 20, 13], "temperature": 0.0, "avg_logprob": -0.1379707532051282, "compression_ratio": 1.6652173913043478, "no_speech_prob": 7.888969776104204e-06}, {"id": 1171, "seek": 563940, "start": 5656.28, "end": 5659.04, "text": " Why didn't I use five?", "tokens": [1545, 994, 380, 286, 764, 1732, 30], "temperature": 0.0, "avg_logprob": -0.1379707532051282, "compression_ratio": 1.6652173913043478, "no_speech_prob": 7.888969776104204e-06}, {"id": 1172, "seek": 563940, "start": 5659.04, "end": 5662.679999999999, "text": " That's because a sigmoid can never hit one, right?", "tokens": [663, 311, 570, 257, 4556, 3280, 327, 393, 1128, 2045, 472, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1379707532051282, "compression_ratio": 1.6652173913043478, "no_speech_prob": 7.888969776104204e-06}, {"id": 1173, "seek": 563940, "start": 5662.679999999999, "end": 5665.5599999999995, "text": " And a sigmoid times five can never hit five.", "tokens": [400, 257, 4556, 3280, 327, 1413, 1732, 393, 1128, 2045, 1732, 13], "temperature": 0.0, "avg_logprob": -0.1379707532051282, "compression_ratio": 1.6652173913043478, "no_speech_prob": 7.888969776104204e-06}, {"id": 1174, "seek": 563940, "start": 5665.5599999999995, "end": 5668.08, "text": " But some people do give things movies five.", "tokens": [583, 512, 561, 360, 976, 721, 6233, 1732, 13], "temperature": 0.0, "avg_logprob": -0.1379707532051282, "compression_ratio": 1.6652173913043478, "no_speech_prob": 7.888969776104204e-06}, {"id": 1175, "seek": 566808, "start": 5668.08, "end": 5673.16, "text": " So you want to make it a bit bigger than our highest.", "tokens": [407, 291, 528, 281, 652, 309, 257, 857, 3801, 813, 527, 6343, 13], "temperature": 0.0, "avg_logprob": -0.25358489251905875, "compression_ratio": 1.4042553191489362, "no_speech_prob": 1.92129682545783e-05}, {"id": 1176, "seek": 566808, "start": 5673.16, "end": 5676.5199999999995, "text": " So this one got a loss of 0.8628.", "tokens": [407, 341, 472, 658, 257, 4470, 295, 1958, 13, 22193, 11205, 13], "temperature": 0.0, "avg_logprob": -0.25358489251905875, "compression_ratio": 1.4042553191489362, "no_speech_prob": 1.92129682545783e-05}, {"id": 1177, "seek": 566808, "start": 5676.5199999999995, "end": 5680.96, "text": " Oh, it's not better.", "tokens": [876, 11, 309, 311, 406, 1101, 13], "temperature": 0.0, "avg_logprob": -0.25358489251905875, "compression_ratio": 1.4042553191489362, "no_speech_prob": 1.92129682545783e-05}, {"id": 1178, "seek": 566808, "start": 5680.96, "end": 5682.76, "text": " Isn't that always the way?", "tokens": [6998, 380, 300, 1009, 264, 636, 30], "temperature": 0.0, "avg_logprob": -0.25358489251905875, "compression_ratio": 1.4042553191489362, "no_speech_prob": 1.92129682545783e-05}, {"id": 1179, "seek": 566808, "start": 5682.76, "end": 5683.76, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.25358489251905875, "compression_ratio": 1.4042553191489362, "no_speech_prob": 1.92129682545783e-05}, {"id": 1180, "seek": 566808, "start": 5683.76, "end": 5684.76, "text": " Didn't actually help.", "tokens": [11151, 380, 767, 854, 13], "temperature": 0.0, "avg_logprob": -0.25358489251905875, "compression_ratio": 1.4042553191489362, "no_speech_prob": 1.92129682545783e-05}, {"id": 1181, "seek": 566808, "start": 5684.76, "end": 5685.76, "text": " Doesn't always.", "tokens": [12955, 380, 1009, 13], "temperature": 0.0, "avg_logprob": -0.25358489251905875, "compression_ratio": 1.4042553191489362, "no_speech_prob": 1.92129682545783e-05}, {"id": 1182, "seek": 566808, "start": 5685.76, "end": 5686.76, "text": " So be it.", "tokens": [407, 312, 309, 13], "temperature": 0.0, "avg_logprob": -0.25358489251905875, "compression_ratio": 1.4042553191489362, "no_speech_prob": 1.92129682545783e-05}, {"id": 1183, "seek": 566808, "start": 5686.76, "end": 5692.5199999999995, "text": " Let's keep trying to improve it.", "tokens": [961, 311, 1066, 1382, 281, 3470, 309, 13], "temperature": 0.0, "avg_logprob": -0.25358489251905875, "compression_ratio": 1.4042553191489362, "no_speech_prob": 1.92129682545783e-05}, {"id": 1184, "seek": 566808, "start": 5692.5199999999995, "end": 5697.64, "text": " Let me show you something I noticed.", "tokens": [961, 385, 855, 291, 746, 286, 5694, 13], "temperature": 0.0, "avg_logprob": -0.25358489251905875, "compression_ratio": 1.4042553191489362, "no_speech_prob": 1.92129682545783e-05}, {"id": 1185, "seek": 569764, "start": 5697.64, "end": 5702.4800000000005, "text": " Some of the users like this one.", "tokens": [2188, 295, 264, 5022, 411, 341, 472, 13], "temperature": 0.0, "avg_logprob": -0.1263633191006855, "compression_ratio": 1.733009708737864, "no_speech_prob": 1.7230793673661537e-05}, {"id": 1186, "seek": 569764, "start": 5702.4800000000005, "end": 5706.56, "text": " This person here just loves movies.", "tokens": [639, 954, 510, 445, 6752, 6233, 13], "temperature": 0.0, "avg_logprob": -0.1263633191006855, "compression_ratio": 1.733009708737864, "no_speech_prob": 1.7230793673661537e-05}, {"id": 1187, "seek": 569764, "start": 5706.56, "end": 5709.320000000001, "text": " They give nearly everything a four or five.", "tokens": [814, 976, 6217, 1203, 257, 1451, 420, 1732, 13], "temperature": 0.0, "avg_logprob": -0.1263633191006855, "compression_ratio": 1.733009708737864, "no_speech_prob": 1.7230793673661537e-05}, {"id": 1188, "seek": 569764, "start": 5709.320000000001, "end": 5712.6, "text": " Their worst score is a three.", "tokens": [6710, 5855, 6175, 307, 257, 1045, 13], "temperature": 0.0, "avg_logprob": -0.1263633191006855, "compression_ratio": 1.733009708737864, "no_speech_prob": 1.7230793673661537e-05}, {"id": 1189, "seek": 569764, "start": 5712.6, "end": 5713.860000000001, "text": " This person, oh, here's a one.", "tokens": [639, 954, 11, 1954, 11, 510, 311, 257, 472, 13], "temperature": 0.0, "avg_logprob": -0.1263633191006855, "compression_ratio": 1.733009708737864, "no_speech_prob": 1.7230793673661537e-05}, {"id": 1190, "seek": 569764, "start": 5713.860000000001, "end": 5715.56, "text": " This person's got much more range.", "tokens": [639, 954, 311, 658, 709, 544, 3613, 13], "temperature": 0.0, "avg_logprob": -0.1263633191006855, "compression_ratio": 1.733009708737864, "no_speech_prob": 1.7230793673661537e-05}, {"id": 1191, "seek": 569764, "start": 5715.56, "end": 5722.280000000001, "text": " Some things are twos, some ones, some fives.", "tokens": [2188, 721, 366, 683, 329, 11, 512, 2306, 11, 512, 283, 1539, 13], "temperature": 0.0, "avg_logprob": -0.1263633191006855, "compression_ratio": 1.733009708737864, "no_speech_prob": 1.7230793673661537e-05}, {"id": 1192, "seek": 569764, "start": 5722.280000000001, "end": 5725.400000000001, "text": " This person doesn't seem to like movies very much considering how many they watch.", "tokens": [639, 954, 1177, 380, 1643, 281, 411, 6233, 588, 709, 8079, 577, 867, 436, 1159, 13], "temperature": 0.0, "avg_logprob": -0.1263633191006855, "compression_ratio": 1.733009708737864, "no_speech_prob": 1.7230793673661537e-05}, {"id": 1193, "seek": 569764, "start": 5725.400000000001, "end": 5726.400000000001, "text": " Nothing gets a five.", "tokens": [6693, 2170, 257, 1732, 13], "temperature": 0.0, "avg_logprob": -0.1263633191006855, "compression_ratio": 1.733009708737864, "no_speech_prob": 1.7230793673661537e-05}, {"id": 1194, "seek": 572640, "start": 5726.4, "end": 5729.879999999999, "text": " They've got discerning tastes, I guess.", "tokens": [814, 600, 658, 717, 1776, 773, 8666, 11, 286, 2041, 13], "temperature": 0.0, "avg_logprob": -0.14582417462323163, "compression_ratio": 1.5202312138728324, "no_speech_prob": 6.961614417377859e-06}, {"id": 1195, "seek": 572640, "start": 5729.879999999999, "end": 5739.48, "text": " At the moment, we don't have any way in our kind of formulation of this model to say this", "tokens": [1711, 264, 1623, 11, 321, 500, 380, 362, 604, 636, 294, 527, 733, 295, 37642, 295, 341, 2316, 281, 584, 341], "temperature": 0.0, "avg_logprob": -0.14582417462323163, "compression_ratio": 1.5202312138728324, "no_speech_prob": 6.961614417377859e-06}, {"id": 1196, "seek": 572640, "start": 5739.48, "end": 5744.28, "text": " user tends to give low scores and this user tends to give high scores.", "tokens": [4195, 12258, 281, 976, 2295, 13444, 293, 341, 4195, 12258, 281, 976, 1090, 13444, 13], "temperature": 0.0, "avg_logprob": -0.14582417462323163, "compression_ratio": 1.5202312138728324, "no_speech_prob": 6.961614417377859e-06}, {"id": 1197, "seek": 572640, "start": 5744.28, "end": 5746.24, "text": " This is nothing like that.", "tokens": [639, 307, 1825, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.14582417462323163, "compression_ratio": 1.5202312138728324, "no_speech_prob": 6.961614417377859e-06}, {"id": 1198, "seek": 572640, "start": 5746.24, "end": 5750.44, "text": " But that would be very easy to add.", "tokens": [583, 300, 576, 312, 588, 1858, 281, 909, 13], "temperature": 0.0, "avg_logprob": -0.14582417462323163, "compression_ratio": 1.5202312138728324, "no_speech_prob": 6.961614417377859e-06}, {"id": 1199, "seek": 575044, "start": 5750.44, "end": 5760.36, "text": " Let's add one more number to our five factors, just here, for each user.", "tokens": [961, 311, 909, 472, 544, 1230, 281, 527, 1732, 6771, 11, 445, 510, 11, 337, 1184, 4195, 13], "temperature": 0.0, "avg_logprob": -0.1451359106146771, "compression_ratio": 1.2926829268292683, "no_speech_prob": 3.785132093980792e-06}, {"id": 1200, "seek": 575044, "start": 5760.36, "end": 5778.16, "text": " And now, rather than doing just the matrix multiply, let's add this number to it, H19.", "tokens": [400, 586, 11, 2831, 813, 884, 445, 264, 8141, 12972, 11, 718, 311, 909, 341, 1230, 281, 309, 11, 389, 3405, 13], "temperature": 0.0, "avg_logprob": -0.1451359106146771, "compression_ratio": 1.2926829268292683, "no_speech_prob": 3.785132093980792e-06}, {"id": 1201, "seek": 577816, "start": 5778.16, "end": 5782.4, "text": " And so for this one, let's add I19 to it.", "tokens": [400, 370, 337, 341, 472, 11, 718, 311, 909, 286, 3405, 281, 309, 13], "temperature": 0.0, "avg_logprob": -0.198773184487986, "compression_ratio": 1.5900621118012421, "no_speech_prob": 3.6117130548518617e-06}, {"id": 1202, "seek": 577816, "start": 5782.4, "end": 5783.4, "text": " So I've got it wrong.", "tokens": [407, 286, 600, 658, 309, 2085, 13], "temperature": 0.0, "avg_logprob": -0.198773184487986, "compression_ratio": 1.5900621118012421, "no_speech_prob": 3.6117130548518617e-06}, {"id": 1203, "seek": 577816, "start": 5783.4, "end": 5793.639999999999, "text": " This one here, so this row here, we're going to add to each rating.", "tokens": [639, 472, 510, 11, 370, 341, 5386, 510, 11, 321, 434, 516, 281, 909, 281, 1184, 10990, 13], "temperature": 0.0, "avg_logprob": -0.198773184487986, "compression_ratio": 1.5900621118012421, "no_speech_prob": 3.6117130548518617e-06}, {"id": 1204, "seek": 577816, "start": 5793.639999999999, "end": 5798.599999999999, "text": " And then we're going to do the same thing here.", "tokens": [400, 550, 321, 434, 516, 281, 360, 264, 912, 551, 510, 13], "temperature": 0.0, "avg_logprob": -0.198773184487986, "compression_ratio": 1.5900621118012421, "no_speech_prob": 3.6117130548518617e-06}, {"id": 1205, "seek": 577816, "start": 5798.599999999999, "end": 5801.48, "text": " Each movie's now got an extra number here.", "tokens": [6947, 3169, 311, 586, 658, 364, 2857, 1230, 510, 13], "temperature": 0.0, "avg_logprob": -0.198773184487986, "compression_ratio": 1.5900621118012421, "no_speech_prob": 3.6117130548518617e-06}, {"id": 1206, "seek": 577816, "start": 5801.48, "end": 5808.0, "text": " So again, we're going to add A26.", "tokens": [407, 797, 11, 321, 434, 516, 281, 909, 316, 10880, 13], "temperature": 0.0, "avg_logprob": -0.198773184487986, "compression_ratio": 1.5900621118012421, "no_speech_prob": 3.6117130548518617e-06}, {"id": 1207, "seek": 580800, "start": 5808.0, "end": 5814.12, "text": " So it's our matrix multiplication plus, we call it the bias, the user bias plus the movie", "tokens": [407, 309, 311, 527, 8141, 27290, 1804, 11, 321, 818, 309, 264, 12577, 11, 264, 4195, 12577, 1804, 264, 3169], "temperature": 0.0, "avg_logprob": -0.12065303859426015, "compression_ratio": 1.4567901234567902, "no_speech_prob": 3.340497414683341e-06}, {"id": 1208, "seek": 580800, "start": 5814.12, "end": 5816.0, "text": " bias.", "tokens": [12577, 13], "temperature": 0.0, "avg_logprob": -0.12065303859426015, "compression_ratio": 1.4567901234567902, "no_speech_prob": 3.340497414683341e-06}, {"id": 1209, "seek": 580800, "start": 5816.0, "end": 5822.56, "text": " So effectively, that's like making it so we don't have an intercept of zero anymore.", "tokens": [407, 8659, 11, 300, 311, 411, 1455, 309, 370, 321, 500, 380, 362, 364, 24700, 295, 4018, 3602, 13], "temperature": 0.0, "avg_logprob": -0.12065303859426015, "compression_ratio": 1.4567901234567902, "no_speech_prob": 3.340497414683341e-06}, {"id": 1210, "seek": 580800, "start": 5822.56, "end": 5835.2, "text": " And so if we now train this model, data, solver, solve.", "tokens": [400, 370, 498, 321, 586, 3847, 341, 2316, 11, 1412, 11, 1404, 331, 11, 5039, 13], "temperature": 0.0, "avg_logprob": -0.12065303859426015, "compression_ratio": 1.4567901234567902, "no_speech_prob": 3.340497414683341e-06}, {"id": 1211, "seek": 583520, "start": 5835.2, "end": 5839.96, "text": " So previously, we got to 0.42.", "tokens": [407, 8046, 11, 321, 658, 281, 1958, 13, 15628, 13], "temperature": 0.0, "avg_logprob": -0.11815474914000915, "compression_ratio": 1.6908212560386473, "no_speech_prob": 3.668577619464486e-06}, {"id": 1212, "seek": 583520, "start": 5839.96, "end": 5842.12, "text": " And so we're going to let that go along for a while.", "tokens": [400, 370, 321, 434, 516, 281, 718, 300, 352, 2051, 337, 257, 1339, 13], "temperature": 0.0, "avg_logprob": -0.11815474914000915, "compression_ratio": 1.6908212560386473, "no_speech_prob": 3.668577619464486e-06}, {"id": 1213, "seek": 583520, "start": 5842.12, "end": 5846.36, "text": " And then let's also go back and look at the PyTorch version.", "tokens": [400, 550, 718, 311, 611, 352, 646, 293, 574, 412, 264, 9953, 51, 284, 339, 3037, 13], "temperature": 0.0, "avg_logprob": -0.11815474914000915, "compression_ratio": 1.6908212560386473, "no_speech_prob": 3.668577619464486e-06}, {"id": 1214, "seek": 583520, "start": 5846.36, "end": 5853.76, "text": " So for PyTorch now, we're going to have a user bias, which is an embedding of end users", "tokens": [407, 337, 9953, 51, 284, 339, 586, 11, 321, 434, 516, 281, 362, 257, 4195, 12577, 11, 597, 307, 364, 12240, 3584, 295, 917, 5022], "temperature": 0.0, "avg_logprob": -0.11815474914000915, "compression_ratio": 1.6908212560386473, "no_speech_prob": 3.668577619464486e-06}, {"id": 1215, "seek": 583520, "start": 5853.76, "end": 5854.76, "text": " by one.", "tokens": [538, 472, 13], "temperature": 0.0, "avg_logprob": -0.11815474914000915, "compression_ratio": 1.6908212560386473, "no_speech_prob": 3.668577619464486e-06}, {"id": 1216, "seek": 583520, "start": 5854.76, "end": 5857.36, "text": " Remember, there was just one number for each user.", "tokens": [5459, 11, 456, 390, 445, 472, 1230, 337, 1184, 4195, 13], "temperature": 0.0, "avg_logprob": -0.11815474914000915, "compression_ratio": 1.6908212560386473, "no_speech_prob": 3.668577619464486e-06}, {"id": 1217, "seek": 583520, "start": 5857.36, "end": 5863.4, "text": " And movie bias is an embedding of end movies, also by one.", "tokens": [400, 3169, 12577, 307, 364, 12240, 3584, 295, 917, 6233, 11, 611, 538, 472, 13], "temperature": 0.0, "avg_logprob": -0.11815474914000915, "compression_ratio": 1.6908212560386473, "no_speech_prob": 3.668577619464486e-06}, {"id": 1218, "seek": 586340, "start": 5863.4, "end": 5872.879999999999, "text": " And so we can now look up the user embedding, the movie embedding, do the dot product, and", "tokens": [400, 370, 321, 393, 586, 574, 493, 264, 4195, 12240, 3584, 11, 264, 3169, 12240, 3584, 11, 360, 264, 5893, 1674, 11, 293], "temperature": 0.0, "avg_logprob": -0.16849238630654156, "compression_ratio": 1.5416666666666667, "no_speech_prob": 1.6796991531009553e-06}, {"id": 1219, "seek": 586340, "start": 5872.879999999999, "end": 5880.36, "text": " then look up the user bias and the movie bias and add them.", "tokens": [550, 574, 493, 264, 4195, 12577, 293, 264, 3169, 12577, 293, 909, 552, 13], "temperature": 0.0, "avg_logprob": -0.16849238630654156, "compression_ratio": 1.5416666666666667, "no_speech_prob": 1.6796991531009553e-06}, {"id": 1220, "seek": 586340, "start": 5880.36, "end": 5883.719999999999, "text": " Chuck that through the sigmoid.", "tokens": [21607, 300, 807, 264, 4556, 3280, 327, 13], "temperature": 0.0, "avg_logprob": -0.16849238630654156, "compression_ratio": 1.5416666666666667, "no_speech_prob": 1.6796991531009553e-06}, {"id": 1221, "seek": 586340, "start": 5883.719999999999, "end": 5887.5199999999995, "text": " Let's train that, see if we beat 0.865.", "tokens": [961, 311, 3847, 300, 11, 536, 498, 321, 4224, 1958, 13, 23, 16824, 13], "temperature": 0.0, "avg_logprob": -0.16849238630654156, "compression_ratio": 1.5416666666666667, "no_speech_prob": 1.6796991531009553e-06}, {"id": 1222, "seek": 588752, "start": 5887.52, "end": 5893.56, "text": " Wow, we're not training very well, are we?", "tokens": [3153, 11, 321, 434, 406, 3097, 588, 731, 11, 366, 321, 30], "temperature": 0.0, "avg_logprob": -0.24556703006519992, "compression_ratio": 1.3392857142857142, "no_speech_prob": 1.3006601875531487e-05}, {"id": 1223, "seek": 588752, "start": 5893.56, "end": 5895.68, "text": " Still not too great, 0.894.", "tokens": [8291, 406, 886, 869, 11, 1958, 13, 21115, 19, 13], "temperature": 0.0, "avg_logprob": -0.24556703006519992, "compression_ratio": 1.3392857142857142, "no_speech_prob": 1.3006601875531487e-05}, {"id": 1224, "seek": 588752, "start": 5895.68, "end": 5898.360000000001, "text": " I think Excel normally does do better though.", "tokens": [286, 519, 19060, 5646, 775, 360, 1101, 1673, 13], "temperature": 0.0, "avg_logprob": -0.24556703006519992, "compression_ratio": 1.3392857142857142, "no_speech_prob": 1.3006601875531487e-05}, {"id": 1225, "seek": 588752, "start": 5898.360000000001, "end": 5899.360000000001, "text": " Let's see.", "tokens": [961, 311, 536, 13], "temperature": 0.0, "avg_logprob": -0.24556703006519992, "compression_ratio": 1.3392857142857142, "no_speech_prob": 1.3006601875531487e-05}, {"id": 1226, "seek": 588752, "start": 5899.360000000001, "end": 5900.360000000001, "text": " OK, Excel.", "tokens": [2264, 11, 19060, 13], "temperature": 0.0, "avg_logprob": -0.24556703006519992, "compression_ratio": 1.3392857142857142, "no_speech_prob": 1.3006601875531487e-05}, {"id": 1227, "seek": 588752, "start": 5900.360000000001, "end": 5904.56, "text": " Oh, Excel's done a lot better.", "tokens": [876, 11, 19060, 311, 1096, 257, 688, 1101, 13], "temperature": 0.0, "avg_logprob": -0.24556703006519992, "compression_ratio": 1.3392857142857142, "no_speech_prob": 1.3006601875531487e-05}, {"id": 1228, "seek": 588752, "start": 5904.56, "end": 5910.96, "text": " It's gone from 0.42 to 0.35.", "tokens": [467, 311, 2780, 490, 1958, 13, 15628, 281, 1958, 13, 8794, 13], "temperature": 0.0, "avg_logprob": -0.24556703006519992, "compression_ratio": 1.3392857142857142, "no_speech_prob": 1.3006601875531487e-05}, {"id": 1229, "seek": 588752, "start": 5910.96, "end": 5917.160000000001, "text": " OK, so what happened here?", "tokens": [2264, 11, 370, 437, 2011, 510, 30], "temperature": 0.0, "avg_logprob": -0.24556703006519992, "compression_ratio": 1.3392857142857142, "no_speech_prob": 1.3006601875531487e-05}, {"id": 1230, "seek": 591716, "start": 5917.16, "end": 5918.16, "text": " Why did it get worse?", "tokens": [1545, 630, 309, 483, 5324, 30], "temperature": 0.0, "avg_logprob": -0.09743415287562779, "compression_ratio": 1.4779874213836477, "no_speech_prob": 4.710661869467003e-06}, {"id": 1231, "seek": 591716, "start": 5918.16, "end": 5919.48, "text": " Well, look at this.", "tokens": [1042, 11, 574, 412, 341, 13], "temperature": 0.0, "avg_logprob": -0.09743415287562779, "compression_ratio": 1.4779874213836477, "no_speech_prob": 4.710661869467003e-06}, {"id": 1232, "seek": 591716, "start": 5919.48, "end": 5925.08, "text": " The valid loss got better, and then it started getting worse again.", "tokens": [440, 7363, 4470, 658, 1101, 11, 293, 550, 309, 1409, 1242, 5324, 797, 13], "temperature": 0.0, "avg_logprob": -0.09743415287562779, "compression_ratio": 1.4779874213836477, "no_speech_prob": 4.710661869467003e-06}, {"id": 1233, "seek": 591716, "start": 5925.08, "end": 5936.36, "text": " So we think we might be overfitting, which we have got a lot of parameters in our embeddings.", "tokens": [407, 321, 519, 321, 1062, 312, 670, 69, 2414, 11, 597, 321, 362, 658, 257, 688, 295, 9834, 294, 527, 12240, 29432, 13], "temperature": 0.0, "avg_logprob": -0.09743415287562779, "compression_ratio": 1.4779874213836477, "no_speech_prob": 4.710661869467003e-06}, {"id": 1234, "seek": 591716, "start": 5936.36, "end": 5941.599999999999, "text": " So how do we avoid overfitting?", "tokens": [407, 577, 360, 321, 5042, 670, 69, 2414, 30], "temperature": 0.0, "avg_logprob": -0.09743415287562779, "compression_ratio": 1.4779874213836477, "no_speech_prob": 4.710661869467003e-06}, {"id": 1235, "seek": 594160, "start": 5941.6, "end": 5948.400000000001, "text": " So a classic way to avoid overfitting is to use something called weight decay, also known", "tokens": [407, 257, 7230, 636, 281, 5042, 670, 69, 2414, 307, 281, 764, 746, 1219, 3364, 21039, 11, 611, 2570], "temperature": 0.0, "avg_logprob": -0.0764705737431844, "compression_ratio": 1.4838709677419355, "no_speech_prob": 2.058000518445624e-06}, {"id": 1236, "seek": 594160, "start": 5948.400000000001, "end": 5955.88, "text": " as L2 regularization, which sounds much more fancy.", "tokens": [382, 441, 17, 3890, 2144, 11, 597, 3263, 709, 544, 10247, 13], "temperature": 0.0, "avg_logprob": -0.0764705737431844, "compression_ratio": 1.4838709677419355, "no_speech_prob": 2.058000518445624e-06}, {"id": 1237, "seek": 594160, "start": 5955.88, "end": 5964.360000000001, "text": " What we're going to do is when we compute the gradients, we're going to first add to", "tokens": [708, 321, 434, 516, 281, 360, 307, 562, 321, 14722, 264, 2771, 2448, 11, 321, 434, 516, 281, 700, 909, 281], "temperature": 0.0, "avg_logprob": -0.0764705737431844, "compression_ratio": 1.4838709677419355, "no_speech_prob": 2.058000518445624e-06}, {"id": 1238, "seek": 594160, "start": 5964.360000000001, "end": 5969.56, "text": " our loss function the sum of the weights squared.", "tokens": [527, 4470, 2445, 264, 2408, 295, 264, 17443, 8889, 13], "temperature": 0.0, "avg_logprob": -0.0764705737431844, "compression_ratio": 1.4838709677419355, "no_speech_prob": 2.058000518445624e-06}, {"id": 1239, "seek": 596956, "start": 5969.56, "end": 5973.52, "text": " This is something you should go back and add to your Titanic model, not that it's overfitting,", "tokens": [639, 307, 746, 291, 820, 352, 646, 293, 909, 281, 428, 42183, 2316, 11, 406, 300, 309, 311, 670, 69, 2414, 11], "temperature": 0.0, "avg_logprob": -0.11653530874917674, "compression_ratio": 1.6232558139534883, "no_speech_prob": 9.516022146272007e-06}, {"id": 1240, "seek": 596956, "start": 5973.52, "end": 5975.320000000001, "text": " but just to try it.", "tokens": [457, 445, 281, 853, 309, 13], "temperature": 0.0, "avg_logprob": -0.11653530874917674, "compression_ratio": 1.6232558139534883, "no_speech_prob": 9.516022146272007e-06}, {"id": 1241, "seek": 596956, "start": 5975.320000000001, "end": 5982.96, "text": " So previously, our gradients have just been, and our loss function has just been about", "tokens": [407, 8046, 11, 527, 2771, 2448, 362, 445, 668, 11, 293, 527, 4470, 2445, 575, 445, 668, 466], "temperature": 0.0, "avg_logprob": -0.11653530874917674, "compression_ratio": 1.6232558139534883, "no_speech_prob": 9.516022146272007e-06}, {"id": 1242, "seek": 596956, "start": 5982.96, "end": 5986.240000000001, "text": " the difference between our predictions and our actuals.", "tokens": [264, 2649, 1296, 527, 21264, 293, 527, 3539, 82, 13], "temperature": 0.0, "avg_logprob": -0.11653530874917674, "compression_ratio": 1.6232558139534883, "no_speech_prob": 9.516022146272007e-06}, {"id": 1243, "seek": 596956, "start": 5986.240000000001, "end": 5995.360000000001, "text": " And so our gradients were based on the derivative of that with respect to the coefficients.", "tokens": [400, 370, 527, 2771, 2448, 645, 2361, 322, 264, 13760, 295, 300, 365, 3104, 281, 264, 31994, 13], "temperature": 0.0, "avg_logprob": -0.11653530874917674, "compression_ratio": 1.6232558139534883, "no_speech_prob": 9.516022146272007e-06}, {"id": 1244, "seek": 599536, "start": 5995.36, "end": 6004.16, "text": " But we're saying now let's add the sum of the square of the weights times sum small", "tokens": [583, 321, 434, 1566, 586, 718, 311, 909, 264, 2408, 295, 264, 3732, 295, 264, 17443, 1413, 2408, 1359], "temperature": 0.0, "avg_logprob": -0.11974772700557003, "compression_ratio": 1.7078651685393258, "no_speech_prob": 2.8572922019520774e-06}, {"id": 1245, "seek": 599536, "start": 6004.16, "end": 6006.2, "text": " number.", "tokens": [1230, 13], "temperature": 0.0, "avg_logprob": -0.11974772700557003, "compression_ratio": 1.7078651685393258, "no_speech_prob": 2.8572922019520774e-06}, {"id": 1246, "seek": 599536, "start": 6006.2, "end": 6009.679999999999, "text": " So what would make that loss function go down?", "tokens": [407, 437, 576, 652, 300, 4470, 2445, 352, 760, 30], "temperature": 0.0, "avg_logprob": -0.11974772700557003, "compression_ratio": 1.7078651685393258, "no_speech_prob": 2.8572922019520774e-06}, {"id": 1247, "seek": 599536, "start": 6009.679999999999, "end": 6014.639999999999, "text": " That loss function would go down if we reduce our weights.", "tokens": [663, 4470, 2445, 576, 352, 760, 498, 321, 5407, 527, 17443, 13], "temperature": 0.0, "avg_logprob": -0.11974772700557003, "compression_ratio": 1.7078651685393258, "no_speech_prob": 2.8572922019520774e-06}, {"id": 1248, "seek": 599536, "start": 6014.639999999999, "end": 6021.36, "text": " For example, if we reduce all of our weights to zero, I should say we reduce the magnitude", "tokens": [1171, 1365, 11, 498, 321, 5407, 439, 295, 527, 17443, 281, 4018, 11, 286, 820, 584, 321, 5407, 264, 15668], "temperature": 0.0, "avg_logprob": -0.11974772700557003, "compression_ratio": 1.7078651685393258, "no_speech_prob": 2.8572922019520774e-06}, {"id": 1249, "seek": 599536, "start": 6021.36, "end": 6023.0, "text": " of our weights.", "tokens": [295, 527, 17443, 13], "temperature": 0.0, "avg_logprob": -0.11974772700557003, "compression_ratio": 1.7078651685393258, "no_speech_prob": 2.8572922019520774e-06}, {"id": 1250, "seek": 602300, "start": 6023.0, "end": 6027.88, "text": " If we reduce them all to zero, that part of the loss function will be zero, because the", "tokens": [759, 321, 5407, 552, 439, 281, 4018, 11, 300, 644, 295, 264, 4470, 2445, 486, 312, 4018, 11, 570, 264], "temperature": 0.0, "avg_logprob": -0.1511344059859172, "compression_ratio": 1.6708860759493671, "no_speech_prob": 3.3405017347831745e-06}, {"id": 1251, "seek": 602300, "start": 6027.88, "end": 6031.08, "text": " sum of zero squared is zero.", "tokens": [2408, 295, 4018, 8889, 307, 4018, 13], "temperature": 0.0, "avg_logprob": -0.1511344059859172, "compression_ratio": 1.6708860759493671, "no_speech_prob": 3.3405017347831745e-06}, {"id": 1252, "seek": 602300, "start": 6031.08, "end": 6035.68, "text": " Now problem is, if our weights are all zero, our model doesn't do anything, right?", "tokens": [823, 1154, 307, 11, 498, 527, 17443, 366, 439, 4018, 11, 527, 2316, 1177, 380, 360, 1340, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1511344059859172, "compression_ratio": 1.6708860759493671, "no_speech_prob": 3.3405017347831745e-06}, {"id": 1253, "seek": 602300, "start": 6035.68, "end": 6038.68, "text": " So it would have crappy predictions.", "tokens": [407, 309, 576, 362, 36531, 21264, 13], "temperature": 0.0, "avg_logprob": -0.1511344059859172, "compression_ratio": 1.6708860759493671, "no_speech_prob": 3.3405017347831745e-06}, {"id": 1254, "seek": 602300, "start": 6038.68, "end": 6047.58, "text": " So it would want to increase the weights, so that's actually predicting something useful.", "tokens": [407, 309, 576, 528, 281, 3488, 264, 17443, 11, 370, 300, 311, 767, 32884, 746, 4420, 13], "temperature": 0.0, "avg_logprob": -0.1511344059859172, "compression_ratio": 1.6708860759493671, "no_speech_prob": 3.3405017347831745e-06}, {"id": 1255, "seek": 602300, "start": 6047.58, "end": 6052.76, "text": " But if it increases the weights too much, then it starts overfitting.", "tokens": [583, 498, 309, 8637, 264, 17443, 886, 709, 11, 550, 309, 3719, 670, 69, 2414, 13], "temperature": 0.0, "avg_logprob": -0.1511344059859172, "compression_ratio": 1.6708860759493671, "no_speech_prob": 3.3405017347831745e-06}, {"id": 1256, "seek": 605276, "start": 6052.76, "end": 6057.72, "text": " So how is it going to actually get the lowest possible value of the loss function?", "tokens": [407, 577, 307, 309, 516, 281, 767, 483, 264, 12437, 1944, 2158, 295, 264, 4470, 2445, 30], "temperature": 0.0, "avg_logprob": -0.09376887841658159, "compression_ratio": 1.559090909090909, "no_speech_prob": 9.516103091300465e-06}, {"id": 1257, "seek": 605276, "start": 6057.72, "end": 6060.16, "text": " By finding the right mix.", "tokens": [3146, 5006, 264, 558, 2890, 13], "temperature": 0.0, "avg_logprob": -0.09376887841658159, "compression_ratio": 1.559090909090909, "no_speech_prob": 9.516103091300465e-06}, {"id": 1258, "seek": 605276, "start": 6060.16, "end": 6066.2, "text": " Weights not too high, but high enough to be useful at predicting.", "tokens": [492, 5761, 406, 886, 1090, 11, 457, 1090, 1547, 281, 312, 4420, 412, 32884, 13], "temperature": 0.0, "avg_logprob": -0.09376887841658159, "compression_ratio": 1.559090909090909, "no_speech_prob": 9.516103091300465e-06}, {"id": 1259, "seek": 605276, "start": 6066.2, "end": 6073.56, "text": " If there's some parameter that's not useful, for example, say we asked for five factors", "tokens": [759, 456, 311, 512, 13075, 300, 311, 406, 4420, 11, 337, 1365, 11, 584, 321, 2351, 337, 1732, 6771], "temperature": 0.0, "avg_logprob": -0.09376887841658159, "compression_ratio": 1.559090909090909, "no_speech_prob": 9.516103091300465e-06}, {"id": 1260, "seek": 605276, "start": 6073.56, "end": 6079.9400000000005, "text": " and we only need four, it can just set the weights for the fifth factor to zero.", "tokens": [293, 321, 787, 643, 1451, 11, 309, 393, 445, 992, 264, 17443, 337, 264, 9266, 5952, 281, 4018, 13], "temperature": 0.0, "avg_logprob": -0.09376887841658159, "compression_ratio": 1.559090909090909, "no_speech_prob": 9.516103091300465e-06}, {"id": 1261, "seek": 607994, "start": 6079.94, "end": 6083.36, "text": " And then problem solved.", "tokens": [400, 550, 1154, 13041, 13], "temperature": 0.0, "avg_logprob": -0.1379747777371793, "compression_ratio": 1.6055555555555556, "no_speech_prob": 3.6688190903078066e-06}, {"id": 1262, "seek": 607994, "start": 6083.36, "end": 6089.5199999999995, "text": " It won't be used to predict anything, but it also won't contribute to our weight decay", "tokens": [467, 1582, 380, 312, 1143, 281, 6069, 1340, 11, 457, 309, 611, 1582, 380, 10586, 281, 527, 3364, 21039], "temperature": 0.0, "avg_logprob": -0.1379747777371793, "compression_ratio": 1.6055555555555556, "no_speech_prob": 3.6688190903078066e-06}, {"id": 1263, "seek": 607994, "start": 6089.5199999999995, "end": 6097.299999999999, "text": " part.", "tokens": [644, 13], "temperature": 0.0, "avg_logprob": -0.1379747777371793, "compression_ratio": 1.6055555555555556, "no_speech_prob": 3.6688190903078066e-06}, {"id": 1264, "seek": 607994, "start": 6097.299999999999, "end": 6101.44, "text": " So previously we had something calculating the loss function, so now we're going to do", "tokens": [407, 8046, 321, 632, 746, 28258, 264, 4470, 2445, 11, 370, 586, 321, 434, 516, 281, 360], "temperature": 0.0, "avg_logprob": -0.1379747777371793, "compression_ratio": 1.6055555555555556, "no_speech_prob": 3.6688190903078066e-06}, {"id": 1265, "seek": 607994, "start": 6101.44, "end": 6106.16, "text": " exactly the same thing, but we're going to square the parameters, we're going to sum", "tokens": [2293, 264, 912, 551, 11, 457, 321, 434, 516, 281, 3732, 264, 9834, 11, 321, 434, 516, 281, 2408], "temperature": 0.0, "avg_logprob": -0.1379747777371793, "compression_ratio": 1.6055555555555556, "no_speech_prob": 3.6688190903078066e-06}, {"id": 1266, "seek": 610616, "start": 6106.16, "end": 6116.0, "text": " them up, and we're going to multiply them by some small number, like 0.01 or 0.001.", "tokens": [552, 493, 11, 293, 321, 434, 516, 281, 12972, 552, 538, 512, 1359, 1230, 11, 411, 1958, 13, 10607, 420, 1958, 13, 628, 16, 13], "temperature": 0.0, "avg_logprob": -0.17505162020763718, "compression_ratio": 1.476923076923077, "no_speech_prob": 7.527923571615247e-06}, {"id": 1267, "seek": 610616, "start": 6116.0, "end": 6122.88, "text": " And in fact, we don't even need to do this, because remember, the whole purpose of the", "tokens": [400, 294, 1186, 11, 321, 500, 380, 754, 643, 281, 360, 341, 11, 570, 1604, 11, 264, 1379, 4334, 295, 264], "temperature": 0.0, "avg_logprob": -0.17505162020763718, "compression_ratio": 1.476923076923077, "no_speech_prob": 7.527923571615247e-06}, {"id": 1268, "seek": 610616, "start": 6122.88, "end": 6126.76, "text": " loss is to take its gradient, right?", "tokens": [4470, 307, 281, 747, 1080, 16235, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.17505162020763718, "compression_ratio": 1.476923076923077, "no_speech_prob": 7.527923571615247e-06}, {"id": 1269, "seek": 610616, "start": 6126.76, "end": 6129.44, "text": " And to print it out.", "tokens": [400, 281, 4482, 309, 484, 13], "temperature": 0.0, "avg_logprob": -0.17505162020763718, "compression_ratio": 1.476923076923077, "no_speech_prob": 7.527923571615247e-06}, {"id": 1270, "seek": 610616, "start": 6129.44, "end": 6135.12, "text": " The gradient of parameters squared is two times parameters.", "tokens": [440, 16235, 295, 9834, 8889, 307, 732, 1413, 9834, 13], "temperature": 0.0, "avg_logprob": -0.17505162020763718, "compression_ratio": 1.476923076923077, "no_speech_prob": 7.527923571615247e-06}, {"id": 1271, "seek": 613512, "start": 6135.12, "end": 6139.28, "text": " It's okay if you don't remember that from high school, but you can take my word for", "tokens": [467, 311, 1392, 498, 291, 500, 380, 1604, 300, 490, 1090, 1395, 11, 457, 291, 393, 747, 452, 1349, 337], "temperature": 0.0, "avg_logprob": -0.12572473849890367, "compression_ratio": 1.530612244897959, "no_speech_prob": 1.4970798474678304e-05}, {"id": 1272, "seek": 613512, "start": 6139.28, "end": 6140.28, "text": " it.", "tokens": [309, 13], "temperature": 0.0, "avg_logprob": -0.12572473849890367, "compression_ratio": 1.530612244897959, "no_speech_prob": 1.4970798474678304e-05}, {"id": 1273, "seek": 613512, "start": 6140.28, "end": 6145.2, "text": " The gradient of y equals x squared is 2x.", "tokens": [440, 16235, 295, 288, 6915, 2031, 8889, 307, 568, 87, 13], "temperature": 0.0, "avg_logprob": -0.12572473849890367, "compression_ratio": 1.530612244897959, "no_speech_prob": 1.4970798474678304e-05}, {"id": 1274, "seek": 613512, "start": 6145.2, "end": 6151.64, "text": " So actually all we need to do is take our gradient and add the weight decay coefficient,", "tokens": [407, 767, 439, 321, 643, 281, 360, 307, 747, 527, 16235, 293, 909, 264, 3364, 21039, 17619, 11], "temperature": 0.0, "avg_logprob": -0.12572473849890367, "compression_ratio": 1.530612244897959, "no_speech_prob": 1.4970798474678304e-05}, {"id": 1275, "seek": 613512, "start": 6151.64, "end": 6155.72, "text": " 0.01 or whatever, times two times parameters.", "tokens": [1958, 13, 10607, 420, 2035, 11, 1413, 732, 1413, 9834, 13], "temperature": 0.0, "avg_logprob": -0.12572473849890367, "compression_ratio": 1.530612244897959, "no_speech_prob": 1.4970798474678304e-05}, {"id": 1276, "seek": 613512, "start": 6155.72, "end": 6159.599999999999, "text": " And given this is just some number we get to pick, we may as well fold the two into", "tokens": [400, 2212, 341, 307, 445, 512, 1230, 321, 483, 281, 1888, 11, 321, 815, 382, 731, 4860, 264, 732, 666], "temperature": 0.0, "avg_logprob": -0.12572473849890367, "compression_ratio": 1.530612244897959, "no_speech_prob": 1.4970798474678304e-05}, {"id": 1277, "seek": 613512, "start": 6159.599999999999, "end": 6163.84, "text": " it and just get rid of it.", "tokens": [309, 293, 445, 483, 3973, 295, 309, 13], "temperature": 0.0, "avg_logprob": -0.12572473849890367, "compression_ratio": 1.530612244897959, "no_speech_prob": 1.4970798474678304e-05}, {"id": 1278, "seek": 616384, "start": 6163.84, "end": 6171.2, "text": " So when you call fit, you can pass in a WD parameter, which does, adds this times the", "tokens": [407, 562, 291, 818, 3318, 11, 291, 393, 1320, 294, 257, 343, 35, 13075, 11, 597, 775, 11, 10860, 341, 1413, 264], "temperature": 0.0, "avg_logprob": -0.14933626992361887, "compression_ratio": 1.5706806282722514, "no_speech_prob": 6.048549039405771e-06}, {"id": 1279, "seek": 616384, "start": 6171.2, "end": 6175.92, "text": " parameters to the gradient for you.", "tokens": [9834, 281, 264, 16235, 337, 291, 13], "temperature": 0.0, "avg_logprob": -0.14933626992361887, "compression_ratio": 1.5706806282722514, "no_speech_prob": 6.048549039405771e-06}, {"id": 1280, "seek": 616384, "start": 6175.92, "end": 6179.28, "text": " And so that's going to ask the model, it's going to say to the model, please don't make", "tokens": [400, 370, 300, 311, 516, 281, 1029, 264, 2316, 11, 309, 311, 516, 281, 584, 281, 264, 2316, 11, 1767, 500, 380, 652], "temperature": 0.0, "avg_logprob": -0.14933626992361887, "compression_ratio": 1.5706806282722514, "no_speech_prob": 6.048549039405771e-06}, {"id": 1281, "seek": 616384, "start": 6179.28, "end": 6186.08, "text": " the weights any bigger than they have to be.", "tokens": [264, 17443, 604, 3801, 813, 436, 362, 281, 312, 13], "temperature": 0.0, "avg_logprob": -0.14933626992361887, "compression_ratio": 1.5706806282722514, "no_speech_prob": 6.048549039405771e-06}, {"id": 1282, "seek": 616384, "start": 6186.08, "end": 6189.2, "text": " And yay, finally, our loss actually improved.", "tokens": [400, 23986, 11, 2721, 11, 527, 4470, 767, 9689, 13], "temperature": 0.0, "avg_logprob": -0.14933626992361887, "compression_ratio": 1.5706806282722514, "no_speech_prob": 6.048549039405771e-06}, {"id": 1283, "seek": 618920, "start": 6189.2, "end": 6196.5599999999995, "text": " Okay, you can see it getting better and better.", "tokens": [1033, 11, 291, 393, 536, 309, 1242, 1101, 293, 1101, 13], "temperature": 0.0, "avg_logprob": -0.129263636940404, "compression_ratio": 1.5569620253164558, "no_speech_prob": 6.24068934484967e-06}, {"id": 1284, "seek": 618920, "start": 6196.5599999999995, "end": 6203.3, "text": " In fast AI applications like vision, we try to set this for you appropriately.", "tokens": [682, 2370, 7318, 5821, 411, 5201, 11, 321, 853, 281, 992, 341, 337, 291, 23505, 13], "temperature": 0.0, "avg_logprob": -0.129263636940404, "compression_ratio": 1.5569620253164558, "no_speech_prob": 6.24068934484967e-06}, {"id": 1285, "seek": 618920, "start": 6203.3, "end": 6205.28, "text": " And we generally do a reasonably good job.", "tokens": [400, 321, 5101, 360, 257, 23551, 665, 1691, 13], "temperature": 0.0, "avg_logprob": -0.129263636940404, "compression_ratio": 1.5569620253164558, "no_speech_prob": 6.24068934484967e-06}, {"id": 1286, "seek": 618920, "start": 6205.28, "end": 6209.0, "text": " Just the defaults are normally fine.", "tokens": [1449, 264, 7576, 82, 366, 5646, 2489, 13], "temperature": 0.0, "avg_logprob": -0.129263636940404, "compression_ratio": 1.5569620253164558, "no_speech_prob": 6.24068934484967e-06}, {"id": 1287, "seek": 618920, "start": 6209.0, "end": 6212.5199999999995, "text": " But in things like tabular and collaborative filtering, we don't really know enough about", "tokens": [583, 294, 721, 411, 4421, 1040, 293, 16555, 30822, 11, 321, 500, 380, 534, 458, 1547, 466], "temperature": 0.0, "avg_logprob": -0.129263636940404, "compression_ratio": 1.5569620253164558, "no_speech_prob": 6.24068934484967e-06}, {"id": 1288, "seek": 618920, "start": 6212.5199999999995, "end": 6214.96, "text": " your data to know what to use here.", "tokens": [428, 1412, 281, 458, 437, 281, 764, 510, 13], "temperature": 0.0, "avg_logprob": -0.129263636940404, "compression_ratio": 1.5569620253164558, "no_speech_prob": 6.24068934484967e-06}, {"id": 1289, "seek": 618920, "start": 6214.96, "end": 6217.76, "text": " So you should just try a few things.", "tokens": [407, 291, 820, 445, 853, 257, 1326, 721, 13], "temperature": 0.0, "avg_logprob": -0.129263636940404, "compression_ratio": 1.5569620253164558, "no_speech_prob": 6.24068934484967e-06}, {"id": 1290, "seek": 621776, "start": 6217.76, "end": 6220.280000000001, "text": " Let's try a few multiples of 10.", "tokens": [961, 311, 853, 257, 1326, 46099, 295, 1266, 13], "temperature": 0.0, "avg_logprob": -0.15545752441998825, "compression_ratio": 1.564102564102564, "no_speech_prob": 1.6962731024250388e-05}, {"id": 1291, "seek": 621776, "start": 6220.280000000001, "end": 6225.320000000001, "text": " Start at 0.1 and then divide by 10 a few times, you know, and just see which one gives you", "tokens": [6481, 412, 1958, 13, 16, 293, 550, 9845, 538, 1266, 257, 1326, 1413, 11, 291, 458, 11, 293, 445, 536, 597, 472, 2709, 291], "temperature": 0.0, "avg_logprob": -0.15545752441998825, "compression_ratio": 1.564102564102564, "no_speech_prob": 1.6962731024250388e-05}, {"id": 1292, "seek": 621776, "start": 6225.320000000001, "end": 6229.6, "text": " the best result.", "tokens": [264, 1151, 1874, 13], "temperature": 0.0, "avg_logprob": -0.15545752441998825, "compression_ratio": 1.564102564102564, "no_speech_prob": 1.6962731024250388e-05}, {"id": 1293, "seek": 621776, "start": 6229.6, "end": 6231.8, "text": " So this is called regularization.", "tokens": [407, 341, 307, 1219, 3890, 2144, 13], "temperature": 0.0, "avg_logprob": -0.15545752441998825, "compression_ratio": 1.564102564102564, "no_speech_prob": 1.6962731024250388e-05}, {"id": 1294, "seek": 621776, "start": 6231.8, "end": 6238.2, "text": " So regularization is about making your model no more complex than it has to be, right?", "tokens": [407, 3890, 2144, 307, 466, 1455, 428, 2316, 572, 544, 3997, 813, 309, 575, 281, 312, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.15545752441998825, "compression_ratio": 1.564102564102564, "no_speech_prob": 1.6962731024250388e-05}, {"id": 1295, "seek": 621776, "start": 6238.2, "end": 6240.96, "text": " It has a lower capacity.", "tokens": [467, 575, 257, 3126, 6042, 13], "temperature": 0.0, "avg_logprob": -0.15545752441998825, "compression_ratio": 1.564102564102564, "no_speech_prob": 1.6962731024250388e-05}, {"id": 1296, "seek": 621776, "start": 6240.96, "end": 6245.26, "text": " And so the higher the weights, the more they're moving the model around, right?", "tokens": [400, 370, 264, 2946, 264, 17443, 11, 264, 544, 436, 434, 2684, 264, 2316, 926, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.15545752441998825, "compression_ratio": 1.564102564102564, "no_speech_prob": 1.6962731024250388e-05}, {"id": 1297, "seek": 624526, "start": 6245.26, "end": 6251.4400000000005, "text": " So we want to keep the weights down, but not so far down that they don't make good predictions.", "tokens": [407, 321, 528, 281, 1066, 264, 17443, 760, 11, 457, 406, 370, 1400, 760, 300, 436, 500, 380, 652, 665, 21264, 13], "temperature": 0.0, "avg_logprob": -0.12745206434648115, "compression_ratio": 1.8638743455497382, "no_speech_prob": 6.8532899604178965e-06}, {"id": 1298, "seek": 624526, "start": 6251.4400000000005, "end": 6256.6, "text": " And so the value of this, if it's higher, will keep the weights down more, it will reduce", "tokens": [400, 370, 264, 2158, 295, 341, 11, 498, 309, 311, 2946, 11, 486, 1066, 264, 17443, 760, 544, 11, 309, 486, 5407], "temperature": 0.0, "avg_logprob": -0.12745206434648115, "compression_ratio": 1.8638743455497382, "no_speech_prob": 6.8532899604178965e-06}, {"id": 1299, "seek": 624526, "start": 6256.6, "end": 6261.2, "text": " overfitting, but it will also reduce the capacity of your model to make good predictions.", "tokens": [670, 69, 2414, 11, 457, 309, 486, 611, 5407, 264, 6042, 295, 428, 2316, 281, 652, 665, 21264, 13], "temperature": 0.0, "avg_logprob": -0.12745206434648115, "compression_ratio": 1.8638743455497382, "no_speech_prob": 6.8532899604178965e-06}, {"id": 1300, "seek": 624526, "start": 6261.2, "end": 6269.12, "text": " And if it's lower, it increases the capacity of model and increases overfitting.", "tokens": [400, 498, 309, 311, 3126, 11, 309, 8637, 264, 6042, 295, 2316, 293, 8637, 670, 69, 2414, 13], "temperature": 0.0, "avg_logprob": -0.12745206434648115, "compression_ratio": 1.8638743455497382, "no_speech_prob": 6.8532899604178965e-06}, {"id": 1301, "seek": 626912, "start": 6269.12, "end": 6277.84, "text": " All right, I'm going to take this bit for next time.", "tokens": [1057, 558, 11, 286, 478, 516, 281, 747, 341, 857, 337, 958, 565, 13], "temperature": 0.0, "avg_logprob": -0.1764667510986328, "compression_ratio": 1.297872340425532, "no_speech_prob": 1.2410506315063685e-05}, {"id": 1302, "seek": 626912, "start": 6277.84, "end": 6282.0, "text": " Before we wrap up, John, are there any more questions?", "tokens": [4546, 321, 7019, 493, 11, 2619, 11, 366, 456, 604, 544, 1651, 30], "temperature": 0.0, "avg_logprob": -0.1764667510986328, "compression_ratio": 1.297872340425532, "no_speech_prob": 1.2410506315063685e-05}, {"id": 1303, "seek": 626912, "start": 6282.0, "end": 6292.24, "text": " Yeah, there are some from back at the start of the collaborative filtering.", "tokens": [865, 11, 456, 366, 512, 490, 646, 412, 264, 722, 295, 264, 16555, 30822, 13], "temperature": 0.0, "avg_logprob": -0.1764667510986328, "compression_ratio": 1.297872340425532, "no_speech_prob": 1.2410506315063685e-05}, {"id": 1304, "seek": 629224, "start": 6292.24, "end": 6301.4, "text": " So we had a bit of a conversation a while back about the size of the embedding vectors.", "tokens": [407, 321, 632, 257, 857, 295, 257, 3761, 257, 1339, 646, 466, 264, 2744, 295, 264, 12240, 3584, 18875, 13], "temperature": 0.0, "avg_logprob": -0.17506959915161133, "compression_ratio": 1.7699530516431925, "no_speech_prob": 2.3921369574964046e-05}, {"id": 1305, "seek": 629224, "start": 6301.4, "end": 6304.0, "text": " And you talked about your fast AI rule of thumb.", "tokens": [400, 291, 2825, 466, 428, 2370, 7318, 4978, 295, 9298, 13], "temperature": 0.0, "avg_logprob": -0.17506959915161133, "compression_ratio": 1.7699530516431925, "no_speech_prob": 2.3921369574964046e-05}, {"id": 1306, "seek": 629224, "start": 6304.0, "end": 6308.48, "text": " So there was a question if anyone has ever done the kind of a hyperparameter search and", "tokens": [407, 456, 390, 257, 1168, 498, 2878, 575, 1562, 1096, 264, 733, 295, 257, 9848, 2181, 335, 2398, 3164, 293], "temperature": 0.0, "avg_logprob": -0.17506959915161133, "compression_ratio": 1.7699530516431925, "no_speech_prob": 2.3921369574964046e-05}, {"id": 1307, "seek": 629224, "start": 6308.48, "end": 6310.36, "text": " exploration for embeddings.", "tokens": [16197, 337, 12240, 29432, 13], "temperature": 0.0, "avg_logprob": -0.17506959915161133, "compression_ratio": 1.7699530516431925, "no_speech_prob": 2.3921369574964046e-05}, {"id": 1308, "seek": 629224, "start": 6310.36, "end": 6314.4, "text": " I mean, people often will do a hyperparameter search for sure.", "tokens": [286, 914, 11, 561, 2049, 486, 360, 257, 9848, 2181, 335, 2398, 3164, 337, 988, 13], "temperature": 0.0, "avg_logprob": -0.17506959915161133, "compression_ratio": 1.7699530516431925, "no_speech_prob": 2.3921369574964046e-05}, {"id": 1309, "seek": 629224, "start": 6314.4, "end": 6316.76, "text": " People will often do a hyperparameter search for their model.", "tokens": [3432, 486, 2049, 360, 257, 9848, 2181, 335, 2398, 3164, 337, 641, 2316, 13], "temperature": 0.0, "avg_logprob": -0.17506959915161133, "compression_ratio": 1.7699530516431925, "no_speech_prob": 2.3921369574964046e-05}, {"id": 1310, "seek": 631676, "start": 6316.76, "end": 6323.0, "text": " But I haven't seen any other rules other than my rule of thumb.", "tokens": [583, 286, 2378, 380, 1612, 604, 661, 4474, 661, 813, 452, 4978, 295, 9298, 13], "temperature": 0.0, "avg_logprob": -0.1831408168958581, "compression_ratio": 1.519650655021834, "no_speech_prob": 3.7031924875918776e-05}, {"id": 1311, "seek": 631676, "start": 6323.0, "end": 6326.2, "text": " Right, so not productively to your knowledge.", "tokens": [1779, 11, 370, 406, 1674, 3413, 281, 428, 3601, 13], "temperature": 0.0, "avg_logprob": -0.1831408168958581, "compression_ratio": 1.519650655021834, "no_speech_prob": 3.7031924875918776e-05}, {"id": 1312, "seek": 631676, "start": 6326.2, "end": 6332.16, "text": " Oh, productively for an individual model that somebody's building.", "tokens": [876, 11, 1674, 3413, 337, 364, 2609, 2316, 300, 2618, 311, 2390, 13], "temperature": 0.0, "avg_logprob": -0.1831408168958581, "compression_ratio": 1.519650655021834, "no_speech_prob": 3.7031924875918776e-05}, {"id": 1313, "seek": 631676, "start": 6332.16, "end": 6338.64, "text": " And then there's a question here from Zakiya, which I didn't quite wrap my head around.", "tokens": [400, 550, 456, 311, 257, 1168, 510, 490, 1176, 7421, 3016, 11, 597, 286, 994, 380, 1596, 7019, 452, 1378, 926, 13], "temperature": 0.0, "avg_logprob": -0.1831408168958581, "compression_ratio": 1.519650655021834, "no_speech_prob": 3.7031924875918776e-05}, {"id": 1314, "seek": 631676, "start": 6338.64, "end": 6343.52, "text": " So Zakiya, if you want to maybe clarify in the chat as well, but can recommendation", "tokens": [407, 1176, 7421, 3016, 11, 498, 291, 528, 281, 1310, 17594, 294, 264, 5081, 382, 731, 11, 457, 393, 11879], "temperature": 0.0, "avg_logprob": -0.1831408168958581, "compression_ratio": 1.519650655021834, "no_speech_prob": 3.7031924875918776e-05}, {"id": 1315, "seek": 634352, "start": 6343.52, "end": 6349.080000000001, "text": " systems be built based on average ratings of users experience rather than collaborative", "tokens": [3652, 312, 3094, 2361, 322, 4274, 24603, 295, 5022, 1752, 2831, 813, 16555], "temperature": 0.0, "avg_logprob": -0.20529772784258868, "compression_ratio": 1.6865079365079365, "no_speech_prob": 2.3921631509438157e-05}, {"id": 1316, "seek": 634352, "start": 6349.080000000001, "end": 6350.080000000001, "text": " filtering?", "tokens": [30822, 30], "temperature": 0.0, "avg_logprob": -0.20529772784258868, "compression_ratio": 1.6865079365079365, "no_speech_prob": 2.3921631509438157e-05}, {"id": 1317, "seek": 634352, "start": 6350.080000000001, "end": 6351.080000000001, "text": " Not really.", "tokens": [1726, 534, 13], "temperature": 0.0, "avg_logprob": -0.20529772784258868, "compression_ratio": 1.6865079365079365, "no_speech_prob": 2.3921631509438157e-05}, {"id": 1318, "seek": 634352, "start": 6351.080000000001, "end": 6352.080000000001, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.20529772784258868, "compression_ratio": 1.6865079365079365, "no_speech_prob": 2.3921631509438157e-05}, {"id": 1319, "seek": 634352, "start": 6352.080000000001, "end": 6354.4800000000005, "text": " I mean, if you've got lots of metadata, you could.", "tokens": [286, 914, 11, 498, 291, 600, 658, 3195, 295, 26603, 11, 291, 727, 13], "temperature": 0.0, "avg_logprob": -0.20529772784258868, "compression_ratio": 1.6865079365079365, "no_speech_prob": 2.3921631509438157e-05}, {"id": 1320, "seek": 634352, "start": 6354.4800000000005, "end": 6355.4800000000005, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.20529772784258868, "compression_ratio": 1.6865079365079365, "no_speech_prob": 2.3921631509438157e-05}, {"id": 1321, "seek": 634352, "start": 6355.4800000000005, "end": 6360.52, "text": " So if you've got lots of information about demographic data about where the user is from", "tokens": [407, 498, 291, 600, 658, 3195, 295, 1589, 466, 26331, 1412, 466, 689, 264, 4195, 307, 490], "temperature": 0.0, "avg_logprob": -0.20529772784258868, "compression_ratio": 1.6865079365079365, "no_speech_prob": 2.3921631509438157e-05}, {"id": 1322, "seek": 634352, "start": 6360.52, "end": 6366.320000000001, "text": " and what loyalty scheme results they've had and blah, blah, blah.", "tokens": [293, 437, 22831, 12232, 3542, 436, 600, 632, 293, 12288, 11, 12288, 11, 12288, 13], "temperature": 0.0, "avg_logprob": -0.20529772784258868, "compression_ratio": 1.6865079365079365, "no_speech_prob": 2.3921631509438157e-05}, {"id": 1323, "seek": 634352, "start": 6366.320000000001, "end": 6369.120000000001, "text": " And then for products, there's metadata about that as well.", "tokens": [400, 550, 337, 3383, 11, 456, 311, 26603, 466, 300, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.20529772784258868, "compression_ratio": 1.6865079365079365, "no_speech_prob": 2.3921631509438157e-05}, {"id": 1324, "seek": 634352, "start": 6369.120000000001, "end": 6371.280000000001, "text": " Then sure, averages would be fine.", "tokens": [1396, 988, 11, 42257, 576, 312, 2489, 13], "temperature": 0.0, "avg_logprob": -0.20529772784258868, "compression_ratio": 1.6865079365079365, "no_speech_prob": 2.3921631509438157e-05}, {"id": 1325, "seek": 637128, "start": 6371.28, "end": 6377.719999999999, "text": " But if all you've got is kind of purchasing history, then you really want the granular", "tokens": [583, 498, 439, 291, 600, 658, 307, 733, 295, 20906, 2503, 11, 550, 291, 534, 528, 264, 39962], "temperature": 0.0, "avg_logprob": -0.1787669401902419, "compression_ratio": 1.7590361445783131, "no_speech_prob": 4.2631181713659316e-05}, {"id": 1326, "seek": 637128, "start": 6377.719999999999, "end": 6378.719999999999, "text": " data.", "tokens": [1412, 13], "temperature": 0.0, "avg_logprob": -0.1787669401902419, "compression_ratio": 1.7590361445783131, "no_speech_prob": 4.2631181713659316e-05}, {"id": 1327, "seek": 637128, "start": 6378.719999999999, "end": 6383.48, "text": " Otherwise, how could you say like, they like this movie, this movie and this movie.", "tokens": [10328, 11, 577, 727, 291, 584, 411, 11, 436, 411, 341, 3169, 11, 341, 3169, 293, 341, 3169, 13], "temperature": 0.0, "avg_logprob": -0.1787669401902419, "compression_ratio": 1.7590361445783131, "no_speech_prob": 4.2631181713659316e-05}, {"id": 1328, "seek": 637128, "start": 6383.48, "end": 6385.48, "text": " Therefore, they might also like that movie.", "tokens": [7504, 11, 436, 1062, 611, 411, 300, 3169, 13], "temperature": 0.0, "avg_logprob": -0.1787669401902419, "compression_ratio": 1.7590361445783131, "no_speech_prob": 4.2631181713659316e-05}, {"id": 1329, "seek": 637128, "start": 6385.48, "end": 6388.08, "text": " Or you've got it's like, oh, they kind of like movies.", "tokens": [1610, 291, 600, 658, 309, 311, 411, 11, 1954, 11, 436, 733, 295, 411, 6233, 13], "temperature": 0.0, "avg_logprob": -0.1787669401902419, "compression_ratio": 1.7590361445783131, "no_speech_prob": 4.2631181713659316e-05}, {"id": 1330, "seek": 637128, "start": 6388.08, "end": 6389.719999999999, "text": " There's just not enough information there.", "tokens": [821, 311, 445, 406, 1547, 1589, 456, 13], "temperature": 0.0, "avg_logprob": -0.1787669401902419, "compression_ratio": 1.7590361445783131, "no_speech_prob": 4.2631181713659316e-05}, {"id": 1331, "seek": 637128, "start": 6389.719999999999, "end": 6390.719999999999, "text": " Yeah, great.", "tokens": [865, 11, 869, 13], "temperature": 0.0, "avg_logprob": -0.1787669401902419, "compression_ratio": 1.7590361445783131, "no_speech_prob": 4.2631181713659316e-05}, {"id": 1332, "seek": 637128, "start": 6390.719999999999, "end": 6391.719999999999, "text": " That's about it.", "tokens": [663, 311, 466, 309, 13], "temperature": 0.0, "avg_logprob": -0.1787669401902419, "compression_ratio": 1.7590361445783131, "no_speech_prob": 4.2631181713659316e-05}, {"id": 1333, "seek": 637128, "start": 6391.719999999999, "end": 6392.719999999999, "text": " Thanks.", "tokens": [2561, 13], "temperature": 0.0, "avg_logprob": -0.1787669401902419, "compression_ratio": 1.7590361445783131, "no_speech_prob": 4.2631181713659316e-05}, {"id": 1334, "seek": 637128, "start": 6392.719999999999, "end": 6393.719999999999, "text": " Okay, great.", "tokens": [1033, 11, 869, 13], "temperature": 0.0, "avg_logprob": -0.1787669401902419, "compression_ratio": 1.7590361445783131, "no_speech_prob": 4.2631181713659316e-05}, {"id": 1335, "seek": 637128, "start": 6393.719999999999, "end": 6394.719999999999, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.1787669401902419, "compression_ratio": 1.7590361445783131, "no_speech_prob": 4.2631181713659316e-05}, {"id": 1336, "seek": 637128, "start": 6394.719999999999, "end": 6395.719999999999, "text": " Thanks, everybody.", "tokens": [2561, 11, 2201, 13], "temperature": 0.0, "avg_logprob": -0.1787669401902419, "compression_ratio": 1.7590361445783131, "no_speech_prob": 4.2631181713659316e-05}, {"id": 1337, "seek": 639572, "start": 6395.72, "end": 6402.280000000001, "text": " We'll see you next time for our last lesson.", "tokens": [50364, 492, 603, 536, 291, 958, 565, 337, 527, 1036, 6898, 13, 50692], "temperature": 0.0, "avg_logprob": -0.4776041167122977, "compression_ratio": 0.8461538461538461, "no_speech_prob": 0.0003554818395059556}], "language": "en"}