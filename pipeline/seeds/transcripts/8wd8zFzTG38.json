{"text": " Welcome to the final lesson of this section of 2019. Although I guess it depends on the videos, what order we end up doing the extra ones. This is the final one that we're recording live here in San Francisco. Anyway, lesson 14, lesson two of our special Swift episodes. This is what we'll be covering today. I won't read through it all, but basically we're gonna be filling in the gap between matrix multiplication and training ImageNet with all the tricks. And along the way, we're gonna be seeing a bunch of interesting Swift features and actually seeing how they make our code cleaner, safer, faster. I wanna do a special shout out to a couple of our San Francisco study group members who have been particularly helpful over the last couple of weeks since I know nothing about Swift. It's been nice to have some folks who do such as Alexis, who has been responsible actually for some of the most exciting material you're gonna see today. And he is the CTO at Topology Eyewear. So if you need glasses, you should definitely go there and get algorithmically designed glasses literally. So that's pretty cool. So thanks Alexis for your help. And thanks also to Pedro who has almost single-handedly created this fantastic package cache that we have so that in your Jupyter notebooks, you can import all the other modules that we're using and other exported modules from the notebooks and it doesn't have to recompile at all. And so that's really thanks to Pedro. And I actually am a customer of his as well, or at least I was when I used an iPhone. He's the developer of Camera Plus, which is the most popular camera application on the App Store, literally. And back when I used an iPhone, I loved that program. So I'm sure version two is even better, but I haven't tried version two. So you can use his camera while looking through your Topology Eyewear glasses. All right, so thanks to both of you. And where we left off last week was that I made a grand claim. Well, I pointed out a couple of things. I pointed out through this fantastic Halide video that actually running low level kind of CUDA-kernely stuff fast is actually much harder than just running a bunch of for loops in order. And I showed you some stuff based on Halide, which showed here some ways that you can write it fast and here's some ways you could do it quickly. And then I made the bold claim that being able to do this on the GPU through Swift is where we're heading. And so to find out how that's gonna happen, let's hear it directly from Chris. Sure. Thanks, Jeremy. So we will briefly talk about this. So we went through this video and the author of Halide gave a great talk about how in image processing kernels, there's actually a lot of different ways to get the computer to run this and they all have very different performance characteristics and it's really hard to take even a two dimensional blur and make it go fast. But we're doing something even harder. We're not talking about two dimensional images. We're talking about 5D matrices and tensors and lots of different operations that are composed together and hundreds or thousands of ops and trying to make that all go fast is really, really, really, really hard. So if you wanted to do that, what you do is you'd write a whole new compiler to do this and it would take years and years of time. But fortunately, there's a great team at Google called the XLA team that has done all this for us. And so what XLA is, is it's exactly one of those things. It's something that takes in this graph of tensor operations. So things like convolutions and matmols and adds and things like that. It does low level optimizations to allocate buffers, to take these different kernels and fuse them together. And then it generates really high performance code that runs on things like CPUs, GPUs or TPUs, which are crazy fast high performance accelerators that Google has. And so XLA does all this stuff for us now, which is really exciting. And if you take the running BatchNorm example that we left off with and we were talking about, this is the graph that XLA will generate for you. And this is generated from Swift code, actually. And so you can see here what these darker boxes are is they're fusion nodes where it's taken a whole bunch of different operations, push them together, gotten rid of memory transfers, push all loops together. And the cool thing about this is this is all existing shipping technology that TensorFlow has now. There's a big question though, and a big gotcha, which is this only works if you have graphs. And with TensorFlow 1, that was pretty straightforward because TensorFlow 1 was all about graphs. Jeremy talked about the shipping, shipping, shipping, ship, ship, ship, shipping thingy. Ship, ship, shipping, ship, ship, ship. I don't know, my recursion's wrong. And so with TensorFlow 1, it was really natural. With TensorFlow 2, with PyTorch, there's a bigger problem, which is with Eager mode, you don't have graphs. That's the whole point is you wanna have step at a time, you run one op at a time, and so you don't get the notion of these things. So what the entire world has figured out is that there's two basic approaches of getting graphs from Eager mode. There's tracing, and there's different theories on tracing. There's staging and taking code and turning it into a graph algorithmically. And PyTorch and TensorFlow both have similar but different approaches to both of these different things. The problem with these things is they all have really weird side effects and they're very difficult to reason about. And so if Swift for TensorFlow is an airplane, we've taken off and we're just coming off the runway, but we're still building all this stuff into Swift for TensorFlow as the plane is flying. And so we don't actually have this today. The team was working on the demo and it just didn't come together today. But this is really cool. And so one of the problems with tracing, for example, is that in PyTorch or in TensorFlow Python, when you trace, if you have control flow in your model, it will unroll the entire control flow. And so if you have an RNN, for example, it will unroll the entire RNN and make one gigantic thing. And some control flow you wanna ignore, some control flow you wanna keep in the graph. And so having more control over that is something that we think is really important. So Chris, this nearly there is as at end of April, this video will be out somewhere around mid to late June. I suspect it will be up and running by then. And if it's not, you will personally go to the house of the person watching the video and fix it for them. So here's the deal. In two, three months, so that's July, look on the Swift for TensorFlow main page, there should be a CoLab demo showing this. So we'll see what the future will be. And there should be a notebook in the hair brain repo that'll be called batch norm or something. And we'll have an XLA version of this running. Yeah, absolutely. And so Swift also has this thing called graph program extraction. And the basic idea here is that where AutoGraph and TorchScript are doing these things where they're kinda like Python, but kind of not. And Jeremy was talking before about how, like you add a comment in the wrong place and TorchScript will fall over. And it's not, it kinda looks like Python, but really, really is not. With Swift, we have a compiled reasonable language. And so we could just use compiler techniques to form a graph, pull it out for you. And so a lot of things that are very magic and very weird are just very natural when plugged into the system. So I'm very excited about where all this comes. But for right now, this doesn't exist. The airplane is being built. So one last thing that doesn't exist, because Jeremy wanted to talk about this, he's very excited, is there's this question about what is MLIR? And how does MLIR relate to XLA? What is all this stuff going on? How does this, what does this make sense for TensorFlow? And the way I look at this is that XLA is really good if you have, if you want high performance with these common operators, like matrix multiplication, convolution, things like that. These operators can be combined in lots of different ways. Ryan Bastian was a great example of this. And so these are the primitives that a lot of deep learning is built out of. And XLA is really awesome for high performance, particularly weird accelerators. But there's a catch with this, because one of the things that power deep learning is the ability to innovate in many of these ways. And so depthwise convolutions came out, and suddenly with many fewer parameters, you can get really good accuracy wins. And you couldn't do that if you just had convolution. Yeah, and like on the other hand, like depthwise convolutions are a specific case of grouped convolutions. And the reason we haven't been talking about grouped convolutions in class is that so far no one's really got them running quickly. And so there's this whole thing that like somebody wrote a paper about three years ago, which basically says, hey, here's a way to get all the benefit of convolutions, but much, much faster. And we're still, you know, the practical deep learning for coders course still doesn't teach them because they're still not practical because no one's got them running quickly yet. And so we've been talking about this whole course, the goal with this whole platform is to make it an infinitely hackable platform. And so if it's infinitely hackable down a convolution, or give up all performance around a CPU, well, that's not good enough. And so what MLIR is about is there's multiple different aspects of the project, but I think one Jeremy's most excited about is, what about custom ops? How can we make it so you don't bottom out at MatMul and convolution? And so you get that hackability to invent the next great convolution. So the cool thing about this is that this is a solved problem. The problem is all the solutions are in these weird systems that don't talk to each other and they don't work well together and they're solving different slices of it. So Halide, for example, is a really awesome system if you're looking for 2D image processing algorithms. That doesn't really help us. Other people have built systems on top of Halide to try to adapt it and things like that. But this is really not a perfect solution. There's other solutions. So PlatML was recently acquired by Intel and they have a lot of really cool compiler technology that is kind of in their little space. TVM is a really exciting project, also building on Halide, pulling together with its own secret sauce of different things. And it's not just the compiler technology, it's also in each of these cases, they've built some kind of domain specific language to make it easier for you, the data scientist, to write what you want in a quick and easy way. Right. And so, and often, and what happens here is that each of these plug into the deep learning frameworks in different ways. Right, and so what you end up having to do is you end up in a mode of saying, TVM's really good for this set of stuff and Tensor Comprehensions, which is another cool research project, is good at these kinds of things. And so I have to pick and choose the framework I wanna use based on which one they happen to build into, which is not very- And again, we don't teach this in practical deep learning for coders because it's not practical yet. Yeah. These things are generally research quality code, they generally don't integrate with things like PyTorch, they generally require lots of complex build steps. The compile time is often really slow, they work really great on the algorithm on the paper, but they kind of fall apart on things that aren't, all those kinds of problems. So our goal and our vision here with TensorFlow, but with Swiffer TensorFlow also, is to make it so that you can express things at the highest level of abstraction you can. So if you have a Batch Norm layer, totally go for that Batch Norm layer if that's what you want, use it and you're good. If you wanna implement your own running Batch Norm, you can do that in terms of matmulz and ads and things like that, fine. If you wanna sink down further, you can go down to one of these systems. If you wanna go down farther, you can write assembly code for your accelerator if that's the thing you're into. But you should be able to get all the way down and pick that level of abstraction that allows you to do what you wanna do. And so I just wanna give TensorFlow comprehension, this is one random example of how cool this can be. So this is taken straight out of their paper, this is not integrated, but TensorFlow Comprehensions gives you what is basically like Einstein notation on total steroids, it's like, Einstein, yes, good point. It's like Einstein, but taken to a crazy extreme level. And what TensorFlow Comprehensions is doing is you write this very simple code, it's admittedly kind of weird and it has magic and the syntax isn't the important thing, but you write pretty simple code and then it does all this really hardcore compiler stuff. So it starts out with your code, it then fuses the different loops because these two things expand out to loops, it does inference on what are the ranges for all the loops and what the variables that you're indexing into the arrays do, then fuse and tile these things, fuse, tile, then sync the code to make it so the inner loops can be vectorized. This is actually a particularly interesting example because this thing here, gem, is a generalized matrix matrix product. This is actually like the thing on which large amounts of deep learning and linear algebra and stuff is based on. So like a lot of the stuff we write ends up calling a gem. And the fact that you can write this thing in two lines of code, if you look inside like most linear algebra libraries, there will be hundreds or thousands of lines of code to implement something like this. So the fact that you can do this so concisely is super cool. And so the idea that then we could do like, you know, nice little tweaks on convolutions or whatever in similar amounts of code is something that I get very excited about. Yeah, me too. And the other thing to consider with this is that, again, generating really good code for this is hard. But once you make it so that you separate out the code that gets compiled from the algorithms that get applied to it, now you can do search over those algorithms. Now you can apply machine learning to the compiler itself. And now you can do some really cool things that open up new doors. So, I mean, that's actually really interesting because in the world of databases, which is a lot more mature than the world of deep learning, this is how it works, right? You have a DSL, normally called SQL, where you express what you want, not how to get there. And then there's a thing called a query analyzer or query compiler or query optimizer that figures out the best way to get there. And it'll do crazy stuff like genetic algorithms and all kinds of heuristics. And so like what we're seeing here is, we'll be able to do that for deep learning. You know, our own DSLs and our own optimizers, not deep learning optimizers, but more like database optimizers. Yeah, so it's gonna be really exciting. So we're building all this, the MLR part of this is longer time horizon. This is not gonna be done by the time this video comes out. But this is all stuff that's getting built and it's all open source and it's super exciting. So to overall summarize all this TensorFlow infrastructure stuff. So TensorFlow is deeply investing in the fundamental parts of the system. This includes the compiler stuff, also the runtime, opt dispatch, the kernels themselves. There's tons and tons and tons of stuff and it's all super exciting. So let's stop talking about the future. Yeah, I mean, that's kind of boring. Like what can we do today? Yeah, this is very exciting Chris, that sometime in the next year or two, there'll be these really fast things. But I actually know about some really fast languages right now. Really? Yeah, they're called C, C++ and Swift. Oh. Yeah, let me show you what I mean. Oh, okay. These are actually languages that we can make run really fast right now. And it's quite amazing actually how easy we can make this. Like when you say to an average data scientist, hey, you can now integrate C libraries, the response is not likely to be, oh, awesome, right? Because like data scientists don't generally work at the level of C libraries. But data scientists work in some domain, right? You work in neuro radiology, image acquisition, or you work in astrophysics or whatever. And in your domain, there will be many C libraries that do the exact thing that you want to do at great speed, right? And currently you can only access the ones that have been wrapped in Python and you can only access the bits that have been wrapped in Python. What if you could actually access the entire world of software that's been written in C, which is what most software has been written in. And it's easy enough that an average data scientist can do it. So here's what it looks like, right? Let's say we want to do audio processing, okay? And so for audio processing, I'm thinking like, oh, how do I start doing audio processing? And in my quick look around, I couldn't see much in Swift that works on Linux for audio processing. So you write an MP3 decoder from scratch, right? Yeah, I thought about doing an MP3 decoder from scratch, but then I- Lots of signal processing. I figured like people have MP3 decoders already, what are they doing? And I looked it up on the internet and it turns out there's lots of C libraries that do it. And one popular one apparently is called SOPS, right? And I'm a data scientist, I'm not an audio processing person. So this is my process last week was like C, library, MP3 decode, and it says use SOPS. So look at this, I've got something here that says import SOPS. And then it says, edit SOPS, and then it says read SOPS audio. Where did this come from? Well, this comes from a library. Here it is, sound exchange. This is what C library homepages tend to look like. They tend to be very 90s. And basically I looked at the documentation and C library documentation tends to be less than obvious to kind of see what's going on, but you just kind of have to learn to read it, just like you learn to read Python documentation. And so basically it says you have to use this header, and then these are the various functions you can call. There's something called edit, and there's something called open. So here's what I did. I jumped into Vim, and I created a directory, and I called it Swift SOPS. And in that directory I created a few things. I created a file called package.swift, and this is the thing that defines a Swift package. A Swift package is something that you can import. And you can actually type Swift package in it, and it'll kind of create the skeleton for you. Personally, my approach to wrapping a new C library is to always copy an existing C library folder that I've created and then just change the name, because every one of them has the same three files. So this is file number one, you have to give it a name, and then you have to say what's the name of the library in C. And in SOPS the name of the library is SOPS. Step two is you have to create a file called sources, sources, SOPS, module.modulemap. And it contains always these exact lines of code. Again, we just change the word SOPS, and the word SOPS, and the word SOPS. So it's not rocket science. So what this is doing is this is saying that you wanna call it SOPS in Swift. They called it SOXU.H for some reason. Well I actually called it SOXU.H, which we'll see in a moment. And then, but the library is in, it gets linked in by LibSOX. Yeah, exactly. So all these things in C can be different. Yeah, so most of the time we can make them look the same. Yep. And so then the final third file that you have to create is the.h file. And so you put that in sources, SOX, and I call it SOXUmbrellaHeader.h. And that contains one line of code, which is the header file, which as you saw from the documentation, you just copy and paste it from there. So once you add these three files, you can then do that. Okay, and so now I can import SOX, and now this thing, this C function is available to Swift. And so this is kind of wild, right? Because suddenly, a lot of what this impractical deep learning for coders course is about is opening doors that weren't available to us as data scientists before, and thinking what happens if you go through that door? So what happens if you go through the door where suddenly all of the World C libraries are available to you? What can you do in your domain that nobody was doing before because there wasn't any Python libraries like that? And so what I tend to do is write little Swift functions that wrap the C functions to make them look nice. So here's init SOX, which checks for the value I'm told the docs say to check for, and SOX open read. For some reason, you have to pass 0000, so I just wrapped that. And so now I can say, read SOX audio. And so that's gonna return some kind of structure. And so you have to read the documentation to find out what it is, or copy and paste somebody else's code. Very often, the thing that's returned to you is gonna be a C pointer, and that's no problem. Swift is perfectly happy with pointers. You just say point E to grab the thing that it's pointing at, and according to the documentation, there's gonna be something called signal, which is gonna contain things like sample rate, precision, channels, and length. And so I can, let's run those two. So I can run that, and I can see I've opened an audio file with a C library without any extra stuff. One of the things you can do is you can type SOX tab, and now here's all the stuff that's coming in from that header file. That's wild, yeah, super cool. So, so now I can go ahead and read that, and this is kind of somewhat similar to Python. In Python, you can open C libraries in theory and work with them, but I don't do it, I almost never do it, because I find that when I try to, the thing you get back are these C structures and pointers, which I can't work with in Python in a convenient way, or if I do use things like PyBind11, which is something that helps with that, then I have to create all these make scripts and compile processes, and I just don't bother, right? None of us bother. But in Swift, it's totally fine. And then the nice thing is we can bring Python and C and Swift together by typing import Python. The unholy marriage. Yeah, now we can just say, we can take our C array, and say make numpy array, and plot it, right? So we're really bringing it all together now, and we can even use the ipython.display, and we can hear some audio. Hi everyone, I'm Chris. Hi everyone, hi Chris. Hi Jeremy. Thank you Jeremy. My pleasure. All right, so. Why did I say yes to this again? Okay, so this is pretty great, right? We've got Swift libraries, C libraries, Python libraries. We can bring them all together. We can do stuff that our peers aren't doing yet. But what I want to know, Chris, is how the hell is this even possible? Wow, okay. You're a guy that likes to look under the covers, or under the hood. Where's the lift? Cool, so let's talk about this. C is really a very simple language, so it should be no problem to do this, right? So C is two things, actually. It's really important. I think you were just talking about why it's actually very useful. There's tons of code available in C. A lot of that C is really useful. But C's actually a terrible, crazy, gross language on its own, right? C has all these horrible things in it, like pointers that are horribly unsafe. And we have a question. Oh, let's do it. Is it possible to achieve similar results in Python using something like Cython? Yeah, absolutely. So Cython is a Python-like language which compiles to C. And I would generally rather write Cython than C for integrating C with Python. You still kind of, it's actually easier in a Jupyter notebook, because you can just say %%Cython and kind of integrate it. But as soon as you want to start shipping a module with that thing, which presumably is the purpose is you want to share it, you then have to deal with like build scripts and stuff like that. So like Cython has done an amazing job of kind of making it as easy as possible. But I personally have tried to do quite a lot with Cython in the last few months and ended up swearing off it, because it's just still not convenient enough. I can't quite use a normal debugger and a normal profiler and just ship the code directly. And it's still, yeah, it's great for Python if that's what you're working with, but it's nowhere near as convenient for like, I've created Swift C libraries. I created a Swift C library within a week of starting to use Swift. It was just very natural. Cool. And so the thing I want to underscore here is that C is actually really complicated. C has macros, it's got this pre-processor thing going on. It's got bit fields and unions and it's weird notion of what vargs are. It's got volatile, it's got all this crazy stuff that the grammar is context sensitive and gross. And so it's just actually really hard to deal with. You sound like somebody who's been through the process of writing a C compiler and came out the other side. Well, so the only thing worse than C is C++. Uh-huh. And it has this like dual side of it. It's both more gross and huge, and it's also more important in some ways. And so Swift doesn't integrate with C++ today, but we want to be able to. We want to be able to provide the same level of integration that you just saw with C and C++. But how are we going to do that? Well, Swift loves C APIs like Jeremy was just saying. And so we love C APIs because we want you to be able to directly access all this cool functionality that exists in the world. And so the way it works, as you just saw, is we take the C ideas and remap them into Swift. And so because of that, because they're native pure Swift things, that's where you get the debugger integration. That's where you get code completion. That's where you get all the things you expect to work in Swift talking to dusty deck old grody C code from the 80s or wherever you got it from, whatever epoch. And so, and we also don't want to have wrappers or overhead because that's totally not what Swift's about. So Jeremy showed you that usually when you import the C API into Swift, it looks like a C API. And so you could, but the nice thing about that is that you can build the APIs that you want to wrap it and you can build your abstractions and make that all good in Swift. So one of the ways this happens is that inside the Swift compiler, it can actually read C header files. And so we don't have a great way to plug this into workbooks quite yet. But Swift can actually take a C header file like math.h which has macros. Here's M under bar E because M under bar E is a good way to name E apparently. Here's the old school square root. Here's the sine and cosine function which, you know, of course it returns sine and cosine through pointers because C doesn't have tuples, right? And so when you import all that stuff into C, into Swift, you get M under bar E as a double that you can get. You have square root and you can totally call square root. You have sine and cosine. You get this unsafe mutable pointer double thing which we'll talk about later. Similarly, like malloc, free, realoc, all this stuff exists. And so just to show you how crazy this is, let's see if we can do the side by side thing. Can you make it do side by side? Is that a challenge? Yes. My Windows skills are dusty. Check it out. Okay. Beautiful. So what we have here is we have the original header file, math.h, on the left. And if you look at this, you'll see lots of horrible things in C that everybody forgets about because you never write C like this. But this is what C looks like when you're talking about libraries. So we've got a whole bunch of if-defs. We've got macros. We've got like crazy macros. We've got conditionally enabled things. We've got these things are also macros. We've got inline functions. We've got tons and tons and tons of stuff. We've got comments. We've got structures like exception, of course. That's an exception, right? So when you import this into Swift, this is what the Swift compiler sees. You see something that looks very similar, but this is all Swift syntax. So you see you get the header, the comments. You get all the same functions. You get all of the, like here's your m under bar e. And you get your structures as well. And this all comes right in. And this is why Swift can see it. Now, how does this work? That's the big magic question. So if you want to get this to work, what you can do is you can build into the Swift compiler. We can write a C parser, right? And we can implement a C preprocessor. And we can implement all the weird rules in C. Someday, we can extend it and write C++ as well. And we can build as this library so the Swift compiler knows how to parse C code. And a C++ compiler is pretty easy to write. So we can hack that on a weekend. Or, yay, good news, like we've already done this many years ago, it's called Clang. So what Clang is, is it's a C++ compiler. Oh, this is getting even more talk about how horrible C is. You actually get inline functions. Inline functions, the insane thing about inline functions is that they don't exist anywhere in a program unless you use them. They get inlined. And so if you want to be able to call this function from C, you actually have to code gen. You have to be able to parse that, code gen, understand what unions are now, understand all of this crazy stuff just so you can get the sign bit out of a float. C also has things like function pointers and macros and tons of other stuff. It's just madness. And so the right way to do this is to build a C compiler. And the C compiler we have is called Clang. And so what ends up happening is that when Jeremy says import socks, Swift goes and says, ha ha, what's a socks? Oh, it's a module. OK, what is a module? Oh, it's C. Oh, it's got a header file. Fire up Clang. Go parse that header file. Go parse all the things the header file pulls in. That's what an umbrella header is. And go pull the entire universe of C together into that module. And then build what's called syntax trees to represent all the C stuff. Well, now we've got a very perfect, pristine C view of the world the exact same way a C compiler does. And so what we can do then is we can build this integration between Clang and between Swift, where when you say give me malloc or give me socks init, Swift says, whoa, what is that? Hey, Clang, do you know what this is? And Clang says, oh, yeah, I know what socks init is. It's this weird function. It takes all these pointers and blah, blah, blah. And Swift says, OK, cool. I will remap your pointers into my unsafe pointer. I will remap your int into my int 32, because the languages are a little bit different. And so that remapping happens. And then when you call that inline function, Swift doesn't want to know how unions work. It's crazy. So what it does instead is it says, hey, Clang, you know how to do all this stuff. You know how to code generate all these things. And they both talk to the LLVM compiler that we were talking about last time. And so they actually talk to each other. They share the code. Clang does all that heavy lifting. And now it's both correct. And it just works. Two things we like. And so these two things plug together really well. And now Swift can talk directly to C APIs. It's very nice. If you want to geek out about this, there's a whole talk. It's like a half hour, an hour long, talking about how all this stuff works at a lot lower level. We will add that link to the lesson notes. Yeah. So let's jump back to your example. So one of the reasons I'm really interested in this description, Chris, is that it's kind of all about one of the reasons I really wanted to work with you, apart from the fact that you're very amusing and entertaining, is that this idea of what you're doing and what you did with Clang and Swift is like the kind of stuff that we're going to be seeing is what's happened with how differentiation is getting added to Swift. And this idea of being able to pull on this entire compiler infrastructure, as you'll see, is actually going to allow us to do some similarly exciting and surprisingly amazing things in deep learning world. And I'll say this is all simple now, but actually getting these two massive systems talk to each other was kind of heroic. And it was getting Python integrated was comparatively easy because Python is super dynamic and C is not dynamic. Yeah. And one thing I'll say about C libraries is each time I come across a C library, many of them have used these weird edge case things Chris described in surprising ways. And so I just wanted to point at a couple of pointers as to how you can deal with these weird edge cases. So when I started looking at kind of how do I create my own version of tf.data, I need to be able to read JPEG files, I need to be able to do image processing. I was interested in trying this library called vips. And vips is a really interesting C library for image processing. And so I started looking at bringing in the C library. And so I started in exactly the way you've seen already. So let's do that. So you'll find just like we have a Swift Sox in the repo, there's also a Swift Vips. And we'll start seeing some pretty familiar things. There's the same package.swift that you've seen before, but now it's got some extra lines we'll describe in a moment. There's the sources, vips, module map with the exact three lines of code that you've seen before. There's the sources, vips, some header, I call it a different name in this case, which has the one line of code, which is connecting to the header. After you've done that, you can now import vips done. But it turns out that the vips documentation says that they actually added the ability to handle optional positional arguments. In C. In C. And so it turns out that you can do that in C, even though it's not officially part of C, by using something called bugs, which is basically in C. You can say, the number of arguments that go here is kind of not defined ahead of time, and you can use something I've never heard of before called a sentinel. And basically, you end up with stuff which looks like this. You end up with stuff which looks like this, where you basically say, I want to do a resize, and it has some arguments that are specified, like horizontal scale, and by default, it makes the aspect ratio the same. But if you want to also change the aspect ratio and have a vertical scale, you literally write the string vscale, and that says, oh, the next argument is the vertical scale. And if you want to use some different interpolation kernel, you pass a word kernel, and you say there's some different interpolation kernel. Now, this is tricky, because for all the magic that Swift does do, it doesn't currently know how to deal with the args and sentinels. It's just an edge case of the C world that Swift hasn't handled yet. I think this might be the last edge case. Okay. Jeremy has this amazing thing to find the breaking point of anything. Oh, that's what I do. Yes. But no problem, right? The trick is to provide a header file where the things that Swift needs to call look like the things that they expect. So in this case, you can see I've actually written my own C library. Right? And so I added a C library by literally just putting into sources. I just created another directory. And in there, I just dumped a C header file. Right? And here's the amazing thing. As soon as I do that, I can now add that C library, not pre-compiled, but actual C code I've just written, to my package.swift, and I can use that from Swift as well. Right? And so that means that I can wrap the Vips weird var args resized version with a non-var args resized version where you always pass in vertical scale, for instance. And so now, I can just go ahead and say, Vips load image. And then I can say, Vips get, and then I can pass that to Swift for TensorFlow in order to display it through matplotlib. Now, there's a really interesting thing here, which is when you're working with C, you have to deal with C memory management. So Swift has this fantastic reference counting system, which nearly always handles memory for you. Every C library handles memory management differently. So we're about to talk about OpenCV, which actually has its own reference counting system, believe it or not. But most of the time, the library will tell you, hey, this thing is gonna allocate some memory, you have to free it later, right? And so here's a really cool trick. The Vips get function says, hey, this memory, you're gonna have to free it later. To free memory in C, you use the free function, because we can use C functions from Swift. We can use the free function. And I need to make sure that we call it when we're all done. And there's a super cool thing in Swift called defer. And defer says, run this piece of code before you finish doing whatever we're doing, which in this case would be before we exit from this function. Yeah, so if you throw an exception, if you return early, like anything else, it will make sure to run that. Yeah, in this case, I probably didn't need defer, because there isn't like exceptions being thrown, or lots of different return places. But that's my habit, is that if I need to clean up memory, I just chuck it in a defer block. Well, at least that's one of the two methods that I use. So that's that. So because I like finding the edges of things and then doing it anyway, the next thing I looked at, and this gives you a good sense of how much I hate tf.data, is I was trying to do anything I could to avoid tf.data. And so I thought, all right, let's try OpenCV. And for those of you that have been around FastAI for a while, you'll remember OpenCV is what we used in FastAI 0.7. And I loved it because it was insanely, insanely fast. It's fast, reliable, high quality code that covers a massive amount of computer vision. It's kind of like, it's what everybody uses if they can. And much to my sadness, we had to throw it out, because it hates Python multiprocessing so much. It just kept creating weird race conditions and crashes and stalls. Like literally the same code on the same operating system on two different AWS servers that are meant to be the same spec would give different results. So that was sad. So I was kind of hopeful maybe it'll work in Swift. So we gave it a go. And unfortunately, since I last looked at it, they threw away their C API entirely, and then L C++ only. And Chris just told you we can't use C++ from Swift. But here's the good news. You can disguise it so Swift doesn't know that it's C++. And so the disguise needs to be a C header file that only contains C stuff, right? But what's in the C++ file behind the header file? Can be anything at all. Clang knows Pascal calling conventions, and Swift can call them. I didn't know that. Pascal strings too. So here's Swift CV. And so Swift CV has a very familiar looking package.swift that contains the stuff that we're used to. And it contains a very familiar looking OpenCV for module map. Now OpenCV actually has more than one library. So we just have to list all the libraries. It has a very familiar looking. Actually, we don't even have a, oh, sorry, that's right. So we didn't use the header file here, because we're actually going to do it all from our own custom C++ slash C code. So I created a C OpenCV. And inside here, you'll find C++ code. And we actually largely stole this from the Go OpenCV wrapper, because Go also doesn't know how to talk to C++, but it does know how to talk to C. So that was a convenient way to kind of get started. And you can see that, for example, we can't call new, because new is C++. But we can create a function called matnew that calls that. And then we can create a header that has matnew. And that's not C++. This is actually a plain C struct, pointed to a struct. And so I can call that. And so even generics, C++ generics, we can handle this way. So OpenCV actually has a full on multi-dimensional generic array. It's like NumPy with matrix multiplication, all the stuff in it. And the way its generic stuff works is that you can ask for a particular pixel, and you say, what data type is it using C++ generics? So we just create lots and lots of different versions, or all the different generic versions, which in the header file look like C. So once we've done all that, we can then say, import SwiftCV and start using OpenCV stuff. So what does that look like? Well, now that we can use that, we can read an image. We can have a look at its size. We can get the underlying C pointer. And we can start doing timing things and kind of see, is it actually looking like it's going to be hopeful in terms of performance, and so forth. I was very scared when I started seeing in Swift all these unsafe mutable pointers and whatnot. They're designed to make you scared. It starts with unsafe. Fair enough. But this is C, right? And so C is inherently unsafe. Yeah. So a theory on that is that it does not prevent you from using it. It just makes it so you know that you're in that world. But there's actually this great table I saw from Ray Wendelik's website. And I've stolen it here. And basically, what he pointed out is the names of all of these crazy pointer types actually have this very well structured thing. They all start with unsafe. They all end with pointer. And in the middle, there's this little mini language, which is can you change them or not? Are they typed or not? Do we know the count of the number of things in there or not? And what type of thing do they point to if they're typed? So once you kind of realize all of these names have that structure, suddenly things start seeming more reasonable again. We have two questions. All right. Let's go with the two questions. One is, are the C libraries dynamically linked or statically linked or compiled from source to be available in Swift? Sure. By default, if you import them, they are statically linked. And so they'll link in with the normal linker flags. And if the library is a.a file, then it will get statically linked directly into your Swift code. If it's a.so file, then you'll dynamically link it. But it's still linked to your executable. All the linker stuff, so dlopen, is a C API. And so if you want to, you can dynamically load C libraries. You can look up their symbols dynamically. You can do all that kind of stuff, too. Another question is, how much C do you have to know to do all these C-related imports? Almost none. So I don't really know any C at all. So I kind of randomly press buttons until things start working. I'll copy and paste other people's C code. Yeah, the internet Stack Overflow has a lot of helpful stuff. Yeah. You need to know there's a thing called a header file. And that contains a list of the functions that you can call. And you need to know that you type hash include, angle brackets, header file. But you can just copy and paste the Swift Socks library that I've already shown you, which has the three files already there. And so really, you don't need to know any C. You just need to replace the word Socks with the name of the library you're using. And then you need to work through the documentation that's in C. And that's the bit where it gets like, I find the tab completion stuff is the best way to handle that. It's like hit tab. And you say let x equal. And then you call some function. And then you say x dot. And you see what's inside it. And things kind of start working. And for all the hard time you give Socks as not a web design firm, it has a pretty well-structured API. And so if you have a well-structured API like this, then using it is pretty straightforward. If you have something somebody hacked together, they didn't think about it, then it's probably going to be weird. And you may have to understand their API. And it may require you to understand a lot of C. But those are the APIs that you probably won't end up using. Because if they haven't gotten a lot of love to their API, people aren't using it usually. My impression is that almost all of the examples of the future power of Swift seem to rely on not on the abstraction to higher levels, but on the diving into lower level details. As a data scientist, I try to avoid doing this. I only go low if I know there's a big performance gain to be had. So let me set my perspective as a data scientist. And maybe we can hear you all. Well, and I was just going to inject, we're starting at the bottom. So we'll be getting much higher level soon. Yeah. But I mean, there's a reason that I'm wanting to teach this stuff, which is that I actually think as data scientists, this is our opportunity to be far more awesome. It's like being able to access, like something I've noticed for the last 25 years is like everybody I know in, I mean, it didn't used to be called data science, but we used to call it like industrial mathematics or whatever, operated within the world that was accessible to them, right? So like at the moment, for example, there's a huge world of something called sparse convolutions that are, I know they're amazing. I've seen like competition winning solutions. They like get state of the art results. There's like two people in the world doing it because it all requires custom CUDA kernels, you know. For years, for decades, almost nobody was doing differentiable programming because we had to calculate the derivatives by hand. So like it's not just about, oh, I want an extra, it's absolutely not about, I want an extra 5% of performance. It's about being able to do whatever's in your head. I used to be a management consultant, I'm afraid to say, and I didn't know how to program, and I knew Excel. And the day that I learned Visual Basic was like, oh, now I'm not limited to the things I can do in a spreadsheet, I can program, you know. And then when I learned Delphi, it was like, oh, now I'm not limited to the things that I can program in a spreadsheet, I can do things that are in my head. So that's where I want us all to get to. Yep. Hey, and some people are feeling overwhelmed with Swift, C, C++, Python, PyTorch, TensorFlow, Swift for TensorFlow. Do we need to become experts on all these different languages? No. No, we don't. But can I show why this is like super interesting? Because this is like, this like, so let me show you why I started going down this path, right, which is that I was using tf.data. And I found that it took me 33 seconds to iterate through ImageNet. And I know that in Python, we have a notebook which Sylvia created to compare called timing. And the exact same thing takes 11.5 seconds. And like this is not an insignificant difference. Waiting more than three times as long just to load the data is just not okay for me. So I thought, well, I bet OpenCV can do it fast. So I created this little OpenCV thing. And then I created a little test program. So this is the entirety of my test program, right, which is something that downloads ImageNet and reads and resizes images and does it with four threads. And so if you go Swift run, sorry, Swift run. Okay, so when I run this, check this out, 7.2 seconds, right. And so this was like half a day's work. And half a day's work I have something that can give me an image processing pipeline that's even faster than PyTorch. And so it's not just like, oh, we can now do things a bit faster. But it's now like any time I get stuck that I can't do something, it's not in the library I want or it's so slow as to be unusable, you know, this whole world's open. So I'd say like we don't really touch this stuff until you get to a point where you have no choice but to. And at that point, you're just really glad it's there. Well, and to me, I think it's also the capabilities important even if you don't do it. So keep in mind, this is all code that's in a workbook. So you can get code in the workbook from anywhere. And now you can share that workbook. And you don't have to share this like tangled web of dependencies that have to go with the workbook. And so the fact that you can do this in Swift doesn't mean that you yourself have to write the code. But it means you can build on code that other people wrote. And if you haven't seen Swift at all, if this is your first exposure to it, this is definitely not the place you start. Like the data APIs that we're about to look at would be a much more reasonable place to start. You've had a month or two months worth of hacking with Swift time. And that's Jeremy month. So that's like a year for normal people. So this being like super powerful and the ability to do this is I think really great. And I agree with you. Yeah. And I'm totally not a C programmer at all. And it's honestly, it's been more like two weeks. Because before that, I was actually teaching a Python course, believe it or not. But Sylvia has been doing this for a month. Yeah. So I mean, so this is all, it's all there. And I would definitely recommend ignoring all of this stuff. And we're about to start zooming up the levels of the stack. But the fact that it's there I think is reassuring. Because one of the challenges that we have with Python is that you get this ceiling. And if you get up to the ceiling, then there's no going further without this crazy amount of complexity. And whether that be concurrency or whether that be C APIs or whether that be other things, that prevents the next steps and the next levels of innovation and the industry moving forward. And this is meant to be giving you enough to go on with until a year's time course as well. So like, hopefully this is something where you can pick and choose which bits you want to dig into. And whichever bit you pick to dig into, we're showing you all the depth that you can dig into over the next 12 months. So I was really excited to discover that we can use OpenCV, which is something I've wanted ever since we had to throw it away from Fast AI. And so I thought, you know, what would it take to create a data blocks API with OpenCV? And thanks to Alexis Gallagher, who kind of gave us the great starting point to say, well, here is what a Swifty style data blocks would look like. We were able to flesh it out into this complete thing. And when Chris described Alexis to me as the world leader on value types, I was like, wait, I thought you created them. I thought, okay, I guess we can listen to Alexis's code. I will say I'm terrified about presenting those slides because Alexis is sitting right there. And if you start scowling, then oh, no. We have a handheld mic. Come and correct us any time. So there's a thing here called OC data block generic, where you'll find that what we've actually done is we've got the entire data blocks API in this really interesting Swifty style. And what you'll see is that when we compare it to the Python version, this is on every axis very significantly better. So let's talk about some of the problems with the data block API in Python. I love the data block API, but lots of you have rightly complained that we have to run all the blah, blah, blah, blah, in a particular order. If we get the wrong order, we get inscrutable errors. We have to make sure that we have certain steps in there. If we miss a step, we get inscrutable errors. It's difficult to deal with at that level. And then the code inside the data blocks API, I hate changing it now because I find it too confusing to remember like why it all fits together. But check out this Swift code that does the same thing, right? So is that download? This is just the same get files we've seen before. All we need to do is we say, you know what? If you're going to create some new data bunch, you need some way to get the data. You need some way, and let's assume that they're just paths for now. You need some way to turn all of those paths into items. So something like our item list in Python. You need some way to split that between training and validation. And you need some way to label the items. So for example, for image net, download calls that. And things that convert paths to images, so which grab all of the list of paths is that collect files. And then the thing that converts, that decides whether they're training or validation is whether the parent.parent is trained or not. And the thing that creates the label is the parent. And so like we can basically just define this one neat little package of information, and we're done. And Swift will actually tell us if we forgot something. Or if one of the things that we provided, like is training is meant to return true or false, if it's training or validation, if we return, like accidentally return the words train instead, it'll complain and let us know. So like I just love this so much. But to understand what's going on here, we need to learn a bit more about how Swift works and this idea of protocols. Yeah, so this is something that is actually useful if you are doing deep learning stuff. So let's talk about, sorry, go for it. So let's talk about what protocols are in Swift. So we've seen structs. We will see classes later. But right now we want to talk about what protocols are. And if you've worked in other languages, you may be familiar with things like interfaces in Java. Abstract classes are often used. Advanced other weird languages have things called type classes. And so all these things are related to protocols in Swift. And what protocols do is they're all about splitting the interface of a type from the implementation. And so we'll talk about layer later. Layer is a protocol, and it says that to use a layer, or rather to define a layer, you have this call. So layers are callable, just like in PyTorch. And so then you can define a dense layer and say how to call a dense layer. You can define a conv2d and show how to implement a conv2d layer. And so there's a contract here between what a type is supposed to have, all layers must be callable. And then the implementations, these are different. So this is pretty straightforward stuff. Although even that's quite nice, right? Because like in PyTorch, you kind of have to know that there's something called forward. And if you misspell it or forget it, put it there, or put done to call instead of forward, you get kind of weird and screwable errors. Whereas with this approach. You get tab completion for the signature. Yeah, and so Swift will tell you if you get it wrong. It'll say this is what the function should have been called. Yeah, that's great. And so what this is really doing is this is defining behaviors for groups of types. And so we're saying a layer. Layer is like the commonality between a whole group of types that behave like a layer. And what does that behavior mean? Well, it's a list of what are called requirements. And so these are all the methods that the type has to have. This is the signatures of the types. And these things often have invariance. And so one of the things that Swift has in its library is the notion of equatable. What is equatable? Well, an equatable is any type that has this equals equals operator, right? And then it says what is equatability and all that kind of stuff. Now, the cool thing about this is that you can build up towers of types. And so you can say, well, equatable gets refined by an additive arithmetic. And an additive arithmetic is something that supports addition and subtraction. Then if you also have multiplication, you can be numeric. And if you also have negation, then it can be signed. And then you can have integers and you can have floating point. And now you can have all these different things that exist in the ecosystem of your program and you can describe them. And so this is all very, these things, these ways to reason about these groups of types give you the ability to get these abstractions that we all want. And these types already exist in Swift. These all exist and you can go see them in the standard library. And so why do you want this? Well, the cool thing about this is that now you can define behavior that applies to all of the members of that class. And so what we're doing here is we're saying not equal. Well, all things that are equatable in this T colon equatable says I work with any type that is equatable. What this is doing is this is defining a function not equal on any type that's equatable and it takes two of these things and returns a bool. And we can implement not equal by just calling equals equals, which all equatable things are, and then inverting it. So to be clear, what Chris just did here was he wrote one function that is now going to add behavior to every single thing that defines equals automatically, which is pretty magic. Which is like everywhere, boom, one place, super, super abstract. But this also works for lots of other things. This works for like absolute value. What does absolute value mean? Well, it needs any type that is signed and numeric and that's comparable. And how do you implement absolute value? Well, you compare the thing against zero. If it's less than zero, you negate it. Otherwise, you return it. Super simple. But now everything that is a number that can be compared is now absable. Types, same thing. All these things work the same way. And so with dictionary, what you want is you want the keys in a dictionary all have to be hashable. This is how the dictionary does its efficient lookups and things like that. The value can be anything though. And so all these things kind of stack together and fit together like building blocks. One of the really cool things about this now is that we can start taking this further. We talked about not equal building on top of equal equal. In the last lesson, we defined this isOdd function. We defined it on int. Well, because this protocol exists, we can actually add it as a method to all things that are binary integers. And so we can say, hey, put this on all binary integers and give them all an isOdd method. And now I don't have to put isOdd on int and int 16 and int 32 and the C weird things. And we could just do it in one place and now everybody gets this method. Right? On layers. Right? This is something that's closer to home. Here we can say, hey, I want an inferring from method that does some learning phase switching magic nonsense. But now because I put this on all layers, well, I can use it on my model because your model's a layer. My dense layer, that's a layer. And so this thing allows this one simple idea of defining groups of types and then broadcasting behavior and functionality onto all of them at once is really powerful. Yeah. I mean, it's like Python's monkey patching, which we use all the time. But A, it's not this kind of hacky thing with weird undefined behavior sometime. And B, we don't have to monkey patch lots and lots of different places to add functionality to lots of things. We just put it in one place and the functionality gets sucked in by everything that can use it. Yeah. And remember, extensions are really cool because they work, even if you didn't define the type. And so what you can literally do is you can pull in some C library, not that we love C, but some C library and add things to its structs. I mean, this is. Or have things automatically added to those structs because it already supports those operations. Yeah. So like all this stuff composes together in a really nice way, which allows you to do very powerful and very simple and beautiful things. So mixins show up and you can control where they go. And so here's an example. This is something that Jeremy wrote. And so he defined his own protocol countable. And he says, things are countable if they have a variable named count. And the only thing I care about for countable things is I can read it. I don't have to write it. That's what the get means. And so he says, array is countable. His open CV mat thingy is countable. Like all these. There's a number of pixels in it. Yeah. Yeah. All these things are countable. And then Jeremy says, hey, we'll take any sequence. Let's add a method or a property called total count to anything that's a sequence. So a sequence is the same as Python's iterables, what I think you can iterate through. Exactly. And so this is things like dictionaries and arrays and ranges and like all these things are sequences. And it says, so long as the element is countable, so I have an array of countable things, then I can get a total count method or a property. Right? And the way this is implemented is it just says, hey, map over myself, get the count, add all the counts up together, and then I have a total count of all the things in my array. And now if I have an array of arrays, an array of mats, lazy mapped collection sequence thingy of mats, whatever it is, now I can just ask for its count or its total count. And Chris, so this functionality you're describing is basically the same as what Haskell calls type classes. Yes. Is that right? Yeah. So is this kind of like stolen from Haskell? It's borrowed. I mean, so the interesting thing for me here is that- We let them play with it too. Well, the interesting thing, the reason I ask is because like I've tried to use Haskell before many times and have always failed. I'm clearly not somebody who's smart enough to use Haskell. Yet I wrote the code that's on the screen right now, like a couple of days ago, and I didn't spend a moment even thinking about the fact I was writing the code. It was only like the next day that I looked back at this code, and I thought like, wow, I just did something which no other language I've used both could do, and I was smart enough to do it. Like it kind of makes this what I think of as like super genius functionality available to normal people. Yeah, and so back in the very, very beginning of this, we talked about Swift's goal is to be able to take good ideas wherever they are and assemble them in a tasteful way, and then be not weird. Like being not weird is a pretty hard but important goal. So the way I look at programming languages is that programming languages in the world have these gems in them, and Haskell has a lot of gems, incidentally. It's a really cool functional language. It's very academic. It's super powerful in lots of ways, but then it gets buried in weird syntax, and it's purely functional. You have to be, you know, it has a very opinionated worldview of how you're supposed to write code, and so it appeals to a group of people, which is great, but then it gets ignored by the masses, and to me it's really sad that the great technology in programming languages that's been invented for decades, and decades, and decades gets forgotten just because it happened to be put in the wrong place. Yeah, I mean, it's not just that, but see from the whole way things are described, you're all about monoids, and monads, and whatever. Existentials, and things like that. Yeah, exactly. So a lot of what Swift is trying to do is it's trying to take those ideas, re-explain them in a way that actually makes sense, stack them up in a very nice, consistent way, and design it, right? And so a lot of this was pull these things together, and really polish, and really push, and like make sure that the core is really solid. Okay, we have a question. How does the Swift protocol approach avoid the inheritance tree hell problem in languages like C sharp, where you end up with enormous trees that are impossible to refactor? And similarly, what are the top opinions around using the mixin pattern, which has been found to be an anti-pattern in other contexts? Yeah, so the way that Swift implements this is completely different than the way that subclasses work in C sharp, or Java, or other object oriented languages. There what you get is something called a V table, and so your type has to have one set of mappings for all these different methods, and then you get very deep inheritance hierarchies. In Swift, you end up adding methods to int, like so we, on the last slide, added a method is odd to all the integers. Integers don't have a V table. That would be a very inefficient thing to do, and so the implementation is completely different. The trails are completely different. I will, at the end of this, I think, in a couple of slides, have a good pointer that will give you a very nice deep dive on all that kind of stuff. So also there's the binary method problem, and there's a whole bunch of other things that are very cleanly solved in Swift protocols. Okay, and then there was also a question, out of curiosity, could you give an estimate of how long it would take someone to go from a fair level of knowledge in Python, TensorFlow deep learning, to start being able to be a competent contributor to Swift for TensorFlow? Yeah, so we've designed Swift in general to be really easy to learn, and so that you can learn as you go. And this course is a little bit very, it's very bottoms up, but a lot of Swift, just like Python, was designed to be taught. And what you start with when you go in from that perspective is you get a very top-down kind of perspective, and what I would do is I would start with Google for a Swift tour, and you get a very nice top-down view of the language, and it's very approachable. And like just pick something that is in fast AI, in some fast AI notebook now, we haven't implemented it yet, and pop it into a notebook, right? And the first time you try to do that, you'll get all kinds of weird errors and obstructions, and you won't know what's going on, but after a few weeks. That's on the forum, and that's what the community's about. Yeah, lots of help from the forum, and Chris and I are both on the forum, and there's the SETF teams on the forum. We'll help you out, and in a few weeks' time, you'll be writing stuff from scratch and finding it a much smoother process. Yeah. So I want to address one weird thing here and give you something to think about, and you might wonder, okay, well, Jeremy wants to know all the countable things. We have arrays and we have MAT, and we have to say that they are countable, but the compiler knows that it's countable or not. Like if you try to make something countable and it doesn't have a count method, the compiler will complain to you. So why do we have to do this? Well, let's talk about a different example, and the answer is that protocols are not just about methods, and this is also related to the C-sharp question, but the behavior of those methods also matters. And so here we're going to switch domains and talk about shapes, and so I have shape. All shapes have to have a draw method, right? This is super easy, and what I can do is I can define an octagon and tell it how to draw. I can define a diamond, tell it how to draw using exactly the same stuff that we just saw before, really easy. And the cool thing about this is now I can define a method, refresh, and now refresh, all it does is it clears the canvas and draws the shape, and so all shapes will get a refresh method. So if you go do a tab completion on your octagon, it all just works. But what happens if you have something else with the draw method? So cowboys know how to draw. It's a very different notion of what drawing is, right? We don't want cowboys to have a refresh method. It doesn't make sense to clear the screen and then pull out a gun. That's not what we're talking about here. And so the idea of protocols is really, again, to categorize and describe groups of types, and one of the things you'll see, which is kind of cool, is you can define a protocol with nothing in it. So it's a protocol that doesn't require anything. And then you go say, I want that type, that type, that type, that type to be in this group. And now I will have a way to describe that group of types that can be totally random, whatever makes sense for you. And then you could do reflection on it. You can do lots of different things that now apply to exactly that group of types. And I actually found, I still find, that this kind of protocol-based programming approach is like the exact upside down opposite of how I've always thought about things. It's kind of like you don't create something that contains these things, but you kind of like, I don't know, somehow shove things in. And the more I've looked at code that works this way, the more I realize it tends to be clearer and more concise. But I still find it a struggle because I just don't have that sense of this is how to go about creating these kinds of APIs. And one of the things you'll notice is that we added this protocol to array in an extension, right? So unlike interfaces in a Java or C Sharp type of language, we can take somebody else's type and then make it work with the protocol after the fact. And so I think that's a superpower here that allows you to work with these values in different ways. So this is a super brief, high-level view of protocols. Protocols are really cool in Swift, and they draw on a lot of great work in the Haskell and other communities. There's a bunch of talks, and even Jeremy wrote a blog post that's really cool that talks about some of the fun things you can do. One extension makes code hard to read because once a functionality of a particular API or class is extended in this way, you won't know if the functionality is coming from the original class or from somewhere else. Yeah, so that's something you let go of when you write Swift code. And there's a couple of reasons for that, one of which is that you get good ID support. And so again, we're kind of building some parts of this airplane as we fly it. But in Xcode, for example, you can click on a method and jump to the definition, right? And so you can say, well, okay, here's a map on array. Where does map come from? Well, map isn't defined on array. Map, filter, reduce, those aren't defined on array. Those are actually defined on sequence. And so all sequences have map, filter, reduce, and a whole bunch of other stuff. And so arrays are, of course, sequences, and so they get all that behavior. And so the fact that it's coming out of sequence, as a Swift programmer, particularly when you're starting, doesn't really matter. It's just good functionality. And actually, you know, we've had this same discussion around Python, which is like, oh, Jeremy imports star, and therefore I don't know where things come from. Because anyway, I used to know where things come from is because I looked at the top of the file, and it would say, from blah, import foo. And so I know foo comes from blah. And we had that whole discussion earlier lesson where I said, that's not how you figure out where things come from, you learn to use jump to symbol in your IDE, or you learn to use Jupyter Notebooks ability to show you where things come from. That's just the way to go. Thank you. I feel that Scala is often a very nicely designed language that my knowledge doesn't lack in terms of the features I've seen so far in Swift. Is that true, and if so, is the choice of Swift more about JVM as opposed to non-JVM runtimes and compilers? Yeah, so Scala's a great language. Scala is one of my, the way I explain Scala is that they are very generous in the features they accept. They're undergoing a big redesign of the language to kind of cut it down and try to make the features more sensible and stack up nicely together. Swift and Scala have a lot of similarities in some places, and they diverge wildly in other places. I mean, I would say there's a, you know, I feel like anybody doing this course understands the value of tasteful curation because PyTorch is very tastefully curated and TensorFlow might not be. And so, like, using a tastefully curated, carefully put together API like Swift has and like PyTorch has, I think it makes life easier for us as data scientists and programmers. Yeah, but I think the other point is also very good. So, Scala is very strong in the JVM, Java virtual machine ecosystem, and it works very well with all the Java APIs, and it's great in that space. Swift is really great if you don't want to wait for JVM to start up so you can run a script, right? And so, there's nice duels and they have different strengths and weaknesses in that sense. So, do we have time before our break that I can quickly show how this all goes together? Great. I probably can't stop you even if I wanted to. So, just to come back to this HC, right, you can basically see what's happened here. We defined this protocol saying these are the things that we want to have in a data box API, and then we said, here is a specific example of a data box API. Now, at this point, we're missing one important thing, which we've never actually created a bit that says, this is how you open an image and resize it and stuff like that, right? So, we just go through and we can say, let's call.download, let's call.getitems, and we can create nice, simple little functions now. We don't have to create complex class hierarchies to say things like tell me about some sample and it prints it out, right? And we can create a single little function which creates a train and a valid. This is neat, right? This is something I really like about this style of programming is this is a named tuple. And I really like this idea that we don't have to create our own struct and class all the time. It's kind of a very functional style of programming where you just say, I'm just going to define my type as soon as I need it. And this type is defined as being a thing with a train and a thing with a valid. So, as soon as I whack brackets around, parentheses around this, it's both a type and a thing now. And so now I can partition into train and valid, and that's returned something where I can grab a random element from valid and a random element from train. We can create a processor, again, it's just a protocol, right? So, remember a processor is a thing like for categories, creating a vocab of all of the possible categories and so a processor is something where there's some way to say like what is the vocab? And if you have a vocab then process things from text into numbers or de-process things from numbers into text. And so we can now go ahead and create a category processor, right? So, here's like grab all the unique values and here's label to int and here's int to label. Why are you using parentheses on your map, Jeremy? Gosh. I didn't write that. There we go, yeah. So, now that we have a category processor, we can try using it to make sure that it looks sensible. And we can now label and process our data. So, we first have to call label and then we have to call process. Now, given that we have to do those things in a row, rather than creating whole new API functions, we can actually just use function composition. Now, in PyTorch we've often used a thing called compose, but actually it turns out to be much easier as you'll see if you don't create a function called compose but you actually create an operator. And so here's an operator which we will call compose, right? Which is just defined as first call this function f and then call this function g on whatever the first thing you passed it is. So, now we have to find a new function composition which first labels and then processes. And so now here's something which does both and so we can map, right? So, we don't have to create again all these classes and special purpose functions. We're just putting together function composition and map to label all of our training data and all of our validation data. And so then finally, we can say, well, this is the final structure we want. We want a training set, we want a validation set, and let's again create our own little type in line, right? So, that's an array of tuples. Yeah, so our training set's an array of name tuples, our validation set is an array of name tuples, and so we're going to initialize it by passing both in. And so this basically is now our data blocks API. There's a function called make, split, labeled data, and we're just going to pass in one of those configuration protocols we saw. So, we're going to be passing in the image net configuration protocol, the thing that conforms to that protocol. And we're going to be passing in some processor, right? Which is going to be a category processor, and it's just going to call download, get the items, partition, map, label of, and then initialize the processor state, and then do label of, and then process is our processing function, and then map that, right? And so, that's it. So now, we can say to use this with OpenCV, we define how to open an image, there it is. We define how to convert BGR to RGB, because OpenCV uses BGR, that's how old it is. We define the thing that resizes to 224 by 224 with bilinear interpolation, and so the process of opening an image is to open, then BGR to RGB, and then resize, and we compose them all together, and that's it, right? So now, now that we've got that, we then need to convert it to a tensor. So, the entire process is to go through all those transforms, and then convert to a tensor. And then, I'll skip over the bit that does the mini-batches. There's a thing we've got to do the mini-batches with that split label data we created, and we then just pass in the transforms that we want, and we're done, right? So, the data blocks API in kind of functional-ish, protocol-ish Swift, you know, ends up being a lot less code to write, and a lot easier for the end user, because now for the end user, there's a lot less they have to learn to use this data blocks API. It's really just like the normal kind of maps and function composition that hopefully they're familiar with as Swift programmers. So, I'm really excited to see how this came out, because it solves the problems that I've been battling with for the last year with the Python data blocks API, and it's been, you know, really just a couple of days of work to get to this point. And one of the things that this points to in Swift that is a big focus is on building APIs. And so, again, we've been talking about this idea of being able to take an API, use it, without knowing how it works. It could be in C or Python or whatever, but it's about building these things that compose together and they fit together in very nice ways. And with Swift, you get these clean abstractions. So, once you pass in the right things, it works. You don't get the stack trace coming out of the middle of somebody else's library that now you have to figure out what you did somewhere along the way. They cause it to break, at least not nearly as often. So, to see what this ends up looking like, I've created a package called data block. It contains two files in. It's got a package called Swift, and it's got a main.swift. And main.swift is that, right? So, all that in the end to actually use it, that's how much code it is to use your data blocks API and grab all the batches. So, it comes out super pretty. So, let's take a five-minute break, and see you back here at 8.05. Okay, so we're gradually working our way back to what we briefly saw last week, Notebook 11, trading ImageNet, and we're gradually making our way back up to hit that point again. It's a bit of a slow process because along the way, we've had to kind of invent, float, and learn about a new language and stuff like that. But we are actually finally up to zero to a fully connected model, believe it or not. And the nice thing is, at this point, things are going to start looking more and more familiar. One thing I will say, though, that can look quite unfamiliar is the amount of typing that you have to type with Swift. But there's actually a trick, which is you don't have to type all these types. You don't have to type types. What you can actually do is you can say, like, oh, you know, here's the type I use all the time, tensor bracket float. And I don't like writing angle brackets either. So, let's first create a type alias called TF. And now, I just use TF everywhere. Now, to be clear, a lot of real Swift programmers in their production code might not like doing that a lot. I mean, personally, I do do that a lot, even not a lot. I mean, I do do that a lot in my notebooks. But, you know, you might want to be careful if you're doing actual Swift programming. The way I would look at it is, if you're building something for somebody else to use, if you're publishing an API, you probably don't want to do that. Yeah. But if you're hacking things together and you're playing and having fun, it's no problem at all. Yeah. I mean, different strokes. I personally, I would say, if I'm giving somebody something that's the whole thing, tensor floats, I would do it. But anyway, in a notebook, I definitely don't want to be typing that. In a notebook, make it easier for your interactive programming by knowing about things like type alias. Yeah. That's something we also want to make better just in general so that these things all just default to float. Yeah. You don't have to worry about it. That'll be nice. So then we can write a normalized function that looks exactly the same as our Python normalized function. And we can use mean and standard deviation just like in Python. And we can define tests with asserts just like in Python. So this all looks identical. We can calculate n and m and c, the same constant, the variables that we used in Python in exactly the same way as Python. We can create our weights and biases just like in Python, except there's a nice kind of rule of thumb in the Swift world, which is anytime you have a function that's going to create some new thing for you, we always use the init constructor for that. So for example, generating random numbers and dumping them into a tensor, that's constructing a new tensor for you. So it's actually, you're actually calling tensor float dot init here. And so if you're trying to find where is it in an API that I get to create something in this way, you should generally look for in the init section. So this is how you create random numbers in Swift for TensorFlow. This is how you create tensor of zeros in Swift for TensorFlow. So here's our weights and biases. This is all the same stuff we just basically copied and pasted it from the PyTorch version with some very, very minor changes. Create a linear function, except rather than at, we use dot, because that's what they use in Swift for TensorFlow. If you're on a Mac, that's option eight. If you're on anything else, it's compose key dot equals. And so now we can go ahead and calculate linear functions. We can calculate relu exactly the same as PyTorch. We can do proper timing in it, exactly like PyTorch. And so now we're at the point where we can define the forward pass of a model. And this looks basically again identical to PyTorch. A model can just be something that returns some value. So the forward pass of our model really just builds on stuff that we already know about, and it looks almost identical to PyTorch, as does a loss function. It looks a little bit different, because it's not called squeeze. It's called squeezing shape. It doesn't have that mean squared error. It's the same as PyTorch as well. And so now here's our entire forward pass. So hopefully that all looks very familiar. If it doesn't, go back to zero two in the Python notebooks. And actually this is one of the tricks, like this is why we've done it this way for you all, is that we have like literally kind of these parallel texts. You know, there's a Python version. There's a Swift version, so you can see how they translate and see exactly how you can go from one language and one framework to another. That's all very well, but we also need to do a backward pass. So to do a backward pass, we can do it exactly the same way as again we did it in PyTorch. One trick, we kind of Python hack we used in PyTorch. And so this is doing it the hard way. This is doing it all manually, because we have to build it. Doing it all manually, yeah, because we have to build everything in Scratch. And the PyTorch version, we actually added a.grad attribute to all of our tenses. You're not allowed to just throw attributes in arbitrary places in Swift. So we have to define a class which has the actual value and the gradient. But once we've done that, the rest of this looks exactly the same as the PyTorch version did. Here's our MSC grad, our ReLU grad. That's all exactly the same. In fact, you can compare here, right? Here's the Python version we created for Lin grad. Here's the Swift version for Lin grad. It's almost identical, okay? So now that we've done all that, we can go ahead and do our entire forward and backward pass. And we're good to go. But it could be so much better. Well, you skipped past the big flashing red lights that says don't do this. Did you miss that part? Tell me about it. Oh, okay. So let's talk about this. So this is defining a class and putting things in classes. And we haven't seen classes yet, at least not very much. That's true, because before we've used things that looked like classes, but they didn't say class on them. They said struct on them. Yes, and so what is that? And so let's play a little game. And so let's talk about this idea of values and references, because that's what struct versus class really means in Swift. A value is a struct thing, and a reference is a class thing. So let's talk about Python. Here's some really simple Python code. And there's no tricks here. What we're doing is we're assigning four into A. We're copying A into B. We're incrementing A and printing them out. So when you do this, you see that A gets incremented. Of course. B does not. Of course. This all makes perfect sense. In Swift, you do the same thing. You get the same thing out. This is how math works, right? All very straightforward. Let's talk about arrays. So here I have an array or a list in Python, and I put into X, and then I copy X into Y. I add something to X, and it has it. I have to point with this. So and then it has the extra item. That makes perfect sense, right? So what happens to Y? What? What just happened here? I just added something to X, and now Y changed? Now what is going on here? Well, we learn. We learn that there's this thing called a reference, and we learn that it does things like this, and we learn when it bites us. What happens in Swift? Well, Swift has arrays. It doesn't have lists the same way. And so here we have, again, this identical code except var. We put one and a two into X. We copy X into Y. We add something to X. We print it out. We get the extra element. But Y is correct. What just happened? So this is something called value and reference semantics. And in Swift, arrays, dictionaries, tensors, like all these things have what's known as value semantics. And let's dive in a little bit about what that is. So a value in something that has value semantics is a variable that, sorry, this is self-referential. When you declare something in your code, you're declaring a name. And if it's a name for a value, that name stands for that value, right? X stands for the array of elements that it contains. This is how math always works. This is what you expect out of basic integers. This is what you expect out of basic things that you interact with on a daily basis. Reference semantics are weird if you think about it. So what we're doing is we're saying that X is a name for something else. And so we usually don't think about this until it comes around to bite us. And so this is kind of a problem. And let's dive in a little bit to understand why this causes problems. So here's a function. It's do thing. It's something that Jeremy wrote with a very descriptive name. And it takes T, and then it goes and updates this, and that's fine, right? It's super fast. Everything is good. So you go on and put in a workbook, and then you build the next workbook. Next workbook calls in a do thing, and you find out, oh, well, it changed the tensor I passed in, but I was using that tensor for something else, and now I've got a problem because it's changing a tensor that I wanted to use. And now I've got this bug. I have to debug it, and I find out the do thing is causing the problem. And so what do I do? I go put a clone in there. I don't know who here adds clones in a principled way or who here? I do use it in a principled way, so what we do in fast AI is we kind of don't have clone, and then when things start breaking, I add clone until things stop breaking, and then we're done. That sounds great. Yeah, so there's a lot of clone in fast AI, and yeah. That's a good principle. I see what you're going for. Possibly a few too many, or possibly a few too few. Well, so now think about this. What we have is we have a foot gun here in the first case. So something that's ready to explode if I use it wrong. Now I added clone, and so good news. It's correct, but slow. So it's going to do that copy even if I don't need to, which is really sad. In Swift, things just work. You pass in a tensor. You can update it. You can return it, and it leaves the original one alone. Arguments in Swift actually even default to constants, which makes it so that you can't do that. If you do actually want to modify something in the caller, you can do that too. You just have to be a little bit more explicit about it and use this thing called in out. And so now if you want to update the thing somebody passed to you, that's fine, just pass it in out. And everything works fine. And on the call side, you pass it with this ampersand thing so that they know that it can change. Now what is going on here? Right? So this is good math. This is like the correct behavior, but how does this work? Well, we're talking about names. We're talking about values. And so here I have a struct. This is a valuey thing. And so I say it has two fields, real and imaginary. And I define an instance of my complex number here named x. And so this is saying I have x and it's a name for the value that has one and two in it. And so if I introduce y, y is another notational instance of this struct. And so it also has a one and a two. And if I go and I copy it, then I get another copy. And if I change one, then I update just y's. All right? This is again the way things should work. And so this works with structs. This works with tuples. This works with arrays and dictionaries and all that kind of stuff. How do references work? Well, references, the name here, here I have a class and the class has a string and it has an integer. And so somewhere in memory there is a string and there is an array and they're stuck together just like with the struct. But now when I say x, x is actually a reference or a pointer or an indirection to that. The reason for that is because you wrote class instead of struct. So by writing class, you're saying when you create one of these things, please create a reference, not a value. Yes, that's exactly right. And now what happens with references is you now get copies of that reference. And so when I copy x into y, just like in PyTorch or Python, I have another reference or another pointer to the same data. And so that's why when you go and you update it, so I'm going to go change the array through y, it's also going to change the data that you see through x. And so in Swift, you have a choice. And so you can declare things as classes. And classes are good for certain things and they're important and valuable and you can subclass them. And classes are nice in various ways. But you have a choice. And a lot of things that you've seen are all defined with structs because they have much more predictable behavior and they stack up more correctly. So in this case, you know, I was trying to literally duplicate a Python slash PyTorch API. And so I just found I wasn't able to unless I used class. But then you kind of said, okay, well, that's how you do it. But don't do it that way. Yeah. And so you can absolutely do that. And again, when you're learning Swift, it's fine. Just reach for the things that are familiar and then you can learn as you go. That's perfectly acceptable. But here we're trying to talk about things Swift is doing to help save you and make your code more efficient and things like that. I still reach for class a lot, but then every time a real Swift programmer takes my thing that had class and replaces it with something more Swifty, it ends up being like shorter and easier to understand. And so like it's, I agree, like go for it. Get things working with class. But when it becomes time, start to work with this and look at it and figure out how it works. Now there's one thing that's really weird here. If you remember last time, the first thing I told you about was var and let, right? And what is going on here? This does not make any sense. We've got y and now we are updating, if this thing will go away, we are updating a thing in y even though y is a constant. And what does that even mean? Well, the reason here is that the thing that is constant, the thing that is constant is this reference. And so we've made a new copy of the reference, but we're allowed to copy the thing it points to because we're not changing x or y itself. So this doesn't make sense. None of this makes sense. But how does let and var work? Well, this is a thing that comes back to the mutation model in Swift. And I'll go through this pretty quickly. This is not something you have to know. But let's say I have a complex number and it's a struct. And I say, hey, this thing is a constant. I want to go change it. Right? That's not supposed to work. What happens? Well, if you try to do that, Swift will tell you, haha, you can't do that. You can't use plus equals on a real that's in a C because C1 is a let. And Swift is helpful. And so it tries to lead you to solving a problem that says, hey, by the way, if you want to fix this, you want to make it go away, just change let to var, and then everything is good. That's totally fine. Now, OK, fine. Well, maybe I really do want to change it. And so what I'm going to do is I'm going to get a little bit trickier and I'm going to define this extension. I'm going to add a method increment to my complex number. I'm going to increment inside the method and then call the method. Can I get away with that? Well, these things may be in different files. The compiler may only be able to see one or the other. And so if you run this, it has no idea whether increment's going to change that thing. Right? And so what the compiler does is it says, ah, well, you can't implement increment real inside of this increment method either. Because it says self is immutable. And it says mark method mutating to make self mutable. Now, the thing to think about in methods, both in Python but also in Swift is that they have a self. Right? And in Python, you have to declare it. Swift has it too. It's just not making you write it all the time. Because that would be annoying. And so when you declare a method on a struct, what you do is you're getting self. And it's a copy of the struct. Okay? Now, what this is saying is this is saying that, hey, you're actually changing self.real. Self is constant. And so you can't do that here. But what you can do is you can mark it mutating. And so what that looks like is that says, we can mark this function as mutating. And what that does is it says our self is now one of these in-out things. The in-out thing that allows us to change it in the color. And because it's now mutating, it's totally fine to change it. That's no big deal. And the compiler leads you to this and shows you what to do. But now we come back to this problem over here. We say, well, we have a constant. We're calling increment. How does that work? Well, it still doesn't. The compiler will tell you, hey, you can't do that. You can't mutate C1. And now it knows the increment can change it. And so it says, really, really, really, if you want to do this, go mark C1 as a var. And Jeremy would say, just mark everything as a var. That's how he is. And so the nice thing about this, though, is it all stacks up nicely and it all works. And this is what allows, this is kind of the underlying mechanics that allow the value stuff to work. Now, you may be wondering, how is this efficient? So we were talking about, in the PyTorch world, you end up copying all the time, even if you don't end up needing it. In Swift, we don't want to do all those copies. And so, on the other hand, we don't want to be, like, always copying. So where do the copies go and how does that work? So if you're using arrays or arrays of arrays of arrays of dictionaries of arrays of, like, super nested things, what ends up happening is, arrays are struct, you might be surprised. And inside of that struct, it has a pointer or a reference. And so the elements of an array are actually implemented with the class. And so what I have here is I have A1, which is some array, and I copied it to A2, and I copied it to A3, I copied it to A4, because I'm passing it all around. I'm just passing this array around, no big deal. And what happens is I'm just copying this reference, and it happens to be buried inside of a struct. And so this passing around arrays, full value semantics, super cheap. No problem. It's not copying any data. It's just passing the pointer around, right, just like you do in C or even in Python. The magic happens when you go and you say, okay, well, I've now got A4. And so all these things are all sharing this thing. I'm going to add one element to A4. Well, what happens? Well, first thing that happens is append is a mutating method. And so it says, hey, I'm this thing called a copy on write type, and so I want to check to see if I'm the only user of this data. And it turns out, no, lots of other things are pointing to our data here. And so lazily, because it's shared, I'll make a copy of this array. And so I only get a copy of the data if it's shared and if it changes. So that should be one, two, three, 22? Yeah, that should be one, two, three, 92. I am buggier than Swift. Now, the interesting thing about this is because of the way this all works out is if you go and you change A4 again, it goes and just updates it in place. There's no extra copy. And so the cool thing about this is that you get exactly the right number of copies, and it just works. You as a programmer don't have to think about this. This is one of the things that Swift is just like subtracting from your consciousness of the things that you have to worry about, which is really nice. And so a really nice aspect of this is that you get algebra, like values work the way values are supposed to work. You get super high performance. We get to use more emojis, which I always appreciate. If you want to learn more about this, because this is also a really cool deep topic that you can geek out about, particularly if you've done object-oriented programming before, there's a lot that's really nice about this. There's a video you can see more. So let's go back to that autodiff thing. And let's actually talk about autodiff from a different perspective. So this is the autodiff system implemented the same way as the manually done PyTorch version. And we didn't like it because it was using references. Let's implement it again the very low level manual way in Swift. But before we do, let's talk about where we want to get to. So Swift has built-in, and Swift for TensorFlow has built-in automatic differentiation for your code. So you don't have to write gradients manually. You don't have to worry about all this stuff. And the way it works is really simple. There are functions like gradient. And you call gradient, and you pass it a closure. And you say, what is the gradient of x times x? And it gives you a new function that computes the gradient of x times x. And here we're just calling that function on a bunch of numbers that we're striding over and printing them out. And it just gives you this gradient of this random little function we wrote. Now, one of the interesting things about this is, I wrote this out, it takes just doubles or floats or other things like that. Autodiff and Swift works on any differentiable type, anything that's continuous, anything that's not like integers, anything that has a gradient. And so... So you can't do this in just a library. This has to be built into the language itself, because you're actually, you're just, you're literally compiling something that's multiplying doubles together and it has to figure out how to get gradients out of that. Yeah. You can do things as a library, and that's what PyTorch and other frameworks do in Python. Well, but PyTorch... Or it doesn't work the same way at all. But PyTorch will not do that on doubles. PyTorch requires you to do that on tensors. Yes. Yes. And so this doesn't just work on doubles. If you want to define quaternions or other cool numeric scientific-y things that are continuous, those are differentiable too. And that all stacks out and works. So there's a bunch of cool stuff that works this way. You can define a function. You can get the gradient at some point with the function. You can pass enclosures. Like all this stuff is really nice. Instead of talking about that, we're going to do the from the bottom up thing. And so I'm going to pretend I understand calculus for a minute, which is sad. So if you think about what differentiation is, computing the derivative of a function, there's two basic things you have to do. You have to know the axioms of the universe. Like what is the derivative of plus or multiply or sine or cosine or tensor matmul. Then you have to compose these things together. And the way you compose them together is this thing called the chain rule. And this is something that I relearned, sadly, over the last couple of weeks. And that we did in the Python part of this course. Yes. And we wrote it a different way. We had y dx equals to y du du dx. Yeah, apparently there's some ancient feud between the people who invented calculus independently and they could not agree on notation. So what this is saying is this is saying if you want the derivative of f calling g, the derivative of f calling g is the derivative of f applied to the forward version of g multiplied by the derivative of g. And this is important because this is actually computing the forward version of g in order to get the derivative of this. And so. Which we kind of hid away in our du du du dx version. Do you want to make the font larger? Sure. I don't know how to do it on your machine. Oh, there you go. So how are we going to do this? Well, what we're going to do is we're going to look at defining the forward function of this. And so we'll use the mean squared error as the example function. This is a little bit more complicated than I want. And so what I'm going to do is I'm going to actually just look at this piece here. And so I'm going to define this function mseinner. And all it is is it's the dot squared dot mean. So it's conceptually this thing. Mseinner that just gets the square of x and then does the mean. Just because that's simpler. And then we'll come back to MSE at the end. And so in order to understand what's going on, I'm going to find this little helper function called trace. And all trace does is it you can put it in your function and it uses this little magic thingy called pound function. And when you call trace, it just prints out the function that it's called from. Okay. And so here we call foo and it prints out, hey, I'm in foo ab and I'm in bar x. And so we'll use that to understand what's happening in these cells. So here I can define just like you did in the PyTorch version, the forward and the derivative versions of these things. And so x times x is the forward. The gradient version is 2 times x. X dot mean is the forward. This weird thing of doing a divide is apparently the gradient of mean. And I checked it, it apparently works. I don't know why. So then when you define the forward function of this MSE inner function, it's just saying give me the square and take the mean, super simple. And then we can use the chain rule. And this is literally where we use the chain rule to say, okay, we want the gradient of one function on another function just like the syntax shows. And the way we do that is we get the gradient of mean and pass it to the inner thing and multiply by the gradient of the other thing. So this is really literally the math interpretation of this stuff. And given that we have this, we can now wrap it up into more functions and we can say let's compute the forward and the backwards version of MSE. We just call the forward version. We call the backward version. And then we can run it on some example data, one, two, three, four. And just to be clear, the upside down triangle thing is not an operator here. It's just using inner code as part of the name of that function. That's a gradient delta symbol thingy. I found that on Wikipedia. So when you run this, what you'll see is it computes the forward version of this thing. It runs square and then it runs mean. And then it runs square again. And then it runs the backward version of mean and square. And this makes sense given the chain rule, right? We have to recompute the forward version of square to do this. And for this simple example, that's fine. Square is just one multiply. But consider it might be a multiply of megabytes worth of stuff. It's not necessarily cheap. And when you start composing these things together, this recomputation can really come back to bite you. So let's look at what we can do to factor that out. So there's this pattern called chainers and what we call the value and chainer pattern. And what we want to do is we want to find each of these functions like square or mean or your model as one function that returns two things. And so what we're going to do is we're going to look at the other version of calculus' form of this. And so when you say that the derivative of x squared is 2x, you actually have to like move the d dx over with it. And this matters because the functions we just defined are actually only, those are only valid if you're looking at a given point, they're not valid if you compose it with another function. And so. It's just another way of writing the chain rule. It's the exact same thing. And so we're going to call this the gradient chain. And all it is is an extra multiply. And Chris, I just need to warn you in one of the earlier courses, I got my upside down triangles mixed up as you just did. So the other way around is delta. And this one is called nabla. And I only know that because I got in trouble for screwing it up for the last time. Thank you, Jeremy, for saving me. So all this is is it's the same thing we saw before. It just has an extra multiplication there because that's what the chain rule apparently really says. So what we're going to do now is now that we have this, we can actually define this value with chain function. And check this out. What this is doing is it's wrapping up both of these things into one thing. So here we're returning the value when you call this. We're also returning this chain function. And so now. So can you just explain this tf arrow tf, like what does, how do I read that? Tf arrow tf? Yeah, sure. So what this is doing is this is saying we're defining a function, square wvc. It takes x. It returns a tuple, right? We know what tuples are. These are fancy tuples like you were showing before where the two things are labeled. So there's a value member of the tuple and there's a chain label of the tuple. The value is just a tensor of float. The chain is actually going to be a closure. And so this says it is a closure that takes a tensor of float and returns a tensor of float. So that's just a way of defining a type in Swift where the type is itself a function. Yep. And so what square vwc is going to be is it's going to be two things. It's the forward thing, the multiply x times x. And that's the backwards thing, the thing we showed just up above that does ddx times 2 times x. And the forward thing is the actual value of the forward thing. The backward thing is a function that will calculate the backward thing. Yep. And the chain here is returning a closure. And so it's not actually doing that computation. So we can do the same thing with mean and there's the same computation. And so now what this is doing is this little abstraction allows us to pull together the forward function and the backward function into one little unit. And the reason why this is interesting is we can start composing these things. And so this mse inner thing that we were talking about before, which is mean followed by square or square followed by mean, we can define, we just call square vwc and then we pass the value that it returns into the mean vwc. And then the result of calling this thing is mean.value. And the derivative is those two chains stuck together. And so if we run this, now we get this really interesting behavior where when we call it we're only calling the forward functions once and the backward function once as well. And we also get the ability to separate this out. And so here what we're doing is we're calling the vwc for the whole computation, which gives us the two things. And here we're using the value. So we got the forward version of the value. And if that's all we want, that's cool. We can stop there. But we don't. We want the backward version too. And so here we call it with, we called the chain function to get that derivative. And so that's what gives us both the ability to get the forward and the backward separate, which we need. But also it makes it so we're not getting the recomputation because we're reusing the same values within these closures. So given that we have these like infinitesimally tiny little things, let's talk about applying this pattern. I'll go pretty quickly because the details aren't really important. So relu is just max with zero. And so we're using the same thing as relu grad from before. Here's the lin grad using the PyTorch style of doing this. And so all we're doing is we're pulling together the forward computation in the value thing here. And then we're doing this backward computation here. And we're doing this with closures. So can I just talk about this difference? Because it's really interesting because, you know, this is the version that Silva and I wrote when we just pushed it over from PyTorch. And we actually did the same thing that Chris just did, which is we avoided calculating the forward pass twice. And the way we did it was to cache away in in dot grad and out dot grad and dot inner, the intermediate values, so that we could then use them again later without recalculating them. Now, what Chris is showing you here is doing the exact same thing, but in a much more automated way, right? It's a very mechanical process. Yeah. So rather than having to kind of use this kind of very heuristic, hacky, one-at-a-time approach of saying, what do I need at each point? Let's save it away in something or give it a name, and then we'll use it again later. It's kind of interesting. And also without any mutation, this functional approach is basically saying, let's package of everything we need and hand it over to everything that needs it. And so that way, we never had to say, what are we going to need for later? It just works. So kind of like you'll see all the steps are here. Out times blah dot transposed, out times blah dot transposed, right? But we never had to think about what to cache away. And so this is not something I would want to write ever again manually, personally. But the advantage of this is it's really mechanical, and it's very structured. And so when you write the full MSE, what we can do is we can say, well, it's that subtraction, then it's that dot mean dot squared, and then on the backwards pass, we have to undo the squeeze and the subtraction thingy. And so it's very mechanical how it plugs together. Now we can write that forward and backward function, and it looks very similar to what the manual version of the PyTorch thing looked like, where you're calling these functions, and then in the backward version, you start out with one, because the gradient of the loss with respect to itself is one, which now I understand, thanks to Jeremy. And then they chain it all together, and you get the gradients. And through all of this work, again, what we've ended up with is we've gotten the forward and backwards pass, we get the gradients of the thing, and now we can do optimizers and apply the updates. Now the- Can I just mention, like what Chris was saying about this one thing here and so forth? For Chris and I, we took a really long time to get to this point, and we found it extremely difficult. And at every point up until the point where it was done, we were totally sure we weren't smart enough to do it. Yes. And so like, please don't worry that there's a lot here, and that you might be feeling the same way Chris and I did, but yeah, you'll get there, right? It's- This was a harrowing journey. Yeah. It's okay if this seems tricky, but just go through each step one at a time. Yeah, but so again, this is talking about the low-level mathy stuff that underlies calculus. And so the cool thing about this, though, from the SWIFT perspective is this is mechanical. And compilers are good at mechanical things. And so one of the things that we've talked about a lot in this course is the idea of their primitives. They're the atoms of the universe, and then they're the things you build out of them. And so the atoms of the universe for tensor, the atoms of the universe for float, we've seen, right? And so we've seen multiply, and we've seen add on floats. Well, if you look at the primitives of the universe for tensor, they're just methods, and they call the raw ops that we showed you last time, right? And so if you go look at the TensorFlow APIs, what you'll see is those atoms have this thing that SWIFT calls them VJPs for weird reasons. This defines exactly the mechanical thingy that we showed you. And so the atoms know what their derivatives are, and the compiler doesn't have to know about the atoms, but that means that if you want to, you can introduce new atoms. That's fine. The payoff of this now, though, is you don't have to deal with any of this stuff, so that's the upshot. What I can do is I can define a function. So here's MSC inner, and it just does dot squared dot mean, and I say make it differentiable, and I can actually get that weird thing, that chainer thing, directly out of it, and I can get direct low-level access if for some reason I ever wanted to. Generally, you don't, and that's why you say give me the gradient, or give me the value and the gradient, and so this stuff just works. And the cool thing about this is this all stacks up from very simple things, and it composes in a very nice way. And if you want to, you can now go hack up the internals of the system and play around with the guts, and it's exposed and open for you. But if you're like me, at least, you would stay away from it and just write math. Well, I mean, sometimes we do need it, right? So you'll remember when we did the heat maps, right, to calculate those heat maps, we actually had to dive into the, you know, registering a backward callback in PyTorch and grab the gradients and then use those in our calculations. And so, you know, there's plenty of stuff we come across where you actually need to work with this. Yeah, and there are some really cool things you can do, too. So now let's, we ended up with a model, and so this is something that I never got around to doing with FixMe. So here's our Ford function. Here we're implementing it with MatMols and with the Lin function, the ReLUs and things like that. The bad thing about defining a Ford function like this is you get tons of arguments to your function, and so some of these arguments are things that you want to feed into the model. Some of these things are parameters. And so as we're refactoring, what we can do is we can introduce a struct, you might be surprised, that puts all of our parameters into it. And so here we have my model, and we're saying it is differentiable. And what differentiable means is it has a whole bunch of floating point stuff in it, and I want to get the gradient with respect to all of these. Okay? So now I can shove all those arguments into the struct. It gives me a nice capsule to deal with. And now I can use the Ford function on my model. I can declare it as a method. This is starting to look nicer. This is more familiar. And I can just do math, and I can use W1 and B1, and these are just values defined on our struct. Now I can get the gradient with respect to the whole model in our loss. Right? And all of this is building up on top of all those different primitives that we saw before that we, and the chain rule and all these things. Then now we can say, hey, give us the gradient of the model with respect to X train and Y train, and we get all the gradients of W1, B1, W2, B2. And all this stuff works. You can see it all calling the little functions that we wrote, and it's all pretty fast. Now again, like we were just talking about, this is not something you should do for MatMul or convolution, but there are reasons why this is cool. And so there are good reasons, and there are annoying reasons, I guess. So sometimes the gradients you get out of any autodiff system will be slow, because you do a ton of computation, and it turns out the gradient ends up being more complicated, and sometimes you want to do an approximation. And so it's actually really nice that you can say, hey, here's the Ford version of this big complicated computation. I'm going to have an approximation that just runs faster. Sometimes you'll get numerical instabilities in your gradients, and so you can define, again, a different implementation of the backwards pass, which can be useful for exotic cases. There are some people on the far research side of things that want to use like learning and things like that to learn gradients, which is cool. And so having the system where everything is just simple and composes but is hackable is really nice. There are also always going to be limitations of the system. Now, one of the limitations that we currently have today, which will hopefully be fixed by the time the video comes out is we don't support control flow and autodiff. And so if you do an if or a loop, like an RNN, autodiff will say, I don't support that yet. But that's okay, because you can do it yourself. So we'll go see an example of that in 11. There we go. And so what we have implemented here, and we'll talk about layers more in a second, is we have this thing called switchable layer. What switchable layer is, is it's just a layer that allows us to have a Boolean toggle to turn it on and off. And the on and off needs an if, right? And so Swift autodiff doesn't currently support if, and so when we define the forward function, it's super easy. We just check to see if it's on, and if so, we run the forward. Otherwise, we don't. Because it doesn't support that control flow yet, we have to write the backwards pass manually. And we can do that using exactly all the stuff that we just showed. We implement the value, and we implement the chainer thing, and we can implement it by returning the right magic set of closures and stuff like that. And so, you know, it sucks that Swift doesn't support this yet, but it's an infinitely hackable system, and so for this or anything else, you can go and customize it to your heart's content. Yeah, and I mean, one of the key things here is that Chris was talking about kind of the atoms, and at the moment, the atoms is TensorFlow, which is way too big an atom. It's a very large atom. But at the point when we're kind of in MLIR world, the atoms are the things going on inside your little kernel DSL that you've written, and so this ability to actually differentiate on float directly suddenly becomes super important, because it means that, like, I mean, for decades, people weren't doing much researchy stuff with deep learning, and one of the reasons was that none of us could be bothered implementing an accelerated version of every damned, you know, CUDA operation that we needed to do the backward pass of and do the calculus, blah, blah, blah. Nowadays, we only work with a subset of things that, like, PyTorch and stuff already supports. So at the point where, you know, so this is the thing about why we're doing this stuff with Swift now is that this is the foundations of something that, in the next year or two, will give us all the way down infinitely hackable, fully differentiable system. Yep. Can we jump to layer really quick? So we've talked about MatMul, we've talked about Autodiff. Now let's talk about other stuff. So layers are now super easy. It just uses all the same stuff you've seen. And so if you go look at layer, it's a protocol, just like we were talking before. And layers are differentiable. Like, they contain bags of parameters, just like we just saw. The requirement inside of a layer is you have to have a call. So layers in Swift are callable, just like you'd expect. And they have, they work with any type that's an input or output, and what layer says is the input and output types just have to be differentiable. And so layer itself is really simple. Yeah, and so underneath here you can see us defining a few different layers. So for example, here is the definition of a dense layer. Right? And so then now that we've got our layers and we've got our forward pass, that's enough to actually allow us to do mini-batch training. And I'm not going to go through all this in any detail, other than just to point out that you can see here is defining a model and it's just a layer, because it's just a differentiable thing that has a call function. And you can call the model layer. We can define log softmax. We can define negative log likelihood, log sum exp. Once we've done all that, we're allowed to use the Swift for TS version, because we've done it ourselves. And at that point, we can create a training loop. So we'll define accuracy, just like we did in PyTorch. Set up our mini-batch, just like we did in PyTorch. And at this point, we can create a training loop. So we just go through and grab our x and y, and update all of our things. You'll notice that there's no torch.nograd here. And that's because in Swift, you opt into gradients, not out of gradients. So you wrap the stuff that wants gradients inside value with gradient. And there we go. So we've got a training loop. Now, one really cool thing is that all of these things end up packaged up together, thanks to the layer protocol, into a thing called variables. Which layer is differentiable? Differentiable is also a protocol. Protocols have lots of cool stuff on them. So thanks to that, we don't have to write anything else. We can just say, model.variables minus equals lr times grad. And it just works. Thanks to the magic of protocol extensions, our model got that for free because we said it's a layer. OK, so I think that's about all we wanted to show there. So now that we've got that, we're actually allowed to use optimizers. So we can just use that instead. And that gives us a standard training loop, which we can use. And then on top of that, we can add callbacks, which I won't go into the details, but you can check it out in 04. And you will find that, let's find them. Here we go. We'll find a letter class, which has the same callbacks that we're used to. And then eventually, we'll get to the point where we've actually written a stateful optimizer with hyperparameters. Again, just like we saw in PyTorch. And most of this will now look very familiar. We won't look at dictionaries now, but they're almost identical to PyTorch dictionaries, and we use them in almost the same way. So you see we've got states and steppers and stats, just like in PyTorch. And so eventually, you'll see we have things like the LAM optimizer written in Swift, which is pretty great. And it's the same amount of code. And things like squared derivatives, we can use our nice Unicode to make them a bit easier to see. And so now we have a function, create an SGD optimizer, a function to create an atom optimizer. We have a function to do one cycle scheduling. And thanks to Matplotlib, we can check that it all works. So it's all there. This is really the power of the abstraction, coming back to one of the earlier questions of earlier today, we started in C. And we were talking about very abstract things like protocols and how things fit together. But when you get those basic things, and this is one of the reasons why learning Swift goes pretty quickly, you get the basic idea, and now it applies everywhere. Yeah. And here we are doing mixup. And so now we're in 10. And here we are doing label smoothing. And you see, it's really very similar looking code to what we have in PyTorch. So then by the time we get to 11, other than this hacky work around for the fact that we can't do control flow differentiation yet, coming very soon, our Xresnet, as you've seen, looks very similar. And we can train it in the usual way. And there we go. So we've kind of started with nothing. And Chris spent a couple of decades for us, first of all building a compiler framework, and then a compiler, and then a C compiler, and then a C++ compiler, and then a new language, and then a compiler for the language. And then we came in and. Let me correct you on one minor detail here. Some people helped you? Yeah. Like I did not build all this stuff. Like amazing people that I got to work with built all of this stuff. So and likewise, like all of these workbooks were built by amazing people that we were lucky enough to work with. Yeah, absolutely. So that's all happened. And then let's look at, so like it's kind of like, thanks to all that work, we then got to a point where 18 months ago, you and I met, you had just joined Google. We were at the TensorFlow Symposium. And I said, what are you doing here? I thought you're a compiler guy. And he said, oh, well, now I'm going to be a deep learning guy. Well, deep learning sounds really cool. Yeah. And he hadn't told me it was uncool yet. Yeah. So then I complained about how terrible everything was. And Chris said, so Chris said, I've got to create a new framework. And I was like, we need a lot more than a new framework. You know, I described the problems that we've talked about with like where Python's up to. Chris said, well, I might actually be creating a new language for deep learning, which I was very excited about because I'm totally not happy with the current languages we have for deep learning. So then 12 months ago, I guess we started asking this question of, like, what if high level API design actually influenced the creation of a differentiable programming language? What would that mean? And so to me, one of the dreams is when you connect the building of a thing with teaching of a thing with using a thing in reality, and one of the beautiful things about Fast AI is pulling together both building the framework, teaching the framework, and doing research with the framework. Yeah. So next time we caught up, I said maybe we should try writing Fast AI in Swift. And you're like, we could do that, I guess. I was like, great. I think the one thing before this, I'm like, hey, Jeremy, it's starting to work. Yeah. And he says, oh, cool. Can we ship it yet? I'm like, it's starting to work. And it's a high level API. Yeah. So let's announce a course where we teach people to use this thing that doesn't exist yet. And I think I said naively, I like deadlines. Deadlines are a good thing. They force progress to happen. So then one month ago, we created a GitHub repo, and we put a notebook in it. And we got the last TensorFlow Dev Summit, we sat in a room with the Swift with TensorFlow team, and we wrote the first line of the first notebook. And you told your team, hey, we're going to write all of the Python notebooks from scratch. And they basically said, what? What have you got us into? So and I think we've learned a lot. Yeah. So I mean, to me, the question is still this, which is what if high level API design was able to influence the creation of a differentiable programming language? And I guess we've started answering that question. Yeah. I don't think we're there yet. I mean, I think that what we've learned even over the last month is that there's still a really long way to go. And I think this is the kind of thing that really benefits from different kinds of people and perspectives and a different set of challenges. And just today and yesterday, working on data blocks, a breakthrough happened where there's an entirely new way to reimagine it as this functional composition that solves a lot of problems. And a lot of those kinds of breakthroughs, I think, are still just waiting to happen. I mean, it's been an interesting process for me, Chris, like because we decided to go back and redo the Python library from scratch. And as we did it, we were thinking, like, what would this look like when we get to Swift? And so we, you know, even as we did the Python library, we created the idea of stateful optimizers. We created the new callbacks version two. So that was interesting. But it's also been interesting I've seen from, as an outsider from a distance, that Swift syntax seems to be changing thanks to some of this. Yeah, absolutely. So there are new features in Swift, including callables. That's a thing that exists because of Swift or TensorFlow. The Python interoperability, believe it or not, we drove that because it's really important for what we're doing. There's a bunch of stuff like that that's already being driven by this project, and I think there's going to be more. And so, like, making it so float can default away to nothing, that's really important. We have to do that, and otherwise, it wouldn't have been a priority. So, I mean, so it's still really, really early days. And I think the question in my mind is now, like, what will happen when data scientists in lots of different domains have access to an infinitely hackable, differentiable language along with the world of all of the C libraries, you know, like, what do we end up with? We kind of, we're starting from very little in terms of ecosystem, right, but like, there are things in Swift we haven't covered, for example, something called kpaths, but there's this thing called kpaths which might let us write, like, little query language DSLs in Swift with type safety. Yeah, give me all the parameters out of this thing and let me do something interesting to them. Yeah. It's really cool. And so, you know, I guess at this point, I'm kind of saying that people is like, pick some piece of this that might be interesting in your domain and over the next 12 to 24 months explore with us so that, you know, as Chris said, putting this airplane together whilst it's flying, you know, by the time it's actually all the pieces are together, you'll have your domain specific pieces together and I think it'll be super exciting. And one of the things that's also really important about this project is it's not cast in concrete. So we can and we will change it to make it great. And to me, we're very much in the phase of let's focus on making the basic ingredients that everybody puts things together, like, let's talk about the core of layer is. Let's talk about what data blocks should be. Let's talk about what all these basic things are. Let's not mess with float anymore. Let's go up a few levels. Float is done? Yeah, we can consider float done, but let's actually really focus on getting these right so that then we can build amazing things on top of them. And to me, the thing I'm looking forward to is just innovation. And innovation happens when you make things that were previously hard accessible to more people and that's what I would just love to see. So the thing I keep hearing is how do I get involved? So like I think there's many places you can get involved, but like to me the best way to get involved is by trying to start using little bits of this in work that you're doing or utilities you're building or hobbies you have. You know, just try, you know, it's not so much how do I add some new custom derivative thing into Swift for TensorFlow, but it's like, you know, implement some notebook that didn't exist before or take some Python library that you've liked using and try and create a Swift version. Try something, write a blog post. I mean, so one of the things when Swift first came up is that a lot of people were blogging about their experiences and what they learned and what they liked and what they didn't like. And that's an amazing communication channel because the team listens to that. And that's a huge feedback loop because we can see somebody was struggling about it. And even over the last couple of weeks when Jeremy complains about something, we're like, oh, that is really hard. Maybe we should fix that. And we do change it. And then progress happens, right? And so we want that feedback loop in blogs and other kinds of forms. Yeah, it's a very receptive community, very receptive team for sure. Were there any highlight questions that you wanted to ask before we wrapped up, Rachel? Really? Okay. Well, I mean, let me say this, Chris. It's been an absolute honor and absolute pleasure to get to work with you and with your team. It's like a dream come true for me and to see what is being built here. And you're always super humble about your influence. But I mean, you've been such an extraordinary influence in all the things that you've helped make happen. And I'm super thrilled for our little community that you've let us piggyback on yours a little bit. Thank you so much for this. Oh, and from my perspective as a tool builder, right? Tool builders exist because of users. And I want to build a beautiful thing. And I think everybody working on the project wants to build something that is really beautiful and really profound that enables people to do things they've never done before. I'm really excited to see that. I think we're already seeing that starting to happen. So thank you so much and thanks everybody for joining us. Thanks for having us. See you on the forums. Thanks for \u00e9taient.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 5.0, "text": " Welcome to the final lesson of this section of 2019.", "tokens": [4027, 281, 264, 2572, 6898, 295, 341, 3541, 295, 6071, 13], "temperature": 0.0, "avg_logprob": -0.1574483871459961, "compression_ratio": 1.5318181818181817, "no_speech_prob": 0.00432765344157815}, {"id": 1, "seek": 0, "start": 8.2, "end": 10.040000000000001, "text": " Although I guess it depends on the videos,", "tokens": [5780, 286, 2041, 309, 5946, 322, 264, 2145, 11], "temperature": 0.0, "avg_logprob": -0.1574483871459961, "compression_ratio": 1.5318181818181817, "no_speech_prob": 0.00432765344157815}, {"id": 2, "seek": 0, "start": 10.040000000000001, "end": 12.6, "text": " what order we end up doing the extra ones.", "tokens": [437, 1668, 321, 917, 493, 884, 264, 2857, 2306, 13], "temperature": 0.0, "avg_logprob": -0.1574483871459961, "compression_ratio": 1.5318181818181817, "no_speech_prob": 0.00432765344157815}, {"id": 3, "seek": 0, "start": 12.6, "end": 15.08, "text": " This is the final one that we're recording", "tokens": [639, 307, 264, 2572, 472, 300, 321, 434, 6613], "temperature": 0.0, "avg_logprob": -0.1574483871459961, "compression_ratio": 1.5318181818181817, "no_speech_prob": 0.00432765344157815}, {"id": 4, "seek": 0, "start": 15.08, "end": 16.88, "text": " live here in San Francisco.", "tokens": [1621, 510, 294, 5271, 12279, 13], "temperature": 0.0, "avg_logprob": -0.1574483871459961, "compression_ratio": 1.5318181818181817, "no_speech_prob": 0.00432765344157815}, {"id": 5, "seek": 0, "start": 16.88, "end": 20.34, "text": " Anyway, lesson 14, lesson two", "tokens": [5684, 11, 6898, 3499, 11, 6898, 732], "temperature": 0.0, "avg_logprob": -0.1574483871459961, "compression_ratio": 1.5318181818181817, "no_speech_prob": 0.00432765344157815}, {"id": 6, "seek": 0, "start": 20.34, "end": 25.26, "text": " of our special Swift episodes.", "tokens": [295, 527, 2121, 25539, 9313, 13], "temperature": 0.0, "avg_logprob": -0.1574483871459961, "compression_ratio": 1.5318181818181817, "no_speech_prob": 0.00432765344157815}, {"id": 7, "seek": 0, "start": 25.26, "end": 27.48, "text": " This is what we'll be covering today.", "tokens": [639, 307, 437, 321, 603, 312, 10322, 965, 13], "temperature": 0.0, "avg_logprob": -0.1574483871459961, "compression_ratio": 1.5318181818181817, "no_speech_prob": 0.00432765344157815}, {"id": 8, "seek": 0, "start": 27.48, "end": 28.740000000000002, "text": " I won't read through it all,", "tokens": [286, 1582, 380, 1401, 807, 309, 439, 11], "temperature": 0.0, "avg_logprob": -0.1574483871459961, "compression_ratio": 1.5318181818181817, "no_speech_prob": 0.00432765344157815}, {"id": 9, "seek": 2874, "start": 28.74, "end": 30.799999999999997, "text": " but basically we're gonna be filling in the gap", "tokens": [457, 1936, 321, 434, 799, 312, 10623, 294, 264, 7417], "temperature": 0.0, "avg_logprob": -0.1332410849057711, "compression_ratio": 1.5961538461538463, "no_speech_prob": 6.194778688950464e-05}, {"id": 10, "seek": 2874, "start": 30.799999999999997, "end": 35.8, "text": " between matrix multiplication and training ImageNet", "tokens": [1296, 8141, 27290, 293, 3097, 29903, 31890], "temperature": 0.0, "avg_logprob": -0.1332410849057711, "compression_ratio": 1.5961538461538463, "no_speech_prob": 6.194778688950464e-05}, {"id": 11, "seek": 2874, "start": 36.28, "end": 37.879999999999995, "text": " with all the tricks.", "tokens": [365, 439, 264, 11733, 13], "temperature": 0.0, "avg_logprob": -0.1332410849057711, "compression_ratio": 1.5961538461538463, "no_speech_prob": 6.194778688950464e-05}, {"id": 12, "seek": 2874, "start": 37.879999999999995, "end": 40.48, "text": " And along the way, we're gonna be seeing a bunch", "tokens": [400, 2051, 264, 636, 11, 321, 434, 799, 312, 2577, 257, 3840], "temperature": 0.0, "avg_logprob": -0.1332410849057711, "compression_ratio": 1.5961538461538463, "no_speech_prob": 6.194778688950464e-05}, {"id": 13, "seek": 2874, "start": 40.48, "end": 42.68, "text": " of interesting Swift features", "tokens": [295, 1880, 25539, 4122], "temperature": 0.0, "avg_logprob": -0.1332410849057711, "compression_ratio": 1.5961538461538463, "no_speech_prob": 6.194778688950464e-05}, {"id": 14, "seek": 2874, "start": 42.68, "end": 45.959999999999994, "text": " and actually seeing how they make our code cleaner,", "tokens": [293, 767, 2577, 577, 436, 652, 527, 3089, 16532, 11], "temperature": 0.0, "avg_logprob": -0.1332410849057711, "compression_ratio": 1.5961538461538463, "no_speech_prob": 6.194778688950464e-05}, {"id": 15, "seek": 2874, "start": 45.959999999999994, "end": 47.28, "text": " safer, faster.", "tokens": [15856, 11, 4663, 13], "temperature": 0.0, "avg_logprob": -0.1332410849057711, "compression_ratio": 1.5961538461538463, "no_speech_prob": 6.194778688950464e-05}, {"id": 16, "seek": 2874, "start": 48.76, "end": 50.239999999999995, "text": " I wanna do a special shout out", "tokens": [286, 1948, 360, 257, 2121, 8043, 484], "temperature": 0.0, "avg_logprob": -0.1332410849057711, "compression_ratio": 1.5961538461538463, "no_speech_prob": 6.194778688950464e-05}, {"id": 17, "seek": 2874, "start": 50.239999999999995, "end": 52.58, "text": " to a couple of our San Francisco study group members", "tokens": [281, 257, 1916, 295, 527, 5271, 12279, 2979, 1594, 2679], "temperature": 0.0, "avg_logprob": -0.1332410849057711, "compression_ratio": 1.5961538461538463, "no_speech_prob": 6.194778688950464e-05}, {"id": 18, "seek": 2874, "start": 52.58, "end": 54.04, "text": " who have been particularly helpful", "tokens": [567, 362, 668, 4098, 4961], "temperature": 0.0, "avg_logprob": -0.1332410849057711, "compression_ratio": 1.5961538461538463, "no_speech_prob": 6.194778688950464e-05}, {"id": 19, "seek": 2874, "start": 54.04, "end": 55.56, "text": " over the last couple of weeks", "tokens": [670, 264, 1036, 1916, 295, 3259], "temperature": 0.0, "avg_logprob": -0.1332410849057711, "compression_ratio": 1.5961538461538463, "no_speech_prob": 6.194778688950464e-05}, {"id": 20, "seek": 5556, "start": 55.56, "end": 58.96, "text": " since I know nothing about Swift.", "tokens": [1670, 286, 458, 1825, 466, 25539, 13], "temperature": 0.0, "avg_logprob": -0.09982887449718657, "compression_ratio": 1.5582329317269077, "no_speech_prob": 3.761509287869558e-05}, {"id": 21, "seek": 5556, "start": 58.96, "end": 62.120000000000005, "text": " It's been nice to have some folks who do such as Alexis,", "tokens": [467, 311, 668, 1481, 281, 362, 512, 4024, 567, 360, 1270, 382, 39826, 11], "temperature": 0.0, "avg_logprob": -0.09982887449718657, "compression_ratio": 1.5582329317269077, "no_speech_prob": 3.761509287869558e-05}, {"id": 22, "seek": 5556, "start": 62.120000000000005, "end": 65.08, "text": " who has been responsible actually", "tokens": [567, 575, 668, 6250, 767], "temperature": 0.0, "avg_logprob": -0.09982887449718657, "compression_ratio": 1.5582329317269077, "no_speech_prob": 3.761509287869558e-05}, {"id": 23, "seek": 5556, "start": 65.08, "end": 66.96000000000001, "text": " for some of the most exciting material", "tokens": [337, 512, 295, 264, 881, 4670, 2527], "temperature": 0.0, "avg_logprob": -0.09982887449718657, "compression_ratio": 1.5582329317269077, "no_speech_prob": 3.761509287869558e-05}, {"id": 24, "seek": 5556, "start": 66.96000000000001, "end": 69.64, "text": " you're gonna see today.", "tokens": [291, 434, 799, 536, 965, 13], "temperature": 0.0, "avg_logprob": -0.09982887449718657, "compression_ratio": 1.5582329317269077, "no_speech_prob": 3.761509287869558e-05}, {"id": 25, "seek": 5556, "start": 69.64, "end": 73.0, "text": " And he is the CTO at Topology Eyewear.", "tokens": [400, 415, 307, 264, 383, 15427, 412, 8840, 1793, 21603, 15087, 13], "temperature": 0.0, "avg_logprob": -0.09982887449718657, "compression_ratio": 1.5582329317269077, "no_speech_prob": 3.761509287869558e-05}, {"id": 26, "seek": 5556, "start": 73.0, "end": 75.28, "text": " So if you need glasses, you should definitely go there", "tokens": [407, 498, 291, 643, 10812, 11, 291, 820, 2138, 352, 456], "temperature": 0.0, "avg_logprob": -0.09982887449718657, "compression_ratio": 1.5582329317269077, "no_speech_prob": 3.761509287869558e-05}, {"id": 27, "seek": 5556, "start": 75.28, "end": 78.42, "text": " and get algorithmically designed glasses literally.", "tokens": [293, 483, 9284, 984, 4761, 10812, 3736, 13], "temperature": 0.0, "avg_logprob": -0.09982887449718657, "compression_ratio": 1.5582329317269077, "no_speech_prob": 3.761509287869558e-05}, {"id": 28, "seek": 5556, "start": 78.42, "end": 79.32000000000001, "text": " So that's pretty cool.", "tokens": [407, 300, 311, 1238, 1627, 13], "temperature": 0.0, "avg_logprob": -0.09982887449718657, "compression_ratio": 1.5582329317269077, "no_speech_prob": 3.761509287869558e-05}, {"id": 29, "seek": 5556, "start": 79.32000000000001, "end": 81.04, "text": " So thanks Alexis for your help.", "tokens": [407, 3231, 39826, 337, 428, 854, 13], "temperature": 0.0, "avg_logprob": -0.09982887449718657, "compression_ratio": 1.5582329317269077, "no_speech_prob": 3.761509287869558e-05}, {"id": 30, "seek": 8104, "start": 81.04, "end": 86.04, "text": " And thanks also to Pedro who has almost single-handedly", "tokens": [400, 3231, 611, 281, 26662, 567, 575, 1920, 2167, 12, 5543, 13516], "temperature": 0.0, "avg_logprob": -0.09085887620429031, "compression_ratio": 1.6793893129770991, "no_speech_prob": 3.555761395546142e-06}, {"id": 31, "seek": 8104, "start": 86.48, "end": 89.12, "text": " created this fantastic package cache that we have", "tokens": [2942, 341, 5456, 7372, 19459, 300, 321, 362], "temperature": 0.0, "avg_logprob": -0.09085887620429031, "compression_ratio": 1.6793893129770991, "no_speech_prob": 3.555761395546142e-06}, {"id": 32, "seek": 8104, "start": 89.12, "end": 91.08000000000001, "text": " so that in your Jupyter notebooks,", "tokens": [370, 300, 294, 428, 22125, 88, 391, 43782, 11], "temperature": 0.0, "avg_logprob": -0.09085887620429031, "compression_ratio": 1.6793893129770991, "no_speech_prob": 3.555761395546142e-06}, {"id": 33, "seek": 8104, "start": 91.08000000000001, "end": 95.84, "text": " you can import all the other modules that we're using", "tokens": [291, 393, 974, 439, 264, 661, 16679, 300, 321, 434, 1228], "temperature": 0.0, "avg_logprob": -0.09085887620429031, "compression_ratio": 1.6793893129770991, "no_speech_prob": 3.555761395546142e-06}, {"id": 34, "seek": 8104, "start": 95.84, "end": 97.68, "text": " and other exported modules from the notebooks", "tokens": [293, 661, 42055, 16679, 490, 264, 43782], "temperature": 0.0, "avg_logprob": -0.09085887620429031, "compression_ratio": 1.6793893129770991, "no_speech_prob": 3.555761395546142e-06}, {"id": 35, "seek": 8104, "start": 97.68, "end": 99.36000000000001, "text": " and it doesn't have to recompile at all.", "tokens": [293, 309, 1177, 380, 362, 281, 48000, 794, 412, 439, 13], "temperature": 0.0, "avg_logprob": -0.09085887620429031, "compression_ratio": 1.6793893129770991, "no_speech_prob": 3.555761395546142e-06}, {"id": 36, "seek": 8104, "start": 99.36000000000001, "end": 101.64000000000001, "text": " And so that's really thanks to Pedro.", "tokens": [400, 370, 300, 311, 534, 3231, 281, 26662, 13], "temperature": 0.0, "avg_logprob": -0.09085887620429031, "compression_ratio": 1.6793893129770991, "no_speech_prob": 3.555761395546142e-06}, {"id": 37, "seek": 8104, "start": 101.64000000000001, "end": 104.16000000000001, "text": " And I actually am a customer of his as well,", "tokens": [400, 286, 767, 669, 257, 5474, 295, 702, 382, 731, 11], "temperature": 0.0, "avg_logprob": -0.09085887620429031, "compression_ratio": 1.6793893129770991, "no_speech_prob": 3.555761395546142e-06}, {"id": 38, "seek": 8104, "start": 104.16000000000001, "end": 106.28, "text": " or at least I was when I used an iPhone.", "tokens": [420, 412, 1935, 286, 390, 562, 286, 1143, 364, 7252, 13], "temperature": 0.0, "avg_logprob": -0.09085887620429031, "compression_ratio": 1.6793893129770991, "no_speech_prob": 3.555761395546142e-06}, {"id": 39, "seek": 8104, "start": 106.28, "end": 107.72, "text": " He's the developer of Camera Plus,", "tokens": [634, 311, 264, 10754, 295, 23734, 7721, 11], "temperature": 0.0, "avg_logprob": -0.09085887620429031, "compression_ratio": 1.6793893129770991, "no_speech_prob": 3.555761395546142e-06}, {"id": 40, "seek": 10772, "start": 107.72, "end": 111.08, "text": " which is the most popular camera application on the App Store,", "tokens": [597, 307, 264, 881, 3743, 2799, 3861, 322, 264, 3132, 17242, 11], "temperature": 0.0, "avg_logprob": -0.1360759882963905, "compression_ratio": 1.606164383561644, "no_speech_prob": 2.282543937326409e-05}, {"id": 41, "seek": 10772, "start": 111.08, "end": 112.36, "text": " literally.", "tokens": [3736, 13], "temperature": 0.0, "avg_logprob": -0.1360759882963905, "compression_ratio": 1.606164383561644, "no_speech_prob": 2.282543937326409e-05}, {"id": 42, "seek": 10772, "start": 112.36, "end": 115.2, "text": " And back when I used an iPhone, I loved that program.", "tokens": [400, 646, 562, 286, 1143, 364, 7252, 11, 286, 4333, 300, 1461, 13], "temperature": 0.0, "avg_logprob": -0.1360759882963905, "compression_ratio": 1.606164383561644, "no_speech_prob": 2.282543937326409e-05}, {"id": 43, "seek": 10772, "start": 115.2, "end": 116.72, "text": " So I'm sure version two is even better,", "tokens": [407, 286, 478, 988, 3037, 732, 307, 754, 1101, 11], "temperature": 0.0, "avg_logprob": -0.1360759882963905, "compression_ratio": 1.606164383561644, "no_speech_prob": 2.282543937326409e-05}, {"id": 44, "seek": 10772, "start": 116.72, "end": 118.03999999999999, "text": " but I haven't tried version two.", "tokens": [457, 286, 2378, 380, 3031, 3037, 732, 13], "temperature": 0.0, "avg_logprob": -0.1360759882963905, "compression_ratio": 1.606164383561644, "no_speech_prob": 2.282543937326409e-05}, {"id": 45, "seek": 10772, "start": 118.03999999999999, "end": 120.78, "text": " So you can use his camera while looking through", "tokens": [407, 291, 393, 764, 702, 2799, 1339, 1237, 807], "temperature": 0.0, "avg_logprob": -0.1360759882963905, "compression_ratio": 1.606164383561644, "no_speech_prob": 2.282543937326409e-05}, {"id": 46, "seek": 10772, "start": 120.78, "end": 122.4, "text": " your Topology Eyewear glasses.", "tokens": [428, 8840, 1793, 21603, 15087, 10812, 13], "temperature": 0.0, "avg_logprob": -0.1360759882963905, "compression_ratio": 1.606164383561644, "no_speech_prob": 2.282543937326409e-05}, {"id": 47, "seek": 10772, "start": 124.4, "end": 127.0, "text": " All right, so thanks to both of you.", "tokens": [1057, 558, 11, 370, 3231, 281, 1293, 295, 291, 13], "temperature": 0.0, "avg_logprob": -0.1360759882963905, "compression_ratio": 1.606164383561644, "no_speech_prob": 2.282543937326409e-05}, {"id": 48, "seek": 10772, "start": 127.0, "end": 132.0, "text": " And where we left off last week was that I made a grand claim.", "tokens": [400, 689, 321, 1411, 766, 1036, 1243, 390, 300, 286, 1027, 257, 2697, 3932, 13], "temperature": 0.0, "avg_logprob": -0.1360759882963905, "compression_ratio": 1.606164383561644, "no_speech_prob": 2.282543937326409e-05}, {"id": 49, "seek": 10772, "start": 132.96, "end": 134.32, "text": " Well, I pointed out a couple of things.", "tokens": [1042, 11, 286, 10932, 484, 257, 1916, 295, 721, 13], "temperature": 0.0, "avg_logprob": -0.1360759882963905, "compression_ratio": 1.606164383561644, "no_speech_prob": 2.282543937326409e-05}, {"id": 50, "seek": 10772, "start": 134.32, "end": 137.07999999999998, "text": " I pointed out through this fantastic Halide video", "tokens": [286, 10932, 484, 807, 341, 5456, 13896, 482, 960], "temperature": 0.0, "avg_logprob": -0.1360759882963905, "compression_ratio": 1.606164383561644, "no_speech_prob": 2.282543937326409e-05}, {"id": 51, "seek": 13708, "start": 137.08, "end": 142.08, "text": " that actually running low level kind of CUDA-kernely stuff fast", "tokens": [300, 767, 2614, 2295, 1496, 733, 295, 29777, 7509, 12, 74, 1248, 736, 1507, 2370], "temperature": 0.0, "avg_logprob": -0.1379748845504502, "compression_ratio": 1.6401515151515151, "no_speech_prob": 1.3844070963386912e-05}, {"id": 52, "seek": 13708, "start": 144.22000000000003, "end": 145.96, "text": " is actually much harder than just running", "tokens": [307, 767, 709, 6081, 813, 445, 2614], "temperature": 0.0, "avg_logprob": -0.1379748845504502, "compression_ratio": 1.6401515151515151, "no_speech_prob": 1.3844070963386912e-05}, {"id": 53, "seek": 13708, "start": 145.96, "end": 147.88000000000002, "text": " a bunch of for loops in order.", "tokens": [257, 3840, 295, 337, 16121, 294, 1668, 13], "temperature": 0.0, "avg_logprob": -0.1379748845504502, "compression_ratio": 1.6401515151515151, "no_speech_prob": 1.3844070963386912e-05}, {"id": 54, "seek": 13708, "start": 147.88000000000002, "end": 151.8, "text": " And I showed you some stuff based on Halide,", "tokens": [400, 286, 4712, 291, 512, 1507, 2361, 322, 13896, 482, 11], "temperature": 0.0, "avg_logprob": -0.1379748845504502, "compression_ratio": 1.6401515151515151, "no_speech_prob": 1.3844070963386912e-05}, {"id": 55, "seek": 13708, "start": 151.8, "end": 154.24, "text": " which showed here some ways that you can write it fast", "tokens": [597, 4712, 510, 512, 2098, 300, 291, 393, 2464, 309, 2370], "temperature": 0.0, "avg_logprob": -0.1379748845504502, "compression_ratio": 1.6401515151515151, "no_speech_prob": 1.3844070963386912e-05}, {"id": 56, "seek": 13708, "start": 154.24, "end": 156.38000000000002, "text": " and here's some ways you could do it quickly.", "tokens": [293, 510, 311, 512, 2098, 291, 727, 360, 309, 2661, 13], "temperature": 0.0, "avg_logprob": -0.1379748845504502, "compression_ratio": 1.6401515151515151, "no_speech_prob": 1.3844070963386912e-05}, {"id": 57, "seek": 13708, "start": 156.38000000000002, "end": 160.14000000000001, "text": " And then I made the bold claim that being able to do this", "tokens": [400, 550, 286, 1027, 264, 11928, 3932, 300, 885, 1075, 281, 360, 341], "temperature": 0.0, "avg_logprob": -0.1379748845504502, "compression_ratio": 1.6401515151515151, "no_speech_prob": 1.3844070963386912e-05}, {"id": 58, "seek": 13708, "start": 160.14000000000001, "end": 163.4, "text": " on the GPU through Swift is where we're heading.", "tokens": [322, 264, 18407, 807, 25539, 307, 689, 321, 434, 9864, 13], "temperature": 0.0, "avg_logprob": -0.1379748845504502, "compression_ratio": 1.6401515151515151, "no_speech_prob": 1.3844070963386912e-05}, {"id": 59, "seek": 13708, "start": 163.4, "end": 165.54000000000002, "text": " And so to find out how that's gonna happen,", "tokens": [400, 370, 281, 915, 484, 577, 300, 311, 799, 1051, 11], "temperature": 0.0, "avg_logprob": -0.1379748845504502, "compression_ratio": 1.6401515151515151, "no_speech_prob": 1.3844070963386912e-05}, {"id": 60, "seek": 16554, "start": 165.54, "end": 168.23999999999998, "text": " let's hear it directly from Chris.", "tokens": [718, 311, 1568, 309, 3838, 490, 6688, 13], "temperature": 0.0, "avg_logprob": -0.08229970220309585, "compression_ratio": 1.7050847457627119, "no_speech_prob": 7.071256732160691e-06}, {"id": 61, "seek": 16554, "start": 168.23999999999998, "end": 169.79999999999998, "text": " Sure.", "tokens": [4894, 13], "temperature": 0.0, "avg_logprob": -0.08229970220309585, "compression_ratio": 1.7050847457627119, "no_speech_prob": 7.071256732160691e-06}, {"id": 62, "seek": 16554, "start": 169.79999999999998, "end": 170.88, "text": " Thanks, Jeremy.", "tokens": [2561, 11, 17809, 13], "temperature": 0.0, "avg_logprob": -0.08229970220309585, "compression_ratio": 1.7050847457627119, "no_speech_prob": 7.071256732160691e-06}, {"id": 63, "seek": 16554, "start": 170.88, "end": 173.44, "text": " So we will briefly talk about this.", "tokens": [407, 321, 486, 10515, 751, 466, 341, 13], "temperature": 0.0, "avg_logprob": -0.08229970220309585, "compression_ratio": 1.7050847457627119, "no_speech_prob": 7.071256732160691e-06}, {"id": 64, "seek": 16554, "start": 173.44, "end": 174.78, "text": " So we went through this video", "tokens": [407, 321, 1437, 807, 341, 960], "temperature": 0.0, "avg_logprob": -0.08229970220309585, "compression_ratio": 1.7050847457627119, "no_speech_prob": 7.071256732160691e-06}, {"id": 65, "seek": 16554, "start": 174.78, "end": 177.6, "text": " and the author of Halide gave a great talk", "tokens": [293, 264, 3793, 295, 13896, 482, 2729, 257, 869, 751], "temperature": 0.0, "avg_logprob": -0.08229970220309585, "compression_ratio": 1.7050847457627119, "no_speech_prob": 7.071256732160691e-06}, {"id": 66, "seek": 16554, "start": 177.6, "end": 180.2, "text": " about how in image processing kernels,", "tokens": [466, 577, 294, 3256, 9007, 23434, 1625, 11], "temperature": 0.0, "avg_logprob": -0.08229970220309585, "compression_ratio": 1.7050847457627119, "no_speech_prob": 7.071256732160691e-06}, {"id": 67, "seek": 16554, "start": 180.2, "end": 181.56, "text": " there's actually a lot of different ways", "tokens": [456, 311, 767, 257, 688, 295, 819, 2098], "temperature": 0.0, "avg_logprob": -0.08229970220309585, "compression_ratio": 1.7050847457627119, "no_speech_prob": 7.071256732160691e-06}, {"id": 68, "seek": 16554, "start": 181.56, "end": 183.18, "text": " to get the computer to run this", "tokens": [281, 483, 264, 3820, 281, 1190, 341], "temperature": 0.0, "avg_logprob": -0.08229970220309585, "compression_ratio": 1.7050847457627119, "no_speech_prob": 7.071256732160691e-06}, {"id": 69, "seek": 16554, "start": 183.18, "end": 185.12, "text": " and they all have very different performance characteristics", "tokens": [293, 436, 439, 362, 588, 819, 3389, 10891], "temperature": 0.0, "avg_logprob": -0.08229970220309585, "compression_ratio": 1.7050847457627119, "no_speech_prob": 7.071256732160691e-06}, {"id": 70, "seek": 16554, "start": 185.12, "end": 188.44, "text": " and it's really hard to take even a two dimensional blur", "tokens": [293, 309, 311, 534, 1152, 281, 747, 754, 257, 732, 18795, 14257], "temperature": 0.0, "avg_logprob": -0.08229970220309585, "compression_ratio": 1.7050847457627119, "no_speech_prob": 7.071256732160691e-06}, {"id": 71, "seek": 16554, "start": 188.44, "end": 190.7, "text": " and make it go fast.", "tokens": [293, 652, 309, 352, 2370, 13], "temperature": 0.0, "avg_logprob": -0.08229970220309585, "compression_ratio": 1.7050847457627119, "no_speech_prob": 7.071256732160691e-06}, {"id": 72, "seek": 16554, "start": 190.7, "end": 192.07999999999998, "text": " But we're doing something even harder.", "tokens": [583, 321, 434, 884, 746, 754, 6081, 13], "temperature": 0.0, "avg_logprob": -0.08229970220309585, "compression_ratio": 1.7050847457627119, "no_speech_prob": 7.071256732160691e-06}, {"id": 73, "seek": 16554, "start": 192.07999999999998, "end": 193.82, "text": " We're not talking about two dimensional images.", "tokens": [492, 434, 406, 1417, 466, 732, 18795, 5267, 13], "temperature": 0.0, "avg_logprob": -0.08229970220309585, "compression_ratio": 1.7050847457627119, "no_speech_prob": 7.071256732160691e-06}, {"id": 74, "seek": 19382, "start": 193.82, "end": 196.51999999999998, "text": " We're talking about 5D matrices and tensors", "tokens": [492, 434, 1417, 466, 1025, 35, 32284, 293, 10688, 830], "temperature": 0.0, "avg_logprob": -0.10175409832516231, "compression_ratio": 1.75, "no_speech_prob": 3.7848244573979173e-06}, {"id": 75, "seek": 19382, "start": 196.51999999999998, "end": 198.76, "text": " and lots of different operations that are composed together", "tokens": [293, 3195, 295, 819, 7705, 300, 366, 18204, 1214], "temperature": 0.0, "avg_logprob": -0.10175409832516231, "compression_ratio": 1.75, "no_speech_prob": 3.7848244573979173e-06}, {"id": 76, "seek": 19382, "start": 198.76, "end": 200.79999999999998, "text": " and hundreds or thousands of ops", "tokens": [293, 6779, 420, 5383, 295, 44663], "temperature": 0.0, "avg_logprob": -0.10175409832516231, "compression_ratio": 1.75, "no_speech_prob": 3.7848244573979173e-06}, {"id": 77, "seek": 19382, "start": 200.79999999999998, "end": 202.76, "text": " and trying to make that all go fast", "tokens": [293, 1382, 281, 652, 300, 439, 352, 2370], "temperature": 0.0, "avg_logprob": -0.10175409832516231, "compression_ratio": 1.75, "no_speech_prob": 3.7848244573979173e-06}, {"id": 78, "seek": 19382, "start": 202.76, "end": 205.48, "text": " is really, really, really, really hard.", "tokens": [307, 534, 11, 534, 11, 534, 11, 534, 1152, 13], "temperature": 0.0, "avg_logprob": -0.10175409832516231, "compression_ratio": 1.75, "no_speech_prob": 3.7848244573979173e-06}, {"id": 79, "seek": 19382, "start": 206.56, "end": 208.12, "text": " So if you wanted to do that,", "tokens": [407, 498, 291, 1415, 281, 360, 300, 11], "temperature": 0.0, "avg_logprob": -0.10175409832516231, "compression_ratio": 1.75, "no_speech_prob": 3.7848244573979173e-06}, {"id": 80, "seek": 19382, "start": 208.12, "end": 210.04, "text": " what you do is you'd write a whole new compiler to do this", "tokens": [437, 291, 360, 307, 291, 1116, 2464, 257, 1379, 777, 31958, 281, 360, 341], "temperature": 0.0, "avg_logprob": -0.10175409832516231, "compression_ratio": 1.75, "no_speech_prob": 3.7848244573979173e-06}, {"id": 81, "seek": 19382, "start": 210.04, "end": 212.06, "text": " and it would take years and years of time.", "tokens": [293, 309, 576, 747, 924, 293, 924, 295, 565, 13], "temperature": 0.0, "avg_logprob": -0.10175409832516231, "compression_ratio": 1.75, "no_speech_prob": 3.7848244573979173e-06}, {"id": 82, "seek": 19382, "start": 212.06, "end": 214.56, "text": " But fortunately, there's a great team at Google", "tokens": [583, 25511, 11, 456, 311, 257, 869, 1469, 412, 3329], "temperature": 0.0, "avg_logprob": -0.10175409832516231, "compression_ratio": 1.75, "no_speech_prob": 3.7848244573979173e-06}, {"id": 83, "seek": 19382, "start": 214.56, "end": 217.32, "text": " called the XLA team that has done all this for us.", "tokens": [1219, 264, 1783, 11435, 1469, 300, 575, 1096, 439, 341, 337, 505, 13], "temperature": 0.0, "avg_logprob": -0.10175409832516231, "compression_ratio": 1.75, "no_speech_prob": 3.7848244573979173e-06}, {"id": 84, "seek": 19382, "start": 217.32, "end": 220.84, "text": " And so what XLA is, is it's exactly one of those things.", "tokens": [400, 370, 437, 1783, 11435, 307, 11, 307, 309, 311, 2293, 472, 295, 729, 721, 13], "temperature": 0.0, "avg_logprob": -0.10175409832516231, "compression_ratio": 1.75, "no_speech_prob": 3.7848244573979173e-06}, {"id": 85, "seek": 19382, "start": 220.84, "end": 223.0, "text": " It's something that takes in this graph", "tokens": [467, 311, 746, 300, 2516, 294, 341, 4295], "temperature": 0.0, "avg_logprob": -0.10175409832516231, "compression_ratio": 1.75, "no_speech_prob": 3.7848244573979173e-06}, {"id": 86, "seek": 22300, "start": 223.0, "end": 224.16, "text": " of tensor operations.", "tokens": [295, 40863, 7705, 13], "temperature": 0.0, "avg_logprob": -0.13844705239320412, "compression_ratio": 1.7019607843137254, "no_speech_prob": 1.191015826407238e-06}, {"id": 87, "seek": 22300, "start": 224.16, "end": 227.32, "text": " So things like convolutions and matmols and adds", "tokens": [407, 721, 411, 3754, 15892, 293, 3803, 76, 19385, 293, 10860], "temperature": 0.0, "avg_logprob": -0.13844705239320412, "compression_ratio": 1.7019607843137254, "no_speech_prob": 1.191015826407238e-06}, {"id": 88, "seek": 22300, "start": 227.32, "end": 229.4, "text": " and things like that.", "tokens": [293, 721, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.13844705239320412, "compression_ratio": 1.7019607843137254, "no_speech_prob": 1.191015826407238e-06}, {"id": 89, "seek": 22300, "start": 229.4, "end": 233.52, "text": " It does low level optimizations to allocate buffers,", "tokens": [467, 775, 2295, 1496, 5028, 14455, 281, 35713, 9204, 433, 11], "temperature": 0.0, "avg_logprob": -0.13844705239320412, "compression_ratio": 1.7019607843137254, "no_speech_prob": 1.191015826407238e-06}, {"id": 90, "seek": 22300, "start": 233.52, "end": 236.84, "text": " to take these different kernels and fuse them together.", "tokens": [281, 747, 613, 819, 23434, 1625, 293, 31328, 552, 1214, 13], "temperature": 0.0, "avg_logprob": -0.13844705239320412, "compression_ratio": 1.7019607843137254, "no_speech_prob": 1.191015826407238e-06}, {"id": 91, "seek": 22300, "start": 236.84, "end": 238.88, "text": " And then it generates really high performance code", "tokens": [400, 550, 309, 23815, 534, 1090, 3389, 3089], "temperature": 0.0, "avg_logprob": -0.13844705239320412, "compression_ratio": 1.7019607843137254, "no_speech_prob": 1.191015826407238e-06}, {"id": 92, "seek": 22300, "start": 238.88, "end": 243.4, "text": " that runs on things like CPUs, GPUs or TPUs,", "tokens": [300, 6676, 322, 721, 411, 13199, 82, 11, 18407, 82, 420, 314, 8115, 82, 11], "temperature": 0.0, "avg_logprob": -0.13844705239320412, "compression_ratio": 1.7019607843137254, "no_speech_prob": 1.191015826407238e-06}, {"id": 93, "seek": 22300, "start": 243.4, "end": 246.4, "text": " which are crazy fast high performance accelerators", "tokens": [597, 366, 3219, 2370, 1090, 3389, 10172, 3391], "temperature": 0.0, "avg_logprob": -0.13844705239320412, "compression_ratio": 1.7019607843137254, "no_speech_prob": 1.191015826407238e-06}, {"id": 94, "seek": 22300, "start": 246.4, "end": 247.56, "text": " that Google has.", "tokens": [300, 3329, 575, 13], "temperature": 0.0, "avg_logprob": -0.13844705239320412, "compression_ratio": 1.7019607843137254, "no_speech_prob": 1.191015826407238e-06}, {"id": 95, "seek": 22300, "start": 247.56, "end": 250.84, "text": " And so XLA does all this stuff for us now,", "tokens": [400, 370, 1783, 11435, 775, 439, 341, 1507, 337, 505, 586, 11], "temperature": 0.0, "avg_logprob": -0.13844705239320412, "compression_ratio": 1.7019607843137254, "no_speech_prob": 1.191015826407238e-06}, {"id": 96, "seek": 25084, "start": 250.84, "end": 253.54, "text": " which is really exciting.", "tokens": [597, 307, 534, 4670, 13], "temperature": 0.0, "avg_logprob": -0.17269883837018693, "compression_ratio": 1.7031802120141342, "no_speech_prob": 1.663147344288518e-07}, {"id": 97, "seek": 25084, "start": 253.54, "end": 255.0, "text": " And if you take the running BatchNorm example", "tokens": [400, 498, 291, 747, 264, 2614, 363, 852, 45, 687, 1365], "temperature": 0.0, "avg_logprob": -0.17269883837018693, "compression_ratio": 1.7031802120141342, "no_speech_prob": 1.663147344288518e-07}, {"id": 98, "seek": 25084, "start": 255.0, "end": 257.2, "text": " that we left off with and we were talking about,", "tokens": [300, 321, 1411, 766, 365, 293, 321, 645, 1417, 466, 11], "temperature": 0.0, "avg_logprob": -0.17269883837018693, "compression_ratio": 1.7031802120141342, "no_speech_prob": 1.663147344288518e-07}, {"id": 99, "seek": 25084, "start": 257.2, "end": 259.48, "text": " this is the graph that XLA will generate for you.", "tokens": [341, 307, 264, 4295, 300, 1783, 11435, 486, 8460, 337, 291, 13], "temperature": 0.0, "avg_logprob": -0.17269883837018693, "compression_ratio": 1.7031802120141342, "no_speech_prob": 1.663147344288518e-07}, {"id": 100, "seek": 25084, "start": 259.48, "end": 263.6, "text": " And this is generated from Swift code, actually.", "tokens": [400, 341, 307, 10833, 490, 25539, 3089, 11, 767, 13], "temperature": 0.0, "avg_logprob": -0.17269883837018693, "compression_ratio": 1.7031802120141342, "no_speech_prob": 1.663147344288518e-07}, {"id": 101, "seek": 25084, "start": 263.6, "end": 266.28000000000003, "text": " And so you can see here what these darker boxes are", "tokens": [400, 370, 291, 393, 536, 510, 437, 613, 12741, 9002, 366], "temperature": 0.0, "avg_logprob": -0.17269883837018693, "compression_ratio": 1.7031802120141342, "no_speech_prob": 1.663147344288518e-07}, {"id": 102, "seek": 25084, "start": 266.28000000000003, "end": 268.04, "text": " is they're fusion nodes where it's taken", "tokens": [307, 436, 434, 23100, 13891, 689, 309, 311, 2726], "temperature": 0.0, "avg_logprob": -0.17269883837018693, "compression_ratio": 1.7031802120141342, "no_speech_prob": 1.663147344288518e-07}, {"id": 103, "seek": 25084, "start": 268.04, "end": 269.28000000000003, "text": " a whole bunch of different operations,", "tokens": [257, 1379, 3840, 295, 819, 7705, 11], "temperature": 0.0, "avg_logprob": -0.17269883837018693, "compression_ratio": 1.7031802120141342, "no_speech_prob": 1.663147344288518e-07}, {"id": 104, "seek": 25084, "start": 269.28000000000003, "end": 273.12, "text": " push them together, gotten rid of memory transfers,", "tokens": [2944, 552, 1214, 11, 5768, 3973, 295, 4675, 29137, 11], "temperature": 0.0, "avg_logprob": -0.17269883837018693, "compression_ratio": 1.7031802120141342, "no_speech_prob": 1.663147344288518e-07}, {"id": 105, "seek": 25084, "start": 273.12, "end": 274.32, "text": " push all loops together.", "tokens": [2944, 439, 16121, 1214, 13], "temperature": 0.0, "avg_logprob": -0.17269883837018693, "compression_ratio": 1.7031802120141342, "no_speech_prob": 1.663147344288518e-07}, {"id": 106, "seek": 25084, "start": 275.3, "end": 278.6, "text": " And the cool thing about this is this is all existing", "tokens": [400, 264, 1627, 551, 466, 341, 307, 341, 307, 439, 6741], "temperature": 0.0, "avg_logprob": -0.17269883837018693, "compression_ratio": 1.7031802120141342, "no_speech_prob": 1.663147344288518e-07}, {"id": 107, "seek": 27860, "start": 278.6, "end": 280.88, "text": " shipping technology that TensorFlow has now.", "tokens": [14122, 2899, 300, 37624, 575, 586, 13], "temperature": 0.0, "avg_logprob": -0.14737346790455005, "compression_ratio": 1.9166666666666667, "no_speech_prob": 1.3081430552119855e-06}, {"id": 108, "seek": 27860, "start": 282.40000000000003, "end": 285.16, "text": " There's a big question though, and a big gotcha,", "tokens": [821, 311, 257, 955, 1168, 1673, 11, 293, 257, 955, 658, 4413, 11], "temperature": 0.0, "avg_logprob": -0.14737346790455005, "compression_ratio": 1.9166666666666667, "no_speech_prob": 1.3081430552119855e-06}, {"id": 109, "seek": 27860, "start": 285.16, "end": 287.04, "text": " which is this only works if you have graphs.", "tokens": [597, 307, 341, 787, 1985, 498, 291, 362, 24877, 13], "temperature": 0.0, "avg_logprob": -0.14737346790455005, "compression_ratio": 1.9166666666666667, "no_speech_prob": 1.3081430552119855e-06}, {"id": 110, "seek": 27860, "start": 287.04, "end": 289.20000000000005, "text": " And with TensorFlow 1, that was pretty straightforward", "tokens": [400, 365, 37624, 502, 11, 300, 390, 1238, 15325], "temperature": 0.0, "avg_logprob": -0.14737346790455005, "compression_ratio": 1.9166666666666667, "no_speech_prob": 1.3081430552119855e-06}, {"id": 111, "seek": 27860, "start": 289.20000000000005, "end": 291.52000000000004, "text": " because TensorFlow 1 was all about graphs.", "tokens": [570, 37624, 502, 390, 439, 466, 24877, 13], "temperature": 0.0, "avg_logprob": -0.14737346790455005, "compression_ratio": 1.9166666666666667, "no_speech_prob": 1.3081430552119855e-06}, {"id": 112, "seek": 27860, "start": 291.52000000000004, "end": 293.76000000000005, "text": " Jeremy talked about the shipping, shipping, shipping,", "tokens": [17809, 2825, 466, 264, 14122, 11, 14122, 11, 14122, 11], "temperature": 0.0, "avg_logprob": -0.14737346790455005, "compression_ratio": 1.9166666666666667, "no_speech_prob": 1.3081430552119855e-06}, {"id": 113, "seek": 27860, "start": 293.76000000000005, "end": 297.16, "text": " ship, ship, ship, shipping thingy.", "tokens": [5374, 11, 5374, 11, 5374, 11, 14122, 551, 88, 13], "temperature": 0.0, "avg_logprob": -0.14737346790455005, "compression_ratio": 1.9166666666666667, "no_speech_prob": 1.3081430552119855e-06}, {"id": 114, "seek": 27860, "start": 297.16, "end": 299.24, "text": " Ship, ship, shipping, ship, ship, ship.", "tokens": [38407, 11, 5374, 11, 14122, 11, 5374, 11, 5374, 11, 5374, 13], "temperature": 0.0, "avg_logprob": -0.14737346790455005, "compression_ratio": 1.9166666666666667, "no_speech_prob": 1.3081430552119855e-06}, {"id": 115, "seek": 27860, "start": 299.24, "end": 301.52000000000004, "text": " I don't know, my recursion's wrong.", "tokens": [286, 500, 380, 458, 11, 452, 20560, 313, 311, 2085, 13], "temperature": 0.0, "avg_logprob": -0.14737346790455005, "compression_ratio": 1.9166666666666667, "no_speech_prob": 1.3081430552119855e-06}, {"id": 116, "seek": 27860, "start": 303.40000000000003, "end": 306.0, "text": " And so with TensorFlow 1, it was really natural.", "tokens": [400, 370, 365, 37624, 502, 11, 309, 390, 534, 3303, 13], "temperature": 0.0, "avg_logprob": -0.14737346790455005, "compression_ratio": 1.9166666666666667, "no_speech_prob": 1.3081430552119855e-06}, {"id": 117, "seek": 27860, "start": 306.0, "end": 307.76000000000005, "text": " With TensorFlow 2, with PyTorch,", "tokens": [2022, 37624, 568, 11, 365, 9953, 51, 284, 339, 11], "temperature": 0.0, "avg_logprob": -0.14737346790455005, "compression_ratio": 1.9166666666666667, "no_speech_prob": 1.3081430552119855e-06}, {"id": 118, "seek": 30776, "start": 307.76, "end": 309.71999999999997, "text": " there's a bigger problem, which is with Eager mode,", "tokens": [456, 311, 257, 3801, 1154, 11, 597, 307, 365, 462, 3557, 4391, 11], "temperature": 0.0, "avg_logprob": -0.0905475547845415, "compression_ratio": 1.7765957446808511, "no_speech_prob": 3.3404294299543835e-06}, {"id": 119, "seek": 30776, "start": 309.71999999999997, "end": 310.71999999999997, "text": " you don't have graphs.", "tokens": [291, 500, 380, 362, 24877, 13], "temperature": 0.0, "avg_logprob": -0.0905475547845415, "compression_ratio": 1.7765957446808511, "no_speech_prob": 3.3404294299543835e-06}, {"id": 120, "seek": 30776, "start": 310.71999999999997, "end": 313.24, "text": " That's the whole point is you wanna have step at a time,", "tokens": [663, 311, 264, 1379, 935, 307, 291, 1948, 362, 1823, 412, 257, 565, 11], "temperature": 0.0, "avg_logprob": -0.0905475547845415, "compression_ratio": 1.7765957446808511, "no_speech_prob": 3.3404294299543835e-06}, {"id": 121, "seek": 30776, "start": 313.24, "end": 314.36, "text": " you run one op at a time,", "tokens": [291, 1190, 472, 999, 412, 257, 565, 11], "temperature": 0.0, "avg_logprob": -0.0905475547845415, "compression_ratio": 1.7765957446808511, "no_speech_prob": 3.3404294299543835e-06}, {"id": 122, "seek": 30776, "start": 314.36, "end": 317.7, "text": " and so you don't get the notion of these things.", "tokens": [293, 370, 291, 500, 380, 483, 264, 10710, 295, 613, 721, 13], "temperature": 0.0, "avg_logprob": -0.0905475547845415, "compression_ratio": 1.7765957446808511, "no_speech_prob": 3.3404294299543835e-06}, {"id": 123, "seek": 30776, "start": 317.7, "end": 319.78, "text": " So what the entire world has figured out", "tokens": [407, 437, 264, 2302, 1002, 575, 8932, 484], "temperature": 0.0, "avg_logprob": -0.0905475547845415, "compression_ratio": 1.7765957446808511, "no_speech_prob": 3.3404294299543835e-06}, {"id": 124, "seek": 30776, "start": 319.78, "end": 321.64, "text": " is that there's two basic approaches", "tokens": [307, 300, 456, 311, 732, 3875, 11587], "temperature": 0.0, "avg_logprob": -0.0905475547845415, "compression_ratio": 1.7765957446808511, "no_speech_prob": 3.3404294299543835e-06}, {"id": 125, "seek": 30776, "start": 321.64, "end": 324.36, "text": " of getting graphs from Eager mode.", "tokens": [295, 1242, 24877, 490, 462, 3557, 4391, 13], "temperature": 0.0, "avg_logprob": -0.0905475547845415, "compression_ratio": 1.7765957446808511, "no_speech_prob": 3.3404294299543835e-06}, {"id": 126, "seek": 30776, "start": 324.36, "end": 327.24, "text": " There's tracing, and there's different theories on tracing.", "tokens": [821, 311, 25262, 11, 293, 456, 311, 819, 13667, 322, 25262, 13], "temperature": 0.0, "avg_logprob": -0.0905475547845415, "compression_ratio": 1.7765957446808511, "no_speech_prob": 3.3404294299543835e-06}, {"id": 127, "seek": 30776, "start": 327.24, "end": 330.0, "text": " There's staging and taking code", "tokens": [821, 311, 41085, 293, 1940, 3089], "temperature": 0.0, "avg_logprob": -0.0905475547845415, "compression_ratio": 1.7765957446808511, "no_speech_prob": 3.3404294299543835e-06}, {"id": 128, "seek": 30776, "start": 330.0, "end": 332.56, "text": " and turning it into a graph algorithmically.", "tokens": [293, 6246, 309, 666, 257, 4295, 9284, 984, 13], "temperature": 0.0, "avg_logprob": -0.0905475547845415, "compression_ratio": 1.7765957446808511, "no_speech_prob": 3.3404294299543835e-06}, {"id": 129, "seek": 30776, "start": 332.56, "end": 335.59999999999997, "text": " And PyTorch and TensorFlow both have similar", "tokens": [400, 9953, 51, 284, 339, 293, 37624, 1293, 362, 2531], "temperature": 0.0, "avg_logprob": -0.0905475547845415, "compression_ratio": 1.7765957446808511, "no_speech_prob": 3.3404294299543835e-06}, {"id": 130, "seek": 33560, "start": 335.6, "end": 338.36, "text": " but different approaches to both of these different things.", "tokens": [457, 819, 11587, 281, 1293, 295, 613, 819, 721, 13], "temperature": 0.0, "avg_logprob": -0.09625715153817913, "compression_ratio": 1.7604166666666667, "no_speech_prob": 3.726490604094579e-06}, {"id": 131, "seek": 33560, "start": 338.36, "end": 339.20000000000005, "text": " The problem with these things", "tokens": [440, 1154, 365, 613, 721], "temperature": 0.0, "avg_logprob": -0.09625715153817913, "compression_ratio": 1.7604166666666667, "no_speech_prob": 3.726490604094579e-06}, {"id": 132, "seek": 33560, "start": 339.20000000000005, "end": 341.32000000000005, "text": " is they all have really weird side effects", "tokens": [307, 436, 439, 362, 534, 3657, 1252, 5065], "temperature": 0.0, "avg_logprob": -0.09625715153817913, "compression_ratio": 1.7604166666666667, "no_speech_prob": 3.726490604094579e-06}, {"id": 133, "seek": 33560, "start": 341.32000000000005, "end": 342.76000000000005, "text": " and they're very difficult to reason about.", "tokens": [293, 436, 434, 588, 2252, 281, 1778, 466, 13], "temperature": 0.0, "avg_logprob": -0.09625715153817913, "compression_ratio": 1.7604166666666667, "no_speech_prob": 3.726490604094579e-06}, {"id": 134, "seek": 33560, "start": 342.76000000000005, "end": 347.76000000000005, "text": " And so if Swift for TensorFlow is an airplane,", "tokens": [400, 370, 498, 25539, 337, 37624, 307, 364, 17130, 11], "temperature": 0.0, "avg_logprob": -0.09625715153817913, "compression_ratio": 1.7604166666666667, "no_speech_prob": 3.726490604094579e-06}, {"id": 135, "seek": 33560, "start": 347.92, "end": 351.06, "text": " we've taken off and we're just coming off the runway,", "tokens": [321, 600, 2726, 766, 293, 321, 434, 445, 1348, 766, 264, 26642, 11], "temperature": 0.0, "avg_logprob": -0.09625715153817913, "compression_ratio": 1.7604166666666667, "no_speech_prob": 3.726490604094579e-06}, {"id": 136, "seek": 33560, "start": 351.06, "end": 353.0, "text": " but we're still building all this stuff", "tokens": [457, 321, 434, 920, 2390, 439, 341, 1507], "temperature": 0.0, "avg_logprob": -0.09625715153817913, "compression_ratio": 1.7604166666666667, "no_speech_prob": 3.726490604094579e-06}, {"id": 137, "seek": 33560, "start": 353.0, "end": 355.8, "text": " into Swift for TensorFlow as the plane is flying.", "tokens": [666, 25539, 337, 37624, 382, 264, 5720, 307, 7137, 13], "temperature": 0.0, "avg_logprob": -0.09625715153817913, "compression_ratio": 1.7604166666666667, "no_speech_prob": 3.726490604094579e-06}, {"id": 138, "seek": 33560, "start": 355.8, "end": 358.68, "text": " And so we don't actually have this today.", "tokens": [400, 370, 321, 500, 380, 767, 362, 341, 965, 13], "temperature": 0.0, "avg_logprob": -0.09625715153817913, "compression_ratio": 1.7604166666666667, "no_speech_prob": 3.726490604094579e-06}, {"id": 139, "seek": 33560, "start": 358.68, "end": 359.88, "text": " The team was working on the demo", "tokens": [440, 1469, 390, 1364, 322, 264, 10723], "temperature": 0.0, "avg_logprob": -0.09625715153817913, "compression_ratio": 1.7604166666666667, "no_speech_prob": 3.726490604094579e-06}, {"id": 140, "seek": 33560, "start": 359.88, "end": 362.82000000000005, "text": " and it just didn't come together today.", "tokens": [293, 309, 445, 994, 380, 808, 1214, 965, 13], "temperature": 0.0, "avg_logprob": -0.09625715153817913, "compression_ratio": 1.7604166666666667, "no_speech_prob": 3.726490604094579e-06}, {"id": 141, "seek": 33560, "start": 363.84000000000003, "end": 365.52000000000004, "text": " But this is really cool.", "tokens": [583, 341, 307, 534, 1627, 13], "temperature": 0.0, "avg_logprob": -0.09625715153817913, "compression_ratio": 1.7604166666666667, "no_speech_prob": 3.726490604094579e-06}, {"id": 142, "seek": 36552, "start": 365.52, "end": 367.68, "text": " And so one of the problems with tracing, for example,", "tokens": [400, 370, 472, 295, 264, 2740, 365, 25262, 11, 337, 1365, 11], "temperature": 0.0, "avg_logprob": -0.09385254333069275, "compression_ratio": 1.9360902255639099, "no_speech_prob": 1.2606335076270625e-05}, {"id": 143, "seek": 36552, "start": 367.68, "end": 371.71999999999997, "text": " is that in PyTorch or in TensorFlow Python,", "tokens": [307, 300, 294, 9953, 51, 284, 339, 420, 294, 37624, 15329, 11], "temperature": 0.0, "avg_logprob": -0.09385254333069275, "compression_ratio": 1.9360902255639099, "no_speech_prob": 1.2606335076270625e-05}, {"id": 144, "seek": 36552, "start": 371.71999999999997, "end": 374.91999999999996, "text": " when you trace, if you have control flow in your model,", "tokens": [562, 291, 13508, 11, 498, 291, 362, 1969, 3095, 294, 428, 2316, 11], "temperature": 0.0, "avg_logprob": -0.09385254333069275, "compression_ratio": 1.9360902255639099, "no_speech_prob": 1.2606335076270625e-05}, {"id": 145, "seek": 36552, "start": 374.91999999999996, "end": 376.84, "text": " it will unroll the entire control flow.", "tokens": [309, 486, 517, 3970, 264, 2302, 1969, 3095, 13], "temperature": 0.0, "avg_logprob": -0.09385254333069275, "compression_ratio": 1.9360902255639099, "no_speech_prob": 1.2606335076270625e-05}, {"id": 146, "seek": 36552, "start": 376.84, "end": 378.97999999999996, "text": " And so if you have an RNN, for example,", "tokens": [400, 370, 498, 291, 362, 364, 45702, 45, 11, 337, 1365, 11], "temperature": 0.0, "avg_logprob": -0.09385254333069275, "compression_ratio": 1.9360902255639099, "no_speech_prob": 1.2606335076270625e-05}, {"id": 147, "seek": 36552, "start": 378.97999999999996, "end": 382.24, "text": " it will unroll the entire RNN and make one gigantic thing.", "tokens": [309, 486, 517, 3970, 264, 2302, 45702, 45, 293, 652, 472, 26800, 551, 13], "temperature": 0.0, "avg_logprob": -0.09385254333069275, "compression_ratio": 1.9360902255639099, "no_speech_prob": 1.2606335076270625e-05}, {"id": 148, "seek": 36552, "start": 382.24, "end": 384.2, "text": " And some control flow you wanna ignore,", "tokens": [400, 512, 1969, 3095, 291, 1948, 11200, 11], "temperature": 0.0, "avg_logprob": -0.09385254333069275, "compression_ratio": 1.9360902255639099, "no_speech_prob": 1.2606335076270625e-05}, {"id": 149, "seek": 36552, "start": 384.2, "end": 385.85999999999996, "text": " some control flow you wanna keep in the graph.", "tokens": [512, 1969, 3095, 291, 1948, 1066, 294, 264, 4295, 13], "temperature": 0.0, "avg_logprob": -0.09385254333069275, "compression_ratio": 1.9360902255639099, "no_speech_prob": 1.2606335076270625e-05}, {"id": 150, "seek": 36552, "start": 385.85999999999996, "end": 387.79999999999995, "text": " And so having more control over that", "tokens": [400, 370, 1419, 544, 1969, 670, 300], "temperature": 0.0, "avg_logprob": -0.09385254333069275, "compression_ratio": 1.9360902255639099, "no_speech_prob": 1.2606335076270625e-05}, {"id": 151, "seek": 36552, "start": 387.79999999999995, "end": 389.47999999999996, "text": " is something that we think is really important.", "tokens": [307, 746, 300, 321, 519, 307, 534, 1021, 13], "temperature": 0.0, "avg_logprob": -0.09385254333069275, "compression_ratio": 1.9360902255639099, "no_speech_prob": 1.2606335076270625e-05}, {"id": 152, "seek": 36552, "start": 389.47999999999996, "end": 393.9, "text": " So Chris, this nearly there is as at end of April,", "tokens": [407, 6688, 11, 341, 6217, 456, 307, 382, 412, 917, 295, 6929, 11], "temperature": 0.0, "avg_logprob": -0.09385254333069275, "compression_ratio": 1.9360902255639099, "no_speech_prob": 1.2606335076270625e-05}, {"id": 153, "seek": 39390, "start": 393.9, "end": 397.91999999999996, "text": " this video will be out somewhere around mid to late June.", "tokens": [341, 960, 486, 312, 484, 4079, 926, 2062, 281, 3469, 6928, 13], "temperature": 0.0, "avg_logprob": -0.23641695056045264, "compression_ratio": 1.5870445344129556, "no_speech_prob": 1.165909634437412e-05}, {"id": 154, "seek": 39390, "start": 398.84, "end": 400.76, "text": " I suspect it will be up and running by then.", "tokens": [286, 9091, 309, 486, 312, 493, 293, 2614, 538, 550, 13], "temperature": 0.0, "avg_logprob": -0.23641695056045264, "compression_ratio": 1.5870445344129556, "no_speech_prob": 1.165909634437412e-05}, {"id": 155, "seek": 39390, "start": 400.76, "end": 402.64, "text": " And if it's not, you will personally go to the house", "tokens": [400, 498, 309, 311, 406, 11, 291, 486, 5665, 352, 281, 264, 1782], "temperature": 0.0, "avg_logprob": -0.23641695056045264, "compression_ratio": 1.5870445344129556, "no_speech_prob": 1.165909634437412e-05}, {"id": 156, "seek": 39390, "start": 402.64, "end": 405.35999999999996, "text": " of the person watching the video and fix it for them.", "tokens": [295, 264, 954, 1976, 264, 960, 293, 3191, 309, 337, 552, 13], "temperature": 0.0, "avg_logprob": -0.23641695056045264, "compression_ratio": 1.5870445344129556, "no_speech_prob": 1.165909634437412e-05}, {"id": 157, "seek": 39390, "start": 405.35999999999996, "end": 407.96, "text": " So here's the deal.", "tokens": [407, 510, 311, 264, 2028, 13], "temperature": 0.0, "avg_logprob": -0.23641695056045264, "compression_ratio": 1.5870445344129556, "no_speech_prob": 1.165909634437412e-05}, {"id": 158, "seek": 39390, "start": 407.96, "end": 412.29999999999995, "text": " In two, three months, so that's July,", "tokens": [682, 732, 11, 1045, 2493, 11, 370, 300, 311, 7370, 11], "temperature": 0.0, "avg_logprob": -0.23641695056045264, "compression_ratio": 1.5870445344129556, "no_speech_prob": 1.165909634437412e-05}, {"id": 159, "seek": 39390, "start": 413.15999999999997, "end": 416.15999999999997, "text": " look on the Swift for TensorFlow main page,", "tokens": [574, 322, 264, 25539, 337, 37624, 2135, 3028, 11], "temperature": 0.0, "avg_logprob": -0.23641695056045264, "compression_ratio": 1.5870445344129556, "no_speech_prob": 1.165909634437412e-05}, {"id": 160, "seek": 39390, "start": 416.15999999999997, "end": 418.9, "text": " there should be a CoLab demo showing this.", "tokens": [456, 820, 312, 257, 3066, 37880, 10723, 4099, 341, 13], "temperature": 0.0, "avg_logprob": -0.23641695056045264, "compression_ratio": 1.5870445344129556, "no_speech_prob": 1.165909634437412e-05}, {"id": 161, "seek": 39390, "start": 418.9, "end": 421.79999999999995, "text": " So we'll see what the future will be.", "tokens": [407, 321, 603, 536, 437, 264, 2027, 486, 312, 13], "temperature": 0.0, "avg_logprob": -0.23641695056045264, "compression_ratio": 1.5870445344129556, "no_speech_prob": 1.165909634437412e-05}, {"id": 162, "seek": 42180, "start": 421.8, "end": 425.08, "text": " And there should be a notebook in the hair brain repo", "tokens": [400, 456, 820, 312, 257, 21060, 294, 264, 2578, 3567, 49040], "temperature": 0.0, "avg_logprob": -0.20288005628083883, "compression_ratio": 1.7507987220447285, "no_speech_prob": 5.507356490852544e-06}, {"id": 163, "seek": 42180, "start": 425.08, "end": 428.52000000000004, "text": " that'll be called batch norm or something.", "tokens": [300, 603, 312, 1219, 15245, 2026, 420, 746, 13], "temperature": 0.0, "avg_logprob": -0.20288005628083883, "compression_ratio": 1.7507987220447285, "no_speech_prob": 5.507356490852544e-06}, {"id": 164, "seek": 42180, "start": 428.52000000000004, "end": 431.0, "text": " And we'll have an XLA version of this running.", "tokens": [400, 321, 603, 362, 364, 1783, 11435, 3037, 295, 341, 2614, 13], "temperature": 0.0, "avg_logprob": -0.20288005628083883, "compression_ratio": 1.7507987220447285, "no_speech_prob": 5.507356490852544e-06}, {"id": 165, "seek": 42180, "start": 431.0, "end": 432.32, "text": " Yeah, absolutely.", "tokens": [865, 11, 3122, 13], "temperature": 0.0, "avg_logprob": -0.20288005628083883, "compression_ratio": 1.7507987220447285, "no_speech_prob": 5.507356490852544e-06}, {"id": 166, "seek": 42180, "start": 432.32, "end": 433.78000000000003, "text": " And so Swift also has this thing called", "tokens": [400, 370, 25539, 611, 575, 341, 551, 1219], "temperature": 0.0, "avg_logprob": -0.20288005628083883, "compression_ratio": 1.7507987220447285, "no_speech_prob": 5.507356490852544e-06}, {"id": 167, "seek": 42180, "start": 433.78000000000003, "end": 434.96000000000004, "text": " graph program extraction.", "tokens": [4295, 1461, 30197, 13], "temperature": 0.0, "avg_logprob": -0.20288005628083883, "compression_ratio": 1.7507987220447285, "no_speech_prob": 5.507356490852544e-06}, {"id": 168, "seek": 42180, "start": 434.96000000000004, "end": 437.12, "text": " And the basic idea here is that where AutoGraph", "tokens": [400, 264, 3875, 1558, 510, 307, 300, 689, 13738, 38, 2662], "temperature": 0.0, "avg_logprob": -0.20288005628083883, "compression_ratio": 1.7507987220447285, "no_speech_prob": 5.507356490852544e-06}, {"id": 169, "seek": 42180, "start": 437.12, "end": 438.40000000000003, "text": " and TorchScript are doing these things", "tokens": [293, 7160, 339, 14237, 366, 884, 613, 721], "temperature": 0.0, "avg_logprob": -0.20288005628083883, "compression_ratio": 1.7507987220447285, "no_speech_prob": 5.507356490852544e-06}, {"id": 170, "seek": 42180, "start": 438.40000000000003, "end": 440.64, "text": " where they're kinda like Python, but kind of not.", "tokens": [689, 436, 434, 4144, 411, 15329, 11, 457, 733, 295, 406, 13], "temperature": 0.0, "avg_logprob": -0.20288005628083883, "compression_ratio": 1.7507987220447285, "no_speech_prob": 5.507356490852544e-06}, {"id": 171, "seek": 42180, "start": 440.64, "end": 442.86, "text": " And Jeremy was talking before about how,", "tokens": [400, 17809, 390, 1417, 949, 466, 577, 11], "temperature": 0.0, "avg_logprob": -0.20288005628083883, "compression_ratio": 1.7507987220447285, "no_speech_prob": 5.507356490852544e-06}, {"id": 172, "seek": 42180, "start": 442.86, "end": 444.2, "text": " like you add a comment in the wrong place", "tokens": [411, 291, 909, 257, 2871, 294, 264, 2085, 1081], "temperature": 0.0, "avg_logprob": -0.20288005628083883, "compression_ratio": 1.7507987220447285, "no_speech_prob": 5.507356490852544e-06}, {"id": 173, "seek": 42180, "start": 444.2, "end": 445.40000000000003, "text": " and TorchScript will fall over.", "tokens": [293, 7160, 339, 14237, 486, 2100, 670, 13], "temperature": 0.0, "avg_logprob": -0.20288005628083883, "compression_ratio": 1.7507987220447285, "no_speech_prob": 5.507356490852544e-06}, {"id": 174, "seek": 42180, "start": 445.40000000000003, "end": 447.76, "text": " And it's not, it kinda looks like Python,", "tokens": [400, 309, 311, 406, 11, 309, 4144, 1542, 411, 15329, 11], "temperature": 0.0, "avg_logprob": -0.20288005628083883, "compression_ratio": 1.7507987220447285, "no_speech_prob": 5.507356490852544e-06}, {"id": 175, "seek": 42180, "start": 447.76, "end": 449.6, "text": " but really, really is not.", "tokens": [457, 534, 11, 534, 307, 406, 13], "temperature": 0.0, "avg_logprob": -0.20288005628083883, "compression_ratio": 1.7507987220447285, "no_speech_prob": 5.507356490852544e-06}, {"id": 176, "seek": 44960, "start": 449.6, "end": 453.16, "text": " With Swift, we have a compiled reasonable language.", "tokens": [2022, 25539, 11, 321, 362, 257, 36548, 10585, 2856, 13], "temperature": 0.0, "avg_logprob": -0.11311721801757812, "compression_ratio": 1.7220543806646527, "no_speech_prob": 1.0187835641772836e-06}, {"id": 177, "seek": 44960, "start": 453.16, "end": 454.64000000000004, "text": " And so we could just use compiler techniques", "tokens": [400, 370, 321, 727, 445, 764, 31958, 7512], "temperature": 0.0, "avg_logprob": -0.11311721801757812, "compression_ratio": 1.7220543806646527, "no_speech_prob": 1.0187835641772836e-06}, {"id": 178, "seek": 44960, "start": 454.64000000000004, "end": 456.36, "text": " to form a graph, pull it out for you.", "tokens": [281, 1254, 257, 4295, 11, 2235, 309, 484, 337, 291, 13], "temperature": 0.0, "avg_logprob": -0.11311721801757812, "compression_ratio": 1.7220543806646527, "no_speech_prob": 1.0187835641772836e-06}, {"id": 179, "seek": 44960, "start": 456.36, "end": 458.68, "text": " And so a lot of things that are very magic", "tokens": [400, 370, 257, 688, 295, 721, 300, 366, 588, 5585], "temperature": 0.0, "avg_logprob": -0.11311721801757812, "compression_ratio": 1.7220543806646527, "no_speech_prob": 1.0187835641772836e-06}, {"id": 180, "seek": 44960, "start": 458.68, "end": 460.52000000000004, "text": " and very weird are just very natural", "tokens": [293, 588, 3657, 366, 445, 588, 3303], "temperature": 0.0, "avg_logprob": -0.11311721801757812, "compression_ratio": 1.7220543806646527, "no_speech_prob": 1.0187835641772836e-06}, {"id": 181, "seek": 44960, "start": 460.52000000000004, "end": 461.82000000000005, "text": " when plugged into the system.", "tokens": [562, 25679, 666, 264, 1185, 13], "temperature": 0.0, "avg_logprob": -0.11311721801757812, "compression_ratio": 1.7220543806646527, "no_speech_prob": 1.0187835641772836e-06}, {"id": 182, "seek": 44960, "start": 461.82000000000005, "end": 464.0, "text": " So I'm very excited about where all this comes.", "tokens": [407, 286, 478, 588, 2919, 466, 689, 439, 341, 1487, 13], "temperature": 0.0, "avg_logprob": -0.11311721801757812, "compression_ratio": 1.7220543806646527, "no_speech_prob": 1.0187835641772836e-06}, {"id": 183, "seek": 44960, "start": 464.0, "end": 466.8, "text": " But for right now, this doesn't exist.", "tokens": [583, 337, 558, 586, 11, 341, 1177, 380, 2514, 13], "temperature": 0.0, "avg_logprob": -0.11311721801757812, "compression_ratio": 1.7220543806646527, "no_speech_prob": 1.0187835641772836e-06}, {"id": 184, "seek": 44960, "start": 466.8, "end": 468.04, "text": " The airplane is being built.", "tokens": [440, 17130, 307, 885, 3094, 13], "temperature": 0.0, "avg_logprob": -0.11311721801757812, "compression_ratio": 1.7220543806646527, "no_speech_prob": 1.0187835641772836e-06}, {"id": 185, "seek": 44960, "start": 468.04, "end": 471.3, "text": " So one last thing that doesn't exist,", "tokens": [407, 472, 1036, 551, 300, 1177, 380, 2514, 11], "temperature": 0.0, "avg_logprob": -0.11311721801757812, "compression_ratio": 1.7220543806646527, "no_speech_prob": 1.0187835641772836e-06}, {"id": 186, "seek": 44960, "start": 471.3, "end": 472.76000000000005, "text": " because Jeremy wanted to talk about this,", "tokens": [570, 17809, 1415, 281, 751, 466, 341, 11], "temperature": 0.0, "avg_logprob": -0.11311721801757812, "compression_ratio": 1.7220543806646527, "no_speech_prob": 1.0187835641772836e-06}, {"id": 187, "seek": 44960, "start": 472.76000000000005, "end": 475.0, "text": " he's very excited, is there's this question", "tokens": [415, 311, 588, 2919, 11, 307, 456, 311, 341, 1168], "temperature": 0.0, "avg_logprob": -0.11311721801757812, "compression_ratio": 1.7220543806646527, "no_speech_prob": 1.0187835641772836e-06}, {"id": 188, "seek": 44960, "start": 475.0, "end": 475.88, "text": " about what is MLIR?", "tokens": [466, 437, 307, 21601, 7740, 30], "temperature": 0.0, "avg_logprob": -0.11311721801757812, "compression_ratio": 1.7220543806646527, "no_speech_prob": 1.0187835641772836e-06}, {"id": 189, "seek": 44960, "start": 475.88, "end": 477.20000000000005, "text": " And how does MLIR relate to XLA?", "tokens": [400, 577, 775, 21601, 7740, 10961, 281, 1783, 11435, 30], "temperature": 0.0, "avg_logprob": -0.11311721801757812, "compression_ratio": 1.7220543806646527, "no_speech_prob": 1.0187835641772836e-06}, {"id": 190, "seek": 44960, "start": 477.20000000000005, "end": 478.34000000000003, "text": " What is all this stuff going on?", "tokens": [708, 307, 439, 341, 1507, 516, 322, 30], "temperature": 0.0, "avg_logprob": -0.11311721801757812, "compression_ratio": 1.7220543806646527, "no_speech_prob": 1.0187835641772836e-06}, {"id": 191, "seek": 47834, "start": 478.34, "end": 480.64, "text": " How does this, what does this make sense for TensorFlow?", "tokens": [1012, 775, 341, 11, 437, 775, 341, 652, 2020, 337, 37624, 30], "temperature": 0.0, "avg_logprob": -0.1215833263632692, "compression_ratio": 1.7977207977207976, "no_speech_prob": 1.1365207228664076e-06}, {"id": 192, "seek": 47834, "start": 480.64, "end": 482.79999999999995, "text": " And the way I look at this is that XLA is really good", "tokens": [400, 264, 636, 286, 574, 412, 341, 307, 300, 1783, 11435, 307, 534, 665], "temperature": 0.0, "avg_logprob": -0.1215833263632692, "compression_ratio": 1.7977207977207976, "no_speech_prob": 1.1365207228664076e-06}, {"id": 193, "seek": 47834, "start": 482.79999999999995, "end": 484.96, "text": " if you have, if you want high performance", "tokens": [498, 291, 362, 11, 498, 291, 528, 1090, 3389], "temperature": 0.0, "avg_logprob": -0.1215833263632692, "compression_ratio": 1.7977207977207976, "no_speech_prob": 1.1365207228664076e-06}, {"id": 194, "seek": 47834, "start": 484.96, "end": 487.52, "text": " with these common operators, like matrix multiplication,", "tokens": [365, 613, 2689, 19077, 11, 411, 8141, 27290, 11], "temperature": 0.0, "avg_logprob": -0.1215833263632692, "compression_ratio": 1.7977207977207976, "no_speech_prob": 1.1365207228664076e-06}, {"id": 195, "seek": 47834, "start": 487.52, "end": 489.26, "text": " convolution, things like that.", "tokens": [45216, 11, 721, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.1215833263632692, "compression_ratio": 1.7977207977207976, "no_speech_prob": 1.1365207228664076e-06}, {"id": 196, "seek": 47834, "start": 489.26, "end": 491.32, "text": " These operators can be combined in lots of different ways.", "tokens": [1981, 19077, 393, 312, 9354, 294, 3195, 295, 819, 2098, 13], "temperature": 0.0, "avg_logprob": -0.1215833263632692, "compression_ratio": 1.7977207977207976, "no_speech_prob": 1.1365207228664076e-06}, {"id": 197, "seek": 47834, "start": 491.32, "end": 493.0, "text": " Ryan Bastian was a great example of this.", "tokens": [9116, 363, 28129, 390, 257, 869, 1365, 295, 341, 13], "temperature": 0.0, "avg_logprob": -0.1215833263632692, "compression_ratio": 1.7977207977207976, "no_speech_prob": 1.1365207228664076e-06}, {"id": 198, "seek": 47834, "start": 493.0, "end": 494.44, "text": " And so these are the primitives", "tokens": [400, 370, 613, 366, 264, 2886, 38970], "temperature": 0.0, "avg_logprob": -0.1215833263632692, "compression_ratio": 1.7977207977207976, "no_speech_prob": 1.1365207228664076e-06}, {"id": 199, "seek": 47834, "start": 494.44, "end": 496.59999999999997, "text": " that a lot of deep learning is built out of.", "tokens": [300, 257, 688, 295, 2452, 2539, 307, 3094, 484, 295, 13], "temperature": 0.0, "avg_logprob": -0.1215833263632692, "compression_ratio": 1.7977207977207976, "no_speech_prob": 1.1365207228664076e-06}, {"id": 200, "seek": 47834, "start": 496.59999999999997, "end": 499.32, "text": " And XLA is really awesome for high performance,", "tokens": [400, 1783, 11435, 307, 534, 3476, 337, 1090, 3389, 11], "temperature": 0.0, "avg_logprob": -0.1215833263632692, "compression_ratio": 1.7977207977207976, "no_speech_prob": 1.1365207228664076e-06}, {"id": 201, "seek": 47834, "start": 499.32, "end": 501.29999999999995, "text": " particularly weird accelerators.", "tokens": [4098, 3657, 10172, 3391, 13], "temperature": 0.0, "avg_logprob": -0.1215833263632692, "compression_ratio": 1.7977207977207976, "no_speech_prob": 1.1365207228664076e-06}, {"id": 202, "seek": 47834, "start": 501.29999999999995, "end": 502.34, "text": " But there's a catch with this,", "tokens": [583, 456, 311, 257, 3745, 365, 341, 11], "temperature": 0.0, "avg_logprob": -0.1215833263632692, "compression_ratio": 1.7977207977207976, "no_speech_prob": 1.1365207228664076e-06}, {"id": 203, "seek": 47834, "start": 502.34, "end": 506.2, "text": " because one of the things that power deep learning", "tokens": [570, 472, 295, 264, 721, 300, 1347, 2452, 2539], "temperature": 0.0, "avg_logprob": -0.1215833263632692, "compression_ratio": 1.7977207977207976, "no_speech_prob": 1.1365207228664076e-06}, {"id": 204, "seek": 47834, "start": 506.2, "end": 508.32, "text": " is the ability to innovate in many of these ways.", "tokens": [307, 264, 3485, 281, 33444, 294, 867, 295, 613, 2098, 13], "temperature": 0.0, "avg_logprob": -0.1215833263632692, "compression_ratio": 1.7977207977207976, "no_speech_prob": 1.1365207228664076e-06}, {"id": 205, "seek": 50832, "start": 508.32, "end": 510.82, "text": " And so depthwise convolutions came out,", "tokens": [400, 370, 7161, 3711, 3754, 15892, 1361, 484, 11], "temperature": 0.0, "avg_logprob": -0.11859425020889497, "compression_ratio": 1.806020066889632, "no_speech_prob": 1.129953670897521e-05}, {"id": 206, "seek": 50832, "start": 510.82, "end": 512.6, "text": " and suddenly with many fewer parameters,", "tokens": [293, 5800, 365, 867, 13366, 9834, 11], "temperature": 0.0, "avg_logprob": -0.11859425020889497, "compression_ratio": 1.806020066889632, "no_speech_prob": 1.129953670897521e-05}, {"id": 207, "seek": 50832, "start": 512.6, "end": 515.0, "text": " you can get really good accuracy wins.", "tokens": [291, 393, 483, 534, 665, 14170, 10641, 13], "temperature": 0.0, "avg_logprob": -0.11859425020889497, "compression_ratio": 1.806020066889632, "no_speech_prob": 1.129953670897521e-05}, {"id": 208, "seek": 50832, "start": 515.0, "end": 517.4399999999999, "text": " And you couldn't do that if you just had convolution.", "tokens": [400, 291, 2809, 380, 360, 300, 498, 291, 445, 632, 45216, 13], "temperature": 0.0, "avg_logprob": -0.11859425020889497, "compression_ratio": 1.806020066889632, "no_speech_prob": 1.129953670897521e-05}, {"id": 209, "seek": 50832, "start": 517.4399999999999, "end": 518.8, "text": " Yeah, and like on the other hand,", "tokens": [865, 11, 293, 411, 322, 264, 661, 1011, 11], "temperature": 0.0, "avg_logprob": -0.11859425020889497, "compression_ratio": 1.806020066889632, "no_speech_prob": 1.129953670897521e-05}, {"id": 210, "seek": 50832, "start": 518.8, "end": 522.86, "text": " like depthwise convolutions are a specific case", "tokens": [411, 7161, 3711, 3754, 15892, 366, 257, 2685, 1389], "temperature": 0.0, "avg_logprob": -0.11859425020889497, "compression_ratio": 1.806020066889632, "no_speech_prob": 1.129953670897521e-05}, {"id": 211, "seek": 50832, "start": 522.86, "end": 524.48, "text": " of grouped convolutions.", "tokens": [295, 41877, 3754, 15892, 13], "temperature": 0.0, "avg_logprob": -0.11859425020889497, "compression_ratio": 1.806020066889632, "no_speech_prob": 1.129953670897521e-05}, {"id": 212, "seek": 50832, "start": 524.48, "end": 525.68, "text": " And the reason we haven't been talking", "tokens": [400, 264, 1778, 321, 2378, 380, 668, 1417], "temperature": 0.0, "avg_logprob": -0.11859425020889497, "compression_ratio": 1.806020066889632, "no_speech_prob": 1.129953670897521e-05}, {"id": 213, "seek": 50832, "start": 525.68, "end": 527.28, "text": " about grouped convolutions in class", "tokens": [466, 41877, 3754, 15892, 294, 1508], "temperature": 0.0, "avg_logprob": -0.11859425020889497, "compression_ratio": 1.806020066889632, "no_speech_prob": 1.129953670897521e-05}, {"id": 214, "seek": 50832, "start": 527.28, "end": 531.48, "text": " is that so far no one's really got them running quickly.", "tokens": [307, 300, 370, 1400, 572, 472, 311, 534, 658, 552, 2614, 2661, 13], "temperature": 0.0, "avg_logprob": -0.11859425020889497, "compression_ratio": 1.806020066889632, "no_speech_prob": 1.129953670897521e-05}, {"id": 215, "seek": 50832, "start": 531.48, "end": 532.66, "text": " And so there's this whole thing", "tokens": [400, 370, 456, 311, 341, 1379, 551], "temperature": 0.0, "avg_logprob": -0.11859425020889497, "compression_ratio": 1.806020066889632, "no_speech_prob": 1.129953670897521e-05}, {"id": 216, "seek": 50832, "start": 532.66, "end": 536.08, "text": " that like somebody wrote a paper about three years ago,", "tokens": [300, 411, 2618, 4114, 257, 3035, 466, 1045, 924, 2057, 11], "temperature": 0.0, "avg_logprob": -0.11859425020889497, "compression_ratio": 1.806020066889632, "no_speech_prob": 1.129953670897521e-05}, {"id": 217, "seek": 50832, "start": 536.08, "end": 537.46, "text": " which basically says, hey, here's a way", "tokens": [597, 1936, 1619, 11, 4177, 11, 510, 311, 257, 636], "temperature": 0.0, "avg_logprob": -0.11859425020889497, "compression_ratio": 1.806020066889632, "no_speech_prob": 1.129953670897521e-05}, {"id": 218, "seek": 53746, "start": 537.46, "end": 539.8000000000001, "text": " to get all the benefit of convolutions,", "tokens": [281, 483, 439, 264, 5121, 295, 3754, 15892, 11], "temperature": 0.0, "avg_logprob": -0.1559599107311618, "compression_ratio": 1.7822085889570551, "no_speech_prob": 1.2410752788127866e-05}, {"id": 219, "seek": 53746, "start": 539.8000000000001, "end": 541.2800000000001, "text": " but much, much faster.", "tokens": [457, 709, 11, 709, 4663, 13], "temperature": 0.0, "avg_logprob": -0.1559599107311618, "compression_ratio": 1.7822085889570551, "no_speech_prob": 1.2410752788127866e-05}, {"id": 220, "seek": 53746, "start": 541.2800000000001, "end": 542.76, "text": " And we're still, you know,", "tokens": [400, 321, 434, 920, 11, 291, 458, 11], "temperature": 0.0, "avg_logprob": -0.1559599107311618, "compression_ratio": 1.7822085889570551, "no_speech_prob": 1.2410752788127866e-05}, {"id": 221, "seek": 53746, "start": 542.76, "end": 544.76, "text": " the practical deep learning for coders course", "tokens": [264, 8496, 2452, 2539, 337, 17656, 433, 1164], "temperature": 0.0, "avg_logprob": -0.1559599107311618, "compression_ratio": 1.7822085889570551, "no_speech_prob": 1.2410752788127866e-05}, {"id": 222, "seek": 53746, "start": 544.76, "end": 546.6800000000001, "text": " still doesn't teach them because they're still not practical", "tokens": [920, 1177, 380, 2924, 552, 570, 436, 434, 920, 406, 8496], "temperature": 0.0, "avg_logprob": -0.1559599107311618, "compression_ratio": 1.7822085889570551, "no_speech_prob": 1.2410752788127866e-05}, {"id": 223, "seek": 53746, "start": 546.6800000000001, "end": 548.84, "text": " because no one's got them running quickly yet.", "tokens": [570, 572, 472, 311, 658, 552, 2614, 2661, 1939, 13], "temperature": 0.0, "avg_logprob": -0.1559599107311618, "compression_ratio": 1.7822085889570551, "no_speech_prob": 1.2410752788127866e-05}, {"id": 224, "seek": 53746, "start": 548.84, "end": 550.96, "text": " And so we've been talking about this whole course,", "tokens": [400, 370, 321, 600, 668, 1417, 466, 341, 1379, 1164, 11], "temperature": 0.0, "avg_logprob": -0.1559599107311618, "compression_ratio": 1.7822085889570551, "no_speech_prob": 1.2410752788127866e-05}, {"id": 225, "seek": 53746, "start": 550.96, "end": 552.8000000000001, "text": " the goal with this whole platform", "tokens": [264, 3387, 365, 341, 1379, 3663], "temperature": 0.0, "avg_logprob": -0.1559599107311618, "compression_ratio": 1.7822085889570551, "no_speech_prob": 1.2410752788127866e-05}, {"id": 226, "seek": 53746, "start": 552.8000000000001, "end": 555.24, "text": " is to make it an infinitely hackable platform.", "tokens": [307, 281, 652, 309, 364, 36227, 10339, 712, 3663, 13], "temperature": 0.0, "avg_logprob": -0.1559599107311618, "compression_ratio": 1.7822085889570551, "no_speech_prob": 1.2410752788127866e-05}, {"id": 227, "seek": 53746, "start": 555.24, "end": 557.9000000000001, "text": " And so if it's infinitely hackable down a convolution,", "tokens": [400, 370, 498, 309, 311, 36227, 10339, 712, 760, 257, 45216, 11], "temperature": 0.0, "avg_logprob": -0.1559599107311618, "compression_ratio": 1.7822085889570551, "no_speech_prob": 1.2410752788127866e-05}, {"id": 228, "seek": 53746, "start": 557.9000000000001, "end": 559.6800000000001, "text": " or give up all performance around a CPU,", "tokens": [420, 976, 493, 439, 3389, 926, 257, 13199, 11], "temperature": 0.0, "avg_logprob": -0.1559599107311618, "compression_ratio": 1.7822085889570551, "no_speech_prob": 1.2410752788127866e-05}, {"id": 229, "seek": 53746, "start": 559.6800000000001, "end": 560.8000000000001, "text": " well, that's not good enough.", "tokens": [731, 11, 300, 311, 406, 665, 1547, 13], "temperature": 0.0, "avg_logprob": -0.1559599107311618, "compression_ratio": 1.7822085889570551, "no_speech_prob": 1.2410752788127866e-05}, {"id": 230, "seek": 53746, "start": 560.8000000000001, "end": 563.4200000000001, "text": " And so what MLIR is about is there's multiple different", "tokens": [400, 370, 437, 21601, 7740, 307, 466, 307, 456, 311, 3866, 819], "temperature": 0.0, "avg_logprob": -0.1559599107311618, "compression_ratio": 1.7822085889570551, "no_speech_prob": 1.2410752788127866e-05}, {"id": 231, "seek": 53746, "start": 563.4200000000001, "end": 564.44, "text": " aspects of the project,", "tokens": [7270, 295, 264, 1716, 11], "temperature": 0.0, "avg_logprob": -0.1559599107311618, "compression_ratio": 1.7822085889570551, "no_speech_prob": 1.2410752788127866e-05}, {"id": 232, "seek": 56444, "start": 564.44, "end": 567.48, "text": " but I think one Jeremy's most excited about is,", "tokens": [457, 286, 519, 472, 17809, 311, 881, 2919, 466, 307, 11], "temperature": 0.0, "avg_logprob": -0.13532987581629333, "compression_ratio": 1.722397476340694, "no_speech_prob": 9.570425163474283e-07}, {"id": 233, "seek": 56444, "start": 567.48, "end": 568.6800000000001, "text": " what about custom ops?", "tokens": [437, 466, 2375, 44663, 30], "temperature": 0.0, "avg_logprob": -0.13532987581629333, "compression_ratio": 1.722397476340694, "no_speech_prob": 9.570425163474283e-07}, {"id": 234, "seek": 56444, "start": 569.96, "end": 571.4000000000001, "text": " How can we make it so you don't bottom out", "tokens": [1012, 393, 321, 652, 309, 370, 291, 500, 380, 2767, 484], "temperature": 0.0, "avg_logprob": -0.13532987581629333, "compression_ratio": 1.722397476340694, "no_speech_prob": 9.570425163474283e-07}, {"id": 235, "seek": 56444, "start": 571.4000000000001, "end": 572.4000000000001, "text": " at MatMul and convolution?", "tokens": [412, 6789, 44, 425, 293, 45216, 30], "temperature": 0.0, "avg_logprob": -0.13532987581629333, "compression_ratio": 1.722397476340694, "no_speech_prob": 9.570425163474283e-07}, {"id": 236, "seek": 56444, "start": 572.4000000000001, "end": 574.0400000000001, "text": " And so you get that hackability", "tokens": [400, 370, 291, 483, 300, 10339, 2310], "temperature": 0.0, "avg_logprob": -0.13532987581629333, "compression_ratio": 1.722397476340694, "no_speech_prob": 9.570425163474283e-07}, {"id": 237, "seek": 56444, "start": 574.0400000000001, "end": 576.2800000000001, "text": " to invent the next great convolution.", "tokens": [281, 7962, 264, 958, 869, 45216, 13], "temperature": 0.0, "avg_logprob": -0.13532987581629333, "compression_ratio": 1.722397476340694, "no_speech_prob": 9.570425163474283e-07}, {"id": 238, "seek": 56444, "start": 576.2800000000001, "end": 580.0400000000001, "text": " So the cool thing about this is that this is a solved problem.", "tokens": [407, 264, 1627, 551, 466, 341, 307, 300, 341, 307, 257, 13041, 1154, 13], "temperature": 0.0, "avg_logprob": -0.13532987581629333, "compression_ratio": 1.722397476340694, "no_speech_prob": 9.570425163474283e-07}, {"id": 239, "seek": 56444, "start": 580.0400000000001, "end": 583.6, "text": " The problem is all the solutions are in these weird systems", "tokens": [440, 1154, 307, 439, 264, 6547, 366, 294, 613, 3657, 3652], "temperature": 0.0, "avg_logprob": -0.13532987581629333, "compression_ratio": 1.722397476340694, "no_speech_prob": 9.570425163474283e-07}, {"id": 240, "seek": 56444, "start": 583.6, "end": 584.44, "text": " that don't talk to each other", "tokens": [300, 500, 380, 751, 281, 1184, 661], "temperature": 0.0, "avg_logprob": -0.13532987581629333, "compression_ratio": 1.722397476340694, "no_speech_prob": 9.570425163474283e-07}, {"id": 241, "seek": 56444, "start": 584.44, "end": 585.5200000000001, "text": " and they don't work well together", "tokens": [293, 436, 500, 380, 589, 731, 1214], "temperature": 0.0, "avg_logprob": -0.13532987581629333, "compression_ratio": 1.722397476340694, "no_speech_prob": 9.570425163474283e-07}, {"id": 242, "seek": 56444, "start": 585.5200000000001, "end": 587.2, "text": " and they're solving different slices of it.", "tokens": [293, 436, 434, 12606, 819, 19793, 295, 309, 13], "temperature": 0.0, "avg_logprob": -0.13532987581629333, "compression_ratio": 1.722397476340694, "no_speech_prob": 9.570425163474283e-07}, {"id": 243, "seek": 56444, "start": 587.2, "end": 589.8000000000001, "text": " So Halide, for example, is a really awesome system", "tokens": [407, 13896, 482, 11, 337, 1365, 11, 307, 257, 534, 3476, 1185], "temperature": 0.0, "avg_logprob": -0.13532987581629333, "compression_ratio": 1.722397476340694, "no_speech_prob": 9.570425163474283e-07}, {"id": 244, "seek": 56444, "start": 589.8000000000001, "end": 593.08, "text": " if you're looking for 2D image processing algorithms.", "tokens": [498, 291, 434, 1237, 337, 568, 35, 3256, 9007, 14642, 13], "temperature": 0.0, "avg_logprob": -0.13532987581629333, "compression_ratio": 1.722397476340694, "no_speech_prob": 9.570425163474283e-07}, {"id": 245, "seek": 59308, "start": 593.08, "end": 594.8000000000001, "text": " That doesn't really help us.", "tokens": [663, 1177, 380, 534, 854, 505, 13], "temperature": 0.0, "avg_logprob": -0.08529519745797821, "compression_ratio": 1.712707182320442, "no_speech_prob": 5.6814296840457246e-06}, {"id": 246, "seek": 59308, "start": 594.8000000000001, "end": 596.5200000000001, "text": " Other people have built systems on top of Halide", "tokens": [5358, 561, 362, 3094, 3652, 322, 1192, 295, 13896, 482], "temperature": 0.0, "avg_logprob": -0.08529519745797821, "compression_ratio": 1.712707182320442, "no_speech_prob": 5.6814296840457246e-06}, {"id": 247, "seek": 59308, "start": 596.5200000000001, "end": 598.44, "text": " to try to adapt it and things like that.", "tokens": [281, 853, 281, 6231, 309, 293, 721, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.08529519745797821, "compression_ratio": 1.712707182320442, "no_speech_prob": 5.6814296840457246e-06}, {"id": 248, "seek": 59308, "start": 598.44, "end": 601.88, "text": " But this is really not a perfect solution.", "tokens": [583, 341, 307, 534, 406, 257, 2176, 3827, 13], "temperature": 0.0, "avg_logprob": -0.08529519745797821, "compression_ratio": 1.712707182320442, "no_speech_prob": 5.6814296840457246e-06}, {"id": 249, "seek": 59308, "start": 601.88, "end": 602.9200000000001, "text": " There's other solutions.", "tokens": [821, 311, 661, 6547, 13], "temperature": 0.0, "avg_logprob": -0.08529519745797821, "compression_ratio": 1.712707182320442, "no_speech_prob": 5.6814296840457246e-06}, {"id": 250, "seek": 59308, "start": 602.9200000000001, "end": 605.6, "text": " So PlatML was recently acquired by Intel", "tokens": [407, 17461, 12683, 390, 3938, 17554, 538, 19762], "temperature": 0.0, "avg_logprob": -0.08529519745797821, "compression_ratio": 1.712707182320442, "no_speech_prob": 5.6814296840457246e-06}, {"id": 251, "seek": 59308, "start": 605.6, "end": 607.48, "text": " and they have a lot of really cool compiler technology", "tokens": [293, 436, 362, 257, 688, 295, 534, 1627, 31958, 2899], "temperature": 0.0, "avg_logprob": -0.08529519745797821, "compression_ratio": 1.712707182320442, "no_speech_prob": 5.6814296840457246e-06}, {"id": 252, "seek": 59308, "start": 607.48, "end": 609.44, "text": " that is kind of in their little space.", "tokens": [300, 307, 733, 295, 294, 641, 707, 1901, 13], "temperature": 0.0, "avg_logprob": -0.08529519745797821, "compression_ratio": 1.712707182320442, "no_speech_prob": 5.6814296840457246e-06}, {"id": 253, "seek": 59308, "start": 609.44, "end": 611.64, "text": " TVM is a really exciting project,", "tokens": [3558, 44, 307, 257, 534, 4670, 1716, 11], "temperature": 0.0, "avg_logprob": -0.08529519745797821, "compression_ratio": 1.712707182320442, "no_speech_prob": 5.6814296840457246e-06}, {"id": 254, "seek": 59308, "start": 611.64, "end": 612.76, "text": " also building on Halide,", "tokens": [611, 2390, 322, 13896, 482, 11], "temperature": 0.0, "avg_logprob": -0.08529519745797821, "compression_ratio": 1.712707182320442, "no_speech_prob": 5.6814296840457246e-06}, {"id": 255, "seek": 59308, "start": 612.76, "end": 614.5600000000001, "text": " pulling together with its own secret sauce", "tokens": [8407, 1214, 365, 1080, 1065, 4054, 4880], "temperature": 0.0, "avg_logprob": -0.08529519745797821, "compression_ratio": 1.712707182320442, "no_speech_prob": 5.6814296840457246e-06}, {"id": 256, "seek": 59308, "start": 614.5600000000001, "end": 615.38, "text": " of different things.", "tokens": [295, 819, 721, 13], "temperature": 0.0, "avg_logprob": -0.08529519745797821, "compression_ratio": 1.712707182320442, "no_speech_prob": 5.6814296840457246e-06}, {"id": 257, "seek": 59308, "start": 615.38, "end": 616.96, "text": " And it's not just the compiler technology,", "tokens": [400, 309, 311, 406, 445, 264, 31958, 2899, 11], "temperature": 0.0, "avg_logprob": -0.08529519745797821, "compression_ratio": 1.712707182320442, "no_speech_prob": 5.6814296840457246e-06}, {"id": 258, "seek": 59308, "start": 616.96, "end": 618.26, "text": " it's also in each of these cases,", "tokens": [309, 311, 611, 294, 1184, 295, 613, 3331, 11], "temperature": 0.0, "avg_logprob": -0.08529519745797821, "compression_ratio": 1.712707182320442, "no_speech_prob": 5.6814296840457246e-06}, {"id": 259, "seek": 59308, "start": 618.26, "end": 620.26, "text": " they've built some kind of domain specific language", "tokens": [436, 600, 3094, 512, 733, 295, 9274, 2685, 2856], "temperature": 0.0, "avg_logprob": -0.08529519745797821, "compression_ratio": 1.712707182320442, "no_speech_prob": 5.6814296840457246e-06}, {"id": 260, "seek": 59308, "start": 620.26, "end": 622.24, "text": " to make it easier for you, the data scientist,", "tokens": [281, 652, 309, 3571, 337, 291, 11, 264, 1412, 12662, 11], "temperature": 0.0, "avg_logprob": -0.08529519745797821, "compression_ratio": 1.712707182320442, "no_speech_prob": 5.6814296840457246e-06}, {"id": 261, "seek": 62224, "start": 622.24, "end": 625.64, "text": " to write what you want in a quick and easy way.", "tokens": [281, 2464, 437, 291, 528, 294, 257, 1702, 293, 1858, 636, 13], "temperature": 0.0, "avg_logprob": -0.14545482659489853, "compression_ratio": 1.7484076433121019, "no_speech_prob": 2.627152753120754e-05}, {"id": 262, "seek": 62224, "start": 625.64, "end": 626.48, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.14545482659489853, "compression_ratio": 1.7484076433121019, "no_speech_prob": 2.627152753120754e-05}, {"id": 263, "seek": 62224, "start": 626.48, "end": 629.0, "text": " And so, and often, and what happens here", "tokens": [400, 370, 11, 293, 2049, 11, 293, 437, 2314, 510], "temperature": 0.0, "avg_logprob": -0.14545482659489853, "compression_ratio": 1.7484076433121019, "no_speech_prob": 2.627152753120754e-05}, {"id": 264, "seek": 62224, "start": 629.0, "end": 631.28, "text": " is that each of these plug into the deep learning frameworks", "tokens": [307, 300, 1184, 295, 613, 5452, 666, 264, 2452, 2539, 29834], "temperature": 0.0, "avg_logprob": -0.14545482659489853, "compression_ratio": 1.7484076433121019, "no_speech_prob": 2.627152753120754e-05}, {"id": 265, "seek": 62224, "start": 631.28, "end": 632.66, "text": " in different ways.", "tokens": [294, 819, 2098, 13], "temperature": 0.0, "avg_logprob": -0.14545482659489853, "compression_ratio": 1.7484076433121019, "no_speech_prob": 2.627152753120754e-05}, {"id": 266, "seek": 62224, "start": 632.66, "end": 633.92, "text": " Right, and so what you end up having to do", "tokens": [1779, 11, 293, 370, 437, 291, 917, 493, 1419, 281, 360], "temperature": 0.0, "avg_logprob": -0.14545482659489853, "compression_ratio": 1.7484076433121019, "no_speech_prob": 2.627152753120754e-05}, {"id": 267, "seek": 62224, "start": 633.92, "end": 636.24, "text": " is you end up in a mode of saying,", "tokens": [307, 291, 917, 493, 294, 257, 4391, 295, 1566, 11], "temperature": 0.0, "avg_logprob": -0.14545482659489853, "compression_ratio": 1.7484076433121019, "no_speech_prob": 2.627152753120754e-05}, {"id": 268, "seek": 62224, "start": 636.24, "end": 638.04, "text": " TVM's really good for this set of stuff", "tokens": [3558, 44, 311, 534, 665, 337, 341, 992, 295, 1507], "temperature": 0.0, "avg_logprob": -0.14545482659489853, "compression_ratio": 1.7484076433121019, "no_speech_prob": 2.627152753120754e-05}, {"id": 269, "seek": 62224, "start": 638.04, "end": 639.72, "text": " and Tensor Comprehensions,", "tokens": [293, 34306, 2432, 40128, 8302, 11], "temperature": 0.0, "avg_logprob": -0.14545482659489853, "compression_ratio": 1.7484076433121019, "no_speech_prob": 2.627152753120754e-05}, {"id": 270, "seek": 62224, "start": 639.72, "end": 642.08, "text": " which is another cool research project,", "tokens": [597, 307, 1071, 1627, 2132, 1716, 11], "temperature": 0.0, "avg_logprob": -0.14545482659489853, "compression_ratio": 1.7484076433121019, "no_speech_prob": 2.627152753120754e-05}, {"id": 271, "seek": 62224, "start": 642.08, "end": 643.44, "text": " is good at these kinds of things.", "tokens": [307, 665, 412, 613, 3685, 295, 721, 13], "temperature": 0.0, "avg_logprob": -0.14545482659489853, "compression_ratio": 1.7484076433121019, "no_speech_prob": 2.627152753120754e-05}, {"id": 272, "seek": 62224, "start": 643.44, "end": 646.8, "text": " And so I have to pick and choose the framework I wanna use", "tokens": [400, 370, 286, 362, 281, 1888, 293, 2826, 264, 8388, 286, 1948, 764], "temperature": 0.0, "avg_logprob": -0.14545482659489853, "compression_ratio": 1.7484076433121019, "no_speech_prob": 2.627152753120754e-05}, {"id": 273, "seek": 62224, "start": 646.8, "end": 648.64, "text": " based on which one they happen to build into,", "tokens": [2361, 322, 597, 472, 436, 1051, 281, 1322, 666, 11], "temperature": 0.0, "avg_logprob": -0.14545482659489853, "compression_ratio": 1.7484076433121019, "no_speech_prob": 2.627152753120754e-05}, {"id": 274, "seek": 62224, "start": 648.64, "end": 649.84, "text": " which is not very-", "tokens": [597, 307, 406, 588, 12], "temperature": 0.0, "avg_logprob": -0.14545482659489853, "compression_ratio": 1.7484076433121019, "no_speech_prob": 2.627152753120754e-05}, {"id": 275, "seek": 62224, "start": 649.84, "end": 651.04, "text": " And again, we don't teach this", "tokens": [400, 797, 11, 321, 500, 380, 2924, 341], "temperature": 0.0, "avg_logprob": -0.14545482659489853, "compression_ratio": 1.7484076433121019, "no_speech_prob": 2.627152753120754e-05}, {"id": 276, "seek": 65104, "start": 651.04, "end": 652.3199999999999, "text": " in practical deep learning for coders", "tokens": [294, 8496, 2452, 2539, 337, 17656, 433], "temperature": 0.0, "avg_logprob": -0.1449954346840426, "compression_ratio": 1.777456647398844, "no_speech_prob": 1.9831755707855336e-05}, {"id": 277, "seek": 65104, "start": 652.3199999999999, "end": 653.4, "text": " because it's not practical yet.", "tokens": [570, 309, 311, 406, 8496, 1939, 13], "temperature": 0.0, "avg_logprob": -0.1449954346840426, "compression_ratio": 1.777456647398844, "no_speech_prob": 1.9831755707855336e-05}, {"id": 278, "seek": 65104, "start": 653.4, "end": 654.24, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.1449954346840426, "compression_ratio": 1.777456647398844, "no_speech_prob": 1.9831755707855336e-05}, {"id": 279, "seek": 65104, "start": 654.24, "end": 655.88, "text": " These things are generally research quality code,", "tokens": [1981, 721, 366, 5101, 2132, 3125, 3089, 11], "temperature": 0.0, "avg_logprob": -0.1449954346840426, "compression_ratio": 1.777456647398844, "no_speech_prob": 1.9831755707855336e-05}, {"id": 280, "seek": 65104, "start": 655.88, "end": 658.8399999999999, "text": " they generally don't integrate with things like PyTorch,", "tokens": [436, 5101, 500, 380, 13365, 365, 721, 411, 9953, 51, 284, 339, 11], "temperature": 0.0, "avg_logprob": -0.1449954346840426, "compression_ratio": 1.777456647398844, "no_speech_prob": 1.9831755707855336e-05}, {"id": 281, "seek": 65104, "start": 658.8399999999999, "end": 661.4399999999999, "text": " they generally require lots of complex build steps.", "tokens": [436, 5101, 3651, 3195, 295, 3997, 1322, 4439, 13], "temperature": 0.0, "avg_logprob": -0.1449954346840426, "compression_ratio": 1.777456647398844, "no_speech_prob": 1.9831755707855336e-05}, {"id": 282, "seek": 65104, "start": 661.4399999999999, "end": 663.24, "text": " The compile time is often really slow,", "tokens": [440, 31413, 565, 307, 2049, 534, 2964, 11], "temperature": 0.0, "avg_logprob": -0.1449954346840426, "compression_ratio": 1.777456647398844, "no_speech_prob": 1.9831755707855336e-05}, {"id": 283, "seek": 65104, "start": 663.24, "end": 666.4, "text": " they work really great on the algorithm on the paper,", "tokens": [436, 589, 534, 869, 322, 264, 9284, 322, 264, 3035, 11], "temperature": 0.0, "avg_logprob": -0.1449954346840426, "compression_ratio": 1.777456647398844, "no_speech_prob": 1.9831755707855336e-05}, {"id": 284, "seek": 65104, "start": 666.4, "end": 668.0999999999999, "text": " but they kind of fall apart on things that aren't,", "tokens": [457, 436, 733, 295, 2100, 4936, 322, 721, 300, 3212, 380, 11], "temperature": 0.0, "avg_logprob": -0.1449954346840426, "compression_ratio": 1.777456647398844, "no_speech_prob": 1.9831755707855336e-05}, {"id": 285, "seek": 65104, "start": 668.0999999999999, "end": 669.4399999999999, "text": " all those kinds of problems.", "tokens": [439, 729, 3685, 295, 2740, 13], "temperature": 0.0, "avg_logprob": -0.1449954346840426, "compression_ratio": 1.777456647398844, "no_speech_prob": 1.9831755707855336e-05}, {"id": 286, "seek": 65104, "start": 669.4399999999999, "end": 672.52, "text": " So our goal and our vision here with TensorFlow,", "tokens": [407, 527, 3387, 293, 527, 5201, 510, 365, 37624, 11], "temperature": 0.0, "avg_logprob": -0.1449954346840426, "compression_ratio": 1.777456647398844, "no_speech_prob": 1.9831755707855336e-05}, {"id": 287, "seek": 65104, "start": 672.52, "end": 674.0, "text": " but with Swiffer TensorFlow also,", "tokens": [457, 365, 3926, 12612, 37624, 611, 11], "temperature": 0.0, "avg_logprob": -0.1449954346840426, "compression_ratio": 1.777456647398844, "no_speech_prob": 1.9831755707855336e-05}, {"id": 288, "seek": 65104, "start": 674.0, "end": 676.3199999999999, "text": " is to make it so that you can express things", "tokens": [307, 281, 652, 309, 370, 300, 291, 393, 5109, 721], "temperature": 0.0, "avg_logprob": -0.1449954346840426, "compression_ratio": 1.777456647398844, "no_speech_prob": 1.9831755707855336e-05}, {"id": 289, "seek": 65104, "start": 676.3199999999999, "end": 678.04, "text": " at the highest level of abstraction you can.", "tokens": [412, 264, 6343, 1496, 295, 37765, 291, 393, 13], "temperature": 0.0, "avg_logprob": -0.1449954346840426, "compression_ratio": 1.777456647398844, "no_speech_prob": 1.9831755707855336e-05}, {"id": 290, "seek": 65104, "start": 678.04, "end": 680.4, "text": " So if you have a Batch Norm layer,", "tokens": [407, 498, 291, 362, 257, 363, 852, 8702, 4583, 11], "temperature": 0.0, "avg_logprob": -0.1449954346840426, "compression_ratio": 1.777456647398844, "no_speech_prob": 1.9831755707855336e-05}, {"id": 291, "seek": 68040, "start": 680.4, "end": 682.4, "text": " totally go for that Batch Norm layer if that's what you want,", "tokens": [3879, 352, 337, 300, 363, 852, 8702, 4583, 498, 300, 311, 437, 291, 528, 11], "temperature": 0.0, "avg_logprob": -0.15939283919060368, "compression_ratio": 1.8902439024390243, "no_speech_prob": 1.7501888578408398e-05}, {"id": 292, "seek": 68040, "start": 682.4, "end": 683.62, "text": " use it and you're good.", "tokens": [764, 309, 293, 291, 434, 665, 13], "temperature": 0.0, "avg_logprob": -0.15939283919060368, "compression_ratio": 1.8902439024390243, "no_speech_prob": 1.7501888578408398e-05}, {"id": 293, "seek": 68040, "start": 683.62, "end": 685.64, "text": " If you wanna implement your own running Batch Norm,", "tokens": [759, 291, 1948, 4445, 428, 1065, 2614, 363, 852, 8702, 11], "temperature": 0.0, "avg_logprob": -0.15939283919060368, "compression_ratio": 1.8902439024390243, "no_speech_prob": 1.7501888578408398e-05}, {"id": 294, "seek": 68040, "start": 685.64, "end": 688.64, "text": " you can do that in terms of matmulz and ads", "tokens": [291, 393, 360, 300, 294, 2115, 295, 3803, 76, 425, 89, 293, 10342], "temperature": 0.0, "avg_logprob": -0.15939283919060368, "compression_ratio": 1.8902439024390243, "no_speech_prob": 1.7501888578408398e-05}, {"id": 295, "seek": 68040, "start": 688.64, "end": 690.1999999999999, "text": " and things like that, fine.", "tokens": [293, 721, 411, 300, 11, 2489, 13], "temperature": 0.0, "avg_logprob": -0.15939283919060368, "compression_ratio": 1.8902439024390243, "no_speech_prob": 1.7501888578408398e-05}, {"id": 296, "seek": 68040, "start": 690.1999999999999, "end": 691.76, "text": " If you wanna sink down further,", "tokens": [759, 291, 1948, 9500, 760, 3052, 11], "temperature": 0.0, "avg_logprob": -0.15939283919060368, "compression_ratio": 1.8902439024390243, "no_speech_prob": 1.7501888578408398e-05}, {"id": 297, "seek": 68040, "start": 691.76, "end": 694.24, "text": " you can go down to one of these systems.", "tokens": [291, 393, 352, 760, 281, 472, 295, 613, 3652, 13], "temperature": 0.0, "avg_logprob": -0.15939283919060368, "compression_ratio": 1.8902439024390243, "no_speech_prob": 1.7501888578408398e-05}, {"id": 298, "seek": 68040, "start": 694.24, "end": 695.16, "text": " If you wanna go down farther,", "tokens": [759, 291, 1948, 352, 760, 20344, 11], "temperature": 0.0, "avg_logprob": -0.15939283919060368, "compression_ratio": 1.8902439024390243, "no_speech_prob": 1.7501888578408398e-05}, {"id": 299, "seek": 68040, "start": 695.16, "end": 697.14, "text": " you can write assembly code for your accelerator", "tokens": [291, 393, 2464, 12103, 3089, 337, 428, 39889], "temperature": 0.0, "avg_logprob": -0.15939283919060368, "compression_ratio": 1.8902439024390243, "no_speech_prob": 1.7501888578408398e-05}, {"id": 300, "seek": 68040, "start": 697.14, "end": 698.8, "text": " if that's the thing you're into.", "tokens": [498, 300, 311, 264, 551, 291, 434, 666, 13], "temperature": 0.0, "avg_logprob": -0.15939283919060368, "compression_ratio": 1.8902439024390243, "no_speech_prob": 1.7501888578408398e-05}, {"id": 301, "seek": 68040, "start": 698.8, "end": 700.36, "text": " But you should be able to get all the way down", "tokens": [583, 291, 820, 312, 1075, 281, 483, 439, 264, 636, 760], "temperature": 0.0, "avg_logprob": -0.15939283919060368, "compression_ratio": 1.8902439024390243, "no_speech_prob": 1.7501888578408398e-05}, {"id": 302, "seek": 68040, "start": 700.36, "end": 702.12, "text": " and pick that level of abstraction", "tokens": [293, 1888, 300, 1496, 295, 37765], "temperature": 0.0, "avg_logprob": -0.15939283919060368, "compression_ratio": 1.8902439024390243, "no_speech_prob": 1.7501888578408398e-05}, {"id": 303, "seek": 68040, "start": 702.12, "end": 704.12, "text": " that allows you to do what you wanna do.", "tokens": [300, 4045, 291, 281, 360, 437, 291, 1948, 360, 13], "temperature": 0.0, "avg_logprob": -0.15939283919060368, "compression_ratio": 1.8902439024390243, "no_speech_prob": 1.7501888578408398e-05}, {"id": 304, "seek": 68040, "start": 704.12, "end": 706.0, "text": " And so I just wanna give TensorFlow comprehension,", "tokens": [400, 370, 286, 445, 1948, 976, 37624, 44991, 11], "temperature": 0.0, "avg_logprob": -0.15939283919060368, "compression_ratio": 1.8902439024390243, "no_speech_prob": 1.7501888578408398e-05}, {"id": 305, "seek": 68040, "start": 706.0, "end": 709.64, "text": " this is one random example of how cool this can be.", "tokens": [341, 307, 472, 4974, 1365, 295, 577, 1627, 341, 393, 312, 13], "temperature": 0.0, "avg_logprob": -0.15939283919060368, "compression_ratio": 1.8902439024390243, "no_speech_prob": 1.7501888578408398e-05}, {"id": 306, "seek": 70964, "start": 709.64, "end": 711.74, "text": " So this is taken straight out of their paper,", "tokens": [407, 341, 307, 2726, 2997, 484, 295, 641, 3035, 11], "temperature": 0.0, "avg_logprob": -0.19388785362243652, "compression_ratio": 1.6941176470588235, "no_speech_prob": 1.0187816315010423e-06}, {"id": 307, "seek": 70964, "start": 711.74, "end": 713.1, "text": " this is not integrated,", "tokens": [341, 307, 406, 10919, 11], "temperature": 0.0, "avg_logprob": -0.19388785362243652, "compression_ratio": 1.6941176470588235, "no_speech_prob": 1.0187816315010423e-06}, {"id": 308, "seek": 70964, "start": 713.1, "end": 714.76, "text": " but TensorFlow Comprehensions gives you", "tokens": [457, 37624, 2432, 40128, 8302, 2709, 291], "temperature": 0.0, "avg_logprob": -0.19388785362243652, "compression_ratio": 1.6941176470588235, "no_speech_prob": 1.0187816315010423e-06}, {"id": 309, "seek": 70964, "start": 714.76, "end": 718.08, "text": " what is basically like Einstein notation on total steroids,", "tokens": [437, 307, 1936, 411, 23486, 24657, 322, 3217, 45717, 11], "temperature": 0.0, "avg_logprob": -0.19388785362243652, "compression_ratio": 1.6941176470588235, "no_speech_prob": 1.0187816315010423e-06}, {"id": 310, "seek": 70964, "start": 718.08, "end": 719.3199999999999, "text": " it's like,", "tokens": [309, 311, 411, 11], "temperature": 0.0, "avg_logprob": -0.19388785362243652, "compression_ratio": 1.6941176470588235, "no_speech_prob": 1.0187816315010423e-06}, {"id": 311, "seek": 70964, "start": 719.3199999999999, "end": 720.84, "text": " Einstein,", "tokens": [23486, 11], "temperature": 0.0, "avg_logprob": -0.19388785362243652, "compression_ratio": 1.6941176470588235, "no_speech_prob": 1.0187816315010423e-06}, {"id": 312, "seek": 70964, "start": 720.84, "end": 721.72, "text": " yes, good point.", "tokens": [2086, 11, 665, 935, 13], "temperature": 0.0, "avg_logprob": -0.19388785362243652, "compression_ratio": 1.6941176470588235, "no_speech_prob": 1.0187816315010423e-06}, {"id": 313, "seek": 70964, "start": 721.72, "end": 722.84, "text": " It's like Einstein,", "tokens": [467, 311, 411, 23486, 11], "temperature": 0.0, "avg_logprob": -0.19388785362243652, "compression_ratio": 1.6941176470588235, "no_speech_prob": 1.0187816315010423e-06}, {"id": 314, "seek": 70964, "start": 724.12, "end": 727.08, "text": " but taken to a crazy extreme level.", "tokens": [457, 2726, 281, 257, 3219, 8084, 1496, 13], "temperature": 0.0, "avg_logprob": -0.19388785362243652, "compression_ratio": 1.6941176470588235, "no_speech_prob": 1.0187816315010423e-06}, {"id": 315, "seek": 70964, "start": 727.08, "end": 729.16, "text": " And what TensorFlow Comprehensions is doing", "tokens": [400, 437, 37624, 2432, 40128, 8302, 307, 884], "temperature": 0.0, "avg_logprob": -0.19388785362243652, "compression_ratio": 1.6941176470588235, "no_speech_prob": 1.0187816315010423e-06}, {"id": 316, "seek": 70964, "start": 729.16, "end": 732.9, "text": " is you write this very simple code,", "tokens": [307, 291, 2464, 341, 588, 2199, 3089, 11], "temperature": 0.0, "avg_logprob": -0.19388785362243652, "compression_ratio": 1.6941176470588235, "no_speech_prob": 1.0187816315010423e-06}, {"id": 317, "seek": 70964, "start": 732.9, "end": 735.72, "text": " it's admittedly kind of weird and it has magic", "tokens": [309, 311, 14920, 356, 733, 295, 3657, 293, 309, 575, 5585], "temperature": 0.0, "avg_logprob": -0.19388785362243652, "compression_ratio": 1.6941176470588235, "no_speech_prob": 1.0187816315010423e-06}, {"id": 318, "seek": 70964, "start": 735.72, "end": 737.92, "text": " and the syntax isn't the important thing,", "tokens": [293, 264, 28431, 1943, 380, 264, 1021, 551, 11], "temperature": 0.0, "avg_logprob": -0.19388785362243652, "compression_ratio": 1.6941176470588235, "no_speech_prob": 1.0187816315010423e-06}, {"id": 319, "seek": 73792, "start": 737.92, "end": 740.1999999999999, "text": " but you write pretty simple code", "tokens": [457, 291, 2464, 1238, 2199, 3089], "temperature": 0.0, "avg_logprob": -0.0927285622424028, "compression_ratio": 1.7789855072463767, "no_speech_prob": 9.515815690974705e-06}, {"id": 320, "seek": 73792, "start": 740.1999999999999, "end": 742.9599999999999, "text": " and then it does all this really hardcore compiler stuff.", "tokens": [293, 550, 309, 775, 439, 341, 534, 28196, 31958, 1507, 13], "temperature": 0.0, "avg_logprob": -0.0927285622424028, "compression_ratio": 1.7789855072463767, "no_speech_prob": 9.515815690974705e-06}, {"id": 321, "seek": 73792, "start": 742.9599999999999, "end": 745.0, "text": " So it starts out with your code,", "tokens": [407, 309, 3719, 484, 365, 428, 3089, 11], "temperature": 0.0, "avg_logprob": -0.0927285622424028, "compression_ratio": 1.7789855072463767, "no_speech_prob": 9.515815690974705e-06}, {"id": 322, "seek": 73792, "start": 745.0, "end": 746.52, "text": " it then fuses the different loops", "tokens": [309, 550, 283, 8355, 264, 819, 16121], "temperature": 0.0, "avg_logprob": -0.0927285622424028, "compression_ratio": 1.7789855072463767, "no_speech_prob": 9.515815690974705e-06}, {"id": 323, "seek": 73792, "start": 746.52, "end": 748.4799999999999, "text": " because these two things expand out to loops,", "tokens": [570, 613, 732, 721, 5268, 484, 281, 16121, 11], "temperature": 0.0, "avg_logprob": -0.0927285622424028, "compression_ratio": 1.7789855072463767, "no_speech_prob": 9.515815690974705e-06}, {"id": 324, "seek": 73792, "start": 748.4799999999999, "end": 751.8399999999999, "text": " it does inference on what are the ranges for all the loops", "tokens": [309, 775, 38253, 322, 437, 366, 264, 22526, 337, 439, 264, 16121], "temperature": 0.0, "avg_logprob": -0.0927285622424028, "compression_ratio": 1.7789855072463767, "no_speech_prob": 9.515815690974705e-06}, {"id": 325, "seek": 73792, "start": 751.8399999999999, "end": 753.5999999999999, "text": " and what the variables that you're indexing", "tokens": [293, 437, 264, 9102, 300, 291, 434, 8186, 278], "temperature": 0.0, "avg_logprob": -0.0927285622424028, "compression_ratio": 1.7789855072463767, "no_speech_prob": 9.515815690974705e-06}, {"id": 326, "seek": 73792, "start": 753.5999999999999, "end": 755.24, "text": " into the arrays do,", "tokens": [666, 264, 41011, 360, 11], "temperature": 0.0, "avg_logprob": -0.0927285622424028, "compression_ratio": 1.7789855072463767, "no_speech_prob": 9.515815690974705e-06}, {"id": 327, "seek": 73792, "start": 755.24, "end": 756.68, "text": " then fuse and tile these things,", "tokens": [550, 31328, 293, 20590, 613, 721, 11], "temperature": 0.0, "avg_logprob": -0.0927285622424028, "compression_ratio": 1.7789855072463767, "no_speech_prob": 9.515815690974705e-06}, {"id": 328, "seek": 73792, "start": 756.68, "end": 758.64, "text": " fuse, tile, then sync the code", "tokens": [31328, 11, 20590, 11, 550, 20271, 264, 3089], "temperature": 0.0, "avg_logprob": -0.0927285622424028, "compression_ratio": 1.7789855072463767, "no_speech_prob": 9.515815690974705e-06}, {"id": 329, "seek": 73792, "start": 758.64, "end": 762.24, "text": " to make it so the inner loops can be vectorized.", "tokens": [281, 652, 309, 370, 264, 7284, 16121, 393, 312, 8062, 1602, 13], "temperature": 0.0, "avg_logprob": -0.0927285622424028, "compression_ratio": 1.7789855072463767, "no_speech_prob": 9.515815690974705e-06}, {"id": 330, "seek": 73792, "start": 763.3199999999999, "end": 765.56, "text": " This is actually a particularly interesting example", "tokens": [639, 307, 767, 257, 4098, 1880, 1365], "temperature": 0.0, "avg_logprob": -0.0927285622424028, "compression_ratio": 1.7789855072463767, "no_speech_prob": 9.515815690974705e-06}, {"id": 331, "seek": 76556, "start": 765.56, "end": 768.8399999999999, "text": " because this thing here, gem, is a generalized", "tokens": [570, 341, 551, 510, 11, 7173, 11, 307, 257, 44498], "temperature": 0.0, "avg_logprob": -0.1483416005867679, "compression_ratio": 1.8716216216216217, "no_speech_prob": 3.168762123095803e-05}, {"id": 332, "seek": 76556, "start": 768.8399999999999, "end": 770.1999999999999, "text": " matrix matrix product.", "tokens": [8141, 8141, 1674, 13], "temperature": 0.0, "avg_logprob": -0.1483416005867679, "compression_ratio": 1.8716216216216217, "no_speech_prob": 3.168762123095803e-05}, {"id": 333, "seek": 76556, "start": 770.1999999999999, "end": 772.9599999999999, "text": " This is actually like the thing on which", "tokens": [639, 307, 767, 411, 264, 551, 322, 597], "temperature": 0.0, "avg_logprob": -0.1483416005867679, "compression_ratio": 1.8716216216216217, "no_speech_prob": 3.168762123095803e-05}, {"id": 334, "seek": 76556, "start": 772.9599999999999, "end": 775.04, "text": " large amounts of deep learning and linear algebra", "tokens": [2416, 11663, 295, 2452, 2539, 293, 8213, 21989], "temperature": 0.0, "avg_logprob": -0.1483416005867679, "compression_ratio": 1.8716216216216217, "no_speech_prob": 3.168762123095803e-05}, {"id": 335, "seek": 76556, "start": 775.04, "end": 776.0799999999999, "text": " and stuff is based on.", "tokens": [293, 1507, 307, 2361, 322, 13], "temperature": 0.0, "avg_logprob": -0.1483416005867679, "compression_ratio": 1.8716216216216217, "no_speech_prob": 3.168762123095803e-05}, {"id": 336, "seek": 76556, "start": 776.0799999999999, "end": 778.9599999999999, "text": " So like a lot of the stuff we write ends up calling a gem.", "tokens": [407, 411, 257, 688, 295, 264, 1507, 321, 2464, 5314, 493, 5141, 257, 7173, 13], "temperature": 0.0, "avg_logprob": -0.1483416005867679, "compression_ratio": 1.8716216216216217, "no_speech_prob": 3.168762123095803e-05}, {"id": 337, "seek": 76556, "start": 778.9599999999999, "end": 781.06, "text": " And the fact that you can write this thing", "tokens": [400, 264, 1186, 300, 291, 393, 2464, 341, 551], "temperature": 0.0, "avg_logprob": -0.1483416005867679, "compression_ratio": 1.8716216216216217, "no_speech_prob": 3.168762123095803e-05}, {"id": 338, "seek": 76556, "start": 781.06, "end": 782.0799999999999, "text": " in two lines of code,", "tokens": [294, 732, 3876, 295, 3089, 11], "temperature": 0.0, "avg_logprob": -0.1483416005867679, "compression_ratio": 1.8716216216216217, "no_speech_prob": 3.168762123095803e-05}, {"id": 339, "seek": 76556, "start": 782.0799999999999, "end": 786.1199999999999, "text": " if you look inside like most linear algebra libraries,", "tokens": [498, 291, 574, 1854, 411, 881, 8213, 21989, 15148, 11], "temperature": 0.0, "avg_logprob": -0.1483416005867679, "compression_ratio": 1.8716216216216217, "no_speech_prob": 3.168762123095803e-05}, {"id": 340, "seek": 76556, "start": 786.1199999999999, "end": 788.4, "text": " there will be hundreds or thousands of lines of code", "tokens": [456, 486, 312, 6779, 420, 5383, 295, 3876, 295, 3089], "temperature": 0.0, "avg_logprob": -0.1483416005867679, "compression_ratio": 1.8716216216216217, "no_speech_prob": 3.168762123095803e-05}, {"id": 341, "seek": 76556, "start": 788.4, "end": 789.5999999999999, "text": " to implement something like this.", "tokens": [281, 4445, 746, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.1483416005867679, "compression_ratio": 1.8716216216216217, "no_speech_prob": 3.168762123095803e-05}, {"id": 342, "seek": 76556, "start": 789.5999999999999, "end": 793.16, "text": " So the fact that you can do this so concisely is super cool.", "tokens": [407, 264, 1186, 300, 291, 393, 360, 341, 370, 1588, 271, 736, 307, 1687, 1627, 13], "temperature": 0.0, "avg_logprob": -0.1483416005867679, "compression_ratio": 1.8716216216216217, "no_speech_prob": 3.168762123095803e-05}, {"id": 343, "seek": 76556, "start": 793.16, "end": 795.4799999999999, "text": " And so the idea that then we could do like,", "tokens": [400, 370, 264, 1558, 300, 550, 321, 727, 360, 411, 11], "temperature": 0.0, "avg_logprob": -0.1483416005867679, "compression_ratio": 1.8716216216216217, "no_speech_prob": 3.168762123095803e-05}, {"id": 344, "seek": 79548, "start": 795.48, "end": 800.12, "text": " you know, nice little tweaks on convolutions", "tokens": [291, 458, 11, 1481, 707, 46664, 322, 3754, 15892], "temperature": 0.0, "avg_logprob": -0.06417963886988982, "compression_ratio": 1.7708333333333333, "no_speech_prob": 6.048368049960118e-06}, {"id": 345, "seek": 79548, "start": 800.12, "end": 801.64, "text": " or whatever in similar amounts of code", "tokens": [420, 2035, 294, 2531, 11663, 295, 3089], "temperature": 0.0, "avg_logprob": -0.06417963886988982, "compression_ratio": 1.7708333333333333, "no_speech_prob": 6.048368049960118e-06}, {"id": 346, "seek": 79548, "start": 801.64, "end": 803.9200000000001, "text": " is something that I get very excited about.", "tokens": [307, 746, 300, 286, 483, 588, 2919, 466, 13], "temperature": 0.0, "avg_logprob": -0.06417963886988982, "compression_ratio": 1.7708333333333333, "no_speech_prob": 6.048368049960118e-06}, {"id": 347, "seek": 79548, "start": 803.9200000000001, "end": 804.76, "text": " Yeah, me too.", "tokens": [865, 11, 385, 886, 13], "temperature": 0.0, "avg_logprob": -0.06417963886988982, "compression_ratio": 1.7708333333333333, "no_speech_prob": 6.048368049960118e-06}, {"id": 348, "seek": 79548, "start": 804.76, "end": 807.8000000000001, "text": " And the other thing to consider with this is that,", "tokens": [400, 264, 661, 551, 281, 1949, 365, 341, 307, 300, 11], "temperature": 0.0, "avg_logprob": -0.06417963886988982, "compression_ratio": 1.7708333333333333, "no_speech_prob": 6.048368049960118e-06}, {"id": 349, "seek": 79548, "start": 807.8000000000001, "end": 810.26, "text": " again, generating really good code for this is hard.", "tokens": [797, 11, 17746, 534, 665, 3089, 337, 341, 307, 1152, 13], "temperature": 0.0, "avg_logprob": -0.06417963886988982, "compression_ratio": 1.7708333333333333, "no_speech_prob": 6.048368049960118e-06}, {"id": 350, "seek": 79548, "start": 810.26, "end": 813.84, "text": " But once you make it so that you separate out the code", "tokens": [583, 1564, 291, 652, 309, 370, 300, 291, 4994, 484, 264, 3089], "temperature": 0.0, "avg_logprob": -0.06417963886988982, "compression_ratio": 1.7708333333333333, "no_speech_prob": 6.048368049960118e-06}, {"id": 351, "seek": 79548, "start": 813.84, "end": 815.76, "text": " that gets compiled from the algorithms", "tokens": [300, 2170, 36548, 490, 264, 14642], "temperature": 0.0, "avg_logprob": -0.06417963886988982, "compression_ratio": 1.7708333333333333, "no_speech_prob": 6.048368049960118e-06}, {"id": 352, "seek": 79548, "start": 815.76, "end": 816.9200000000001, "text": " that get applied to it,", "tokens": [300, 483, 6456, 281, 309, 11], "temperature": 0.0, "avg_logprob": -0.06417963886988982, "compression_ratio": 1.7708333333333333, "no_speech_prob": 6.048368049960118e-06}, {"id": 353, "seek": 79548, "start": 816.9200000000001, "end": 819.08, "text": " now you can do search over those algorithms.", "tokens": [586, 291, 393, 360, 3164, 670, 729, 14642, 13], "temperature": 0.0, "avg_logprob": -0.06417963886988982, "compression_ratio": 1.7708333333333333, "no_speech_prob": 6.048368049960118e-06}, {"id": 354, "seek": 79548, "start": 819.08, "end": 822.08, "text": " Now you can apply machine learning to the compiler itself.", "tokens": [823, 291, 393, 3079, 3479, 2539, 281, 264, 31958, 2564, 13], "temperature": 0.0, "avg_logprob": -0.06417963886988982, "compression_ratio": 1.7708333333333333, "no_speech_prob": 6.048368049960118e-06}, {"id": 355, "seek": 79548, "start": 822.08, "end": 824.28, "text": " And now you can do some really cool things", "tokens": [400, 586, 291, 393, 360, 512, 534, 1627, 721], "temperature": 0.0, "avg_logprob": -0.06417963886988982, "compression_ratio": 1.7708333333333333, "no_speech_prob": 6.048368049960118e-06}, {"id": 356, "seek": 82428, "start": 824.28, "end": 826.0, "text": " that open up new doors.", "tokens": [300, 1269, 493, 777, 8077, 13], "temperature": 0.0, "avg_logprob": -0.10940048217773438, "compression_ratio": 1.6867088607594938, "no_speech_prob": 1.9522554794093594e-05}, {"id": 357, "seek": 82428, "start": 826.0, "end": 827.68, "text": " So, I mean, that's actually really interesting", "tokens": [407, 11, 286, 914, 11, 300, 311, 767, 534, 1880], "temperature": 0.0, "avg_logprob": -0.10940048217773438, "compression_ratio": 1.6867088607594938, "no_speech_prob": 1.9522554794093594e-05}, {"id": 358, "seek": 82428, "start": 827.68, "end": 830.3399999999999, "text": " because in the world of databases,", "tokens": [570, 294, 264, 1002, 295, 22380, 11], "temperature": 0.0, "avg_logprob": -0.10940048217773438, "compression_ratio": 1.6867088607594938, "no_speech_prob": 1.9522554794093594e-05}, {"id": 359, "seek": 82428, "start": 830.3399999999999, "end": 833.1, "text": " which is a lot more mature than the world of deep learning,", "tokens": [597, 307, 257, 688, 544, 14442, 813, 264, 1002, 295, 2452, 2539, 11], "temperature": 0.0, "avg_logprob": -0.10940048217773438, "compression_ratio": 1.6867088607594938, "no_speech_prob": 1.9522554794093594e-05}, {"id": 360, "seek": 82428, "start": 833.1, "end": 834.1999999999999, "text": " this is how it works, right?", "tokens": [341, 307, 577, 309, 1985, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.10940048217773438, "compression_ratio": 1.6867088607594938, "no_speech_prob": 1.9522554794093594e-05}, {"id": 361, "seek": 82428, "start": 834.1999999999999, "end": 837.1999999999999, "text": " You have a DSL, normally called SQL,", "tokens": [509, 362, 257, 15816, 43, 11, 5646, 1219, 19200, 11], "temperature": 0.0, "avg_logprob": -0.10940048217773438, "compression_ratio": 1.6867088607594938, "no_speech_prob": 1.9522554794093594e-05}, {"id": 362, "seek": 82428, "start": 837.1999999999999, "end": 839.92, "text": " where you express what you want, not how to get there.", "tokens": [689, 291, 5109, 437, 291, 528, 11, 406, 577, 281, 483, 456, 13], "temperature": 0.0, "avg_logprob": -0.10940048217773438, "compression_ratio": 1.6867088607594938, "no_speech_prob": 1.9522554794093594e-05}, {"id": 363, "seek": 82428, "start": 839.92, "end": 842.72, "text": " And then there's a thing called a query analyzer", "tokens": [400, 550, 456, 311, 257, 551, 1219, 257, 14581, 6459, 4527], "temperature": 0.0, "avg_logprob": -0.10940048217773438, "compression_ratio": 1.6867088607594938, "no_speech_prob": 1.9522554794093594e-05}, {"id": 364, "seek": 82428, "start": 842.72, "end": 844.64, "text": " or query compiler or query optimizer", "tokens": [420, 14581, 31958, 420, 14581, 5028, 6545], "temperature": 0.0, "avg_logprob": -0.10940048217773438, "compression_ratio": 1.6867088607594938, "no_speech_prob": 1.9522554794093594e-05}, {"id": 365, "seek": 82428, "start": 844.64, "end": 846.56, "text": " that figures out the best way to get there.", "tokens": [300, 9624, 484, 264, 1151, 636, 281, 483, 456, 13], "temperature": 0.0, "avg_logprob": -0.10940048217773438, "compression_ratio": 1.6867088607594938, "no_speech_prob": 1.9522554794093594e-05}, {"id": 366, "seek": 82428, "start": 846.56, "end": 849.02, "text": " And it'll do crazy stuff like genetic algorithms", "tokens": [400, 309, 603, 360, 3219, 1507, 411, 12462, 14642], "temperature": 0.0, "avg_logprob": -0.10940048217773438, "compression_ratio": 1.6867088607594938, "no_speech_prob": 1.9522554794093594e-05}, {"id": 367, "seek": 82428, "start": 849.02, "end": 850.78, "text": " and all kinds of heuristics.", "tokens": [293, 439, 3685, 295, 415, 374, 6006, 13], "temperature": 0.0, "avg_logprob": -0.10940048217773438, "compression_ratio": 1.6867088607594938, "no_speech_prob": 1.9522554794093594e-05}, {"id": 368, "seek": 82428, "start": 850.78, "end": 854.0, "text": " And so like what we're seeing here is,", "tokens": [400, 370, 411, 437, 321, 434, 2577, 510, 307, 11], "temperature": 0.0, "avg_logprob": -0.10940048217773438, "compression_ratio": 1.6867088607594938, "no_speech_prob": 1.9522554794093594e-05}, {"id": 369, "seek": 85400, "start": 854.0, "end": 857.28, "text": " we'll be able to do that for deep learning.", "tokens": [321, 603, 312, 1075, 281, 360, 300, 337, 2452, 2539, 13], "temperature": 0.0, "avg_logprob": -0.12010077687052938, "compression_ratio": 1.8155339805825244, "no_speech_prob": 2.0142735593253747e-05}, {"id": 370, "seek": 85400, "start": 857.28, "end": 860.44, "text": " You know, our own DSLs and our own optimizers,", "tokens": [509, 458, 11, 527, 1065, 15816, 43, 82, 293, 527, 1065, 5028, 22525, 11], "temperature": 0.0, "avg_logprob": -0.12010077687052938, "compression_ratio": 1.8155339805825244, "no_speech_prob": 2.0142735593253747e-05}, {"id": 371, "seek": 85400, "start": 860.44, "end": 861.8, "text": " not deep learning optimizers,", "tokens": [406, 2452, 2539, 5028, 22525, 11], "temperature": 0.0, "avg_logprob": -0.12010077687052938, "compression_ratio": 1.8155339805825244, "no_speech_prob": 2.0142735593253747e-05}, {"id": 372, "seek": 85400, "start": 861.8, "end": 863.58, "text": " but more like database optimizers.", "tokens": [457, 544, 411, 8149, 5028, 22525, 13], "temperature": 0.0, "avg_logprob": -0.12010077687052938, "compression_ratio": 1.8155339805825244, "no_speech_prob": 2.0142735593253747e-05}, {"id": 373, "seek": 85400, "start": 863.58, "end": 865.0, "text": " Yeah, so it's gonna be really exciting.", "tokens": [865, 11, 370, 309, 311, 799, 312, 534, 4670, 13], "temperature": 0.0, "avg_logprob": -0.12010077687052938, "compression_ratio": 1.8155339805825244, "no_speech_prob": 2.0142735593253747e-05}, {"id": 374, "seek": 85400, "start": 865.0, "end": 866.14, "text": " So we're building all this,", "tokens": [407, 321, 434, 2390, 439, 341, 11], "temperature": 0.0, "avg_logprob": -0.12010077687052938, "compression_ratio": 1.8155339805825244, "no_speech_prob": 2.0142735593253747e-05}, {"id": 375, "seek": 85400, "start": 866.14, "end": 869.08, "text": " the MLR part of this is longer time horizon.", "tokens": [264, 21601, 49, 644, 295, 341, 307, 2854, 565, 18046, 13], "temperature": 0.0, "avg_logprob": -0.12010077687052938, "compression_ratio": 1.8155339805825244, "no_speech_prob": 2.0142735593253747e-05}, {"id": 376, "seek": 85400, "start": 869.08, "end": 871.78, "text": " This is not gonna be done by the time this video comes out.", "tokens": [639, 307, 406, 799, 312, 1096, 538, 264, 565, 341, 960, 1487, 484, 13], "temperature": 0.0, "avg_logprob": -0.12010077687052938, "compression_ratio": 1.8155339805825244, "no_speech_prob": 2.0142735593253747e-05}, {"id": 377, "seek": 85400, "start": 871.78, "end": 873.36, "text": " But this is all stuff that's getting built", "tokens": [583, 341, 307, 439, 1507, 300, 311, 1242, 3094], "temperature": 0.0, "avg_logprob": -0.12010077687052938, "compression_ratio": 1.8155339805825244, "no_speech_prob": 2.0142735593253747e-05}, {"id": 378, "seek": 85400, "start": 873.36, "end": 875.82, "text": " and it's all open source and it's super exciting.", "tokens": [293, 309, 311, 439, 1269, 4009, 293, 309, 311, 1687, 4670, 13], "temperature": 0.0, "avg_logprob": -0.12010077687052938, "compression_ratio": 1.8155339805825244, "no_speech_prob": 2.0142735593253747e-05}, {"id": 379, "seek": 85400, "start": 875.82, "end": 876.96, "text": " So to overall summarize", "tokens": [407, 281, 4787, 20858], "temperature": 0.0, "avg_logprob": -0.12010077687052938, "compression_ratio": 1.8155339805825244, "no_speech_prob": 2.0142735593253747e-05}, {"id": 380, "seek": 85400, "start": 876.96, "end": 878.82, "text": " all this TensorFlow infrastructure stuff.", "tokens": [439, 341, 37624, 6896, 1507, 13], "temperature": 0.0, "avg_logprob": -0.12010077687052938, "compression_ratio": 1.8155339805825244, "no_speech_prob": 2.0142735593253747e-05}, {"id": 381, "seek": 85400, "start": 878.82, "end": 880.64, "text": " So TensorFlow is deeply investing", "tokens": [407, 37624, 307, 8760, 10978], "temperature": 0.0, "avg_logprob": -0.12010077687052938, "compression_ratio": 1.8155339805825244, "no_speech_prob": 2.0142735593253747e-05}, {"id": 382, "seek": 85400, "start": 880.64, "end": 882.12, "text": " in the fundamental parts of the system.", "tokens": [294, 264, 8088, 3166, 295, 264, 1185, 13], "temperature": 0.0, "avg_logprob": -0.12010077687052938, "compression_ratio": 1.8155339805825244, "no_speech_prob": 2.0142735593253747e-05}, {"id": 383, "seek": 88212, "start": 882.12, "end": 884.88, "text": " This includes the compiler stuff, also the runtime,", "tokens": [639, 5974, 264, 31958, 1507, 11, 611, 264, 34474, 11], "temperature": 0.0, "avg_logprob": -0.16013599844539866, "compression_ratio": 1.7323076923076923, "no_speech_prob": 2.2827334760222584e-05}, {"id": 384, "seek": 88212, "start": 884.88, "end": 886.96, "text": " opt dispatch, the kernels themselves.", "tokens": [2427, 36729, 11, 264, 23434, 1625, 2969, 13], "temperature": 0.0, "avg_logprob": -0.16013599844539866, "compression_ratio": 1.7323076923076923, "no_speech_prob": 2.2827334760222584e-05}, {"id": 385, "seek": 88212, "start": 886.96, "end": 888.5, "text": " There's tons and tons and tons of stuff", "tokens": [821, 311, 9131, 293, 9131, 293, 9131, 295, 1507], "temperature": 0.0, "avg_logprob": -0.16013599844539866, "compression_ratio": 1.7323076923076923, "no_speech_prob": 2.2827334760222584e-05}, {"id": 386, "seek": 88212, "start": 888.5, "end": 891.08, "text": " and it's all super exciting.", "tokens": [293, 309, 311, 439, 1687, 4670, 13], "temperature": 0.0, "avg_logprob": -0.16013599844539866, "compression_ratio": 1.7323076923076923, "no_speech_prob": 2.2827334760222584e-05}, {"id": 387, "seek": 88212, "start": 891.08, "end": 893.32, "text": " So let's stop talking about the future.", "tokens": [407, 718, 311, 1590, 1417, 466, 264, 2027, 13], "temperature": 0.0, "avg_logprob": -0.16013599844539866, "compression_ratio": 1.7323076923076923, "no_speech_prob": 2.2827334760222584e-05}, {"id": 388, "seek": 88212, "start": 893.32, "end": 894.68, "text": " Yeah, I mean, that's kind of boring.", "tokens": [865, 11, 286, 914, 11, 300, 311, 733, 295, 9989, 13], "temperature": 0.0, "avg_logprob": -0.16013599844539866, "compression_ratio": 1.7323076923076923, "no_speech_prob": 2.2827334760222584e-05}, {"id": 389, "seek": 88212, "start": 894.68, "end": 895.76, "text": " Like what can we do today?", "tokens": [1743, 437, 393, 321, 360, 965, 30], "temperature": 0.0, "avg_logprob": -0.16013599844539866, "compression_ratio": 1.7323076923076923, "no_speech_prob": 2.2827334760222584e-05}, {"id": 390, "seek": 88212, "start": 895.76, "end": 897.12, "text": " Yeah, this is very exciting Chris,", "tokens": [865, 11, 341, 307, 588, 4670, 6688, 11], "temperature": 0.0, "avg_logprob": -0.16013599844539866, "compression_ratio": 1.7323076923076923, "no_speech_prob": 2.2827334760222584e-05}, {"id": 391, "seek": 88212, "start": 897.12, "end": 898.86, "text": " that sometime in the next year or two,", "tokens": [300, 15053, 294, 264, 958, 1064, 420, 732, 11], "temperature": 0.0, "avg_logprob": -0.16013599844539866, "compression_ratio": 1.7323076923076923, "no_speech_prob": 2.2827334760222584e-05}, {"id": 392, "seek": 88212, "start": 898.86, "end": 900.5, "text": " there'll be these really fast things.", "tokens": [456, 603, 312, 613, 534, 2370, 721, 13], "temperature": 0.0, "avg_logprob": -0.16013599844539866, "compression_ratio": 1.7323076923076923, "no_speech_prob": 2.2827334760222584e-05}, {"id": 393, "seek": 88212, "start": 900.5, "end": 901.34, "text": " But I actually know", "tokens": [583, 286, 767, 458], "temperature": 0.0, "avg_logprob": -0.16013599844539866, "compression_ratio": 1.7323076923076923, "no_speech_prob": 2.2827334760222584e-05}, {"id": 394, "seek": 88212, "start": 901.34, "end": 903.04, "text": " about some really fast languages right now.", "tokens": [466, 512, 534, 2370, 8650, 558, 586, 13], "temperature": 0.0, "avg_logprob": -0.16013599844539866, "compression_ratio": 1.7323076923076923, "no_speech_prob": 2.2827334760222584e-05}, {"id": 395, "seek": 88212, "start": 903.04, "end": 903.88, "text": " Really?", "tokens": [4083, 30], "temperature": 0.0, "avg_logprob": -0.16013599844539866, "compression_ratio": 1.7323076923076923, "no_speech_prob": 2.2827334760222584e-05}, {"id": 396, "seek": 88212, "start": 903.88, "end": 906.88, "text": " Yeah, they're called C, C++ and Swift.", "tokens": [865, 11, 436, 434, 1219, 383, 11, 383, 25472, 293, 25539, 13], "temperature": 0.0, "avg_logprob": -0.16013599844539866, "compression_ratio": 1.7323076923076923, "no_speech_prob": 2.2827334760222584e-05}, {"id": 397, "seek": 88212, "start": 906.88, "end": 907.72, "text": " Oh.", "tokens": [876, 13], "temperature": 0.0, "avg_logprob": -0.16013599844539866, "compression_ratio": 1.7323076923076923, "no_speech_prob": 2.2827334760222584e-05}, {"id": 398, "seek": 88212, "start": 907.72, "end": 908.8, "text": " Yeah, let me show you what I mean.", "tokens": [865, 11, 718, 385, 855, 291, 437, 286, 914, 13], "temperature": 0.0, "avg_logprob": -0.16013599844539866, "compression_ratio": 1.7323076923076923, "no_speech_prob": 2.2827334760222584e-05}, {"id": 399, "seek": 88212, "start": 908.8, "end": 909.64, "text": " Oh, okay.", "tokens": [876, 11, 1392, 13], "temperature": 0.0, "avg_logprob": -0.16013599844539866, "compression_ratio": 1.7323076923076923, "no_speech_prob": 2.2827334760222584e-05}, {"id": 400, "seek": 88212, "start": 909.64, "end": 910.48, "text": " These are actually languages", "tokens": [1981, 366, 767, 8650], "temperature": 0.0, "avg_logprob": -0.16013599844539866, "compression_ratio": 1.7323076923076923, "no_speech_prob": 2.2827334760222584e-05}, {"id": 401, "seek": 91048, "start": 910.48, "end": 913.4, "text": " that we can make run really fast right now.", "tokens": [300, 321, 393, 652, 1190, 534, 2370, 558, 586, 13], "temperature": 0.0, "avg_logprob": -0.2023755620034893, "compression_ratio": 1.575609756097561, "no_speech_prob": 2.4824139472912066e-06}, {"id": 402, "seek": 91048, "start": 914.8000000000001, "end": 919.8000000000001, "text": " And it's quite amazing actually", "tokens": [400, 309, 311, 1596, 2243, 767], "temperature": 0.0, "avg_logprob": -0.2023755620034893, "compression_ratio": 1.575609756097561, "no_speech_prob": 2.4824139472912066e-06}, {"id": 403, "seek": 91048, "start": 919.8000000000001, "end": 922.72, "text": " how easy we can make this.", "tokens": [577, 1858, 321, 393, 652, 341, 13], "temperature": 0.0, "avg_logprob": -0.2023755620034893, "compression_ratio": 1.575609756097561, "no_speech_prob": 2.4824139472912066e-06}, {"id": 404, "seek": 91048, "start": 922.72, "end": 926.0, "text": " Like when you say to an average data scientist,", "tokens": [1743, 562, 291, 584, 281, 364, 4274, 1412, 12662, 11], "temperature": 0.0, "avg_logprob": -0.2023755620034893, "compression_ratio": 1.575609756097561, "no_speech_prob": 2.4824139472912066e-06}, {"id": 405, "seek": 91048, "start": 926.0, "end": 928.8000000000001, "text": " hey, you can now integrate C libraries,", "tokens": [4177, 11, 291, 393, 586, 13365, 383, 15148, 11], "temperature": 0.0, "avg_logprob": -0.2023755620034893, "compression_ratio": 1.575609756097561, "no_speech_prob": 2.4824139472912066e-06}, {"id": 406, "seek": 91048, "start": 928.8000000000001, "end": 931.82, "text": " the response is not likely to be, oh, awesome, right?", "tokens": [264, 4134, 307, 406, 3700, 281, 312, 11, 1954, 11, 3476, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.2023755620034893, "compression_ratio": 1.575609756097561, "no_speech_prob": 2.4824139472912066e-06}, {"id": 407, "seek": 91048, "start": 931.82, "end": 934.6, "text": " Because like data scientists don't generally work", "tokens": [1436, 411, 1412, 7708, 500, 380, 5101, 589], "temperature": 0.0, "avg_logprob": -0.2023755620034893, "compression_ratio": 1.575609756097561, "no_speech_prob": 2.4824139472912066e-06}, {"id": 408, "seek": 91048, "start": 934.6, "end": 936.4, "text": " at the level of C libraries.", "tokens": [412, 264, 1496, 295, 383, 15148, 13], "temperature": 0.0, "avg_logprob": -0.2023755620034893, "compression_ratio": 1.575609756097561, "no_speech_prob": 2.4824139472912066e-06}, {"id": 409, "seek": 93640, "start": 936.4, "end": 940.88, "text": " But data scientists work in some domain, right?", "tokens": [583, 1412, 7708, 589, 294, 512, 9274, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.12254793398848204, "compression_ratio": 1.812785388127854, "no_speech_prob": 6.893407089592074e-07}, {"id": 410, "seek": 93640, "start": 940.88, "end": 945.04, "text": " You work in neuro radiology, image acquisition,", "tokens": [509, 589, 294, 16499, 16335, 1793, 11, 3256, 21668, 11], "temperature": 0.0, "avg_logprob": -0.12254793398848204, "compression_ratio": 1.812785388127854, "no_speech_prob": 6.893407089592074e-07}, {"id": 411, "seek": 93640, "start": 945.04, "end": 947.72, "text": " or you work in astrophysics or whatever.", "tokens": [420, 291, 589, 294, 5357, 11741, 41732, 420, 2035, 13], "temperature": 0.0, "avg_logprob": -0.12254793398848204, "compression_ratio": 1.812785388127854, "no_speech_prob": 6.893407089592074e-07}, {"id": 412, "seek": 93640, "start": 947.72, "end": 949.16, "text": " And in your domain,", "tokens": [400, 294, 428, 9274, 11], "temperature": 0.0, "avg_logprob": -0.12254793398848204, "compression_ratio": 1.812785388127854, "no_speech_prob": 6.893407089592074e-07}, {"id": 413, "seek": 93640, "start": 950.98, "end": 954.4399999999999, "text": " there will be many C libraries that do the exact thing", "tokens": [456, 486, 312, 867, 383, 15148, 300, 360, 264, 1900, 551], "temperature": 0.0, "avg_logprob": -0.12254793398848204, "compression_ratio": 1.812785388127854, "no_speech_prob": 6.893407089592074e-07}, {"id": 414, "seek": 93640, "start": 954.4399999999999, "end": 956.84, "text": " that you want to do at great speed, right?", "tokens": [300, 291, 528, 281, 360, 412, 869, 3073, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.12254793398848204, "compression_ratio": 1.812785388127854, "no_speech_prob": 6.893407089592074e-07}, {"id": 415, "seek": 93640, "start": 956.84, "end": 960.6, "text": " And currently you can only access the ones", "tokens": [400, 4362, 291, 393, 787, 2105, 264, 2306], "temperature": 0.0, "avg_logprob": -0.12254793398848204, "compression_ratio": 1.812785388127854, "no_speech_prob": 6.893407089592074e-07}, {"id": 416, "seek": 93640, "start": 960.6, "end": 962.1999999999999, "text": " that have been wrapped in Python", "tokens": [300, 362, 668, 14226, 294, 15329], "temperature": 0.0, "avg_logprob": -0.12254793398848204, "compression_ratio": 1.812785388127854, "no_speech_prob": 6.893407089592074e-07}, {"id": 417, "seek": 93640, "start": 962.1999999999999, "end": 963.84, "text": " and you can only access the bits", "tokens": [293, 291, 393, 787, 2105, 264, 9239], "temperature": 0.0, "avg_logprob": -0.12254793398848204, "compression_ratio": 1.812785388127854, "no_speech_prob": 6.893407089592074e-07}, {"id": 418, "seek": 93640, "start": 963.84, "end": 965.4399999999999, "text": " that have been wrapped in Python.", "tokens": [300, 362, 668, 14226, 294, 15329, 13], "temperature": 0.0, "avg_logprob": -0.12254793398848204, "compression_ratio": 1.812785388127854, "no_speech_prob": 6.893407089592074e-07}, {"id": 419, "seek": 96544, "start": 965.44, "end": 968.8800000000001, "text": " What if you could actually access the entire world", "tokens": [708, 498, 291, 727, 767, 2105, 264, 2302, 1002], "temperature": 0.0, "avg_logprob": -0.13347056604200794, "compression_ratio": 1.5933014354066986, "no_speech_prob": 1.051125991580193e-06}, {"id": 420, "seek": 96544, "start": 968.8800000000001, "end": 971.5200000000001, "text": " of software that's been written in C,", "tokens": [295, 4722, 300, 311, 668, 3720, 294, 383, 11], "temperature": 0.0, "avg_logprob": -0.13347056604200794, "compression_ratio": 1.5933014354066986, "no_speech_prob": 1.051125991580193e-06}, {"id": 421, "seek": 96544, "start": 971.5200000000001, "end": 974.0400000000001, "text": " which is what most software has been written in.", "tokens": [597, 307, 437, 881, 4722, 575, 668, 3720, 294, 13], "temperature": 0.0, "avg_logprob": -0.13347056604200794, "compression_ratio": 1.5933014354066986, "no_speech_prob": 1.051125991580193e-06}, {"id": 422, "seek": 96544, "start": 974.0400000000001, "end": 977.7800000000001, "text": " And it's easy enough that an average data scientist", "tokens": [400, 309, 311, 1858, 1547, 300, 364, 4274, 1412, 12662], "temperature": 0.0, "avg_logprob": -0.13347056604200794, "compression_ratio": 1.5933014354066986, "no_speech_prob": 1.051125991580193e-06}, {"id": 423, "seek": 96544, "start": 977.7800000000001, "end": 978.9200000000001, "text": " can do it.", "tokens": [393, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.13347056604200794, "compression_ratio": 1.5933014354066986, "no_speech_prob": 1.051125991580193e-06}, {"id": 424, "seek": 96544, "start": 978.9200000000001, "end": 981.72, "text": " So here's what it looks like, right?", "tokens": [407, 510, 311, 437, 309, 1542, 411, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.13347056604200794, "compression_ratio": 1.5933014354066986, "no_speech_prob": 1.051125991580193e-06}, {"id": 425, "seek": 96544, "start": 985.0, "end": 989.2800000000001, "text": " Let's say we want to do audio processing, okay?", "tokens": [961, 311, 584, 321, 528, 281, 360, 6278, 9007, 11, 1392, 30], "temperature": 0.0, "avg_logprob": -0.13347056604200794, "compression_ratio": 1.5933014354066986, "no_speech_prob": 1.051125991580193e-06}, {"id": 426, "seek": 96544, "start": 989.2800000000001, "end": 993.1600000000001, "text": " And so for audio processing, I'm thinking like,", "tokens": [400, 370, 337, 6278, 9007, 11, 286, 478, 1953, 411, 11], "temperature": 0.0, "avg_logprob": -0.13347056604200794, "compression_ratio": 1.5933014354066986, "no_speech_prob": 1.051125991580193e-06}, {"id": 427, "seek": 99316, "start": 993.16, "end": 995.56, "text": " oh, how do I start doing audio processing?", "tokens": [1954, 11, 577, 360, 286, 722, 884, 6278, 9007, 30], "temperature": 0.0, "avg_logprob": -0.13604865839451918, "compression_ratio": 1.7438271604938271, "no_speech_prob": 3.3404380701540504e-06}, {"id": 428, "seek": 99316, "start": 995.56, "end": 999.1999999999999, "text": " And in my quick look around, I couldn't see much in Swift", "tokens": [400, 294, 452, 1702, 574, 926, 11, 286, 2809, 380, 536, 709, 294, 25539], "temperature": 0.0, "avg_logprob": -0.13604865839451918, "compression_ratio": 1.7438271604938271, "no_speech_prob": 3.3404380701540504e-06}, {"id": 429, "seek": 99316, "start": 999.1999999999999, "end": 1001.8, "text": " that works on Linux for audio processing.", "tokens": [300, 1985, 322, 18734, 337, 6278, 9007, 13], "temperature": 0.0, "avg_logprob": -0.13604865839451918, "compression_ratio": 1.7438271604938271, "no_speech_prob": 3.3404380701540504e-06}, {"id": 430, "seek": 99316, "start": 1001.8, "end": 1004.0799999999999, "text": " So you write an MP3 decoder from scratch, right?", "tokens": [407, 291, 2464, 364, 14146, 18, 979, 19866, 490, 8459, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.13604865839451918, "compression_ratio": 1.7438271604938271, "no_speech_prob": 3.3404380701540504e-06}, {"id": 431, "seek": 99316, "start": 1004.0799999999999, "end": 1006.48, "text": " Yeah, I thought about doing an MP3 decoder from scratch,", "tokens": [865, 11, 286, 1194, 466, 884, 364, 14146, 18, 979, 19866, 490, 8459, 11], "temperature": 0.0, "avg_logprob": -0.13604865839451918, "compression_ratio": 1.7438271604938271, "no_speech_prob": 3.3404380701540504e-06}, {"id": 432, "seek": 99316, "start": 1006.48, "end": 1007.3199999999999, "text": " but then I-", "tokens": [457, 550, 286, 12], "temperature": 0.0, "avg_logprob": -0.13604865839451918, "compression_ratio": 1.7438271604938271, "no_speech_prob": 3.3404380701540504e-06}, {"id": 433, "seek": 99316, "start": 1007.3199999999999, "end": 1008.16, "text": " Lots of signal processing.", "tokens": [15908, 295, 6358, 9007, 13], "temperature": 0.0, "avg_logprob": -0.13604865839451918, "compression_ratio": 1.7438271604938271, "no_speech_prob": 3.3404380701540504e-06}, {"id": 434, "seek": 99316, "start": 1008.16, "end": 1011.16, "text": " I figured like people have MP3 decoders already,", "tokens": [286, 8932, 411, 561, 362, 14146, 18, 979, 378, 433, 1217, 11], "temperature": 0.0, "avg_logprob": -0.13604865839451918, "compression_ratio": 1.7438271604938271, "no_speech_prob": 3.3404380701540504e-06}, {"id": 435, "seek": 99316, "start": 1011.16, "end": 1011.98, "text": " what are they doing?", "tokens": [437, 366, 436, 884, 30], "temperature": 0.0, "avg_logprob": -0.13604865839451918, "compression_ratio": 1.7438271604938271, "no_speech_prob": 3.3404380701540504e-06}, {"id": 436, "seek": 99316, "start": 1011.98, "end": 1013.8399999999999, "text": " And I looked it up on the internet and it turns out", "tokens": [400, 286, 2956, 309, 493, 322, 264, 4705, 293, 309, 4523, 484], "temperature": 0.0, "avg_logprob": -0.13604865839451918, "compression_ratio": 1.7438271604938271, "no_speech_prob": 3.3404380701540504e-06}, {"id": 437, "seek": 99316, "start": 1013.8399999999999, "end": 1015.68, "text": " there's lots of C libraries that do it.", "tokens": [456, 311, 3195, 295, 383, 15148, 300, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.13604865839451918, "compression_ratio": 1.7438271604938271, "no_speech_prob": 3.3404380701540504e-06}, {"id": 438, "seek": 99316, "start": 1015.68, "end": 1019.48, "text": " And one popular one apparently is called SOPS, right?", "tokens": [400, 472, 3743, 472, 7970, 307, 1219, 10621, 6273, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.13604865839451918, "compression_ratio": 1.7438271604938271, "no_speech_prob": 3.3404380701540504e-06}, {"id": 439, "seek": 99316, "start": 1019.48, "end": 1022.12, "text": " And I'm a data scientist, I'm not an audio processing person.", "tokens": [400, 286, 478, 257, 1412, 12662, 11, 286, 478, 406, 364, 6278, 9007, 954, 13], "temperature": 0.0, "avg_logprob": -0.13604865839451918, "compression_ratio": 1.7438271604938271, "no_speech_prob": 3.3404380701540504e-06}, {"id": 440, "seek": 102212, "start": 1022.12, "end": 1026.0, "text": " So this is my process last week was like C, library,", "tokens": [407, 341, 307, 452, 1399, 1036, 1243, 390, 411, 383, 11, 6405, 11], "temperature": 0.0, "avg_logprob": -0.1832010020380435, "compression_ratio": 1.6073059360730593, "no_speech_prob": 7.8888133430155e-06}, {"id": 441, "seek": 102212, "start": 1026.0, "end": 1029.72, "text": " MP3 decode, and it says use SOPS.", "tokens": [14146, 18, 979, 1429, 11, 293, 309, 1619, 764, 10621, 6273, 13], "temperature": 0.0, "avg_logprob": -0.1832010020380435, "compression_ratio": 1.6073059360730593, "no_speech_prob": 7.8888133430155e-06}, {"id": 442, "seek": 102212, "start": 1029.72, "end": 1031.64, "text": " So look at this, I've got something here", "tokens": [407, 574, 412, 341, 11, 286, 600, 658, 746, 510], "temperature": 0.0, "avg_logprob": -0.1832010020380435, "compression_ratio": 1.6073059360730593, "no_speech_prob": 7.8888133430155e-06}, {"id": 443, "seek": 102212, "start": 1031.64, "end": 1034.16, "text": " that says import SOPS.", "tokens": [300, 1619, 974, 10621, 6273, 13], "temperature": 0.0, "avg_logprob": -0.1832010020380435, "compression_ratio": 1.6073059360730593, "no_speech_prob": 7.8888133430155e-06}, {"id": 444, "seek": 102212, "start": 1035.08, "end": 1036.72, "text": " And then it says, edit SOPS,", "tokens": [400, 550, 309, 1619, 11, 8129, 10621, 6273, 11], "temperature": 0.0, "avg_logprob": -0.1832010020380435, "compression_ratio": 1.6073059360730593, "no_speech_prob": 7.8888133430155e-06}, {"id": 445, "seek": 102212, "start": 1036.72, "end": 1038.78, "text": " and then it says read SOPS audio.", "tokens": [293, 550, 309, 1619, 1401, 10621, 6273, 6278, 13], "temperature": 0.0, "avg_logprob": -0.1832010020380435, "compression_ratio": 1.6073059360730593, "no_speech_prob": 7.8888133430155e-06}, {"id": 446, "seek": 102212, "start": 1040.04, "end": 1041.66, "text": " Where did this come from?", "tokens": [2305, 630, 341, 808, 490, 30], "temperature": 0.0, "avg_logprob": -0.1832010020380435, "compression_ratio": 1.6073059360730593, "no_speech_prob": 7.8888133430155e-06}, {"id": 447, "seek": 102212, "start": 1041.66, "end": 1044.52, "text": " Well, this comes from a library.", "tokens": [1042, 11, 341, 1487, 490, 257, 6405, 13], "temperature": 0.0, "avg_logprob": -0.1832010020380435, "compression_ratio": 1.6073059360730593, "no_speech_prob": 7.8888133430155e-06}, {"id": 448, "seek": 102212, "start": 1047.56, "end": 1049.76, "text": " Here it is, sound exchange.", "tokens": [1692, 309, 307, 11, 1626, 7742, 13], "temperature": 0.0, "avg_logprob": -0.1832010020380435, "compression_ratio": 1.6073059360730593, "no_speech_prob": 7.8888133430155e-06}, {"id": 449, "seek": 102212, "start": 1049.76, "end": 1052.08, "text": " This is what C library homepages tend to look like.", "tokens": [639, 307, 437, 383, 6405, 1280, 79, 1660, 3928, 281, 574, 411, 13], "temperature": 0.0, "avg_logprob": -0.1832010020380435, "compression_ratio": 1.6073059360730593, "no_speech_prob": 7.8888133430155e-06}, {"id": 450, "seek": 105208, "start": 1052.08, "end": 1053.6, "text": " They tend to be very 90s.", "tokens": [814, 3928, 281, 312, 588, 4289, 82, 13], "temperature": 0.0, "avg_logprob": -0.15058170381139535, "compression_ratio": 1.8047808764940239, "no_speech_prob": 5.2226641855668277e-05}, {"id": 451, "seek": 105208, "start": 1055.22, "end": 1057.54, "text": " And basically I looked at the documentation", "tokens": [400, 1936, 286, 2956, 412, 264, 14333], "temperature": 0.0, "avg_logprob": -0.15058170381139535, "compression_ratio": 1.8047808764940239, "no_speech_prob": 5.2226641855668277e-05}, {"id": 452, "seek": 105208, "start": 1057.54, "end": 1061.3999999999999, "text": " and C library documentation tends to be less than obvious", "tokens": [293, 383, 6405, 14333, 12258, 281, 312, 1570, 813, 6322], "temperature": 0.0, "avg_logprob": -0.15058170381139535, "compression_ratio": 1.8047808764940239, "no_speech_prob": 5.2226641855668277e-05}, {"id": 453, "seek": 105208, "start": 1061.3999999999999, "end": 1063.56, "text": " to kind of see what's going on,", "tokens": [281, 733, 295, 536, 437, 311, 516, 322, 11], "temperature": 0.0, "avg_logprob": -0.15058170381139535, "compression_ratio": 1.8047808764940239, "no_speech_prob": 5.2226641855668277e-05}, {"id": 454, "seek": 105208, "start": 1063.56, "end": 1068.56, "text": " but you just kind of have to learn to read it,", "tokens": [457, 291, 445, 733, 295, 362, 281, 1466, 281, 1401, 309, 11], "temperature": 0.0, "avg_logprob": -0.15058170381139535, "compression_ratio": 1.8047808764940239, "no_speech_prob": 5.2226641855668277e-05}, {"id": 455, "seek": 105208, "start": 1068.6799999999998, "end": 1070.3999999999999, "text": " just like you learn to read Python documentation.", "tokens": [445, 411, 291, 1466, 281, 1401, 15329, 14333, 13], "temperature": 0.0, "avg_logprob": -0.15058170381139535, "compression_ratio": 1.8047808764940239, "no_speech_prob": 5.2226641855668277e-05}, {"id": 456, "seek": 105208, "start": 1070.3999999999999, "end": 1073.1999999999998, "text": " And so basically it says you have to use this header,", "tokens": [400, 370, 1936, 309, 1619, 291, 362, 281, 764, 341, 23117, 11], "temperature": 0.0, "avg_logprob": -0.15058170381139535, "compression_ratio": 1.8047808764940239, "no_speech_prob": 5.2226641855668277e-05}, {"id": 457, "seek": 105208, "start": 1073.1999999999998, "end": 1074.8799999999999, "text": " and then these are the various functions you can call.", "tokens": [293, 550, 613, 366, 264, 3683, 6828, 291, 393, 818, 13], "temperature": 0.0, "avg_logprob": -0.15058170381139535, "compression_ratio": 1.8047808764940239, "no_speech_prob": 5.2226641855668277e-05}, {"id": 458, "seek": 105208, "start": 1074.8799999999999, "end": 1075.72, "text": " There's something called edit,", "tokens": [821, 311, 746, 1219, 8129, 11], "temperature": 0.0, "avg_logprob": -0.15058170381139535, "compression_ratio": 1.8047808764940239, "no_speech_prob": 5.2226641855668277e-05}, {"id": 459, "seek": 105208, "start": 1075.72, "end": 1077.1999999999998, "text": " and there's something called open.", "tokens": [293, 456, 311, 746, 1219, 1269, 13], "temperature": 0.0, "avg_logprob": -0.15058170381139535, "compression_ratio": 1.8047808764940239, "no_speech_prob": 5.2226641855668277e-05}, {"id": 460, "seek": 105208, "start": 1077.1999999999998, "end": 1078.24, "text": " So here's what I did.", "tokens": [407, 510, 311, 437, 286, 630, 13], "temperature": 0.0, "avg_logprob": -0.15058170381139535, "compression_ratio": 1.8047808764940239, "no_speech_prob": 5.2226641855668277e-05}, {"id": 461, "seek": 107824, "start": 1078.24, "end": 1083.24, "text": " I jumped into Vim,", "tokens": [286, 13864, 666, 691, 332, 11], "temperature": 0.0, "avg_logprob": -0.17457933104440068, "compression_ratio": 1.8719512195121952, "no_speech_prob": 1.1658846233331133e-05}, {"id": 462, "seek": 107824, "start": 1084.58, "end": 1086.3, "text": " and I created a directory,", "tokens": [293, 286, 2942, 257, 21120, 11], "temperature": 0.0, "avg_logprob": -0.17457933104440068, "compression_ratio": 1.8719512195121952, "no_speech_prob": 1.1658846233331133e-05}, {"id": 463, "seek": 107824, "start": 1086.3, "end": 1089.38, "text": " and I called it Swift SOPS.", "tokens": [293, 286, 1219, 309, 25539, 10621, 6273, 13], "temperature": 0.0, "avg_logprob": -0.17457933104440068, "compression_ratio": 1.8719512195121952, "no_speech_prob": 1.1658846233331133e-05}, {"id": 464, "seek": 107824, "start": 1089.38, "end": 1092.74, "text": " And in that directory I created a few things.", "tokens": [400, 294, 300, 21120, 286, 2942, 257, 1326, 721, 13], "temperature": 0.0, "avg_logprob": -0.17457933104440068, "compression_ratio": 1.8719512195121952, "no_speech_prob": 1.1658846233331133e-05}, {"id": 465, "seek": 107824, "start": 1092.74, "end": 1097.74, "text": " I created a file called package.swift,", "tokens": [286, 2942, 257, 3991, 1219, 7372, 13, 25884, 2008, 11], "temperature": 0.0, "avg_logprob": -0.17457933104440068, "compression_ratio": 1.8719512195121952, "no_speech_prob": 1.1658846233331133e-05}, {"id": 466, "seek": 107824, "start": 1098.64, "end": 1101.78, "text": " and this is the thing that defines a Swift package.", "tokens": [293, 341, 307, 264, 551, 300, 23122, 257, 25539, 7372, 13], "temperature": 0.0, "avg_logprob": -0.17457933104440068, "compression_ratio": 1.8719512195121952, "no_speech_prob": 1.1658846233331133e-05}, {"id": 467, "seek": 107824, "start": 1101.78, "end": 1104.54, "text": " A Swift package is something that you can import.", "tokens": [316, 25539, 7372, 307, 746, 300, 291, 393, 974, 13], "temperature": 0.0, "avg_logprob": -0.17457933104440068, "compression_ratio": 1.8719512195121952, "no_speech_prob": 1.1658846233331133e-05}, {"id": 468, "seek": 107824, "start": 1104.54, "end": 1107.28, "text": " And you can actually type Swift package in it,", "tokens": [400, 291, 393, 767, 2010, 25539, 7372, 294, 309, 11], "temperature": 0.0, "avg_logprob": -0.17457933104440068, "compression_ratio": 1.8719512195121952, "no_speech_prob": 1.1658846233331133e-05}, {"id": 469, "seek": 110728, "start": 1107.28, "end": 1109.7, "text": " and it'll kind of create the skeleton for you.", "tokens": [293, 309, 603, 733, 295, 1884, 264, 25204, 337, 291, 13], "temperature": 0.0, "avg_logprob": -0.134194478392601, "compression_ratio": 1.7671755725190839, "no_speech_prob": 8.139281817420851e-06}, {"id": 470, "seek": 110728, "start": 1109.7, "end": 1112.98, "text": " Personally, my approach to wrapping a new C library", "tokens": [21079, 11, 452, 3109, 281, 21993, 257, 777, 383, 6405], "temperature": 0.0, "avg_logprob": -0.134194478392601, "compression_ratio": 1.7671755725190839, "no_speech_prob": 8.139281817420851e-06}, {"id": 471, "seek": 110728, "start": 1112.98, "end": 1116.26, "text": " is to always copy an existing C library folder", "tokens": [307, 281, 1009, 5055, 364, 6741, 383, 6405, 10820], "temperature": 0.0, "avg_logprob": -0.134194478392601, "compression_ratio": 1.7671755725190839, "no_speech_prob": 8.139281817420851e-06}, {"id": 472, "seek": 110728, "start": 1116.26, "end": 1118.22, "text": " that I've created and then just change the name,", "tokens": [300, 286, 600, 2942, 293, 550, 445, 1319, 264, 1315, 11], "temperature": 0.0, "avg_logprob": -0.134194478392601, "compression_ratio": 1.7671755725190839, "no_speech_prob": 8.139281817420851e-06}, {"id": 473, "seek": 110728, "start": 1118.22, "end": 1121.42, "text": " because every one of them has the same three files.", "tokens": [570, 633, 472, 295, 552, 575, 264, 912, 1045, 7098, 13], "temperature": 0.0, "avg_logprob": -0.134194478392601, "compression_ratio": 1.7671755725190839, "no_speech_prob": 8.139281817420851e-06}, {"id": 474, "seek": 110728, "start": 1121.42, "end": 1123.8799999999999, "text": " So this is file number one, you have to give it a name,", "tokens": [407, 341, 307, 3991, 1230, 472, 11, 291, 362, 281, 976, 309, 257, 1315, 11], "temperature": 0.0, "avg_logprob": -0.134194478392601, "compression_ratio": 1.7671755725190839, "no_speech_prob": 8.139281817420851e-06}, {"id": 475, "seek": 110728, "start": 1123.8799999999999, "end": 1126.18, "text": " and then you have to say what's the name of the library in C.", "tokens": [293, 550, 291, 362, 281, 584, 437, 311, 264, 1315, 295, 264, 6405, 294, 383, 13], "temperature": 0.0, "avg_logprob": -0.134194478392601, "compression_ratio": 1.7671755725190839, "no_speech_prob": 8.139281817420851e-06}, {"id": 476, "seek": 110728, "start": 1126.18, "end": 1129.62, "text": " And in SOPS the name of the library is SOPS.", "tokens": [400, 294, 10621, 6273, 264, 1315, 295, 264, 6405, 307, 10621, 6273, 13], "temperature": 0.0, "avg_logprob": -0.134194478392601, "compression_ratio": 1.7671755725190839, "no_speech_prob": 8.139281817420851e-06}, {"id": 477, "seek": 110728, "start": 1129.62, "end": 1134.62, "text": " Step two is you have to create a file called sources,", "tokens": [5470, 732, 307, 291, 362, 281, 1884, 257, 3991, 1219, 7139, 11], "temperature": 0.0, "avg_logprob": -0.134194478392601, "compression_ratio": 1.7671755725190839, "no_speech_prob": 8.139281817420851e-06}, {"id": 478, "seek": 113462, "start": 1134.62, "end": 1138.5, "text": " sources, SOPS, module.modulemap.", "tokens": [7139, 11, 10621, 6273, 11, 10088, 13, 8014, 2271, 24223, 13], "temperature": 0.0, "avg_logprob": -0.23283604939778646, "compression_ratio": 1.6870229007633588, "no_speech_prob": 4.5394899643724784e-05}, {"id": 479, "seek": 113462, "start": 1138.5, "end": 1142.3, "text": " And it contains always these exact lines of code.", "tokens": [400, 309, 8306, 1009, 613, 1900, 3876, 295, 3089, 13], "temperature": 0.0, "avg_logprob": -0.23283604939778646, "compression_ratio": 1.6870229007633588, "no_speech_prob": 4.5394899643724784e-05}, {"id": 480, "seek": 113462, "start": 1142.3, "end": 1144.58, "text": " Again, we just change the word SOPS,", "tokens": [3764, 11, 321, 445, 1319, 264, 1349, 10621, 6273, 11], "temperature": 0.0, "avg_logprob": -0.23283604939778646, "compression_ratio": 1.6870229007633588, "no_speech_prob": 4.5394899643724784e-05}, {"id": 481, "seek": 113462, "start": 1144.58, "end": 1146.7399999999998, "text": " and the word SOPS, and the word SOPS.", "tokens": [293, 264, 1349, 10621, 6273, 11, 293, 264, 1349, 10621, 6273, 13], "temperature": 0.0, "avg_logprob": -0.23283604939778646, "compression_ratio": 1.6870229007633588, "no_speech_prob": 4.5394899643724784e-05}, {"id": 482, "seek": 113462, "start": 1146.7399999999998, "end": 1148.3, "text": " So it's not rocket science.", "tokens": [407, 309, 311, 406, 13012, 3497, 13], "temperature": 0.0, "avg_logprob": -0.23283604939778646, "compression_ratio": 1.6870229007633588, "no_speech_prob": 4.5394899643724784e-05}, {"id": 483, "seek": 113462, "start": 1148.3, "end": 1150.62, "text": " So what this is doing is this is saying that", "tokens": [407, 437, 341, 307, 884, 307, 341, 307, 1566, 300], "temperature": 0.0, "avg_logprob": -0.23283604939778646, "compression_ratio": 1.6870229007633588, "no_speech_prob": 4.5394899643724784e-05}, {"id": 484, "seek": 113462, "start": 1150.62, "end": 1153.06, "text": " you wanna call it SOPS in Swift.", "tokens": [291, 1948, 818, 309, 10621, 6273, 294, 25539, 13], "temperature": 0.0, "avg_logprob": -0.23283604939778646, "compression_ratio": 1.6870229007633588, "no_speech_prob": 4.5394899643724784e-05}, {"id": 485, "seek": 113462, "start": 1153.06, "end": 1155.9799999999998, "text": " They called it SOXU.H for some reason.", "tokens": [814, 1219, 309, 10621, 55, 52, 13, 39, 337, 512, 1778, 13], "temperature": 0.0, "avg_logprob": -0.23283604939778646, "compression_ratio": 1.6870229007633588, "no_speech_prob": 4.5394899643724784e-05}, {"id": 486, "seek": 113462, "start": 1155.9799999999998, "end": 1157.7399999999998, "text": " Well I actually called it SOXU.H,", "tokens": [1042, 286, 767, 1219, 309, 10621, 55, 52, 13, 39, 11], "temperature": 0.0, "avg_logprob": -0.23283604939778646, "compression_ratio": 1.6870229007633588, "no_speech_prob": 4.5394899643724784e-05}, {"id": 487, "seek": 113462, "start": 1157.7399999999998, "end": 1158.8999999999999, "text": " which we'll see in a moment.", "tokens": [597, 321, 603, 536, 294, 257, 1623, 13], "temperature": 0.0, "avg_logprob": -0.23283604939778646, "compression_ratio": 1.6870229007633588, "no_speech_prob": 4.5394899643724784e-05}, {"id": 488, "seek": 113462, "start": 1158.8999999999999, "end": 1161.1799999999998, "text": " And then, but the library is in,", "tokens": [400, 550, 11, 457, 264, 6405, 307, 294, 11], "temperature": 0.0, "avg_logprob": -0.23283604939778646, "compression_ratio": 1.6870229007633588, "no_speech_prob": 4.5394899643724784e-05}, {"id": 489, "seek": 113462, "start": 1161.1799999999998, "end": 1162.9399999999998, "text": " it gets linked in by LibSOX.", "tokens": [309, 2170, 9408, 294, 538, 15834, 17188, 55, 13], "temperature": 0.0, "avg_logprob": -0.23283604939778646, "compression_ratio": 1.6870229007633588, "no_speech_prob": 4.5394899643724784e-05}, {"id": 490, "seek": 113462, "start": 1162.9399999999998, "end": 1163.78, "text": " Yeah, exactly.", "tokens": [865, 11, 2293, 13], "temperature": 0.0, "avg_logprob": -0.23283604939778646, "compression_ratio": 1.6870229007633588, "no_speech_prob": 4.5394899643724784e-05}, {"id": 491, "seek": 116378, "start": 1163.78, "end": 1165.98, "text": " So all these things in C can be different.", "tokens": [407, 439, 613, 721, 294, 383, 393, 312, 819, 13], "temperature": 0.0, "avg_logprob": -0.13412885104908662, "compression_ratio": 1.683794466403162, "no_speech_prob": 1.644189251237549e-05}, {"id": 492, "seek": 116378, "start": 1165.98, "end": 1169.42, "text": " Yeah, so most of the time we can make them look the same.", "tokens": [865, 11, 370, 881, 295, 264, 565, 321, 393, 652, 552, 574, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.13412885104908662, "compression_ratio": 1.683794466403162, "no_speech_prob": 1.644189251237549e-05}, {"id": 493, "seek": 116378, "start": 1169.42, "end": 1170.46, "text": " Yep.", "tokens": [7010, 13], "temperature": 0.0, "avg_logprob": -0.13412885104908662, "compression_ratio": 1.683794466403162, "no_speech_prob": 1.644189251237549e-05}, {"id": 494, "seek": 116378, "start": 1170.46, "end": 1173.18, "text": " And so then the final third file that you have to create", "tokens": [400, 370, 550, 264, 2572, 2636, 3991, 300, 291, 362, 281, 1884], "temperature": 0.0, "avg_logprob": -0.13412885104908662, "compression_ratio": 1.683794466403162, "no_speech_prob": 1.644189251237549e-05}, {"id": 495, "seek": 116378, "start": 1173.18, "end": 1175.02, "text": " is the.h file.", "tokens": [307, 264, 2411, 71, 3991, 13], "temperature": 0.0, "avg_logprob": -0.13412885104908662, "compression_ratio": 1.683794466403162, "no_speech_prob": 1.644189251237549e-05}, {"id": 496, "seek": 116378, "start": 1175.02, "end": 1178.94, "text": " And so you put that in sources, SOX,", "tokens": [400, 370, 291, 829, 300, 294, 7139, 11, 10621, 55, 11], "temperature": 0.0, "avg_logprob": -0.13412885104908662, "compression_ratio": 1.683794466403162, "no_speech_prob": 1.644189251237549e-05}, {"id": 497, "seek": 116378, "start": 1178.94, "end": 1181.58, "text": " and I call it SOXUmbrellaHeader.h.", "tokens": [293, 286, 818, 309, 10621, 55, 52, 20014, 3505, 39, 2056, 260, 13, 71, 13], "temperature": 0.0, "avg_logprob": -0.13412885104908662, "compression_ratio": 1.683794466403162, "no_speech_prob": 1.644189251237549e-05}, {"id": 498, "seek": 116378, "start": 1181.58, "end": 1183.46, "text": " And that contains one line of code,", "tokens": [400, 300, 8306, 472, 1622, 295, 3089, 11], "temperature": 0.0, "avg_logprob": -0.13412885104908662, "compression_ratio": 1.683794466403162, "no_speech_prob": 1.644189251237549e-05}, {"id": 499, "seek": 116378, "start": 1183.46, "end": 1184.78, "text": " which is the header file,", "tokens": [597, 307, 264, 23117, 3991, 11], "temperature": 0.0, "avg_logprob": -0.13412885104908662, "compression_ratio": 1.683794466403162, "no_speech_prob": 1.644189251237549e-05}, {"id": 500, "seek": 116378, "start": 1184.78, "end": 1186.7, "text": " which as you saw from the documentation,", "tokens": [597, 382, 291, 1866, 490, 264, 14333, 11], "temperature": 0.0, "avg_logprob": -0.13412885104908662, "compression_ratio": 1.683794466403162, "no_speech_prob": 1.644189251237549e-05}, {"id": 501, "seek": 116378, "start": 1186.7, "end": 1188.42, "text": " you just copy and paste it from there.", "tokens": [291, 445, 5055, 293, 9163, 309, 490, 456, 13], "temperature": 0.0, "avg_logprob": -0.13412885104908662, "compression_ratio": 1.683794466403162, "no_speech_prob": 1.644189251237549e-05}, {"id": 502, "seek": 116378, "start": 1188.42, "end": 1190.24, "text": " So once you add these three files,", "tokens": [407, 1564, 291, 909, 613, 1045, 7098, 11], "temperature": 0.0, "avg_logprob": -0.13412885104908662, "compression_ratio": 1.683794466403162, "no_speech_prob": 1.644189251237549e-05}, {"id": 503, "seek": 119024, "start": 1190.24, "end": 1195.24, "text": " you can then do that.", "tokens": [291, 393, 550, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.19927220974328383, "compression_ratio": 1.5836909871244635, "no_speech_prob": 3.2887041925278027e-06}, {"id": 504, "seek": 119024, "start": 1195.6, "end": 1197.96, "text": " Okay, and so now I can import SOX,", "tokens": [1033, 11, 293, 370, 586, 286, 393, 974, 10621, 55, 11], "temperature": 0.0, "avg_logprob": -0.19927220974328383, "compression_ratio": 1.5836909871244635, "no_speech_prob": 3.2887041925278027e-06}, {"id": 505, "seek": 119024, "start": 1197.96, "end": 1201.56, "text": " and now this thing,", "tokens": [293, 586, 341, 551, 11], "temperature": 0.0, "avg_logprob": -0.19927220974328383, "compression_ratio": 1.5836909871244635, "no_speech_prob": 3.2887041925278027e-06}, {"id": 506, "seek": 119024, "start": 1201.56, "end": 1206.56, "text": " this C function is available to Swift.", "tokens": [341, 383, 2445, 307, 2435, 281, 25539, 13], "temperature": 0.0, "avg_logprob": -0.19927220974328383, "compression_ratio": 1.5836909871244635, "no_speech_prob": 3.2887041925278027e-06}, {"id": 507, "seek": 119024, "start": 1206.68, "end": 1208.44, "text": " And so this is kind of wild, right?", "tokens": [400, 370, 341, 307, 733, 295, 4868, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.19927220974328383, "compression_ratio": 1.5836909871244635, "no_speech_prob": 3.2887041925278027e-06}, {"id": 508, "seek": 119024, "start": 1208.44, "end": 1211.0, "text": " Because suddenly, a lot of what this impractical", "tokens": [1436, 5800, 11, 257, 688, 295, 437, 341, 704, 1897, 804], "temperature": 0.0, "avg_logprob": -0.19927220974328383, "compression_ratio": 1.5836909871244635, "no_speech_prob": 3.2887041925278027e-06}, {"id": 509, "seek": 119024, "start": 1211.0, "end": 1212.76, "text": " deep learning for coders course is about", "tokens": [2452, 2539, 337, 17656, 433, 1164, 307, 466], "temperature": 0.0, "avg_logprob": -0.19927220974328383, "compression_ratio": 1.5836909871244635, "no_speech_prob": 3.2887041925278027e-06}, {"id": 510, "seek": 119024, "start": 1212.76, "end": 1216.38, "text": " is opening doors that weren't available to us", "tokens": [307, 5193, 8077, 300, 4999, 380, 2435, 281, 505], "temperature": 0.0, "avg_logprob": -0.19927220974328383, "compression_ratio": 1.5836909871244635, "no_speech_prob": 3.2887041925278027e-06}, {"id": 511, "seek": 119024, "start": 1216.38, "end": 1217.56, "text": " as data scientists before,", "tokens": [382, 1412, 7708, 949, 11], "temperature": 0.0, "avg_logprob": -0.19927220974328383, "compression_ratio": 1.5836909871244635, "no_speech_prob": 3.2887041925278027e-06}, {"id": 512, "seek": 119024, "start": 1217.56, "end": 1220.1200000000001, "text": " and thinking what happens if you go through that door?", "tokens": [293, 1953, 437, 2314, 498, 291, 352, 807, 300, 2853, 30], "temperature": 0.0, "avg_logprob": -0.19927220974328383, "compression_ratio": 1.5836909871244635, "no_speech_prob": 3.2887041925278027e-06}, {"id": 513, "seek": 122012, "start": 1220.12, "end": 1221.8, "text": " So what happens if you go through the door", "tokens": [407, 437, 2314, 498, 291, 352, 807, 264, 2853], "temperature": 0.0, "avg_logprob": -0.17460347666884912, "compression_ratio": 1.6095890410958904, "no_speech_prob": 1.59318842634093e-05}, {"id": 514, "seek": 122012, "start": 1221.8, "end": 1224.4399999999998, "text": " where suddenly all of the World C libraries", "tokens": [689, 5800, 439, 295, 264, 3937, 383, 15148], "temperature": 0.0, "avg_logprob": -0.17460347666884912, "compression_ratio": 1.6095890410958904, "no_speech_prob": 1.59318842634093e-05}, {"id": 515, "seek": 122012, "start": 1224.4399999999998, "end": 1225.4399999999998, "text": " are available to you?", "tokens": [366, 2435, 281, 291, 30], "temperature": 0.0, "avg_logprob": -0.17460347666884912, "compression_ratio": 1.6095890410958904, "no_speech_prob": 1.59318842634093e-05}, {"id": 516, "seek": 122012, "start": 1225.4399999999998, "end": 1227.3999999999999, "text": " What can you do in your domain", "tokens": [708, 393, 291, 360, 294, 428, 9274], "temperature": 0.0, "avg_logprob": -0.17460347666884912, "compression_ratio": 1.6095890410958904, "no_speech_prob": 1.59318842634093e-05}, {"id": 517, "seek": 122012, "start": 1227.3999999999999, "end": 1229.04, "text": " that nobody was doing before", "tokens": [300, 5079, 390, 884, 949], "temperature": 0.0, "avg_logprob": -0.17460347666884912, "compression_ratio": 1.6095890410958904, "no_speech_prob": 1.59318842634093e-05}, {"id": 518, "seek": 122012, "start": 1229.04, "end": 1231.7199999999998, "text": " because there wasn't any Python libraries like that?", "tokens": [570, 456, 2067, 380, 604, 15329, 15148, 411, 300, 30], "temperature": 0.0, "avg_logprob": -0.17460347666884912, "compression_ratio": 1.6095890410958904, "no_speech_prob": 1.59318842634093e-05}, {"id": 519, "seek": 122012, "start": 1235.4399999999998, "end": 1238.3999999999999, "text": " And so what I tend to do is write little Swift functions", "tokens": [400, 370, 437, 286, 3928, 281, 360, 307, 2464, 707, 25539, 6828], "temperature": 0.0, "avg_logprob": -0.17460347666884912, "compression_ratio": 1.6095890410958904, "no_speech_prob": 1.59318842634093e-05}, {"id": 520, "seek": 122012, "start": 1238.3999999999999, "end": 1240.6399999999999, "text": " that wrap the C functions to make them look nice.", "tokens": [300, 7019, 264, 383, 6828, 281, 652, 552, 574, 1481, 13], "temperature": 0.0, "avg_logprob": -0.17460347666884912, "compression_ratio": 1.6095890410958904, "no_speech_prob": 1.59318842634093e-05}, {"id": 521, "seek": 122012, "start": 1240.6399999999999, "end": 1241.8799999999999, "text": " So here's init SOX,", "tokens": [407, 510, 311, 3157, 10621, 55, 11], "temperature": 0.0, "avg_logprob": -0.17460347666884912, "compression_ratio": 1.6095890410958904, "no_speech_prob": 1.59318842634093e-05}, {"id": 522, "seek": 122012, "start": 1241.8799999999999, "end": 1244.9199999999998, "text": " which checks for the value I'm told the docs say", "tokens": [597, 13834, 337, 264, 2158, 286, 478, 1907, 264, 45623, 584], "temperature": 0.0, "avg_logprob": -0.17460347666884912, "compression_ratio": 1.6095890410958904, "no_speech_prob": 1.59318842634093e-05}, {"id": 523, "seek": 122012, "start": 1244.9199999999998, "end": 1247.8799999999999, "text": " to check for, and SOX open read.", "tokens": [281, 1520, 337, 11, 293, 10621, 55, 1269, 1401, 13], "temperature": 0.0, "avg_logprob": -0.17460347666884912, "compression_ratio": 1.6095890410958904, "no_speech_prob": 1.59318842634093e-05}, {"id": 524, "seek": 122012, "start": 1247.8799999999999, "end": 1249.6, "text": " For some reason, you have to pass 0000,", "tokens": [1171, 512, 1778, 11, 291, 362, 281, 1320, 7143, 628, 11], "temperature": 0.0, "avg_logprob": -0.17460347666884912, "compression_ratio": 1.6095890410958904, "no_speech_prob": 1.59318842634093e-05}, {"id": 525, "seek": 124960, "start": 1249.6, "end": 1251.32, "text": " so I just wrapped that.", "tokens": [370, 286, 445, 14226, 300, 13], "temperature": 0.0, "avg_logprob": -0.12140306111039786, "compression_ratio": 1.638655462184874, "no_speech_prob": 1.0615283827064559e-05}, {"id": 526, "seek": 124960, "start": 1251.32, "end": 1252.84, "text": " And so now I can say,", "tokens": [400, 370, 586, 286, 393, 584, 11], "temperature": 0.0, "avg_logprob": -0.12140306111039786, "compression_ratio": 1.638655462184874, "no_speech_prob": 1.0615283827064559e-05}, {"id": 527, "seek": 124960, "start": 1257.28, "end": 1258.6799999999998, "text": " read SOX audio.", "tokens": [1401, 10621, 55, 6278, 13], "temperature": 0.0, "avg_logprob": -0.12140306111039786, "compression_ratio": 1.638655462184874, "no_speech_prob": 1.0615283827064559e-05}, {"id": 528, "seek": 124960, "start": 1258.6799999999998, "end": 1263.6, "text": " And so that's gonna return some kind of structure.", "tokens": [400, 370, 300, 311, 799, 2736, 512, 733, 295, 3877, 13], "temperature": 0.0, "avg_logprob": -0.12140306111039786, "compression_ratio": 1.638655462184874, "no_speech_prob": 1.0615283827064559e-05}, {"id": 529, "seek": 124960, "start": 1263.6, "end": 1265.12, "text": " And so you have to read the documentation", "tokens": [400, 370, 291, 362, 281, 1401, 264, 14333], "temperature": 0.0, "avg_logprob": -0.12140306111039786, "compression_ratio": 1.638655462184874, "no_speech_prob": 1.0615283827064559e-05}, {"id": 530, "seek": 124960, "start": 1265.12, "end": 1265.9599999999998, "text": " to find out what it is,", "tokens": [281, 915, 484, 437, 309, 307, 11], "temperature": 0.0, "avg_logprob": -0.12140306111039786, "compression_ratio": 1.638655462184874, "no_speech_prob": 1.0615283827064559e-05}, {"id": 531, "seek": 124960, "start": 1265.9599999999998, "end": 1268.52, "text": " or copy and paste somebody else's code.", "tokens": [420, 5055, 293, 9163, 2618, 1646, 311, 3089, 13], "temperature": 0.0, "avg_logprob": -0.12140306111039786, "compression_ratio": 1.638655462184874, "no_speech_prob": 1.0615283827064559e-05}, {"id": 532, "seek": 124960, "start": 1268.52, "end": 1270.6799999999998, "text": " Very often, the thing that's returned to you", "tokens": [4372, 2049, 11, 264, 551, 300, 311, 8752, 281, 291], "temperature": 0.0, "avg_logprob": -0.12140306111039786, "compression_ratio": 1.638655462184874, "no_speech_prob": 1.0615283827064559e-05}, {"id": 533, "seek": 124960, "start": 1270.6799999999998, "end": 1275.04, "text": " is gonna be a C pointer, and that's no problem.", "tokens": [307, 799, 312, 257, 383, 23918, 11, 293, 300, 311, 572, 1154, 13], "temperature": 0.0, "avg_logprob": -0.12140306111039786, "compression_ratio": 1.638655462184874, "no_speech_prob": 1.0615283827064559e-05}, {"id": 534, "seek": 124960, "start": 1275.04, "end": 1276.7199999999998, "text": " Swift is perfectly happy with pointers.", "tokens": [25539, 307, 6239, 2055, 365, 44548, 13], "temperature": 0.0, "avg_logprob": -0.12140306111039786, "compression_ratio": 1.638655462184874, "no_speech_prob": 1.0615283827064559e-05}, {"id": 535, "seek": 124960, "start": 1276.7199999999998, "end": 1278.32, "text": " You just say point E to grab the thing", "tokens": [509, 445, 584, 935, 462, 281, 4444, 264, 551], "temperature": 0.0, "avg_logprob": -0.12140306111039786, "compression_ratio": 1.638655462184874, "no_speech_prob": 1.0615283827064559e-05}, {"id": 536, "seek": 127832, "start": 1278.32, "end": 1279.8, "text": " that it's pointing at,", "tokens": [300, 309, 311, 12166, 412, 11], "temperature": 0.0, "avg_logprob": -0.13741708875776412, "compression_ratio": 1.6130434782608696, "no_speech_prob": 8.53016899782233e-06}, {"id": 537, "seek": 127832, "start": 1279.8, "end": 1281.36, "text": " and according to the documentation,", "tokens": [293, 4650, 281, 264, 14333, 11], "temperature": 0.0, "avg_logprob": -0.13741708875776412, "compression_ratio": 1.6130434782608696, "no_speech_prob": 8.53016899782233e-06}, {"id": 538, "seek": 127832, "start": 1281.36, "end": 1284.4399999999998, "text": " there's gonna be something called signal,", "tokens": [456, 311, 799, 312, 746, 1219, 6358, 11], "temperature": 0.0, "avg_logprob": -0.13741708875776412, "compression_ratio": 1.6130434782608696, "no_speech_prob": 8.53016899782233e-06}, {"id": 539, "seek": 127832, "start": 1284.4399999999998, "end": 1287.8, "text": " which is gonna contain things like sample rate,", "tokens": [597, 307, 799, 5304, 721, 411, 6889, 3314, 11], "temperature": 0.0, "avg_logprob": -0.13741708875776412, "compression_ratio": 1.6130434782608696, "no_speech_prob": 8.53016899782233e-06}, {"id": 540, "seek": 127832, "start": 1287.8, "end": 1290.76, "text": " precision, channels, and length.", "tokens": [18356, 11, 9235, 11, 293, 4641, 13], "temperature": 0.0, "avg_logprob": -0.13741708875776412, "compression_ratio": 1.6130434782608696, "no_speech_prob": 8.53016899782233e-06}, {"id": 541, "seek": 127832, "start": 1290.76, "end": 1291.8799999999999, "text": " And so I can,", "tokens": [400, 370, 286, 393, 11], "temperature": 0.0, "avg_logprob": -0.13741708875776412, "compression_ratio": 1.6130434782608696, "no_speech_prob": 8.53016899782233e-06}, {"id": 542, "seek": 127832, "start": 1293.8799999999999, "end": 1294.96, "text": " let's run those two.", "tokens": [718, 311, 1190, 729, 732, 13], "temperature": 0.0, "avg_logprob": -0.13741708875776412, "compression_ratio": 1.6130434782608696, "no_speech_prob": 8.53016899782233e-06}, {"id": 543, "seek": 127832, "start": 1296.24, "end": 1297.08, "text": " So I can run that,", "tokens": [407, 286, 393, 1190, 300, 11], "temperature": 0.0, "avg_logprob": -0.13741708875776412, "compression_ratio": 1.6130434782608696, "no_speech_prob": 8.53016899782233e-06}, {"id": 544, "seek": 127832, "start": 1297.08, "end": 1299.6799999999998, "text": " and I can see I've opened an audio file", "tokens": [293, 286, 393, 536, 286, 600, 5625, 364, 6278, 3991], "temperature": 0.0, "avg_logprob": -0.13741708875776412, "compression_ratio": 1.6130434782608696, "no_speech_prob": 8.53016899782233e-06}, {"id": 545, "seek": 127832, "start": 1299.6799999999998, "end": 1303.04, "text": " with a C library without any extra stuff.", "tokens": [365, 257, 383, 6405, 1553, 604, 2857, 1507, 13], "temperature": 0.0, "avg_logprob": -0.13741708875776412, "compression_ratio": 1.6130434782608696, "no_speech_prob": 8.53016899782233e-06}, {"id": 546, "seek": 127832, "start": 1304.48, "end": 1307.28, "text": " One of the things you can do is you can type SOX tab,", "tokens": [1485, 295, 264, 721, 291, 393, 360, 307, 291, 393, 2010, 10621, 55, 4421, 11], "temperature": 0.0, "avg_logprob": -0.13741708875776412, "compression_ratio": 1.6130434782608696, "no_speech_prob": 8.53016899782233e-06}, {"id": 547, "seek": 130728, "start": 1307.28, "end": 1310.44, "text": " and now here's all the stuff", "tokens": [293, 586, 510, 311, 439, 264, 1507], "temperature": 0.0, "avg_logprob": -0.13889623690052194, "compression_ratio": 1.5666666666666667, "no_speech_prob": 7.18300088919932e-06}, {"id": 548, "seek": 130728, "start": 1310.44, "end": 1312.96, "text": " that's coming in from that header file.", "tokens": [300, 311, 1348, 294, 490, 300, 23117, 3991, 13], "temperature": 0.0, "avg_logprob": -0.13889623690052194, "compression_ratio": 1.5666666666666667, "no_speech_prob": 7.18300088919932e-06}, {"id": 549, "seek": 130728, "start": 1312.96, "end": 1315.32, "text": " That's wild, yeah, super cool.", "tokens": [663, 311, 4868, 11, 1338, 11, 1687, 1627, 13], "temperature": 0.0, "avg_logprob": -0.13889623690052194, "compression_ratio": 1.5666666666666667, "no_speech_prob": 7.18300088919932e-06}, {"id": 550, "seek": 130728, "start": 1315.32, "end": 1316.16, "text": " So,", "tokens": [407, 11], "temperature": 0.0, "avg_logprob": -0.13889623690052194, "compression_ratio": 1.5666666666666667, "no_speech_prob": 7.18300088919932e-06}, {"id": 551, "seek": 130728, "start": 1318.0, "end": 1320.72, "text": " so now I can go ahead and read that,", "tokens": [370, 586, 286, 393, 352, 2286, 293, 1401, 300, 11], "temperature": 0.0, "avg_logprob": -0.13889623690052194, "compression_ratio": 1.5666666666666667, "no_speech_prob": 7.18300088919932e-06}, {"id": 552, "seek": 130728, "start": 1320.72, "end": 1324.6399999999999, "text": " and this is kind of somewhat similar to Python.", "tokens": [293, 341, 307, 733, 295, 8344, 2531, 281, 15329, 13], "temperature": 0.0, "avg_logprob": -0.13889623690052194, "compression_ratio": 1.5666666666666667, "no_speech_prob": 7.18300088919932e-06}, {"id": 553, "seek": 130728, "start": 1324.6399999999999, "end": 1328.16, "text": " In Python, you can open C libraries in theory", "tokens": [682, 15329, 11, 291, 393, 1269, 383, 15148, 294, 5261], "temperature": 0.0, "avg_logprob": -0.13889623690052194, "compression_ratio": 1.5666666666666667, "no_speech_prob": 7.18300088919932e-06}, {"id": 554, "seek": 130728, "start": 1328.16, "end": 1329.16, "text": " and work with them,", "tokens": [293, 589, 365, 552, 11], "temperature": 0.0, "avg_logprob": -0.13889623690052194, "compression_ratio": 1.5666666666666667, "no_speech_prob": 7.18300088919932e-06}, {"id": 555, "seek": 130728, "start": 1329.16, "end": 1330.72, "text": " but I don't do it,", "tokens": [457, 286, 500, 380, 360, 309, 11], "temperature": 0.0, "avg_logprob": -0.13889623690052194, "compression_ratio": 1.5666666666666667, "no_speech_prob": 7.18300088919932e-06}, {"id": 556, "seek": 130728, "start": 1330.72, "end": 1332.16, "text": " I almost never do it,", "tokens": [286, 1920, 1128, 360, 309, 11], "temperature": 0.0, "avg_logprob": -0.13889623690052194, "compression_ratio": 1.5666666666666667, "no_speech_prob": 7.18300088919932e-06}, {"id": 557, "seek": 130728, "start": 1332.16, "end": 1333.84, "text": " because I find that when I try to,", "tokens": [570, 286, 915, 300, 562, 286, 853, 281, 11], "temperature": 0.0, "avg_logprob": -0.13889623690052194, "compression_ratio": 1.5666666666666667, "no_speech_prob": 7.18300088919932e-06}, {"id": 558, "seek": 130728, "start": 1333.84, "end": 1336.8, "text": " the thing you get back are these C structures", "tokens": [264, 551, 291, 483, 646, 366, 613, 383, 9227], "temperature": 0.0, "avg_logprob": -0.13889623690052194, "compression_ratio": 1.5666666666666667, "no_speech_prob": 7.18300088919932e-06}, {"id": 559, "seek": 133680, "start": 1336.8, "end": 1337.6399999999999, "text": " and pointers,", "tokens": [293, 44548, 11], "temperature": 0.0, "avg_logprob": -0.12010845104297557, "compression_ratio": 1.6363636363636365, "no_speech_prob": 1.1842375897685997e-05}, {"id": 560, "seek": 133680, "start": 1337.6399999999999, "end": 1341.28, "text": " which I can't work with in Python in a convenient way,", "tokens": [597, 286, 393, 380, 589, 365, 294, 15329, 294, 257, 10851, 636, 11], "temperature": 0.0, "avg_logprob": -0.12010845104297557, "compression_ratio": 1.6363636363636365, "no_speech_prob": 1.1842375897685997e-05}, {"id": 561, "seek": 133680, "start": 1341.28, "end": 1343.9199999999998, "text": " or if I do use things like PyBind11,", "tokens": [420, 498, 286, 360, 764, 721, 411, 9953, 33, 471, 5348, 11], "temperature": 0.0, "avg_logprob": -0.12010845104297557, "compression_ratio": 1.6363636363636365, "no_speech_prob": 1.1842375897685997e-05}, {"id": 562, "seek": 133680, "start": 1343.9199999999998, "end": 1345.1599999999999, "text": " which is something that helps with that,", "tokens": [597, 307, 746, 300, 3665, 365, 300, 11], "temperature": 0.0, "avg_logprob": -0.12010845104297557, "compression_ratio": 1.6363636363636365, "no_speech_prob": 1.1842375897685997e-05}, {"id": 563, "seek": 133680, "start": 1345.1599999999999, "end": 1346.8799999999999, "text": " then I have to create all these make scripts", "tokens": [550, 286, 362, 281, 1884, 439, 613, 652, 23294], "temperature": 0.0, "avg_logprob": -0.12010845104297557, "compression_ratio": 1.6363636363636365, "no_speech_prob": 1.1842375897685997e-05}, {"id": 564, "seek": 133680, "start": 1346.8799999999999, "end": 1348.12, "text": " and compile processes,", "tokens": [293, 31413, 7555, 11], "temperature": 0.0, "avg_logprob": -0.12010845104297557, "compression_ratio": 1.6363636363636365, "no_speech_prob": 1.1842375897685997e-05}, {"id": 565, "seek": 133680, "start": 1348.12, "end": 1350.48, "text": " and I just don't bother, right?", "tokens": [293, 286, 445, 500, 380, 8677, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.12010845104297557, "compression_ratio": 1.6363636363636365, "no_speech_prob": 1.1842375897685997e-05}, {"id": 566, "seek": 133680, "start": 1350.48, "end": 1352.08, "text": " None of us bother.", "tokens": [14492, 295, 505, 8677, 13], "temperature": 0.0, "avg_logprob": -0.12010845104297557, "compression_ratio": 1.6363636363636365, "no_speech_prob": 1.1842375897685997e-05}, {"id": 567, "seek": 133680, "start": 1352.08, "end": 1354.04, "text": " But in Swift, it's totally fine.", "tokens": [583, 294, 25539, 11, 309, 311, 3879, 2489, 13], "temperature": 0.0, "avg_logprob": -0.12010845104297557, "compression_ratio": 1.6363636363636365, "no_speech_prob": 1.1842375897685997e-05}, {"id": 568, "seek": 133680, "start": 1354.04, "end": 1357.0, "text": " And then the nice thing is we can bring Python", "tokens": [400, 550, 264, 1481, 551, 307, 321, 393, 1565, 15329], "temperature": 0.0, "avg_logprob": -0.12010845104297557, "compression_ratio": 1.6363636363636365, "no_speech_prob": 1.1842375897685997e-05}, {"id": 569, "seek": 133680, "start": 1357.0, "end": 1360.3999999999999, "text": " and C and Swift together by typing import Python.", "tokens": [293, 383, 293, 25539, 1214, 538, 18444, 974, 15329, 13], "temperature": 0.0, "avg_logprob": -0.12010845104297557, "compression_ratio": 1.6363636363636365, "no_speech_prob": 1.1842375897685997e-05}, {"id": 570, "seek": 133680, "start": 1360.3999999999999, "end": 1361.3999999999999, "text": " The unholy marriage.", "tokens": [440, 517, 1289, 356, 7194, 13], "temperature": 0.0, "avg_logprob": -0.12010845104297557, "compression_ratio": 1.6363636363636365, "no_speech_prob": 1.1842375897685997e-05}, {"id": 571, "seek": 133680, "start": 1361.3999999999999, "end": 1362.9199999999998, "text": " Yeah, now we can just say,", "tokens": [865, 11, 586, 321, 393, 445, 584, 11], "temperature": 0.0, "avg_logprob": -0.12010845104297557, "compression_ratio": 1.6363636363636365, "no_speech_prob": 1.1842375897685997e-05}, {"id": 572, "seek": 133680, "start": 1362.9199999999998, "end": 1365.6399999999999, "text": " we can take our C array,", "tokens": [321, 393, 747, 527, 383, 10225, 11], "temperature": 0.0, "avg_logprob": -0.12010845104297557, "compression_ratio": 1.6363636363636365, "no_speech_prob": 1.1842375897685997e-05}, {"id": 573, "seek": 136564, "start": 1365.64, "end": 1368.24, "text": " and say make numpy array,", "tokens": [293, 584, 652, 1031, 8200, 10225, 11], "temperature": 0.0, "avg_logprob": -0.22716641426086426, "compression_ratio": 1.5153061224489797, "no_speech_prob": 1.0287282748322468e-05}, {"id": 574, "seek": 136564, "start": 1368.24, "end": 1371.24, "text": " and plot it, right?", "tokens": [293, 7542, 309, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.22716641426086426, "compression_ratio": 1.5153061224489797, "no_speech_prob": 1.0287282748322468e-05}, {"id": 575, "seek": 136564, "start": 1371.24, "end": 1374.0800000000002, "text": " So we're really bringing it all together now,", "tokens": [407, 321, 434, 534, 5062, 309, 439, 1214, 586, 11], "temperature": 0.0, "avg_logprob": -0.22716641426086426, "compression_ratio": 1.5153061224489797, "no_speech_prob": 1.0287282748322468e-05}, {"id": 576, "seek": 136564, "start": 1374.0800000000002, "end": 1377.3200000000002, "text": " and we can even use the ipython.display,", "tokens": [293, 321, 393, 754, 764, 264, 28501, 88, 11943, 13, 35238, 11], "temperature": 0.0, "avg_logprob": -0.22716641426086426, "compression_ratio": 1.5153061224489797, "no_speech_prob": 1.0287282748322468e-05}, {"id": 577, "seek": 136564, "start": 1377.3200000000002, "end": 1380.64, "text": " and we can hear some audio.", "tokens": [293, 321, 393, 1568, 512, 6278, 13], "temperature": 0.0, "avg_logprob": -0.22716641426086426, "compression_ratio": 1.5153061224489797, "no_speech_prob": 1.0287282748322468e-05}, {"id": 578, "seek": 136564, "start": 1382.6000000000001, "end": 1384.0400000000002, "text": " Hi everyone, I'm Chris.", "tokens": [2421, 1518, 11, 286, 478, 6688, 13], "temperature": 0.0, "avg_logprob": -0.22716641426086426, "compression_ratio": 1.5153061224489797, "no_speech_prob": 1.0287282748322468e-05}, {"id": 579, "seek": 136564, "start": 1384.0400000000002, "end": 1385.8000000000002, "text": " Hi everyone, hi Chris.", "tokens": [2421, 1518, 11, 4879, 6688, 13], "temperature": 0.0, "avg_logprob": -0.22716641426086426, "compression_ratio": 1.5153061224489797, "no_speech_prob": 1.0287282748322468e-05}, {"id": 580, "seek": 136564, "start": 1385.8000000000002, "end": 1386.64, "text": " Hi Jeremy.", "tokens": [2421, 17809, 13], "temperature": 0.0, "avg_logprob": -0.22716641426086426, "compression_ratio": 1.5153061224489797, "no_speech_prob": 1.0287282748322468e-05}, {"id": 581, "seek": 136564, "start": 1388.24, "end": 1389.5600000000002, "text": " Thank you Jeremy.", "tokens": [1044, 291, 17809, 13], "temperature": 0.0, "avg_logprob": -0.22716641426086426, "compression_ratio": 1.5153061224489797, "no_speech_prob": 1.0287282748322468e-05}, {"id": 582, "seek": 136564, "start": 1389.5600000000002, "end": 1390.4, "text": " My pleasure.", "tokens": [1222, 6834, 13], "temperature": 0.0, "avg_logprob": -0.22716641426086426, "compression_ratio": 1.5153061224489797, "no_speech_prob": 1.0287282748322468e-05}, {"id": 583, "seek": 136564, "start": 1392.0, "end": 1392.8400000000001, "text": " All right, so.", "tokens": [1057, 558, 11, 370, 13], "temperature": 0.0, "avg_logprob": -0.22716641426086426, "compression_ratio": 1.5153061224489797, "no_speech_prob": 1.0287282748322468e-05}, {"id": 584, "seek": 139284, "start": 1392.84, "end": 1395.84, "text": " Why did I say yes to this again?", "tokens": [1545, 630, 286, 584, 2086, 281, 341, 797, 30], "temperature": 0.0, "avg_logprob": -0.19127906385318252, "compression_ratio": 1.6015625, "no_speech_prob": 2.6265068299835548e-05}, {"id": 585, "seek": 139284, "start": 1397.0, "end": 1399.32, "text": " Okay, so this is pretty great, right?", "tokens": [1033, 11, 370, 341, 307, 1238, 869, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.19127906385318252, "compression_ratio": 1.6015625, "no_speech_prob": 2.6265068299835548e-05}, {"id": 586, "seek": 139284, "start": 1399.32, "end": 1403.8799999999999, "text": " We've got Swift libraries, C libraries, Python libraries.", "tokens": [492, 600, 658, 25539, 15148, 11, 383, 15148, 11, 15329, 15148, 13], "temperature": 0.0, "avg_logprob": -0.19127906385318252, "compression_ratio": 1.6015625, "no_speech_prob": 2.6265068299835548e-05}, {"id": 587, "seek": 139284, "start": 1403.8799999999999, "end": 1404.9599999999998, "text": " We can bring them all together.", "tokens": [492, 393, 1565, 552, 439, 1214, 13], "temperature": 0.0, "avg_logprob": -0.19127906385318252, "compression_ratio": 1.6015625, "no_speech_prob": 2.6265068299835548e-05}, {"id": 588, "seek": 139284, "start": 1404.9599999999998, "end": 1408.6399999999999, "text": " We can do stuff that our peers aren't doing yet.", "tokens": [492, 393, 360, 1507, 300, 527, 16739, 3212, 380, 884, 1939, 13], "temperature": 0.0, "avg_logprob": -0.19127906385318252, "compression_ratio": 1.6015625, "no_speech_prob": 2.6265068299835548e-05}, {"id": 589, "seek": 139284, "start": 1408.6399999999999, "end": 1410.0, "text": " But what I want to know, Chris,", "tokens": [583, 437, 286, 528, 281, 458, 11, 6688, 11], "temperature": 0.0, "avg_logprob": -0.19127906385318252, "compression_ratio": 1.6015625, "no_speech_prob": 2.6265068299835548e-05}, {"id": 590, "seek": 139284, "start": 1410.0, "end": 1412.3999999999999, "text": " is how the hell is this even possible?", "tokens": [307, 577, 264, 4921, 307, 341, 754, 1944, 30], "temperature": 0.0, "avg_logprob": -0.19127906385318252, "compression_ratio": 1.6015625, "no_speech_prob": 2.6265068299835548e-05}, {"id": 591, "seek": 139284, "start": 1413.24, "end": 1414.72, "text": " Wow, okay.", "tokens": [3153, 11, 1392, 13], "temperature": 0.0, "avg_logprob": -0.19127906385318252, "compression_ratio": 1.6015625, "no_speech_prob": 2.6265068299835548e-05}, {"id": 592, "seek": 139284, "start": 1414.72, "end": 1416.9599999999998, "text": " You're a guy that likes to look under the covers,", "tokens": [509, 434, 257, 2146, 300, 5902, 281, 574, 833, 264, 10538, 11], "temperature": 0.0, "avg_logprob": -0.19127906385318252, "compression_ratio": 1.6015625, "no_speech_prob": 2.6265068299835548e-05}, {"id": 593, "seek": 139284, "start": 1416.9599999999998, "end": 1417.8, "text": " or under the hood.", "tokens": [420, 833, 264, 13376, 13], "temperature": 0.0, "avg_logprob": -0.19127906385318252, "compression_ratio": 1.6015625, "no_speech_prob": 2.6265068299835548e-05}, {"id": 594, "seek": 139284, "start": 1419.4399999999998, "end": 1421.12, "text": " Where's the lift?", "tokens": [2305, 311, 264, 5533, 30], "temperature": 0.0, "avg_logprob": -0.19127906385318252, "compression_ratio": 1.6015625, "no_speech_prob": 2.6265068299835548e-05}, {"id": 595, "seek": 139284, "start": 1421.12, "end": 1422.76, "text": " Cool, so let's talk about this.", "tokens": [8561, 11, 370, 718, 311, 751, 466, 341, 13], "temperature": 0.0, "avg_logprob": -0.19127906385318252, "compression_ratio": 1.6015625, "no_speech_prob": 2.6265068299835548e-05}, {"id": 596, "seek": 142276, "start": 1422.76, "end": 1425.32, "text": " C is really a very simple language,", "tokens": [383, 307, 534, 257, 588, 2199, 2856, 11], "temperature": 0.0, "avg_logprob": -0.09852777305224263, "compression_ratio": 1.6923076923076923, "no_speech_prob": 2.5453700800426304e-05}, {"id": 597, "seek": 142276, "start": 1425.32, "end": 1427.56, "text": " so it should be no problem to do this, right?", "tokens": [370, 309, 820, 312, 572, 1154, 281, 360, 341, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.09852777305224263, "compression_ratio": 1.6923076923076923, "no_speech_prob": 2.5453700800426304e-05}, {"id": 598, "seek": 142276, "start": 1427.56, "end": 1430.56, "text": " So C is two things, actually.", "tokens": [407, 383, 307, 732, 721, 11, 767, 13], "temperature": 0.0, "avg_logprob": -0.09852777305224263, "compression_ratio": 1.6923076923076923, "no_speech_prob": 2.5453700800426304e-05}, {"id": 599, "seek": 142276, "start": 1430.56, "end": 1432.12, "text": " It's really important.", "tokens": [467, 311, 534, 1021, 13], "temperature": 0.0, "avg_logprob": -0.09852777305224263, "compression_ratio": 1.6923076923076923, "no_speech_prob": 2.5453700800426304e-05}, {"id": 600, "seek": 142276, "start": 1432.12, "end": 1433.24, "text": " I think you were just talking about", "tokens": [286, 519, 291, 645, 445, 1417, 466], "temperature": 0.0, "avg_logprob": -0.09852777305224263, "compression_ratio": 1.6923076923076923, "no_speech_prob": 2.5453700800426304e-05}, {"id": 601, "seek": 142276, "start": 1433.24, "end": 1434.6, "text": " why it's actually very useful.", "tokens": [983, 309, 311, 767, 588, 4420, 13], "temperature": 0.0, "avg_logprob": -0.09852777305224263, "compression_ratio": 1.6923076923076923, "no_speech_prob": 2.5453700800426304e-05}, {"id": 602, "seek": 142276, "start": 1434.6, "end": 1436.48, "text": " There's tons of code available in C.", "tokens": [821, 311, 9131, 295, 3089, 2435, 294, 383, 13], "temperature": 0.0, "avg_logprob": -0.09852777305224263, "compression_ratio": 1.6923076923076923, "no_speech_prob": 2.5453700800426304e-05}, {"id": 603, "seek": 142276, "start": 1436.48, "end": 1438.72, "text": " A lot of that C is really useful.", "tokens": [316, 688, 295, 300, 383, 307, 534, 4420, 13], "temperature": 0.0, "avg_logprob": -0.09852777305224263, "compression_ratio": 1.6923076923076923, "no_speech_prob": 2.5453700800426304e-05}, {"id": 604, "seek": 142276, "start": 1438.72, "end": 1441.12, "text": " But C's actually a terrible, crazy,", "tokens": [583, 383, 311, 767, 257, 6237, 11, 3219, 11], "temperature": 0.0, "avg_logprob": -0.09852777305224263, "compression_ratio": 1.6923076923076923, "no_speech_prob": 2.5453700800426304e-05}, {"id": 605, "seek": 142276, "start": 1441.12, "end": 1443.28, "text": " gross language on its own, right?", "tokens": [11367, 2856, 322, 1080, 1065, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.09852777305224263, "compression_ratio": 1.6923076923076923, "no_speech_prob": 2.5453700800426304e-05}, {"id": 606, "seek": 142276, "start": 1443.28, "end": 1445.12, "text": " C has all these horrible things in it,", "tokens": [383, 575, 439, 613, 9263, 721, 294, 309, 11], "temperature": 0.0, "avg_logprob": -0.09852777305224263, "compression_ratio": 1.6923076923076923, "no_speech_prob": 2.5453700800426304e-05}, {"id": 607, "seek": 142276, "start": 1445.12, "end": 1448.8799999999999, "text": " like pointers that are horribly unsafe.", "tokens": [411, 44548, 300, 366, 45028, 35948, 13], "temperature": 0.0, "avg_logprob": -0.09852777305224263, "compression_ratio": 1.6923076923076923, "no_speech_prob": 2.5453700800426304e-05}, {"id": 608, "seek": 142276, "start": 1448.8799999999999, "end": 1450.44, "text": " And we have a question.", "tokens": [400, 321, 362, 257, 1168, 13], "temperature": 0.0, "avg_logprob": -0.09852777305224263, "compression_ratio": 1.6923076923076923, "no_speech_prob": 2.5453700800426304e-05}, {"id": 609, "seek": 142276, "start": 1450.44, "end": 1451.96, "text": " Oh, let's do it.", "tokens": [876, 11, 718, 311, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.09852777305224263, "compression_ratio": 1.6923076923076923, "no_speech_prob": 2.5453700800426304e-05}, {"id": 610, "seek": 145196, "start": 1451.96, "end": 1454.8, "text": " Is it possible to achieve similar results in Python", "tokens": [1119, 309, 1944, 281, 4584, 2531, 3542, 294, 15329], "temperature": 0.0, "avg_logprob": -0.16727453054383742, "compression_ratio": 1.4607843137254901, "no_speech_prob": 4.029088358947774e-06}, {"id": 611, "seek": 145196, "start": 1454.8, "end": 1457.28, "text": " using something like Cython?", "tokens": [1228, 746, 411, 10295, 11943, 30], "temperature": 0.0, "avg_logprob": -0.16727453054383742, "compression_ratio": 1.4607843137254901, "no_speech_prob": 4.029088358947774e-06}, {"id": 612, "seek": 145196, "start": 1457.28, "end": 1458.1200000000001, "text": " Yeah, absolutely.", "tokens": [865, 11, 3122, 13], "temperature": 0.0, "avg_logprob": -0.16727453054383742, "compression_ratio": 1.4607843137254901, "no_speech_prob": 4.029088358947774e-06}, {"id": 613, "seek": 145196, "start": 1458.1200000000001, "end": 1463.1200000000001, "text": " So Cython is a Python-like language", "tokens": [407, 10295, 11943, 307, 257, 15329, 12, 4092, 2856], "temperature": 0.0, "avg_logprob": -0.16727453054383742, "compression_ratio": 1.4607843137254901, "no_speech_prob": 4.029088358947774e-06}, {"id": 614, "seek": 145196, "start": 1463.24, "end": 1465.24, "text": " which compiles to C.", "tokens": [597, 715, 4680, 281, 383, 13], "temperature": 0.0, "avg_logprob": -0.16727453054383742, "compression_ratio": 1.4607843137254901, "no_speech_prob": 4.029088358947774e-06}, {"id": 615, "seek": 145196, "start": 1466.76, "end": 1471.76, "text": " And I would generally rather write Cython", "tokens": [400, 286, 576, 5101, 2831, 2464, 10295, 11943], "temperature": 0.0, "avg_logprob": -0.16727453054383742, "compression_ratio": 1.4607843137254901, "no_speech_prob": 4.029088358947774e-06}, {"id": 616, "seek": 145196, "start": 1472.88, "end": 1477.24, "text": " than C for integrating C with Python.", "tokens": [813, 383, 337, 26889, 383, 365, 15329, 13], "temperature": 0.0, "avg_logprob": -0.16727453054383742, "compression_ratio": 1.4607843137254901, "no_speech_prob": 4.029088358947774e-06}, {"id": 617, "seek": 145196, "start": 1477.24, "end": 1479.72, "text": " You still kind of, it's actually easier", "tokens": [509, 920, 733, 295, 11, 309, 311, 767, 3571], "temperature": 0.0, "avg_logprob": -0.16727453054383742, "compression_ratio": 1.4607843137254901, "no_speech_prob": 4.029088358947774e-06}, {"id": 618, "seek": 145196, "start": 1479.72, "end": 1480.64, "text": " in a Jupyter notebook,", "tokens": [294, 257, 22125, 88, 391, 21060, 11], "temperature": 0.0, "avg_logprob": -0.16727453054383742, "compression_ratio": 1.4607843137254901, "no_speech_prob": 4.029088358947774e-06}, {"id": 619, "seek": 148064, "start": 1480.64, "end": 1482.5600000000002, "text": " because you can just say %%Cython", "tokens": [570, 291, 393, 445, 584, 14189, 4, 34, 88, 11943], "temperature": 0.0, "avg_logprob": -0.11836015743060704, "compression_ratio": 1.6896551724137931, "no_speech_prob": 2.9305081625352614e-05}, {"id": 620, "seek": 148064, "start": 1482.5600000000002, "end": 1483.48, "text": " and kind of integrate it.", "tokens": [293, 733, 295, 13365, 309, 13], "temperature": 0.0, "avg_logprob": -0.11836015743060704, "compression_ratio": 1.6896551724137931, "no_speech_prob": 2.9305081625352614e-05}, {"id": 621, "seek": 148064, "start": 1483.48, "end": 1486.48, "text": " But as soon as you want to start shipping a module", "tokens": [583, 382, 2321, 382, 291, 528, 281, 722, 14122, 257, 10088], "temperature": 0.0, "avg_logprob": -0.11836015743060704, "compression_ratio": 1.6896551724137931, "no_speech_prob": 2.9305081625352614e-05}, {"id": 622, "seek": 148064, "start": 1486.48, "end": 1487.3200000000002, "text": " with that thing,", "tokens": [365, 300, 551, 11], "temperature": 0.0, "avg_logprob": -0.11836015743060704, "compression_ratio": 1.6896551724137931, "no_speech_prob": 2.9305081625352614e-05}, {"id": 623, "seek": 148064, "start": 1487.3200000000002, "end": 1490.0, "text": " which presumably is the purpose is you want to share it,", "tokens": [597, 26742, 307, 264, 4334, 307, 291, 528, 281, 2073, 309, 11], "temperature": 0.0, "avg_logprob": -0.11836015743060704, "compression_ratio": 1.6896551724137931, "no_speech_prob": 2.9305081625352614e-05}, {"id": 624, "seek": 148064, "start": 1490.0, "end": 1492.2, "text": " you then have to deal with like build scripts", "tokens": [291, 550, 362, 281, 2028, 365, 411, 1322, 23294], "temperature": 0.0, "avg_logprob": -0.11836015743060704, "compression_ratio": 1.6896551724137931, "no_speech_prob": 2.9305081625352614e-05}, {"id": 625, "seek": 148064, "start": 1492.2, "end": 1493.5600000000002, "text": " and stuff like that.", "tokens": [293, 1507, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.11836015743060704, "compression_ratio": 1.6896551724137931, "no_speech_prob": 2.9305081625352614e-05}, {"id": 626, "seek": 148064, "start": 1493.5600000000002, "end": 1495.64, "text": " So like Cython has done an amazing job", "tokens": [407, 411, 10295, 11943, 575, 1096, 364, 2243, 1691], "temperature": 0.0, "avg_logprob": -0.11836015743060704, "compression_ratio": 1.6896551724137931, "no_speech_prob": 2.9305081625352614e-05}, {"id": 627, "seek": 148064, "start": 1495.64, "end": 1500.0400000000002, "text": " of kind of making it as easy as possible.", "tokens": [295, 733, 295, 1455, 309, 382, 1858, 382, 1944, 13], "temperature": 0.0, "avg_logprob": -0.11836015743060704, "compression_ratio": 1.6896551724137931, "no_speech_prob": 2.9305081625352614e-05}, {"id": 628, "seek": 148064, "start": 1501.16, "end": 1503.72, "text": " But I personally have tried to do quite a lot with Cython", "tokens": [583, 286, 5665, 362, 3031, 281, 360, 1596, 257, 688, 365, 10295, 11943], "temperature": 0.0, "avg_logprob": -0.11836015743060704, "compression_ratio": 1.6896551724137931, "no_speech_prob": 2.9305081625352614e-05}, {"id": 629, "seek": 148064, "start": 1503.72, "end": 1506.6000000000001, "text": " in the last few months and ended up swearing off it,", "tokens": [294, 264, 1036, 1326, 2493, 293, 4590, 493, 2484, 1921, 766, 309, 11], "temperature": 0.0, "avg_logprob": -0.11836015743060704, "compression_ratio": 1.6896551724137931, "no_speech_prob": 2.9305081625352614e-05}, {"id": 630, "seek": 148064, "start": 1506.6000000000001, "end": 1509.64, "text": " because it's just still not convenient enough.", "tokens": [570, 309, 311, 445, 920, 406, 10851, 1547, 13], "temperature": 0.0, "avg_logprob": -0.11836015743060704, "compression_ratio": 1.6896551724137931, "no_speech_prob": 2.9305081625352614e-05}, {"id": 631, "seek": 150964, "start": 1509.64, "end": 1513.16, "text": " I can't quite use a normal debugger and a normal profiler", "tokens": [286, 393, 380, 1596, 764, 257, 2710, 24083, 1321, 293, 257, 2710, 1740, 5441], "temperature": 0.0, "avg_logprob": -0.11875075764126247, "compression_ratio": 1.6700680272108843, "no_speech_prob": 1.1299896868877113e-05}, {"id": 632, "seek": 150964, "start": 1513.16, "end": 1516.0, "text": " and just ship the code directly.", "tokens": [293, 445, 5374, 264, 3089, 3838, 13], "temperature": 0.0, "avg_logprob": -0.11875075764126247, "compression_ratio": 1.6700680272108843, "no_speech_prob": 1.1299896868877113e-05}, {"id": 633, "seek": 150964, "start": 1516.0, "end": 1520.24, "text": " And it's still, yeah, it's great for Python", "tokens": [400, 309, 311, 920, 11, 1338, 11, 309, 311, 869, 337, 15329], "temperature": 0.0, "avg_logprob": -0.11875075764126247, "compression_ratio": 1.6700680272108843, "no_speech_prob": 1.1299896868877113e-05}, {"id": 634, "seek": 150964, "start": 1520.24, "end": 1521.24, "text": " if that's what you're working with,", "tokens": [498, 300, 311, 437, 291, 434, 1364, 365, 11], "temperature": 0.0, "avg_logprob": -0.11875075764126247, "compression_ratio": 1.6700680272108843, "no_speech_prob": 1.1299896868877113e-05}, {"id": 635, "seek": 150964, "start": 1521.24, "end": 1523.44, "text": " but it's nowhere near as convenient for like,", "tokens": [457, 309, 311, 11159, 2651, 382, 10851, 337, 411, 11], "temperature": 0.0, "avg_logprob": -0.11875075764126247, "compression_ratio": 1.6700680272108843, "no_speech_prob": 1.1299896868877113e-05}, {"id": 636, "seek": 150964, "start": 1523.44, "end": 1525.76, "text": " I've created Swift C libraries.", "tokens": [286, 600, 2942, 25539, 383, 15148, 13], "temperature": 0.0, "avg_logprob": -0.11875075764126247, "compression_ratio": 1.6700680272108843, "no_speech_prob": 1.1299896868877113e-05}, {"id": 637, "seek": 150964, "start": 1525.76, "end": 1527.5200000000002, "text": " I created a Swift C library within a week", "tokens": [286, 2942, 257, 25539, 383, 6405, 1951, 257, 1243], "temperature": 0.0, "avg_logprob": -0.11875075764126247, "compression_ratio": 1.6700680272108843, "no_speech_prob": 1.1299896868877113e-05}, {"id": 638, "seek": 150964, "start": 1527.5200000000002, "end": 1528.68, "text": " of starting to use Swift.", "tokens": [295, 2891, 281, 764, 25539, 13], "temperature": 0.0, "avg_logprob": -0.11875075764126247, "compression_ratio": 1.6700680272108843, "no_speech_prob": 1.1299896868877113e-05}, {"id": 639, "seek": 150964, "start": 1528.68, "end": 1530.0400000000002, "text": " It was just very natural.", "tokens": [467, 390, 445, 588, 3303, 13], "temperature": 0.0, "avg_logprob": -0.11875075764126247, "compression_ratio": 1.6700680272108843, "no_speech_prob": 1.1299896868877113e-05}, {"id": 640, "seek": 150964, "start": 1530.96, "end": 1531.8000000000002, "text": " Cool.", "tokens": [8561, 13], "temperature": 0.0, "avg_logprob": -0.11875075764126247, "compression_ratio": 1.6700680272108843, "no_speech_prob": 1.1299896868877113e-05}, {"id": 641, "seek": 150964, "start": 1531.8000000000002, "end": 1533.0800000000002, "text": " And so the thing I want to underscore here", "tokens": [400, 370, 264, 551, 286, 528, 281, 37556, 510], "temperature": 0.0, "avg_logprob": -0.11875075764126247, "compression_ratio": 1.6700680272108843, "no_speech_prob": 1.1299896868877113e-05}, {"id": 642, "seek": 150964, "start": 1533.0800000000002, "end": 1535.4, "text": " is that C is actually really complicated.", "tokens": [307, 300, 383, 307, 767, 534, 6179, 13], "temperature": 0.0, "avg_logprob": -0.11875075764126247, "compression_ratio": 1.6700680272108843, "no_speech_prob": 1.1299896868877113e-05}, {"id": 643, "seek": 150964, "start": 1535.4, "end": 1537.96, "text": " C has macros, it's got this pre-processor thing going on.", "tokens": [383, 575, 7912, 2635, 11, 309, 311, 658, 341, 659, 12, 4318, 25432, 551, 516, 322, 13], "temperature": 0.0, "avg_logprob": -0.11875075764126247, "compression_ratio": 1.6700680272108843, "no_speech_prob": 1.1299896868877113e-05}, {"id": 644, "seek": 153796, "start": 1537.96, "end": 1540.32, "text": " It's got bit fields and unions and it's weird notion", "tokens": [467, 311, 658, 857, 7909, 293, 24914, 293, 309, 311, 3657, 10710], "temperature": 0.0, "avg_logprob": -0.12899580266740587, "compression_ratio": 1.6521739130434783, "no_speech_prob": 8.011433237697929e-06}, {"id": 645, "seek": 153796, "start": 1540.32, "end": 1541.6000000000001, "text": " of what vargs are.", "tokens": [295, 437, 1374, 21559, 366, 13], "temperature": 0.0, "avg_logprob": -0.12899580266740587, "compression_ratio": 1.6521739130434783, "no_speech_prob": 8.011433237697929e-06}, {"id": 646, "seek": 153796, "start": 1541.6000000000001, "end": 1543.6000000000001, "text": " It's got volatile, it's got all this crazy stuff", "tokens": [467, 311, 658, 34377, 11, 309, 311, 658, 439, 341, 3219, 1507], "temperature": 0.0, "avg_logprob": -0.12899580266740587, "compression_ratio": 1.6521739130434783, "no_speech_prob": 8.011433237697929e-06}, {"id": 647, "seek": 153796, "start": 1543.6000000000001, "end": 1548.24, "text": " that the grammar is context sensitive and gross.", "tokens": [300, 264, 22317, 307, 4319, 9477, 293, 11367, 13], "temperature": 0.0, "avg_logprob": -0.12899580266740587, "compression_ratio": 1.6521739130434783, "no_speech_prob": 8.011433237697929e-06}, {"id": 648, "seek": 153796, "start": 1548.24, "end": 1551.2, "text": " And so it's just actually really hard to deal with.", "tokens": [400, 370, 309, 311, 445, 767, 534, 1152, 281, 2028, 365, 13], "temperature": 0.0, "avg_logprob": -0.12899580266740587, "compression_ratio": 1.6521739130434783, "no_speech_prob": 8.011433237697929e-06}, {"id": 649, "seek": 153796, "start": 1551.2, "end": 1553.4, "text": " You sound like somebody who's been through the process", "tokens": [509, 1626, 411, 2618, 567, 311, 668, 807, 264, 1399], "temperature": 0.0, "avg_logprob": -0.12899580266740587, "compression_ratio": 1.6521739130434783, "no_speech_prob": 8.011433237697929e-06}, {"id": 650, "seek": 153796, "start": 1553.4, "end": 1555.8400000000001, "text": " of writing a C compiler and came out the other side.", "tokens": [295, 3579, 257, 383, 31958, 293, 1361, 484, 264, 661, 1252, 13], "temperature": 0.0, "avg_logprob": -0.12899580266740587, "compression_ratio": 1.6521739130434783, "no_speech_prob": 8.011433237697929e-06}, {"id": 651, "seek": 153796, "start": 1555.8400000000001, "end": 1558.0, "text": " Well, so the only thing worse than C is C++.", "tokens": [1042, 11, 370, 264, 787, 551, 5324, 813, 383, 307, 383, 25472, 13], "temperature": 0.0, "avg_logprob": -0.12899580266740587, "compression_ratio": 1.6521739130434783, "no_speech_prob": 8.011433237697929e-06}, {"id": 652, "seek": 153796, "start": 1558.0, "end": 1559.68, "text": " Uh-huh.", "tokens": [4019, 12, 18710, 13], "temperature": 0.0, "avg_logprob": -0.12899580266740587, "compression_ratio": 1.6521739130434783, "no_speech_prob": 8.011433237697929e-06}, {"id": 653, "seek": 153796, "start": 1559.68, "end": 1563.24, "text": " And it has this like dual side of it.", "tokens": [400, 309, 575, 341, 411, 11848, 1252, 295, 309, 13], "temperature": 0.0, "avg_logprob": -0.12899580266740587, "compression_ratio": 1.6521739130434783, "no_speech_prob": 8.011433237697929e-06}, {"id": 654, "seek": 153796, "start": 1563.24, "end": 1565.96, "text": " It's both more gross and huge,", "tokens": [467, 311, 1293, 544, 11367, 293, 2603, 11], "temperature": 0.0, "avg_logprob": -0.12899580266740587, "compression_ratio": 1.6521739130434783, "no_speech_prob": 8.011433237697929e-06}, {"id": 655, "seek": 153796, "start": 1565.96, "end": 1567.8, "text": " and it's also more important in some ways.", "tokens": [293, 309, 311, 611, 544, 1021, 294, 512, 2098, 13], "temperature": 0.0, "avg_logprob": -0.12899580266740587, "compression_ratio": 1.6521739130434783, "no_speech_prob": 8.011433237697929e-06}, {"id": 656, "seek": 156780, "start": 1567.8, "end": 1570.76, "text": " And so Swift doesn't integrate with C++ today,", "tokens": [400, 370, 25539, 1177, 380, 13365, 365, 383, 25472, 965, 11], "temperature": 0.0, "avg_logprob": -0.07416306772539692, "compression_ratio": 1.7993311036789297, "no_speech_prob": 1.0287894838256761e-05}, {"id": 657, "seek": 156780, "start": 1570.76, "end": 1571.8, "text": " but we want to be able to.", "tokens": [457, 321, 528, 281, 312, 1075, 281, 13], "temperature": 0.0, "avg_logprob": -0.07416306772539692, "compression_ratio": 1.7993311036789297, "no_speech_prob": 1.0287894838256761e-05}, {"id": 658, "seek": 156780, "start": 1571.8, "end": 1573.84, "text": " We want to be able to provide the same level of integration", "tokens": [492, 528, 281, 312, 1075, 281, 2893, 264, 912, 1496, 295, 10980], "temperature": 0.0, "avg_logprob": -0.07416306772539692, "compression_ratio": 1.7993311036789297, "no_speech_prob": 1.0287894838256761e-05}, {"id": 659, "seek": 156780, "start": 1573.84, "end": 1575.84, "text": " that you just saw with C and C++.", "tokens": [300, 291, 445, 1866, 365, 383, 293, 383, 25472, 13], "temperature": 0.0, "avg_logprob": -0.07416306772539692, "compression_ratio": 1.7993311036789297, "no_speech_prob": 1.0287894838256761e-05}, {"id": 660, "seek": 156780, "start": 1575.84, "end": 1577.6, "text": " But how are we going to do that?", "tokens": [583, 577, 366, 321, 516, 281, 360, 300, 30], "temperature": 0.0, "avg_logprob": -0.07416306772539692, "compression_ratio": 1.7993311036789297, "no_speech_prob": 1.0287894838256761e-05}, {"id": 661, "seek": 156780, "start": 1577.6, "end": 1581.28, "text": " Well, Swift loves C APIs like Jeremy was just saying.", "tokens": [1042, 11, 25539, 6752, 383, 21445, 411, 17809, 390, 445, 1566, 13], "temperature": 0.0, "avg_logprob": -0.07416306772539692, "compression_ratio": 1.7993311036789297, "no_speech_prob": 1.0287894838256761e-05}, {"id": 662, "seek": 156780, "start": 1581.28, "end": 1584.04, "text": " And so we love C APIs because we want you to be able", "tokens": [400, 370, 321, 959, 383, 21445, 570, 321, 528, 291, 281, 312, 1075], "temperature": 0.0, "avg_logprob": -0.07416306772539692, "compression_ratio": 1.7993311036789297, "no_speech_prob": 1.0287894838256761e-05}, {"id": 663, "seek": 156780, "start": 1584.04, "end": 1586.12, "text": " to directly access all this cool functionality", "tokens": [281, 3838, 2105, 439, 341, 1627, 14980], "temperature": 0.0, "avg_logprob": -0.07416306772539692, "compression_ratio": 1.7993311036789297, "no_speech_prob": 1.0287894838256761e-05}, {"id": 664, "seek": 156780, "start": 1586.12, "end": 1587.24, "text": " that exists in the world.", "tokens": [300, 8198, 294, 264, 1002, 13], "temperature": 0.0, "avg_logprob": -0.07416306772539692, "compression_ratio": 1.7993311036789297, "no_speech_prob": 1.0287894838256761e-05}, {"id": 665, "seek": 156780, "start": 1587.24, "end": 1589.04, "text": " And so the way it works, as you just saw,", "tokens": [400, 370, 264, 636, 309, 1985, 11, 382, 291, 445, 1866, 11], "temperature": 0.0, "avg_logprob": -0.07416306772539692, "compression_ratio": 1.7993311036789297, "no_speech_prob": 1.0287894838256761e-05}, {"id": 666, "seek": 156780, "start": 1589.04, "end": 1592.44, "text": " is we take the C ideas and remap them into Swift.", "tokens": [307, 321, 747, 264, 383, 3487, 293, 890, 569, 552, 666, 25539, 13], "temperature": 0.0, "avg_logprob": -0.07416306772539692, "compression_ratio": 1.7993311036789297, "no_speech_prob": 1.0287894838256761e-05}, {"id": 667, "seek": 156780, "start": 1592.44, "end": 1593.72, "text": " And so because of that,", "tokens": [400, 370, 570, 295, 300, 11], "temperature": 0.0, "avg_logprob": -0.07416306772539692, "compression_ratio": 1.7993311036789297, "no_speech_prob": 1.0287894838256761e-05}, {"id": 668, "seek": 156780, "start": 1593.72, "end": 1596.84, "text": " because they're native pure Swift things,", "tokens": [570, 436, 434, 8470, 6075, 25539, 721, 11], "temperature": 0.0, "avg_logprob": -0.07416306772539692, "compression_ratio": 1.7993311036789297, "no_speech_prob": 1.0287894838256761e-05}, {"id": 669, "seek": 159684, "start": 1596.84, "end": 1598.1599999999999, "text": " that's where you get the debugger integration.", "tokens": [300, 311, 689, 291, 483, 264, 24083, 1321, 10980, 13], "temperature": 0.0, "avg_logprob": -0.1378616973431441, "compression_ratio": 1.7785714285714285, "no_speech_prob": 5.421512014436303e-06}, {"id": 670, "seek": 159684, "start": 1598.1599999999999, "end": 1599.28, "text": " That's where you get code completion.", "tokens": [663, 311, 689, 291, 483, 3089, 19372, 13], "temperature": 0.0, "avg_logprob": -0.1378616973431441, "compression_ratio": 1.7785714285714285, "no_speech_prob": 5.421512014436303e-06}, {"id": 671, "seek": 159684, "start": 1599.28, "end": 1601.1999999999998, "text": " That's where you get all the things you expect to work", "tokens": [663, 311, 689, 291, 483, 439, 264, 721, 291, 2066, 281, 589], "temperature": 0.0, "avg_logprob": -0.1378616973431441, "compression_ratio": 1.7785714285714285, "no_speech_prob": 5.421512014436303e-06}, {"id": 672, "seek": 159684, "start": 1601.1999999999998, "end": 1606.76, "text": " in Swift talking to dusty deck old grody C code from the 80s", "tokens": [294, 25539, 1417, 281, 41973, 9341, 1331, 4634, 3173, 383, 3089, 490, 264, 4688, 82], "temperature": 0.0, "avg_logprob": -0.1378616973431441, "compression_ratio": 1.7785714285714285, "no_speech_prob": 5.421512014436303e-06}, {"id": 673, "seek": 159684, "start": 1606.76, "end": 1609.72, "text": " or wherever you got it from, whatever epoch.", "tokens": [420, 8660, 291, 658, 309, 490, 11, 2035, 30992, 339, 13], "temperature": 0.0, "avg_logprob": -0.1378616973431441, "compression_ratio": 1.7785714285714285, "no_speech_prob": 5.421512014436303e-06}, {"id": 674, "seek": 159684, "start": 1609.72, "end": 1613.76, "text": " And so, and we also don't want to have wrappers or overhead", "tokens": [400, 370, 11, 293, 321, 611, 500, 380, 528, 281, 362, 7843, 15226, 420, 19922], "temperature": 0.0, "avg_logprob": -0.1378616973431441, "compression_ratio": 1.7785714285714285, "no_speech_prob": 5.421512014436303e-06}, {"id": 675, "seek": 159684, "start": 1613.76, "end": 1617.1999999999998, "text": " because that's totally not what Swift's about.", "tokens": [570, 300, 311, 3879, 406, 437, 25539, 311, 466, 13], "temperature": 0.0, "avg_logprob": -0.1378616973431441, "compression_ratio": 1.7785714285714285, "no_speech_prob": 5.421512014436303e-06}, {"id": 676, "seek": 159684, "start": 1617.1999999999998, "end": 1619.56, "text": " So Jeremy showed you that usually", "tokens": [407, 17809, 4712, 291, 300, 2673], "temperature": 0.0, "avg_logprob": -0.1378616973431441, "compression_ratio": 1.7785714285714285, "no_speech_prob": 5.421512014436303e-06}, {"id": 677, "seek": 159684, "start": 1619.56, "end": 1623.1599999999999, "text": " when you import the C API into Swift, it looks like a C API.", "tokens": [562, 291, 974, 264, 383, 9362, 666, 25539, 11, 309, 1542, 411, 257, 383, 9362, 13], "temperature": 0.0, "avg_logprob": -0.1378616973431441, "compression_ratio": 1.7785714285714285, "no_speech_prob": 5.421512014436303e-06}, {"id": 678, "seek": 159684, "start": 1623.1599999999999, "end": 1624.72, "text": " And so you could, but the nice thing about that is", "tokens": [400, 370, 291, 727, 11, 457, 264, 1481, 551, 466, 300, 307], "temperature": 0.0, "avg_logprob": -0.1378616973431441, "compression_ratio": 1.7785714285714285, "no_speech_prob": 5.421512014436303e-06}, {"id": 679, "seek": 162472, "start": 1624.72, "end": 1627.4, "text": " that you can build the APIs that you want to wrap it", "tokens": [300, 291, 393, 1322, 264, 21445, 300, 291, 528, 281, 7019, 309], "temperature": 0.0, "avg_logprob": -0.11285625620091215, "compression_ratio": 1.7321428571428572, "no_speech_prob": 9.971730833058245e-06}, {"id": 680, "seek": 162472, "start": 1627.4, "end": 1628.6000000000001, "text": " and you can build your abstractions", "tokens": [293, 291, 393, 1322, 428, 12649, 626], "temperature": 0.0, "avg_logprob": -0.11285625620091215, "compression_ratio": 1.7321428571428572, "no_speech_prob": 9.971730833058245e-06}, {"id": 681, "seek": 162472, "start": 1628.6000000000001, "end": 1631.1200000000001, "text": " and make that all good in Swift.", "tokens": [293, 652, 300, 439, 665, 294, 25539, 13], "temperature": 0.0, "avg_logprob": -0.11285625620091215, "compression_ratio": 1.7321428571428572, "no_speech_prob": 9.971730833058245e-06}, {"id": 682, "seek": 162472, "start": 1631.1200000000001, "end": 1633.1200000000001, "text": " So one of the ways this happens is", "tokens": [407, 472, 295, 264, 2098, 341, 2314, 307], "temperature": 0.0, "avg_logprob": -0.11285625620091215, "compression_ratio": 1.7321428571428572, "no_speech_prob": 9.971730833058245e-06}, {"id": 683, "seek": 162472, "start": 1633.1200000000001, "end": 1634.88, "text": " that inside the Swift compiler,", "tokens": [300, 1854, 264, 25539, 31958, 11], "temperature": 0.0, "avg_logprob": -0.11285625620091215, "compression_ratio": 1.7321428571428572, "no_speech_prob": 9.971730833058245e-06}, {"id": 684, "seek": 162472, "start": 1634.88, "end": 1638.08, "text": " it can actually read C header files.", "tokens": [309, 393, 767, 1401, 383, 23117, 7098, 13], "temperature": 0.0, "avg_logprob": -0.11285625620091215, "compression_ratio": 1.7321428571428572, "no_speech_prob": 9.971730833058245e-06}, {"id": 685, "seek": 162472, "start": 1638.08, "end": 1641.16, "text": " And so we don't have a great way to plug this", "tokens": [400, 370, 321, 500, 380, 362, 257, 869, 636, 281, 5452, 341], "temperature": 0.0, "avg_logprob": -0.11285625620091215, "compression_ratio": 1.7321428571428572, "no_speech_prob": 9.971730833058245e-06}, {"id": 686, "seek": 162472, "start": 1641.16, "end": 1642.68, "text": " into workbooks quite yet.", "tokens": [666, 589, 15170, 1596, 1939, 13], "temperature": 0.0, "avg_logprob": -0.11285625620091215, "compression_ratio": 1.7321428571428572, "no_speech_prob": 9.971730833058245e-06}, {"id": 687, "seek": 162472, "start": 1642.68, "end": 1646.04, "text": " But Swift can actually take a C header file like math.h", "tokens": [583, 25539, 393, 767, 747, 257, 383, 23117, 3991, 411, 5221, 13, 71], "temperature": 0.0, "avg_logprob": -0.11285625620091215, "compression_ratio": 1.7321428571428572, "no_speech_prob": 9.971730833058245e-06}, {"id": 688, "seek": 162472, "start": 1646.04, "end": 1647.2, "text": " which has macros.", "tokens": [597, 575, 7912, 2635, 13], "temperature": 0.0, "avg_logprob": -0.11285625620091215, "compression_ratio": 1.7321428571428572, "no_speech_prob": 9.971730833058245e-06}, {"id": 689, "seek": 162472, "start": 1647.2, "end": 1649.76, "text": " Here's M under bar E because M", "tokens": [1692, 311, 376, 833, 2159, 462, 570, 376], "temperature": 0.0, "avg_logprob": -0.11285625620091215, "compression_ratio": 1.7321428571428572, "no_speech_prob": 9.971730833058245e-06}, {"id": 690, "seek": 162472, "start": 1649.76, "end": 1652.56, "text": " under bar E is a good way to name E apparently.", "tokens": [833, 2159, 462, 307, 257, 665, 636, 281, 1315, 462, 7970, 13], "temperature": 0.0, "avg_logprob": -0.11285625620091215, "compression_ratio": 1.7321428571428572, "no_speech_prob": 9.971730833058245e-06}, {"id": 691, "seek": 162472, "start": 1652.56, "end": 1654.28, "text": " Here's the old school square root.", "tokens": [1692, 311, 264, 1331, 1395, 3732, 5593, 13], "temperature": 0.0, "avg_logprob": -0.11285625620091215, "compression_ratio": 1.7321428571428572, "no_speech_prob": 9.971730833058245e-06}, {"id": 692, "seek": 165428, "start": 1654.28, "end": 1656.24, "text": " Here's the sine and cosine function which, you know,", "tokens": [1692, 311, 264, 18609, 293, 23565, 2445, 597, 11, 291, 458, 11], "temperature": 0.0, "avg_logprob": -0.1411968337164985, "compression_ratio": 1.7575757575757576, "no_speech_prob": 7.766690032440238e-06}, {"id": 693, "seek": 165428, "start": 1656.24, "end": 1658.92, "text": " of course it returns sine and cosine through pointers", "tokens": [295, 1164, 309, 11247, 18609, 293, 23565, 807, 44548], "temperature": 0.0, "avg_logprob": -0.1411968337164985, "compression_ratio": 1.7575757575757576, "no_speech_prob": 7.766690032440238e-06}, {"id": 694, "seek": 165428, "start": 1658.92, "end": 1661.2, "text": " because C doesn't have tuples, right?", "tokens": [570, 383, 1177, 380, 362, 2604, 2622, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1411968337164985, "compression_ratio": 1.7575757575757576, "no_speech_prob": 7.766690032440238e-06}, {"id": 695, "seek": 165428, "start": 1661.2, "end": 1664.24, "text": " And so when you import all that stuff into C, into Swift,", "tokens": [400, 370, 562, 291, 974, 439, 300, 1507, 666, 383, 11, 666, 25539, 11], "temperature": 0.0, "avg_logprob": -0.1411968337164985, "compression_ratio": 1.7575757575757576, "no_speech_prob": 7.766690032440238e-06}, {"id": 696, "seek": 165428, "start": 1664.24, "end": 1668.68, "text": " you get M under bar E as a double that you can get.", "tokens": [291, 483, 376, 833, 2159, 462, 382, 257, 3834, 300, 291, 393, 483, 13], "temperature": 0.0, "avg_logprob": -0.1411968337164985, "compression_ratio": 1.7575757575757576, "no_speech_prob": 7.766690032440238e-06}, {"id": 697, "seek": 165428, "start": 1668.68, "end": 1670.32, "text": " You have square root and you can totally call square root.", "tokens": [509, 362, 3732, 5593, 293, 291, 393, 3879, 818, 3732, 5593, 13], "temperature": 0.0, "avg_logprob": -0.1411968337164985, "compression_ratio": 1.7575757575757576, "no_speech_prob": 7.766690032440238e-06}, {"id": 698, "seek": 165428, "start": 1670.32, "end": 1671.44, "text": " You have sine and cosine.", "tokens": [509, 362, 18609, 293, 23565, 13], "temperature": 0.0, "avg_logprob": -0.1411968337164985, "compression_ratio": 1.7575757575757576, "no_speech_prob": 7.766690032440238e-06}, {"id": 699, "seek": 165428, "start": 1671.44, "end": 1673.8799999999999, "text": " You get this unsafe mutable pointer double thing", "tokens": [509, 483, 341, 35948, 5839, 712, 23918, 3834, 551], "temperature": 0.0, "avg_logprob": -0.1411968337164985, "compression_ratio": 1.7575757575757576, "no_speech_prob": 7.766690032440238e-06}, {"id": 700, "seek": 165428, "start": 1673.8799999999999, "end": 1675.56, "text": " which we'll talk about later.", "tokens": [597, 321, 603, 751, 466, 1780, 13], "temperature": 0.0, "avg_logprob": -0.1411968337164985, "compression_ratio": 1.7575757575757576, "no_speech_prob": 7.766690032440238e-06}, {"id": 701, "seek": 165428, "start": 1675.56, "end": 1679.28, "text": " Similarly, like malloc, free, realoc, all this stuff exists.", "tokens": [13157, 11, 411, 16026, 905, 11, 1737, 11, 957, 905, 11, 439, 341, 1507, 8198, 13], "temperature": 0.0, "avg_logprob": -0.1411968337164985, "compression_ratio": 1.7575757575757576, "no_speech_prob": 7.766690032440238e-06}, {"id": 702, "seek": 165428, "start": 1679.28, "end": 1682.2, "text": " And so just to show you how crazy this is,", "tokens": [400, 370, 445, 281, 855, 291, 577, 3219, 341, 307, 11], "temperature": 0.0, "avg_logprob": -0.1411968337164985, "compression_ratio": 1.7575757575757576, "no_speech_prob": 7.766690032440238e-06}, {"id": 703, "seek": 168220, "start": 1682.2, "end": 1684.28, "text": " let's see if we can do the side by side thing.", "tokens": [718, 311, 536, 498, 321, 393, 360, 264, 1252, 538, 1252, 551, 13], "temperature": 0.0, "avg_logprob": -0.1809408236772586, "compression_ratio": 1.5368852459016393, "no_speech_prob": 1.0289057172485627e-05}, {"id": 704, "seek": 168220, "start": 1684.28, "end": 1686.0800000000002, "text": " Can you make it do side by side?", "tokens": [1664, 291, 652, 309, 360, 1252, 538, 1252, 30], "temperature": 0.0, "avg_logprob": -0.1809408236772586, "compression_ratio": 1.5368852459016393, "no_speech_prob": 1.0289057172485627e-05}, {"id": 705, "seek": 168220, "start": 1686.0800000000002, "end": 1688.4, "text": " Is that a challenge?", "tokens": [1119, 300, 257, 3430, 30], "temperature": 0.0, "avg_logprob": -0.1809408236772586, "compression_ratio": 1.5368852459016393, "no_speech_prob": 1.0289057172485627e-05}, {"id": 706, "seek": 168220, "start": 1688.4, "end": 1694.52, "text": " Yes. My Windows skills are dusty.", "tokens": [1079, 13, 1222, 8591, 3942, 366, 41973, 13], "temperature": 0.0, "avg_logprob": -0.1809408236772586, "compression_ratio": 1.5368852459016393, "no_speech_prob": 1.0289057172485627e-05}, {"id": 707, "seek": 168220, "start": 1698.04, "end": 1699.3400000000001, "text": " Check it out.", "tokens": [6881, 309, 484, 13], "temperature": 0.0, "avg_logprob": -0.1809408236772586, "compression_ratio": 1.5368852459016393, "no_speech_prob": 1.0289057172485627e-05}, {"id": 708, "seek": 168220, "start": 1699.3400000000001, "end": 1700.64, "text": " Okay. Beautiful.", "tokens": [1033, 13, 14724, 13], "temperature": 0.0, "avg_logprob": -0.1809408236772586, "compression_ratio": 1.5368852459016393, "no_speech_prob": 1.0289057172485627e-05}, {"id": 709, "seek": 168220, "start": 1700.64, "end": 1702.3600000000001, "text": " So what we have here is we have the original header file,", "tokens": [407, 437, 321, 362, 510, 307, 321, 362, 264, 3380, 23117, 3991, 11], "temperature": 0.0, "avg_logprob": -0.1809408236772586, "compression_ratio": 1.5368852459016393, "no_speech_prob": 1.0289057172485627e-05}, {"id": 710, "seek": 168220, "start": 1702.3600000000001, "end": 1704.76, "text": " math.h, on the left.", "tokens": [5221, 13, 71, 11, 322, 264, 1411, 13], "temperature": 0.0, "avg_logprob": -0.1809408236772586, "compression_ratio": 1.5368852459016393, "no_speech_prob": 1.0289057172485627e-05}, {"id": 711, "seek": 168220, "start": 1704.76, "end": 1707.88, "text": " And if you look at this, you'll see lots of horrible things", "tokens": [400, 498, 291, 574, 412, 341, 11, 291, 603, 536, 3195, 295, 9263, 721], "temperature": 0.0, "avg_logprob": -0.1809408236772586, "compression_ratio": 1.5368852459016393, "no_speech_prob": 1.0289057172485627e-05}, {"id": 712, "seek": 168220, "start": 1707.88, "end": 1709.68, "text": " in C that everybody forgets about", "tokens": [294, 383, 300, 2201, 2870, 82, 466], "temperature": 0.0, "avg_logprob": -0.1809408236772586, "compression_ratio": 1.5368852459016393, "no_speech_prob": 1.0289057172485627e-05}, {"id": 713, "seek": 168220, "start": 1709.68, "end": 1711.96, "text": " because you never write C like this.", "tokens": [570, 291, 1128, 2464, 383, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.1809408236772586, "compression_ratio": 1.5368852459016393, "no_speech_prob": 1.0289057172485627e-05}, {"id": 714, "seek": 171196, "start": 1711.96, "end": 1715.2, "text": " But this is what C looks like when you're talking about libraries.", "tokens": [583, 341, 307, 437, 383, 1542, 411, 562, 291, 434, 1417, 466, 15148, 13], "temperature": 0.0, "avg_logprob": -0.12172541585001913, "compression_ratio": 1.9465020576131686, "no_speech_prob": 1.1842085768876132e-05}, {"id": 715, "seek": 171196, "start": 1715.2, "end": 1716.56, "text": " So we've got a whole bunch of if-defs.", "tokens": [407, 321, 600, 658, 257, 1379, 3840, 295, 498, 12, 20595, 82, 13], "temperature": 0.0, "avg_logprob": -0.12172541585001913, "compression_ratio": 1.9465020576131686, "no_speech_prob": 1.1842085768876132e-05}, {"id": 716, "seek": 171196, "start": 1716.56, "end": 1718.4, "text": " We've got macros.", "tokens": [492, 600, 658, 7912, 2635, 13], "temperature": 0.0, "avg_logprob": -0.12172541585001913, "compression_ratio": 1.9465020576131686, "no_speech_prob": 1.1842085768876132e-05}, {"id": 717, "seek": 171196, "start": 1718.4, "end": 1721.48, "text": " We've got like crazy macros.", "tokens": [492, 600, 658, 411, 3219, 7912, 2635, 13], "temperature": 0.0, "avg_logprob": -0.12172541585001913, "compression_ratio": 1.9465020576131686, "no_speech_prob": 1.1842085768876132e-05}, {"id": 718, "seek": 171196, "start": 1721.48, "end": 1723.52, "text": " We've got conditionally enabled things.", "tokens": [492, 600, 658, 4188, 379, 15172, 721, 13], "temperature": 0.0, "avg_logprob": -0.12172541585001913, "compression_ratio": 1.9465020576131686, "no_speech_prob": 1.1842085768876132e-05}, {"id": 719, "seek": 171196, "start": 1723.52, "end": 1726.04, "text": " We've got these things are also macros.", "tokens": [492, 600, 658, 613, 721, 366, 611, 7912, 2635, 13], "temperature": 0.0, "avg_logprob": -0.12172541585001913, "compression_ratio": 1.9465020576131686, "no_speech_prob": 1.1842085768876132e-05}, {"id": 720, "seek": 171196, "start": 1726.04, "end": 1727.44, "text": " We've got inline functions.", "tokens": [492, 600, 658, 294, 1889, 6828, 13], "temperature": 0.0, "avg_logprob": -0.12172541585001913, "compression_ratio": 1.9465020576131686, "no_speech_prob": 1.1842085768876132e-05}, {"id": 721, "seek": 171196, "start": 1727.44, "end": 1730.3600000000001, "text": " We've got tons and tons and tons of stuff.", "tokens": [492, 600, 658, 9131, 293, 9131, 293, 9131, 295, 1507, 13], "temperature": 0.0, "avg_logprob": -0.12172541585001913, "compression_ratio": 1.9465020576131686, "no_speech_prob": 1.1842085768876132e-05}, {"id": 722, "seek": 171196, "start": 1730.3600000000001, "end": 1731.64, "text": " We've got comments.", "tokens": [492, 600, 658, 3053, 13], "temperature": 0.0, "avg_logprob": -0.12172541585001913, "compression_ratio": 1.9465020576131686, "no_speech_prob": 1.1842085768876132e-05}, {"id": 723, "seek": 171196, "start": 1731.64, "end": 1735.1200000000001, "text": " We've got structures like exception, of course.", "tokens": [492, 600, 658, 9227, 411, 11183, 11, 295, 1164, 13], "temperature": 0.0, "avg_logprob": -0.12172541585001913, "compression_ratio": 1.9465020576131686, "no_speech_prob": 1.1842085768876132e-05}, {"id": 724, "seek": 171196, "start": 1735.1200000000001, "end": 1736.48, "text": " That's an exception, right?", "tokens": [663, 311, 364, 11183, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.12172541585001913, "compression_ratio": 1.9465020576131686, "no_speech_prob": 1.1842085768876132e-05}, {"id": 725, "seek": 171196, "start": 1736.48, "end": 1738.76, "text": " So when you import this into Swift,", "tokens": [407, 562, 291, 974, 341, 666, 25539, 11], "temperature": 0.0, "avg_logprob": -0.12172541585001913, "compression_ratio": 1.9465020576131686, "no_speech_prob": 1.1842085768876132e-05}, {"id": 726, "seek": 171196, "start": 1738.76, "end": 1740.56, "text": " this is what the Swift compiler sees.", "tokens": [341, 307, 437, 264, 25539, 31958, 8194, 13], "temperature": 0.0, "avg_logprob": -0.12172541585001913, "compression_ratio": 1.9465020576131686, "no_speech_prob": 1.1842085768876132e-05}, {"id": 727, "seek": 174056, "start": 1740.56, "end": 1743.6, "text": " You see something that looks very similar,", "tokens": [509, 536, 746, 300, 1542, 588, 2531, 11], "temperature": 0.0, "avg_logprob": -0.13530440153899015, "compression_ratio": 1.7279693486590038, "no_speech_prob": 6.962025963730412e-06}, {"id": 728, "seek": 174056, "start": 1743.6, "end": 1746.08, "text": " but this is all Swift syntax.", "tokens": [457, 341, 307, 439, 25539, 28431, 13], "temperature": 0.0, "avg_logprob": -0.13530440153899015, "compression_ratio": 1.7279693486590038, "no_speech_prob": 6.962025963730412e-06}, {"id": 729, "seek": 174056, "start": 1746.08, "end": 1748.24, "text": " So you see you get the header, the comments.", "tokens": [407, 291, 536, 291, 483, 264, 23117, 11, 264, 3053, 13], "temperature": 0.0, "avg_logprob": -0.13530440153899015, "compression_ratio": 1.7279693486590038, "no_speech_prob": 6.962025963730412e-06}, {"id": 730, "seek": 174056, "start": 1748.24, "end": 1749.76, "text": " You get all the same functions.", "tokens": [509, 483, 439, 264, 912, 6828, 13], "temperature": 0.0, "avg_logprob": -0.13530440153899015, "compression_ratio": 1.7279693486590038, "no_speech_prob": 6.962025963730412e-06}, {"id": 731, "seek": 174056, "start": 1749.76, "end": 1755.72, "text": " You get all of the, like here's your m under bar e.", "tokens": [509, 483, 439, 295, 264, 11, 411, 510, 311, 428, 275, 833, 2159, 308, 13], "temperature": 0.0, "avg_logprob": -0.13530440153899015, "compression_ratio": 1.7279693486590038, "no_speech_prob": 6.962025963730412e-06}, {"id": 732, "seek": 174056, "start": 1755.72, "end": 1757.56, "text": " And you get your structures as well.", "tokens": [400, 291, 483, 428, 9227, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.13530440153899015, "compression_ratio": 1.7279693486590038, "no_speech_prob": 6.962025963730412e-06}, {"id": 733, "seek": 174056, "start": 1757.56, "end": 1759.0, "text": " And this all comes right in.", "tokens": [400, 341, 439, 1487, 558, 294, 13], "temperature": 0.0, "avg_logprob": -0.13530440153899015, "compression_ratio": 1.7279693486590038, "no_speech_prob": 6.962025963730412e-06}, {"id": 734, "seek": 174056, "start": 1759.0, "end": 1761.36, "text": " And this is why Swift can see it.", "tokens": [400, 341, 307, 983, 25539, 393, 536, 309, 13], "temperature": 0.0, "avg_logprob": -0.13530440153899015, "compression_ratio": 1.7279693486590038, "no_speech_prob": 6.962025963730412e-06}, {"id": 735, "seek": 174056, "start": 1761.36, "end": 1763.2, "text": " Now, how does this work?", "tokens": [823, 11, 577, 775, 341, 589, 30], "temperature": 0.0, "avg_logprob": -0.13530440153899015, "compression_ratio": 1.7279693486590038, "no_speech_prob": 6.962025963730412e-06}, {"id": 736, "seek": 174056, "start": 1763.2, "end": 1765.28, "text": " That's the big magic question.", "tokens": [663, 311, 264, 955, 5585, 1168, 13], "temperature": 0.0, "avg_logprob": -0.13530440153899015, "compression_ratio": 1.7279693486590038, "no_speech_prob": 6.962025963730412e-06}, {"id": 737, "seek": 174056, "start": 1765.28, "end": 1766.52, "text": " So if you want to get this to work,", "tokens": [407, 498, 291, 528, 281, 483, 341, 281, 589, 11], "temperature": 0.0, "avg_logprob": -0.13530440153899015, "compression_ratio": 1.7279693486590038, "no_speech_prob": 6.962025963730412e-06}, {"id": 738, "seek": 174056, "start": 1766.52, "end": 1769.6399999999999, "text": " what you can do is you can build into the Swift compiler.", "tokens": [437, 291, 393, 360, 307, 291, 393, 1322, 666, 264, 25539, 31958, 13], "temperature": 0.0, "avg_logprob": -0.13530440153899015, "compression_ratio": 1.7279693486590038, "no_speech_prob": 6.962025963730412e-06}, {"id": 739, "seek": 176964, "start": 1769.64, "end": 1771.8000000000002, "text": " We can write a C parser, right?", "tokens": [492, 393, 2464, 257, 383, 21156, 260, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.156923598713345, "compression_ratio": 1.7451737451737452, "no_speech_prob": 1.553456741021364e-06}, {"id": 740, "seek": 176964, "start": 1771.8000000000002, "end": 1774.0, "text": " And we can implement a C preprocessor.", "tokens": [400, 321, 393, 4445, 257, 383, 2666, 340, 25432, 13], "temperature": 0.0, "avg_logprob": -0.156923598713345, "compression_ratio": 1.7451737451737452, "no_speech_prob": 1.553456741021364e-06}, {"id": 741, "seek": 176964, "start": 1774.0, "end": 1777.44, "text": " And we can implement all the weird rules in C. Someday,", "tokens": [400, 321, 393, 4445, 439, 264, 3657, 4474, 294, 383, 13, 12297, 16826, 11], "temperature": 0.0, "avg_logprob": -0.156923598713345, "compression_ratio": 1.7451737451737452, "no_speech_prob": 1.553456741021364e-06}, {"id": 742, "seek": 176964, "start": 1777.44, "end": 1780.0, "text": " we can extend it and write C++ as well.", "tokens": [321, 393, 10101, 309, 293, 2464, 383, 25472, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.156923598713345, "compression_ratio": 1.7451737451737452, "no_speech_prob": 1.553456741021364e-06}, {"id": 743, "seek": 176964, "start": 1780.0, "end": 1782.4, "text": " And we can build as this library so the Swift compiler knows", "tokens": [400, 321, 393, 1322, 382, 341, 6405, 370, 264, 25539, 31958, 3255], "temperature": 0.0, "avg_logprob": -0.156923598713345, "compression_ratio": 1.7451737451737452, "no_speech_prob": 1.553456741021364e-06}, {"id": 744, "seek": 176964, "start": 1782.4, "end": 1783.76, "text": " how to parse C code.", "tokens": [577, 281, 48377, 383, 3089, 13], "temperature": 0.0, "avg_logprob": -0.156923598713345, "compression_ratio": 1.7451737451737452, "no_speech_prob": 1.553456741021364e-06}, {"id": 745, "seek": 176964, "start": 1783.76, "end": 1786.44, "text": " And a C++ compiler is pretty easy to write.", "tokens": [400, 257, 383, 25472, 31958, 307, 1238, 1858, 281, 2464, 13], "temperature": 0.0, "avg_logprob": -0.156923598713345, "compression_ratio": 1.7451737451737452, "no_speech_prob": 1.553456741021364e-06}, {"id": 746, "seek": 176964, "start": 1786.44, "end": 1789.44, "text": " So we can hack that on a weekend.", "tokens": [407, 321, 393, 10339, 300, 322, 257, 6711, 13], "temperature": 0.0, "avg_logprob": -0.156923598713345, "compression_ratio": 1.7451737451737452, "no_speech_prob": 1.553456741021364e-06}, {"id": 747, "seek": 176964, "start": 1789.44, "end": 1793.2, "text": " Or, yay, good news, like we've already done this many years", "tokens": [1610, 11, 23986, 11, 665, 2583, 11, 411, 321, 600, 1217, 1096, 341, 867, 924], "temperature": 0.0, "avg_logprob": -0.156923598713345, "compression_ratio": 1.7451737451737452, "no_speech_prob": 1.553456741021364e-06}, {"id": 748, "seek": 176964, "start": 1793.2, "end": 1795.0400000000002, "text": " ago, it's called Clang.", "tokens": [2057, 11, 309, 311, 1219, 2033, 656, 13], "temperature": 0.0, "avg_logprob": -0.156923598713345, "compression_ratio": 1.7451737451737452, "no_speech_prob": 1.553456741021364e-06}, {"id": 749, "seek": 176964, "start": 1795.0400000000002, "end": 1798.5600000000002, "text": " So what Clang is, is it's a C++ compiler.", "tokens": [407, 437, 2033, 656, 307, 11, 307, 309, 311, 257, 383, 25472, 31958, 13], "temperature": 0.0, "avg_logprob": -0.156923598713345, "compression_ratio": 1.7451737451737452, "no_speech_prob": 1.553456741021364e-06}, {"id": 750, "seek": 179856, "start": 1798.56, "end": 1804.52, "text": " Oh, this is getting even more talk about how horrible C is.", "tokens": [876, 11, 341, 307, 1242, 754, 544, 751, 466, 577, 9263, 383, 307, 13], "temperature": 0.0, "avg_logprob": -0.10465752145518427, "compression_ratio": 1.7974137931034482, "no_speech_prob": 6.1438840930350125e-06}, {"id": 751, "seek": 179856, "start": 1804.52, "end": 1808.24, "text": " You actually get inline functions.", "tokens": [509, 767, 483, 294, 1889, 6828, 13], "temperature": 0.0, "avg_logprob": -0.10465752145518427, "compression_ratio": 1.7974137931034482, "no_speech_prob": 6.1438840930350125e-06}, {"id": 752, "seek": 179856, "start": 1808.24, "end": 1811.6799999999998, "text": " Inline functions, the insane thing about inline functions", "tokens": [682, 1889, 6828, 11, 264, 10838, 551, 466, 294, 1889, 6828], "temperature": 0.0, "avg_logprob": -0.10465752145518427, "compression_ratio": 1.7974137931034482, "no_speech_prob": 6.1438840930350125e-06}, {"id": 753, "seek": 179856, "start": 1811.6799999999998, "end": 1815.0, "text": " is that they don't exist anywhere in a program", "tokens": [307, 300, 436, 500, 380, 2514, 4992, 294, 257, 1461], "temperature": 0.0, "avg_logprob": -0.10465752145518427, "compression_ratio": 1.7974137931034482, "no_speech_prob": 6.1438840930350125e-06}, {"id": 754, "seek": 179856, "start": 1815.0, "end": 1816.8799999999999, "text": " unless you use them.", "tokens": [5969, 291, 764, 552, 13], "temperature": 0.0, "avg_logprob": -0.10465752145518427, "compression_ratio": 1.7974137931034482, "no_speech_prob": 6.1438840930350125e-06}, {"id": 755, "seek": 179856, "start": 1816.8799999999999, "end": 1817.96, "text": " They get inlined.", "tokens": [814, 483, 294, 13564, 13], "temperature": 0.0, "avg_logprob": -0.10465752145518427, "compression_ratio": 1.7974137931034482, "no_speech_prob": 6.1438840930350125e-06}, {"id": 756, "seek": 179856, "start": 1817.96, "end": 1820.6799999999998, "text": " And so if you want to be able to call this function from C,", "tokens": [400, 370, 498, 291, 528, 281, 312, 1075, 281, 818, 341, 2445, 490, 383, 11], "temperature": 0.0, "avg_logprob": -0.10465752145518427, "compression_ratio": 1.7974137931034482, "no_speech_prob": 6.1438840930350125e-06}, {"id": 757, "seek": 179856, "start": 1820.6799999999998, "end": 1822.0, "text": " you actually have to code gen.", "tokens": [291, 767, 362, 281, 3089, 1049, 13], "temperature": 0.0, "avg_logprob": -0.10465752145518427, "compression_ratio": 1.7974137931034482, "no_speech_prob": 6.1438840930350125e-06}, {"id": 758, "seek": 179856, "start": 1822.0, "end": 1824.2, "text": " You have to be able to parse that, code gen,", "tokens": [509, 362, 281, 312, 1075, 281, 48377, 300, 11, 3089, 1049, 11], "temperature": 0.0, "avg_logprob": -0.10465752145518427, "compression_ratio": 1.7974137931034482, "no_speech_prob": 6.1438840930350125e-06}, {"id": 759, "seek": 179856, "start": 1824.2, "end": 1826.6399999999999, "text": " understand what unions are now, understand", "tokens": [1223, 437, 24914, 366, 586, 11, 1223], "temperature": 0.0, "avg_logprob": -0.10465752145518427, "compression_ratio": 1.7974137931034482, "no_speech_prob": 6.1438840930350125e-06}, {"id": 760, "seek": 182664, "start": 1826.64, "end": 1828.8400000000001, "text": " all of this crazy stuff just so you can get the sign", "tokens": [439, 295, 341, 3219, 1507, 445, 370, 291, 393, 483, 264, 1465], "temperature": 0.0, "avg_logprob": -0.1252316614476646, "compression_ratio": 1.726962457337884, "no_speech_prob": 3.6687386000266997e-06}, {"id": 761, "seek": 182664, "start": 1828.8400000000001, "end": 1830.6000000000001, "text": " bit out of a float.", "tokens": [857, 484, 295, 257, 15706, 13], "temperature": 0.0, "avg_logprob": -0.1252316614476646, "compression_ratio": 1.726962457337884, "no_speech_prob": 3.6687386000266997e-06}, {"id": 762, "seek": 182664, "start": 1830.6000000000001, "end": 1832.96, "text": " C also has things like function pointers and macros", "tokens": [383, 611, 575, 721, 411, 2445, 44548, 293, 7912, 2635], "temperature": 0.0, "avg_logprob": -0.1252316614476646, "compression_ratio": 1.726962457337884, "no_speech_prob": 3.6687386000266997e-06}, {"id": 763, "seek": 182664, "start": 1832.96, "end": 1834.1200000000001, "text": " and tons of other stuff.", "tokens": [293, 9131, 295, 661, 1507, 13], "temperature": 0.0, "avg_logprob": -0.1252316614476646, "compression_ratio": 1.726962457337884, "no_speech_prob": 3.6687386000266997e-06}, {"id": 764, "seek": 182664, "start": 1834.1200000000001, "end": 1835.48, "text": " It's just madness.", "tokens": [467, 311, 445, 28736, 13], "temperature": 0.0, "avg_logprob": -0.1252316614476646, "compression_ratio": 1.726962457337884, "no_speech_prob": 3.6687386000266997e-06}, {"id": 765, "seek": 182664, "start": 1835.48, "end": 1839.3600000000001, "text": " And so the right way to do this is to build a C compiler.", "tokens": [400, 370, 264, 558, 636, 281, 360, 341, 307, 281, 1322, 257, 383, 31958, 13], "temperature": 0.0, "avg_logprob": -0.1252316614476646, "compression_ratio": 1.726962457337884, "no_speech_prob": 3.6687386000266997e-06}, {"id": 766, "seek": 182664, "start": 1839.3600000000001, "end": 1841.8000000000002, "text": " And the C compiler we have is called Clang.", "tokens": [400, 264, 383, 31958, 321, 362, 307, 1219, 2033, 656, 13], "temperature": 0.0, "avg_logprob": -0.1252316614476646, "compression_ratio": 1.726962457337884, "no_speech_prob": 3.6687386000266997e-06}, {"id": 767, "seek": 182664, "start": 1841.8000000000002, "end": 1844.3600000000001, "text": " And so what ends up happening is that when", "tokens": [400, 370, 437, 5314, 493, 2737, 307, 300, 562], "temperature": 0.0, "avg_logprob": -0.1252316614476646, "compression_ratio": 1.726962457337884, "no_speech_prob": 3.6687386000266997e-06}, {"id": 768, "seek": 182664, "start": 1844.3600000000001, "end": 1847.6000000000001, "text": " Jeremy says import socks, Swift goes and says,", "tokens": [17809, 1619, 974, 17564, 11, 25539, 1709, 293, 1619, 11], "temperature": 0.0, "avg_logprob": -0.1252316614476646, "compression_ratio": 1.726962457337884, "no_speech_prob": 3.6687386000266997e-06}, {"id": 769, "seek": 182664, "start": 1847.6000000000001, "end": 1849.0800000000002, "text": " ha ha, what's a socks?", "tokens": [324, 324, 11, 437, 311, 257, 17564, 30], "temperature": 0.0, "avg_logprob": -0.1252316614476646, "compression_ratio": 1.726962457337884, "no_speech_prob": 3.6687386000266997e-06}, {"id": 770, "seek": 182664, "start": 1849.0800000000002, "end": 1850.2800000000002, "text": " Oh, it's a module.", "tokens": [876, 11, 309, 311, 257, 10088, 13], "temperature": 0.0, "avg_logprob": -0.1252316614476646, "compression_ratio": 1.726962457337884, "no_speech_prob": 3.6687386000266997e-06}, {"id": 771, "seek": 182664, "start": 1850.2800000000002, "end": 1851.2, "text": " OK, what is a module?", "tokens": [2264, 11, 437, 307, 257, 10088, 30], "temperature": 0.0, "avg_logprob": -0.1252316614476646, "compression_ratio": 1.726962457337884, "no_speech_prob": 3.6687386000266997e-06}, {"id": 772, "seek": 182664, "start": 1851.2, "end": 1854.5600000000002, "text": " Oh, it's C. Oh, it's got a header file.", "tokens": [876, 11, 309, 311, 383, 13, 876, 11, 309, 311, 658, 257, 23117, 3991, 13], "temperature": 0.0, "avg_logprob": -0.1252316614476646, "compression_ratio": 1.726962457337884, "no_speech_prob": 3.6687386000266997e-06}, {"id": 773, "seek": 182664, "start": 1854.5600000000002, "end": 1855.5200000000002, "text": " Fire up Clang.", "tokens": [7652, 493, 2033, 656, 13], "temperature": 0.0, "avg_logprob": -0.1252316614476646, "compression_ratio": 1.726962457337884, "no_speech_prob": 3.6687386000266997e-06}, {"id": 774, "seek": 182664, "start": 1855.5200000000002, "end": 1856.4, "text": " Go parse that header file.", "tokens": [1037, 48377, 300, 23117, 3991, 13], "temperature": 0.0, "avg_logprob": -0.1252316614476646, "compression_ratio": 1.726962457337884, "no_speech_prob": 3.6687386000266997e-06}, {"id": 775, "seek": 185640, "start": 1856.4, "end": 1858.76, "text": " Go parse all the things the header file pulls in.", "tokens": [1037, 48377, 439, 264, 721, 264, 23117, 3991, 16982, 294, 13], "temperature": 0.0, "avg_logprob": -0.10538827001521017, "compression_ratio": 1.6313725490196078, "no_speech_prob": 2.1567016119661275e-06}, {"id": 776, "seek": 185640, "start": 1858.76, "end": 1861.0400000000002, "text": " That's what an umbrella header is.", "tokens": [663, 311, 437, 364, 21925, 23117, 307, 13], "temperature": 0.0, "avg_logprob": -0.10538827001521017, "compression_ratio": 1.6313725490196078, "no_speech_prob": 2.1567016119661275e-06}, {"id": 777, "seek": 185640, "start": 1861.0400000000002, "end": 1865.6000000000001, "text": " And go pull the entire universe of C together into that module.", "tokens": [400, 352, 2235, 264, 2302, 6445, 295, 383, 1214, 666, 300, 10088, 13], "temperature": 0.0, "avg_logprob": -0.10538827001521017, "compression_ratio": 1.6313725490196078, "no_speech_prob": 2.1567016119661275e-06}, {"id": 778, "seek": 185640, "start": 1865.6000000000001, "end": 1868.5600000000002, "text": " And then build what's called syntax trees", "tokens": [400, 550, 1322, 437, 311, 1219, 28431, 5852], "temperature": 0.0, "avg_logprob": -0.10538827001521017, "compression_ratio": 1.6313725490196078, "no_speech_prob": 2.1567016119661275e-06}, {"id": 779, "seek": 185640, "start": 1868.5600000000002, "end": 1871.3200000000002, "text": " to represent all the C stuff.", "tokens": [281, 2906, 439, 264, 383, 1507, 13], "temperature": 0.0, "avg_logprob": -0.10538827001521017, "compression_ratio": 1.6313725490196078, "no_speech_prob": 2.1567016119661275e-06}, {"id": 780, "seek": 185640, "start": 1871.3200000000002, "end": 1874.2800000000002, "text": " Well, now we've got a very perfect, pristine C view", "tokens": [1042, 11, 586, 321, 600, 658, 257, 588, 2176, 11, 582, 42745, 383, 1910], "temperature": 0.0, "avg_logprob": -0.10538827001521017, "compression_ratio": 1.6313725490196078, "no_speech_prob": 2.1567016119661275e-06}, {"id": 781, "seek": 185640, "start": 1874.2800000000002, "end": 1877.52, "text": " of the world the exact same way a C compiler does.", "tokens": [295, 264, 1002, 264, 1900, 912, 636, 257, 383, 31958, 775, 13], "temperature": 0.0, "avg_logprob": -0.10538827001521017, "compression_ratio": 1.6313725490196078, "no_speech_prob": 2.1567016119661275e-06}, {"id": 782, "seek": 185640, "start": 1877.52, "end": 1879.4, "text": " And so what we can do then is we can", "tokens": [400, 370, 437, 321, 393, 360, 550, 307, 321, 393], "temperature": 0.0, "avg_logprob": -0.10538827001521017, "compression_ratio": 1.6313725490196078, "no_speech_prob": 2.1567016119661275e-06}, {"id": 783, "seek": 185640, "start": 1879.4, "end": 1882.3600000000001, "text": " build this integration between Clang and between Swift,", "tokens": [1322, 341, 10980, 1296, 2033, 656, 293, 1296, 25539, 11], "temperature": 0.0, "avg_logprob": -0.10538827001521017, "compression_ratio": 1.6313725490196078, "no_speech_prob": 2.1567016119661275e-06}, {"id": 784, "seek": 188236, "start": 1882.36, "end": 1887.28, "text": " where when you say give me malloc or give me socks init,", "tokens": [689, 562, 291, 584, 976, 385, 16026, 905, 420, 976, 385, 17564, 3157, 11], "temperature": 0.0, "avg_logprob": -0.13497251966979606, "compression_ratio": 1.8430034129692834, "no_speech_prob": 1.6700269043212757e-05}, {"id": 785, "seek": 188236, "start": 1887.28, "end": 1888.9199999999998, "text": " Swift says, whoa, what is that?", "tokens": [25539, 1619, 11, 13310, 11, 437, 307, 300, 30], "temperature": 0.0, "avg_logprob": -0.13497251966979606, "compression_ratio": 1.8430034129692834, "no_speech_prob": 1.6700269043212757e-05}, {"id": 786, "seek": 188236, "start": 1888.9199999999998, "end": 1890.12, "text": " Hey, Clang, do you know what this is?", "tokens": [1911, 11, 2033, 656, 11, 360, 291, 458, 437, 341, 307, 30], "temperature": 0.0, "avg_logprob": -0.13497251966979606, "compression_ratio": 1.8430034129692834, "no_speech_prob": 1.6700269043212757e-05}, {"id": 787, "seek": 188236, "start": 1890.12, "end": 1891.9199999999998, "text": " And Clang says, oh, yeah, I know what socks init is.", "tokens": [400, 2033, 656, 1619, 11, 1954, 11, 1338, 11, 286, 458, 437, 17564, 3157, 307, 13], "temperature": 0.0, "avg_logprob": -0.13497251966979606, "compression_ratio": 1.8430034129692834, "no_speech_prob": 1.6700269043212757e-05}, {"id": 788, "seek": 188236, "start": 1891.9199999999998, "end": 1892.7199999999998, "text": " It's this weird function.", "tokens": [467, 311, 341, 3657, 2445, 13], "temperature": 0.0, "avg_logprob": -0.13497251966979606, "compression_ratio": 1.8430034129692834, "no_speech_prob": 1.6700269043212757e-05}, {"id": 789, "seek": 188236, "start": 1892.7199999999998, "end": 1894.9599999999998, "text": " It takes all these pointers and blah, blah, blah.", "tokens": [467, 2516, 439, 613, 44548, 293, 12288, 11, 12288, 11, 12288, 13], "temperature": 0.0, "avg_logprob": -0.13497251966979606, "compression_ratio": 1.8430034129692834, "no_speech_prob": 1.6700269043212757e-05}, {"id": 790, "seek": 188236, "start": 1894.9599999999998, "end": 1896.32, "text": " And Swift says, OK, cool.", "tokens": [400, 25539, 1619, 11, 2264, 11, 1627, 13], "temperature": 0.0, "avg_logprob": -0.13497251966979606, "compression_ratio": 1.8430034129692834, "no_speech_prob": 1.6700269043212757e-05}, {"id": 791, "seek": 188236, "start": 1896.32, "end": 1900.6399999999999, "text": " I will remap your pointers into my unsafe pointer.", "tokens": [286, 486, 890, 569, 428, 44548, 666, 452, 35948, 23918, 13], "temperature": 0.0, "avg_logprob": -0.13497251966979606, "compression_ratio": 1.8430034129692834, "no_speech_prob": 1.6700269043212757e-05}, {"id": 792, "seek": 188236, "start": 1900.6399999999999, "end": 1903.9599999999998, "text": " I will remap your int into my int 32,", "tokens": [286, 486, 890, 569, 428, 560, 666, 452, 560, 8858, 11], "temperature": 0.0, "avg_logprob": -0.13497251966979606, "compression_ratio": 1.8430034129692834, "no_speech_prob": 1.6700269043212757e-05}, {"id": 793, "seek": 188236, "start": 1903.9599999999998, "end": 1906.0, "text": " because the languages are a little bit different.", "tokens": [570, 264, 8650, 366, 257, 707, 857, 819, 13], "temperature": 0.0, "avg_logprob": -0.13497251966979606, "compression_ratio": 1.8430034129692834, "no_speech_prob": 1.6700269043212757e-05}, {"id": 794, "seek": 188236, "start": 1906.0, "end": 1907.6399999999999, "text": " And so that remapping happens.", "tokens": [400, 370, 300, 890, 10534, 2314, 13], "temperature": 0.0, "avg_logprob": -0.13497251966979606, "compression_ratio": 1.8430034129692834, "no_speech_prob": 1.6700269043212757e-05}, {"id": 795, "seek": 188236, "start": 1907.6399999999999, "end": 1909.52, "text": " And then when you call that inline function,", "tokens": [400, 550, 562, 291, 818, 300, 294, 1889, 2445, 11], "temperature": 0.0, "avg_logprob": -0.13497251966979606, "compression_ratio": 1.8430034129692834, "no_speech_prob": 1.6700269043212757e-05}, {"id": 796, "seek": 188236, "start": 1909.52, "end": 1911.32, "text": " Swift doesn't want to know how unions work.", "tokens": [25539, 1177, 380, 528, 281, 458, 577, 24914, 589, 13], "temperature": 0.0, "avg_logprob": -0.13497251966979606, "compression_ratio": 1.8430034129692834, "no_speech_prob": 1.6700269043212757e-05}, {"id": 797, "seek": 191132, "start": 1911.32, "end": 1912.8, "text": " It's crazy.", "tokens": [467, 311, 3219, 13], "temperature": 0.0, "avg_logprob": -0.144681637103741, "compression_ratio": 1.7436708860759493, "no_speech_prob": 1.8341288523515686e-05}, {"id": 798, "seek": 191132, "start": 1912.8, "end": 1914.84, "text": " So what it does instead is it says, hey, Clang,", "tokens": [407, 437, 309, 775, 2602, 307, 309, 1619, 11, 4177, 11, 2033, 656, 11], "temperature": 0.0, "avg_logprob": -0.144681637103741, "compression_ratio": 1.7436708860759493, "no_speech_prob": 1.8341288523515686e-05}, {"id": 799, "seek": 191132, "start": 1914.84, "end": 1915.9199999999998, "text": " you know how to do all this stuff.", "tokens": [291, 458, 577, 281, 360, 439, 341, 1507, 13], "temperature": 0.0, "avg_logprob": -0.144681637103741, "compression_ratio": 1.7436708860759493, "no_speech_prob": 1.8341288523515686e-05}, {"id": 800, "seek": 191132, "start": 1915.9199999999998, "end": 1918.24, "text": " You know how to code generate all these things.", "tokens": [509, 458, 577, 281, 3089, 8460, 439, 613, 721, 13], "temperature": 0.0, "avg_logprob": -0.144681637103741, "compression_ratio": 1.7436708860759493, "no_speech_prob": 1.8341288523515686e-05}, {"id": 801, "seek": 191132, "start": 1918.24, "end": 1920.56, "text": " And they both talk to the LLVM compiler", "tokens": [400, 436, 1293, 751, 281, 264, 441, 43, 53, 44, 31958], "temperature": 0.0, "avg_logprob": -0.144681637103741, "compression_ratio": 1.7436708860759493, "no_speech_prob": 1.8341288523515686e-05}, {"id": 802, "seek": 191132, "start": 1920.56, "end": 1922.12, "text": " that we were talking about last time.", "tokens": [300, 321, 645, 1417, 466, 1036, 565, 13], "temperature": 0.0, "avg_logprob": -0.144681637103741, "compression_ratio": 1.7436708860759493, "no_speech_prob": 1.8341288523515686e-05}, {"id": 803, "seek": 191132, "start": 1922.12, "end": 1924.04, "text": " And so they actually talk to each other.", "tokens": [400, 370, 436, 767, 751, 281, 1184, 661, 13], "temperature": 0.0, "avg_logprob": -0.144681637103741, "compression_ratio": 1.7436708860759493, "no_speech_prob": 1.8341288523515686e-05}, {"id": 804, "seek": 191132, "start": 1924.04, "end": 1924.84, "text": " They share the code.", "tokens": [814, 2073, 264, 3089, 13], "temperature": 0.0, "avg_logprob": -0.144681637103741, "compression_ratio": 1.7436708860759493, "no_speech_prob": 1.8341288523515686e-05}, {"id": 805, "seek": 191132, "start": 1924.84, "end": 1926.4399999999998, "text": " Clang does all that heavy lifting.", "tokens": [2033, 656, 775, 439, 300, 4676, 15798, 13], "temperature": 0.0, "avg_logprob": -0.144681637103741, "compression_ratio": 1.7436708860759493, "no_speech_prob": 1.8341288523515686e-05}, {"id": 806, "seek": 191132, "start": 1926.4399999999998, "end": 1928.3999999999999, "text": " And now it's both correct.", "tokens": [400, 586, 309, 311, 1293, 3006, 13], "temperature": 0.0, "avg_logprob": -0.144681637103741, "compression_ratio": 1.7436708860759493, "no_speech_prob": 1.8341288523515686e-05}, {"id": 807, "seek": 191132, "start": 1928.3999999999999, "end": 1930.2, "text": " And it just works.", "tokens": [400, 309, 445, 1985, 13], "temperature": 0.0, "avg_logprob": -0.144681637103741, "compression_ratio": 1.7436708860759493, "no_speech_prob": 1.8341288523515686e-05}, {"id": 808, "seek": 191132, "start": 1930.2, "end": 1931.6, "text": " Two things we like.", "tokens": [4453, 721, 321, 411, 13], "temperature": 0.0, "avg_logprob": -0.144681637103741, "compression_ratio": 1.7436708860759493, "no_speech_prob": 1.8341288523515686e-05}, {"id": 809, "seek": 191132, "start": 1931.6, "end": 1933.72, "text": " And so these two things plug together really well.", "tokens": [400, 370, 613, 732, 721, 5452, 1214, 534, 731, 13], "temperature": 0.0, "avg_logprob": -0.144681637103741, "compression_ratio": 1.7436708860759493, "no_speech_prob": 1.8341288523515686e-05}, {"id": 810, "seek": 191132, "start": 1933.72, "end": 1936.08, "text": " And now Swift can talk directly to C APIs.", "tokens": [400, 586, 25539, 393, 751, 3838, 281, 383, 21445, 13], "temperature": 0.0, "avg_logprob": -0.144681637103741, "compression_ratio": 1.7436708860759493, "no_speech_prob": 1.8341288523515686e-05}, {"id": 811, "seek": 191132, "start": 1936.08, "end": 1938.2, "text": " It's very nice.", "tokens": [467, 311, 588, 1481, 13], "temperature": 0.0, "avg_logprob": -0.144681637103741, "compression_ratio": 1.7436708860759493, "no_speech_prob": 1.8341288523515686e-05}, {"id": 812, "seek": 191132, "start": 1938.2, "end": 1941.0, "text": " If you want to geek out about this, there's a whole talk.", "tokens": [759, 291, 528, 281, 36162, 484, 466, 341, 11, 456, 311, 257, 1379, 751, 13], "temperature": 0.0, "avg_logprob": -0.144681637103741, "compression_ratio": 1.7436708860759493, "no_speech_prob": 1.8341288523515686e-05}, {"id": 813, "seek": 194100, "start": 1941.0, "end": 1942.6, "text": " It's like a half hour, an hour long,", "tokens": [467, 311, 411, 257, 1922, 1773, 11, 364, 1773, 938, 11], "temperature": 0.0, "avg_logprob": -0.15613648949599848, "compression_ratio": 1.685823754789272, "no_speech_prob": 9.51552556216484e-06}, {"id": 814, "seek": 194100, "start": 1942.6, "end": 1945.96, "text": " talking about how all this stuff works at a lot lower level.", "tokens": [1417, 466, 577, 439, 341, 1507, 1985, 412, 257, 688, 3126, 1496, 13], "temperature": 0.0, "avg_logprob": -0.15613648949599848, "compression_ratio": 1.685823754789272, "no_speech_prob": 9.51552556216484e-06}, {"id": 815, "seek": 194100, "start": 1945.96, "end": 1948.04, "text": " We will add that link to the lesson notes.", "tokens": [492, 486, 909, 300, 2113, 281, 264, 6898, 5570, 13], "temperature": 0.0, "avg_logprob": -0.15613648949599848, "compression_ratio": 1.685823754789272, "no_speech_prob": 9.51552556216484e-06}, {"id": 816, "seek": 194100, "start": 1948.04, "end": 1948.8, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.15613648949599848, "compression_ratio": 1.685823754789272, "no_speech_prob": 9.51552556216484e-06}, {"id": 817, "seek": 194100, "start": 1948.8, "end": 1951.08, "text": " So let's jump back to your example.", "tokens": [407, 718, 311, 3012, 646, 281, 428, 1365, 13], "temperature": 0.0, "avg_logprob": -0.15613648949599848, "compression_ratio": 1.685823754789272, "no_speech_prob": 9.51552556216484e-06}, {"id": 818, "seek": 194100, "start": 1951.08, "end": 1955.0, "text": " So one of the reasons I'm really interested", "tokens": [407, 472, 295, 264, 4112, 286, 478, 534, 3102], "temperature": 0.0, "avg_logprob": -0.15613648949599848, "compression_ratio": 1.685823754789272, "no_speech_prob": 9.51552556216484e-06}, {"id": 819, "seek": 194100, "start": 1955.0, "end": 1958.72, "text": " in this description, Chris, is that it's kind of all", "tokens": [294, 341, 3855, 11, 6688, 11, 307, 300, 309, 311, 733, 295, 439], "temperature": 0.0, "avg_logprob": -0.15613648949599848, "compression_ratio": 1.685823754789272, "no_speech_prob": 9.51552556216484e-06}, {"id": 820, "seek": 194100, "start": 1958.72, "end": 1963.12, "text": " about one of the reasons I really wanted to work with you,", "tokens": [466, 472, 295, 264, 4112, 286, 534, 1415, 281, 589, 365, 291, 11], "temperature": 0.0, "avg_logprob": -0.15613648949599848, "compression_ratio": 1.685823754789272, "no_speech_prob": 9.51552556216484e-06}, {"id": 821, "seek": 194100, "start": 1963.12, "end": 1966.24, "text": " apart from the fact that you're very amusing and entertaining,", "tokens": [4936, 490, 264, 1186, 300, 291, 434, 588, 47809, 293, 20402, 11], "temperature": 0.0, "avg_logprob": -0.15613648949599848, "compression_ratio": 1.685823754789272, "no_speech_prob": 9.51552556216484e-06}, {"id": 822, "seek": 194100, "start": 1966.24, "end": 1970.92, "text": " is that this idea of what you're doing", "tokens": [307, 300, 341, 1558, 295, 437, 291, 434, 884], "temperature": 0.0, "avg_logprob": -0.15613648949599848, "compression_ratio": 1.685823754789272, "no_speech_prob": 9.51552556216484e-06}, {"id": 823, "seek": 197092, "start": 1970.92, "end": 1975.6000000000001, "text": " and what you did with Clang and Swift is like the kind of stuff", "tokens": [293, 437, 291, 630, 365, 2033, 656, 293, 25539, 307, 411, 264, 733, 295, 1507], "temperature": 0.0, "avg_logprob": -0.13095947734096594, "compression_ratio": 1.6788321167883211, "no_speech_prob": 1.3843585293216165e-05}, {"id": 824, "seek": 197092, "start": 1975.6000000000001, "end": 1977.5600000000002, "text": " that we're going to be seeing is what's happened", "tokens": [300, 321, 434, 516, 281, 312, 2577, 307, 437, 311, 2011], "temperature": 0.0, "avg_logprob": -0.13095947734096594, "compression_ratio": 1.6788321167883211, "no_speech_prob": 1.3843585293216165e-05}, {"id": 825, "seek": 197092, "start": 1977.5600000000002, "end": 1981.48, "text": " with how differentiation is getting added to Swift.", "tokens": [365, 577, 38902, 307, 1242, 3869, 281, 25539, 13], "temperature": 0.0, "avg_logprob": -0.13095947734096594, "compression_ratio": 1.6788321167883211, "no_speech_prob": 1.3843585293216165e-05}, {"id": 826, "seek": 197092, "start": 1981.48, "end": 1984.8000000000002, "text": " And this idea of being able to pull", "tokens": [400, 341, 1558, 295, 885, 1075, 281, 2235], "temperature": 0.0, "avg_logprob": -0.13095947734096594, "compression_ratio": 1.6788321167883211, "no_speech_prob": 1.3843585293216165e-05}, {"id": 827, "seek": 197092, "start": 1984.8000000000002, "end": 1986.6000000000001, "text": " on this entire compiler infrastructure,", "tokens": [322, 341, 2302, 31958, 6896, 11], "temperature": 0.0, "avg_logprob": -0.13095947734096594, "compression_ratio": 1.6788321167883211, "no_speech_prob": 1.3843585293216165e-05}, {"id": 828, "seek": 197092, "start": 1986.6000000000001, "end": 1989.48, "text": " as you'll see, is actually going to allow us", "tokens": [382, 291, 603, 536, 11, 307, 767, 516, 281, 2089, 505], "temperature": 0.0, "avg_logprob": -0.13095947734096594, "compression_ratio": 1.6788321167883211, "no_speech_prob": 1.3843585293216165e-05}, {"id": 829, "seek": 197092, "start": 1989.48, "end": 1991.52, "text": " to do some similarly exciting", "tokens": [281, 360, 512, 14138, 4670], "temperature": 0.0, "avg_logprob": -0.13095947734096594, "compression_ratio": 1.6788321167883211, "no_speech_prob": 1.3843585293216165e-05}, {"id": 830, "seek": 197092, "start": 1991.52, "end": 1995.1200000000001, "text": " and surprisingly amazing things in deep learning world.", "tokens": [293, 17600, 2243, 721, 294, 2452, 2539, 1002, 13], "temperature": 0.0, "avg_logprob": -0.13095947734096594, "compression_ratio": 1.6788321167883211, "no_speech_prob": 1.3843585293216165e-05}, {"id": 831, "seek": 197092, "start": 1995.1200000000001, "end": 1997.16, "text": " And I'll say this is all simple now,", "tokens": [400, 286, 603, 584, 341, 307, 439, 2199, 586, 11], "temperature": 0.0, "avg_logprob": -0.13095947734096594, "compression_ratio": 1.6788321167883211, "no_speech_prob": 1.3843585293216165e-05}, {"id": 832, "seek": 197092, "start": 1997.16, "end": 1999.24, "text": " but actually getting these two massive systems talk", "tokens": [457, 767, 1242, 613, 732, 5994, 3652, 751], "temperature": 0.0, "avg_logprob": -0.13095947734096594, "compression_ratio": 1.6788321167883211, "no_speech_prob": 1.3843585293216165e-05}, {"id": 833, "seek": 199924, "start": 1999.24, "end": 2001.2, "text": " to each other was kind of heroic.", "tokens": [281, 1184, 661, 390, 733, 295, 32915, 13], "temperature": 0.0, "avg_logprob": -0.09754740750348126, "compression_ratio": 1.6784313725490196, "no_speech_prob": 3.5349778045201674e-05}, {"id": 834, "seek": 199924, "start": 2001.2, "end": 2005.64, "text": " And it was getting Python integrated was comparatively easy", "tokens": [400, 309, 390, 1242, 15329, 10919, 390, 6311, 19020, 1858], "temperature": 0.0, "avg_logprob": -0.09754740750348126, "compression_ratio": 1.6784313725490196, "no_speech_prob": 3.5349778045201674e-05}, {"id": 835, "seek": 199924, "start": 2005.64, "end": 2008.8, "text": " because Python is super dynamic and C is not dynamic.", "tokens": [570, 15329, 307, 1687, 8546, 293, 383, 307, 406, 8546, 13], "temperature": 0.0, "avg_logprob": -0.09754740750348126, "compression_ratio": 1.6784313725490196, "no_speech_prob": 3.5349778045201674e-05}, {"id": 836, "seek": 199924, "start": 2008.8, "end": 2012.68, "text": " Yeah. And one thing I'll say about C libraries is each time I come", "tokens": [865, 13, 400, 472, 551, 286, 603, 584, 466, 383, 15148, 307, 1184, 565, 286, 808], "temperature": 0.0, "avg_logprob": -0.09754740750348126, "compression_ratio": 1.6784313725490196, "no_speech_prob": 3.5349778045201674e-05}, {"id": 837, "seek": 199924, "start": 2012.68, "end": 2017.8, "text": " across a C library, many of them have used these weird edge case", "tokens": [2108, 257, 383, 6405, 11, 867, 295, 552, 362, 1143, 613, 3657, 4691, 1389], "temperature": 0.0, "avg_logprob": -0.09754740750348126, "compression_ratio": 1.6784313725490196, "no_speech_prob": 3.5349778045201674e-05}, {"id": 838, "seek": 199924, "start": 2017.8, "end": 2019.92, "text": " things Chris described in surprising ways.", "tokens": [721, 6688, 7619, 294, 8830, 2098, 13], "temperature": 0.0, "avg_logprob": -0.09754740750348126, "compression_ratio": 1.6784313725490196, "no_speech_prob": 3.5349778045201674e-05}, {"id": 839, "seek": 199924, "start": 2019.92, "end": 2022.48, "text": " And so I just wanted to point at a couple of pointers", "tokens": [400, 370, 286, 445, 1415, 281, 935, 412, 257, 1916, 295, 44548], "temperature": 0.0, "avg_logprob": -0.09754740750348126, "compression_ratio": 1.6784313725490196, "no_speech_prob": 3.5349778045201674e-05}, {"id": 840, "seek": 199924, "start": 2022.48, "end": 2025.48, "text": " as to how you can deal with these weird edge cases.", "tokens": [382, 281, 577, 291, 393, 2028, 365, 613, 3657, 4691, 3331, 13], "temperature": 0.0, "avg_logprob": -0.09754740750348126, "compression_ratio": 1.6784313725490196, "no_speech_prob": 3.5349778045201674e-05}, {"id": 841, "seek": 202548, "start": 2025.48, "end": 2030.44, "text": " So when I started looking at kind of how do I create my own version", "tokens": [407, 562, 286, 1409, 1237, 412, 733, 295, 577, 360, 286, 1884, 452, 1065, 3037], "temperature": 0.0, "avg_logprob": -0.09256593590108757, "compression_ratio": 1.8333333333333333, "no_speech_prob": 8.397061719733756e-06}, {"id": 842, "seek": 202548, "start": 2030.44, "end": 2032.84, "text": " of tf.data, I need to be able to read JPEG files,", "tokens": [295, 256, 69, 13, 67, 3274, 11, 286, 643, 281, 312, 1075, 281, 1401, 508, 5208, 38, 7098, 11], "temperature": 0.0, "avg_logprob": -0.09256593590108757, "compression_ratio": 1.8333333333333333, "no_speech_prob": 8.397061719733756e-06}, {"id": 843, "seek": 202548, "start": 2032.84, "end": 2034.6, "text": " I need to be able to do image processing.", "tokens": [286, 643, 281, 312, 1075, 281, 360, 3256, 9007, 13], "temperature": 0.0, "avg_logprob": -0.09256593590108757, "compression_ratio": 1.8333333333333333, "no_speech_prob": 8.397061719733756e-06}, {"id": 844, "seek": 202548, "start": 2034.6, "end": 2038.32, "text": " I was interested in trying this library called vips.", "tokens": [286, 390, 3102, 294, 1382, 341, 6405, 1219, 371, 2600, 13], "temperature": 0.0, "avg_logprob": -0.09256593590108757, "compression_ratio": 1.8333333333333333, "no_speech_prob": 8.397061719733756e-06}, {"id": 845, "seek": 202548, "start": 2038.32, "end": 2044.0, "text": " And vips is a really interesting C library for image processing.", "tokens": [400, 371, 2600, 307, 257, 534, 1880, 383, 6405, 337, 3256, 9007, 13], "temperature": 0.0, "avg_logprob": -0.09256593590108757, "compression_ratio": 1.8333333333333333, "no_speech_prob": 8.397061719733756e-06}, {"id": 846, "seek": 202548, "start": 2044.0, "end": 2048.68, "text": " And so I started looking at bringing in the C library.", "tokens": [400, 370, 286, 1409, 1237, 412, 5062, 294, 264, 383, 6405, 13], "temperature": 0.0, "avg_logprob": -0.09256593590108757, "compression_ratio": 1.8333333333333333, "no_speech_prob": 8.397061719733756e-06}, {"id": 847, "seek": 202548, "start": 2048.68, "end": 2052.88, "text": " And so I started in exactly the way you've seen already.", "tokens": [400, 370, 286, 1409, 294, 2293, 264, 636, 291, 600, 1612, 1217, 13], "temperature": 0.0, "avg_logprob": -0.09256593590108757, "compression_ratio": 1.8333333333333333, "no_speech_prob": 8.397061719733756e-06}, {"id": 848, "seek": 202548, "start": 2052.88, "end": 2055.16, "text": " So let's do that.", "tokens": [407, 718, 311, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.09256593590108757, "compression_ratio": 1.8333333333333333, "no_speech_prob": 8.397061719733756e-06}, {"id": 849, "seek": 205516, "start": 2055.16, "end": 2060.24, "text": " So you'll find just like we have a Swift Sox in the repo,", "tokens": [407, 291, 603, 915, 445, 411, 321, 362, 257, 25539, 407, 87, 294, 264, 49040, 11], "temperature": 0.0, "avg_logprob": -0.13890732970892214, "compression_ratio": 1.6603773584905661, "no_speech_prob": 7.181557066360256e-06}, {"id": 850, "seek": 205516, "start": 2060.24, "end": 2064.8399999999997, "text": " there's also a Swift Vips.", "tokens": [456, 311, 611, 257, 25539, 691, 2600, 13], "temperature": 0.0, "avg_logprob": -0.13890732970892214, "compression_ratio": 1.6603773584905661, "no_speech_prob": 7.181557066360256e-06}, {"id": 851, "seek": 205516, "start": 2064.8399999999997, "end": 2070.3599999999997, "text": " And we'll start seeing some pretty familiar things.", "tokens": [400, 321, 603, 722, 2577, 512, 1238, 4963, 721, 13], "temperature": 0.0, "avg_logprob": -0.13890732970892214, "compression_ratio": 1.6603773584905661, "no_speech_prob": 7.181557066360256e-06}, {"id": 852, "seek": 205516, "start": 2070.3599999999997, "end": 2074.48, "text": " There's the same package.swift that you've seen before,", "tokens": [821, 311, 264, 912, 7372, 13, 25884, 2008, 300, 291, 600, 1612, 949, 11], "temperature": 0.0, "avg_logprob": -0.13890732970892214, "compression_ratio": 1.6603773584905661, "no_speech_prob": 7.181557066360256e-06}, {"id": 853, "seek": 205516, "start": 2074.48, "end": 2077.2799999999997, "text": " but now it's got some extra lines we'll describe in a moment.", "tokens": [457, 586, 309, 311, 658, 512, 2857, 3876, 321, 603, 6786, 294, 257, 1623, 13], "temperature": 0.0, "avg_logprob": -0.13890732970892214, "compression_ratio": 1.6603773584905661, "no_speech_prob": 7.181557066360256e-06}, {"id": 854, "seek": 205516, "start": 2077.2799999999997, "end": 2082.24, "text": " There's the sources, vips, module map with the exact three lines", "tokens": [821, 311, 264, 7139, 11, 371, 2600, 11, 10088, 4471, 365, 264, 1900, 1045, 3876], "temperature": 0.0, "avg_logprob": -0.13890732970892214, "compression_ratio": 1.6603773584905661, "no_speech_prob": 7.181557066360256e-06}, {"id": 855, "seek": 205516, "start": 2082.24, "end": 2084.24, "text": " of code that you've seen before.", "tokens": [295, 3089, 300, 291, 600, 1612, 949, 13], "temperature": 0.0, "avg_logprob": -0.13890732970892214, "compression_ratio": 1.6603773584905661, "no_speech_prob": 7.181557066360256e-06}, {"id": 856, "seek": 208424, "start": 2084.24, "end": 2089.9199999999996, "text": " There's the sources, vips, some header, I call it a different name", "tokens": [821, 311, 264, 7139, 11, 371, 2600, 11, 512, 23117, 11, 286, 818, 309, 257, 819, 1315], "temperature": 0.0, "avg_logprob": -0.13295721557905088, "compression_ratio": 1.6981981981981982, "no_speech_prob": 1.696254184935242e-05}, {"id": 857, "seek": 208424, "start": 2089.9199999999996, "end": 2092.72, "text": " in this case, which has the one line of code,", "tokens": [294, 341, 1389, 11, 597, 575, 264, 472, 1622, 295, 3089, 11], "temperature": 0.0, "avg_logprob": -0.13295721557905088, "compression_ratio": 1.6981981981981982, "no_speech_prob": 1.696254184935242e-05}, {"id": 858, "seek": 208424, "start": 2092.72, "end": 2094.3999999999996, "text": " which is connecting to the header.", "tokens": [597, 307, 11015, 281, 264, 23117, 13], "temperature": 0.0, "avg_logprob": -0.13295721557905088, "compression_ratio": 1.6981981981981982, "no_speech_prob": 1.696254184935242e-05}, {"id": 859, "seek": 208424, "start": 2094.3999999999996, "end": 2099.64, "text": " After you've done that, you can now import vips done.", "tokens": [2381, 291, 600, 1096, 300, 11, 291, 393, 586, 974, 371, 2600, 1096, 13], "temperature": 0.0, "avg_logprob": -0.13295721557905088, "compression_ratio": 1.6981981981981982, "no_speech_prob": 1.696254184935242e-05}, {"id": 860, "seek": 208424, "start": 2099.64, "end": 2103.3599999999997, "text": " But it turns out that the vips documentation says", "tokens": [583, 309, 4523, 484, 300, 264, 371, 2600, 14333, 1619], "temperature": 0.0, "avg_logprob": -0.13295721557905088, "compression_ratio": 1.6981981981981982, "no_speech_prob": 1.696254184935242e-05}, {"id": 861, "seek": 208424, "start": 2103.3599999999997, "end": 2105.9599999999996, "text": " that they actually added the ability", "tokens": [300, 436, 767, 3869, 264, 3485], "temperature": 0.0, "avg_logprob": -0.13295721557905088, "compression_ratio": 1.6981981981981982, "no_speech_prob": 1.696254184935242e-05}, {"id": 862, "seek": 208424, "start": 2105.9599999999996, "end": 2110.0, "text": " to handle optional positional arguments.", "tokens": [281, 4813, 17312, 2535, 304, 12869, 13], "temperature": 0.0, "avg_logprob": -0.13295721557905088, "compression_ratio": 1.6981981981981982, "no_speech_prob": 1.696254184935242e-05}, {"id": 863, "seek": 208424, "start": 2110.0, "end": 2113.2, "text": " In C. In C. And so it turns out that you can do", "tokens": [682, 383, 13, 682, 383, 13, 400, 370, 309, 4523, 484, 300, 291, 393, 360], "temperature": 0.0, "avg_logprob": -0.13295721557905088, "compression_ratio": 1.6981981981981982, "no_speech_prob": 1.696254184935242e-05}, {"id": 864, "seek": 211320, "start": 2113.2, "end": 2116.24, "text": " that in C, even though it's not officially part of C,", "tokens": [300, 294, 383, 11, 754, 1673, 309, 311, 406, 12053, 644, 295, 383, 11], "temperature": 0.0, "avg_logprob": -0.15322293820588484, "compression_ratio": 1.7698744769874477, "no_speech_prob": 3.0237984901759773e-05}, {"id": 865, "seek": 211320, "start": 2116.24, "end": 2121.2799999999997, "text": " by using something called bugs, which is basically in C. You can say,", "tokens": [538, 1228, 746, 1219, 15120, 11, 597, 307, 1936, 294, 383, 13, 509, 393, 584, 11], "temperature": 0.0, "avg_logprob": -0.15322293820588484, "compression_ratio": 1.7698744769874477, "no_speech_prob": 3.0237984901759773e-05}, {"id": 866, "seek": 211320, "start": 2121.2799999999997, "end": 2124.52, "text": " the number of arguments that go here is kind of not defined ahead", "tokens": [264, 1230, 295, 12869, 300, 352, 510, 307, 733, 295, 406, 7642, 2286], "temperature": 0.0, "avg_logprob": -0.15322293820588484, "compression_ratio": 1.7698744769874477, "no_speech_prob": 3.0237984901759773e-05}, {"id": 867, "seek": 211320, "start": 2124.52, "end": 2126.3599999999997, "text": " of time, and you can use something I've never heard", "tokens": [295, 565, 11, 293, 291, 393, 764, 746, 286, 600, 1128, 2198], "temperature": 0.0, "avg_logprob": -0.15322293820588484, "compression_ratio": 1.7698744769874477, "no_speech_prob": 3.0237984901759773e-05}, {"id": 868, "seek": 211320, "start": 2126.3599999999997, "end": 2127.96, "text": " of before called a sentinel.", "tokens": [295, 949, 1219, 257, 2279, 40952, 13], "temperature": 0.0, "avg_logprob": -0.15322293820588484, "compression_ratio": 1.7698744769874477, "no_speech_prob": 3.0237984901759773e-05}, {"id": 869, "seek": 211320, "start": 2127.96, "end": 2132.8399999999997, "text": " And basically, you end up with stuff which looks like this.", "tokens": [400, 1936, 11, 291, 917, 493, 365, 1507, 597, 1542, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.15322293820588484, "compression_ratio": 1.7698744769874477, "no_speech_prob": 3.0237984901759773e-05}, {"id": 870, "seek": 211320, "start": 2132.8399999999997, "end": 2137.6, "text": " You end up with stuff which looks like this,", "tokens": [509, 917, 493, 365, 1507, 597, 1542, 411, 341, 11], "temperature": 0.0, "avg_logprob": -0.15322293820588484, "compression_ratio": 1.7698744769874477, "no_speech_prob": 3.0237984901759773e-05}, {"id": 871, "seek": 211320, "start": 2137.6, "end": 2141.48, "text": " where you basically say, I want to do a resize,", "tokens": [689, 291, 1936, 584, 11, 286, 528, 281, 360, 257, 50069, 11], "temperature": 0.0, "avg_logprob": -0.15322293820588484, "compression_ratio": 1.7698744769874477, "no_speech_prob": 3.0237984901759773e-05}, {"id": 872, "seek": 214148, "start": 2141.48, "end": 2144.04, "text": " and it has some arguments that are specified,", "tokens": [293, 309, 575, 512, 12869, 300, 366, 22206, 11], "temperature": 0.0, "avg_logprob": -0.10770571782038763, "compression_ratio": 1.887218045112782, "no_speech_prob": 1.3709083077628748e-06}, {"id": 873, "seek": 214148, "start": 2144.04, "end": 2146.08, "text": " like horizontal scale, and by default,", "tokens": [411, 12750, 4373, 11, 293, 538, 7576, 11], "temperature": 0.0, "avg_logprob": -0.10770571782038763, "compression_ratio": 1.887218045112782, "no_speech_prob": 1.3709083077628748e-06}, {"id": 874, "seek": 214148, "start": 2146.08, "end": 2148.36, "text": " it makes the aspect ratio the same.", "tokens": [309, 1669, 264, 4171, 8509, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.10770571782038763, "compression_ratio": 1.887218045112782, "no_speech_prob": 1.3709083077628748e-06}, {"id": 875, "seek": 214148, "start": 2148.36, "end": 2150.88, "text": " But if you want to also change the aspect ratio", "tokens": [583, 498, 291, 528, 281, 611, 1319, 264, 4171, 8509], "temperature": 0.0, "avg_logprob": -0.10770571782038763, "compression_ratio": 1.887218045112782, "no_speech_prob": 1.3709083077628748e-06}, {"id": 876, "seek": 214148, "start": 2150.88, "end": 2154.64, "text": " and have a vertical scale, you literally write the string vscale,", "tokens": [293, 362, 257, 9429, 4373, 11, 291, 3736, 2464, 264, 6798, 371, 20033, 11], "temperature": 0.0, "avg_logprob": -0.10770571782038763, "compression_ratio": 1.887218045112782, "no_speech_prob": 1.3709083077628748e-06}, {"id": 877, "seek": 214148, "start": 2154.64, "end": 2157.56, "text": " and that says, oh, the next argument is the vertical scale.", "tokens": [293, 300, 1619, 11, 1954, 11, 264, 958, 6770, 307, 264, 9429, 4373, 13], "temperature": 0.0, "avg_logprob": -0.10770571782038763, "compression_ratio": 1.887218045112782, "no_speech_prob": 1.3709083077628748e-06}, {"id": 878, "seek": 214148, "start": 2157.56, "end": 2159.76, "text": " And if you want to use some different interpolation kernel,", "tokens": [400, 498, 291, 528, 281, 764, 512, 819, 44902, 399, 28256, 11], "temperature": 0.0, "avg_logprob": -0.10770571782038763, "compression_ratio": 1.887218045112782, "no_speech_prob": 1.3709083077628748e-06}, {"id": 879, "seek": 214148, "start": 2159.76, "end": 2161.06, "text": " you pass a word kernel,", "tokens": [291, 1320, 257, 1349, 28256, 11], "temperature": 0.0, "avg_logprob": -0.10770571782038763, "compression_ratio": 1.887218045112782, "no_speech_prob": 1.3709083077628748e-06}, {"id": 880, "seek": 214148, "start": 2161.06, "end": 2164.12, "text": " and you say there's some different interpolation kernel.", "tokens": [293, 291, 584, 456, 311, 512, 819, 44902, 399, 28256, 13], "temperature": 0.0, "avg_logprob": -0.10770571782038763, "compression_ratio": 1.887218045112782, "no_speech_prob": 1.3709083077628748e-06}, {"id": 881, "seek": 214148, "start": 2164.12, "end": 2168.36, "text": " Now, this is tricky, because for all the magic that Swift does do,", "tokens": [823, 11, 341, 307, 12414, 11, 570, 337, 439, 264, 5585, 300, 25539, 775, 360, 11], "temperature": 0.0, "avg_logprob": -0.10770571782038763, "compression_ratio": 1.887218045112782, "no_speech_prob": 1.3709083077628748e-06}, {"id": 882, "seek": 216836, "start": 2168.36, "end": 2172.28, "text": " it doesn't currently know how to deal with the args and sentinels.", "tokens": [309, 1177, 380, 4362, 458, 577, 281, 2028, 365, 264, 3882, 82, 293, 2279, 259, 1625, 13], "temperature": 0.0, "avg_logprob": -0.14340783741848528, "compression_ratio": 1.6168582375478928, "no_speech_prob": 5.255314135865774e-06}, {"id": 883, "seek": 216836, "start": 2172.28, "end": 2175.76, "text": " It's just an edge case of the C world that Swift hasn't handled yet.", "tokens": [467, 311, 445, 364, 4691, 1389, 295, 264, 383, 1002, 300, 25539, 6132, 380, 18033, 1939, 13], "temperature": 0.0, "avg_logprob": -0.14340783741848528, "compression_ratio": 1.6168582375478928, "no_speech_prob": 5.255314135865774e-06}, {"id": 884, "seek": 216836, "start": 2175.76, "end": 2177.7200000000003, "text": " I think this might be the last edge case.", "tokens": [286, 519, 341, 1062, 312, 264, 1036, 4691, 1389, 13], "temperature": 0.0, "avg_logprob": -0.14340783741848528, "compression_ratio": 1.6168582375478928, "no_speech_prob": 5.255314135865774e-06}, {"id": 885, "seek": 216836, "start": 2177.7200000000003, "end": 2179.04, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.14340783741848528, "compression_ratio": 1.6168582375478928, "no_speech_prob": 5.255314135865774e-06}, {"id": 886, "seek": 216836, "start": 2179.04, "end": 2181.1200000000003, "text": " Jeremy has this amazing thing to find the breaking point of anything.", "tokens": [17809, 575, 341, 2243, 551, 281, 915, 264, 7697, 935, 295, 1340, 13], "temperature": 0.0, "avg_logprob": -0.14340783741848528, "compression_ratio": 1.6168582375478928, "no_speech_prob": 5.255314135865774e-06}, {"id": 887, "seek": 216836, "start": 2181.1200000000003, "end": 2182.44, "text": " Oh, that's what I do.", "tokens": [876, 11, 300, 311, 437, 286, 360, 13], "temperature": 0.0, "avg_logprob": -0.14340783741848528, "compression_ratio": 1.6168582375478928, "no_speech_prob": 5.255314135865774e-06}, {"id": 888, "seek": 216836, "start": 2182.44, "end": 2183.88, "text": " Yes.", "tokens": [1079, 13], "temperature": 0.0, "avg_logprob": -0.14340783741848528, "compression_ratio": 1.6168582375478928, "no_speech_prob": 5.255314135865774e-06}, {"id": 889, "seek": 216836, "start": 2183.88, "end": 2185.4, "text": " But no problem, right?", "tokens": [583, 572, 1154, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.14340783741848528, "compression_ratio": 1.6168582375478928, "no_speech_prob": 5.255314135865774e-06}, {"id": 890, "seek": 216836, "start": 2185.4, "end": 2192.52, "text": " The trick is to provide a header file where the things that Swift needs", "tokens": [440, 4282, 307, 281, 2893, 257, 23117, 3991, 689, 264, 721, 300, 25539, 2203], "temperature": 0.0, "avg_logprob": -0.14340783741848528, "compression_ratio": 1.6168582375478928, "no_speech_prob": 5.255314135865774e-06}, {"id": 891, "seek": 216836, "start": 2192.52, "end": 2196.08, "text": " to call look like the things that they expect.", "tokens": [281, 818, 574, 411, 264, 721, 300, 436, 2066, 13], "temperature": 0.0, "avg_logprob": -0.14340783741848528, "compression_ratio": 1.6168582375478928, "no_speech_prob": 5.255314135865774e-06}, {"id": 892, "seek": 219608, "start": 2196.08, "end": 2200.12, "text": " So in this case, you can see I've actually written my own C library.", "tokens": [407, 294, 341, 1389, 11, 291, 393, 536, 286, 600, 767, 3720, 452, 1065, 383, 6405, 13], "temperature": 0.0, "avg_logprob": -0.17791782725941052, "compression_ratio": 1.6590909090909092, "no_speech_prob": 3.5559407933760667e-06}, {"id": 893, "seek": 219608, "start": 2200.12, "end": 2200.6, "text": " Right?", "tokens": [1779, 30], "temperature": 0.0, "avg_logprob": -0.17791782725941052, "compression_ratio": 1.6590909090909092, "no_speech_prob": 3.5559407933760667e-06}, {"id": 894, "seek": 219608, "start": 2200.6, "end": 2206.88, "text": " And so I added a C library by literally just putting into sources.", "tokens": [400, 370, 286, 3869, 257, 383, 6405, 538, 3736, 445, 3372, 666, 7139, 13], "temperature": 0.0, "avg_logprob": -0.17791782725941052, "compression_ratio": 1.6590909090909092, "no_speech_prob": 3.5559407933760667e-06}, {"id": 895, "seek": 219608, "start": 2206.88, "end": 2209.24, "text": " I just created another directory.", "tokens": [286, 445, 2942, 1071, 21120, 13], "temperature": 0.0, "avg_logprob": -0.17791782725941052, "compression_ratio": 1.6590909090909092, "no_speech_prob": 3.5559407933760667e-06}, {"id": 896, "seek": 219608, "start": 2209.24, "end": 2213.16, "text": " And in there, I just dumped a C header file.", "tokens": [400, 294, 456, 11, 286, 445, 32131, 257, 383, 23117, 3991, 13], "temperature": 0.0, "avg_logprob": -0.17791782725941052, "compression_ratio": 1.6590909090909092, "no_speech_prob": 3.5559407933760667e-06}, {"id": 897, "seek": 219608, "start": 2213.16, "end": 2213.64, "text": " Right?", "tokens": [1779, 30], "temperature": 0.0, "avg_logprob": -0.17791782725941052, "compression_ratio": 1.6590909090909092, "no_speech_prob": 3.5559407933760667e-06}, {"id": 898, "seek": 219608, "start": 2213.64, "end": 2215.2, "text": " And here's the amazing thing.", "tokens": [400, 510, 311, 264, 2243, 551, 13], "temperature": 0.0, "avg_logprob": -0.17791782725941052, "compression_ratio": 1.6590909090909092, "no_speech_prob": 3.5559407933760667e-06}, {"id": 899, "seek": 219608, "start": 2215.2, "end": 2221.2, "text": " As soon as I do that, I can now add that C library,", "tokens": [1018, 2321, 382, 286, 360, 300, 11, 286, 393, 586, 909, 300, 383, 6405, 11], "temperature": 0.0, "avg_logprob": -0.17791782725941052, "compression_ratio": 1.6590909090909092, "no_speech_prob": 3.5559407933760667e-06}, {"id": 900, "seek": 219608, "start": 2221.2, "end": 2224.24, "text": " not pre-compiled, but actual C code I've just written,", "tokens": [406, 659, 12, 21541, 7292, 11, 457, 3539, 383, 3089, 286, 600, 445, 3720, 11], "temperature": 0.0, "avg_logprob": -0.17791782725941052, "compression_ratio": 1.6590909090909092, "no_speech_prob": 3.5559407933760667e-06}, {"id": 901, "seek": 222424, "start": 2224.24, "end": 2228.52, "text": " to my package.swift, and I can use that from Swift as well.", "tokens": [281, 452, 7372, 13, 25884, 2008, 11, 293, 286, 393, 764, 300, 490, 25539, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.19807024869051845, "compression_ratio": 1.733009708737864, "no_speech_prob": 1.9221108232159168e-05}, {"id": 902, "seek": 222424, "start": 2228.52, "end": 2229.16, "text": " Right?", "tokens": [1779, 30], "temperature": 0.0, "avg_logprob": -0.19807024869051845, "compression_ratio": 1.733009708737864, "no_speech_prob": 1.9221108232159168e-05}, {"id": 903, "seek": 222424, "start": 2229.16, "end": 2234.9599999999996, "text": " And so that means that I can wrap the Vips weird var args resized version", "tokens": [400, 370, 300, 1355, 300, 286, 393, 7019, 264, 691, 2600, 3657, 1374, 3882, 82, 725, 1602, 3037], "temperature": 0.0, "avg_logprob": -0.19807024869051845, "compression_ratio": 1.733009708737864, "no_speech_prob": 1.9221108232159168e-05}, {"id": 904, "seek": 222424, "start": 2234.9599999999996, "end": 2238.7999999999997, "text": " with a non-var args resized version where you always pass in vertical", "tokens": [365, 257, 2107, 12, 8517, 3882, 82, 725, 1602, 3037, 689, 291, 1009, 1320, 294, 9429], "temperature": 0.0, "avg_logprob": -0.19807024869051845, "compression_ratio": 1.733009708737864, "no_speech_prob": 1.9221108232159168e-05}, {"id": 905, "seek": 222424, "start": 2238.7999999999997, "end": 2240.3599999999997, "text": " scale, for instance.", "tokens": [4373, 11, 337, 5197, 13], "temperature": 0.0, "avg_logprob": -0.19807024869051845, "compression_ratio": 1.733009708737864, "no_speech_prob": 1.9221108232159168e-05}, {"id": 906, "seek": 222424, "start": 2240.3599999999997, "end": 2246.52, "text": " And so now, I can just go ahead and say, Vips load image.", "tokens": [400, 370, 586, 11, 286, 393, 445, 352, 2286, 293, 584, 11, 691, 2600, 3677, 3256, 13], "temperature": 0.0, "avg_logprob": -0.19807024869051845, "compression_ratio": 1.733009708737864, "no_speech_prob": 1.9221108232159168e-05}, {"id": 907, "seek": 222424, "start": 2246.52, "end": 2252.72, "text": " And then I can say, Vips get, and then I can pass that to Swift for", "tokens": [400, 550, 286, 393, 584, 11, 691, 2600, 483, 11, 293, 550, 286, 393, 1320, 300, 281, 25539, 337], "temperature": 0.0, "avg_logprob": -0.19807024869051845, "compression_ratio": 1.733009708737864, "no_speech_prob": 1.9221108232159168e-05}, {"id": 908, "seek": 225272, "start": 2252.72, "end": 2256.64, "text": " TensorFlow in order to display it through matplotlib.", "tokens": [37624, 294, 1668, 281, 4674, 309, 807, 3803, 564, 310, 38270, 13], "temperature": 0.0, "avg_logprob": -0.16079730572907822, "compression_ratio": 1.5879828326180256, "no_speech_prob": 1.0451155503687914e-05}, {"id": 909, "seek": 225272, "start": 2259.72, "end": 2261.52, "text": " Now, there's a really interesting thing here,", "tokens": [823, 11, 456, 311, 257, 534, 1880, 551, 510, 11], "temperature": 0.0, "avg_logprob": -0.16079730572907822, "compression_ratio": 1.5879828326180256, "no_speech_prob": 1.0451155503687914e-05}, {"id": 910, "seek": 225272, "start": 2261.52, "end": 2266.72, "text": " which is when you're working with C, you have to deal with C memory management.", "tokens": [597, 307, 562, 291, 434, 1364, 365, 383, 11, 291, 362, 281, 2028, 365, 383, 4675, 4592, 13], "temperature": 0.0, "avg_logprob": -0.16079730572907822, "compression_ratio": 1.5879828326180256, "no_speech_prob": 1.0451155503687914e-05}, {"id": 911, "seek": 225272, "start": 2266.72, "end": 2270.3199999999997, "text": " So Swift has this fantastic reference counting system,", "tokens": [407, 25539, 575, 341, 5456, 6408, 13251, 1185, 11], "temperature": 0.0, "avg_logprob": -0.16079730572907822, "compression_ratio": 1.5879828326180256, "no_speech_prob": 1.0451155503687914e-05}, {"id": 912, "seek": 225272, "start": 2270.3199999999997, "end": 2273.04, "text": " which nearly always handles memory for you.", "tokens": [597, 6217, 1009, 18722, 4675, 337, 291, 13], "temperature": 0.0, "avg_logprob": -0.16079730572907822, "compression_ratio": 1.5879828326180256, "no_speech_prob": 1.0451155503687914e-05}, {"id": 913, "seek": 225272, "start": 2274.48, "end": 2278.3199999999997, "text": " Every C library handles memory management differently.", "tokens": [2048, 383, 6405, 18722, 4675, 4592, 7614, 13], "temperature": 0.0, "avg_logprob": -0.16079730572907822, "compression_ratio": 1.5879828326180256, "no_speech_prob": 1.0451155503687914e-05}, {"id": 914, "seek": 225272, "start": 2278.3199999999997, "end": 2280.0, "text": " So we're about to talk about OpenCV,", "tokens": [407, 321, 434, 466, 281, 751, 466, 7238, 34, 53, 11], "temperature": 0.0, "avg_logprob": -0.16079730572907822, "compression_ratio": 1.5879828326180256, "no_speech_prob": 1.0451155503687914e-05}, {"id": 915, "seek": 228000, "start": 2280.0, "end": 2282.96, "text": " which actually has its own reference counting system, believe it or not.", "tokens": [597, 767, 575, 1080, 1065, 6408, 13251, 1185, 11, 1697, 309, 420, 406, 13], "temperature": 0.0, "avg_logprob": -0.1375838333998269, "compression_ratio": 1.7886178861788617, "no_speech_prob": 7.76678371039452e-06}, {"id": 916, "seek": 228000, "start": 2284.04, "end": 2286.52, "text": " But most of the time, the library will tell you, hey,", "tokens": [583, 881, 295, 264, 565, 11, 264, 6405, 486, 980, 291, 11, 4177, 11], "temperature": 0.0, "avg_logprob": -0.1375838333998269, "compression_ratio": 1.7886178861788617, "no_speech_prob": 7.76678371039452e-06}, {"id": 917, "seek": 228000, "start": 2286.52, "end": 2290.52, "text": " this thing is gonna allocate some memory, you have to free it later, right?", "tokens": [341, 551, 307, 799, 35713, 512, 4675, 11, 291, 362, 281, 1737, 309, 1780, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1375838333998269, "compression_ratio": 1.7886178861788617, "no_speech_prob": 7.76678371039452e-06}, {"id": 918, "seek": 228000, "start": 2290.52, "end": 2292.52, "text": " And so here's a really cool trick.", "tokens": [400, 370, 510, 311, 257, 534, 1627, 4282, 13], "temperature": 0.0, "avg_logprob": -0.1375838333998269, "compression_ratio": 1.7886178861788617, "no_speech_prob": 7.76678371039452e-06}, {"id": 919, "seek": 228000, "start": 2292.52, "end": 2295.6, "text": " The Vips get function says, hey, this memory,", "tokens": [440, 691, 2600, 483, 2445, 1619, 11, 4177, 11, 341, 4675, 11], "temperature": 0.0, "avg_logprob": -0.1375838333998269, "compression_ratio": 1.7886178861788617, "no_speech_prob": 7.76678371039452e-06}, {"id": 920, "seek": 228000, "start": 2295.6, "end": 2297.24, "text": " you're gonna have to free it later.", "tokens": [291, 434, 799, 362, 281, 1737, 309, 1780, 13], "temperature": 0.0, "avg_logprob": -0.1375838333998269, "compression_ratio": 1.7886178861788617, "no_speech_prob": 7.76678371039452e-06}, {"id": 921, "seek": 228000, "start": 2297.24, "end": 2300.44, "text": " To free memory in C, you use the free function,", "tokens": [1407, 1737, 4675, 294, 383, 11, 291, 764, 264, 1737, 2445, 11], "temperature": 0.0, "avg_logprob": -0.1375838333998269, "compression_ratio": 1.7886178861788617, "no_speech_prob": 7.76678371039452e-06}, {"id": 922, "seek": 228000, "start": 2300.44, "end": 2305.96, "text": " because we can use C functions from Swift.", "tokens": [570, 321, 393, 764, 383, 6828, 490, 25539, 13], "temperature": 0.0, "avg_logprob": -0.1375838333998269, "compression_ratio": 1.7886178861788617, "no_speech_prob": 7.76678371039452e-06}, {"id": 923, "seek": 228000, "start": 2305.96, "end": 2308.24, "text": " We can use the free function.", "tokens": [492, 393, 764, 264, 1737, 2445, 13], "temperature": 0.0, "avg_logprob": -0.1375838333998269, "compression_ratio": 1.7886178861788617, "no_speech_prob": 7.76678371039452e-06}, {"id": 924, "seek": 230824, "start": 2308.24, "end": 2311.68, "text": " And I need to make sure that we call it when we're all done.", "tokens": [400, 286, 643, 281, 652, 988, 300, 321, 818, 309, 562, 321, 434, 439, 1096, 13], "temperature": 0.0, "avg_logprob": -0.14438859740299964, "compression_ratio": 1.775438596491228, "no_speech_prob": 5.6822709666448645e-06}, {"id": 925, "seek": 230824, "start": 2311.68, "end": 2315.04, "text": " And there's a super cool thing in Swift called defer.", "tokens": [400, 456, 311, 257, 1687, 1627, 551, 294, 25539, 1219, 25704, 13], "temperature": 0.0, "avg_logprob": -0.14438859740299964, "compression_ratio": 1.775438596491228, "no_speech_prob": 5.6822709666448645e-06}, {"id": 926, "seek": 230824, "start": 2315.04, "end": 2320.68, "text": " And defer says, run this piece of code before you finish doing whatever we're", "tokens": [400, 25704, 1619, 11, 1190, 341, 2522, 295, 3089, 949, 291, 2413, 884, 2035, 321, 434], "temperature": 0.0, "avg_logprob": -0.14438859740299964, "compression_ratio": 1.775438596491228, "no_speech_prob": 5.6822709666448645e-06}, {"id": 927, "seek": 230824, "start": 2320.68, "end": 2324.64, "text": " doing, which in this case would be before we exit from this function.", "tokens": [884, 11, 597, 294, 341, 1389, 576, 312, 949, 321, 11043, 490, 341, 2445, 13], "temperature": 0.0, "avg_logprob": -0.14438859740299964, "compression_ratio": 1.775438596491228, "no_speech_prob": 5.6822709666448645e-06}, {"id": 928, "seek": 230824, "start": 2324.64, "end": 2327.3999999999996, "text": " Yeah, so if you throw an exception, if you return early,", "tokens": [865, 11, 370, 498, 291, 3507, 364, 11183, 11, 498, 291, 2736, 2440, 11], "temperature": 0.0, "avg_logprob": -0.14438859740299964, "compression_ratio": 1.775438596491228, "no_speech_prob": 5.6822709666448645e-06}, {"id": 929, "seek": 230824, "start": 2327.3999999999996, "end": 2329.7599999999998, "text": " like anything else, it will make sure to run that.", "tokens": [411, 1340, 1646, 11, 309, 486, 652, 988, 281, 1190, 300, 13], "temperature": 0.0, "avg_logprob": -0.14438859740299964, "compression_ratio": 1.775438596491228, "no_speech_prob": 5.6822709666448645e-06}, {"id": 930, "seek": 230824, "start": 2329.7599999999998, "end": 2332.08, "text": " Yeah, in this case, I probably didn't need defer,", "tokens": [865, 11, 294, 341, 1389, 11, 286, 1391, 994, 380, 643, 25704, 11], "temperature": 0.0, "avg_logprob": -0.14438859740299964, "compression_ratio": 1.775438596491228, "no_speech_prob": 5.6822709666448645e-06}, {"id": 931, "seek": 230824, "start": 2332.08, "end": 2334.4799999999996, "text": " because there isn't like exceptions being thrown, or", "tokens": [570, 456, 1943, 380, 411, 22847, 885, 11732, 11, 420], "temperature": 0.0, "avg_logprob": -0.14438859740299964, "compression_ratio": 1.775438596491228, "no_speech_prob": 5.6822709666448645e-06}, {"id": 932, "seek": 230824, "start": 2334.4799999999996, "end": 2336.12, "text": " lots of different return places.", "tokens": [3195, 295, 819, 2736, 3190, 13], "temperature": 0.0, "avg_logprob": -0.14438859740299964, "compression_ratio": 1.775438596491228, "no_speech_prob": 5.6822709666448645e-06}, {"id": 933, "seek": 233612, "start": 2336.12, "end": 2339.4, "text": " But that's my habit, is that if I need to clean up memory,", "tokens": [583, 300, 311, 452, 7164, 11, 307, 300, 498, 286, 643, 281, 2541, 493, 4675, 11], "temperature": 0.0, "avg_logprob": -0.18951534012616691, "compression_ratio": 1.6608695652173913, "no_speech_prob": 1.5688039638916962e-05}, {"id": 934, "seek": 233612, "start": 2339.4, "end": 2341.88, "text": " I just chuck it in a defer block.", "tokens": [286, 445, 20870, 309, 294, 257, 25704, 3461, 13], "temperature": 0.0, "avg_logprob": -0.18951534012616691, "compression_ratio": 1.6608695652173913, "no_speech_prob": 1.5688039638916962e-05}, {"id": 935, "seek": 233612, "start": 2341.88, "end": 2345.3199999999997, "text": " Well, at least that's one of the two methods that I use.", "tokens": [1042, 11, 412, 1935, 300, 311, 472, 295, 264, 732, 7150, 300, 286, 764, 13], "temperature": 0.0, "avg_logprob": -0.18951534012616691, "compression_ratio": 1.6608695652173913, "no_speech_prob": 1.5688039638916962e-05}, {"id": 936, "seek": 233612, "start": 2345.3199999999997, "end": 2346.04, "text": " So that's that.", "tokens": [407, 300, 311, 300, 13], "temperature": 0.0, "avg_logprob": -0.18951534012616691, "compression_ratio": 1.6608695652173913, "no_speech_prob": 1.5688039638916962e-05}, {"id": 937, "seek": 233612, "start": 2347.92, "end": 2353.56, "text": " So because I like finding the edges of things and then doing it anyway,", "tokens": [407, 570, 286, 411, 5006, 264, 8819, 295, 721, 293, 550, 884, 309, 4033, 11], "temperature": 0.0, "avg_logprob": -0.18951534012616691, "compression_ratio": 1.6608695652173913, "no_speech_prob": 1.5688039638916962e-05}, {"id": 938, "seek": 233612, "start": 2353.56, "end": 2358.0, "text": " the next thing I looked at, and this gives you a good sense of how much I", "tokens": [264, 958, 551, 286, 2956, 412, 11, 293, 341, 2709, 291, 257, 665, 2020, 295, 577, 709, 286], "temperature": 0.0, "avg_logprob": -0.18951534012616691, "compression_ratio": 1.6608695652173913, "no_speech_prob": 1.5688039638916962e-05}, {"id": 939, "seek": 233612, "start": 2358.0, "end": 2362.6, "text": " hate tf.data, is I was trying to do anything I could to avoid tf.data.", "tokens": [4700, 256, 69, 13, 67, 3274, 11, 307, 286, 390, 1382, 281, 360, 1340, 286, 727, 281, 5042, 256, 69, 13, 67, 3274, 13], "temperature": 0.0, "avg_logprob": -0.18951534012616691, "compression_ratio": 1.6608695652173913, "no_speech_prob": 1.5688039638916962e-05}, {"id": 940, "seek": 236260, "start": 2362.6, "end": 2366.2799999999997, "text": " And so I thought, all right, let's try OpenCV.", "tokens": [400, 370, 286, 1194, 11, 439, 558, 11, 718, 311, 853, 7238, 34, 53, 13], "temperature": 0.0, "avg_logprob": -0.18353965547349718, "compression_ratio": 1.55793991416309, "no_speech_prob": 8.397748388233595e-06}, {"id": 941, "seek": 236260, "start": 2366.2799999999997, "end": 2368.92, "text": " And for those of you that have been around FastAI for a while,", "tokens": [400, 337, 729, 295, 291, 300, 362, 668, 926, 15968, 48698, 337, 257, 1339, 11], "temperature": 0.0, "avg_logprob": -0.18353965547349718, "compression_ratio": 1.55793991416309, "no_speech_prob": 8.397748388233595e-06}, {"id": 942, "seek": 236260, "start": 2368.92, "end": 2375.3199999999997, "text": " you'll remember OpenCV is what we used in FastAI 0.7.", "tokens": [291, 603, 1604, 7238, 34, 53, 307, 437, 321, 1143, 294, 15968, 48698, 1958, 13, 22, 13], "temperature": 0.0, "avg_logprob": -0.18353965547349718, "compression_ratio": 1.55793991416309, "no_speech_prob": 8.397748388233595e-06}, {"id": 943, "seek": 236260, "start": 2375.3199999999997, "end": 2379.44, "text": " And I loved it because it was insanely, insanely fast.", "tokens": [400, 286, 4333, 309, 570, 309, 390, 40965, 11, 40965, 2370, 13], "temperature": 0.0, "avg_logprob": -0.18353965547349718, "compression_ratio": 1.55793991416309, "no_speech_prob": 8.397748388233595e-06}, {"id": 944, "seek": 236260, "start": 2380.92, "end": 2386.04, "text": " It's fast, reliable, high quality code that covers a massive", "tokens": [467, 311, 2370, 11, 12924, 11, 1090, 3125, 3089, 300, 10538, 257, 5994], "temperature": 0.0, "avg_logprob": -0.18353965547349718, "compression_ratio": 1.55793991416309, "no_speech_prob": 8.397748388233595e-06}, {"id": 945, "seek": 236260, "start": 2386.04, "end": 2387.2, "text": " amount of computer vision.", "tokens": [2372, 295, 3820, 5201, 13], "temperature": 0.0, "avg_logprob": -0.18353965547349718, "compression_ratio": 1.55793991416309, "no_speech_prob": 8.397748388233595e-06}, {"id": 946, "seek": 236260, "start": 2387.2, "end": 2390.68, "text": " It's kind of like, it's what everybody uses if they can.", "tokens": [467, 311, 733, 295, 411, 11, 309, 311, 437, 2201, 4960, 498, 436, 393, 13], "temperature": 0.0, "avg_logprob": -0.18353965547349718, "compression_ratio": 1.55793991416309, "no_speech_prob": 8.397748388233595e-06}, {"id": 947, "seek": 239068, "start": 2390.68, "end": 2394.8799999999997, "text": " And much to my sadness, we had to throw it out,", "tokens": [400, 709, 281, 452, 22462, 11, 321, 632, 281, 3507, 309, 484, 11], "temperature": 0.0, "avg_logprob": -0.15577340326389344, "compression_ratio": 1.599290780141844, "no_speech_prob": 8.397530109505169e-06}, {"id": 948, "seek": 239068, "start": 2394.8799999999997, "end": 2398.96, "text": " because it hates Python multiprocessing so much.", "tokens": [570, 309, 23000, 15329, 3311, 340, 780, 278, 370, 709, 13], "temperature": 0.0, "avg_logprob": -0.15577340326389344, "compression_ratio": 1.599290780141844, "no_speech_prob": 8.397530109505169e-06}, {"id": 949, "seek": 239068, "start": 2398.96, "end": 2404.04, "text": " It just kept creating weird race conditions and crashes and stalls.", "tokens": [467, 445, 4305, 4084, 3657, 4569, 4487, 293, 28642, 293, 50248, 13], "temperature": 0.0, "avg_logprob": -0.15577340326389344, "compression_ratio": 1.599290780141844, "no_speech_prob": 8.397530109505169e-06}, {"id": 950, "seek": 239068, "start": 2404.04, "end": 2407.2799999999997, "text": " Like literally the same code on the same operating system on two different", "tokens": [1743, 3736, 264, 912, 3089, 322, 264, 912, 7447, 1185, 322, 732, 819], "temperature": 0.0, "avg_logprob": -0.15577340326389344, "compression_ratio": 1.599290780141844, "no_speech_prob": 8.397530109505169e-06}, {"id": 951, "seek": 239068, "start": 2407.2799999999997, "end": 2411.3199999999997, "text": " AWS servers that are meant to be the same spec would give different results.", "tokens": [17650, 15909, 300, 366, 4140, 281, 312, 264, 912, 1608, 576, 976, 819, 3542, 13], "temperature": 0.0, "avg_logprob": -0.15577340326389344, "compression_ratio": 1.599290780141844, "no_speech_prob": 8.397530109505169e-06}, {"id": 952, "seek": 239068, "start": 2411.3199999999997, "end": 2412.48, "text": " So that was sad.", "tokens": [407, 300, 390, 4227, 13], "temperature": 0.0, "avg_logprob": -0.15577340326389344, "compression_ratio": 1.599290780141844, "no_speech_prob": 8.397530109505169e-06}, {"id": 953, "seek": 239068, "start": 2412.48, "end": 2415.16, "text": " So I was kind of hopeful maybe it'll work in Swift.", "tokens": [407, 286, 390, 733, 295, 20531, 1310, 309, 603, 589, 294, 25539, 13], "temperature": 0.0, "avg_logprob": -0.15577340326389344, "compression_ratio": 1.599290780141844, "no_speech_prob": 8.397530109505169e-06}, {"id": 954, "seek": 239068, "start": 2415.16, "end": 2416.7999999999997, "text": " So we gave it a go.", "tokens": [407, 321, 2729, 309, 257, 352, 13], "temperature": 0.0, "avg_logprob": -0.15577340326389344, "compression_ratio": 1.599290780141844, "no_speech_prob": 8.397530109505169e-06}, {"id": 955, "seek": 239068, "start": 2416.7999999999997, "end": 2419.64, "text": " And unfortunately, since I last looked at it,", "tokens": [400, 7015, 11, 1670, 286, 1036, 2956, 412, 309, 11], "temperature": 0.0, "avg_logprob": -0.15577340326389344, "compression_ratio": 1.599290780141844, "no_speech_prob": 8.397530109505169e-06}, {"id": 956, "seek": 241964, "start": 2419.64, "end": 2423.8799999999997, "text": " they threw away their C API entirely, and then L C++ only.", "tokens": [436, 11918, 1314, 641, 383, 9362, 7696, 11, 293, 550, 441, 383, 25472, 787, 13], "temperature": 0.0, "avg_logprob": -0.15565388612072878, "compression_ratio": 1.539906103286385, "no_speech_prob": 2.247279553557746e-05}, {"id": 957, "seek": 241964, "start": 2423.8799999999997, "end": 2428.3599999999997, "text": " And Chris just told you we can't use C++ from Swift.", "tokens": [400, 6688, 445, 1907, 291, 321, 393, 380, 764, 383, 25472, 490, 25539, 13], "temperature": 0.0, "avg_logprob": -0.15565388612072878, "compression_ratio": 1.539906103286385, "no_speech_prob": 2.247279553557746e-05}, {"id": 958, "seek": 241964, "start": 2428.3599999999997, "end": 2430.12, "text": " But here's the good news.", "tokens": [583, 510, 311, 264, 665, 2583, 13], "temperature": 0.0, "avg_logprob": -0.15565388612072878, "compression_ratio": 1.539906103286385, "no_speech_prob": 2.247279553557746e-05}, {"id": 959, "seek": 241964, "start": 2430.12, "end": 2434.64, "text": " You can disguise it so Swift doesn't know that it's C++.", "tokens": [509, 393, 32751, 309, 370, 25539, 1177, 380, 458, 300, 309, 311, 383, 25472, 13], "temperature": 0.0, "avg_logprob": -0.15565388612072878, "compression_ratio": 1.539906103286385, "no_speech_prob": 2.247279553557746e-05}, {"id": 960, "seek": 241964, "start": 2434.64, "end": 2439.16, "text": " And so the disguise needs to be a C header file", "tokens": [400, 370, 264, 32751, 2203, 281, 312, 257, 383, 23117, 3991], "temperature": 0.0, "avg_logprob": -0.15565388612072878, "compression_ratio": 1.539906103286385, "no_speech_prob": 2.247279553557746e-05}, {"id": 961, "seek": 241964, "start": 2439.16, "end": 2443.2799999999997, "text": " that only contains C stuff, right?", "tokens": [300, 787, 8306, 383, 1507, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.15565388612072878, "compression_ratio": 1.539906103286385, "no_speech_prob": 2.247279553557746e-05}, {"id": 962, "seek": 241964, "start": 2443.2799999999997, "end": 2447.08, "text": " But what's in the C++ file behind the header file?", "tokens": [583, 437, 311, 294, 264, 383, 25472, 3991, 2261, 264, 23117, 3991, 30], "temperature": 0.0, "avg_logprob": -0.15565388612072878, "compression_ratio": 1.539906103286385, "no_speech_prob": 2.247279553557746e-05}, {"id": 963, "seek": 244708, "start": 2447.08, "end": 2451.7999999999997, "text": " Can be anything at all.", "tokens": [1664, 312, 1340, 412, 439, 13], "temperature": 0.0, "avg_logprob": -0.22117948069155796, "compression_ratio": 1.6289592760180995, "no_speech_prob": 1.7230151570402086e-05}, {"id": 964, "seek": 244708, "start": 2451.7999999999997, "end": 2456.36, "text": " Clang knows Pascal calling conventions, and Swift can call them.", "tokens": [2033, 656, 3255, 41723, 5141, 33520, 11, 293, 25539, 393, 818, 552, 13], "temperature": 0.0, "avg_logprob": -0.22117948069155796, "compression_ratio": 1.6289592760180995, "no_speech_prob": 1.7230151570402086e-05}, {"id": 965, "seek": 244708, "start": 2456.36, "end": 2457.52, "text": " I didn't know that.", "tokens": [286, 994, 380, 458, 300, 13], "temperature": 0.0, "avg_logprob": -0.22117948069155796, "compression_ratio": 1.6289592760180995, "no_speech_prob": 1.7230151570402086e-05}, {"id": 966, "seek": 244708, "start": 2457.52, "end": 2459.04, "text": " Pascal strings too.", "tokens": [41723, 13985, 886, 13], "temperature": 0.0, "avg_logprob": -0.22117948069155796, "compression_ratio": 1.6289592760180995, "no_speech_prob": 1.7230151570402086e-05}, {"id": 967, "seek": 244708, "start": 2459.04, "end": 2460.96, "text": " So here's Swift CV.", "tokens": [407, 510, 311, 25539, 22995, 13], "temperature": 0.0, "avg_logprob": -0.22117948069155796, "compression_ratio": 1.6289592760180995, "no_speech_prob": 1.7230151570402086e-05}, {"id": 968, "seek": 244708, "start": 2460.96, "end": 2466.2799999999997, "text": " And so Swift CV has a very familiar looking package.swift", "tokens": [400, 370, 25539, 22995, 575, 257, 588, 4963, 1237, 7372, 13, 25884, 2008], "temperature": 0.0, "avg_logprob": -0.22117948069155796, "compression_ratio": 1.6289592760180995, "no_speech_prob": 1.7230151570402086e-05}, {"id": 969, "seek": 244708, "start": 2466.2799999999997, "end": 2468.3199999999997, "text": " that contains the stuff that we're used to.", "tokens": [300, 8306, 264, 1507, 300, 321, 434, 1143, 281, 13], "temperature": 0.0, "avg_logprob": -0.22117948069155796, "compression_ratio": 1.6289592760180995, "no_speech_prob": 1.7230151570402086e-05}, {"id": 970, "seek": 244708, "start": 2468.3199999999997, "end": 2473.88, "text": " And it contains a very familiar looking OpenCV for module map.", "tokens": [400, 309, 8306, 257, 588, 4963, 1237, 7238, 34, 53, 337, 10088, 4471, 13], "temperature": 0.0, "avg_logprob": -0.22117948069155796, "compression_ratio": 1.6289592760180995, "no_speech_prob": 1.7230151570402086e-05}, {"id": 971, "seek": 244708, "start": 2473.88, "end": 2476.56, "text": " Now OpenCV actually has more than one library.", "tokens": [823, 7238, 34, 53, 767, 575, 544, 813, 472, 6405, 13], "temperature": 0.0, "avg_logprob": -0.22117948069155796, "compression_ratio": 1.6289592760180995, "no_speech_prob": 1.7230151570402086e-05}, {"id": 972, "seek": 247656, "start": 2476.56, "end": 2479.24, "text": " So we just have to list all the libraries.", "tokens": [407, 321, 445, 362, 281, 1329, 439, 264, 15148, 13], "temperature": 0.0, "avg_logprob": -0.16855574126290804, "compression_ratio": 1.5096153846153846, "no_speech_prob": 9.665297511673998e-06}, {"id": 973, "seek": 247656, "start": 2479.24, "end": 2482.2799999999997, "text": " It has a very familiar looking.", "tokens": [467, 575, 257, 588, 4963, 1237, 13], "temperature": 0.0, "avg_logprob": -0.16855574126290804, "compression_ratio": 1.5096153846153846, "no_speech_prob": 9.665297511673998e-06}, {"id": 974, "seek": 247656, "start": 2482.2799999999997, "end": 2484.44, "text": " Actually, we don't even have a, oh, sorry, that's right.", "tokens": [5135, 11, 321, 500, 380, 754, 362, 257, 11, 1954, 11, 2597, 11, 300, 311, 558, 13], "temperature": 0.0, "avg_logprob": -0.16855574126290804, "compression_ratio": 1.5096153846153846, "no_speech_prob": 9.665297511673998e-06}, {"id": 975, "seek": 247656, "start": 2484.44, "end": 2486.72, "text": " So we didn't use the header file here,", "tokens": [407, 321, 994, 380, 764, 264, 23117, 3991, 510, 11], "temperature": 0.0, "avg_logprob": -0.16855574126290804, "compression_ratio": 1.5096153846153846, "no_speech_prob": 9.665297511673998e-06}, {"id": 976, "seek": 247656, "start": 2486.72, "end": 2490.36, "text": " because we're actually going to do it all from our own custom", "tokens": [570, 321, 434, 767, 516, 281, 360, 309, 439, 490, 527, 1065, 2375], "temperature": 0.0, "avg_logprob": -0.16855574126290804, "compression_ratio": 1.5096153846153846, "no_speech_prob": 9.665297511673998e-06}, {"id": 977, "seek": 247656, "start": 2490.36, "end": 2493.04, "text": " C++ slash C code.", "tokens": [383, 25472, 17330, 383, 3089, 13], "temperature": 0.0, "avg_logprob": -0.16855574126290804, "compression_ratio": 1.5096153846153846, "no_speech_prob": 9.665297511673998e-06}, {"id": 978, "seek": 247656, "start": 2493.04, "end": 2501.16, "text": " So I created a C OpenCV.", "tokens": [407, 286, 2942, 257, 383, 7238, 34, 53, 13], "temperature": 0.0, "avg_logprob": -0.16855574126290804, "compression_ratio": 1.5096153846153846, "no_speech_prob": 9.665297511673998e-06}, {"id": 979, "seek": 247656, "start": 2501.16, "end": 2505.04, "text": " And inside here, you'll find C++ code.", "tokens": [400, 1854, 510, 11, 291, 603, 915, 383, 25472, 3089, 13], "temperature": 0.0, "avg_logprob": -0.16855574126290804, "compression_ratio": 1.5096153846153846, "no_speech_prob": 9.665297511673998e-06}, {"id": 980, "seek": 250504, "start": 2505.04, "end": 2510.36, "text": " And we actually largely stole this from the Go OpenCV wrapper,", "tokens": [400, 321, 767, 11611, 16326, 341, 490, 264, 1037, 7238, 34, 53, 46906, 11], "temperature": 0.0, "avg_logprob": -0.14786002611873125, "compression_ratio": 1.5781990521327014, "no_speech_prob": 1.1125284800073132e-05}, {"id": 981, "seek": 250504, "start": 2510.36, "end": 2513.04, "text": " because Go also doesn't know how to talk to C++,", "tokens": [570, 1037, 611, 1177, 380, 458, 577, 281, 751, 281, 383, 25472, 11], "temperature": 0.0, "avg_logprob": -0.14786002611873125, "compression_ratio": 1.5781990521327014, "no_speech_prob": 1.1125284800073132e-05}, {"id": 982, "seek": 250504, "start": 2513.04, "end": 2516.04, "text": " but it does know how to talk to C. So that was a convenient way", "tokens": [457, 309, 775, 458, 577, 281, 751, 281, 383, 13, 407, 300, 390, 257, 10851, 636], "temperature": 0.0, "avg_logprob": -0.14786002611873125, "compression_ratio": 1.5781990521327014, "no_speech_prob": 1.1125284800073132e-05}, {"id": 983, "seek": 250504, "start": 2516.04, "end": 2517.2799999999997, "text": " to kind of get started.", "tokens": [281, 733, 295, 483, 1409, 13], "temperature": 0.0, "avg_logprob": -0.14786002611873125, "compression_ratio": 1.5781990521327014, "no_speech_prob": 1.1125284800073132e-05}, {"id": 984, "seek": 250504, "start": 2517.2799999999997, "end": 2519.7599999999998, "text": " And you can see that, for example, we can't call new,", "tokens": [400, 291, 393, 536, 300, 11, 337, 1365, 11, 321, 393, 380, 818, 777, 11], "temperature": 0.0, "avg_logprob": -0.14786002611873125, "compression_ratio": 1.5781990521327014, "no_speech_prob": 1.1125284800073132e-05}, {"id": 985, "seek": 250504, "start": 2519.7599999999998, "end": 2521.72, "text": " because new is C++.", "tokens": [570, 777, 307, 383, 25472, 13], "temperature": 0.0, "avg_logprob": -0.14786002611873125, "compression_ratio": 1.5781990521327014, "no_speech_prob": 1.1125284800073132e-05}, {"id": 986, "seek": 250504, "start": 2521.72, "end": 2526.92, "text": " But we can create a function called matnew that calls that.", "tokens": [583, 321, 393, 1884, 257, 2445, 1219, 3803, 7686, 300, 5498, 300, 13], "temperature": 0.0, "avg_logprob": -0.14786002611873125, "compression_ratio": 1.5781990521327014, "no_speech_prob": 1.1125284800073132e-05}, {"id": 987, "seek": 252692, "start": 2526.92, "end": 2536.08, "text": " And then we can create a header that has matnew.", "tokens": [400, 550, 321, 393, 1884, 257, 23117, 300, 575, 3803, 7686, 13], "temperature": 0.0, "avg_logprob": -0.18979030916060524, "compression_ratio": 1.5480225988700564, "no_speech_prob": 1.6536669136257842e-06}, {"id": 988, "seek": 252692, "start": 2536.08, "end": 2538.32, "text": " And that's not C++.", "tokens": [400, 300, 311, 406, 383, 25472, 13], "temperature": 0.0, "avg_logprob": -0.18979030916060524, "compression_ratio": 1.5480225988700564, "no_speech_prob": 1.6536669136257842e-06}, {"id": 989, "seek": 252692, "start": 2538.32, "end": 2543.36, "text": " This is actually a plain C struct, pointed to a struct.", "tokens": [639, 307, 767, 257, 11121, 383, 6594, 11, 10932, 281, 257, 6594, 13], "temperature": 0.0, "avg_logprob": -0.18979030916060524, "compression_ratio": 1.5480225988700564, "no_speech_prob": 1.6536669136257842e-06}, {"id": 990, "seek": 252692, "start": 2543.36, "end": 2545.48, "text": " And so I can call that.", "tokens": [400, 370, 286, 393, 818, 300, 13], "temperature": 0.0, "avg_logprob": -0.18979030916060524, "compression_ratio": 1.5480225988700564, "no_speech_prob": 1.6536669136257842e-06}, {"id": 991, "seek": 252692, "start": 2545.48, "end": 2547.96, "text": " And so even generics, C++ generics,", "tokens": [400, 370, 754, 1337, 1167, 11, 383, 25472, 1337, 1167, 11], "temperature": 0.0, "avg_logprob": -0.18979030916060524, "compression_ratio": 1.5480225988700564, "no_speech_prob": 1.6536669136257842e-06}, {"id": 992, "seek": 252692, "start": 2547.96, "end": 2548.92, "text": " we can handle this way.", "tokens": [321, 393, 4813, 341, 636, 13], "temperature": 0.0, "avg_logprob": -0.18979030916060524, "compression_ratio": 1.5480225988700564, "no_speech_prob": 1.6536669136257842e-06}, {"id": 993, "seek": 252692, "start": 2548.92, "end": 2556.7200000000003, "text": " So OpenCV actually has a full on multi-dimensional generic array.", "tokens": [407, 7238, 34, 53, 767, 575, 257, 1577, 322, 4825, 12, 18759, 19577, 10225, 13], "temperature": 0.0, "avg_logprob": -0.18979030916060524, "compression_ratio": 1.5480225988700564, "no_speech_prob": 1.6536669136257842e-06}, {"id": 994, "seek": 255672, "start": 2556.72, "end": 2559.2, "text": " It's like NumPy with matrix multiplication,", "tokens": [467, 311, 411, 22592, 47, 88, 365, 8141, 27290, 11], "temperature": 0.0, "avg_logprob": -0.15729217869894846, "compression_ratio": 1.589430894308943, "no_speech_prob": 3.426348848734051e-05}, {"id": 995, "seek": 255672, "start": 2559.2, "end": 2560.4399999999996, "text": " all the stuff in it.", "tokens": [439, 264, 1507, 294, 309, 13], "temperature": 0.0, "avg_logprob": -0.15729217869894846, "compression_ratio": 1.589430894308943, "no_speech_prob": 3.426348848734051e-05}, {"id": 996, "seek": 255672, "start": 2560.4399999999996, "end": 2562.3199999999997, "text": " And the way its generic stuff works", "tokens": [400, 264, 636, 1080, 19577, 1507, 1985], "temperature": 0.0, "avg_logprob": -0.15729217869894846, "compression_ratio": 1.589430894308943, "no_speech_prob": 3.426348848734051e-05}, {"id": 997, "seek": 255672, "start": 2562.3199999999997, "end": 2564.8799999999997, "text": " is that you can ask for a particular pixel,", "tokens": [307, 300, 291, 393, 1029, 337, 257, 1729, 19261, 11], "temperature": 0.0, "avg_logprob": -0.15729217869894846, "compression_ratio": 1.589430894308943, "no_speech_prob": 3.426348848734051e-05}, {"id": 998, "seek": 255672, "start": 2564.8799999999997, "end": 2568.52, "text": " and you say, what data type is it using C++ generics?", "tokens": [293, 291, 584, 11, 437, 1412, 2010, 307, 309, 1228, 383, 25472, 1337, 1167, 30], "temperature": 0.0, "avg_logprob": -0.15729217869894846, "compression_ratio": 1.589430894308943, "no_speech_prob": 3.426348848734051e-05}, {"id": 999, "seek": 255672, "start": 2568.52, "end": 2571.4399999999996, "text": " So we just create lots and lots of different versions,", "tokens": [407, 321, 445, 1884, 3195, 293, 3195, 295, 819, 9606, 11], "temperature": 0.0, "avg_logprob": -0.15729217869894846, "compression_ratio": 1.589430894308943, "no_speech_prob": 3.426348848734051e-05}, {"id": 1000, "seek": 255672, "start": 2571.4399999999996, "end": 2573.3999999999996, "text": " or all the different generic versions,", "tokens": [420, 439, 264, 819, 19577, 9606, 11], "temperature": 0.0, "avg_logprob": -0.15729217869894846, "compression_ratio": 1.589430894308943, "no_speech_prob": 3.426348848734051e-05}, {"id": 1001, "seek": 255672, "start": 2573.3999999999996, "end": 2579.64, "text": " which in the header file look like C.", "tokens": [597, 294, 264, 23117, 3991, 574, 411, 383, 13], "temperature": 0.0, "avg_logprob": -0.15729217869894846, "compression_ratio": 1.589430894308943, "no_speech_prob": 3.426348848734051e-05}, {"id": 1002, "seek": 255672, "start": 2579.64, "end": 2585.04, "text": " So once we've done all that, we can then say, import SwiftCV", "tokens": [407, 1564, 321, 600, 1096, 439, 300, 11, 321, 393, 550, 584, 11, 974, 25539, 34, 53], "temperature": 0.0, "avg_logprob": -0.15729217869894846, "compression_ratio": 1.589430894308943, "no_speech_prob": 3.426348848734051e-05}, {"id": 1003, "seek": 258504, "start": 2585.04, "end": 2588.52, "text": " and start using OpenCV stuff.", "tokens": [293, 722, 1228, 7238, 34, 53, 1507, 13], "temperature": 0.0, "avg_logprob": -0.13627631405749954, "compression_ratio": 1.5307262569832403, "no_speech_prob": 6.143992777651874e-06}, {"id": 1004, "seek": 258504, "start": 2588.52, "end": 2591.44, "text": " So what does that look like?", "tokens": [407, 437, 775, 300, 574, 411, 30], "temperature": 0.0, "avg_logprob": -0.13627631405749954, "compression_ratio": 1.5307262569832403, "no_speech_prob": 6.143992777651874e-06}, {"id": 1005, "seek": 258504, "start": 2591.44, "end": 2596.2799999999997, "text": " Well, now that we can use that, we can read an image.", "tokens": [1042, 11, 586, 300, 321, 393, 764, 300, 11, 321, 393, 1401, 364, 3256, 13], "temperature": 0.0, "avg_logprob": -0.13627631405749954, "compression_ratio": 1.5307262569832403, "no_speech_prob": 6.143992777651874e-06}, {"id": 1006, "seek": 258504, "start": 2596.2799999999997, "end": 2598.88, "text": " We can have a look at its size.", "tokens": [492, 393, 362, 257, 574, 412, 1080, 2744, 13], "temperature": 0.0, "avg_logprob": -0.13627631405749954, "compression_ratio": 1.5307262569832403, "no_speech_prob": 6.143992777651874e-06}, {"id": 1007, "seek": 258504, "start": 2598.88, "end": 2602.7599999999998, "text": " We can get the underlying C pointer.", "tokens": [492, 393, 483, 264, 14217, 383, 23918, 13], "temperature": 0.0, "avg_logprob": -0.13627631405749954, "compression_ratio": 1.5307262569832403, "no_speech_prob": 6.143992777651874e-06}, {"id": 1008, "seek": 258504, "start": 2602.7599999999998, "end": 2608.96, "text": " And we can start doing timing things and kind of see,", "tokens": [400, 321, 393, 722, 884, 10822, 721, 293, 733, 295, 536, 11], "temperature": 0.0, "avg_logprob": -0.13627631405749954, "compression_ratio": 1.5307262569832403, "no_speech_prob": 6.143992777651874e-06}, {"id": 1009, "seek": 258504, "start": 2608.96, "end": 2610.44, "text": " is it actually looking like it's going", "tokens": [307, 309, 767, 1237, 411, 309, 311, 516], "temperature": 0.0, "avg_logprob": -0.13627631405749954, "compression_ratio": 1.5307262569832403, "no_speech_prob": 6.143992777651874e-06}, {"id": 1010, "seek": 261044, "start": 2610.44, "end": 2617.32, "text": " to be hopeful in terms of performance, and so forth.", "tokens": [281, 312, 20531, 294, 2115, 295, 3389, 11, 293, 370, 5220, 13], "temperature": 0.0, "avg_logprob": -0.18537700986399233, "compression_ratio": 1.51528384279476, "no_speech_prob": 9.07998673937982e-06}, {"id": 1011, "seek": 261044, "start": 2617.32, "end": 2619.84, "text": " I was very scared when I started seeing in Swift", "tokens": [286, 390, 588, 5338, 562, 286, 1409, 2577, 294, 25539], "temperature": 0.0, "avg_logprob": -0.18537700986399233, "compression_ratio": 1.51528384279476, "no_speech_prob": 9.07998673937982e-06}, {"id": 1012, "seek": 261044, "start": 2619.84, "end": 2622.88, "text": " all these unsafe mutable pointers and whatnot.", "tokens": [439, 613, 35948, 5839, 712, 44548, 293, 25882, 13], "temperature": 0.0, "avg_logprob": -0.18537700986399233, "compression_ratio": 1.51528384279476, "no_speech_prob": 9.07998673937982e-06}, {"id": 1013, "seek": 261044, "start": 2622.88, "end": 2625.12, "text": " They're designed to make you scared.", "tokens": [814, 434, 4761, 281, 652, 291, 5338, 13], "temperature": 0.0, "avg_logprob": -0.18537700986399233, "compression_ratio": 1.51528384279476, "no_speech_prob": 9.07998673937982e-06}, {"id": 1014, "seek": 261044, "start": 2625.12, "end": 2626.96, "text": " It starts with unsafe.", "tokens": [467, 3719, 365, 35948, 13], "temperature": 0.0, "avg_logprob": -0.18537700986399233, "compression_ratio": 1.51528384279476, "no_speech_prob": 9.07998673937982e-06}, {"id": 1015, "seek": 261044, "start": 2626.96, "end": 2627.68, "text": " Fair enough.", "tokens": [12157, 1547, 13], "temperature": 0.0, "avg_logprob": -0.18537700986399233, "compression_ratio": 1.51528384279476, "no_speech_prob": 9.07998673937982e-06}, {"id": 1016, "seek": 261044, "start": 2627.68, "end": 2628.7200000000003, "text": " But this is C, right?", "tokens": [583, 341, 307, 383, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.18537700986399233, "compression_ratio": 1.51528384279476, "no_speech_prob": 9.07998673937982e-06}, {"id": 1017, "seek": 261044, "start": 2628.7200000000003, "end": 2631.28, "text": " And so C is inherently unsafe.", "tokens": [400, 370, 383, 307, 27993, 35948, 13], "temperature": 0.0, "avg_logprob": -0.18537700986399233, "compression_ratio": 1.51528384279476, "no_speech_prob": 9.07998673937982e-06}, {"id": 1018, "seek": 261044, "start": 2631.28, "end": 2633.68, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.18537700986399233, "compression_ratio": 1.51528384279476, "no_speech_prob": 9.07998673937982e-06}, {"id": 1019, "seek": 261044, "start": 2633.68, "end": 2636.0, "text": " So a theory on that is that it does not", "tokens": [407, 257, 5261, 322, 300, 307, 300, 309, 775, 406], "temperature": 0.0, "avg_logprob": -0.18537700986399233, "compression_ratio": 1.51528384279476, "no_speech_prob": 9.07998673937982e-06}, {"id": 1020, "seek": 261044, "start": 2636.0, "end": 2637.12, "text": " prevent you from using it.", "tokens": [4871, 291, 490, 1228, 309, 13], "temperature": 0.0, "avg_logprob": -0.18537700986399233, "compression_ratio": 1.51528384279476, "no_speech_prob": 9.07998673937982e-06}, {"id": 1021, "seek": 263712, "start": 2637.12, "end": 2640.88, "text": " It just makes it so you know that you're in that world.", "tokens": [467, 445, 1669, 309, 370, 291, 458, 300, 291, 434, 294, 300, 1002, 13], "temperature": 0.0, "avg_logprob": -0.12759354331276634, "compression_ratio": 1.6307053941908713, "no_speech_prob": 1.0128541362064425e-05}, {"id": 1022, "seek": 263712, "start": 2640.88, "end": 2648.16, "text": " But there's actually this great table I saw from Ray Wendelik's", "tokens": [583, 456, 311, 767, 341, 869, 3199, 286, 1866, 490, 10883, 343, 521, 338, 1035, 311], "temperature": 0.0, "avg_logprob": -0.12759354331276634, "compression_ratio": 1.6307053941908713, "no_speech_prob": 1.0128541362064425e-05}, {"id": 1023, "seek": 263712, "start": 2648.16, "end": 2649.48, "text": " website.", "tokens": [3144, 13], "temperature": 0.0, "avg_logprob": -0.12759354331276634, "compression_ratio": 1.6307053941908713, "no_speech_prob": 1.0128541362064425e-05}, {"id": 1024, "seek": 263712, "start": 2649.48, "end": 2651.2, "text": " And I've stolen it here.", "tokens": [400, 286, 600, 15900, 309, 510, 13], "temperature": 0.0, "avg_logprob": -0.12759354331276634, "compression_ratio": 1.6307053941908713, "no_speech_prob": 1.0128541362064425e-05}, {"id": 1025, "seek": 263712, "start": 2651.2, "end": 2653.3199999999997, "text": " And basically, what he pointed out", "tokens": [400, 1936, 11, 437, 415, 10932, 484], "temperature": 0.0, "avg_logprob": -0.12759354331276634, "compression_ratio": 1.6307053941908713, "no_speech_prob": 1.0128541362064425e-05}, {"id": 1026, "seek": 263712, "start": 2653.3199999999997, "end": 2656.24, "text": " is the names of all of these crazy pointer types", "tokens": [307, 264, 5288, 295, 439, 295, 613, 3219, 23918, 3467], "temperature": 0.0, "avg_logprob": -0.12759354331276634, "compression_ratio": 1.6307053941908713, "no_speech_prob": 1.0128541362064425e-05}, {"id": 1027, "seek": 263712, "start": 2656.24, "end": 2658.48, "text": " actually have this very well structured thing.", "tokens": [767, 362, 341, 588, 731, 18519, 551, 13], "temperature": 0.0, "avg_logprob": -0.12759354331276634, "compression_ratio": 1.6307053941908713, "no_speech_prob": 1.0128541362064425e-05}, {"id": 1028, "seek": 263712, "start": 2658.48, "end": 2660.0, "text": " They all start with unsafe.", "tokens": [814, 439, 722, 365, 35948, 13], "temperature": 0.0, "avg_logprob": -0.12759354331276634, "compression_ratio": 1.6307053941908713, "no_speech_prob": 1.0128541362064425e-05}, {"id": 1029, "seek": 263712, "start": 2660.0, "end": 2661.56, "text": " They all end with pointer.", "tokens": [814, 439, 917, 365, 23918, 13], "temperature": 0.0, "avg_logprob": -0.12759354331276634, "compression_ratio": 1.6307053941908713, "no_speech_prob": 1.0128541362064425e-05}, {"id": 1030, "seek": 263712, "start": 2661.56, "end": 2663.68, "text": " And in the middle, there's this little mini language,", "tokens": [400, 294, 264, 2808, 11, 456, 311, 341, 707, 8382, 2856, 11], "temperature": 0.0, "avg_logprob": -0.12759354331276634, "compression_ratio": 1.6307053941908713, "no_speech_prob": 1.0128541362064425e-05}, {"id": 1031, "seek": 266368, "start": 2663.68, "end": 2667.72, "text": " which is can you change them or not?", "tokens": [597, 307, 393, 291, 1319, 552, 420, 406, 30], "temperature": 0.0, "avg_logprob": -0.14309174439002728, "compression_ratio": 1.656, "no_speech_prob": 3.2681829907232895e-05}, {"id": 1032, "seek": 266368, "start": 2667.72, "end": 2670.08, "text": " Are they typed or not?", "tokens": [2014, 436, 33941, 420, 406, 30], "temperature": 0.0, "avg_logprob": -0.14309174439002728, "compression_ratio": 1.656, "no_speech_prob": 3.2681829907232895e-05}, {"id": 1033, "seek": 266368, "start": 2670.08, "end": 2673.16, "text": " Do we know the count of the number of things in there or not?", "tokens": [1144, 321, 458, 264, 1207, 295, 264, 1230, 295, 721, 294, 456, 420, 406, 30], "temperature": 0.0, "avg_logprob": -0.14309174439002728, "compression_ratio": 1.656, "no_speech_prob": 3.2681829907232895e-05}, {"id": 1034, "seek": 266368, "start": 2673.16, "end": 2675.68, "text": " And what type of thing do they point to if they're typed?", "tokens": [400, 437, 2010, 295, 551, 360, 436, 935, 281, 498, 436, 434, 33941, 30], "temperature": 0.0, "avg_logprob": -0.14309174439002728, "compression_ratio": 1.656, "no_speech_prob": 3.2681829907232895e-05}, {"id": 1035, "seek": 266368, "start": 2675.68, "end": 2678.3599999999997, "text": " So once you kind of realize all of these names", "tokens": [407, 1564, 291, 733, 295, 4325, 439, 295, 613, 5288], "temperature": 0.0, "avg_logprob": -0.14309174439002728, "compression_ratio": 1.656, "no_speech_prob": 3.2681829907232895e-05}, {"id": 1036, "seek": 266368, "start": 2678.3599999999997, "end": 2680.72, "text": " have that structure, suddenly things", "tokens": [362, 300, 3877, 11, 5800, 721], "temperature": 0.0, "avg_logprob": -0.14309174439002728, "compression_ratio": 1.656, "no_speech_prob": 3.2681829907232895e-05}, {"id": 1037, "seek": 266368, "start": 2680.72, "end": 2684.3199999999997, "text": " start seeming more reasonable again.", "tokens": [722, 1643, 278, 544, 10585, 797, 13], "temperature": 0.0, "avg_logprob": -0.14309174439002728, "compression_ratio": 1.656, "no_speech_prob": 3.2681829907232895e-05}, {"id": 1038, "seek": 266368, "start": 2684.3199999999997, "end": 2685.3599999999997, "text": " We have two questions.", "tokens": [492, 362, 732, 1651, 13], "temperature": 0.0, "avg_logprob": -0.14309174439002728, "compression_ratio": 1.656, "no_speech_prob": 3.2681829907232895e-05}, {"id": 1039, "seek": 266368, "start": 2685.3599999999997, "end": 2685.8599999999997, "text": " All right.", "tokens": [1057, 558, 13], "temperature": 0.0, "avg_logprob": -0.14309174439002728, "compression_ratio": 1.656, "no_speech_prob": 3.2681829907232895e-05}, {"id": 1040, "seek": 266368, "start": 2685.8599999999997, "end": 2688.3999999999996, "text": " Let's go with the two questions.", "tokens": [961, 311, 352, 365, 264, 732, 1651, 13], "temperature": 0.0, "avg_logprob": -0.14309174439002728, "compression_ratio": 1.656, "no_speech_prob": 3.2681829907232895e-05}, {"id": 1041, "seek": 266368, "start": 2688.3999999999996, "end": 2691.0, "text": " One is, are the C libraries dynamically linked", "tokens": [1485, 307, 11, 366, 264, 383, 15148, 43492, 9408], "temperature": 0.0, "avg_logprob": -0.14309174439002728, "compression_ratio": 1.656, "no_speech_prob": 3.2681829907232895e-05}, {"id": 1042, "seek": 269100, "start": 2691.0, "end": 2693.84, "text": " or statically linked or compiled from source", "tokens": [420, 2219, 984, 9408, 420, 36548, 490, 4009], "temperature": 0.0, "avg_logprob": -0.10413981146282619, "compression_ratio": 1.8171641791044777, "no_speech_prob": 1.6439469618489966e-05}, {"id": 1043, "seek": 269100, "start": 2693.84, "end": 2695.24, "text": " to be available in Swift?", "tokens": [281, 312, 2435, 294, 25539, 30], "temperature": 0.0, "avg_logprob": -0.10413981146282619, "compression_ratio": 1.8171641791044777, "no_speech_prob": 1.6439469618489966e-05}, {"id": 1044, "seek": 269100, "start": 2695.24, "end": 2695.76, "text": " Sure.", "tokens": [4894, 13], "temperature": 0.0, "avg_logprob": -0.10413981146282619, "compression_ratio": 1.8171641791044777, "no_speech_prob": 1.6439469618489966e-05}, {"id": 1045, "seek": 269100, "start": 2695.76, "end": 2699.44, "text": " By default, if you import them, they are statically linked.", "tokens": [3146, 7576, 11, 498, 291, 974, 552, 11, 436, 366, 2219, 984, 9408, 13], "temperature": 0.0, "avg_logprob": -0.10413981146282619, "compression_ratio": 1.8171641791044777, "no_speech_prob": 1.6439469618489966e-05}, {"id": 1046, "seek": 269100, "start": 2699.44, "end": 2702.2, "text": " And so they'll link in with the normal linker flags.", "tokens": [400, 370, 436, 603, 2113, 294, 365, 264, 2710, 2113, 260, 23265, 13], "temperature": 0.0, "avg_logprob": -0.10413981146282619, "compression_ratio": 1.8171641791044777, "no_speech_prob": 1.6439469618489966e-05}, {"id": 1047, "seek": 269100, "start": 2702.2, "end": 2705.32, "text": " And if the library is a.a file, then it", "tokens": [400, 498, 264, 6405, 307, 257, 2411, 64, 3991, 11, 550, 309], "temperature": 0.0, "avg_logprob": -0.10413981146282619, "compression_ratio": 1.8171641791044777, "no_speech_prob": 1.6439469618489966e-05}, {"id": 1048, "seek": 269100, "start": 2705.32, "end": 2707.56, "text": " will get statically linked directly into your Swift code.", "tokens": [486, 483, 2219, 984, 9408, 3838, 666, 428, 25539, 3089, 13], "temperature": 0.0, "avg_logprob": -0.10413981146282619, "compression_ratio": 1.8171641791044777, "no_speech_prob": 1.6439469618489966e-05}, {"id": 1049, "seek": 269100, "start": 2707.56, "end": 2710.48, "text": " If it's a.so file, then you'll dynamically link it.", "tokens": [759, 309, 311, 257, 2411, 539, 3991, 11, 550, 291, 603, 43492, 2113, 309, 13], "temperature": 0.0, "avg_logprob": -0.10413981146282619, "compression_ratio": 1.8171641791044777, "no_speech_prob": 1.6439469618489966e-05}, {"id": 1050, "seek": 269100, "start": 2710.48, "end": 2713.16, "text": " But it's still linked to your executable.", "tokens": [583, 309, 311, 920, 9408, 281, 428, 7568, 712, 13], "temperature": 0.0, "avg_logprob": -0.10413981146282619, "compression_ratio": 1.8171641791044777, "no_speech_prob": 1.6439469618489966e-05}, {"id": 1051, "seek": 269100, "start": 2713.16, "end": 2716.52, "text": " All the linker stuff, so dlopen, is a C API.", "tokens": [1057, 264, 2113, 260, 1507, 11, 370, 37873, 15752, 11, 307, 257, 383, 9362, 13], "temperature": 0.0, "avg_logprob": -0.10413981146282619, "compression_ratio": 1.8171641791044777, "no_speech_prob": 1.6439469618489966e-05}, {"id": 1052, "seek": 269100, "start": 2716.52, "end": 2720.48, "text": " And so if you want to, you can dynamically load C libraries.", "tokens": [400, 370, 498, 291, 528, 281, 11, 291, 393, 43492, 3677, 383, 15148, 13], "temperature": 0.0, "avg_logprob": -0.10413981146282619, "compression_ratio": 1.8171641791044777, "no_speech_prob": 1.6439469618489966e-05}, {"id": 1053, "seek": 272048, "start": 2720.48, "end": 2722.2, "text": " You can look up their symbols dynamically.", "tokens": [509, 393, 574, 493, 641, 16944, 43492, 13], "temperature": 0.0, "avg_logprob": -0.1540541648864746, "compression_ratio": 1.6366666666666667, "no_speech_prob": 2.2471180272987112e-05}, {"id": 1054, "seek": 272048, "start": 2722.2, "end": 2725.12, "text": " You can do all that kind of stuff, too.", "tokens": [509, 393, 360, 439, 300, 733, 295, 1507, 11, 886, 13], "temperature": 0.0, "avg_logprob": -0.1540541648864746, "compression_ratio": 1.6366666666666667, "no_speech_prob": 2.2471180272987112e-05}, {"id": 1055, "seek": 272048, "start": 2725.12, "end": 2727.56, "text": " Another question is, how much C do you", "tokens": [3996, 1168, 307, 11, 577, 709, 383, 360, 291], "temperature": 0.0, "avg_logprob": -0.1540541648864746, "compression_ratio": 1.6366666666666667, "no_speech_prob": 2.2471180272987112e-05}, {"id": 1056, "seek": 272048, "start": 2727.56, "end": 2732.48, "text": " have to know to do all these C-related imports?", "tokens": [362, 281, 458, 281, 360, 439, 613, 383, 12, 12004, 41596, 30], "temperature": 0.0, "avg_logprob": -0.1540541648864746, "compression_ratio": 1.6366666666666667, "no_speech_prob": 2.2471180272987112e-05}, {"id": 1057, "seek": 272048, "start": 2732.48, "end": 2733.2400000000002, "text": " Almost none.", "tokens": [12627, 6022, 13], "temperature": 0.0, "avg_logprob": -0.1540541648864746, "compression_ratio": 1.6366666666666667, "no_speech_prob": 2.2471180272987112e-05}, {"id": 1058, "seek": 272048, "start": 2733.2400000000002, "end": 2736.88, "text": " So I don't really know any C at all.", "tokens": [407, 286, 500, 380, 534, 458, 604, 383, 412, 439, 13], "temperature": 0.0, "avg_logprob": -0.1540541648864746, "compression_ratio": 1.6366666666666667, "no_speech_prob": 2.2471180272987112e-05}, {"id": 1059, "seek": 272048, "start": 2736.88, "end": 2738.52, "text": " So I kind of randomly press buttons", "tokens": [407, 286, 733, 295, 16979, 1886, 9905], "temperature": 0.0, "avg_logprob": -0.1540541648864746, "compression_ratio": 1.6366666666666667, "no_speech_prob": 2.2471180272987112e-05}, {"id": 1060, "seek": 272048, "start": 2738.52, "end": 2739.76, "text": " until things start working.", "tokens": [1826, 721, 722, 1364, 13], "temperature": 0.0, "avg_logprob": -0.1540541648864746, "compression_ratio": 1.6366666666666667, "no_speech_prob": 2.2471180272987112e-05}, {"id": 1061, "seek": 272048, "start": 2739.76, "end": 2741.84, "text": " I'll copy and paste other people's C code.", "tokens": [286, 603, 5055, 293, 9163, 661, 561, 311, 383, 3089, 13], "temperature": 0.0, "avg_logprob": -0.1540541648864746, "compression_ratio": 1.6366666666666667, "no_speech_prob": 2.2471180272987112e-05}, {"id": 1062, "seek": 272048, "start": 2741.84, "end": 2743.44, "text": " Yeah, the internet Stack Overflow", "tokens": [865, 11, 264, 4705, 37649, 4886, 10565], "temperature": 0.0, "avg_logprob": -0.1540541648864746, "compression_ratio": 1.6366666666666667, "no_speech_prob": 2.2471180272987112e-05}, {"id": 1063, "seek": 272048, "start": 2743.44, "end": 2745.32, "text": " has a lot of helpful stuff.", "tokens": [575, 257, 688, 295, 4961, 1507, 13], "temperature": 0.0, "avg_logprob": -0.1540541648864746, "compression_ratio": 1.6366666666666667, "no_speech_prob": 2.2471180272987112e-05}, {"id": 1064, "seek": 272048, "start": 2745.32, "end": 2745.68, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.1540541648864746, "compression_ratio": 1.6366666666666667, "no_speech_prob": 2.2471180272987112e-05}, {"id": 1065, "seek": 272048, "start": 2745.68, "end": 2747.72, "text": " You need to know there's a thing called a header file.", "tokens": [509, 643, 281, 458, 456, 311, 257, 551, 1219, 257, 23117, 3991, 13], "temperature": 0.0, "avg_logprob": -0.1540541648864746, "compression_ratio": 1.6366666666666667, "no_speech_prob": 2.2471180272987112e-05}, {"id": 1066, "seek": 272048, "start": 2747.72, "end": 2749.44, "text": " And that contains a list of the functions", "tokens": [400, 300, 8306, 257, 1329, 295, 264, 6828], "temperature": 0.0, "avg_logprob": -0.1540541648864746, "compression_ratio": 1.6366666666666667, "no_speech_prob": 2.2471180272987112e-05}, {"id": 1067, "seek": 274944, "start": 2749.44, "end": 2750.52, "text": " that you can call.", "tokens": [300, 291, 393, 818, 13], "temperature": 0.0, "avg_logprob": -0.17257350359776225, "compression_ratio": 1.7596899224806202, "no_speech_prob": 1.9522369257174432e-05}, {"id": 1068, "seek": 274944, "start": 2750.52, "end": 2753.36, "text": " And you need to know that you type hash include,", "tokens": [400, 291, 643, 281, 458, 300, 291, 2010, 22019, 4090, 11], "temperature": 0.0, "avg_logprob": -0.17257350359776225, "compression_ratio": 1.7596899224806202, "no_speech_prob": 1.9522369257174432e-05}, {"id": 1069, "seek": 274944, "start": 2753.36, "end": 2755.2000000000003, "text": " angle brackets, header file.", "tokens": [5802, 26179, 11, 23117, 3991, 13], "temperature": 0.0, "avg_logprob": -0.17257350359776225, "compression_ratio": 1.7596899224806202, "no_speech_prob": 1.9522369257174432e-05}, {"id": 1070, "seek": 274944, "start": 2755.2000000000003, "end": 2758.6, "text": " But you can just copy and paste the Swift Socks", "tokens": [583, 291, 393, 445, 5055, 293, 9163, 264, 25539, 407, 2761], "temperature": 0.0, "avg_logprob": -0.17257350359776225, "compression_ratio": 1.7596899224806202, "no_speech_prob": 1.9522369257174432e-05}, {"id": 1071, "seek": 274944, "start": 2758.6, "end": 2760.44, "text": " library that I've already shown you, which has", "tokens": [6405, 300, 286, 600, 1217, 4898, 291, 11, 597, 575], "temperature": 0.0, "avg_logprob": -0.17257350359776225, "compression_ratio": 1.7596899224806202, "no_speech_prob": 1.9522369257174432e-05}, {"id": 1072, "seek": 274944, "start": 2760.44, "end": 2762.2000000000003, "text": " the three files already there.", "tokens": [264, 1045, 7098, 1217, 456, 13], "temperature": 0.0, "avg_logprob": -0.17257350359776225, "compression_ratio": 1.7596899224806202, "no_speech_prob": 1.9522369257174432e-05}, {"id": 1073, "seek": 274944, "start": 2762.2000000000003, "end": 2764.32, "text": " And so really, you don't need to know any C. You just", "tokens": [400, 370, 534, 11, 291, 500, 380, 643, 281, 458, 604, 383, 13, 509, 445], "temperature": 0.0, "avg_logprob": -0.17257350359776225, "compression_ratio": 1.7596899224806202, "no_speech_prob": 1.9522369257174432e-05}, {"id": 1074, "seek": 274944, "start": 2764.32, "end": 2767.12, "text": " need to replace the word Socks with the name of the library", "tokens": [643, 281, 7406, 264, 1349, 407, 2761, 365, 264, 1315, 295, 264, 6405], "temperature": 0.0, "avg_logprob": -0.17257350359776225, "compression_ratio": 1.7596899224806202, "no_speech_prob": 1.9522369257174432e-05}, {"id": 1075, "seek": 274944, "start": 2767.12, "end": 2768.48, "text": " you're using.", "tokens": [291, 434, 1228, 13], "temperature": 0.0, "avg_logprob": -0.17257350359776225, "compression_ratio": 1.7596899224806202, "no_speech_prob": 1.9522369257174432e-05}, {"id": 1076, "seek": 274944, "start": 2768.48, "end": 2774.68, "text": " And then you need to work through the documentation", "tokens": [400, 550, 291, 643, 281, 589, 807, 264, 14333], "temperature": 0.0, "avg_logprob": -0.17257350359776225, "compression_ratio": 1.7596899224806202, "no_speech_prob": 1.9522369257174432e-05}, {"id": 1077, "seek": 274944, "start": 2774.68, "end": 2779.2000000000003, "text": " that's in C. And that's the bit where it gets like,", "tokens": [300, 311, 294, 383, 13, 400, 300, 311, 264, 857, 689, 309, 2170, 411, 11], "temperature": 0.0, "avg_logprob": -0.17257350359776225, "compression_ratio": 1.7596899224806202, "no_speech_prob": 1.9522369257174432e-05}, {"id": 1078, "seek": 277920, "start": 2779.2, "end": 2782.04, "text": " I find the tab completion stuff is the best way to handle that.", "tokens": [286, 915, 264, 4421, 19372, 1507, 307, 264, 1151, 636, 281, 4813, 300, 13], "temperature": 0.0, "avg_logprob": -0.16212633381719174, "compression_ratio": 1.7518518518518518, "no_speech_prob": 1.221695765707409e-05}, {"id": 1079, "seek": 277920, "start": 2782.04, "end": 2782.8799999999997, "text": " It's like hit tab.", "tokens": [467, 311, 411, 2045, 4421, 13], "temperature": 0.0, "avg_logprob": -0.16212633381719174, "compression_ratio": 1.7518518518518518, "no_speech_prob": 1.221695765707409e-05}, {"id": 1080, "seek": 277920, "start": 2782.8799999999997, "end": 2786.08, "text": " And you say let x equal.", "tokens": [400, 291, 584, 718, 2031, 2681, 13], "temperature": 0.0, "avg_logprob": -0.16212633381719174, "compression_ratio": 1.7518518518518518, "no_speech_prob": 1.221695765707409e-05}, {"id": 1081, "seek": 277920, "start": 2786.08, "end": 2787.7599999999998, "text": " And then you call some function.", "tokens": [400, 550, 291, 818, 512, 2445, 13], "temperature": 0.0, "avg_logprob": -0.16212633381719174, "compression_ratio": 1.7518518518518518, "no_speech_prob": 1.221695765707409e-05}, {"id": 1082, "seek": 277920, "start": 2787.7599999999998, "end": 2788.9199999999996, "text": " And then you say x dot.", "tokens": [400, 550, 291, 584, 2031, 5893, 13], "temperature": 0.0, "avg_logprob": -0.16212633381719174, "compression_ratio": 1.7518518518518518, "no_speech_prob": 1.221695765707409e-05}, {"id": 1083, "seek": 277920, "start": 2788.9199999999996, "end": 2790.08, "text": " And you see what's inside it.", "tokens": [400, 291, 536, 437, 311, 1854, 309, 13], "temperature": 0.0, "avg_logprob": -0.16212633381719174, "compression_ratio": 1.7518518518518518, "no_speech_prob": 1.221695765707409e-05}, {"id": 1084, "seek": 277920, "start": 2790.08, "end": 2791.8399999999997, "text": " And things kind of start working.", "tokens": [400, 721, 733, 295, 722, 1364, 13], "temperature": 0.0, "avg_logprob": -0.16212633381719174, "compression_ratio": 1.7518518518518518, "no_speech_prob": 1.221695765707409e-05}, {"id": 1085, "seek": 277920, "start": 2791.8399999999997, "end": 2797.72, "text": " And for all the hard time you give Socks as not a web design", "tokens": [400, 337, 439, 264, 1152, 565, 291, 976, 407, 2761, 382, 406, 257, 3670, 1715], "temperature": 0.0, "avg_logprob": -0.16212633381719174, "compression_ratio": 1.7518518518518518, "no_speech_prob": 1.221695765707409e-05}, {"id": 1086, "seek": 277920, "start": 2797.72, "end": 2800.48, "text": " firm, it has a pretty well-structured API.", "tokens": [6174, 11, 309, 575, 257, 1238, 731, 12, 372, 46847, 9362, 13], "temperature": 0.0, "avg_logprob": -0.16212633381719174, "compression_ratio": 1.7518518518518518, "no_speech_prob": 1.221695765707409e-05}, {"id": 1087, "seek": 277920, "start": 2800.48, "end": 2802.8399999999997, "text": " And so if you have a well-structured API like this,", "tokens": [400, 370, 498, 291, 362, 257, 731, 12, 372, 46847, 9362, 411, 341, 11], "temperature": 0.0, "avg_logprob": -0.16212633381719174, "compression_ratio": 1.7518518518518518, "no_speech_prob": 1.221695765707409e-05}, {"id": 1088, "seek": 277920, "start": 2802.8399999999997, "end": 2804.6, "text": " then using it is pretty straightforward.", "tokens": [550, 1228, 309, 307, 1238, 15325, 13], "temperature": 0.0, "avg_logprob": -0.16212633381719174, "compression_ratio": 1.7518518518518518, "no_speech_prob": 1.221695765707409e-05}, {"id": 1089, "seek": 277920, "start": 2804.6, "end": 2807.6, "text": " If you have something somebody hacked together,", "tokens": [759, 291, 362, 746, 2618, 36218, 1214, 11], "temperature": 0.0, "avg_logprob": -0.16212633381719174, "compression_ratio": 1.7518518518518518, "no_speech_prob": 1.221695765707409e-05}, {"id": 1090, "seek": 280760, "start": 2807.6, "end": 2810.4, "text": " they didn't think about it, then it's probably going to be weird.", "tokens": [436, 994, 380, 519, 466, 309, 11, 550, 309, 311, 1391, 516, 281, 312, 3657, 13], "temperature": 0.0, "avg_logprob": -0.11924420462714301, "compression_ratio": 1.742671009771987, "no_speech_prob": 2.177610804210417e-05}, {"id": 1091, "seek": 280760, "start": 2810.4, "end": 2812.04, "text": " And you may have to understand their API.", "tokens": [400, 291, 815, 362, 281, 1223, 641, 9362, 13], "temperature": 0.0, "avg_logprob": -0.11924420462714301, "compression_ratio": 1.742671009771987, "no_speech_prob": 2.177610804210417e-05}, {"id": 1092, "seek": 280760, "start": 2812.04, "end": 2814.2, "text": " And it may require you to understand a lot of C.", "tokens": [400, 309, 815, 3651, 291, 281, 1223, 257, 688, 295, 383, 13], "temperature": 0.0, "avg_logprob": -0.11924420462714301, "compression_ratio": 1.742671009771987, "no_speech_prob": 2.177610804210417e-05}, {"id": 1093, "seek": 280760, "start": 2814.2, "end": 2816.68, "text": " But those are the APIs that you probably won't end up using.", "tokens": [583, 729, 366, 264, 21445, 300, 291, 1391, 1582, 380, 917, 493, 1228, 13], "temperature": 0.0, "avg_logprob": -0.11924420462714301, "compression_ratio": 1.742671009771987, "no_speech_prob": 2.177610804210417e-05}, {"id": 1094, "seek": 280760, "start": 2816.68, "end": 2819.64, "text": " Because if they haven't gotten a lot of love to their API,", "tokens": [1436, 498, 436, 2378, 380, 5768, 257, 688, 295, 959, 281, 641, 9362, 11], "temperature": 0.0, "avg_logprob": -0.11924420462714301, "compression_ratio": 1.742671009771987, "no_speech_prob": 2.177610804210417e-05}, {"id": 1095, "seek": 280760, "start": 2819.64, "end": 2823.2799999999997, "text": " people aren't using it usually.", "tokens": [561, 3212, 380, 1228, 309, 2673, 13], "temperature": 0.0, "avg_logprob": -0.11924420462714301, "compression_ratio": 1.742671009771987, "no_speech_prob": 2.177610804210417e-05}, {"id": 1096, "seek": 280760, "start": 2823.2799999999997, "end": 2825.72, "text": " My impression is that almost all of the examples", "tokens": [1222, 9995, 307, 300, 1920, 439, 295, 264, 5110], "temperature": 0.0, "avg_logprob": -0.11924420462714301, "compression_ratio": 1.742671009771987, "no_speech_prob": 2.177610804210417e-05}, {"id": 1097, "seek": 280760, "start": 2825.72, "end": 2828.56, "text": " of the future power of Swift seem to rely on not", "tokens": [295, 264, 2027, 1347, 295, 25539, 1643, 281, 10687, 322, 406], "temperature": 0.0, "avg_logprob": -0.11924420462714301, "compression_ratio": 1.742671009771987, "no_speech_prob": 2.177610804210417e-05}, {"id": 1098, "seek": 280760, "start": 2828.56, "end": 2830.48, "text": " on the abstraction to higher levels,", "tokens": [322, 264, 37765, 281, 2946, 4358, 11], "temperature": 0.0, "avg_logprob": -0.11924420462714301, "compression_ratio": 1.742671009771987, "no_speech_prob": 2.177610804210417e-05}, {"id": 1099, "seek": 280760, "start": 2830.48, "end": 2833.2, "text": " but on the diving into lower level details.", "tokens": [457, 322, 264, 20241, 666, 3126, 1496, 4365, 13], "temperature": 0.0, "avg_logprob": -0.11924420462714301, "compression_ratio": 1.742671009771987, "no_speech_prob": 2.177610804210417e-05}, {"id": 1100, "seek": 280760, "start": 2833.2, "end": 2835.64, "text": " As a data scientist, I try to avoid doing this.", "tokens": [1018, 257, 1412, 12662, 11, 286, 853, 281, 5042, 884, 341, 13], "temperature": 0.0, "avg_logprob": -0.11924420462714301, "compression_ratio": 1.742671009771987, "no_speech_prob": 2.177610804210417e-05}, {"id": 1101, "seek": 283564, "start": 2835.64, "end": 2839.7999999999997, "text": " I only go low if I know there's a big performance gain to be had.", "tokens": [286, 787, 352, 2295, 498, 286, 458, 456, 311, 257, 955, 3389, 6052, 281, 312, 632, 13], "temperature": 0.0, "avg_logprob": -0.18304729461669922, "compression_ratio": 1.5925925925925926, "no_speech_prob": 2.0781299099326134e-05}, {"id": 1102, "seek": 283564, "start": 2839.7999999999997, "end": 2843.3599999999997, "text": " So let me set my perspective as a data scientist.", "tokens": [407, 718, 385, 992, 452, 4585, 382, 257, 1412, 12662, 13], "temperature": 0.0, "avg_logprob": -0.18304729461669922, "compression_ratio": 1.5925925925925926, "no_speech_prob": 2.0781299099326134e-05}, {"id": 1103, "seek": 283564, "start": 2843.3599999999997, "end": 2844.64, "text": " And maybe we can hear you all.", "tokens": [400, 1310, 321, 393, 1568, 291, 439, 13], "temperature": 0.0, "avg_logprob": -0.18304729461669922, "compression_ratio": 1.5925925925925926, "no_speech_prob": 2.0781299099326134e-05}, {"id": 1104, "seek": 283564, "start": 2844.64, "end": 2847.6, "text": " Well, and I was just going to inject, we're starting at the bottom.", "tokens": [1042, 11, 293, 286, 390, 445, 516, 281, 10711, 11, 321, 434, 2891, 412, 264, 2767, 13], "temperature": 0.0, "avg_logprob": -0.18304729461669922, "compression_ratio": 1.5925925925925926, "no_speech_prob": 2.0781299099326134e-05}, {"id": 1105, "seek": 283564, "start": 2847.6, "end": 2850.08, "text": " So we'll be getting much higher level soon.", "tokens": [407, 321, 603, 312, 1242, 709, 2946, 1496, 2321, 13], "temperature": 0.0, "avg_logprob": -0.18304729461669922, "compression_ratio": 1.5925925925925926, "no_speech_prob": 2.0781299099326134e-05}, {"id": 1106, "seek": 283564, "start": 2850.08, "end": 2854.3599999999997, "text": " Yeah. But I mean, there's a reason that I'm wanting", "tokens": [865, 13, 583, 286, 914, 11, 456, 311, 257, 1778, 300, 286, 478, 7935], "temperature": 0.0, "avg_logprob": -0.18304729461669922, "compression_ratio": 1.5925925925925926, "no_speech_prob": 2.0781299099326134e-05}, {"id": 1107, "seek": 283564, "start": 2854.3599999999997, "end": 2858.44, "text": " to teach this stuff, which is that I actually think", "tokens": [281, 2924, 341, 1507, 11, 597, 307, 300, 286, 767, 519], "temperature": 0.0, "avg_logprob": -0.18304729461669922, "compression_ratio": 1.5925925925925926, "no_speech_prob": 2.0781299099326134e-05}, {"id": 1108, "seek": 283564, "start": 2858.44, "end": 2864.56, "text": " as data scientists, this is our opportunity to be far more awesome.", "tokens": [382, 1412, 7708, 11, 341, 307, 527, 2650, 281, 312, 1400, 544, 3476, 13], "temperature": 0.0, "avg_logprob": -0.18304729461669922, "compression_ratio": 1.5925925925925926, "no_speech_prob": 2.0781299099326134e-05}, {"id": 1109, "seek": 286456, "start": 2864.56, "end": 2868.4, "text": " It's like being able to access, like something I've noticed", "tokens": [467, 311, 411, 885, 1075, 281, 2105, 11, 411, 746, 286, 600, 5694], "temperature": 0.0, "avg_logprob": -0.14452253977457682, "compression_ratio": 1.695970695970696, "no_speech_prob": 1.4969633411965333e-05}, {"id": 1110, "seek": 286456, "start": 2868.4, "end": 2873.12, "text": " for the last 25 years is like everybody I know in, I mean,", "tokens": [337, 264, 1036, 3552, 924, 307, 411, 2201, 286, 458, 294, 11, 286, 914, 11], "temperature": 0.0, "avg_logprob": -0.14452253977457682, "compression_ratio": 1.695970695970696, "no_speech_prob": 1.4969633411965333e-05}, {"id": 1111, "seek": 286456, "start": 2873.12, "end": 2875.2, "text": " it didn't used to be called data science, but we used to call it", "tokens": [309, 994, 380, 1143, 281, 312, 1219, 1412, 3497, 11, 457, 321, 1143, 281, 818, 309], "temperature": 0.0, "avg_logprob": -0.14452253977457682, "compression_ratio": 1.695970695970696, "no_speech_prob": 1.4969633411965333e-05}, {"id": 1112, "seek": 286456, "start": 2875.2, "end": 2880.92, "text": " like industrial mathematics or whatever, operated within the world", "tokens": [411, 9987, 18666, 420, 2035, 11, 20826, 1951, 264, 1002], "temperature": 0.0, "avg_logprob": -0.14452253977457682, "compression_ratio": 1.695970695970696, "no_speech_prob": 1.4969633411965333e-05}, {"id": 1113, "seek": 286456, "start": 2880.92, "end": 2883.2799999999997, "text": " that was accessible to them, right?", "tokens": [300, 390, 9515, 281, 552, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.14452253977457682, "compression_ratio": 1.695970695970696, "no_speech_prob": 1.4969633411965333e-05}, {"id": 1114, "seek": 286456, "start": 2883.2799999999997, "end": 2885.32, "text": " So like at the moment, for example, there's a huge world", "tokens": [407, 411, 412, 264, 1623, 11, 337, 1365, 11, 456, 311, 257, 2603, 1002], "temperature": 0.0, "avg_logprob": -0.14452253977457682, "compression_ratio": 1.695970695970696, "no_speech_prob": 1.4969633411965333e-05}, {"id": 1115, "seek": 286456, "start": 2885.32, "end": 2888.84, "text": " of something called sparse convolutions that are,", "tokens": [295, 746, 1219, 637, 11668, 3754, 15892, 300, 366, 11], "temperature": 0.0, "avg_logprob": -0.14452253977457682, "compression_ratio": 1.695970695970696, "no_speech_prob": 1.4969633411965333e-05}, {"id": 1116, "seek": 286456, "start": 2888.84, "end": 2890.16, "text": " I know they're amazing.", "tokens": [286, 458, 436, 434, 2243, 13], "temperature": 0.0, "avg_logprob": -0.14452253977457682, "compression_ratio": 1.695970695970696, "no_speech_prob": 1.4969633411965333e-05}, {"id": 1117, "seek": 286456, "start": 2890.16, "end": 2893.12, "text": " I've seen like competition winning solutions.", "tokens": [286, 600, 1612, 411, 6211, 8224, 6547, 13], "temperature": 0.0, "avg_logprob": -0.14452253977457682, "compression_ratio": 1.695970695970696, "no_speech_prob": 1.4969633411965333e-05}, {"id": 1118, "seek": 289312, "start": 2893.12, "end": 2895.4, "text": " They like get state of the art results.", "tokens": [814, 411, 483, 1785, 295, 264, 1523, 3542, 13], "temperature": 0.0, "avg_logprob": -0.11351092387053927, "compression_ratio": 1.5802919708029197, "no_speech_prob": 3.611648025980685e-06}, {"id": 1119, "seek": 289312, "start": 2895.4, "end": 2897.2799999999997, "text": " There's like two people in the world doing it", "tokens": [821, 311, 411, 732, 561, 294, 264, 1002, 884, 309], "temperature": 0.0, "avg_logprob": -0.11351092387053927, "compression_ratio": 1.5802919708029197, "no_speech_prob": 3.611648025980685e-06}, {"id": 1120, "seek": 289312, "start": 2897.2799999999997, "end": 2901.64, "text": " because it all requires custom CUDA kernels, you know.", "tokens": [570, 309, 439, 7029, 2375, 29777, 7509, 23434, 1625, 11, 291, 458, 13], "temperature": 0.0, "avg_logprob": -0.11351092387053927, "compression_ratio": 1.5802919708029197, "no_speech_prob": 3.611648025980685e-06}, {"id": 1121, "seek": 289312, "start": 2901.64, "end": 2904.3199999999997, "text": " For years, for decades,", "tokens": [1171, 924, 11, 337, 7878, 11], "temperature": 0.0, "avg_logprob": -0.11351092387053927, "compression_ratio": 1.5802919708029197, "no_speech_prob": 3.611648025980685e-06}, {"id": 1122, "seek": 289312, "start": 2904.3199999999997, "end": 2906.48, "text": " almost nobody was doing differentiable programming", "tokens": [1920, 5079, 390, 884, 819, 9364, 9410], "temperature": 0.0, "avg_logprob": -0.11351092387053927, "compression_ratio": 1.5802919708029197, "no_speech_prob": 3.611648025980685e-06}, {"id": 1123, "seek": 289312, "start": 2906.48, "end": 2908.64, "text": " because we had to calculate the derivatives by hand.", "tokens": [570, 321, 632, 281, 8873, 264, 33733, 538, 1011, 13], "temperature": 0.0, "avg_logprob": -0.11351092387053927, "compression_ratio": 1.5802919708029197, "no_speech_prob": 3.611648025980685e-06}, {"id": 1124, "seek": 289312, "start": 2908.64, "end": 2912.88, "text": " So like it's not just about, oh, I want an extra,", "tokens": [407, 411, 309, 311, 406, 445, 466, 11, 1954, 11, 286, 528, 364, 2857, 11], "temperature": 0.0, "avg_logprob": -0.11351092387053927, "compression_ratio": 1.5802919708029197, "no_speech_prob": 3.611648025980685e-06}, {"id": 1125, "seek": 289312, "start": 2912.88, "end": 2916.4, "text": " it's absolutely not about, I want an extra 5% of performance.", "tokens": [309, 311, 3122, 406, 466, 11, 286, 528, 364, 2857, 1025, 4, 295, 3389, 13], "temperature": 0.0, "avg_logprob": -0.11351092387053927, "compression_ratio": 1.5802919708029197, "no_speech_prob": 3.611648025980685e-06}, {"id": 1126, "seek": 289312, "start": 2916.4, "end": 2921.72, "text": " It's about being able to do whatever's in your head.", "tokens": [467, 311, 466, 885, 1075, 281, 360, 2035, 311, 294, 428, 1378, 13], "temperature": 0.0, "avg_logprob": -0.11351092387053927, "compression_ratio": 1.5802919708029197, "no_speech_prob": 3.611648025980685e-06}, {"id": 1127, "seek": 292172, "start": 2921.72, "end": 2924.48, "text": " I used to be a management consultant, I'm afraid to say,", "tokens": [286, 1143, 281, 312, 257, 4592, 24676, 11, 286, 478, 4638, 281, 584, 11], "temperature": 0.0, "avg_logprob": -0.115822013686685, "compression_ratio": 1.9224137931034482, "no_speech_prob": 6.853823379060486e-06}, {"id": 1128, "seek": 292172, "start": 2924.48, "end": 2928.2, "text": " and I didn't know how to program, and I knew Excel.", "tokens": [293, 286, 994, 380, 458, 577, 281, 1461, 11, 293, 286, 2586, 19060, 13], "temperature": 0.0, "avg_logprob": -0.115822013686685, "compression_ratio": 1.9224137931034482, "no_speech_prob": 6.853823379060486e-06}, {"id": 1129, "seek": 292172, "start": 2928.2, "end": 2932.3199999999997, "text": " And the day that I learned Visual Basic was like, oh,", "tokens": [400, 264, 786, 300, 286, 3264, 23187, 31598, 390, 411, 11, 1954, 11], "temperature": 0.0, "avg_logprob": -0.115822013686685, "compression_ratio": 1.9224137931034482, "no_speech_prob": 6.853823379060486e-06}, {"id": 1130, "seek": 292172, "start": 2932.3199999999997, "end": 2934.9199999999996, "text": " now I'm not limited to the things I can do", "tokens": [586, 286, 478, 406, 5567, 281, 264, 721, 286, 393, 360], "temperature": 0.0, "avg_logprob": -0.115822013686685, "compression_ratio": 1.9224137931034482, "no_speech_prob": 6.853823379060486e-06}, {"id": 1131, "seek": 292172, "start": 2934.9199999999996, "end": 2937.52, "text": " in a spreadsheet, I can program, you know.", "tokens": [294, 257, 27733, 11, 286, 393, 1461, 11, 291, 458, 13], "temperature": 0.0, "avg_logprob": -0.115822013686685, "compression_ratio": 1.9224137931034482, "no_speech_prob": 6.853823379060486e-06}, {"id": 1132, "seek": 292172, "start": 2937.52, "end": 2939.68, "text": " And then when I learned Delphi, it was like, oh,", "tokens": [400, 550, 562, 286, 3264, 5831, 950, 72, 11, 309, 390, 411, 11, 1954, 11], "temperature": 0.0, "avg_logprob": -0.115822013686685, "compression_ratio": 1.9224137931034482, "no_speech_prob": 6.853823379060486e-06}, {"id": 1133, "seek": 292172, "start": 2939.68, "end": 2941.7599999999998, "text": " now I'm not limited to the things that I can program", "tokens": [586, 286, 478, 406, 5567, 281, 264, 721, 300, 286, 393, 1461], "temperature": 0.0, "avg_logprob": -0.115822013686685, "compression_ratio": 1.9224137931034482, "no_speech_prob": 6.853823379060486e-06}, {"id": 1134, "seek": 292172, "start": 2941.7599999999998, "end": 2944.8399999999997, "text": " in a spreadsheet, I can do things that are in my head.", "tokens": [294, 257, 27733, 11, 286, 393, 360, 721, 300, 366, 294, 452, 1378, 13], "temperature": 0.0, "avg_logprob": -0.115822013686685, "compression_ratio": 1.9224137931034482, "no_speech_prob": 6.853823379060486e-06}, {"id": 1135, "seek": 292172, "start": 2944.8399999999997, "end": 2949.7999999999997, "text": " So that's where I want us all to get to.", "tokens": [407, 300, 311, 689, 286, 528, 505, 439, 281, 483, 281, 13], "temperature": 0.0, "avg_logprob": -0.115822013686685, "compression_ratio": 1.9224137931034482, "no_speech_prob": 6.853823379060486e-06}, {"id": 1136, "seek": 294980, "start": 2949.8, "end": 2951.6000000000004, "text": " Yep.", "tokens": [7010, 13], "temperature": 0.0, "avg_logprob": -0.22109698323370183, "compression_ratio": 1.4956896551724137, "no_speech_prob": 4.756132693728432e-05}, {"id": 1137, "seek": 294980, "start": 2951.6000000000004, "end": 2956.36, "text": " Hey, and some people are feeling overwhelmed with Swift, C, C++,", "tokens": [1911, 11, 293, 512, 561, 366, 2633, 19042, 365, 25539, 11, 383, 11, 383, 25472, 11], "temperature": 0.0, "avg_logprob": -0.22109698323370183, "compression_ratio": 1.4956896551724137, "no_speech_prob": 4.756132693728432e-05}, {"id": 1138, "seek": 294980, "start": 2956.36, "end": 2959.6000000000004, "text": " Python, PyTorch, TensorFlow, Swift for TensorFlow.", "tokens": [15329, 11, 9953, 51, 284, 339, 11, 37624, 11, 25539, 337, 37624, 13], "temperature": 0.0, "avg_logprob": -0.22109698323370183, "compression_ratio": 1.4956896551724137, "no_speech_prob": 4.756132693728432e-05}, {"id": 1139, "seek": 294980, "start": 2959.6000000000004, "end": 2964.48, "text": " Do we need to become experts on all these different languages?", "tokens": [1144, 321, 643, 281, 1813, 8572, 322, 439, 613, 819, 8650, 30], "temperature": 0.0, "avg_logprob": -0.22109698323370183, "compression_ratio": 1.4956896551724137, "no_speech_prob": 4.756132693728432e-05}, {"id": 1140, "seek": 294980, "start": 2964.48, "end": 2966.32, "text": " No. No, we don't.", "tokens": [883, 13, 883, 11, 321, 500, 380, 13], "temperature": 0.0, "avg_logprob": -0.22109698323370183, "compression_ratio": 1.4956896551724137, "no_speech_prob": 4.756132693728432e-05}, {"id": 1141, "seek": 294980, "start": 2966.32, "end": 2969.32, "text": " But can I show why this is like super interesting?", "tokens": [583, 393, 286, 855, 983, 341, 307, 411, 1687, 1880, 30], "temperature": 0.0, "avg_logprob": -0.22109698323370183, "compression_ratio": 1.4956896551724137, "no_speech_prob": 4.756132693728432e-05}, {"id": 1142, "seek": 294980, "start": 2969.32, "end": 2975.96, "text": " Because this is like, this like, so let me show you why I started", "tokens": [1436, 341, 307, 411, 11, 341, 411, 11, 370, 718, 385, 855, 291, 983, 286, 1409], "temperature": 0.0, "avg_logprob": -0.22109698323370183, "compression_ratio": 1.4956896551724137, "no_speech_prob": 4.756132693728432e-05}, {"id": 1143, "seek": 294980, "start": 2975.96, "end": 2977.2400000000002, "text": " going down this path, right,", "tokens": [516, 760, 341, 3100, 11, 558, 11], "temperature": 0.0, "avg_logprob": -0.22109698323370183, "compression_ratio": 1.4956896551724137, "no_speech_prob": 4.756132693728432e-05}, {"id": 1144, "seek": 297724, "start": 2977.24, "end": 2982.9599999999996, "text": " which is that I was using tf.data.", "tokens": [597, 307, 300, 286, 390, 1228, 256, 69, 13, 67, 3274, 13], "temperature": 0.0, "avg_logprob": -0.16083836555480957, "compression_ratio": 1.2803030303030303, "no_speech_prob": 3.905085577571299e-06}, {"id": 1145, "seek": 297724, "start": 2982.9599999999996, "end": 2992.3199999999997, "text": " And I found that it took me 33 seconds to iterate", "tokens": [400, 286, 1352, 300, 309, 1890, 385, 11816, 3949, 281, 44497], "temperature": 0.0, "avg_logprob": -0.16083836555480957, "compression_ratio": 1.2803030303030303, "no_speech_prob": 3.905085577571299e-06}, {"id": 1146, "seek": 297724, "start": 2992.3199999999997, "end": 2994.6, "text": " through ImageNet.", "tokens": [807, 29903, 31890, 13], "temperature": 0.0, "avg_logprob": -0.16083836555480957, "compression_ratio": 1.2803030303030303, "no_speech_prob": 3.905085577571299e-06}, {"id": 1147, "seek": 297724, "start": 2994.6, "end": 3006.08, "text": " And I know that in Python, we have a notebook which Sylvia created", "tokens": [400, 286, 458, 300, 294, 15329, 11, 321, 362, 257, 21060, 597, 33349, 11617, 2942], "temperature": 0.0, "avg_logprob": -0.16083836555480957, "compression_ratio": 1.2803030303030303, "no_speech_prob": 3.905085577571299e-06}, {"id": 1148, "seek": 300608, "start": 3006.08, "end": 3008.56, "text": " to compare called timing.", "tokens": [281, 6794, 1219, 10822, 13], "temperature": 0.0, "avg_logprob": -0.15124945307886878, "compression_ratio": 1.4723618090452262, "no_speech_prob": 6.048402156011434e-06}, {"id": 1149, "seek": 300608, "start": 3008.56, "end": 3012.12, "text": " And the exact same thing takes 11.5 seconds.", "tokens": [400, 264, 1900, 912, 551, 2516, 2975, 13, 20, 3949, 13], "temperature": 0.0, "avg_logprob": -0.15124945307886878, "compression_ratio": 1.4723618090452262, "no_speech_prob": 6.048402156011434e-06}, {"id": 1150, "seek": 300608, "start": 3012.12, "end": 3014.2, "text": " And like this is not an insignificant difference.", "tokens": [400, 411, 341, 307, 406, 364, 43685, 2649, 13], "temperature": 0.0, "avg_logprob": -0.15124945307886878, "compression_ratio": 1.4723618090452262, "no_speech_prob": 6.048402156011434e-06}, {"id": 1151, "seek": 300608, "start": 3014.2, "end": 3016.48, "text": " Waiting more than three times as long just", "tokens": [37291, 544, 813, 1045, 1413, 382, 938, 445], "temperature": 0.0, "avg_logprob": -0.15124945307886878, "compression_ratio": 1.4723618090452262, "no_speech_prob": 6.048402156011434e-06}, {"id": 1152, "seek": 300608, "start": 3016.48, "end": 3019.84, "text": " to load the data is just not okay for me.", "tokens": [281, 3677, 264, 1412, 307, 445, 406, 1392, 337, 385, 13], "temperature": 0.0, "avg_logprob": -0.15124945307886878, "compression_ratio": 1.4723618090452262, "no_speech_prob": 6.048402156011434e-06}, {"id": 1153, "seek": 300608, "start": 3019.84, "end": 3025.0, "text": " So I thought, well, I bet OpenCV can do it fast.", "tokens": [407, 286, 1194, 11, 731, 11, 286, 778, 7238, 34, 53, 393, 360, 309, 2370, 13], "temperature": 0.0, "avg_logprob": -0.15124945307886878, "compression_ratio": 1.4723618090452262, "no_speech_prob": 6.048402156011434e-06}, {"id": 1154, "seek": 300608, "start": 3025.0, "end": 3028.84, "text": " So I created this little OpenCV thing.", "tokens": [407, 286, 2942, 341, 707, 7238, 34, 53, 551, 13], "temperature": 0.0, "avg_logprob": -0.15124945307886878, "compression_ratio": 1.4723618090452262, "no_speech_prob": 6.048402156011434e-06}, {"id": 1155, "seek": 302884, "start": 3028.84, "end": 3036.48, "text": " And then I created a little test program.", "tokens": [400, 550, 286, 2942, 257, 707, 1500, 1461, 13], "temperature": 0.0, "avg_logprob": -0.2110640641414758, "compression_ratio": 1.4876543209876543, "no_speech_prob": 4.520798029261641e-07}, {"id": 1156, "seek": 302884, "start": 3036.48, "end": 3042.92, "text": " So this is the entirety of my test program, right,", "tokens": [407, 341, 307, 264, 31557, 295, 452, 1500, 1461, 11, 558, 11], "temperature": 0.0, "avg_logprob": -0.2110640641414758, "compression_ratio": 1.4876543209876543, "no_speech_prob": 4.520798029261641e-07}, {"id": 1157, "seek": 302884, "start": 3042.92, "end": 3047.08, "text": " which is something that downloads ImageNet and reads", "tokens": [597, 307, 746, 300, 36553, 29903, 31890, 293, 15700], "temperature": 0.0, "avg_logprob": -0.2110640641414758, "compression_ratio": 1.4876543209876543, "no_speech_prob": 4.520798029261641e-07}, {"id": 1158, "seek": 302884, "start": 3047.08, "end": 3052.36, "text": " and resizes images and does it with four threads.", "tokens": [293, 725, 5660, 5267, 293, 775, 309, 365, 1451, 19314, 13], "temperature": 0.0, "avg_logprob": -0.2110640641414758, "compression_ratio": 1.4876543209876543, "no_speech_prob": 4.520798029261641e-07}, {"id": 1159, "seek": 302884, "start": 3052.36, "end": 3058.28, "text": " And so if you go Swift run, sorry, Swift run.", "tokens": [400, 370, 498, 291, 352, 25539, 1190, 11, 2597, 11, 25539, 1190, 13], "temperature": 0.0, "avg_logprob": -0.2110640641414758, "compression_ratio": 1.4876543209876543, "no_speech_prob": 4.520798029261641e-07}, {"id": 1160, "seek": 305828, "start": 3058.28, "end": 3069.96, "text": " Okay, so when I run this, check this out, 7.2 seconds, right.", "tokens": [1033, 11, 370, 562, 286, 1190, 341, 11, 1520, 341, 484, 11, 1614, 13, 17, 3949, 11, 558, 13], "temperature": 0.0, "avg_logprob": -0.11578001146731169, "compression_ratio": 1.5159574468085106, "no_speech_prob": 7.410727903334191e-06}, {"id": 1161, "seek": 305828, "start": 3069.96, "end": 3073.96, "text": " And so this was like half a day's work.", "tokens": [400, 370, 341, 390, 411, 1922, 257, 786, 311, 589, 13], "temperature": 0.0, "avg_logprob": -0.11578001146731169, "compression_ratio": 1.5159574468085106, "no_speech_prob": 7.410727903334191e-06}, {"id": 1162, "seek": 305828, "start": 3073.96, "end": 3075.7200000000003, "text": " And half a day's work I have something", "tokens": [400, 1922, 257, 786, 311, 589, 286, 362, 746], "temperature": 0.0, "avg_logprob": -0.11578001146731169, "compression_ratio": 1.5159574468085106, "no_speech_prob": 7.410727903334191e-06}, {"id": 1163, "seek": 305828, "start": 3075.7200000000003, "end": 3080.2400000000002, "text": " that can give me an image processing pipeline that's even", "tokens": [300, 393, 976, 385, 364, 3256, 9007, 15517, 300, 311, 754], "temperature": 0.0, "avg_logprob": -0.11578001146731169, "compression_ratio": 1.5159574468085106, "no_speech_prob": 7.410727903334191e-06}, {"id": 1164, "seek": 305828, "start": 3080.2400000000002, "end": 3082.1600000000003, "text": " faster than PyTorch.", "tokens": [4663, 813, 9953, 51, 284, 339, 13], "temperature": 0.0, "avg_logprob": -0.11578001146731169, "compression_ratio": 1.5159574468085106, "no_speech_prob": 7.410727903334191e-06}, {"id": 1165, "seek": 305828, "start": 3082.1600000000003, "end": 3084.6400000000003, "text": " And so it's not just like, oh,", "tokens": [400, 370, 309, 311, 406, 445, 411, 11, 1954, 11], "temperature": 0.0, "avg_logprob": -0.11578001146731169, "compression_ratio": 1.5159574468085106, "no_speech_prob": 7.410727903334191e-06}, {"id": 1166, "seek": 305828, "start": 3084.6400000000003, "end": 3086.0, "text": " we can now do things a bit faster.", "tokens": [321, 393, 586, 360, 721, 257, 857, 4663, 13], "temperature": 0.0, "avg_logprob": -0.11578001146731169, "compression_ratio": 1.5159574468085106, "no_speech_prob": 7.410727903334191e-06}, {"id": 1167, "seek": 308600, "start": 3086.0, "end": 3090.4, "text": " But it's now like any time I get stuck that I can't do something,", "tokens": [583, 309, 311, 586, 411, 604, 565, 286, 483, 5541, 300, 286, 393, 380, 360, 746, 11], "temperature": 0.0, "avg_logprob": -0.14112748632897865, "compression_ratio": 1.6643109540636043, "no_speech_prob": 1.5444551536347717e-05}, {"id": 1168, "seek": 308600, "start": 3090.4, "end": 3094.52, "text": " it's not in the library I want or it's so slow as to be unusable,", "tokens": [309, 311, 406, 294, 264, 6405, 286, 528, 420, 309, 311, 370, 2964, 382, 281, 312, 10054, 712, 11], "temperature": 0.0, "avg_logprob": -0.14112748632897865, "compression_ratio": 1.6643109540636043, "no_speech_prob": 1.5444551536347717e-05}, {"id": 1169, "seek": 308600, "start": 3094.52, "end": 3095.92, "text": " you know, this whole world's open.", "tokens": [291, 458, 11, 341, 1379, 1002, 311, 1269, 13], "temperature": 0.0, "avg_logprob": -0.14112748632897865, "compression_ratio": 1.6643109540636043, "no_speech_prob": 1.5444551536347717e-05}, {"id": 1170, "seek": 308600, "start": 3095.92, "end": 3100.04, "text": " So I'd say like we don't really touch this stuff until you get", "tokens": [407, 286, 1116, 584, 411, 321, 500, 380, 534, 2557, 341, 1507, 1826, 291, 483], "temperature": 0.0, "avg_logprob": -0.14112748632897865, "compression_ratio": 1.6643109540636043, "no_speech_prob": 1.5444551536347717e-05}, {"id": 1171, "seek": 308600, "start": 3100.04, "end": 3103.36, "text": " to a point where you have no choice but to.", "tokens": [281, 257, 935, 689, 291, 362, 572, 3922, 457, 281, 13], "temperature": 0.0, "avg_logprob": -0.14112748632897865, "compression_ratio": 1.6643109540636043, "no_speech_prob": 1.5444551536347717e-05}, {"id": 1172, "seek": 308600, "start": 3103.36, "end": 3105.56, "text": " And at that point, you're just really glad it's there.", "tokens": [400, 412, 300, 935, 11, 291, 434, 445, 534, 5404, 309, 311, 456, 13], "temperature": 0.0, "avg_logprob": -0.14112748632897865, "compression_ratio": 1.6643109540636043, "no_speech_prob": 1.5444551536347717e-05}, {"id": 1173, "seek": 308600, "start": 3105.56, "end": 3109.52, "text": " Well, and to me, I think it's also the capabilities important even", "tokens": [1042, 11, 293, 281, 385, 11, 286, 519, 309, 311, 611, 264, 10862, 1021, 754], "temperature": 0.0, "avg_logprob": -0.14112748632897865, "compression_ratio": 1.6643109540636043, "no_speech_prob": 1.5444551536347717e-05}, {"id": 1174, "seek": 308600, "start": 3109.52, "end": 3110.84, "text": " if you don't do it.", "tokens": [498, 291, 500, 380, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.14112748632897865, "compression_ratio": 1.6643109540636043, "no_speech_prob": 1.5444551536347717e-05}, {"id": 1175, "seek": 308600, "start": 3110.84, "end": 3114.52, "text": " So keep in mind, this is all code that's in a workbook.", "tokens": [407, 1066, 294, 1575, 11, 341, 307, 439, 3089, 300, 311, 294, 257, 589, 2939, 13], "temperature": 0.0, "avg_logprob": -0.14112748632897865, "compression_ratio": 1.6643109540636043, "no_speech_prob": 1.5444551536347717e-05}, {"id": 1176, "seek": 311452, "start": 3114.52, "end": 3117.28, "text": " So you can get code in the workbook from anywhere.", "tokens": [407, 291, 393, 483, 3089, 294, 264, 589, 2939, 490, 4992, 13], "temperature": 0.0, "avg_logprob": -0.09556081873425365, "compression_ratio": 1.8892215568862276, "no_speech_prob": 3.966673375543905e-06}, {"id": 1177, "seek": 311452, "start": 3117.28, "end": 3118.6, "text": " And now you can share that workbook.", "tokens": [400, 586, 291, 393, 2073, 300, 589, 2939, 13], "temperature": 0.0, "avg_logprob": -0.09556081873425365, "compression_ratio": 1.8892215568862276, "no_speech_prob": 3.966673375543905e-06}, {"id": 1178, "seek": 311452, "start": 3118.6, "end": 3122.28, "text": " And you don't have to share this like tangled web of dependencies", "tokens": [400, 291, 500, 380, 362, 281, 2073, 341, 411, 47192, 3670, 295, 36606], "temperature": 0.0, "avg_logprob": -0.09556081873425365, "compression_ratio": 1.8892215568862276, "no_speech_prob": 3.966673375543905e-06}, {"id": 1179, "seek": 311452, "start": 3122.28, "end": 3123.8, "text": " that have to go with the workbook.", "tokens": [300, 362, 281, 352, 365, 264, 589, 2939, 13], "temperature": 0.0, "avg_logprob": -0.09556081873425365, "compression_ratio": 1.8892215568862276, "no_speech_prob": 3.966673375543905e-06}, {"id": 1180, "seek": 311452, "start": 3123.8, "end": 3126.0, "text": " And so the fact that you can do this in Swift doesn't mean", "tokens": [400, 370, 264, 1186, 300, 291, 393, 360, 341, 294, 25539, 1177, 380, 914], "temperature": 0.0, "avg_logprob": -0.09556081873425365, "compression_ratio": 1.8892215568862276, "no_speech_prob": 3.966673375543905e-06}, {"id": 1181, "seek": 311452, "start": 3126.0, "end": 3127.8, "text": " that you yourself have to write the code.", "tokens": [300, 291, 1803, 362, 281, 2464, 264, 3089, 13], "temperature": 0.0, "avg_logprob": -0.09556081873425365, "compression_ratio": 1.8892215568862276, "no_speech_prob": 3.966673375543905e-06}, {"id": 1182, "seek": 311452, "start": 3127.8, "end": 3129.8, "text": " But it means you can build on code that other people wrote.", "tokens": [583, 309, 1355, 291, 393, 1322, 322, 3089, 300, 661, 561, 4114, 13], "temperature": 0.0, "avg_logprob": -0.09556081873425365, "compression_ratio": 1.8892215568862276, "no_speech_prob": 3.966673375543905e-06}, {"id": 1183, "seek": 311452, "start": 3129.8, "end": 3132.68, "text": " And if you haven't seen Swift at all, if this is your first exposure", "tokens": [400, 498, 291, 2378, 380, 1612, 25539, 412, 439, 11, 498, 341, 307, 428, 700, 10420], "temperature": 0.0, "avg_logprob": -0.09556081873425365, "compression_ratio": 1.8892215568862276, "no_speech_prob": 3.966673375543905e-06}, {"id": 1184, "seek": 311452, "start": 3132.68, "end": 3135.28, "text": " to it, this is definitely not the place you start.", "tokens": [281, 309, 11, 341, 307, 2138, 406, 264, 1081, 291, 722, 13], "temperature": 0.0, "avg_logprob": -0.09556081873425365, "compression_ratio": 1.8892215568862276, "no_speech_prob": 3.966673375543905e-06}, {"id": 1185, "seek": 311452, "start": 3135.28, "end": 3137.08, "text": " Like the data APIs that we're about to look", "tokens": [1743, 264, 1412, 21445, 300, 321, 434, 466, 281, 574], "temperature": 0.0, "avg_logprob": -0.09556081873425365, "compression_ratio": 1.8892215568862276, "no_speech_prob": 3.966673375543905e-06}, {"id": 1186, "seek": 311452, "start": 3137.08, "end": 3139.72, "text": " at would be a much more reasonable place to start.", "tokens": [412, 576, 312, 257, 709, 544, 10585, 1081, 281, 722, 13], "temperature": 0.0, "avg_logprob": -0.09556081873425365, "compression_ratio": 1.8892215568862276, "no_speech_prob": 3.966673375543905e-06}, {"id": 1187, "seek": 311452, "start": 3139.72, "end": 3144.2, "text": " You've had a month or two months worth of hacking with Swift time.", "tokens": [509, 600, 632, 257, 1618, 420, 732, 2493, 3163, 295, 31422, 365, 25539, 565, 13], "temperature": 0.0, "avg_logprob": -0.09556081873425365, "compression_ratio": 1.8892215568862276, "no_speech_prob": 3.966673375543905e-06}, {"id": 1188, "seek": 314420, "start": 3144.2, "end": 3145.5, "text": " And that's Jeremy month.", "tokens": [400, 300, 311, 17809, 1618, 13], "temperature": 0.0, "avg_logprob": -0.16986785940572519, "compression_ratio": 1.6956521739130435, "no_speech_prob": 8.0127010733122e-06}, {"id": 1189, "seek": 314420, "start": 3145.5, "end": 3147.7999999999997, "text": " So that's like a year for normal people.", "tokens": [407, 300, 311, 411, 257, 1064, 337, 2710, 561, 13], "temperature": 0.0, "avg_logprob": -0.16986785940572519, "compression_ratio": 1.6956521739130435, "no_speech_prob": 8.0127010733122e-06}, {"id": 1190, "seek": 314420, "start": 3147.7999999999997, "end": 3153.08, "text": " So this being like super powerful and the ability", "tokens": [407, 341, 885, 411, 1687, 4005, 293, 264, 3485], "temperature": 0.0, "avg_logprob": -0.16986785940572519, "compression_ratio": 1.6956521739130435, "no_speech_prob": 8.0127010733122e-06}, {"id": 1191, "seek": 314420, "start": 3153.08, "end": 3154.8399999999997, "text": " to do this is I think really great.", "tokens": [281, 360, 341, 307, 286, 519, 534, 869, 13], "temperature": 0.0, "avg_logprob": -0.16986785940572519, "compression_ratio": 1.6956521739130435, "no_speech_prob": 8.0127010733122e-06}, {"id": 1192, "seek": 314420, "start": 3154.8399999999997, "end": 3156.16, "text": " And I agree with you.", "tokens": [400, 286, 3986, 365, 291, 13], "temperature": 0.0, "avg_logprob": -0.16986785940572519, "compression_ratio": 1.6956521739130435, "no_speech_prob": 8.0127010733122e-06}, {"id": 1193, "seek": 314420, "start": 3156.16, "end": 3158.08, "text": " Yeah. And I'm totally not a C programmer at all.", "tokens": [865, 13, 400, 286, 478, 3879, 406, 257, 383, 32116, 412, 439, 13], "temperature": 0.0, "avg_logprob": -0.16986785940572519, "compression_ratio": 1.6956521739130435, "no_speech_prob": 8.0127010733122e-06}, {"id": 1194, "seek": 314420, "start": 3158.08, "end": 3160.72, "text": " And it's honestly, it's been more like two weeks.", "tokens": [400, 309, 311, 6095, 11, 309, 311, 668, 544, 411, 732, 3259, 13], "temperature": 0.0, "avg_logprob": -0.16986785940572519, "compression_ratio": 1.6956521739130435, "no_speech_prob": 8.0127010733122e-06}, {"id": 1195, "seek": 314420, "start": 3160.72, "end": 3162.64, "text": " Because before that, I was actually teaching a Python course,", "tokens": [1436, 949, 300, 11, 286, 390, 767, 4571, 257, 15329, 1164, 11], "temperature": 0.0, "avg_logprob": -0.16986785940572519, "compression_ratio": 1.6956521739130435, "no_speech_prob": 8.0127010733122e-06}, {"id": 1196, "seek": 314420, "start": 3162.64, "end": 3163.9199999999996, "text": " believe it or not.", "tokens": [1697, 309, 420, 406, 13], "temperature": 0.0, "avg_logprob": -0.16986785940572519, "compression_ratio": 1.6956521739130435, "no_speech_prob": 8.0127010733122e-06}, {"id": 1197, "seek": 314420, "start": 3163.9199999999996, "end": 3166.24, "text": " But Sylvia has been doing this for a month.", "tokens": [583, 33349, 11617, 575, 668, 884, 341, 337, 257, 1618, 13], "temperature": 0.0, "avg_logprob": -0.16986785940572519, "compression_ratio": 1.6956521739130435, "no_speech_prob": 8.0127010733122e-06}, {"id": 1198, "seek": 314420, "start": 3166.24, "end": 3169.12, "text": " Yeah. So I mean, so this is all, it's all there.", "tokens": [865, 13, 407, 286, 914, 11, 370, 341, 307, 439, 11, 309, 311, 439, 456, 13], "temperature": 0.0, "avg_logprob": -0.16986785940572519, "compression_ratio": 1.6956521739130435, "no_speech_prob": 8.0127010733122e-06}, {"id": 1199, "seek": 314420, "start": 3169.12, "end": 3172.9199999999996, "text": " And I would definitely recommend ignoring all of this stuff.", "tokens": [400, 286, 576, 2138, 2748, 26258, 439, 295, 341, 1507, 13], "temperature": 0.0, "avg_logprob": -0.16986785940572519, "compression_ratio": 1.6956521739130435, "no_speech_prob": 8.0127010733122e-06}, {"id": 1200, "seek": 317292, "start": 3172.92, "end": 3175.7200000000003, "text": " And we're about to start zooming up the levels of the stack.", "tokens": [400, 321, 434, 466, 281, 722, 48226, 493, 264, 4358, 295, 264, 8630, 13], "temperature": 0.0, "avg_logprob": -0.12509618123372396, "compression_ratio": 1.8444444444444446, "no_speech_prob": 8.938664905144833e-06}, {"id": 1201, "seek": 317292, "start": 3175.7200000000003, "end": 3178.36, "text": " But the fact that it's there I think is reassuring.", "tokens": [583, 264, 1186, 300, 309, 311, 456, 286, 519, 307, 19486, 1345, 13], "temperature": 0.0, "avg_logprob": -0.12509618123372396, "compression_ratio": 1.8444444444444446, "no_speech_prob": 8.938664905144833e-06}, {"id": 1202, "seek": 317292, "start": 3178.36, "end": 3180.44, "text": " Because one of the challenges that we have with Python is", "tokens": [1436, 472, 295, 264, 4759, 300, 321, 362, 365, 15329, 307], "temperature": 0.0, "avg_logprob": -0.12509618123372396, "compression_ratio": 1.8444444444444446, "no_speech_prob": 8.938664905144833e-06}, {"id": 1203, "seek": 317292, "start": 3180.44, "end": 3182.6800000000003, "text": " that you get this ceiling.", "tokens": [300, 291, 483, 341, 13655, 13], "temperature": 0.0, "avg_logprob": -0.12509618123372396, "compression_ratio": 1.8444444444444446, "no_speech_prob": 8.938664905144833e-06}, {"id": 1204, "seek": 317292, "start": 3182.6800000000003, "end": 3185.6, "text": " And if you get up to the ceiling, then there's no going further", "tokens": [400, 498, 291, 483, 493, 281, 264, 13655, 11, 550, 456, 311, 572, 516, 3052], "temperature": 0.0, "avg_logprob": -0.12509618123372396, "compression_ratio": 1.8444444444444446, "no_speech_prob": 8.938664905144833e-06}, {"id": 1205, "seek": 317292, "start": 3185.6, "end": 3188.0, "text": " without this crazy amount of complexity.", "tokens": [1553, 341, 3219, 2372, 295, 14024, 13], "temperature": 0.0, "avg_logprob": -0.12509618123372396, "compression_ratio": 1.8444444444444446, "no_speech_prob": 8.938664905144833e-06}, {"id": 1206, "seek": 317292, "start": 3188.0, "end": 3190.64, "text": " And whether that be concurrency or whether that be C APIs", "tokens": [400, 1968, 300, 312, 23702, 10457, 420, 1968, 300, 312, 383, 21445], "temperature": 0.0, "avg_logprob": -0.12509618123372396, "compression_ratio": 1.8444444444444446, "no_speech_prob": 8.938664905144833e-06}, {"id": 1207, "seek": 317292, "start": 3190.64, "end": 3193.8, "text": " or whether that be other things, that prevents the next steps", "tokens": [420, 1968, 300, 312, 661, 721, 11, 300, 22367, 264, 958, 4439], "temperature": 0.0, "avg_logprob": -0.12509618123372396, "compression_ratio": 1.8444444444444446, "no_speech_prob": 8.938664905144833e-06}, {"id": 1208, "seek": 317292, "start": 3193.8, "end": 3195.12, "text": " and the next levels of innovation", "tokens": [293, 264, 958, 4358, 295, 8504], "temperature": 0.0, "avg_logprob": -0.12509618123372396, "compression_ratio": 1.8444444444444446, "no_speech_prob": 8.938664905144833e-06}, {"id": 1209, "seek": 317292, "start": 3195.12, "end": 3196.4, "text": " and the industry moving forward.", "tokens": [293, 264, 3518, 2684, 2128, 13], "temperature": 0.0, "avg_logprob": -0.12509618123372396, "compression_ratio": 1.8444444444444446, "no_speech_prob": 8.938664905144833e-06}, {"id": 1210, "seek": 317292, "start": 3196.4, "end": 3198.64, "text": " And this is meant to be giving you enough to go", "tokens": [400, 341, 307, 4140, 281, 312, 2902, 291, 1547, 281, 352], "temperature": 0.0, "avg_logprob": -0.12509618123372396, "compression_ratio": 1.8444444444444446, "no_speech_prob": 8.938664905144833e-06}, {"id": 1211, "seek": 317292, "start": 3198.64, "end": 3201.6800000000003, "text": " on with until a year's time course as well.", "tokens": [322, 365, 1826, 257, 1064, 311, 565, 1164, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.12509618123372396, "compression_ratio": 1.8444444444444446, "no_speech_prob": 8.938664905144833e-06}, {"id": 1212, "seek": 320168, "start": 3201.68, "end": 3205.2, "text": " So like, hopefully this is something where you can pick", "tokens": [407, 411, 11, 4696, 341, 307, 746, 689, 291, 393, 1888], "temperature": 0.0, "avg_logprob": -0.14779814998660468, "compression_ratio": 1.639676113360324, "no_speech_prob": 3.119884422631003e-05}, {"id": 1213, "seek": 320168, "start": 3205.2, "end": 3207.6, "text": " and choose which bits you want to dig into.", "tokens": [293, 2826, 597, 9239, 291, 528, 281, 2528, 666, 13], "temperature": 0.0, "avg_logprob": -0.14779814998660468, "compression_ratio": 1.639676113360324, "no_speech_prob": 3.119884422631003e-05}, {"id": 1214, "seek": 320168, "start": 3207.6, "end": 3210.08, "text": " And whichever bit you pick to dig into,", "tokens": [400, 24123, 857, 291, 1888, 281, 2528, 666, 11], "temperature": 0.0, "avg_logprob": -0.14779814998660468, "compression_ratio": 1.639676113360324, "no_speech_prob": 3.119884422631003e-05}, {"id": 1215, "seek": 320168, "start": 3210.08, "end": 3212.16, "text": " we're showing you all the depth that you can dig", "tokens": [321, 434, 4099, 291, 439, 264, 7161, 300, 291, 393, 2528], "temperature": 0.0, "avg_logprob": -0.14779814998660468, "compression_ratio": 1.639676113360324, "no_speech_prob": 3.119884422631003e-05}, {"id": 1216, "seek": 320168, "start": 3212.16, "end": 3215.52, "text": " into over the next 12 months.", "tokens": [666, 670, 264, 958, 2272, 2493, 13], "temperature": 0.0, "avg_logprob": -0.14779814998660468, "compression_ratio": 1.639676113360324, "no_speech_prob": 3.119884422631003e-05}, {"id": 1217, "seek": 320168, "start": 3215.52, "end": 3221.04, "text": " So I was really excited to discover", "tokens": [407, 286, 390, 534, 2919, 281, 4411], "temperature": 0.0, "avg_logprob": -0.14779814998660468, "compression_ratio": 1.639676113360324, "no_speech_prob": 3.119884422631003e-05}, {"id": 1218, "seek": 320168, "start": 3221.04, "end": 3224.96, "text": " that we can use OpenCV, which is something I've wanted ever", "tokens": [300, 321, 393, 764, 7238, 34, 53, 11, 597, 307, 746, 286, 600, 1415, 1562], "temperature": 0.0, "avg_logprob": -0.14779814998660468, "compression_ratio": 1.639676113360324, "no_speech_prob": 3.119884422631003e-05}, {"id": 1219, "seek": 320168, "start": 3224.96, "end": 3227.3999999999996, "text": " since we had to throw it away from Fast AI.", "tokens": [1670, 321, 632, 281, 3507, 309, 1314, 490, 15968, 7318, 13], "temperature": 0.0, "avg_logprob": -0.14779814998660468, "compression_ratio": 1.639676113360324, "no_speech_prob": 3.119884422631003e-05}, {"id": 1220, "seek": 320168, "start": 3227.3999999999996, "end": 3229.48, "text": " And so I thought, you know, what would it take", "tokens": [400, 370, 286, 1194, 11, 291, 458, 11, 437, 576, 309, 747], "temperature": 0.0, "avg_logprob": -0.14779814998660468, "compression_ratio": 1.639676113360324, "no_speech_prob": 3.119884422631003e-05}, {"id": 1221, "seek": 322948, "start": 3229.48, "end": 3233.76, "text": " to create a data blocks API with OpenCV?", "tokens": [281, 1884, 257, 1412, 8474, 9362, 365, 7238, 34, 53, 30], "temperature": 0.0, "avg_logprob": -0.15375851776640295, "compression_ratio": 1.5730337078651686, "no_speech_prob": 1.922067349369172e-05}, {"id": 1222, "seek": 322948, "start": 3233.76, "end": 3236.16, "text": " And thanks to Alexis Gallagher,", "tokens": [400, 3231, 281, 39826, 14588, 559, 511, 11], "temperature": 0.0, "avg_logprob": -0.15375851776640295, "compression_ratio": 1.5730337078651686, "no_speech_prob": 1.922067349369172e-05}, {"id": 1223, "seek": 322948, "start": 3236.16, "end": 3238.32, "text": " who kind of gave us the great starting point to say, well,", "tokens": [567, 733, 295, 2729, 505, 264, 869, 2891, 935, 281, 584, 11, 731, 11], "temperature": 0.0, "avg_logprob": -0.15375851776640295, "compression_ratio": 1.5730337078651686, "no_speech_prob": 1.922067349369172e-05}, {"id": 1224, "seek": 322948, "start": 3238.32, "end": 3244.72, "text": " here is what a Swifty style data blocks would look like.", "tokens": [510, 307, 437, 257, 3926, 37177, 3758, 1412, 8474, 576, 574, 411, 13], "temperature": 0.0, "avg_logprob": -0.15375851776640295, "compression_ratio": 1.5730337078651686, "no_speech_prob": 1.922067349369172e-05}, {"id": 1225, "seek": 322948, "start": 3244.72, "end": 3247.04, "text": " We were able to flesh it out into this complete thing.", "tokens": [492, 645, 1075, 281, 12497, 309, 484, 666, 341, 3566, 551, 13], "temperature": 0.0, "avg_logprob": -0.15375851776640295, "compression_ratio": 1.5730337078651686, "no_speech_prob": 1.922067349369172e-05}, {"id": 1226, "seek": 322948, "start": 3247.04, "end": 3251.64, "text": " And when Chris described Alexis to me as the world leader", "tokens": [400, 562, 6688, 7619, 39826, 281, 385, 382, 264, 1002, 5263], "temperature": 0.0, "avg_logprob": -0.15375851776640295, "compression_ratio": 1.5730337078651686, "no_speech_prob": 1.922067349369172e-05}, {"id": 1227, "seek": 322948, "start": 3251.64, "end": 3254.4, "text": " on value types, I was like, wait, I thought you created them.", "tokens": [322, 2158, 3467, 11, 286, 390, 411, 11, 1699, 11, 286, 1194, 291, 2942, 552, 13], "temperature": 0.0, "avg_logprob": -0.15375851776640295, "compression_ratio": 1.5730337078651686, "no_speech_prob": 1.922067349369172e-05}, {"id": 1228, "seek": 322948, "start": 3254.4, "end": 3259.36, "text": " I thought, okay, I guess we can listen to Alexis's code.", "tokens": [286, 1194, 11, 1392, 11, 286, 2041, 321, 393, 2140, 281, 39826, 311, 3089, 13], "temperature": 0.0, "avg_logprob": -0.15375851776640295, "compression_ratio": 1.5730337078651686, "no_speech_prob": 1.922067349369172e-05}, {"id": 1229, "seek": 325936, "start": 3259.36, "end": 3262.96, "text": " I will say I'm terrified about presenting those slides", "tokens": [286, 486, 584, 286, 478, 23051, 466, 15578, 729, 9788], "temperature": 0.0, "avg_logprob": -0.20943143844604492, "compression_ratio": 1.5352697095435686, "no_speech_prob": 2.045659493887797e-05}, {"id": 1230, "seek": 325936, "start": 3262.96, "end": 3264.84, "text": " because Alexis is sitting right there.", "tokens": [570, 39826, 307, 3798, 558, 456, 13], "temperature": 0.0, "avg_logprob": -0.20943143844604492, "compression_ratio": 1.5352697095435686, "no_speech_prob": 2.045659493887797e-05}, {"id": 1231, "seek": 325936, "start": 3264.84, "end": 3268.88, "text": " And if you start scowling, then oh, no.", "tokens": [400, 498, 291, 722, 795, 305, 1688, 11, 550, 1954, 11, 572, 13], "temperature": 0.0, "avg_logprob": -0.20943143844604492, "compression_ratio": 1.5352697095435686, "no_speech_prob": 2.045659493887797e-05}, {"id": 1232, "seek": 325936, "start": 3268.88, "end": 3270.1600000000003, "text": " We have a handheld mic.", "tokens": [492, 362, 257, 37634, 3123, 13], "temperature": 0.0, "avg_logprob": -0.20943143844604492, "compression_ratio": 1.5352697095435686, "no_speech_prob": 2.045659493887797e-05}, {"id": 1233, "seek": 325936, "start": 3270.1600000000003, "end": 3271.8, "text": " Come and correct us any time.", "tokens": [2492, 293, 3006, 505, 604, 565, 13], "temperature": 0.0, "avg_logprob": -0.20943143844604492, "compression_ratio": 1.5352697095435686, "no_speech_prob": 2.045659493887797e-05}, {"id": 1234, "seek": 325936, "start": 3271.8, "end": 3275.2000000000003, "text": " So there's a thing here called OC data block generic,", "tokens": [407, 456, 311, 257, 551, 510, 1219, 42278, 1412, 3461, 19577, 11], "temperature": 0.0, "avg_logprob": -0.20943143844604492, "compression_ratio": 1.5352697095435686, "no_speech_prob": 2.045659493887797e-05}, {"id": 1235, "seek": 325936, "start": 3275.2000000000003, "end": 3279.52, "text": " where you'll find that what we've actually done is we've got the", "tokens": [689, 291, 603, 915, 300, 437, 321, 600, 767, 1096, 307, 321, 600, 658, 264], "temperature": 0.0, "avg_logprob": -0.20943143844604492, "compression_ratio": 1.5352697095435686, "no_speech_prob": 2.045659493887797e-05}, {"id": 1236, "seek": 325936, "start": 3279.52, "end": 3285.7200000000003, "text": " entire data blocks API in this really interesting Swifty style.", "tokens": [2302, 1412, 8474, 9362, 294, 341, 534, 1880, 3926, 37177, 3758, 13], "temperature": 0.0, "avg_logprob": -0.20943143844604492, "compression_ratio": 1.5352697095435686, "no_speech_prob": 2.045659493887797e-05}, {"id": 1237, "seek": 328572, "start": 3285.72, "end": 3291.2, "text": " And what you'll see is that when we compare it to the Python version,", "tokens": [400, 437, 291, 603, 536, 307, 300, 562, 321, 6794, 309, 281, 264, 15329, 3037, 11], "temperature": 0.0, "avg_logprob": -0.11240687193693938, "compression_ratio": 1.6738197424892705, "no_speech_prob": 8.013279511942528e-06}, {"id": 1238, "seek": 328572, "start": 3291.2, "end": 3295.8399999999997, "text": " this is on every axis very significantly better.", "tokens": [341, 307, 322, 633, 10298, 588, 10591, 1101, 13], "temperature": 0.0, "avg_logprob": -0.11240687193693938, "compression_ratio": 1.6738197424892705, "no_speech_prob": 8.013279511942528e-06}, {"id": 1239, "seek": 328572, "start": 3295.8399999999997, "end": 3298.3599999999997, "text": " So let's talk about some of the problems", "tokens": [407, 718, 311, 751, 466, 512, 295, 264, 2740], "temperature": 0.0, "avg_logprob": -0.11240687193693938, "compression_ratio": 1.6738197424892705, "no_speech_prob": 8.013279511942528e-06}, {"id": 1240, "seek": 328572, "start": 3298.3599999999997, "end": 3300.0, "text": " with the data block API in Python.", "tokens": [365, 264, 1412, 3461, 9362, 294, 15329, 13], "temperature": 0.0, "avg_logprob": -0.11240687193693938, "compression_ratio": 1.6738197424892705, "no_speech_prob": 8.013279511942528e-06}, {"id": 1241, "seek": 328572, "start": 3300.0, "end": 3304.48, "text": " I love the data block API, but lots of you have rightly complained", "tokens": [286, 959, 264, 1412, 3461, 9362, 11, 457, 3195, 295, 291, 362, 32879, 33951], "temperature": 0.0, "avg_logprob": -0.11240687193693938, "compression_ratio": 1.6738197424892705, "no_speech_prob": 8.013279511942528e-06}, {"id": 1242, "seek": 328572, "start": 3304.48, "end": 3308.16, "text": " that we have to run all the blah, blah, blah, blah,", "tokens": [300, 321, 362, 281, 1190, 439, 264, 12288, 11, 12288, 11, 12288, 11, 12288, 11], "temperature": 0.0, "avg_logprob": -0.11240687193693938, "compression_ratio": 1.6738197424892705, "no_speech_prob": 8.013279511942528e-06}, {"id": 1243, "seek": 328572, "start": 3308.16, "end": 3309.48, "text": " in a particular order.", "tokens": [294, 257, 1729, 1668, 13], "temperature": 0.0, "avg_logprob": -0.11240687193693938, "compression_ratio": 1.6738197424892705, "no_speech_prob": 8.013279511942528e-06}, {"id": 1244, "seek": 328572, "start": 3309.48, "end": 3313.08, "text": " If we get the wrong order, we get inscrutable errors.", "tokens": [759, 321, 483, 264, 2085, 1668, 11, 321, 483, 1028, 10757, 32148, 13603, 13], "temperature": 0.0, "avg_logprob": -0.11240687193693938, "compression_ratio": 1.6738197424892705, "no_speech_prob": 8.013279511942528e-06}, {"id": 1245, "seek": 331308, "start": 3313.08, "end": 3317.0, "text": " We have to make sure that we have certain steps in there.", "tokens": [492, 362, 281, 652, 988, 300, 321, 362, 1629, 4439, 294, 456, 13], "temperature": 0.0, "avg_logprob": -0.1318047107794346, "compression_ratio": 1.579925650557621, "no_speech_prob": 1.6186997527256608e-05}, {"id": 1246, "seek": 331308, "start": 3317.0, "end": 3320.64, "text": " If we miss a step, we get inscrutable errors.", "tokens": [759, 321, 1713, 257, 1823, 11, 321, 483, 1028, 10757, 32148, 13603, 13], "temperature": 0.0, "avg_logprob": -0.1318047107794346, "compression_ratio": 1.579925650557621, "no_speech_prob": 1.6186997527256608e-05}, {"id": 1247, "seek": 331308, "start": 3320.64, "end": 3324.7599999999998, "text": " It's difficult to deal with at that level.", "tokens": [467, 311, 2252, 281, 2028, 365, 412, 300, 1496, 13], "temperature": 0.0, "avg_logprob": -0.1318047107794346, "compression_ratio": 1.579925650557621, "no_speech_prob": 1.6186997527256608e-05}, {"id": 1248, "seek": 331308, "start": 3324.7599999999998, "end": 3329.68, "text": " And then the code inside the data blocks API, I hate changing it now", "tokens": [400, 550, 264, 3089, 1854, 264, 1412, 8474, 9362, 11, 286, 4700, 4473, 309, 586], "temperature": 0.0, "avg_logprob": -0.1318047107794346, "compression_ratio": 1.579925650557621, "no_speech_prob": 1.6186997527256608e-05}, {"id": 1249, "seek": 331308, "start": 3329.68, "end": 3332.7599999999998, "text": " because I find it too confusing to remember", "tokens": [570, 286, 915, 309, 886, 13181, 281, 1604], "temperature": 0.0, "avg_logprob": -0.1318047107794346, "compression_ratio": 1.579925650557621, "no_speech_prob": 1.6186997527256608e-05}, {"id": 1250, "seek": 331308, "start": 3332.7599999999998, "end": 3334.7599999999998, "text": " like why it all fits together.", "tokens": [411, 983, 309, 439, 9001, 1214, 13], "temperature": 0.0, "avg_logprob": -0.1318047107794346, "compression_ratio": 1.579925650557621, "no_speech_prob": 1.6186997527256608e-05}, {"id": 1251, "seek": 331308, "start": 3334.7599999999998, "end": 3337.52, "text": " But check out this Swift code that does the same thing, right?", "tokens": [583, 1520, 484, 341, 25539, 3089, 300, 775, 264, 912, 551, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1318047107794346, "compression_ratio": 1.579925650557621, "no_speech_prob": 1.6186997527256608e-05}, {"id": 1252, "seek": 331308, "start": 3337.52, "end": 3339.48, "text": " So is that download?", "tokens": [407, 307, 300, 5484, 30], "temperature": 0.0, "avg_logprob": -0.1318047107794346, "compression_ratio": 1.579925650557621, "no_speech_prob": 1.6186997527256608e-05}, {"id": 1253, "seek": 331308, "start": 3339.48, "end": 3342.72, "text": " This is just the same get files we've seen before.", "tokens": [639, 307, 445, 264, 912, 483, 7098, 321, 600, 1612, 949, 13], "temperature": 0.0, "avg_logprob": -0.1318047107794346, "compression_ratio": 1.579925650557621, "no_speech_prob": 1.6186997527256608e-05}, {"id": 1254, "seek": 334272, "start": 3342.72, "end": 3346.24, "text": " All we need to do is we say, you know what?", "tokens": [1057, 321, 643, 281, 360, 307, 321, 584, 11, 291, 458, 437, 30], "temperature": 0.0, "avg_logprob": -0.12071638447897774, "compression_ratio": 1.847926267281106, "no_speech_prob": 1.2410964700393379e-05}, {"id": 1255, "seek": 334272, "start": 3346.24, "end": 3350.12, "text": " If you're going to create some new data bunch,", "tokens": [759, 291, 434, 516, 281, 1884, 512, 777, 1412, 3840, 11], "temperature": 0.0, "avg_logprob": -0.12071638447897774, "compression_ratio": 1.847926267281106, "no_speech_prob": 1.2410964700393379e-05}, {"id": 1256, "seek": 334272, "start": 3350.12, "end": 3352.64, "text": " you need some way to get the data.", "tokens": [291, 643, 512, 636, 281, 483, 264, 1412, 13], "temperature": 0.0, "avg_logprob": -0.12071638447897774, "compression_ratio": 1.847926267281106, "no_speech_prob": 1.2410964700393379e-05}, {"id": 1257, "seek": 334272, "start": 3352.64, "end": 3356.0, "text": " You need some way, and let's assume that they're just paths for now.", "tokens": [509, 643, 512, 636, 11, 293, 718, 311, 6552, 300, 436, 434, 445, 14518, 337, 586, 13], "temperature": 0.0, "avg_logprob": -0.12071638447897774, "compression_ratio": 1.847926267281106, "no_speech_prob": 1.2410964700393379e-05}, {"id": 1258, "seek": 334272, "start": 3356.0, "end": 3359.3999999999996, "text": " You need some way to turn all of those paths into items.", "tokens": [509, 643, 512, 636, 281, 1261, 439, 295, 729, 14518, 666, 4754, 13], "temperature": 0.0, "avg_logprob": -0.12071638447897774, "compression_ratio": 1.847926267281106, "no_speech_prob": 1.2410964700393379e-05}, {"id": 1259, "seek": 334272, "start": 3359.3999999999996, "end": 3361.52, "text": " So something like our item list in Python.", "tokens": [407, 746, 411, 527, 3174, 1329, 294, 15329, 13], "temperature": 0.0, "avg_logprob": -0.12071638447897774, "compression_ratio": 1.847926267281106, "no_speech_prob": 1.2410964700393379e-05}, {"id": 1260, "seek": 334272, "start": 3361.52, "end": 3365.4399999999996, "text": " You need some way to split that between training and validation.", "tokens": [509, 643, 512, 636, 281, 7472, 300, 1296, 3097, 293, 24071, 13], "temperature": 0.0, "avg_logprob": -0.12071638447897774, "compression_ratio": 1.847926267281106, "no_speech_prob": 1.2410964700393379e-05}, {"id": 1261, "seek": 334272, "start": 3365.4399999999996, "end": 3369.16, "text": " And you need some way to label the items.", "tokens": [400, 291, 643, 512, 636, 281, 7645, 264, 4754, 13], "temperature": 0.0, "avg_logprob": -0.12071638447897774, "compression_ratio": 1.847926267281106, "no_speech_prob": 1.2410964700393379e-05}, {"id": 1262, "seek": 336916, "start": 3369.16, "end": 3376.24, "text": " So for example, for image net, download calls that.", "tokens": [407, 337, 1365, 11, 337, 3256, 2533, 11, 5484, 5498, 300, 13], "temperature": 0.0, "avg_logprob": -0.14103387461768258, "compression_ratio": 1.6744186046511629, "no_speech_prob": 9.22278286452638e-06}, {"id": 1263, "seek": 336916, "start": 3376.24, "end": 3383.6, "text": " And things that convert paths to images, so which grab all of the list", "tokens": [400, 721, 300, 7620, 14518, 281, 5267, 11, 370, 597, 4444, 439, 295, 264, 1329], "temperature": 0.0, "avg_logprob": -0.14103387461768258, "compression_ratio": 1.6744186046511629, "no_speech_prob": 9.22278286452638e-06}, {"id": 1264, "seek": 336916, "start": 3383.6, "end": 3386.2, "text": " of paths is that collect files.", "tokens": [295, 14518, 307, 300, 2500, 7098, 13], "temperature": 0.0, "avg_logprob": -0.14103387461768258, "compression_ratio": 1.6744186046511629, "no_speech_prob": 9.22278286452638e-06}, {"id": 1265, "seek": 336916, "start": 3386.2, "end": 3390.52, "text": " And then the thing that converts, that decides whether they're training", "tokens": [400, 550, 264, 551, 300, 38874, 11, 300, 14898, 1968, 436, 434, 3097], "temperature": 0.0, "avg_logprob": -0.14103387461768258, "compression_ratio": 1.6744186046511629, "no_speech_prob": 9.22278286452638e-06}, {"id": 1266, "seek": 336916, "start": 3390.52, "end": 3396.2, "text": " or validation is whether the parent.parent is trained or not.", "tokens": [420, 24071, 307, 1968, 264, 2596, 13, 38321, 307, 8895, 420, 406, 13], "temperature": 0.0, "avg_logprob": -0.14103387461768258, "compression_ratio": 1.6744186046511629, "no_speech_prob": 9.22278286452638e-06}, {"id": 1267, "seek": 339620, "start": 3396.2, "end": 3401.0, "text": " And the thing that creates the label is the parent.", "tokens": [400, 264, 551, 300, 7829, 264, 7645, 307, 264, 2596, 13], "temperature": 0.0, "avg_logprob": -0.12760289510091147, "compression_ratio": 1.699588477366255, "no_speech_prob": 6.143859536678065e-06}, {"id": 1268, "seek": 339620, "start": 3401.0, "end": 3405.8399999999997, "text": " And so like we can basically just define this one neat little package", "tokens": [400, 370, 411, 321, 393, 1936, 445, 6964, 341, 472, 10654, 707, 7372], "temperature": 0.0, "avg_logprob": -0.12760289510091147, "compression_ratio": 1.699588477366255, "no_speech_prob": 6.143859536678065e-06}, {"id": 1269, "seek": 339620, "start": 3405.8399999999997, "end": 3409.04, "text": " of information, and we're done.", "tokens": [295, 1589, 11, 293, 321, 434, 1096, 13], "temperature": 0.0, "avg_logprob": -0.12760289510091147, "compression_ratio": 1.699588477366255, "no_speech_prob": 6.143859536678065e-06}, {"id": 1270, "seek": 339620, "start": 3409.04, "end": 3414.68, "text": " And Swift will actually tell us if we forgot something.", "tokens": [400, 25539, 486, 767, 980, 505, 498, 321, 5298, 746, 13], "temperature": 0.0, "avg_logprob": -0.12760289510091147, "compression_ratio": 1.699588477366255, "no_speech_prob": 6.143859536678065e-06}, {"id": 1271, "seek": 339620, "start": 3414.68, "end": 3418.9199999999996, "text": " Or if one of the things that we provided, like is training is meant", "tokens": [1610, 498, 472, 295, 264, 721, 300, 321, 5649, 11, 411, 307, 3097, 307, 4140], "temperature": 0.0, "avg_logprob": -0.12760289510091147, "compression_ratio": 1.699588477366255, "no_speech_prob": 6.143859536678065e-06}, {"id": 1272, "seek": 339620, "start": 3418.9199999999996, "end": 3421.7599999999998, "text": " to return true or false, if it's training or validation, if we return,", "tokens": [281, 2736, 2074, 420, 7908, 11, 498, 309, 311, 3097, 420, 24071, 11, 498, 321, 2736, 11], "temperature": 0.0, "avg_logprob": -0.12760289510091147, "compression_ratio": 1.699588477366255, "no_speech_prob": 6.143859536678065e-06}, {"id": 1273, "seek": 339620, "start": 3421.7599999999998, "end": 3425.9199999999996, "text": " like accidentally return the words train instead, it'll complain", "tokens": [411, 15715, 2736, 264, 2283, 3847, 2602, 11, 309, 603, 11024], "temperature": 0.0, "avg_logprob": -0.12760289510091147, "compression_ratio": 1.699588477366255, "no_speech_prob": 6.143859536678065e-06}, {"id": 1274, "seek": 342592, "start": 3425.92, "end": 3427.2400000000002, "text": " and let us know.", "tokens": [293, 718, 505, 458, 13], "temperature": 0.0, "avg_logprob": -0.17041730880737305, "compression_ratio": 1.6502242152466369, "no_speech_prob": 2.178028444177471e-05}, {"id": 1275, "seek": 342592, "start": 3427.2400000000002, "end": 3430.84, "text": " So like I just love this so much.", "tokens": [407, 411, 286, 445, 959, 341, 370, 709, 13], "temperature": 0.0, "avg_logprob": -0.17041730880737305, "compression_ratio": 1.6502242152466369, "no_speech_prob": 2.178028444177471e-05}, {"id": 1276, "seek": 342592, "start": 3430.84, "end": 3434.0, "text": " But to understand what's going on here, we need to learn a bit more", "tokens": [583, 281, 1223, 437, 311, 516, 322, 510, 11, 321, 643, 281, 1466, 257, 857, 544], "temperature": 0.0, "avg_logprob": -0.17041730880737305, "compression_ratio": 1.6502242152466369, "no_speech_prob": 2.178028444177471e-05}, {"id": 1277, "seek": 342592, "start": 3434.0, "end": 3438.96, "text": " about how Swift works and this idea of protocols.", "tokens": [466, 577, 25539, 1985, 293, 341, 1558, 295, 20618, 13], "temperature": 0.0, "avg_logprob": -0.17041730880737305, "compression_ratio": 1.6502242152466369, "no_speech_prob": 2.178028444177471e-05}, {"id": 1278, "seek": 342592, "start": 3438.96, "end": 3441.96, "text": " Yeah, so this is something that is actually useful", "tokens": [865, 11, 370, 341, 307, 746, 300, 307, 767, 4420], "temperature": 0.0, "avg_logprob": -0.17041730880737305, "compression_ratio": 1.6502242152466369, "no_speech_prob": 2.178028444177471e-05}, {"id": 1279, "seek": 342592, "start": 3441.96, "end": 3445.52, "text": " if you are doing deep learning stuff.", "tokens": [498, 291, 366, 884, 2452, 2539, 1507, 13], "temperature": 0.0, "avg_logprob": -0.17041730880737305, "compression_ratio": 1.6502242152466369, "no_speech_prob": 2.178028444177471e-05}, {"id": 1280, "seek": 342592, "start": 3445.52, "end": 3449.2400000000002, "text": " So let's talk about, sorry, go for it.", "tokens": [407, 718, 311, 751, 466, 11, 2597, 11, 352, 337, 309, 13], "temperature": 0.0, "avg_logprob": -0.17041730880737305, "compression_ratio": 1.6502242152466369, "no_speech_prob": 2.178028444177471e-05}, {"id": 1281, "seek": 342592, "start": 3449.2400000000002, "end": 3451.48, "text": " So let's talk about what protocols are in Swift.", "tokens": [407, 718, 311, 751, 466, 437, 20618, 366, 294, 25539, 13], "temperature": 0.0, "avg_logprob": -0.17041730880737305, "compression_ratio": 1.6502242152466369, "no_speech_prob": 2.178028444177471e-05}, {"id": 1282, "seek": 342592, "start": 3451.48, "end": 3455.2400000000002, "text": " So we've seen structs.", "tokens": [407, 321, 600, 1612, 6594, 82, 13], "temperature": 0.0, "avg_logprob": -0.17041730880737305, "compression_ratio": 1.6502242152466369, "no_speech_prob": 2.178028444177471e-05}, {"id": 1283, "seek": 345524, "start": 3455.24, "end": 3457.24, "text": " We will see classes later.", "tokens": [492, 486, 536, 5359, 1780, 13], "temperature": 0.0, "avg_logprob": -0.1111263699001736, "compression_ratio": 1.7924528301886793, "no_speech_prob": 1.095240077120252e-05}, {"id": 1284, "seek": 345524, "start": 3457.24, "end": 3459.52, "text": " But right now we want to talk about what protocols are.", "tokens": [583, 558, 586, 321, 528, 281, 751, 466, 437, 20618, 366, 13], "temperature": 0.0, "avg_logprob": -0.1111263699001736, "compression_ratio": 1.7924528301886793, "no_speech_prob": 1.095240077120252e-05}, {"id": 1285, "seek": 345524, "start": 3459.52, "end": 3461.8399999999997, "text": " And if you've worked in other languages, you may be familiar", "tokens": [400, 498, 291, 600, 2732, 294, 661, 8650, 11, 291, 815, 312, 4963], "temperature": 0.0, "avg_logprob": -0.1111263699001736, "compression_ratio": 1.7924528301886793, "no_speech_prob": 1.095240077120252e-05}, {"id": 1286, "seek": 345524, "start": 3461.8399999999997, "end": 3464.3999999999996, "text": " with things like interfaces in Java.", "tokens": [365, 721, 411, 28416, 294, 10745, 13], "temperature": 0.0, "avg_logprob": -0.1111263699001736, "compression_ratio": 1.7924528301886793, "no_speech_prob": 1.095240077120252e-05}, {"id": 1287, "seek": 345524, "start": 3464.3999999999996, "end": 3468.64, "text": " Abstract classes are often used.", "tokens": [46853, 1897, 5359, 366, 2049, 1143, 13], "temperature": 0.0, "avg_logprob": -0.1111263699001736, "compression_ratio": 1.7924528301886793, "no_speech_prob": 1.095240077120252e-05}, {"id": 1288, "seek": 345524, "start": 3468.64, "end": 3471.4399999999996, "text": " Advanced other weird languages have things called type classes.", "tokens": [26951, 661, 3657, 8650, 362, 721, 1219, 2010, 5359, 13], "temperature": 0.0, "avg_logprob": -0.1111263699001736, "compression_ratio": 1.7924528301886793, "no_speech_prob": 1.095240077120252e-05}, {"id": 1289, "seek": 345524, "start": 3471.4399999999996, "end": 3474.8799999999997, "text": " And so all these things are related to protocols in Swift.", "tokens": [400, 370, 439, 613, 721, 366, 4077, 281, 20618, 294, 25539, 13], "temperature": 0.0, "avg_logprob": -0.1111263699001736, "compression_ratio": 1.7924528301886793, "no_speech_prob": 1.095240077120252e-05}, {"id": 1290, "seek": 345524, "start": 3474.8799999999997, "end": 3477.56, "text": " And what protocols do is they're all about splitting the interface", "tokens": [400, 437, 20618, 360, 307, 436, 434, 439, 466, 30348, 264, 9226], "temperature": 0.0, "avg_logprob": -0.1111263699001736, "compression_ratio": 1.7924528301886793, "no_speech_prob": 1.095240077120252e-05}, {"id": 1291, "seek": 345524, "start": 3477.56, "end": 3479.7999999999997, "text": " of a type from the implementation.", "tokens": [295, 257, 2010, 490, 264, 11420, 13], "temperature": 0.0, "avg_logprob": -0.1111263699001736, "compression_ratio": 1.7924528301886793, "no_speech_prob": 1.095240077120252e-05}, {"id": 1292, "seek": 345524, "start": 3479.7999999999997, "end": 3482.08, "text": " And so we'll talk about layer later.", "tokens": [400, 370, 321, 603, 751, 466, 4583, 1780, 13], "temperature": 0.0, "avg_logprob": -0.1111263699001736, "compression_ratio": 1.7924528301886793, "no_speech_prob": 1.095240077120252e-05}, {"id": 1293, "seek": 348208, "start": 3482.08, "end": 3486.04, "text": " Layer is a protocol, and it says that to use a layer,", "tokens": [35166, 307, 257, 10336, 11, 293, 309, 1619, 300, 281, 764, 257, 4583, 11], "temperature": 0.0, "avg_logprob": -0.12115388676740121, "compression_ratio": 1.8295454545454546, "no_speech_prob": 1.2804139259969816e-05}, {"id": 1294, "seek": 348208, "start": 3486.04, "end": 3489.4, "text": " or rather to define a layer, you have this call.", "tokens": [420, 2831, 281, 6964, 257, 4583, 11, 291, 362, 341, 818, 13], "temperature": 0.0, "avg_logprob": -0.12115388676740121, "compression_ratio": 1.8295454545454546, "no_speech_prob": 1.2804139259969816e-05}, {"id": 1295, "seek": 348208, "start": 3489.4, "end": 3492.04, "text": " So layers are callable, just like in PyTorch.", "tokens": [407, 7914, 366, 818, 712, 11, 445, 411, 294, 9953, 51, 284, 339, 13], "temperature": 0.0, "avg_logprob": -0.12115388676740121, "compression_ratio": 1.8295454545454546, "no_speech_prob": 1.2804139259969816e-05}, {"id": 1296, "seek": 348208, "start": 3492.04, "end": 3493.84, "text": " And so then you can define a dense layer and say how", "tokens": [400, 370, 550, 291, 393, 6964, 257, 18011, 4583, 293, 584, 577], "temperature": 0.0, "avg_logprob": -0.12115388676740121, "compression_ratio": 1.8295454545454546, "no_speech_prob": 1.2804139259969816e-05}, {"id": 1297, "seek": 348208, "start": 3493.84, "end": 3495.12, "text": " to call a dense layer.", "tokens": [281, 818, 257, 18011, 4583, 13], "temperature": 0.0, "avg_logprob": -0.12115388676740121, "compression_ratio": 1.8295454545454546, "no_speech_prob": 1.2804139259969816e-05}, {"id": 1298, "seek": 348208, "start": 3495.12, "end": 3502.04, "text": " You can define a conv2d and show how to implement a conv2d layer.", "tokens": [509, 393, 6964, 257, 3754, 17, 67, 293, 855, 577, 281, 4445, 257, 3754, 17, 67, 4583, 13], "temperature": 0.0, "avg_logprob": -0.12115388676740121, "compression_ratio": 1.8295454545454546, "no_speech_prob": 1.2804139259969816e-05}, {"id": 1299, "seek": 348208, "start": 3502.04, "end": 3505.16, "text": " And so there's a contract here between what a type is supposed", "tokens": [400, 370, 456, 311, 257, 4364, 510, 1296, 437, 257, 2010, 307, 3442], "temperature": 0.0, "avg_logprob": -0.12115388676740121, "compression_ratio": 1.8295454545454546, "no_speech_prob": 1.2804139259969816e-05}, {"id": 1300, "seek": 348208, "start": 3505.16, "end": 3507.44, "text": " to have, all layers must be callable.", "tokens": [281, 362, 11, 439, 7914, 1633, 312, 818, 712, 13], "temperature": 0.0, "avg_logprob": -0.12115388676740121, "compression_ratio": 1.8295454545454546, "no_speech_prob": 1.2804139259969816e-05}, {"id": 1301, "seek": 348208, "start": 3507.44, "end": 3509.56, "text": " And then the implementations, these are different.", "tokens": [400, 550, 264, 4445, 763, 11, 613, 366, 819, 13], "temperature": 0.0, "avg_logprob": -0.12115388676740121, "compression_ratio": 1.8295454545454546, "no_speech_prob": 1.2804139259969816e-05}, {"id": 1302, "seek": 348208, "start": 3509.56, "end": 3511.44, "text": " So this is pretty straightforward stuff.", "tokens": [407, 341, 307, 1238, 15325, 1507, 13], "temperature": 0.0, "avg_logprob": -0.12115388676740121, "compression_ratio": 1.8295454545454546, "no_speech_prob": 1.2804139259969816e-05}, {"id": 1303, "seek": 351144, "start": 3511.44, "end": 3513.08, "text": " Although even that's quite nice, right?", "tokens": [5780, 754, 300, 311, 1596, 1481, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.19038461179149394, "compression_ratio": 1.7129032258064516, "no_speech_prob": 3.169087358401157e-05}, {"id": 1304, "seek": 351144, "start": 3513.08, "end": 3515.64, "text": " Because like in PyTorch, you kind of have to know", "tokens": [1436, 411, 294, 9953, 51, 284, 339, 11, 291, 733, 295, 362, 281, 458], "temperature": 0.0, "avg_logprob": -0.19038461179149394, "compression_ratio": 1.7129032258064516, "no_speech_prob": 3.169087358401157e-05}, {"id": 1305, "seek": 351144, "start": 3515.64, "end": 3517.2400000000002, "text": " that there's something called forward.", "tokens": [300, 456, 311, 746, 1219, 2128, 13], "temperature": 0.0, "avg_logprob": -0.19038461179149394, "compression_ratio": 1.7129032258064516, "no_speech_prob": 3.169087358401157e-05}, {"id": 1306, "seek": 351144, "start": 3517.2400000000002, "end": 3521.48, "text": " And if you misspell it or forget it, put it there,", "tokens": [400, 498, 291, 1713, 49241, 309, 420, 2870, 309, 11, 829, 309, 456, 11], "temperature": 0.0, "avg_logprob": -0.19038461179149394, "compression_ratio": 1.7129032258064516, "no_speech_prob": 3.169087358401157e-05}, {"id": 1307, "seek": 351144, "start": 3521.48, "end": 3524.68, "text": " or put done to call instead of forward, you get kind", "tokens": [420, 829, 1096, 281, 818, 2602, 295, 2128, 11, 291, 483, 733], "temperature": 0.0, "avg_logprob": -0.19038461179149394, "compression_ratio": 1.7129032258064516, "no_speech_prob": 3.169087358401157e-05}, {"id": 1308, "seek": 351144, "start": 3524.68, "end": 3525.88, "text": " of weird and screwable errors.", "tokens": [295, 3657, 293, 5630, 712, 13603, 13], "temperature": 0.0, "avg_logprob": -0.19038461179149394, "compression_ratio": 1.7129032258064516, "no_speech_prob": 3.169087358401157e-05}, {"id": 1309, "seek": 351144, "start": 3525.88, "end": 3528.32, "text": " Whereas with this approach.", "tokens": [13813, 365, 341, 3109, 13], "temperature": 0.0, "avg_logprob": -0.19038461179149394, "compression_ratio": 1.7129032258064516, "no_speech_prob": 3.169087358401157e-05}, {"id": 1310, "seek": 351144, "start": 3528.32, "end": 3531.52, "text": " You get tab completion for the signature.", "tokens": [509, 483, 4421, 19372, 337, 264, 13397, 13], "temperature": 0.0, "avg_logprob": -0.19038461179149394, "compression_ratio": 1.7129032258064516, "no_speech_prob": 3.169087358401157e-05}, {"id": 1311, "seek": 351144, "start": 3531.52, "end": 3533.56, "text": " Yeah, and so Swift will tell you if you get it wrong.", "tokens": [865, 11, 293, 370, 25539, 486, 980, 291, 498, 291, 483, 309, 2085, 13], "temperature": 0.0, "avg_logprob": -0.19038461179149394, "compression_ratio": 1.7129032258064516, "no_speech_prob": 3.169087358401157e-05}, {"id": 1312, "seek": 351144, "start": 3533.56, "end": 3536.32, "text": " It'll say this is what the function should have been called.", "tokens": [467, 603, 584, 341, 307, 437, 264, 2445, 820, 362, 668, 1219, 13], "temperature": 0.0, "avg_logprob": -0.19038461179149394, "compression_ratio": 1.7129032258064516, "no_speech_prob": 3.169087358401157e-05}, {"id": 1313, "seek": 351144, "start": 3536.32, "end": 3537.64, "text": " Yeah, that's great.", "tokens": [865, 11, 300, 311, 869, 13], "temperature": 0.0, "avg_logprob": -0.19038461179149394, "compression_ratio": 1.7129032258064516, "no_speech_prob": 3.169087358401157e-05}, {"id": 1314, "seek": 351144, "start": 3537.64, "end": 3540.88, "text": " And so what this is really doing is this is defining behaviors", "tokens": [400, 370, 437, 341, 307, 534, 884, 307, 341, 307, 17827, 15501], "temperature": 0.0, "avg_logprob": -0.19038461179149394, "compression_ratio": 1.7129032258064516, "no_speech_prob": 3.169087358401157e-05}, {"id": 1315, "seek": 354088, "start": 3540.88, "end": 3542.36, "text": " for groups of types.", "tokens": [337, 3935, 295, 3467, 13], "temperature": 0.0, "avg_logprob": -0.11525264467511859, "compression_ratio": 1.8812260536398469, "no_speech_prob": 1.577914304107253e-06}, {"id": 1316, "seek": 354088, "start": 3542.36, "end": 3544.56, "text": " And so we're saying a layer.", "tokens": [400, 370, 321, 434, 1566, 257, 4583, 13], "temperature": 0.0, "avg_logprob": -0.11525264467511859, "compression_ratio": 1.8812260536398469, "no_speech_prob": 1.577914304107253e-06}, {"id": 1317, "seek": 354088, "start": 3544.56, "end": 3548.04, "text": " Layer is like the commonality between a whole group of types", "tokens": [35166, 307, 411, 264, 2689, 1860, 1296, 257, 1379, 1594, 295, 3467], "temperature": 0.0, "avg_logprob": -0.11525264467511859, "compression_ratio": 1.8812260536398469, "no_speech_prob": 1.577914304107253e-06}, {"id": 1318, "seek": 354088, "start": 3548.04, "end": 3550.76, "text": " that behave like a layer.", "tokens": [300, 15158, 411, 257, 4583, 13], "temperature": 0.0, "avg_logprob": -0.11525264467511859, "compression_ratio": 1.8812260536398469, "no_speech_prob": 1.577914304107253e-06}, {"id": 1319, "seek": 354088, "start": 3550.76, "end": 3552.08, "text": " And what does that behavior mean?", "tokens": [400, 437, 775, 300, 5223, 914, 30], "temperature": 0.0, "avg_logprob": -0.11525264467511859, "compression_ratio": 1.8812260536398469, "no_speech_prob": 1.577914304107253e-06}, {"id": 1320, "seek": 354088, "start": 3552.08, "end": 3554.52, "text": " Well, it's a list of what are called requirements.", "tokens": [1042, 11, 309, 311, 257, 1329, 295, 437, 366, 1219, 7728, 13], "temperature": 0.0, "avg_logprob": -0.11525264467511859, "compression_ratio": 1.8812260536398469, "no_speech_prob": 1.577914304107253e-06}, {"id": 1321, "seek": 354088, "start": 3554.52, "end": 3557.0, "text": " And so these are all the methods that the type has to have.", "tokens": [400, 370, 613, 366, 439, 264, 7150, 300, 264, 2010, 575, 281, 362, 13], "temperature": 0.0, "avg_logprob": -0.11525264467511859, "compression_ratio": 1.8812260536398469, "no_speech_prob": 1.577914304107253e-06}, {"id": 1322, "seek": 354088, "start": 3557.0, "end": 3559.0, "text": " This is the signatures of the types.", "tokens": [639, 307, 264, 32322, 295, 264, 3467, 13], "temperature": 0.0, "avg_logprob": -0.11525264467511859, "compression_ratio": 1.8812260536398469, "no_speech_prob": 1.577914304107253e-06}, {"id": 1323, "seek": 354088, "start": 3559.0, "end": 3561.4, "text": " And these things often have invariance.", "tokens": [400, 613, 721, 2049, 362, 33270, 719, 13], "temperature": 0.0, "avg_logprob": -0.11525264467511859, "compression_ratio": 1.8812260536398469, "no_speech_prob": 1.577914304107253e-06}, {"id": 1324, "seek": 354088, "start": 3561.4, "end": 3562.92, "text": " And so one of the things that Swift has", "tokens": [400, 370, 472, 295, 264, 721, 300, 25539, 575], "temperature": 0.0, "avg_logprob": -0.11525264467511859, "compression_ratio": 1.8812260536398469, "no_speech_prob": 1.577914304107253e-06}, {"id": 1325, "seek": 354088, "start": 3562.92, "end": 3565.88, "text": " in its library is the notion of equatable.", "tokens": [294, 1080, 6405, 307, 264, 10710, 295, 1267, 31415, 13], "temperature": 0.0, "avg_logprob": -0.11525264467511859, "compression_ratio": 1.8812260536398469, "no_speech_prob": 1.577914304107253e-06}, {"id": 1326, "seek": 354088, "start": 3565.88, "end": 3567.1600000000003, "text": " What is equatable?", "tokens": [708, 307, 1267, 31415, 30], "temperature": 0.0, "avg_logprob": -0.11525264467511859, "compression_ratio": 1.8812260536398469, "no_speech_prob": 1.577914304107253e-06}, {"id": 1327, "seek": 354088, "start": 3567.1600000000003, "end": 3568.46, "text": " Well, an equatable is any type", "tokens": [1042, 11, 364, 1267, 31415, 307, 604, 2010], "temperature": 0.0, "avg_logprob": -0.11525264467511859, "compression_ratio": 1.8812260536398469, "no_speech_prob": 1.577914304107253e-06}, {"id": 1328, "seek": 356846, "start": 3568.46, "end": 3571.44, "text": " that has this equals equals operator, right?", "tokens": [300, 575, 341, 6915, 6915, 12973, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.13968710236202012, "compression_ratio": 1.975438596491228, "no_speech_prob": 1.5623740523551533e-07}, {"id": 1329, "seek": 356846, "start": 3571.44, "end": 3573.16, "text": " And then it says what is equatability", "tokens": [400, 550, 309, 1619, 437, 307, 1267, 267, 2310], "temperature": 0.0, "avg_logprob": -0.13968710236202012, "compression_ratio": 1.975438596491228, "no_speech_prob": 1.5623740523551533e-07}, {"id": 1330, "seek": 356846, "start": 3573.16, "end": 3574.52, "text": " and all that kind of stuff.", "tokens": [293, 439, 300, 733, 295, 1507, 13], "temperature": 0.0, "avg_logprob": -0.13968710236202012, "compression_ratio": 1.975438596491228, "no_speech_prob": 1.5623740523551533e-07}, {"id": 1331, "seek": 356846, "start": 3574.52, "end": 3576.8, "text": " Now, the cool thing about this is that you can build", "tokens": [823, 11, 264, 1627, 551, 466, 341, 307, 300, 291, 393, 1322], "temperature": 0.0, "avg_logprob": -0.13968710236202012, "compression_ratio": 1.975438596491228, "no_speech_prob": 1.5623740523551533e-07}, {"id": 1332, "seek": 356846, "start": 3576.8, "end": 3579.64, "text": " up towers of types.", "tokens": [493, 25045, 295, 3467, 13], "temperature": 0.0, "avg_logprob": -0.13968710236202012, "compression_ratio": 1.975438596491228, "no_speech_prob": 1.5623740523551533e-07}, {"id": 1333, "seek": 356846, "start": 3579.64, "end": 3582.76, "text": " And so you can say, well, equatable gets refined", "tokens": [400, 370, 291, 393, 584, 11, 731, 11, 1267, 31415, 2170, 26201], "temperature": 0.0, "avg_logprob": -0.13968710236202012, "compression_ratio": 1.975438596491228, "no_speech_prob": 1.5623740523551533e-07}, {"id": 1334, "seek": 356846, "start": 3582.76, "end": 3584.4, "text": " by an additive arithmetic.", "tokens": [538, 364, 45558, 42973, 13], "temperature": 0.0, "avg_logprob": -0.13968710236202012, "compression_ratio": 1.975438596491228, "no_speech_prob": 1.5623740523551533e-07}, {"id": 1335, "seek": 356846, "start": 3584.4, "end": 3585.76, "text": " And an additive arithmetic is something", "tokens": [400, 364, 45558, 42973, 307, 746], "temperature": 0.0, "avg_logprob": -0.13968710236202012, "compression_ratio": 1.975438596491228, "no_speech_prob": 1.5623740523551533e-07}, {"id": 1336, "seek": 356846, "start": 3585.76, "end": 3587.7200000000003, "text": " that supports addition and subtraction.", "tokens": [300, 9346, 4500, 293, 16390, 313, 13], "temperature": 0.0, "avg_logprob": -0.13968710236202012, "compression_ratio": 1.975438596491228, "no_speech_prob": 1.5623740523551533e-07}, {"id": 1337, "seek": 356846, "start": 3587.7200000000003, "end": 3589.2400000000002, "text": " Then if you also have multiplication,", "tokens": [1396, 498, 291, 611, 362, 27290, 11], "temperature": 0.0, "avg_logprob": -0.13968710236202012, "compression_ratio": 1.975438596491228, "no_speech_prob": 1.5623740523551533e-07}, {"id": 1338, "seek": 356846, "start": 3589.2400000000002, "end": 3590.54, "text": " you can be numeric.", "tokens": [291, 393, 312, 7866, 299, 13], "temperature": 0.0, "avg_logprob": -0.13968710236202012, "compression_ratio": 1.975438596491228, "no_speech_prob": 1.5623740523551533e-07}, {"id": 1339, "seek": 356846, "start": 3590.54, "end": 3592.84, "text": " And if you also have negation, then it can be signed.", "tokens": [400, 498, 291, 611, 362, 2485, 399, 11, 550, 309, 393, 312, 8175, 13], "temperature": 0.0, "avg_logprob": -0.13968710236202012, "compression_ratio": 1.975438596491228, "no_speech_prob": 1.5623740523551533e-07}, {"id": 1340, "seek": 356846, "start": 3592.84, "end": 3595.84, "text": " And then you can have integers and you can have floating point.", "tokens": [400, 550, 291, 393, 362, 41674, 293, 291, 393, 362, 12607, 935, 13], "temperature": 0.0, "avg_logprob": -0.13968710236202012, "compression_ratio": 1.975438596491228, "no_speech_prob": 1.5623740523551533e-07}, {"id": 1341, "seek": 356846, "start": 3595.84, "end": 3598.28, "text": " And now you can have all these different things", "tokens": [400, 586, 291, 393, 362, 439, 613, 819, 721], "temperature": 0.0, "avg_logprob": -0.13968710236202012, "compression_ratio": 1.975438596491228, "no_speech_prob": 1.5623740523551533e-07}, {"id": 1342, "seek": 359828, "start": 3598.28, "end": 3600.2000000000003, "text": " that exist in the ecosystem of your program", "tokens": [300, 2514, 294, 264, 11311, 295, 428, 1461], "temperature": 0.0, "avg_logprob": -0.10650492471361918, "compression_ratio": 1.833976833976834, "no_speech_prob": 2.7692676667356864e-06}, {"id": 1343, "seek": 359828, "start": 3600.2000000000003, "end": 3602.0, "text": " and you can describe them.", "tokens": [293, 291, 393, 6786, 552, 13], "temperature": 0.0, "avg_logprob": -0.10650492471361918, "compression_ratio": 1.833976833976834, "no_speech_prob": 2.7692676667356864e-06}, {"id": 1344, "seek": 359828, "start": 3602.0, "end": 3608.8, "text": " And so this is all very, these things, these ways to reason", "tokens": [400, 370, 341, 307, 439, 588, 11, 613, 721, 11, 613, 2098, 281, 1778], "temperature": 0.0, "avg_logprob": -0.10650492471361918, "compression_ratio": 1.833976833976834, "no_speech_prob": 2.7692676667356864e-06}, {"id": 1345, "seek": 359828, "start": 3608.8, "end": 3611.8, "text": " about these groups of types give you the ability", "tokens": [466, 613, 3935, 295, 3467, 976, 291, 264, 3485], "temperature": 0.0, "avg_logprob": -0.10650492471361918, "compression_ratio": 1.833976833976834, "no_speech_prob": 2.7692676667356864e-06}, {"id": 1346, "seek": 359828, "start": 3611.8, "end": 3614.0, "text": " to get these abstractions that we all want.", "tokens": [281, 483, 613, 12649, 626, 300, 321, 439, 528, 13], "temperature": 0.0, "avg_logprob": -0.10650492471361918, "compression_ratio": 1.833976833976834, "no_speech_prob": 2.7692676667356864e-06}, {"id": 1347, "seek": 359828, "start": 3614.0, "end": 3615.76, "text": " And these types already exist in Swift.", "tokens": [400, 613, 3467, 1217, 2514, 294, 25539, 13], "temperature": 0.0, "avg_logprob": -0.10650492471361918, "compression_ratio": 1.833976833976834, "no_speech_prob": 2.7692676667356864e-06}, {"id": 1348, "seek": 359828, "start": 3615.76, "end": 3618.6400000000003, "text": " These all exist and you can go see them in the standard library.", "tokens": [1981, 439, 2514, 293, 291, 393, 352, 536, 552, 294, 264, 3832, 6405, 13], "temperature": 0.0, "avg_logprob": -0.10650492471361918, "compression_ratio": 1.833976833976834, "no_speech_prob": 2.7692676667356864e-06}, {"id": 1349, "seek": 359828, "start": 3618.6400000000003, "end": 3620.0800000000004, "text": " And so why do you want this?", "tokens": [400, 370, 983, 360, 291, 528, 341, 30], "temperature": 0.0, "avg_logprob": -0.10650492471361918, "compression_ratio": 1.833976833976834, "no_speech_prob": 2.7692676667356864e-06}, {"id": 1350, "seek": 359828, "start": 3620.0800000000004, "end": 3621.52, "text": " Well, the cool thing about this is", "tokens": [1042, 11, 264, 1627, 551, 466, 341, 307], "temperature": 0.0, "avg_logprob": -0.10650492471361918, "compression_ratio": 1.833976833976834, "no_speech_prob": 2.7692676667356864e-06}, {"id": 1351, "seek": 359828, "start": 3621.52, "end": 3624.6800000000003, "text": " that now you can define behavior that applies to all", "tokens": [300, 586, 291, 393, 6964, 5223, 300, 13165, 281, 439], "temperature": 0.0, "avg_logprob": -0.10650492471361918, "compression_ratio": 1.833976833976834, "no_speech_prob": 2.7692676667356864e-06}, {"id": 1352, "seek": 359828, "start": 3624.6800000000003, "end": 3627.2000000000003, "text": " of the members of that class.", "tokens": [295, 264, 2679, 295, 300, 1508, 13], "temperature": 0.0, "avg_logprob": -0.10650492471361918, "compression_ratio": 1.833976833976834, "no_speech_prob": 2.7692676667356864e-06}, {"id": 1353, "seek": 362720, "start": 3627.2, "end": 3631.3999999999996, "text": " And so what we're doing here is we're saying not equal.", "tokens": [400, 370, 437, 321, 434, 884, 510, 307, 321, 434, 1566, 406, 2681, 13], "temperature": 0.0, "avg_logprob": -0.14354150945490057, "compression_ratio": 1.8423076923076922, "no_speech_prob": 1.862976023403462e-05}, {"id": 1354, "seek": 362720, "start": 3631.3999999999996, "end": 3633.7999999999997, "text": " Well, all things that are equatable", "tokens": [1042, 11, 439, 721, 300, 366, 1267, 31415], "temperature": 0.0, "avg_logprob": -0.14354150945490057, "compression_ratio": 1.8423076923076922, "no_speech_prob": 1.862976023403462e-05}, {"id": 1355, "seek": 362720, "start": 3633.7999999999997, "end": 3637.2799999999997, "text": " in this T colon equatable says I work with any type", "tokens": [294, 341, 314, 8255, 1267, 31415, 1619, 286, 589, 365, 604, 2010], "temperature": 0.0, "avg_logprob": -0.14354150945490057, "compression_ratio": 1.8423076923076922, "no_speech_prob": 1.862976023403462e-05}, {"id": 1356, "seek": 362720, "start": 3637.2799999999997, "end": 3639.2, "text": " that is equatable.", "tokens": [300, 307, 1267, 31415, 13], "temperature": 0.0, "avg_logprob": -0.14354150945490057, "compression_ratio": 1.8423076923076922, "no_speech_prob": 1.862976023403462e-05}, {"id": 1357, "seek": 362720, "start": 3639.2, "end": 3642.4199999999996, "text": " What this is doing is this is defining a function not equal", "tokens": [708, 341, 307, 884, 307, 341, 307, 17827, 257, 2445, 406, 2681], "temperature": 0.0, "avg_logprob": -0.14354150945490057, "compression_ratio": 1.8423076923076922, "no_speech_prob": 1.862976023403462e-05}, {"id": 1358, "seek": 362720, "start": 3642.4199999999996, "end": 3645.72, "text": " on any type that's equatable and it takes two of these things", "tokens": [322, 604, 2010, 300, 311, 1267, 31415, 293, 309, 2516, 732, 295, 613, 721], "temperature": 0.0, "avg_logprob": -0.14354150945490057, "compression_ratio": 1.8423076923076922, "no_speech_prob": 1.862976023403462e-05}, {"id": 1359, "seek": 362720, "start": 3645.72, "end": 3647.0, "text": " and returns a bool.", "tokens": [293, 11247, 257, 748, 401, 13], "temperature": 0.0, "avg_logprob": -0.14354150945490057, "compression_ratio": 1.8423076923076922, "no_speech_prob": 1.862976023403462e-05}, {"id": 1360, "seek": 362720, "start": 3647.0, "end": 3650.3999999999996, "text": " And we can implement not equal by just calling equals equals,", "tokens": [400, 321, 393, 4445, 406, 2681, 538, 445, 5141, 6915, 6915, 11], "temperature": 0.0, "avg_logprob": -0.14354150945490057, "compression_ratio": 1.8423076923076922, "no_speech_prob": 1.862976023403462e-05}, {"id": 1361, "seek": 362720, "start": 3650.3999999999996, "end": 3653.3199999999997, "text": " which all equatable things are, and then inverting it.", "tokens": [597, 439, 1267, 31415, 721, 366, 11, 293, 550, 28653, 783, 309, 13], "temperature": 0.0, "avg_logprob": -0.14354150945490057, "compression_ratio": 1.8423076923076922, "no_speech_prob": 1.862976023403462e-05}, {"id": 1362, "seek": 362720, "start": 3653.3199999999997, "end": 3657.04, "text": " So to be clear, what Chris just did here was he wrote one", "tokens": [407, 281, 312, 1850, 11, 437, 6688, 445, 630, 510, 390, 415, 4114, 472], "temperature": 0.0, "avg_logprob": -0.14354150945490057, "compression_ratio": 1.8423076923076922, "no_speech_prob": 1.862976023403462e-05}, {"id": 1363, "seek": 365704, "start": 3657.04, "end": 3660.36, "text": " function that is now going to add behavior", "tokens": [2445, 300, 307, 586, 516, 281, 909, 5223], "temperature": 0.0, "avg_logprob": -0.14433695929391044, "compression_ratio": 1.7375415282392026, "no_speech_prob": 1.4062973605177831e-05}, {"id": 1364, "seek": 365704, "start": 3660.36, "end": 3664.4, "text": " to every single thing that defines equals automatically,", "tokens": [281, 633, 2167, 551, 300, 23122, 6915, 6772, 11], "temperature": 0.0, "avg_logprob": -0.14433695929391044, "compression_ratio": 1.7375415282392026, "no_speech_prob": 1.4062973605177831e-05}, {"id": 1365, "seek": 365704, "start": 3664.4, "end": 3665.88, "text": " which is pretty magic.", "tokens": [597, 307, 1238, 5585, 13], "temperature": 0.0, "avg_logprob": -0.14433695929391044, "compression_ratio": 1.7375415282392026, "no_speech_prob": 1.4062973605177831e-05}, {"id": 1366, "seek": 365704, "start": 3665.88, "end": 3670.32, "text": " Which is like everywhere, boom, one place, super, super abstract.", "tokens": [3013, 307, 411, 5315, 11, 9351, 11, 472, 1081, 11, 1687, 11, 1687, 12649, 13], "temperature": 0.0, "avg_logprob": -0.14433695929391044, "compression_ratio": 1.7375415282392026, "no_speech_prob": 1.4062973605177831e-05}, {"id": 1367, "seek": 365704, "start": 3670.32, "end": 3673.08, "text": " But this also works for lots of other things.", "tokens": [583, 341, 611, 1985, 337, 3195, 295, 661, 721, 13], "temperature": 0.0, "avg_logprob": -0.14433695929391044, "compression_ratio": 1.7375415282392026, "no_speech_prob": 1.4062973605177831e-05}, {"id": 1368, "seek": 365704, "start": 3673.08, "end": 3674.72, "text": " This works for like absolute value.", "tokens": [639, 1985, 337, 411, 8236, 2158, 13], "temperature": 0.0, "avg_logprob": -0.14433695929391044, "compression_ratio": 1.7375415282392026, "no_speech_prob": 1.4062973605177831e-05}, {"id": 1369, "seek": 365704, "start": 3674.72, "end": 3676.02, "text": " What does absolute value mean?", "tokens": [708, 775, 8236, 2158, 914, 30], "temperature": 0.0, "avg_logprob": -0.14433695929391044, "compression_ratio": 1.7375415282392026, "no_speech_prob": 1.4062973605177831e-05}, {"id": 1370, "seek": 365704, "start": 3676.02, "end": 3679.6, "text": " Well, it needs any type that is signed and numeric", "tokens": [1042, 11, 309, 2203, 604, 2010, 300, 307, 8175, 293, 7866, 299], "temperature": 0.0, "avg_logprob": -0.14433695929391044, "compression_ratio": 1.7375415282392026, "no_speech_prob": 1.4062973605177831e-05}, {"id": 1371, "seek": 365704, "start": 3679.6, "end": 3680.88, "text": " and that's comparable.", "tokens": [293, 300, 311, 25323, 13], "temperature": 0.0, "avg_logprob": -0.14433695929391044, "compression_ratio": 1.7375415282392026, "no_speech_prob": 1.4062973605177831e-05}, {"id": 1372, "seek": 365704, "start": 3680.88, "end": 3682.56, "text": " And how do you implement absolute value?", "tokens": [400, 577, 360, 291, 4445, 8236, 2158, 30], "temperature": 0.0, "avg_logprob": -0.14433695929391044, "compression_ratio": 1.7375415282392026, "no_speech_prob": 1.4062973605177831e-05}, {"id": 1373, "seek": 365704, "start": 3682.56, "end": 3683.84, "text": " Well, you compare the thing against zero.", "tokens": [1042, 11, 291, 6794, 264, 551, 1970, 4018, 13], "temperature": 0.0, "avg_logprob": -0.14433695929391044, "compression_ratio": 1.7375415282392026, "no_speech_prob": 1.4062973605177831e-05}, {"id": 1374, "seek": 365704, "start": 3683.84, "end": 3685.12, "text": " If it's less than zero, you negate it.", "tokens": [759, 309, 311, 1570, 813, 4018, 11, 291, 2485, 473, 309, 13], "temperature": 0.0, "avg_logprob": -0.14433695929391044, "compression_ratio": 1.7375415282392026, "no_speech_prob": 1.4062973605177831e-05}, {"id": 1375, "seek": 365704, "start": 3685.12, "end": 3686.44, "text": " Otherwise, you return it.", "tokens": [10328, 11, 291, 2736, 309, 13], "temperature": 0.0, "avg_logprob": -0.14433695929391044, "compression_ratio": 1.7375415282392026, "no_speech_prob": 1.4062973605177831e-05}, {"id": 1376, "seek": 368644, "start": 3686.44, "end": 3687.76, "text": " Super simple.", "tokens": [4548, 2199, 13], "temperature": 0.0, "avg_logprob": -0.1376550701302542, "compression_ratio": 1.8385964912280701, "no_speech_prob": 5.453269977806485e-07}, {"id": 1377, "seek": 368644, "start": 3687.76, "end": 3689.44, "text": " But now everything that is a number", "tokens": [583, 586, 1203, 300, 307, 257, 1230], "temperature": 0.0, "avg_logprob": -0.1376550701302542, "compression_ratio": 1.8385964912280701, "no_speech_prob": 5.453269977806485e-07}, {"id": 1378, "seek": 368644, "start": 3689.44, "end": 3692.76, "text": " that can be compared is now absable.", "tokens": [300, 393, 312, 5347, 307, 586, 1950, 712, 13], "temperature": 0.0, "avg_logprob": -0.1376550701302542, "compression_ratio": 1.8385964912280701, "no_speech_prob": 5.453269977806485e-07}, {"id": 1379, "seek": 368644, "start": 3692.76, "end": 3694.6, "text": " Types, same thing.", "tokens": [5569, 5190, 11, 912, 551, 13], "temperature": 0.0, "avg_logprob": -0.1376550701302542, "compression_ratio": 1.8385964912280701, "no_speech_prob": 5.453269977806485e-07}, {"id": 1380, "seek": 368644, "start": 3694.6, "end": 3695.96, "text": " All these things work the same way.", "tokens": [1057, 613, 721, 589, 264, 912, 636, 13], "temperature": 0.0, "avg_logprob": -0.1376550701302542, "compression_ratio": 1.8385964912280701, "no_speech_prob": 5.453269977806485e-07}, {"id": 1381, "seek": 368644, "start": 3695.96, "end": 3699.16, "text": " And so with dictionary, what you want is you want the keys", "tokens": [400, 370, 365, 25890, 11, 437, 291, 528, 307, 291, 528, 264, 9317], "temperature": 0.0, "avg_logprob": -0.1376550701302542, "compression_ratio": 1.8385964912280701, "no_speech_prob": 5.453269977806485e-07}, {"id": 1382, "seek": 368644, "start": 3699.16, "end": 3700.96, "text": " in a dictionary all have to be hashable.", "tokens": [294, 257, 25890, 439, 362, 281, 312, 22019, 712, 13], "temperature": 0.0, "avg_logprob": -0.1376550701302542, "compression_ratio": 1.8385964912280701, "no_speech_prob": 5.453269977806485e-07}, {"id": 1383, "seek": 368644, "start": 3700.96, "end": 3703.12, "text": " This is how the dictionary does its efficient lookups", "tokens": [639, 307, 577, 264, 25890, 775, 1080, 7148, 574, 7528], "temperature": 0.0, "avg_logprob": -0.1376550701302542, "compression_ratio": 1.8385964912280701, "no_speech_prob": 5.453269977806485e-07}, {"id": 1384, "seek": 368644, "start": 3703.12, "end": 3704.44, "text": " and things like that.", "tokens": [293, 721, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.1376550701302542, "compression_ratio": 1.8385964912280701, "no_speech_prob": 5.453269977806485e-07}, {"id": 1385, "seek": 368644, "start": 3704.44, "end": 3705.76, "text": " The value can be anything though.", "tokens": [440, 2158, 393, 312, 1340, 1673, 13], "temperature": 0.0, "avg_logprob": -0.1376550701302542, "compression_ratio": 1.8385964912280701, "no_speech_prob": 5.453269977806485e-07}, {"id": 1386, "seek": 368644, "start": 3705.76, "end": 3708.08, "text": " And so all these things kind of stack together", "tokens": [400, 370, 439, 613, 721, 733, 295, 8630, 1214], "temperature": 0.0, "avg_logprob": -0.1376550701302542, "compression_ratio": 1.8385964912280701, "no_speech_prob": 5.453269977806485e-07}, {"id": 1387, "seek": 368644, "start": 3708.08, "end": 3710.92, "text": " and fit together like building blocks.", "tokens": [293, 3318, 1214, 411, 2390, 8474, 13], "temperature": 0.0, "avg_logprob": -0.1376550701302542, "compression_ratio": 1.8385964912280701, "no_speech_prob": 5.453269977806485e-07}, {"id": 1388, "seek": 368644, "start": 3710.92, "end": 3713.04, "text": " One of the really cool things about this now is", "tokens": [1485, 295, 264, 534, 1627, 721, 466, 341, 586, 307], "temperature": 0.0, "avg_logprob": -0.1376550701302542, "compression_ratio": 1.8385964912280701, "no_speech_prob": 5.453269977806485e-07}, {"id": 1389, "seek": 368644, "start": 3713.04, "end": 3714.36, "text": " that we can start taking this further.", "tokens": [300, 321, 393, 722, 1940, 341, 3052, 13], "temperature": 0.0, "avg_logprob": -0.1376550701302542, "compression_ratio": 1.8385964912280701, "no_speech_prob": 5.453269977806485e-07}, {"id": 1390, "seek": 371436, "start": 3714.36, "end": 3717.4, "text": " We talked about not equal building on top of equal equal.", "tokens": [492, 2825, 466, 406, 2681, 2390, 322, 1192, 295, 2681, 2681, 13], "temperature": 0.0, "avg_logprob": -0.14951638539632162, "compression_ratio": 1.7440273037542662, "no_speech_prob": 1.3630658941110596e-05}, {"id": 1391, "seek": 371436, "start": 3717.4, "end": 3719.6, "text": " In the last lesson, we defined this isOdd function.", "tokens": [682, 264, 1036, 6898, 11, 321, 7642, 341, 307, 46, 24810, 2445, 13], "temperature": 0.0, "avg_logprob": -0.14951638539632162, "compression_ratio": 1.7440273037542662, "no_speech_prob": 1.3630658941110596e-05}, {"id": 1392, "seek": 371436, "start": 3719.6, "end": 3721.0, "text": " We defined it on int.", "tokens": [492, 7642, 309, 322, 560, 13], "temperature": 0.0, "avg_logprob": -0.14951638539632162, "compression_ratio": 1.7440273037542662, "no_speech_prob": 1.3630658941110596e-05}, {"id": 1393, "seek": 371436, "start": 3721.0, "end": 3724.2400000000002, "text": " Well, because this protocol exists, we can actually add it", "tokens": [1042, 11, 570, 341, 10336, 8198, 11, 321, 393, 767, 909, 309], "temperature": 0.0, "avg_logprob": -0.14951638539632162, "compression_ratio": 1.7440273037542662, "no_speech_prob": 1.3630658941110596e-05}, {"id": 1394, "seek": 371436, "start": 3724.2400000000002, "end": 3727.88, "text": " as a method to all things that are binary integers.", "tokens": [382, 257, 3170, 281, 439, 721, 300, 366, 17434, 41674, 13], "temperature": 0.0, "avg_logprob": -0.14951638539632162, "compression_ratio": 1.7440273037542662, "no_speech_prob": 1.3630658941110596e-05}, {"id": 1395, "seek": 371436, "start": 3727.88, "end": 3730.7200000000003, "text": " And so we can say, hey, put this on all binary integers", "tokens": [400, 370, 321, 393, 584, 11, 4177, 11, 829, 341, 322, 439, 17434, 41674], "temperature": 0.0, "avg_logprob": -0.14951638539632162, "compression_ratio": 1.7440273037542662, "no_speech_prob": 1.3630658941110596e-05}, {"id": 1396, "seek": 371436, "start": 3730.7200000000003, "end": 3732.6800000000003, "text": " and give them all an isOdd method.", "tokens": [293, 976, 552, 439, 364, 307, 46, 24810, 3170, 13], "temperature": 0.0, "avg_logprob": -0.14951638539632162, "compression_ratio": 1.7440273037542662, "no_speech_prob": 1.3630658941110596e-05}, {"id": 1397, "seek": 371436, "start": 3732.6800000000003, "end": 3737.32, "text": " And now I don't have to put isOdd on int and int 16 and int 32", "tokens": [400, 586, 286, 500, 380, 362, 281, 829, 307, 46, 24810, 322, 560, 293, 560, 3165, 293, 560, 8858], "temperature": 0.0, "avg_logprob": -0.14951638539632162, "compression_ratio": 1.7440273037542662, "no_speech_prob": 1.3630658941110596e-05}, {"id": 1398, "seek": 371436, "start": 3737.32, "end": 3738.6200000000003, "text": " and the C weird things.", "tokens": [293, 264, 383, 3657, 721, 13], "temperature": 0.0, "avg_logprob": -0.14951638539632162, "compression_ratio": 1.7440273037542662, "no_speech_prob": 1.3630658941110596e-05}, {"id": 1399, "seek": 371436, "start": 3738.6200000000003, "end": 3740.28, "text": " And we could just do it in one place", "tokens": [400, 321, 727, 445, 360, 309, 294, 472, 1081], "temperature": 0.0, "avg_logprob": -0.14951638539632162, "compression_ratio": 1.7440273037542662, "no_speech_prob": 1.3630658941110596e-05}, {"id": 1400, "seek": 371436, "start": 3740.28, "end": 3742.6, "text": " and now everybody gets this method.", "tokens": [293, 586, 2201, 2170, 341, 3170, 13], "temperature": 0.0, "avg_logprob": -0.14951638539632162, "compression_ratio": 1.7440273037542662, "no_speech_prob": 1.3630658941110596e-05}, {"id": 1401, "seek": 371436, "start": 3742.6, "end": 3744.32, "text": " Right? On layers.", "tokens": [1779, 30, 1282, 7914, 13], "temperature": 0.0, "avg_logprob": -0.14951638539632162, "compression_ratio": 1.7440273037542662, "no_speech_prob": 1.3630658941110596e-05}, {"id": 1402, "seek": 374432, "start": 3744.32, "end": 3746.1200000000003, "text": " Right? This is something that's closer to home.", "tokens": [1779, 30, 639, 307, 746, 300, 311, 4966, 281, 1280, 13], "temperature": 0.0, "avg_logprob": -0.13775511582692465, "compression_ratio": 1.678125, "no_speech_prob": 1.5205749150482006e-05}, {"id": 1403, "seek": 374432, "start": 3746.1200000000003, "end": 3748.6000000000004, "text": " Here we can say, hey, I want an inferring from method", "tokens": [1692, 321, 393, 584, 11, 4177, 11, 286, 528, 364, 13596, 2937, 490, 3170], "temperature": 0.0, "avg_logprob": -0.13775511582692465, "compression_ratio": 1.678125, "no_speech_prob": 1.5205749150482006e-05}, {"id": 1404, "seek": 374432, "start": 3748.6000000000004, "end": 3751.96, "text": " that does some learning phase switching magic nonsense.", "tokens": [300, 775, 512, 2539, 5574, 16493, 5585, 14925, 13], "temperature": 0.0, "avg_logprob": -0.13775511582692465, "compression_ratio": 1.678125, "no_speech_prob": 1.5205749150482006e-05}, {"id": 1405, "seek": 374432, "start": 3751.96, "end": 3754.4, "text": " But now because I put this on all layers, well,", "tokens": [583, 586, 570, 286, 829, 341, 322, 439, 7914, 11, 731, 11], "temperature": 0.0, "avg_logprob": -0.13775511582692465, "compression_ratio": 1.678125, "no_speech_prob": 1.5205749150482006e-05}, {"id": 1406, "seek": 374432, "start": 3754.4, "end": 3757.1600000000003, "text": " I can use it on my model because your model's a layer.", "tokens": [286, 393, 764, 309, 322, 452, 2316, 570, 428, 2316, 311, 257, 4583, 13], "temperature": 0.0, "avg_logprob": -0.13775511582692465, "compression_ratio": 1.678125, "no_speech_prob": 1.5205749150482006e-05}, {"id": 1407, "seek": 374432, "start": 3757.1600000000003, "end": 3758.8, "text": " My dense layer, that's a layer.", "tokens": [1222, 18011, 4583, 11, 300, 311, 257, 4583, 13], "temperature": 0.0, "avg_logprob": -0.13775511582692465, "compression_ratio": 1.678125, "no_speech_prob": 1.5205749150482006e-05}, {"id": 1408, "seek": 374432, "start": 3758.8, "end": 3761.7200000000003, "text": " And so this thing allows this one simple idea", "tokens": [400, 370, 341, 551, 4045, 341, 472, 2199, 1558], "temperature": 0.0, "avg_logprob": -0.13775511582692465, "compression_ratio": 1.678125, "no_speech_prob": 1.5205749150482006e-05}, {"id": 1409, "seek": 374432, "start": 3761.7200000000003, "end": 3765.2000000000003, "text": " of defining groups of types and then broadcasting behavior", "tokens": [295, 17827, 3935, 295, 3467, 293, 550, 30024, 5223], "temperature": 0.0, "avg_logprob": -0.13775511582692465, "compression_ratio": 1.678125, "no_speech_prob": 1.5205749150482006e-05}, {"id": 1410, "seek": 374432, "start": 3765.2000000000003, "end": 3767.7200000000003, "text": " and functionality onto all of them at once is really powerful.", "tokens": [293, 14980, 3911, 439, 295, 552, 412, 1564, 307, 534, 4005, 13], "temperature": 0.0, "avg_logprob": -0.13775511582692465, "compression_ratio": 1.678125, "no_speech_prob": 1.5205749150482006e-05}, {"id": 1411, "seek": 374432, "start": 3767.7200000000003, "end": 3770.96, "text": " Yeah. I mean, it's like Python's monkey patching,", "tokens": [865, 13, 286, 914, 11, 309, 311, 411, 15329, 311, 17847, 9972, 278, 11], "temperature": 0.0, "avg_logprob": -0.13775511582692465, "compression_ratio": 1.678125, "no_speech_prob": 1.5205749150482006e-05}, {"id": 1412, "seek": 374432, "start": 3770.96, "end": 3772.4, "text": " which we use all the time.", "tokens": [597, 321, 764, 439, 264, 565, 13], "temperature": 0.0, "avg_logprob": -0.13775511582692465, "compression_ratio": 1.678125, "no_speech_prob": 1.5205749150482006e-05}, {"id": 1413, "seek": 377240, "start": 3772.4, "end": 3775.36, "text": " But A, it's not this kind of hacky thing", "tokens": [583, 316, 11, 309, 311, 406, 341, 733, 295, 10339, 88, 551], "temperature": 0.0, "avg_logprob": -0.12591481544602084, "compression_ratio": 1.7110389610389611, "no_speech_prob": 1.933268549692002e-06}, {"id": 1414, "seek": 377240, "start": 3775.36, "end": 3777.44, "text": " with weird undefined behavior sometime.", "tokens": [365, 3657, 674, 5666, 2001, 5223, 15053, 13], "temperature": 0.0, "avg_logprob": -0.12591481544602084, "compression_ratio": 1.7110389610389611, "no_speech_prob": 1.933268549692002e-06}, {"id": 1415, "seek": 377240, "start": 3777.44, "end": 3780.42, "text": " And B, we don't have to monkey patch lots and lots", "tokens": [400, 363, 11, 321, 500, 380, 362, 281, 17847, 9972, 3195, 293, 3195], "temperature": 0.0, "avg_logprob": -0.12591481544602084, "compression_ratio": 1.7110389610389611, "no_speech_prob": 1.933268549692002e-06}, {"id": 1416, "seek": 377240, "start": 3780.42, "end": 3783.12, "text": " of different places to add functionality to lots of things.", "tokens": [295, 819, 3190, 281, 909, 14980, 281, 3195, 295, 721, 13], "temperature": 0.0, "avg_logprob": -0.12591481544602084, "compression_ratio": 1.7110389610389611, "no_speech_prob": 1.933268549692002e-06}, {"id": 1417, "seek": 377240, "start": 3783.12, "end": 3787.12, "text": " We just put it in one place and the functionality gets sucked", "tokens": [492, 445, 829, 309, 294, 472, 1081, 293, 264, 14980, 2170, 26503], "temperature": 0.0, "avg_logprob": -0.12591481544602084, "compression_ratio": 1.7110389610389611, "no_speech_prob": 1.933268549692002e-06}, {"id": 1418, "seek": 377240, "start": 3787.12, "end": 3788.52, "text": " in by everything that can use it.", "tokens": [294, 538, 1203, 300, 393, 764, 309, 13], "temperature": 0.0, "avg_logprob": -0.12591481544602084, "compression_ratio": 1.7110389610389611, "no_speech_prob": 1.933268549692002e-06}, {"id": 1419, "seek": 377240, "start": 3788.52, "end": 3790.92, "text": " Yeah. And remember, extensions are really cool because they work,", "tokens": [865, 13, 400, 1604, 11, 25129, 366, 534, 1627, 570, 436, 589, 11], "temperature": 0.0, "avg_logprob": -0.12591481544602084, "compression_ratio": 1.7110389610389611, "no_speech_prob": 1.933268549692002e-06}, {"id": 1420, "seek": 377240, "start": 3790.92, "end": 3792.64, "text": " even if you didn't define the type.", "tokens": [754, 498, 291, 994, 380, 6964, 264, 2010, 13], "temperature": 0.0, "avg_logprob": -0.12591481544602084, "compression_ratio": 1.7110389610389611, "no_speech_prob": 1.933268549692002e-06}, {"id": 1421, "seek": 377240, "start": 3792.64, "end": 3797.08, "text": " And so what you can literally do is you can pull in some C library,", "tokens": [400, 370, 437, 291, 393, 3736, 360, 307, 291, 393, 2235, 294, 512, 383, 6405, 11], "temperature": 0.0, "avg_logprob": -0.12591481544602084, "compression_ratio": 1.7110389610389611, "no_speech_prob": 1.933268549692002e-06}, {"id": 1422, "seek": 377240, "start": 3797.08, "end": 3802.36, "text": " not that we love C, but some C library and add things to its structs.", "tokens": [406, 300, 321, 959, 383, 11, 457, 512, 383, 6405, 293, 909, 721, 281, 1080, 6594, 82, 13], "temperature": 0.0, "avg_logprob": -0.12591481544602084, "compression_ratio": 1.7110389610389611, "no_speech_prob": 1.933268549692002e-06}, {"id": 1423, "seek": 380236, "start": 3802.36, "end": 3804.4, "text": " I mean, this is.", "tokens": [286, 914, 11, 341, 307, 13], "temperature": 0.0, "avg_logprob": -0.1595056915283203, "compression_ratio": 1.75625, "no_speech_prob": 7.64630294725066e-06}, {"id": 1424, "seek": 380236, "start": 3804.4, "end": 3806.96, "text": " Or have things automatically added to those structs", "tokens": [1610, 362, 721, 6772, 3869, 281, 729, 6594, 82], "temperature": 0.0, "avg_logprob": -0.1595056915283203, "compression_ratio": 1.75625, "no_speech_prob": 7.64630294725066e-06}, {"id": 1425, "seek": 380236, "start": 3806.96, "end": 3809.2000000000003, "text": " because it already supports those operations.", "tokens": [570, 309, 1217, 9346, 729, 7705, 13], "temperature": 0.0, "avg_logprob": -0.1595056915283203, "compression_ratio": 1.75625, "no_speech_prob": 7.64630294725066e-06}, {"id": 1426, "seek": 380236, "start": 3809.2000000000003, "end": 3812.2400000000002, "text": " Yeah. So like all this stuff composes together in a really nice way,", "tokens": [865, 13, 407, 411, 439, 341, 1507, 715, 4201, 1214, 294, 257, 534, 1481, 636, 11], "temperature": 0.0, "avg_logprob": -0.1595056915283203, "compression_ratio": 1.75625, "no_speech_prob": 7.64630294725066e-06}, {"id": 1427, "seek": 380236, "start": 3812.2400000000002, "end": 3814.4, "text": " which allows you to do very powerful and very simple", "tokens": [597, 4045, 291, 281, 360, 588, 4005, 293, 588, 2199], "temperature": 0.0, "avg_logprob": -0.1595056915283203, "compression_ratio": 1.75625, "no_speech_prob": 7.64630294725066e-06}, {"id": 1428, "seek": 380236, "start": 3814.4, "end": 3815.84, "text": " and beautiful things.", "tokens": [293, 2238, 721, 13], "temperature": 0.0, "avg_logprob": -0.1595056915283203, "compression_ratio": 1.75625, "no_speech_prob": 7.64630294725066e-06}, {"id": 1429, "seek": 380236, "start": 3815.84, "end": 3820.6, "text": " So mixins show up and you can control where they go.", "tokens": [407, 2890, 1292, 855, 493, 293, 291, 393, 1969, 689, 436, 352, 13], "temperature": 0.0, "avg_logprob": -0.1595056915283203, "compression_ratio": 1.75625, "no_speech_prob": 7.64630294725066e-06}, {"id": 1430, "seek": 380236, "start": 3820.6, "end": 3821.9, "text": " And so here's an example.", "tokens": [400, 370, 510, 311, 364, 1365, 13], "temperature": 0.0, "avg_logprob": -0.1595056915283203, "compression_ratio": 1.75625, "no_speech_prob": 7.64630294725066e-06}, {"id": 1431, "seek": 380236, "start": 3821.9, "end": 3823.28, "text": " This is something that Jeremy wrote.", "tokens": [639, 307, 746, 300, 17809, 4114, 13], "temperature": 0.0, "avg_logprob": -0.1595056915283203, "compression_ratio": 1.75625, "no_speech_prob": 7.64630294725066e-06}, {"id": 1432, "seek": 380236, "start": 3823.28, "end": 3825.84, "text": " And so he defined his own protocol countable.", "tokens": [400, 370, 415, 7642, 702, 1065, 10336, 1207, 712, 13], "temperature": 0.0, "avg_logprob": -0.1595056915283203, "compression_ratio": 1.75625, "no_speech_prob": 7.64630294725066e-06}, {"id": 1433, "seek": 380236, "start": 3825.84, "end": 3827.48, "text": " And he says, things are countable", "tokens": [400, 415, 1619, 11, 721, 366, 1207, 712], "temperature": 0.0, "avg_logprob": -0.1595056915283203, "compression_ratio": 1.75625, "no_speech_prob": 7.64630294725066e-06}, {"id": 1434, "seek": 380236, "start": 3827.48, "end": 3829.84, "text": " if they have a variable named count.", "tokens": [498, 436, 362, 257, 7006, 4926, 1207, 13], "temperature": 0.0, "avg_logprob": -0.1595056915283203, "compression_ratio": 1.75625, "no_speech_prob": 7.64630294725066e-06}, {"id": 1435, "seek": 380236, "start": 3829.84, "end": 3832.28, "text": " And the only thing I care about for countable things is I can read it.", "tokens": [400, 264, 787, 551, 286, 1127, 466, 337, 1207, 712, 721, 307, 286, 393, 1401, 309, 13], "temperature": 0.0, "avg_logprob": -0.1595056915283203, "compression_ratio": 1.75625, "no_speech_prob": 7.64630294725066e-06}, {"id": 1436, "seek": 383228, "start": 3832.28, "end": 3833.5800000000004, "text": " I don't have to write it.", "tokens": [286, 500, 380, 362, 281, 2464, 309, 13], "temperature": 0.0, "avg_logprob": -0.13792535483119, "compression_ratio": 1.8311258278145695, "no_speech_prob": 5.33771390109905e-06}, {"id": 1437, "seek": 383228, "start": 3833.5800000000004, "end": 3834.88, "text": " That's what the get means.", "tokens": [663, 311, 437, 264, 483, 1355, 13], "temperature": 0.0, "avg_logprob": -0.13792535483119, "compression_ratio": 1.8311258278145695, "no_speech_prob": 5.33771390109905e-06}, {"id": 1438, "seek": 383228, "start": 3834.88, "end": 3836.84, "text": " And so he says, array is countable.", "tokens": [400, 370, 415, 1619, 11, 10225, 307, 1207, 712, 13], "temperature": 0.0, "avg_logprob": -0.13792535483119, "compression_ratio": 1.8311258278145695, "no_speech_prob": 5.33771390109905e-06}, {"id": 1439, "seek": 383228, "start": 3836.84, "end": 3840.92, "text": " His open CV mat thingy is countable.", "tokens": [2812, 1269, 22995, 3803, 551, 88, 307, 1207, 712, 13], "temperature": 0.0, "avg_logprob": -0.13792535483119, "compression_ratio": 1.8311258278145695, "no_speech_prob": 5.33771390109905e-06}, {"id": 1440, "seek": 383228, "start": 3840.92, "end": 3842.2200000000003, "text": " Like all these.", "tokens": [1743, 439, 613, 13], "temperature": 0.0, "avg_logprob": -0.13792535483119, "compression_ratio": 1.8311258278145695, "no_speech_prob": 5.33771390109905e-06}, {"id": 1441, "seek": 383228, "start": 3842.2200000000003, "end": 3843.52, "text": " There's a number of pixels in it.", "tokens": [821, 311, 257, 1230, 295, 18668, 294, 309, 13], "temperature": 0.0, "avg_logprob": -0.13792535483119, "compression_ratio": 1.8311258278145695, "no_speech_prob": 5.33771390109905e-06}, {"id": 1442, "seek": 383228, "start": 3843.52, "end": 3844.82, "text": " Yeah. Yeah.", "tokens": [865, 13, 865, 13], "temperature": 0.0, "avg_logprob": -0.13792535483119, "compression_ratio": 1.8311258278145695, "no_speech_prob": 5.33771390109905e-06}, {"id": 1443, "seek": 383228, "start": 3844.82, "end": 3846.1200000000003, "text": " All these things are countable.", "tokens": [1057, 613, 721, 366, 1207, 712, 13], "temperature": 0.0, "avg_logprob": -0.13792535483119, "compression_ratio": 1.8311258278145695, "no_speech_prob": 5.33771390109905e-06}, {"id": 1444, "seek": 383228, "start": 3846.1200000000003, "end": 3847.42, "text": " And then Jeremy says, hey, we'll take any sequence.", "tokens": [400, 550, 17809, 1619, 11, 4177, 11, 321, 603, 747, 604, 8310, 13], "temperature": 0.0, "avg_logprob": -0.13792535483119, "compression_ratio": 1.8311258278145695, "no_speech_prob": 5.33771390109905e-06}, {"id": 1445, "seek": 383228, "start": 3847.42, "end": 3850.84, "text": " Let's add a method or a property called total count", "tokens": [961, 311, 909, 257, 3170, 420, 257, 4707, 1219, 3217, 1207], "temperature": 0.0, "avg_logprob": -0.13792535483119, "compression_ratio": 1.8311258278145695, "no_speech_prob": 5.33771390109905e-06}, {"id": 1446, "seek": 383228, "start": 3850.84, "end": 3852.36, "text": " to anything that's a sequence.", "tokens": [281, 1340, 300, 311, 257, 8310, 13], "temperature": 0.0, "avg_logprob": -0.13792535483119, "compression_ratio": 1.8311258278145695, "no_speech_prob": 5.33771390109905e-06}, {"id": 1447, "seek": 383228, "start": 3852.36, "end": 3854.5600000000004, "text": " So a sequence is the same as Python's iterables,", "tokens": [407, 257, 8310, 307, 264, 912, 382, 15329, 311, 17138, 2965, 11], "temperature": 0.0, "avg_logprob": -0.13792535483119, "compression_ratio": 1.8311258278145695, "no_speech_prob": 5.33771390109905e-06}, {"id": 1448, "seek": 383228, "start": 3854.5600000000004, "end": 3855.84, "text": " what I think you can iterate through.", "tokens": [437, 286, 519, 291, 393, 44497, 807, 13], "temperature": 0.0, "avg_logprob": -0.13792535483119, "compression_ratio": 1.8311258278145695, "no_speech_prob": 5.33771390109905e-06}, {"id": 1449, "seek": 383228, "start": 3855.84, "end": 3857.1200000000003, "text": " Exactly.", "tokens": [7587, 13], "temperature": 0.0, "avg_logprob": -0.13792535483119, "compression_ratio": 1.8311258278145695, "no_speech_prob": 5.33771390109905e-06}, {"id": 1450, "seek": 383228, "start": 3857.1200000000003, "end": 3860.32, "text": " And so this is things like dictionaries and arrays and ranges", "tokens": [400, 370, 341, 307, 721, 411, 22352, 4889, 293, 41011, 293, 22526], "temperature": 0.0, "avg_logprob": -0.13792535483119, "compression_ratio": 1.8311258278145695, "no_speech_prob": 5.33771390109905e-06}, {"id": 1451, "seek": 383228, "start": 3860.32, "end": 3861.6400000000003, "text": " and like all these things are sequences.", "tokens": [293, 411, 439, 613, 721, 366, 22978, 13], "temperature": 0.0, "avg_logprob": -0.13792535483119, "compression_ratio": 1.8311258278145695, "no_speech_prob": 5.33771390109905e-06}, {"id": 1452, "seek": 386164, "start": 3861.64, "end": 3865.04, "text": " And it says, so long as the element is countable,", "tokens": [400, 309, 1619, 11, 370, 938, 382, 264, 4478, 307, 1207, 712, 11], "temperature": 0.0, "avg_logprob": -0.14158357119729334, "compression_ratio": 1.9118773946360152, "no_speech_prob": 1.497008815931622e-05}, {"id": 1453, "seek": 386164, "start": 3865.04, "end": 3867.0, "text": " so I have an array of countable things,", "tokens": [370, 286, 362, 364, 10225, 295, 1207, 712, 721, 11], "temperature": 0.0, "avg_logprob": -0.14158357119729334, "compression_ratio": 1.9118773946360152, "no_speech_prob": 1.497008815931622e-05}, {"id": 1454, "seek": 386164, "start": 3867.0, "end": 3869.48, "text": " then I can get a total count method or a property.", "tokens": [550, 286, 393, 483, 257, 3217, 1207, 3170, 420, 257, 4707, 13], "temperature": 0.0, "avg_logprob": -0.14158357119729334, "compression_ratio": 1.9118773946360152, "no_speech_prob": 1.497008815931622e-05}, {"id": 1455, "seek": 386164, "start": 3869.48, "end": 3871.56, "text": " Right? And the way this is implemented is it just says, hey,", "tokens": [1779, 30, 400, 264, 636, 341, 307, 12270, 307, 309, 445, 1619, 11, 4177, 11], "temperature": 0.0, "avg_logprob": -0.14158357119729334, "compression_ratio": 1.9118773946360152, "no_speech_prob": 1.497008815931622e-05}, {"id": 1456, "seek": 386164, "start": 3871.56, "end": 3876.16, "text": " map over myself, get the count, add all the counts up together,", "tokens": [4471, 670, 2059, 11, 483, 264, 1207, 11, 909, 439, 264, 14893, 493, 1214, 11], "temperature": 0.0, "avg_logprob": -0.14158357119729334, "compression_ratio": 1.9118773946360152, "no_speech_prob": 1.497008815931622e-05}, {"id": 1457, "seek": 386164, "start": 3876.16, "end": 3879.8799999999997, "text": " and then I have a total count of all the things in my array.", "tokens": [293, 550, 286, 362, 257, 3217, 1207, 295, 439, 264, 721, 294, 452, 10225, 13], "temperature": 0.0, "avg_logprob": -0.14158357119729334, "compression_ratio": 1.9118773946360152, "no_speech_prob": 1.497008815931622e-05}, {"id": 1458, "seek": 386164, "start": 3879.8799999999997, "end": 3884.16, "text": " And now if I have an array of arrays, an array of mats,", "tokens": [400, 586, 498, 286, 362, 364, 10225, 295, 41011, 11, 364, 10225, 295, 43366, 11], "temperature": 0.0, "avg_logprob": -0.14158357119729334, "compression_ratio": 1.9118773946360152, "no_speech_prob": 1.497008815931622e-05}, {"id": 1459, "seek": 386164, "start": 3884.16, "end": 3888.96, "text": " lazy mapped collection sequence thingy of mats, whatever it is,", "tokens": [14847, 33318, 5765, 8310, 551, 88, 295, 43366, 11, 2035, 309, 307, 11], "temperature": 0.0, "avg_logprob": -0.14158357119729334, "compression_ratio": 1.9118773946360152, "no_speech_prob": 1.497008815931622e-05}, {"id": 1460, "seek": 386164, "start": 3888.96, "end": 3891.4, "text": " now I can just ask for its count or its total count.", "tokens": [586, 286, 393, 445, 1029, 337, 1080, 1207, 420, 1080, 3217, 1207, 13], "temperature": 0.0, "avg_logprob": -0.14158357119729334, "compression_ratio": 1.9118773946360152, "no_speech_prob": 1.497008815931622e-05}, {"id": 1461, "seek": 389140, "start": 3891.4, "end": 3896.44, "text": " And Chris, so this functionality you're describing is basically the", "tokens": [400, 6688, 11, 370, 341, 14980, 291, 434, 16141, 307, 1936, 264], "temperature": 0.0, "avg_logprob": -0.20608734188223243, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.00010553866013651714}, {"id": 1462, "seek": 389140, "start": 3896.44, "end": 3899.08, "text": " same as what Haskell calls type classes.", "tokens": [912, 382, 437, 8646, 43723, 5498, 2010, 5359, 13], "temperature": 0.0, "avg_logprob": -0.20608734188223243, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.00010553866013651714}, {"id": 1463, "seek": 389140, "start": 3899.08, "end": 3899.4, "text": " Yes.", "tokens": [1079, 13], "temperature": 0.0, "avg_logprob": -0.20608734188223243, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.00010553866013651714}, {"id": 1464, "seek": 389140, "start": 3899.4, "end": 3900.2000000000003, "text": " Is that right?", "tokens": [1119, 300, 558, 30], "temperature": 0.0, "avg_logprob": -0.20608734188223243, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.00010553866013651714}, {"id": 1465, "seek": 389140, "start": 3900.2000000000003, "end": 3901.6800000000003, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.20608734188223243, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.00010553866013651714}, {"id": 1466, "seek": 389140, "start": 3901.6800000000003, "end": 3905.04, "text": " So is this kind of like stolen from Haskell?", "tokens": [407, 307, 341, 733, 295, 411, 15900, 490, 8646, 43723, 30], "temperature": 0.0, "avg_logprob": -0.20608734188223243, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.00010553866013651714}, {"id": 1467, "seek": 389140, "start": 3905.04, "end": 3905.84, "text": " It's borrowed.", "tokens": [467, 311, 26805, 13], "temperature": 0.0, "avg_logprob": -0.20608734188223243, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.00010553866013651714}, {"id": 1468, "seek": 389140, "start": 3905.84, "end": 3908.12, "text": " I mean, so the interesting thing for me here is that-", "tokens": [286, 914, 11, 370, 264, 1880, 551, 337, 385, 510, 307, 300, 12], "temperature": 0.0, "avg_logprob": -0.20608734188223243, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.00010553866013651714}, {"id": 1469, "seek": 389140, "start": 3908.12, "end": 3909.28, "text": " We let them play with it too.", "tokens": [492, 718, 552, 862, 365, 309, 886, 13], "temperature": 0.0, "avg_logprob": -0.20608734188223243, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.00010553866013651714}, {"id": 1470, "seek": 389140, "start": 3909.28, "end": 3912.2000000000003, "text": " Well, the interesting thing, the reason I ask is because like I've", "tokens": [1042, 11, 264, 1880, 551, 11, 264, 1778, 286, 1029, 307, 570, 411, 286, 600], "temperature": 0.0, "avg_logprob": -0.20608734188223243, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.00010553866013651714}, {"id": 1471, "seek": 389140, "start": 3912.2000000000003, "end": 3916.6, "text": " tried to use Haskell before many times and have always failed.", "tokens": [3031, 281, 764, 8646, 43723, 949, 867, 1413, 293, 362, 1009, 7612, 13], "temperature": 0.0, "avg_logprob": -0.20608734188223243, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.00010553866013651714}, {"id": 1472, "seek": 389140, "start": 3916.6, "end": 3920.92, "text": " I'm clearly not somebody who's smart enough to use Haskell.", "tokens": [286, 478, 4448, 406, 2618, 567, 311, 4069, 1547, 281, 764, 8646, 43723, 13], "temperature": 0.0, "avg_logprob": -0.20608734188223243, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.00010553866013651714}, {"id": 1473, "seek": 392092, "start": 3920.92, "end": 3923.88, "text": " Yet I wrote the code that's on the screen right now,", "tokens": [10890, 286, 4114, 264, 3089, 300, 311, 322, 264, 2568, 558, 586, 11], "temperature": 0.0, "avg_logprob": -0.11177154268537248, "compression_ratio": 1.7123745819397993, "no_speech_prob": 1.3630299690703396e-05}, {"id": 1474, "seek": 392092, "start": 3923.88, "end": 3928.2400000000002, "text": " like a couple of days ago, and I didn't spend a moment even thinking", "tokens": [411, 257, 1916, 295, 1708, 2057, 11, 293, 286, 994, 380, 3496, 257, 1623, 754, 1953], "temperature": 0.0, "avg_logprob": -0.11177154268537248, "compression_ratio": 1.7123745819397993, "no_speech_prob": 1.3630299690703396e-05}, {"id": 1475, "seek": 392092, "start": 3928.2400000000002, "end": 3929.7200000000003, "text": " about the fact I was writing the code.", "tokens": [466, 264, 1186, 286, 390, 3579, 264, 3089, 13], "temperature": 0.0, "avg_logprob": -0.11177154268537248, "compression_ratio": 1.7123745819397993, "no_speech_prob": 1.3630299690703396e-05}, {"id": 1476, "seek": 392092, "start": 3929.7200000000003, "end": 3932.2000000000003, "text": " It was only like the next day that I looked back at this code,", "tokens": [467, 390, 787, 411, 264, 958, 786, 300, 286, 2956, 646, 412, 341, 3089, 11], "temperature": 0.0, "avg_logprob": -0.11177154268537248, "compression_ratio": 1.7123745819397993, "no_speech_prob": 1.3630299690703396e-05}, {"id": 1477, "seek": 392092, "start": 3932.2000000000003, "end": 3935.08, "text": " and I thought like, wow, I just did something", "tokens": [293, 286, 1194, 411, 11, 6076, 11, 286, 445, 630, 746], "temperature": 0.0, "avg_logprob": -0.11177154268537248, "compression_ratio": 1.7123745819397993, "no_speech_prob": 1.3630299690703396e-05}, {"id": 1478, "seek": 392092, "start": 3935.08, "end": 3938.6800000000003, "text": " which no other language I've used both could do,", "tokens": [597, 572, 661, 2856, 286, 600, 1143, 1293, 727, 360, 11], "temperature": 0.0, "avg_logprob": -0.11177154268537248, "compression_ratio": 1.7123745819397993, "no_speech_prob": 1.3630299690703396e-05}, {"id": 1479, "seek": 392092, "start": 3938.6800000000003, "end": 3940.12, "text": " and I was smart enough to do it.", "tokens": [293, 286, 390, 4069, 1547, 281, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.11177154268537248, "compression_ratio": 1.7123745819397993, "no_speech_prob": 1.3630299690703396e-05}, {"id": 1480, "seek": 392092, "start": 3940.12, "end": 3942.6, "text": " Like it kind of makes this what I think of as", "tokens": [1743, 309, 733, 295, 1669, 341, 437, 286, 519, 295, 382], "temperature": 0.0, "avg_logprob": -0.11177154268537248, "compression_ratio": 1.7123745819397993, "no_speech_prob": 1.3630299690703396e-05}, {"id": 1481, "seek": 392092, "start": 3942.6, "end": 3947.28, "text": " like super genius functionality available to normal people.", "tokens": [411, 1687, 14017, 14980, 2435, 281, 2710, 561, 13], "temperature": 0.0, "avg_logprob": -0.11177154268537248, "compression_ratio": 1.7123745819397993, "no_speech_prob": 1.3630299690703396e-05}, {"id": 1482, "seek": 392092, "start": 3947.28, "end": 3949.44, "text": " Yeah, and so back in the very, very beginning of this,", "tokens": [865, 11, 293, 370, 646, 294, 264, 588, 11, 588, 2863, 295, 341, 11], "temperature": 0.0, "avg_logprob": -0.11177154268537248, "compression_ratio": 1.7123745819397993, "no_speech_prob": 1.3630299690703396e-05}, {"id": 1483, "seek": 394944, "start": 3949.44, "end": 3952.2000000000003, "text": " we talked about Swift's goal is to be able to take good ideas", "tokens": [321, 2825, 466, 25539, 311, 3387, 307, 281, 312, 1075, 281, 747, 665, 3487], "temperature": 0.0, "avg_logprob": -0.10784197544706041, "compression_ratio": 1.7713310580204777, "no_speech_prob": 3.4460740607755724e-06}, {"id": 1484, "seek": 394944, "start": 3952.2000000000003, "end": 3954.68, "text": " wherever they are and assemble them in a tasteful way,", "tokens": [8660, 436, 366, 293, 22364, 552, 294, 257, 3939, 906, 636, 11], "temperature": 0.0, "avg_logprob": -0.10784197544706041, "compression_ratio": 1.7713310580204777, "no_speech_prob": 3.4460740607755724e-06}, {"id": 1485, "seek": 394944, "start": 3954.68, "end": 3956.7200000000003, "text": " and then be not weird.", "tokens": [293, 550, 312, 406, 3657, 13], "temperature": 0.0, "avg_logprob": -0.10784197544706041, "compression_ratio": 1.7713310580204777, "no_speech_prob": 3.4460740607755724e-06}, {"id": 1486, "seek": 394944, "start": 3956.7200000000003, "end": 3960.2400000000002, "text": " Like being not weird is a pretty hard but important goal.", "tokens": [1743, 885, 406, 3657, 307, 257, 1238, 1152, 457, 1021, 3387, 13], "temperature": 0.0, "avg_logprob": -0.10784197544706041, "compression_ratio": 1.7713310580204777, "no_speech_prob": 3.4460740607755724e-06}, {"id": 1487, "seek": 394944, "start": 3960.2400000000002, "end": 3964.0, "text": " So the way I look at programming languages is that programming", "tokens": [407, 264, 636, 286, 574, 412, 9410, 8650, 307, 300, 9410], "temperature": 0.0, "avg_logprob": -0.10784197544706041, "compression_ratio": 1.7713310580204777, "no_speech_prob": 3.4460740607755724e-06}, {"id": 1488, "seek": 394944, "start": 3964.0, "end": 3966.84, "text": " languages in the world have these gems in them,", "tokens": [8650, 294, 264, 1002, 362, 613, 29296, 294, 552, 11], "temperature": 0.0, "avg_logprob": -0.10784197544706041, "compression_ratio": 1.7713310580204777, "no_speech_prob": 3.4460740607755724e-06}, {"id": 1489, "seek": 394944, "start": 3966.84, "end": 3968.92, "text": " and Haskell has a lot of gems, incidentally.", "tokens": [293, 8646, 43723, 575, 257, 688, 295, 29296, 11, 9348, 379, 13], "temperature": 0.0, "avg_logprob": -0.10784197544706041, "compression_ratio": 1.7713310580204777, "no_speech_prob": 3.4460740607755724e-06}, {"id": 1490, "seek": 394944, "start": 3968.92, "end": 3970.32, "text": " It's a really cool functional language.", "tokens": [467, 311, 257, 534, 1627, 11745, 2856, 13], "temperature": 0.0, "avg_logprob": -0.10784197544706041, "compression_ratio": 1.7713310580204777, "no_speech_prob": 3.4460740607755724e-06}, {"id": 1491, "seek": 394944, "start": 3970.32, "end": 3971.48, "text": " It's very academic.", "tokens": [467, 311, 588, 7778, 13], "temperature": 0.0, "avg_logprob": -0.10784197544706041, "compression_ratio": 1.7713310580204777, "no_speech_prob": 3.4460740607755724e-06}, {"id": 1492, "seek": 394944, "start": 3971.48, "end": 3974.28, "text": " It's super powerful in lots of ways, but then it gets buried", "tokens": [467, 311, 1687, 4005, 294, 3195, 295, 2098, 11, 457, 550, 309, 2170, 14101], "temperature": 0.0, "avg_logprob": -0.10784197544706041, "compression_ratio": 1.7713310580204777, "no_speech_prob": 3.4460740607755724e-06}, {"id": 1493, "seek": 394944, "start": 3974.28, "end": 3977.56, "text": " in weird syntax, and it's purely functional.", "tokens": [294, 3657, 28431, 11, 293, 309, 311, 17491, 11745, 13], "temperature": 0.0, "avg_logprob": -0.10784197544706041, "compression_ratio": 1.7713310580204777, "no_speech_prob": 3.4460740607755724e-06}, {"id": 1494, "seek": 397756, "start": 3977.56, "end": 3980.04, "text": " You have to be, you know, it has a very opinionated worldview", "tokens": [509, 362, 281, 312, 11, 291, 458, 11, 309, 575, 257, 588, 4800, 770, 41141], "temperature": 0.0, "avg_logprob": -0.16747857332229615, "compression_ratio": 1.7627627627627627, "no_speech_prob": 6.240005859581288e-06}, {"id": 1495, "seek": 397756, "start": 3980.04, "end": 3983.16, "text": " of how you're supposed to write code, and so it appeals to a group", "tokens": [295, 577, 291, 434, 3442, 281, 2464, 3089, 11, 293, 370, 309, 32603, 281, 257, 1594], "temperature": 0.0, "avg_logprob": -0.16747857332229615, "compression_ratio": 1.7627627627627627, "no_speech_prob": 6.240005859581288e-06}, {"id": 1496, "seek": 397756, "start": 3983.16, "end": 3986.64, "text": " of people, which is great, but then it gets ignored by the masses,", "tokens": [295, 561, 11, 597, 307, 869, 11, 457, 550, 309, 2170, 19735, 538, 264, 23935, 11], "temperature": 0.0, "avg_logprob": -0.16747857332229615, "compression_ratio": 1.7627627627627627, "no_speech_prob": 6.240005859581288e-06}, {"id": 1497, "seek": 397756, "start": 3986.64, "end": 3988.84, "text": " and to me it's really sad that the great technology", "tokens": [293, 281, 385, 309, 311, 534, 4227, 300, 264, 869, 2899], "temperature": 0.0, "avg_logprob": -0.16747857332229615, "compression_ratio": 1.7627627627627627, "no_speech_prob": 6.240005859581288e-06}, {"id": 1498, "seek": 397756, "start": 3988.84, "end": 3991.84, "text": " in programming languages that's been invented for decades,", "tokens": [294, 9410, 8650, 300, 311, 668, 14479, 337, 7878, 11], "temperature": 0.0, "avg_logprob": -0.16747857332229615, "compression_ratio": 1.7627627627627627, "no_speech_prob": 6.240005859581288e-06}, {"id": 1499, "seek": 397756, "start": 3991.84, "end": 3994.64, "text": " and decades, and decades gets forgotten just because it happened", "tokens": [293, 7878, 11, 293, 7878, 2170, 11832, 445, 570, 309, 2011], "temperature": 0.0, "avg_logprob": -0.16747857332229615, "compression_ratio": 1.7627627627627627, "no_speech_prob": 6.240005859581288e-06}, {"id": 1500, "seek": 397756, "start": 3994.64, "end": 3996.0, "text": " to be put in the wrong place.", "tokens": [281, 312, 829, 294, 264, 2085, 1081, 13], "temperature": 0.0, "avg_logprob": -0.16747857332229615, "compression_ratio": 1.7627627627627627, "no_speech_prob": 6.240005859581288e-06}, {"id": 1501, "seek": 397756, "start": 3996.0, "end": 3999.0, "text": " Yeah, I mean, it's not just that, but see from the whole way things", "tokens": [865, 11, 286, 914, 11, 309, 311, 406, 445, 300, 11, 457, 536, 490, 264, 1379, 636, 721], "temperature": 0.0, "avg_logprob": -0.16747857332229615, "compression_ratio": 1.7627627627627627, "no_speech_prob": 6.240005859581288e-06}, {"id": 1502, "seek": 397756, "start": 3999.0, "end": 4003.12, "text": " are described, you're all about monoids, and monads, and whatever.", "tokens": [366, 7619, 11, 291, 434, 439, 466, 35624, 3742, 11, 293, 1108, 5834, 11, 293, 2035, 13], "temperature": 0.0, "avg_logprob": -0.16747857332229615, "compression_ratio": 1.7627627627627627, "no_speech_prob": 6.240005859581288e-06}, {"id": 1503, "seek": 397756, "start": 4003.12, "end": 4005.52, "text": " Existentials, and things like that.", "tokens": [2111, 468, 2549, 82, 11, 293, 721, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.16747857332229615, "compression_ratio": 1.7627627627627627, "no_speech_prob": 6.240005859581288e-06}, {"id": 1504, "seek": 397756, "start": 4005.52, "end": 4006.7999999999997, "text": " Yeah, exactly.", "tokens": [865, 11, 2293, 13], "temperature": 0.0, "avg_logprob": -0.16747857332229615, "compression_ratio": 1.7627627627627627, "no_speech_prob": 6.240005859581288e-06}, {"id": 1505, "seek": 400680, "start": 4006.8, "end": 4008.52, "text": " So a lot of what Swift is trying to do is it's trying", "tokens": [407, 257, 688, 295, 437, 25539, 307, 1382, 281, 360, 307, 309, 311, 1382], "temperature": 0.0, "avg_logprob": -0.13540599529559796, "compression_ratio": 1.6914893617021276, "no_speech_prob": 3.16816549457144e-05}, {"id": 1506, "seek": 400680, "start": 4008.52, "end": 4010.6800000000003, "text": " to take those ideas, re-explain them in a way", "tokens": [281, 747, 729, 3487, 11, 319, 12, 23040, 491, 552, 294, 257, 636], "temperature": 0.0, "avg_logprob": -0.13540599529559796, "compression_ratio": 1.6914893617021276, "no_speech_prob": 3.16816549457144e-05}, {"id": 1507, "seek": 400680, "start": 4010.6800000000003, "end": 4012.96, "text": " that actually makes sense, stack them up in a very nice,", "tokens": [300, 767, 1669, 2020, 11, 8630, 552, 493, 294, 257, 588, 1481, 11], "temperature": 0.0, "avg_logprob": -0.13540599529559796, "compression_ratio": 1.6914893617021276, "no_speech_prob": 3.16816549457144e-05}, {"id": 1508, "seek": 400680, "start": 4012.96, "end": 4017.1200000000003, "text": " consistent way, and design it, right?", "tokens": [8398, 636, 11, 293, 1715, 309, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.13540599529559796, "compression_ratio": 1.6914893617021276, "no_speech_prob": 3.16816549457144e-05}, {"id": 1509, "seek": 400680, "start": 4017.1200000000003, "end": 4019.84, "text": " And so a lot of this was pull these things together,", "tokens": [400, 370, 257, 688, 295, 341, 390, 2235, 613, 721, 1214, 11], "temperature": 0.0, "avg_logprob": -0.13540599529559796, "compression_ratio": 1.6914893617021276, "no_speech_prob": 3.16816549457144e-05}, {"id": 1510, "seek": 400680, "start": 4019.84, "end": 4021.8, "text": " and really polish, and really push,", "tokens": [293, 534, 20452, 11, 293, 534, 2944, 11], "temperature": 0.0, "avg_logprob": -0.13540599529559796, "compression_ratio": 1.6914893617021276, "no_speech_prob": 3.16816549457144e-05}, {"id": 1511, "seek": 400680, "start": 4021.8, "end": 4025.92, "text": " and like make sure that the core is really solid.", "tokens": [293, 411, 652, 988, 300, 264, 4965, 307, 534, 5100, 13], "temperature": 0.0, "avg_logprob": -0.13540599529559796, "compression_ratio": 1.6914893617021276, "no_speech_prob": 3.16816549457144e-05}, {"id": 1512, "seek": 400680, "start": 4025.92, "end": 4027.4, "text": " Okay, we have a question.", "tokens": [1033, 11, 321, 362, 257, 1168, 13], "temperature": 0.0, "avg_logprob": -0.13540599529559796, "compression_ratio": 1.6914893617021276, "no_speech_prob": 3.16816549457144e-05}, {"id": 1513, "seek": 400680, "start": 4027.4, "end": 4031.0, "text": " How does the Swift protocol approach avoid the inheritance", "tokens": [1012, 775, 264, 25539, 10336, 3109, 5042, 264, 32122], "temperature": 0.0, "avg_logprob": -0.13540599529559796, "compression_ratio": 1.6914893617021276, "no_speech_prob": 3.16816549457144e-05}, {"id": 1514, "seek": 400680, "start": 4031.0, "end": 4034.0, "text": " tree hell problem in languages like C sharp, where you end", "tokens": [4230, 4921, 1154, 294, 8650, 411, 383, 8199, 11, 689, 291, 917], "temperature": 0.0, "avg_logprob": -0.13540599529559796, "compression_ratio": 1.6914893617021276, "no_speech_prob": 3.16816549457144e-05}, {"id": 1515, "seek": 403400, "start": 4034.0, "end": 4037.4, "text": " up with enormous trees that are impossible to refactor?", "tokens": [493, 365, 11322, 5852, 300, 366, 6243, 281, 1895, 15104, 30], "temperature": 0.0, "avg_logprob": -0.10910625875431255, "compression_ratio": 1.670846394984326, "no_speech_prob": 4.3305055442033336e-05}, {"id": 1516, "seek": 403400, "start": 4037.4, "end": 4039.76, "text": " And similarly, what are the top opinions", "tokens": [400, 14138, 11, 437, 366, 264, 1192, 11819], "temperature": 0.0, "avg_logprob": -0.10910625875431255, "compression_ratio": 1.670846394984326, "no_speech_prob": 4.3305055442033336e-05}, {"id": 1517, "seek": 403400, "start": 4039.76, "end": 4042.6, "text": " around using the mixin pattern, which has been found", "tokens": [926, 1228, 264, 2890, 259, 5102, 11, 597, 575, 668, 1352], "temperature": 0.0, "avg_logprob": -0.10910625875431255, "compression_ratio": 1.670846394984326, "no_speech_prob": 4.3305055442033336e-05}, {"id": 1518, "seek": 403400, "start": 4042.6, "end": 4045.16, "text": " to be an anti-pattern in other contexts?", "tokens": [281, 312, 364, 6061, 12, 79, 1161, 77, 294, 661, 30628, 30], "temperature": 0.0, "avg_logprob": -0.10910625875431255, "compression_ratio": 1.670846394984326, "no_speech_prob": 4.3305055442033336e-05}, {"id": 1519, "seek": 403400, "start": 4045.16, "end": 4048.32, "text": " Yeah, so the way that Swift implements this is completely", "tokens": [865, 11, 370, 264, 636, 300, 25539, 704, 17988, 341, 307, 2584], "temperature": 0.0, "avg_logprob": -0.10910625875431255, "compression_ratio": 1.670846394984326, "no_speech_prob": 4.3305055442033336e-05}, {"id": 1520, "seek": 403400, "start": 4048.32, "end": 4051.92, "text": " different than the way that subclasses work in C sharp,", "tokens": [819, 813, 264, 636, 300, 1422, 11665, 279, 589, 294, 383, 8199, 11], "temperature": 0.0, "avg_logprob": -0.10910625875431255, "compression_ratio": 1.670846394984326, "no_speech_prob": 4.3305055442033336e-05}, {"id": 1521, "seek": 403400, "start": 4051.92, "end": 4054.84, "text": " or Java, or other object oriented languages.", "tokens": [420, 10745, 11, 420, 661, 2657, 21841, 8650, 13], "temperature": 0.0, "avg_logprob": -0.10910625875431255, "compression_ratio": 1.670846394984326, "no_speech_prob": 4.3305055442033336e-05}, {"id": 1522, "seek": 403400, "start": 4054.84, "end": 4058.04, "text": " There what you get is something called a V table, and so your type has", "tokens": [821, 437, 291, 483, 307, 746, 1219, 257, 691, 3199, 11, 293, 370, 428, 2010, 575], "temperature": 0.0, "avg_logprob": -0.10910625875431255, "compression_ratio": 1.670846394984326, "no_speech_prob": 4.3305055442033336e-05}, {"id": 1523, "seek": 403400, "start": 4058.04, "end": 4060.56, "text": " to have one set of mappings for all these different methods,", "tokens": [281, 362, 472, 992, 295, 463, 28968, 337, 439, 613, 819, 7150, 11], "temperature": 0.0, "avg_logprob": -0.10910625875431255, "compression_ratio": 1.670846394984326, "no_speech_prob": 4.3305055442033336e-05}, {"id": 1524, "seek": 403400, "start": 4060.56, "end": 4062.84, "text": " and then you get very deep inheritance hierarchies.", "tokens": [293, 550, 291, 483, 588, 2452, 32122, 35250, 530, 13], "temperature": 0.0, "avg_logprob": -0.10910625875431255, "compression_ratio": 1.670846394984326, "no_speech_prob": 4.3305055442033336e-05}, {"id": 1525, "seek": 406284, "start": 4062.84, "end": 4068.84, "text": " In Swift, you end up adding methods to int, like so we,", "tokens": [682, 25539, 11, 291, 917, 493, 5127, 7150, 281, 560, 11, 411, 370, 321, 11], "temperature": 0.0, "avg_logprob": -0.13061667517792408, "compression_ratio": 1.7758007117437722, "no_speech_prob": 5.093520940135932e-06}, {"id": 1526, "seek": 406284, "start": 4068.84, "end": 4072.2000000000003, "text": " on the last slide, added a method is odd to all the integers.", "tokens": [322, 264, 1036, 4137, 11, 3869, 257, 3170, 307, 7401, 281, 439, 264, 41674, 13], "temperature": 0.0, "avg_logprob": -0.13061667517792408, "compression_ratio": 1.7758007117437722, "no_speech_prob": 5.093520940135932e-06}, {"id": 1527, "seek": 406284, "start": 4072.2000000000003, "end": 4073.6800000000003, "text": " Integers don't have a V table.", "tokens": [5681, 1146, 433, 500, 380, 362, 257, 691, 3199, 13], "temperature": 0.0, "avg_logprob": -0.13061667517792408, "compression_ratio": 1.7758007117437722, "no_speech_prob": 5.093520940135932e-06}, {"id": 1528, "seek": 406284, "start": 4073.6800000000003, "end": 4076.48, "text": " That would be a very inefficient thing to do,", "tokens": [663, 576, 312, 257, 588, 43495, 551, 281, 360, 11], "temperature": 0.0, "avg_logprob": -0.13061667517792408, "compression_ratio": 1.7758007117437722, "no_speech_prob": 5.093520940135932e-06}, {"id": 1529, "seek": 406284, "start": 4076.48, "end": 4078.2000000000003, "text": " and so the implementation is completely different.", "tokens": [293, 370, 264, 11420, 307, 2584, 819, 13], "temperature": 0.0, "avg_logprob": -0.13061667517792408, "compression_ratio": 1.7758007117437722, "no_speech_prob": 5.093520940135932e-06}, {"id": 1530, "seek": 406284, "start": 4078.2000000000003, "end": 4079.52, "text": " The trails are completely different.", "tokens": [440, 23024, 366, 2584, 819, 13], "temperature": 0.0, "avg_logprob": -0.13061667517792408, "compression_ratio": 1.7758007117437722, "no_speech_prob": 5.093520940135932e-06}, {"id": 1531, "seek": 406284, "start": 4079.52, "end": 4084.0, "text": " I will, at the end of this, I think, in a couple of slides,", "tokens": [286, 486, 11, 412, 264, 917, 295, 341, 11, 286, 519, 11, 294, 257, 1916, 295, 9788, 11], "temperature": 0.0, "avg_logprob": -0.13061667517792408, "compression_ratio": 1.7758007117437722, "no_speech_prob": 5.093520940135932e-06}, {"id": 1532, "seek": 406284, "start": 4084.0, "end": 4086.36, "text": " have a good pointer that will give you a very nice deep dive", "tokens": [362, 257, 665, 23918, 300, 486, 976, 291, 257, 588, 1481, 2452, 9192], "temperature": 0.0, "avg_logprob": -0.13061667517792408, "compression_ratio": 1.7758007117437722, "no_speech_prob": 5.093520940135932e-06}, {"id": 1533, "seek": 406284, "start": 4086.36, "end": 4087.92, "text": " on all that kind of stuff.", "tokens": [322, 439, 300, 733, 295, 1507, 13], "temperature": 0.0, "avg_logprob": -0.13061667517792408, "compression_ratio": 1.7758007117437722, "no_speech_prob": 5.093520940135932e-06}, {"id": 1534, "seek": 406284, "start": 4087.92, "end": 4090.6800000000003, "text": " So also there's the binary method problem, and there's a whole bunch", "tokens": [407, 611, 456, 311, 264, 17434, 3170, 1154, 11, 293, 456, 311, 257, 1379, 3840], "temperature": 0.0, "avg_logprob": -0.13061667517792408, "compression_ratio": 1.7758007117437722, "no_speech_prob": 5.093520940135932e-06}, {"id": 1535, "seek": 409068, "start": 4090.68, "end": 4093.52, "text": " of other things that are very cleanly solved in Swift protocols.", "tokens": [295, 661, 721, 300, 366, 588, 2541, 356, 13041, 294, 25539, 20618, 13], "temperature": 0.0, "avg_logprob": -0.10534208874369777, "compression_ratio": 1.6181229773462784, "no_speech_prob": 3.703797119669616e-05}, {"id": 1536, "seek": 409068, "start": 4093.52, "end": 4097.24, "text": " Okay, and then there was also a question, out of curiosity,", "tokens": [1033, 11, 293, 550, 456, 390, 611, 257, 1168, 11, 484, 295, 18769, 11], "temperature": 0.0, "avg_logprob": -0.10534208874369777, "compression_ratio": 1.6181229773462784, "no_speech_prob": 3.703797119669616e-05}, {"id": 1537, "seek": 409068, "start": 4097.24, "end": 4099.8, "text": " could you give an estimate of how long it would take someone to go", "tokens": [727, 291, 976, 364, 12539, 295, 577, 938, 309, 576, 747, 1580, 281, 352], "temperature": 0.0, "avg_logprob": -0.10534208874369777, "compression_ratio": 1.6181229773462784, "no_speech_prob": 3.703797119669616e-05}, {"id": 1538, "seek": 409068, "start": 4099.8, "end": 4102.72, "text": " from a fair level of knowledge in Python,", "tokens": [490, 257, 3143, 1496, 295, 3601, 294, 15329, 11], "temperature": 0.0, "avg_logprob": -0.10534208874369777, "compression_ratio": 1.6181229773462784, "no_speech_prob": 3.703797119669616e-05}, {"id": 1539, "seek": 409068, "start": 4102.72, "end": 4105.76, "text": " TensorFlow deep learning, to start being able", "tokens": [37624, 2452, 2539, 11, 281, 722, 885, 1075], "temperature": 0.0, "avg_logprob": -0.10534208874369777, "compression_ratio": 1.6181229773462784, "no_speech_prob": 3.703797119669616e-05}, {"id": 1540, "seek": 409068, "start": 4105.76, "end": 4109.16, "text": " to be a competent contributor to Swift for TensorFlow?", "tokens": [281, 312, 257, 29998, 42859, 281, 25539, 337, 37624, 30], "temperature": 0.0, "avg_logprob": -0.10534208874369777, "compression_ratio": 1.6181229773462784, "no_speech_prob": 3.703797119669616e-05}, {"id": 1541, "seek": 409068, "start": 4109.16, "end": 4113.24, "text": " Yeah, so we've designed Swift in general to be really easy to learn,", "tokens": [865, 11, 370, 321, 600, 4761, 25539, 294, 2674, 281, 312, 534, 1858, 281, 1466, 11], "temperature": 0.0, "avg_logprob": -0.10534208874369777, "compression_ratio": 1.6181229773462784, "no_speech_prob": 3.703797119669616e-05}, {"id": 1542, "seek": 409068, "start": 4113.24, "end": 4115.08, "text": " and so that you can learn as you go.", "tokens": [293, 370, 300, 291, 393, 1466, 382, 291, 352, 13], "temperature": 0.0, "avg_logprob": -0.10534208874369777, "compression_ratio": 1.6181229773462784, "no_speech_prob": 3.703797119669616e-05}, {"id": 1543, "seek": 409068, "start": 4115.08, "end": 4118.08, "text": " And this course is a little bit very, it's very bottoms up,", "tokens": [400, 341, 1164, 307, 257, 707, 857, 588, 11, 309, 311, 588, 43413, 493, 11], "temperature": 0.0, "avg_logprob": -0.10534208874369777, "compression_ratio": 1.6181229773462784, "no_speech_prob": 3.703797119669616e-05}, {"id": 1544, "seek": 411808, "start": 4118.08, "end": 4121.44, "text": " but a lot of Swift, just like Python, was designed to be taught.", "tokens": [457, 257, 688, 295, 25539, 11, 445, 411, 15329, 11, 390, 4761, 281, 312, 5928, 13], "temperature": 0.0, "avg_logprob": -0.12672348545022208, "compression_ratio": 1.7718120805369129, "no_speech_prob": 3.8824215152999386e-05}, {"id": 1545, "seek": 411808, "start": 4121.44, "end": 4126.92, "text": " And what you start with when you go in from that perspective is you get a", "tokens": [400, 437, 291, 722, 365, 562, 291, 352, 294, 490, 300, 4585, 307, 291, 483, 257], "temperature": 0.0, "avg_logprob": -0.12672348545022208, "compression_ratio": 1.7718120805369129, "no_speech_prob": 3.8824215152999386e-05}, {"id": 1546, "seek": 411808, "start": 4126.92, "end": 4129.96, "text": " very top-down kind of perspective, and what I would do is I would start", "tokens": [588, 1192, 12, 5093, 733, 295, 4585, 11, 293, 437, 286, 576, 360, 307, 286, 576, 722], "temperature": 0.0, "avg_logprob": -0.12672348545022208, "compression_ratio": 1.7718120805369129, "no_speech_prob": 3.8824215152999386e-05}, {"id": 1547, "seek": 411808, "start": 4129.96, "end": 4134.32, "text": " with Google for a Swift tour, and you get a very nice top-down view", "tokens": [365, 3329, 337, 257, 25539, 3512, 11, 293, 291, 483, 257, 588, 1481, 1192, 12, 5093, 1910], "temperature": 0.0, "avg_logprob": -0.12672348545022208, "compression_ratio": 1.7718120805369129, "no_speech_prob": 3.8824215152999386e-05}, {"id": 1548, "seek": 411808, "start": 4134.32, "end": 4136.68, "text": " of the language, and it's very approachable.", "tokens": [295, 264, 2856, 11, 293, 309, 311, 588, 3109, 712, 13], "temperature": 0.0, "avg_logprob": -0.12672348545022208, "compression_ratio": 1.7718120805369129, "no_speech_prob": 3.8824215152999386e-05}, {"id": 1549, "seek": 411808, "start": 4136.68, "end": 4139.5199999999995, "text": " And like just pick something that is in fast AI,", "tokens": [400, 411, 445, 1888, 746, 300, 307, 294, 2370, 7318, 11], "temperature": 0.0, "avg_logprob": -0.12672348545022208, "compression_ratio": 1.7718120805369129, "no_speech_prob": 3.8824215152999386e-05}, {"id": 1550, "seek": 411808, "start": 4139.5199999999995, "end": 4142.84, "text": " in some fast AI notebook now, we haven't implemented it yet,", "tokens": [294, 512, 2370, 7318, 21060, 586, 11, 321, 2378, 380, 12270, 309, 1939, 11], "temperature": 0.0, "avg_logprob": -0.12672348545022208, "compression_ratio": 1.7718120805369129, "no_speech_prob": 3.8824215152999386e-05}, {"id": 1551, "seek": 411808, "start": 4142.84, "end": 4144.32, "text": " and pop it into a notebook, right?", "tokens": [293, 1665, 309, 666, 257, 21060, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.12672348545022208, "compression_ratio": 1.7718120805369129, "no_speech_prob": 3.8824215152999386e-05}, {"id": 1552, "seek": 411808, "start": 4144.32, "end": 4146.28, "text": " And the first time you try to do that, you'll get all kinds", "tokens": [400, 264, 700, 565, 291, 853, 281, 360, 300, 11, 291, 603, 483, 439, 3685], "temperature": 0.0, "avg_logprob": -0.12672348545022208, "compression_ratio": 1.7718120805369129, "no_speech_prob": 3.8824215152999386e-05}, {"id": 1553, "seek": 414628, "start": 4146.28, "end": 4149.759999999999, "text": " of weird errors and obstructions, and you won't know what's going on,", "tokens": [295, 3657, 13603, 293, 45579, 626, 11, 293, 291, 1582, 380, 458, 437, 311, 516, 322, 11], "temperature": 0.0, "avg_logprob": -0.14146786519925889, "compression_ratio": 1.8035714285714286, "no_speech_prob": 1.4734660908288788e-05}, {"id": 1554, "seek": 414628, "start": 4149.759999999999, "end": 4151.08, "text": " but after a few weeks.", "tokens": [457, 934, 257, 1326, 3259, 13], "temperature": 0.0, "avg_logprob": -0.14146786519925889, "compression_ratio": 1.8035714285714286, "no_speech_prob": 1.4734660908288788e-05}, {"id": 1555, "seek": 414628, "start": 4151.08, "end": 4153.32, "text": " That's on the forum, and that's what the community's about.", "tokens": [663, 311, 322, 264, 17542, 11, 293, 300, 311, 437, 264, 1768, 311, 466, 13], "temperature": 0.0, "avg_logprob": -0.14146786519925889, "compression_ratio": 1.8035714285714286, "no_speech_prob": 1.4734660908288788e-05}, {"id": 1556, "seek": 414628, "start": 4153.32, "end": 4155.5599999999995, "text": " Yeah, lots of help from the forum, and Chris and I are both", "tokens": [865, 11, 3195, 295, 854, 490, 264, 17542, 11, 293, 6688, 293, 286, 366, 1293], "temperature": 0.0, "avg_logprob": -0.14146786519925889, "compression_ratio": 1.8035714285714286, "no_speech_prob": 1.4734660908288788e-05}, {"id": 1557, "seek": 414628, "start": 4155.5599999999995, "end": 4158.36, "text": " on the forum, and there's the SETF teams on the forum.", "tokens": [322, 264, 17542, 11, 293, 456, 311, 264, 318, 4850, 37, 5491, 322, 264, 17542, 13], "temperature": 0.0, "avg_logprob": -0.14146786519925889, "compression_ratio": 1.8035714285714286, "no_speech_prob": 1.4734660908288788e-05}, {"id": 1558, "seek": 414628, "start": 4158.36, "end": 4160.48, "text": " We'll help you out, and in a few weeks' time,", "tokens": [492, 603, 854, 291, 484, 11, 293, 294, 257, 1326, 3259, 6, 565, 11], "temperature": 0.0, "avg_logprob": -0.14146786519925889, "compression_ratio": 1.8035714285714286, "no_speech_prob": 1.4734660908288788e-05}, {"id": 1559, "seek": 414628, "start": 4160.48, "end": 4163.28, "text": " you'll be writing stuff from scratch", "tokens": [291, 603, 312, 3579, 1507, 490, 8459], "temperature": 0.0, "avg_logprob": -0.14146786519925889, "compression_ratio": 1.8035714285714286, "no_speech_prob": 1.4734660908288788e-05}, {"id": 1560, "seek": 414628, "start": 4163.28, "end": 4167.16, "text": " and finding it a much smoother process.", "tokens": [293, 5006, 309, 257, 709, 28640, 1399, 13], "temperature": 0.0, "avg_logprob": -0.14146786519925889, "compression_ratio": 1.8035714285714286, "no_speech_prob": 1.4734660908288788e-05}, {"id": 1561, "seek": 414628, "start": 4167.16, "end": 4171.5599999999995, "text": " Yeah. So I want to address one weird thing here", "tokens": [865, 13, 407, 286, 528, 281, 2985, 472, 3657, 551, 510], "temperature": 0.0, "avg_logprob": -0.14146786519925889, "compression_ratio": 1.8035714285714286, "no_speech_prob": 1.4734660908288788e-05}, {"id": 1562, "seek": 414628, "start": 4171.5599999999995, "end": 4175.599999999999, "text": " and give you something to think about, and you might wonder, okay,", "tokens": [293, 976, 291, 746, 281, 519, 466, 11, 293, 291, 1062, 2441, 11, 1392, 11], "temperature": 0.0, "avg_logprob": -0.14146786519925889, "compression_ratio": 1.8035714285714286, "no_speech_prob": 1.4734660908288788e-05}, {"id": 1563, "seek": 417560, "start": 4175.6, "end": 4179.04, "text": " well, Jeremy wants to know all the countable things.", "tokens": [731, 11, 17809, 2738, 281, 458, 439, 264, 1207, 712, 721, 13], "temperature": 0.0, "avg_logprob": -0.14004547025528422, "compression_ratio": 1.85, "no_speech_prob": 4.132770118303597e-05}, {"id": 1564, "seek": 417560, "start": 4179.04, "end": 4182.04, "text": " We have arrays and we have MAT, and we have to say", "tokens": [492, 362, 41011, 293, 321, 362, 5904, 11, 293, 321, 362, 281, 584], "temperature": 0.0, "avg_logprob": -0.14004547025528422, "compression_ratio": 1.85, "no_speech_prob": 4.132770118303597e-05}, {"id": 1565, "seek": 417560, "start": 4182.04, "end": 4184.52, "text": " that they are countable, but the compiler knows", "tokens": [300, 436, 366, 1207, 712, 11, 457, 264, 31958, 3255], "temperature": 0.0, "avg_logprob": -0.14004547025528422, "compression_ratio": 1.85, "no_speech_prob": 4.132770118303597e-05}, {"id": 1566, "seek": 417560, "start": 4184.52, "end": 4185.84, "text": " that it's countable or not.", "tokens": [300, 309, 311, 1207, 712, 420, 406, 13], "temperature": 0.0, "avg_logprob": -0.14004547025528422, "compression_ratio": 1.85, "no_speech_prob": 4.132770118303597e-05}, {"id": 1567, "seek": 417560, "start": 4185.84, "end": 4186.96, "text": " Like if you try to make something countable", "tokens": [1743, 498, 291, 853, 281, 652, 746, 1207, 712], "temperature": 0.0, "avg_logprob": -0.14004547025528422, "compression_ratio": 1.85, "no_speech_prob": 4.132770118303597e-05}, {"id": 1568, "seek": 417560, "start": 4186.96, "end": 4188.240000000001, "text": " and it doesn't have a count method,", "tokens": [293, 309, 1177, 380, 362, 257, 1207, 3170, 11], "temperature": 0.0, "avg_logprob": -0.14004547025528422, "compression_ratio": 1.85, "no_speech_prob": 4.132770118303597e-05}, {"id": 1569, "seek": 417560, "start": 4188.240000000001, "end": 4189.56, "text": " the compiler will complain to you.", "tokens": [264, 31958, 486, 11024, 281, 291, 13], "temperature": 0.0, "avg_logprob": -0.14004547025528422, "compression_ratio": 1.85, "no_speech_prob": 4.132770118303597e-05}, {"id": 1570, "seek": 417560, "start": 4189.56, "end": 4191.64, "text": " So why do we have to do this?", "tokens": [407, 983, 360, 321, 362, 281, 360, 341, 30], "temperature": 0.0, "avg_logprob": -0.14004547025528422, "compression_ratio": 1.85, "no_speech_prob": 4.132770118303597e-05}, {"id": 1571, "seek": 417560, "start": 4191.64, "end": 4194.6, "text": " Well, let's talk about a different example, and the answer is", "tokens": [1042, 11, 718, 311, 751, 466, 257, 819, 1365, 11, 293, 264, 1867, 307], "temperature": 0.0, "avg_logprob": -0.14004547025528422, "compression_ratio": 1.85, "no_speech_prob": 4.132770118303597e-05}, {"id": 1572, "seek": 417560, "start": 4194.6, "end": 4198.4800000000005, "text": " that protocols are not just about methods, and this is also related", "tokens": [300, 20618, 366, 406, 445, 466, 7150, 11, 293, 341, 307, 611, 4077], "temperature": 0.0, "avg_logprob": -0.14004547025528422, "compression_ratio": 1.85, "no_speech_prob": 4.132770118303597e-05}, {"id": 1573, "seek": 417560, "start": 4198.4800000000005, "end": 4200.4400000000005, "text": " to the C-sharp question, but the behavior", "tokens": [281, 264, 383, 12, 2716, 6529, 1168, 11, 457, 264, 5223], "temperature": 0.0, "avg_logprob": -0.14004547025528422, "compression_ratio": 1.85, "no_speech_prob": 4.132770118303597e-05}, {"id": 1574, "seek": 417560, "start": 4200.4400000000005, "end": 4202.360000000001, "text": " of those methods also matters.", "tokens": [295, 729, 7150, 611, 7001, 13], "temperature": 0.0, "avg_logprob": -0.14004547025528422, "compression_ratio": 1.85, "no_speech_prob": 4.132770118303597e-05}, {"id": 1575, "seek": 417560, "start": 4202.360000000001, "end": 4204.68, "text": " And so here we're going to switch domains and talk about shapes,", "tokens": [400, 370, 510, 321, 434, 516, 281, 3679, 25514, 293, 751, 466, 10854, 11], "temperature": 0.0, "avg_logprob": -0.14004547025528422, "compression_ratio": 1.85, "no_speech_prob": 4.132770118303597e-05}, {"id": 1576, "seek": 420468, "start": 4204.68, "end": 4206.200000000001, "text": " and so I have shape.", "tokens": [293, 370, 286, 362, 3909, 13], "temperature": 0.0, "avg_logprob": -0.12758509744733773, "compression_ratio": 1.891696750902527, "no_speech_prob": 1.9524428353179246e-05}, {"id": 1577, "seek": 420468, "start": 4206.200000000001, "end": 4208.04, "text": " All shapes have to have a draw method, right?", "tokens": [1057, 10854, 362, 281, 362, 257, 2642, 3170, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.12758509744733773, "compression_ratio": 1.891696750902527, "no_speech_prob": 1.9524428353179246e-05}, {"id": 1578, "seek": 420468, "start": 4208.04, "end": 4211.4800000000005, "text": " This is super easy, and what I can do is I can define an octagon", "tokens": [639, 307, 1687, 1858, 11, 293, 437, 286, 393, 360, 307, 286, 393, 6964, 364, 13350, 6709], "temperature": 0.0, "avg_logprob": -0.12758509744733773, "compression_ratio": 1.891696750902527, "no_speech_prob": 1.9524428353179246e-05}, {"id": 1579, "seek": 420468, "start": 4211.4800000000005, "end": 4212.76, "text": " and tell it how to draw.", "tokens": [293, 980, 309, 577, 281, 2642, 13], "temperature": 0.0, "avg_logprob": -0.12758509744733773, "compression_ratio": 1.891696750902527, "no_speech_prob": 1.9524428353179246e-05}, {"id": 1580, "seek": 420468, "start": 4212.76, "end": 4217.52, "text": " I can define a diamond, tell it how to draw using exactly the same stuff", "tokens": [286, 393, 6964, 257, 16059, 11, 980, 309, 577, 281, 2642, 1228, 2293, 264, 912, 1507], "temperature": 0.0, "avg_logprob": -0.12758509744733773, "compression_ratio": 1.891696750902527, "no_speech_prob": 1.9524428353179246e-05}, {"id": 1581, "seek": 420468, "start": 4217.52, "end": 4219.360000000001, "text": " that we just saw before, really easy.", "tokens": [300, 321, 445, 1866, 949, 11, 534, 1858, 13], "temperature": 0.0, "avg_logprob": -0.12758509744733773, "compression_ratio": 1.891696750902527, "no_speech_prob": 1.9524428353179246e-05}, {"id": 1582, "seek": 420468, "start": 4219.360000000001, "end": 4222.240000000001, "text": " And the cool thing about this is now I can define a method, refresh,", "tokens": [400, 264, 1627, 551, 466, 341, 307, 586, 286, 393, 6964, 257, 3170, 11, 15134, 11], "temperature": 0.0, "avg_logprob": -0.12758509744733773, "compression_ratio": 1.891696750902527, "no_speech_prob": 1.9524428353179246e-05}, {"id": 1583, "seek": 420468, "start": 4222.240000000001, "end": 4224.96, "text": " and now refresh, all it does is it clears the canvas", "tokens": [293, 586, 15134, 11, 439, 309, 775, 307, 309, 47033, 264, 16267], "temperature": 0.0, "avg_logprob": -0.12758509744733773, "compression_ratio": 1.891696750902527, "no_speech_prob": 1.9524428353179246e-05}, {"id": 1584, "seek": 420468, "start": 4224.96, "end": 4228.6, "text": " and draws the shape, and so all shapes will get a refresh method.", "tokens": [293, 20045, 264, 3909, 11, 293, 370, 439, 10854, 486, 483, 257, 15134, 3170, 13], "temperature": 0.0, "avg_logprob": -0.12758509744733773, "compression_ratio": 1.891696750902527, "no_speech_prob": 1.9524428353179246e-05}, {"id": 1585, "seek": 420468, "start": 4228.6, "end": 4232.320000000001, "text": " So if you go do a tab completion on your octagon, it all just works.", "tokens": [407, 498, 291, 352, 360, 257, 4421, 19372, 322, 428, 13350, 6709, 11, 309, 439, 445, 1985, 13], "temperature": 0.0, "avg_logprob": -0.12758509744733773, "compression_ratio": 1.891696750902527, "no_speech_prob": 1.9524428353179246e-05}, {"id": 1586, "seek": 423232, "start": 4232.32, "end": 4235.24, "text": " But what happens if you have something else with the draw method?", "tokens": [583, 437, 2314, 498, 291, 362, 746, 1646, 365, 264, 2642, 3170, 30], "temperature": 0.0, "avg_logprob": -0.10241071728692538, "compression_ratio": 1.6578947368421053, "no_speech_prob": 8.80082825460704e-06}, {"id": 1587, "seek": 423232, "start": 4235.24, "end": 4237.08, "text": " So cowboys know how to draw.", "tokens": [407, 8408, 31638, 458, 577, 281, 2642, 13], "temperature": 0.0, "avg_logprob": -0.10241071728692538, "compression_ratio": 1.6578947368421053, "no_speech_prob": 8.80082825460704e-06}, {"id": 1588, "seek": 423232, "start": 4237.08, "end": 4240.08, "text": " It's a very different notion of what drawing is, right?", "tokens": [467, 311, 257, 588, 819, 10710, 295, 437, 6316, 307, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.10241071728692538, "compression_ratio": 1.6578947368421053, "no_speech_prob": 8.80082825460704e-06}, {"id": 1589, "seek": 423232, "start": 4240.08, "end": 4243.88, "text": " We don't want cowboys to have a refresh method.", "tokens": [492, 500, 380, 528, 8408, 31638, 281, 362, 257, 15134, 3170, 13], "temperature": 0.0, "avg_logprob": -0.10241071728692538, "compression_ratio": 1.6578947368421053, "no_speech_prob": 8.80082825460704e-06}, {"id": 1590, "seek": 423232, "start": 4243.88, "end": 4247.84, "text": " It doesn't make sense to clear the screen and then pull out a gun.", "tokens": [467, 1177, 380, 652, 2020, 281, 1850, 264, 2568, 293, 550, 2235, 484, 257, 3874, 13], "temperature": 0.0, "avg_logprob": -0.10241071728692538, "compression_ratio": 1.6578947368421053, "no_speech_prob": 8.80082825460704e-06}, {"id": 1591, "seek": 423232, "start": 4247.84, "end": 4250.48, "text": " That's not what we're talking about here.", "tokens": [663, 311, 406, 437, 321, 434, 1417, 466, 510, 13], "temperature": 0.0, "avg_logprob": -0.10241071728692538, "compression_ratio": 1.6578947368421053, "no_speech_prob": 8.80082825460704e-06}, {"id": 1592, "seek": 423232, "start": 4250.48, "end": 4254.04, "text": " And so the idea of protocols is really, again, to categorize", "tokens": [400, 370, 264, 1558, 295, 20618, 307, 534, 11, 797, 11, 281, 19250, 1125], "temperature": 0.0, "avg_logprob": -0.10241071728692538, "compression_ratio": 1.6578947368421053, "no_speech_prob": 8.80082825460704e-06}, {"id": 1593, "seek": 423232, "start": 4254.04, "end": 4257.24, "text": " and describe groups of types, and one of the things you'll see,", "tokens": [293, 6786, 3935, 295, 3467, 11, 293, 472, 295, 264, 721, 291, 603, 536, 11], "temperature": 0.0, "avg_logprob": -0.10241071728692538, "compression_ratio": 1.6578947368421053, "no_speech_prob": 8.80082825460704e-06}, {"id": 1594, "seek": 423232, "start": 4257.24, "end": 4261.08, "text": " which is kind of cool, is you can define a protocol with nothing in it.", "tokens": [597, 307, 733, 295, 1627, 11, 307, 291, 393, 6964, 257, 10336, 365, 1825, 294, 309, 13], "temperature": 0.0, "avg_logprob": -0.10241071728692538, "compression_ratio": 1.6578947368421053, "no_speech_prob": 8.80082825460704e-06}, {"id": 1595, "seek": 426108, "start": 4261.08, "end": 4263.24, "text": " So it's a protocol that doesn't require anything.", "tokens": [407, 309, 311, 257, 10336, 300, 1177, 380, 3651, 1340, 13], "temperature": 0.0, "avg_logprob": -0.10410927281235204, "compression_ratio": 1.8265682656826567, "no_speech_prob": 8.6641466623405e-06}, {"id": 1596, "seek": 426108, "start": 4263.24, "end": 4266.24, "text": " And then you go say, I want that type, that type, that type,", "tokens": [400, 550, 291, 352, 584, 11, 286, 528, 300, 2010, 11, 300, 2010, 11, 300, 2010, 11], "temperature": 0.0, "avg_logprob": -0.10410927281235204, "compression_ratio": 1.8265682656826567, "no_speech_prob": 8.6641466623405e-06}, {"id": 1597, "seek": 426108, "start": 4266.24, "end": 4268.24, "text": " that type to be in this group.", "tokens": [300, 2010, 281, 312, 294, 341, 1594, 13], "temperature": 0.0, "avg_logprob": -0.10410927281235204, "compression_ratio": 1.8265682656826567, "no_speech_prob": 8.6641466623405e-06}, {"id": 1598, "seek": 426108, "start": 4268.24, "end": 4271.84, "text": " And now I will have a way to describe that group of types", "tokens": [400, 586, 286, 486, 362, 257, 636, 281, 6786, 300, 1594, 295, 3467], "temperature": 0.0, "avg_logprob": -0.10410927281235204, "compression_ratio": 1.8265682656826567, "no_speech_prob": 8.6641466623405e-06}, {"id": 1599, "seek": 426108, "start": 4271.84, "end": 4274.28, "text": " that can be totally random, whatever makes sense for you.", "tokens": [300, 393, 312, 3879, 4974, 11, 2035, 1669, 2020, 337, 291, 13], "temperature": 0.0, "avg_logprob": -0.10410927281235204, "compression_ratio": 1.8265682656826567, "no_speech_prob": 8.6641466623405e-06}, {"id": 1600, "seek": 426108, "start": 4274.28, "end": 4276.96, "text": " And then you could do reflection on it.", "tokens": [400, 550, 291, 727, 360, 12914, 322, 309, 13], "temperature": 0.0, "avg_logprob": -0.10410927281235204, "compression_ratio": 1.8265682656826567, "no_speech_prob": 8.6641466623405e-06}, {"id": 1601, "seek": 426108, "start": 4276.96, "end": 4278.72, "text": " You can do lots of different things that now apply", "tokens": [509, 393, 360, 3195, 295, 819, 721, 300, 586, 3079], "temperature": 0.0, "avg_logprob": -0.10410927281235204, "compression_ratio": 1.8265682656826567, "no_speech_prob": 8.6641466623405e-06}, {"id": 1602, "seek": 426108, "start": 4278.72, "end": 4280.12, "text": " to exactly that group of types.", "tokens": [281, 2293, 300, 1594, 295, 3467, 13], "temperature": 0.0, "avg_logprob": -0.10410927281235204, "compression_ratio": 1.8265682656826567, "no_speech_prob": 8.6641466623405e-06}, {"id": 1603, "seek": 426108, "start": 4280.12, "end": 4282.92, "text": " And I actually found, I still find, that this kind", "tokens": [400, 286, 767, 1352, 11, 286, 920, 915, 11, 300, 341, 733], "temperature": 0.0, "avg_logprob": -0.10410927281235204, "compression_ratio": 1.8265682656826567, "no_speech_prob": 8.6641466623405e-06}, {"id": 1604, "seek": 426108, "start": 4282.92, "end": 4288.12, "text": " of protocol-based programming approach is like the exact upside", "tokens": [295, 10336, 12, 6032, 9410, 3109, 307, 411, 264, 1900, 14119], "temperature": 0.0, "avg_logprob": -0.10410927281235204, "compression_ratio": 1.8265682656826567, "no_speech_prob": 8.6641466623405e-06}, {"id": 1605, "seek": 428812, "start": 4288.12, "end": 4291.48, "text": " down opposite of how I've always thought about things.", "tokens": [760, 6182, 295, 577, 286, 600, 1009, 1194, 466, 721, 13], "temperature": 0.0, "avg_logprob": -0.11425436401367188, "compression_ratio": 1.758490566037736, "no_speech_prob": 3.6472636566031724e-05}, {"id": 1606, "seek": 428812, "start": 4291.48, "end": 4293.08, "text": " It's kind of like you don't create something", "tokens": [467, 311, 733, 295, 411, 291, 500, 380, 1884, 746], "temperature": 0.0, "avg_logprob": -0.11425436401367188, "compression_ratio": 1.758490566037736, "no_speech_prob": 3.6472636566031724e-05}, {"id": 1607, "seek": 428812, "start": 4293.08, "end": 4296.04, "text": " that contains these things, but you kind of like, I don't know,", "tokens": [300, 8306, 613, 721, 11, 457, 291, 733, 295, 411, 11, 286, 500, 380, 458, 11], "temperature": 0.0, "avg_logprob": -0.11425436401367188, "compression_ratio": 1.758490566037736, "no_speech_prob": 3.6472636566031724e-05}, {"id": 1608, "seek": 428812, "start": 4296.04, "end": 4297.48, "text": " somehow shove things in.", "tokens": [6063, 35648, 721, 294, 13], "temperature": 0.0, "avg_logprob": -0.11425436401367188, "compression_ratio": 1.758490566037736, "no_speech_prob": 3.6472636566031724e-05}, {"id": 1609, "seek": 428812, "start": 4297.48, "end": 4300.96, "text": " And the more I've looked at code that works this way,", "tokens": [400, 264, 544, 286, 600, 2956, 412, 3089, 300, 1985, 341, 636, 11], "temperature": 0.0, "avg_logprob": -0.11425436401367188, "compression_ratio": 1.758490566037736, "no_speech_prob": 3.6472636566031724e-05}, {"id": 1610, "seek": 428812, "start": 4300.96, "end": 4305.28, "text": " the more I realize it tends to be clearer and more concise.", "tokens": [264, 544, 286, 4325, 309, 12258, 281, 312, 26131, 293, 544, 44882, 13], "temperature": 0.0, "avg_logprob": -0.11425436401367188, "compression_ratio": 1.758490566037736, "no_speech_prob": 3.6472636566031724e-05}, {"id": 1611, "seek": 428812, "start": 4305.28, "end": 4310.5199999999995, "text": " But I still find it a struggle because I just don't have that sense", "tokens": [583, 286, 920, 915, 309, 257, 7799, 570, 286, 445, 500, 380, 362, 300, 2020], "temperature": 0.0, "avg_logprob": -0.11425436401367188, "compression_ratio": 1.758490566037736, "no_speech_prob": 3.6472636566031724e-05}, {"id": 1612, "seek": 428812, "start": 4310.5199999999995, "end": 4314.12, "text": " of this is how to go about creating these kinds of APIs.", "tokens": [295, 341, 307, 577, 281, 352, 466, 4084, 613, 3685, 295, 21445, 13], "temperature": 0.0, "avg_logprob": -0.11425436401367188, "compression_ratio": 1.758490566037736, "no_speech_prob": 3.6472636566031724e-05}, {"id": 1613, "seek": 428812, "start": 4314.12, "end": 4315.5599999999995, "text": " And one of the things you'll notice is", "tokens": [400, 472, 295, 264, 721, 291, 603, 3449, 307], "temperature": 0.0, "avg_logprob": -0.11425436401367188, "compression_ratio": 1.758490566037736, "no_speech_prob": 3.6472636566031724e-05}, {"id": 1614, "seek": 431556, "start": 4315.56, "end": 4319.56, "text": " that we added this protocol to array in an extension, right?", "tokens": [300, 321, 3869, 341, 10336, 281, 10225, 294, 364, 10320, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1360281545219692, "compression_ratio": 1.6993670886075949, "no_speech_prob": 6.240705261006951e-06}, {"id": 1615, "seek": 431556, "start": 4319.56, "end": 4323.56, "text": " So unlike interfaces in a Java or C Sharp type of language,", "tokens": [407, 8343, 28416, 294, 257, 10745, 420, 383, 31654, 2010, 295, 2856, 11], "temperature": 0.0, "avg_logprob": -0.1360281545219692, "compression_ratio": 1.6993670886075949, "no_speech_prob": 6.240705261006951e-06}, {"id": 1616, "seek": 431556, "start": 4323.56, "end": 4326.240000000001, "text": " we can take somebody else's type and then make it work", "tokens": [321, 393, 747, 2618, 1646, 311, 2010, 293, 550, 652, 309, 589], "temperature": 0.0, "avg_logprob": -0.1360281545219692, "compression_ratio": 1.6993670886075949, "no_speech_prob": 6.240705261006951e-06}, {"id": 1617, "seek": 431556, "start": 4326.240000000001, "end": 4328.240000000001, "text": " with the protocol after the fact.", "tokens": [365, 264, 10336, 934, 264, 1186, 13], "temperature": 0.0, "avg_logprob": -0.1360281545219692, "compression_ratio": 1.6993670886075949, "no_speech_prob": 6.240705261006951e-06}, {"id": 1618, "seek": 431556, "start": 4328.240000000001, "end": 4330.76, "text": " And so I think that's a superpower here that allows you to work", "tokens": [400, 370, 286, 519, 300, 311, 257, 45765, 510, 300, 4045, 291, 281, 589], "temperature": 0.0, "avg_logprob": -0.1360281545219692, "compression_ratio": 1.6993670886075949, "no_speech_prob": 6.240705261006951e-06}, {"id": 1619, "seek": 431556, "start": 4330.76, "end": 4333.400000000001, "text": " with these values in different ways.", "tokens": [365, 613, 4190, 294, 819, 2098, 13], "temperature": 0.0, "avg_logprob": -0.1360281545219692, "compression_ratio": 1.6993670886075949, "no_speech_prob": 6.240705261006951e-06}, {"id": 1620, "seek": 431556, "start": 4333.400000000001, "end": 4337.120000000001, "text": " So this is a super brief, high-level view of protocols.", "tokens": [407, 341, 307, 257, 1687, 5353, 11, 1090, 12, 12418, 1910, 295, 20618, 13], "temperature": 0.0, "avg_logprob": -0.1360281545219692, "compression_ratio": 1.6993670886075949, "no_speech_prob": 6.240705261006951e-06}, {"id": 1621, "seek": 431556, "start": 4337.120000000001, "end": 4339.64, "text": " Protocols are really cool in Swift, and they draw on a lot", "tokens": [48753, 82, 366, 534, 1627, 294, 25539, 11, 293, 436, 2642, 322, 257, 688], "temperature": 0.0, "avg_logprob": -0.1360281545219692, "compression_ratio": 1.6993670886075949, "no_speech_prob": 6.240705261006951e-06}, {"id": 1622, "seek": 431556, "start": 4339.64, "end": 4342.0, "text": " of great work in the Haskell and other communities.", "tokens": [295, 869, 589, 294, 264, 8646, 43723, 293, 661, 4456, 13], "temperature": 0.0, "avg_logprob": -0.1360281545219692, "compression_ratio": 1.6993670886075949, "no_speech_prob": 6.240705261006951e-06}, {"id": 1623, "seek": 431556, "start": 4342.0, "end": 4345.04, "text": " There's a bunch of talks, and even Jeremy wrote a blog post", "tokens": [821, 311, 257, 3840, 295, 6686, 11, 293, 754, 17809, 4114, 257, 6968, 2183], "temperature": 0.0, "avg_logprob": -0.1360281545219692, "compression_ratio": 1.6993670886075949, "no_speech_prob": 6.240705261006951e-06}, {"id": 1624, "seek": 434504, "start": 4345.04, "end": 4346.44, "text": " that's really cool that talks about some", "tokens": [300, 311, 534, 1627, 300, 6686, 466, 512], "temperature": 0.0, "avg_logprob": -0.14412633519973198, "compression_ratio": 1.6796116504854368, "no_speech_prob": 7.964653195813298e-05}, {"id": 1625, "seek": 434504, "start": 4346.44, "end": 4349.16, "text": " of the fun things you can do.", "tokens": [295, 264, 1019, 721, 291, 393, 360, 13], "temperature": 0.0, "avg_logprob": -0.14412633519973198, "compression_ratio": 1.6796116504854368, "no_speech_prob": 7.964653195813298e-05}, {"id": 1626, "seek": 434504, "start": 4349.16, "end": 4352.76, "text": " One extension makes code hard to read because once a functionality", "tokens": [1485, 10320, 1669, 3089, 1152, 281, 1401, 570, 1564, 257, 14980], "temperature": 0.0, "avg_logprob": -0.14412633519973198, "compression_ratio": 1.6796116504854368, "no_speech_prob": 7.964653195813298e-05}, {"id": 1627, "seek": 434504, "start": 4352.76, "end": 4355.56, "text": " of a particular API or class is extended in this way,", "tokens": [295, 257, 1729, 9362, 420, 1508, 307, 10913, 294, 341, 636, 11], "temperature": 0.0, "avg_logprob": -0.14412633519973198, "compression_ratio": 1.6796116504854368, "no_speech_prob": 7.964653195813298e-05}, {"id": 1628, "seek": 434504, "start": 4355.56, "end": 4357.36, "text": " you won't know if the functionality is coming", "tokens": [291, 1582, 380, 458, 498, 264, 14980, 307, 1348], "temperature": 0.0, "avg_logprob": -0.14412633519973198, "compression_ratio": 1.6796116504854368, "no_speech_prob": 7.964653195813298e-05}, {"id": 1629, "seek": 434504, "start": 4357.36, "end": 4360.2, "text": " from the original class or from somewhere else.", "tokens": [490, 264, 3380, 1508, 420, 490, 4079, 1646, 13], "temperature": 0.0, "avg_logprob": -0.14412633519973198, "compression_ratio": 1.6796116504854368, "no_speech_prob": 7.964653195813298e-05}, {"id": 1630, "seek": 434504, "start": 4360.2, "end": 4363.2, "text": " Yeah, so that's something you let go of when you write Swift code.", "tokens": [865, 11, 370, 300, 311, 746, 291, 718, 352, 295, 562, 291, 2464, 25539, 3089, 13], "temperature": 0.0, "avg_logprob": -0.14412633519973198, "compression_ratio": 1.6796116504854368, "no_speech_prob": 7.964653195813298e-05}, {"id": 1631, "seek": 434504, "start": 4363.2, "end": 4365.36, "text": " And there's a couple of reasons for that,", "tokens": [400, 456, 311, 257, 1916, 295, 4112, 337, 300, 11], "temperature": 0.0, "avg_logprob": -0.14412633519973198, "compression_ratio": 1.6796116504854368, "no_speech_prob": 7.964653195813298e-05}, {"id": 1632, "seek": 434504, "start": 4365.36, "end": 4367.8, "text": " one of which is that you get good ID support.", "tokens": [472, 295, 597, 307, 300, 291, 483, 665, 7348, 1406, 13], "temperature": 0.0, "avg_logprob": -0.14412633519973198, "compression_ratio": 1.6796116504854368, "no_speech_prob": 7.964653195813298e-05}, {"id": 1633, "seek": 434504, "start": 4367.8, "end": 4370.08, "text": " And so again, we're kind of building some parts", "tokens": [400, 370, 797, 11, 321, 434, 733, 295, 2390, 512, 3166], "temperature": 0.0, "avg_logprob": -0.14412633519973198, "compression_ratio": 1.6796116504854368, "no_speech_prob": 7.964653195813298e-05}, {"id": 1634, "seek": 434504, "start": 4370.08, "end": 4371.36, "text": " of this airplane as we fly it.", "tokens": [295, 341, 17130, 382, 321, 3603, 309, 13], "temperature": 0.0, "avg_logprob": -0.14412633519973198, "compression_ratio": 1.6796116504854368, "no_speech_prob": 7.964653195813298e-05}, {"id": 1635, "seek": 437136, "start": 4371.36, "end": 4375.5199999999995, "text": " But in Xcode, for example, you can click on a method", "tokens": [583, 294, 1783, 22332, 11, 337, 1365, 11, 291, 393, 2052, 322, 257, 3170], "temperature": 0.0, "avg_logprob": -0.09514246690993342, "compression_ratio": 1.848708487084871, "no_speech_prob": 2.9769880711683072e-05}, {"id": 1636, "seek": 437136, "start": 4375.5199999999995, "end": 4377.44, "text": " and jump to the definition, right?", "tokens": [293, 3012, 281, 264, 7123, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.09514246690993342, "compression_ratio": 1.848708487084871, "no_speech_prob": 2.9769880711683072e-05}, {"id": 1637, "seek": 437136, "start": 4377.44, "end": 4381.16, "text": " And so you can say, well, okay, here's a map on array.", "tokens": [400, 370, 291, 393, 584, 11, 731, 11, 1392, 11, 510, 311, 257, 4471, 322, 10225, 13], "temperature": 0.0, "avg_logprob": -0.09514246690993342, "compression_ratio": 1.848708487084871, "no_speech_prob": 2.9769880711683072e-05}, {"id": 1638, "seek": 437136, "start": 4381.16, "end": 4382.799999999999, "text": " Where does map come from?", "tokens": [2305, 775, 4471, 808, 490, 30], "temperature": 0.0, "avg_logprob": -0.09514246690993342, "compression_ratio": 1.848708487084871, "no_speech_prob": 2.9769880711683072e-05}, {"id": 1639, "seek": 437136, "start": 4382.799999999999, "end": 4384.48, "text": " Well, map isn't defined on array.", "tokens": [1042, 11, 4471, 1943, 380, 7642, 322, 10225, 13], "temperature": 0.0, "avg_logprob": -0.09514246690993342, "compression_ratio": 1.848708487084871, "no_speech_prob": 2.9769880711683072e-05}, {"id": 1640, "seek": 437136, "start": 4384.48, "end": 4386.88, "text": " Map, filter, reduce, those aren't defined on array.", "tokens": [22053, 11, 6608, 11, 5407, 11, 729, 3212, 380, 7642, 322, 10225, 13], "temperature": 0.0, "avg_logprob": -0.09514246690993342, "compression_ratio": 1.848708487084871, "no_speech_prob": 2.9769880711683072e-05}, {"id": 1641, "seek": 437136, "start": 4386.88, "end": 4389.0, "text": " Those are actually defined on sequence.", "tokens": [3950, 366, 767, 7642, 322, 8310, 13], "temperature": 0.0, "avg_logprob": -0.09514246690993342, "compression_ratio": 1.848708487084871, "no_speech_prob": 2.9769880711683072e-05}, {"id": 1642, "seek": 437136, "start": 4389.0, "end": 4391.12, "text": " And so all sequences have map, filter, reduce,", "tokens": [400, 370, 439, 22978, 362, 4471, 11, 6608, 11, 5407, 11], "temperature": 0.0, "avg_logprob": -0.09514246690993342, "compression_ratio": 1.848708487084871, "no_speech_prob": 2.9769880711683072e-05}, {"id": 1643, "seek": 437136, "start": 4391.12, "end": 4393.16, "text": " and a whole bunch of other stuff.", "tokens": [293, 257, 1379, 3840, 295, 661, 1507, 13], "temperature": 0.0, "avg_logprob": -0.09514246690993342, "compression_ratio": 1.848708487084871, "no_speech_prob": 2.9769880711683072e-05}, {"id": 1644, "seek": 437136, "start": 4393.16, "end": 4395.48, "text": " And so arrays are, of course, sequences,", "tokens": [400, 370, 41011, 366, 11, 295, 1164, 11, 22978, 11], "temperature": 0.0, "avg_logprob": -0.09514246690993342, "compression_ratio": 1.848708487084871, "no_speech_prob": 2.9769880711683072e-05}, {"id": 1645, "seek": 437136, "start": 4395.48, "end": 4397.839999999999, "text": " and so they get all that behavior.", "tokens": [293, 370, 436, 483, 439, 300, 5223, 13], "temperature": 0.0, "avg_logprob": -0.09514246690993342, "compression_ratio": 1.848708487084871, "no_speech_prob": 2.9769880711683072e-05}, {"id": 1646, "seek": 437136, "start": 4397.839999999999, "end": 4399.88, "text": " And so the fact that it's coming out of sequence,", "tokens": [400, 370, 264, 1186, 300, 309, 311, 1348, 484, 295, 8310, 11], "temperature": 0.0, "avg_logprob": -0.09514246690993342, "compression_ratio": 1.848708487084871, "no_speech_prob": 2.9769880711683072e-05}, {"id": 1647, "seek": 439988, "start": 4399.88, "end": 4401.72, "text": " as a Swift programmer, particularly when you're starting,", "tokens": [382, 257, 25539, 32116, 11, 4098, 562, 291, 434, 2891, 11], "temperature": 0.0, "avg_logprob": -0.15516958343848752, "compression_ratio": 1.8111111111111111, "no_speech_prob": 2.7967174901277758e-05}, {"id": 1648, "seek": 439988, "start": 4401.72, "end": 4403.04, "text": " doesn't really matter.", "tokens": [1177, 380, 534, 1871, 13], "temperature": 0.0, "avg_logprob": -0.15516958343848752, "compression_ratio": 1.8111111111111111, "no_speech_prob": 2.7967174901277758e-05}, {"id": 1649, "seek": 439988, "start": 4403.04, "end": 4404.36, "text": " It's just good functionality.", "tokens": [467, 311, 445, 665, 14980, 13], "temperature": 0.0, "avg_logprob": -0.15516958343848752, "compression_ratio": 1.8111111111111111, "no_speech_prob": 2.7967174901277758e-05}, {"id": 1650, "seek": 439988, "start": 4404.36, "end": 4405.68, "text": " And actually, you know, we've had this same discussion", "tokens": [400, 767, 11, 291, 458, 11, 321, 600, 632, 341, 912, 5017], "temperature": 0.0, "avg_logprob": -0.15516958343848752, "compression_ratio": 1.8111111111111111, "no_speech_prob": 2.7967174901277758e-05}, {"id": 1651, "seek": 439988, "start": 4405.68, "end": 4408.32, "text": " around Python, which is like, oh, Jeremy imports star,", "tokens": [926, 15329, 11, 597, 307, 411, 11, 1954, 11, 17809, 41596, 3543, 11], "temperature": 0.0, "avg_logprob": -0.15516958343848752, "compression_ratio": 1.8111111111111111, "no_speech_prob": 2.7967174901277758e-05}, {"id": 1652, "seek": 439988, "start": 4408.32, "end": 4410.36, "text": " and therefore I don't know where things come from.", "tokens": [293, 4412, 286, 500, 380, 458, 689, 721, 808, 490, 13], "temperature": 0.0, "avg_logprob": -0.15516958343848752, "compression_ratio": 1.8111111111111111, "no_speech_prob": 2.7967174901277758e-05}, {"id": 1653, "seek": 439988, "start": 4410.36, "end": 4412.400000000001, "text": " Because anyway, I used to know where things come from is", "tokens": [1436, 4033, 11, 286, 1143, 281, 458, 689, 721, 808, 490, 307], "temperature": 0.0, "avg_logprob": -0.15516958343848752, "compression_ratio": 1.8111111111111111, "no_speech_prob": 2.7967174901277758e-05}, {"id": 1654, "seek": 439988, "start": 4412.400000000001, "end": 4414.68, "text": " because I looked at the top of the file, and it would say,", "tokens": [570, 286, 2956, 412, 264, 1192, 295, 264, 3991, 11, 293, 309, 576, 584, 11], "temperature": 0.0, "avg_logprob": -0.15516958343848752, "compression_ratio": 1.8111111111111111, "no_speech_prob": 2.7967174901277758e-05}, {"id": 1655, "seek": 439988, "start": 4414.68, "end": 4416.32, "text": " from blah, import foo.", "tokens": [490, 12288, 11, 974, 726, 78, 13], "temperature": 0.0, "avg_logprob": -0.15516958343848752, "compression_ratio": 1.8111111111111111, "no_speech_prob": 2.7967174901277758e-05}, {"id": 1656, "seek": 439988, "start": 4416.32, "end": 4418.12, "text": " And so I know foo comes from blah.", "tokens": [400, 370, 286, 458, 726, 78, 1487, 490, 12288, 13], "temperature": 0.0, "avg_logprob": -0.15516958343848752, "compression_ratio": 1.8111111111111111, "no_speech_prob": 2.7967174901277758e-05}, {"id": 1657, "seek": 439988, "start": 4418.12, "end": 4419.68, "text": " And we had that whole discussion earlier lesson", "tokens": [400, 321, 632, 300, 1379, 5017, 3071, 6898], "temperature": 0.0, "avg_logprob": -0.15516958343848752, "compression_ratio": 1.8111111111111111, "no_speech_prob": 2.7967174901277758e-05}, {"id": 1658, "seek": 439988, "start": 4419.68, "end": 4422.12, "text": " where I said, that's not how you figure out where things come", "tokens": [689, 286, 848, 11, 300, 311, 406, 577, 291, 2573, 484, 689, 721, 808], "temperature": 0.0, "avg_logprob": -0.15516958343848752, "compression_ratio": 1.8111111111111111, "no_speech_prob": 2.7967174901277758e-05}, {"id": 1659, "seek": 439988, "start": 4422.12, "end": 4425.28, "text": " from, you learn to use jump to symbol in your IDE,", "tokens": [490, 11, 291, 1466, 281, 764, 3012, 281, 5986, 294, 428, 40930, 11], "temperature": 0.0, "avg_logprob": -0.15516958343848752, "compression_ratio": 1.8111111111111111, "no_speech_prob": 2.7967174901277758e-05}, {"id": 1660, "seek": 439988, "start": 4425.28, "end": 4427.76, "text": " or you learn to use Jupyter Notebooks ability", "tokens": [420, 291, 1466, 281, 764, 22125, 88, 391, 11633, 15170, 3485], "temperature": 0.0, "avg_logprob": -0.15516958343848752, "compression_ratio": 1.8111111111111111, "no_speech_prob": 2.7967174901277758e-05}, {"id": 1661, "seek": 442776, "start": 4427.76, "end": 4429.92, "text": " to show you where things come from.", "tokens": [281, 855, 291, 689, 721, 808, 490, 13], "temperature": 0.0, "avg_logprob": -0.1254879263944404, "compression_ratio": 1.5984251968503937, "no_speech_prob": 2.585011679911986e-05}, {"id": 1662, "seek": 442776, "start": 4429.92, "end": 4433.68, "text": " That's just the way to go.", "tokens": [663, 311, 445, 264, 636, 281, 352, 13], "temperature": 0.0, "avg_logprob": -0.1254879263944404, "compression_ratio": 1.5984251968503937, "no_speech_prob": 2.585011679911986e-05}, {"id": 1663, "seek": 442776, "start": 4433.68, "end": 4435.0, "text": " Thank you.", "tokens": [1044, 291, 13], "temperature": 0.0, "avg_logprob": -0.1254879263944404, "compression_ratio": 1.5984251968503937, "no_speech_prob": 2.585011679911986e-05}, {"id": 1664, "seek": 442776, "start": 4435.0, "end": 4439.2, "text": " I feel that Scala is often a very nicely designed language", "tokens": [286, 841, 300, 2747, 5159, 307, 2049, 257, 588, 9594, 4761, 2856], "temperature": 0.0, "avg_logprob": -0.1254879263944404, "compression_ratio": 1.5984251968503937, "no_speech_prob": 2.585011679911986e-05}, {"id": 1665, "seek": 442776, "start": 4439.2, "end": 4442.04, "text": " that my knowledge doesn't lack in terms of the features I've seen", "tokens": [300, 452, 3601, 1177, 380, 5011, 294, 2115, 295, 264, 4122, 286, 600, 1612], "temperature": 0.0, "avg_logprob": -0.1254879263944404, "compression_ratio": 1.5984251968503937, "no_speech_prob": 2.585011679911986e-05}, {"id": 1666, "seek": 442776, "start": 4442.04, "end": 4443.320000000001, "text": " so far in Swift.", "tokens": [370, 1400, 294, 25539, 13], "temperature": 0.0, "avg_logprob": -0.1254879263944404, "compression_ratio": 1.5984251968503937, "no_speech_prob": 2.585011679911986e-05}, {"id": 1667, "seek": 442776, "start": 4443.320000000001, "end": 4445.88, "text": " Is that true, and if so, is the choice of Swift more", "tokens": [1119, 300, 2074, 11, 293, 498, 370, 11, 307, 264, 3922, 295, 25539, 544], "temperature": 0.0, "avg_logprob": -0.1254879263944404, "compression_ratio": 1.5984251968503937, "no_speech_prob": 2.585011679911986e-05}, {"id": 1668, "seek": 442776, "start": 4445.88, "end": 4450.280000000001, "text": " about JVM as opposed to non-JVM runtimes and compilers?", "tokens": [466, 508, 53, 44, 382, 8851, 281, 2107, 12, 41, 53, 44, 49435, 1532, 293, 715, 388, 433, 30], "temperature": 0.0, "avg_logprob": -0.1254879263944404, "compression_ratio": 1.5984251968503937, "no_speech_prob": 2.585011679911986e-05}, {"id": 1669, "seek": 442776, "start": 4450.280000000001, "end": 4452.2, "text": " Yeah, so Scala's a great language.", "tokens": [865, 11, 370, 2747, 5159, 311, 257, 869, 2856, 13], "temperature": 0.0, "avg_logprob": -0.1254879263944404, "compression_ratio": 1.5984251968503937, "no_speech_prob": 2.585011679911986e-05}, {"id": 1670, "seek": 442776, "start": 4452.2, "end": 4457.400000000001, "text": " Scala is one of my, the way I explain Scala is", "tokens": [2747, 5159, 307, 472, 295, 452, 11, 264, 636, 286, 2903, 2747, 5159, 307], "temperature": 0.0, "avg_logprob": -0.1254879263944404, "compression_ratio": 1.5984251968503937, "no_speech_prob": 2.585011679911986e-05}, {"id": 1671, "seek": 445740, "start": 4457.4, "end": 4460.44, "text": " that they are very generous in the features they accept.", "tokens": [300, 436, 366, 588, 14537, 294, 264, 4122, 436, 3241, 13], "temperature": 0.0, "avg_logprob": -0.12549146283574464, "compression_ratio": 1.6570397111913358, "no_speech_prob": 7.182276931416709e-06}, {"id": 1672, "seek": 445740, "start": 4460.44, "end": 4465.719999999999, "text": " They're undergoing a big redesign of the language to kind", "tokens": [814, 434, 40033, 257, 955, 39853, 295, 264, 2856, 281, 733], "temperature": 0.0, "avg_logprob": -0.12549146283574464, "compression_ratio": 1.6570397111913358, "no_speech_prob": 7.182276931416709e-06}, {"id": 1673, "seek": 445740, "start": 4465.719999999999, "end": 4468.879999999999, "text": " of cut it down and try to make the features more sensible", "tokens": [295, 1723, 309, 760, 293, 853, 281, 652, 264, 4122, 544, 25380], "temperature": 0.0, "avg_logprob": -0.12549146283574464, "compression_ratio": 1.6570397111913358, "no_speech_prob": 7.182276931416709e-06}, {"id": 1674, "seek": 445740, "start": 4468.879999999999, "end": 4470.719999999999, "text": " and stack up nicely together.", "tokens": [293, 8630, 493, 9594, 1214, 13], "temperature": 0.0, "avg_logprob": -0.12549146283574464, "compression_ratio": 1.6570397111913358, "no_speech_prob": 7.182276931416709e-06}, {"id": 1675, "seek": 445740, "start": 4470.719999999999, "end": 4473.679999999999, "text": " Swift and Scala have a lot of similarities in some places,", "tokens": [25539, 293, 2747, 5159, 362, 257, 688, 295, 24197, 294, 512, 3190, 11], "temperature": 0.0, "avg_logprob": -0.12549146283574464, "compression_ratio": 1.6570397111913358, "no_speech_prob": 7.182276931416709e-06}, {"id": 1676, "seek": 445740, "start": 4473.679999999999, "end": 4475.4, "text": " and they diverge wildly in other places.", "tokens": [293, 436, 18558, 432, 34731, 294, 661, 3190, 13], "temperature": 0.0, "avg_logprob": -0.12549146283574464, "compression_ratio": 1.6570397111913358, "no_speech_prob": 7.182276931416709e-06}, {"id": 1677, "seek": 445740, "start": 4475.4, "end": 4477.48, "text": " I mean, I would say there's a, you know,", "tokens": [286, 914, 11, 286, 576, 584, 456, 311, 257, 11, 291, 458, 11], "temperature": 0.0, "avg_logprob": -0.12549146283574464, "compression_ratio": 1.6570397111913358, "no_speech_prob": 7.182276931416709e-06}, {"id": 1678, "seek": 445740, "start": 4477.48, "end": 4480.32, "text": " I feel like anybody doing this course understands the value", "tokens": [286, 841, 411, 4472, 884, 341, 1164, 15146, 264, 2158], "temperature": 0.0, "avg_logprob": -0.12549146283574464, "compression_ratio": 1.6570397111913358, "no_speech_prob": 7.182276931416709e-06}, {"id": 1679, "seek": 445740, "start": 4480.32, "end": 4483.839999999999, "text": " of tasteful curation because PyTorch is very tastefully", "tokens": [295, 3939, 906, 1262, 399, 570, 9953, 51, 284, 339, 307, 588, 3939, 2277], "temperature": 0.0, "avg_logprob": -0.12549146283574464, "compression_ratio": 1.6570397111913358, "no_speech_prob": 7.182276931416709e-06}, {"id": 1680, "seek": 448384, "start": 4483.84, "end": 4488.28, "text": " curated and TensorFlow might not be.", "tokens": [47851, 293, 37624, 1062, 406, 312, 13], "temperature": 0.0, "avg_logprob": -0.131830567580003, "compression_ratio": 1.6175438596491227, "no_speech_prob": 5.68179166293703e-06}, {"id": 1681, "seek": 448384, "start": 4488.28, "end": 4490.92, "text": " And so, like, using a tastefully curated,", "tokens": [400, 370, 11, 411, 11, 1228, 257, 3939, 2277, 47851, 11], "temperature": 0.0, "avg_logprob": -0.131830567580003, "compression_ratio": 1.6175438596491227, "no_speech_prob": 5.68179166293703e-06}, {"id": 1682, "seek": 448384, "start": 4490.92, "end": 4495.360000000001, "text": " carefully put together API like Swift has and like PyTorch has,", "tokens": [7500, 829, 1214, 9362, 411, 25539, 575, 293, 411, 9953, 51, 284, 339, 575, 11], "temperature": 0.0, "avg_logprob": -0.131830567580003, "compression_ratio": 1.6175438596491227, "no_speech_prob": 5.68179166293703e-06}, {"id": 1683, "seek": 448384, "start": 4495.360000000001, "end": 4497.0, "text": " I think it makes life easier for us", "tokens": [286, 519, 309, 1669, 993, 3571, 337, 505], "temperature": 0.0, "avg_logprob": -0.131830567580003, "compression_ratio": 1.6175438596491227, "no_speech_prob": 5.68179166293703e-06}, {"id": 1684, "seek": 448384, "start": 4497.0, "end": 4498.96, "text": " as data scientists and programmers.", "tokens": [382, 1412, 7708, 293, 41504, 13], "temperature": 0.0, "avg_logprob": -0.131830567580003, "compression_ratio": 1.6175438596491227, "no_speech_prob": 5.68179166293703e-06}, {"id": 1685, "seek": 448384, "start": 4498.96, "end": 4501.88, "text": " Yeah, but I think the other point is also very good.", "tokens": [865, 11, 457, 286, 519, 264, 661, 935, 307, 611, 588, 665, 13], "temperature": 0.0, "avg_logprob": -0.131830567580003, "compression_ratio": 1.6175438596491227, "no_speech_prob": 5.68179166293703e-06}, {"id": 1686, "seek": 448384, "start": 4501.88, "end": 4505.04, "text": " So, Scala is very strong in the JVM,", "tokens": [407, 11, 2747, 5159, 307, 588, 2068, 294, 264, 508, 53, 44, 11], "temperature": 0.0, "avg_logprob": -0.131830567580003, "compression_ratio": 1.6175438596491227, "no_speech_prob": 5.68179166293703e-06}, {"id": 1687, "seek": 448384, "start": 4505.04, "end": 4507.76, "text": " Java virtual machine ecosystem, and it works very well", "tokens": [10745, 6374, 3479, 11311, 11, 293, 309, 1985, 588, 731], "temperature": 0.0, "avg_logprob": -0.131830567580003, "compression_ratio": 1.6175438596491227, "no_speech_prob": 5.68179166293703e-06}, {"id": 1688, "seek": 448384, "start": 4507.76, "end": 4511.08, "text": " with all the Java APIs, and it's great in that space.", "tokens": [365, 439, 264, 10745, 21445, 11, 293, 309, 311, 869, 294, 300, 1901, 13], "temperature": 0.0, "avg_logprob": -0.131830567580003, "compression_ratio": 1.6175438596491227, "no_speech_prob": 5.68179166293703e-06}, {"id": 1689, "seek": 448384, "start": 4511.08, "end": 4513.64, "text": " Swift is really great if you don't want to wait", "tokens": [25539, 307, 534, 869, 498, 291, 500, 380, 528, 281, 1699], "temperature": 0.0, "avg_logprob": -0.131830567580003, "compression_ratio": 1.6175438596491227, "no_speech_prob": 5.68179166293703e-06}, {"id": 1690, "seek": 451364, "start": 4513.64, "end": 4516.56, "text": " for JVM to start up so you can run a script, right?", "tokens": [337, 508, 53, 44, 281, 722, 493, 370, 291, 393, 1190, 257, 5755, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.15395805303998988, "compression_ratio": 1.5927152317880795, "no_speech_prob": 5.143348971614614e-05}, {"id": 1691, "seek": 451364, "start": 4516.56, "end": 4520.0, "text": " And so, there's nice duels and they have different strengths", "tokens": [400, 370, 11, 456, 311, 1481, 1581, 1625, 293, 436, 362, 819, 16986], "temperature": 0.0, "avg_logprob": -0.15395805303998988, "compression_ratio": 1.5927152317880795, "no_speech_prob": 5.143348971614614e-05}, {"id": 1692, "seek": 451364, "start": 4520.0, "end": 4521.280000000001, "text": " and weaknesses in that sense.", "tokens": [293, 24381, 294, 300, 2020, 13], "temperature": 0.0, "avg_logprob": -0.15395805303998988, "compression_ratio": 1.5927152317880795, "no_speech_prob": 5.143348971614614e-05}, {"id": 1693, "seek": 451364, "start": 4521.280000000001, "end": 4522.6, "text": " So, do we have time before our break", "tokens": [407, 11, 360, 321, 362, 565, 949, 527, 1821], "temperature": 0.0, "avg_logprob": -0.15395805303998988, "compression_ratio": 1.5927152317880795, "no_speech_prob": 5.143348971614614e-05}, {"id": 1694, "seek": 451364, "start": 4522.6, "end": 4524.92, "text": " that I can quickly show how this all goes together?", "tokens": [300, 286, 393, 2661, 855, 577, 341, 439, 1709, 1214, 30], "temperature": 0.0, "avg_logprob": -0.15395805303998988, "compression_ratio": 1.5927152317880795, "no_speech_prob": 5.143348971614614e-05}, {"id": 1695, "seek": 451364, "start": 4524.92, "end": 4526.240000000001, "text": " Great.", "tokens": [3769, 13], "temperature": 0.0, "avg_logprob": -0.15395805303998988, "compression_ratio": 1.5927152317880795, "no_speech_prob": 5.143348971614614e-05}, {"id": 1696, "seek": 451364, "start": 4526.240000000001, "end": 4528.88, "text": " I probably can't stop you even if I wanted to.", "tokens": [286, 1391, 393, 380, 1590, 291, 754, 498, 286, 1415, 281, 13], "temperature": 0.0, "avg_logprob": -0.15395805303998988, "compression_ratio": 1.5927152317880795, "no_speech_prob": 5.143348971614614e-05}, {"id": 1697, "seek": 451364, "start": 4528.88, "end": 4536.0, "text": " So, just to come back to this HC, right,", "tokens": [407, 11, 445, 281, 808, 646, 281, 341, 30440, 11, 558, 11], "temperature": 0.0, "avg_logprob": -0.15395805303998988, "compression_ratio": 1.5927152317880795, "no_speech_prob": 5.143348971614614e-05}, {"id": 1698, "seek": 451364, "start": 4536.0, "end": 4537.360000000001, "text": " you can basically see what's happened here.", "tokens": [291, 393, 1936, 536, 437, 311, 2011, 510, 13], "temperature": 0.0, "avg_logprob": -0.15395805303998988, "compression_ratio": 1.5927152317880795, "no_speech_prob": 5.143348971614614e-05}, {"id": 1699, "seek": 451364, "start": 4537.360000000001, "end": 4539.160000000001, "text": " We defined this protocol saying these are the things", "tokens": [492, 7642, 341, 10336, 1566, 613, 366, 264, 721], "temperature": 0.0, "avg_logprob": -0.15395805303998988, "compression_ratio": 1.5927152317880795, "no_speech_prob": 5.143348971614614e-05}, {"id": 1700, "seek": 451364, "start": 4539.160000000001, "end": 4542.92, "text": " that we want to have in a data box API, and then we said,", "tokens": [300, 321, 528, 281, 362, 294, 257, 1412, 2424, 9362, 11, 293, 550, 321, 848, 11], "temperature": 0.0, "avg_logprob": -0.15395805303998988, "compression_ratio": 1.5927152317880795, "no_speech_prob": 5.143348971614614e-05}, {"id": 1701, "seek": 454292, "start": 4542.92, "end": 4547.04, "text": " here is a specific example of a data box API.", "tokens": [510, 307, 257, 2685, 1365, 295, 257, 1412, 2424, 9362, 13], "temperature": 0.0, "avg_logprob": -0.13695204062540023, "compression_ratio": 1.5984848484848484, "no_speech_prob": 5.954535936325556e-06}, {"id": 1702, "seek": 454292, "start": 4547.04, "end": 4550.4, "text": " Now, at this point, we're missing one important thing,", "tokens": [823, 11, 412, 341, 935, 11, 321, 434, 5361, 472, 1021, 551, 11], "temperature": 0.0, "avg_logprob": -0.13695204062540023, "compression_ratio": 1.5984848484848484, "no_speech_prob": 5.954535936325556e-06}, {"id": 1703, "seek": 454292, "start": 4550.4, "end": 4552.36, "text": " which we've never actually created a bit that says,", "tokens": [597, 321, 600, 1128, 767, 2942, 257, 857, 300, 1619, 11], "temperature": 0.0, "avg_logprob": -0.13695204062540023, "compression_ratio": 1.5984848484848484, "no_speech_prob": 5.954535936325556e-06}, {"id": 1704, "seek": 454292, "start": 4552.36, "end": 4555.76, "text": " this is how you open an image and resize it", "tokens": [341, 307, 577, 291, 1269, 364, 3256, 293, 50069, 309], "temperature": 0.0, "avg_logprob": -0.13695204062540023, "compression_ratio": 1.5984848484848484, "no_speech_prob": 5.954535936325556e-06}, {"id": 1705, "seek": 454292, "start": 4555.76, "end": 4557.56, "text": " and stuff like that, right?", "tokens": [293, 1507, 411, 300, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.13695204062540023, "compression_ratio": 1.5984848484848484, "no_speech_prob": 5.954535936325556e-06}, {"id": 1706, "seek": 454292, "start": 4557.56, "end": 4562.04, "text": " So, we just go through and we can say, let's call.download,", "tokens": [407, 11, 321, 445, 352, 807, 293, 321, 393, 584, 11, 718, 311, 818, 2411, 5093, 2907, 11], "temperature": 0.0, "avg_logprob": -0.13695204062540023, "compression_ratio": 1.5984848484848484, "no_speech_prob": 5.954535936325556e-06}, {"id": 1707, "seek": 454292, "start": 4562.04, "end": 4565.04, "text": " let's call.getitems, and we can create nice,", "tokens": [718, 311, 818, 2411, 847, 270, 9097, 11, 293, 321, 393, 1884, 1481, 11], "temperature": 0.0, "avg_logprob": -0.13695204062540023, "compression_ratio": 1.5984848484848484, "no_speech_prob": 5.954535936325556e-06}, {"id": 1708, "seek": 454292, "start": 4565.04, "end": 4566.4, "text": " simple little functions now.", "tokens": [2199, 707, 6828, 586, 13], "temperature": 0.0, "avg_logprob": -0.13695204062540023, "compression_ratio": 1.5984848484848484, "no_speech_prob": 5.954535936325556e-06}, {"id": 1709, "seek": 454292, "start": 4566.4, "end": 4569.84, "text": " We don't have to create complex class hierarchies to say things", "tokens": [492, 500, 380, 362, 281, 1884, 3997, 1508, 35250, 530, 281, 584, 721], "temperature": 0.0, "avg_logprob": -0.13695204062540023, "compression_ratio": 1.5984848484848484, "no_speech_prob": 5.954535936325556e-06}, {"id": 1710, "seek": 456984, "start": 4569.84, "end": 4574.12, "text": " like tell me about some sample and it prints it out, right?", "tokens": [411, 980, 385, 466, 512, 6889, 293, 309, 22305, 309, 484, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.10468530983760439, "compression_ratio": 1.820069204152249, "no_speech_prob": 5.954966127319494e-06}, {"id": 1711, "seek": 456984, "start": 4574.12, "end": 4577.64, "text": " And we can create a single little function", "tokens": [400, 321, 393, 1884, 257, 2167, 707, 2445], "temperature": 0.0, "avg_logprob": -0.10468530983760439, "compression_ratio": 1.820069204152249, "no_speech_prob": 5.954966127319494e-06}, {"id": 1712, "seek": 456984, "start": 4577.64, "end": 4580.16, "text": " which creates a train and a valid.", "tokens": [597, 7829, 257, 3847, 293, 257, 7363, 13], "temperature": 0.0, "avg_logprob": -0.10468530983760439, "compression_ratio": 1.820069204152249, "no_speech_prob": 5.954966127319494e-06}, {"id": 1713, "seek": 456984, "start": 4580.16, "end": 4581.4400000000005, "text": " This is neat, right?", "tokens": [639, 307, 10654, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.10468530983760439, "compression_ratio": 1.820069204152249, "no_speech_prob": 5.954966127319494e-06}, {"id": 1714, "seek": 456984, "start": 4581.4400000000005, "end": 4582.76, "text": " This is something I really like about this style", "tokens": [639, 307, 746, 286, 534, 411, 466, 341, 3758], "temperature": 0.0, "avg_logprob": -0.10468530983760439, "compression_ratio": 1.820069204152249, "no_speech_prob": 5.954966127319494e-06}, {"id": 1715, "seek": 456984, "start": 4582.76, "end": 4586.52, "text": " of programming is this is a named tuple.", "tokens": [295, 9410, 307, 341, 307, 257, 4926, 2604, 781, 13], "temperature": 0.0, "avg_logprob": -0.10468530983760439, "compression_ratio": 1.820069204152249, "no_speech_prob": 5.954966127319494e-06}, {"id": 1716, "seek": 456984, "start": 4586.52, "end": 4588.2, "text": " And I really like this idea that we don't have", "tokens": [400, 286, 534, 411, 341, 1558, 300, 321, 500, 380, 362], "temperature": 0.0, "avg_logprob": -0.10468530983760439, "compression_ratio": 1.820069204152249, "no_speech_prob": 5.954966127319494e-06}, {"id": 1717, "seek": 456984, "start": 4588.2, "end": 4590.96, "text": " to create our own struct and class all the time.", "tokens": [281, 1884, 527, 1065, 6594, 293, 1508, 439, 264, 565, 13], "temperature": 0.0, "avg_logprob": -0.10468530983760439, "compression_ratio": 1.820069204152249, "no_speech_prob": 5.954966127319494e-06}, {"id": 1718, "seek": 456984, "start": 4590.96, "end": 4593.8, "text": " It's kind of a very functional style of programming", "tokens": [467, 311, 733, 295, 257, 588, 11745, 3758, 295, 9410], "temperature": 0.0, "avg_logprob": -0.10468530983760439, "compression_ratio": 1.820069204152249, "no_speech_prob": 5.954966127319494e-06}, {"id": 1719, "seek": 456984, "start": 4593.8, "end": 4596.4800000000005, "text": " where you just say, I'm just going to define my type", "tokens": [689, 291, 445, 584, 11, 286, 478, 445, 516, 281, 6964, 452, 2010], "temperature": 0.0, "avg_logprob": -0.10468530983760439, "compression_ratio": 1.820069204152249, "no_speech_prob": 5.954966127319494e-06}, {"id": 1720, "seek": 456984, "start": 4596.4800000000005, "end": 4597.8, "text": " as soon as I need it.", "tokens": [382, 2321, 382, 286, 643, 309, 13], "temperature": 0.0, "avg_logprob": -0.10468530983760439, "compression_ratio": 1.820069204152249, "no_speech_prob": 5.954966127319494e-06}, {"id": 1721, "seek": 456984, "start": 4597.8, "end": 4599.76, "text": " And this type is defined as being a thing with a train", "tokens": [400, 341, 2010, 307, 7642, 382, 885, 257, 551, 365, 257, 3847], "temperature": 0.0, "avg_logprob": -0.10468530983760439, "compression_ratio": 1.820069204152249, "no_speech_prob": 5.954966127319494e-06}, {"id": 1722, "seek": 459976, "start": 4599.76, "end": 4600.84, "text": " and a thing with a valid.", "tokens": [293, 257, 551, 365, 257, 7363, 13], "temperature": 0.0, "avg_logprob": -0.1225422709441382, "compression_ratio": 1.808, "no_speech_prob": 1.0782857316371519e-05}, {"id": 1723, "seek": 459976, "start": 4600.84, "end": 4603.280000000001, "text": " So, as soon as I whack brackets around,", "tokens": [407, 11, 382, 2321, 382, 286, 42877, 26179, 926, 11], "temperature": 0.0, "avg_logprob": -0.1225422709441382, "compression_ratio": 1.808, "no_speech_prob": 1.0782857316371519e-05}, {"id": 1724, "seek": 459976, "start": 4603.280000000001, "end": 4606.64, "text": " parentheses around this, it's both a type and a thing now.", "tokens": [34153, 926, 341, 11, 309, 311, 1293, 257, 2010, 293, 257, 551, 586, 13], "temperature": 0.0, "avg_logprob": -0.1225422709441382, "compression_ratio": 1.808, "no_speech_prob": 1.0782857316371519e-05}, {"id": 1725, "seek": 459976, "start": 4606.64, "end": 4610.2, "text": " And so now I can partition into train and valid,", "tokens": [400, 370, 586, 286, 393, 24808, 666, 3847, 293, 7363, 11], "temperature": 0.0, "avg_logprob": -0.1225422709441382, "compression_ratio": 1.808, "no_speech_prob": 1.0782857316371519e-05}, {"id": 1726, "seek": 459976, "start": 4610.2, "end": 4614.56, "text": " and that's returned something where I can grab a random element", "tokens": [293, 300, 311, 8752, 746, 689, 286, 393, 4444, 257, 4974, 4478], "temperature": 0.0, "avg_logprob": -0.1225422709441382, "compression_ratio": 1.808, "no_speech_prob": 1.0782857316371519e-05}, {"id": 1727, "seek": 459976, "start": 4614.56, "end": 4617.68, "text": " from valid and a random element from train.", "tokens": [490, 7363, 293, 257, 4974, 4478, 490, 3847, 13], "temperature": 0.0, "avg_logprob": -0.1225422709441382, "compression_ratio": 1.808, "no_speech_prob": 1.0782857316371519e-05}, {"id": 1728, "seek": 459976, "start": 4617.68, "end": 4621.360000000001, "text": " We can create a processor, again, it's just a protocol, right?", "tokens": [492, 393, 1884, 257, 15321, 11, 797, 11, 309, 311, 445, 257, 10336, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1225422709441382, "compression_ratio": 1.808, "no_speech_prob": 1.0782857316371519e-05}, {"id": 1729, "seek": 459976, "start": 4621.360000000001, "end": 4626.6, "text": " So, remember a processor is a thing like for categories,", "tokens": [407, 11, 1604, 257, 15321, 307, 257, 551, 411, 337, 10479, 11], "temperature": 0.0, "avg_logprob": -0.1225422709441382, "compression_ratio": 1.808, "no_speech_prob": 1.0782857316371519e-05}, {"id": 1730, "seek": 459976, "start": 4626.6, "end": 4629.68, "text": " creating a vocab of all of the possible categories", "tokens": [4084, 257, 2329, 455, 295, 439, 295, 264, 1944, 10479], "temperature": 0.0, "avg_logprob": -0.1225422709441382, "compression_ratio": 1.808, "no_speech_prob": 1.0782857316371519e-05}, {"id": 1731, "seek": 462968, "start": 4629.68, "end": 4632.76, "text": " and so a processor is something where there's some way to say", "tokens": [293, 370, 257, 15321, 307, 746, 689, 456, 311, 512, 636, 281, 584], "temperature": 0.0, "avg_logprob": -0.15584063336132017, "compression_ratio": 1.715415019762846, "no_speech_prob": 1.0782152457977645e-05}, {"id": 1732, "seek": 462968, "start": 4632.76, "end": 4634.400000000001, "text": " like what is the vocab?", "tokens": [411, 437, 307, 264, 2329, 455, 30], "temperature": 0.0, "avg_logprob": -0.15584063336132017, "compression_ratio": 1.715415019762846, "no_speech_prob": 1.0782152457977645e-05}, {"id": 1733, "seek": 462968, "start": 4634.400000000001, "end": 4638.92, "text": " And if you have a vocab then process things from text", "tokens": [400, 498, 291, 362, 257, 2329, 455, 550, 1399, 721, 490, 2487], "temperature": 0.0, "avg_logprob": -0.15584063336132017, "compression_ratio": 1.715415019762846, "no_speech_prob": 1.0782152457977645e-05}, {"id": 1734, "seek": 462968, "start": 4638.92, "end": 4643.04, "text": " into numbers or de-process things from numbers into text.", "tokens": [666, 3547, 420, 368, 12, 41075, 721, 490, 3547, 666, 2487, 13], "temperature": 0.0, "avg_logprob": -0.15584063336132017, "compression_ratio": 1.715415019762846, "no_speech_prob": 1.0782152457977645e-05}, {"id": 1735, "seek": 462968, "start": 4643.04, "end": 4647.240000000001, "text": " And so we can now go ahead and create a category processor, right?", "tokens": [400, 370, 321, 393, 586, 352, 2286, 293, 1884, 257, 7719, 15321, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.15584063336132017, "compression_ratio": 1.715415019762846, "no_speech_prob": 1.0782152457977645e-05}, {"id": 1736, "seek": 462968, "start": 4647.240000000001, "end": 4650.72, "text": " So, here's like grab all the unique values and here's label", "tokens": [407, 11, 510, 311, 411, 4444, 439, 264, 3845, 4190, 293, 510, 311, 7645], "temperature": 0.0, "avg_logprob": -0.15584063336132017, "compression_ratio": 1.715415019762846, "no_speech_prob": 1.0782152457977645e-05}, {"id": 1737, "seek": 462968, "start": 4650.72, "end": 4652.72, "text": " to int and here's int to label.", "tokens": [281, 560, 293, 510, 311, 560, 281, 7645, 13], "temperature": 0.0, "avg_logprob": -0.15584063336132017, "compression_ratio": 1.715415019762846, "no_speech_prob": 1.0782152457977645e-05}, {"id": 1738, "seek": 462968, "start": 4652.72, "end": 4654.68, "text": " Why are you using parentheses on your map, Jeremy?", "tokens": [1545, 366, 291, 1228, 34153, 322, 428, 4471, 11, 17809, 30], "temperature": 0.0, "avg_logprob": -0.15584063336132017, "compression_ratio": 1.715415019762846, "no_speech_prob": 1.0782152457977645e-05}, {"id": 1739, "seek": 462968, "start": 4654.68, "end": 4656.0, "text": " Gosh.", "tokens": [19185, 13], "temperature": 0.0, "avg_logprob": -0.15584063336132017, "compression_ratio": 1.715415019762846, "no_speech_prob": 1.0782152457977645e-05}, {"id": 1740, "seek": 462968, "start": 4656.0, "end": 4658.0, "text": " I didn't write that.", "tokens": [286, 994, 380, 2464, 300, 13], "temperature": 0.0, "avg_logprob": -0.15584063336132017, "compression_ratio": 1.715415019762846, "no_speech_prob": 1.0782152457977645e-05}, {"id": 1741, "seek": 465800, "start": 4658.0, "end": 4660.28, "text": " There we go, yeah.", "tokens": [821, 321, 352, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.15155599203454442, "compression_ratio": 1.6374269005847952, "no_speech_prob": 5.771754331362899e-06}, {"id": 1742, "seek": 465800, "start": 4660.28, "end": 4670.92, "text": " So, now that we have a category processor, we can try using it", "tokens": [407, 11, 586, 300, 321, 362, 257, 7719, 15321, 11, 321, 393, 853, 1228, 309], "temperature": 0.0, "avg_logprob": -0.15155599203454442, "compression_ratio": 1.6374269005847952, "no_speech_prob": 5.771754331362899e-06}, {"id": 1743, "seek": 465800, "start": 4670.92, "end": 4673.32, "text": " to make sure that it looks sensible.", "tokens": [281, 652, 988, 300, 309, 1542, 25380, 13], "temperature": 0.0, "avg_logprob": -0.15155599203454442, "compression_ratio": 1.6374269005847952, "no_speech_prob": 5.771754331362899e-06}, {"id": 1744, "seek": 465800, "start": 4673.32, "end": 4678.44, "text": " And we can now label and process our data.", "tokens": [400, 321, 393, 586, 7645, 293, 1399, 527, 1412, 13], "temperature": 0.0, "avg_logprob": -0.15155599203454442, "compression_ratio": 1.6374269005847952, "no_speech_prob": 5.771754331362899e-06}, {"id": 1745, "seek": 465800, "start": 4678.44, "end": 4683.32, "text": " So, we first have to call label and then we have to call process.", "tokens": [407, 11, 321, 700, 362, 281, 818, 7645, 293, 550, 321, 362, 281, 818, 1399, 13], "temperature": 0.0, "avg_logprob": -0.15155599203454442, "compression_ratio": 1.6374269005847952, "no_speech_prob": 5.771754331362899e-06}, {"id": 1746, "seek": 465800, "start": 4683.32, "end": 4685.64, "text": " Now, given that we have to do those things in a row,", "tokens": [823, 11, 2212, 300, 321, 362, 281, 360, 729, 721, 294, 257, 5386, 11], "temperature": 0.0, "avg_logprob": -0.15155599203454442, "compression_ratio": 1.6374269005847952, "no_speech_prob": 5.771754331362899e-06}, {"id": 1747, "seek": 468564, "start": 4685.64, "end": 4689.92, "text": " rather than creating whole new API functions,", "tokens": [2831, 813, 4084, 1379, 777, 9362, 6828, 11], "temperature": 0.0, "avg_logprob": -0.10821648940299321, "compression_ratio": 1.7445887445887447, "no_speech_prob": 7.646051926712971e-06}, {"id": 1748, "seek": 468564, "start": 4689.92, "end": 4692.88, "text": " we can actually just use function composition.", "tokens": [321, 393, 767, 445, 764, 2445, 12686, 13], "temperature": 0.0, "avg_logprob": -0.10821648940299321, "compression_ratio": 1.7445887445887447, "no_speech_prob": 7.646051926712971e-06}, {"id": 1749, "seek": 468564, "start": 4692.88, "end": 4698.320000000001, "text": " Now, in PyTorch we've often used a thing called compose,", "tokens": [823, 11, 294, 9953, 51, 284, 339, 321, 600, 2049, 1143, 257, 551, 1219, 35925, 11], "temperature": 0.0, "avg_logprob": -0.10821648940299321, "compression_ratio": 1.7445887445887447, "no_speech_prob": 7.646051926712971e-06}, {"id": 1750, "seek": 468564, "start": 4698.320000000001, "end": 4701.0, "text": " but actually it turns out to be much easier as you'll see", "tokens": [457, 767, 309, 4523, 484, 281, 312, 709, 3571, 382, 291, 603, 536], "temperature": 0.0, "avg_logprob": -0.10821648940299321, "compression_ratio": 1.7445887445887447, "no_speech_prob": 7.646051926712971e-06}, {"id": 1751, "seek": 468564, "start": 4701.0, "end": 4703.04, "text": " if you don't create a function called compose", "tokens": [498, 291, 500, 380, 1884, 257, 2445, 1219, 35925], "temperature": 0.0, "avg_logprob": -0.10821648940299321, "compression_ratio": 1.7445887445887447, "no_speech_prob": 7.646051926712971e-06}, {"id": 1752, "seek": 468564, "start": 4703.04, "end": 4705.4400000000005, "text": " but you actually create an operator.", "tokens": [457, 291, 767, 1884, 364, 12973, 13], "temperature": 0.0, "avg_logprob": -0.10821648940299321, "compression_ratio": 1.7445887445887447, "no_speech_prob": 7.646051926712971e-06}, {"id": 1753, "seek": 468564, "start": 4705.4400000000005, "end": 4709.240000000001, "text": " And so here's an operator which we will call compose, right?", "tokens": [400, 370, 510, 311, 364, 12973, 597, 321, 486, 818, 35925, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.10821648940299321, "compression_ratio": 1.7445887445887447, "no_speech_prob": 7.646051926712971e-06}, {"id": 1754, "seek": 468564, "start": 4709.240000000001, "end": 4713.280000000001, "text": " Which is just defined as first call this function f", "tokens": [3013, 307, 445, 7642, 382, 700, 818, 341, 2445, 283], "temperature": 0.0, "avg_logprob": -0.10821648940299321, "compression_ratio": 1.7445887445887447, "no_speech_prob": 7.646051926712971e-06}, {"id": 1755, "seek": 471328, "start": 4713.28, "end": 4717.48, "text": " and then call this function g on whatever the first thing you passed it is.", "tokens": [293, 550, 818, 341, 2445, 290, 322, 2035, 264, 700, 551, 291, 4678, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.13432792822519937, "compression_ratio": 1.7168141592920354, "no_speech_prob": 7.6461692515295e-06}, {"id": 1756, "seek": 471328, "start": 4717.48, "end": 4721.08, "text": " So, now we have to find a new function composition", "tokens": [407, 11, 586, 321, 362, 281, 915, 257, 777, 2445, 12686], "temperature": 0.0, "avg_logprob": -0.13432792822519937, "compression_ratio": 1.7168141592920354, "no_speech_prob": 7.6461692515295e-06}, {"id": 1757, "seek": 471328, "start": 4721.08, "end": 4724.28, "text": " which first labels and then processes.", "tokens": [597, 700, 16949, 293, 550, 7555, 13], "temperature": 0.0, "avg_logprob": -0.13432792822519937, "compression_ratio": 1.7168141592920354, "no_speech_prob": 7.6461692515295e-06}, {"id": 1758, "seek": 471328, "start": 4724.28, "end": 4729.92, "text": " And so now here's something which does both and so we can map, right?", "tokens": [400, 370, 586, 510, 311, 746, 597, 775, 1293, 293, 370, 321, 393, 4471, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.13432792822519937, "compression_ratio": 1.7168141592920354, "no_speech_prob": 7.6461692515295e-06}, {"id": 1759, "seek": 471328, "start": 4729.92, "end": 4733.96, "text": " So, we don't have to create again all these classes", "tokens": [407, 11, 321, 500, 380, 362, 281, 1884, 797, 439, 613, 5359], "temperature": 0.0, "avg_logprob": -0.13432792822519937, "compression_ratio": 1.7168141592920354, "no_speech_prob": 7.6461692515295e-06}, {"id": 1760, "seek": 471328, "start": 4733.96, "end": 4735.4, "text": " and special purpose functions.", "tokens": [293, 2121, 4334, 6828, 13], "temperature": 0.0, "avg_logprob": -0.13432792822519937, "compression_ratio": 1.7168141592920354, "no_speech_prob": 7.6461692515295e-06}, {"id": 1761, "seek": 471328, "start": 4735.4, "end": 4740.599999999999, "text": " We're just putting together function composition and map to label all", "tokens": [492, 434, 445, 3372, 1214, 2445, 12686, 293, 4471, 281, 7645, 439], "temperature": 0.0, "avg_logprob": -0.13432792822519937, "compression_ratio": 1.7168141592920354, "no_speech_prob": 7.6461692515295e-06}, {"id": 1762, "seek": 474060, "start": 4740.6, "end": 4744.4800000000005, "text": " of our training data and all of our validation data.", "tokens": [295, 527, 3097, 1412, 293, 439, 295, 527, 24071, 1412, 13], "temperature": 0.0, "avg_logprob": -0.14649027936598835, "compression_ratio": 1.8735177865612649, "no_speech_prob": 1.0289003512298223e-05}, {"id": 1763, "seek": 474060, "start": 4744.4800000000005, "end": 4748.88, "text": " And so then finally, we can say, well, this is the final structure we want.", "tokens": [400, 370, 550, 2721, 11, 321, 393, 584, 11, 731, 11, 341, 307, 264, 2572, 3877, 321, 528, 13], "temperature": 0.0, "avg_logprob": -0.14649027936598835, "compression_ratio": 1.8735177865612649, "no_speech_prob": 1.0289003512298223e-05}, {"id": 1764, "seek": 474060, "start": 4748.88, "end": 4751.92, "text": " We want a training set, we want a validation set,", "tokens": [492, 528, 257, 3097, 992, 11, 321, 528, 257, 24071, 992, 11], "temperature": 0.0, "avg_logprob": -0.14649027936598835, "compression_ratio": 1.8735177865612649, "no_speech_prob": 1.0289003512298223e-05}, {"id": 1765, "seek": 474060, "start": 4751.92, "end": 4755.320000000001, "text": " and let's again create our own little type in line, right?", "tokens": [293, 718, 311, 797, 1884, 527, 1065, 707, 2010, 294, 1622, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.14649027936598835, "compression_ratio": 1.8735177865612649, "no_speech_prob": 1.0289003512298223e-05}, {"id": 1766, "seek": 474060, "start": 4755.320000000001, "end": 4757.0, "text": " So, that's an array of tuples.", "tokens": [407, 11, 300, 311, 364, 10225, 295, 2604, 2622, 13], "temperature": 0.0, "avg_logprob": -0.14649027936598835, "compression_ratio": 1.8735177865612649, "no_speech_prob": 1.0289003512298223e-05}, {"id": 1767, "seek": 474060, "start": 4757.0, "end": 4759.160000000001, "text": " Yeah, so our training set's an array of name tuples,", "tokens": [865, 11, 370, 527, 3097, 992, 311, 364, 10225, 295, 1315, 2604, 2622, 11], "temperature": 0.0, "avg_logprob": -0.14649027936598835, "compression_ratio": 1.8735177865612649, "no_speech_prob": 1.0289003512298223e-05}, {"id": 1768, "seek": 474060, "start": 4759.160000000001, "end": 4762.160000000001, "text": " our validation set is an array of name tuples, and so we're going", "tokens": [527, 24071, 992, 307, 364, 10225, 295, 1315, 2604, 2622, 11, 293, 370, 321, 434, 516], "temperature": 0.0, "avg_logprob": -0.14649027936598835, "compression_ratio": 1.8735177865612649, "no_speech_prob": 1.0289003512298223e-05}, {"id": 1769, "seek": 474060, "start": 4762.160000000001, "end": 4764.4400000000005, "text": " to initialize it by passing both in.", "tokens": [281, 5883, 1125, 309, 538, 8437, 1293, 294, 13], "temperature": 0.0, "avg_logprob": -0.14649027936598835, "compression_ratio": 1.8735177865612649, "no_speech_prob": 1.0289003512298223e-05}, {"id": 1770, "seek": 474060, "start": 4764.4400000000005, "end": 4767.76, "text": " And so this basically is now our data blocks API.", "tokens": [400, 370, 341, 1936, 307, 586, 527, 1412, 8474, 9362, 13], "temperature": 0.0, "avg_logprob": -0.14649027936598835, "compression_ratio": 1.8735177865612649, "no_speech_prob": 1.0289003512298223e-05}, {"id": 1771, "seek": 476776, "start": 4767.76, "end": 4773.4400000000005, "text": " There's a function called make, split, labeled data, and we're just going", "tokens": [821, 311, 257, 2445, 1219, 652, 11, 7472, 11, 21335, 1412, 11, 293, 321, 434, 445, 516], "temperature": 0.0, "avg_logprob": -0.1730240214954723, "compression_ratio": 1.875, "no_speech_prob": 1.3419838978734333e-05}, {"id": 1772, "seek": 476776, "start": 4773.4400000000005, "end": 4777.6, "text": " to pass in one of those configuration protocols we saw.", "tokens": [281, 1320, 294, 472, 295, 729, 11694, 20618, 321, 1866, 13], "temperature": 0.0, "avg_logprob": -0.1730240214954723, "compression_ratio": 1.875, "no_speech_prob": 1.3419838978734333e-05}, {"id": 1773, "seek": 476776, "start": 4777.6, "end": 4782.68, "text": " So, we're going to be passing in the image net configuration protocol,", "tokens": [407, 11, 321, 434, 516, 281, 312, 8437, 294, 264, 3256, 2533, 11694, 10336, 11], "temperature": 0.0, "avg_logprob": -0.1730240214954723, "compression_ratio": 1.875, "no_speech_prob": 1.3419838978734333e-05}, {"id": 1774, "seek": 476776, "start": 4782.68, "end": 4785.12, "text": " the thing that conforms to that protocol.", "tokens": [264, 551, 300, 18975, 82, 281, 300, 10336, 13], "temperature": 0.0, "avg_logprob": -0.1730240214954723, "compression_ratio": 1.875, "no_speech_prob": 1.3419838978734333e-05}, {"id": 1775, "seek": 476776, "start": 4785.12, "end": 4788.4400000000005, "text": " And we're going to be passing in some processor, right?", "tokens": [400, 321, 434, 516, 281, 312, 8437, 294, 512, 15321, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1730240214954723, "compression_ratio": 1.875, "no_speech_prob": 1.3419838978734333e-05}, {"id": 1776, "seek": 476776, "start": 4788.4400000000005, "end": 4790.4400000000005, "text": " Which is going to be a category processor, and it's just going", "tokens": [3013, 307, 516, 281, 312, 257, 7719, 15321, 11, 293, 309, 311, 445, 516], "temperature": 0.0, "avg_logprob": -0.1730240214954723, "compression_ratio": 1.875, "no_speech_prob": 1.3419838978734333e-05}, {"id": 1777, "seek": 476776, "start": 4790.4400000000005, "end": 4796.4800000000005, "text": " to call download, get the items, partition, map, label of,", "tokens": [281, 818, 5484, 11, 483, 264, 4754, 11, 24808, 11, 4471, 11, 7645, 295, 11], "temperature": 0.0, "avg_logprob": -0.1730240214954723, "compression_ratio": 1.875, "no_speech_prob": 1.3419838978734333e-05}, {"id": 1778, "seek": 479648, "start": 4796.48, "end": 4800.08, "text": " and then initialize the processor state, and then do label of,", "tokens": [293, 550, 5883, 1125, 264, 15321, 1785, 11, 293, 550, 360, 7645, 295, 11], "temperature": 0.0, "avg_logprob": -0.1442065319772494, "compression_ratio": 1.690909090909091, "no_speech_prob": 2.9944010293547763e-06}, {"id": 1779, "seek": 479648, "start": 4800.08, "end": 4805.959999999999, "text": " and then process is our processing function, and then map that, right?", "tokens": [293, 550, 1399, 307, 527, 9007, 2445, 11, 293, 550, 4471, 300, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1442065319772494, "compression_ratio": 1.690909090909091, "no_speech_prob": 2.9944010293547763e-06}, {"id": 1780, "seek": 479648, "start": 4805.959999999999, "end": 4807.879999999999, "text": " And so, that's it.", "tokens": [400, 370, 11, 300, 311, 309, 13], "temperature": 0.0, "avg_logprob": -0.1442065319772494, "compression_ratio": 1.690909090909091, "no_speech_prob": 2.9944010293547763e-06}, {"id": 1781, "seek": 479648, "start": 4807.879999999999, "end": 4812.48, "text": " So now, we can say to use this with OpenCV, we define how", "tokens": [407, 586, 11, 321, 393, 584, 281, 764, 341, 365, 7238, 34, 53, 11, 321, 6964, 577], "temperature": 0.0, "avg_logprob": -0.1442065319772494, "compression_ratio": 1.690909090909091, "no_speech_prob": 2.9944010293547763e-06}, {"id": 1782, "seek": 479648, "start": 4812.48, "end": 4815.32, "text": " to open an image, there it is.", "tokens": [281, 1269, 364, 3256, 11, 456, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.1442065319772494, "compression_ratio": 1.690909090909091, "no_speech_prob": 2.9944010293547763e-06}, {"id": 1783, "seek": 479648, "start": 4815.32, "end": 4820.12, "text": " We define how to convert BGR to RGB, because OpenCV uses BGR,", "tokens": [492, 6964, 577, 281, 7620, 363, 23971, 281, 31231, 11, 570, 7238, 34, 53, 4960, 363, 23971, 11], "temperature": 0.0, "avg_logprob": -0.1442065319772494, "compression_ratio": 1.690909090909091, "no_speech_prob": 2.9944010293547763e-06}, {"id": 1784, "seek": 479648, "start": 4820.12, "end": 4821.599999999999, "text": " that's how old it is.", "tokens": [300, 311, 577, 1331, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.1442065319772494, "compression_ratio": 1.690909090909091, "no_speech_prob": 2.9944010293547763e-06}, {"id": 1785, "seek": 479648, "start": 4821.599999999999, "end": 4824.679999999999, "text": " We define the thing that resizes to 224 by 224", "tokens": [492, 6964, 264, 551, 300, 725, 5660, 281, 5853, 19, 538, 5853, 19], "temperature": 0.0, "avg_logprob": -0.1442065319772494, "compression_ratio": 1.690909090909091, "no_speech_prob": 2.9944010293547763e-06}, {"id": 1786, "seek": 482468, "start": 4824.68, "end": 4828.68, "text": " with bilinear interpolation, and so the process of opening an image is", "tokens": [365, 8588, 533, 289, 44902, 399, 11, 293, 370, 264, 1399, 295, 5193, 364, 3256, 307], "temperature": 0.0, "avg_logprob": -0.15282846108461037, "compression_ratio": 1.7173913043478262, "no_speech_prob": 4.1572984628146514e-06}, {"id": 1787, "seek": 482468, "start": 4828.68, "end": 4832.56, "text": " to open, then BGR to RGB, and then resize,", "tokens": [281, 1269, 11, 550, 363, 23971, 281, 31231, 11, 293, 550, 50069, 11], "temperature": 0.0, "avg_logprob": -0.15282846108461037, "compression_ratio": 1.7173913043478262, "no_speech_prob": 4.1572984628146514e-06}, {"id": 1788, "seek": 482468, "start": 4832.56, "end": 4836.4800000000005, "text": " and we compose them all together, and that's it, right?", "tokens": [293, 321, 35925, 552, 439, 1214, 11, 293, 300, 311, 309, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.15282846108461037, "compression_ratio": 1.7173913043478262, "no_speech_prob": 4.1572984628146514e-06}, {"id": 1789, "seek": 482468, "start": 4836.4800000000005, "end": 4842.400000000001, "text": " So now, now that we've got that, we then need to convert it to a tensor.", "tokens": [407, 586, 11, 586, 300, 321, 600, 658, 300, 11, 321, 550, 643, 281, 7620, 309, 281, 257, 40863, 13], "temperature": 0.0, "avg_logprob": -0.15282846108461037, "compression_ratio": 1.7173913043478262, "no_speech_prob": 4.1572984628146514e-06}, {"id": 1790, "seek": 482468, "start": 4842.400000000001, "end": 4845.280000000001, "text": " So, the entire process is to go through all those transforms,", "tokens": [407, 11, 264, 2302, 1399, 307, 281, 352, 807, 439, 729, 35592, 11], "temperature": 0.0, "avg_logprob": -0.15282846108461037, "compression_ratio": 1.7173913043478262, "no_speech_prob": 4.1572984628146514e-06}, {"id": 1791, "seek": 482468, "start": 4845.280000000001, "end": 4847.6, "text": " and then convert to a tensor.", "tokens": [293, 550, 7620, 281, 257, 40863, 13], "temperature": 0.0, "avg_logprob": -0.15282846108461037, "compression_ratio": 1.7173913043478262, "no_speech_prob": 4.1572984628146514e-06}, {"id": 1792, "seek": 482468, "start": 4847.6, "end": 4852.56, "text": " And then, I'll skip over the bit that does the mini-batches.", "tokens": [400, 550, 11, 286, 603, 10023, 670, 264, 857, 300, 775, 264, 8382, 12, 65, 852, 279, 13], "temperature": 0.0, "avg_logprob": -0.15282846108461037, "compression_ratio": 1.7173913043478262, "no_speech_prob": 4.1572984628146514e-06}, {"id": 1793, "seek": 485256, "start": 4852.56, "end": 4855.72, "text": " There's a thing we've got to do the mini-batches", "tokens": [821, 311, 257, 551, 321, 600, 658, 281, 360, 264, 8382, 12, 65, 852, 279], "temperature": 0.0, "avg_logprob": -0.11730809797320449, "compression_ratio": 1.6371308016877637, "no_speech_prob": 6.048710019967984e-06}, {"id": 1794, "seek": 485256, "start": 4855.72, "end": 4859.92, "text": " with that split label data we created, and we then just pass", "tokens": [365, 300, 7472, 7645, 1412, 321, 2942, 11, 293, 321, 550, 445, 1320], "temperature": 0.0, "avg_logprob": -0.11730809797320449, "compression_ratio": 1.6371308016877637, "no_speech_prob": 6.048710019967984e-06}, {"id": 1795, "seek": 485256, "start": 4859.92, "end": 4864.76, "text": " in the transforms that we want, and we're done, right?", "tokens": [294, 264, 35592, 300, 321, 528, 11, 293, 321, 434, 1096, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.11730809797320449, "compression_ratio": 1.6371308016877637, "no_speech_prob": 6.048710019967984e-06}, {"id": 1796, "seek": 485256, "start": 4864.76, "end": 4869.320000000001, "text": " So, the data blocks API in kind of functional-ish,", "tokens": [407, 11, 264, 1412, 8474, 9362, 294, 733, 295, 11745, 12, 742, 11], "temperature": 0.0, "avg_logprob": -0.11730809797320449, "compression_ratio": 1.6371308016877637, "no_speech_prob": 6.048710019967984e-06}, {"id": 1797, "seek": 485256, "start": 4869.320000000001, "end": 4873.400000000001, "text": " protocol-ish Swift, you know, ends up being a lot less code", "tokens": [10336, 12, 742, 25539, 11, 291, 458, 11, 5314, 493, 885, 257, 688, 1570, 3089], "temperature": 0.0, "avg_logprob": -0.11730809797320449, "compression_ratio": 1.6371308016877637, "no_speech_prob": 6.048710019967984e-06}, {"id": 1798, "seek": 485256, "start": 4873.400000000001, "end": 4877.96, "text": " to write, and a lot easier for the end user, because now", "tokens": [281, 2464, 11, 293, 257, 688, 3571, 337, 264, 917, 4195, 11, 570, 586], "temperature": 0.0, "avg_logprob": -0.11730809797320449, "compression_ratio": 1.6371308016877637, "no_speech_prob": 6.048710019967984e-06}, {"id": 1799, "seek": 485256, "start": 4877.96, "end": 4880.84, "text": " for the end user, there's a lot less they have to learn", "tokens": [337, 264, 917, 4195, 11, 456, 311, 257, 688, 1570, 436, 362, 281, 1466], "temperature": 0.0, "avg_logprob": -0.11730809797320449, "compression_ratio": 1.6371308016877637, "no_speech_prob": 6.048710019967984e-06}, {"id": 1800, "seek": 488084, "start": 4880.84, "end": 4882.76, "text": " to use this data blocks API.", "tokens": [281, 764, 341, 1412, 8474, 9362, 13], "temperature": 0.0, "avg_logprob": -0.10668283303578695, "compression_ratio": 1.6840148698884758, "no_speech_prob": 3.2886696317291353e-06}, {"id": 1801, "seek": 488084, "start": 4882.76, "end": 4886.56, "text": " It's really just like the normal kind of maps", "tokens": [467, 311, 534, 445, 411, 264, 2710, 733, 295, 11317], "temperature": 0.0, "avg_logprob": -0.10668283303578695, "compression_ratio": 1.6840148698884758, "no_speech_prob": 3.2886696317291353e-06}, {"id": 1802, "seek": 488084, "start": 4886.56, "end": 4889.8, "text": " and function composition that hopefully they're familiar", "tokens": [293, 2445, 12686, 300, 4696, 436, 434, 4963], "temperature": 0.0, "avg_logprob": -0.10668283303578695, "compression_ratio": 1.6840148698884758, "no_speech_prob": 3.2886696317291353e-06}, {"id": 1803, "seek": 488084, "start": 4889.8, "end": 4891.56, "text": " with as Swift programmers.", "tokens": [365, 382, 25539, 41504, 13], "temperature": 0.0, "avg_logprob": -0.10668283303578695, "compression_ratio": 1.6840148698884758, "no_speech_prob": 3.2886696317291353e-06}, {"id": 1804, "seek": 488084, "start": 4891.56, "end": 4896.04, "text": " So, I'm really excited to see how this came out,", "tokens": [407, 11, 286, 478, 534, 2919, 281, 536, 577, 341, 1361, 484, 11], "temperature": 0.0, "avg_logprob": -0.10668283303578695, "compression_ratio": 1.6840148698884758, "no_speech_prob": 3.2886696317291353e-06}, {"id": 1805, "seek": 488084, "start": 4896.04, "end": 4899.360000000001, "text": " because it solves the problems that I've been battling", "tokens": [570, 309, 39890, 264, 2740, 300, 286, 600, 668, 33752], "temperature": 0.0, "avg_logprob": -0.10668283303578695, "compression_ratio": 1.6840148698884758, "no_speech_prob": 3.2886696317291353e-06}, {"id": 1806, "seek": 488084, "start": 4899.360000000001, "end": 4902.88, "text": " with for the last year with the Python data blocks API,", "tokens": [365, 337, 264, 1036, 1064, 365, 264, 15329, 1412, 8474, 9362, 11], "temperature": 0.0, "avg_logprob": -0.10668283303578695, "compression_ratio": 1.6840148698884758, "no_speech_prob": 3.2886696317291353e-06}, {"id": 1807, "seek": 488084, "start": 4902.88, "end": 4906.04, "text": " and it's been, you know, really just a couple of days of work", "tokens": [293, 309, 311, 668, 11, 291, 458, 11, 534, 445, 257, 1916, 295, 1708, 295, 589], "temperature": 0.0, "avg_logprob": -0.10668283303578695, "compression_ratio": 1.6840148698884758, "no_speech_prob": 3.2886696317291353e-06}, {"id": 1808, "seek": 488084, "start": 4906.04, "end": 4907.32, "text": " to get to this point.", "tokens": [281, 483, 281, 341, 935, 13], "temperature": 0.0, "avg_logprob": -0.10668283303578695, "compression_ratio": 1.6840148698884758, "no_speech_prob": 3.2886696317291353e-06}, {"id": 1809, "seek": 488084, "start": 4907.32, "end": 4909.56, "text": " And one of the things that this points to in Swift", "tokens": [400, 472, 295, 264, 721, 300, 341, 2793, 281, 294, 25539], "temperature": 0.0, "avg_logprob": -0.10668283303578695, "compression_ratio": 1.6840148698884758, "no_speech_prob": 3.2886696317291353e-06}, {"id": 1810, "seek": 490956, "start": 4909.56, "end": 4912.4800000000005, "text": " that is a big focus is on building APIs.", "tokens": [300, 307, 257, 955, 1879, 307, 322, 2390, 21445, 13], "temperature": 0.0, "avg_logprob": -0.1032125981648763, "compression_ratio": 1.715625, "no_speech_prob": 8.799766874290071e-06}, {"id": 1811, "seek": 490956, "start": 4912.4800000000005, "end": 4915.160000000001, "text": " And so, again, we've been talking about this idea", "tokens": [400, 370, 11, 797, 11, 321, 600, 668, 1417, 466, 341, 1558], "temperature": 0.0, "avg_logprob": -0.1032125981648763, "compression_ratio": 1.715625, "no_speech_prob": 8.799766874290071e-06}, {"id": 1812, "seek": 490956, "start": 4915.160000000001, "end": 4917.72, "text": " of being able to take an API, use it,", "tokens": [295, 885, 1075, 281, 747, 364, 9362, 11, 764, 309, 11], "temperature": 0.0, "avg_logprob": -0.1032125981648763, "compression_ratio": 1.715625, "no_speech_prob": 8.799766874290071e-06}, {"id": 1813, "seek": 490956, "start": 4917.72, "end": 4919.0, "text": " without knowing how it works.", "tokens": [1553, 5276, 577, 309, 1985, 13], "temperature": 0.0, "avg_logprob": -0.1032125981648763, "compression_ratio": 1.715625, "no_speech_prob": 8.799766874290071e-06}, {"id": 1814, "seek": 490956, "start": 4919.0, "end": 4920.76, "text": " It could be in C or Python or whatever,", "tokens": [467, 727, 312, 294, 383, 420, 15329, 420, 2035, 11], "temperature": 0.0, "avg_logprob": -0.1032125981648763, "compression_ratio": 1.715625, "no_speech_prob": 8.799766874290071e-06}, {"id": 1815, "seek": 490956, "start": 4920.76, "end": 4923.64, "text": " but it's about building these things that compose together", "tokens": [457, 309, 311, 466, 2390, 613, 721, 300, 35925, 1214], "temperature": 0.0, "avg_logprob": -0.1032125981648763, "compression_ratio": 1.715625, "no_speech_prob": 8.799766874290071e-06}, {"id": 1816, "seek": 490956, "start": 4923.64, "end": 4925.64, "text": " and they fit together in very nice ways.", "tokens": [293, 436, 3318, 1214, 294, 588, 1481, 2098, 13], "temperature": 0.0, "avg_logprob": -0.1032125981648763, "compression_ratio": 1.715625, "no_speech_prob": 8.799766874290071e-06}, {"id": 1817, "seek": 490956, "start": 4925.64, "end": 4929.84, "text": " And with Swift, you get these clean abstractions.", "tokens": [400, 365, 25539, 11, 291, 483, 613, 2541, 12649, 626, 13], "temperature": 0.0, "avg_logprob": -0.1032125981648763, "compression_ratio": 1.715625, "no_speech_prob": 8.799766874290071e-06}, {"id": 1818, "seek": 490956, "start": 4929.84, "end": 4932.240000000001, "text": " So, once you pass in the right things, it works.", "tokens": [407, 11, 1564, 291, 1320, 294, 264, 558, 721, 11, 309, 1985, 13], "temperature": 0.0, "avg_logprob": -0.1032125981648763, "compression_ratio": 1.715625, "no_speech_prob": 8.799766874290071e-06}, {"id": 1819, "seek": 490956, "start": 4932.240000000001, "end": 4934.64, "text": " You don't get the stack trace coming out of the middle", "tokens": [509, 500, 380, 483, 264, 8630, 13508, 1348, 484, 295, 264, 2808], "temperature": 0.0, "avg_logprob": -0.1032125981648763, "compression_ratio": 1.715625, "no_speech_prob": 8.799766874290071e-06}, {"id": 1820, "seek": 490956, "start": 4934.64, "end": 4936.52, "text": " of somebody else's library that now you have to figure", "tokens": [295, 2618, 1646, 311, 6405, 300, 586, 291, 362, 281, 2573], "temperature": 0.0, "avg_logprob": -0.1032125981648763, "compression_ratio": 1.715625, "no_speech_prob": 8.799766874290071e-06}, {"id": 1821, "seek": 490956, "start": 4936.52, "end": 4938.88, "text": " out what you did somewhere along the way.", "tokens": [484, 437, 291, 630, 4079, 2051, 264, 636, 13], "temperature": 0.0, "avg_logprob": -0.1032125981648763, "compression_ratio": 1.715625, "no_speech_prob": 8.799766874290071e-06}, {"id": 1822, "seek": 493888, "start": 4938.88, "end": 4941.56, "text": " They cause it to break, at least not nearly as often.", "tokens": [814, 3082, 309, 281, 1821, 11, 412, 1935, 406, 6217, 382, 2049, 13], "temperature": 0.0, "avg_logprob": -0.15870201509762433, "compression_ratio": 1.6597222222222223, "no_speech_prob": 6.438750006054761e-06}, {"id": 1823, "seek": 493888, "start": 4941.56, "end": 4942.92, "text": " So, to see what this ends up looking like,", "tokens": [407, 11, 281, 536, 437, 341, 5314, 493, 1237, 411, 11], "temperature": 0.0, "avg_logprob": -0.15870201509762433, "compression_ratio": 1.6597222222222223, "no_speech_prob": 6.438750006054761e-06}, {"id": 1824, "seek": 493888, "start": 4942.92, "end": 4944.96, "text": " I've created a package called data block.", "tokens": [286, 600, 2942, 257, 7372, 1219, 1412, 3461, 13], "temperature": 0.0, "avg_logprob": -0.15870201509762433, "compression_ratio": 1.6597222222222223, "no_speech_prob": 6.438750006054761e-06}, {"id": 1825, "seek": 493888, "start": 4944.96, "end": 4946.28, "text": " It contains two files in.", "tokens": [467, 8306, 732, 7098, 294, 13], "temperature": 0.0, "avg_logprob": -0.15870201509762433, "compression_ratio": 1.6597222222222223, "no_speech_prob": 6.438750006054761e-06}, {"id": 1826, "seek": 493888, "start": 4946.28, "end": 4949.4800000000005, "text": " It's got a package called Swift, and it's got a main.swift.", "tokens": [467, 311, 658, 257, 7372, 1219, 25539, 11, 293, 309, 311, 658, 257, 2135, 13, 25884, 2008, 13], "temperature": 0.0, "avg_logprob": -0.15870201509762433, "compression_ratio": 1.6597222222222223, "no_speech_prob": 6.438750006054761e-06}, {"id": 1827, "seek": 493888, "start": 4949.4800000000005, "end": 4952.08, "text": " And main.swift is that, right?", "tokens": [400, 2135, 13, 25884, 2008, 307, 300, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.15870201509762433, "compression_ratio": 1.6597222222222223, "no_speech_prob": 6.438750006054761e-06}, {"id": 1828, "seek": 493888, "start": 4952.08, "end": 4955.24, "text": " So, all that in the end to actually use it,", "tokens": [407, 11, 439, 300, 294, 264, 917, 281, 767, 764, 309, 11], "temperature": 0.0, "avg_logprob": -0.15870201509762433, "compression_ratio": 1.6597222222222223, "no_speech_prob": 6.438750006054761e-06}, {"id": 1829, "seek": 493888, "start": 4955.24, "end": 4958.400000000001, "text": " that's how much code it is to use your data blocks API", "tokens": [300, 311, 577, 709, 3089, 309, 307, 281, 764, 428, 1412, 8474, 9362], "temperature": 0.0, "avg_logprob": -0.15870201509762433, "compression_ratio": 1.6597222222222223, "no_speech_prob": 6.438750006054761e-06}, {"id": 1830, "seek": 493888, "start": 4958.400000000001, "end": 4960.08, "text": " and grab all the batches.", "tokens": [293, 4444, 439, 264, 15245, 279, 13], "temperature": 0.0, "avg_logprob": -0.15870201509762433, "compression_ratio": 1.6597222222222223, "no_speech_prob": 6.438750006054761e-06}, {"id": 1831, "seek": 493888, "start": 4960.08, "end": 4962.36, "text": " So, it comes out super pretty.", "tokens": [407, 11, 309, 1487, 484, 1687, 1238, 13], "temperature": 0.0, "avg_logprob": -0.15870201509762433, "compression_ratio": 1.6597222222222223, "no_speech_prob": 6.438750006054761e-06}, {"id": 1832, "seek": 493888, "start": 4962.36, "end": 4964.4800000000005, "text": " So, let's take a five-minute break,", "tokens": [407, 11, 718, 311, 747, 257, 1732, 12, 18256, 1821, 11], "temperature": 0.0, "avg_logprob": -0.15870201509762433, "compression_ratio": 1.6597222222222223, "no_speech_prob": 6.438750006054761e-06}, {"id": 1833, "seek": 496448, "start": 4964.48, "end": 4970.799999999999, "text": " and see you back here at 8.05.", "tokens": [293, 536, 291, 646, 510, 412, 1649, 13, 13328, 13], "temperature": 0.0, "avg_logprob": -0.19779731916344684, "compression_ratio": 1.535, "no_speech_prob": 1.2028381206619088e-05}, {"id": 1834, "seek": 496448, "start": 4970.799999999999, "end": 4974.959999999999, "text": " Okay, so we're gradually working our way back", "tokens": [1033, 11, 370, 321, 434, 13145, 1364, 527, 636, 646], "temperature": 0.0, "avg_logprob": -0.19779731916344684, "compression_ratio": 1.535, "no_speech_prob": 1.2028381206619088e-05}, {"id": 1835, "seek": 496448, "start": 4974.959999999999, "end": 4979.5599999999995, "text": " to what we briefly saw last week,", "tokens": [281, 437, 321, 10515, 1866, 1036, 1243, 11], "temperature": 0.0, "avg_logprob": -0.19779731916344684, "compression_ratio": 1.535, "no_speech_prob": 1.2028381206619088e-05}, {"id": 1836, "seek": 496448, "start": 4979.5599999999995, "end": 4982.879999999999, "text": " Notebook 11, trading ImageNet,", "tokens": [11633, 2939, 2975, 11, 9529, 29903, 31890, 11], "temperature": 0.0, "avg_logprob": -0.19779731916344684, "compression_ratio": 1.535, "no_speech_prob": 1.2028381206619088e-05}, {"id": 1837, "seek": 496448, "start": 4982.879999999999, "end": 4986.639999999999, "text": " and we're gradually making our way back up to hit that point again.", "tokens": [293, 321, 434, 13145, 1455, 527, 636, 646, 493, 281, 2045, 300, 935, 797, 13], "temperature": 0.0, "avg_logprob": -0.19779731916344684, "compression_ratio": 1.535, "no_speech_prob": 1.2028381206619088e-05}, {"id": 1838, "seek": 496448, "start": 4986.639999999999, "end": 4990.36, "text": " It's a bit of a slow process because along the way,", "tokens": [467, 311, 257, 857, 295, 257, 2964, 1399, 570, 2051, 264, 636, 11], "temperature": 0.0, "avg_logprob": -0.19779731916344684, "compression_ratio": 1.535, "no_speech_prob": 1.2028381206619088e-05}, {"id": 1839, "seek": 496448, "start": 4990.36, "end": 4993.12, "text": " we've had to kind of invent, float, and learn", "tokens": [321, 600, 632, 281, 733, 295, 7962, 11, 15706, 11, 293, 1466], "temperature": 0.0, "avg_logprob": -0.19779731916344684, "compression_ratio": 1.535, "no_speech_prob": 1.2028381206619088e-05}, {"id": 1840, "seek": 499312, "start": 4993.12, "end": 4994.599999999999, "text": " about a new language and stuff like that.", "tokens": [466, 257, 777, 2856, 293, 1507, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.1336446394000137, "compression_ratio": 1.6772908366533865, "no_speech_prob": 9.604234946891665e-05}, {"id": 1841, "seek": 499312, "start": 4994.599999999999, "end": 4996.32, "text": " But we are actually finally up to zero", "tokens": [583, 321, 366, 767, 2721, 493, 281, 4018], "temperature": 0.0, "avg_logprob": -0.1336446394000137, "compression_ratio": 1.6772908366533865, "no_speech_prob": 9.604234946891665e-05}, {"id": 1842, "seek": 499312, "start": 4996.32, "end": 5000.0, "text": " to a fully connected model, believe it or not.", "tokens": [281, 257, 4498, 4582, 2316, 11, 1697, 309, 420, 406, 13], "temperature": 0.0, "avg_logprob": -0.1336446394000137, "compression_ratio": 1.6772908366533865, "no_speech_prob": 9.604234946891665e-05}, {"id": 1843, "seek": 499312, "start": 5000.0, "end": 5002.36, "text": " And the nice thing is, at this point, things are going", "tokens": [400, 264, 1481, 551, 307, 11, 412, 341, 935, 11, 721, 366, 516], "temperature": 0.0, "avg_logprob": -0.1336446394000137, "compression_ratio": 1.6772908366533865, "no_speech_prob": 9.604234946891665e-05}, {"id": 1844, "seek": 499312, "start": 5002.36, "end": 5005.96, "text": " to start looking more and more familiar.", "tokens": [281, 722, 1237, 544, 293, 544, 4963, 13], "temperature": 0.0, "avg_logprob": -0.1336446394000137, "compression_ratio": 1.6772908366533865, "no_speech_prob": 9.604234946891665e-05}, {"id": 1845, "seek": 499312, "start": 5005.96, "end": 5011.5599999999995, "text": " One thing I will say, though, that can look quite unfamiliar is the", "tokens": [1485, 551, 286, 486, 584, 11, 1673, 11, 300, 393, 574, 1596, 29415, 307, 264], "temperature": 0.0, "avg_logprob": -0.1336446394000137, "compression_ratio": 1.6772908366533865, "no_speech_prob": 9.604234946891665e-05}, {"id": 1846, "seek": 499312, "start": 5011.5599999999995, "end": 5016.24, "text": " amount of typing that you have to type with Swift.", "tokens": [2372, 295, 18444, 300, 291, 362, 281, 2010, 365, 25539, 13], "temperature": 0.0, "avg_logprob": -0.1336446394000137, "compression_ratio": 1.6772908366533865, "no_speech_prob": 9.604234946891665e-05}, {"id": 1847, "seek": 499312, "start": 5016.24, "end": 5017.8, "text": " But there's actually a trick,", "tokens": [583, 456, 311, 767, 257, 4282, 11], "temperature": 0.0, "avg_logprob": -0.1336446394000137, "compression_ratio": 1.6772908366533865, "no_speech_prob": 9.604234946891665e-05}, {"id": 1848, "seek": 499312, "start": 5017.8, "end": 5020.5199999999995, "text": " which is you don't have to type all these types.", "tokens": [597, 307, 291, 500, 380, 362, 281, 2010, 439, 613, 3467, 13], "temperature": 0.0, "avg_logprob": -0.1336446394000137, "compression_ratio": 1.6772908366533865, "no_speech_prob": 9.604234946891665e-05}, {"id": 1849, "seek": 502052, "start": 5020.52, "end": 5023.320000000001, "text": " You don't have to type types.", "tokens": [509, 500, 380, 362, 281, 2010, 3467, 13], "temperature": 0.0, "avg_logprob": -0.16697965968738904, "compression_ratio": 1.6309963099630995, "no_speech_prob": 6.240262337087188e-06}, {"id": 1850, "seek": 502052, "start": 5023.320000000001, "end": 5025.320000000001, "text": " What you can actually do is you can say, like, oh, you know,", "tokens": [708, 291, 393, 767, 360, 307, 291, 393, 584, 11, 411, 11, 1954, 11, 291, 458, 11], "temperature": 0.0, "avg_logprob": -0.16697965968738904, "compression_ratio": 1.6309963099630995, "no_speech_prob": 6.240262337087188e-06}, {"id": 1851, "seek": 502052, "start": 5025.320000000001, "end": 5029.6, "text": " here's the type I use all the time, tensor bracket float.", "tokens": [510, 311, 264, 2010, 286, 764, 439, 264, 565, 11, 40863, 16904, 15706, 13], "temperature": 0.0, "avg_logprob": -0.16697965968738904, "compression_ratio": 1.6309963099630995, "no_speech_prob": 6.240262337087188e-06}, {"id": 1852, "seek": 502052, "start": 5029.6, "end": 5032.280000000001, "text": " And I don't like writing angle brackets either.", "tokens": [400, 286, 500, 380, 411, 3579, 5802, 26179, 2139, 13], "temperature": 0.0, "avg_logprob": -0.16697965968738904, "compression_ratio": 1.6309963099630995, "no_speech_prob": 6.240262337087188e-06}, {"id": 1853, "seek": 502052, "start": 5032.280000000001, "end": 5035.64, "text": " So, let's first create a type alias called TF.", "tokens": [407, 11, 718, 311, 700, 1884, 257, 2010, 419, 4609, 1219, 40964, 13], "temperature": 0.0, "avg_logprob": -0.16697965968738904, "compression_ratio": 1.6309963099630995, "no_speech_prob": 6.240262337087188e-06}, {"id": 1854, "seek": 502052, "start": 5035.64, "end": 5038.72, "text": " And now, I just use TF everywhere.", "tokens": [400, 586, 11, 286, 445, 764, 40964, 5315, 13], "temperature": 0.0, "avg_logprob": -0.16697965968738904, "compression_ratio": 1.6309963099630995, "no_speech_prob": 6.240262337087188e-06}, {"id": 1855, "seek": 502052, "start": 5038.72, "end": 5044.0, "text": " Now, to be clear, a lot of real Swift programmers", "tokens": [823, 11, 281, 312, 1850, 11, 257, 688, 295, 957, 25539, 41504], "temperature": 0.0, "avg_logprob": -0.16697965968738904, "compression_ratio": 1.6309963099630995, "no_speech_prob": 6.240262337087188e-06}, {"id": 1856, "seek": 502052, "start": 5044.0, "end": 5047.68, "text": " in their production code might not like doing that a lot.", "tokens": [294, 641, 4265, 3089, 1062, 406, 411, 884, 300, 257, 688, 13], "temperature": 0.0, "avg_logprob": -0.16697965968738904, "compression_ratio": 1.6309963099630995, "no_speech_prob": 6.240262337087188e-06}, {"id": 1857, "seek": 502052, "start": 5047.68, "end": 5050.4400000000005, "text": " I mean, personally, I do do that a lot, even not a lot.", "tokens": [286, 914, 11, 5665, 11, 286, 360, 360, 300, 257, 688, 11, 754, 406, 257, 688, 13], "temperature": 0.0, "avg_logprob": -0.16697965968738904, "compression_ratio": 1.6309963099630995, "no_speech_prob": 6.240262337087188e-06}, {"id": 1858, "seek": 505044, "start": 5050.44, "end": 5051.919999999999, "text": " I mean, I do do that a lot in my notebooks.", "tokens": [286, 914, 11, 286, 360, 360, 300, 257, 688, 294, 452, 43782, 13], "temperature": 0.0, "avg_logprob": -0.2011073578235715, "compression_ratio": 1.8575851393188854, "no_speech_prob": 8.612091187387705e-05}, {"id": 1859, "seek": 505044, "start": 5051.919999999999, "end": 5053.759999999999, "text": " But, you know, you might want to be careful", "tokens": [583, 11, 291, 458, 11, 291, 1062, 528, 281, 312, 5026], "temperature": 0.0, "avg_logprob": -0.2011073578235715, "compression_ratio": 1.8575851393188854, "no_speech_prob": 8.612091187387705e-05}, {"id": 1860, "seek": 505044, "start": 5053.759999999999, "end": 5057.599999999999, "text": " if you're doing actual Swift programming.", "tokens": [498, 291, 434, 884, 3539, 25539, 9410, 13], "temperature": 0.0, "avg_logprob": -0.2011073578235715, "compression_ratio": 1.8575851393188854, "no_speech_prob": 8.612091187387705e-05}, {"id": 1861, "seek": 505044, "start": 5057.599999999999, "end": 5059.36, "text": " The way I would look at it is, if you're building something", "tokens": [440, 636, 286, 576, 574, 412, 309, 307, 11, 498, 291, 434, 2390, 746], "temperature": 0.0, "avg_logprob": -0.2011073578235715, "compression_ratio": 1.8575851393188854, "no_speech_prob": 8.612091187387705e-05}, {"id": 1862, "seek": 505044, "start": 5059.36, "end": 5061.919999999999, "text": " for somebody else to use, if you're publishing an API,", "tokens": [337, 2618, 1646, 281, 764, 11, 498, 291, 434, 17832, 364, 9362, 11], "temperature": 0.0, "avg_logprob": -0.2011073578235715, "compression_ratio": 1.8575851393188854, "no_speech_prob": 8.612091187387705e-05}, {"id": 1863, "seek": 505044, "start": 5061.919999999999, "end": 5063.36, "text": " you probably don't want to do that.", "tokens": [291, 1391, 500, 380, 528, 281, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.2011073578235715, "compression_ratio": 1.8575851393188854, "no_speech_prob": 8.612091187387705e-05}, {"id": 1864, "seek": 505044, "start": 5063.36, "end": 5065.719999999999, "text": " Yeah. But if you're hacking things together and you're playing", "tokens": [865, 13, 583, 498, 291, 434, 31422, 721, 1214, 293, 291, 434, 2433], "temperature": 0.0, "avg_logprob": -0.2011073578235715, "compression_ratio": 1.8575851393188854, "no_speech_prob": 8.612091187387705e-05}, {"id": 1865, "seek": 505044, "start": 5065.719999999999, "end": 5067.32, "text": " and having fun, it's no problem at all.", "tokens": [293, 1419, 1019, 11, 309, 311, 572, 1154, 412, 439, 13], "temperature": 0.0, "avg_logprob": -0.2011073578235715, "compression_ratio": 1.8575851393188854, "no_speech_prob": 8.612091187387705e-05}, {"id": 1866, "seek": 505044, "start": 5067.32, "end": 5069.919999999999, "text": " Yeah. I mean, different strokes.", "tokens": [865, 13, 286, 914, 11, 819, 24493, 13], "temperature": 0.0, "avg_logprob": -0.2011073578235715, "compression_ratio": 1.8575851393188854, "no_speech_prob": 8.612091187387705e-05}, {"id": 1867, "seek": 505044, "start": 5069.919999999999, "end": 5072.44, "text": " I personally, I would say, if I'm giving somebody something", "tokens": [286, 5665, 11, 286, 576, 584, 11, 498, 286, 478, 2902, 2618, 746], "temperature": 0.0, "avg_logprob": -0.2011073578235715, "compression_ratio": 1.8575851393188854, "no_speech_prob": 8.612091187387705e-05}, {"id": 1868, "seek": 505044, "start": 5072.44, "end": 5075.16, "text": " that's the whole thing, tensor floats, I would do it.", "tokens": [300, 311, 264, 1379, 551, 11, 40863, 37878, 11, 286, 576, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.2011073578235715, "compression_ratio": 1.8575851393188854, "no_speech_prob": 8.612091187387705e-05}, {"id": 1869, "seek": 505044, "start": 5075.16, "end": 5077.48, "text": " But anyway, in a notebook, I definitely don't want", "tokens": [583, 4033, 11, 294, 257, 21060, 11, 286, 2138, 500, 380, 528], "temperature": 0.0, "avg_logprob": -0.2011073578235715, "compression_ratio": 1.8575851393188854, "no_speech_prob": 8.612091187387705e-05}, {"id": 1870, "seek": 505044, "start": 5077.48, "end": 5078.759999999999, "text": " to be typing that.", "tokens": [281, 312, 18444, 300, 13], "temperature": 0.0, "avg_logprob": -0.2011073578235715, "compression_ratio": 1.8575851393188854, "no_speech_prob": 8.612091187387705e-05}, {"id": 1871, "seek": 507876, "start": 5078.76, "end": 5081.96, "text": " In a notebook, make it easier for your interactive programming", "tokens": [682, 257, 21060, 11, 652, 309, 3571, 337, 428, 15141, 9410], "temperature": 0.0, "avg_logprob": -0.12452273898654515, "compression_ratio": 1.7972972972972974, "no_speech_prob": 6.143650807644008e-06}, {"id": 1872, "seek": 507876, "start": 5081.96, "end": 5083.6, "text": " by knowing about things like type alias.", "tokens": [538, 5276, 466, 721, 411, 2010, 419, 4609, 13], "temperature": 0.0, "avg_logprob": -0.12452273898654515, "compression_ratio": 1.7972972972972974, "no_speech_prob": 6.143650807644008e-06}, {"id": 1873, "seek": 507876, "start": 5083.6, "end": 5085.400000000001, "text": " Yeah. That's something we also want to make better just", "tokens": [865, 13, 663, 311, 746, 321, 611, 528, 281, 652, 1101, 445], "temperature": 0.0, "avg_logprob": -0.12452273898654515, "compression_ratio": 1.7972972972972974, "no_speech_prob": 6.143650807644008e-06}, {"id": 1874, "seek": 507876, "start": 5085.400000000001, "end": 5088.2, "text": " in general so that these things all just default to float.", "tokens": [294, 2674, 370, 300, 613, 721, 439, 445, 7576, 281, 15706, 13], "temperature": 0.0, "avg_logprob": -0.12452273898654515, "compression_ratio": 1.7972972972972974, "no_speech_prob": 6.143650807644008e-06}, {"id": 1875, "seek": 507876, "start": 5088.2, "end": 5089.4400000000005, "text": " Yeah. You don't have to worry about it.", "tokens": [865, 13, 509, 500, 380, 362, 281, 3292, 466, 309, 13], "temperature": 0.0, "avg_logprob": -0.12452273898654515, "compression_ratio": 1.7972972972972974, "no_speech_prob": 6.143650807644008e-06}, {"id": 1876, "seek": 507876, "start": 5089.4400000000005, "end": 5091.52, "text": " That'll be nice.", "tokens": [663, 603, 312, 1481, 13], "temperature": 0.0, "avg_logprob": -0.12452273898654515, "compression_ratio": 1.7972972972972974, "no_speech_prob": 6.143650807644008e-06}, {"id": 1877, "seek": 507876, "start": 5091.52, "end": 5094.4400000000005, "text": " So then we can write a normalized function", "tokens": [407, 550, 321, 393, 2464, 257, 48704, 2445], "temperature": 0.0, "avg_logprob": -0.12452273898654515, "compression_ratio": 1.7972972972972974, "no_speech_prob": 6.143650807644008e-06}, {"id": 1878, "seek": 507876, "start": 5094.4400000000005, "end": 5097.52, "text": " that looks exactly the same as our Python normalized function.", "tokens": [300, 1542, 2293, 264, 912, 382, 527, 15329, 48704, 2445, 13], "temperature": 0.0, "avg_logprob": -0.12452273898654515, "compression_ratio": 1.7972972972972974, "no_speech_prob": 6.143650807644008e-06}, {"id": 1879, "seek": 507876, "start": 5097.52, "end": 5101.08, "text": " And we can use mean and standard deviation just like in Python.", "tokens": [400, 321, 393, 764, 914, 293, 3832, 25163, 445, 411, 294, 15329, 13], "temperature": 0.0, "avg_logprob": -0.12452273898654515, "compression_ratio": 1.7972972972972974, "no_speech_prob": 6.143650807644008e-06}, {"id": 1880, "seek": 507876, "start": 5101.08, "end": 5106.400000000001, "text": " And we can define tests with asserts just like in Python.", "tokens": [400, 321, 393, 6964, 6921, 365, 19810, 82, 445, 411, 294, 15329, 13], "temperature": 0.0, "avg_logprob": -0.12452273898654515, "compression_ratio": 1.7972972972972974, "no_speech_prob": 6.143650807644008e-06}, {"id": 1881, "seek": 507876, "start": 5106.400000000001, "end": 5108.0, "text": " So this all looks identical.", "tokens": [407, 341, 439, 1542, 14800, 13], "temperature": 0.0, "avg_logprob": -0.12452273898654515, "compression_ratio": 1.7972972972972974, "no_speech_prob": 6.143650807644008e-06}, {"id": 1882, "seek": 510800, "start": 5108.0, "end": 5111.84, "text": " We can calculate n and m and c, the same constant,", "tokens": [492, 393, 8873, 297, 293, 275, 293, 269, 11, 264, 912, 5754, 11], "temperature": 0.0, "avg_logprob": -0.1170993423461914, "compression_ratio": 1.6504424778761062, "no_speech_prob": 5.093635536468355e-06}, {"id": 1883, "seek": 510800, "start": 5111.84, "end": 5113.28, "text": " the variables that we used in Python", "tokens": [264, 9102, 300, 321, 1143, 294, 15329], "temperature": 0.0, "avg_logprob": -0.1170993423461914, "compression_ratio": 1.6504424778761062, "no_speech_prob": 5.093635536468355e-06}, {"id": 1884, "seek": 510800, "start": 5113.28, "end": 5116.84, "text": " in exactly the same way as Python.", "tokens": [294, 2293, 264, 912, 636, 382, 15329, 13], "temperature": 0.0, "avg_logprob": -0.1170993423461914, "compression_ratio": 1.6504424778761062, "no_speech_prob": 5.093635536468355e-06}, {"id": 1885, "seek": 510800, "start": 5116.84, "end": 5121.44, "text": " We can create our weights and biases just like in Python,", "tokens": [492, 393, 1884, 527, 17443, 293, 32152, 445, 411, 294, 15329, 11], "temperature": 0.0, "avg_logprob": -0.1170993423461914, "compression_ratio": 1.6504424778761062, "no_speech_prob": 5.093635536468355e-06}, {"id": 1886, "seek": 510800, "start": 5121.44, "end": 5129.16, "text": " except there's a nice kind of rule of thumb in the Swift world,", "tokens": [3993, 456, 311, 257, 1481, 733, 295, 4978, 295, 9298, 294, 264, 25539, 1002, 11], "temperature": 0.0, "avg_logprob": -0.1170993423461914, "compression_ratio": 1.6504424778761062, "no_speech_prob": 5.093635536468355e-06}, {"id": 1887, "seek": 510800, "start": 5129.16, "end": 5132.24, "text": " which is anytime you have a function that's going", "tokens": [597, 307, 13038, 291, 362, 257, 2445, 300, 311, 516], "temperature": 0.0, "avg_logprob": -0.1170993423461914, "compression_ratio": 1.6504424778761062, "no_speech_prob": 5.093635536468355e-06}, {"id": 1888, "seek": 510800, "start": 5132.24, "end": 5134.88, "text": " to create some new thing for you,", "tokens": [281, 1884, 512, 777, 551, 337, 291, 11], "temperature": 0.0, "avg_logprob": -0.1170993423461914, "compression_ratio": 1.6504424778761062, "no_speech_prob": 5.093635536468355e-06}, {"id": 1889, "seek": 510800, "start": 5134.88, "end": 5137.84, "text": " we always use the init constructor for that.", "tokens": [321, 1009, 764, 264, 3157, 47479, 337, 300, 13], "temperature": 0.0, "avg_logprob": -0.1170993423461914, "compression_ratio": 1.6504424778761062, "no_speech_prob": 5.093635536468355e-06}, {"id": 1890, "seek": 513784, "start": 5137.84, "end": 5140.16, "text": " So for example, generating random numbers", "tokens": [407, 337, 1365, 11, 17746, 4974, 3547], "temperature": 0.0, "avg_logprob": -0.13646765886727025, "compression_ratio": 1.8785425101214575, "no_speech_prob": 4.289232947485289e-06}, {"id": 1891, "seek": 513784, "start": 5140.16, "end": 5142.84, "text": " and dumping them into a tensor,", "tokens": [293, 42224, 552, 666, 257, 40863, 11], "temperature": 0.0, "avg_logprob": -0.13646765886727025, "compression_ratio": 1.8785425101214575, "no_speech_prob": 4.289232947485289e-06}, {"id": 1892, "seek": 513784, "start": 5142.84, "end": 5144.84, "text": " that's constructing a new tensor for you.", "tokens": [300, 311, 39969, 257, 777, 40863, 337, 291, 13], "temperature": 0.0, "avg_logprob": -0.13646765886727025, "compression_ratio": 1.8785425101214575, "no_speech_prob": 4.289232947485289e-06}, {"id": 1893, "seek": 513784, "start": 5144.84, "end": 5150.88, "text": " So it's actually, you're actually calling tensor float dot init here.", "tokens": [407, 309, 311, 767, 11, 291, 434, 767, 5141, 40863, 15706, 5893, 3157, 510, 13], "temperature": 0.0, "avg_logprob": -0.13646765886727025, "compression_ratio": 1.8785425101214575, "no_speech_prob": 4.289232947485289e-06}, {"id": 1894, "seek": 513784, "start": 5150.88, "end": 5154.96, "text": " And so if you're trying to find where is it in an API that I get", "tokens": [400, 370, 498, 291, 434, 1382, 281, 915, 689, 307, 309, 294, 364, 9362, 300, 286, 483], "temperature": 0.0, "avg_logprob": -0.13646765886727025, "compression_ratio": 1.8785425101214575, "no_speech_prob": 4.289232947485289e-06}, {"id": 1895, "seek": 513784, "start": 5154.96, "end": 5158.16, "text": " to create something in this way, you should generally look", "tokens": [281, 1884, 746, 294, 341, 636, 11, 291, 820, 5101, 574], "temperature": 0.0, "avg_logprob": -0.13646765886727025, "compression_ratio": 1.8785425101214575, "no_speech_prob": 4.289232947485289e-06}, {"id": 1896, "seek": 513784, "start": 5158.16, "end": 5159.52, "text": " for in the init section.", "tokens": [337, 294, 264, 3157, 3541, 13], "temperature": 0.0, "avg_logprob": -0.13646765886727025, "compression_ratio": 1.8785425101214575, "no_speech_prob": 4.289232947485289e-06}, {"id": 1897, "seek": 513784, "start": 5159.52, "end": 5162.84, "text": " So this is how you create random numbers in Swift for TensorFlow.", "tokens": [407, 341, 307, 577, 291, 1884, 4974, 3547, 294, 25539, 337, 37624, 13], "temperature": 0.0, "avg_logprob": -0.13646765886727025, "compression_ratio": 1.8785425101214575, "no_speech_prob": 4.289232947485289e-06}, {"id": 1898, "seek": 513784, "start": 5162.84, "end": 5166.16, "text": " This is how you create tensor of zeros in Swift for TensorFlow.", "tokens": [639, 307, 577, 291, 1884, 40863, 295, 35193, 294, 25539, 337, 37624, 13], "temperature": 0.0, "avg_logprob": -0.13646765886727025, "compression_ratio": 1.8785425101214575, "no_speech_prob": 4.289232947485289e-06}, {"id": 1899, "seek": 516616, "start": 5166.16, "end": 5168.5599999999995, "text": " So here's our weights and biases.", "tokens": [407, 510, 311, 527, 17443, 293, 32152, 13], "temperature": 0.0, "avg_logprob": -0.1381005415549645, "compression_ratio": 1.5349794238683128, "no_speech_prob": 7.64639025874203e-06}, {"id": 1900, "seek": 516616, "start": 5168.5599999999995, "end": 5171.92, "text": " This is all the same stuff we just basically copied and pasted it", "tokens": [639, 307, 439, 264, 912, 1507, 321, 445, 1936, 25365, 293, 1791, 292, 309], "temperature": 0.0, "avg_logprob": -0.1381005415549645, "compression_ratio": 1.5349794238683128, "no_speech_prob": 7.64639025874203e-06}, {"id": 1901, "seek": 516616, "start": 5171.92, "end": 5175.44, "text": " from the PyTorch version with some very, very minor changes.", "tokens": [490, 264, 9953, 51, 284, 339, 3037, 365, 512, 588, 11, 588, 6696, 2962, 13], "temperature": 0.0, "avg_logprob": -0.1381005415549645, "compression_ratio": 1.5349794238683128, "no_speech_prob": 7.64639025874203e-06}, {"id": 1902, "seek": 516616, "start": 5175.44, "end": 5182.12, "text": " Create a linear function, except rather than at, we use dot,", "tokens": [20248, 257, 8213, 2445, 11, 3993, 2831, 813, 412, 11, 321, 764, 5893, 11], "temperature": 0.0, "avg_logprob": -0.1381005415549645, "compression_ratio": 1.5349794238683128, "no_speech_prob": 7.64639025874203e-06}, {"id": 1903, "seek": 516616, "start": 5182.12, "end": 5184.5599999999995, "text": " because that's what they use in Swift for TensorFlow.", "tokens": [570, 300, 311, 437, 436, 764, 294, 25539, 337, 37624, 13], "temperature": 0.0, "avg_logprob": -0.1381005415549645, "compression_ratio": 1.5349794238683128, "no_speech_prob": 7.64639025874203e-06}, {"id": 1904, "seek": 516616, "start": 5184.5599999999995, "end": 5186.599999999999, "text": " If you're on a Mac, that's option eight.", "tokens": [759, 291, 434, 322, 257, 5707, 11, 300, 311, 3614, 3180, 13], "temperature": 0.0, "avg_logprob": -0.1381005415549645, "compression_ratio": 1.5349794238683128, "no_speech_prob": 7.64639025874203e-06}, {"id": 1905, "seek": 516616, "start": 5186.599999999999, "end": 5191.76, "text": " If you're on anything else, it's compose key dot equals.", "tokens": [759, 291, 434, 322, 1340, 1646, 11, 309, 311, 35925, 2141, 5893, 6915, 13], "temperature": 0.0, "avg_logprob": -0.1381005415549645, "compression_ratio": 1.5349794238683128, "no_speech_prob": 7.64639025874203e-06}, {"id": 1906, "seek": 519176, "start": 5191.76, "end": 5196.16, "text": " And so now we can go ahead and calculate linear functions.", "tokens": [400, 370, 586, 321, 393, 352, 2286, 293, 8873, 8213, 6828, 13], "temperature": 0.0, "avg_logprob": -0.13148633398190893, "compression_ratio": 1.6859903381642511, "no_speech_prob": 3.1875408694759244e-06}, {"id": 1907, "seek": 519176, "start": 5196.16, "end": 5199.64, "text": " We can calculate relu exactly the same as PyTorch.", "tokens": [492, 393, 8873, 1039, 84, 2293, 264, 912, 382, 9953, 51, 284, 339, 13], "temperature": 0.0, "avg_logprob": -0.13148633398190893, "compression_ratio": 1.6859903381642511, "no_speech_prob": 3.1875408694759244e-06}, {"id": 1908, "seek": 519176, "start": 5199.64, "end": 5205.42, "text": " We can do proper timing in it, exactly like PyTorch.", "tokens": [492, 393, 360, 2296, 10822, 294, 309, 11, 2293, 411, 9953, 51, 284, 339, 13], "temperature": 0.0, "avg_logprob": -0.13148633398190893, "compression_ratio": 1.6859903381642511, "no_speech_prob": 3.1875408694759244e-06}, {"id": 1909, "seek": 519176, "start": 5205.42, "end": 5206.88, "text": " And so now we're at the point", "tokens": [400, 370, 586, 321, 434, 412, 264, 935], "temperature": 0.0, "avg_logprob": -0.13148633398190893, "compression_ratio": 1.6859903381642511, "no_speech_prob": 3.1875408694759244e-06}, {"id": 1910, "seek": 519176, "start": 5206.88, "end": 5210.12, "text": " where we can define the forward pass of a model.", "tokens": [689, 321, 393, 6964, 264, 2128, 1320, 295, 257, 2316, 13], "temperature": 0.0, "avg_logprob": -0.13148633398190893, "compression_ratio": 1.6859903381642511, "no_speech_prob": 3.1875408694759244e-06}, {"id": 1911, "seek": 519176, "start": 5210.12, "end": 5214.8, "text": " And this looks basically again identical to PyTorch.", "tokens": [400, 341, 1542, 1936, 797, 14800, 281, 9953, 51, 284, 339, 13], "temperature": 0.0, "avg_logprob": -0.13148633398190893, "compression_ratio": 1.6859903381642511, "no_speech_prob": 3.1875408694759244e-06}, {"id": 1912, "seek": 519176, "start": 5214.8, "end": 5220.280000000001, "text": " A model can just be something that returns some value.", "tokens": [316, 2316, 393, 445, 312, 746, 300, 11247, 512, 2158, 13], "temperature": 0.0, "avg_logprob": -0.13148633398190893, "compression_ratio": 1.6859903381642511, "no_speech_prob": 3.1875408694759244e-06}, {"id": 1913, "seek": 522028, "start": 5220.28, "end": 5224.759999999999, "text": " So the forward pass of our model really just builds on stuff", "tokens": [407, 264, 2128, 1320, 295, 527, 2316, 534, 445, 15182, 322, 1507], "temperature": 0.0, "avg_logprob": -0.18919960538247474, "compression_ratio": 1.6702127659574468, "no_speech_prob": 3.13813006869168e-06}, {"id": 1914, "seek": 522028, "start": 5224.759999999999, "end": 5227.08, "text": " that we already know about, and it looks almost identical", "tokens": [300, 321, 1217, 458, 466, 11, 293, 309, 1542, 1920, 14800], "temperature": 0.0, "avg_logprob": -0.18919960538247474, "compression_ratio": 1.6702127659574468, "no_speech_prob": 3.13813006869168e-06}, {"id": 1915, "seek": 522028, "start": 5227.08, "end": 5230.5599999999995, "text": " to PyTorch, as does a loss function.", "tokens": [281, 9953, 51, 284, 339, 11, 382, 775, 257, 4470, 2445, 13], "temperature": 0.0, "avg_logprob": -0.18919960538247474, "compression_ratio": 1.6702127659574468, "no_speech_prob": 3.13813006869168e-06}, {"id": 1916, "seek": 522028, "start": 5230.5599999999995, "end": 5232.32, "text": " It looks a little bit different,", "tokens": [467, 1542, 257, 707, 857, 819, 11], "temperature": 0.0, "avg_logprob": -0.18919960538247474, "compression_ratio": 1.6702127659574468, "no_speech_prob": 3.13813006869168e-06}, {"id": 1917, "seek": 522028, "start": 5232.32, "end": 5233.679999999999, "text": " because it's not called squeeze.", "tokens": [570, 309, 311, 406, 1219, 13578, 13], "temperature": 0.0, "avg_logprob": -0.18919960538247474, "compression_ratio": 1.6702127659574468, "no_speech_prob": 3.13813006869168e-06}, {"id": 1918, "seek": 522028, "start": 5233.679999999999, "end": 5234.98, "text": " It's called squeezing shape.", "tokens": [467, 311, 1219, 36645, 3909, 13], "temperature": 0.0, "avg_logprob": -0.18919960538247474, "compression_ratio": 1.6702127659574468, "no_speech_prob": 3.13813006869168e-06}, {"id": 1919, "seek": 522028, "start": 5234.98, "end": 5236.28, "text": " It doesn't have that mean squared error.", "tokens": [467, 1177, 380, 362, 300, 914, 8889, 6713, 13], "temperature": 0.0, "avg_logprob": -0.18919960538247474, "compression_ratio": 1.6702127659574468, "no_speech_prob": 3.13813006869168e-06}, {"id": 1920, "seek": 522028, "start": 5236.28, "end": 5238.4, "text": " It's the same as PyTorch as well.", "tokens": [467, 311, 264, 912, 382, 9953, 51, 284, 339, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.18919960538247474, "compression_ratio": 1.6702127659574468, "no_speech_prob": 3.13813006869168e-06}, {"id": 1921, "seek": 522028, "start": 5238.4, "end": 5242.36, "text": " And so now here's our entire forward pass.", "tokens": [400, 370, 586, 510, 311, 527, 2302, 2128, 1320, 13], "temperature": 0.0, "avg_logprob": -0.18919960538247474, "compression_ratio": 1.6702127659574468, "no_speech_prob": 3.13813006869168e-06}, {"id": 1922, "seek": 522028, "start": 5242.36, "end": 5244.0, "text": " So hopefully that all looks very familiar.", "tokens": [407, 4696, 300, 439, 1542, 588, 4963, 13], "temperature": 0.0, "avg_logprob": -0.18919960538247474, "compression_ratio": 1.6702127659574468, "no_speech_prob": 3.13813006869168e-06}, {"id": 1923, "seek": 522028, "start": 5244.0, "end": 5248.96, "text": " If it doesn't, go back to zero two in the Python notebooks.", "tokens": [759, 309, 1177, 380, 11, 352, 646, 281, 4018, 732, 294, 264, 15329, 43782, 13], "temperature": 0.0, "avg_logprob": -0.18919960538247474, "compression_ratio": 1.6702127659574468, "no_speech_prob": 3.13813006869168e-06}, {"id": 1924, "seek": 524896, "start": 5248.96, "end": 5250.24, "text": " And actually this is one of the tricks,", "tokens": [400, 767, 341, 307, 472, 295, 264, 11733, 11], "temperature": 0.0, "avg_logprob": -0.12048454006222913, "compression_ratio": 1.7582417582417582, "no_speech_prob": 2.190737632190576e-06}, {"id": 1925, "seek": 524896, "start": 5250.24, "end": 5252.72, "text": " like this is why we've done it this way for you all,", "tokens": [411, 341, 307, 983, 321, 600, 1096, 309, 341, 636, 337, 291, 439, 11], "temperature": 0.0, "avg_logprob": -0.12048454006222913, "compression_ratio": 1.7582417582417582, "no_speech_prob": 2.190737632190576e-06}, {"id": 1926, "seek": 524896, "start": 5252.72, "end": 5256.92, "text": " is that we have like literally kind of these parallel texts.", "tokens": [307, 300, 321, 362, 411, 3736, 733, 295, 613, 8952, 15765, 13], "temperature": 0.0, "avg_logprob": -0.12048454006222913, "compression_ratio": 1.7582417582417582, "no_speech_prob": 2.190737632190576e-06}, {"id": 1927, "seek": 524896, "start": 5256.92, "end": 5258.24, "text": " You know, there's a Python version.", "tokens": [509, 458, 11, 456, 311, 257, 15329, 3037, 13], "temperature": 0.0, "avg_logprob": -0.12048454006222913, "compression_ratio": 1.7582417582417582, "no_speech_prob": 2.190737632190576e-06}, {"id": 1928, "seek": 524896, "start": 5258.24, "end": 5261.28, "text": " There's a Swift version, so you can see how they translate", "tokens": [821, 311, 257, 25539, 3037, 11, 370, 291, 393, 536, 577, 436, 13799], "temperature": 0.0, "avg_logprob": -0.12048454006222913, "compression_ratio": 1.7582417582417582, "no_speech_prob": 2.190737632190576e-06}, {"id": 1929, "seek": 524896, "start": 5261.28, "end": 5264.6, "text": " and see exactly how you can go from one language", "tokens": [293, 536, 2293, 577, 291, 393, 352, 490, 472, 2856], "temperature": 0.0, "avg_logprob": -0.12048454006222913, "compression_ratio": 1.7582417582417582, "no_speech_prob": 2.190737632190576e-06}, {"id": 1930, "seek": 524896, "start": 5264.6, "end": 5266.8, "text": " and one framework to another.", "tokens": [293, 472, 8388, 281, 1071, 13], "temperature": 0.0, "avg_logprob": -0.12048454006222913, "compression_ratio": 1.7582417582417582, "no_speech_prob": 2.190737632190576e-06}, {"id": 1931, "seek": 524896, "start": 5266.8, "end": 5270.6, "text": " That's all very well, but we also need to do a backward pass.", "tokens": [663, 311, 439, 588, 731, 11, 457, 321, 611, 643, 281, 360, 257, 23897, 1320, 13], "temperature": 0.0, "avg_logprob": -0.12048454006222913, "compression_ratio": 1.7582417582417582, "no_speech_prob": 2.190737632190576e-06}, {"id": 1932, "seek": 524896, "start": 5270.6, "end": 5273.88, "text": " So to do a backward pass, we can do it exactly the same way", "tokens": [407, 281, 360, 257, 23897, 1320, 11, 321, 393, 360, 309, 2293, 264, 912, 636], "temperature": 0.0, "avg_logprob": -0.12048454006222913, "compression_ratio": 1.7582417582417582, "no_speech_prob": 2.190737632190576e-06}, {"id": 1933, "seek": 524896, "start": 5273.88, "end": 5275.88, "text": " as again we did it in PyTorch.", "tokens": [382, 797, 321, 630, 309, 294, 9953, 51, 284, 339, 13], "temperature": 0.0, "avg_logprob": -0.12048454006222913, "compression_ratio": 1.7582417582417582, "no_speech_prob": 2.190737632190576e-06}, {"id": 1934, "seek": 527588, "start": 5275.88, "end": 5280.0, "text": " One trick, we kind of Python hack we used in PyTorch.", "tokens": [1485, 4282, 11, 321, 733, 295, 15329, 10339, 321, 1143, 294, 9953, 51, 284, 339, 13], "temperature": 0.0, "avg_logprob": -0.1544524892171224, "compression_ratio": 1.8006872852233677, "no_speech_prob": 9.22303388506407e-06}, {"id": 1935, "seek": 527588, "start": 5280.0, "end": 5281.32, "text": " And so this is doing it the hard way.", "tokens": [400, 370, 341, 307, 884, 309, 264, 1152, 636, 13], "temperature": 0.0, "avg_logprob": -0.1544524892171224, "compression_ratio": 1.8006872852233677, "no_speech_prob": 9.22303388506407e-06}, {"id": 1936, "seek": 527588, "start": 5281.32, "end": 5283.32, "text": " This is doing it all manually, because we have to build it.", "tokens": [639, 307, 884, 309, 439, 16945, 11, 570, 321, 362, 281, 1322, 309, 13], "temperature": 0.0, "avg_logprob": -0.1544524892171224, "compression_ratio": 1.8006872852233677, "no_speech_prob": 9.22303388506407e-06}, {"id": 1937, "seek": 527588, "start": 5283.32, "end": 5284.72, "text": " Doing it all manually, yeah, because we have", "tokens": [18496, 309, 439, 16945, 11, 1338, 11, 570, 321, 362], "temperature": 0.0, "avg_logprob": -0.1544524892171224, "compression_ratio": 1.8006872852233677, "no_speech_prob": 9.22303388506407e-06}, {"id": 1938, "seek": 527588, "start": 5284.72, "end": 5286.04, "text": " to build everything in Scratch.", "tokens": [281, 1322, 1203, 294, 34944, 852, 13], "temperature": 0.0, "avg_logprob": -0.1544524892171224, "compression_ratio": 1.8006872852233677, "no_speech_prob": 9.22303388506407e-06}, {"id": 1939, "seek": 527588, "start": 5286.04, "end": 5289.16, "text": " And the PyTorch version, we actually added a.grad attribute", "tokens": [400, 264, 9953, 51, 284, 339, 3037, 11, 321, 767, 3869, 257, 2411, 7165, 19667], "temperature": 0.0, "avg_logprob": -0.1544524892171224, "compression_ratio": 1.8006872852233677, "no_speech_prob": 9.22303388506407e-06}, {"id": 1940, "seek": 527588, "start": 5289.16, "end": 5290.64, "text": " to all of our tenses.", "tokens": [281, 439, 295, 527, 256, 9085, 13], "temperature": 0.0, "avg_logprob": -0.1544524892171224, "compression_ratio": 1.8006872852233677, "no_speech_prob": 9.22303388506407e-06}, {"id": 1941, "seek": 527588, "start": 5290.64, "end": 5292.76, "text": " You're not allowed to just throw attributes", "tokens": [509, 434, 406, 4350, 281, 445, 3507, 17212], "temperature": 0.0, "avg_logprob": -0.1544524892171224, "compression_ratio": 1.8006872852233677, "no_speech_prob": 9.22303388506407e-06}, {"id": 1942, "seek": 527588, "start": 5292.76, "end": 5294.32, "text": " in arbitrary places in Swift.", "tokens": [294, 23211, 3190, 294, 25539, 13], "temperature": 0.0, "avg_logprob": -0.1544524892171224, "compression_ratio": 1.8006872852233677, "no_speech_prob": 9.22303388506407e-06}, {"id": 1943, "seek": 527588, "start": 5294.32, "end": 5296.08, "text": " So we have to define a class", "tokens": [407, 321, 362, 281, 6964, 257, 1508], "temperature": 0.0, "avg_logprob": -0.1544524892171224, "compression_ratio": 1.8006872852233677, "no_speech_prob": 9.22303388506407e-06}, {"id": 1944, "seek": 527588, "start": 5296.08, "end": 5298.64, "text": " which has the actual value and the gradient.", "tokens": [597, 575, 264, 3539, 2158, 293, 264, 16235, 13], "temperature": 0.0, "avg_logprob": -0.1544524892171224, "compression_ratio": 1.8006872852233677, "no_speech_prob": 9.22303388506407e-06}, {"id": 1945, "seek": 527588, "start": 5298.64, "end": 5302.36, "text": " But once we've done that, the rest of this looks exactly the same", "tokens": [583, 1564, 321, 600, 1096, 300, 11, 264, 1472, 295, 341, 1542, 2293, 264, 912], "temperature": 0.0, "avg_logprob": -0.1544524892171224, "compression_ratio": 1.8006872852233677, "no_speech_prob": 9.22303388506407e-06}, {"id": 1946, "seek": 530236, "start": 5302.36, "end": 5305.88, "text": " as the PyTorch version did.", "tokens": [382, 264, 9953, 51, 284, 339, 3037, 630, 13], "temperature": 0.0, "avg_logprob": -0.15693687373756343, "compression_ratio": 1.6008771929824561, "no_speech_prob": 7.64631840866059e-06}, {"id": 1947, "seek": 530236, "start": 5305.88, "end": 5308.04, "text": " Here's our MSC grad, our ReLU grad.", "tokens": [1692, 311, 527, 7395, 34, 2771, 11, 527, 1300, 43, 52, 2771, 13], "temperature": 0.0, "avg_logprob": -0.15693687373756343, "compression_ratio": 1.6008771929824561, "no_speech_prob": 7.64631840866059e-06}, {"id": 1948, "seek": 530236, "start": 5308.04, "end": 5309.5199999999995, "text": " That's all exactly the same.", "tokens": [663, 311, 439, 2293, 264, 912, 13], "temperature": 0.0, "avg_logprob": -0.15693687373756343, "compression_ratio": 1.6008771929824561, "no_speech_prob": 7.64631840866059e-06}, {"id": 1949, "seek": 530236, "start": 5309.5199999999995, "end": 5310.92, "text": " In fact, you can compare here, right?", "tokens": [682, 1186, 11, 291, 393, 6794, 510, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.15693687373756343, "compression_ratio": 1.6008771929824561, "no_speech_prob": 7.64631840866059e-06}, {"id": 1950, "seek": 530236, "start": 5310.92, "end": 5314.759999999999, "text": " Here's the Python version we created for Lin grad.", "tokens": [1692, 311, 264, 15329, 3037, 321, 2942, 337, 9355, 2771, 13], "temperature": 0.0, "avg_logprob": -0.15693687373756343, "compression_ratio": 1.6008771929824561, "no_speech_prob": 7.64631840866059e-06}, {"id": 1951, "seek": 530236, "start": 5314.759999999999, "end": 5318.2, "text": " Here's the Swift version for Lin grad.", "tokens": [1692, 311, 264, 25539, 3037, 337, 9355, 2771, 13], "temperature": 0.0, "avg_logprob": -0.15693687373756343, "compression_ratio": 1.6008771929824561, "no_speech_prob": 7.64631840866059e-06}, {"id": 1952, "seek": 530236, "start": 5318.2, "end": 5319.88, "text": " It's almost identical, okay?", "tokens": [467, 311, 1920, 14800, 11, 1392, 30], "temperature": 0.0, "avg_logprob": -0.15693687373756343, "compression_ratio": 1.6008771929824561, "no_speech_prob": 7.64631840866059e-06}, {"id": 1953, "seek": 530236, "start": 5319.88, "end": 5322.839999999999, "text": " So now that we've done all that, we can go ahead", "tokens": [407, 586, 300, 321, 600, 1096, 439, 300, 11, 321, 393, 352, 2286], "temperature": 0.0, "avg_logprob": -0.15693687373756343, "compression_ratio": 1.6008771929824561, "no_speech_prob": 7.64631840866059e-06}, {"id": 1954, "seek": 530236, "start": 5322.839999999999, "end": 5328.24, "text": " and do our entire forward and backward pass.", "tokens": [293, 360, 527, 2302, 2128, 293, 23897, 1320, 13], "temperature": 0.0, "avg_logprob": -0.15693687373756343, "compression_ratio": 1.6008771929824561, "no_speech_prob": 7.64631840866059e-06}, {"id": 1955, "seek": 530236, "start": 5328.24, "end": 5331.16, "text": " And we're good to go.", "tokens": [400, 321, 434, 665, 281, 352, 13], "temperature": 0.0, "avg_logprob": -0.15693687373756343, "compression_ratio": 1.6008771929824561, "no_speech_prob": 7.64631840866059e-06}, {"id": 1956, "seek": 533116, "start": 5331.16, "end": 5335.639999999999, "text": " But it could be so much better.", "tokens": [583, 309, 727, 312, 370, 709, 1101, 13], "temperature": 0.0, "avg_logprob": -0.11539217483165652, "compression_ratio": 1.6628352490421456, "no_speech_prob": 8.663714652357157e-06}, {"id": 1957, "seek": 533116, "start": 5335.639999999999, "end": 5339.28, "text": " Well, you skipped past the big flashing red lights", "tokens": [1042, 11, 291, 30193, 1791, 264, 955, 31049, 2182, 5811], "temperature": 0.0, "avg_logprob": -0.11539217483165652, "compression_ratio": 1.6628352490421456, "no_speech_prob": 8.663714652357157e-06}, {"id": 1958, "seek": 533116, "start": 5339.28, "end": 5342.76, "text": " that says don't do this.", "tokens": [300, 1619, 500, 380, 360, 341, 13], "temperature": 0.0, "avg_logprob": -0.11539217483165652, "compression_ratio": 1.6628352490421456, "no_speech_prob": 8.663714652357157e-06}, {"id": 1959, "seek": 533116, "start": 5342.76, "end": 5344.12, "text": " Did you miss that part?", "tokens": [2589, 291, 1713, 300, 644, 30], "temperature": 0.0, "avg_logprob": -0.11539217483165652, "compression_ratio": 1.6628352490421456, "no_speech_prob": 8.663714652357157e-06}, {"id": 1960, "seek": 533116, "start": 5344.12, "end": 5345.4, "text": " Tell me about it.", "tokens": [5115, 385, 466, 309, 13], "temperature": 0.0, "avg_logprob": -0.11539217483165652, "compression_ratio": 1.6628352490421456, "no_speech_prob": 8.663714652357157e-06}, {"id": 1961, "seek": 533116, "start": 5345.4, "end": 5346.72, "text": " Oh, okay.", "tokens": [876, 11, 1392, 13], "temperature": 0.0, "avg_logprob": -0.11539217483165652, "compression_ratio": 1.6628352490421456, "no_speech_prob": 8.663714652357157e-06}, {"id": 1962, "seek": 533116, "start": 5346.72, "end": 5348.0, "text": " So let's talk about this.", "tokens": [407, 718, 311, 751, 466, 341, 13], "temperature": 0.0, "avg_logprob": -0.11539217483165652, "compression_ratio": 1.6628352490421456, "no_speech_prob": 8.663714652357157e-06}, {"id": 1963, "seek": 533116, "start": 5348.0, "end": 5350.04, "text": " So this is defining a class and putting things in classes.", "tokens": [407, 341, 307, 17827, 257, 1508, 293, 3372, 721, 294, 5359, 13], "temperature": 0.0, "avg_logprob": -0.11539217483165652, "compression_ratio": 1.6628352490421456, "no_speech_prob": 8.663714652357157e-06}, {"id": 1964, "seek": 533116, "start": 5350.04, "end": 5352.98, "text": " And we haven't seen classes yet, at least not very much.", "tokens": [400, 321, 2378, 380, 1612, 5359, 1939, 11, 412, 1935, 406, 588, 709, 13], "temperature": 0.0, "avg_logprob": -0.11539217483165652, "compression_ratio": 1.6628352490421456, "no_speech_prob": 8.663714652357157e-06}, {"id": 1965, "seek": 533116, "start": 5352.98, "end": 5355.639999999999, "text": " That's true, because before we've used things that looked", "tokens": [663, 311, 2074, 11, 570, 949, 321, 600, 1143, 721, 300, 2956], "temperature": 0.0, "avg_logprob": -0.11539217483165652, "compression_ratio": 1.6628352490421456, "no_speech_prob": 8.663714652357157e-06}, {"id": 1966, "seek": 533116, "start": 5355.639999999999, "end": 5357.92, "text": " like classes, but they didn't say class on them.", "tokens": [411, 5359, 11, 457, 436, 994, 380, 584, 1508, 322, 552, 13], "temperature": 0.0, "avg_logprob": -0.11539217483165652, "compression_ratio": 1.6628352490421456, "no_speech_prob": 8.663714652357157e-06}, {"id": 1967, "seek": 533116, "start": 5357.92, "end": 5359.72, "text": " They said struct on them.", "tokens": [814, 848, 6594, 322, 552, 13], "temperature": 0.0, "avg_logprob": -0.11539217483165652, "compression_ratio": 1.6628352490421456, "no_speech_prob": 8.663714652357157e-06}, {"id": 1968, "seek": 535972, "start": 5359.72, "end": 5361.240000000001, "text": " Yes, and so what is that?", "tokens": [1079, 11, 293, 370, 437, 307, 300, 30], "temperature": 0.0, "avg_logprob": -0.20342626144636922, "compression_ratio": 1.816, "no_speech_prob": 2.812922502926085e-06}, {"id": 1969, "seek": 535972, "start": 5361.240000000001, "end": 5367.16, "text": " And so let's play a little game.", "tokens": [400, 370, 718, 311, 862, 257, 707, 1216, 13], "temperature": 0.0, "avg_logprob": -0.20342626144636922, "compression_ratio": 1.816, "no_speech_prob": 2.812922502926085e-06}, {"id": 1970, "seek": 535972, "start": 5367.16, "end": 5369.96, "text": " And so let's talk about this idea of values and references,", "tokens": [400, 370, 718, 311, 751, 466, 341, 1558, 295, 4190, 293, 15400, 11], "temperature": 0.0, "avg_logprob": -0.20342626144636922, "compression_ratio": 1.816, "no_speech_prob": 2.812922502926085e-06}, {"id": 1971, "seek": 535972, "start": 5369.96, "end": 5373.6, "text": " because that's what struct versus class really means", "tokens": [570, 300, 311, 437, 6594, 5717, 1508, 534, 1355], "temperature": 0.0, "avg_logprob": -0.20342626144636922, "compression_ratio": 1.816, "no_speech_prob": 2.812922502926085e-06}, {"id": 1972, "seek": 535972, "start": 5373.6, "end": 5374.900000000001, "text": " in Swift.", "tokens": [294, 25539, 13], "temperature": 0.0, "avg_logprob": -0.20342626144636922, "compression_ratio": 1.816, "no_speech_prob": 2.812922502926085e-06}, {"id": 1973, "seek": 535972, "start": 5374.900000000001, "end": 5378.400000000001, "text": " A value is a struct thing, and a reference is a class thing.", "tokens": [316, 2158, 307, 257, 6594, 551, 11, 293, 257, 6408, 307, 257, 1508, 551, 13], "temperature": 0.0, "avg_logprob": -0.20342626144636922, "compression_ratio": 1.816, "no_speech_prob": 2.812922502926085e-06}, {"id": 1974, "seek": 535972, "start": 5378.400000000001, "end": 5380.280000000001, "text": " So let's talk about Python.", "tokens": [407, 718, 311, 751, 466, 15329, 13], "temperature": 0.0, "avg_logprob": -0.20342626144636922, "compression_ratio": 1.816, "no_speech_prob": 2.812922502926085e-06}, {"id": 1975, "seek": 535972, "start": 5380.280000000001, "end": 5381.84, "text": " Here's some really simple Python code.", "tokens": [1692, 311, 512, 534, 2199, 15329, 3089, 13], "temperature": 0.0, "avg_logprob": -0.20342626144636922, "compression_ratio": 1.816, "no_speech_prob": 2.812922502926085e-06}, {"id": 1976, "seek": 535972, "start": 5381.84, "end": 5383.4800000000005, "text": " And there's no tricks here.", "tokens": [400, 456, 311, 572, 11733, 510, 13], "temperature": 0.0, "avg_logprob": -0.20342626144636922, "compression_ratio": 1.816, "no_speech_prob": 2.812922502926085e-06}, {"id": 1977, "seek": 535972, "start": 5383.4800000000005, "end": 5385.320000000001, "text": " What we're doing is we're assigning four into A.", "tokens": [708, 321, 434, 884, 307, 321, 434, 49602, 1451, 666, 316, 13], "temperature": 0.0, "avg_logprob": -0.20342626144636922, "compression_ratio": 1.816, "no_speech_prob": 2.812922502926085e-06}, {"id": 1978, "seek": 535972, "start": 5385.320000000001, "end": 5387.4800000000005, "text": " We're copying A into B. We're incrementing A", "tokens": [492, 434, 27976, 316, 666, 363, 13, 492, 434, 26200, 278, 316], "temperature": 0.0, "avg_logprob": -0.20342626144636922, "compression_ratio": 1.816, "no_speech_prob": 2.812922502926085e-06}, {"id": 1979, "seek": 535972, "start": 5387.4800000000005, "end": 5388.8, "text": " and printing them out.", "tokens": [293, 14699, 552, 484, 13], "temperature": 0.0, "avg_logprob": -0.20342626144636922, "compression_ratio": 1.816, "no_speech_prob": 2.812922502926085e-06}, {"id": 1980, "seek": 538880, "start": 5388.8, "end": 5391.2, "text": " So when you do this, you see that A gets incremented.", "tokens": [407, 562, 291, 360, 341, 11, 291, 536, 300, 316, 2170, 1946, 14684, 13], "temperature": 0.0, "avg_logprob": -0.16379881524420403, "compression_ratio": 1.749090909090909, "no_speech_prob": 1.4508957974612713e-05}, {"id": 1981, "seek": 538880, "start": 5391.2, "end": 5392.84, "text": " Of course. B does not.", "tokens": [2720, 1164, 13, 363, 775, 406, 13], "temperature": 0.0, "avg_logprob": -0.16379881524420403, "compression_ratio": 1.749090909090909, "no_speech_prob": 1.4508957974612713e-05}, {"id": 1982, "seek": 538880, "start": 5392.84, "end": 5394.12, "text": " Of course.", "tokens": [2720, 1164, 13], "temperature": 0.0, "avg_logprob": -0.16379881524420403, "compression_ratio": 1.749090909090909, "no_speech_prob": 1.4508957974612713e-05}, {"id": 1983, "seek": 538880, "start": 5394.12, "end": 5395.4400000000005, "text": " This all makes perfect sense.", "tokens": [639, 439, 1669, 2176, 2020, 13], "temperature": 0.0, "avg_logprob": -0.16379881524420403, "compression_ratio": 1.749090909090909, "no_speech_prob": 1.4508957974612713e-05}, {"id": 1984, "seek": 538880, "start": 5395.4400000000005, "end": 5397.0, "text": " In Swift, you do the same thing.", "tokens": [682, 25539, 11, 291, 360, 264, 912, 551, 13], "temperature": 0.0, "avg_logprob": -0.16379881524420403, "compression_ratio": 1.749090909090909, "no_speech_prob": 1.4508957974612713e-05}, {"id": 1985, "seek": 538880, "start": 5397.0, "end": 5398.320000000001, "text": " You get the same thing out.", "tokens": [509, 483, 264, 912, 551, 484, 13], "temperature": 0.0, "avg_logprob": -0.16379881524420403, "compression_ratio": 1.749090909090909, "no_speech_prob": 1.4508957974612713e-05}, {"id": 1986, "seek": 538880, "start": 5398.320000000001, "end": 5400.8, "text": " This is how math works, right?", "tokens": [639, 307, 577, 5221, 1985, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.16379881524420403, "compression_ratio": 1.749090909090909, "no_speech_prob": 1.4508957974612713e-05}, {"id": 1987, "seek": 538880, "start": 5400.8, "end": 5402.64, "text": " All very straightforward.", "tokens": [1057, 588, 15325, 13], "temperature": 0.0, "avg_logprob": -0.16379881524420403, "compression_ratio": 1.749090909090909, "no_speech_prob": 1.4508957974612713e-05}, {"id": 1988, "seek": 538880, "start": 5402.64, "end": 5403.9400000000005, "text": " Let's talk about arrays.", "tokens": [961, 311, 751, 466, 41011, 13], "temperature": 0.0, "avg_logprob": -0.16379881524420403, "compression_ratio": 1.749090909090909, "no_speech_prob": 1.4508957974612713e-05}, {"id": 1989, "seek": 538880, "start": 5403.9400000000005, "end": 5408.400000000001, "text": " So here I have an array or a list in Python, and I put into X,", "tokens": [407, 510, 286, 362, 364, 10225, 420, 257, 1329, 294, 15329, 11, 293, 286, 829, 666, 1783, 11], "temperature": 0.0, "avg_logprob": -0.16379881524420403, "compression_ratio": 1.749090909090909, "no_speech_prob": 1.4508957974612713e-05}, {"id": 1990, "seek": 538880, "start": 5408.400000000001, "end": 5412.76, "text": " and then I copy X into Y. I add something to X, and it has it.", "tokens": [293, 550, 286, 5055, 1783, 666, 398, 13, 286, 909, 746, 281, 1783, 11, 293, 309, 575, 309, 13], "temperature": 0.0, "avg_logprob": -0.16379881524420403, "compression_ratio": 1.749090909090909, "no_speech_prob": 1.4508957974612713e-05}, {"id": 1991, "seek": 538880, "start": 5412.76, "end": 5414.72, "text": " I have to point with this.", "tokens": [286, 362, 281, 935, 365, 341, 13], "temperature": 0.0, "avg_logprob": -0.16379881524420403, "compression_ratio": 1.749090909090909, "no_speech_prob": 1.4508957974612713e-05}, {"id": 1992, "seek": 538880, "start": 5414.72, "end": 5416.24, "text": " So and then it has the extra item.", "tokens": [407, 293, 550, 309, 575, 264, 2857, 3174, 13], "temperature": 0.0, "avg_logprob": -0.16379881524420403, "compression_ratio": 1.749090909090909, "no_speech_prob": 1.4508957974612713e-05}, {"id": 1993, "seek": 538880, "start": 5416.24, "end": 5418.2, "text": " That makes perfect sense, right?", "tokens": [663, 1669, 2176, 2020, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.16379881524420403, "compression_ratio": 1.749090909090909, "no_speech_prob": 1.4508957974612713e-05}, {"id": 1994, "seek": 541820, "start": 5418.2, "end": 5420.5199999999995, "text": " So what happens to Y?", "tokens": [407, 437, 2314, 281, 398, 30], "temperature": 0.0, "avg_logprob": -0.1414742623606036, "compression_ratio": 1.7394957983193278, "no_speech_prob": 8.013006663531996e-06}, {"id": 1995, "seek": 541820, "start": 5420.5199999999995, "end": 5422.5199999999995, "text": " What? What just happened here?", "tokens": [708, 30, 708, 445, 2011, 510, 30], "temperature": 0.0, "avg_logprob": -0.1414742623606036, "compression_ratio": 1.7394957983193278, "no_speech_prob": 8.013006663531996e-06}, {"id": 1996, "seek": 541820, "start": 5422.5199999999995, "end": 5425.72, "text": " I just added something to X, and now Y changed?", "tokens": [286, 445, 3869, 746, 281, 1783, 11, 293, 586, 398, 3105, 30], "temperature": 0.0, "avg_logprob": -0.1414742623606036, "compression_ratio": 1.7394957983193278, "no_speech_prob": 8.013006663531996e-06}, {"id": 1997, "seek": 541820, "start": 5425.72, "end": 5428.639999999999, "text": " Now what is going on here?", "tokens": [823, 437, 307, 516, 322, 510, 30], "temperature": 0.0, "avg_logprob": -0.1414742623606036, "compression_ratio": 1.7394957983193278, "no_speech_prob": 8.013006663531996e-06}, {"id": 1998, "seek": 541820, "start": 5428.639999999999, "end": 5430.76, "text": " Well, we learn.", "tokens": [1042, 11, 321, 1466, 13], "temperature": 0.0, "avg_logprob": -0.1414742623606036, "compression_ratio": 1.7394957983193278, "no_speech_prob": 8.013006663531996e-06}, {"id": 1999, "seek": 541820, "start": 5430.76, "end": 5433.599999999999, "text": " We learn that there's this thing called a reference, and we learn", "tokens": [492, 1466, 300, 456, 311, 341, 551, 1219, 257, 6408, 11, 293, 321, 1466], "temperature": 0.0, "avg_logprob": -0.1414742623606036, "compression_ratio": 1.7394957983193278, "no_speech_prob": 8.013006663531996e-06}, {"id": 2000, "seek": 541820, "start": 5433.599999999999, "end": 5437.72, "text": " that it does things like this, and we learn when it bites us.", "tokens": [300, 309, 775, 721, 411, 341, 11, 293, 321, 1466, 562, 309, 26030, 505, 13], "temperature": 0.0, "avg_logprob": -0.1414742623606036, "compression_ratio": 1.7394957983193278, "no_speech_prob": 8.013006663531996e-06}, {"id": 2001, "seek": 541820, "start": 5437.72, "end": 5439.0, "text": " What happens in Swift?", "tokens": [708, 2314, 294, 25539, 30], "temperature": 0.0, "avg_logprob": -0.1414742623606036, "compression_ratio": 1.7394957983193278, "no_speech_prob": 8.013006663531996e-06}, {"id": 2002, "seek": 541820, "start": 5439.0, "end": 5440.3, "text": " Well, Swift has arrays.", "tokens": [1042, 11, 25539, 575, 41011, 13], "temperature": 0.0, "avg_logprob": -0.1414742623606036, "compression_ratio": 1.7394957983193278, "no_speech_prob": 8.013006663531996e-06}, {"id": 2003, "seek": 541820, "start": 5440.3, "end": 5441.88, "text": " It doesn't have lists the same way.", "tokens": [467, 1177, 380, 362, 14511, 264, 912, 636, 13], "temperature": 0.0, "avg_logprob": -0.1414742623606036, "compression_ratio": 1.7394957983193278, "no_speech_prob": 8.013006663531996e-06}, {"id": 2004, "seek": 541820, "start": 5441.88, "end": 5446.04, "text": " And so here we have, again, this identical code except var.", "tokens": [400, 370, 510, 321, 362, 11, 797, 11, 341, 14800, 3089, 3993, 1374, 13], "temperature": 0.0, "avg_logprob": -0.1414742623606036, "compression_ratio": 1.7394957983193278, "no_speech_prob": 8.013006663531996e-06}, {"id": 2005, "seek": 544604, "start": 5446.04, "end": 5450.24, "text": " We put one and a two into X. We copy X into Y. We add something", "tokens": [492, 829, 472, 293, 257, 732, 666, 1783, 13, 492, 5055, 1783, 666, 398, 13, 492, 909, 746], "temperature": 0.0, "avg_logprob": -0.12136583709716797, "compression_ratio": 1.705179282868526, "no_speech_prob": 3.668785439003841e-06}, {"id": 2006, "seek": 544604, "start": 5450.24, "end": 5451.54, "text": " to X. We print it out.", "tokens": [281, 1783, 13, 492, 4482, 309, 484, 13], "temperature": 0.0, "avg_logprob": -0.12136583709716797, "compression_ratio": 1.705179282868526, "no_speech_prob": 3.668785439003841e-06}, {"id": 2007, "seek": 544604, "start": 5451.54, "end": 5453.68, "text": " We get the extra element.", "tokens": [492, 483, 264, 2857, 4478, 13], "temperature": 0.0, "avg_logprob": -0.12136583709716797, "compression_ratio": 1.705179282868526, "no_speech_prob": 3.668785439003841e-06}, {"id": 2008, "seek": 544604, "start": 5453.68, "end": 5455.64, "text": " But Y is correct.", "tokens": [583, 398, 307, 3006, 13], "temperature": 0.0, "avg_logprob": -0.12136583709716797, "compression_ratio": 1.705179282868526, "no_speech_prob": 3.668785439003841e-06}, {"id": 2009, "seek": 544604, "start": 5455.64, "end": 5457.36, "text": " What just happened?", "tokens": [708, 445, 2011, 30], "temperature": 0.0, "avg_logprob": -0.12136583709716797, "compression_ratio": 1.705179282868526, "no_speech_prob": 3.668785439003841e-06}, {"id": 2010, "seek": 544604, "start": 5457.36, "end": 5461.08, "text": " So this is something called value and reference semantics.", "tokens": [407, 341, 307, 746, 1219, 2158, 293, 6408, 4361, 45298, 13], "temperature": 0.0, "avg_logprob": -0.12136583709716797, "compression_ratio": 1.705179282868526, "no_speech_prob": 3.668785439003841e-06}, {"id": 2011, "seek": 544604, "start": 5461.08, "end": 5465.0, "text": " And in Swift, arrays, dictionaries, tensors,", "tokens": [400, 294, 25539, 11, 41011, 11, 22352, 4889, 11, 10688, 830, 11], "temperature": 0.0, "avg_logprob": -0.12136583709716797, "compression_ratio": 1.705179282868526, "no_speech_prob": 3.668785439003841e-06}, {"id": 2012, "seek": 544604, "start": 5465.0, "end": 5467.36, "text": " like all these things have what's known as value semantics.", "tokens": [411, 439, 613, 721, 362, 437, 311, 2570, 382, 2158, 4361, 45298, 13], "temperature": 0.0, "avg_logprob": -0.12136583709716797, "compression_ratio": 1.705179282868526, "no_speech_prob": 3.668785439003841e-06}, {"id": 2013, "seek": 544604, "start": 5467.36, "end": 5469.92, "text": " And let's dive in a little bit about what that is.", "tokens": [400, 718, 311, 9192, 294, 257, 707, 857, 466, 437, 300, 307, 13], "temperature": 0.0, "avg_logprob": -0.12136583709716797, "compression_ratio": 1.705179282868526, "no_speech_prob": 3.668785439003841e-06}, {"id": 2014, "seek": 544604, "start": 5469.92, "end": 5474.8, "text": " So a value in something that has value semantics is a variable", "tokens": [407, 257, 2158, 294, 746, 300, 575, 2158, 4361, 45298, 307, 257, 7006], "temperature": 0.0, "avg_logprob": -0.12136583709716797, "compression_ratio": 1.705179282868526, "no_speech_prob": 3.668785439003841e-06}, {"id": 2015, "seek": 547480, "start": 5474.8, "end": 5477.68, "text": " that, sorry, this is self-referential.", "tokens": [300, 11, 2597, 11, 341, 307, 2698, 12, 265, 612, 2549, 13], "temperature": 0.0, "avg_logprob": -0.1206984946398231, "compression_ratio": 1.831275720164609, "no_speech_prob": 5.955022061243653e-06}, {"id": 2016, "seek": 547480, "start": 5477.68, "end": 5480.68, "text": " When you declare something in your code, you're declaring a name.", "tokens": [1133, 291, 19710, 746, 294, 428, 3089, 11, 291, 434, 40374, 257, 1315, 13], "temperature": 0.0, "avg_logprob": -0.1206984946398231, "compression_ratio": 1.831275720164609, "no_speech_prob": 5.955022061243653e-06}, {"id": 2017, "seek": 547480, "start": 5480.68, "end": 5485.52, "text": " And if it's a name for a value, that name stands for that value, right?", "tokens": [400, 498, 309, 311, 257, 1315, 337, 257, 2158, 11, 300, 1315, 7382, 337, 300, 2158, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.1206984946398231, "compression_ratio": 1.831275720164609, "no_speech_prob": 5.955022061243653e-06}, {"id": 2018, "seek": 547480, "start": 5485.52, "end": 5489.400000000001, "text": " X stands for the array of elements that it contains.", "tokens": [1783, 7382, 337, 264, 10225, 295, 4959, 300, 309, 8306, 13], "temperature": 0.0, "avg_logprob": -0.1206984946398231, "compression_ratio": 1.831275720164609, "no_speech_prob": 5.955022061243653e-06}, {"id": 2019, "seek": 547480, "start": 5489.400000000001, "end": 5492.28, "text": " This is how math always works.", "tokens": [639, 307, 577, 5221, 1009, 1985, 13], "temperature": 0.0, "avg_logprob": -0.1206984946398231, "compression_ratio": 1.831275720164609, "no_speech_prob": 5.955022061243653e-06}, {"id": 2020, "seek": 547480, "start": 5492.28, "end": 5494.24, "text": " This is what you expect out of basic integers.", "tokens": [639, 307, 437, 291, 2066, 484, 295, 3875, 41674, 13], "temperature": 0.0, "avg_logprob": -0.1206984946398231, "compression_ratio": 1.831275720164609, "no_speech_prob": 5.955022061243653e-06}, {"id": 2021, "seek": 547480, "start": 5494.24, "end": 5496.4400000000005, "text": " This is what you expect out of basic things", "tokens": [639, 307, 437, 291, 2066, 484, 295, 3875, 721], "temperature": 0.0, "avg_logprob": -0.1206984946398231, "compression_ratio": 1.831275720164609, "no_speech_prob": 5.955022061243653e-06}, {"id": 2022, "seek": 547480, "start": 5496.4400000000005, "end": 5499.76, "text": " that you interact with on a daily basis.", "tokens": [300, 291, 4648, 365, 322, 257, 5212, 5143, 13], "temperature": 0.0, "avg_logprob": -0.1206984946398231, "compression_ratio": 1.831275720164609, "no_speech_prob": 5.955022061243653e-06}, {"id": 2023, "seek": 547480, "start": 5499.76, "end": 5501.8, "text": " Reference semantics are weird if you think about it.", "tokens": [1300, 5158, 4361, 45298, 366, 3657, 498, 291, 519, 466, 309, 13], "temperature": 0.0, "avg_logprob": -0.1206984946398231, "compression_ratio": 1.831275720164609, "no_speech_prob": 5.955022061243653e-06}, {"id": 2024, "seek": 550180, "start": 5501.8, "end": 5507.360000000001, "text": " So what we're doing is we're saying that X is a name for something else.", "tokens": [407, 437, 321, 434, 884, 307, 321, 434, 1566, 300, 1783, 307, 257, 1315, 337, 746, 1646, 13], "temperature": 0.0, "avg_logprob": -0.127525176445063, "compression_ratio": 1.6934306569343065, "no_speech_prob": 2.521486521800398e-06}, {"id": 2025, "seek": 550180, "start": 5507.360000000001, "end": 5510.24, "text": " And so we usually don't think about this until it comes", "tokens": [400, 370, 321, 2673, 500, 380, 519, 466, 341, 1826, 309, 1487], "temperature": 0.0, "avg_logprob": -0.127525176445063, "compression_ratio": 1.6934306569343065, "no_speech_prob": 2.521486521800398e-06}, {"id": 2026, "seek": 550180, "start": 5510.24, "end": 5511.54, "text": " around to bite us.", "tokens": [926, 281, 7988, 505, 13], "temperature": 0.0, "avg_logprob": -0.127525176445063, "compression_ratio": 1.6934306569343065, "no_speech_prob": 2.521486521800398e-06}, {"id": 2027, "seek": 550180, "start": 5511.54, "end": 5513.56, "text": " And so this is kind of a problem.", "tokens": [400, 370, 341, 307, 733, 295, 257, 1154, 13], "temperature": 0.0, "avg_logprob": -0.127525176445063, "compression_ratio": 1.6934306569343065, "no_speech_prob": 2.521486521800398e-06}, {"id": 2028, "seek": 550180, "start": 5513.56, "end": 5515.2, "text": " And let's dive in a little bit", "tokens": [400, 718, 311, 9192, 294, 257, 707, 857], "temperature": 0.0, "avg_logprob": -0.127525176445063, "compression_ratio": 1.6934306569343065, "no_speech_prob": 2.521486521800398e-06}, {"id": 2029, "seek": 550180, "start": 5515.2, "end": 5517.6, "text": " to understand why this causes problems.", "tokens": [281, 1223, 983, 341, 7700, 2740, 13], "temperature": 0.0, "avg_logprob": -0.127525176445063, "compression_ratio": 1.6934306569343065, "no_speech_prob": 2.521486521800398e-06}, {"id": 2030, "seek": 550180, "start": 5517.6, "end": 5519.320000000001, "text": " So here's a function.", "tokens": [407, 510, 311, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.127525176445063, "compression_ratio": 1.6934306569343065, "no_speech_prob": 2.521486521800398e-06}, {"id": 2031, "seek": 550180, "start": 5519.320000000001, "end": 5520.6, "text": " It's do thing.", "tokens": [467, 311, 360, 551, 13], "temperature": 0.0, "avg_logprob": -0.127525176445063, "compression_ratio": 1.6934306569343065, "no_speech_prob": 2.521486521800398e-06}, {"id": 2032, "seek": 550180, "start": 5520.6, "end": 5523.16, "text": " It's something that Jeremy wrote with a very descriptive name.", "tokens": [467, 311, 746, 300, 17809, 4114, 365, 257, 588, 42585, 1315, 13], "temperature": 0.0, "avg_logprob": -0.127525176445063, "compression_ratio": 1.6934306569343065, "no_speech_prob": 2.521486521800398e-06}, {"id": 2033, "seek": 550180, "start": 5523.16, "end": 5527.2, "text": " And it takes T, and then it goes and updates this, and that's fine, right?", "tokens": [400, 309, 2516, 314, 11, 293, 550, 309, 1709, 293, 9205, 341, 11, 293, 300, 311, 2489, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.127525176445063, "compression_ratio": 1.6934306569343065, "no_speech_prob": 2.521486521800398e-06}, {"id": 2034, "seek": 550180, "start": 5527.2, "end": 5528.5, "text": " It's super fast.", "tokens": [467, 311, 1687, 2370, 13], "temperature": 0.0, "avg_logprob": -0.127525176445063, "compression_ratio": 1.6934306569343065, "no_speech_prob": 2.521486521800398e-06}, {"id": 2035, "seek": 550180, "start": 5528.5, "end": 5529.8, "text": " Everything is good.", "tokens": [5471, 307, 665, 13], "temperature": 0.0, "avg_logprob": -0.127525176445063, "compression_ratio": 1.6934306569343065, "no_speech_prob": 2.521486521800398e-06}, {"id": 2036, "seek": 552980, "start": 5529.8, "end": 5533.12, "text": " So you go on and put in a workbook, and then you build the next workbook.", "tokens": [407, 291, 352, 322, 293, 829, 294, 257, 589, 2939, 11, 293, 550, 291, 1322, 264, 958, 589, 2939, 13], "temperature": 0.0, "avg_logprob": -0.14877161402611216, "compression_ratio": 1.858695652173913, "no_speech_prob": 6.2405206335824914e-06}, {"id": 2037, "seek": 552980, "start": 5533.12, "end": 5537.88, "text": " Next workbook calls in a do thing, and you find out, oh, well,", "tokens": [3087, 589, 2939, 5498, 294, 257, 360, 551, 11, 293, 291, 915, 484, 11, 1954, 11, 731, 11], "temperature": 0.0, "avg_logprob": -0.14877161402611216, "compression_ratio": 1.858695652173913, "no_speech_prob": 6.2405206335824914e-06}, {"id": 2038, "seek": 552980, "start": 5537.88, "end": 5540.28, "text": " it changed the tensor I passed in, but I was using that tensor", "tokens": [309, 3105, 264, 40863, 286, 4678, 294, 11, 457, 286, 390, 1228, 300, 40863], "temperature": 0.0, "avg_logprob": -0.14877161402611216, "compression_ratio": 1.858695652173913, "no_speech_prob": 6.2405206335824914e-06}, {"id": 2039, "seek": 552980, "start": 5540.28, "end": 5542.92, "text": " for something else, and now I've got a problem", "tokens": [337, 746, 1646, 11, 293, 586, 286, 600, 658, 257, 1154], "temperature": 0.0, "avg_logprob": -0.14877161402611216, "compression_ratio": 1.858695652173913, "no_speech_prob": 6.2405206335824914e-06}, {"id": 2040, "seek": 552980, "start": 5542.92, "end": 5545.6, "text": " because it's changing a tensor that I wanted to use.", "tokens": [570, 309, 311, 4473, 257, 40863, 300, 286, 1415, 281, 764, 13], "temperature": 0.0, "avg_logprob": -0.14877161402611216, "compression_ratio": 1.858695652173913, "no_speech_prob": 6.2405206335824914e-06}, {"id": 2041, "seek": 552980, "start": 5545.6, "end": 5546.900000000001, "text": " And now I've got this bug.", "tokens": [400, 586, 286, 600, 658, 341, 7426, 13], "temperature": 0.0, "avg_logprob": -0.14877161402611216, "compression_ratio": 1.858695652173913, "no_speech_prob": 6.2405206335824914e-06}, {"id": 2042, "seek": 552980, "start": 5546.900000000001, "end": 5548.2, "text": " I have to debug it, and I find", "tokens": [286, 362, 281, 24083, 309, 11, 293, 286, 915], "temperature": 0.0, "avg_logprob": -0.14877161402611216, "compression_ratio": 1.858695652173913, "no_speech_prob": 6.2405206335824914e-06}, {"id": 2043, "seek": 552980, "start": 5548.2, "end": 5549.5, "text": " out the do thing is causing the problem.", "tokens": [484, 264, 360, 551, 307, 9853, 264, 1154, 13], "temperature": 0.0, "avg_logprob": -0.14877161402611216, "compression_ratio": 1.858695652173913, "no_speech_prob": 6.2405206335824914e-06}, {"id": 2044, "seek": 552980, "start": 5549.5, "end": 5551.04, "text": " And so what do I do?", "tokens": [400, 370, 437, 360, 286, 360, 30], "temperature": 0.0, "avg_logprob": -0.14877161402611216, "compression_ratio": 1.858695652173913, "no_speech_prob": 6.2405206335824914e-06}, {"id": 2045, "seek": 552980, "start": 5551.04, "end": 5552.7, "text": " I go put a clone in there.", "tokens": [286, 352, 829, 257, 26506, 294, 456, 13], "temperature": 0.0, "avg_logprob": -0.14877161402611216, "compression_ratio": 1.858695652173913, "no_speech_prob": 6.2405206335824914e-06}, {"id": 2046, "seek": 552980, "start": 5552.7, "end": 5557.360000000001, "text": " I don't know who here adds clones in a principled way or who here?", "tokens": [286, 500, 380, 458, 567, 510, 10860, 43803, 294, 257, 3681, 15551, 636, 420, 567, 510, 30], "temperature": 0.0, "avg_logprob": -0.14877161402611216, "compression_ratio": 1.858695652173913, "no_speech_prob": 6.2405206335824914e-06}, {"id": 2047, "seek": 555736, "start": 5557.36, "end": 5560.599999999999, "text": " I do use it in a principled way, so what we do in fast AI is we kind", "tokens": [286, 360, 764, 309, 294, 257, 3681, 15551, 636, 11, 370, 437, 321, 360, 294, 2370, 7318, 307, 321, 733], "temperature": 0.0, "avg_logprob": -0.15359487316825174, "compression_ratio": 1.8018867924528301, "no_speech_prob": 0.00012338062515482306}, {"id": 2048, "seek": 555736, "start": 5560.599999999999, "end": 5562.88, "text": " of don't have clone, and then when things start breaking,", "tokens": [295, 500, 380, 362, 26506, 11, 293, 550, 562, 721, 722, 7697, 11], "temperature": 0.0, "avg_logprob": -0.15359487316825174, "compression_ratio": 1.8018867924528301, "no_speech_prob": 0.00012338062515482306}, {"id": 2049, "seek": 555736, "start": 5562.88, "end": 5566.28, "text": " I add clone until things stop breaking, and then we're done.", "tokens": [286, 909, 26506, 1826, 721, 1590, 7697, 11, 293, 550, 321, 434, 1096, 13], "temperature": 0.0, "avg_logprob": -0.15359487316825174, "compression_ratio": 1.8018867924528301, "no_speech_prob": 0.00012338062515482306}, {"id": 2050, "seek": 555736, "start": 5566.28, "end": 5567.58, "text": " That sounds great.", "tokens": [663, 3263, 869, 13], "temperature": 0.0, "avg_logprob": -0.15359487316825174, "compression_ratio": 1.8018867924528301, "no_speech_prob": 0.00012338062515482306}, {"id": 2051, "seek": 555736, "start": 5567.58, "end": 5571.44, "text": " Yeah, so there's a lot of clone in fast AI, and yeah.", "tokens": [865, 11, 370, 456, 311, 257, 688, 295, 26506, 294, 2370, 7318, 11, 293, 1338, 13], "temperature": 0.0, "avg_logprob": -0.15359487316825174, "compression_ratio": 1.8018867924528301, "no_speech_prob": 0.00012338062515482306}, {"id": 2052, "seek": 555736, "start": 5571.44, "end": 5572.74, "text": " That's a good principle.", "tokens": [663, 311, 257, 665, 8665, 13], "temperature": 0.0, "avg_logprob": -0.15359487316825174, "compression_ratio": 1.8018867924528301, "no_speech_prob": 0.00012338062515482306}, {"id": 2053, "seek": 555736, "start": 5572.74, "end": 5574.04, "text": " I see what you're going for.", "tokens": [286, 536, 437, 291, 434, 516, 337, 13], "temperature": 0.0, "avg_logprob": -0.15359487316825174, "compression_ratio": 1.8018867924528301, "no_speech_prob": 0.00012338062515482306}, {"id": 2054, "seek": 555736, "start": 5574.04, "end": 5575.759999999999, "text": " Possibly a few too many, or possibly a few too few.", "tokens": [33112, 3545, 257, 1326, 886, 867, 11, 420, 6264, 257, 1326, 886, 1326, 13], "temperature": 0.0, "avg_logprob": -0.15359487316825174, "compression_ratio": 1.8018867924528301, "no_speech_prob": 0.00012338062515482306}, {"id": 2055, "seek": 555736, "start": 5575.759999999999, "end": 5577.0599999999995, "text": " Well, so now think about this.", "tokens": [1042, 11, 370, 586, 519, 466, 341, 13], "temperature": 0.0, "avg_logprob": -0.15359487316825174, "compression_ratio": 1.8018867924528301, "no_speech_prob": 0.00012338062515482306}, {"id": 2056, "seek": 555736, "start": 5577.0599999999995, "end": 5579.5199999999995, "text": " What we have is we have a foot gun here in the first case.", "tokens": [708, 321, 362, 307, 321, 362, 257, 2671, 3874, 510, 294, 264, 700, 1389, 13], "temperature": 0.0, "avg_logprob": -0.15359487316825174, "compression_ratio": 1.8018867924528301, "no_speech_prob": 0.00012338062515482306}, {"id": 2057, "seek": 555736, "start": 5579.5199999999995, "end": 5582.679999999999, "text": " So something that's ready to explode if I use it wrong.", "tokens": [407, 746, 300, 311, 1919, 281, 21411, 498, 286, 764, 309, 2085, 13], "temperature": 0.0, "avg_logprob": -0.15359487316825174, "compression_ratio": 1.8018867924528301, "no_speech_prob": 0.00012338062515482306}, {"id": 2058, "seek": 555736, "start": 5582.679999999999, "end": 5584.759999999999, "text": " Now I added clone, and so good news.", "tokens": [823, 286, 3869, 26506, 11, 293, 370, 665, 2583, 13], "temperature": 0.0, "avg_logprob": -0.15359487316825174, "compression_ratio": 1.8018867924528301, "no_speech_prob": 0.00012338062515482306}, {"id": 2059, "seek": 555736, "start": 5584.759999999999, "end": 5587.32, "text": " It's correct, but slow.", "tokens": [467, 311, 3006, 11, 457, 2964, 13], "temperature": 0.0, "avg_logprob": -0.15359487316825174, "compression_ratio": 1.8018867924528301, "no_speech_prob": 0.00012338062515482306}, {"id": 2060, "seek": 558732, "start": 5587.32, "end": 5589.44, "text": " So it's going to do that copy even if I don't need to,", "tokens": [407, 309, 311, 516, 281, 360, 300, 5055, 754, 498, 286, 500, 380, 643, 281, 11], "temperature": 0.0, "avg_logprob": -0.11551410031605916, "compression_ratio": 1.8063492063492064, "no_speech_prob": 3.3211312256753445e-05}, {"id": 2061, "seek": 558732, "start": 5589.44, "end": 5591.5599999999995, "text": " which is really sad.", "tokens": [597, 307, 534, 4227, 13], "temperature": 0.0, "avg_logprob": -0.11551410031605916, "compression_ratio": 1.8063492063492064, "no_speech_prob": 3.3211312256753445e-05}, {"id": 2062, "seek": 558732, "start": 5591.5599999999995, "end": 5593.48, "text": " In Swift, things just work.", "tokens": [682, 25539, 11, 721, 445, 589, 13], "temperature": 0.0, "avg_logprob": -0.11551410031605916, "compression_ratio": 1.8063492063492064, "no_speech_prob": 3.3211312256753445e-05}, {"id": 2063, "seek": 558732, "start": 5593.48, "end": 5594.96, "text": " You pass in a tensor.", "tokens": [509, 1320, 294, 257, 40863, 13], "temperature": 0.0, "avg_logprob": -0.11551410031605916, "compression_ratio": 1.8063492063492064, "no_speech_prob": 3.3211312256753445e-05}, {"id": 2064, "seek": 558732, "start": 5594.96, "end": 5596.259999999999, "text": " You can update it.", "tokens": [509, 393, 5623, 309, 13], "temperature": 0.0, "avg_logprob": -0.11551410031605916, "compression_ratio": 1.8063492063492064, "no_speech_prob": 3.3211312256753445e-05}, {"id": 2065, "seek": 558732, "start": 5596.259999999999, "end": 5598.4, "text": " You can return it, and it leaves the original one alone.", "tokens": [509, 393, 2736, 309, 11, 293, 309, 5510, 264, 3380, 472, 3312, 13], "temperature": 0.0, "avg_logprob": -0.11551410031605916, "compression_ratio": 1.8063492063492064, "no_speech_prob": 3.3211312256753445e-05}, {"id": 2066, "seek": 558732, "start": 5598.4, "end": 5600.5199999999995, "text": " Arguments in Swift actually even default to constants,", "tokens": [40081, 4697, 294, 25539, 767, 754, 7576, 281, 35870, 11], "temperature": 0.0, "avg_logprob": -0.11551410031605916, "compression_ratio": 1.8063492063492064, "no_speech_prob": 3.3211312256753445e-05}, {"id": 2067, "seek": 558732, "start": 5600.5199999999995, "end": 5603.28, "text": " which makes it so that you can't do that.", "tokens": [597, 1669, 309, 370, 300, 291, 393, 380, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.11551410031605916, "compression_ratio": 1.8063492063492064, "no_speech_prob": 3.3211312256753445e-05}, {"id": 2068, "seek": 558732, "start": 5603.28, "end": 5606.28, "text": " If you do actually want to modify something in the caller,", "tokens": [759, 291, 360, 767, 528, 281, 16927, 746, 294, 264, 48324, 11], "temperature": 0.0, "avg_logprob": -0.11551410031605916, "compression_ratio": 1.8063492063492064, "no_speech_prob": 3.3211312256753445e-05}, {"id": 2069, "seek": 558732, "start": 5606.28, "end": 5607.679999999999, "text": " you can do that too.", "tokens": [291, 393, 360, 300, 886, 13], "temperature": 0.0, "avg_logprob": -0.11551410031605916, "compression_ratio": 1.8063492063492064, "no_speech_prob": 3.3211312256753445e-05}, {"id": 2070, "seek": 558732, "start": 5607.679999999999, "end": 5609.4, "text": " You just have to be a little bit more explicit about it", "tokens": [509, 445, 362, 281, 312, 257, 707, 857, 544, 13691, 466, 309], "temperature": 0.0, "avg_logprob": -0.11551410031605916, "compression_ratio": 1.8063492063492064, "no_speech_prob": 3.3211312256753445e-05}, {"id": 2071, "seek": 558732, "start": 5609.4, "end": 5611.32, "text": " and use this thing called in out.", "tokens": [293, 764, 341, 551, 1219, 294, 484, 13], "temperature": 0.0, "avg_logprob": -0.11551410031605916, "compression_ratio": 1.8063492063492064, "no_speech_prob": 3.3211312256753445e-05}, {"id": 2072, "seek": 558732, "start": 5611.32, "end": 5615.24, "text": " And so now if you want to update the thing somebody passed to you,", "tokens": [400, 370, 586, 498, 291, 528, 281, 5623, 264, 551, 2618, 4678, 281, 291, 11], "temperature": 0.0, "avg_logprob": -0.11551410031605916, "compression_ratio": 1.8063492063492064, "no_speech_prob": 3.3211312256753445e-05}, {"id": 2073, "seek": 558732, "start": 5615.24, "end": 5617.24, "text": " that's fine, just pass it in out.", "tokens": [300, 311, 2489, 11, 445, 1320, 309, 294, 484, 13], "temperature": 0.0, "avg_logprob": -0.11551410031605916, "compression_ratio": 1.8063492063492064, "no_speech_prob": 3.3211312256753445e-05}, {"id": 2074, "seek": 561724, "start": 5617.24, "end": 5618.54, "text": " And everything works fine.", "tokens": [400, 1203, 1985, 2489, 13], "temperature": 0.0, "avg_logprob": -0.13141813139984573, "compression_ratio": 1.6726618705035972, "no_speech_prob": 5.626337724606856e-07}, {"id": 2075, "seek": 561724, "start": 5618.54, "end": 5620.8, "text": " And on the call side, you pass it with this ampersand thing", "tokens": [400, 322, 264, 818, 1252, 11, 291, 1320, 309, 365, 341, 18648, 433, 474, 551], "temperature": 0.0, "avg_logprob": -0.13141813139984573, "compression_ratio": 1.6726618705035972, "no_speech_prob": 5.626337724606856e-07}, {"id": 2076, "seek": 561724, "start": 5620.8, "end": 5623.04, "text": " so that they know that it can change.", "tokens": [370, 300, 436, 458, 300, 309, 393, 1319, 13], "temperature": 0.0, "avg_logprob": -0.13141813139984573, "compression_ratio": 1.6726618705035972, "no_speech_prob": 5.626337724606856e-07}, {"id": 2077, "seek": 561724, "start": 5623.04, "end": 5624.719999999999, "text": " Now what is going on here?", "tokens": [823, 437, 307, 516, 322, 510, 30], "temperature": 0.0, "avg_logprob": -0.13141813139984573, "compression_ratio": 1.6726618705035972, "no_speech_prob": 5.626337724606856e-07}, {"id": 2078, "seek": 561724, "start": 5624.719999999999, "end": 5627.24, "text": " Right? So this is good math.", "tokens": [1779, 30, 407, 341, 307, 665, 5221, 13], "temperature": 0.0, "avg_logprob": -0.13141813139984573, "compression_ratio": 1.6726618705035972, "no_speech_prob": 5.626337724606856e-07}, {"id": 2079, "seek": 561724, "start": 5627.24, "end": 5629.639999999999, "text": " This is like the correct behavior, but how does this work?", "tokens": [639, 307, 411, 264, 3006, 5223, 11, 457, 577, 775, 341, 589, 30], "temperature": 0.0, "avg_logprob": -0.13141813139984573, "compression_ratio": 1.6726618705035972, "no_speech_prob": 5.626337724606856e-07}, {"id": 2080, "seek": 561724, "start": 5629.639999999999, "end": 5631.5199999999995, "text": " Well, we're talking about names.", "tokens": [1042, 11, 321, 434, 1417, 466, 5288, 13], "temperature": 0.0, "avg_logprob": -0.13141813139984573, "compression_ratio": 1.6726618705035972, "no_speech_prob": 5.626337724606856e-07}, {"id": 2081, "seek": 561724, "start": 5631.5199999999995, "end": 5633.0, "text": " We're talking about values.", "tokens": [492, 434, 1417, 466, 4190, 13], "temperature": 0.0, "avg_logprob": -0.13141813139984573, "compression_ratio": 1.6726618705035972, "no_speech_prob": 5.626337724606856e-07}, {"id": 2082, "seek": 561724, "start": 5633.0, "end": 5634.84, "text": " And so here I have a struct.", "tokens": [400, 370, 510, 286, 362, 257, 6594, 13], "temperature": 0.0, "avg_logprob": -0.13141813139984573, "compression_ratio": 1.6726618705035972, "no_speech_prob": 5.626337724606856e-07}, {"id": 2083, "seek": 561724, "start": 5634.84, "end": 5636.4, "text": " This is a valuey thing.", "tokens": [639, 307, 257, 2158, 88, 551, 13], "temperature": 0.0, "avg_logprob": -0.13141813139984573, "compression_ratio": 1.6726618705035972, "no_speech_prob": 5.626337724606856e-07}, {"id": 2084, "seek": 561724, "start": 5636.4, "end": 5638.88, "text": " And so I say it has two fields, real and imaginary.", "tokens": [400, 370, 286, 584, 309, 575, 732, 7909, 11, 957, 293, 26164, 13], "temperature": 0.0, "avg_logprob": -0.13141813139984573, "compression_ratio": 1.6726618705035972, "no_speech_prob": 5.626337724606856e-07}, {"id": 2085, "seek": 561724, "start": 5638.88, "end": 5644.44, "text": " And I define an instance of my complex number here named x.", "tokens": [400, 286, 6964, 364, 5197, 295, 452, 3997, 1230, 510, 4926, 2031, 13], "temperature": 0.0, "avg_logprob": -0.13141813139984573, "compression_ratio": 1.6726618705035972, "no_speech_prob": 5.626337724606856e-07}, {"id": 2086, "seek": 564444, "start": 5644.44, "end": 5648.839999999999, "text": " And so this is saying I have x and it's a name for the value", "tokens": [400, 370, 341, 307, 1566, 286, 362, 2031, 293, 309, 311, 257, 1315, 337, 264, 2158], "temperature": 0.0, "avg_logprob": -0.15306257101205678, "compression_ratio": 1.7797356828193833, "no_speech_prob": 4.289227490517078e-06}, {"id": 2087, "seek": 564444, "start": 5648.839999999999, "end": 5650.639999999999, "text": " that has one and two in it.", "tokens": [300, 575, 472, 293, 732, 294, 309, 13], "temperature": 0.0, "avg_logprob": -0.15306257101205678, "compression_ratio": 1.7797356828193833, "no_speech_prob": 4.289227490517078e-06}, {"id": 2088, "seek": 564444, "start": 5650.639999999999, "end": 5655.919999999999, "text": " And so if I introduce y, y is another notational instance", "tokens": [400, 370, 498, 286, 5366, 288, 11, 288, 307, 1071, 406, 1478, 5197], "temperature": 0.0, "avg_logprob": -0.15306257101205678, "compression_ratio": 1.7797356828193833, "no_speech_prob": 4.289227490517078e-06}, {"id": 2089, "seek": 564444, "start": 5655.919999999999, "end": 5657.24, "text": " of this struct.", "tokens": [295, 341, 6594, 13], "temperature": 0.0, "avg_logprob": -0.15306257101205678, "compression_ratio": 1.7797356828193833, "no_speech_prob": 4.289227490517078e-06}, {"id": 2090, "seek": 564444, "start": 5657.24, "end": 5659.16, "text": " And so it also has a one and a two.", "tokens": [400, 370, 309, 611, 575, 257, 472, 293, 257, 732, 13], "temperature": 0.0, "avg_logprob": -0.15306257101205678, "compression_ratio": 1.7797356828193833, "no_speech_prob": 4.289227490517078e-06}, {"id": 2091, "seek": 564444, "start": 5659.16, "end": 5662.599999999999, "text": " And if I go and I copy it, then I get another copy.", "tokens": [400, 498, 286, 352, 293, 286, 5055, 309, 11, 550, 286, 483, 1071, 5055, 13], "temperature": 0.0, "avg_logprob": -0.15306257101205678, "compression_ratio": 1.7797356828193833, "no_speech_prob": 4.289227490517078e-06}, {"id": 2092, "seek": 564444, "start": 5662.599999999999, "end": 5665.759999999999, "text": " And if I change one, then I update just y's.", "tokens": [400, 498, 286, 1319, 472, 11, 550, 286, 5623, 445, 288, 311, 13], "temperature": 0.0, "avg_logprob": -0.15306257101205678, "compression_ratio": 1.7797356828193833, "no_speech_prob": 4.289227490517078e-06}, {"id": 2093, "seek": 564444, "start": 5665.759999999999, "end": 5667.04, "text": " All right?", "tokens": [1057, 558, 30], "temperature": 0.0, "avg_logprob": -0.15306257101205678, "compression_ratio": 1.7797356828193833, "no_speech_prob": 4.289227490517078e-06}, {"id": 2094, "seek": 564444, "start": 5667.04, "end": 5668.759999999999, "text": " This is again the way things should work.", "tokens": [639, 307, 797, 264, 636, 721, 820, 589, 13], "temperature": 0.0, "avg_logprob": -0.15306257101205678, "compression_ratio": 1.7797356828193833, "no_speech_prob": 4.289227490517078e-06}, {"id": 2095, "seek": 564444, "start": 5668.759999999999, "end": 5670.679999999999, "text": " And so this works with structs.", "tokens": [400, 370, 341, 1985, 365, 6594, 82, 13], "temperature": 0.0, "avg_logprob": -0.15306257101205678, "compression_ratio": 1.7797356828193833, "no_speech_prob": 4.289227490517078e-06}, {"id": 2096, "seek": 564444, "start": 5670.679999999999, "end": 5671.96, "text": " This works with tuples.", "tokens": [639, 1985, 365, 2604, 2622, 13], "temperature": 0.0, "avg_logprob": -0.15306257101205678, "compression_ratio": 1.7797356828193833, "no_speech_prob": 4.289227490517078e-06}, {"id": 2097, "seek": 567196, "start": 5671.96, "end": 5675.12, "text": " This works with arrays and dictionaries", "tokens": [639, 1985, 365, 41011, 293, 22352, 4889], "temperature": 0.0, "avg_logprob": -0.14085219092402898, "compression_ratio": 1.806896551724138, "no_speech_prob": 3.3403186989744427e-06}, {"id": 2098, "seek": 567196, "start": 5675.12, "end": 5676.44, "text": " and all that kind of stuff.", "tokens": [293, 439, 300, 733, 295, 1507, 13], "temperature": 0.0, "avg_logprob": -0.14085219092402898, "compression_ratio": 1.806896551724138, "no_speech_prob": 3.3403186989744427e-06}, {"id": 2099, "seek": 567196, "start": 5676.44, "end": 5677.76, "text": " How do references work?", "tokens": [1012, 360, 15400, 589, 30], "temperature": 0.0, "avg_logprob": -0.14085219092402898, "compression_ratio": 1.806896551724138, "no_speech_prob": 3.3403186989744427e-06}, {"id": 2100, "seek": 567196, "start": 5677.76, "end": 5680.8, "text": " Well, references, the name here, here I have a class", "tokens": [1042, 11, 15400, 11, 264, 1315, 510, 11, 510, 286, 362, 257, 1508], "temperature": 0.0, "avg_logprob": -0.14085219092402898, "compression_ratio": 1.806896551724138, "no_speech_prob": 3.3403186989744427e-06}, {"id": 2101, "seek": 567196, "start": 5680.8, "end": 5682.96, "text": " and the class has a string and it has an integer.", "tokens": [293, 264, 1508, 575, 257, 6798, 293, 309, 575, 364, 24922, 13], "temperature": 0.0, "avg_logprob": -0.14085219092402898, "compression_ratio": 1.806896551724138, "no_speech_prob": 3.3403186989744427e-06}, {"id": 2102, "seek": 567196, "start": 5682.96, "end": 5686.4, "text": " And so somewhere in memory there is a string and there is an array", "tokens": [400, 370, 4079, 294, 4675, 456, 307, 257, 6798, 293, 456, 307, 364, 10225], "temperature": 0.0, "avg_logprob": -0.14085219092402898, "compression_ratio": 1.806896551724138, "no_speech_prob": 3.3403186989744427e-06}, {"id": 2103, "seek": 567196, "start": 5686.4, "end": 5688.92, "text": " and they're stuck together just like with the struct.", "tokens": [293, 436, 434, 5541, 1214, 445, 411, 365, 264, 6594, 13], "temperature": 0.0, "avg_logprob": -0.14085219092402898, "compression_ratio": 1.806896551724138, "no_speech_prob": 3.3403186989744427e-06}, {"id": 2104, "seek": 567196, "start": 5688.92, "end": 5692.8, "text": " But now when I say x, x is actually a reference or a pointer", "tokens": [583, 586, 562, 286, 584, 2031, 11, 2031, 307, 767, 257, 6408, 420, 257, 23918], "temperature": 0.0, "avg_logprob": -0.14085219092402898, "compression_ratio": 1.806896551724138, "no_speech_prob": 3.3403186989744427e-06}, {"id": 2105, "seek": 567196, "start": 5692.8, "end": 5694.4800000000005, "text": " or an indirection to that.", "tokens": [420, 364, 1016, 621, 882, 281, 300, 13], "temperature": 0.0, "avg_logprob": -0.14085219092402898, "compression_ratio": 1.806896551724138, "no_speech_prob": 3.3403186989744427e-06}, {"id": 2106, "seek": 567196, "start": 5694.4800000000005, "end": 5698.28, "text": " The reason for that is because you wrote class instead of struct.", "tokens": [440, 1778, 337, 300, 307, 570, 291, 4114, 1508, 2602, 295, 6594, 13], "temperature": 0.0, "avg_logprob": -0.14085219092402898, "compression_ratio": 1.806896551724138, "no_speech_prob": 3.3403186989744427e-06}, {"id": 2107, "seek": 567196, "start": 5698.28, "end": 5701.2, "text": " So by writing class, you're saying when you create one", "tokens": [407, 538, 3579, 1508, 11, 291, 434, 1566, 562, 291, 1884, 472], "temperature": 0.0, "avg_logprob": -0.14085219092402898, "compression_ratio": 1.806896551724138, "no_speech_prob": 3.3403186989744427e-06}, {"id": 2108, "seek": 570120, "start": 5701.2, "end": 5704.48, "text": " of these things, please create a reference, not a value.", "tokens": [295, 613, 721, 11, 1767, 1884, 257, 6408, 11, 406, 257, 2158, 13], "temperature": 0.0, "avg_logprob": -0.10222686004638672, "compression_ratio": 1.756, "no_speech_prob": 9.515895726508461e-06}, {"id": 2109, "seek": 570120, "start": 5704.48, "end": 5706.04, "text": " Yes, that's exactly right.", "tokens": [1079, 11, 300, 311, 2293, 558, 13], "temperature": 0.0, "avg_logprob": -0.10222686004638672, "compression_ratio": 1.756, "no_speech_prob": 9.515895726508461e-06}, {"id": 2110, "seek": 570120, "start": 5706.04, "end": 5710.36, "text": " And now what happens with references is you now get copies", "tokens": [400, 586, 437, 2314, 365, 15400, 307, 291, 586, 483, 14341], "temperature": 0.0, "avg_logprob": -0.10222686004638672, "compression_ratio": 1.756, "no_speech_prob": 9.515895726508461e-06}, {"id": 2111, "seek": 570120, "start": 5710.36, "end": 5711.679999999999, "text": " of that reference.", "tokens": [295, 300, 6408, 13], "temperature": 0.0, "avg_logprob": -0.10222686004638672, "compression_ratio": 1.756, "no_speech_prob": 9.515895726508461e-06}, {"id": 2112, "seek": 570120, "start": 5711.679999999999, "end": 5715.96, "text": " And so when I copy x into y, just like in PyTorch or Python,", "tokens": [400, 370, 562, 286, 5055, 2031, 666, 288, 11, 445, 411, 294, 9953, 51, 284, 339, 420, 15329, 11], "temperature": 0.0, "avg_logprob": -0.10222686004638672, "compression_ratio": 1.756, "no_speech_prob": 9.515895726508461e-06}, {"id": 2113, "seek": 570120, "start": 5715.96, "end": 5720.36, "text": " I have another reference or another pointer to the same data.", "tokens": [286, 362, 1071, 6408, 420, 1071, 23918, 281, 264, 912, 1412, 13], "temperature": 0.0, "avg_logprob": -0.10222686004638672, "compression_ratio": 1.756, "no_speech_prob": 9.515895726508461e-06}, {"id": 2114, "seek": 570120, "start": 5720.36, "end": 5722.76, "text": " And so that's why when you go and you update it,", "tokens": [400, 370, 300, 311, 983, 562, 291, 352, 293, 291, 5623, 309, 11], "temperature": 0.0, "avg_logprob": -0.10222686004638672, "compression_ratio": 1.756, "no_speech_prob": 9.515895726508461e-06}, {"id": 2115, "seek": 570120, "start": 5722.76, "end": 5725.48, "text": " so I'm going to go change the array through y,", "tokens": [370, 286, 478, 516, 281, 352, 1319, 264, 10225, 807, 288, 11], "temperature": 0.0, "avg_logprob": -0.10222686004638672, "compression_ratio": 1.756, "no_speech_prob": 9.515895726508461e-06}, {"id": 2116, "seek": 570120, "start": 5725.48, "end": 5729.5199999999995, "text": " it's also going to change the data that you see through x.", "tokens": [309, 311, 611, 516, 281, 1319, 264, 1412, 300, 291, 536, 807, 2031, 13], "temperature": 0.0, "avg_logprob": -0.10222686004638672, "compression_ratio": 1.756, "no_speech_prob": 9.515895726508461e-06}, {"id": 2117, "seek": 572952, "start": 5729.52, "end": 5732.360000000001, "text": " And so in Swift, you have a choice.", "tokens": [400, 370, 294, 25539, 11, 291, 362, 257, 3922, 13], "temperature": 0.0, "avg_logprob": -0.13131753788437955, "compression_ratio": 1.7647058823529411, "no_speech_prob": 7.071529580571223e-06}, {"id": 2118, "seek": 572952, "start": 5732.360000000001, "end": 5733.92, "text": " And so you can declare things as classes.", "tokens": [400, 370, 291, 393, 19710, 721, 382, 5359, 13], "temperature": 0.0, "avg_logprob": -0.13131753788437955, "compression_ratio": 1.7647058823529411, "no_speech_prob": 7.071529580571223e-06}, {"id": 2119, "seek": 572952, "start": 5733.92, "end": 5739.040000000001, "text": " And classes are good for certain things and they're important", "tokens": [400, 5359, 366, 665, 337, 1629, 721, 293, 436, 434, 1021], "temperature": 0.0, "avg_logprob": -0.13131753788437955, "compression_ratio": 1.7647058823529411, "no_speech_prob": 7.071529580571223e-06}, {"id": 2120, "seek": 572952, "start": 5739.040000000001, "end": 5740.4400000000005, "text": " and valuable and you can subclass them.", "tokens": [293, 8263, 293, 291, 393, 1422, 11665, 552, 13], "temperature": 0.0, "avg_logprob": -0.13131753788437955, "compression_ratio": 1.7647058823529411, "no_speech_prob": 7.071529580571223e-06}, {"id": 2121, "seek": 572952, "start": 5740.4400000000005, "end": 5742.72, "text": " And classes are nice in various ways.", "tokens": [400, 5359, 366, 1481, 294, 3683, 2098, 13], "temperature": 0.0, "avg_logprob": -0.13131753788437955, "compression_ratio": 1.7647058823529411, "no_speech_prob": 7.071529580571223e-06}, {"id": 2122, "seek": 572952, "start": 5742.72, "end": 5744.02, "text": " But you have a choice.", "tokens": [583, 291, 362, 257, 3922, 13], "temperature": 0.0, "avg_logprob": -0.13131753788437955, "compression_ratio": 1.7647058823529411, "no_speech_prob": 7.071529580571223e-06}, {"id": 2123, "seek": 572952, "start": 5744.02, "end": 5745.84, "text": " And a lot of things that you've seen are all defined with structs", "tokens": [400, 257, 688, 295, 721, 300, 291, 600, 1612, 366, 439, 7642, 365, 6594, 82], "temperature": 0.0, "avg_logprob": -0.13131753788437955, "compression_ratio": 1.7647058823529411, "no_speech_prob": 7.071529580571223e-06}, {"id": 2124, "seek": 572952, "start": 5745.84, "end": 5747.400000000001, "text": " because they have much more predictable behavior", "tokens": [570, 436, 362, 709, 544, 27737, 5223], "temperature": 0.0, "avg_logprob": -0.13131753788437955, "compression_ratio": 1.7647058823529411, "no_speech_prob": 7.071529580571223e-06}, {"id": 2125, "seek": 572952, "start": 5747.400000000001, "end": 5748.72, "text": " and they stack up more correctly.", "tokens": [293, 436, 8630, 493, 544, 8944, 13], "temperature": 0.0, "avg_logprob": -0.13131753788437955, "compression_ratio": 1.7647058823529411, "no_speech_prob": 7.071529580571223e-06}, {"id": 2126, "seek": 572952, "start": 5748.72, "end": 5750.4400000000005, "text": " So in this case, you know, I was trying", "tokens": [407, 294, 341, 1389, 11, 291, 458, 11, 286, 390, 1382], "temperature": 0.0, "avg_logprob": -0.13131753788437955, "compression_ratio": 1.7647058823529411, "no_speech_prob": 7.071529580571223e-06}, {"id": 2127, "seek": 572952, "start": 5750.4400000000005, "end": 5755.84, "text": " to literally duplicate a Python slash PyTorch API.", "tokens": [281, 3736, 23976, 257, 15329, 17330, 9953, 51, 284, 339, 9362, 13], "temperature": 0.0, "avg_logprob": -0.13131753788437955, "compression_ratio": 1.7647058823529411, "no_speech_prob": 7.071529580571223e-06}, {"id": 2128, "seek": 575584, "start": 5755.84, "end": 5760.64, "text": " And so I just found I wasn't able to unless I used class.", "tokens": [400, 370, 286, 445, 1352, 286, 2067, 380, 1075, 281, 5969, 286, 1143, 1508, 13], "temperature": 0.0, "avg_logprob": -0.13217626696955548, "compression_ratio": 1.6953405017921146, "no_speech_prob": 5.954801963525824e-06}, {"id": 2129, "seek": 575584, "start": 5760.64, "end": 5764.32, "text": " But then you kind of said, okay, well, that's how you do it.", "tokens": [583, 550, 291, 733, 295, 848, 11, 1392, 11, 731, 11, 300, 311, 577, 291, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.13217626696955548, "compression_ratio": 1.6953405017921146, "no_speech_prob": 5.954801963525824e-06}, {"id": 2130, "seek": 575584, "start": 5764.32, "end": 5766.96, "text": " But don't do it that way.", "tokens": [583, 500, 380, 360, 309, 300, 636, 13], "temperature": 0.0, "avg_logprob": -0.13217626696955548, "compression_ratio": 1.6953405017921146, "no_speech_prob": 5.954801963525824e-06}, {"id": 2131, "seek": 575584, "start": 5766.96, "end": 5768.72, "text": " Yeah. And so you can absolutely do that.", "tokens": [865, 13, 400, 370, 291, 393, 3122, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.13217626696955548, "compression_ratio": 1.6953405017921146, "no_speech_prob": 5.954801963525824e-06}, {"id": 2132, "seek": 575584, "start": 5768.72, "end": 5770.88, "text": " And again, when you're learning Swift, it's fine.", "tokens": [400, 797, 11, 562, 291, 434, 2539, 25539, 11, 309, 311, 2489, 13], "temperature": 0.0, "avg_logprob": -0.13217626696955548, "compression_ratio": 1.6953405017921146, "no_speech_prob": 5.954801963525824e-06}, {"id": 2133, "seek": 575584, "start": 5770.88, "end": 5772.24, "text": " Just reach for the things that are familiar", "tokens": [1449, 2524, 337, 264, 721, 300, 366, 4963], "temperature": 0.0, "avg_logprob": -0.13217626696955548, "compression_ratio": 1.6953405017921146, "no_speech_prob": 5.954801963525824e-06}, {"id": 2134, "seek": 575584, "start": 5772.24, "end": 5773.78, "text": " and then you can learn as you go.", "tokens": [293, 550, 291, 393, 1466, 382, 291, 352, 13], "temperature": 0.0, "avg_logprob": -0.13217626696955548, "compression_ratio": 1.6953405017921146, "no_speech_prob": 5.954801963525824e-06}, {"id": 2135, "seek": 575584, "start": 5773.78, "end": 5775.4800000000005, "text": " That's perfectly acceptable.", "tokens": [663, 311, 6239, 15513, 13], "temperature": 0.0, "avg_logprob": -0.13217626696955548, "compression_ratio": 1.6953405017921146, "no_speech_prob": 5.954801963525824e-06}, {"id": 2136, "seek": 575584, "start": 5775.4800000000005, "end": 5778.6, "text": " But here we're trying to talk about things Swift is doing", "tokens": [583, 510, 321, 434, 1382, 281, 751, 466, 721, 25539, 307, 884], "temperature": 0.0, "avg_logprob": -0.13217626696955548, "compression_ratio": 1.6953405017921146, "no_speech_prob": 5.954801963525824e-06}, {"id": 2137, "seek": 575584, "start": 5778.6, "end": 5780.360000000001, "text": " to help save you and make your code more efficient", "tokens": [281, 854, 3155, 291, 293, 652, 428, 3089, 544, 7148], "temperature": 0.0, "avg_logprob": -0.13217626696955548, "compression_ratio": 1.6953405017921146, "no_speech_prob": 5.954801963525824e-06}, {"id": 2138, "seek": 575584, "start": 5780.360000000001, "end": 5781.66, "text": " and things like that.", "tokens": [293, 721, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.13217626696955548, "compression_ratio": 1.6953405017921146, "no_speech_prob": 5.954801963525824e-06}, {"id": 2139, "seek": 578166, "start": 5781.66, "end": 5788.2, "text": " I still reach for class a lot, but then every time a real Swift programmer takes my thing", "tokens": [286, 920, 2524, 337, 1508, 257, 688, 11, 457, 550, 633, 565, 257, 957, 25539, 32116, 2516, 452, 551], "temperature": 0.0, "avg_logprob": -0.17383617824978298, "compression_ratio": 1.691275167785235, "no_speech_prob": 1.7330099808532395e-06}, {"id": 2140, "seek": 578166, "start": 5788.2, "end": 5791.48, "text": " that had class and replaces it with something more Swifty,", "tokens": [300, 632, 1508, 293, 46734, 309, 365, 746, 544, 25539, 88, 11], "temperature": 0.0, "avg_logprob": -0.17383617824978298, "compression_ratio": 1.691275167785235, "no_speech_prob": 1.7330099808532395e-06}, {"id": 2141, "seek": 578166, "start": 5791.48, "end": 5794.96, "text": " it ends up being like shorter and easier to understand.", "tokens": [309, 5314, 493, 885, 411, 11639, 293, 3571, 281, 1223, 13], "temperature": 0.0, "avg_logprob": -0.17383617824978298, "compression_ratio": 1.691275167785235, "no_speech_prob": 1.7330099808532395e-06}, {"id": 2142, "seek": 578166, "start": 5794.96, "end": 5797.88, "text": " And so like it's, I agree, like go for it.", "tokens": [400, 370, 411, 309, 311, 11, 286, 3986, 11, 411, 352, 337, 309, 13], "temperature": 0.0, "avg_logprob": -0.17383617824978298, "compression_ratio": 1.691275167785235, "no_speech_prob": 1.7330099808532395e-06}, {"id": 2143, "seek": 578166, "start": 5797.88, "end": 5799.639999999999, "text": " Get things working with class.", "tokens": [3240, 721, 1364, 365, 1508, 13], "temperature": 0.0, "avg_logprob": -0.17383617824978298, "compression_ratio": 1.691275167785235, "no_speech_prob": 1.7330099808532395e-06}, {"id": 2144, "seek": 578166, "start": 5799.639999999999, "end": 5803.599999999999, "text": " But when it becomes time, start to work with this and look at it", "tokens": [583, 562, 309, 3643, 565, 11, 722, 281, 589, 365, 341, 293, 574, 412, 309], "temperature": 0.0, "avg_logprob": -0.17383617824978298, "compression_ratio": 1.691275167785235, "no_speech_prob": 1.7330099808532395e-06}, {"id": 2145, "seek": 578166, "start": 5803.599999999999, "end": 5805.16, "text": " and figure out how it works.", "tokens": [293, 2573, 484, 577, 309, 1985, 13], "temperature": 0.0, "avg_logprob": -0.17383617824978298, "compression_ratio": 1.691275167785235, "no_speech_prob": 1.7330099808532395e-06}, {"id": 2146, "seek": 578166, "start": 5805.16, "end": 5806.44, "text": " Now there's one thing that's really weird here.", "tokens": [823, 456, 311, 472, 551, 300, 311, 534, 3657, 510, 13], "temperature": 0.0, "avg_logprob": -0.17383617824978298, "compression_ratio": 1.691275167785235, "no_speech_prob": 1.7330099808532395e-06}, {"id": 2147, "seek": 578166, "start": 5806.44, "end": 5811.639999999999, "text": " If you remember last time, the first thing I told you about was var and let, right?", "tokens": [759, 291, 1604, 1036, 565, 11, 264, 700, 551, 286, 1907, 291, 466, 390, 1374, 293, 718, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.17383617824978298, "compression_ratio": 1.691275167785235, "no_speech_prob": 1.7330099808532395e-06}, {"id": 2148, "seek": 581164, "start": 5811.64, "end": 5813.4800000000005, "text": " And what is going on here?", "tokens": [400, 437, 307, 516, 322, 510, 30], "temperature": 0.0, "avg_logprob": -0.10828450874046043, "compression_ratio": 1.8173076923076923, "no_speech_prob": 1.750134106259793e-05}, {"id": 2149, "seek": 581164, "start": 5813.4800000000005, "end": 5815.64, "text": " This does not make any sense.", "tokens": [639, 775, 406, 652, 604, 2020, 13], "temperature": 0.0, "avg_logprob": -0.10828450874046043, "compression_ratio": 1.8173076923076923, "no_speech_prob": 1.750134106259793e-05}, {"id": 2150, "seek": 581164, "start": 5815.64, "end": 5822.04, "text": " We've got y and now we are updating, if this thing will go away,", "tokens": [492, 600, 658, 288, 293, 586, 321, 366, 25113, 11, 498, 341, 551, 486, 352, 1314, 11], "temperature": 0.0, "avg_logprob": -0.10828450874046043, "compression_ratio": 1.8173076923076923, "no_speech_prob": 1.750134106259793e-05}, {"id": 2151, "seek": 581164, "start": 5822.04, "end": 5827.04, "text": " we are updating a thing in y even though y is a constant.", "tokens": [321, 366, 25113, 257, 551, 294, 288, 754, 1673, 288, 307, 257, 5754, 13], "temperature": 0.0, "avg_logprob": -0.10828450874046043, "compression_ratio": 1.8173076923076923, "no_speech_prob": 1.750134106259793e-05}, {"id": 2152, "seek": 581164, "start": 5827.04, "end": 5829.280000000001, "text": " And what does that even mean?", "tokens": [400, 437, 775, 300, 754, 914, 30], "temperature": 0.0, "avg_logprob": -0.10828450874046043, "compression_ratio": 1.8173076923076923, "no_speech_prob": 1.750134106259793e-05}, {"id": 2153, "seek": 581164, "start": 5829.280000000001, "end": 5832.4800000000005, "text": " Well, the reason here is that the thing that is constant,", "tokens": [1042, 11, 264, 1778, 510, 307, 300, 264, 551, 300, 307, 5754, 11], "temperature": 0.0, "avg_logprob": -0.10828450874046043, "compression_ratio": 1.8173076923076923, "no_speech_prob": 1.750134106259793e-05}, {"id": 2154, "seek": 581164, "start": 5832.4800000000005, "end": 5835.72, "text": " the thing that is constant is this reference.", "tokens": [264, 551, 300, 307, 5754, 307, 341, 6408, 13], "temperature": 0.0, "avg_logprob": -0.10828450874046043, "compression_ratio": 1.8173076923076923, "no_speech_prob": 1.750134106259793e-05}, {"id": 2155, "seek": 581164, "start": 5835.72, "end": 5838.56, "text": " And so we've made a new copy of the reference, but we're allowed", "tokens": [400, 370, 321, 600, 1027, 257, 777, 5055, 295, 264, 6408, 11, 457, 321, 434, 4350], "temperature": 0.0, "avg_logprob": -0.10828450874046043, "compression_ratio": 1.8173076923076923, "no_speech_prob": 1.750134106259793e-05}, {"id": 2156, "seek": 583856, "start": 5838.56, "end": 5845.320000000001, "text": " to copy the thing it points to because we're not changing x or y itself.", "tokens": [281, 5055, 264, 551, 309, 2793, 281, 570, 321, 434, 406, 4473, 2031, 420, 288, 2564, 13], "temperature": 0.0, "avg_logprob": -0.12373859352535671, "compression_ratio": 1.6529209621993126, "no_speech_prob": 7.888910658948589e-06}, {"id": 2157, "seek": 583856, "start": 5845.320000000001, "end": 5846.6, "text": " So this doesn't make sense.", "tokens": [407, 341, 1177, 380, 652, 2020, 13], "temperature": 0.0, "avg_logprob": -0.12373859352535671, "compression_ratio": 1.6529209621993126, "no_speech_prob": 7.888910658948589e-06}, {"id": 2158, "seek": 583856, "start": 5846.6, "end": 5847.8, "text": " None of this makes sense.", "tokens": [14492, 295, 341, 1669, 2020, 13], "temperature": 0.0, "avg_logprob": -0.12373859352535671, "compression_ratio": 1.6529209621993126, "no_speech_prob": 7.888910658948589e-06}, {"id": 2159, "seek": 583856, "start": 5847.8, "end": 5850.080000000001, "text": " But how does let and var work?", "tokens": [583, 577, 775, 718, 293, 1374, 589, 30], "temperature": 0.0, "avg_logprob": -0.12373859352535671, "compression_ratio": 1.6529209621993126, "no_speech_prob": 7.888910658948589e-06}, {"id": 2160, "seek": 583856, "start": 5850.080000000001, "end": 5853.320000000001, "text": " Well, this is a thing that comes back to the mutation model in Swift.", "tokens": [1042, 11, 341, 307, 257, 551, 300, 1487, 646, 281, 264, 27960, 2316, 294, 25539, 13], "temperature": 0.0, "avg_logprob": -0.12373859352535671, "compression_ratio": 1.6529209621993126, "no_speech_prob": 7.888910658948589e-06}, {"id": 2161, "seek": 583856, "start": 5853.320000000001, "end": 5854.88, "text": " And I'll go through this pretty quickly.", "tokens": [400, 286, 603, 352, 807, 341, 1238, 2661, 13], "temperature": 0.0, "avg_logprob": -0.12373859352535671, "compression_ratio": 1.6529209621993126, "no_speech_prob": 7.888910658948589e-06}, {"id": 2162, "seek": 583856, "start": 5854.88, "end": 5857.0, "text": " This is not something you have to know.", "tokens": [639, 307, 406, 746, 291, 362, 281, 458, 13], "temperature": 0.0, "avg_logprob": -0.12373859352535671, "compression_ratio": 1.6529209621993126, "no_speech_prob": 7.888910658948589e-06}, {"id": 2163, "seek": 583856, "start": 5857.0, "end": 5860.080000000001, "text": " But let's say I have a complex number and it's a struct.", "tokens": [583, 718, 311, 584, 286, 362, 257, 3997, 1230, 293, 309, 311, 257, 6594, 13], "temperature": 0.0, "avg_logprob": -0.12373859352535671, "compression_ratio": 1.6529209621993126, "no_speech_prob": 7.888910658948589e-06}, {"id": 2164, "seek": 583856, "start": 5860.080000000001, "end": 5863.0, "text": " And I say, hey, this thing is a constant.", "tokens": [400, 286, 584, 11, 4177, 11, 341, 551, 307, 257, 5754, 13], "temperature": 0.0, "avg_logprob": -0.12373859352535671, "compression_ratio": 1.6529209621993126, "no_speech_prob": 7.888910658948589e-06}, {"id": 2165, "seek": 583856, "start": 5863.0, "end": 5865.080000000001, "text": " I want to go change it.", "tokens": [286, 528, 281, 352, 1319, 309, 13], "temperature": 0.0, "avg_logprob": -0.12373859352535671, "compression_ratio": 1.6529209621993126, "no_speech_prob": 7.888910658948589e-06}, {"id": 2166, "seek": 583856, "start": 5865.080000000001, "end": 5866.280000000001, "text": " Right? That's not supposed to work.", "tokens": [1779, 30, 663, 311, 406, 3442, 281, 589, 13], "temperature": 0.0, "avg_logprob": -0.12373859352535671, "compression_ratio": 1.6529209621993126, "no_speech_prob": 7.888910658948589e-06}, {"id": 2167, "seek": 583856, "start": 5866.280000000001, "end": 5867.360000000001, "text": " What happens?", "tokens": [708, 2314, 30], "temperature": 0.0, "avg_logprob": -0.12373859352535671, "compression_ratio": 1.6529209621993126, "no_speech_prob": 7.888910658948589e-06}, {"id": 2168, "seek": 586736, "start": 5867.36, "end": 5870.5199999999995, "text": " Well, if you try to do that, Swift will tell you, haha, you can't do that.", "tokens": [1042, 11, 498, 291, 853, 281, 360, 300, 11, 25539, 486, 980, 291, 11, 17236, 11, 291, 393, 380, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.11996124764165934, "compression_ratio": 1.7647058823529411, "no_speech_prob": 1.544572842249181e-05}, {"id": 2169, "seek": 586736, "start": 5870.5199999999995, "end": 5875.839999999999, "text": " You can't use plus equals on a real that's in a C because C1 is a let.", "tokens": [509, 393, 380, 764, 1804, 6915, 322, 257, 957, 300, 311, 294, 257, 383, 570, 383, 16, 307, 257, 718, 13], "temperature": 0.0, "avg_logprob": -0.11996124764165934, "compression_ratio": 1.7647058823529411, "no_speech_prob": 1.544572842249181e-05}, {"id": 2170, "seek": 586736, "start": 5875.839999999999, "end": 5876.92, "text": " And Swift is helpful.", "tokens": [400, 25539, 307, 4961, 13], "temperature": 0.0, "avg_logprob": -0.11996124764165934, "compression_ratio": 1.7647058823529411, "no_speech_prob": 1.544572842249181e-05}, {"id": 2171, "seek": 586736, "start": 5876.92, "end": 5880.639999999999, "text": " And so it tries to lead you to solving a problem that says, hey, by the way,", "tokens": [400, 370, 309, 9898, 281, 1477, 291, 281, 12606, 257, 1154, 300, 1619, 11, 4177, 11, 538, 264, 636, 11], "temperature": 0.0, "avg_logprob": -0.11996124764165934, "compression_ratio": 1.7647058823529411, "no_speech_prob": 1.544572842249181e-05}, {"id": 2172, "seek": 586736, "start": 5880.639999999999, "end": 5884.24, "text": " if you want to fix this, you want to make it go away, just change let to var,", "tokens": [498, 291, 528, 281, 3191, 341, 11, 291, 528, 281, 652, 309, 352, 1314, 11, 445, 1319, 718, 281, 1374, 11], "temperature": 0.0, "avg_logprob": -0.11996124764165934, "compression_ratio": 1.7647058823529411, "no_speech_prob": 1.544572842249181e-05}, {"id": 2173, "seek": 586736, "start": 5884.24, "end": 5885.48, "text": " and then everything is good.", "tokens": [293, 550, 1203, 307, 665, 13], "temperature": 0.0, "avg_logprob": -0.11996124764165934, "compression_ratio": 1.7647058823529411, "no_speech_prob": 1.544572842249181e-05}, {"id": 2174, "seek": 586736, "start": 5885.48, "end": 5886.839999999999, "text": " That's totally fine.", "tokens": [663, 311, 3879, 2489, 13], "temperature": 0.0, "avg_logprob": -0.11996124764165934, "compression_ratio": 1.7647058823529411, "no_speech_prob": 1.544572842249181e-05}, {"id": 2175, "seek": 586736, "start": 5886.839999999999, "end": 5888.639999999999, "text": " Now, OK, fine.", "tokens": [823, 11, 2264, 11, 2489, 13], "temperature": 0.0, "avg_logprob": -0.11996124764165934, "compression_ratio": 1.7647058823529411, "no_speech_prob": 1.544572842249181e-05}, {"id": 2176, "seek": 586736, "start": 5888.639999999999, "end": 5890.5199999999995, "text": " Well, maybe I really do want to change it.", "tokens": [1042, 11, 1310, 286, 534, 360, 528, 281, 1319, 309, 13], "temperature": 0.0, "avg_logprob": -0.11996124764165934, "compression_ratio": 1.7647058823529411, "no_speech_prob": 1.544572842249181e-05}, {"id": 2177, "seek": 586736, "start": 5890.5199999999995, "end": 5892.48, "text": " And so what I'm going to do is I'm going to get a little bit trickier", "tokens": [400, 370, 437, 286, 478, 516, 281, 360, 307, 286, 478, 516, 281, 483, 257, 707, 857, 4282, 811], "temperature": 0.0, "avg_logprob": -0.11996124764165934, "compression_ratio": 1.7647058823529411, "no_speech_prob": 1.544572842249181e-05}, {"id": 2178, "seek": 586736, "start": 5892.48, "end": 5894.36, "text": " and I'm going to define this extension.", "tokens": [293, 286, 478, 516, 281, 6964, 341, 10320, 13], "temperature": 0.0, "avg_logprob": -0.11996124764165934, "compression_ratio": 1.7647058823529411, "no_speech_prob": 1.544572842249181e-05}, {"id": 2179, "seek": 589436, "start": 5894.36, "end": 5898.32, "text": " I'm going to add a method increment to my complex number.", "tokens": [286, 478, 516, 281, 909, 257, 3170, 26200, 281, 452, 3997, 1230, 13], "temperature": 0.0, "avg_logprob": -0.10066884011030197, "compression_ratio": 1.8509803921568628, "no_speech_prob": 6.64310937281698e-06}, {"id": 2180, "seek": 589436, "start": 5898.32, "end": 5902.599999999999, "text": " I'm going to increment inside the method and then call the method.", "tokens": [286, 478, 516, 281, 26200, 1854, 264, 3170, 293, 550, 818, 264, 3170, 13], "temperature": 0.0, "avg_logprob": -0.10066884011030197, "compression_ratio": 1.8509803921568628, "no_speech_prob": 6.64310937281698e-06}, {"id": 2181, "seek": 589436, "start": 5902.599999999999, "end": 5904.48, "text": " Can I get away with that?", "tokens": [1664, 286, 483, 1314, 365, 300, 30], "temperature": 0.0, "avg_logprob": -0.10066884011030197, "compression_ratio": 1.8509803921568628, "no_speech_prob": 6.64310937281698e-06}, {"id": 2182, "seek": 589436, "start": 5904.48, "end": 5907.28, "text": " Well, these things may be in different files.", "tokens": [1042, 11, 613, 721, 815, 312, 294, 819, 7098, 13], "temperature": 0.0, "avg_logprob": -0.10066884011030197, "compression_ratio": 1.8509803921568628, "no_speech_prob": 6.64310937281698e-06}, {"id": 2183, "seek": 589436, "start": 5907.28, "end": 5909.839999999999, "text": " The compiler may only be able to see one or the other.", "tokens": [440, 31958, 815, 787, 312, 1075, 281, 536, 472, 420, 264, 661, 13], "temperature": 0.0, "avg_logprob": -0.10066884011030197, "compression_ratio": 1.8509803921568628, "no_speech_prob": 6.64310937281698e-06}, {"id": 2184, "seek": 589436, "start": 5909.839999999999, "end": 5913.5599999999995, "text": " And so if you run this, it has no idea whether increment's going", "tokens": [400, 370, 498, 291, 1190, 341, 11, 309, 575, 572, 1558, 1968, 26200, 311, 516], "temperature": 0.0, "avg_logprob": -0.10066884011030197, "compression_ratio": 1.8509803921568628, "no_speech_prob": 6.64310937281698e-06}, {"id": 2185, "seek": 589436, "start": 5913.5599999999995, "end": 5915.4, "text": " to change that thing.", "tokens": [281, 1319, 300, 551, 13], "temperature": 0.0, "avg_logprob": -0.10066884011030197, "compression_ratio": 1.8509803921568628, "no_speech_prob": 6.64310937281698e-06}, {"id": 2186, "seek": 589436, "start": 5915.4, "end": 5918.799999999999, "text": " Right? And so what the compiler does is it says, ah,", "tokens": [1779, 30, 400, 370, 437, 264, 31958, 775, 307, 309, 1619, 11, 3716, 11], "temperature": 0.0, "avg_logprob": -0.10066884011030197, "compression_ratio": 1.8509803921568628, "no_speech_prob": 6.64310937281698e-06}, {"id": 2187, "seek": 589436, "start": 5918.799999999999, "end": 5921.48, "text": " well, you can't implement increment real inside", "tokens": [731, 11, 291, 393, 380, 4445, 26200, 957, 1854], "temperature": 0.0, "avg_logprob": -0.10066884011030197, "compression_ratio": 1.8509803921568628, "no_speech_prob": 6.64310937281698e-06}, {"id": 2188, "seek": 589436, "start": 5921.48, "end": 5924.16, "text": " of this increment method either.", "tokens": [295, 341, 26200, 3170, 2139, 13], "temperature": 0.0, "avg_logprob": -0.10066884011030197, "compression_ratio": 1.8509803921568628, "no_speech_prob": 6.64310937281698e-06}, {"id": 2189, "seek": 592416, "start": 5924.16, "end": 5927.92, "text": " Because it says self is immutable.", "tokens": [1436, 309, 1619, 2698, 307, 3397, 32148, 13], "temperature": 0.0, "avg_logprob": -0.16274211445792777, "compression_ratio": 1.7261410788381744, "no_speech_prob": 1.3628764463646803e-05}, {"id": 2190, "seek": 592416, "start": 5927.92, "end": 5931.44, "text": " And it says mark method mutating to make self mutable.", "tokens": [400, 309, 1619, 1491, 3170, 5839, 990, 281, 652, 2698, 5839, 712, 13], "temperature": 0.0, "avg_logprob": -0.16274211445792777, "compression_ratio": 1.7261410788381744, "no_speech_prob": 1.3628764463646803e-05}, {"id": 2191, "seek": 592416, "start": 5931.44, "end": 5934.639999999999, "text": " Now, the thing to think about in methods, both in Python but also", "tokens": [823, 11, 264, 551, 281, 519, 466, 294, 7150, 11, 1293, 294, 15329, 457, 611], "temperature": 0.0, "avg_logprob": -0.16274211445792777, "compression_ratio": 1.7261410788381744, "no_speech_prob": 1.3628764463646803e-05}, {"id": 2192, "seek": 592416, "start": 5934.639999999999, "end": 5937.04, "text": " in Swift is that they have a self.", "tokens": [294, 25539, 307, 300, 436, 362, 257, 2698, 13], "temperature": 0.0, "avg_logprob": -0.16274211445792777, "compression_ratio": 1.7261410788381744, "no_speech_prob": 1.3628764463646803e-05}, {"id": 2193, "seek": 592416, "start": 5937.04, "end": 5939.8, "text": " Right? And in Python, you have to declare it.", "tokens": [1779, 30, 400, 294, 15329, 11, 291, 362, 281, 19710, 309, 13], "temperature": 0.0, "avg_logprob": -0.16274211445792777, "compression_ratio": 1.7261410788381744, "no_speech_prob": 1.3628764463646803e-05}, {"id": 2194, "seek": 592416, "start": 5939.8, "end": 5941.08, "text": " Swift has it too.", "tokens": [25539, 575, 309, 886, 13], "temperature": 0.0, "avg_logprob": -0.16274211445792777, "compression_ratio": 1.7261410788381744, "no_speech_prob": 1.3628764463646803e-05}, {"id": 2195, "seek": 592416, "start": 5941.08, "end": 5943.12, "text": " It's just not making you write it all the time.", "tokens": [467, 311, 445, 406, 1455, 291, 2464, 309, 439, 264, 565, 13], "temperature": 0.0, "avg_logprob": -0.16274211445792777, "compression_ratio": 1.7261410788381744, "no_speech_prob": 1.3628764463646803e-05}, {"id": 2196, "seek": 592416, "start": 5943.12, "end": 5944.96, "text": " Because that would be annoying.", "tokens": [1436, 300, 576, 312, 11304, 13], "temperature": 0.0, "avg_logprob": -0.16274211445792777, "compression_ratio": 1.7261410788381744, "no_speech_prob": 1.3628764463646803e-05}, {"id": 2197, "seek": 592416, "start": 5944.96, "end": 5949.88, "text": " And so when you declare a method on a struct,", "tokens": [400, 370, 562, 291, 19710, 257, 3170, 322, 257, 6594, 11], "temperature": 0.0, "avg_logprob": -0.16274211445792777, "compression_ratio": 1.7261410788381744, "no_speech_prob": 1.3628764463646803e-05}, {"id": 2198, "seek": 592416, "start": 5949.88, "end": 5952.08, "text": " what you do is you're getting self.", "tokens": [437, 291, 360, 307, 291, 434, 1242, 2698, 13], "temperature": 0.0, "avg_logprob": -0.16274211445792777, "compression_ratio": 1.7261410788381744, "no_speech_prob": 1.3628764463646803e-05}, {"id": 2199, "seek": 595208, "start": 5952.08, "end": 5955.5199999999995, "text": " And it's a copy of the struct.", "tokens": [400, 309, 311, 257, 5055, 295, 264, 6594, 13], "temperature": 0.0, "avg_logprob": -0.1048737834481632, "compression_ratio": 1.7950819672131149, "no_speech_prob": 3.5007599308300996e-06}, {"id": 2200, "seek": 595208, "start": 5955.5199999999995, "end": 5958.84, "text": " Okay? Now, what this is saying is this is saying that, hey,", "tokens": [1033, 30, 823, 11, 437, 341, 307, 1566, 307, 341, 307, 1566, 300, 11, 4177, 11], "temperature": 0.0, "avg_logprob": -0.1048737834481632, "compression_ratio": 1.7950819672131149, "no_speech_prob": 3.5007599308300996e-06}, {"id": 2201, "seek": 595208, "start": 5958.84, "end": 5962.16, "text": " you're actually changing self.real.", "tokens": [291, 434, 767, 4473, 2698, 13, 9342, 13], "temperature": 0.0, "avg_logprob": -0.1048737834481632, "compression_ratio": 1.7950819672131149, "no_speech_prob": 3.5007599308300996e-06}, {"id": 2202, "seek": 595208, "start": 5962.16, "end": 5963.44, "text": " Self is constant.", "tokens": [16348, 307, 5754, 13], "temperature": 0.0, "avg_logprob": -0.1048737834481632, "compression_ratio": 1.7950819672131149, "no_speech_prob": 3.5007599308300996e-06}, {"id": 2203, "seek": 595208, "start": 5963.44, "end": 5965.2, "text": " And so you can't do that here.", "tokens": [400, 370, 291, 393, 380, 360, 300, 510, 13], "temperature": 0.0, "avg_logprob": -0.1048737834481632, "compression_ratio": 1.7950819672131149, "no_speech_prob": 3.5007599308300996e-06}, {"id": 2204, "seek": 595208, "start": 5965.2, "end": 5967.08, "text": " But what you can do is you can mark it mutating.", "tokens": [583, 437, 291, 393, 360, 307, 291, 393, 1491, 309, 5839, 990, 13], "temperature": 0.0, "avg_logprob": -0.1048737834481632, "compression_ratio": 1.7950819672131149, "no_speech_prob": 3.5007599308300996e-06}, {"id": 2205, "seek": 595208, "start": 5967.08, "end": 5969.68, "text": " And so what that looks like is that says,", "tokens": [400, 370, 437, 300, 1542, 411, 307, 300, 1619, 11], "temperature": 0.0, "avg_logprob": -0.1048737834481632, "compression_ratio": 1.7950819672131149, "no_speech_prob": 3.5007599308300996e-06}, {"id": 2206, "seek": 595208, "start": 5969.68, "end": 5971.92, "text": " we can mark this function as mutating.", "tokens": [321, 393, 1491, 341, 2445, 382, 5839, 990, 13], "temperature": 0.0, "avg_logprob": -0.1048737834481632, "compression_ratio": 1.7950819672131149, "no_speech_prob": 3.5007599308300996e-06}, {"id": 2207, "seek": 595208, "start": 5971.92, "end": 5975.44, "text": " And what that does is it says our self is now one", "tokens": [400, 437, 300, 775, 307, 309, 1619, 527, 2698, 307, 586, 472], "temperature": 0.0, "avg_logprob": -0.1048737834481632, "compression_ratio": 1.7950819672131149, "no_speech_prob": 3.5007599308300996e-06}, {"id": 2208, "seek": 595208, "start": 5975.44, "end": 5976.72, "text": " of these in-out things.", "tokens": [295, 613, 294, 12, 346, 721, 13], "temperature": 0.0, "avg_logprob": -0.1048737834481632, "compression_ratio": 1.7950819672131149, "no_speech_prob": 3.5007599308300996e-06}, {"id": 2209, "seek": 595208, "start": 5976.72, "end": 5979.32, "text": " The in-out thing that allows us to change it in the color.", "tokens": [440, 294, 12, 346, 551, 300, 4045, 505, 281, 1319, 309, 294, 264, 2017, 13], "temperature": 0.0, "avg_logprob": -0.1048737834481632, "compression_ratio": 1.7950819672131149, "no_speech_prob": 3.5007599308300996e-06}, {"id": 2210, "seek": 597932, "start": 5979.32, "end": 5982.639999999999, "text": " And because it's now mutating, it's totally fine to change it.", "tokens": [400, 570, 309, 311, 586, 5839, 990, 11, 309, 311, 3879, 2489, 281, 1319, 309, 13], "temperature": 0.0, "avg_logprob": -0.1195193652448983, "compression_ratio": 1.794788273615635, "no_speech_prob": 2.3549544494017027e-05}, {"id": 2211, "seek": 597932, "start": 5982.639999999999, "end": 5983.92, "text": " That's no big deal.", "tokens": [663, 311, 572, 955, 2028, 13], "temperature": 0.0, "avg_logprob": -0.1195193652448983, "compression_ratio": 1.794788273615635, "no_speech_prob": 2.3549544494017027e-05}, {"id": 2212, "seek": 597932, "start": 5983.92, "end": 5987.36, "text": " And the compiler leads you to this and shows you what to do.", "tokens": [400, 264, 31958, 6689, 291, 281, 341, 293, 3110, 291, 437, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.1195193652448983, "compression_ratio": 1.794788273615635, "no_speech_prob": 2.3549544494017027e-05}, {"id": 2213, "seek": 597932, "start": 5987.36, "end": 5989.679999999999, "text": " But now we come back to this problem over here.", "tokens": [583, 586, 321, 808, 646, 281, 341, 1154, 670, 510, 13], "temperature": 0.0, "avg_logprob": -0.1195193652448983, "compression_ratio": 1.794788273615635, "no_speech_prob": 2.3549544494017027e-05}, {"id": 2214, "seek": 597932, "start": 5989.679999999999, "end": 5991.04, "text": " We say, well, we have a constant.", "tokens": [492, 584, 11, 731, 11, 321, 362, 257, 5754, 13], "temperature": 0.0, "avg_logprob": -0.1195193652448983, "compression_ratio": 1.794788273615635, "no_speech_prob": 2.3549544494017027e-05}, {"id": 2215, "seek": 597932, "start": 5991.04, "end": 5992.32, "text": " We're calling increment.", "tokens": [492, 434, 5141, 26200, 13], "temperature": 0.0, "avg_logprob": -0.1195193652448983, "compression_ratio": 1.794788273615635, "no_speech_prob": 2.3549544494017027e-05}, {"id": 2216, "seek": 597932, "start": 5992.32, "end": 5993.639999999999, "text": " How does that work?", "tokens": [1012, 775, 300, 589, 30], "temperature": 0.0, "avg_logprob": -0.1195193652448983, "compression_ratio": 1.794788273615635, "no_speech_prob": 2.3549544494017027e-05}, {"id": 2217, "seek": 597932, "start": 5993.639999999999, "end": 5994.92, "text": " Well, it still doesn't.", "tokens": [1042, 11, 309, 920, 1177, 380, 13], "temperature": 0.0, "avg_logprob": -0.1195193652448983, "compression_ratio": 1.794788273615635, "no_speech_prob": 2.3549544494017027e-05}, {"id": 2218, "seek": 597932, "start": 5994.92, "end": 5996.24, "text": " The compiler will tell you, hey, you can't do that.", "tokens": [440, 31958, 486, 980, 291, 11, 4177, 11, 291, 393, 380, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.1195193652448983, "compression_ratio": 1.794788273615635, "no_speech_prob": 2.3549544494017027e-05}, {"id": 2219, "seek": 597932, "start": 5996.24, "end": 5998.88, "text": " You can't mutate C1.", "tokens": [509, 393, 380, 5839, 473, 383, 16, 13], "temperature": 0.0, "avg_logprob": -0.1195193652448983, "compression_ratio": 1.794788273615635, "no_speech_prob": 2.3549544494017027e-05}, {"id": 2220, "seek": 597932, "start": 5998.88, "end": 6001.44, "text": " And now it knows the increment can change it.", "tokens": [400, 586, 309, 3255, 264, 26200, 393, 1319, 309, 13], "temperature": 0.0, "avg_logprob": -0.1195193652448983, "compression_ratio": 1.794788273615635, "no_speech_prob": 2.3549544494017027e-05}, {"id": 2221, "seek": 597932, "start": 6001.44, "end": 6003.719999999999, "text": " And so it says, really, really, really, if you want to do this,", "tokens": [400, 370, 309, 1619, 11, 534, 11, 534, 11, 534, 11, 498, 291, 528, 281, 360, 341, 11], "temperature": 0.0, "avg_logprob": -0.1195193652448983, "compression_ratio": 1.794788273615635, "no_speech_prob": 2.3549544494017027e-05}, {"id": 2222, "seek": 597932, "start": 6003.719999999999, "end": 6005.5199999999995, "text": " go mark C1 as a var.", "tokens": [352, 1491, 383, 16, 382, 257, 1374, 13], "temperature": 0.0, "avg_logprob": -0.1195193652448983, "compression_ratio": 1.794788273615635, "no_speech_prob": 2.3549544494017027e-05}, {"id": 2223, "seek": 597932, "start": 6005.5199999999995, "end": 6007.5599999999995, "text": " And Jeremy would say, just mark everything as a var.", "tokens": [400, 17809, 576, 584, 11, 445, 1491, 1203, 382, 257, 1374, 13], "temperature": 0.0, "avg_logprob": -0.1195193652448983, "compression_ratio": 1.794788273615635, "no_speech_prob": 2.3549544494017027e-05}, {"id": 2224, "seek": 600756, "start": 6007.56, "end": 6009.92, "text": " That's how he is.", "tokens": [663, 311, 577, 415, 307, 13], "temperature": 0.0, "avg_logprob": -0.12033746680434869, "compression_ratio": 1.7956204379562044, "no_speech_prob": 8.139172678056639e-06}, {"id": 2225, "seek": 600756, "start": 6009.92, "end": 6013.080000000001, "text": " And so the nice thing about this, though, is it all stacks", "tokens": [400, 370, 264, 1481, 551, 466, 341, 11, 1673, 11, 307, 309, 439, 30792], "temperature": 0.0, "avg_logprob": -0.12033746680434869, "compression_ratio": 1.7956204379562044, "no_speech_prob": 8.139172678056639e-06}, {"id": 2226, "seek": 600756, "start": 6013.080000000001, "end": 6014.88, "text": " up nicely and it all works.", "tokens": [493, 9594, 293, 309, 439, 1985, 13], "temperature": 0.0, "avg_logprob": -0.12033746680434869, "compression_ratio": 1.7956204379562044, "no_speech_prob": 8.139172678056639e-06}, {"id": 2227, "seek": 600756, "start": 6014.88, "end": 6018.04, "text": " And this is what allows, this is kind of the underlying mechanics", "tokens": [400, 341, 307, 437, 4045, 11, 341, 307, 733, 295, 264, 14217, 12939], "temperature": 0.0, "avg_logprob": -0.12033746680434869, "compression_ratio": 1.7956204379562044, "no_speech_prob": 8.139172678056639e-06}, {"id": 2228, "seek": 600756, "start": 6018.04, "end": 6020.56, "text": " that allow the value stuff to work.", "tokens": [300, 2089, 264, 2158, 1507, 281, 589, 13], "temperature": 0.0, "avg_logprob": -0.12033746680434869, "compression_ratio": 1.7956204379562044, "no_speech_prob": 8.139172678056639e-06}, {"id": 2229, "seek": 600756, "start": 6020.56, "end": 6024.080000000001, "text": " Now, you may be wondering, how is this efficient?", "tokens": [823, 11, 291, 815, 312, 6359, 11, 577, 307, 341, 7148, 30], "temperature": 0.0, "avg_logprob": -0.12033746680434869, "compression_ratio": 1.7956204379562044, "no_speech_prob": 8.139172678056639e-06}, {"id": 2230, "seek": 600756, "start": 6024.080000000001, "end": 6026.160000000001, "text": " So we were talking about, in the PyTorch world,", "tokens": [407, 321, 645, 1417, 466, 11, 294, 264, 9953, 51, 284, 339, 1002, 11], "temperature": 0.0, "avg_logprob": -0.12033746680434869, "compression_ratio": 1.7956204379562044, "no_speech_prob": 8.139172678056639e-06}, {"id": 2231, "seek": 600756, "start": 6026.160000000001, "end": 6029.4400000000005, "text": " you end up copying all the time, even if you don't end up needing it.", "tokens": [291, 917, 493, 27976, 439, 264, 565, 11, 754, 498, 291, 500, 380, 917, 493, 18006, 309, 13], "temperature": 0.0, "avg_logprob": -0.12033746680434869, "compression_ratio": 1.7956204379562044, "no_speech_prob": 8.139172678056639e-06}, {"id": 2232, "seek": 600756, "start": 6029.4400000000005, "end": 6031.88, "text": " In Swift, we don't want to do all those copies.", "tokens": [682, 25539, 11, 321, 500, 380, 528, 281, 360, 439, 729, 14341, 13], "temperature": 0.0, "avg_logprob": -0.12033746680434869, "compression_ratio": 1.7956204379562044, "no_speech_prob": 8.139172678056639e-06}, {"id": 2233, "seek": 600756, "start": 6031.88, "end": 6036.04, "text": " And so, on the other hand, we don't want to be, like, always copying.", "tokens": [400, 370, 11, 322, 264, 661, 1011, 11, 321, 500, 380, 528, 281, 312, 11, 411, 11, 1009, 27976, 13], "temperature": 0.0, "avg_logprob": -0.12033746680434869, "compression_ratio": 1.7956204379562044, "no_speech_prob": 8.139172678056639e-06}, {"id": 2234, "seek": 603604, "start": 6036.04, "end": 6038.72, "text": " So where do the copies go and how does that work?", "tokens": [407, 689, 360, 264, 14341, 352, 293, 577, 775, 300, 589, 30], "temperature": 0.0, "avg_logprob": -0.1377889517969733, "compression_ratio": 1.8714285714285714, "no_speech_prob": 5.25492714587017e-06}, {"id": 2235, "seek": 603604, "start": 6038.72, "end": 6041.8, "text": " So if you're using arrays or arrays of arrays of arrays of dictionaries", "tokens": [407, 498, 291, 434, 1228, 41011, 420, 41011, 295, 41011, 295, 41011, 295, 22352, 4889], "temperature": 0.0, "avg_logprob": -0.1377889517969733, "compression_ratio": 1.8714285714285714, "no_speech_prob": 5.25492714587017e-06}, {"id": 2236, "seek": 603604, "start": 6041.8, "end": 6046.4, "text": " of arrays of, like, super nested things, what ends up happening is,", "tokens": [295, 41011, 295, 11, 411, 11, 1687, 15646, 292, 721, 11, 437, 5314, 493, 2737, 307, 11], "temperature": 0.0, "avg_logprob": -0.1377889517969733, "compression_ratio": 1.8714285714285714, "no_speech_prob": 5.25492714587017e-06}, {"id": 2237, "seek": 603604, "start": 6046.4, "end": 6049.32, "text": " arrays are struct, you might be surprised.", "tokens": [41011, 366, 6594, 11, 291, 1062, 312, 6100, 13], "temperature": 0.0, "avg_logprob": -0.1377889517969733, "compression_ratio": 1.8714285714285714, "no_speech_prob": 5.25492714587017e-06}, {"id": 2238, "seek": 603604, "start": 6049.32, "end": 6053.84, "text": " And inside of that struct, it has a pointer or a reference.", "tokens": [400, 1854, 295, 300, 6594, 11, 309, 575, 257, 23918, 420, 257, 6408, 13], "temperature": 0.0, "avg_logprob": -0.1377889517969733, "compression_ratio": 1.8714285714285714, "no_speech_prob": 5.25492714587017e-06}, {"id": 2239, "seek": 603604, "start": 6053.84, "end": 6057.0, "text": " And so the elements of an array are actually implemented with the class.", "tokens": [400, 370, 264, 4959, 295, 364, 10225, 366, 767, 12270, 365, 264, 1508, 13], "temperature": 0.0, "avg_logprob": -0.1377889517969733, "compression_ratio": 1.8714285714285714, "no_speech_prob": 5.25492714587017e-06}, {"id": 2240, "seek": 603604, "start": 6057.0, "end": 6060.32, "text": " And so what I have here is I have A1, which is some array,", "tokens": [400, 370, 437, 286, 362, 510, 307, 286, 362, 316, 16, 11, 597, 307, 512, 10225, 11], "temperature": 0.0, "avg_logprob": -0.1377889517969733, "compression_ratio": 1.8714285714285714, "no_speech_prob": 5.25492714587017e-06}, {"id": 2241, "seek": 603604, "start": 6060.32, "end": 6063.04, "text": " and I copied it to A2, and I copied it to A3, I copied it to A4,", "tokens": [293, 286, 25365, 309, 281, 316, 17, 11, 293, 286, 25365, 309, 281, 316, 18, 11, 286, 25365, 309, 281, 316, 19, 11], "temperature": 0.0, "avg_logprob": -0.1377889517969733, "compression_ratio": 1.8714285714285714, "no_speech_prob": 5.25492714587017e-06}, {"id": 2242, "seek": 603604, "start": 6063.04, "end": 6064.32, "text": " because I'm passing it all around.", "tokens": [570, 286, 478, 8437, 309, 439, 926, 13], "temperature": 0.0, "avg_logprob": -0.1377889517969733, "compression_ratio": 1.8714285714285714, "no_speech_prob": 5.25492714587017e-06}, {"id": 2243, "seek": 606432, "start": 6064.32, "end": 6066.28, "text": " I'm just passing this array around, no big deal.", "tokens": [286, 478, 445, 8437, 341, 10225, 926, 11, 572, 955, 2028, 13], "temperature": 0.0, "avg_logprob": -0.1259923167042918, "compression_ratio": 1.7702702702702702, "no_speech_prob": 3.7851907563890563e-06}, {"id": 2244, "seek": 606432, "start": 6066.28, "end": 6069.2, "text": " And what happens is I'm just copying this reference,", "tokens": [400, 437, 2314, 307, 286, 478, 445, 27976, 341, 6408, 11], "temperature": 0.0, "avg_logprob": -0.1259923167042918, "compression_ratio": 1.7702702702702702, "no_speech_prob": 3.7851907563890563e-06}, {"id": 2245, "seek": 606432, "start": 6069.2, "end": 6071.48, "text": " and it happens to be buried inside of a struct.", "tokens": [293, 309, 2314, 281, 312, 14101, 1854, 295, 257, 6594, 13], "temperature": 0.0, "avg_logprob": -0.1259923167042918, "compression_ratio": 1.7702702702702702, "no_speech_prob": 3.7851907563890563e-06}, {"id": 2246, "seek": 606432, "start": 6071.48, "end": 6075.04, "text": " And so this passing around arrays, full value semantics, super cheap.", "tokens": [400, 370, 341, 8437, 926, 41011, 11, 1577, 2158, 4361, 45298, 11, 1687, 7084, 13], "temperature": 0.0, "avg_logprob": -0.1259923167042918, "compression_ratio": 1.7702702702702702, "no_speech_prob": 3.7851907563890563e-06}, {"id": 2247, "seek": 606432, "start": 6075.04, "end": 6075.5599999999995, "text": " No problem.", "tokens": [883, 1154, 13], "temperature": 0.0, "avg_logprob": -0.1259923167042918, "compression_ratio": 1.7702702702702702, "no_speech_prob": 3.7851907563890563e-06}, {"id": 2248, "seek": 606432, "start": 6075.5599999999995, "end": 6076.92, "text": " It's not copying any data.", "tokens": [467, 311, 406, 27976, 604, 1412, 13], "temperature": 0.0, "avg_logprob": -0.1259923167042918, "compression_ratio": 1.7702702702702702, "no_speech_prob": 3.7851907563890563e-06}, {"id": 2249, "seek": 606432, "start": 6076.92, "end": 6080.5599999999995, "text": " It's just passing the pointer around, right, just like you do in C", "tokens": [467, 311, 445, 8437, 264, 23918, 926, 11, 558, 11, 445, 411, 291, 360, 294, 383], "temperature": 0.0, "avg_logprob": -0.1259923167042918, "compression_ratio": 1.7702702702702702, "no_speech_prob": 3.7851907563890563e-06}, {"id": 2250, "seek": 606432, "start": 6080.5599999999995, "end": 6082.719999999999, "text": " or even in Python.", "tokens": [420, 754, 294, 15329, 13], "temperature": 0.0, "avg_logprob": -0.1259923167042918, "compression_ratio": 1.7702702702702702, "no_speech_prob": 3.7851907563890563e-06}, {"id": 2251, "seek": 606432, "start": 6082.719999999999, "end": 6086.799999999999, "text": " The magic happens when you go and you say, okay, well, I've now got A4.", "tokens": [440, 5585, 2314, 562, 291, 352, 293, 291, 584, 11, 1392, 11, 731, 11, 286, 600, 586, 658, 316, 19, 13], "temperature": 0.0, "avg_logprob": -0.1259923167042918, "compression_ratio": 1.7702702702702702, "no_speech_prob": 3.7851907563890563e-06}, {"id": 2252, "seek": 606432, "start": 6086.799999999999, "end": 6088.32, "text": " And so all these things are all sharing this thing.", "tokens": [400, 370, 439, 613, 721, 366, 439, 5414, 341, 551, 13], "temperature": 0.0, "avg_logprob": -0.1259923167042918, "compression_ratio": 1.7702702702702702, "no_speech_prob": 3.7851907563890563e-06}, {"id": 2253, "seek": 606432, "start": 6088.32, "end": 6090.719999999999, "text": " I'm going to add one element to A4.", "tokens": [286, 478, 516, 281, 909, 472, 4478, 281, 316, 19, 13], "temperature": 0.0, "avg_logprob": -0.1259923167042918, "compression_ratio": 1.7702702702702702, "no_speech_prob": 3.7851907563890563e-06}, {"id": 2254, "seek": 606432, "start": 6090.719999999999, "end": 6091.679999999999, "text": " Well, what happens?", "tokens": [1042, 11, 437, 2314, 30], "temperature": 0.0, "avg_logprob": -0.1259923167042918, "compression_ratio": 1.7702702702702702, "no_speech_prob": 3.7851907563890563e-06}, {"id": 2255, "seek": 609168, "start": 6091.68, "end": 6095.320000000001, "text": " Well, first thing that happens is append is a mutating method.", "tokens": [1042, 11, 700, 551, 300, 2314, 307, 34116, 307, 257, 5839, 990, 3170, 13], "temperature": 0.0, "avg_logprob": -0.08659354252601738, "compression_ratio": 1.727626459143969, "no_speech_prob": 2.1110843590577133e-05}, {"id": 2256, "seek": 609168, "start": 6095.320000000001, "end": 6100.16, "text": " And so it says, hey, I'm this thing called a copy on write type,", "tokens": [400, 370, 309, 1619, 11, 4177, 11, 286, 478, 341, 551, 1219, 257, 5055, 322, 2464, 2010, 11], "temperature": 0.0, "avg_logprob": -0.08659354252601738, "compression_ratio": 1.727626459143969, "no_speech_prob": 2.1110843590577133e-05}, {"id": 2257, "seek": 609168, "start": 6100.16, "end": 6104.56, "text": " and so I want to check to see if I'm the only user of this data.", "tokens": [293, 370, 286, 528, 281, 1520, 281, 536, 498, 286, 478, 264, 787, 4195, 295, 341, 1412, 13], "temperature": 0.0, "avg_logprob": -0.08659354252601738, "compression_ratio": 1.727626459143969, "no_speech_prob": 2.1110843590577133e-05}, {"id": 2258, "seek": 609168, "start": 6104.56, "end": 6108.88, "text": " And it turns out, no, lots of other things are pointing to our data here.", "tokens": [400, 309, 4523, 484, 11, 572, 11, 3195, 295, 661, 721, 366, 12166, 281, 527, 1412, 510, 13], "temperature": 0.0, "avg_logprob": -0.08659354252601738, "compression_ratio": 1.727626459143969, "no_speech_prob": 2.1110843590577133e-05}, {"id": 2259, "seek": 609168, "start": 6108.88, "end": 6114.16, "text": " And so lazily, because it's shared, I'll make a copy of this array.", "tokens": [400, 370, 19320, 953, 11, 570, 309, 311, 5507, 11, 286, 603, 652, 257, 5055, 295, 341, 10225, 13], "temperature": 0.0, "avg_logprob": -0.08659354252601738, "compression_ratio": 1.727626459143969, "no_speech_prob": 2.1110843590577133e-05}, {"id": 2260, "seek": 609168, "start": 6114.16, "end": 6118.76, "text": " And so I only get a copy of the data if it's shared and if it changes.", "tokens": [400, 370, 286, 787, 483, 257, 5055, 295, 264, 1412, 498, 309, 311, 5507, 293, 498, 309, 2962, 13], "temperature": 0.0, "avg_logprob": -0.08659354252601738, "compression_ratio": 1.727626459143969, "no_speech_prob": 2.1110843590577133e-05}, {"id": 2261, "seek": 609168, "start": 6118.76, "end": 6121.04, "text": " So that should be one, two, three, 22?", "tokens": [407, 300, 820, 312, 472, 11, 732, 11, 1045, 11, 5853, 30], "temperature": 0.0, "avg_logprob": -0.08659354252601738, "compression_ratio": 1.727626459143969, "no_speech_prob": 2.1110843590577133e-05}, {"id": 2262, "seek": 612104, "start": 6121.04, "end": 6123.44, "text": " Yeah, that should be one, two, three, 92.", "tokens": [865, 11, 300, 820, 312, 472, 11, 732, 11, 1045, 11, 28225, 13], "temperature": 0.0, "avg_logprob": -0.10742507442351311, "compression_ratio": 1.7579617834394905, "no_speech_prob": 9.368309292767663e-06}, {"id": 2263, "seek": 612104, "start": 6123.44, "end": 6125.68, "text": " I am buggier than Swift.", "tokens": [286, 669, 272, 3562, 811, 813, 25539, 13], "temperature": 0.0, "avg_logprob": -0.10742507442351311, "compression_ratio": 1.7579617834394905, "no_speech_prob": 9.368309292767663e-06}, {"id": 2264, "seek": 612104, "start": 6125.68, "end": 6129.32, "text": " Now, the interesting thing about this is because of the way this all works", "tokens": [823, 11, 264, 1880, 551, 466, 341, 307, 570, 295, 264, 636, 341, 439, 1985], "temperature": 0.0, "avg_logprob": -0.10742507442351311, "compression_ratio": 1.7579617834394905, "no_speech_prob": 9.368309292767663e-06}, {"id": 2265, "seek": 612104, "start": 6129.32, "end": 6132.0, "text": " out is if you go and you change A4 again, it goes", "tokens": [484, 307, 498, 291, 352, 293, 291, 1319, 316, 19, 797, 11, 309, 1709], "temperature": 0.0, "avg_logprob": -0.10742507442351311, "compression_ratio": 1.7579617834394905, "no_speech_prob": 9.368309292767663e-06}, {"id": 2266, "seek": 612104, "start": 6132.0, "end": 6133.28, "text": " and just updates it in place.", "tokens": [293, 445, 9205, 309, 294, 1081, 13], "temperature": 0.0, "avg_logprob": -0.10742507442351311, "compression_ratio": 1.7579617834394905, "no_speech_prob": 9.368309292767663e-06}, {"id": 2267, "seek": 612104, "start": 6133.28, "end": 6134.6, "text": " There's no extra copy.", "tokens": [821, 311, 572, 2857, 5055, 13], "temperature": 0.0, "avg_logprob": -0.10742507442351311, "compression_ratio": 1.7579617834394905, "no_speech_prob": 9.368309292767663e-06}, {"id": 2268, "seek": 612104, "start": 6134.6, "end": 6136.36, "text": " And so the cool thing about this is", "tokens": [400, 370, 264, 1627, 551, 466, 341, 307], "temperature": 0.0, "avg_logprob": -0.10742507442351311, "compression_ratio": 1.7579617834394905, "no_speech_prob": 9.368309292767663e-06}, {"id": 2269, "seek": 612104, "start": 6136.36, "end": 6141.48, "text": " that you get exactly the right number of copies, and it just works.", "tokens": [300, 291, 483, 2293, 264, 558, 1230, 295, 14341, 11, 293, 309, 445, 1985, 13], "temperature": 0.0, "avg_logprob": -0.10742507442351311, "compression_ratio": 1.7579617834394905, "no_speech_prob": 9.368309292767663e-06}, {"id": 2270, "seek": 612104, "start": 6141.48, "end": 6143.24, "text": " You as a programmer don't have to think about this.", "tokens": [509, 382, 257, 32116, 500, 380, 362, 281, 519, 466, 341, 13], "temperature": 0.0, "avg_logprob": -0.10742507442351311, "compression_ratio": 1.7579617834394905, "no_speech_prob": 9.368309292767663e-06}, {"id": 2271, "seek": 612104, "start": 6143.24, "end": 6146.8, "text": " This is one of the things that Swift is just like subtracting", "tokens": [639, 307, 472, 295, 264, 721, 300, 25539, 307, 445, 411, 16390, 278], "temperature": 0.0, "avg_logprob": -0.10742507442351311, "compression_ratio": 1.7579617834394905, "no_speech_prob": 9.368309292767663e-06}, {"id": 2272, "seek": 612104, "start": 6146.8, "end": 6149.8, "text": " from your consciousness of the things that you have to worry about,", "tokens": [490, 428, 10081, 295, 264, 721, 300, 291, 362, 281, 3292, 466, 11], "temperature": 0.0, "avg_logprob": -0.10742507442351311, "compression_ratio": 1.7579617834394905, "no_speech_prob": 9.368309292767663e-06}, {"id": 2273, "seek": 612104, "start": 6149.8, "end": 6150.92, "text": " which is really nice.", "tokens": [597, 307, 534, 1481, 13], "temperature": 0.0, "avg_logprob": -0.10742507442351311, "compression_ratio": 1.7579617834394905, "no_speech_prob": 9.368309292767663e-06}, {"id": 2274, "seek": 615092, "start": 6150.92, "end": 6155.36, "text": " And so a really nice aspect of this is that you get algebra,", "tokens": [400, 370, 257, 534, 1481, 4171, 295, 341, 307, 300, 291, 483, 21989, 11], "temperature": 0.0, "avg_logprob": -0.09680669148763021, "compression_ratio": 1.774294670846395, "no_speech_prob": 4.6107597881928086e-05}, {"id": 2275, "seek": 615092, "start": 6155.36, "end": 6158.12, "text": " like values work the way values are supposed to work.", "tokens": [411, 4190, 589, 264, 636, 4190, 366, 3442, 281, 589, 13], "temperature": 0.0, "avg_logprob": -0.09680669148763021, "compression_ratio": 1.774294670846395, "no_speech_prob": 4.6107597881928086e-05}, {"id": 2276, "seek": 615092, "start": 6158.12, "end": 6159.8, "text": " You get super high performance.", "tokens": [509, 483, 1687, 1090, 3389, 13], "temperature": 0.0, "avg_logprob": -0.09680669148763021, "compression_ratio": 1.774294670846395, "no_speech_prob": 4.6107597881928086e-05}, {"id": 2277, "seek": 615092, "start": 6159.8, "end": 6162.92, "text": " We get to use more emojis, which I always appreciate.", "tokens": [492, 483, 281, 764, 544, 19611, 40371, 11, 597, 286, 1009, 4449, 13], "temperature": 0.0, "avg_logprob": -0.09680669148763021, "compression_ratio": 1.774294670846395, "no_speech_prob": 4.6107597881928086e-05}, {"id": 2278, "seek": 615092, "start": 6162.92, "end": 6164.6, "text": " If you want to learn more about this,", "tokens": [759, 291, 528, 281, 1466, 544, 466, 341, 11], "temperature": 0.0, "avg_logprob": -0.09680669148763021, "compression_ratio": 1.774294670846395, "no_speech_prob": 4.6107597881928086e-05}, {"id": 2279, "seek": 615092, "start": 6164.6, "end": 6168.52, "text": " because this is also a really cool deep topic that you can geek out about,", "tokens": [570, 341, 307, 611, 257, 534, 1627, 2452, 4829, 300, 291, 393, 36162, 484, 466, 11], "temperature": 0.0, "avg_logprob": -0.09680669148763021, "compression_ratio": 1.774294670846395, "no_speech_prob": 4.6107597881928086e-05}, {"id": 2280, "seek": 615092, "start": 6168.52, "end": 6170.4800000000005, "text": " particularly if you've done object-oriented programming before,", "tokens": [4098, 498, 291, 600, 1096, 2657, 12, 27414, 9410, 949, 11], "temperature": 0.0, "avg_logprob": -0.09680669148763021, "compression_ratio": 1.774294670846395, "no_speech_prob": 4.6107597881928086e-05}, {"id": 2281, "seek": 615092, "start": 6170.4800000000005, "end": 6172.16, "text": " there's a lot that's really nice about this.", "tokens": [456, 311, 257, 688, 300, 311, 534, 1481, 466, 341, 13], "temperature": 0.0, "avg_logprob": -0.09680669148763021, "compression_ratio": 1.774294670846395, "no_speech_prob": 4.6107597881928086e-05}, {"id": 2282, "seek": 615092, "start": 6172.16, "end": 6173.4800000000005, "text": " There's a video you can see more.", "tokens": [821, 311, 257, 960, 291, 393, 536, 544, 13], "temperature": 0.0, "avg_logprob": -0.09680669148763021, "compression_ratio": 1.774294670846395, "no_speech_prob": 4.6107597881928086e-05}, {"id": 2283, "seek": 615092, "start": 6173.4800000000005, "end": 6176.4, "text": " So let's go back to that autodiff thing.", "tokens": [407, 718, 311, 352, 646, 281, 300, 1476, 378, 3661, 551, 13], "temperature": 0.0, "avg_logprob": -0.09680669148763021, "compression_ratio": 1.774294670846395, "no_speech_prob": 4.6107597881928086e-05}, {"id": 2284, "seek": 615092, "start": 6176.4, "end": 6180.28, "text": " And let's actually talk about autodiff from a different perspective.", "tokens": [400, 718, 311, 767, 751, 466, 1476, 378, 3661, 490, 257, 819, 4585, 13], "temperature": 0.0, "avg_logprob": -0.09680669148763021, "compression_ratio": 1.774294670846395, "no_speech_prob": 4.6107597881928086e-05}, {"id": 2285, "seek": 618028, "start": 6180.28, "end": 6183.04, "text": " So this is the autodiff system implemented the same way", "tokens": [407, 341, 307, 264, 1476, 378, 3661, 1185, 12270, 264, 912, 636], "temperature": 0.0, "avg_logprob": -0.12746917544387457, "compression_ratio": 1.6895306859205776, "no_speech_prob": 2.3920882085803896e-05}, {"id": 2286, "seek": 618028, "start": 6183.04, "end": 6188.639999999999, "text": " as the manually done PyTorch version.", "tokens": [382, 264, 16945, 1096, 9953, 51, 284, 339, 3037, 13], "temperature": 0.0, "avg_logprob": -0.12746917544387457, "compression_ratio": 1.6895306859205776, "no_speech_prob": 2.3920882085803896e-05}, {"id": 2287, "seek": 618028, "start": 6188.639999999999, "end": 6191.8, "text": " And we didn't like it because it was using references.", "tokens": [400, 321, 994, 380, 411, 309, 570, 309, 390, 1228, 15400, 13], "temperature": 0.0, "avg_logprob": -0.12746917544387457, "compression_ratio": 1.6895306859205776, "no_speech_prob": 2.3920882085803896e-05}, {"id": 2288, "seek": 618028, "start": 6191.8, "end": 6196.679999999999, "text": " Let's implement it again the very low level manual way in Swift.", "tokens": [961, 311, 4445, 309, 797, 264, 588, 2295, 1496, 9688, 636, 294, 25539, 13], "temperature": 0.0, "avg_logprob": -0.12746917544387457, "compression_ratio": 1.6895306859205776, "no_speech_prob": 2.3920882085803896e-05}, {"id": 2289, "seek": 618028, "start": 6196.679999999999, "end": 6199.639999999999, "text": " But before we do, let's talk about where we want to get to.", "tokens": [583, 949, 321, 360, 11, 718, 311, 751, 466, 689, 321, 528, 281, 483, 281, 13], "temperature": 0.0, "avg_logprob": -0.12746917544387457, "compression_ratio": 1.6895306859205776, "no_speech_prob": 2.3920882085803896e-05}, {"id": 2290, "seek": 618028, "start": 6199.639999999999, "end": 6203.2, "text": " So Swift has built-in, and Swift for TensorFlow has built-in automatic", "tokens": [407, 25539, 575, 3094, 12, 259, 11, 293, 25539, 337, 37624, 575, 3094, 12, 259, 12509], "temperature": 0.0, "avg_logprob": -0.12746917544387457, "compression_ratio": 1.6895306859205776, "no_speech_prob": 2.3920882085803896e-05}, {"id": 2291, "seek": 618028, "start": 6203.2, "end": 6205.88, "text": " differentiation for your code.", "tokens": [38902, 337, 428, 3089, 13], "temperature": 0.0, "avg_logprob": -0.12746917544387457, "compression_ratio": 1.6895306859205776, "no_speech_prob": 2.3920882085803896e-05}, {"id": 2292, "seek": 618028, "start": 6205.88, "end": 6207.84, "text": " So you don't have to write gradients manually.", "tokens": [407, 291, 500, 380, 362, 281, 2464, 2771, 2448, 16945, 13], "temperature": 0.0, "avg_logprob": -0.12746917544387457, "compression_ratio": 1.6895306859205776, "no_speech_prob": 2.3920882085803896e-05}, {"id": 2293, "seek": 618028, "start": 6207.84, "end": 6208.84, "text": " You don't have to worry about all this stuff.", "tokens": [509, 500, 380, 362, 281, 3292, 466, 439, 341, 1507, 13], "temperature": 0.0, "avg_logprob": -0.12746917544387457, "compression_ratio": 1.6895306859205776, "no_speech_prob": 2.3920882085803896e-05}, {"id": 2294, "seek": 620884, "start": 6208.84, "end": 6210.64, "text": " And the way it works is really simple.", "tokens": [400, 264, 636, 309, 1985, 307, 534, 2199, 13], "temperature": 0.0, "avg_logprob": -0.12334025396059638, "compression_ratio": 1.9310344827586208, "no_speech_prob": 4.468789848033339e-05}, {"id": 2295, "seek": 620884, "start": 6210.64, "end": 6213.32, "text": " There are functions like gradient.", "tokens": [821, 366, 6828, 411, 16235, 13], "temperature": 0.0, "avg_logprob": -0.12334025396059638, "compression_ratio": 1.9310344827586208, "no_speech_prob": 4.468789848033339e-05}, {"id": 2296, "seek": 620884, "start": 6213.32, "end": 6215.88, "text": " And you call gradient, and you pass it a closure.", "tokens": [400, 291, 818, 16235, 11, 293, 291, 1320, 309, 257, 24653, 13], "temperature": 0.0, "avg_logprob": -0.12334025396059638, "compression_ratio": 1.9310344827586208, "no_speech_prob": 4.468789848033339e-05}, {"id": 2297, "seek": 620884, "start": 6215.88, "end": 6219.52, "text": " And you say, what is the gradient of x times x?", "tokens": [400, 291, 584, 11, 437, 307, 264, 16235, 295, 2031, 1413, 2031, 30], "temperature": 0.0, "avg_logprob": -0.12334025396059638, "compression_ratio": 1.9310344827586208, "no_speech_prob": 4.468789848033339e-05}, {"id": 2298, "seek": 620884, "start": 6219.52, "end": 6222.32, "text": " And it gives you a new function that computes the gradient of x times x.", "tokens": [400, 309, 2709, 291, 257, 777, 2445, 300, 715, 1819, 264, 16235, 295, 2031, 1413, 2031, 13], "temperature": 0.0, "avg_logprob": -0.12334025396059638, "compression_ratio": 1.9310344827586208, "no_speech_prob": 4.468789848033339e-05}, {"id": 2299, "seek": 620884, "start": 6222.32, "end": 6225.64, "text": " And here we're just calling that function on a bunch of numbers", "tokens": [400, 510, 321, 434, 445, 5141, 300, 2445, 322, 257, 3840, 295, 3547], "temperature": 0.0, "avg_logprob": -0.12334025396059638, "compression_ratio": 1.9310344827586208, "no_speech_prob": 4.468789848033339e-05}, {"id": 2300, "seek": 620884, "start": 6225.64, "end": 6227.28, "text": " that we're striding over and printing them out.", "tokens": [300, 321, 434, 1056, 2819, 670, 293, 14699, 552, 484, 13], "temperature": 0.0, "avg_logprob": -0.12334025396059638, "compression_ratio": 1.9310344827586208, "no_speech_prob": 4.468789848033339e-05}, {"id": 2301, "seek": 620884, "start": 6227.28, "end": 6233.04, "text": " And it just gives you this gradient of this random little function we wrote.", "tokens": [400, 309, 445, 2709, 291, 341, 16235, 295, 341, 4974, 707, 2445, 321, 4114, 13], "temperature": 0.0, "avg_logprob": -0.12334025396059638, "compression_ratio": 1.9310344827586208, "no_speech_prob": 4.468789848033339e-05}, {"id": 2302, "seek": 620884, "start": 6233.04, "end": 6235.68, "text": " Now, one of the interesting things about this is, I wrote this out,", "tokens": [823, 11, 472, 295, 264, 1880, 721, 466, 341, 307, 11, 286, 4114, 341, 484, 11], "temperature": 0.0, "avg_logprob": -0.12334025396059638, "compression_ratio": 1.9310344827586208, "no_speech_prob": 4.468789848033339e-05}, {"id": 2303, "seek": 620884, "start": 6235.68, "end": 6238.68, "text": " it takes just doubles or floats or other things like that.", "tokens": [309, 2516, 445, 31634, 420, 37878, 420, 661, 721, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.12334025396059638, "compression_ratio": 1.9310344827586208, "no_speech_prob": 4.468789848033339e-05}, {"id": 2304, "seek": 623868, "start": 6238.68, "end": 6242.240000000001, "text": " Autodiff and Swift works on any differentiable type,", "tokens": [6049, 378, 3661, 293, 25539, 1985, 322, 604, 819, 9364, 2010, 11], "temperature": 0.0, "avg_logprob": -0.1729802185634397, "compression_ratio": 1.8037974683544304, "no_speech_prob": 2.753435001068283e-05}, {"id": 2305, "seek": 623868, "start": 6242.240000000001, "end": 6245.16, "text": " anything that's continuous, anything that's not like integers,", "tokens": [1340, 300, 311, 10957, 11, 1340, 300, 311, 406, 411, 41674, 11], "temperature": 0.0, "avg_logprob": -0.1729802185634397, "compression_ratio": 1.8037974683544304, "no_speech_prob": 2.753435001068283e-05}, {"id": 2306, "seek": 623868, "start": 6245.16, "end": 6247.360000000001, "text": " anything that has a gradient.", "tokens": [1340, 300, 575, 257, 16235, 13], "temperature": 0.0, "avg_logprob": -0.1729802185634397, "compression_ratio": 1.8037974683544304, "no_speech_prob": 2.753435001068283e-05}, {"id": 2307, "seek": 623868, "start": 6247.360000000001, "end": 6248.68, "text": " And so...", "tokens": [400, 370, 485], "temperature": 0.0, "avg_logprob": -0.1729802185634397, "compression_ratio": 1.8037974683544304, "no_speech_prob": 2.753435001068283e-05}, {"id": 2308, "seek": 623868, "start": 6248.68, "end": 6251.4800000000005, "text": " So you can't do this in just a library.", "tokens": [407, 291, 393, 380, 360, 341, 294, 445, 257, 6405, 13], "temperature": 0.0, "avg_logprob": -0.1729802185634397, "compression_ratio": 1.8037974683544304, "no_speech_prob": 2.753435001068283e-05}, {"id": 2309, "seek": 623868, "start": 6251.4800000000005, "end": 6255.400000000001, "text": " This has to be built into the language itself, because you're actually,", "tokens": [639, 575, 281, 312, 3094, 666, 264, 2856, 2564, 11, 570, 291, 434, 767, 11], "temperature": 0.0, "avg_logprob": -0.1729802185634397, "compression_ratio": 1.8037974683544304, "no_speech_prob": 2.753435001068283e-05}, {"id": 2310, "seek": 623868, "start": 6255.400000000001, "end": 6258.84, "text": " you're just, you're literally compiling something that's multiplying", "tokens": [291, 434, 445, 11, 291, 434, 3736, 715, 4883, 746, 300, 311, 30955], "temperature": 0.0, "avg_logprob": -0.1729802185634397, "compression_ratio": 1.8037974683544304, "no_speech_prob": 2.753435001068283e-05}, {"id": 2311, "seek": 623868, "start": 6258.84, "end": 6261.52, "text": " doubles together and it has to figure out how to get gradients out of that.", "tokens": [31634, 1214, 293, 309, 575, 281, 2573, 484, 577, 281, 483, 2771, 2448, 484, 295, 300, 13], "temperature": 0.0, "avg_logprob": -0.1729802185634397, "compression_ratio": 1.8037974683544304, "no_speech_prob": 2.753435001068283e-05}, {"id": 2312, "seek": 623868, "start": 6261.52, "end": 6264.52, "text": " Yeah. You can do things as a library, and that's what PyTorch", "tokens": [865, 13, 509, 393, 360, 721, 382, 257, 6405, 11, 293, 300, 311, 437, 9953, 51, 284, 339], "temperature": 0.0, "avg_logprob": -0.1729802185634397, "compression_ratio": 1.8037974683544304, "no_speech_prob": 2.753435001068283e-05}, {"id": 2313, "seek": 623868, "start": 6264.52, "end": 6265.84, "text": " and other frameworks do in Python.", "tokens": [293, 661, 29834, 360, 294, 15329, 13], "temperature": 0.0, "avg_logprob": -0.1729802185634397, "compression_ratio": 1.8037974683544304, "no_speech_prob": 2.753435001068283e-05}, {"id": 2314, "seek": 623868, "start": 6265.84, "end": 6266.84, "text": " Well, but PyTorch...", "tokens": [1042, 11, 457, 9953, 51, 284, 339, 485], "temperature": 0.0, "avg_logprob": -0.1729802185634397, "compression_ratio": 1.8037974683544304, "no_speech_prob": 2.753435001068283e-05}, {"id": 2315, "seek": 623868, "start": 6266.84, "end": 6267.84, "text": " Or it doesn't work the same way at all.", "tokens": [1610, 309, 1177, 380, 589, 264, 912, 636, 412, 439, 13], "temperature": 0.0, "avg_logprob": -0.1729802185634397, "compression_ratio": 1.8037974683544304, "no_speech_prob": 2.753435001068283e-05}, {"id": 2316, "seek": 626784, "start": 6267.84, "end": 6269.8, "text": " But PyTorch will not do that on doubles.", "tokens": [583, 9953, 51, 284, 339, 486, 406, 360, 300, 322, 31634, 13], "temperature": 0.0, "avg_logprob": -0.14426441610294538, "compression_ratio": 1.7566539923954372, "no_speech_prob": 1.5686435290263034e-05}, {"id": 2317, "seek": 626784, "start": 6269.8, "end": 6272.360000000001, "text": " PyTorch requires you to do that on tensors.", "tokens": [9953, 51, 284, 339, 7029, 291, 281, 360, 300, 322, 10688, 830, 13], "temperature": 0.0, "avg_logprob": -0.14426441610294538, "compression_ratio": 1.7566539923954372, "no_speech_prob": 1.5686435290263034e-05}, {"id": 2318, "seek": 626784, "start": 6272.360000000001, "end": 6273.6, "text": " Yes. Yes.", "tokens": [1079, 13, 1079, 13], "temperature": 0.0, "avg_logprob": -0.14426441610294538, "compression_ratio": 1.7566539923954372, "no_speech_prob": 1.5686435290263034e-05}, {"id": 2319, "seek": 626784, "start": 6273.6, "end": 6277.24, "text": " And so this doesn't just work on doubles.", "tokens": [400, 370, 341, 1177, 380, 445, 589, 322, 31634, 13], "temperature": 0.0, "avg_logprob": -0.14426441610294538, "compression_ratio": 1.7566539923954372, "no_speech_prob": 1.5686435290263034e-05}, {"id": 2320, "seek": 626784, "start": 6277.24, "end": 6281.68, "text": " If you want to define quaternions or other cool numeric scientific-y things", "tokens": [759, 291, 528, 281, 6964, 421, 771, 77, 626, 420, 661, 1627, 7866, 299, 8134, 12, 88, 721], "temperature": 0.0, "avg_logprob": -0.14426441610294538, "compression_ratio": 1.7566539923954372, "no_speech_prob": 1.5686435290263034e-05}, {"id": 2321, "seek": 626784, "start": 6281.68, "end": 6284.72, "text": " that are continuous, those are differentiable too.", "tokens": [300, 366, 10957, 11, 729, 366, 819, 9364, 886, 13], "temperature": 0.0, "avg_logprob": -0.14426441610294538, "compression_ratio": 1.7566539923954372, "no_speech_prob": 1.5686435290263034e-05}, {"id": 2322, "seek": 626784, "start": 6284.72, "end": 6286.68, "text": " And that all stacks out and works.", "tokens": [400, 300, 439, 30792, 484, 293, 1985, 13], "temperature": 0.0, "avg_logprob": -0.14426441610294538, "compression_ratio": 1.7566539923954372, "no_speech_prob": 1.5686435290263034e-05}, {"id": 2323, "seek": 626784, "start": 6286.68, "end": 6290.96, "text": " So there's a bunch of cool stuff that works this way.", "tokens": [407, 456, 311, 257, 3840, 295, 1627, 1507, 300, 1985, 341, 636, 13], "temperature": 0.0, "avg_logprob": -0.14426441610294538, "compression_ratio": 1.7566539923954372, "no_speech_prob": 1.5686435290263034e-05}, {"id": 2324, "seek": 626784, "start": 6290.96, "end": 6292.56, "text": " You can define a function.", "tokens": [509, 393, 6964, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.14426441610294538, "compression_ratio": 1.7566539923954372, "no_speech_prob": 1.5686435290263034e-05}, {"id": 2325, "seek": 626784, "start": 6292.56, "end": 6295.04, "text": " You can get the gradient at some point with the function.", "tokens": [509, 393, 483, 264, 16235, 412, 512, 935, 365, 264, 2445, 13], "temperature": 0.0, "avg_logprob": -0.14426441610294538, "compression_ratio": 1.7566539923954372, "no_speech_prob": 1.5686435290263034e-05}, {"id": 2326, "seek": 626784, "start": 6295.04, "end": 6296.04, "text": " You can pass enclosures.", "tokens": [509, 393, 1320, 2058, 9389, 1303, 13], "temperature": 0.0, "avg_logprob": -0.14426441610294538, "compression_ratio": 1.7566539923954372, "no_speech_prob": 1.5686435290263034e-05}, {"id": 2327, "seek": 629604, "start": 6296.04, "end": 6298.56, "text": " Like all this stuff is really nice.", "tokens": [1743, 439, 341, 1507, 307, 534, 1481, 13], "temperature": 0.0, "avg_logprob": -0.13485315926054603, "compression_ratio": 1.664092664092664, "no_speech_prob": 2.2122010705061257e-05}, {"id": 2328, "seek": 629604, "start": 6298.56, "end": 6301.6, "text": " Instead of talking about that, we're going to do the from the bottom", "tokens": [7156, 295, 1417, 466, 300, 11, 321, 434, 516, 281, 360, 264, 490, 264, 2767], "temperature": 0.0, "avg_logprob": -0.13485315926054603, "compression_ratio": 1.664092664092664, "no_speech_prob": 2.2122010705061257e-05}, {"id": 2329, "seek": 629604, "start": 6301.6, "end": 6303.04, "text": " up thing.", "tokens": [493, 551, 13], "temperature": 0.0, "avg_logprob": -0.13485315926054603, "compression_ratio": 1.664092664092664, "no_speech_prob": 2.2122010705061257e-05}, {"id": 2330, "seek": 629604, "start": 6303.04, "end": 6305.56, "text": " And so I'm going to pretend I understand calculus for a minute,", "tokens": [400, 370, 286, 478, 516, 281, 11865, 286, 1223, 33400, 337, 257, 3456, 11], "temperature": 0.0, "avg_logprob": -0.13485315926054603, "compression_ratio": 1.664092664092664, "no_speech_prob": 2.2122010705061257e-05}, {"id": 2331, "seek": 629604, "start": 6305.56, "end": 6308.04, "text": " which is sad.", "tokens": [597, 307, 4227, 13], "temperature": 0.0, "avg_logprob": -0.13485315926054603, "compression_ratio": 1.664092664092664, "no_speech_prob": 2.2122010705061257e-05}, {"id": 2332, "seek": 629604, "start": 6308.04, "end": 6312.88, "text": " So if you think about what differentiation is,", "tokens": [407, 498, 291, 519, 466, 437, 38902, 307, 11], "temperature": 0.0, "avg_logprob": -0.13485315926054603, "compression_ratio": 1.664092664092664, "no_speech_prob": 2.2122010705061257e-05}, {"id": 2333, "seek": 629604, "start": 6312.88, "end": 6314.84, "text": " computing the derivative of a function,", "tokens": [15866, 264, 13760, 295, 257, 2445, 11], "temperature": 0.0, "avg_logprob": -0.13485315926054603, "compression_ratio": 1.664092664092664, "no_speech_prob": 2.2122010705061257e-05}, {"id": 2334, "seek": 629604, "start": 6314.84, "end": 6316.5199999999995, "text": " there's two basic things you have to do.", "tokens": [456, 311, 732, 3875, 721, 291, 362, 281, 360, 13], "temperature": 0.0, "avg_logprob": -0.13485315926054603, "compression_ratio": 1.664092664092664, "no_speech_prob": 2.2122010705061257e-05}, {"id": 2335, "seek": 629604, "start": 6316.5199999999995, "end": 6318.96, "text": " You have to know the axioms of the universe.", "tokens": [509, 362, 281, 458, 264, 6360, 72, 4785, 295, 264, 6445, 13], "temperature": 0.0, "avg_logprob": -0.13485315926054603, "compression_ratio": 1.664092664092664, "no_speech_prob": 2.2122010705061257e-05}, {"id": 2336, "seek": 629604, "start": 6318.96, "end": 6324.12, "text": " Like what is the derivative of plus or multiply or sine or cosine", "tokens": [1743, 437, 307, 264, 13760, 295, 1804, 420, 12972, 420, 18609, 420, 23565], "temperature": 0.0, "avg_logprob": -0.13485315926054603, "compression_ratio": 1.664092664092664, "no_speech_prob": 2.2122010705061257e-05}, {"id": 2337, "seek": 632412, "start": 6324.12, "end": 6326.72, "text": " or tensor matmul.", "tokens": [420, 40863, 3803, 76, 425, 13], "temperature": 0.0, "avg_logprob": -0.18936256348617433, "compression_ratio": 1.7096774193548387, "no_speech_prob": 1.952282036654651e-05}, {"id": 2338, "seek": 632412, "start": 6326.72, "end": 6328.72, "text": " Then you have to compose these things together.", "tokens": [1396, 291, 362, 281, 35925, 613, 721, 1214, 13], "temperature": 0.0, "avg_logprob": -0.18936256348617433, "compression_ratio": 1.7096774193548387, "no_speech_prob": 1.952282036654651e-05}, {"id": 2339, "seek": 632412, "start": 6328.72, "end": 6331.92, "text": " And the way you compose them together is this thing called the chain rule.", "tokens": [400, 264, 636, 291, 35925, 552, 1214, 307, 341, 551, 1219, 264, 5021, 4978, 13], "temperature": 0.0, "avg_logprob": -0.18936256348617433, "compression_ratio": 1.7096774193548387, "no_speech_prob": 1.952282036654651e-05}, {"id": 2340, "seek": 632412, "start": 6331.92, "end": 6334.64, "text": " And this is something that I relearned, sadly,", "tokens": [400, 341, 307, 746, 300, 286, 2951, 1083, 292, 11, 22023, 11], "temperature": 0.0, "avg_logprob": -0.18936256348617433, "compression_ratio": 1.7096774193548387, "no_speech_prob": 1.952282036654651e-05}, {"id": 2341, "seek": 632412, "start": 6334.64, "end": 6336.72, "text": " over the last couple of weeks.", "tokens": [670, 264, 1036, 1916, 295, 3259, 13], "temperature": 0.0, "avg_logprob": -0.18936256348617433, "compression_ratio": 1.7096774193548387, "no_speech_prob": 1.952282036654651e-05}, {"id": 2342, "seek": 632412, "start": 6336.72, "end": 6339.84, "text": " And that we did in the Python part of this course.", "tokens": [400, 300, 321, 630, 294, 264, 15329, 644, 295, 341, 1164, 13], "temperature": 0.0, "avg_logprob": -0.18936256348617433, "compression_ratio": 1.7096774193548387, "no_speech_prob": 1.952282036654651e-05}, {"id": 2343, "seek": 632412, "start": 6339.84, "end": 6341.8, "text": " Yes. And we wrote it a different way.", "tokens": [1079, 13, 400, 321, 4114, 309, 257, 819, 636, 13], "temperature": 0.0, "avg_logprob": -0.18936256348617433, "compression_ratio": 1.7096774193548387, "no_speech_prob": 1.952282036654651e-05}, {"id": 2344, "seek": 632412, "start": 6341.8, "end": 6345.16, "text": " We had y dx equals to y du du dx.", "tokens": [492, 632, 288, 30017, 6915, 281, 288, 1581, 1581, 30017, 13], "temperature": 0.0, "avg_logprob": -0.18936256348617433, "compression_ratio": 1.7096774193548387, "no_speech_prob": 1.952282036654651e-05}, {"id": 2345, "seek": 632412, "start": 6345.16, "end": 6347.8, "text": " Yeah, apparently there's some ancient feud between the people", "tokens": [865, 11, 7970, 456, 311, 512, 7832, 36377, 1296, 264, 561], "temperature": 0.0, "avg_logprob": -0.18936256348617433, "compression_ratio": 1.7096774193548387, "no_speech_prob": 1.952282036654651e-05}, {"id": 2346, "seek": 632412, "start": 6347.8, "end": 6352.5599999999995, "text": " who invented calculus independently and they could not agree on notation.", "tokens": [567, 14479, 33400, 21761, 293, 436, 727, 406, 3986, 322, 24657, 13], "temperature": 0.0, "avg_logprob": -0.18936256348617433, "compression_ratio": 1.7096774193548387, "no_speech_prob": 1.952282036654651e-05}, {"id": 2347, "seek": 635256, "start": 6352.56, "end": 6355.360000000001, "text": " So what this is saying is this is saying if you want the derivative", "tokens": [407, 437, 341, 307, 1566, 307, 341, 307, 1566, 498, 291, 528, 264, 13760], "temperature": 0.0, "avg_logprob": -0.17273011318472928, "compression_ratio": 2.0384615384615383, "no_speech_prob": 3.119421671726741e-05}, {"id": 2348, "seek": 635256, "start": 6355.360000000001, "end": 6359.360000000001, "text": " of f calling g, the derivative of f calling g is the derivative", "tokens": [295, 283, 5141, 290, 11, 264, 13760, 295, 283, 5141, 290, 307, 264, 13760], "temperature": 0.0, "avg_logprob": -0.17273011318472928, "compression_ratio": 2.0384615384615383, "no_speech_prob": 3.119421671726741e-05}, {"id": 2349, "seek": 635256, "start": 6359.360000000001, "end": 6363.200000000001, "text": " of f applied to the forward version of g multiplied", "tokens": [295, 283, 6456, 281, 264, 2128, 3037, 295, 290, 17207], "temperature": 0.0, "avg_logprob": -0.17273011318472928, "compression_ratio": 2.0384615384615383, "no_speech_prob": 3.119421671726741e-05}, {"id": 2350, "seek": 635256, "start": 6363.200000000001, "end": 6364.96, "text": " by the derivative of g.", "tokens": [538, 264, 13760, 295, 290, 13], "temperature": 0.0, "avg_logprob": -0.17273011318472928, "compression_ratio": 2.0384615384615383, "no_speech_prob": 3.119421671726741e-05}, {"id": 2351, "seek": 635256, "start": 6364.96, "end": 6368.04, "text": " And this is important because this is actually computing the forward", "tokens": [400, 341, 307, 1021, 570, 341, 307, 767, 15866, 264, 2128], "temperature": 0.0, "avg_logprob": -0.17273011318472928, "compression_ratio": 2.0384615384615383, "no_speech_prob": 3.119421671726741e-05}, {"id": 2352, "seek": 635256, "start": 6368.04, "end": 6372.120000000001, "text": " version of g in order to get the derivative of this.", "tokens": [3037, 295, 290, 294, 1668, 281, 483, 264, 13760, 295, 341, 13], "temperature": 0.0, "avg_logprob": -0.17273011318472928, "compression_ratio": 2.0384615384615383, "no_speech_prob": 3.119421671726741e-05}, {"id": 2353, "seek": 635256, "start": 6372.120000000001, "end": 6373.4400000000005, "text": " And so.", "tokens": [400, 370, 13], "temperature": 0.0, "avg_logprob": -0.17273011318472928, "compression_ratio": 2.0384615384615383, "no_speech_prob": 3.119421671726741e-05}, {"id": 2354, "seek": 635256, "start": 6373.4400000000005, "end": 6375.56, "text": " Which we kind of hid away in our du du du dx version.", "tokens": [3013, 321, 733, 295, 16253, 1314, 294, 527, 1581, 1581, 1581, 30017, 3037, 13], "temperature": 0.0, "avg_logprob": -0.17273011318472928, "compression_ratio": 2.0384615384615383, "no_speech_prob": 3.119421671726741e-05}, {"id": 2355, "seek": 635256, "start": 6375.56, "end": 6377.0, "text": " Do you want to make the font larger?", "tokens": [1144, 291, 528, 281, 652, 264, 10703, 4833, 30], "temperature": 0.0, "avg_logprob": -0.17273011318472928, "compression_ratio": 2.0384615384615383, "no_speech_prob": 3.119421671726741e-05}, {"id": 2356, "seek": 635256, "start": 6377.0, "end": 6381.200000000001, "text": " Sure. I don't know how to do it on your machine.", "tokens": [4894, 13, 286, 500, 380, 458, 577, 281, 360, 309, 322, 428, 3479, 13], "temperature": 0.0, "avg_logprob": -0.17273011318472928, "compression_ratio": 2.0384615384615383, "no_speech_prob": 3.119421671726741e-05}, {"id": 2357, "seek": 638120, "start": 6381.2, "end": 6382.679999999999, "text": " Oh, there you go.", "tokens": [876, 11, 456, 291, 352, 13], "temperature": 0.0, "avg_logprob": -0.1230016864320767, "compression_ratio": 1.9563636363636363, "no_speech_prob": 5.143246380612254e-05}, {"id": 2358, "seek": 638120, "start": 6382.679999999999, "end": 6385.16, "text": " So how are we going to do this?", "tokens": [407, 577, 366, 321, 516, 281, 360, 341, 30], "temperature": 0.0, "avg_logprob": -0.1230016864320767, "compression_ratio": 1.9563636363636363, "no_speech_prob": 5.143246380612254e-05}, {"id": 2359, "seek": 638120, "start": 6385.16, "end": 6386.44, "text": " Well, what we're going to do is we're going to look", "tokens": [1042, 11, 437, 321, 434, 516, 281, 360, 307, 321, 434, 516, 281, 574], "temperature": 0.0, "avg_logprob": -0.1230016864320767, "compression_ratio": 1.9563636363636363, "no_speech_prob": 5.143246380612254e-05}, {"id": 2360, "seek": 638120, "start": 6386.44, "end": 6387.92, "text": " at defining the forward function of this.", "tokens": [412, 17827, 264, 2128, 2445, 295, 341, 13], "temperature": 0.0, "avg_logprob": -0.1230016864320767, "compression_ratio": 1.9563636363636363, "no_speech_prob": 5.143246380612254e-05}, {"id": 2361, "seek": 638120, "start": 6387.92, "end": 6393.88, "text": " And so we'll use the mean squared error as the example function.", "tokens": [400, 370, 321, 603, 764, 264, 914, 8889, 6713, 382, 264, 1365, 2445, 13], "temperature": 0.0, "avg_logprob": -0.1230016864320767, "compression_ratio": 1.9563636363636363, "no_speech_prob": 5.143246380612254e-05}, {"id": 2362, "seek": 638120, "start": 6393.88, "end": 6395.72, "text": " This is a little bit more complicated than I want.", "tokens": [639, 307, 257, 707, 857, 544, 6179, 813, 286, 528, 13], "temperature": 0.0, "avg_logprob": -0.1230016864320767, "compression_ratio": 1.9563636363636363, "no_speech_prob": 5.143246380612254e-05}, {"id": 2363, "seek": 638120, "start": 6395.72, "end": 6397.5199999999995, "text": " And so what I'm going to do is I'm going to actually just look", "tokens": [400, 370, 437, 286, 478, 516, 281, 360, 307, 286, 478, 516, 281, 767, 445, 574], "temperature": 0.0, "avg_logprob": -0.1230016864320767, "compression_ratio": 1.9563636363636363, "no_speech_prob": 5.143246380612254e-05}, {"id": 2364, "seek": 638120, "start": 6397.5199999999995, "end": 6398.8, "text": " at this piece here.", "tokens": [412, 341, 2522, 510, 13], "temperature": 0.0, "avg_logprob": -0.1230016864320767, "compression_ratio": 1.9563636363636363, "no_speech_prob": 5.143246380612254e-05}, {"id": 2365, "seek": 638120, "start": 6398.8, "end": 6401.04, "text": " And so I'm going to define this function mseinner.", "tokens": [400, 370, 286, 478, 516, 281, 6964, 341, 2445, 275, 405, 19166, 13], "temperature": 0.0, "avg_logprob": -0.1230016864320767, "compression_ratio": 1.9563636363636363, "no_speech_prob": 5.143246380612254e-05}, {"id": 2366, "seek": 638120, "start": 6401.04, "end": 6404.16, "text": " And all it is is it's the dot squared dot mean.", "tokens": [400, 439, 309, 307, 307, 309, 311, 264, 5893, 8889, 5893, 914, 13], "temperature": 0.0, "avg_logprob": -0.1230016864320767, "compression_ratio": 1.9563636363636363, "no_speech_prob": 5.143246380612254e-05}, {"id": 2367, "seek": 638120, "start": 6404.16, "end": 6406.72, "text": " So it's conceptually this thing.", "tokens": [407, 309, 311, 3410, 671, 341, 551, 13], "temperature": 0.0, "avg_logprob": -0.1230016864320767, "compression_ratio": 1.9563636363636363, "no_speech_prob": 5.143246380612254e-05}, {"id": 2368, "seek": 638120, "start": 6406.72, "end": 6410.36, "text": " Mseinner that just gets the square of x and then does the mean.", "tokens": [376, 405, 19166, 300, 445, 2170, 264, 3732, 295, 2031, 293, 550, 775, 264, 914, 13], "temperature": 0.0, "avg_logprob": -0.1230016864320767, "compression_ratio": 1.9563636363636363, "no_speech_prob": 5.143246380612254e-05}, {"id": 2369, "seek": 641036, "start": 6410.36, "end": 6411.5199999999995, "text": " Just because that's simpler.", "tokens": [1449, 570, 300, 311, 18587, 13], "temperature": 0.0, "avg_logprob": -0.13283237133150785, "compression_ratio": 1.923913043478261, "no_speech_prob": 1.300673193327384e-05}, {"id": 2370, "seek": 641036, "start": 6411.5199999999995, "end": 6413.679999999999, "text": " And then we'll come back to MSE at the end.", "tokens": [400, 550, 321, 603, 808, 646, 281, 376, 5879, 412, 264, 917, 13], "temperature": 0.0, "avg_logprob": -0.13283237133150785, "compression_ratio": 1.923913043478261, "no_speech_prob": 1.300673193327384e-05}, {"id": 2371, "seek": 641036, "start": 6413.679999999999, "end": 6416.16, "text": " And so in order to understand what's going on,", "tokens": [400, 370, 294, 1668, 281, 1223, 437, 311, 516, 322, 11], "temperature": 0.0, "avg_logprob": -0.13283237133150785, "compression_ratio": 1.923913043478261, "no_speech_prob": 1.300673193327384e-05}, {"id": 2372, "seek": 641036, "start": 6416.16, "end": 6417.96, "text": " I'm going to find this little helper function called trace.", "tokens": [286, 478, 516, 281, 915, 341, 707, 36133, 2445, 1219, 13508, 13], "temperature": 0.0, "avg_logprob": -0.13283237133150785, "compression_ratio": 1.923913043478261, "no_speech_prob": 1.300673193327384e-05}, {"id": 2373, "seek": 641036, "start": 6417.96, "end": 6421.759999999999, "text": " And all trace does is it you can put it in your function", "tokens": [400, 439, 13508, 775, 307, 309, 291, 393, 829, 309, 294, 428, 2445], "temperature": 0.0, "avg_logprob": -0.13283237133150785, "compression_ratio": 1.923913043478261, "no_speech_prob": 1.300673193327384e-05}, {"id": 2374, "seek": 641036, "start": 6421.759999999999, "end": 6425.32, "text": " and it uses this little magic thingy called pound function.", "tokens": [293, 309, 4960, 341, 707, 5585, 551, 88, 1219, 12013, 2445, 13], "temperature": 0.0, "avg_logprob": -0.13283237133150785, "compression_ratio": 1.923913043478261, "no_speech_prob": 1.300673193327384e-05}, {"id": 2375, "seek": 641036, "start": 6425.32, "end": 6426.799999999999, "text": " And when you call trace, it just prints", "tokens": [400, 562, 291, 818, 13508, 11, 309, 445, 22305], "temperature": 0.0, "avg_logprob": -0.13283237133150785, "compression_ratio": 1.923913043478261, "no_speech_prob": 1.300673193327384e-05}, {"id": 2376, "seek": 641036, "start": 6426.799999999999, "end": 6428.759999999999, "text": " out the function that it's called from.", "tokens": [484, 264, 2445, 300, 309, 311, 1219, 490, 13], "temperature": 0.0, "avg_logprob": -0.13283237133150785, "compression_ratio": 1.923913043478261, "no_speech_prob": 1.300673193327384e-05}, {"id": 2377, "seek": 641036, "start": 6428.759999999999, "end": 6431.5199999999995, "text": " Okay. And so here we call foo and it prints out, hey,", "tokens": [1033, 13, 400, 370, 510, 321, 818, 726, 78, 293, 309, 22305, 484, 11, 4177, 11], "temperature": 0.0, "avg_logprob": -0.13283237133150785, "compression_ratio": 1.923913043478261, "no_speech_prob": 1.300673193327384e-05}, {"id": 2378, "seek": 641036, "start": 6431.5199999999995, "end": 6435.36, "text": " I'm in foo ab and I'm in bar x. And so we'll use", "tokens": [286, 478, 294, 726, 78, 410, 293, 286, 478, 294, 2159, 2031, 13, 400, 370, 321, 603, 764], "temperature": 0.0, "avg_logprob": -0.13283237133150785, "compression_ratio": 1.923913043478261, "no_speech_prob": 1.300673193327384e-05}, {"id": 2379, "seek": 641036, "start": 6435.36, "end": 6438.16, "text": " that to understand what's happening in these cells.", "tokens": [300, 281, 1223, 437, 311, 2737, 294, 613, 5438, 13], "temperature": 0.0, "avg_logprob": -0.13283237133150785, "compression_ratio": 1.923913043478261, "no_speech_prob": 1.300673193327384e-05}, {"id": 2380, "seek": 643816, "start": 6438.16, "end": 6442.92, "text": " So here I can define just like you did in the PyTorch version,", "tokens": [407, 510, 286, 393, 6964, 445, 411, 291, 630, 294, 264, 9953, 51, 284, 339, 3037, 11], "temperature": 0.0, "avg_logprob": -0.12966513061523438, "compression_ratio": 1.754863813229572, "no_speech_prob": 4.610513860825449e-05}, {"id": 2381, "seek": 643816, "start": 6442.92, "end": 6446.639999999999, "text": " the forward and the derivative versions of these things.", "tokens": [264, 2128, 293, 264, 13760, 9606, 295, 613, 721, 13], "temperature": 0.0, "avg_logprob": -0.12966513061523438, "compression_ratio": 1.754863813229572, "no_speech_prob": 4.610513860825449e-05}, {"id": 2382, "seek": 643816, "start": 6446.639999999999, "end": 6448.72, "text": " And so x times x is the forward.", "tokens": [400, 370, 2031, 1413, 2031, 307, 264, 2128, 13], "temperature": 0.0, "avg_logprob": -0.12966513061523438, "compression_ratio": 1.754863813229572, "no_speech_prob": 4.610513860825449e-05}, {"id": 2383, "seek": 643816, "start": 6448.72, "end": 6453.72, "text": " The gradient version is 2 times x. X dot mean is the forward.", "tokens": [440, 16235, 3037, 307, 568, 1413, 2031, 13, 1783, 5893, 914, 307, 264, 2128, 13], "temperature": 0.0, "avg_logprob": -0.12966513061523438, "compression_ratio": 1.754863813229572, "no_speech_prob": 4.610513860825449e-05}, {"id": 2384, "seek": 643816, "start": 6453.72, "end": 6456.48, "text": " This weird thing of doing a divide is apparently the", "tokens": [639, 3657, 551, 295, 884, 257, 9845, 307, 7970, 264], "temperature": 0.0, "avg_logprob": -0.12966513061523438, "compression_ratio": 1.754863813229572, "no_speech_prob": 4.610513860825449e-05}, {"id": 2385, "seek": 643816, "start": 6456.48, "end": 6457.76, "text": " gradient of mean.", "tokens": [16235, 295, 914, 13], "temperature": 0.0, "avg_logprob": -0.12966513061523438, "compression_ratio": 1.754863813229572, "no_speech_prob": 4.610513860825449e-05}, {"id": 2386, "seek": 643816, "start": 6457.76, "end": 6460.12, "text": " And I checked it, it apparently works.", "tokens": [400, 286, 10033, 309, 11, 309, 7970, 1985, 13], "temperature": 0.0, "avg_logprob": -0.12966513061523438, "compression_ratio": 1.754863813229572, "no_speech_prob": 4.610513860825449e-05}, {"id": 2387, "seek": 643816, "start": 6460.12, "end": 6462.12, "text": " I don't know why.", "tokens": [286, 500, 380, 458, 983, 13], "temperature": 0.0, "avg_logprob": -0.12966513061523438, "compression_ratio": 1.754863813229572, "no_speech_prob": 4.610513860825449e-05}, {"id": 2388, "seek": 643816, "start": 6462.12, "end": 6463.96, "text": " So then when you define the forward function", "tokens": [407, 550, 562, 291, 6964, 264, 2128, 2445], "temperature": 0.0, "avg_logprob": -0.12966513061523438, "compression_ratio": 1.754863813229572, "no_speech_prob": 4.610513860825449e-05}, {"id": 2389, "seek": 643816, "start": 6463.96, "end": 6466.92, "text": " of this MSE inner function, it's just saying give me the square", "tokens": [295, 341, 376, 5879, 7284, 2445, 11, 309, 311, 445, 1566, 976, 385, 264, 3732], "temperature": 0.0, "avg_logprob": -0.12966513061523438, "compression_ratio": 1.754863813229572, "no_speech_prob": 4.610513860825449e-05}, {"id": 2390, "seek": 646692, "start": 6466.92, "end": 6469.24, "text": " and take the mean, super simple.", "tokens": [293, 747, 264, 914, 11, 1687, 2199, 13], "temperature": 0.0, "avg_logprob": -0.11814475233537437, "compression_ratio": 1.955719557195572, "no_speech_prob": 3.120032852166332e-05}, {"id": 2391, "seek": 646692, "start": 6469.24, "end": 6470.96, "text": " And then we can use the chain rule.", "tokens": [400, 550, 321, 393, 764, 264, 5021, 4978, 13], "temperature": 0.0, "avg_logprob": -0.11814475233537437, "compression_ratio": 1.955719557195572, "no_speech_prob": 3.120032852166332e-05}, {"id": 2392, "seek": 646692, "start": 6470.96, "end": 6473.56, "text": " And this is literally where we use the chain rule to say, okay,", "tokens": [400, 341, 307, 3736, 689, 321, 764, 264, 5021, 4978, 281, 584, 11, 1392, 11], "temperature": 0.0, "avg_logprob": -0.11814475233537437, "compression_ratio": 1.955719557195572, "no_speech_prob": 3.120032852166332e-05}, {"id": 2393, "seek": 646692, "start": 6473.56, "end": 6476.52, "text": " we want the gradient of one function on another function just", "tokens": [321, 528, 264, 16235, 295, 472, 2445, 322, 1071, 2445, 445], "temperature": 0.0, "avg_logprob": -0.11814475233537437, "compression_ratio": 1.955719557195572, "no_speech_prob": 3.120032852166332e-05}, {"id": 2394, "seek": 646692, "start": 6476.52, "end": 6478.04, "text": " like the syntax shows.", "tokens": [411, 264, 28431, 3110, 13], "temperature": 0.0, "avg_logprob": -0.11814475233537437, "compression_ratio": 1.955719557195572, "no_speech_prob": 3.120032852166332e-05}, {"id": 2395, "seek": 646692, "start": 6478.04, "end": 6481.56, "text": " And the way we do that is we get the gradient of mean and pass it", "tokens": [400, 264, 636, 321, 360, 300, 307, 321, 483, 264, 16235, 295, 914, 293, 1320, 309], "temperature": 0.0, "avg_logprob": -0.11814475233537437, "compression_ratio": 1.955719557195572, "no_speech_prob": 3.120032852166332e-05}, {"id": 2396, "seek": 646692, "start": 6481.56, "end": 6485.16, "text": " to the inner thing and multiply by the gradient of the other thing.", "tokens": [281, 264, 7284, 551, 293, 12972, 538, 264, 16235, 295, 264, 661, 551, 13], "temperature": 0.0, "avg_logprob": -0.11814475233537437, "compression_ratio": 1.955719557195572, "no_speech_prob": 3.120032852166332e-05}, {"id": 2397, "seek": 646692, "start": 6485.16, "end": 6489.4800000000005, "text": " So this is really literally the math interpretation of this stuff.", "tokens": [407, 341, 307, 534, 3736, 264, 5221, 14174, 295, 341, 1507, 13], "temperature": 0.0, "avg_logprob": -0.11814475233537437, "compression_ratio": 1.955719557195572, "no_speech_prob": 3.120032852166332e-05}, {"id": 2398, "seek": 646692, "start": 6489.4800000000005, "end": 6491.36, "text": " And given that we have this, we can now wrap it", "tokens": [400, 2212, 300, 321, 362, 341, 11, 321, 393, 586, 7019, 309], "temperature": 0.0, "avg_logprob": -0.11814475233537437, "compression_ratio": 1.955719557195572, "no_speech_prob": 3.120032852166332e-05}, {"id": 2399, "seek": 646692, "start": 6491.36, "end": 6495.56, "text": " up into more functions and we can say let's compute the forward", "tokens": [493, 666, 544, 6828, 293, 321, 393, 584, 718, 311, 14722, 264, 2128], "temperature": 0.0, "avg_logprob": -0.11814475233537437, "compression_ratio": 1.955719557195572, "no_speech_prob": 3.120032852166332e-05}, {"id": 2400, "seek": 649556, "start": 6495.56, "end": 6497.160000000001, "text": " and the backwards version of MSE.", "tokens": [293, 264, 12204, 3037, 295, 376, 5879, 13], "temperature": 0.0, "avg_logprob": -0.16744827057098174, "compression_ratio": 1.7543859649122806, "no_speech_prob": 1.2606282325577922e-05}, {"id": 2401, "seek": 649556, "start": 6497.160000000001, "end": 6498.4800000000005, "text": " We just call the forward version.", "tokens": [492, 445, 818, 264, 2128, 3037, 13], "temperature": 0.0, "avg_logprob": -0.16744827057098174, "compression_ratio": 1.7543859649122806, "no_speech_prob": 1.2606282325577922e-05}, {"id": 2402, "seek": 649556, "start": 6498.4800000000005, "end": 6499.8, "text": " We call the backward version.", "tokens": [492, 818, 264, 23897, 3037, 13], "temperature": 0.0, "avg_logprob": -0.16744827057098174, "compression_ratio": 1.7543859649122806, "no_speech_prob": 1.2606282325577922e-05}, {"id": 2403, "seek": 649556, "start": 6499.8, "end": 6502.92, "text": " And then we can run it on some example data, one, two, three, four.", "tokens": [400, 550, 321, 393, 1190, 309, 322, 512, 1365, 1412, 11, 472, 11, 732, 11, 1045, 11, 1451, 13], "temperature": 0.0, "avg_logprob": -0.16744827057098174, "compression_ratio": 1.7543859649122806, "no_speech_prob": 1.2606282325577922e-05}, {"id": 2404, "seek": 649556, "start": 6502.92, "end": 6507.04, "text": " And just to be clear, the upside down triangle thing is not an", "tokens": [400, 445, 281, 312, 1850, 11, 264, 14119, 760, 13369, 551, 307, 406, 364], "temperature": 0.0, "avg_logprob": -0.16744827057098174, "compression_ratio": 1.7543859649122806, "no_speech_prob": 1.2606282325577922e-05}, {"id": 2405, "seek": 649556, "start": 6507.04, "end": 6508.360000000001, "text": " operator here.", "tokens": [12973, 510, 13], "temperature": 0.0, "avg_logprob": -0.16744827057098174, "compression_ratio": 1.7543859649122806, "no_speech_prob": 1.2606282325577922e-05}, {"id": 2406, "seek": 649556, "start": 6508.360000000001, "end": 6510.96, "text": " It's just using inner code as part of the name of that function.", "tokens": [467, 311, 445, 1228, 7284, 3089, 382, 644, 295, 264, 1315, 295, 300, 2445, 13], "temperature": 0.0, "avg_logprob": -0.16744827057098174, "compression_ratio": 1.7543859649122806, "no_speech_prob": 1.2606282325577922e-05}, {"id": 2407, "seek": 649556, "start": 6510.96, "end": 6514.4400000000005, "text": " That's a gradient delta symbol thingy.", "tokens": [663, 311, 257, 16235, 8289, 5986, 551, 88, 13], "temperature": 0.0, "avg_logprob": -0.16744827057098174, "compression_ratio": 1.7543859649122806, "no_speech_prob": 1.2606282325577922e-05}, {"id": 2408, "seek": 649556, "start": 6514.4400000000005, "end": 6518.280000000001, "text": " I found that on Wikipedia.", "tokens": [286, 1352, 300, 322, 28999, 13], "temperature": 0.0, "avg_logprob": -0.16744827057098174, "compression_ratio": 1.7543859649122806, "no_speech_prob": 1.2606282325577922e-05}, {"id": 2409, "seek": 649556, "start": 6518.280000000001, "end": 6522.6, "text": " So when you run this, what you'll see is it computes the forward", "tokens": [407, 562, 291, 1190, 341, 11, 437, 291, 603, 536, 307, 309, 715, 1819, 264, 2128], "temperature": 0.0, "avg_logprob": -0.16744827057098174, "compression_ratio": 1.7543859649122806, "no_speech_prob": 1.2606282325577922e-05}, {"id": 2410, "seek": 649556, "start": 6522.6, "end": 6523.88, "text": " version of this thing.", "tokens": [3037, 295, 341, 551, 13], "temperature": 0.0, "avg_logprob": -0.16744827057098174, "compression_ratio": 1.7543859649122806, "no_speech_prob": 1.2606282325577922e-05}, {"id": 2411, "seek": 649556, "start": 6523.88, "end": 6525.200000000001, "text": " It runs square and then it runs mean.", "tokens": [467, 6676, 3732, 293, 550, 309, 6676, 914, 13], "temperature": 0.0, "avg_logprob": -0.16744827057098174, "compression_ratio": 1.7543859649122806, "no_speech_prob": 1.2606282325577922e-05}, {"id": 2412, "seek": 652520, "start": 6525.2, "end": 6526.84, "text": " And then it runs square again.", "tokens": [400, 550, 309, 6676, 3732, 797, 13], "temperature": 0.0, "avg_logprob": -0.09957714762006487, "compression_ratio": 1.7635135135135136, "no_speech_prob": 2.5865780116873793e-05}, {"id": 2413, "seek": 652520, "start": 6526.84, "end": 6529.16, "text": " And then it runs the backward version of mean and square.", "tokens": [400, 550, 309, 6676, 264, 23897, 3037, 295, 914, 293, 3732, 13], "temperature": 0.0, "avg_logprob": -0.09957714762006487, "compression_ratio": 1.7635135135135136, "no_speech_prob": 2.5865780116873793e-05}, {"id": 2414, "seek": 652520, "start": 6529.16, "end": 6530.84, "text": " And this makes sense given the chain rule, right?", "tokens": [400, 341, 1669, 2020, 2212, 264, 5021, 4978, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.09957714762006487, "compression_ratio": 1.7635135135135136, "no_speech_prob": 2.5865780116873793e-05}, {"id": 2415, "seek": 652520, "start": 6530.84, "end": 6534.04, "text": " We have to recompute the forward version of square to do this.", "tokens": [492, 362, 281, 48000, 1169, 264, 2128, 3037, 295, 3732, 281, 360, 341, 13], "temperature": 0.0, "avg_logprob": -0.09957714762006487, "compression_ratio": 1.7635135135135136, "no_speech_prob": 2.5865780116873793e-05}, {"id": 2416, "seek": 652520, "start": 6534.04, "end": 6536.76, "text": " And for this simple example, that's fine.", "tokens": [400, 337, 341, 2199, 1365, 11, 300, 311, 2489, 13], "temperature": 0.0, "avg_logprob": -0.09957714762006487, "compression_ratio": 1.7635135135135136, "no_speech_prob": 2.5865780116873793e-05}, {"id": 2417, "seek": 652520, "start": 6536.76, "end": 6538.8, "text": " Square is just one multiply.", "tokens": [16463, 307, 445, 472, 12972, 13], "temperature": 0.0, "avg_logprob": -0.09957714762006487, "compression_ratio": 1.7635135135135136, "no_speech_prob": 2.5865780116873793e-05}, {"id": 2418, "seek": 652520, "start": 6538.8, "end": 6542.48, "text": " But consider it might be a multiply of megabytes worth of stuff.", "tokens": [583, 1949, 309, 1062, 312, 257, 12972, 295, 10816, 24538, 3163, 295, 1507, 13], "temperature": 0.0, "avg_logprob": -0.09957714762006487, "compression_ratio": 1.7635135135135136, "no_speech_prob": 2.5865780116873793e-05}, {"id": 2419, "seek": 652520, "start": 6542.48, "end": 6544.08, "text": " It's not necessarily cheap.", "tokens": [467, 311, 406, 4725, 7084, 13], "temperature": 0.0, "avg_logprob": -0.09957714762006487, "compression_ratio": 1.7635135135135136, "no_speech_prob": 2.5865780116873793e-05}, {"id": 2420, "seek": 652520, "start": 6544.08, "end": 6546.28, "text": " And when you start composing these things together,", "tokens": [400, 562, 291, 722, 715, 6110, 613, 721, 1214, 11], "temperature": 0.0, "avg_logprob": -0.09957714762006487, "compression_ratio": 1.7635135135135136, "no_speech_prob": 2.5865780116873793e-05}, {"id": 2421, "seek": 652520, "start": 6546.28, "end": 6548.88, "text": " this recomputation can really come back to bite you.", "tokens": [341, 23334, 2582, 399, 393, 534, 808, 646, 281, 7988, 291, 13], "temperature": 0.0, "avg_logprob": -0.09957714762006487, "compression_ratio": 1.7635135135135136, "no_speech_prob": 2.5865780116873793e-05}, {"id": 2422, "seek": 652520, "start": 6548.88, "end": 6552.48, "text": " So let's look at what we can do to factor that out.", "tokens": [407, 718, 311, 574, 412, 437, 321, 393, 360, 281, 5952, 300, 484, 13], "temperature": 0.0, "avg_logprob": -0.09957714762006487, "compression_ratio": 1.7635135135135136, "no_speech_prob": 2.5865780116873793e-05}, {"id": 2423, "seek": 655248, "start": 6552.48, "end": 6555.799999999999, "text": " So there's this pattern called chainers", "tokens": [407, 456, 311, 341, 5102, 1219, 5021, 433], "temperature": 0.0, "avg_logprob": -0.07668808910334221, "compression_ratio": 1.8177570093457944, "no_speech_prob": 1.922134470078163e-05}, {"id": 2424, "seek": 655248, "start": 6555.799999999999, "end": 6558.599999999999, "text": " and what we call the value and chainer pattern.", "tokens": [293, 437, 321, 818, 264, 2158, 293, 5021, 260, 5102, 13], "temperature": 0.0, "avg_logprob": -0.07668808910334221, "compression_ratio": 1.8177570093457944, "no_speech_prob": 1.922134470078163e-05}, {"id": 2425, "seek": 655248, "start": 6558.599999999999, "end": 6562.48, "text": " And what we want to do is we want to find each of these functions", "tokens": [400, 437, 321, 528, 281, 360, 307, 321, 528, 281, 915, 1184, 295, 613, 6828], "temperature": 0.0, "avg_logprob": -0.07668808910334221, "compression_ratio": 1.8177570093457944, "no_speech_prob": 1.922134470078163e-05}, {"id": 2426, "seek": 655248, "start": 6562.48, "end": 6567.5599999999995, "text": " like square or mean or your model as one function", "tokens": [411, 3732, 420, 914, 420, 428, 2316, 382, 472, 2445], "temperature": 0.0, "avg_logprob": -0.07668808910334221, "compression_ratio": 1.8177570093457944, "no_speech_prob": 1.922134470078163e-05}, {"id": 2427, "seek": 655248, "start": 6567.5599999999995, "end": 6569.36, "text": " that returns two things.", "tokens": [300, 11247, 732, 721, 13], "temperature": 0.0, "avg_logprob": -0.07668808910334221, "compression_ratio": 1.8177570093457944, "no_speech_prob": 1.922134470078163e-05}, {"id": 2428, "seek": 655248, "start": 6569.36, "end": 6570.959999999999, "text": " And so what we're going to do is we're going to look", "tokens": [400, 370, 437, 321, 434, 516, 281, 360, 307, 321, 434, 516, 281, 574], "temperature": 0.0, "avg_logprob": -0.07668808910334221, "compression_ratio": 1.8177570093457944, "no_speech_prob": 1.922134470078163e-05}, {"id": 2429, "seek": 655248, "start": 6570.959999999999, "end": 6574.799999999999, "text": " at the other version of calculus' form of this.", "tokens": [412, 264, 661, 3037, 295, 33400, 6, 1254, 295, 341, 13], "temperature": 0.0, "avg_logprob": -0.07668808910334221, "compression_ratio": 1.8177570093457944, "no_speech_prob": 1.922134470078163e-05}, {"id": 2430, "seek": 655248, "start": 6574.799999999999, "end": 6578.879999999999, "text": " And so when you say that the derivative of x squared is 2x,", "tokens": [400, 370, 562, 291, 584, 300, 264, 13760, 295, 2031, 8889, 307, 568, 87, 11], "temperature": 0.0, "avg_logprob": -0.07668808910334221, "compression_ratio": 1.8177570093457944, "no_speech_prob": 1.922134470078163e-05}, {"id": 2431, "seek": 657888, "start": 6578.88, "end": 6583.64, "text": " you actually have to like move the d dx over with it.", "tokens": [291, 767, 362, 281, 411, 1286, 264, 274, 30017, 670, 365, 309, 13], "temperature": 0.0, "avg_logprob": -0.1495839582907187, "compression_ratio": 1.7755775577557755, "no_speech_prob": 3.6476976674748585e-05}, {"id": 2432, "seek": 657888, "start": 6583.64, "end": 6586.72, "text": " And this matters because the functions we just defined are", "tokens": [400, 341, 7001, 570, 264, 6828, 321, 445, 7642, 366], "temperature": 0.0, "avg_logprob": -0.1495839582907187, "compression_ratio": 1.7755775577557755, "no_speech_prob": 3.6476976674748585e-05}, {"id": 2433, "seek": 657888, "start": 6586.72, "end": 6589.2, "text": " actually only, those are only valid if you're looking", "tokens": [767, 787, 11, 729, 366, 787, 7363, 498, 291, 434, 1237], "temperature": 0.0, "avg_logprob": -0.1495839582907187, "compression_ratio": 1.7755775577557755, "no_speech_prob": 3.6476976674748585e-05}, {"id": 2434, "seek": 657888, "start": 6589.2, "end": 6590.88, "text": " at a given point, they're not valid", "tokens": [412, 257, 2212, 935, 11, 436, 434, 406, 7363], "temperature": 0.0, "avg_logprob": -0.1495839582907187, "compression_ratio": 1.7755775577557755, "no_speech_prob": 3.6476976674748585e-05}, {"id": 2435, "seek": 657888, "start": 6590.88, "end": 6592.4400000000005, "text": " if you compose it with another function.", "tokens": [498, 291, 35925, 309, 365, 1071, 2445, 13], "temperature": 0.0, "avg_logprob": -0.1495839582907187, "compression_ratio": 1.7755775577557755, "no_speech_prob": 3.6476976674748585e-05}, {"id": 2436, "seek": 657888, "start": 6592.4400000000005, "end": 6593.76, "text": " And so.", "tokens": [400, 370, 13], "temperature": 0.0, "avg_logprob": -0.1495839582907187, "compression_ratio": 1.7755775577557755, "no_speech_prob": 3.6476976674748585e-05}, {"id": 2437, "seek": 657888, "start": 6593.76, "end": 6595.04, "text": " It's just another way of writing the chain rule.", "tokens": [467, 311, 445, 1071, 636, 295, 3579, 264, 5021, 4978, 13], "temperature": 0.0, "avg_logprob": -0.1495839582907187, "compression_ratio": 1.7755775577557755, "no_speech_prob": 3.6476976674748585e-05}, {"id": 2438, "seek": 657888, "start": 6595.04, "end": 6596.36, "text": " It's the exact same thing.", "tokens": [467, 311, 264, 1900, 912, 551, 13], "temperature": 0.0, "avg_logprob": -0.1495839582907187, "compression_ratio": 1.7755775577557755, "no_speech_prob": 3.6476976674748585e-05}, {"id": 2439, "seek": 657888, "start": 6596.36, "end": 6599.0, "text": " And so we're going to call this the gradient chain.", "tokens": [400, 370, 321, 434, 516, 281, 818, 341, 264, 16235, 5021, 13], "temperature": 0.0, "avg_logprob": -0.1495839582907187, "compression_ratio": 1.7755775577557755, "no_speech_prob": 3.6476976674748585e-05}, {"id": 2440, "seek": 657888, "start": 6599.0, "end": 6601.0, "text": " And all it is is an extra multiply.", "tokens": [400, 439, 309, 307, 307, 364, 2857, 12972, 13], "temperature": 0.0, "avg_logprob": -0.1495839582907187, "compression_ratio": 1.7755775577557755, "no_speech_prob": 3.6476976674748585e-05}, {"id": 2441, "seek": 657888, "start": 6601.0, "end": 6604.8, "text": " And Chris, I just need to warn you in one of the earlier courses,", "tokens": [400, 6688, 11, 286, 445, 643, 281, 12286, 291, 294, 472, 295, 264, 3071, 7712, 11], "temperature": 0.0, "avg_logprob": -0.1495839582907187, "compression_ratio": 1.7755775577557755, "no_speech_prob": 3.6476976674748585e-05}, {"id": 2442, "seek": 657888, "start": 6604.8, "end": 6608.36, "text": " I got my upside down triangles mixed up as you just did.", "tokens": [286, 658, 452, 14119, 760, 29896, 7467, 493, 382, 291, 445, 630, 13], "temperature": 0.0, "avg_logprob": -0.1495839582907187, "compression_ratio": 1.7755775577557755, "no_speech_prob": 3.6476976674748585e-05}, {"id": 2443, "seek": 660836, "start": 6608.36, "end": 6610.44, "text": " So the other way around is delta.", "tokens": [407, 264, 661, 636, 926, 307, 8289, 13], "temperature": 0.0, "avg_logprob": -0.14747930040546492, "compression_ratio": 1.7483870967741935, "no_speech_prob": 2.0782545107067563e-05}, {"id": 2444, "seek": 660836, "start": 6610.44, "end": 6611.759999999999, "text": " And this one is called nabla.", "tokens": [400, 341, 472, 307, 1219, 297, 455, 875, 13], "temperature": 0.0, "avg_logprob": -0.14747930040546492, "compression_ratio": 1.7483870967741935, "no_speech_prob": 2.0782545107067563e-05}, {"id": 2445, "seek": 660836, "start": 6611.759999999999, "end": 6613.639999999999, "text": " And I only know that because I got in trouble for screwing it", "tokens": [400, 286, 787, 458, 300, 570, 286, 658, 294, 5253, 337, 5630, 278, 309], "temperature": 0.0, "avg_logprob": -0.14747930040546492, "compression_ratio": 1.7483870967741935, "no_speech_prob": 2.0782545107067563e-05}, {"id": 2446, "seek": 660836, "start": 6613.639999999999, "end": 6615.32, "text": " up for the last time.", "tokens": [493, 337, 264, 1036, 565, 13], "temperature": 0.0, "avg_logprob": -0.14747930040546492, "compression_ratio": 1.7483870967741935, "no_speech_prob": 2.0782545107067563e-05}, {"id": 2447, "seek": 660836, "start": 6615.32, "end": 6618.04, "text": " Thank you, Jeremy, for saving me.", "tokens": [1044, 291, 11, 17809, 11, 337, 6816, 385, 13], "temperature": 0.0, "avg_logprob": -0.14747930040546492, "compression_ratio": 1.7483870967741935, "no_speech_prob": 2.0782545107067563e-05}, {"id": 2448, "seek": 660836, "start": 6618.04, "end": 6620.48, "text": " So all this is is it's the same thing we saw before.", "tokens": [407, 439, 341, 307, 307, 309, 311, 264, 912, 551, 321, 1866, 949, 13], "temperature": 0.0, "avg_logprob": -0.14747930040546492, "compression_ratio": 1.7483870967741935, "no_speech_prob": 2.0782545107067563e-05}, {"id": 2449, "seek": 660836, "start": 6620.48, "end": 6622.88, "text": " It just has an extra multiplication there", "tokens": [467, 445, 575, 364, 2857, 27290, 456], "temperature": 0.0, "avg_logprob": -0.14747930040546492, "compression_ratio": 1.7483870967741935, "no_speech_prob": 2.0782545107067563e-05}, {"id": 2450, "seek": 660836, "start": 6622.88, "end": 6625.719999999999, "text": " because that's what the chain rule apparently really says.", "tokens": [570, 300, 311, 437, 264, 5021, 4978, 7970, 534, 1619, 13], "temperature": 0.0, "avg_logprob": -0.14747930040546492, "compression_ratio": 1.7483870967741935, "no_speech_prob": 2.0782545107067563e-05}, {"id": 2451, "seek": 660836, "start": 6625.719999999999, "end": 6627.5599999999995, "text": " So what we're going to do now is now that we have this,", "tokens": [407, 437, 321, 434, 516, 281, 360, 586, 307, 586, 300, 321, 362, 341, 11], "temperature": 0.0, "avg_logprob": -0.14747930040546492, "compression_ratio": 1.7483870967741935, "no_speech_prob": 2.0782545107067563e-05}, {"id": 2452, "seek": 660836, "start": 6627.5599999999995, "end": 6631.799999999999, "text": " we can actually define this value with chain function.", "tokens": [321, 393, 767, 6964, 341, 2158, 365, 5021, 2445, 13], "temperature": 0.0, "avg_logprob": -0.14747930040546492, "compression_ratio": 1.7483870967741935, "no_speech_prob": 2.0782545107067563e-05}, {"id": 2453, "seek": 660836, "start": 6631.799999999999, "end": 6633.12, "text": " And check this out.", "tokens": [400, 1520, 341, 484, 13], "temperature": 0.0, "avg_logprob": -0.14747930040546492, "compression_ratio": 1.7483870967741935, "no_speech_prob": 2.0782545107067563e-05}, {"id": 2454, "seek": 660836, "start": 6633.12, "end": 6634.36, "text": " What this is doing is it's wrapping up both", "tokens": [708, 341, 307, 884, 307, 309, 311, 21993, 493, 1293], "temperature": 0.0, "avg_logprob": -0.14747930040546492, "compression_ratio": 1.7483870967741935, "no_speech_prob": 2.0782545107067563e-05}, {"id": 2455, "seek": 660836, "start": 6634.36, "end": 6635.799999999999, "text": " of these things into one thing.", "tokens": [295, 613, 721, 666, 472, 551, 13], "temperature": 0.0, "avg_logprob": -0.14747930040546492, "compression_ratio": 1.7483870967741935, "no_speech_prob": 2.0782545107067563e-05}, {"id": 2456, "seek": 663580, "start": 6635.8, "end": 6639.52, "text": " So here we're returning the value when you call this.", "tokens": [407, 510, 321, 434, 12678, 264, 2158, 562, 291, 818, 341, 13], "temperature": 0.0, "avg_logprob": -0.17101097106933594, "compression_ratio": 1.8048780487804879, "no_speech_prob": 1.722955312288832e-05}, {"id": 2457, "seek": 663580, "start": 6639.52, "end": 6641.88, "text": " We're also returning this chain function.", "tokens": [492, 434, 611, 12678, 341, 5021, 2445, 13], "temperature": 0.0, "avg_logprob": -0.17101097106933594, "compression_ratio": 1.8048780487804879, "no_speech_prob": 1.722955312288832e-05}, {"id": 2458, "seek": 663580, "start": 6641.88, "end": 6643.2, "text": " And so now.", "tokens": [400, 370, 586, 13], "temperature": 0.0, "avg_logprob": -0.17101097106933594, "compression_ratio": 1.8048780487804879, "no_speech_prob": 1.722955312288832e-05}, {"id": 2459, "seek": 663580, "start": 6643.2, "end": 6646.6, "text": " So can you just explain this tf arrow tf, like what does,", "tokens": [407, 393, 291, 445, 2903, 341, 256, 69, 11610, 256, 69, 11, 411, 437, 775, 11], "temperature": 0.0, "avg_logprob": -0.17101097106933594, "compression_ratio": 1.8048780487804879, "no_speech_prob": 1.722955312288832e-05}, {"id": 2460, "seek": 663580, "start": 6646.6, "end": 6647.900000000001, "text": " how do I read that?", "tokens": [577, 360, 286, 1401, 300, 30], "temperature": 0.0, "avg_logprob": -0.17101097106933594, "compression_ratio": 1.8048780487804879, "no_speech_prob": 1.722955312288832e-05}, {"id": 2461, "seek": 663580, "start": 6647.900000000001, "end": 6649.2, "text": " Tf arrow tf?", "tokens": [314, 69, 11610, 256, 69, 30], "temperature": 0.0, "avg_logprob": -0.17101097106933594, "compression_ratio": 1.8048780487804879, "no_speech_prob": 1.722955312288832e-05}, {"id": 2462, "seek": 663580, "start": 6649.2, "end": 6650.5, "text": " Yeah, sure.", "tokens": [865, 11, 988, 13], "temperature": 0.0, "avg_logprob": -0.17101097106933594, "compression_ratio": 1.8048780487804879, "no_speech_prob": 1.722955312288832e-05}, {"id": 2463, "seek": 663580, "start": 6650.5, "end": 6651.8, "text": " So what this is doing is this is saying we're defining a function,", "tokens": [407, 437, 341, 307, 884, 307, 341, 307, 1566, 321, 434, 17827, 257, 2445, 11], "temperature": 0.0, "avg_logprob": -0.17101097106933594, "compression_ratio": 1.8048780487804879, "no_speech_prob": 1.722955312288832e-05}, {"id": 2464, "seek": 663580, "start": 6651.8, "end": 6653.1, "text": " square wvc.", "tokens": [3732, 261, 85, 66, 13], "temperature": 0.0, "avg_logprob": -0.17101097106933594, "compression_ratio": 1.8048780487804879, "no_speech_prob": 1.722955312288832e-05}, {"id": 2465, "seek": 663580, "start": 6653.1, "end": 6656.16, "text": " It takes x. It returns a tuple, right?", "tokens": [467, 2516, 2031, 13, 467, 11247, 257, 2604, 781, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.17101097106933594, "compression_ratio": 1.8048780487804879, "no_speech_prob": 1.722955312288832e-05}, {"id": 2466, "seek": 663580, "start": 6656.16, "end": 6657.6, "text": " We know what tuples are.", "tokens": [492, 458, 437, 2604, 2622, 366, 13], "temperature": 0.0, "avg_logprob": -0.17101097106933594, "compression_ratio": 1.8048780487804879, "no_speech_prob": 1.722955312288832e-05}, {"id": 2467, "seek": 663580, "start": 6657.6, "end": 6659.8, "text": " These are fancy tuples like you were showing before", "tokens": [1981, 366, 10247, 2604, 2622, 411, 291, 645, 4099, 949], "temperature": 0.0, "avg_logprob": -0.17101097106933594, "compression_ratio": 1.8048780487804879, "no_speech_prob": 1.722955312288832e-05}, {"id": 2468, "seek": 663580, "start": 6659.8, "end": 6662.12, "text": " where the two things are labeled.", "tokens": [689, 264, 732, 721, 366, 21335, 13], "temperature": 0.0, "avg_logprob": -0.17101097106933594, "compression_ratio": 1.8048780487804879, "no_speech_prob": 1.722955312288832e-05}, {"id": 2469, "seek": 663580, "start": 6662.12, "end": 6664.0, "text": " So there's a value member of the tuple", "tokens": [407, 456, 311, 257, 2158, 4006, 295, 264, 2604, 781], "temperature": 0.0, "avg_logprob": -0.17101097106933594, "compression_ratio": 1.8048780487804879, "no_speech_prob": 1.722955312288832e-05}, {"id": 2470, "seek": 663580, "start": 6664.0, "end": 6665.76, "text": " and there's a chain label of the tuple.", "tokens": [293, 456, 311, 257, 5021, 7645, 295, 264, 2604, 781, 13], "temperature": 0.0, "avg_logprob": -0.17101097106933594, "compression_ratio": 1.8048780487804879, "no_speech_prob": 1.722955312288832e-05}, {"id": 2471, "seek": 666576, "start": 6665.76, "end": 6668.08, "text": " The value is just a tensor of float.", "tokens": [440, 2158, 307, 445, 257, 40863, 295, 15706, 13], "temperature": 0.0, "avg_logprob": -0.13998457411645163, "compression_ratio": 1.8823529411764706, "no_speech_prob": 1.722774322843179e-05}, {"id": 2472, "seek": 666576, "start": 6668.08, "end": 6669.8, "text": " The chain is actually going to be a closure.", "tokens": [440, 5021, 307, 767, 516, 281, 312, 257, 24653, 13], "temperature": 0.0, "avg_logprob": -0.13998457411645163, "compression_ratio": 1.8823529411764706, "no_speech_prob": 1.722774322843179e-05}, {"id": 2473, "seek": 666576, "start": 6669.8, "end": 6673.52, "text": " And so this says it is a closure that takes a tensor of float", "tokens": [400, 370, 341, 1619, 309, 307, 257, 24653, 300, 2516, 257, 40863, 295, 15706], "temperature": 0.0, "avg_logprob": -0.13998457411645163, "compression_ratio": 1.8823529411764706, "no_speech_prob": 1.722774322843179e-05}, {"id": 2474, "seek": 666576, "start": 6673.52, "end": 6675.04, "text": " and returns a tensor of float.", "tokens": [293, 11247, 257, 40863, 295, 15706, 13], "temperature": 0.0, "avg_logprob": -0.13998457411645163, "compression_ratio": 1.8823529411764706, "no_speech_prob": 1.722774322843179e-05}, {"id": 2475, "seek": 666576, "start": 6675.04, "end": 6678.360000000001, "text": " So that's just a way of defining a type in Swift", "tokens": [407, 300, 311, 445, 257, 636, 295, 17827, 257, 2010, 294, 25539], "temperature": 0.0, "avg_logprob": -0.13998457411645163, "compression_ratio": 1.8823529411764706, "no_speech_prob": 1.722774322843179e-05}, {"id": 2476, "seek": 666576, "start": 6678.360000000001, "end": 6680.6, "text": " where the type is itself a function.", "tokens": [689, 264, 2010, 307, 2564, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.13998457411645163, "compression_ratio": 1.8823529411764706, "no_speech_prob": 1.722774322843179e-05}, {"id": 2477, "seek": 666576, "start": 6680.6, "end": 6684.24, "text": " Yep. And so what square vwc is going to be is it's going", "tokens": [7010, 13, 400, 370, 437, 3732, 371, 86, 66, 307, 516, 281, 312, 307, 309, 311, 516], "temperature": 0.0, "avg_logprob": -0.13998457411645163, "compression_ratio": 1.8823529411764706, "no_speech_prob": 1.722774322843179e-05}, {"id": 2478, "seek": 666576, "start": 6684.24, "end": 6685.56, "text": " to be two things.", "tokens": [281, 312, 732, 721, 13], "temperature": 0.0, "avg_logprob": -0.13998457411645163, "compression_ratio": 1.8823529411764706, "no_speech_prob": 1.722774322843179e-05}, {"id": 2479, "seek": 666576, "start": 6685.56, "end": 6688.12, "text": " It's the forward thing, the multiply x times x.", "tokens": [467, 311, 264, 2128, 551, 11, 264, 12972, 2031, 1413, 2031, 13], "temperature": 0.0, "avg_logprob": -0.13998457411645163, "compression_ratio": 1.8823529411764706, "no_speech_prob": 1.722774322843179e-05}, {"id": 2480, "seek": 666576, "start": 6688.12, "end": 6690.320000000001, "text": " And that's the backwards thing, the thing we showed just", "tokens": [400, 300, 311, 264, 12204, 551, 11, 264, 551, 321, 4712, 445], "temperature": 0.0, "avg_logprob": -0.13998457411645163, "compression_ratio": 1.8823529411764706, "no_speech_prob": 1.722774322843179e-05}, {"id": 2481, "seek": 666576, "start": 6690.320000000001, "end": 6694.12, "text": " up above that does ddx times 2 times x.", "tokens": [493, 3673, 300, 775, 274, 67, 87, 1413, 568, 1413, 2031, 13], "temperature": 0.0, "avg_logprob": -0.13998457411645163, "compression_ratio": 1.8823529411764706, "no_speech_prob": 1.722774322843179e-05}, {"id": 2482, "seek": 669412, "start": 6694.12, "end": 6696.5199999999995, "text": " And the forward thing is the actual value of the forward thing.", "tokens": [400, 264, 2128, 551, 307, 264, 3539, 2158, 295, 264, 2128, 551, 13], "temperature": 0.0, "avg_logprob": -0.13167861324028682, "compression_ratio": 2.0761245674740483, "no_speech_prob": 6.201541691552848e-05}, {"id": 2483, "seek": 669412, "start": 6696.5199999999995, "end": 6698.16, "text": " The backward thing is a function", "tokens": [440, 23897, 551, 307, 257, 2445], "temperature": 0.0, "avg_logprob": -0.13167861324028682, "compression_ratio": 2.0761245674740483, "no_speech_prob": 6.201541691552848e-05}, {"id": 2484, "seek": 669412, "start": 6698.16, "end": 6699.48, "text": " that will calculate the backward thing.", "tokens": [300, 486, 8873, 264, 23897, 551, 13], "temperature": 0.0, "avg_logprob": -0.13167861324028682, "compression_ratio": 2.0761245674740483, "no_speech_prob": 6.201541691552848e-05}, {"id": 2485, "seek": 669412, "start": 6699.48, "end": 6701.96, "text": " Yep. And the chain here is returning a closure.", "tokens": [7010, 13, 400, 264, 5021, 510, 307, 12678, 257, 24653, 13], "temperature": 0.0, "avg_logprob": -0.13167861324028682, "compression_ratio": 2.0761245674740483, "no_speech_prob": 6.201541691552848e-05}, {"id": 2486, "seek": 669412, "start": 6701.96, "end": 6704.76, "text": " And so it's not actually doing that computation.", "tokens": [400, 370, 309, 311, 406, 767, 884, 300, 24903, 13], "temperature": 0.0, "avg_logprob": -0.13167861324028682, "compression_ratio": 2.0761245674740483, "no_speech_prob": 6.201541691552848e-05}, {"id": 2487, "seek": 669412, "start": 6704.76, "end": 6706.32, "text": " So we can do the same thing with mean", "tokens": [407, 321, 393, 360, 264, 912, 551, 365, 914], "temperature": 0.0, "avg_logprob": -0.13167861324028682, "compression_ratio": 2.0761245674740483, "no_speech_prob": 6.201541691552848e-05}, {"id": 2488, "seek": 669412, "start": 6706.32, "end": 6708.24, "text": " and there's the same computation.", "tokens": [293, 456, 311, 264, 912, 24903, 13], "temperature": 0.0, "avg_logprob": -0.13167861324028682, "compression_ratio": 2.0761245674740483, "no_speech_prob": 6.201541691552848e-05}, {"id": 2489, "seek": 669412, "start": 6708.24, "end": 6711.2, "text": " And so now what this is doing is this little abstraction allows us", "tokens": [400, 370, 586, 437, 341, 307, 884, 307, 341, 707, 37765, 4045, 505], "temperature": 0.0, "avg_logprob": -0.13167861324028682, "compression_ratio": 2.0761245674740483, "no_speech_prob": 6.201541691552848e-05}, {"id": 2490, "seek": 669412, "start": 6711.2, "end": 6713.76, "text": " to pull together the forward function", "tokens": [281, 2235, 1214, 264, 2128, 2445], "temperature": 0.0, "avg_logprob": -0.13167861324028682, "compression_ratio": 2.0761245674740483, "no_speech_prob": 6.201541691552848e-05}, {"id": 2491, "seek": 669412, "start": 6713.76, "end": 6717.04, "text": " and the backward function into one little unit.", "tokens": [293, 264, 23897, 2445, 666, 472, 707, 4985, 13], "temperature": 0.0, "avg_logprob": -0.13167861324028682, "compression_ratio": 2.0761245674740483, "no_speech_prob": 6.201541691552848e-05}, {"id": 2492, "seek": 669412, "start": 6717.04, "end": 6719.36, "text": " And the reason why this is interesting is we can start", "tokens": [400, 264, 1778, 983, 341, 307, 1880, 307, 321, 393, 722], "temperature": 0.0, "avg_logprob": -0.13167861324028682, "compression_ratio": 2.0761245674740483, "no_speech_prob": 6.201541691552848e-05}, {"id": 2493, "seek": 669412, "start": 6719.36, "end": 6720.84, "text": " composing these things.", "tokens": [715, 6110, 613, 721, 13], "temperature": 0.0, "avg_logprob": -0.13167861324028682, "compression_ratio": 2.0761245674740483, "no_speech_prob": 6.201541691552848e-05}, {"id": 2494, "seek": 669412, "start": 6720.84, "end": 6723.24, "text": " And so this mse inner thing that we were talking about before,", "tokens": [400, 370, 341, 275, 405, 7284, 551, 300, 321, 645, 1417, 466, 949, 11], "temperature": 0.0, "avg_logprob": -0.13167861324028682, "compression_ratio": 2.0761245674740483, "no_speech_prob": 6.201541691552848e-05}, {"id": 2495, "seek": 672324, "start": 6723.24, "end": 6726.679999999999, "text": " which is mean followed by square or square followed by mean,", "tokens": [597, 307, 914, 6263, 538, 3732, 420, 3732, 6263, 538, 914, 11], "temperature": 0.0, "avg_logprob": -0.13978719265661507, "compression_ratio": 1.7816593886462881, "no_speech_prob": 1.473824249842437e-05}, {"id": 2496, "seek": 672324, "start": 6726.679999999999, "end": 6729.76, "text": " we can define, we just call square vwc", "tokens": [321, 393, 6964, 11, 321, 445, 818, 3732, 371, 86, 66], "temperature": 0.0, "avg_logprob": -0.13978719265661507, "compression_ratio": 1.7816593886462881, "no_speech_prob": 1.473824249842437e-05}, {"id": 2497, "seek": 672324, "start": 6729.76, "end": 6733.76, "text": " and then we pass the value that it returns into the mean vwc.", "tokens": [293, 550, 321, 1320, 264, 2158, 300, 309, 11247, 666, 264, 914, 371, 86, 66, 13], "temperature": 0.0, "avg_logprob": -0.13978719265661507, "compression_ratio": 1.7816593886462881, "no_speech_prob": 1.473824249842437e-05}, {"id": 2498, "seek": 672324, "start": 6733.76, "end": 6738.2, "text": " And then the result of calling this thing is mean.value.", "tokens": [400, 550, 264, 1874, 295, 5141, 341, 551, 307, 914, 13, 29155, 13], "temperature": 0.0, "avg_logprob": -0.13978719265661507, "compression_ratio": 1.7816593886462881, "no_speech_prob": 1.473824249842437e-05}, {"id": 2499, "seek": 672324, "start": 6738.2, "end": 6743.0, "text": " And the derivative is those two chains stuck together.", "tokens": [400, 264, 13760, 307, 729, 732, 12626, 5541, 1214, 13], "temperature": 0.0, "avg_logprob": -0.13978719265661507, "compression_ratio": 1.7816593886462881, "no_speech_prob": 1.473824249842437e-05}, {"id": 2500, "seek": 672324, "start": 6743.0, "end": 6745.76, "text": " And so if we run this,", "tokens": [400, 370, 498, 321, 1190, 341, 11], "temperature": 0.0, "avg_logprob": -0.13978719265661507, "compression_ratio": 1.7816593886462881, "no_speech_prob": 1.473824249842437e-05}, {"id": 2501, "seek": 672324, "start": 6745.76, "end": 6747.24, "text": " now we get this really interesting behavior", "tokens": [586, 321, 483, 341, 534, 1880, 5223], "temperature": 0.0, "avg_logprob": -0.13978719265661507, "compression_ratio": 1.7816593886462881, "no_speech_prob": 1.473824249842437e-05}, {"id": 2502, "seek": 672324, "start": 6747.24, "end": 6751.32, "text": " where when we call it we're only calling the forward functions once", "tokens": [689, 562, 321, 818, 309, 321, 434, 787, 5141, 264, 2128, 6828, 1564], "temperature": 0.0, "avg_logprob": -0.13978719265661507, "compression_ratio": 1.7816593886462881, "no_speech_prob": 1.473824249842437e-05}, {"id": 2503, "seek": 675132, "start": 6751.32, "end": 6754.5599999999995, "text": " and the backward function once as well.", "tokens": [293, 264, 23897, 2445, 1564, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.1087092854618247, "compression_ratio": 1.9850187265917603, "no_speech_prob": 7.965997065184638e-05}, {"id": 2504, "seek": 675132, "start": 6754.5599999999995, "end": 6756.5599999999995, "text": " And we also get the ability to separate this out.", "tokens": [400, 321, 611, 483, 264, 3485, 281, 4994, 341, 484, 13], "temperature": 0.0, "avg_logprob": -0.1087092854618247, "compression_ratio": 1.9850187265917603, "no_speech_prob": 7.965997065184638e-05}, {"id": 2505, "seek": 675132, "start": 6756.5599999999995, "end": 6759.88, "text": " And so here what we're doing is we're calling the vwc", "tokens": [400, 370, 510, 437, 321, 434, 884, 307, 321, 434, 5141, 264, 371, 86, 66], "temperature": 0.0, "avg_logprob": -0.1087092854618247, "compression_ratio": 1.9850187265917603, "no_speech_prob": 7.965997065184638e-05}, {"id": 2506, "seek": 675132, "start": 6759.88, "end": 6763.04, "text": " for the whole computation, which gives us the two things.", "tokens": [337, 264, 1379, 24903, 11, 597, 2709, 505, 264, 732, 721, 13], "temperature": 0.0, "avg_logprob": -0.1087092854618247, "compression_ratio": 1.9850187265917603, "no_speech_prob": 7.965997065184638e-05}, {"id": 2507, "seek": 675132, "start": 6763.04, "end": 6764.719999999999, "text": " And here we're using the value.", "tokens": [400, 510, 321, 434, 1228, 264, 2158, 13], "temperature": 0.0, "avg_logprob": -0.1087092854618247, "compression_ratio": 1.9850187265917603, "no_speech_prob": 7.965997065184638e-05}, {"id": 2508, "seek": 675132, "start": 6764.719999999999, "end": 6766.04, "text": " So we got the forward version of the value.", "tokens": [407, 321, 658, 264, 2128, 3037, 295, 264, 2158, 13], "temperature": 0.0, "avg_logprob": -0.1087092854618247, "compression_ratio": 1.9850187265917603, "no_speech_prob": 7.965997065184638e-05}, {"id": 2509, "seek": 675132, "start": 6766.04, "end": 6767.32, "text": " And if that's all we want, that's cool.", "tokens": [400, 498, 300, 311, 439, 321, 528, 11, 300, 311, 1627, 13], "temperature": 0.0, "avg_logprob": -0.1087092854618247, "compression_ratio": 1.9850187265917603, "no_speech_prob": 7.965997065184638e-05}, {"id": 2510, "seek": 675132, "start": 6767.32, "end": 6769.5599999999995, "text": " We can stop there.", "tokens": [492, 393, 1590, 456, 13], "temperature": 0.0, "avg_logprob": -0.1087092854618247, "compression_ratio": 1.9850187265917603, "no_speech_prob": 7.965997065184638e-05}, {"id": 2511, "seek": 675132, "start": 6769.5599999999995, "end": 6770.84, "text": " But we don't.", "tokens": [583, 321, 500, 380, 13], "temperature": 0.0, "avg_logprob": -0.1087092854618247, "compression_ratio": 1.9850187265917603, "no_speech_prob": 7.965997065184638e-05}, {"id": 2512, "seek": 675132, "start": 6770.84, "end": 6772.12, "text": " We want the backward version too.", "tokens": [492, 528, 264, 23897, 3037, 886, 13], "temperature": 0.0, "avg_logprob": -0.1087092854618247, "compression_ratio": 1.9850187265917603, "no_speech_prob": 7.965997065184638e-05}, {"id": 2513, "seek": 675132, "start": 6772.12, "end": 6774.44, "text": " And so here we call it with, we called the chain function", "tokens": [400, 370, 510, 321, 818, 309, 365, 11, 321, 1219, 264, 5021, 2445], "temperature": 0.0, "avg_logprob": -0.1087092854618247, "compression_ratio": 1.9850187265917603, "no_speech_prob": 7.965997065184638e-05}, {"id": 2514, "seek": 675132, "start": 6774.44, "end": 6776.16, "text": " to get that derivative.", "tokens": [281, 483, 300, 13760, 13], "temperature": 0.0, "avg_logprob": -0.1087092854618247, "compression_ratio": 1.9850187265917603, "no_speech_prob": 7.965997065184638e-05}, {"id": 2515, "seek": 675132, "start": 6776.16, "end": 6780.2, "text": " And so that's what gives us both the ability to get the forward", "tokens": [400, 370, 300, 311, 437, 2709, 505, 1293, 264, 3485, 281, 483, 264, 2128], "temperature": 0.0, "avg_logprob": -0.1087092854618247, "compression_ratio": 1.9850187265917603, "no_speech_prob": 7.965997065184638e-05}, {"id": 2516, "seek": 678020, "start": 6780.2, "end": 6782.36, "text": " and the backward separate, which we need.", "tokens": [293, 264, 23897, 4994, 11, 597, 321, 643, 13], "temperature": 0.0, "avg_logprob": -0.09912303668349537, "compression_ratio": 1.6689419795221843, "no_speech_prob": 4.157198873144807e-06}, {"id": 2517, "seek": 678020, "start": 6782.36, "end": 6785.36, "text": " But also it makes it so we're not getting the recomputation", "tokens": [583, 611, 309, 1669, 309, 370, 321, 434, 406, 1242, 264, 23334, 2582, 399], "temperature": 0.0, "avg_logprob": -0.09912303668349537, "compression_ratio": 1.6689419795221843, "no_speech_prob": 4.157198873144807e-06}, {"id": 2518, "seek": 678020, "start": 6785.36, "end": 6789.08, "text": " because we're reusing the same values within these closures.", "tokens": [570, 321, 434, 319, 7981, 264, 912, 4190, 1951, 613, 2611, 1303, 13], "temperature": 0.0, "avg_logprob": -0.09912303668349537, "compression_ratio": 1.6689419795221843, "no_speech_prob": 4.157198873144807e-06}, {"id": 2519, "seek": 678020, "start": 6789.08, "end": 6791.5599999999995, "text": " So given that we have these", "tokens": [407, 2212, 300, 321, 362, 613], "temperature": 0.0, "avg_logprob": -0.09912303668349537, "compression_ratio": 1.6689419795221843, "no_speech_prob": 4.157198873144807e-06}, {"id": 2520, "seek": 678020, "start": 6791.5599999999995, "end": 6793.599999999999, "text": " like infinitesimally tiny little things,", "tokens": [411, 7193, 3324, 332, 379, 5870, 707, 721, 11], "temperature": 0.0, "avg_logprob": -0.09912303668349537, "compression_ratio": 1.6689419795221843, "no_speech_prob": 4.157198873144807e-06}, {"id": 2521, "seek": 678020, "start": 6793.599999999999, "end": 6795.12, "text": " let's talk about applying this pattern.", "tokens": [718, 311, 751, 466, 9275, 341, 5102, 13], "temperature": 0.0, "avg_logprob": -0.09912303668349537, "compression_ratio": 1.6689419795221843, "no_speech_prob": 4.157198873144807e-06}, {"id": 2522, "seek": 678020, "start": 6795.12, "end": 6797.639999999999, "text": " I'll go pretty quickly because the details aren't really important.", "tokens": [286, 603, 352, 1238, 2661, 570, 264, 4365, 3212, 380, 534, 1021, 13], "temperature": 0.0, "avg_logprob": -0.09912303668349537, "compression_ratio": 1.6689419795221843, "no_speech_prob": 4.157198873144807e-06}, {"id": 2523, "seek": 678020, "start": 6797.639999999999, "end": 6799.96, "text": " So relu is just max with zero.", "tokens": [407, 1039, 84, 307, 445, 11469, 365, 4018, 13], "temperature": 0.0, "avg_logprob": -0.09912303668349537, "compression_ratio": 1.6689419795221843, "no_speech_prob": 4.157198873144807e-06}, {"id": 2524, "seek": 678020, "start": 6799.96, "end": 6805.2, "text": " And so we're using the same thing as relu grad from before.", "tokens": [400, 370, 321, 434, 1228, 264, 912, 551, 382, 1039, 84, 2771, 490, 949, 13], "temperature": 0.0, "avg_logprob": -0.09912303668349537, "compression_ratio": 1.6689419795221843, "no_speech_prob": 4.157198873144807e-06}, {"id": 2525, "seek": 678020, "start": 6805.2, "end": 6809.08, "text": " Here's the lin grad using the PyTorch style of doing this.", "tokens": [1692, 311, 264, 22896, 2771, 1228, 264, 9953, 51, 284, 339, 3758, 295, 884, 341, 13], "temperature": 0.0, "avg_logprob": -0.09912303668349537, "compression_ratio": 1.6689419795221843, "no_speech_prob": 4.157198873144807e-06}, {"id": 2526, "seek": 680908, "start": 6809.08, "end": 6812.6, "text": " And so all we're doing is we're pulling together the forward", "tokens": [400, 370, 439, 321, 434, 884, 307, 321, 434, 8407, 1214, 264, 2128], "temperature": 0.0, "avg_logprob": -0.10979320557136846, "compression_ratio": 1.7761194029850746, "no_speech_prob": 7.888625987106934e-06}, {"id": 2527, "seek": 680908, "start": 6812.6, "end": 6814.5199999999995, "text": " computation in the value thing here.", "tokens": [24903, 294, 264, 2158, 551, 510, 13], "temperature": 0.0, "avg_logprob": -0.10979320557136846, "compression_ratio": 1.7761194029850746, "no_speech_prob": 7.888625987106934e-06}, {"id": 2528, "seek": 680908, "start": 6814.5199999999995, "end": 6817.12, "text": " And then we're doing this backward computation here.", "tokens": [400, 550, 321, 434, 884, 341, 23897, 24903, 510, 13], "temperature": 0.0, "avg_logprob": -0.10979320557136846, "compression_ratio": 1.7761194029850746, "no_speech_prob": 7.888625987106934e-06}, {"id": 2529, "seek": 680908, "start": 6817.12, "end": 6818.44, "text": " And we're doing this with closures.", "tokens": [400, 321, 434, 884, 341, 365, 2611, 1303, 13], "temperature": 0.0, "avg_logprob": -0.10979320557136846, "compression_ratio": 1.7761194029850746, "no_speech_prob": 7.888625987106934e-06}, {"id": 2530, "seek": 680908, "start": 6818.44, "end": 6819.92, "text": " So can I just talk about this difference?", "tokens": [407, 393, 286, 445, 751, 466, 341, 2649, 30], "temperature": 0.0, "avg_logprob": -0.10979320557136846, "compression_ratio": 1.7761194029850746, "no_speech_prob": 7.888625987106934e-06}, {"id": 2531, "seek": 680908, "start": 6819.92, "end": 6822.6, "text": " Because it's really interesting because, you know,", "tokens": [1436, 309, 311, 534, 1880, 570, 11, 291, 458, 11], "temperature": 0.0, "avg_logprob": -0.10979320557136846, "compression_ratio": 1.7761194029850746, "no_speech_prob": 7.888625987106934e-06}, {"id": 2532, "seek": 680908, "start": 6822.6, "end": 6825.16, "text": " this is the version that Silva and I wrote", "tokens": [341, 307, 264, 3037, 300, 50171, 293, 286, 4114], "temperature": 0.0, "avg_logprob": -0.10979320557136846, "compression_ratio": 1.7761194029850746, "no_speech_prob": 7.888625987106934e-06}, {"id": 2533, "seek": 680908, "start": 6825.16, "end": 6829.4, "text": " when we just pushed it over from PyTorch.", "tokens": [562, 321, 445, 9152, 309, 670, 490, 9953, 51, 284, 339, 13], "temperature": 0.0, "avg_logprob": -0.10979320557136846, "compression_ratio": 1.7761194029850746, "no_speech_prob": 7.888625987106934e-06}, {"id": 2534, "seek": 680908, "start": 6829.4, "end": 6834.72, "text": " And we actually did the same thing that Chris just did,", "tokens": [400, 321, 767, 630, 264, 912, 551, 300, 6688, 445, 630, 11], "temperature": 0.0, "avg_logprob": -0.10979320557136846, "compression_ratio": 1.7761194029850746, "no_speech_prob": 7.888625987106934e-06}, {"id": 2535, "seek": 680908, "start": 6834.72, "end": 6838.44, "text": " which is we avoided calculating the forward pass twice.", "tokens": [597, 307, 321, 24890, 28258, 264, 2128, 1320, 6091, 13], "temperature": 0.0, "avg_logprob": -0.10979320557136846, "compression_ratio": 1.7761194029850746, "no_speech_prob": 7.888625987106934e-06}, {"id": 2536, "seek": 683844, "start": 6838.44, "end": 6843.24, "text": " And the way we did it was to cache away in in dot grad", "tokens": [400, 264, 636, 321, 630, 309, 390, 281, 19459, 1314, 294, 294, 5893, 2771], "temperature": 0.0, "avg_logprob": -0.12960675129523644, "compression_ratio": 1.5957446808510638, "no_speech_prob": 1.0952538104902487e-05}, {"id": 2537, "seek": 683844, "start": 6843.24, "end": 6848.799999999999, "text": " and out dot grad and dot inner, the intermediate values,", "tokens": [293, 484, 5893, 2771, 293, 5893, 7284, 11, 264, 19376, 4190, 11], "temperature": 0.0, "avg_logprob": -0.12960675129523644, "compression_ratio": 1.5957446808510638, "no_speech_prob": 1.0952538104902487e-05}, {"id": 2538, "seek": 683844, "start": 6848.799999999999, "end": 6850.799999999999, "text": " so that we could then use them again later", "tokens": [370, 300, 321, 727, 550, 764, 552, 797, 1780], "temperature": 0.0, "avg_logprob": -0.12960675129523644, "compression_ratio": 1.5957446808510638, "no_speech_prob": 1.0952538104902487e-05}, {"id": 2539, "seek": 683844, "start": 6850.799999999999, "end": 6852.679999999999, "text": " without recalculating them.", "tokens": [1553, 850, 304, 2444, 990, 552, 13], "temperature": 0.0, "avg_logprob": -0.12960675129523644, "compression_ratio": 1.5957446808510638, "no_speech_prob": 1.0952538104902487e-05}, {"id": 2540, "seek": 683844, "start": 6852.679999999999, "end": 6857.599999999999, "text": " Now, what Chris is showing you here is doing the exact same thing,", "tokens": [823, 11, 437, 6688, 307, 4099, 291, 510, 307, 884, 264, 1900, 912, 551, 11], "temperature": 0.0, "avg_logprob": -0.12960675129523644, "compression_ratio": 1.5957446808510638, "no_speech_prob": 1.0952538104902487e-05}, {"id": 2541, "seek": 683844, "start": 6857.599999999999, "end": 6861.96, "text": " but in a much more automated way, right?", "tokens": [457, 294, 257, 709, 544, 18473, 636, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.12960675129523644, "compression_ratio": 1.5957446808510638, "no_speech_prob": 1.0952538104902487e-05}, {"id": 2542, "seek": 683844, "start": 6861.96, "end": 6863.599999999999, "text": " It's a very mechanical process.", "tokens": [467, 311, 257, 588, 12070, 1399, 13], "temperature": 0.0, "avg_logprob": -0.12960675129523644, "compression_ratio": 1.5957446808510638, "no_speech_prob": 1.0952538104902487e-05}, {"id": 2543, "seek": 683844, "start": 6863.599999999999, "end": 6866.599999999999, "text": " Yeah. So rather than having to kind of use this kind", "tokens": [865, 13, 407, 2831, 813, 1419, 281, 733, 295, 764, 341, 733], "temperature": 0.0, "avg_logprob": -0.12960675129523644, "compression_ratio": 1.5957446808510638, "no_speech_prob": 1.0952538104902487e-05}, {"id": 2544, "seek": 686660, "start": 6866.6, "end": 6869.88, "text": " of very heuristic, hacky, one-at-a-time approach of saying,", "tokens": [295, 588, 415, 374, 3142, 11, 10339, 88, 11, 472, 12, 267, 12, 64, 12, 3766, 3109, 295, 1566, 11], "temperature": 0.0, "avg_logprob": -0.14881770658177257, "compression_ratio": 1.7040816326530612, "no_speech_prob": 3.534759525791742e-05}, {"id": 2545, "seek": 686660, "start": 6869.88, "end": 6871.360000000001, "text": " what do I need at each point?", "tokens": [437, 360, 286, 643, 412, 1184, 935, 30], "temperature": 0.0, "avg_logprob": -0.14881770658177257, "compression_ratio": 1.7040816326530612, "no_speech_prob": 3.534759525791742e-05}, {"id": 2546, "seek": 686660, "start": 6871.360000000001, "end": 6873.360000000001, "text": " Let's save it away in something or give it a name,", "tokens": [961, 311, 3155, 309, 1314, 294, 746, 420, 976, 309, 257, 1315, 11], "temperature": 0.0, "avg_logprob": -0.14881770658177257, "compression_ratio": 1.7040816326530612, "no_speech_prob": 3.534759525791742e-05}, {"id": 2547, "seek": 686660, "start": 6873.360000000001, "end": 6875.64, "text": " and then we'll use it again later.", "tokens": [293, 550, 321, 603, 764, 309, 797, 1780, 13], "temperature": 0.0, "avg_logprob": -0.14881770658177257, "compression_ratio": 1.7040816326530612, "no_speech_prob": 3.534759525791742e-05}, {"id": 2548, "seek": 686660, "start": 6875.64, "end": 6876.92, "text": " It's kind of interesting.", "tokens": [467, 311, 733, 295, 1880, 13], "temperature": 0.0, "avg_logprob": -0.14881770658177257, "compression_ratio": 1.7040816326530612, "no_speech_prob": 3.534759525791742e-05}, {"id": 2549, "seek": 686660, "start": 6876.92, "end": 6879.08, "text": " And also without any mutation,", "tokens": [400, 611, 1553, 604, 27960, 11], "temperature": 0.0, "avg_logprob": -0.14881770658177257, "compression_ratio": 1.7040816326530612, "no_speech_prob": 3.534759525791742e-05}, {"id": 2550, "seek": 686660, "start": 6879.08, "end": 6882.04, "text": " this functional approach is basically saying,", "tokens": [341, 11745, 3109, 307, 1936, 1566, 11], "temperature": 0.0, "avg_logprob": -0.14881770658177257, "compression_ratio": 1.7040816326530612, "no_speech_prob": 3.534759525791742e-05}, {"id": 2551, "seek": 686660, "start": 6882.04, "end": 6884.84, "text": " let's package of everything we need and hand it", "tokens": [718, 311, 7372, 295, 1203, 321, 643, 293, 1011, 309], "temperature": 0.0, "avg_logprob": -0.14881770658177257, "compression_ratio": 1.7040816326530612, "no_speech_prob": 3.534759525791742e-05}, {"id": 2552, "seek": 686660, "start": 6884.84, "end": 6887.360000000001, "text": " over to everything that needs it.", "tokens": [670, 281, 1203, 300, 2203, 309, 13], "temperature": 0.0, "avg_logprob": -0.14881770658177257, "compression_ratio": 1.7040816326530612, "no_speech_prob": 3.534759525791742e-05}, {"id": 2553, "seek": 686660, "start": 6887.360000000001, "end": 6891.0, "text": " And so that way, we never had to say, what are we going", "tokens": [400, 370, 300, 636, 11, 321, 1128, 632, 281, 584, 11, 437, 366, 321, 516], "temperature": 0.0, "avg_logprob": -0.14881770658177257, "compression_ratio": 1.7040816326530612, "no_speech_prob": 3.534759525791742e-05}, {"id": 2554, "seek": 686660, "start": 6891.0, "end": 6892.320000000001, "text": " to need for later?", "tokens": [281, 643, 337, 1780, 30], "temperature": 0.0, "avg_logprob": -0.14881770658177257, "compression_ratio": 1.7040816326530612, "no_speech_prob": 3.534759525791742e-05}, {"id": 2555, "seek": 686660, "start": 6892.320000000001, "end": 6894.200000000001, "text": " It just works.", "tokens": [467, 445, 1985, 13], "temperature": 0.0, "avg_logprob": -0.14881770658177257, "compression_ratio": 1.7040816326530612, "no_speech_prob": 3.534759525791742e-05}, {"id": 2556, "seek": 686660, "start": 6894.200000000001, "end": 6896.4400000000005, "text": " So kind of like you'll see all the steps are here.", "tokens": [407, 733, 295, 411, 291, 603, 536, 439, 264, 4439, 366, 510, 13], "temperature": 0.0, "avg_logprob": -0.14881770658177257, "compression_ratio": 1.7040816326530612, "no_speech_prob": 3.534759525791742e-05}, {"id": 2557, "seek": 689644, "start": 6896.44, "end": 6899.799999999999, "text": " Out times blah dot transposed, out times blah dot transposed,", "tokens": [5925, 1413, 12288, 5893, 7132, 1744, 11, 484, 1413, 12288, 5893, 7132, 1744, 11], "temperature": 0.0, "avg_logprob": -0.13459937028058871, "compression_ratio": 1.725868725868726, "no_speech_prob": 4.7107132559176534e-06}, {"id": 2558, "seek": 689644, "start": 6899.799999999999, "end": 6901.08, "text": " right?", "tokens": [558, 30], "temperature": 0.0, "avg_logprob": -0.13459937028058871, "compression_ratio": 1.725868725868726, "no_speech_prob": 4.7107132559176534e-06}, {"id": 2559, "seek": 689644, "start": 6901.08, "end": 6903.879999999999, "text": " But we never had to think about what to cache away.", "tokens": [583, 321, 1128, 632, 281, 519, 466, 437, 281, 19459, 1314, 13], "temperature": 0.0, "avg_logprob": -0.13459937028058871, "compression_ratio": 1.725868725868726, "no_speech_prob": 4.7107132559176534e-06}, {"id": 2560, "seek": 689644, "start": 6903.879999999999, "end": 6906.879999999999, "text": " And so this is not something I would want", "tokens": [400, 370, 341, 307, 406, 746, 286, 576, 528], "temperature": 0.0, "avg_logprob": -0.13459937028058871, "compression_ratio": 1.725868725868726, "no_speech_prob": 4.7107132559176534e-06}, {"id": 2561, "seek": 689644, "start": 6906.879999999999, "end": 6910.759999999999, "text": " to write ever again manually, personally.", "tokens": [281, 2464, 1562, 797, 16945, 11, 5665, 13], "temperature": 0.0, "avg_logprob": -0.13459937028058871, "compression_ratio": 1.725868725868726, "no_speech_prob": 4.7107132559176534e-06}, {"id": 2562, "seek": 689644, "start": 6910.759999999999, "end": 6914.32, "text": " But the advantage of this is it's really mechanical,", "tokens": [583, 264, 5002, 295, 341, 307, 309, 311, 534, 12070, 11], "temperature": 0.0, "avg_logprob": -0.13459937028058871, "compression_ratio": 1.725868725868726, "no_speech_prob": 4.7107132559176534e-06}, {"id": 2563, "seek": 689644, "start": 6914.32, "end": 6916.08, "text": " and it's very structured.", "tokens": [293, 309, 311, 588, 18519, 13], "temperature": 0.0, "avg_logprob": -0.13459937028058871, "compression_ratio": 1.725868725868726, "no_speech_prob": 4.7107132559176534e-06}, {"id": 2564, "seek": 689644, "start": 6916.08, "end": 6919.599999999999, "text": " And so when you write the full MSE, what we can do is we can say,", "tokens": [400, 370, 562, 291, 2464, 264, 1577, 376, 5879, 11, 437, 321, 393, 360, 307, 321, 393, 584, 11], "temperature": 0.0, "avg_logprob": -0.13459937028058871, "compression_ratio": 1.725868725868726, "no_speech_prob": 4.7107132559176534e-06}, {"id": 2565, "seek": 689644, "start": 6919.599999999999, "end": 6923.5199999999995, "text": " well, it's that subtraction, then it's that dot mean dot squared,", "tokens": [731, 11, 309, 311, 300, 16390, 313, 11, 550, 309, 311, 300, 5893, 914, 5893, 8889, 11], "temperature": 0.0, "avg_logprob": -0.13459937028058871, "compression_ratio": 1.725868725868726, "no_speech_prob": 4.7107132559176534e-06}, {"id": 2566, "seek": 689644, "start": 6923.5199999999995, "end": 6925.04, "text": " and then on the backwards pass,", "tokens": [293, 550, 322, 264, 12204, 1320, 11], "temperature": 0.0, "avg_logprob": -0.13459937028058871, "compression_ratio": 1.725868725868726, "no_speech_prob": 4.7107132559176534e-06}, {"id": 2567, "seek": 692504, "start": 6925.04, "end": 6928.24, "text": " we have to undo the squeeze and the subtraction thingy.", "tokens": [321, 362, 281, 23779, 264, 13578, 293, 264, 16390, 313, 551, 88, 13], "temperature": 0.0, "avg_logprob": -0.10812171517986141, "compression_ratio": 1.774294670846395, "no_speech_prob": 4.936558980261907e-06}, {"id": 2568, "seek": 692504, "start": 6928.24, "end": 6931.24, "text": " And so it's very mechanical how it plugs together.", "tokens": [400, 370, 309, 311, 588, 12070, 577, 309, 33899, 1214, 13], "temperature": 0.0, "avg_logprob": -0.10812171517986141, "compression_ratio": 1.774294670846395, "no_speech_prob": 4.936558980261907e-06}, {"id": 2569, "seek": 692504, "start": 6931.24, "end": 6932.96, "text": " Now we can write that forward and backward function,", "tokens": [823, 321, 393, 2464, 300, 2128, 293, 23897, 2445, 11], "temperature": 0.0, "avg_logprob": -0.10812171517986141, "compression_ratio": 1.774294670846395, "no_speech_prob": 4.936558980261907e-06}, {"id": 2570, "seek": 692504, "start": 6932.96, "end": 6936.12, "text": " and it looks very similar to what the manual version", "tokens": [293, 309, 1542, 588, 2531, 281, 437, 264, 9688, 3037], "temperature": 0.0, "avg_logprob": -0.10812171517986141, "compression_ratio": 1.774294670846395, "no_speech_prob": 4.936558980261907e-06}, {"id": 2571, "seek": 692504, "start": 6936.12, "end": 6939.0, "text": " of the PyTorch thing looked like, where you're calling these functions,", "tokens": [295, 264, 9953, 51, 284, 339, 551, 2956, 411, 11, 689, 291, 434, 5141, 613, 6828, 11], "temperature": 0.0, "avg_logprob": -0.10812171517986141, "compression_ratio": 1.774294670846395, "no_speech_prob": 4.936558980261907e-06}, {"id": 2572, "seek": 692504, "start": 6939.0, "end": 6941.84, "text": " and then in the backward version, you start out with one,", "tokens": [293, 550, 294, 264, 23897, 3037, 11, 291, 722, 484, 365, 472, 11], "temperature": 0.0, "avg_logprob": -0.10812171517986141, "compression_ratio": 1.774294670846395, "no_speech_prob": 4.936558980261907e-06}, {"id": 2573, "seek": 692504, "start": 6941.84, "end": 6945.08, "text": " because the gradient of the loss with respect to itself is one,", "tokens": [570, 264, 16235, 295, 264, 4470, 365, 3104, 281, 2564, 307, 472, 11], "temperature": 0.0, "avg_logprob": -0.10812171517986141, "compression_ratio": 1.774294670846395, "no_speech_prob": 4.936558980261907e-06}, {"id": 2574, "seek": 692504, "start": 6945.08, "end": 6948.68, "text": " which now I understand, thanks to Jeremy.", "tokens": [597, 586, 286, 1223, 11, 3231, 281, 17809, 13], "temperature": 0.0, "avg_logprob": -0.10812171517986141, "compression_ratio": 1.774294670846395, "no_speech_prob": 4.936558980261907e-06}, {"id": 2575, "seek": 692504, "start": 6948.68, "end": 6951.56, "text": " And then they chain it all together, and you get the gradients.", "tokens": [400, 550, 436, 5021, 309, 439, 1214, 11, 293, 291, 483, 264, 2771, 2448, 13], "temperature": 0.0, "avg_logprob": -0.10812171517986141, "compression_ratio": 1.774294670846395, "no_speech_prob": 4.936558980261907e-06}, {"id": 2576, "seek": 692504, "start": 6951.56, "end": 6954.36, "text": " And through all of this work, again, what we've ended", "tokens": [400, 807, 439, 295, 341, 589, 11, 797, 11, 437, 321, 600, 4590], "temperature": 0.0, "avg_logprob": -0.10812171517986141, "compression_ratio": 1.774294670846395, "no_speech_prob": 4.936558980261907e-06}, {"id": 2577, "seek": 695436, "start": 6954.36, "end": 6956.4, "text": " up with is we've gotten the forward and backwards pass,", "tokens": [493, 365, 307, 321, 600, 5768, 264, 2128, 293, 12204, 1320, 11], "temperature": 0.0, "avg_logprob": -0.1397032566207776, "compression_ratio": 1.6723549488054608, "no_speech_prob": 4.005887603852898e-05}, {"id": 2578, "seek": 695436, "start": 6956.4, "end": 6959.839999999999, "text": " we get the gradients of the thing, and now we can do optimizers", "tokens": [321, 483, 264, 2771, 2448, 295, 264, 551, 11, 293, 586, 321, 393, 360, 5028, 22525], "temperature": 0.0, "avg_logprob": -0.1397032566207776, "compression_ratio": 1.6723549488054608, "no_speech_prob": 4.005887603852898e-05}, {"id": 2579, "seek": 695436, "start": 6959.839999999999, "end": 6961.44, "text": " and apply the updates.", "tokens": [293, 3079, 264, 9205, 13], "temperature": 0.0, "avg_logprob": -0.1397032566207776, "compression_ratio": 1.6723549488054608, "no_speech_prob": 4.005887603852898e-05}, {"id": 2580, "seek": 695436, "start": 6961.44, "end": 6962.24, "text": " Now the-", "tokens": [823, 264, 12], "temperature": 0.0, "avg_logprob": -0.1397032566207776, "compression_ratio": 1.6723549488054608, "no_speech_prob": 4.005887603852898e-05}, {"id": 2581, "seek": 695436, "start": 6962.24, "end": 6964.04, "text": " Can I just mention, like what Chris was saying", "tokens": [1664, 286, 445, 2152, 11, 411, 437, 6688, 390, 1566], "temperature": 0.0, "avg_logprob": -0.1397032566207776, "compression_ratio": 1.6723549488054608, "no_speech_prob": 4.005887603852898e-05}, {"id": 2582, "seek": 695436, "start": 6964.04, "end": 6968.44, "text": " about this one thing here and so forth?", "tokens": [466, 341, 472, 551, 510, 293, 370, 5220, 30], "temperature": 0.0, "avg_logprob": -0.1397032566207776, "compression_ratio": 1.6723549488054608, "no_speech_prob": 4.005887603852898e-05}, {"id": 2583, "seek": 695436, "start": 6968.44, "end": 6973.96, "text": " For Chris and I, we took a really long time to get to this point,", "tokens": [1171, 6688, 293, 286, 11, 321, 1890, 257, 534, 938, 565, 281, 483, 281, 341, 935, 11], "temperature": 0.0, "avg_logprob": -0.1397032566207776, "compression_ratio": 1.6723549488054608, "no_speech_prob": 4.005887603852898e-05}, {"id": 2584, "seek": 695436, "start": 6973.96, "end": 6975.759999999999, "text": " and we found it extremely difficult.", "tokens": [293, 321, 1352, 309, 4664, 2252, 13], "temperature": 0.0, "avg_logprob": -0.1397032566207776, "compression_ratio": 1.6723549488054608, "no_speech_prob": 4.005887603852898e-05}, {"id": 2585, "seek": 695436, "start": 6975.759999999999, "end": 6978.32, "text": " And at every point up until the point where it was done,", "tokens": [400, 412, 633, 935, 493, 1826, 264, 935, 689, 309, 390, 1096, 11], "temperature": 0.0, "avg_logprob": -0.1397032566207776, "compression_ratio": 1.6723549488054608, "no_speech_prob": 4.005887603852898e-05}, {"id": 2586, "seek": 695436, "start": 6978.32, "end": 6981.16, "text": " we were totally sure we weren't smart enough to do it.", "tokens": [321, 645, 3879, 988, 321, 4999, 380, 4069, 1547, 281, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.1397032566207776, "compression_ratio": 1.6723549488054608, "no_speech_prob": 4.005887603852898e-05}, {"id": 2587, "seek": 695436, "start": 6981.16, "end": 6984.32, "text": " Yes. And so like, please don't worry", "tokens": [1079, 13, 400, 370, 411, 11, 1767, 500, 380, 3292], "temperature": 0.0, "avg_logprob": -0.1397032566207776, "compression_ratio": 1.6723549488054608, "no_speech_prob": 4.005887603852898e-05}, {"id": 2588, "seek": 698432, "start": 6984.32, "end": 6988.24, "text": " that there's a lot here, and that you might be feeling the same way", "tokens": [300, 456, 311, 257, 688, 510, 11, 293, 300, 291, 1062, 312, 2633, 264, 912, 636], "temperature": 0.0, "avg_logprob": -0.16643960925116055, "compression_ratio": 1.6363636363636365, "no_speech_prob": 1.982947469514329e-05}, {"id": 2589, "seek": 698432, "start": 6988.24, "end": 6991.96, "text": " Chris and I did, but yeah, you'll get there, right?", "tokens": [6688, 293, 286, 630, 11, 457, 1338, 11, 291, 603, 483, 456, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.16643960925116055, "compression_ratio": 1.6363636363636365, "no_speech_prob": 1.982947469514329e-05}, {"id": 2590, "seek": 698432, "start": 6991.96, "end": 6994.24, "text": " It's- This was a harrowing journey.", "tokens": [467, 311, 12, 639, 390, 257, 2233, 1892, 278, 4671, 13], "temperature": 0.0, "avg_logprob": -0.16643960925116055, "compression_ratio": 1.6363636363636365, "no_speech_prob": 1.982947469514329e-05}, {"id": 2591, "seek": 698432, "start": 6994.24, "end": 6998.24, "text": " Yeah. It's okay if this seems tricky, but just go", "tokens": [865, 13, 467, 311, 1392, 498, 341, 2544, 12414, 11, 457, 445, 352], "temperature": 0.0, "avg_logprob": -0.16643960925116055, "compression_ratio": 1.6363636363636365, "no_speech_prob": 1.982947469514329e-05}, {"id": 2592, "seek": 698432, "start": 6998.24, "end": 6999.48, "text": " through each step one at a time.", "tokens": [807, 1184, 1823, 472, 412, 257, 565, 13], "temperature": 0.0, "avg_logprob": -0.16643960925116055, "compression_ratio": 1.6363636363636365, "no_speech_prob": 1.982947469514329e-05}, {"id": 2593, "seek": 698432, "start": 6999.48, "end": 7001.2, "text": " Yeah, but so again, this is talking", "tokens": [865, 11, 457, 370, 797, 11, 341, 307, 1417], "temperature": 0.0, "avg_logprob": -0.16643960925116055, "compression_ratio": 1.6363636363636365, "no_speech_prob": 1.982947469514329e-05}, {"id": 2594, "seek": 698432, "start": 7001.2, "end": 7005.28, "text": " about the low-level mathy stuff that underlies calculus.", "tokens": [466, 264, 2295, 12, 12418, 5221, 88, 1507, 300, 833, 24119, 33400, 13], "temperature": 0.0, "avg_logprob": -0.16643960925116055, "compression_ratio": 1.6363636363636365, "no_speech_prob": 1.982947469514329e-05}, {"id": 2595, "seek": 698432, "start": 7005.28, "end": 7007.92, "text": " And so the cool thing about this, though,", "tokens": [400, 370, 264, 1627, 551, 466, 341, 11, 1673, 11], "temperature": 0.0, "avg_logprob": -0.16643960925116055, "compression_ratio": 1.6363636363636365, "no_speech_prob": 1.982947469514329e-05}, {"id": 2596, "seek": 698432, "start": 7007.92, "end": 7010.92, "text": " from the SWIFT perspective is this is mechanical.", "tokens": [490, 264, 20346, 12775, 51, 4585, 307, 341, 307, 12070, 13], "temperature": 0.0, "avg_logprob": -0.16643960925116055, "compression_ratio": 1.6363636363636365, "no_speech_prob": 1.982947469514329e-05}, {"id": 2597, "seek": 698432, "start": 7010.92, "end": 7012.88, "text": " And compilers are good at mechanical things.", "tokens": [400, 715, 388, 433, 366, 665, 412, 12070, 721, 13], "temperature": 0.0, "avg_logprob": -0.16643960925116055, "compression_ratio": 1.6363636363636365, "no_speech_prob": 1.982947469514329e-05}, {"id": 2598, "seek": 701288, "start": 7012.88, "end": 7016.12, "text": " And so one of the things that we've talked about a lot", "tokens": [400, 370, 472, 295, 264, 721, 300, 321, 600, 2825, 466, 257, 688], "temperature": 0.0, "avg_logprob": -0.10899248123168945, "compression_ratio": 2.0928270042194095, "no_speech_prob": 9.972083717002533e-06}, {"id": 2599, "seek": 701288, "start": 7016.12, "end": 7020.24, "text": " in this course is the idea of their primitives.", "tokens": [294, 341, 1164, 307, 264, 1558, 295, 641, 2886, 38970, 13], "temperature": 0.0, "avg_logprob": -0.10899248123168945, "compression_ratio": 2.0928270042194095, "no_speech_prob": 9.972083717002533e-06}, {"id": 2600, "seek": 701288, "start": 7020.24, "end": 7021.4800000000005, "text": " They're the atoms of the universe,", "tokens": [814, 434, 264, 16871, 295, 264, 6445, 11], "temperature": 0.0, "avg_logprob": -0.10899248123168945, "compression_ratio": 2.0928270042194095, "no_speech_prob": 9.972083717002533e-06}, {"id": 2601, "seek": 701288, "start": 7021.4800000000005, "end": 7023.0, "text": " and then they're the things you build out of them.", "tokens": [293, 550, 436, 434, 264, 721, 291, 1322, 484, 295, 552, 13], "temperature": 0.0, "avg_logprob": -0.10899248123168945, "compression_ratio": 2.0928270042194095, "no_speech_prob": 9.972083717002533e-06}, {"id": 2602, "seek": 701288, "start": 7023.0, "end": 7025.56, "text": " And so the atoms of the universe for tensor, the atoms of the universe", "tokens": [400, 370, 264, 16871, 295, 264, 6445, 337, 40863, 11, 264, 16871, 295, 264, 6445], "temperature": 0.0, "avg_logprob": -0.10899248123168945, "compression_ratio": 2.0928270042194095, "no_speech_prob": 9.972083717002533e-06}, {"id": 2603, "seek": 701288, "start": 7025.56, "end": 7027.64, "text": " for float, we've seen, right?", "tokens": [337, 15706, 11, 321, 600, 1612, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.10899248123168945, "compression_ratio": 2.0928270042194095, "no_speech_prob": 9.972083717002533e-06}, {"id": 2604, "seek": 701288, "start": 7027.64, "end": 7031.24, "text": " And so we've seen multiply, and we've seen add on floats.", "tokens": [400, 370, 321, 600, 1612, 12972, 11, 293, 321, 600, 1612, 909, 322, 37878, 13], "temperature": 0.0, "avg_logprob": -0.10899248123168945, "compression_ratio": 2.0928270042194095, "no_speech_prob": 9.972083717002533e-06}, {"id": 2605, "seek": 701288, "start": 7031.24, "end": 7033.52, "text": " Well, if you look at the primitives of the universe", "tokens": [1042, 11, 498, 291, 574, 412, 264, 2886, 38970, 295, 264, 6445], "temperature": 0.0, "avg_logprob": -0.10899248123168945, "compression_ratio": 2.0928270042194095, "no_speech_prob": 9.972083717002533e-06}, {"id": 2606, "seek": 701288, "start": 7033.52, "end": 7036.28, "text": " for tensor, they're just methods, and they call the raw ops", "tokens": [337, 40863, 11, 436, 434, 445, 7150, 11, 293, 436, 818, 264, 8936, 44663], "temperature": 0.0, "avg_logprob": -0.10899248123168945, "compression_ratio": 2.0928270042194095, "no_speech_prob": 9.972083717002533e-06}, {"id": 2607, "seek": 701288, "start": 7036.28, "end": 7038.08, "text": " that we showed you last time, right?", "tokens": [300, 321, 4712, 291, 1036, 565, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.10899248123168945, "compression_ratio": 2.0928270042194095, "no_speech_prob": 9.972083717002533e-06}, {"id": 2608, "seek": 703808, "start": 7038.08, "end": 7043.28, "text": " And so if you go look at the TensorFlow APIs,", "tokens": [400, 370, 498, 291, 352, 574, 412, 264, 37624, 21445, 11], "temperature": 0.0, "avg_logprob": -0.14272838342385213, "compression_ratio": 1.6492537313432836, "no_speech_prob": 6.643060260103084e-06}, {"id": 2609, "seek": 703808, "start": 7043.28, "end": 7047.76, "text": " what you'll see is those atoms have this thing that SWIFT calls them", "tokens": [437, 291, 603, 536, 307, 729, 16871, 362, 341, 551, 300, 20346, 12775, 51, 5498, 552], "temperature": 0.0, "avg_logprob": -0.14272838342385213, "compression_ratio": 1.6492537313432836, "no_speech_prob": 6.643060260103084e-06}, {"id": 2610, "seek": 703808, "start": 7047.76, "end": 7049.88, "text": " VJPs for weird reasons.", "tokens": [691, 41, 23043, 337, 3657, 4112, 13], "temperature": 0.0, "avg_logprob": -0.14272838342385213, "compression_ratio": 1.6492537313432836, "no_speech_prob": 6.643060260103084e-06}, {"id": 2611, "seek": 703808, "start": 7049.88, "end": 7054.5199999999995, "text": " This defines exactly the mechanical thingy that we showed you.", "tokens": [639, 23122, 2293, 264, 12070, 551, 88, 300, 321, 4712, 291, 13], "temperature": 0.0, "avg_logprob": -0.14272838342385213, "compression_ratio": 1.6492537313432836, "no_speech_prob": 6.643060260103084e-06}, {"id": 2612, "seek": 703808, "start": 7054.5199999999995, "end": 7057.48, "text": " And so the atoms know what their derivatives are,", "tokens": [400, 370, 264, 16871, 458, 437, 641, 33733, 366, 11], "temperature": 0.0, "avg_logprob": -0.14272838342385213, "compression_ratio": 1.6492537313432836, "no_speech_prob": 6.643060260103084e-06}, {"id": 2613, "seek": 703808, "start": 7057.48, "end": 7060.5599999999995, "text": " and the compiler doesn't have to know about the atoms, but that means", "tokens": [293, 264, 31958, 1177, 380, 362, 281, 458, 466, 264, 16871, 11, 457, 300, 1355], "temperature": 0.0, "avg_logprob": -0.14272838342385213, "compression_ratio": 1.6492537313432836, "no_speech_prob": 6.643060260103084e-06}, {"id": 2614, "seek": 703808, "start": 7060.5599999999995, "end": 7063.04, "text": " that if you want to, you can introduce new atoms.", "tokens": [300, 498, 291, 528, 281, 11, 291, 393, 5366, 777, 16871, 13], "temperature": 0.0, "avg_logprob": -0.14272838342385213, "compression_ratio": 1.6492537313432836, "no_speech_prob": 6.643060260103084e-06}, {"id": 2615, "seek": 703808, "start": 7063.04, "end": 7064.32, "text": " That's fine.", "tokens": [663, 311, 2489, 13], "temperature": 0.0, "avg_logprob": -0.14272838342385213, "compression_ratio": 1.6492537313432836, "no_speech_prob": 6.643060260103084e-06}, {"id": 2616, "seek": 703808, "start": 7064.32, "end": 7067.64, "text": " The payoff of this now, though, is you don't have to deal", "tokens": [440, 46547, 295, 341, 586, 11, 1673, 11, 307, 291, 500, 380, 362, 281, 2028], "temperature": 0.0, "avg_logprob": -0.14272838342385213, "compression_ratio": 1.6492537313432836, "no_speech_prob": 6.643060260103084e-06}, {"id": 2617, "seek": 706764, "start": 7067.64, "end": 7070.92, "text": " with any of this stuff, so that's the upshot.", "tokens": [365, 604, 295, 341, 1507, 11, 370, 300, 311, 264, 493, 18402, 13], "temperature": 0.0, "avg_logprob": -0.1278519770678352, "compression_ratio": 1.7326007326007327, "no_speech_prob": 6.502386531792581e-05}, {"id": 2618, "seek": 706764, "start": 7070.92, "end": 7073.160000000001, "text": " What I can do is I can define a function.", "tokens": [708, 286, 393, 360, 307, 286, 393, 6964, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.1278519770678352, "compression_ratio": 1.7326007326007327, "no_speech_prob": 6.502386531792581e-05}, {"id": 2619, "seek": 706764, "start": 7073.160000000001, "end": 7078.04, "text": " So here's MSC inner, and it just does dot squared dot mean,", "tokens": [407, 510, 311, 7395, 34, 7284, 11, 293, 309, 445, 775, 5893, 8889, 5893, 914, 11], "temperature": 0.0, "avg_logprob": -0.1278519770678352, "compression_ratio": 1.7326007326007327, "no_speech_prob": 6.502386531792581e-05}, {"id": 2620, "seek": 706764, "start": 7078.04, "end": 7083.08, "text": " and I say make it differentiable, and I can actually get that weird thing,", "tokens": [293, 286, 584, 652, 309, 819, 9364, 11, 293, 286, 393, 767, 483, 300, 3657, 551, 11], "temperature": 0.0, "avg_logprob": -0.1278519770678352, "compression_ratio": 1.7326007326007327, "no_speech_prob": 6.502386531792581e-05}, {"id": 2621, "seek": 706764, "start": 7083.08, "end": 7087.68, "text": " that chainer thing, directly out of it, and I can get direct low-level access", "tokens": [300, 5021, 260, 551, 11, 3838, 484, 295, 309, 11, 293, 286, 393, 483, 2047, 2295, 12, 12418, 2105], "temperature": 0.0, "avg_logprob": -0.1278519770678352, "compression_ratio": 1.7326007326007327, "no_speech_prob": 6.502386531792581e-05}, {"id": 2622, "seek": 706764, "start": 7087.68, "end": 7090.52, "text": " if for some reason I ever wanted to.", "tokens": [498, 337, 512, 1778, 286, 1562, 1415, 281, 13], "temperature": 0.0, "avg_logprob": -0.1278519770678352, "compression_ratio": 1.7326007326007327, "no_speech_prob": 6.502386531792581e-05}, {"id": 2623, "seek": 706764, "start": 7090.52, "end": 7093.240000000001, "text": " Generally, you don't, and that's why you say give me the gradient,", "tokens": [21082, 11, 291, 500, 380, 11, 293, 300, 311, 983, 291, 584, 976, 385, 264, 16235, 11], "temperature": 0.0, "avg_logprob": -0.1278519770678352, "compression_ratio": 1.7326007326007327, "no_speech_prob": 6.502386531792581e-05}, {"id": 2624, "seek": 706764, "start": 7093.240000000001, "end": 7097.4800000000005, "text": " or give me the value and the gradient, and so this stuff just works.", "tokens": [420, 976, 385, 264, 2158, 293, 264, 16235, 11, 293, 370, 341, 1507, 445, 1985, 13], "temperature": 0.0, "avg_logprob": -0.1278519770678352, "compression_ratio": 1.7326007326007327, "no_speech_prob": 6.502386531792581e-05}, {"id": 2625, "seek": 709748, "start": 7097.48, "end": 7100.08, "text": " And the cool thing about this is this all stacks", "tokens": [400, 264, 1627, 551, 466, 341, 307, 341, 439, 30792], "temperature": 0.0, "avg_logprob": -0.10085508728027344, "compression_ratio": 1.6226415094339623, "no_speech_prob": 2.354640673729591e-05}, {"id": 2626, "seek": 709748, "start": 7100.08, "end": 7104.36, "text": " up from very simple things, and it composes in a very nice way.", "tokens": [493, 490, 588, 2199, 721, 11, 293, 309, 715, 4201, 294, 257, 588, 1481, 636, 13], "temperature": 0.0, "avg_logprob": -0.10085508728027344, "compression_ratio": 1.6226415094339623, "no_speech_prob": 2.354640673729591e-05}, {"id": 2627, "seek": 709748, "start": 7104.36, "end": 7108.759999999999, "text": " And if you want to, you can now go hack up the internals of the system", "tokens": [400, 498, 291, 528, 281, 11, 291, 393, 586, 352, 10339, 493, 264, 2154, 1124, 295, 264, 1185], "temperature": 0.0, "avg_logprob": -0.10085508728027344, "compression_ratio": 1.6226415094339623, "no_speech_prob": 2.354640673729591e-05}, {"id": 2628, "seek": 709748, "start": 7108.759999999999, "end": 7112.2, "text": " and play around with the guts, and it's exposed and open for you.", "tokens": [293, 862, 926, 365, 264, 28560, 11, 293, 309, 311, 9495, 293, 1269, 337, 291, 13], "temperature": 0.0, "avg_logprob": -0.10085508728027344, "compression_ratio": 1.6226415094339623, "no_speech_prob": 2.354640673729591e-05}, {"id": 2629, "seek": 709748, "start": 7112.2, "end": 7115.5199999999995, "text": " But if you're like me, at least, you would stay away from it", "tokens": [583, 498, 291, 434, 411, 385, 11, 412, 1935, 11, 291, 576, 1754, 1314, 490, 309], "temperature": 0.0, "avg_logprob": -0.10085508728027344, "compression_ratio": 1.6226415094339623, "no_speech_prob": 2.354640673729591e-05}, {"id": 2630, "seek": 709748, "start": 7115.5199999999995, "end": 7116.799999999999, "text": " and just write math.", "tokens": [293, 445, 2464, 5221, 13], "temperature": 0.0, "avg_logprob": -0.10085508728027344, "compression_ratio": 1.6226415094339623, "no_speech_prob": 2.354640673729591e-05}, {"id": 2631, "seek": 709748, "start": 7116.799999999999, "end": 7118.2, "text": " Well, I mean, sometimes we do need it, right?", "tokens": [1042, 11, 286, 914, 11, 2171, 321, 360, 643, 309, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.10085508728027344, "compression_ratio": 1.6226415094339623, "no_speech_prob": 2.354640673729591e-05}, {"id": 2632, "seek": 709748, "start": 7118.2, "end": 7124.2, "text": " So you'll remember when we did the heat maps, right,", "tokens": [407, 291, 603, 1604, 562, 321, 630, 264, 3738, 11317, 11, 558, 11], "temperature": 0.0, "avg_logprob": -0.10085508728027344, "compression_ratio": 1.6226415094339623, "no_speech_prob": 2.354640673729591e-05}, {"id": 2633, "seek": 712420, "start": 7124.2, "end": 7127.599999999999, "text": " to calculate those heat maps, we actually had to dive into the,", "tokens": [281, 8873, 729, 3738, 11317, 11, 321, 767, 632, 281, 9192, 666, 264, 11], "temperature": 0.0, "avg_logprob": -0.13534871419270833, "compression_ratio": 1.7278481012658229, "no_speech_prob": 3.1200364901451394e-05}, {"id": 2634, "seek": 712420, "start": 7127.599999999999, "end": 7131.76, "text": " you know, registering a backward callback in PyTorch", "tokens": [291, 458, 11, 47329, 257, 23897, 818, 3207, 294, 9953, 51, 284, 339], "temperature": 0.0, "avg_logprob": -0.13534871419270833, "compression_ratio": 1.7278481012658229, "no_speech_prob": 3.1200364901451394e-05}, {"id": 2635, "seek": 712420, "start": 7131.76, "end": 7134.96, "text": " and grab the gradients and then use those in our calculations.", "tokens": [293, 4444, 264, 2771, 2448, 293, 550, 764, 729, 294, 527, 20448, 13], "temperature": 0.0, "avg_logprob": -0.13534871419270833, "compression_ratio": 1.7278481012658229, "no_speech_prob": 3.1200364901451394e-05}, {"id": 2636, "seek": 712420, "start": 7134.96, "end": 7136.76, "text": " And so, you know, there's plenty of stuff we come", "tokens": [400, 370, 11, 291, 458, 11, 456, 311, 7140, 295, 1507, 321, 808], "temperature": 0.0, "avg_logprob": -0.13534871419270833, "compression_ratio": 1.7278481012658229, "no_speech_prob": 3.1200364901451394e-05}, {"id": 2637, "seek": 712420, "start": 7136.76, "end": 7139.08, "text": " across where you actually need to work with this.", "tokens": [2108, 689, 291, 767, 643, 281, 589, 365, 341, 13], "temperature": 0.0, "avg_logprob": -0.13534871419270833, "compression_ratio": 1.7278481012658229, "no_speech_prob": 3.1200364901451394e-05}, {"id": 2638, "seek": 712420, "start": 7139.08, "end": 7141.72, "text": " Yeah, and there are some really cool things you can do, too.", "tokens": [865, 11, 293, 456, 366, 512, 534, 1627, 721, 291, 393, 360, 11, 886, 13], "temperature": 0.0, "avg_logprob": -0.13534871419270833, "compression_ratio": 1.7278481012658229, "no_speech_prob": 3.1200364901451394e-05}, {"id": 2639, "seek": 712420, "start": 7141.72, "end": 7146.16, "text": " So now let's, we ended up with a model, and so this is something", "tokens": [407, 586, 718, 311, 11, 321, 4590, 493, 365, 257, 2316, 11, 293, 370, 341, 307, 746], "temperature": 0.0, "avg_logprob": -0.13534871419270833, "compression_ratio": 1.7278481012658229, "no_speech_prob": 3.1200364901451394e-05}, {"id": 2640, "seek": 712420, "start": 7146.16, "end": 7149.36, "text": " that I never got around to doing with FixMe.", "tokens": [300, 286, 1128, 658, 926, 281, 884, 365, 25538, 12671, 13], "temperature": 0.0, "avg_logprob": -0.13534871419270833, "compression_ratio": 1.7278481012658229, "no_speech_prob": 3.1200364901451394e-05}, {"id": 2641, "seek": 712420, "start": 7149.36, "end": 7150.679999999999, "text": " So here's our Ford function.", "tokens": [407, 510, 311, 527, 11961, 2445, 13], "temperature": 0.0, "avg_logprob": -0.13534871419270833, "compression_ratio": 1.7278481012658229, "no_speech_prob": 3.1200364901451394e-05}, {"id": 2642, "seek": 712420, "start": 7150.679999999999, "end": 7153.32, "text": " Here we're implementing it with MatMols and with the Lin function,", "tokens": [1692, 321, 434, 18114, 309, 365, 6789, 44, 19385, 293, 365, 264, 9355, 2445, 11], "temperature": 0.0, "avg_logprob": -0.13534871419270833, "compression_ratio": 1.7278481012658229, "no_speech_prob": 3.1200364901451394e-05}, {"id": 2643, "seek": 715332, "start": 7153.32, "end": 7155.16, "text": " the ReLUs and things like that.", "tokens": [264, 1300, 43, 29211, 293, 721, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.12412495644676765, "compression_ratio": 1.8516129032258064, "no_speech_prob": 1.6441592379123904e-05}, {"id": 2644, "seek": 715332, "start": 7155.16, "end": 7158.599999999999, "text": " The bad thing about defining a Ford function like this is you get tons", "tokens": [440, 1578, 551, 466, 17827, 257, 11961, 2445, 411, 341, 307, 291, 483, 9131], "temperature": 0.0, "avg_logprob": -0.12412495644676765, "compression_ratio": 1.8516129032258064, "no_speech_prob": 1.6441592379123904e-05}, {"id": 2645, "seek": 715332, "start": 7158.599999999999, "end": 7161.84, "text": " of arguments to your function, and so some of these arguments are things", "tokens": [295, 12869, 281, 428, 2445, 11, 293, 370, 512, 295, 613, 12869, 366, 721], "temperature": 0.0, "avg_logprob": -0.12412495644676765, "compression_ratio": 1.8516129032258064, "no_speech_prob": 1.6441592379123904e-05}, {"id": 2646, "seek": 715332, "start": 7161.84, "end": 7163.16, "text": " that you want to feed into the model.", "tokens": [300, 291, 528, 281, 3154, 666, 264, 2316, 13], "temperature": 0.0, "avg_logprob": -0.12412495644676765, "compression_ratio": 1.8516129032258064, "no_speech_prob": 1.6441592379123904e-05}, {"id": 2647, "seek": 715332, "start": 7163.16, "end": 7165.12, "text": " Some of these things are parameters.", "tokens": [2188, 295, 613, 721, 366, 9834, 13], "temperature": 0.0, "avg_logprob": -0.12412495644676765, "compression_ratio": 1.8516129032258064, "no_speech_prob": 1.6441592379123904e-05}, {"id": 2648, "seek": 715332, "start": 7165.12, "end": 7168.679999999999, "text": " And so as we're refactoring, what we can do is we can introduce a struct,", "tokens": [400, 370, 382, 321, 434, 1895, 578, 3662, 11, 437, 321, 393, 360, 307, 321, 393, 5366, 257, 6594, 11], "temperature": 0.0, "avg_logprob": -0.12412495644676765, "compression_ratio": 1.8516129032258064, "no_speech_prob": 1.6441592379123904e-05}, {"id": 2649, "seek": 715332, "start": 7168.679999999999, "end": 7171.48, "text": " you might be surprised, that puts all of our parameters into it.", "tokens": [291, 1062, 312, 6100, 11, 300, 8137, 439, 295, 527, 9834, 666, 309, 13], "temperature": 0.0, "avg_logprob": -0.12412495644676765, "compression_ratio": 1.8516129032258064, "no_speech_prob": 1.6441592379123904e-05}, {"id": 2650, "seek": 715332, "start": 7171.48, "end": 7174.84, "text": " And so here we have my model, and we're saying it is differentiable.", "tokens": [400, 370, 510, 321, 362, 452, 2316, 11, 293, 321, 434, 1566, 309, 307, 819, 9364, 13], "temperature": 0.0, "avg_logprob": -0.12412495644676765, "compression_ratio": 1.8516129032258064, "no_speech_prob": 1.6441592379123904e-05}, {"id": 2651, "seek": 715332, "start": 7174.84, "end": 7177.2, "text": " And what differentiable means is it has a whole bunch", "tokens": [400, 437, 819, 9364, 1355, 307, 309, 575, 257, 1379, 3840], "temperature": 0.0, "avg_logprob": -0.12412495644676765, "compression_ratio": 1.8516129032258064, "no_speech_prob": 1.6441592379123904e-05}, {"id": 2652, "seek": 715332, "start": 7177.2, "end": 7180.88, "text": " of floating point stuff in it, and I want to get the gradient", "tokens": [295, 12607, 935, 1507, 294, 309, 11, 293, 286, 528, 281, 483, 264, 16235], "temperature": 0.0, "avg_logprob": -0.12412495644676765, "compression_ratio": 1.8516129032258064, "no_speech_prob": 1.6441592379123904e-05}, {"id": 2653, "seek": 718088, "start": 7180.88, "end": 7183.28, "text": " with respect to all of these.", "tokens": [365, 3104, 281, 439, 295, 613, 13], "temperature": 0.0, "avg_logprob": -0.15775874257087708, "compression_ratio": 1.676923076923077, "no_speech_prob": 2.1444022422656417e-05}, {"id": 2654, "seek": 718088, "start": 7183.28, "end": 7187.6, "text": " Okay? So now I can shove all those arguments into the struct.", "tokens": [1033, 30, 407, 586, 286, 393, 35648, 439, 729, 12869, 666, 264, 6594, 13], "temperature": 0.0, "avg_logprob": -0.15775874257087708, "compression_ratio": 1.676923076923077, "no_speech_prob": 2.1444022422656417e-05}, {"id": 2655, "seek": 718088, "start": 7187.6, "end": 7189.56, "text": " It gives me a nice capsule to deal with.", "tokens": [467, 2709, 385, 257, 1481, 29247, 281, 2028, 365, 13], "temperature": 0.0, "avg_logprob": -0.15775874257087708, "compression_ratio": 1.676923076923077, "no_speech_prob": 2.1444022422656417e-05}, {"id": 2656, "seek": 718088, "start": 7189.56, "end": 7193.12, "text": " And now I can use the Ford function on my model.", "tokens": [400, 586, 286, 393, 764, 264, 11961, 2445, 322, 452, 2316, 13], "temperature": 0.0, "avg_logprob": -0.15775874257087708, "compression_ratio": 1.676923076923077, "no_speech_prob": 2.1444022422656417e-05}, {"id": 2657, "seek": 718088, "start": 7193.12, "end": 7194.68, "text": " I can declare it as a method.", "tokens": [286, 393, 19710, 309, 382, 257, 3170, 13], "temperature": 0.0, "avg_logprob": -0.15775874257087708, "compression_ratio": 1.676923076923077, "no_speech_prob": 2.1444022422656417e-05}, {"id": 2658, "seek": 718088, "start": 7194.68, "end": 7196.0, "text": " This is starting to look nicer.", "tokens": [639, 307, 2891, 281, 574, 22842, 13], "temperature": 0.0, "avg_logprob": -0.15775874257087708, "compression_ratio": 1.676923076923077, "no_speech_prob": 2.1444022422656417e-05}, {"id": 2659, "seek": 718088, "start": 7196.0, "end": 7197.28, "text": " This is more familiar.", "tokens": [639, 307, 544, 4963, 13], "temperature": 0.0, "avg_logprob": -0.15775874257087708, "compression_ratio": 1.676923076923077, "no_speech_prob": 2.1444022422656417e-05}, {"id": 2660, "seek": 718088, "start": 7197.28, "end": 7200.2, "text": " And I can just do math, and I can use W1 and B1,", "tokens": [400, 286, 393, 445, 360, 5221, 11, 293, 286, 393, 764, 343, 16, 293, 363, 16, 11], "temperature": 0.0, "avg_logprob": -0.15775874257087708, "compression_ratio": 1.676923076923077, "no_speech_prob": 2.1444022422656417e-05}, {"id": 2661, "seek": 718088, "start": 7200.2, "end": 7203.68, "text": " and these are just values defined on our struct.", "tokens": [293, 613, 366, 445, 4190, 7642, 322, 527, 6594, 13], "temperature": 0.0, "avg_logprob": -0.15775874257087708, "compression_ratio": 1.676923076923077, "no_speech_prob": 2.1444022422656417e-05}, {"id": 2662, "seek": 718088, "start": 7203.68, "end": 7208.24, "text": " Now I can get the gradient with respect to the whole model in our loss.", "tokens": [823, 286, 393, 483, 264, 16235, 365, 3104, 281, 264, 1379, 2316, 294, 527, 4470, 13], "temperature": 0.0, "avg_logprob": -0.15775874257087708, "compression_ratio": 1.676923076923077, "no_speech_prob": 2.1444022422656417e-05}, {"id": 2663, "seek": 720824, "start": 7208.24, "end": 7212.76, "text": " Right? And all of this is building up on top of all those different primitives", "tokens": [1779, 30, 400, 439, 295, 341, 307, 2390, 493, 322, 1192, 295, 439, 729, 819, 2886, 38970], "temperature": 0.0, "avg_logprob": -0.10457537556422576, "compression_ratio": 1.652014652014652, "no_speech_prob": 4.092815743206302e-06}, {"id": 2664, "seek": 720824, "start": 7212.76, "end": 7217.88, "text": " that we saw before that we, and the chain rule and all these things.", "tokens": [300, 321, 1866, 949, 300, 321, 11, 293, 264, 5021, 4978, 293, 439, 613, 721, 13], "temperature": 0.0, "avg_logprob": -0.10457537556422576, "compression_ratio": 1.652014652014652, "no_speech_prob": 4.092815743206302e-06}, {"id": 2665, "seek": 720824, "start": 7217.88, "end": 7223.04, "text": " Then now we can say, hey, give us the gradient of the model with respect", "tokens": [1396, 586, 321, 393, 584, 11, 4177, 11, 976, 505, 264, 16235, 295, 264, 2316, 365, 3104], "temperature": 0.0, "avg_logprob": -0.10457537556422576, "compression_ratio": 1.652014652014652, "no_speech_prob": 4.092815743206302e-06}, {"id": 2666, "seek": 720824, "start": 7223.04, "end": 7228.599999999999, "text": " to X train and Y train, and we get all the gradients of W1, B1, W2, B2.", "tokens": [281, 1783, 3847, 293, 398, 3847, 11, 293, 321, 483, 439, 264, 2771, 2448, 295, 343, 16, 11, 363, 16, 11, 343, 17, 11, 363, 17, 13], "temperature": 0.0, "avg_logprob": -0.10457537556422576, "compression_ratio": 1.652014652014652, "no_speech_prob": 4.092815743206302e-06}, {"id": 2667, "seek": 720824, "start": 7228.599999999999, "end": 7229.88, "text": " And all this stuff works.", "tokens": [400, 439, 341, 1507, 1985, 13], "temperature": 0.0, "avg_logprob": -0.10457537556422576, "compression_ratio": 1.652014652014652, "no_speech_prob": 4.092815743206302e-06}, {"id": 2668, "seek": 720824, "start": 7229.88, "end": 7233.12, "text": " You can see it all calling the little functions that we wrote,", "tokens": [509, 393, 536, 309, 439, 5141, 264, 707, 6828, 300, 321, 4114, 11], "temperature": 0.0, "avg_logprob": -0.10457537556422576, "compression_ratio": 1.652014652014652, "no_speech_prob": 4.092815743206302e-06}, {"id": 2669, "seek": 720824, "start": 7233.12, "end": 7235.5199999999995, "text": " and it's all pretty fast.", "tokens": [293, 309, 311, 439, 1238, 2370, 13], "temperature": 0.0, "avg_logprob": -0.10457537556422576, "compression_ratio": 1.652014652014652, "no_speech_prob": 4.092815743206302e-06}, {"id": 2670, "seek": 720824, "start": 7235.5199999999995, "end": 7237.32, "text": " Now again, like we were just talking about,", "tokens": [823, 797, 11, 411, 321, 645, 445, 1417, 466, 11], "temperature": 0.0, "avg_logprob": -0.10457537556422576, "compression_ratio": 1.652014652014652, "no_speech_prob": 4.092815743206302e-06}, {"id": 2671, "seek": 723732, "start": 7237.32, "end": 7241.639999999999, "text": " this is not something you should do for MatMul or convolution,", "tokens": [341, 307, 406, 746, 291, 820, 360, 337, 6789, 44, 425, 420, 45216, 11], "temperature": 0.0, "avg_logprob": -0.13744704667911972, "compression_ratio": 1.7937062937062938, "no_speech_prob": 9.080142262973823e-06}, {"id": 2672, "seek": 723732, "start": 7241.639999999999, "end": 7243.759999999999, "text": " but there are reasons why this is cool.", "tokens": [457, 456, 366, 4112, 983, 341, 307, 1627, 13], "temperature": 0.0, "avg_logprob": -0.13744704667911972, "compression_ratio": 1.7937062937062938, "no_speech_prob": 9.080142262973823e-06}, {"id": 2673, "seek": 723732, "start": 7243.759999999999, "end": 7247.36, "text": " And so there are good reasons, and there are annoying reasons, I guess.", "tokens": [400, 370, 456, 366, 665, 4112, 11, 293, 456, 366, 11304, 4112, 11, 286, 2041, 13], "temperature": 0.0, "avg_logprob": -0.13744704667911972, "compression_ratio": 1.7937062937062938, "no_speech_prob": 9.080142262973823e-06}, {"id": 2674, "seek": 723732, "start": 7247.36, "end": 7252.2, "text": " So sometimes the gradients you get out of any autodiff system will be slow,", "tokens": [407, 2171, 264, 2771, 2448, 291, 483, 484, 295, 604, 1476, 378, 3661, 1185, 486, 312, 2964, 11], "temperature": 0.0, "avg_logprob": -0.13744704667911972, "compression_ratio": 1.7937062937062938, "no_speech_prob": 9.080142262973823e-06}, {"id": 2675, "seek": 723732, "start": 7252.2, "end": 7257.44, "text": " because you do a ton of computation, and it turns out the gradient ends", "tokens": [570, 291, 360, 257, 2952, 295, 24903, 11, 293, 309, 4523, 484, 264, 16235, 5314], "temperature": 0.0, "avg_logprob": -0.13744704667911972, "compression_ratio": 1.7937062937062938, "no_speech_prob": 9.080142262973823e-06}, {"id": 2676, "seek": 723732, "start": 7257.44, "end": 7260.679999999999, "text": " up being more complicated, and sometimes you want to do an approximation.", "tokens": [493, 885, 544, 6179, 11, 293, 2171, 291, 528, 281, 360, 364, 28023, 13], "temperature": 0.0, "avg_logprob": -0.13744704667911972, "compression_ratio": 1.7937062937062938, "no_speech_prob": 9.080142262973823e-06}, {"id": 2677, "seek": 723732, "start": 7260.679999999999, "end": 7262.719999999999, "text": " And so it's actually really nice that you can say, hey,", "tokens": [400, 370, 309, 311, 767, 534, 1481, 300, 291, 393, 584, 11, 4177, 11], "temperature": 0.0, "avg_logprob": -0.13744704667911972, "compression_ratio": 1.7937062937062938, "no_speech_prob": 9.080142262973823e-06}, {"id": 2678, "seek": 723732, "start": 7262.719999999999, "end": 7265.16, "text": " here's the Ford version of this big complicated computation.", "tokens": [510, 311, 264, 11961, 3037, 295, 341, 955, 6179, 24903, 13], "temperature": 0.0, "avg_logprob": -0.13744704667911972, "compression_ratio": 1.7937062937062938, "no_speech_prob": 9.080142262973823e-06}, {"id": 2679, "seek": 726516, "start": 7265.16, "end": 7268.08, "text": " I'm going to have an approximation that just runs faster.", "tokens": [286, 478, 516, 281, 362, 364, 28023, 300, 445, 6676, 4663, 13], "temperature": 0.0, "avg_logprob": -0.09870014027652578, "compression_ratio": 1.6666666666666667, "no_speech_prob": 3.7264585444063414e-06}, {"id": 2680, "seek": 726516, "start": 7268.08, "end": 7270.72, "text": " Sometimes you'll get numerical instabilities in your gradients,", "tokens": [4803, 291, 603, 483, 29054, 1058, 6167, 294, 428, 2771, 2448, 11], "temperature": 0.0, "avg_logprob": -0.09870014027652578, "compression_ratio": 1.6666666666666667, "no_speech_prob": 3.7264585444063414e-06}, {"id": 2681, "seek": 726516, "start": 7270.72, "end": 7273.16, "text": " and so you can define, again, a different implementation", "tokens": [293, 370, 291, 393, 6964, 11, 797, 11, 257, 819, 11420], "temperature": 0.0, "avg_logprob": -0.09870014027652578, "compression_ratio": 1.6666666666666667, "no_speech_prob": 3.7264585444063414e-06}, {"id": 2682, "seek": 726516, "start": 7273.16, "end": 7278.24, "text": " of the backwards pass, which can be useful for exotic cases.", "tokens": [295, 264, 12204, 1320, 11, 597, 393, 312, 4420, 337, 27063, 3331, 13], "temperature": 0.0, "avg_logprob": -0.09870014027652578, "compression_ratio": 1.6666666666666667, "no_speech_prob": 3.7264585444063414e-06}, {"id": 2683, "seek": 726516, "start": 7278.24, "end": 7281.32, "text": " There are some people on the far research side of things that want to use", "tokens": [821, 366, 512, 561, 322, 264, 1400, 2132, 1252, 295, 721, 300, 528, 281, 764], "temperature": 0.0, "avg_logprob": -0.09870014027652578, "compression_ratio": 1.6666666666666667, "no_speech_prob": 3.7264585444063414e-06}, {"id": 2684, "seek": 726516, "start": 7281.32, "end": 7285.24, "text": " like learning and things like that to learn gradients, which is cool.", "tokens": [411, 2539, 293, 721, 411, 300, 281, 1466, 2771, 2448, 11, 597, 307, 1627, 13], "temperature": 0.0, "avg_logprob": -0.09870014027652578, "compression_ratio": 1.6666666666666667, "no_speech_prob": 3.7264585444063414e-06}, {"id": 2685, "seek": 726516, "start": 7285.24, "end": 7288.88, "text": " And so having the system where everything is just simple and composes", "tokens": [400, 370, 1419, 264, 1185, 689, 1203, 307, 445, 2199, 293, 715, 4201], "temperature": 0.0, "avg_logprob": -0.09870014027652578, "compression_ratio": 1.6666666666666667, "no_speech_prob": 3.7264585444063414e-06}, {"id": 2686, "seek": 726516, "start": 7288.88, "end": 7291.12, "text": " but is hackable is really nice.", "tokens": [457, 307, 10339, 712, 307, 534, 1481, 13], "temperature": 0.0, "avg_logprob": -0.09870014027652578, "compression_ratio": 1.6666666666666667, "no_speech_prob": 3.7264585444063414e-06}, {"id": 2687, "seek": 729112, "start": 7291.12, "end": 7295.5599999999995, "text": " There are also always going to be limitations of the system.", "tokens": [821, 366, 611, 1009, 516, 281, 312, 15705, 295, 264, 1185, 13], "temperature": 0.0, "avg_logprob": -0.13909429662367878, "compression_ratio": 1.607843137254902, "no_speech_prob": 5.682210485247197e-06}, {"id": 2688, "seek": 729112, "start": 7295.5599999999995, "end": 7298.4, "text": " Now, one of the limitations that we currently have today,", "tokens": [823, 11, 472, 295, 264, 15705, 300, 321, 4362, 362, 965, 11], "temperature": 0.0, "avg_logprob": -0.13909429662367878, "compression_ratio": 1.607843137254902, "no_speech_prob": 5.682210485247197e-06}, {"id": 2689, "seek": 729112, "start": 7298.4, "end": 7300.5199999999995, "text": " which will hopefully be fixed by the time the video comes", "tokens": [597, 486, 4696, 312, 6806, 538, 264, 565, 264, 960, 1487], "temperature": 0.0, "avg_logprob": -0.13909429662367878, "compression_ratio": 1.607843137254902, "no_speech_prob": 5.682210485247197e-06}, {"id": 2690, "seek": 729112, "start": 7300.5199999999995, "end": 7303.28, "text": " out is we don't support control flow and autodiff.", "tokens": [484, 307, 321, 500, 380, 1406, 1969, 3095, 293, 1476, 378, 3661, 13], "temperature": 0.0, "avg_logprob": -0.13909429662367878, "compression_ratio": 1.607843137254902, "no_speech_prob": 5.682210485247197e-06}, {"id": 2691, "seek": 729112, "start": 7303.28, "end": 7307.92, "text": " And so if you do an if or a loop, like an RNN, autodiff will say,", "tokens": [400, 370, 498, 291, 360, 364, 498, 420, 257, 6367, 11, 411, 364, 45702, 45, 11, 1476, 378, 3661, 486, 584, 11], "temperature": 0.0, "avg_logprob": -0.13909429662367878, "compression_ratio": 1.607843137254902, "no_speech_prob": 5.682210485247197e-06}, {"id": 2692, "seek": 729112, "start": 7307.92, "end": 7309.84, "text": " I don't support that yet.", "tokens": [286, 500, 380, 1406, 300, 1939, 13], "temperature": 0.0, "avg_logprob": -0.13909429662367878, "compression_ratio": 1.607843137254902, "no_speech_prob": 5.682210485247197e-06}, {"id": 2693, "seek": 729112, "start": 7309.84, "end": 7314.32, "text": " But that's okay, because you can do it yourself.", "tokens": [583, 300, 311, 1392, 11, 570, 291, 393, 360, 309, 1803, 13], "temperature": 0.0, "avg_logprob": -0.13909429662367878, "compression_ratio": 1.607843137254902, "no_speech_prob": 5.682210485247197e-06}, {"id": 2694, "seek": 729112, "start": 7314.32, "end": 7320.32, "text": " So we'll go see an example of that in 11.", "tokens": [407, 321, 603, 352, 536, 364, 1365, 295, 300, 294, 2975, 13], "temperature": 0.0, "avg_logprob": -0.13909429662367878, "compression_ratio": 1.607843137254902, "no_speech_prob": 5.682210485247197e-06}, {"id": 2695, "seek": 732032, "start": 7320.32, "end": 7321.599999999999, "text": " There we go.", "tokens": [821, 321, 352, 13], "temperature": 0.0, "avg_logprob": -0.14331206440055458, "compression_ratio": 1.7434944237918215, "no_speech_prob": 1.7229853256139904e-05}, {"id": 2696, "seek": 732032, "start": 7321.599999999999, "end": 7325.639999999999, "text": " And so what we have implemented here, and we'll talk about layers more", "tokens": [400, 370, 437, 321, 362, 12270, 510, 11, 293, 321, 603, 751, 466, 7914, 544], "temperature": 0.0, "avg_logprob": -0.14331206440055458, "compression_ratio": 1.7434944237918215, "no_speech_prob": 1.7229853256139904e-05}, {"id": 2697, "seek": 732032, "start": 7325.639999999999, "end": 7329.36, "text": " in a second, is we have this thing called switchable layer.", "tokens": [294, 257, 1150, 11, 307, 321, 362, 341, 551, 1219, 3679, 712, 4583, 13], "temperature": 0.0, "avg_logprob": -0.14331206440055458, "compression_ratio": 1.7434944237918215, "no_speech_prob": 1.7229853256139904e-05}, {"id": 2698, "seek": 732032, "start": 7329.36, "end": 7334.5199999999995, "text": " What switchable layer is, is it's just a layer that allows us", "tokens": [708, 3679, 712, 4583, 307, 11, 307, 309, 311, 445, 257, 4583, 300, 4045, 505], "temperature": 0.0, "avg_logprob": -0.14331206440055458, "compression_ratio": 1.7434944237918215, "no_speech_prob": 1.7229853256139904e-05}, {"id": 2699, "seek": 732032, "start": 7334.5199999999995, "end": 7336.84, "text": " to have a Boolean toggle to turn it on and off.", "tokens": [281, 362, 257, 23351, 28499, 31225, 281, 1261, 309, 322, 293, 766, 13], "temperature": 0.0, "avg_logprob": -0.14331206440055458, "compression_ratio": 1.7434944237918215, "no_speech_prob": 1.7229853256139904e-05}, {"id": 2700, "seek": 732032, "start": 7336.84, "end": 7340.639999999999, "text": " And the on and off needs an if, right?", "tokens": [400, 264, 322, 293, 766, 2203, 364, 498, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.14331206440055458, "compression_ratio": 1.7434944237918215, "no_speech_prob": 1.7229853256139904e-05}, {"id": 2701, "seek": 732032, "start": 7340.639999999999, "end": 7343.759999999999, "text": " And so Swift autodiff doesn't currently support if,", "tokens": [400, 370, 25539, 1476, 378, 3661, 1177, 380, 4362, 1406, 498, 11], "temperature": 0.0, "avg_logprob": -0.14331206440055458, "compression_ratio": 1.7434944237918215, "no_speech_prob": 1.7229853256139904e-05}, {"id": 2702, "seek": 732032, "start": 7343.759999999999, "end": 7346.24, "text": " and so when we define the forward function, it's super easy.", "tokens": [293, 370, 562, 321, 6964, 264, 2128, 2445, 11, 309, 311, 1687, 1858, 13], "temperature": 0.0, "avg_logprob": -0.14331206440055458, "compression_ratio": 1.7434944237918215, "no_speech_prob": 1.7229853256139904e-05}, {"id": 2703, "seek": 732032, "start": 7346.24, "end": 7348.639999999999, "text": " We just check to see if it's on, and if so, we run the forward.", "tokens": [492, 445, 1520, 281, 536, 498, 309, 311, 322, 11, 293, 498, 370, 11, 321, 1190, 264, 2128, 13], "temperature": 0.0, "avg_logprob": -0.14331206440055458, "compression_ratio": 1.7434944237918215, "no_speech_prob": 1.7229853256139904e-05}, {"id": 2704, "seek": 734864, "start": 7348.64, "end": 7350.72, "text": " Otherwise, we don't.", "tokens": [10328, 11, 321, 500, 380, 13], "temperature": 0.0, "avg_logprob": -0.0926994557003323, "compression_ratio": 1.744186046511628, "no_speech_prob": 8.93858668860048e-06}, {"id": 2705, "seek": 734864, "start": 7350.72, "end": 7352.92, "text": " Because it doesn't support that control flow yet,", "tokens": [1436, 309, 1177, 380, 1406, 300, 1969, 3095, 1939, 11], "temperature": 0.0, "avg_logprob": -0.0926994557003323, "compression_ratio": 1.744186046511628, "no_speech_prob": 8.93858668860048e-06}, {"id": 2706, "seek": 734864, "start": 7352.92, "end": 7355.360000000001, "text": " we have to write the backwards pass manually.", "tokens": [321, 362, 281, 2464, 264, 12204, 1320, 16945, 13], "temperature": 0.0, "avg_logprob": -0.0926994557003323, "compression_ratio": 1.744186046511628, "no_speech_prob": 8.93858668860048e-06}, {"id": 2707, "seek": 734864, "start": 7355.360000000001, "end": 7358.400000000001, "text": " And we can do that using exactly all the stuff that we just showed.", "tokens": [400, 321, 393, 360, 300, 1228, 2293, 439, 264, 1507, 300, 321, 445, 4712, 13], "temperature": 0.0, "avg_logprob": -0.0926994557003323, "compression_ratio": 1.744186046511628, "no_speech_prob": 8.93858668860048e-06}, {"id": 2708, "seek": 734864, "start": 7358.400000000001, "end": 7361.68, "text": " We implement the value, and we implement the chainer thing,", "tokens": [492, 4445, 264, 2158, 11, 293, 321, 4445, 264, 5021, 260, 551, 11], "temperature": 0.0, "avg_logprob": -0.0926994557003323, "compression_ratio": 1.744186046511628, "no_speech_prob": 8.93858668860048e-06}, {"id": 2709, "seek": 734864, "start": 7361.68, "end": 7365.360000000001, "text": " and we can implement it by returning the right magic set", "tokens": [293, 321, 393, 4445, 309, 538, 12678, 264, 558, 5585, 992], "temperature": 0.0, "avg_logprob": -0.0926994557003323, "compression_ratio": 1.744186046511628, "no_speech_prob": 8.93858668860048e-06}, {"id": 2710, "seek": 734864, "start": 7365.360000000001, "end": 7366.68, "text": " of closures and stuff like that.", "tokens": [295, 2611, 1303, 293, 1507, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.0926994557003323, "compression_ratio": 1.744186046511628, "no_speech_prob": 8.93858668860048e-06}, {"id": 2711, "seek": 734864, "start": 7366.68, "end": 7370.04, "text": " And so, you know, it sucks that Swift doesn't support this yet,", "tokens": [400, 370, 11, 291, 458, 11, 309, 15846, 300, 25539, 1177, 380, 1406, 341, 1939, 11], "temperature": 0.0, "avg_logprob": -0.0926994557003323, "compression_ratio": 1.744186046511628, "no_speech_prob": 8.93858668860048e-06}, {"id": 2712, "seek": 734864, "start": 7370.04, "end": 7374.76, "text": " but it's an infinitely hackable system, and so for this or anything else,", "tokens": [457, 309, 311, 364, 36227, 10339, 712, 1185, 11, 293, 370, 337, 341, 420, 1340, 1646, 11], "temperature": 0.0, "avg_logprob": -0.0926994557003323, "compression_ratio": 1.744186046511628, "no_speech_prob": 8.93858668860048e-06}, {"id": 2713, "seek": 734864, "start": 7374.76, "end": 7376.8, "text": " you can go and customize it to your heart's content.", "tokens": [291, 393, 352, 293, 19734, 309, 281, 428, 1917, 311, 2701, 13], "temperature": 0.0, "avg_logprob": -0.0926994557003323, "compression_ratio": 1.744186046511628, "no_speech_prob": 8.93858668860048e-06}, {"id": 2714, "seek": 737680, "start": 7376.8, "end": 7379.64, "text": " Yeah, and I mean, one of the key things here is", "tokens": [865, 11, 293, 286, 914, 11, 472, 295, 264, 2141, 721, 510, 307], "temperature": 0.0, "avg_logprob": -0.1015115923586145, "compression_ratio": 1.6297709923664123, "no_speech_prob": 3.071357059525326e-05}, {"id": 2715, "seek": 737680, "start": 7379.64, "end": 7384.12, "text": " that Chris was talking about kind of the atoms, and at the moment,", "tokens": [300, 6688, 390, 1417, 466, 733, 295, 264, 16871, 11, 293, 412, 264, 1623, 11], "temperature": 0.0, "avg_logprob": -0.1015115923586145, "compression_ratio": 1.6297709923664123, "no_speech_prob": 3.071357059525326e-05}, {"id": 2716, "seek": 737680, "start": 7384.12, "end": 7388.24, "text": " the atoms is TensorFlow, which is way too big an atom.", "tokens": [264, 16871, 307, 37624, 11, 597, 307, 636, 886, 955, 364, 12018, 13], "temperature": 0.0, "avg_logprob": -0.1015115923586145, "compression_ratio": 1.6297709923664123, "no_speech_prob": 3.071357059525326e-05}, {"id": 2717, "seek": 737680, "start": 7388.24, "end": 7389.84, "text": " It's a very large atom.", "tokens": [467, 311, 257, 588, 2416, 12018, 13], "temperature": 0.0, "avg_logprob": -0.1015115923586145, "compression_ratio": 1.6297709923664123, "no_speech_prob": 3.071357059525326e-05}, {"id": 2718, "seek": 737680, "start": 7389.84, "end": 7393.400000000001, "text": " But at the point when we're kind of in MLIR world,", "tokens": [583, 412, 264, 935, 562, 321, 434, 733, 295, 294, 21601, 7740, 1002, 11], "temperature": 0.0, "avg_logprob": -0.1015115923586145, "compression_ratio": 1.6297709923664123, "no_speech_prob": 3.071357059525326e-05}, {"id": 2719, "seek": 737680, "start": 7393.400000000001, "end": 7398.6, "text": " the atoms are the things going on inside your little kernel DSL", "tokens": [264, 16871, 366, 264, 721, 516, 322, 1854, 428, 707, 28256, 15816, 43], "temperature": 0.0, "avg_logprob": -0.1015115923586145, "compression_ratio": 1.6297709923664123, "no_speech_prob": 3.071357059525326e-05}, {"id": 2720, "seek": 737680, "start": 7398.6, "end": 7402.4400000000005, "text": " that you've written, and so this ability to actually differentiate", "tokens": [300, 291, 600, 3720, 11, 293, 370, 341, 3485, 281, 767, 23203], "temperature": 0.0, "avg_logprob": -0.1015115923586145, "compression_ratio": 1.6297709923664123, "no_speech_prob": 3.071357059525326e-05}, {"id": 2721, "seek": 737680, "start": 7402.4400000000005, "end": 7405.4800000000005, "text": " on float directly suddenly becomes super important,", "tokens": [322, 15706, 3838, 5800, 3643, 1687, 1021, 11], "temperature": 0.0, "avg_logprob": -0.1015115923586145, "compression_ratio": 1.6297709923664123, "no_speech_prob": 3.071357059525326e-05}, {"id": 2722, "seek": 740548, "start": 7405.48, "end": 7408.639999999999, "text": " because it means that, like, I mean, for decades,", "tokens": [570, 309, 1355, 300, 11, 411, 11, 286, 914, 11, 337, 7878, 11], "temperature": 0.0, "avg_logprob": -0.13375401285897315, "compression_ratio": 1.6197718631178708, "no_speech_prob": 1.2803563549823593e-05}, {"id": 2723, "seek": 740548, "start": 7408.639999999999, "end": 7412.639999999999, "text": " people weren't doing much researchy stuff with deep learning,", "tokens": [561, 4999, 380, 884, 709, 2132, 88, 1507, 365, 2452, 2539, 11], "temperature": 0.0, "avg_logprob": -0.13375401285897315, "compression_ratio": 1.6197718631178708, "no_speech_prob": 1.2803563549823593e-05}, {"id": 2724, "seek": 740548, "start": 7412.639999999999, "end": 7416.0, "text": " and one of the reasons was that none of us could be bothered", "tokens": [293, 472, 295, 264, 4112, 390, 300, 6022, 295, 505, 727, 312, 22996], "temperature": 0.0, "avg_logprob": -0.13375401285897315, "compression_ratio": 1.6197718631178708, "no_speech_prob": 1.2803563549823593e-05}, {"id": 2725, "seek": 740548, "start": 7416.0, "end": 7421.5199999999995, "text": " implementing an accelerated version of every damned, you know,", "tokens": [18114, 364, 29763, 3037, 295, 633, 46397, 11, 291, 458, 11], "temperature": 0.0, "avg_logprob": -0.13375401285897315, "compression_ratio": 1.6197718631178708, "no_speech_prob": 1.2803563549823593e-05}, {"id": 2726, "seek": 740548, "start": 7421.5199999999995, "end": 7424.5199999999995, "text": " CUDA operation that we needed to do the backward pass of", "tokens": [29777, 7509, 6916, 300, 321, 2978, 281, 360, 264, 23897, 1320, 295], "temperature": 0.0, "avg_logprob": -0.13375401285897315, "compression_ratio": 1.6197718631178708, "no_speech_prob": 1.2803563549823593e-05}, {"id": 2727, "seek": 740548, "start": 7424.5199999999995, "end": 7426.679999999999, "text": " and do the calculus, blah, blah, blah.", "tokens": [293, 360, 264, 33400, 11, 12288, 11, 12288, 11, 12288, 13], "temperature": 0.0, "avg_logprob": -0.13375401285897315, "compression_ratio": 1.6197718631178708, "no_speech_prob": 1.2803563549823593e-05}, {"id": 2728, "seek": 740548, "start": 7426.679999999999, "end": 7430.639999999999, "text": " Nowadays, we only work with a subset of things that, like,", "tokens": [28908, 11, 321, 787, 589, 365, 257, 25993, 295, 721, 300, 11, 411, 11], "temperature": 0.0, "avg_logprob": -0.13375401285897315, "compression_ratio": 1.6197718631178708, "no_speech_prob": 1.2803563549823593e-05}, {"id": 2729, "seek": 740548, "start": 7430.639999999999, "end": 7432.799999999999, "text": " PyTorch and stuff already supports.", "tokens": [9953, 51, 284, 339, 293, 1507, 1217, 9346, 13], "temperature": 0.0, "avg_logprob": -0.13375401285897315, "compression_ratio": 1.6197718631178708, "no_speech_prob": 1.2803563549823593e-05}, {"id": 2730, "seek": 743280, "start": 7432.8, "end": 7435.72, "text": " So at the point where, you know, so this is the thing", "tokens": [407, 412, 264, 935, 689, 11, 291, 458, 11, 370, 341, 307, 264, 551], "temperature": 0.0, "avg_logprob": -0.14821116604022125, "compression_ratio": 1.6726618705035972, "no_speech_prob": 1.4284435565059539e-05}, {"id": 2731, "seek": 743280, "start": 7435.72, "end": 7439.24, "text": " about why we're doing this stuff with Swift now is", "tokens": [466, 983, 321, 434, 884, 341, 1507, 365, 25539, 586, 307], "temperature": 0.0, "avg_logprob": -0.14821116604022125, "compression_ratio": 1.6726618705035972, "no_speech_prob": 1.4284435565059539e-05}, {"id": 2732, "seek": 743280, "start": 7439.24, "end": 7444.04, "text": " that this is the foundations of something that, in the next year", "tokens": [300, 341, 307, 264, 22467, 295, 746, 300, 11, 294, 264, 958, 1064], "temperature": 0.0, "avg_logprob": -0.14821116604022125, "compression_ratio": 1.6726618705035972, "no_speech_prob": 1.4284435565059539e-05}, {"id": 2733, "seek": 743280, "start": 7444.04, "end": 7446.28, "text": " or two, will give us all the way", "tokens": [420, 732, 11, 486, 976, 505, 439, 264, 636], "temperature": 0.0, "avg_logprob": -0.14821116604022125, "compression_ratio": 1.6726618705035972, "no_speech_prob": 1.4284435565059539e-05}, {"id": 2734, "seek": 743280, "start": 7446.28, "end": 7449.56, "text": " down infinitely hackable, fully differentiable system.", "tokens": [760, 36227, 10339, 712, 11, 4498, 819, 9364, 1185, 13], "temperature": 0.0, "avg_logprob": -0.14821116604022125, "compression_ratio": 1.6726618705035972, "no_speech_prob": 1.4284435565059539e-05}, {"id": 2735, "seek": 743280, "start": 7449.56, "end": 7450.88, "text": " Yep.", "tokens": [7010, 13], "temperature": 0.0, "avg_logprob": -0.14821116604022125, "compression_ratio": 1.6726618705035972, "no_speech_prob": 1.4284435565059539e-05}, {"id": 2736, "seek": 743280, "start": 7450.88, "end": 7453.24, "text": " Can we jump to layer really quick?", "tokens": [1664, 321, 3012, 281, 4583, 534, 1702, 30], "temperature": 0.0, "avg_logprob": -0.14821116604022125, "compression_ratio": 1.6726618705035972, "no_speech_prob": 1.4284435565059539e-05}, {"id": 2737, "seek": 743280, "start": 7453.24, "end": 7456.04, "text": " So we've talked about MatMul, we've talked about Autodiff.", "tokens": [407, 321, 600, 2825, 466, 6789, 44, 425, 11, 321, 600, 2825, 466, 6049, 378, 3661, 13], "temperature": 0.0, "avg_logprob": -0.14821116604022125, "compression_ratio": 1.6726618705035972, "no_speech_prob": 1.4284435565059539e-05}, {"id": 2738, "seek": 743280, "start": 7456.04, "end": 7458.6, "text": " Now let's talk about other stuff.", "tokens": [823, 718, 311, 751, 466, 661, 1507, 13], "temperature": 0.0, "avg_logprob": -0.14821116604022125, "compression_ratio": 1.6726618705035972, "no_speech_prob": 1.4284435565059539e-05}, {"id": 2739, "seek": 743280, "start": 7458.6, "end": 7460.400000000001, "text": " So layers are now super easy.", "tokens": [407, 7914, 366, 586, 1687, 1858, 13], "temperature": 0.0, "avg_logprob": -0.14821116604022125, "compression_ratio": 1.6726618705035972, "no_speech_prob": 1.4284435565059539e-05}, {"id": 2740, "seek": 743280, "start": 7460.400000000001, "end": 7462.52, "text": " It just uses all the same stuff you've seen.", "tokens": [467, 445, 4960, 439, 264, 912, 1507, 291, 600, 1612, 13], "temperature": 0.0, "avg_logprob": -0.14821116604022125, "compression_ratio": 1.6726618705035972, "no_speech_prob": 1.4284435565059539e-05}, {"id": 2741, "seek": 746252, "start": 7462.52, "end": 7464.4400000000005, "text": " And so if you go look at layer, it's a protocol,", "tokens": [400, 370, 498, 291, 352, 574, 412, 4583, 11, 309, 311, 257, 10336, 11], "temperature": 0.0, "avg_logprob": -0.10050740386500503, "compression_ratio": 1.8045112781954886, "no_speech_prob": 2.0142006178502925e-05}, {"id": 2742, "seek": 746252, "start": 7464.4400000000005, "end": 7466.120000000001, "text": " just like we were talking before.", "tokens": [445, 411, 321, 645, 1417, 949, 13], "temperature": 0.0, "avg_logprob": -0.10050740386500503, "compression_ratio": 1.8045112781954886, "no_speech_prob": 2.0142006178502925e-05}, {"id": 2743, "seek": 746252, "start": 7466.120000000001, "end": 7470.64, "text": " And layers are differentiable.", "tokens": [400, 7914, 366, 819, 9364, 13], "temperature": 0.0, "avg_logprob": -0.10050740386500503, "compression_ratio": 1.8045112781954886, "no_speech_prob": 2.0142006178502925e-05}, {"id": 2744, "seek": 746252, "start": 7470.64, "end": 7473.72, "text": " Like, they contain bags of parameters, just like we just saw.", "tokens": [1743, 11, 436, 5304, 10405, 295, 9834, 11, 445, 411, 321, 445, 1866, 13], "temperature": 0.0, "avg_logprob": -0.10050740386500503, "compression_ratio": 1.8045112781954886, "no_speech_prob": 2.0142006178502925e-05}, {"id": 2745, "seek": 746252, "start": 7473.72, "end": 7476.68, "text": " The requirement inside of a layer is you have to have a call.", "tokens": [440, 11695, 1854, 295, 257, 4583, 307, 291, 362, 281, 362, 257, 818, 13], "temperature": 0.0, "avg_logprob": -0.10050740386500503, "compression_ratio": 1.8045112781954886, "no_speech_prob": 2.0142006178502925e-05}, {"id": 2746, "seek": 746252, "start": 7476.68, "end": 7480.240000000001, "text": " So layers in Swift are callable, just like you'd expect.", "tokens": [407, 7914, 294, 25539, 366, 818, 712, 11, 445, 411, 291, 1116, 2066, 13], "temperature": 0.0, "avg_logprob": -0.10050740386500503, "compression_ratio": 1.8045112781954886, "no_speech_prob": 2.0142006178502925e-05}, {"id": 2747, "seek": 746252, "start": 7480.240000000001, "end": 7482.6, "text": " And they have, they work with any type that's an input", "tokens": [400, 436, 362, 11, 436, 589, 365, 604, 2010, 300, 311, 364, 4846], "temperature": 0.0, "avg_logprob": -0.10050740386500503, "compression_ratio": 1.8045112781954886, "no_speech_prob": 2.0142006178502925e-05}, {"id": 2748, "seek": 746252, "start": 7482.6, "end": 7485.72, "text": " or output, and what layer says is the input", "tokens": [420, 5598, 11, 293, 437, 4583, 1619, 307, 264, 4846], "temperature": 0.0, "avg_logprob": -0.10050740386500503, "compression_ratio": 1.8045112781954886, "no_speech_prob": 2.0142006178502925e-05}, {"id": 2749, "seek": 746252, "start": 7485.72, "end": 7488.4800000000005, "text": " and output types just have to be differentiable.", "tokens": [293, 5598, 3467, 445, 362, 281, 312, 819, 9364, 13], "temperature": 0.0, "avg_logprob": -0.10050740386500503, "compression_ratio": 1.8045112781954886, "no_speech_prob": 2.0142006178502925e-05}, {"id": 2750, "seek": 746252, "start": 7488.4800000000005, "end": 7490.280000000001, "text": " And so layer itself is really simple.", "tokens": [400, 370, 4583, 2564, 307, 534, 2199, 13], "temperature": 0.0, "avg_logprob": -0.10050740386500503, "compression_ratio": 1.8045112781954886, "no_speech_prob": 2.0142006178502925e-05}, {"id": 2751, "seek": 749028, "start": 7490.28, "end": 7493.599999999999, "text": " Yeah, and so underneath here you can see us defining a few", "tokens": [865, 11, 293, 370, 7223, 510, 291, 393, 536, 505, 17827, 257, 1326], "temperature": 0.0, "avg_logprob": -0.12885880143675085, "compression_ratio": 1.8109965635738832, "no_speech_prob": 8.397842066187877e-06}, {"id": 2752, "seek": 749028, "start": 7493.599999999999, "end": 7494.4, "text": " different layers.", "tokens": [819, 7914, 13], "temperature": 0.0, "avg_logprob": -0.12885880143675085, "compression_ratio": 1.8109965635738832, "no_speech_prob": 8.397842066187877e-06}, {"id": 2753, "seek": 749028, "start": 7494.4, "end": 7497.759999999999, "text": " So for example, here is the definition of a dense layer.", "tokens": [407, 337, 1365, 11, 510, 307, 264, 7123, 295, 257, 18011, 4583, 13], "temperature": 0.0, "avg_logprob": -0.12885880143675085, "compression_ratio": 1.8109965635738832, "no_speech_prob": 8.397842066187877e-06}, {"id": 2754, "seek": 749028, "start": 7497.759999999999, "end": 7500.719999999999, "text": " Right? And so then now that we've got our layers", "tokens": [1779, 30, 400, 370, 550, 586, 300, 321, 600, 658, 527, 7914], "temperature": 0.0, "avg_logprob": -0.12885880143675085, "compression_ratio": 1.8109965635738832, "no_speech_prob": 8.397842066187877e-06}, {"id": 2755, "seek": 749028, "start": 7500.719999999999, "end": 7503.759999999999, "text": " and we've got our forward pass, that's enough", "tokens": [293, 321, 600, 658, 527, 2128, 1320, 11, 300, 311, 1547], "temperature": 0.0, "avg_logprob": -0.12885880143675085, "compression_ratio": 1.8109965635738832, "no_speech_prob": 8.397842066187877e-06}, {"id": 2756, "seek": 749028, "start": 7503.759999999999, "end": 7505.8, "text": " to actually allow us to do mini-batch training.", "tokens": [281, 767, 2089, 505, 281, 360, 8382, 12, 65, 852, 3097, 13], "temperature": 0.0, "avg_logprob": -0.12885880143675085, "compression_ratio": 1.8109965635738832, "no_speech_prob": 8.397842066187877e-06}, {"id": 2757, "seek": 749028, "start": 7505.8, "end": 7508.28, "text": " And I'm not going to go through all this in any detail,", "tokens": [400, 286, 478, 406, 516, 281, 352, 807, 439, 341, 294, 604, 2607, 11], "temperature": 0.0, "avg_logprob": -0.12885880143675085, "compression_ratio": 1.8109965635738832, "no_speech_prob": 8.397842066187877e-06}, {"id": 2758, "seek": 749028, "start": 7508.28, "end": 7513.0, "text": " other than just to point out that you can see here is defining a model", "tokens": [661, 813, 445, 281, 935, 484, 300, 291, 393, 536, 510, 307, 17827, 257, 2316], "temperature": 0.0, "avg_logprob": -0.12885880143675085, "compression_ratio": 1.8109965635738832, "no_speech_prob": 8.397842066187877e-06}, {"id": 2759, "seek": 749028, "start": 7513.0, "end": 7515.36, "text": " and it's just a layer, because it's just a differentiable thing", "tokens": [293, 309, 311, 445, 257, 4583, 11, 570, 309, 311, 445, 257, 819, 9364, 551], "temperature": 0.0, "avg_logprob": -0.12885880143675085, "compression_ratio": 1.8109965635738832, "no_speech_prob": 8.397842066187877e-06}, {"id": 2760, "seek": 749028, "start": 7515.36, "end": 7516.4, "text": " that has a call function.", "tokens": [300, 575, 257, 818, 2445, 13], "temperature": 0.0, "avg_logprob": -0.12885880143675085, "compression_ratio": 1.8109965635738832, "no_speech_prob": 8.397842066187877e-06}, {"id": 2761, "seek": 749028, "start": 7516.4, "end": 7519.04, "text": " And you can call the model layer.", "tokens": [400, 291, 393, 818, 264, 2316, 4583, 13], "temperature": 0.0, "avg_logprob": -0.12885880143675085, "compression_ratio": 1.8109965635738832, "no_speech_prob": 8.397842066187877e-06}, {"id": 2762, "seek": 751904, "start": 7519.04, "end": 7520.64, "text": " We can define log softmax.", "tokens": [492, 393, 6964, 3565, 2787, 41167, 13], "temperature": 0.0, "avg_logprob": -0.15536640059780066, "compression_ratio": 1.8825910931174088, "no_speech_prob": 1.7777050743461587e-05}, {"id": 2763, "seek": 751904, "start": 7520.64, "end": 7525.4, "text": " We can define negative log likelihood, log sum exp.", "tokens": [492, 393, 6964, 3671, 3565, 22119, 11, 3565, 2408, 1278, 13], "temperature": 0.0, "avg_logprob": -0.15536640059780066, "compression_ratio": 1.8825910931174088, "no_speech_prob": 1.7777050743461587e-05}, {"id": 2764, "seek": 751904, "start": 7525.4, "end": 7527.76, "text": " Once we've done all that, we're allowed to use the Swift", "tokens": [3443, 321, 600, 1096, 439, 300, 11, 321, 434, 4350, 281, 764, 264, 25539], "temperature": 0.0, "avg_logprob": -0.15536640059780066, "compression_ratio": 1.8825910931174088, "no_speech_prob": 1.7777050743461587e-05}, {"id": 2765, "seek": 751904, "start": 7527.76, "end": 7530.24, "text": " for TS version, because we've done it ourselves.", "tokens": [337, 37645, 3037, 11, 570, 321, 600, 1096, 309, 4175, 13], "temperature": 0.0, "avg_logprob": -0.15536640059780066, "compression_ratio": 1.8825910931174088, "no_speech_prob": 1.7777050743461587e-05}, {"id": 2766, "seek": 751904, "start": 7530.24, "end": 7532.16, "text": " And at that point, we can create a training loop.", "tokens": [400, 412, 300, 935, 11, 321, 393, 1884, 257, 3097, 6367, 13], "temperature": 0.0, "avg_logprob": -0.15536640059780066, "compression_ratio": 1.8825910931174088, "no_speech_prob": 1.7777050743461587e-05}, {"id": 2767, "seek": 751904, "start": 7532.16, "end": 7535.6, "text": " So we'll define accuracy, just like we did in PyTorch.", "tokens": [407, 321, 603, 6964, 14170, 11, 445, 411, 321, 630, 294, 9953, 51, 284, 339, 13], "temperature": 0.0, "avg_logprob": -0.15536640059780066, "compression_ratio": 1.8825910931174088, "no_speech_prob": 1.7777050743461587e-05}, {"id": 2768, "seek": 751904, "start": 7535.6, "end": 7539.56, "text": " Set up our mini-batch, just like we did in PyTorch.", "tokens": [8928, 493, 527, 8382, 12, 65, 852, 11, 445, 411, 321, 630, 294, 9953, 51, 284, 339, 13], "temperature": 0.0, "avg_logprob": -0.15536640059780066, "compression_ratio": 1.8825910931174088, "no_speech_prob": 1.7777050743461587e-05}, {"id": 2769, "seek": 751904, "start": 7539.56, "end": 7543.2, "text": " And at this point, we can create a training loop.", "tokens": [400, 412, 341, 935, 11, 321, 393, 1884, 257, 3097, 6367, 13], "temperature": 0.0, "avg_logprob": -0.15536640059780066, "compression_ratio": 1.8825910931174088, "no_speech_prob": 1.7777050743461587e-05}, {"id": 2770, "seek": 751904, "start": 7543.2, "end": 7545.92, "text": " So we just go through and grab our x and y,", "tokens": [407, 321, 445, 352, 807, 293, 4444, 527, 2031, 293, 288, 11], "temperature": 0.0, "avg_logprob": -0.15536640059780066, "compression_ratio": 1.8825910931174088, "no_speech_prob": 1.7777050743461587e-05}, {"id": 2771, "seek": 751904, "start": 7545.92, "end": 7547.92, "text": " and update all of our things.", "tokens": [293, 5623, 439, 295, 527, 721, 13], "temperature": 0.0, "avg_logprob": -0.15536640059780066, "compression_ratio": 1.8825910931174088, "no_speech_prob": 1.7777050743461587e-05}, {"id": 2772, "seek": 754792, "start": 7547.92, "end": 7552.24, "text": " You'll notice that there's no torch.nograd here.", "tokens": [509, 603, 3449, 300, 456, 311, 572, 27822, 13, 77, 664, 6206, 510, 13], "temperature": 0.0, "avg_logprob": -0.1525476296742757, "compression_ratio": 1.688259109311741, "no_speech_prob": 7.888971595093608e-06}, {"id": 2773, "seek": 754792, "start": 7552.24, "end": 7556.32, "text": " And that's because in Swift, you opt into gradients,", "tokens": [400, 300, 311, 570, 294, 25539, 11, 291, 2427, 666, 2771, 2448, 11], "temperature": 0.0, "avg_logprob": -0.1525476296742757, "compression_ratio": 1.688259109311741, "no_speech_prob": 7.888971595093608e-06}, {"id": 2774, "seek": 754792, "start": 7556.32, "end": 7557.28, "text": " not out of gradients.", "tokens": [406, 484, 295, 2771, 2448, 13], "temperature": 0.0, "avg_logprob": -0.1525476296742757, "compression_ratio": 1.688259109311741, "no_speech_prob": 7.888971595093608e-06}, {"id": 2775, "seek": 754792, "start": 7557.28, "end": 7560.12, "text": " So you wrap the stuff that wants gradients inside value", "tokens": [407, 291, 7019, 264, 1507, 300, 2738, 2771, 2448, 1854, 2158], "temperature": 0.0, "avg_logprob": -0.1525476296742757, "compression_ratio": 1.688259109311741, "no_speech_prob": 7.888971595093608e-06}, {"id": 2776, "seek": 754792, "start": 7560.12, "end": 7561.68, "text": " with gradient.", "tokens": [365, 16235, 13], "temperature": 0.0, "avg_logprob": -0.1525476296742757, "compression_ratio": 1.688259109311741, "no_speech_prob": 7.888971595093608e-06}, {"id": 2777, "seek": 754792, "start": 7561.68, "end": 7562.56, "text": " And there we go.", "tokens": [400, 456, 321, 352, 13], "temperature": 0.0, "avg_logprob": -0.1525476296742757, "compression_ratio": 1.688259109311741, "no_speech_prob": 7.888971595093608e-06}, {"id": 2778, "seek": 754792, "start": 7562.56, "end": 7564.52, "text": " So we've got a training loop.", "tokens": [407, 321, 600, 658, 257, 3097, 6367, 13], "temperature": 0.0, "avg_logprob": -0.1525476296742757, "compression_ratio": 1.688259109311741, "no_speech_prob": 7.888971595093608e-06}, {"id": 2779, "seek": 754792, "start": 7564.52, "end": 7569.92, "text": " Now, one really cool thing is that all of these things end up packaged", "tokens": [823, 11, 472, 534, 1627, 551, 307, 300, 439, 295, 613, 721, 917, 493, 38162], "temperature": 0.0, "avg_logprob": -0.1525476296742757, "compression_ratio": 1.688259109311741, "no_speech_prob": 7.888971595093608e-06}, {"id": 2780, "seek": 754792, "start": 7569.92, "end": 7573.52, "text": " up together, thanks to the layer protocol,", "tokens": [493, 1214, 11, 3231, 281, 264, 4583, 10336, 11], "temperature": 0.0, "avg_logprob": -0.1525476296742757, "compression_ratio": 1.688259109311741, "no_speech_prob": 7.888971595093608e-06}, {"id": 2781, "seek": 754792, "start": 7573.52, "end": 7575.2, "text": " into a thing called variables.", "tokens": [666, 257, 551, 1219, 9102, 13], "temperature": 0.0, "avg_logprob": -0.1525476296742757, "compression_ratio": 1.688259109311741, "no_speech_prob": 7.888971595093608e-06}, {"id": 2782, "seek": 754792, "start": 7575.2, "end": 7577.2, "text": " Which layer is differentiable?", "tokens": [3013, 4583, 307, 819, 9364, 30], "temperature": 0.0, "avg_logprob": -0.1525476296742757, "compression_ratio": 1.688259109311741, "no_speech_prob": 7.888971595093608e-06}, {"id": 2783, "seek": 757720, "start": 7577.2, "end": 7579.24, "text": " Differentiable is also a protocol.", "tokens": [20825, 9364, 307, 611, 257, 10336, 13], "temperature": 0.0, "avg_logprob": -0.1592284229314216, "compression_ratio": 1.5477178423236515, "no_speech_prob": 2.8572469545906642e-06}, {"id": 2784, "seek": 757720, "start": 7579.24, "end": 7582.08, "text": " Protocols have lots of cool stuff on them.", "tokens": [48753, 82, 362, 3195, 295, 1627, 1507, 322, 552, 13], "temperature": 0.0, "avg_logprob": -0.1592284229314216, "compression_ratio": 1.5477178423236515, "no_speech_prob": 2.8572469545906642e-06}, {"id": 2785, "seek": 757720, "start": 7582.08, "end": 7585.599999999999, "text": " So thanks to that, we don't have to write anything else.", "tokens": [407, 3231, 281, 300, 11, 321, 500, 380, 362, 281, 2464, 1340, 1646, 13], "temperature": 0.0, "avg_logprob": -0.1592284229314216, "compression_ratio": 1.5477178423236515, "no_speech_prob": 2.8572469545906642e-06}, {"id": 2786, "seek": 757720, "start": 7585.599999999999, "end": 7589.76, "text": " We can just say, model.variables minus equals lr times grad.", "tokens": [492, 393, 445, 584, 11, 2316, 13, 34033, 2965, 3175, 6915, 287, 81, 1413, 2771, 13], "temperature": 0.0, "avg_logprob": -0.1592284229314216, "compression_ratio": 1.5477178423236515, "no_speech_prob": 2.8572469545906642e-06}, {"id": 2787, "seek": 757720, "start": 7589.76, "end": 7591.92, "text": " And it just works.", "tokens": [400, 309, 445, 1985, 13], "temperature": 0.0, "avg_logprob": -0.1592284229314216, "compression_ratio": 1.5477178423236515, "no_speech_prob": 2.8572469545906642e-06}, {"id": 2788, "seek": 757720, "start": 7591.92, "end": 7597.2, "text": " Thanks to the magic of protocol extensions, our model got that for free", "tokens": [2561, 281, 264, 5585, 295, 10336, 25129, 11, 527, 2316, 658, 300, 337, 1737], "temperature": 0.0, "avg_logprob": -0.1592284229314216, "compression_ratio": 1.5477178423236515, "no_speech_prob": 2.8572469545906642e-06}, {"id": 2789, "seek": 757720, "start": 7597.2, "end": 7599.48, "text": " because we said it's a layer.", "tokens": [570, 321, 848, 309, 311, 257, 4583, 13], "temperature": 0.0, "avg_logprob": -0.1592284229314216, "compression_ratio": 1.5477178423236515, "no_speech_prob": 2.8572469545906642e-06}, {"id": 2790, "seek": 757720, "start": 7599.48, "end": 7605.08, "text": " OK, so I think that's about all we wanted to show there.", "tokens": [2264, 11, 370, 286, 519, 300, 311, 466, 439, 321, 1415, 281, 855, 456, 13], "temperature": 0.0, "avg_logprob": -0.1592284229314216, "compression_ratio": 1.5477178423236515, "no_speech_prob": 2.8572469545906642e-06}, {"id": 2791, "seek": 760508, "start": 7605.08, "end": 7610.72, "text": " So now that we've got that, we're actually allowed to use optimizers.", "tokens": [407, 586, 300, 321, 600, 658, 300, 11, 321, 434, 767, 4350, 281, 764, 5028, 22525, 13], "temperature": 0.0, "avg_logprob": -0.1307565198086276, "compression_ratio": 1.5913461538461537, "no_speech_prob": 1.6186348148039542e-05}, {"id": 2792, "seek": 760508, "start": 7610.72, "end": 7612.5199999999995, "text": " So we can just use that instead.", "tokens": [407, 321, 393, 445, 764, 300, 2602, 13], "temperature": 0.0, "avg_logprob": -0.1307565198086276, "compression_ratio": 1.5913461538461537, "no_speech_prob": 1.6186348148039542e-05}, {"id": 2793, "seek": 760508, "start": 7612.5199999999995, "end": 7616.44, "text": " And that gives us a standard training loop, which we can use.", "tokens": [400, 300, 2709, 505, 257, 3832, 3097, 6367, 11, 597, 321, 393, 764, 13], "temperature": 0.0, "avg_logprob": -0.1307565198086276, "compression_ratio": 1.5913461538461537, "no_speech_prob": 1.6186348148039542e-05}, {"id": 2794, "seek": 760508, "start": 7616.44, "end": 7622.16, "text": " And then on top of that, we can add callbacks, which I won't go", "tokens": [400, 550, 322, 1192, 295, 300, 11, 321, 393, 909, 818, 17758, 11, 597, 286, 1582, 380, 352], "temperature": 0.0, "avg_logprob": -0.1307565198086276, "compression_ratio": 1.5913461538461537, "no_speech_prob": 1.6186348148039542e-05}, {"id": 2795, "seek": 760508, "start": 7622.16, "end": 7625.68, "text": " into the details, but you can check it out in 04.", "tokens": [666, 264, 4365, 11, 457, 291, 393, 1520, 309, 484, 294, 50022, 13], "temperature": 0.0, "avg_logprob": -0.1307565198086276, "compression_ratio": 1.5913461538461537, "no_speech_prob": 1.6186348148039542e-05}, {"id": 2796, "seek": 760508, "start": 7625.68, "end": 7629.96, "text": " And you will find that, let's find them.", "tokens": [400, 291, 486, 915, 300, 11, 718, 311, 915, 552, 13], "temperature": 0.0, "avg_logprob": -0.1307565198086276, "compression_ratio": 1.5913461538461537, "no_speech_prob": 1.6186348148039542e-05}, {"id": 2797, "seek": 760508, "start": 7629.96, "end": 7630.5199999999995, "text": " Here we go.", "tokens": [1692, 321, 352, 13], "temperature": 0.0, "avg_logprob": -0.1307565198086276, "compression_ratio": 1.5913461538461537, "no_speech_prob": 1.6186348148039542e-05}, {"id": 2798, "seek": 763052, "start": 7630.52, "end": 7637.72, "text": " We'll find a letter class, which has the same callbacks that we're used to.", "tokens": [492, 603, 915, 257, 5063, 1508, 11, 597, 575, 264, 912, 818, 17758, 300, 321, 434, 1143, 281, 13], "temperature": 0.0, "avg_logprob": -0.11828330846933219, "compression_ratio": 1.6569343065693432, "no_speech_prob": 1.321106537943706e-05}, {"id": 2799, "seek": 763052, "start": 7637.72, "end": 7641.400000000001, "text": " And then eventually, we'll get to the point", "tokens": [400, 550, 4728, 11, 321, 603, 483, 281, 264, 935], "temperature": 0.0, "avg_logprob": -0.11828330846933219, "compression_ratio": 1.6569343065693432, "no_speech_prob": 1.321106537943706e-05}, {"id": 2800, "seek": 763052, "start": 7641.400000000001, "end": 7646.280000000001, "text": " where we've actually written a stateful optimizer with hyperparameters.", "tokens": [689, 321, 600, 767, 3720, 257, 1785, 906, 5028, 6545, 365, 9848, 2181, 335, 6202, 13], "temperature": 0.0, "avg_logprob": -0.11828330846933219, "compression_ratio": 1.6569343065693432, "no_speech_prob": 1.321106537943706e-05}, {"id": 2801, "seek": 763052, "start": 7646.280000000001, "end": 7648.040000000001, "text": " Again, just like we saw in PyTorch.", "tokens": [3764, 11, 445, 411, 321, 1866, 294, 9953, 51, 284, 339, 13], "temperature": 0.0, "avg_logprob": -0.11828330846933219, "compression_ratio": 1.6569343065693432, "no_speech_prob": 1.321106537943706e-05}, {"id": 2802, "seek": 763052, "start": 7648.040000000001, "end": 7650.52, "text": " And most of this will now look very familiar.", "tokens": [400, 881, 295, 341, 486, 586, 574, 588, 4963, 13], "temperature": 0.0, "avg_logprob": -0.11828330846933219, "compression_ratio": 1.6569343065693432, "no_speech_prob": 1.321106537943706e-05}, {"id": 2803, "seek": 763052, "start": 7650.52, "end": 7654.0, "text": " We won't look at dictionaries now, but they're almost identical", "tokens": [492, 1582, 380, 574, 412, 22352, 4889, 586, 11, 457, 436, 434, 1920, 14800], "temperature": 0.0, "avg_logprob": -0.11828330846933219, "compression_ratio": 1.6569343065693432, "no_speech_prob": 1.321106537943706e-05}, {"id": 2804, "seek": 763052, "start": 7654.0, "end": 7656.64, "text": " to PyTorch dictionaries, and we use them in almost the same way.", "tokens": [281, 9953, 51, 284, 339, 22352, 4889, 11, 293, 321, 764, 552, 294, 1920, 264, 912, 636, 13], "temperature": 0.0, "avg_logprob": -0.11828330846933219, "compression_ratio": 1.6569343065693432, "no_speech_prob": 1.321106537943706e-05}, {"id": 2805, "seek": 763052, "start": 7656.64, "end": 7659.4400000000005, "text": " So you see we've got states and steppers and stats,", "tokens": [407, 291, 536, 321, 600, 658, 4368, 293, 2126, 15226, 293, 18152, 11], "temperature": 0.0, "avg_logprob": -0.11828330846933219, "compression_ratio": 1.6569343065693432, "no_speech_prob": 1.321106537943706e-05}, {"id": 2806, "seek": 765944, "start": 7659.44, "end": 7661.04, "text": " just like in PyTorch.", "tokens": [445, 411, 294, 9953, 51, 284, 339, 13], "temperature": 0.0, "avg_logprob": -0.15904676613687468, "compression_ratio": 1.677685950413223, "no_speech_prob": 7.5277134783391375e-06}, {"id": 2807, "seek": 765944, "start": 7661.04, "end": 7664.36, "text": " And so eventually, you'll see we have things", "tokens": [400, 370, 4728, 11, 291, 603, 536, 321, 362, 721], "temperature": 0.0, "avg_logprob": -0.15904676613687468, "compression_ratio": 1.677685950413223, "no_speech_prob": 7.5277134783391375e-06}, {"id": 2808, "seek": 765944, "start": 7664.36, "end": 7669.4, "text": " like the LAM optimizer written in Swift, which is pretty great.", "tokens": [411, 264, 441, 2865, 5028, 6545, 3720, 294, 25539, 11, 597, 307, 1238, 869, 13], "temperature": 0.0, "avg_logprob": -0.15904676613687468, "compression_ratio": 1.677685950413223, "no_speech_prob": 7.5277134783391375e-06}, {"id": 2809, "seek": 765944, "start": 7669.4, "end": 7671.679999999999, "text": " And it's the same amount of code.", "tokens": [400, 309, 311, 264, 912, 2372, 295, 3089, 13], "temperature": 0.0, "avg_logprob": -0.15904676613687468, "compression_ratio": 1.677685950413223, "no_speech_prob": 7.5277134783391375e-06}, {"id": 2810, "seek": 765944, "start": 7671.679999999999, "end": 7675.799999999999, "text": " And things like squared derivatives, we can use our nice Unicode", "tokens": [400, 721, 411, 8889, 33733, 11, 321, 393, 764, 527, 1481, 1156, 299, 1429], "temperature": 0.0, "avg_logprob": -0.15904676613687468, "compression_ratio": 1.677685950413223, "no_speech_prob": 7.5277134783391375e-06}, {"id": 2811, "seek": 765944, "start": 7675.799999999999, "end": 7677.44, "text": " to make them a bit easier to see.", "tokens": [281, 652, 552, 257, 857, 3571, 281, 536, 13], "temperature": 0.0, "avg_logprob": -0.15904676613687468, "compression_ratio": 1.677685950413223, "no_speech_prob": 7.5277134783391375e-06}, {"id": 2812, "seek": 765944, "start": 7677.44, "end": 7680.679999999999, "text": " And so now we have a function, create an SGD optimizer,", "tokens": [400, 370, 586, 321, 362, 257, 2445, 11, 1884, 364, 34520, 35, 5028, 6545, 11], "temperature": 0.0, "avg_logprob": -0.15904676613687468, "compression_ratio": 1.677685950413223, "no_speech_prob": 7.5277134783391375e-06}, {"id": 2813, "seek": 765944, "start": 7680.679999999999, "end": 7682.839999999999, "text": " a function to create an atom optimizer.", "tokens": [257, 2445, 281, 1884, 364, 12018, 5028, 6545, 13], "temperature": 0.0, "avg_logprob": -0.15904676613687468, "compression_ratio": 1.677685950413223, "no_speech_prob": 7.5277134783391375e-06}, {"id": 2814, "seek": 765944, "start": 7682.839999999999, "end": 7687.719999999999, "text": " We have a function to do one cycle scheduling.", "tokens": [492, 362, 257, 2445, 281, 360, 472, 6586, 29055, 13], "temperature": 0.0, "avg_logprob": -0.15904676613687468, "compression_ratio": 1.677685950413223, "no_speech_prob": 7.5277134783391375e-06}, {"id": 2815, "seek": 768772, "start": 7687.72, "end": 7691.72, "text": " And thanks to Matplotlib, we can check that it all works.", "tokens": [400, 3231, 281, 6789, 564, 310, 38270, 11, 321, 393, 1520, 300, 309, 439, 1985, 13], "temperature": 0.0, "avg_logprob": -0.11947423494779147, "compression_ratio": 1.7097902097902098, "no_speech_prob": 1.2410244380589575e-05}, {"id": 2816, "seek": 768772, "start": 7691.72, "end": 7693.240000000001, "text": " So it's all there.", "tokens": [407, 309, 311, 439, 456, 13], "temperature": 0.0, "avg_logprob": -0.11947423494779147, "compression_ratio": 1.7097902097902098, "no_speech_prob": 1.2410244380589575e-05}, {"id": 2817, "seek": 768772, "start": 7693.240000000001, "end": 7695.16, "text": " This is really the power of the abstraction, coming back", "tokens": [639, 307, 534, 264, 1347, 295, 264, 37765, 11, 1348, 646], "temperature": 0.0, "avg_logprob": -0.11947423494779147, "compression_ratio": 1.7097902097902098, "no_speech_prob": 1.2410244380589575e-05}, {"id": 2818, "seek": 768772, "start": 7695.16, "end": 7699.76, "text": " to one of the earlier questions of earlier today, we started in C.", "tokens": [281, 472, 295, 264, 3071, 1651, 295, 3071, 965, 11, 321, 1409, 294, 383, 13], "temperature": 0.0, "avg_logprob": -0.11947423494779147, "compression_ratio": 1.7097902097902098, "no_speech_prob": 1.2410244380589575e-05}, {"id": 2819, "seek": 768772, "start": 7699.76, "end": 7702.280000000001, "text": " And we were talking about very abstract things like protocols", "tokens": [400, 321, 645, 1417, 466, 588, 12649, 721, 411, 20618], "temperature": 0.0, "avg_logprob": -0.11947423494779147, "compression_ratio": 1.7097902097902098, "no_speech_prob": 1.2410244380589575e-05}, {"id": 2820, "seek": 768772, "start": 7702.280000000001, "end": 7704.08, "text": " and how things fit together.", "tokens": [293, 577, 721, 3318, 1214, 13], "temperature": 0.0, "avg_logprob": -0.11947423494779147, "compression_ratio": 1.7097902097902098, "no_speech_prob": 1.2410244380589575e-05}, {"id": 2821, "seek": 768772, "start": 7704.08, "end": 7706.64, "text": " But when you get those basic things, and this is one", "tokens": [583, 562, 291, 483, 729, 3875, 721, 11, 293, 341, 307, 472], "temperature": 0.0, "avg_logprob": -0.11947423494779147, "compression_ratio": 1.7097902097902098, "no_speech_prob": 1.2410244380589575e-05}, {"id": 2822, "seek": 768772, "start": 7706.64, "end": 7709.4800000000005, "text": " of the reasons why learning Swift goes pretty quickly,", "tokens": [295, 264, 4112, 983, 2539, 25539, 1709, 1238, 2661, 11], "temperature": 0.0, "avg_logprob": -0.11947423494779147, "compression_ratio": 1.7097902097902098, "no_speech_prob": 1.2410244380589575e-05}, {"id": 2823, "seek": 768772, "start": 7709.4800000000005, "end": 7712.04, "text": " you get the basic idea, and now it applies everywhere.", "tokens": [291, 483, 264, 3875, 1558, 11, 293, 586, 309, 13165, 5315, 13], "temperature": 0.0, "avg_logprob": -0.11947423494779147, "compression_ratio": 1.7097902097902098, "no_speech_prob": 1.2410244380589575e-05}, {"id": 2824, "seek": 768772, "start": 7712.04, "end": 7715.240000000001, "text": " Yeah. And here we are doing mixup.", "tokens": [865, 13, 400, 510, 321, 366, 884, 2890, 1010, 13], "temperature": 0.0, "avg_logprob": -0.11947423494779147, "compression_ratio": 1.7097902097902098, "no_speech_prob": 1.2410244380589575e-05}, {"id": 2825, "seek": 771524, "start": 7715.24, "end": 7718.639999999999, "text": " And so now we're in 10.", "tokens": [400, 370, 586, 321, 434, 294, 1266, 13], "temperature": 0.0, "avg_logprob": -0.1235195551163111, "compression_ratio": 1.5815899581589958, "no_speech_prob": 9.51558195083635e-06}, {"id": 2826, "seek": 771524, "start": 7718.639999999999, "end": 7721.719999999999, "text": " And here we are doing label smoothing.", "tokens": [400, 510, 321, 366, 884, 7645, 899, 6259, 571, 13], "temperature": 0.0, "avg_logprob": -0.1235195551163111, "compression_ratio": 1.5815899581589958, "no_speech_prob": 9.51558195083635e-06}, {"id": 2827, "seek": 771524, "start": 7721.719999999999, "end": 7725.24, "text": " And you see, it's really very similar looking code", "tokens": [400, 291, 536, 11, 309, 311, 534, 588, 2531, 1237, 3089], "temperature": 0.0, "avg_logprob": -0.1235195551163111, "compression_ratio": 1.5815899581589958, "no_speech_prob": 9.51558195083635e-06}, {"id": 2828, "seek": 771524, "start": 7725.24, "end": 7726.5599999999995, "text": " to what we have in PyTorch.", "tokens": [281, 437, 321, 362, 294, 9953, 51, 284, 339, 13], "temperature": 0.0, "avg_logprob": -0.1235195551163111, "compression_ratio": 1.5815899581589958, "no_speech_prob": 9.51558195083635e-06}, {"id": 2829, "seek": 771524, "start": 7726.5599999999995, "end": 7730.5599999999995, "text": " So then by the time we get to 11, other than this hacky work", "tokens": [407, 550, 538, 264, 565, 321, 483, 281, 2975, 11, 661, 813, 341, 10339, 88, 589], "temperature": 0.0, "avg_logprob": -0.1235195551163111, "compression_ratio": 1.5815899581589958, "no_speech_prob": 9.51558195083635e-06}, {"id": 2830, "seek": 771524, "start": 7730.5599999999995, "end": 7734.4, "text": " around for the fact that we can't do control flow differentiation", "tokens": [926, 337, 264, 1186, 300, 321, 393, 380, 360, 1969, 3095, 38902], "temperature": 0.0, "avg_logprob": -0.1235195551163111, "compression_ratio": 1.5815899581589958, "no_speech_prob": 9.51558195083635e-06}, {"id": 2831, "seek": 771524, "start": 7734.4, "end": 7738.08, "text": " yet, coming very soon, our Xresnet,", "tokens": [1939, 11, 1348, 588, 2321, 11, 527, 1783, 495, 7129, 11], "temperature": 0.0, "avg_logprob": -0.1235195551163111, "compression_ratio": 1.5815899581589958, "no_speech_prob": 9.51558195083635e-06}, {"id": 2832, "seek": 771524, "start": 7738.08, "end": 7740.599999999999, "text": " as you've seen, looks very similar.", "tokens": [382, 291, 600, 1612, 11, 1542, 588, 2531, 13], "temperature": 0.0, "avg_logprob": -0.1235195551163111, "compression_ratio": 1.5815899581589958, "no_speech_prob": 9.51558195083635e-06}, {"id": 2833, "seek": 771524, "start": 7740.599999999999, "end": 7743.5199999999995, "text": " And we can train it in the usual way.", "tokens": [400, 321, 393, 3847, 309, 294, 264, 7713, 636, 13], "temperature": 0.0, "avg_logprob": -0.1235195551163111, "compression_ratio": 1.5815899581589958, "no_speech_prob": 9.51558195083635e-06}, {"id": 2834, "seek": 774352, "start": 7743.52, "end": 7745.72, "text": " And there we go.", "tokens": [400, 456, 321, 352, 13], "temperature": 0.0, "avg_logprob": -0.1567979147939971, "compression_ratio": 1.8274509803921568, "no_speech_prob": 9.221796062774956e-06}, {"id": 2835, "seek": 774352, "start": 7745.72, "end": 7749.8, "text": " So we've kind of started with nothing.", "tokens": [407, 321, 600, 733, 295, 1409, 365, 1825, 13], "temperature": 0.0, "avg_logprob": -0.1567979147939971, "compression_ratio": 1.8274509803921568, "no_speech_prob": 9.221796062774956e-06}, {"id": 2836, "seek": 774352, "start": 7749.8, "end": 7753.72, "text": " And Chris spent a couple of decades for us,", "tokens": [400, 6688, 4418, 257, 1916, 295, 7878, 337, 505, 11], "temperature": 0.0, "avg_logprob": -0.1567979147939971, "compression_ratio": 1.8274509803921568, "no_speech_prob": 9.221796062774956e-06}, {"id": 2837, "seek": 774352, "start": 7753.72, "end": 7756.4800000000005, "text": " first of all building a compiler framework, and then a compiler,", "tokens": [700, 295, 439, 2390, 257, 31958, 8388, 11, 293, 550, 257, 31958, 11], "temperature": 0.0, "avg_logprob": -0.1567979147939971, "compression_ratio": 1.8274509803921568, "no_speech_prob": 9.221796062774956e-06}, {"id": 2838, "seek": 774352, "start": 7756.4800000000005, "end": 7758.360000000001, "text": " and then a C compiler, and then a C++ compiler,", "tokens": [293, 550, 257, 383, 31958, 11, 293, 550, 257, 383, 25472, 31958, 11], "temperature": 0.0, "avg_logprob": -0.1567979147939971, "compression_ratio": 1.8274509803921568, "no_speech_prob": 9.221796062774956e-06}, {"id": 2839, "seek": 774352, "start": 7758.360000000001, "end": 7760.68, "text": " and then a new language, and then a compiler for the language.", "tokens": [293, 550, 257, 777, 2856, 11, 293, 550, 257, 31958, 337, 264, 2856, 13], "temperature": 0.0, "avg_logprob": -0.1567979147939971, "compression_ratio": 1.8274509803921568, "no_speech_prob": 9.221796062774956e-06}, {"id": 2840, "seek": 774352, "start": 7760.68, "end": 7762.240000000001, "text": " And then we came in and.", "tokens": [400, 550, 321, 1361, 294, 293, 13], "temperature": 0.0, "avg_logprob": -0.1567979147939971, "compression_ratio": 1.8274509803921568, "no_speech_prob": 9.221796062774956e-06}, {"id": 2841, "seek": 774352, "start": 7762.240000000001, "end": 7764.92, "text": " Let me correct you on one minor detail here.", "tokens": [961, 385, 3006, 291, 322, 472, 6696, 2607, 510, 13], "temperature": 0.0, "avg_logprob": -0.1567979147939971, "compression_ratio": 1.8274509803921568, "no_speech_prob": 9.221796062774956e-06}, {"id": 2842, "seek": 774352, "start": 7764.92, "end": 7766.240000000001, "text": " Some people helped you?", "tokens": [2188, 561, 4254, 291, 30], "temperature": 0.0, "avg_logprob": -0.1567979147939971, "compression_ratio": 1.8274509803921568, "no_speech_prob": 9.221796062774956e-06}, {"id": 2843, "seek": 774352, "start": 7766.240000000001, "end": 7769.4800000000005, "text": " Yeah. Like I did not build all this stuff.", "tokens": [865, 13, 1743, 286, 630, 406, 1322, 439, 341, 1507, 13], "temperature": 0.0, "avg_logprob": -0.1567979147939971, "compression_ratio": 1.8274509803921568, "no_speech_prob": 9.221796062774956e-06}, {"id": 2844, "seek": 774352, "start": 7769.4800000000005, "end": 7772.84, "text": " Like amazing people that I got to work with built all", "tokens": [1743, 2243, 561, 300, 286, 658, 281, 589, 365, 3094, 439], "temperature": 0.0, "avg_logprob": -0.1567979147939971, "compression_ratio": 1.8274509803921568, "no_speech_prob": 9.221796062774956e-06}, {"id": 2845, "seek": 777284, "start": 7772.84, "end": 7774.0, "text": " of this stuff.", "tokens": [295, 341, 1507, 13], "temperature": 0.0, "avg_logprob": -0.16839200800115411, "compression_ratio": 1.5416666666666667, "no_speech_prob": 2.2122620066511445e-05}, {"id": 2846, "seek": 777284, "start": 7774.0, "end": 7777.4800000000005, "text": " So and likewise, like all of these workbooks were built", "tokens": [407, 293, 32407, 11, 411, 439, 295, 613, 589, 15170, 645, 3094], "temperature": 0.0, "avg_logprob": -0.16839200800115411, "compression_ratio": 1.5416666666666667, "no_speech_prob": 2.2122620066511445e-05}, {"id": 2847, "seek": 777284, "start": 7777.4800000000005, "end": 7779.92, "text": " by amazing people that we were lucky enough to work with.", "tokens": [538, 2243, 561, 300, 321, 645, 6356, 1547, 281, 589, 365, 13], "temperature": 0.0, "avg_logprob": -0.16839200800115411, "compression_ratio": 1.5416666666666667, "no_speech_prob": 2.2122620066511445e-05}, {"id": 2848, "seek": 777284, "start": 7779.92, "end": 7781.4400000000005, "text": " Yeah, absolutely.", "tokens": [865, 11, 3122, 13], "temperature": 0.0, "avg_logprob": -0.16839200800115411, "compression_ratio": 1.5416666666666667, "no_speech_prob": 2.2122620066511445e-05}, {"id": 2849, "seek": 777284, "start": 7781.4400000000005, "end": 7784.28, "text": " So that's all happened.", "tokens": [407, 300, 311, 439, 2011, 13], "temperature": 0.0, "avg_logprob": -0.16839200800115411, "compression_ratio": 1.5416666666666667, "no_speech_prob": 2.2122620066511445e-05}, {"id": 2850, "seek": 777284, "start": 7784.28, "end": 7790.68, "text": " And then let's look at, so like it's kind of like, thanks to all", "tokens": [400, 550, 718, 311, 574, 412, 11, 370, 411, 309, 311, 733, 295, 411, 11, 3231, 281, 439], "temperature": 0.0, "avg_logprob": -0.16839200800115411, "compression_ratio": 1.5416666666666667, "no_speech_prob": 2.2122620066511445e-05}, {"id": 2851, "seek": 777284, "start": 7790.68, "end": 7795.68, "text": " that work, we then got to a point where 18 months ago,", "tokens": [300, 589, 11, 321, 550, 658, 281, 257, 935, 689, 2443, 2493, 2057, 11], "temperature": 0.0, "avg_logprob": -0.16839200800115411, "compression_ratio": 1.5416666666666667, "no_speech_prob": 2.2122620066511445e-05}, {"id": 2852, "seek": 777284, "start": 7795.68, "end": 7798.4400000000005, "text": " you and I met, you had just joined Google.", "tokens": [291, 293, 286, 1131, 11, 291, 632, 445, 6869, 3329, 13], "temperature": 0.0, "avg_logprob": -0.16839200800115411, "compression_ratio": 1.5416666666666667, "no_speech_prob": 2.2122620066511445e-05}, {"id": 2853, "seek": 777284, "start": 7798.4400000000005, "end": 7800.52, "text": " We were at the TensorFlow Symposium.", "tokens": [492, 645, 412, 264, 37624, 3902, 2455, 42161, 13], "temperature": 0.0, "avg_logprob": -0.16839200800115411, "compression_ratio": 1.5416666666666667, "no_speech_prob": 2.2122620066511445e-05}, {"id": 2854, "seek": 780052, "start": 7800.52, "end": 7802.88, "text": " And I said, what are you doing here?", "tokens": [400, 286, 848, 11, 437, 366, 291, 884, 510, 30], "temperature": 0.0, "avg_logprob": -0.13161903907512795, "compression_ratio": 1.7317073170731707, "no_speech_prob": 3.023877798113972e-05}, {"id": 2855, "seek": 780052, "start": 7802.88, "end": 7804.8, "text": " I thought you're a compiler guy.", "tokens": [286, 1194, 291, 434, 257, 31958, 2146, 13], "temperature": 0.0, "avg_logprob": -0.13161903907512795, "compression_ratio": 1.7317073170731707, "no_speech_prob": 3.023877798113972e-05}, {"id": 2856, "seek": 780052, "start": 7804.8, "end": 7807.400000000001, "text": " And he said, oh, well, now I'm going to be a deep learning guy.", "tokens": [400, 415, 848, 11, 1954, 11, 731, 11, 586, 286, 478, 516, 281, 312, 257, 2452, 2539, 2146, 13], "temperature": 0.0, "avg_logprob": -0.13161903907512795, "compression_ratio": 1.7317073170731707, "no_speech_prob": 3.023877798113972e-05}, {"id": 2857, "seek": 780052, "start": 7807.400000000001, "end": 7809.4800000000005, "text": " Well, deep learning sounds really cool.", "tokens": [1042, 11, 2452, 2539, 3263, 534, 1627, 13], "temperature": 0.0, "avg_logprob": -0.13161903907512795, "compression_ratio": 1.7317073170731707, "no_speech_prob": 3.023877798113972e-05}, {"id": 2858, "seek": 780052, "start": 7809.4800000000005, "end": 7812.120000000001, "text": " Yeah. And he hadn't told me it was uncool yet.", "tokens": [865, 13, 400, 415, 8782, 380, 1907, 385, 309, 390, 6219, 1092, 1939, 13], "temperature": 0.0, "avg_logprob": -0.13161903907512795, "compression_ratio": 1.7317073170731707, "no_speech_prob": 3.023877798113972e-05}, {"id": 2859, "seek": 780052, "start": 7812.120000000001, "end": 7815.68, "text": " Yeah. So then I complained about how terrible everything was.", "tokens": [865, 13, 407, 550, 286, 33951, 466, 577, 6237, 1203, 390, 13], "temperature": 0.0, "avg_logprob": -0.13161903907512795, "compression_ratio": 1.7317073170731707, "no_speech_prob": 3.023877798113972e-05}, {"id": 2860, "seek": 780052, "start": 7815.68, "end": 7819.96, "text": " And Chris said, so Chris said, I've got to create a new framework.", "tokens": [400, 6688, 848, 11, 370, 6688, 848, 11, 286, 600, 658, 281, 1884, 257, 777, 8388, 13], "temperature": 0.0, "avg_logprob": -0.13161903907512795, "compression_ratio": 1.7317073170731707, "no_speech_prob": 3.023877798113972e-05}, {"id": 2861, "seek": 780052, "start": 7819.96, "end": 7821.88, "text": " And I was like, we need a lot more than a new framework.", "tokens": [400, 286, 390, 411, 11, 321, 643, 257, 688, 544, 813, 257, 777, 8388, 13], "temperature": 0.0, "avg_logprob": -0.13161903907512795, "compression_ratio": 1.7317073170731707, "no_speech_prob": 3.023877798113972e-05}, {"id": 2862, "seek": 780052, "start": 7821.88, "end": 7824.56, "text": " You know, I described the problems that we've talked", "tokens": [509, 458, 11, 286, 7619, 264, 2740, 300, 321, 600, 2825], "temperature": 0.0, "avg_logprob": -0.13161903907512795, "compression_ratio": 1.7317073170731707, "no_speech_prob": 3.023877798113972e-05}, {"id": 2863, "seek": 780052, "start": 7824.56, "end": 7826.8, "text": " about with like where Python's up to.", "tokens": [466, 365, 411, 689, 15329, 311, 493, 281, 13], "temperature": 0.0, "avg_logprob": -0.13161903907512795, "compression_ratio": 1.7317073170731707, "no_speech_prob": 3.023877798113972e-05}, {"id": 2864, "seek": 782680, "start": 7826.8, "end": 7830.6, "text": " Chris said, well, I might actually be creating a new language", "tokens": [6688, 848, 11, 731, 11, 286, 1062, 767, 312, 4084, 257, 777, 2856], "temperature": 0.0, "avg_logprob": -0.12597262964839429, "compression_ratio": 1.6140350877192982, "no_speech_prob": 4.936656296194997e-06}, {"id": 2865, "seek": 782680, "start": 7830.6, "end": 7833.04, "text": " for deep learning, which I was very excited about", "tokens": [337, 2452, 2539, 11, 597, 286, 390, 588, 2919, 466], "temperature": 0.0, "avg_logprob": -0.12597262964839429, "compression_ratio": 1.6140350877192982, "no_speech_prob": 4.936656296194997e-06}, {"id": 2866, "seek": 782680, "start": 7833.04, "end": 7834.320000000001, "text": " because I'm totally not happy", "tokens": [570, 286, 478, 3879, 406, 2055], "temperature": 0.0, "avg_logprob": -0.12597262964839429, "compression_ratio": 1.6140350877192982, "no_speech_prob": 4.936656296194997e-06}, {"id": 2867, "seek": 782680, "start": 7834.320000000001, "end": 7837.52, "text": " with the current languages we have for deep learning.", "tokens": [365, 264, 2190, 8650, 321, 362, 337, 2452, 2539, 13], "temperature": 0.0, "avg_logprob": -0.12597262964839429, "compression_ratio": 1.6140350877192982, "no_speech_prob": 4.936656296194997e-06}, {"id": 2868, "seek": 782680, "start": 7837.52, "end": 7841.52, "text": " So then 12 months ago, I guess we started asking this question of,", "tokens": [407, 550, 2272, 2493, 2057, 11, 286, 2041, 321, 1409, 3365, 341, 1168, 295, 11], "temperature": 0.0, "avg_logprob": -0.12597262964839429, "compression_ratio": 1.6140350877192982, "no_speech_prob": 4.936656296194997e-06}, {"id": 2869, "seek": 782680, "start": 7841.52, "end": 7846.56, "text": " like, what if high level API design actually influenced the creation", "tokens": [411, 11, 437, 498, 1090, 1496, 9362, 1715, 767, 15269, 264, 8016], "temperature": 0.0, "avg_logprob": -0.12597262964839429, "compression_ratio": 1.6140350877192982, "no_speech_prob": 4.936656296194997e-06}, {"id": 2870, "seek": 782680, "start": 7846.56, "end": 7848.68, "text": " of a differentiable programming language?", "tokens": [295, 257, 819, 9364, 9410, 2856, 30], "temperature": 0.0, "avg_logprob": -0.12597262964839429, "compression_ratio": 1.6140350877192982, "no_speech_prob": 4.936656296194997e-06}, {"id": 2871, "seek": 782680, "start": 7848.68, "end": 7850.0, "text": " What would that mean?", "tokens": [708, 576, 300, 914, 30], "temperature": 0.0, "avg_logprob": -0.12597262964839429, "compression_ratio": 1.6140350877192982, "no_speech_prob": 4.936656296194997e-06}, {"id": 2872, "seek": 782680, "start": 7850.0, "end": 7855.320000000001, "text": " And so to me, one of the dreams is when you connect the building", "tokens": [400, 370, 281, 385, 11, 472, 295, 264, 7505, 307, 562, 291, 1745, 264, 2390], "temperature": 0.0, "avg_logprob": -0.12597262964839429, "compression_ratio": 1.6140350877192982, "no_speech_prob": 4.936656296194997e-06}, {"id": 2873, "seek": 785532, "start": 7855.32, "end": 7861.92, "text": " of a thing with teaching of a thing with using a thing in reality,", "tokens": [295, 257, 551, 365, 4571, 295, 257, 551, 365, 1228, 257, 551, 294, 4103, 11], "temperature": 0.0, "avg_logprob": -0.13497977681679302, "compression_ratio": 1.7268518518518519, "no_speech_prob": 1.4968209143262357e-05}, {"id": 2874, "seek": 785532, "start": 7861.92, "end": 7863.24, "text": " and one of the beautiful things", "tokens": [293, 472, 295, 264, 2238, 721], "temperature": 0.0, "avg_logprob": -0.13497977681679302, "compression_ratio": 1.7268518518518519, "no_speech_prob": 1.4968209143262357e-05}, {"id": 2875, "seek": 785532, "start": 7863.24, "end": 7867.0, "text": " about Fast AI is pulling together both building the framework,", "tokens": [466, 15968, 7318, 307, 8407, 1214, 1293, 2390, 264, 8388, 11], "temperature": 0.0, "avg_logprob": -0.13497977681679302, "compression_ratio": 1.7268518518518519, "no_speech_prob": 1.4968209143262357e-05}, {"id": 2876, "seek": 785532, "start": 7867.0, "end": 7869.5599999999995, "text": " teaching the framework, and doing research with the framework.", "tokens": [4571, 264, 8388, 11, 293, 884, 2132, 365, 264, 8388, 13], "temperature": 0.0, "avg_logprob": -0.13497977681679302, "compression_ratio": 1.7268518518518519, "no_speech_prob": 1.4968209143262357e-05}, {"id": 2877, "seek": 785532, "start": 7869.5599999999995, "end": 7874.88, "text": " Yeah. So next time we caught up,", "tokens": [865, 13, 407, 958, 565, 321, 5415, 493, 11], "temperature": 0.0, "avg_logprob": -0.13497977681679302, "compression_ratio": 1.7268518518518519, "no_speech_prob": 1.4968209143262357e-05}, {"id": 2878, "seek": 785532, "start": 7874.88, "end": 7879.0, "text": " I said maybe we should try writing Fast AI in Swift.", "tokens": [286, 848, 1310, 321, 820, 853, 3579, 15968, 7318, 294, 25539, 13], "temperature": 0.0, "avg_logprob": -0.13497977681679302, "compression_ratio": 1.7268518518518519, "no_speech_prob": 1.4968209143262357e-05}, {"id": 2879, "seek": 785532, "start": 7879.0, "end": 7882.84, "text": " And you're like, we could do that, I guess.", "tokens": [400, 291, 434, 411, 11, 321, 727, 360, 300, 11, 286, 2041, 13], "temperature": 0.0, "avg_logprob": -0.13497977681679302, "compression_ratio": 1.7268518518518519, "no_speech_prob": 1.4968209143262357e-05}, {"id": 2880, "seek": 785532, "start": 7882.84, "end": 7884.12, "text": " I was like, great.", "tokens": [286, 390, 411, 11, 869, 13], "temperature": 0.0, "avg_logprob": -0.13497977681679302, "compression_ratio": 1.7268518518518519, "no_speech_prob": 1.4968209143262357e-05}, {"id": 2881, "seek": 788412, "start": 7884.12, "end": 7885.72, "text": " I think the one thing before this, I'm like, hey,", "tokens": [286, 519, 264, 472, 551, 949, 341, 11, 286, 478, 411, 11, 4177, 11], "temperature": 0.0, "avg_logprob": -0.14735286283177257, "compression_ratio": 1.657243816254417, "no_speech_prob": 1.4061928595765494e-05}, {"id": 2882, "seek": 788412, "start": 7885.72, "end": 7887.08, "text": " Jeremy, it's starting to work.", "tokens": [17809, 11, 309, 311, 2891, 281, 589, 13], "temperature": 0.0, "avg_logprob": -0.14735286283177257, "compression_ratio": 1.657243816254417, "no_speech_prob": 1.4061928595765494e-05}, {"id": 2883, "seek": 788412, "start": 7887.08, "end": 7888.4, "text": " Yeah. And he says, oh, cool.", "tokens": [865, 13, 400, 415, 1619, 11, 1954, 11, 1627, 13], "temperature": 0.0, "avg_logprob": -0.14735286283177257, "compression_ratio": 1.657243816254417, "no_speech_prob": 1.4061928595765494e-05}, {"id": 2884, "seek": 788412, "start": 7888.4, "end": 7889.68, "text": " Can we ship it yet?", "tokens": [1664, 321, 5374, 309, 1939, 30], "temperature": 0.0, "avg_logprob": -0.14735286283177257, "compression_ratio": 1.657243816254417, "no_speech_prob": 1.4061928595765494e-05}, {"id": 2885, "seek": 788412, "start": 7889.68, "end": 7892.5599999999995, "text": " I'm like, it's starting to work.", "tokens": [286, 478, 411, 11, 309, 311, 2891, 281, 589, 13], "temperature": 0.0, "avg_logprob": -0.14735286283177257, "compression_ratio": 1.657243816254417, "no_speech_prob": 1.4061928595765494e-05}, {"id": 2886, "seek": 788412, "start": 7892.5599999999995, "end": 7894.0, "text": " And it's a high level API.", "tokens": [400, 309, 311, 257, 1090, 1496, 9362, 13], "temperature": 0.0, "avg_logprob": -0.14735286283177257, "compression_ratio": 1.657243816254417, "no_speech_prob": 1.4061928595765494e-05}, {"id": 2887, "seek": 788412, "start": 7894.0, "end": 7896.48, "text": " Yeah. So let's announce a course where we teach people", "tokens": [865, 13, 407, 718, 311, 7478, 257, 1164, 689, 321, 2924, 561], "temperature": 0.0, "avg_logprob": -0.14735286283177257, "compression_ratio": 1.657243816254417, "no_speech_prob": 1.4061928595765494e-05}, {"id": 2888, "seek": 788412, "start": 7896.48, "end": 7899.08, "text": " to use this thing that doesn't exist yet.", "tokens": [281, 764, 341, 551, 300, 1177, 380, 2514, 1939, 13], "temperature": 0.0, "avg_logprob": -0.14735286283177257, "compression_ratio": 1.657243816254417, "no_speech_prob": 1.4061928595765494e-05}, {"id": 2889, "seek": 788412, "start": 7899.08, "end": 7901.84, "text": " And I think I said naively, I like deadlines.", "tokens": [400, 286, 519, 286, 848, 1667, 3413, 11, 286, 411, 37548, 13], "temperature": 0.0, "avg_logprob": -0.14735286283177257, "compression_ratio": 1.657243816254417, "no_speech_prob": 1.4061928595765494e-05}, {"id": 2890, "seek": 788412, "start": 7901.84, "end": 7903.12, "text": " Deadlines are a good thing.", "tokens": [12550, 11045, 366, 257, 665, 551, 13], "temperature": 0.0, "avg_logprob": -0.14735286283177257, "compression_ratio": 1.657243816254417, "no_speech_prob": 1.4061928595765494e-05}, {"id": 2891, "seek": 788412, "start": 7903.12, "end": 7905.5199999999995, "text": " They force progress to happen.", "tokens": [814, 3464, 4205, 281, 1051, 13], "temperature": 0.0, "avg_logprob": -0.14735286283177257, "compression_ratio": 1.657243816254417, "no_speech_prob": 1.4061928595765494e-05}, {"id": 2892, "seek": 788412, "start": 7905.5199999999995, "end": 7909.48, "text": " So then one month ago, we created a GitHub repo,", "tokens": [407, 550, 472, 1618, 2057, 11, 321, 2942, 257, 23331, 49040, 11], "temperature": 0.0, "avg_logprob": -0.14735286283177257, "compression_ratio": 1.657243816254417, "no_speech_prob": 1.4061928595765494e-05}, {"id": 2893, "seek": 788412, "start": 7909.48, "end": 7911.8, "text": " and we put a notebook in it.", "tokens": [293, 321, 829, 257, 21060, 294, 309, 13], "temperature": 0.0, "avg_logprob": -0.14735286283177257, "compression_ratio": 1.657243816254417, "no_speech_prob": 1.4061928595765494e-05}, {"id": 2894, "seek": 791180, "start": 7911.8, "end": 7914.68, "text": " And we got the last TensorFlow Dev Summit, we sat in a room", "tokens": [400, 321, 658, 264, 1036, 37624, 9096, 28726, 11, 321, 3227, 294, 257, 1808], "temperature": 0.0, "avg_logprob": -0.14964218962964393, "compression_ratio": 1.6426229508196721, "no_speech_prob": 5.093297659186646e-06}, {"id": 2895, "seek": 791180, "start": 7914.68, "end": 7916.28, "text": " with the Swift with TensorFlow team,", "tokens": [365, 264, 25539, 365, 37624, 1469, 11], "temperature": 0.0, "avg_logprob": -0.14964218962964393, "compression_ratio": 1.6426229508196721, "no_speech_prob": 5.093297659186646e-06}, {"id": 2896, "seek": 791180, "start": 7916.28, "end": 7919.76, "text": " and we wrote the first line of the first notebook.", "tokens": [293, 321, 4114, 264, 700, 1622, 295, 264, 700, 21060, 13], "temperature": 0.0, "avg_logprob": -0.14964218962964393, "compression_ratio": 1.6426229508196721, "no_speech_prob": 5.093297659186646e-06}, {"id": 2897, "seek": 791180, "start": 7919.76, "end": 7923.12, "text": " And you told your team, hey, we're going to write all", "tokens": [400, 291, 1907, 428, 1469, 11, 4177, 11, 321, 434, 516, 281, 2464, 439], "temperature": 0.0, "avg_logprob": -0.14964218962964393, "compression_ratio": 1.6426229508196721, "no_speech_prob": 5.093297659186646e-06}, {"id": 2898, "seek": 791180, "start": 7923.12, "end": 7924.56, "text": " of the Python notebooks from scratch.", "tokens": [295, 264, 15329, 43782, 490, 8459, 13], "temperature": 0.0, "avg_logprob": -0.14964218962964393, "compression_ratio": 1.6426229508196721, "no_speech_prob": 5.093297659186646e-06}, {"id": 2899, "seek": 791180, "start": 7924.56, "end": 7926.0, "text": " And they basically said, what?", "tokens": [400, 436, 1936, 848, 11, 437, 30], "temperature": 0.0, "avg_logprob": -0.14964218962964393, "compression_ratio": 1.6426229508196721, "no_speech_prob": 5.093297659186646e-06}, {"id": 2900, "seek": 791180, "start": 7926.0, "end": 7929.4800000000005, "text": " What have you got us into?", "tokens": [708, 362, 291, 658, 505, 666, 30], "temperature": 0.0, "avg_logprob": -0.14964218962964393, "compression_ratio": 1.6426229508196721, "no_speech_prob": 5.093297659186646e-06}, {"id": 2901, "seek": 791180, "start": 7929.4800000000005, "end": 7932.08, "text": " So and I think we've learned a lot.", "tokens": [407, 293, 286, 519, 321, 600, 3264, 257, 688, 13], "temperature": 0.0, "avg_logprob": -0.14964218962964393, "compression_ratio": 1.6426229508196721, "no_speech_prob": 5.093297659186646e-06}, {"id": 2902, "seek": 791180, "start": 7932.08, "end": 7935.24, "text": " Yeah. So I mean, to me, the question is still this,", "tokens": [865, 13, 407, 286, 914, 11, 281, 385, 11, 264, 1168, 307, 920, 341, 11], "temperature": 0.0, "avg_logprob": -0.14964218962964393, "compression_ratio": 1.6426229508196721, "no_speech_prob": 5.093297659186646e-06}, {"id": 2903, "seek": 791180, "start": 7935.24, "end": 7937.8, "text": " which is what if high level API design was able", "tokens": [597, 307, 437, 498, 1090, 1496, 9362, 1715, 390, 1075], "temperature": 0.0, "avg_logprob": -0.14964218962964393, "compression_ratio": 1.6426229508196721, "no_speech_prob": 5.093297659186646e-06}, {"id": 2904, "seek": 791180, "start": 7937.8, "end": 7939.12, "text": " to influence the creation", "tokens": [281, 6503, 264, 8016], "temperature": 0.0, "avg_logprob": -0.14964218962964393, "compression_ratio": 1.6426229508196721, "no_speech_prob": 5.093297659186646e-06}, {"id": 2905, "seek": 791180, "start": 7939.12, "end": 7940.52, "text": " of a differentiable programming language?", "tokens": [295, 257, 819, 9364, 9410, 2856, 30], "temperature": 0.0, "avg_logprob": -0.14964218962964393, "compression_ratio": 1.6426229508196721, "no_speech_prob": 5.093297659186646e-06}, {"id": 2906, "seek": 794052, "start": 7940.52, "end": 7943.240000000001, "text": " And I guess we've started answering that question.", "tokens": [400, 286, 2041, 321, 600, 1409, 13430, 300, 1168, 13], "temperature": 0.0, "avg_logprob": -0.09000674620369412, "compression_ratio": 1.8275862068965518, "no_speech_prob": 1.1475825886009261e-05}, {"id": 2907, "seek": 794052, "start": 7943.240000000001, "end": 7944.56, "text": " Yeah. I don't think we're there yet.", "tokens": [865, 13, 286, 500, 380, 519, 321, 434, 456, 1939, 13], "temperature": 0.0, "avg_logprob": -0.09000674620369412, "compression_ratio": 1.8275862068965518, "no_speech_prob": 1.1475825886009261e-05}, {"id": 2908, "seek": 794052, "start": 7944.56, "end": 7945.88, "text": " I mean, I think that what we've learned even", "tokens": [286, 914, 11, 286, 519, 300, 437, 321, 600, 3264, 754], "temperature": 0.0, "avg_logprob": -0.09000674620369412, "compression_ratio": 1.8275862068965518, "no_speech_prob": 1.1475825886009261e-05}, {"id": 2909, "seek": 794052, "start": 7945.88, "end": 7947.200000000001, "text": " over the last month is", "tokens": [670, 264, 1036, 1618, 307], "temperature": 0.0, "avg_logprob": -0.09000674620369412, "compression_ratio": 1.8275862068965518, "no_speech_prob": 1.1475825886009261e-05}, {"id": 2910, "seek": 794052, "start": 7947.200000000001, "end": 7949.72, "text": " that there's still a really long way to go.", "tokens": [300, 456, 311, 920, 257, 534, 938, 636, 281, 352, 13], "temperature": 0.0, "avg_logprob": -0.09000674620369412, "compression_ratio": 1.8275862068965518, "no_speech_prob": 1.1475825886009261e-05}, {"id": 2911, "seek": 794052, "start": 7949.72, "end": 7951.52, "text": " And I think this is the kind of thing that really benefits", "tokens": [400, 286, 519, 341, 307, 264, 733, 295, 551, 300, 534, 5311], "temperature": 0.0, "avg_logprob": -0.09000674620369412, "compression_ratio": 1.8275862068965518, "no_speech_prob": 1.1475825886009261e-05}, {"id": 2912, "seek": 794052, "start": 7951.52, "end": 7954.040000000001, "text": " from different kinds of people and perspectives", "tokens": [490, 819, 3685, 295, 561, 293, 16766], "temperature": 0.0, "avg_logprob": -0.09000674620369412, "compression_ratio": 1.8275862068965518, "no_speech_prob": 1.1475825886009261e-05}, {"id": 2913, "seek": 794052, "start": 7954.040000000001, "end": 7956.52, "text": " and a different set of challenges.", "tokens": [293, 257, 819, 992, 295, 4759, 13], "temperature": 0.0, "avg_logprob": -0.09000674620369412, "compression_ratio": 1.8275862068965518, "no_speech_prob": 1.1475825886009261e-05}, {"id": 2914, "seek": 794052, "start": 7956.52, "end": 7960.96, "text": " And just today and yesterday, working on data blocks,", "tokens": [400, 445, 965, 293, 5186, 11, 1364, 322, 1412, 8474, 11], "temperature": 0.0, "avg_logprob": -0.09000674620369412, "compression_ratio": 1.8275862068965518, "no_speech_prob": 1.1475825886009261e-05}, {"id": 2915, "seek": 794052, "start": 7960.96, "end": 7963.0, "text": " a breakthrough happened where there's an entirely new way", "tokens": [257, 22397, 2011, 689, 456, 311, 364, 7696, 777, 636], "temperature": 0.0, "avg_logprob": -0.09000674620369412, "compression_ratio": 1.8275862068965518, "no_speech_prob": 1.1475825886009261e-05}, {"id": 2916, "seek": 794052, "start": 7963.0, "end": 7966.0, "text": " to reimagine it as this functional composition", "tokens": [281, 33433, 10260, 309, 382, 341, 11745, 12686], "temperature": 0.0, "avg_logprob": -0.09000674620369412, "compression_ratio": 1.8275862068965518, "no_speech_prob": 1.1475825886009261e-05}, {"id": 2917, "seek": 794052, "start": 7966.0, "end": 7967.64, "text": " that solves a lot of problems.", "tokens": [300, 39890, 257, 688, 295, 2740, 13], "temperature": 0.0, "avg_logprob": -0.09000674620369412, "compression_ratio": 1.8275862068965518, "no_speech_prob": 1.1475825886009261e-05}, {"id": 2918, "seek": 794052, "start": 7967.64, "end": 7969.8, "text": " And a lot of those kinds of breakthroughs, I think,", "tokens": [400, 257, 688, 295, 729, 3685, 295, 22397, 82, 11, 286, 519, 11], "temperature": 0.0, "avg_logprob": -0.09000674620369412, "compression_ratio": 1.8275862068965518, "no_speech_prob": 1.1475825886009261e-05}, {"id": 2919, "seek": 796980, "start": 7969.8, "end": 7971.4400000000005, "text": " are still just waiting to happen.", "tokens": [366, 920, 445, 3806, 281, 1051, 13], "temperature": 0.0, "avg_logprob": -0.15233446570003734, "compression_ratio": 1.6782006920415224, "no_speech_prob": 7.40970153856324e-06}, {"id": 2920, "seek": 796980, "start": 7971.4400000000005, "end": 7973.52, "text": " I mean, it's been an interesting process for me, Chris,", "tokens": [286, 914, 11, 309, 311, 668, 364, 1880, 1399, 337, 385, 11, 6688, 11], "temperature": 0.0, "avg_logprob": -0.15233446570003734, "compression_ratio": 1.6782006920415224, "no_speech_prob": 7.40970153856324e-06}, {"id": 2921, "seek": 796980, "start": 7973.52, "end": 7975.360000000001, "text": " like because we decided to go back", "tokens": [411, 570, 321, 3047, 281, 352, 646], "temperature": 0.0, "avg_logprob": -0.15233446570003734, "compression_ratio": 1.6782006920415224, "no_speech_prob": 7.40970153856324e-06}, {"id": 2922, "seek": 796980, "start": 7975.360000000001, "end": 7978.320000000001, "text": " and redo the Python library from scratch.", "tokens": [293, 29956, 264, 15329, 6405, 490, 8459, 13], "temperature": 0.0, "avg_logprob": -0.15233446570003734, "compression_ratio": 1.6782006920415224, "no_speech_prob": 7.40970153856324e-06}, {"id": 2923, "seek": 796980, "start": 7978.320000000001, "end": 7981.76, "text": " And as we did it, we were thinking, like,", "tokens": [400, 382, 321, 630, 309, 11, 321, 645, 1953, 11, 411, 11], "temperature": 0.0, "avg_logprob": -0.15233446570003734, "compression_ratio": 1.6782006920415224, "no_speech_prob": 7.40970153856324e-06}, {"id": 2924, "seek": 796980, "start": 7981.76, "end": 7984.76, "text": " what would this look like when we get to Swift?", "tokens": [437, 576, 341, 574, 411, 562, 321, 483, 281, 25539, 30], "temperature": 0.0, "avg_logprob": -0.15233446570003734, "compression_ratio": 1.6782006920415224, "no_speech_prob": 7.40970153856324e-06}, {"id": 2925, "seek": 796980, "start": 7984.76, "end": 7987.24, "text": " And so we, you know, even as we did the Python library,", "tokens": [400, 370, 321, 11, 291, 458, 11, 754, 382, 321, 630, 264, 15329, 6405, 11], "temperature": 0.0, "avg_logprob": -0.15233446570003734, "compression_ratio": 1.6782006920415224, "no_speech_prob": 7.40970153856324e-06}, {"id": 2926, "seek": 796980, "start": 7987.24, "end": 7990.360000000001, "text": " we created the idea of stateful optimizers.", "tokens": [321, 2942, 264, 1558, 295, 1785, 906, 5028, 22525, 13], "temperature": 0.0, "avg_logprob": -0.15233446570003734, "compression_ratio": 1.6782006920415224, "no_speech_prob": 7.40970153856324e-06}, {"id": 2927, "seek": 796980, "start": 7990.360000000001, "end": 7994.04, "text": " We created the new callbacks version two.", "tokens": [492, 2942, 264, 777, 818, 17758, 3037, 732, 13], "temperature": 0.0, "avg_logprob": -0.15233446570003734, "compression_ratio": 1.6782006920415224, "no_speech_prob": 7.40970153856324e-06}, {"id": 2928, "seek": 796980, "start": 7994.04, "end": 7996.320000000001, "text": " So that was interesting.", "tokens": [407, 300, 390, 1880, 13], "temperature": 0.0, "avg_logprob": -0.15233446570003734, "compression_ratio": 1.6782006920415224, "no_speech_prob": 7.40970153856324e-06}, {"id": 2929, "seek": 796980, "start": 7996.320000000001, "end": 7999.400000000001, "text": " But it's also been interesting I've seen from, as an outsider", "tokens": [583, 309, 311, 611, 668, 1880, 286, 600, 1612, 490, 11, 382, 364, 40484], "temperature": 0.0, "avg_logprob": -0.15233446570003734, "compression_ratio": 1.6782006920415224, "no_speech_prob": 7.40970153856324e-06}, {"id": 2930, "seek": 799940, "start": 7999.4, "end": 8001.879999999999, "text": " from a distance, that Swift syntax seems", "tokens": [490, 257, 4560, 11, 300, 25539, 28431, 2544], "temperature": 0.0, "avg_logprob": -0.10476372565752194, "compression_ratio": 1.7025495750708215, "no_speech_prob": 1.34127940327744e-05}, {"id": 2931, "seek": 799940, "start": 8001.879999999999, "end": 8003.48, "text": " to be changing thanks to some of this.", "tokens": [281, 312, 4473, 3231, 281, 512, 295, 341, 13], "temperature": 0.0, "avg_logprob": -0.10476372565752194, "compression_ratio": 1.7025495750708215, "no_speech_prob": 1.34127940327744e-05}, {"id": 2932, "seek": 799940, "start": 8003.48, "end": 8004.799999999999, "text": " Yeah, absolutely.", "tokens": [865, 11, 3122, 13], "temperature": 0.0, "avg_logprob": -0.10476372565752194, "compression_ratio": 1.7025495750708215, "no_speech_prob": 1.34127940327744e-05}, {"id": 2933, "seek": 799940, "start": 8004.799999999999, "end": 8008.08, "text": " So there are new features in Swift, including callables.", "tokens": [407, 456, 366, 777, 4122, 294, 25539, 11, 3009, 818, 2965, 13], "temperature": 0.0, "avg_logprob": -0.10476372565752194, "compression_ratio": 1.7025495750708215, "no_speech_prob": 1.34127940327744e-05}, {"id": 2934, "seek": 799940, "start": 8008.08, "end": 8011.679999999999, "text": " That's a thing that exists because of Swift or TensorFlow.", "tokens": [663, 311, 257, 551, 300, 8198, 570, 295, 25539, 420, 37624, 13], "temperature": 0.0, "avg_logprob": -0.10476372565752194, "compression_ratio": 1.7025495750708215, "no_speech_prob": 1.34127940327744e-05}, {"id": 2935, "seek": 799940, "start": 8011.679999999999, "end": 8014.04, "text": " The Python interoperability, believe it or not, we drove", "tokens": [440, 15329, 728, 7192, 2310, 11, 1697, 309, 420, 406, 11, 321, 13226], "temperature": 0.0, "avg_logprob": -0.10476372565752194, "compression_ratio": 1.7025495750708215, "no_speech_prob": 1.34127940327744e-05}, {"id": 2936, "seek": 799940, "start": 8014.04, "end": 8016.28, "text": " that because it's really important for what we're doing.", "tokens": [300, 570, 309, 311, 534, 1021, 337, 437, 321, 434, 884, 13], "temperature": 0.0, "avg_logprob": -0.10476372565752194, "compression_ratio": 1.7025495750708215, "no_speech_prob": 1.34127940327744e-05}, {"id": 2937, "seek": 799940, "start": 8016.28, "end": 8018.5199999999995, "text": " There's a bunch of stuff like that that's already being driven", "tokens": [821, 311, 257, 3840, 295, 1507, 411, 300, 300, 311, 1217, 885, 9555], "temperature": 0.0, "avg_logprob": -0.10476372565752194, "compression_ratio": 1.7025495750708215, "no_speech_prob": 1.34127940327744e-05}, {"id": 2938, "seek": 799940, "start": 8018.5199999999995, "end": 8020.36, "text": " by this project, and I think there's going to be more.", "tokens": [538, 341, 1716, 11, 293, 286, 519, 456, 311, 516, 281, 312, 544, 13], "temperature": 0.0, "avg_logprob": -0.10476372565752194, "compression_ratio": 1.7025495750708215, "no_speech_prob": 1.34127940327744e-05}, {"id": 2939, "seek": 799940, "start": 8020.36, "end": 8023.679999999999, "text": " And so, like, making it so float can default away to nothing,", "tokens": [400, 370, 11, 411, 11, 1455, 309, 370, 15706, 393, 7576, 1314, 281, 1825, 11], "temperature": 0.0, "avg_logprob": -0.10476372565752194, "compression_ratio": 1.7025495750708215, "no_speech_prob": 1.34127940327744e-05}, {"id": 2940, "seek": 799940, "start": 8023.679999999999, "end": 8024.96, "text": " that's really important.", "tokens": [300, 311, 534, 1021, 13], "temperature": 0.0, "avg_logprob": -0.10476372565752194, "compression_ratio": 1.7025495750708215, "no_speech_prob": 1.34127940327744e-05}, {"id": 2941, "seek": 799940, "start": 8024.96, "end": 8026.28, "text": " We have to do that, and otherwise,", "tokens": [492, 362, 281, 360, 300, 11, 293, 5911, 11], "temperature": 0.0, "avg_logprob": -0.10476372565752194, "compression_ratio": 1.7025495750708215, "no_speech_prob": 1.34127940327744e-05}, {"id": 2942, "seek": 799940, "start": 8026.28, "end": 8027.759999999999, "text": " it wouldn't have been a priority.", "tokens": [309, 2759, 380, 362, 668, 257, 9365, 13], "temperature": 0.0, "avg_logprob": -0.10476372565752194, "compression_ratio": 1.7025495750708215, "no_speech_prob": 1.34127940327744e-05}, {"id": 2943, "seek": 802776, "start": 8027.76, "end": 8033.88, "text": " So, I mean, so it's still really, really early days.", "tokens": [407, 11, 286, 914, 11, 370, 309, 311, 920, 534, 11, 534, 2440, 1708, 13], "temperature": 0.0, "avg_logprob": -0.146864321040011, "compression_ratio": 1.5533980582524272, "no_speech_prob": 6.24014046479715e-06}, {"id": 2944, "seek": 802776, "start": 8033.88, "end": 8039.8, "text": " And I think the question in my mind is now, like, what will happen", "tokens": [400, 286, 519, 264, 1168, 294, 452, 1575, 307, 586, 11, 411, 11, 437, 486, 1051], "temperature": 0.0, "avg_logprob": -0.146864321040011, "compression_ratio": 1.5533980582524272, "no_speech_prob": 6.24014046479715e-06}, {"id": 2945, "seek": 802776, "start": 8039.8, "end": 8044.4400000000005, "text": " when data scientists in lots of different domains have access", "tokens": [562, 1412, 7708, 294, 3195, 295, 819, 25514, 362, 2105], "temperature": 0.0, "avg_logprob": -0.146864321040011, "compression_ratio": 1.5533980582524272, "no_speech_prob": 6.24014046479715e-06}, {"id": 2946, "seek": 802776, "start": 8044.4400000000005, "end": 8048.2, "text": " to an infinitely hackable, differentiable language along", "tokens": [281, 364, 36227, 10339, 712, 11, 819, 9364, 2856, 2051], "temperature": 0.0, "avg_logprob": -0.146864321040011, "compression_ratio": 1.5533980582524272, "no_speech_prob": 6.24014046479715e-06}, {"id": 2947, "seek": 802776, "start": 8048.2, "end": 8053.04, "text": " with the world of all of the C libraries, you know, like,", "tokens": [365, 264, 1002, 295, 439, 295, 264, 383, 15148, 11, 291, 458, 11, 411, 11], "temperature": 0.0, "avg_logprob": -0.146864321040011, "compression_ratio": 1.5533980582524272, "no_speech_prob": 6.24014046479715e-06}, {"id": 2948, "seek": 802776, "start": 8053.04, "end": 8054.360000000001, "text": " what do we end up with?", "tokens": [437, 360, 321, 917, 493, 365, 30], "temperature": 0.0, "avg_logprob": -0.146864321040011, "compression_ratio": 1.5533980582524272, "no_speech_prob": 6.24014046479715e-06}, {"id": 2949, "seek": 805436, "start": 8054.36, "end": 8059.4, "text": " We kind of, we're starting from very little in terms of ecosystem,", "tokens": [492, 733, 295, 11, 321, 434, 2891, 490, 588, 707, 294, 2115, 295, 11311, 11], "temperature": 0.0, "avg_logprob": -0.1630401611328125, "compression_ratio": 1.6785714285714286, "no_speech_prob": 5.862432772119064e-06}, {"id": 2950, "seek": 805436, "start": 8059.4, "end": 8062.679999999999, "text": " right, but like, there are things in Swift we haven't covered,", "tokens": [558, 11, 457, 411, 11, 456, 366, 721, 294, 25539, 321, 2378, 380, 5343, 11], "temperature": 0.0, "avg_logprob": -0.1630401611328125, "compression_ratio": 1.6785714285714286, "no_speech_prob": 5.862432772119064e-06}, {"id": 2951, "seek": 805436, "start": 8062.679999999999, "end": 8064.24, "text": " for example, something called kpaths,", "tokens": [337, 1365, 11, 746, 1219, 350, 31852, 82, 11], "temperature": 0.0, "avg_logprob": -0.1630401611328125, "compression_ratio": 1.6785714285714286, "no_speech_prob": 5.862432772119064e-06}, {"id": 2952, "seek": 805436, "start": 8064.24, "end": 8067.28, "text": " but there's this thing called kpaths which might let us write,", "tokens": [457, 456, 311, 341, 551, 1219, 350, 31852, 82, 597, 1062, 718, 505, 2464, 11], "temperature": 0.0, "avg_logprob": -0.1630401611328125, "compression_ratio": 1.6785714285714286, "no_speech_prob": 5.862432772119064e-06}, {"id": 2953, "seek": 805436, "start": 8067.28, "end": 8072.5199999999995, "text": " like, little query language DSLs in Swift with type safety.", "tokens": [411, 11, 707, 14581, 2856, 15816, 43, 82, 294, 25539, 365, 2010, 4514, 13], "temperature": 0.0, "avg_logprob": -0.1630401611328125, "compression_ratio": 1.6785714285714286, "no_speech_prob": 5.862432772119064e-06}, {"id": 2954, "seek": 805436, "start": 8072.5199999999995, "end": 8074.32, "text": " Yeah, give me all the parameters out of this thing", "tokens": [865, 11, 976, 385, 439, 264, 9834, 484, 295, 341, 551], "temperature": 0.0, "avg_logprob": -0.1630401611328125, "compression_ratio": 1.6785714285714286, "no_speech_prob": 5.862432772119064e-06}, {"id": 2955, "seek": 805436, "start": 8074.32, "end": 8075.799999999999, "text": " and let me do something interesting to them.", "tokens": [293, 718, 385, 360, 746, 1880, 281, 552, 13], "temperature": 0.0, "avg_logprob": -0.1630401611328125, "compression_ratio": 1.6785714285714286, "no_speech_prob": 5.862432772119064e-06}, {"id": 2956, "seek": 805436, "start": 8075.799999999999, "end": 8077.5599999999995, "text": " Yeah. It's really cool.", "tokens": [865, 13, 467, 311, 534, 1627, 13], "temperature": 0.0, "avg_logprob": -0.1630401611328125, "compression_ratio": 1.6785714285714286, "no_speech_prob": 5.862432772119064e-06}, {"id": 2957, "seek": 805436, "start": 8077.5599999999995, "end": 8083.5599999999995, "text": " And so, you know, I guess at this point, I'm kind of saying", "tokens": [400, 370, 11, 291, 458, 11, 286, 2041, 412, 341, 935, 11, 286, 478, 733, 295, 1566], "temperature": 0.0, "avg_logprob": -0.1630401611328125, "compression_ratio": 1.6785714285714286, "no_speech_prob": 5.862432772119064e-06}, {"id": 2958, "seek": 808356, "start": 8083.56, "end": 8086.76, "text": " that people is like, pick some piece of this", "tokens": [300, 561, 307, 411, 11, 1888, 512, 2522, 295, 341], "temperature": 0.0, "avg_logprob": -0.15169478799695166, "compression_ratio": 1.7016129032258065, "no_speech_prob": 1.8628674297360703e-05}, {"id": 2959, "seek": 808356, "start": 8086.76, "end": 8092.64, "text": " that might be interesting in your domain and over the next 12", "tokens": [300, 1062, 312, 1880, 294, 428, 9274, 293, 670, 264, 958, 2272], "temperature": 0.0, "avg_logprob": -0.15169478799695166, "compression_ratio": 1.7016129032258065, "no_speech_prob": 1.8628674297360703e-05}, {"id": 2960, "seek": 808356, "start": 8092.64, "end": 8098.6, "text": " to 24 months explore with us so that, you know, as Chris said,", "tokens": [281, 4022, 2493, 6839, 365, 505, 370, 300, 11, 291, 458, 11, 382, 6688, 848, 11], "temperature": 0.0, "avg_logprob": -0.15169478799695166, "compression_ratio": 1.7016129032258065, "no_speech_prob": 1.8628674297360703e-05}, {"id": 2961, "seek": 808356, "start": 8098.6, "end": 8102.280000000001, "text": " putting this airplane together whilst it's flying, you know,", "tokens": [3372, 341, 17130, 1214, 18534, 309, 311, 7137, 11, 291, 458, 11], "temperature": 0.0, "avg_logprob": -0.15169478799695166, "compression_ratio": 1.7016129032258065, "no_speech_prob": 1.8628674297360703e-05}, {"id": 2962, "seek": 808356, "start": 8102.280000000001, "end": 8107.080000000001, "text": " by the time it's actually all the pieces are together,", "tokens": [538, 264, 565, 309, 311, 767, 439, 264, 3755, 366, 1214, 11], "temperature": 0.0, "avg_logprob": -0.15169478799695166, "compression_ratio": 1.7016129032258065, "no_speech_prob": 1.8628674297360703e-05}, {"id": 2963, "seek": 808356, "start": 8107.080000000001, "end": 8109.400000000001, "text": " you'll have your domain specific pieces together", "tokens": [291, 603, 362, 428, 9274, 2685, 3755, 1214], "temperature": 0.0, "avg_logprob": -0.15169478799695166, "compression_ratio": 1.7016129032258065, "no_speech_prob": 1.8628674297360703e-05}, {"id": 2964, "seek": 808356, "start": 8109.400000000001, "end": 8111.240000000001, "text": " and I think it'll be super exciting.", "tokens": [293, 286, 519, 309, 603, 312, 1687, 4670, 13], "temperature": 0.0, "avg_logprob": -0.15169478799695166, "compression_ratio": 1.7016129032258065, "no_speech_prob": 1.8628674297360703e-05}, {"id": 2965, "seek": 808356, "start": 8111.240000000001, "end": 8112.96, "text": " And one of the things that's also really important", "tokens": [400, 472, 295, 264, 721, 300, 311, 611, 534, 1021], "temperature": 0.0, "avg_logprob": -0.15169478799695166, "compression_ratio": 1.7016129032258065, "no_speech_prob": 1.8628674297360703e-05}, {"id": 2966, "seek": 811296, "start": 8112.96, "end": 8116.68, "text": " about this project is it's not cast in concrete.", "tokens": [466, 341, 1716, 307, 309, 311, 406, 4193, 294, 9859, 13], "temperature": 0.0, "avg_logprob": -0.15604473562801585, "compression_ratio": 1.754646840148699, "no_speech_prob": 3.26823974319268e-05}, {"id": 2967, "seek": 811296, "start": 8116.68, "end": 8119.2, "text": " So we can and we will change it to make it great.", "tokens": [407, 321, 393, 293, 321, 486, 1319, 309, 281, 652, 309, 869, 13], "temperature": 0.0, "avg_logprob": -0.15604473562801585, "compression_ratio": 1.754646840148699, "no_speech_prob": 3.26823974319268e-05}, {"id": 2968, "seek": 811296, "start": 8119.2, "end": 8123.16, "text": " And to me, we're very much in the phase of let's focus", "tokens": [400, 281, 385, 11, 321, 434, 588, 709, 294, 264, 5574, 295, 718, 311, 1879], "temperature": 0.0, "avg_logprob": -0.15604473562801585, "compression_ratio": 1.754646840148699, "no_speech_prob": 3.26823974319268e-05}, {"id": 2969, "seek": 811296, "start": 8123.16, "end": 8127.0, "text": " on making the basic ingredients that everybody puts things together,", "tokens": [322, 1455, 264, 3875, 6952, 300, 2201, 8137, 721, 1214, 11], "temperature": 0.0, "avg_logprob": -0.15604473562801585, "compression_ratio": 1.754646840148699, "no_speech_prob": 3.26823974319268e-05}, {"id": 2970, "seek": 811296, "start": 8127.0, "end": 8130.04, "text": " like, let's talk about the core of layer is.", "tokens": [411, 11, 718, 311, 751, 466, 264, 4965, 295, 4583, 307, 13], "temperature": 0.0, "avg_logprob": -0.15604473562801585, "compression_ratio": 1.754646840148699, "no_speech_prob": 3.26823974319268e-05}, {"id": 2971, "seek": 811296, "start": 8130.04, "end": 8131.6, "text": " Let's talk about what data blocks should be.", "tokens": [961, 311, 751, 466, 437, 1412, 8474, 820, 312, 13], "temperature": 0.0, "avg_logprob": -0.15604473562801585, "compression_ratio": 1.754646840148699, "no_speech_prob": 3.26823974319268e-05}, {"id": 2972, "seek": 811296, "start": 8131.6, "end": 8134.24, "text": " Let's talk about what all these basic things are.", "tokens": [961, 311, 751, 466, 437, 439, 613, 3875, 721, 366, 13], "temperature": 0.0, "avg_logprob": -0.15604473562801585, "compression_ratio": 1.754646840148699, "no_speech_prob": 3.26823974319268e-05}, {"id": 2973, "seek": 811296, "start": 8134.24, "end": 8135.88, "text": " Let's not mess with float anymore.", "tokens": [961, 311, 406, 2082, 365, 15706, 3602, 13], "temperature": 0.0, "avg_logprob": -0.15604473562801585, "compression_ratio": 1.754646840148699, "no_speech_prob": 3.26823974319268e-05}, {"id": 2974, "seek": 811296, "start": 8135.88, "end": 8137.96, "text": " Let's go up a few levels.", "tokens": [961, 311, 352, 493, 257, 1326, 4358, 13], "temperature": 0.0, "avg_logprob": -0.15604473562801585, "compression_ratio": 1.754646840148699, "no_speech_prob": 3.26823974319268e-05}, {"id": 2975, "seek": 811296, "start": 8137.96, "end": 8139.24, "text": " Float is done?", "tokens": [15153, 267, 307, 1096, 30], "temperature": 0.0, "avg_logprob": -0.15604473562801585, "compression_ratio": 1.754646840148699, "no_speech_prob": 3.26823974319268e-05}, {"id": 2976, "seek": 811296, "start": 8139.24, "end": 8140.56, "text": " Yeah, we can consider float done,", "tokens": [865, 11, 321, 393, 1949, 15706, 1096, 11], "temperature": 0.0, "avg_logprob": -0.15604473562801585, "compression_ratio": 1.754646840148699, "no_speech_prob": 3.26823974319268e-05}, {"id": 2977, "seek": 814056, "start": 8140.56, "end": 8144.320000000001, "text": " but let's actually really focus on getting these right", "tokens": [457, 718, 311, 767, 534, 1879, 322, 1242, 613, 558], "temperature": 0.0, "avg_logprob": -0.1071283216398906, "compression_ratio": 1.7720588235294117, "no_speech_prob": 2.4671571736689657e-05}, {"id": 2978, "seek": 814056, "start": 8144.320000000001, "end": 8146.72, "text": " so that then we can build amazing things on top of them.", "tokens": [370, 300, 550, 321, 393, 1322, 2243, 721, 322, 1192, 295, 552, 13], "temperature": 0.0, "avg_logprob": -0.1071283216398906, "compression_ratio": 1.7720588235294117, "no_speech_prob": 2.4671571736689657e-05}, {"id": 2979, "seek": 814056, "start": 8146.72, "end": 8150.64, "text": " And to me, the thing I'm looking forward to is just innovation.", "tokens": [400, 281, 385, 11, 264, 551, 286, 478, 1237, 2128, 281, 307, 445, 8504, 13], "temperature": 0.0, "avg_logprob": -0.1071283216398906, "compression_ratio": 1.7720588235294117, "no_speech_prob": 2.4671571736689657e-05}, {"id": 2980, "seek": 814056, "start": 8150.64, "end": 8152.84, "text": " And innovation happens when you make things", "tokens": [400, 8504, 2314, 562, 291, 652, 721], "temperature": 0.0, "avg_logprob": -0.1071283216398906, "compression_ratio": 1.7720588235294117, "no_speech_prob": 2.4671571736689657e-05}, {"id": 2981, "seek": 814056, "start": 8152.84, "end": 8155.68, "text": " that were previously hard accessible to more people", "tokens": [300, 645, 8046, 1152, 9515, 281, 544, 561], "temperature": 0.0, "avg_logprob": -0.1071283216398906, "compression_ratio": 1.7720588235294117, "no_speech_prob": 2.4671571736689657e-05}, {"id": 2982, "seek": 814056, "start": 8155.68, "end": 8157.200000000001, "text": " and that's what I would just love to see.", "tokens": [293, 300, 311, 437, 286, 576, 445, 959, 281, 536, 13], "temperature": 0.0, "avg_logprob": -0.1071283216398906, "compression_ratio": 1.7720588235294117, "no_speech_prob": 2.4671571736689657e-05}, {"id": 2983, "seek": 814056, "start": 8157.200000000001, "end": 8160.240000000001, "text": " So the thing I keep hearing is how do I get involved?", "tokens": [407, 264, 551, 286, 1066, 4763, 307, 577, 360, 286, 483, 3288, 30], "temperature": 0.0, "avg_logprob": -0.1071283216398906, "compression_ratio": 1.7720588235294117, "no_speech_prob": 2.4671571736689657e-05}, {"id": 2984, "seek": 814056, "start": 8160.240000000001, "end": 8164.120000000001, "text": " So like I think there's many places you can get involved,", "tokens": [407, 411, 286, 519, 456, 311, 867, 3190, 291, 393, 483, 3288, 11], "temperature": 0.0, "avg_logprob": -0.1071283216398906, "compression_ratio": 1.7720588235294117, "no_speech_prob": 2.4671571736689657e-05}, {"id": 2985, "seek": 814056, "start": 8164.120000000001, "end": 8167.6, "text": " but like to me the best way to get involved is by trying", "tokens": [457, 411, 281, 385, 264, 1151, 636, 281, 483, 3288, 307, 538, 1382], "temperature": 0.0, "avg_logprob": -0.1071283216398906, "compression_ratio": 1.7720588235294117, "no_speech_prob": 2.4671571736689657e-05}, {"id": 2986, "seek": 816760, "start": 8167.6, "end": 8172.56, "text": " to start using little bits of this in work that you're doing", "tokens": [281, 722, 1228, 707, 9239, 295, 341, 294, 589, 300, 291, 434, 884], "temperature": 0.0, "avg_logprob": -0.12389519837525514, "compression_ratio": 1.683794466403162, "no_speech_prob": 4.609456300386228e-05}, {"id": 2987, "seek": 816760, "start": 8172.56, "end": 8175.400000000001, "text": " or utilities you're building or hobbies you have.", "tokens": [420, 30482, 291, 434, 2390, 420, 35750, 291, 362, 13], "temperature": 0.0, "avg_logprob": -0.12389519837525514, "compression_ratio": 1.683794466403162, "no_speech_prob": 4.609456300386228e-05}, {"id": 2988, "seek": 816760, "start": 8175.400000000001, "end": 8183.240000000001, "text": " You know, just try, you know, it's not so much how do I add some new custom", "tokens": [509, 458, 11, 445, 853, 11, 291, 458, 11, 309, 311, 406, 370, 709, 577, 360, 286, 909, 512, 777, 2375], "temperature": 0.0, "avg_logprob": -0.12389519837525514, "compression_ratio": 1.683794466403162, "no_speech_prob": 4.609456300386228e-05}, {"id": 2989, "seek": 816760, "start": 8183.240000000001, "end": 8186.84, "text": " derivative thing into Swift for TensorFlow, but it's like, you know,", "tokens": [13760, 551, 666, 25539, 337, 37624, 11, 457, 309, 311, 411, 11, 291, 458, 11], "temperature": 0.0, "avg_logprob": -0.12389519837525514, "compression_ratio": 1.683794466403162, "no_speech_prob": 4.609456300386228e-05}, {"id": 2990, "seek": 816760, "start": 8186.84, "end": 8189.120000000001, "text": " implement some notebook that didn't exist before", "tokens": [4445, 512, 21060, 300, 994, 380, 2514, 949], "temperature": 0.0, "avg_logprob": -0.12389519837525514, "compression_ratio": 1.683794466403162, "no_speech_prob": 4.609456300386228e-05}, {"id": 2991, "seek": 816760, "start": 8189.120000000001, "end": 8191.84, "text": " or take some Python library that you've liked using and try", "tokens": [420, 747, 512, 15329, 6405, 300, 291, 600, 4501, 1228, 293, 853], "temperature": 0.0, "avg_logprob": -0.12389519837525514, "compression_ratio": 1.683794466403162, "no_speech_prob": 4.609456300386228e-05}, {"id": 2992, "seek": 816760, "start": 8191.84, "end": 8193.24, "text": " and create a Swift version.", "tokens": [293, 1884, 257, 25539, 3037, 13], "temperature": 0.0, "avg_logprob": -0.12389519837525514, "compression_ratio": 1.683794466403162, "no_speech_prob": 4.609456300386228e-05}, {"id": 2993, "seek": 816760, "start": 8193.24, "end": 8194.84, "text": " Try something, write a blog post.", "tokens": [6526, 746, 11, 2464, 257, 6968, 2183, 13], "temperature": 0.0, "avg_logprob": -0.12389519837525514, "compression_ratio": 1.683794466403162, "no_speech_prob": 4.609456300386228e-05}, {"id": 2994, "seek": 819484, "start": 8194.84, "end": 8197.72, "text": " I mean, so one of the things when Swift first came up is", "tokens": [286, 914, 11, 370, 472, 295, 264, 721, 562, 25539, 700, 1361, 493, 307], "temperature": 0.0, "avg_logprob": -0.12637303910165462, "compression_ratio": 1.8053097345132743, "no_speech_prob": 1.1477521184133366e-05}, {"id": 2995, "seek": 819484, "start": 8197.72, "end": 8200.2, "text": " that a lot of people were blogging about their experiences", "tokens": [300, 257, 688, 295, 561, 645, 6968, 3249, 466, 641, 5235], "temperature": 0.0, "avg_logprob": -0.12637303910165462, "compression_ratio": 1.8053097345132743, "no_speech_prob": 1.1477521184133366e-05}, {"id": 2996, "seek": 819484, "start": 8200.2, "end": 8202.72, "text": " and what they learned and what they liked and what they didn't like.", "tokens": [293, 437, 436, 3264, 293, 437, 436, 4501, 293, 437, 436, 994, 380, 411, 13], "temperature": 0.0, "avg_logprob": -0.12637303910165462, "compression_ratio": 1.8053097345132743, "no_speech_prob": 1.1477521184133366e-05}, {"id": 2997, "seek": 819484, "start": 8202.72, "end": 8204.6, "text": " And that's an amazing communication channel", "tokens": [400, 300, 311, 364, 2243, 6101, 2269], "temperature": 0.0, "avg_logprob": -0.12637303910165462, "compression_ratio": 1.8053097345132743, "no_speech_prob": 1.1477521184133366e-05}, {"id": 2998, "seek": 819484, "start": 8204.6, "end": 8205.960000000001, "text": " because the team listens to that.", "tokens": [570, 264, 1469, 35959, 281, 300, 13], "temperature": 0.0, "avg_logprob": -0.12637303910165462, "compression_ratio": 1.8053097345132743, "no_speech_prob": 1.1477521184133366e-05}, {"id": 2999, "seek": 819484, "start": 8205.960000000001, "end": 8207.76, "text": " And that's a huge feedback loop", "tokens": [400, 300, 311, 257, 2603, 5824, 6367], "temperature": 0.0, "avg_logprob": -0.12637303910165462, "compression_ratio": 1.8053097345132743, "no_speech_prob": 1.1477521184133366e-05}, {"id": 3000, "seek": 819484, "start": 8207.76, "end": 8210.36, "text": " because we can see somebody was struggling about it.", "tokens": [570, 321, 393, 536, 2618, 390, 9314, 466, 309, 13], "temperature": 0.0, "avg_logprob": -0.12637303910165462, "compression_ratio": 1.8053097345132743, "no_speech_prob": 1.1477521184133366e-05}, {"id": 3001, "seek": 819484, "start": 8210.36, "end": 8212.56, "text": " And even over the last couple of weeks when Jeremy complains", "tokens": [400, 754, 670, 264, 1036, 1916, 295, 3259, 562, 17809, 1209, 2315], "temperature": 0.0, "avg_logprob": -0.12637303910165462, "compression_ratio": 1.8053097345132743, "no_speech_prob": 1.1477521184133366e-05}, {"id": 3002, "seek": 819484, "start": 8212.56, "end": 8214.48, "text": " about something, we're like, oh, that is really hard.", "tokens": [466, 746, 11, 321, 434, 411, 11, 1954, 11, 300, 307, 534, 1152, 13], "temperature": 0.0, "avg_logprob": -0.12637303910165462, "compression_ratio": 1.8053097345132743, "no_speech_prob": 1.1477521184133366e-05}, {"id": 3003, "seek": 819484, "start": 8214.48, "end": 8215.8, "text": " Maybe we should fix that.", "tokens": [2704, 321, 820, 3191, 300, 13], "temperature": 0.0, "avg_logprob": -0.12637303910165462, "compression_ratio": 1.8053097345132743, "no_speech_prob": 1.1477521184133366e-05}, {"id": 3004, "seek": 819484, "start": 8215.8, "end": 8217.08, "text": " And we do change it.", "tokens": [400, 321, 360, 1319, 309, 13], "temperature": 0.0, "avg_logprob": -0.12637303910165462, "compression_ratio": 1.8053097345132743, "no_speech_prob": 1.1477521184133366e-05}, {"id": 3005, "seek": 819484, "start": 8217.08, "end": 8218.4, "text": " And then progress happens, right?", "tokens": [400, 550, 4205, 2314, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.12637303910165462, "compression_ratio": 1.8053097345132743, "no_speech_prob": 1.1477521184133366e-05}, {"id": 3006, "seek": 819484, "start": 8218.4, "end": 8222.0, "text": " And so we want that feedback loop in blogs and other kinds of forms.", "tokens": [400, 370, 321, 528, 300, 5824, 6367, 294, 31038, 293, 661, 3685, 295, 6422, 13], "temperature": 0.0, "avg_logprob": -0.12637303910165462, "compression_ratio": 1.8053097345132743, "no_speech_prob": 1.1477521184133366e-05}, {"id": 3007, "seek": 822200, "start": 8222.0, "end": 8226.36, "text": " Yeah, it's a very receptive community, very receptive team for sure.", "tokens": [865, 11, 309, 311, 257, 588, 45838, 1768, 11, 588, 45838, 1469, 337, 988, 13], "temperature": 0.0, "avg_logprob": -0.15284235660846418, "compression_ratio": 1.5714285714285714, "no_speech_prob": 1.6699335901648737e-05}, {"id": 3008, "seek": 822200, "start": 8226.36, "end": 8228.84, "text": " Were there any highlight questions that you wanted", "tokens": [12448, 456, 604, 5078, 1651, 300, 291, 1415], "temperature": 0.0, "avg_logprob": -0.15284235660846418, "compression_ratio": 1.5714285714285714, "no_speech_prob": 1.6699335901648737e-05}, {"id": 3009, "seek": 822200, "start": 8228.84, "end": 8232.12, "text": " to ask before we wrapped up, Rachel?", "tokens": [281, 1029, 949, 321, 14226, 493, 11, 14246, 30], "temperature": 0.0, "avg_logprob": -0.15284235660846418, "compression_ratio": 1.5714285714285714, "no_speech_prob": 1.6699335901648737e-05}, {"id": 3010, "seek": 822200, "start": 8233.88, "end": 8235.44, "text": " Really? Okay.", "tokens": [4083, 30, 1033, 13], "temperature": 0.0, "avg_logprob": -0.15284235660846418, "compression_ratio": 1.5714285714285714, "no_speech_prob": 1.6699335901648737e-05}, {"id": 3011, "seek": 822200, "start": 8235.44, "end": 8237.08, "text": " Well, I mean, let me say this, Chris.", "tokens": [1042, 11, 286, 914, 11, 718, 385, 584, 341, 11, 6688, 13], "temperature": 0.0, "avg_logprob": -0.15284235660846418, "compression_ratio": 1.5714285714285714, "no_speech_prob": 1.6699335901648737e-05}, {"id": 3012, "seek": 822200, "start": 8237.08, "end": 8242.04, "text": " It's been an absolute honor and absolute pleasure to get to work", "tokens": [467, 311, 668, 364, 8236, 5968, 293, 8236, 6834, 281, 483, 281, 589], "temperature": 0.0, "avg_logprob": -0.15284235660846418, "compression_ratio": 1.5714285714285714, "no_speech_prob": 1.6699335901648737e-05}, {"id": 3013, "seek": 822200, "start": 8242.04, "end": 8243.84, "text": " with you and with your team.", "tokens": [365, 291, 293, 365, 428, 1469, 13], "temperature": 0.0, "avg_logprob": -0.15284235660846418, "compression_ratio": 1.5714285714285714, "no_speech_prob": 1.6699335901648737e-05}, {"id": 3014, "seek": 822200, "start": 8243.84, "end": 8248.68, "text": " It's like a dream come true for me and to see what is being built here.", "tokens": [467, 311, 411, 257, 3055, 808, 2074, 337, 385, 293, 281, 536, 437, 307, 885, 3094, 510, 13], "temperature": 0.0, "avg_logprob": -0.15284235660846418, "compression_ratio": 1.5714285714285714, "no_speech_prob": 1.6699335901648737e-05}, {"id": 3015, "seek": 824868, "start": 8248.68, "end": 8252.2, "text": " And you're always super humble about your influence.", "tokens": [400, 291, 434, 1009, 1687, 16735, 466, 428, 6503, 13], "temperature": 0.0, "avg_logprob": -0.12686958785884636, "compression_ratio": 1.6537102473498233, "no_speech_prob": 1.8049782738671638e-05}, {"id": 3016, "seek": 824868, "start": 8252.2, "end": 8255.16, "text": " But I mean, you've been such an extraordinary influence", "tokens": [583, 286, 914, 11, 291, 600, 668, 1270, 364, 10581, 6503], "temperature": 0.0, "avg_logprob": -0.12686958785884636, "compression_ratio": 1.6537102473498233, "no_speech_prob": 1.8049782738671638e-05}, {"id": 3017, "seek": 824868, "start": 8255.16, "end": 8258.720000000001, "text": " in all the things that you've helped make happen.", "tokens": [294, 439, 264, 721, 300, 291, 600, 4254, 652, 1051, 13], "temperature": 0.0, "avg_logprob": -0.12686958785884636, "compression_ratio": 1.6537102473498233, "no_speech_prob": 1.8049782738671638e-05}, {"id": 3018, "seek": 824868, "start": 8258.720000000001, "end": 8262.48, "text": " And I'm super thrilled for our little community", "tokens": [400, 286, 478, 1687, 18744, 337, 527, 707, 1768], "temperature": 0.0, "avg_logprob": -0.12686958785884636, "compression_ratio": 1.6537102473498233, "no_speech_prob": 1.8049782738671638e-05}, {"id": 3019, "seek": 824868, "start": 8262.48, "end": 8266.800000000001, "text": " that you've let us piggyback on yours a little bit.", "tokens": [300, 291, 600, 718, 505, 39349, 3207, 322, 6342, 257, 707, 857, 13], "temperature": 0.0, "avg_logprob": -0.12686958785884636, "compression_ratio": 1.6537102473498233, "no_speech_prob": 1.8049782738671638e-05}, {"id": 3020, "seek": 824868, "start": 8266.800000000001, "end": 8268.12, "text": " Thank you so much for this.", "tokens": [1044, 291, 370, 709, 337, 341, 13], "temperature": 0.0, "avg_logprob": -0.12686958785884636, "compression_ratio": 1.6537102473498233, "no_speech_prob": 1.8049782738671638e-05}, {"id": 3021, "seek": 824868, "start": 8268.12, "end": 8271.880000000001, "text": " Oh, and from my perspective as a tool builder, right?", "tokens": [876, 11, 293, 490, 452, 4585, 382, 257, 2290, 27377, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.12686958785884636, "compression_ratio": 1.6537102473498233, "no_speech_prob": 1.8049782738671638e-05}, {"id": 3022, "seek": 824868, "start": 8271.880000000001, "end": 8275.28, "text": " Tool builders exist because of users.", "tokens": [15934, 36281, 2514, 570, 295, 5022, 13], "temperature": 0.0, "avg_logprob": -0.12686958785884636, "compression_ratio": 1.6537102473498233, "no_speech_prob": 1.8049782738671638e-05}, {"id": 3023, "seek": 824868, "start": 8275.28, "end": 8276.6, "text": " And I want to build a beautiful thing.", "tokens": [400, 286, 528, 281, 1322, 257, 2238, 551, 13], "temperature": 0.0, "avg_logprob": -0.12686958785884636, "compression_ratio": 1.6537102473498233, "no_speech_prob": 1.8049782738671638e-05}, {"id": 3024, "seek": 824868, "start": 8276.6, "end": 8278.56, "text": " And I think everybody working on the project wants", "tokens": [400, 286, 519, 2201, 1364, 322, 264, 1716, 2738], "temperature": 0.0, "avg_logprob": -0.12686958785884636, "compression_ratio": 1.6537102473498233, "no_speech_prob": 1.8049782738671638e-05}, {"id": 3025, "seek": 827856, "start": 8278.56, "end": 8282.0, "text": " to build something that is really beautiful and really profound", "tokens": [281, 1322, 746, 300, 307, 534, 2238, 293, 534, 14382], "temperature": 0.0, "avg_logprob": -0.14693760871887207, "compression_ratio": 1.625, "no_speech_prob": 2.4627570383017883e-05}, {"id": 3026, "seek": 827856, "start": 8282.0, "end": 8284.0, "text": " that enables people to do things they've never done before.", "tokens": [300, 17077, 561, 281, 360, 721, 436, 600, 1128, 1096, 949, 13], "temperature": 0.0, "avg_logprob": -0.14693760871887207, "compression_ratio": 1.625, "no_speech_prob": 2.4627570383017883e-05}, {"id": 3027, "seek": 827856, "start": 8284.0, "end": 8285.3, "text": " I'm really excited to see that.", "tokens": [286, 478, 534, 2919, 281, 536, 300, 13], "temperature": 0.0, "avg_logprob": -0.14693760871887207, "compression_ratio": 1.625, "no_speech_prob": 2.4627570383017883e-05}, {"id": 3028, "seek": 827856, "start": 8285.3, "end": 8287.08, "text": " I think we're already seeing that starting to happen.", "tokens": [286, 519, 321, 434, 1217, 2577, 300, 2891, 281, 1051, 13], "temperature": 0.0, "avg_logprob": -0.14693760871887207, "compression_ratio": 1.625, "no_speech_prob": 2.4627570383017883e-05}, {"id": 3029, "seek": 827856, "start": 8287.08, "end": 8289.279999999999, "text": " So thank you so much and thanks everybody for joining us.", "tokens": [407, 1309, 291, 370, 709, 293, 3231, 2201, 337, 5549, 505, 13], "temperature": 0.0, "avg_logprob": -0.14693760871887207, "compression_ratio": 1.625, "no_speech_prob": 2.4627570383017883e-05}, {"id": 3030, "seek": 827856, "start": 8289.279999999999, "end": 8290.6, "text": " Thanks for having us.", "tokens": [2561, 337, 1419, 505, 13], "temperature": 0.0, "avg_logprob": -0.14693760871887207, "compression_ratio": 1.625, "no_speech_prob": 2.4627570383017883e-05}, {"id": 3031, "seek": 827856, "start": 8290.6, "end": 8291.88, "text": " See you on the forums.", "tokens": [3008, 291, 322, 264, 26998, 13], "temperature": 0.0, "avg_logprob": -0.14693760871887207, "compression_ratio": 1.625, "no_speech_prob": 2.4627570383017883e-05}, {"id": 3032, "seek": 829188, "start": 8291.88, "end": 8310.88, "text": " Thanks for \u00e9taient.", "tokens": [50364, 2561, 337, 25999, 13, 51314], "temperature": 1.0, "avg_logprob": -3.4292218344552174, "compression_ratio": 0.7142857142857143, "no_speech_prob": 0.0008877093787305057}], "language": "en"}