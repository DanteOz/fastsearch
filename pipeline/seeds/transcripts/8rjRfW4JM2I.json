{"text": " This video explains how you can get set up with a GPU based server on Amazon Web Services. The server is already for you to start running deep learning models and we will be using it in the Data Institute Deep Learning Certificate. In order to use AWS of course you will need to sign up if you haven't already. You can go to aws.amazon.com and click on Create an AWS Account and then just fill in the information as it's requested from you. Once you've done that you will find yourself on a page that looks something like this. This is your Amazon Web Services Console. Unfortunately AWS does not allow you to create GPU based servers without requesting special access. So the next thing you will need to do is to go to this address aws.amazon.com, contact us ec2request and ask for a service limit increase. For region choose US West Oregon and for instance type choose G2 2x Large and say that I want a new limit value of 1 because by default you get 0. And then in the use case description you can explain what you are using this for. Use your contact method and press submit and they should get back to you within 24 hours. If you've had an AWS account for a while and have been paying your bills you should find that you can skip this step because you already have access. Once you have access through AWS we can get our instance up and running. Everything that we do will be done through the console and specifically we will be using the AWS command line interface which is a Python based interface. For all kinds of reasons I very strongly suggest that you use the Python distribution called Anaconda regardless of whether you are on Windows or Mac or Linux. In our course I am going to be assuming that you have Anaconda installed and specifically that you have it installed under your user account. I don't suggest trying to change the root Python or the main Python if you have one as a Mac or a Linux user. Installing Anaconda is very simple you just follow the instructions for each of the different operating systems and choose the Python 2.7 version and the 64-bit installer. Once you've got that set up the only other thing you need to do if you are using Windows is to make sure that you have a Bash shell installed. Specifically I suggest that you use SigWin. The reason that you need to do this is that some of the scripts we will be using are written in Bash rather than PowerShell which is the default in Windows. So you will need to install this. Installing it is very simple you just go to the SigWin homepage click on setup x86-64 and it will pop up a screen that looks like this. I suggest you change category to full and just make sure that you have wget selected. So if you go to wget and just make sure that it doesn't say skip or uninstall. Once you've done that you can click next and finish off that wizard and that will install SigWin. Once you've done that you can easily run SigWin by just typing SigWin in your start menu. If you have Mac or Linux you will already of course have a terminal with Bash installed and so you can just go straight to there now. So here we are at our console we are running Bash and in order to install the AWS command line tools you simply type pip install awscli. In my case you can see it is already installed so it is ready to use. The AWS command line interface creates a program called AWS and in order to use AWS you first of all need to configure it with your security keys. So the next thing we are going to do is to set up our security keys. So go to the AWS console. You can always get there by simply typing console.aws.amazon.com and specifically we are going to need to create a user for ourselves. We do this in this section called Identity and Access Management and here we are in the IAM, Identity and Access Management section where we can create a user for ourselves. So we say create new user. We enter the name of the user we want to create. Leave this ticked to generate an access key for each user and say create. And very importantly now say show user security credentials and copy and paste this somewhere safe because you are going to need them and you won't be able to get them again later. So we can now close that and that has created our new user. We now need to make this user an administrator. So I click on the user and I choose permissions and I say administrator access which is the first one here and I say attach policy. Okay, we have now made this user an administrator and we are ready to go ahead and use this user to create our GPU server. In order to do that we first of all configure AWS by typing AWS configure. As you can see it asks us for our access key ID and here it is, this is the thing that we just selected. So paste that into access key ID and press enter and then secret access key. Copy and paste that whole line as well and press enter. For default region name choose US-West-2 and for default output format choose text. AWS is now configured and we only have one more step left to go. We need to use a script that we have set up for you that will create and set up your new deep learning server. So let's go and get that script. We can get it from here www.platform.ai slash files and it's called setup P2.sh. The P2 instances are the brand new type of AWS instances which are particularly good for deep learning. So we can use wget to download that by typing wget and pasting the path. There it is and you will see that we now have that script. Let's now go ahead and use that script to create our deep learning server. So we just type bash setup P2.sh hit enter and then we have to wait a minute or so as it runs through all of the configuration steps asking Amazon Web Services to create each piece of this puzzle. It's going to set up a virtual network for us. It is going to set up a security key for us. It is going to set up an IP address for us and then it's going to connect all that up to our requested server. AWS calls it an instance. So you can see it's setting up the instance now and waiting for it to start. The permission denied error I'm getting on my AWS key there is simply because I have not run this script before so it's going to regenerate an SSH key when I already have one. So if you get that error message don't worry it just means that you've run this script once before. So the script has finished running and you can see it's created a number of things and let us know the details to each of them as well. I strongly suggest that you copy and paste these somewhere convenient. It will be useful to use them again later. But most importantly let's try now connecting to our new server. So I'm going to copy the connect line here, paste it into our console, type yes to say we are happy with the authenticity of the host and we are in. Now that we've logged in we can check that the GPU is working correctly by typing nvidia dash smi, this is a handy utility which just checks exactly what's going on. It shows us that indeed the Nvidia driver is running successfully. It has found the graphics card, shows us how much GPU memory we are using and whether anything is currently using that GPU. So that's all looking pretty good. The only other thing that I suggest you do is I made a slight mistake when I first set up this AMI which is I had a file left over which I should have deleted. So I suggest you delete it by typing sudo rm dot bash underscore history and the reason for that is that otherwise it won't save your history which will be pretty inconvenient. So the last thing I'm going to do is just make sure that we can actually run a notebook successfully. So we'll type Jupyter Notebook and now the notebook is up and running. You can see that it is running at port 8888. So let's test it and we were told the URL of our instance earlier on and hopefully you copied it like I suggested. So now copy that URL, go to your web browser and go to that URL and then colon 8888 since that's where we've got our notebook running. As you can see it's password protected and the default password that I've put in is dl underscore course. So type dl underscore course and login. Let's go to the notebooks directory, nbs and let's create a notebook just to make sure it all works ok. New python condor root. Let's try doing a simple calculation. I believe that is accurate. Let's try importing theano which is the underlying library we're using for accessing the GPU. Great, that's working well. And then secondly let's make sure we can use Keras which is a wrapper on top of theano that we'll be using throughout the course. That's working well as well. Ok, well it looks like everything is set up correctly and you're ready to start using it. When you're done don't forget to shut down your instance so that you don't get charged for it. You can do that by going back to your AWS console, choosing the instance that you want to shut down and choose instance state stop. Later on I'll show you how to do these things through the command line to save you some time.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 9.0, "text": " This video explains how you can get set up with a GPU based server on Amazon Web Services.", "tokens": [639, 960, 13948, 577, 291, 393, 483, 992, 493, 365, 257, 18407, 2361, 7154, 322, 6795, 9573, 12124, 13], "temperature": 0.0, "avg_logprob": -0.12404101773312218, "compression_ratio": 1.4832535885167464, "no_speech_prob": 0.0008967714966274798}, {"id": 1, "seek": 0, "start": 9.0, "end": 14.0, "text": " The server is already for you to start running deep learning models and we will be using", "tokens": [440, 7154, 307, 1217, 337, 291, 281, 722, 2614, 2452, 2539, 5245, 293, 321, 486, 312, 1228], "temperature": 0.0, "avg_logprob": -0.12404101773312218, "compression_ratio": 1.4832535885167464, "no_speech_prob": 0.0008967714966274798}, {"id": 2, "seek": 0, "start": 14.0, "end": 18.900000000000002, "text": " it in the Data Institute Deep Learning Certificate.", "tokens": [309, 294, 264, 11888, 9446, 14895, 15205, 31036, 1089, 473, 13], "temperature": 0.0, "avg_logprob": -0.12404101773312218, "compression_ratio": 1.4832535885167464, "no_speech_prob": 0.0008967714966274798}, {"id": 3, "seek": 0, "start": 18.900000000000002, "end": 23.56, "text": " In order to use AWS of course you will need to sign up if you haven't already.", "tokens": [682, 1668, 281, 764, 17650, 295, 1164, 291, 486, 643, 281, 1465, 493, 498, 291, 2378, 380, 1217, 13], "temperature": 0.0, "avg_logprob": -0.12404101773312218, "compression_ratio": 1.4832535885167464, "no_speech_prob": 0.0008967714966274798}, {"id": 4, "seek": 2356, "start": 23.56, "end": 33.36, "text": " You can go to aws.amazon.com and click on Create an AWS Account and then just fill in", "tokens": [509, 393, 352, 281, 1714, 82, 13, 335, 6317, 13, 1112, 293, 2052, 322, 20248, 364, 17650, 24558, 293, 550, 445, 2836, 294], "temperature": 0.0, "avg_logprob": -0.12901508106904871, "compression_ratio": 1.4021739130434783, "no_speech_prob": 9.665641300671268e-06}, {"id": 5, "seek": 2356, "start": 33.36, "end": 37.12, "text": " the information as it's requested from you.", "tokens": [264, 1589, 382, 309, 311, 16436, 490, 291, 13], "temperature": 0.0, "avg_logprob": -0.12901508106904871, "compression_ratio": 1.4021739130434783, "no_speech_prob": 9.665641300671268e-06}, {"id": 6, "seek": 2356, "start": 37.12, "end": 42.599999999999994, "text": " Once you've done that you will find yourself on a page that looks something like this.", "tokens": [3443, 291, 600, 1096, 300, 291, 486, 915, 1803, 322, 257, 3028, 300, 1542, 746, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.12901508106904871, "compression_ratio": 1.4021739130434783, "no_speech_prob": 9.665641300671268e-06}, {"id": 7, "seek": 2356, "start": 42.599999999999994, "end": 46.599999999999994, "text": " This is your Amazon Web Services Console.", "tokens": [639, 307, 428, 6795, 9573, 12124, 44152, 13], "temperature": 0.0, "avg_logprob": -0.12901508106904871, "compression_ratio": 1.4021739130434783, "no_speech_prob": 9.665641300671268e-06}, {"id": 8, "seek": 4660, "start": 46.6, "end": 54.0, "text": " Unfortunately AWS does not allow you to create GPU based servers without requesting special", "tokens": [8590, 17650, 775, 406, 2089, 291, 281, 1884, 18407, 2361, 15909, 1553, 31937, 2121], "temperature": 0.0, "avg_logprob": -0.16643901098342168, "compression_ratio": 1.367816091954023, "no_speech_prob": 4.092813014722196e-06}, {"id": 9, "seek": 4660, "start": 54.0, "end": 55.52, "text": " access.", "tokens": [2105, 13], "temperature": 0.0, "avg_logprob": -0.16643901098342168, "compression_ratio": 1.367816091954023, "no_speech_prob": 4.092813014722196e-06}, {"id": 10, "seek": 4660, "start": 55.52, "end": 61.400000000000006, "text": " So the next thing you will need to do is to go to this address aws.amazon.com, contact", "tokens": [407, 264, 958, 551, 291, 486, 643, 281, 360, 307, 281, 352, 281, 341, 2985, 1714, 82, 13, 335, 6317, 13, 1112, 11, 3385], "temperature": 0.0, "avg_logprob": -0.16643901098342168, "compression_ratio": 1.367816091954023, "no_speech_prob": 4.092813014722196e-06}, {"id": 11, "seek": 4660, "start": 61.400000000000006, "end": 68.32, "text": " us ec2request and ask for a service limit increase.", "tokens": [505, 11437, 17, 265, 20343, 293, 1029, 337, 257, 2643, 4948, 3488, 13], "temperature": 0.0, "avg_logprob": -0.16643901098342168, "compression_ratio": 1.367816091954023, "no_speech_prob": 4.092813014722196e-06}, {"id": 12, "seek": 6832, "start": 68.32, "end": 86.11999999999999, "text": " For region choose US West Oregon and for instance type choose G2 2x Large and say that I want", "tokens": [1171, 4458, 2826, 2546, 4055, 18664, 293, 337, 5197, 2010, 2826, 460, 17, 568, 87, 33092, 293, 584, 300, 286, 528], "temperature": 0.0, "avg_logprob": -0.14763225943355238, "compression_ratio": 1.3734939759036144, "no_speech_prob": 4.936910045216791e-06}, {"id": 13, "seek": 6832, "start": 86.11999999999999, "end": 91.83999999999999, "text": " a new limit value of 1 because by default you get 0.", "tokens": [257, 777, 4948, 2158, 295, 502, 570, 538, 7576, 291, 483, 1958, 13], "temperature": 0.0, "avg_logprob": -0.14763225943355238, "compression_ratio": 1.3734939759036144, "no_speech_prob": 4.936910045216791e-06}, {"id": 14, "seek": 6832, "start": 91.83999999999999, "end": 97.8, "text": " And then in the use case description you can explain what you are using this for.", "tokens": [400, 550, 294, 264, 764, 1389, 3855, 291, 393, 2903, 437, 291, 366, 1228, 341, 337, 13], "temperature": 0.0, "avg_logprob": -0.14763225943355238, "compression_ratio": 1.3734939759036144, "no_speech_prob": 4.936910045216791e-06}, {"id": 15, "seek": 9780, "start": 97.8, "end": 103.17999999999999, "text": " Use your contact method and press submit and they should get back to you within 24 hours.", "tokens": [8278, 428, 3385, 3170, 293, 1886, 10315, 293, 436, 820, 483, 646, 281, 291, 1951, 4022, 2496, 13], "temperature": 0.0, "avg_logprob": -0.09845352172851562, "compression_ratio": 1.6434426229508197, "no_speech_prob": 1.0129640031664167e-05}, {"id": 16, "seek": 9780, "start": 103.17999999999999, "end": 108.12, "text": " If you've had an AWS account for a while and have been paying your bills you should find", "tokens": [759, 291, 600, 632, 364, 17650, 2696, 337, 257, 1339, 293, 362, 668, 6229, 428, 12433, 291, 820, 915], "temperature": 0.0, "avg_logprob": -0.09845352172851562, "compression_ratio": 1.6434426229508197, "no_speech_prob": 1.0129640031664167e-05}, {"id": 17, "seek": 9780, "start": 108.12, "end": 112.16, "text": " that you can skip this step because you already have access.", "tokens": [300, 291, 393, 10023, 341, 1823, 570, 291, 1217, 362, 2105, 13], "temperature": 0.0, "avg_logprob": -0.09845352172851562, "compression_ratio": 1.6434426229508197, "no_speech_prob": 1.0129640031664167e-05}, {"id": 18, "seek": 9780, "start": 112.16, "end": 119.75999999999999, "text": " Once you have access through AWS we can get our instance up and running.", "tokens": [3443, 291, 362, 2105, 807, 17650, 321, 393, 483, 527, 5197, 493, 293, 2614, 13], "temperature": 0.0, "avg_logprob": -0.09845352172851562, "compression_ratio": 1.6434426229508197, "no_speech_prob": 1.0129640031664167e-05}, {"id": 19, "seek": 9780, "start": 119.75999999999999, "end": 125.2, "text": " Everything that we do will be done through the console and specifically we will be using", "tokens": [5471, 300, 321, 360, 486, 312, 1096, 807, 264, 11076, 293, 4682, 321, 486, 312, 1228], "temperature": 0.0, "avg_logprob": -0.09845352172851562, "compression_ratio": 1.6434426229508197, "no_speech_prob": 1.0129640031664167e-05}, {"id": 20, "seek": 12520, "start": 125.2, "end": 131.32, "text": " the AWS command line interface which is a Python based interface.", "tokens": [264, 17650, 5622, 1622, 9226, 597, 307, 257, 15329, 2361, 9226, 13], "temperature": 0.0, "avg_logprob": -0.10599498289177217, "compression_ratio": 1.6311111111111112, "no_speech_prob": 2.8129677502874983e-06}, {"id": 21, "seek": 12520, "start": 131.32, "end": 136.4, "text": " For all kinds of reasons I very strongly suggest that you use the Python distribution called", "tokens": [1171, 439, 3685, 295, 4112, 286, 588, 10613, 3402, 300, 291, 764, 264, 15329, 7316, 1219], "temperature": 0.0, "avg_logprob": -0.10599498289177217, "compression_ratio": 1.6311111111111112, "no_speech_prob": 2.8129677502874983e-06}, {"id": 22, "seek": 12520, "start": 136.4, "end": 142.64000000000001, "text": " Anaconda regardless of whether you are on Windows or Mac or Linux.", "tokens": [1107, 326, 12233, 10060, 295, 1968, 291, 366, 322, 8591, 420, 5707, 420, 18734, 13], "temperature": 0.0, "avg_logprob": -0.10599498289177217, "compression_ratio": 1.6311111111111112, "no_speech_prob": 2.8129677502874983e-06}, {"id": 23, "seek": 12520, "start": 142.64000000000001, "end": 147.16, "text": " In our course I am going to be assuming that you have Anaconda installed and specifically", "tokens": [682, 527, 1164, 286, 669, 516, 281, 312, 11926, 300, 291, 362, 1107, 326, 12233, 8899, 293, 4682], "temperature": 0.0, "avg_logprob": -0.10599498289177217, "compression_ratio": 1.6311111111111112, "no_speech_prob": 2.8129677502874983e-06}, {"id": 24, "seek": 12520, "start": 147.16, "end": 150.4, "text": " that you have it installed under your user account.", "tokens": [300, 291, 362, 309, 8899, 833, 428, 4195, 2696, 13], "temperature": 0.0, "avg_logprob": -0.10599498289177217, "compression_ratio": 1.6311111111111112, "no_speech_prob": 2.8129677502874983e-06}, {"id": 25, "seek": 15040, "start": 150.4, "end": 156.24, "text": " I don't suggest trying to change the root Python or the main Python if you have one", "tokens": [286, 500, 380, 3402, 1382, 281, 1319, 264, 5593, 15329, 420, 264, 2135, 15329, 498, 291, 362, 472], "temperature": 0.0, "avg_logprob": -0.08900840308076592, "compression_ratio": 1.5546218487394958, "no_speech_prob": 5.285484121486661e-07}, {"id": 26, "seek": 15040, "start": 156.24, "end": 160.04000000000002, "text": " as a Mac or a Linux user.", "tokens": [382, 257, 5707, 420, 257, 18734, 4195, 13], "temperature": 0.0, "avg_logprob": -0.08900840308076592, "compression_ratio": 1.5546218487394958, "no_speech_prob": 5.285484121486661e-07}, {"id": 27, "seek": 15040, "start": 160.04000000000002, "end": 164.32, "text": " Installing Anaconda is very simple you just follow the instructions for each of the different", "tokens": [2730, 24021, 1107, 326, 12233, 307, 588, 2199, 291, 445, 1524, 264, 9415, 337, 1184, 295, 264, 819], "temperature": 0.0, "avg_logprob": -0.08900840308076592, "compression_ratio": 1.5546218487394958, "no_speech_prob": 5.285484121486661e-07}, {"id": 28, "seek": 15040, "start": 164.32, "end": 172.52, "text": " operating systems and choose the Python 2.7 version and the 64-bit installer.", "tokens": [7447, 3652, 293, 2826, 264, 15329, 568, 13, 22, 3037, 293, 264, 12145, 12, 5260, 46620, 13], "temperature": 0.0, "avg_logprob": -0.08900840308076592, "compression_ratio": 1.5546218487394958, "no_speech_prob": 5.285484121486661e-07}, {"id": 29, "seek": 15040, "start": 172.52, "end": 178.0, "text": " Once you've got that set up the only other thing you need to do if you are using Windows", "tokens": [3443, 291, 600, 658, 300, 992, 493, 264, 787, 661, 551, 291, 643, 281, 360, 498, 291, 366, 1228, 8591], "temperature": 0.0, "avg_logprob": -0.08900840308076592, "compression_ratio": 1.5546218487394958, "no_speech_prob": 5.285484121486661e-07}, {"id": 30, "seek": 17800, "start": 178.0, "end": 182.96, "text": " is to make sure that you have a Bash shell installed.", "tokens": [307, 281, 652, 988, 300, 291, 362, 257, 43068, 8720, 8899, 13], "temperature": 0.0, "avg_logprob": -0.17575773239135742, "compression_ratio": 1.6051502145922747, "no_speech_prob": 4.0293925849255174e-06}, {"id": 31, "seek": 17800, "start": 182.96, "end": 186.12, "text": " Specifically I suggest that you use SigWin.", "tokens": [26058, 286, 3402, 300, 291, 764, 37763, 54, 259, 13], "temperature": 0.0, "avg_logprob": -0.17575773239135742, "compression_ratio": 1.6051502145922747, "no_speech_prob": 4.0293925849255174e-06}, {"id": 32, "seek": 17800, "start": 186.12, "end": 190.84, "text": " The reason that you need to do this is that some of the scripts we will be using are written", "tokens": [440, 1778, 300, 291, 643, 281, 360, 341, 307, 300, 512, 295, 264, 23294, 321, 486, 312, 1228, 366, 3720], "temperature": 0.0, "avg_logprob": -0.17575773239135742, "compression_ratio": 1.6051502145922747, "no_speech_prob": 4.0293925849255174e-06}, {"id": 33, "seek": 17800, "start": 190.84, "end": 197.62, "text": " in Bash rather than PowerShell which is the default in Windows.", "tokens": [294, 43068, 2831, 813, 7086, 9526, 285, 597, 307, 264, 7576, 294, 8591, 13], "temperature": 0.0, "avg_logprob": -0.17575773239135742, "compression_ratio": 1.6051502145922747, "no_speech_prob": 4.0293925849255174e-06}, {"id": 34, "seek": 17800, "start": 197.62, "end": 199.64, "text": " So you will need to install this.", "tokens": [407, 291, 486, 643, 281, 3625, 341, 13], "temperature": 0.0, "avg_logprob": -0.17575773239135742, "compression_ratio": 1.6051502145922747, "no_speech_prob": 4.0293925849255174e-06}, {"id": 35, "seek": 17800, "start": 199.64, "end": 207.44, "text": " Installing it is very simple you just go to the SigWin homepage click on setup x86-64", "tokens": [2730, 24021, 309, 307, 588, 2199, 291, 445, 352, 281, 264, 37763, 54, 259, 31301, 2052, 322, 8657, 2031, 22193, 12, 19395], "temperature": 0.0, "avg_logprob": -0.17575773239135742, "compression_ratio": 1.6051502145922747, "no_speech_prob": 4.0293925849255174e-06}, {"id": 36, "seek": 20744, "start": 207.44, "end": 213.28, "text": " and it will pop up a screen that looks like this.", "tokens": [293, 309, 486, 1665, 493, 257, 2568, 300, 1542, 411, 341, 13], "temperature": 0.0, "avg_logprob": -0.11935856763054342, "compression_ratio": 1.625, "no_speech_prob": 6.68148743443453e-07}, {"id": 37, "seek": 20744, "start": 213.28, "end": 220.4, "text": " I suggest you change category to full and just make sure that you have wget selected.", "tokens": [286, 3402, 291, 1319, 7719, 281, 1577, 293, 445, 652, 988, 300, 291, 362, 261, 847, 8209, 13], "temperature": 0.0, "avg_logprob": -0.11935856763054342, "compression_ratio": 1.625, "no_speech_prob": 6.68148743443453e-07}, {"id": 38, "seek": 20744, "start": 220.4, "end": 228.22, "text": " So if you go to wget and just make sure that it doesn't say skip or uninstall.", "tokens": [407, 498, 291, 352, 281, 261, 847, 293, 445, 652, 988, 300, 309, 1177, 380, 584, 10023, 420, 517, 40166, 13], "temperature": 0.0, "avg_logprob": -0.11935856763054342, "compression_ratio": 1.625, "no_speech_prob": 6.68148743443453e-07}, {"id": 39, "seek": 20744, "start": 228.22, "end": 234.2, "text": " Once you've done that you can click next and finish off that wizard and that will install", "tokens": [3443, 291, 600, 1096, 300, 291, 393, 2052, 958, 293, 2413, 766, 300, 25807, 293, 300, 486, 3625], "temperature": 0.0, "avg_logprob": -0.11935856763054342, "compression_ratio": 1.625, "no_speech_prob": 6.68148743443453e-07}, {"id": 40, "seek": 20744, "start": 234.2, "end": 236.16, "text": " SigWin.", "tokens": [37763, 54, 259, 13], "temperature": 0.0, "avg_logprob": -0.11935856763054342, "compression_ratio": 1.625, "no_speech_prob": 6.68148743443453e-07}, {"id": 41, "seek": 23616, "start": 236.16, "end": 243.24, "text": " Once you've done that you can easily run SigWin by just typing SigWin in your start menu.", "tokens": [3443, 291, 600, 1096, 300, 291, 393, 3612, 1190, 37763, 54, 259, 538, 445, 18444, 37763, 54, 259, 294, 428, 722, 6510, 13], "temperature": 0.0, "avg_logprob": -0.08542258143424988, "compression_ratio": 1.5495049504950495, "no_speech_prob": 4.31388400556898e-07}, {"id": 42, "seek": 23616, "start": 243.24, "end": 249.04, "text": " If you have Mac or Linux you will already of course have a terminal with Bash installed", "tokens": [759, 291, 362, 5707, 420, 18734, 291, 486, 1217, 295, 1164, 362, 257, 14709, 365, 43068, 8899], "temperature": 0.0, "avg_logprob": -0.08542258143424988, "compression_ratio": 1.5495049504950495, "no_speech_prob": 4.31388400556898e-07}, {"id": 43, "seek": 23616, "start": 249.04, "end": 252.06, "text": " and so you can just go straight to there now.", "tokens": [293, 370, 291, 393, 445, 352, 2997, 281, 456, 586, 13], "temperature": 0.0, "avg_logprob": -0.08542258143424988, "compression_ratio": 1.5495049504950495, "no_speech_prob": 4.31388400556898e-07}, {"id": 44, "seek": 23616, "start": 252.06, "end": 259.74, "text": " So here we are at our console we are running Bash and in order to install the AWS command", "tokens": [407, 510, 321, 366, 412, 527, 11076, 321, 366, 2614, 43068, 293, 294, 1668, 281, 3625, 264, 17650, 5622], "temperature": 0.0, "avg_logprob": -0.08542258143424988, "compression_ratio": 1.5495049504950495, "no_speech_prob": 4.31388400556898e-07}, {"id": 45, "seek": 25974, "start": 259.74, "end": 267.96000000000004, "text": " line tools you simply type pip install awscli.", "tokens": [1622, 3873, 291, 2935, 2010, 8489, 3625, 1714, 4417, 2081, 13], "temperature": 0.0, "avg_logprob": -0.10850296447526163, "compression_ratio": 1.5380116959064327, "no_speech_prob": 1.0676936881282018e-06}, {"id": 46, "seek": 25974, "start": 267.96000000000004, "end": 272.8, "text": " In my case you can see it is already installed so it is ready to use.", "tokens": [682, 452, 1389, 291, 393, 536, 309, 307, 1217, 8899, 370, 309, 307, 1919, 281, 764, 13], "temperature": 0.0, "avg_logprob": -0.10850296447526163, "compression_ratio": 1.5380116959064327, "no_speech_prob": 1.0676936881282018e-06}, {"id": 47, "seek": 25974, "start": 272.8, "end": 283.92, "text": " The AWS command line interface creates a program called AWS and in order to use AWS you first", "tokens": [440, 17650, 5622, 1622, 9226, 7829, 257, 1461, 1219, 17650, 293, 294, 1668, 281, 764, 17650, 291, 700], "temperature": 0.0, "avg_logprob": -0.10850296447526163, "compression_ratio": 1.5380116959064327, "no_speech_prob": 1.0676936881282018e-06}, {"id": 48, "seek": 25974, "start": 283.92, "end": 287.88, "text": " of all need to configure it with your security keys.", "tokens": [295, 439, 643, 281, 22162, 309, 365, 428, 3825, 9317, 13], "temperature": 0.0, "avg_logprob": -0.10850296447526163, "compression_ratio": 1.5380116959064327, "no_speech_prob": 1.0676936881282018e-06}, {"id": 49, "seek": 28788, "start": 287.88, "end": 292.2, "text": " So the next thing we are going to do is to set up our security keys.", "tokens": [407, 264, 958, 551, 321, 366, 516, 281, 360, 307, 281, 992, 493, 527, 3825, 9317, 13], "temperature": 0.0, "avg_logprob": -0.11816824399507962, "compression_ratio": 1.848623853211009, "no_speech_prob": 5.804977831758151e-07}, {"id": 50, "seek": 28788, "start": 292.2, "end": 294.84, "text": " So go to the AWS console.", "tokens": [407, 352, 281, 264, 17650, 11076, 13], "temperature": 0.0, "avg_logprob": -0.11816824399507962, "compression_ratio": 1.848623853211009, "no_speech_prob": 5.804977831758151e-07}, {"id": 51, "seek": 28788, "start": 294.84, "end": 303.44, "text": " You can always get there by simply typing console.aws.amazon.com and specifically we", "tokens": [509, 393, 1009, 483, 456, 538, 2935, 18444, 11076, 13, 12282, 13, 335, 6317, 13, 1112, 293, 4682, 321], "temperature": 0.0, "avg_logprob": -0.11816824399507962, "compression_ratio": 1.848623853211009, "no_speech_prob": 5.804977831758151e-07}, {"id": 52, "seek": 28788, "start": 303.44, "end": 305.76, "text": " are going to need to create a user for ourselves.", "tokens": [366, 516, 281, 643, 281, 1884, 257, 4195, 337, 4175, 13], "temperature": 0.0, "avg_logprob": -0.11816824399507962, "compression_ratio": 1.848623853211009, "no_speech_prob": 5.804977831758151e-07}, {"id": 53, "seek": 28788, "start": 305.76, "end": 312.28, "text": " We do this in this section called Identity and Access Management and here we are in the", "tokens": [492, 360, 341, 294, 341, 3541, 1219, 25905, 507, 293, 17166, 14781, 293, 510, 321, 366, 294, 264], "temperature": 0.0, "avg_logprob": -0.11816824399507962, "compression_ratio": 1.848623853211009, "no_speech_prob": 5.804977831758151e-07}, {"id": 54, "seek": 28788, "start": 312.28, "end": 317.18, "text": " IAM, Identity and Access Management section where we can create a user for ourselves.", "tokens": [286, 2865, 11, 25905, 507, 293, 17166, 14781, 3541, 689, 321, 393, 1884, 257, 4195, 337, 4175, 13], "temperature": 0.0, "avg_logprob": -0.11816824399507962, "compression_ratio": 1.848623853211009, "no_speech_prob": 5.804977831758151e-07}, {"id": 55, "seek": 31718, "start": 317.18, "end": 319.40000000000003, "text": " So we say create new user.", "tokens": [407, 321, 584, 1884, 777, 4195, 13], "temperature": 0.0, "avg_logprob": -0.13531353415512457, "compression_ratio": 1.6417910447761195, "no_speech_prob": 1.7880483937915415e-06}, {"id": 56, "seek": 31718, "start": 319.40000000000003, "end": 324.28000000000003, "text": " We enter the name of the user we want to create.", "tokens": [492, 3242, 264, 1315, 295, 264, 4195, 321, 528, 281, 1884, 13], "temperature": 0.0, "avg_logprob": -0.13531353415512457, "compression_ratio": 1.6417910447761195, "no_speech_prob": 1.7880483937915415e-06}, {"id": 57, "seek": 31718, "start": 324.28000000000003, "end": 330.76, "text": " Leave this ticked to generate an access key for each user and say create.", "tokens": [9825, 341, 5204, 292, 281, 8460, 364, 2105, 2141, 337, 1184, 4195, 293, 584, 1884, 13], "temperature": 0.0, "avg_logprob": -0.13531353415512457, "compression_ratio": 1.6417910447761195, "no_speech_prob": 1.7880483937915415e-06}, {"id": 58, "seek": 31718, "start": 330.76, "end": 337.0, "text": " And very importantly now say show user security credentials and copy and paste this somewhere", "tokens": [400, 588, 8906, 586, 584, 855, 4195, 3825, 27404, 293, 5055, 293, 9163, 341, 4079], "temperature": 0.0, "avg_logprob": -0.13531353415512457, "compression_ratio": 1.6417910447761195, "no_speech_prob": 1.7880483937915415e-06}, {"id": 59, "seek": 31718, "start": 337.0, "end": 343.48, "text": " safe because you are going to need them and you won't be able to get them again later.", "tokens": [3273, 570, 291, 366, 516, 281, 643, 552, 293, 291, 1582, 380, 312, 1075, 281, 483, 552, 797, 1780, 13], "temperature": 0.0, "avg_logprob": -0.13531353415512457, "compression_ratio": 1.6417910447761195, "no_speech_prob": 1.7880483937915415e-06}, {"id": 60, "seek": 34348, "start": 343.48, "end": 348.92, "text": " So we can now close that and that has created our new user.", "tokens": [407, 321, 393, 586, 1998, 300, 293, 300, 575, 2942, 527, 777, 4195, 13], "temperature": 0.0, "avg_logprob": -0.17202034934622343, "compression_ratio": 1.604026845637584, "no_speech_prob": 3.059010680317442e-07}, {"id": 61, "seek": 34348, "start": 348.92, "end": 351.44, "text": " We now need to make this user an administrator.", "tokens": [492, 586, 643, 281, 652, 341, 4195, 364, 25529, 13], "temperature": 0.0, "avg_logprob": -0.17202034934622343, "compression_ratio": 1.604026845637584, "no_speech_prob": 3.059010680317442e-07}, {"id": 62, "seek": 34348, "start": 351.44, "end": 363.52000000000004, "text": " So I click on the user and I choose permissions and I say administrator access which is the", "tokens": [407, 286, 2052, 322, 264, 4195, 293, 286, 2826, 32723, 293, 286, 584, 25529, 2105, 597, 307, 264], "temperature": 0.0, "avg_logprob": -0.17202034934622343, "compression_ratio": 1.604026845637584, "no_speech_prob": 3.059010680317442e-07}, {"id": 63, "seek": 34348, "start": 363.52000000000004, "end": 367.40000000000003, "text": " first one here and I say attach policy.", "tokens": [700, 472, 510, 293, 286, 584, 5085, 3897, 13], "temperature": 0.0, "avg_logprob": -0.17202034934622343, "compression_ratio": 1.604026845637584, "no_speech_prob": 3.059010680317442e-07}, {"id": 64, "seek": 36740, "start": 367.4, "end": 374.79999999999995, "text": " Okay, we have now made this user an administrator and we are ready to go ahead and use this", "tokens": [1033, 11, 321, 362, 586, 1027, 341, 4195, 364, 25529, 293, 321, 366, 1919, 281, 352, 2286, 293, 764, 341], "temperature": 0.0, "avg_logprob": -0.13903850979275173, "compression_ratio": 1.532994923857868, "no_speech_prob": 7.690306915719702e-07}, {"id": 65, "seek": 36740, "start": 374.79999999999995, "end": 381.9, "text": " user to create our GPU server.", "tokens": [4195, 281, 1884, 527, 18407, 7154, 13], "temperature": 0.0, "avg_logprob": -0.13903850979275173, "compression_ratio": 1.532994923857868, "no_speech_prob": 7.690306915719702e-07}, {"id": 66, "seek": 36740, "start": 381.9, "end": 390.47999999999996, "text": " In order to do that we first of all configure AWS by typing AWS configure.", "tokens": [682, 1668, 281, 360, 300, 321, 700, 295, 439, 22162, 17650, 538, 18444, 17650, 22162, 13], "temperature": 0.0, "avg_logprob": -0.13903850979275173, "compression_ratio": 1.532994923857868, "no_speech_prob": 7.690306915719702e-07}, {"id": 67, "seek": 36740, "start": 390.47999999999996, "end": 395.15999999999997, "text": " As you can see it asks us for our access key ID and here it is, this is the thing that", "tokens": [1018, 291, 393, 536, 309, 8962, 505, 337, 527, 2105, 2141, 7348, 293, 510, 309, 307, 11, 341, 307, 264, 551, 300], "temperature": 0.0, "avg_logprob": -0.13903850979275173, "compression_ratio": 1.532994923857868, "no_speech_prob": 7.690306915719702e-07}, {"id": 68, "seek": 36740, "start": 395.15999999999997, "end": 396.53999999999996, "text": " we just selected.", "tokens": [321, 445, 8209, 13], "temperature": 0.0, "avg_logprob": -0.13903850979275173, "compression_ratio": 1.532994923857868, "no_speech_prob": 7.690306915719702e-07}, {"id": 69, "seek": 39654, "start": 396.54, "end": 403.32, "text": " So paste that into access key ID and press enter and then secret access key.", "tokens": [407, 9163, 300, 666, 2105, 2141, 7348, 293, 1886, 3242, 293, 550, 4054, 2105, 2141, 13], "temperature": 0.0, "avg_logprob": -0.2107507034584328, "compression_ratio": 1.542857142857143, "no_speech_prob": 1.4593678088203887e-06}, {"id": 70, "seek": 39654, "start": 403.32, "end": 407.68, "text": " Copy and paste that whole line as well and press enter.", "tokens": [25653, 293, 9163, 300, 1379, 1622, 382, 731, 293, 1886, 3242, 13], "temperature": 0.0, "avg_logprob": -0.2107507034584328, "compression_ratio": 1.542857142857143, "no_speech_prob": 1.4593678088203887e-06}, {"id": 71, "seek": 39654, "start": 407.68, "end": 419.84000000000003, "text": " For default region name choose US-West-2 and for default output format choose text.", "tokens": [1171, 7576, 4458, 1315, 2826, 2546, 12, 37943, 12, 17, 293, 337, 7576, 5598, 7877, 2826, 2487, 13], "temperature": 0.0, "avg_logprob": -0.2107507034584328, "compression_ratio": 1.542857142857143, "no_speech_prob": 1.4593678088203887e-06}, {"id": 72, "seek": 41984, "start": 419.84, "end": 427.67999999999995, "text": " AWS is now configured and we only have one more step left to go.", "tokens": [17650, 307, 586, 30538, 293, 321, 787, 362, 472, 544, 1823, 1411, 281, 352, 13], "temperature": 0.0, "avg_logprob": -0.10131417442770566, "compression_ratio": 1.553763440860215, "no_speech_prob": 5.043456212661113e-07}, {"id": 73, "seek": 41984, "start": 427.67999999999995, "end": 434.84, "text": " We need to use a script that we have set up for you that will create and set up your new", "tokens": [492, 643, 281, 764, 257, 5755, 300, 321, 362, 992, 493, 337, 291, 300, 486, 1884, 293, 992, 493, 428, 777], "temperature": 0.0, "avg_logprob": -0.10131417442770566, "compression_ratio": 1.553763440860215, "no_speech_prob": 5.043456212661113e-07}, {"id": 74, "seek": 41984, "start": 434.84, "end": 437.4, "text": " deep learning server.", "tokens": [2452, 2539, 7154, 13], "temperature": 0.0, "avg_logprob": -0.10131417442770566, "compression_ratio": 1.553763440860215, "no_speech_prob": 5.043456212661113e-07}, {"id": 75, "seek": 41984, "start": 437.4, "end": 440.88, "text": " So let's go and get that script.", "tokens": [407, 718, 311, 352, 293, 483, 300, 5755, 13], "temperature": 0.0, "avg_logprob": -0.10131417442770566, "compression_ratio": 1.553763440860215, "no_speech_prob": 5.043456212661113e-07}, {"id": 76, "seek": 41984, "start": 440.88, "end": 449.64, "text": " We can get it from here www.platform.ai slash files and it's called setup P2.sh.", "tokens": [492, 393, 483, 309, 490, 510, 12520, 13, 39975, 837, 13, 1301, 17330, 7098, 293, 309, 311, 1219, 8657, 430, 17, 13, 2716, 13], "temperature": 0.0, "avg_logprob": -0.10131417442770566, "compression_ratio": 1.553763440860215, "no_speech_prob": 5.043456212661113e-07}, {"id": 77, "seek": 44964, "start": 449.64, "end": 454.84, "text": " The P2 instances are the brand new type of AWS instances which are particularly good", "tokens": [440, 430, 17, 14519, 366, 264, 3360, 777, 2010, 295, 17650, 14519, 597, 366, 4098, 665], "temperature": 0.0, "avg_logprob": -0.10033254774789961, "compression_ratio": 1.46875, "no_speech_prob": 2.0698330160939804e-07}, {"id": 78, "seek": 44964, "start": 454.84, "end": 459.56, "text": " for deep learning.", "tokens": [337, 2452, 2539, 13], "temperature": 0.0, "avg_logprob": -0.10033254774789961, "compression_ratio": 1.46875, "no_speech_prob": 2.0698330160939804e-07}, {"id": 79, "seek": 44964, "start": 459.56, "end": 468.15999999999997, "text": " So we can use wget to download that by typing wget and pasting the path.", "tokens": [407, 321, 393, 764, 261, 847, 281, 5484, 300, 538, 18444, 261, 847, 293, 1791, 278, 264, 3100, 13], "temperature": 0.0, "avg_logprob": -0.10033254774789961, "compression_ratio": 1.46875, "no_speech_prob": 2.0698330160939804e-07}, {"id": 80, "seek": 44964, "start": 468.15999999999997, "end": 476.47999999999996, "text": " There it is and you will see that we now have that script.", "tokens": [821, 309, 307, 293, 291, 486, 536, 300, 321, 586, 362, 300, 5755, 13], "temperature": 0.0, "avg_logprob": -0.10033254774789961, "compression_ratio": 1.46875, "no_speech_prob": 2.0698330160939804e-07}, {"id": 81, "seek": 47648, "start": 476.48, "end": 480.76, "text": " Let's now go ahead and use that script to create our deep learning server.", "tokens": [961, 311, 586, 352, 2286, 293, 764, 300, 5755, 281, 1884, 527, 2452, 2539, 7154, 13], "temperature": 0.0, "avg_logprob": -0.08725278348807829, "compression_ratio": 1.4654377880184333, "no_speech_prob": 8.186312925317907e-07}, {"id": 82, "seek": 47648, "start": 480.76, "end": 489.06, "text": " So we just type bash setup P2.sh hit enter and then we have to wait a minute or so as", "tokens": [407, 321, 445, 2010, 46183, 8657, 430, 17, 13, 2716, 2045, 3242, 293, 550, 321, 362, 281, 1699, 257, 3456, 420, 370, 382], "temperature": 0.0, "avg_logprob": -0.08725278348807829, "compression_ratio": 1.4654377880184333, "no_speech_prob": 8.186312925317907e-07}, {"id": 83, "seek": 47648, "start": 489.06, "end": 495.88, "text": " it runs through all of the configuration steps asking Amazon Web Services to create each", "tokens": [309, 6676, 807, 439, 295, 264, 11694, 4439, 3365, 6795, 9573, 12124, 281, 1884, 1184], "temperature": 0.0, "avg_logprob": -0.08725278348807829, "compression_ratio": 1.4654377880184333, "no_speech_prob": 8.186312925317907e-07}, {"id": 84, "seek": 47648, "start": 495.88, "end": 498.20000000000005, "text": " piece of this puzzle.", "tokens": [2522, 295, 341, 12805, 13], "temperature": 0.0, "avg_logprob": -0.08725278348807829, "compression_ratio": 1.4654377880184333, "no_speech_prob": 8.186312925317907e-07}, {"id": 85, "seek": 47648, "start": 498.20000000000005, "end": 503.64000000000004, "text": " It's going to set up a virtual network for us.", "tokens": [467, 311, 516, 281, 992, 493, 257, 6374, 3209, 337, 505, 13], "temperature": 0.0, "avg_logprob": -0.08725278348807829, "compression_ratio": 1.4654377880184333, "no_speech_prob": 8.186312925317907e-07}, {"id": 86, "seek": 50364, "start": 503.64, "end": 506.96, "text": " It is going to set up a security key for us.", "tokens": [467, 307, 516, 281, 992, 493, 257, 3825, 2141, 337, 505, 13], "temperature": 0.0, "avg_logprob": -0.14964244186237294, "compression_ratio": 1.6411483253588517, "no_speech_prob": 1.7330369246337796e-06}, {"id": 87, "seek": 50364, "start": 506.96, "end": 512.72, "text": " It is going to set up an IP address for us and then it's going to connect all that up", "tokens": [467, 307, 516, 281, 992, 493, 364, 8671, 2985, 337, 505, 293, 550, 309, 311, 516, 281, 1745, 439, 300, 493], "temperature": 0.0, "avg_logprob": -0.14964244186237294, "compression_ratio": 1.6411483253588517, "no_speech_prob": 1.7330369246337796e-06}, {"id": 88, "seek": 50364, "start": 512.72, "end": 516.1999999999999, "text": " to our requested server.", "tokens": [281, 527, 16436, 7154, 13], "temperature": 0.0, "avg_logprob": -0.14964244186237294, "compression_ratio": 1.6411483253588517, "no_speech_prob": 1.7330369246337796e-06}, {"id": 89, "seek": 50364, "start": 516.1999999999999, "end": 519.04, "text": " AWS calls it an instance.", "tokens": [17650, 5498, 309, 364, 5197, 13], "temperature": 0.0, "avg_logprob": -0.14964244186237294, "compression_ratio": 1.6411483253588517, "no_speech_prob": 1.7330369246337796e-06}, {"id": 90, "seek": 50364, "start": 519.04, "end": 524.0, "text": " So you can see it's setting up the instance now and waiting for it to start.", "tokens": [407, 291, 393, 536, 309, 311, 3287, 493, 264, 5197, 586, 293, 3806, 337, 309, 281, 722, 13], "temperature": 0.0, "avg_logprob": -0.14964244186237294, "compression_ratio": 1.6411483253588517, "no_speech_prob": 1.7330369246337796e-06}, {"id": 91, "seek": 50364, "start": 524.0, "end": 528.72, "text": " The permission denied error I'm getting on my AWS key there is simply because I have", "tokens": [440, 11226, 17774, 6713, 286, 478, 1242, 322, 452, 17650, 2141, 456, 307, 2935, 570, 286, 362], "temperature": 0.0, "avg_logprob": -0.14964244186237294, "compression_ratio": 1.6411483253588517, "no_speech_prob": 1.7330369246337796e-06}, {"id": 92, "seek": 52872, "start": 528.72, "end": 535.88, "text": " not run this script before so it's going to regenerate an SSH key when I already have", "tokens": [406, 1190, 341, 5755, 949, 370, 309, 311, 516, 281, 26358, 473, 364, 12238, 39, 2141, 562, 286, 1217, 362], "temperature": 0.0, "avg_logprob": -0.11878547885201195, "compression_ratio": 1.63, "no_speech_prob": 1.0845049018826103e-06}, {"id": 93, "seek": 52872, "start": 535.88, "end": 536.88, "text": " one.", "tokens": [472, 13], "temperature": 0.0, "avg_logprob": -0.11878547885201195, "compression_ratio": 1.63, "no_speech_prob": 1.0845049018826103e-06}, {"id": 94, "seek": 52872, "start": 536.88, "end": 540.28, "text": " So if you get that error message don't worry it just means that you've run this script", "tokens": [407, 498, 291, 483, 300, 6713, 3636, 500, 380, 3292, 309, 445, 1355, 300, 291, 600, 1190, 341, 5755], "temperature": 0.0, "avg_logprob": -0.11878547885201195, "compression_ratio": 1.63, "no_speech_prob": 1.0845049018826103e-06}, {"id": 95, "seek": 52872, "start": 540.28, "end": 544.88, "text": " once before.", "tokens": [1564, 949, 13], "temperature": 0.0, "avg_logprob": -0.11878547885201195, "compression_ratio": 1.63, "no_speech_prob": 1.0845049018826103e-06}, {"id": 96, "seek": 52872, "start": 544.88, "end": 549.28, "text": " So the script has finished running and you can see it's created a number of things and", "tokens": [407, 264, 5755, 575, 4335, 2614, 293, 291, 393, 536, 309, 311, 2942, 257, 1230, 295, 721, 293], "temperature": 0.0, "avg_logprob": -0.11878547885201195, "compression_ratio": 1.63, "no_speech_prob": 1.0845049018826103e-06}, {"id": 97, "seek": 52872, "start": 549.28, "end": 553.1600000000001, "text": " let us know the details to each of them as well.", "tokens": [718, 505, 458, 264, 4365, 281, 1184, 295, 552, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.11878547885201195, "compression_ratio": 1.63, "no_speech_prob": 1.0845049018826103e-06}, {"id": 98, "seek": 55316, "start": 553.16, "end": 562.8, "text": " I strongly suggest that you copy and paste these somewhere convenient.", "tokens": [286, 10613, 3402, 300, 291, 5055, 293, 9163, 613, 4079, 10851, 13], "temperature": 0.0, "avg_logprob": -0.1868914892507154, "compression_ratio": 1.3484848484848484, "no_speech_prob": 2.6015752609964693e-06}, {"id": 99, "seek": 55316, "start": 562.8, "end": 565.9599999999999, "text": " It will be useful to use them again later.", "tokens": [467, 486, 312, 4420, 281, 764, 552, 797, 1780, 13], "temperature": 0.0, "avg_logprob": -0.1868914892507154, "compression_ratio": 1.3484848484848484, "no_speech_prob": 2.6015752609964693e-06}, {"id": 100, "seek": 55316, "start": 565.9599999999999, "end": 573.04, "text": " But most importantly let's try now connecting to our new server.", "tokens": [583, 881, 8906, 718, 311, 853, 586, 11015, 281, 527, 777, 7154, 13], "temperature": 0.0, "avg_logprob": -0.1868914892507154, "compression_ratio": 1.3484848484848484, "no_speech_prob": 2.6015752609964693e-06}, {"id": 101, "seek": 57304, "start": 573.04, "end": 585.36, "text": " So I'm going to copy the connect line here, paste it into our console, type yes to say", "tokens": [407, 286, 478, 516, 281, 5055, 264, 1745, 1622, 510, 11, 9163, 309, 666, 527, 11076, 11, 2010, 2086, 281, 584], "temperature": 0.0, "avg_logprob": -0.15035213962677987, "compression_ratio": 1.4191616766467066, "no_speech_prob": 2.156796199415112e-06}, {"id": 102, "seek": 57304, "start": 585.36, "end": 592.16, "text": " we are happy with the authenticity of the host and we are in.", "tokens": [321, 366, 2055, 365, 264, 34215, 295, 264, 3975, 293, 321, 366, 294, 13], "temperature": 0.0, "avg_logprob": -0.15035213962677987, "compression_ratio": 1.4191616766467066, "no_speech_prob": 2.156796199415112e-06}, {"id": 103, "seek": 57304, "start": 592.16, "end": 599.24, "text": " Now that we've logged in we can check that the GPU is working correctly by typing nvidia", "tokens": [823, 300, 321, 600, 27231, 294, 321, 393, 1520, 300, 264, 18407, 307, 1364, 8944, 538, 18444, 297, 43021], "temperature": 0.0, "avg_logprob": -0.15035213962677987, "compression_ratio": 1.4191616766467066, "no_speech_prob": 2.156796199415112e-06}, {"id": 104, "seek": 59924, "start": 599.24, "end": 605.4, "text": " dash smi, this is a handy utility which just checks exactly what's going on.", "tokens": [8240, 899, 72, 11, 341, 307, 257, 13239, 14877, 597, 445, 13834, 2293, 437, 311, 516, 322, 13], "temperature": 0.0, "avg_logprob": -0.11388640602429707, "compression_ratio": 1.556, "no_speech_prob": 5.771792075393023e-06}, {"id": 105, "seek": 59924, "start": 605.4, "end": 610.72, "text": " It shows us that indeed the Nvidia driver is running successfully.", "tokens": [467, 3110, 505, 300, 6451, 264, 46284, 6787, 307, 2614, 10727, 13], "temperature": 0.0, "avg_logprob": -0.11388640602429707, "compression_ratio": 1.556, "no_speech_prob": 5.771792075393023e-06}, {"id": 106, "seek": 59924, "start": 610.72, "end": 617.04, "text": " It has found the graphics card, shows us how much GPU memory we are using and whether anything", "tokens": [467, 575, 1352, 264, 11837, 2920, 11, 3110, 505, 577, 709, 18407, 4675, 321, 366, 1228, 293, 1968, 1340], "temperature": 0.0, "avg_logprob": -0.11388640602429707, "compression_ratio": 1.556, "no_speech_prob": 5.771792075393023e-06}, {"id": 107, "seek": 59924, "start": 617.04, "end": 620.52, "text": " is currently using that GPU.", "tokens": [307, 4362, 1228, 300, 18407, 13], "temperature": 0.0, "avg_logprob": -0.11388640602429707, "compression_ratio": 1.556, "no_speech_prob": 5.771792075393023e-06}, {"id": 108, "seek": 59924, "start": 620.52, "end": 623.2, "text": " So that's all looking pretty good.", "tokens": [407, 300, 311, 439, 1237, 1238, 665, 13], "temperature": 0.0, "avg_logprob": -0.11388640602429707, "compression_ratio": 1.556, "no_speech_prob": 5.771792075393023e-06}, {"id": 109, "seek": 59924, "start": 623.2, "end": 628.16, "text": " The only other thing that I suggest you do is I made a slight mistake when I first set", "tokens": [440, 787, 661, 551, 300, 286, 3402, 291, 360, 307, 286, 1027, 257, 4036, 6146, 562, 286, 700, 992], "temperature": 0.0, "avg_logprob": -0.11388640602429707, "compression_ratio": 1.556, "no_speech_prob": 5.771792075393023e-06}, {"id": 110, "seek": 62816, "start": 628.16, "end": 635.9599999999999, "text": " up this AMI which is I had a file left over which I should have deleted.", "tokens": [493, 341, 6475, 40, 597, 307, 286, 632, 257, 3991, 1411, 670, 597, 286, 820, 362, 22981, 13], "temperature": 0.0, "avg_logprob": -0.12195013869892467, "compression_ratio": 1.5739910313901346, "no_speech_prob": 7.5278298936609644e-06}, {"id": 111, "seek": 62816, "start": 635.9599999999999, "end": 643.76, "text": " So I suggest you delete it by typing sudo rm dot bash underscore history and the reason", "tokens": [407, 286, 3402, 291, 12097, 309, 538, 18444, 459, 2595, 367, 76, 5893, 46183, 37556, 2503, 293, 264, 1778], "temperature": 0.0, "avg_logprob": -0.12195013869892467, "compression_ratio": 1.5739910313901346, "no_speech_prob": 7.5278298936609644e-06}, {"id": 112, "seek": 62816, "start": 643.76, "end": 649.16, "text": " for that is that otherwise it won't save your history which will be pretty inconvenient.", "tokens": [337, 300, 307, 300, 5911, 309, 1582, 380, 3155, 428, 2503, 597, 486, 312, 1238, 46196, 13], "temperature": 0.0, "avg_logprob": -0.12195013869892467, "compression_ratio": 1.5739910313901346, "no_speech_prob": 7.5278298936609644e-06}, {"id": 113, "seek": 62816, "start": 649.16, "end": 652.28, "text": " So the last thing I'm going to do is just make sure that we can actually run a notebook", "tokens": [407, 264, 1036, 551, 286, 478, 516, 281, 360, 307, 445, 652, 988, 300, 321, 393, 767, 1190, 257, 21060], "temperature": 0.0, "avg_logprob": -0.12195013869892467, "compression_ratio": 1.5739910313901346, "no_speech_prob": 7.5278298936609644e-06}, {"id": 114, "seek": 62816, "start": 652.28, "end": 654.14, "text": " successfully.", "tokens": [10727, 13], "temperature": 0.0, "avg_logprob": -0.12195013869892467, "compression_ratio": 1.5739910313901346, "no_speech_prob": 7.5278298936609644e-06}, {"id": 115, "seek": 65414, "start": 654.14, "end": 665.92, "text": " So we'll type Jupyter Notebook and now the notebook is up and running.", "tokens": [407, 321, 603, 2010, 22125, 88, 391, 11633, 2939, 293, 586, 264, 21060, 307, 493, 293, 2614, 13], "temperature": 0.0, "avg_logprob": -0.14189308339899237, "compression_ratio": 1.4375, "no_speech_prob": 5.539139920074376e-07}, {"id": 116, "seek": 65414, "start": 665.92, "end": 670.66, "text": " You can see that it is running at port 8888.", "tokens": [509, 393, 536, 300, 309, 307, 2614, 412, 2436, 1649, 16919, 23, 13], "temperature": 0.0, "avg_logprob": -0.14189308339899237, "compression_ratio": 1.4375, "no_speech_prob": 5.539139920074376e-07}, {"id": 117, "seek": 65414, "start": 670.66, "end": 678.48, "text": " So let's test it and we were told the URL of our instance earlier on and hopefully you", "tokens": [407, 718, 311, 1500, 309, 293, 321, 645, 1907, 264, 12905, 295, 527, 5197, 3071, 322, 293, 4696, 291], "temperature": 0.0, "avg_logprob": -0.14189308339899237, "compression_ratio": 1.4375, "no_speech_prob": 5.539139920074376e-07}, {"id": 118, "seek": 65414, "start": 678.48, "end": 680.3199999999999, "text": " copied it like I suggested.", "tokens": [25365, 309, 411, 286, 10945, 13], "temperature": 0.0, "avg_logprob": -0.14189308339899237, "compression_ratio": 1.4375, "no_speech_prob": 5.539139920074376e-07}, {"id": 119, "seek": 68032, "start": 680.32, "end": 689.2, "text": " So now copy that URL, go to your web browser and go to that URL and then colon 8888 since", "tokens": [407, 586, 5055, 300, 12905, 11, 352, 281, 428, 3670, 11185, 293, 352, 281, 300, 12905, 293, 550, 8255, 1649, 16919, 23, 1670], "temperature": 0.0, "avg_logprob": -0.18749270805945764, "compression_ratio": 1.4814814814814814, "no_speech_prob": 8.851494612827082e-07}, {"id": 120, "seek": 68032, "start": 689.2, "end": 693.72, "text": " that's where we've got our notebook running.", "tokens": [300, 311, 689, 321, 600, 658, 527, 21060, 2614, 13], "temperature": 0.0, "avg_logprob": -0.18749270805945764, "compression_ratio": 1.4814814814814814, "no_speech_prob": 8.851494612827082e-07}, {"id": 121, "seek": 68032, "start": 693.72, "end": 699.96, "text": " As you can see it's password protected and the default password that I've put in is dl", "tokens": [1018, 291, 393, 536, 309, 311, 11524, 10594, 293, 264, 7576, 11524, 300, 286, 600, 829, 294, 307, 37873], "temperature": 0.0, "avg_logprob": -0.18749270805945764, "compression_ratio": 1.4814814814814814, "no_speech_prob": 8.851494612827082e-07}, {"id": 122, "seek": 68032, "start": 699.96, "end": 704.08, "text": " underscore course.", "tokens": [37556, 1164, 13], "temperature": 0.0, "avg_logprob": -0.18749270805945764, "compression_ratio": 1.4814814814814814, "no_speech_prob": 8.851494612827082e-07}, {"id": 123, "seek": 70408, "start": 704.08, "end": 714.8000000000001, "text": " So type dl underscore course and login.", "tokens": [407, 2010, 37873, 37556, 1164, 293, 24276, 13], "temperature": 0.0, "avg_logprob": -0.24012363563149663, "compression_ratio": 1.404109589041096, "no_speech_prob": 3.927856084828818e-07}, {"id": 124, "seek": 70408, "start": 714.8000000000001, "end": 720.6800000000001, "text": " Let's go to the notebooks directory, nbs and let's create a notebook just to make sure", "tokens": [961, 311, 352, 281, 264, 43782, 21120, 11, 297, 929, 293, 718, 311, 1884, 257, 21060, 445, 281, 652, 988], "temperature": 0.0, "avg_logprob": -0.24012363563149663, "compression_ratio": 1.404109589041096, "no_speech_prob": 3.927856084828818e-07}, {"id": 125, "seek": 70408, "start": 720.6800000000001, "end": 723.6, "text": " it all works ok.", "tokens": [309, 439, 1985, 3133, 13], "temperature": 0.0, "avg_logprob": -0.24012363563149663, "compression_ratio": 1.404109589041096, "no_speech_prob": 3.927856084828818e-07}, {"id": 126, "seek": 70408, "start": 723.6, "end": 729.8000000000001, "text": " New python condor root.", "tokens": [1873, 38797, 2224, 284, 5593, 13], "temperature": 0.0, "avg_logprob": -0.24012363563149663, "compression_ratio": 1.404109589041096, "no_speech_prob": 3.927856084828818e-07}, {"id": 127, "seek": 70408, "start": 729.8000000000001, "end": 732.5600000000001, "text": " Let's try doing a simple calculation.", "tokens": [961, 311, 853, 884, 257, 2199, 17108, 13], "temperature": 0.0, "avg_logprob": -0.24012363563149663, "compression_ratio": 1.404109589041096, "no_speech_prob": 3.927856084828818e-07}, {"id": 128, "seek": 73256, "start": 732.56, "end": 734.9599999999999, "text": " I believe that is accurate.", "tokens": [286, 1697, 300, 307, 8559, 13], "temperature": 0.0, "avg_logprob": -0.16177162492131614, "compression_ratio": 1.5555555555555556, "no_speech_prob": 3.2377272418671055e-06}, {"id": 129, "seek": 73256, "start": 734.9599999999999, "end": 743.76, "text": " Let's try importing theano which is the underlying library we're using for accessing the GPU.", "tokens": [961, 311, 853, 43866, 264, 3730, 597, 307, 264, 14217, 6405, 321, 434, 1228, 337, 26440, 264, 18407, 13], "temperature": 0.0, "avg_logprob": -0.16177162492131614, "compression_ratio": 1.5555555555555556, "no_speech_prob": 3.2377272418671055e-06}, {"id": 130, "seek": 73256, "start": 743.76, "end": 749.5999999999999, "text": " Great, that's working well.", "tokens": [3769, 11, 300, 311, 1364, 731, 13], "temperature": 0.0, "avg_logprob": -0.16177162492131614, "compression_ratio": 1.5555555555555556, "no_speech_prob": 3.2377272418671055e-06}, {"id": 131, "seek": 73256, "start": 749.5999999999999, "end": 754.1199999999999, "text": " And then secondly let's make sure we can use Keras which is a wrapper on top of theano", "tokens": [400, 550, 26246, 718, 311, 652, 988, 321, 393, 764, 591, 6985, 597, 307, 257, 46906, 322, 1192, 295, 264, 3730], "temperature": 0.0, "avg_logprob": -0.16177162492131614, "compression_ratio": 1.5555555555555556, "no_speech_prob": 3.2377272418671055e-06}, {"id": 132, "seek": 73256, "start": 754.1199999999999, "end": 759.1999999999999, "text": " that we'll be using throughout the course.", "tokens": [300, 321, 603, 312, 1228, 3710, 264, 1164, 13], "temperature": 0.0, "avg_logprob": -0.16177162492131614, "compression_ratio": 1.5555555555555556, "no_speech_prob": 3.2377272418671055e-06}, {"id": 133, "seek": 73256, "start": 759.1999999999999, "end": 760.1999999999999, "text": " That's working well as well.", "tokens": [663, 311, 1364, 731, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.16177162492131614, "compression_ratio": 1.5555555555555556, "no_speech_prob": 3.2377272418671055e-06}, {"id": 134, "seek": 76020, "start": 760.2, "end": 764.9200000000001, "text": " Ok, well it looks like everything is set up correctly and you're ready to start using", "tokens": [3477, 11, 731, 309, 1542, 411, 1203, 307, 992, 493, 8944, 293, 291, 434, 1919, 281, 722, 1228], "temperature": 0.0, "avg_logprob": -0.1319511597415051, "compression_ratio": 1.6898395721925135, "no_speech_prob": 1.228909127348743e-06}, {"id": 135, "seek": 76020, "start": 764.9200000000001, "end": 766.24, "text": " it.", "tokens": [309, 13], "temperature": 0.0, "avg_logprob": -0.1319511597415051, "compression_ratio": 1.6898395721925135, "no_speech_prob": 1.228909127348743e-06}, {"id": 136, "seek": 76020, "start": 766.24, "end": 771.36, "text": " When you're done don't forget to shut down your instance so that you don't get charged", "tokens": [1133, 291, 434, 1096, 500, 380, 2870, 281, 5309, 760, 428, 5197, 370, 300, 291, 500, 380, 483, 11109], "temperature": 0.0, "avg_logprob": -0.1319511597415051, "compression_ratio": 1.6898395721925135, "no_speech_prob": 1.228909127348743e-06}, {"id": 137, "seek": 76020, "start": 771.36, "end": 772.36, "text": " for it.", "tokens": [337, 309, 13], "temperature": 0.0, "avg_logprob": -0.1319511597415051, "compression_ratio": 1.6898395721925135, "no_speech_prob": 1.228909127348743e-06}, {"id": 138, "seek": 76020, "start": 772.36, "end": 778.2800000000001, "text": " You can do that by going back to your AWS console, choosing the instance that you want", "tokens": [509, 393, 360, 300, 538, 516, 646, 281, 428, 17650, 11076, 11, 10875, 264, 5197, 300, 291, 528], "temperature": 0.0, "avg_logprob": -0.1319511597415051, "compression_ratio": 1.6898395721925135, "no_speech_prob": 1.228909127348743e-06}, {"id": 139, "seek": 76020, "start": 778.2800000000001, "end": 786.48, "text": " to shut down and choose instance state stop.", "tokens": [281, 5309, 760, 293, 2826, 5197, 1785, 1590, 13], "temperature": 0.0, "avg_logprob": -0.1319511597415051, "compression_ratio": 1.6898395721925135, "no_speech_prob": 1.228909127348743e-06}, {"id": 140, "seek": 78648, "start": 786.48, "end": 790.24, "text": " Later on I'll show you how to do these things through the command line to save you some", "tokens": [11965, 322, 286, 603, 855, 291, 577, 281, 360, 613, 721, 807, 264, 5622, 1622, 281, 3155, 291, 512], "temperature": 0.0, "avg_logprob": -0.2360972257760855, "compression_ratio": 1.1204819277108433, "no_speech_prob": 1.8610237020766363e-05}, {"id": 141, "seek": 79024, "start": 790.24, "end": 817.28, "text": " time.", "tokens": [50364, 565, 13, 51716], "temperature": 0.0, "avg_logprob": -0.9278711318969727, "compression_ratio": 0.38461538461538464, "no_speech_prob": 0.00039845253922976553}], "language": "en"}